#
# PySNMP MIB module APNL-MODULAR-PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APNL-MODULAR-PDU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, iso, ModuleIdentity, NotificationType, IpAddress, Integer32, Counter32, Counter64, Unsigned32, TimeTicks, ObjectIdentity, MibIdentifier, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "iso", "ModuleIdentity", "NotificationType", "IpAddress", "Integer32", "Counter32", "Counter64", "Unsigned32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
apNederland = ModuleIdentity((1, 3, 6, 1, 4, 1, 29640))
apNederland.setRevisions(('2013-01-24 13:05',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apNederland.setRevisionsDescriptions(('Initial Version',))
if mibBuilder.loadTexts: apNederland.setLastUpdated('201301241000Z')
if mibBuilder.loadTexts: apNederland.setOrganization('AP Nederland')
if mibBuilder.loadTexts: apNederland.setContactInfo('Vincent Veltens <v.veltens@apnederland.nl>')
if mibBuilder.loadTexts: apNederland.setDescription('This MIB module defines the modular PDU version of AP Nederland.')
apnlDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 1))
apnlMib = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 2))
apnlTmp = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 3))
apnlModules = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4))
cm = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 1))
cmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 2))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 3))
pduTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 4))
apnlTest = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 5))
apnlDemo = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 6))
apnlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 7))
pduType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pduModular", 0), ("pduGateway1", 1), ("pduGateway2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduType.setStatus('current')
if mibBuilder.loadTexts: pduType.setDescription('Type of the Pdu. PduModular (0) Modulaire OEC2 PDU communication through SNMPV3, MOD-BUS or AP-BUS in emulation mode. PduGateway1 (1) Gateway to connect OEC1 products with external AP-BUS protocol to OEC2 Manager (SNMPV3). PduGateway2 (2) Gateway to connect OEC2 products with external MOD-BUS to OEC Manager (SNMPV3). ')
pduProductIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduProductIdentifier.setStatus('current')
if mibBuilder.loadTexts: pduProductIdentifier.setDescription('Unique serial number to identify a pdu, the number is between 1 and 65535. ')
pduSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pduSerialNumber.setDescription('PDU onboard Serial Number.')
pduStatus = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pduBusy", 0), ("pduReady1", 1), ("pduAlarm", 2), ("pduError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduStatus.setStatus('current')
if mibBuilder.loadTexts: pduStatus.setDescription('Status of the Pdu. pduBusy (0) Indicates that an admin command is in progress. pduReady (1) The execution of an admin command was successfull. pduAlarm (2) This state is not in use. pduError (3) The execution of an admin command failed.')
pduPower = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 5), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPower.setStatus('current')
if mibBuilder.loadTexts: pduPower.setDescription("The total measured pdu power in Kilo Watt's*Hour.")
pduPowerL1 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 6), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerL1.setStatus('current')
if mibBuilder.loadTexts: pduPowerL1.setDescription("The total measured pdu power in Kilo Watt's*Hour for phase 1.")
pduPowerL2 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 7), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerL2.setStatus('current')
if mibBuilder.loadTexts: pduPowerL2.setDescription("The total measured pdu power in Kilo Watt's*Hour for phase 2.")
pduPowerL3 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 8), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerL3.setStatus('current')
if mibBuilder.loadTexts: pduPowerL3.setDescription("The total measured pdu power in Kilo Watt's*Hour for phase 3.")
pduKvar = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 9), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvar.setReference('http://standby.iea-4e.org/files/otherfiles/0000/0059/PowerFactorBasics.pdf')
if mibBuilder.loadTexts: pduKvar.setStatus('current')
if mibBuilder.loadTexts: pduKvar.setDescription('The total Reactive Power of the pdu. It is the power that magnetic equipment (transformer, motor and relay) needs to produce the magnetizing flux.')
pduKvarL1 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 10), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvarL1.setReference('http://standby.iea-4e.org/files/otherfiles/0000/0059/PowerFactorBasics.pdf')
if mibBuilder.loadTexts: pduKvarL1.setStatus('current')
if mibBuilder.loadTexts: pduKvarL1.setDescription('The total Reactive Power of the pdu for phase 1. It is the power that magnetic equipment (transformer, motor and relay) needs to produce the magnetizing flux.')
pduKvarL2 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 11), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvarL2.setReference('http://standby.iea-4e.org/files/otherfiles/0000/0059/PowerFactorBasics.pdf')
if mibBuilder.loadTexts: pduKvarL2.setStatus('current')
if mibBuilder.loadTexts: pduKvarL2.setDescription('The total Reactive Power of the pdu for phase 2. It is the power that magnetic equipment (transformer, motor and relay) needs to produce the magnetizing flux.')
pduKvarL3 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 12), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvarL3.setReference('http://standby.iea-4e.org/files/otherfiles/0000/0059/PowerFactorBasics.pdf')
if mibBuilder.loadTexts: pduKvarL3.setStatus('current')
if mibBuilder.loadTexts: pduKvarL3.setDescription('The total Reactive Power of the pdu for phase 3. It is the power that magnetic equipment (transformer, motor and relay) needs to produce the magnetizing flux.')
pdulAcurrent = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 13), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdulAcurrent.setStatus('current')
if mibBuilder.loadTexts: pdulAcurrent.setDescription('The total measured ac current for the pdu (in 1/10th Amperes) .')
pduAcurrentL1 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 14), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduAcurrentL1.setStatus('current')
if mibBuilder.loadTexts: pduAcurrentL1.setDescription('The total measured ac current for phase 1 (in 1/10th Amperes).')
pduAcurrentL2 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 15), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduAcurrentL2.setStatus('current')
if mibBuilder.loadTexts: pduAcurrentL2.setDescription('The total measured ac current for phase 2 (in 1/10th Amperes).')
pduAcurrentL3 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 16), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduAcurrentL3.setStatus('current')
if mibBuilder.loadTexts: pduAcurrentL3.setDescription('The total measured ac current for phase 3 (in 1/10th Amperes).')
pduCurIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 17), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurIpAddress.setStatus('current')
if mibBuilder.loadTexts: pduCurIpAddress.setDescription('The current PDU IPv4 Address by which TCP/IP access is available. ')
pduCurSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 18), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurSubNetMask.setStatus('current')
if mibBuilder.loadTexts: pduCurSubNetMask.setDescription('The current PDU IPv4 Subnet Mask used by the Ipstack (e.g: 255.255.255.0).')
pduCurDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 19), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurDefGwAddress.setStatus('current')
if mibBuilder.loadTexts: pduCurDefGwAddress.setDescription('The current PDU IPv4 default gateway address used by the Ipstack (e.g: 192.168.1.1).')
pduNumberOfNodes = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNumberOfNodes.setStatus('current')
if mibBuilder.loadTexts: pduNumberOfNodes.setDescription('Number of items in the node table.')
pduNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNumberOfSensors.setStatus('current')
if mibBuilder.loadTexts: pduNumberOfSensors.setDescription('Number of items in the sensor table.')
pduSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: pduSoftwareVersion.setDescription('PDU software version number.')
pduFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pduFirmwareVersion.setDescription('PDU firmware version number.')
pduBusProtocol = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("apbus", 0), ("modbus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBusProtocol.setStatus('current')
if mibBuilder.loadTexts: pduBusProtocol.setDescription('Selected protocol used on the external bus of the pdu. AP-BUS (0) Protocol used by OEC1 products or by OEC2 products in emulation mode. MOD-BUS (1) Protocol used by OEC2 products.')
pduAdminCommand = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noOp", 0), ("rebootPdu", 1), ("rediscover", 2), ("updateSofware", 3), ("resetConfig", 4), ("resetSNMPv3Config", 5), ("resetNetworkSetting", 6), ("readDataFromBusPdu", 7), ("writeDataToBusPdu", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduAdminCommand.setStatus('current')
if mibBuilder.loadTexts: pduAdminCommand.setDescription('PDU admin management Commands: noOp (0) No operation. rebootPdu (1) Reboot the PDU (to execute new settings). rediscover (2) Not supported. updateSofware (3) Not supported. resetConfig (4) Node and group tables will be cleared . resetSNMPv3Config (5) Not supported. resetNetworkSetting (6) Reset network params: ip address, defualt gatewy, subnet mask. readDataFromBusPdu (7) Read data from a PDU connected to the external bus (address is set in pduBusAddress). writeDataToBusPdu (8) With this command modified data is writen back to the bus PDU (address is set in pduBusAddress). ')
pduStartupIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 26), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduStartupIpAddress.setStatus('current')
if mibBuilder.loadTexts: pduStartupIpAddress.setDescription('Not supported. ')
pduStartupSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 27), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduStartupSubNetMask.setStatus('current')
if mibBuilder.loadTexts: pduStartupSubNetMask.setDescription('Not supported.')
pduStartupDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 28), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduStartupDefGwAddress.setStatus('current')
if mibBuilder.loadTexts: pduStartupDefGwAddress.setDescription('Not supported.')
pduRealTimeClock = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 29), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRealTimeClock.setStatus('current')
if mibBuilder.loadTexts: pduRealTimeClock.setDescription('PDU Real-Time Clock. Maybe set by the manager.')
pduEnableFeatures = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 30), Bits().clone(namedValues=NamedValues(("globalWebEnabled", 0), ("globalUsbEnabled", 1), ("globalSwitchEnabled", 2), ("displaySwitchEnabled", 3), ("webSwitchEnabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnableFeatures.setStatus('current')
if mibBuilder.loadTexts: pduEnableFeatures.setDescription('Array of bits each one an specific feature within the pdu: globalWebEnabled (0) This bit enables the PDU webpages. globalUsbEnabled (1) This bit enables the USB menu. globalSwitchEnabled (2) This bit enables switching in general. displaySwitchEnabled (3) This bit enables switching through the presentation module. webSwitchEnabled (4) This bit enables switching throuhg the web inteface. ')
pduBusAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBusAddress.setStatus('current')
if mibBuilder.loadTexts: pduBusAddress.setDescription('Address used to access this PDU via the external bus. When MOD-BUS protocol is used the address is valid between 1-247. When AP-BUS protocol is used the address is valid between 1-65535. ')
pduName = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('current')
if mibBuilder.loadTexts: pduName.setDescription('Name of the PDU.')
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33), )
if mibBuilder.loadTexts: nodeTable.setStatus('current')
if mibBuilder.loadTexts: nodeTable.setDescription('A table of the modules on the PDU. Each entry represents an module unit. ')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1), ).setIndexNames((0, "APNL-MODULAR-PDU-MIB", "nodeIndex"))
if mibBuilder.loadTexts: nodeEntry.setStatus('current')
if mibBuilder.loadTexts: nodeEntry.setDescription('An port entry in the port table.')
nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: nodeIndex.setStatus('current')
if mibBuilder.loadTexts: nodeIndex.setDescription('The node table Index.')
nodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("typeUnknown", 0), ("typePresModChar", 1), ("typePresModMono", 2), ("typePresModGraph", 3), ("typePowerMeter", 4), ("typePowerMeterSwitch", 5), ("typeSwitch", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeType.setStatus('current')
if mibBuilder.loadTexts: nodeType.setDescription('Type of the node. TypeUnknown (0) Unknown node. TypePresModChar (1) PM LCD Character Module. TypePresModMono (2) PM Mono Graphics Module. TypePresModGraph (3) PM Color Graphics Module. TypePowerMeter (4) Power meter. TypePowerMeterSwitch (5) Switchable power meter. TypeSwitch (6) Switch only. ')
nodeOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOutlet.setStatus('current')
if mibBuilder.loadTexts: nodeOutlet.setDescription('The number associated with the physical outlet of the node. The special value of 0 indicates that this entry is not associated with a physical port.')
nodeAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 4), Bits().clone(namedValues=NamedValues(("trapCurrHi", 0), ("trapCurrLo", 1), ("trapVoltHi", 2), ("trapVoltLo", 3), ("switchOn", 4), ("switchOff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: nodeAlarmStatus.setDescription('Array of bits each one indicates an alarm activated in the alarm selector value. TrapCurrHi (0) The current is to high against the high current threshold. TrapCurrLo (1) The current is to low against the low current threshold. TrapVoltHi (2) The voltage is to high against the high voltage threshold. TrapVoltLo (3) The volage is to low against the low voltage threshold. SwitchOn (4) The switch is on against the switch on bitfield. SwitchOff (5) The switch is off against the switch off bitfield. ')
nodePower = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 5), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePower.setStatus('current')
if mibBuilder.loadTexts: nodePower.setDescription("The measured node power in Kilo Watt's*Hour.")
nodeAcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 6), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeAcurrent.setStatus('current')
if mibBuilder.loadTexts: nodeAcurrent.setDescription('The measured ac current at the node (in 1/10th Amperes).')
nodePeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 7), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePeakCurrent.setStatus('current')
if mibBuilder.loadTexts: nodePeakCurrent.setDescription('The measured max current since last reset of the node (in 1/10th Amperes).')
nodeVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 8), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeVoltage.setStatus('current')
if mibBuilder.loadTexts: nodeVoltage.setDescription('The measured voltage on the node.')
nodeMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 9), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeMinVoltage.setStatus('current')
if mibBuilder.loadTexts: nodeMinVoltage.setDescription('The measured minimum voltage at the node since last reset.')
nodeKvar = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 10), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeKvar.setReference('http://standby.iea-4e.org/files/otherfiles/0000/0059/PowerFactorBasics.pdf')
if mibBuilder.loadTexts: nodeKvar.setStatus('current')
if mibBuilder.loadTexts: nodeKvar.setDescription('The Reactive Power. It is the power that magnetic equipment (transformer, motor and relay) needs to produce the magnetizing flux.')
nodeFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 11), Unsigned32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFrequency.setReference('http://en.wikipedia.org/wiki/Hertz')
if mibBuilder.loadTexts: nodeFrequency.setStatus('current')
if mibBuilder.loadTexts: nodeFrequency.setDescription('The frequency of alternating current in Hertz. e.g 50 in Europe or 60 in USA.')
nodePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 12), Unsigned32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePowerFactor.setReference('http://en.wikipedia.org/wiki/Power_factor')
if mibBuilder.loadTexts: nodePowerFactor.setStatus('current')
if mibBuilder.loadTexts: nodePowerFactor.setDescription('The effective power facton (Cosinus Phi) in percents of the node.')
nodeSwitchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSwitchOperStatus.setStatus('current')
if mibBuilder.loadTexts: nodeSwitchOperStatus.setDescription('The actual operational Status of the node. Unknown (0) not known status. Off (1) switch is off. On (2) switch is on.')
nodeSwitchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSwitchAdminStatus.setStatus('current')
if mibBuilder.loadTexts: nodeSwitchAdminStatus.setDescription('The desired admin Status of the switch. Unknown (0) not known. Off (1) switch is off. On (2) switch is on.')
nodeCurrHiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 15), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeCurrHiThresh.setStatus('current')
if mibBuilder.loadTexts: nodeCurrHiThresh.setDescription('The current high threshold (in 1/10th Amperes).')
nodeCurrLoThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 16), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeCurrLoThresh.setStatus('current')
if mibBuilder.loadTexts: nodeCurrLoThresh.setDescription('The current low threshold (in 1/10th Amperes).')
nodeVoltHiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 17), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeVoltHiThresh.setStatus('current')
if mibBuilder.loadTexts: nodeVoltHiThresh.setDescription('The voltage high threshold.')
nodeVoltLoThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 18), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeVoltLoThresh.setStatus('current')
if mibBuilder.loadTexts: nodeVoltLoThresh.setDescription('The voltage low threshold.')
nodeAlarmSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 19), Bits().clone(namedValues=NamedValues(("trapCurrHi", 0), ("trapCurrLo", 1), ("trapVoltHi", 2), ("trapVoltLo", 3), ("switchOn", 4), ("switchOff", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeAlarmSelector.setStatus('current')
if mibBuilder.loadTexts: nodeAlarmSelector.setDescription('Array of bits each one controls one alarm. TrapCurrHi (0) Enable/disable the high current alarm. TrapCurrLo (1) Enable/disable the low current alarm. TrapVoltHi (2) Enable/disable the high voltage alarm. TrapVoltLo (3) Enable/disable the low voltage alarm. SwitchOn (4) Enable/disable the specific switch on alarm. SwitchOff (5) Enable/disable the specific switch off alarm.')
nodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeName.setStatus('current')
if mibBuilder.loadTexts: nodeName.setDescription('The node name. My be set by manager.')
nodePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("phaseUnknown", 0), ("phaseL1", 1), ("phaseL2", 2), ("phaseL3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodePhase.setStatus('current')
if mibBuilder.loadTexts: nodePhase.setDescription('The measured phase of the node. Maybe assigned when not configured in production. PhaseUnknown (0). PhaseL1 (1). PhaseL2 (2). PhaseL3 (3). ')
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34), )
if mibBuilder.loadTexts: sensorTable.setStatus('current')
if mibBuilder.loadTexts: sensorTable.setDescription('A table of the Sensors on the PDU. Each entry represents an an Sensor unit. ')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1), ).setIndexNames((0, "APNL-MODULAR-PDU-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorEntry.setStatus('current')
if mibBuilder.loadTexts: sensorEntry.setDescription('An Sensor Entry in the Sensor table')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: sensorIndex.setStatus('current')
if mibBuilder.loadTexts: sensorIndex.setDescription('The Sensor table Index.')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("temperature", 1), ("humidity", 2), ("smoke", 3), ("co1", 4), ("vibration", 5), ("doorStatus", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorType.setStatus('current')
if mibBuilder.loadTexts: sensorType.setDescription('Sensor Typ: Measured values are used according to sensor type. Other (0) unknown sensor type. Temperature (1) . Humidity (2). Smoke (3). CO1 (4). Vibration (5). Doorstatus (6).')
sensorAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 3), Bits().clone(namedValues=NamedValues(("trapHi", 0), ("trapLo", 1), ("switchOn", 2), ("switchOff", 3), ("beeperHi", 4), ("beeperLo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: sensorAlarmStatus.setDescription('Array of bits each one indicates an alarm activated in the alarm selector value.')
sensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 4), Integer32()).setUnits('by type').setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValue.setStatus('current')
if mibBuilder.loadTexts: sensorValue.setDescription('The measured value of the sensor, units are depending on sensor type.')
sensorSwitchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSwitchOperStatus.setStatus('current')
if mibBuilder.loadTexts: sensorSwitchOperStatus.setDescription('The actual operational Status of the switch.')
sensorSwitchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSwitchAdminStatus.setStatus('current')
if mibBuilder.loadTexts: sensorSwitchAdminStatus.setDescription('The desired admin Status of the switch.')
sensorHiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 7), Integer32()).setUnits('by type').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHiThresh.setStatus('current')
if mibBuilder.loadTexts: sensorHiThresh.setDescription('High threshold.')
sensorLoThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 8), Integer32()).setUnits('by type').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLoThresh.setStatus('current')
if mibBuilder.loadTexts: sensorLoThresh.setDescription('Low threshold.')
sensorAlarmSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 9), Bits().clone(namedValues=NamedValues(("trapHi", 0), ("trapLo", 1), ("switchOn", 2), ("switchOff", 3), ("beeperHi", 4), ("beeperLo", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmSelector.setStatus('current')
if mibBuilder.loadTexts: sensorAlarmSelector.setDescription('Array of bits each one controls one alarm. E.g trap, beeper etc.')
sensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorName.setStatus('current')
if mibBuilder.loadTexts: sensorName.setDescription('The sensor name. May be set by the manager.')
trapType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("voltageHiAlarm", 0), ("voltageLoAlarm", 1), ("currentHiAlarm", 2), ("currentLoAlarm", 3), ("tempHiAlarm", 4), ("tempLoAlarm", 5), ("humidityHiAlarm", 6), ("humidityLoAlarm", 7), ("switchOnAlarm", 8), ("switchOffAlarm", 9), ("powerHiAlarm", 10), ("blackBoxColdTrap", 11)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapType.setStatus('current')
if mibBuilder.loadTexts: trapType.setDescription('An enumation value to indicate an Alarm trap: pduPduAlarm.')
pduTableType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pduNodeTable", 0), ("pduSensorTable", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pduTableType.setStatus('current')
if mibBuilder.loadTexts: pduTableType.setDescription('The table type.')
trapTableIndex = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapTableIndex.setStatus('current')
if mibBuilder.loadTexts: trapTableIndex.setDescription('The index of the table entry for which the trap is issued.')
trapThreshHoldType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("trapThresholdOther", 0), ("trapThresholdHi", 1), ("trapThresholdLo", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapThreshHoldType.setStatus('current')
if mibBuilder.loadTexts: trapThreshHoldType.setDescription('The threshold type for which the trap is made.')
trapThreshHold = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapThreshHold.setStatus('current')
if mibBuilder.loadTexts: trapThreshHold.setDescription('The threshold reference value.')
pduVoltageAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 6)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: pduVoltageAlarm.setStatus('current')
if mibBuilder.loadTexts: pduVoltageAlarm.setDescription('Voltage alarm.')
pduCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 7)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: pduCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: pduCurrentAlarm.setDescription('Current alaram.')
pduPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 8)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: pduPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: pduPowerAlarm.setDescription('Power alarm.')
sensorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 9)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: sensorAlarm.setStatus('current')
if mibBuilder.loadTexts: sensorAlarm.setDescription('Sensor Alarm: Temperature, Humidity or another type. The sensorType indicates the type of alarm. The sensorValue indicate the measured value.')
pduSwitchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 10)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"))
if mibBuilder.loadTexts: pduSwitchAlarm.setStatus('current')
if mibBuilder.loadTexts: pduSwitchAlarm.setDescription('Not supported.')
mibBuilder.exportSymbols("APNL-MODULAR-PDU-MIB", cm=cm, pduSoftwareVersion=pduSoftwareVersion, nodeEntry=nodeEntry, pduStartupIpAddress=pduStartupIpAddress, sensorAlarmSelector=sensorAlarmSelector, nodeCurrLoThresh=nodeCurrLoThresh, sensorLoThresh=sensorLoThresh, sensorSwitchOperStatus=sensorSwitchOperStatus, pduRealTimeClock=pduRealTimeClock, pduVoltageAlarm=pduVoltageAlarm, apnlMIBConformance=apnlMIBConformance, pduNumberOfNodes=pduNumberOfNodes, pduName=pduName, trapType=trapType, pduSerialNumber=pduSerialNumber, nodeVoltage=nodeVoltage, pduTableType=pduTableType, nodeSwitchOperStatus=nodeSwitchOperStatus, nodeCurrHiThresh=nodeCurrHiThresh, pduPowerL2=pduPowerL2, nodePhase=nodePhase, nodeFrequency=nodeFrequency, apnlTmp=apnlTmp, nodeTable=nodeTable, pduStartupDefGwAddress=pduStartupDefGwAddress, sensorEntry=sensorEntry, apnlDemo=apnlDemo, nodePower=nodePower, nodeAlarmSelector=nodeAlarmSelector, nodeVoltHiThresh=nodeVoltHiThresh, pduBusAddress=pduBusAddress, sensorIndex=sensorIndex, pduTraps=pduTraps, apnlModules=apnlModules, pduAcurrentL1=pduAcurrentL1, pduStartupSubNetMask=pduStartupSubNetMask, pduSwitchAlarm=pduSwitchAlarm, nodeOutlet=nodeOutlet, sensorAlarmStatus=sensorAlarmStatus, sensorHiThresh=sensorHiThresh, pdu=pdu, pduBusProtocol=pduBusProtocol, pduKvarL1=pduKvarL1, nodeMinVoltage=nodeMinVoltage, pduKvar=pduKvar, nodeIndex=nodeIndex, pduCurIpAddress=pduCurIpAddress, PYSNMP_MODULE_ID=apNederland, trapTableIndex=trapTableIndex, pduAcurrentL2=pduAcurrentL2, nodeSwitchAdminStatus=nodeSwitchAdminStatus, trapThreshHoldType=trapThreshHoldType, pduCurSubNetMask=pduCurSubNetMask, cmTraps=cmTraps, nodePeakCurrent=nodePeakCurrent, nodeName=nodeName, pduKvarL3=pduKvarL3, pduKvarL2=pduKvarL2, sensorValue=sensorValue, pduPowerAlarm=pduPowerAlarm, pduAcurrentL3=pduAcurrentL3, pduAdminCommand=pduAdminCommand, pduEnableFeatures=pduEnableFeatures, nodeAcurrent=nodeAcurrent, pduProductIdentifier=pduProductIdentifier, sensorSwitchAdminStatus=sensorSwitchAdminStatus, nodeType=nodeType, sensorAlarm=sensorAlarm, nodeKvar=nodeKvar, sensorTable=sensorTable, nodePowerFactor=nodePowerFactor, sensorName=sensorName, pduPowerL3=pduPowerL3, pduNumberOfSensors=pduNumberOfSensors, apnlDirectory=apnlDirectory, sensorType=sensorType, pduCurDefGwAddress=pduCurDefGwAddress, pduFirmwareVersion=pduFirmwareVersion, apnlMib=apnlMib, pduCurrentAlarm=pduCurrentAlarm, pduPower=pduPower, nodeVoltLoThresh=nodeVoltLoThresh, nodeAlarmStatus=nodeAlarmStatus, pduStatus=pduStatus, pduPowerL1=pduPowerL1, pdulAcurrent=pdulAcurrent, apNederland=apNederland, pduType=pduType, apnlTest=apnlTest, trapThreshHold=trapThreshHold)
