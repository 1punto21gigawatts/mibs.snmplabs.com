#
# PySNMP MIB module Fore-PNNI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-PNNI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NsapPrefix, NsapAddr, software = mibBuilder.importSymbols("Fore-Common-MIB", "NsapPrefix", "NsapAddr", "software")
portNumber, = mibBuilder.importSymbols("Fore-Switch-MIB", "portNumber")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ServiceCategory, pnniMapAddrIndex, PnniNodeId, pnniDTLIndex, TnsPlan, pnniMapOriginatingPortId, PnniMetricsTag, pnniNodeIndex, TnsType, pnniMapOriginatingNodeId, AtmAddrPrefix, PnniPortId, pnniMapAddrAdvertisedPortId, pnniMapIndex, pnniMapAddrAdvertisingNodeId, PnniPrefixLength, PnniNodeIndex = mibBuilder.importSymbols("PNNI-MIB", "ServiceCategory", "pnniMapAddrIndex", "PnniNodeId", "pnniDTLIndex", "TnsPlan", "pnniMapOriginatingPortId", "PnniMetricsTag", "pnniNodeIndex", "TnsType", "pnniMapOriginatingNodeId", "AtmAddrPrefix", "PnniPortId", "pnniMapAddrAdvertisedPortId", "pnniMapIndex", "pnniMapAddrAdvertisingNodeId", "PnniPrefixLength", "PnniNodeIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, TimeTicks, Bits, Counter32, NotificationType, IpAddress, ModuleIdentity, Gauge32, ObjectIdentity, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "TimeTicks", "Bits", "Counter32", "NotificationType", "IpAddress", "ModuleIdentity", "Gauge32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, RowStatus, TruthValue, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention", "TimeStamp")
forePnniGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4))
if mibBuilder.loadTexts: forePnniGroup.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: forePnniGroup.setOrganization('FORE')
if mibBuilder.loadTexts: forePnniGroup.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: forePnniGroup.setDescription('This module implements the FORE Systems extentions to the PNNI MIB.')
pnniGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1))
atmRoutingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2))
pnniIfMapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3))
pnniCrankbackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 9))
pnniParametersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 12))
class PnniPcProfileIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

pnniPcProfileTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1), )
if mibBuilder.loadTexts: pnniPcProfileTable.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileTable.setDescription(' profiles for each service catagory ')
pnniPcProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"))
if mibBuilder.loadTexts: pnniPcProfileEntry.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileEntry.setDescription('')
pnniPcProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 1), PnniPcProfileIndex())
if mibBuilder.loadTexts: pnniPcProfileIndex.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileIndex.setDescription('')
pnniPcProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mgmtEntry", 1), ("cacheEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileType.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileType.setDescription('Indicates whether the profile is dynamic generated or user configured for cache profile there might be avoid node list or prefered node list')
pnniPcProfileServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 3), ServiceCategory().clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileServiceCategory.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileServiceCategory.setDescription('Service category')
pnniPcProfileMinFwdCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileMinFwdCR.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMinFwdCR.setDescription('Minimum forward cell rate')
pnniPcProfileMinRevCR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileMinRevCR.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMinRevCR.setDescription('Minimum reverse cell rate')
pnniPcProfileFwdClpType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clpEqual0", 1), ("clpEqual0Or1", 2))).clone('clpEqual0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileFwdClpType.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileFwdClpType.setDescription('for CBR/VBR only')
pnniPcProfileRevClpType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clpEqual0", 1), ("clpEqual0Or1", 2))).clone('clpEqual0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRevClpType.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileRevClpType.setDescription('for CBR/VBR only')
pnniPcProfileFwdCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileFwdCLR.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileFwdCLR.setDescription('for CBR/VBR only')
pnniPcProfileRevCLR = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRevCLR.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileRevCLR.setDescription('for CBR/VBR only')
pnniPcProfileOptCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileOptCTD.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileOptCTD.setDescription('optimization criteria flag: Multiple trees will be computed for VBR if several are set. For ABR profile, only one of these can be set. If CTD set, CDV is treated as path constraint. Only one can be set of AW and CAW')
pnniPcProfileOptCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileOptCDV.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileOptCDV.setDescription('see above')
pnniPcProfileOptAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aw", 2), ("caw", 3))).clone('aw')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileOptAdminWeight.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileOptAdminWeight.setDescription('see above')
pnniPcProfileRstrVPOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRstrVPOnly.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileRstrVPOnly.setDescription('for all categories')
pnniPcProfileRstrLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRstrLoadBalance.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileRstrLoadBalance.setDescription('for ABR/UBR. True means do not load-balance trees')
pnniPcProfileNumberOfAvoidLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileNumberOfAvoidLinks.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileNumberOfAvoidLinks.setDescription('number of avoided links in this profile for cache profile only')
pnniPcProfileNumberOfPreferLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileNumberOfPreferLinks.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileNumberOfPreferLinks.setDescription('number of preferred links in this profile for cache profile only')
pnniPcProfileNumberOfHits = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileNumberOfHits.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileNumberOfHits.setDescription('number of hits on this profile since it is configured')
pnniPcProfileTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileTimeStamp.setDescription('Time elapsed since last hit in seconds')
pnniPcProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("computed", 2), ("computing", 3), ("touched", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileState.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileState.setDescription('State of the profile, whether it is computed, in computing or topolgy changed')
pnniPcProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileRowStatus.setDescription('for create, modify and delete a profile entry')
pnniPcProfileCongestionBased = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 1, 1, 21), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniPcProfileCongestionBased.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileCongestionBased.setDescription('Indicates if the profile describes a congestion based route')
pnniExportPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2), )
if mibBuilder.loadTexts: pnniExportPolicyTable.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyTable.setDescription(' export policy table ')
pnniExportPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniExportPolicyAddress"), (0, "Fore-PNNI-MIB", "pnniExportPolicyPrefixLength"))
if mibBuilder.loadTexts: pnniExportPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyEntry.setDescription('')
pnniExportPolicyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 1), AtmAddrPrefix())
if mibBuilder.loadTexts: pnniExportPolicyAddress.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyAddress.setDescription('')
pnniExportPolicyPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 2), PnniPrefixLength())
if mibBuilder.loadTexts: pnniExportPolicyPrefixLength.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyPrefixLength.setDescription('')
pnniExportPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("exterior", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyType.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyType.setDescription('')
pnniExportPolicyAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("summary", 1), ("suppress", 2), ("advertise", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyAction.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyAction.setDescription('')
pnniExportPolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("summarizing", 1), ("suppressing", 2), ("advertising", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniExportPolicyState.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyState.setDescription('')
pnniExportPolicyTnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 6), TnsType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyTnsType.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyTnsType.setDescription('')
pnniExportPolicyTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 7), TnsPlan()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyTnsPlan.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyTnsPlan.setDescription('')
pnniExportPolicyTnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyTnsId.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyTnsId.setDescription('')
pnniExportPolicyMetricsTag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 9), PnniMetricsTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyMetricsTag.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyMetricsTag.setDescription('')
pnniExportPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniExportPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: pnniExportPolicyRowStatus.setDescription('')
pnniNodeExtnTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3), )
if mibBuilder.loadTexts: pnniNodeExtnTable.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnTable.setDescription(' Extension to the PNNI Node Table in the PNNI MIB')
pnniNodeExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"))
if mibBuilder.loadTexts: pnniNodeExtnEntry.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnEntry.setDescription('')
pnniNodeExtnDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnDomainID.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnDomainID.setDescription(' The ID of the ATM Routing Domain to which this PNNI Node belongs')
pnniNodeExtnForeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnForeLevel.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnForeLevel.setDescription(' The level of the area to which this PNNI node belongs in the FORE hierarchy')
pnniNodeExtnForeArea = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnForeArea.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnForeArea.setDescription(' the ID of the area in the FORE hierarchy to which this PNNI node belongs')
pnniNodeExtnShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeExtnShutdown.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnShutdown.setDescription(' Specifies whether the node is shutdown or not due to inconsistencies in TDB or due to TDB incremental MALLOC failures.A value of false indicates that the PNNI logical node is not shutdown and participates in all PNNI Protocol operation(s),and a value of true indicates that PNNI logical node is Shutdown and the switch has to be rebooted to bring this PNNI logical node up again.')
pnniNodeExtnLoadBalancing = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnLoadBalancing.setDescription(' Specifies whether the profiles creating during on demand path computation are load balanced.')
pnniNodeExtnAdvertisedPglPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeExtnAdvertisedPglPriority.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnAdvertisedPglPriority.setDescription(' This is the leadership priority value which is actually advertised by the node. This can differ from the configured value for reasons of PGL/LGN-incapability or stability.')
pnniNodeExtnPcCongestionRange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniNodeExtnPcCongestionRange.setStatus('current')
if mibBuilder.loadTexts: pnniNodeExtnPcCongestionRange.setDescription('The range in congestion that path computation will include in a profile tree')
pnniMapRaigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4), )
if mibBuilder.loadTexts: pnniMapRaigTable.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigTable.setDescription('PNNI Map Raig Table')
pnniMapRaigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniMapOriginatingNodeId"), (0, "PNNI-MIB", "pnniMapOriginatingPortId"), (0, "PNNI-MIB", "pnniMapIndex"), (0, "Fore-PNNI-MIB", "pnniMapRaigIndex"))
if mibBuilder.loadTexts: pnniMapRaigEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigEntry.setDescription('')
pnniMapRaigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: pnniMapRaigIndex.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigIndex.setDescription('An index into set of RAIG entries in the MAP entry. For Horizontal Links and Up Links only outgoing RAIG entries are present. For Nodal State IGs RAIG entries are present for both directions.')
pnniMapRaigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigDirection.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigDirection.setDescription('The direction of the link for which this particular set of parameters')
pnniMapRaigFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigFlags.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigFlags.setDescription('Bit mask identifying which service category this RAIG describes. The GCAC CLP Attribute bit is also present.')
pnniMapRaigAdminWt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigAdminWt.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigAdminWt.setDescription('Adminstrative Weight associated with this map entry.')
pnniMapRaigMaximumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigMaximumCellRate.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigMaximumCellRate.setDescription('Maximum Cell Rate (Units : cells/second ).')
pnniMapRaigAvailableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigAvailableCellRate.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigAvailableCellRate.setDescription('Available Cell Rate (Units : cells/second ).')
pnniMapRaigCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellTransferDelay.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigCellTransferDelay.setDescription('Cell Transfer Delay (Units : micro seconds ).')
pnniMapRaigCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellDelayVariation.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigCellDelayVariation.setDescription('Cell Delay Variation (Units : micro seconds ).')
pnniMapRaigCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellLossRatio.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigCellLossRatio.setDescription('Cell Loss Ratio for CLP=0 encoded as the negative logarithm of the value.')
pnniMapRaigCellLossRatio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellLossRatio1.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigCellLossRatio1.setDescription('Cell Loss Ratio for CLP=0+1 encoded as the negative logarithm of the value.')
pnniMapRaigCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigCellRateMargin.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigCellRateMargin.setDescription('Cell Rate Margin in units cells/second. If the optional GCAC related information is not present then this value would be set to zero.')
pnniMapRaigVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapRaigVarianceFactor.setStatus('current')
if mibBuilder.loadTexts: pnniMapRaigVarianceFactor.setDescription('Variance Factor in units 2^-8. If the optional GCAC related information is not present then this value would be set to zero.')
pnniMapAddrRaigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5), )
if mibBuilder.loadTexts: pnniMapAddrRaigTable.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigTable.setDescription('PNNI MapAddr Raig Table')
pnniMapAddrRaigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniMapAddrAdvertisingNodeId"), (0, "PNNI-MIB", "pnniMapAddrAdvertisedPortId"), (0, "PNNI-MIB", "pnniMapAddrIndex"), (0, "Fore-PNNI-MIB", "pnniMapAddrRaigIndex"))
if mibBuilder.loadTexts: pnniMapAddrRaigEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigEntry.setDescription('')
pnniMapAddrRaigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: pnniMapAddrRaigIndex.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigIndex.setDescription('An index into set of RAIG entries in the MapAddr entry. For Horizontal Links and Up Links only outgoing RAIG entries are present. For Nodal State IGs RAIG entries are present for both directions.')
pnniMapAddrRaigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outgoing", 1), ("incoming", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigDirection.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigDirection.setDescription('The direction of the link for which this particular set of parameters')
pnniMapAddrRaigFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigFlags.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigFlags.setDescription('Bit mask identifying which service category this RAIG describes. The GCAC CLP Attribute bit is also present.')
pnniMapAddrRaigAdminWt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigAdminWt.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigAdminWt.setDescription('Adminstrative Weight associated with this MapAddr entry.')
pnniMapAddrRaigMaximumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigMaximumCellRate.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigMaximumCellRate.setDescription('Maximum Cell Rate (Units : cells/second ).')
pnniMapAddrRaigAvailableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigAvailableCellRate.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigAvailableCellRate.setDescription('Available Cell Rate (Units : cells/second ).')
pnniMapAddrRaigCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellTransferDelay.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigCellTransferDelay.setDescription('Cell Transfer Delay (Units : micro seconds ).')
pnniMapAddrRaigCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellDelayVariation.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigCellDelayVariation.setDescription('Cell Delay Variation (Units : micro seconds ).')
pnniMapAddrRaigCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellLossRatio.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigCellLossRatio.setDescription('Cell Loss Ratio for CLP=0 encoded as the negative logarithm of the value.')
pnniMapAddrRaigCellLossRatio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellLossRatio1.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigCellLossRatio1.setDescription('Cell Loss Ratio for CLP=0+1 encoded as the negative logarithm of the value.')
pnniMapAddrRaigCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigCellRateMargin.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigCellRateMargin.setDescription('Cell Rate Margin in units cells/second. If the optional GCAC related information is not present then this value would be set to zero.')
pnniMapAddrRaigVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapAddrRaigVarianceFactor.setStatus('current')
if mibBuilder.loadTexts: pnniMapAddrRaigVarianceFactor.setDescription('Variance Factor in units 2^-8. If the optional GCAC related information is not present then this value would be set to zero.')
pnniPcProfileMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6), )
if mibBuilder.loadTexts: pnniPcProfileMapTable.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapTable.setDescription('PNNI Precomputed Paths Map Table.')
pnniPcProfileMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileMapOptIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileMapNodeId"))
if mibBuilder.loadTexts: pnniPcProfileMapEntry.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapEntry.setDescription('')
pnniPcProfileMapOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPcProfileMapOptIndex.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapOptIndex.setDescription('An index into set of RAIG entries in the MapAddr entry. For Horizontal Links and Up Links only outgoing RAIG entries are present. For Nodal State IGs RAIG entries are present for both directions.')
pnniPcProfileMapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 2), PnniNodeId())
if mibBuilder.loadTexts: pnniPcProfileMapNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapNodeId.setDescription('The nodes on the precomputed paths tree.')
pnniPcProfileMapLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapLocalPort.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapLocalPort.setDescription('The local port the this node connects to the remote node')
pnniPcProfileMapParentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 4), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapParentNode.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapParentNode.setDescription('The remote or parent node')
pnniPcProfileMapAdminWt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapAdminWt.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapAdminWt.setDescription('Adminstrative Weight associated with this MapAddr entry.')
pnniPcProfileMapMaximumCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapMaximumCellRate.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapMaximumCellRate.setDescription('Maximum Cell Rate (Units : cells/second ).')
pnniPcProfileMapAvailableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapAvailableCellRate.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapAvailableCellRate.setDescription('Available Cell Rate (Units : cells/second ).')
pnniPcProfileMapCellTransferDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellTransferDelay.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapCellTransferDelay.setDescription('Cell Transfer Delay (Units : micro seconds ).')
pnniPcProfileMapCellDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellDelayVariation.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapCellDelayVariation.setDescription('Cell Delay Variation (Units : micro seconds ).')
pnniPcProfileMapCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellLossRatio.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapCellLossRatio.setDescription('Cell Loss Ratio for CLP=0 encoded as the negative logarithm of the value.')
pnniPcProfileMapCellLossRatio1 = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellLossRatio1.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapCellLossRatio1.setDescription('Cell Loss Ratio for CLP=0+1 encoded as the negative logarithm of the value.')
pnniPcProfileMapCellRateMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapCellRateMargin.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapCellRateMargin.setDescription('Cell Rate Margin in units cells/second. If the optional GCAC related information is not present then this value would be set to zero.')
pnniPcProfileMapVarianceFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileMapVarianceFactor.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileMapVarianceFactor.setDescription('Variance Factor in units 2^-8. If the optional GCAC related information is not present then this value would be set to zero.')
pnniSpanningTreeMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7), )
if mibBuilder.loadTexts: pnniSpanningTreeMapTable.setStatus('current')
if mibBuilder.loadTexts: pnniSpanningTreeMapTable.setDescription('PNNI Reachability Tree(SpanningTree) Map Table.')
pnniSpanningTreeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniSpanningTreeMapNodeId"))
if mibBuilder.loadTexts: pnniSpanningTreeMapEntry.setStatus('current')
if mibBuilder.loadTexts: pnniSpanningTreeMapEntry.setDescription('')
pnniSpanningTreeMapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 1), PnniNodeId())
if mibBuilder.loadTexts: pnniSpanningTreeMapNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniSpanningTreeMapNodeId.setDescription('The nodes on the Reachability tree.')
pnniSpanningTreeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uptodate", 1), ("linkadded", 2), ("linkdeleted", 3), ("treeclean", 4), ("pglchanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapStatus.setStatus('current')
if mibBuilder.loadTexts: pnniSpanningTreeMapStatus.setDescription('The status of the spanning tree. If links are added or removed then the spanning tree may not be up to date for a while until the tree is updated. If there are link added and deleted, the status will be linkdeleted')
pnniSpanningTreeMapParentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 3), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapParentNode.setStatus('current')
if mibBuilder.loadTexts: pnniSpanningTreeMapParentNode.setDescription('The parent node or the next hop node on the spanning tree')
pnniSpanningTreeMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 4), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapPort.setStatus('current')
if mibBuilder.loadTexts: pnniSpanningTreeMapPort.setDescription('The local port the this node connects to the remote node')
pnniSpanningTreeMapLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hlink", 1), ("uplink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniSpanningTreeMapLinkType.setStatus('current')
if mibBuilder.loadTexts: pnniSpanningTreeMapLinkType.setDescription('The type of the link that connects this noe to the remote node')
pnniConnTreeMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18), )
if mibBuilder.loadTexts: pnniConnTreeMapTable.setStatus('current')
if mibBuilder.loadTexts: pnniConnTreeMapTable.setDescription('PNNI Connectivity Tree(SpanningTree) Map Table.')
pnniConnTreeMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniConnTreeMapNodeId"))
if mibBuilder.loadTexts: pnniConnTreeMapEntry.setStatus('current')
if mibBuilder.loadTexts: pnniConnTreeMapEntry.setDescription('')
pnniConnTreeMapNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 1), PnniNodeId())
if mibBuilder.loadTexts: pnniConnTreeMapNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniConnTreeMapNodeId.setDescription('The nodes on the Connectivity tree.')
pnniConnTreeMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uptodate", 1), ("linkadded", 2), ("linkdeleted", 3), ("treeclean", 4), ("pglchanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapStatus.setStatus('current')
if mibBuilder.loadTexts: pnniConnTreeMapStatus.setDescription('The status of the connectivity tree. If links are added or removed then the tree may not be up to date for a while until the tree is updated. If there are link added and deleted, the status will be linkdeleted')
pnniConnTreeMapParentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 3), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapParentNode.setStatus('current')
if mibBuilder.loadTexts: pnniConnTreeMapParentNode.setDescription('The parent node or the next hop node on the tree')
pnniConnTreeMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 4), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapPort.setStatus('current')
if mibBuilder.loadTexts: pnniConnTreeMapPort.setDescription('The local port the this node connects to the remote node')
pnniConnTreeMapLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hlink", 1), ("uplink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniConnTreeMapLinkType.setStatus('current')
if mibBuilder.loadTexts: pnniConnTreeMapLinkType.setDescription('The type of the link that connects this noe to the remote node')
pnniNodeScStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8), )
if mibBuilder.loadTexts: pnniNodeScStatsTable.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsTable.setDescription(' Scheduler statistics table. ')
pnniNodeScStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"))
if mibBuilder.loadTexts: pnniNodeScStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsEntry.setDescription('')
pnniNodeScStatsNrOfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfEvents.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfEvents.setDescription(' The number of scheduler events')
pnniNodeScStatsNrOfPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfPurges.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfPurges.setDescription(' The number of scheduler queue purges')
pnniNodeScStatsNrOfTimeoutPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfTimeoutPurges.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfTimeoutPurges.setDescription(' The number of times scheduler queues were purged due to xxx timer expiry.')
pnniNodeScStatsNrOfPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfPacketsDropped.setDescription(' The number of packets dropped in the scheduler')
pnniNodeScStatsNrOfHiPriPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfHiPriPktsDropped.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfHiPriPktsDropped.setDescription(' The number of high priority packets dropped in the scheduler')
pnniNodeScStatsNrOfLowPriPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfLowPriPktsDropped.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfLowPriPktsDropped.setDescription(' The number of low priority packets dropped in the scheduler')
pnniNodeScStatsNrOfNodalInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfNodalInfoEvents.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfNodalInfoEvents.setDescription(' The number of significant changes occurred to NodalInformation Information Groups')
pnniNodeScStatsNrOfHorizLinkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfHorizLinkEvents.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfHorizLinkEvents.setDescription(' The number of significant changes occurred to Horizontal Link Information Group.')
pnniNodeScStatsNrOfUpLinkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfUpLinkEvents.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfUpLinkEvents.setDescription(' The number of significant changes occurred to Uplink Information Group.')
pnniNodeScStatsNrOfNodalStateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeScStatsNrOfNodalStateEvents.setStatus('current')
if mibBuilder.loadTexts: pnniNodeScStatsNrOfNodalStateEvents.setDescription(' The number of significant changes occurred to Nodal State Information Group.')
pnniPcProfileAvoidLinkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10), )
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkTable.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkTable.setDescription(' avoid link table for the cache profile')
pnniPcProfileAvoidLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileAvoidLinkIndex"))
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkEntry.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkEntry.setDescription('')
pnniPcProfileAvoidLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkIndex.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkIndex.setDescription('The index to the list of to be avoided links in this profile')
pnniPcProfileAvoidLinkNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkNodeId.setDescription('The nodeid of the node to be avoided')
pnniPcProfileAvoidLinkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkPortId.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkPortId.setDescription('Portid of the link. If it is zero, the node is to be avoided which means all links of this node should be avoided')
pnniPcProfileAvoidLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalLink", 1), ("reverseLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkType.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkType.setDescription('The link type, normal link will in the form of (node, portid, rmtnode) for reverse link it is in form of (node, rmtportid, rmtnode) and it is the reverse reprentation of the uplink (rmtnode, rmtportid, node)')
pnniPcProfileAvoidLinkRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 10, 1, 5), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkRemoteNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfileAvoidLinkRemoteNodeId.setDescription('The remote node id of the link. If portid is zero, then the node is to be avoided not just a link. Remote node id is not available in this case')
pnniPcProfilePreferLinkTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11), )
if mibBuilder.loadTexts: pnniPcProfilePreferLinkTable.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfilePreferLinkTable.setDescription(' Prefered link table for the cache profile')
pnniPcProfilePreferLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfileIndex"), (0, "Fore-PNNI-MIB", "pnniPcProfilePreferLinkIndex"))
if mibBuilder.loadTexts: pnniPcProfilePreferLinkEntry.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfilePreferLinkEntry.setDescription('')
pnniPcProfilePreferLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPcProfilePreferLinkIndex.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfilePreferLinkIndex.setDescription('The index to the list of prefered links in this profile')
pnniPcProfilePreferLinkNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfilePreferLinkNodeId.setDescription('The nodeid of the node is prefered')
pnniPcProfilePreferLinkPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 3), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkPortId.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfilePreferLinkPortId.setDescription('Portid of the link. ')
pnniPcProfilePreferLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalLink", 1), ("reverseLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkType.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfilePreferLinkType.setDescription('The link type, normal link will in the form of (node, portid, rmtnode) for reverse link it is in form of (node, rmtportid, rmtnode) and it is the reverse reprentation of the uplink (rmtnode, rmtportid, node)')
pnniPcProfilePreferLinkRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 11, 1, 5), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPcProfilePreferLinkRemoteNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniPcProfilePreferLinkRemoteNodeId.setDescription('The remote node id of the link.')
pnniDtlListTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15), )
if mibBuilder.loadTexts: pnniDtlListTable.setStatus('current')
if mibBuilder.loadTexts: pnniDtlListTable.setDescription('This table contains a list of Designated Transit Lists (DTLs) and their associated weights.')
pnniDtlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniDtlListTag"), (0, "Fore-PNNI-MIB", "pnniDtlListNodeIndex"), (0, "Fore-PNNI-MIB", "pnniDtlListDtlIndex"))
if mibBuilder.loadTexts: pnniDtlListEntry.setStatus('current')
if mibBuilder.loadTexts: pnniDtlListEntry.setDescription('An entry in the PNNI DTL list table. A DTL list is formed by concatenating rows of the table for which the pnniDtlListIndex is the same.')
pnniDtlListTag = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pnniDtlListTag.setStatus('current')
if mibBuilder.loadTexts: pnniDtlListTag.setDescription('The value of this object specifies the tag associated with a PNNI DTL list in the table. A DTL list is a list of source route entries.')
pnniDtlListNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pnniDtlListNodeIndex.setStatus('current')
if mibBuilder.loadTexts: pnniDtlListNodeIndex.setDescription('A unique pre-configured DTL on a switch is identified by a nodeIndex, dtlIndex pair. This object corresponds to the nodeIndex value of the DTL being referred to.')
pnniDtlListDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pnniDtlListDtlIndex.setStatus('current')
if mibBuilder.loadTexts: pnniDtlListDtlIndex.setDescription('A unique pre-configured DTL on a switch is identified by a nodeIndex, dtlIndex pair. This object corresponds to the dtlIndex value of the DTL being referred to.')
pnniDtlListWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniDtlListWeight.setStatus('current')
if mibBuilder.loadTexts: pnniDtlListWeight.setDescription('The weight specifies the priority of this DTL entry index among all the DTL indices that are specified in the list.')
pnniDtlListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pnniDtlListStatus.setStatus('current')
if mibBuilder.loadTexts: pnniDtlListStatus.setDescription('The status of this DTL entry in the list.')
forePnniDTLTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13), )
if mibBuilder.loadTexts: forePnniDTLTable.setStatus('current')
if mibBuilder.loadTexts: forePnniDTLTable.setDescription('This table holds the validate object for the DTL entries defined in the standard PNNI DTL MIB table.')
forePnniDTLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "PNNI-MIB", "pnniDTLIndex"))
if mibBuilder.loadTexts: forePnniDTLEntry.setStatus('current')
if mibBuilder.loadTexts: forePnniDTLEntry.setDescription('Validate command for the DTL indexed by the node and DTL index.')
forePnniDTLName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forePnniDTLName.setStatus('current')
if mibBuilder.loadTexts: forePnniDTLName.setDescription('The Name of this Directed Designated Transit List')
forePnniDTLValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: forePnniDTLValidity.setStatus('current')
if mibBuilder.loadTexts: forePnniDTLValidity.setDescription('The validity of the DTL referenced by the pnniNodeIndex and pnniDtlIndex. If validation fails, the text describes the cause for failure and the hop at which the dtl failed.')
pnniDtlComputationTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14), )
if mibBuilder.loadTexts: pnniDtlComputationTable.setStatus('current')
if mibBuilder.loadTexts: pnniDtlComputationTable.setDescription('This table provides an interface for the calculation and creation of a DTL.')
pnniDtlComputationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniDtlComputationNodeIndex"), (0, "Fore-PNNI-MIB", "pnniDtlComputationDtlIndex"))
if mibBuilder.loadTexts: pnniDtlComputationEntry.setStatus('current')
if mibBuilder.loadTexts: pnniDtlComputationEntry.setDescription('A structure containing the parameters for creation of a directed DTL.')
pnniDtlComputationNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 1), PnniNodeIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationNodeIndex.setStatus('current')
if mibBuilder.loadTexts: pnniDtlComputationNodeIndex.setDescription('The node index of the DTL to be created.')
pnniDtlComputationDtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationDtlIndex.setStatus('current')
if mibBuilder.loadTexts: pnniDtlComputationDtlIndex.setDescription('The DTL index of the DTL to be created.')
pnniDtlComputationDestNsapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 3), NsapAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationDestNsapAddress.setStatus('current')
if mibBuilder.loadTexts: pnniDtlComputationDestNsapAddress.setDescription('The destination NSAP address of the DTL to be created.')
pnniDtlComputationCompute = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniDtlComputationCompute.setStatus('current')
if mibBuilder.loadTexts: pnniDtlComputationCompute.setDescription('When this object is written to, an attempt will be made to compute and create a new DTL with the specified parameters.')
pnniMaxCrankbackTries = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMaxCrankbackTries.setStatus('current')
if mibBuilder.loadTexts: pnniMaxCrankbackTries.setDescription('The maximum number of tries for a given call in the case of receiving crankbacks when attempting to progress the call. This value includes the first attempt at progressing the call also.')
pnniMaxDtlSize = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniMaxDtlSize.setStatus('current')
if mibBuilder.loadTexts: pnniMaxDtlSize.setDescription('The maximum number of hops per DTL supported by this switch. The switch will not process any incoming DTL that has more than this number of hops at any level of the PNNI hierarchy. It will also not generate any calls with more than this number of hops in any DTL at any level of PNNI hierarchy.')
pnniLoadBalancedUbrEnable = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pnniLoadBalancedUbrEnable.setStatus('current')
if mibBuilder.loadTexts: pnniLoadBalancedUbrEnable.setDescription('This value specifies whether LBUBR routing of SPVCs is enabled')
rtDomainTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1), )
if mibBuilder.loadTexts: rtDomainTable.setStatus('current')
if mibBuilder.loadTexts: rtDomainTable.setDescription('A table of routing domains withing the ATM routing module')
rtDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"))
if mibBuilder.loadTexts: rtDomainEntry.setStatus('current')
if mibBuilder.loadTexts: rtDomainEntry.setDescription('A table entry containing administrative routing domain information')
rtDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainID.setStatus('current')
if mibBuilder.loadTexts: rtDomainID.setDescription('The ID of this Routing Domain')
rtDomainDefaultProto = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ftpnni", 1), ("pnni", 2), ("gateway", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainDefaultProto.setStatus('current')
if mibBuilder.loadTexts: rtDomainDefaultProto.setDescription('The Default routing protocol used by this switch')
rtDomainPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 3), NsapPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainPrefix.setStatus('current')
if mibBuilder.loadTexts: rtDomainPrefix.setDescription('The Default Prefix associated with this Domain')
rtDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainName.setStatus('current')
if mibBuilder.loadTexts: rtDomainName.setDescription('The Domain Name of this administrative Routing Domain')
rtDomainDefSumState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainDefSumState.setStatus('current')
if mibBuilder.loadTexts: rtDomainDefSumState.setDescription('The State of the Default Summarization Policy in this domain. If enabled, Default Summarization Policies are activated (peergroup ID of each node in this domain is used as a summarization policy for all other nodes in the domain). If disabled, the default summarization policies are deactivated')
rtDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rtDomainStatus.setStatus('current')
if mibBuilder.loadTexts: rtDomainStatus.setDescription('The entry status of this routing domain')
rtDomainDefaultPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 1, 1, 7), NsapPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtDomainDefaultPrefix.setStatus('current')
if mibBuilder.loadTexts: rtDomainDefaultPrefix.setDescription('The factory-encoded default domain prefix for this switch')
atmrPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2), )
if mibBuilder.loadTexts: atmrPrefixTable.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixTable.setDescription('The atmrPrefixTable is a collection of all addresses reachable with in a domain. This includes all internal reachable addresses, external reachable addresses and locally registered addresses.')
atmrPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"), (0, "Fore-PNNI-MIB", "atmrPrefixAddr"), (0, "Fore-PNNI-MIB", "atmrPrefixLength"))
if mibBuilder.loadTexts: atmrPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixEntry.setDescription('An entry in the table, containing information about a reachable prefix in this switching system.')
atmrPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 1), AtmAddrPrefix())
if mibBuilder.loadTexts: atmrPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixAddr.setDescription('The value of the prefix. In the case where multiple nodes advertised reachability to the same prefix, all the PTEs describes the nodes will be collected in this entry.')
atmrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 2), PnniPrefixLength())
if mibBuilder.loadTexts: atmrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixLength.setDescription('Length of the prefix.')
atmrPrefixFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixFlags.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixFlags.setDescription('Flags indicate the status of the prefix node, this is a bitmask. The description of bits is as follows. Bit Description 1 when set indicates that this prefix node in on the change list 2 when set indicates that the prefix node has been deleted.')
atmrPrefixOwnerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixOwnerLevel.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixOwnerLevel.setDescription('The level of the node that owns this prefix. The meaning of owning a prefix can be explained as the preferred node among the nodes advertising this prefix.')
atmrPrefixOwnerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("bogus", 1), ("admin", 2), ("ftpnni", 3), ("pnni", 4), ("ilmi", 5), ("static", 6), ("atmfint", 7), ("atmfext", 8), ("interdom", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixOwnerProtocol.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixOwnerProtocol.setDescription('The protocol throught which this prefix was learnt from the owner.')
atmrPrefixOwnerPathFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixOwnerPathFlags.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixOwnerPathFlags.setDescription('These flags describe the status of the PTE that owns it. Bit Description 1 when set indicates that this PTE is locally originated and cannot be further summarized.')
atmrPrefixTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPrefixTimeStamp.setStatus('current')
if mibBuilder.loadTexts: atmrPrefixTimeStamp.setDescription('Time this prefix node added/changed.')
atmrPteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3), )
if mibBuilder.loadTexts: atmrPteTable.setStatus('current')
if mibBuilder.loadTexts: atmrPteTable.setDescription('The atmrPteTable collects all the PTEs that are present in the Prefix Table. There is single row for every address known for each source.')
atmrPteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"), (0, "Fore-PNNI-MIB", "atmrPrefixAddr"), (0, "Fore-PNNI-MIB", "atmrPrefixLength"), (0, "Fore-PNNI-MIB", "atmrPteIndex"))
if mibBuilder.loadTexts: atmrPteEntry.setStatus('current')
if mibBuilder.loadTexts: atmrPteEntry.setDescription('An entry in the table, containing information about a reachable address, source and a handle to the source')
atmrPteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: atmrPteIndex.setStatus('current')
if mibBuilder.loadTexts: atmrPteIndex.setDescription('Index to list of ptes belong to this prefix node')
atmrPteProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteProtocolId.setStatus('current')
if mibBuilder.loadTexts: atmrPteProtocolId.setDescription("Protocol's reference/identifier that the exact source of this information. It is tdbhndl for PNNI and nothing for ilmi or other localy registred addresses.")
atmrPteProtocolHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteProtocolHandle.setStatus('current')
if mibBuilder.loadTexts: atmrPteProtocolHandle.setDescription("Protocol's internal handle for this PTE, for pnni it is ptsehndl and for local routes it is the rt_node.")
atmrPteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("bogus", 1), ("admin", 2), ("ftpnni", 3), ("pnni", 4), ("ilmi", 5), ("static", 6), ("atmfint", 7), ("atmfext", 8), ("interdom", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteProtocol.setStatus('current')
if mibBuilder.loadTexts: atmrPteProtocol.setDescription('The protocol through which this prefix was learnt.')
atmrPtePathFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPtePathFlags.setStatus('current')
if mibBuilder.loadTexts: atmrPtePathFlags.setDescription('These flags describe the status of the PTE that owns it. Bit Description 1 when set indicates that this PTE is locally originated and cannot be further summarized.')
atmrPteLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteLevel.setStatus('current')
if mibBuilder.loadTexts: atmrPteLevel.setDescription('The area level of the registerer.')
atmrPteArea = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteArea.setStatus('current')
if mibBuilder.loadTexts: atmrPteArea.setDescription('The id of are to which registerer belongs to.')
atmrPteScope = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteScope.setStatus('current')
if mibBuilder.loadTexts: atmrPteScope.setDescription('The advertisement scope of prefix.')
atmrPteSourceArea = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteSourceArea.setStatus('current')
if mibBuilder.loadTexts: atmrPteSourceArea.setDescription('The id of area from which prefix was learned.')
atmrPteType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteType.setStatus('current')
if mibBuilder.loadTexts: atmrPteType.setDescription('the reachability type of the prefix, its either internal ot external.')
atmrPteTnsLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsLen.setStatus('current')
if mibBuilder.loadTexts: atmrPteTnsLen.setDescription('The length of the TNS ID.')
atmrPteTnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 12), TnsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsType.setStatus('current')
if mibBuilder.loadTexts: atmrPteTnsType.setDescription('Indicates the type of network identification of a specified transit network.')
atmrPteTnsPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 13), TnsPlan()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsPlan.setStatus('current')
if mibBuilder.loadTexts: atmrPteTnsPlan.setDescription('Indicates the network identification plan of a specified transit network.')
atmrPteTnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrPteTnsId.setStatus('current')
if mibBuilder.loadTexts: atmrPteTnsId.setDescription('The identifier of the transit network.')
atmrInterDomainRouteTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4), )
if mibBuilder.loadTexts: atmrInterDomainRouteTable.setStatus('current')
if mibBuilder.loadTexts: atmrInterDomainRouteTable.setDescription('A table of static inter-domain routes within the ATMR module')
atmrInterDomainRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "atmrIDRDomainID"), (0, "Fore-PNNI-MIB", "atmrIDRAddr"), (0, "Fore-PNNI-MIB", "atmrIDRAddrLen"), (0, "Fore-PNNI-MIB", "atmrIDRDestDomainID"))
if mibBuilder.loadTexts: atmrInterDomainRouteEntry.setStatus('current')
if mibBuilder.loadTexts: atmrInterDomainRouteEntry.setDescription('A table entry containing an inter-domain static route')
atmrIDRDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRDomainID.setStatus('current')
if mibBuilder.loadTexts: atmrIDRDomainID.setDescription('The ID of this Routing Domain to which this static route belongs. This static route gets installed in the Prefix Tree of this domain and gets exported all nodes (PNNI and FT-PNNI) operating in this domain')
atmrIDRAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 2), AtmAddrPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRAddr.setStatus('current')
if mibBuilder.loadTexts: atmrIDRAddr.setDescription('This is the ATM Addr Prefix which is the reachable address prefix')
atmrIDRAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 3), PnniPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRAddrLen.setStatus('current')
if mibBuilder.loadTexts: atmrIDRAddrLen.setDescription('The prefix length to be applied to the ATM address prefix')
atmrIDRDestDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRDestDomainID.setStatus('current')
if mibBuilder.loadTexts: atmrIDRDestDomainID.setDescription('The ID of the destination Domain in which this reachable prefix is actually reachable')
atmrIDRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmrIDRRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmrIDRRowStatus.setDescription('To create, delete, activate and de-activate a Inter-Domain route entries.')
atmrDestNsapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 5), )
if mibBuilder.loadTexts: atmrDestNsapTable.setStatus('current')
if mibBuilder.loadTexts: atmrDestNsapTable.setDescription('A table of containing NSAP addresses for each AtmIf in a routing domain. This is used for SPVCCs and SPVPCs.')
atmrDestNsapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 5, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "rtDomainID"), (0, "Fore-Switch-MIB", "portNumber"))
if mibBuilder.loadTexts: atmrDestNsapEntry.setStatus('current')
if mibBuilder.loadTexts: atmrDestNsapEntry.setDescription('An entry in the table, containing the NSAP address for the AtmIf in a domain.')
atmrDestNsapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 2, 5, 1, 1), NsapAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmrDestNsapAddr.setStatus('current')
if mibBuilder.loadTexts: atmrDestNsapAddr.setDescription('The NSAP address of this AtmIf in this domain.')
pnniPortVpiMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1), )
if mibBuilder.loadTexts: pnniPortVpiMapTable.setStatus('current')
if mibBuilder.loadTexts: pnniPortVpiMapTable.setDescription(' Hardware Port table for converting Port VPI to ifix and portid in pnni ')
pnniPortVpiMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniPortVpiMapPort"), (0, "Fore-PNNI-MIB", "pnniPortVpiMapVpi"))
if mibBuilder.loadTexts: pnniPortVpiMapEntry.setStatus('current')
if mibBuilder.loadTexts: pnniPortVpiMapEntry.setDescription('')
pnniPortVpiMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: pnniPortVpiMapPort.setStatus('current')
if mibBuilder.loadTexts: pnniPortVpiMapPort.setDescription('Port index')
pnniPortVpiMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: pnniPortVpiMapVpi.setStatus('current')
if mibBuilder.loadTexts: pnniPortVpiMapVpi.setDescription('Vpi index')
pnniPortVpiMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortVpiMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: pnniPortVpiMapIfIndex.setDescription('Pnni interface index')
pnniPortVpiMapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 1, 1, 4), PnniPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortVpiMapPortId.setStatus('current')
if mibBuilder.loadTexts: pnniPortVpiMapPortId.setDescription('Port ID corresponding the interface')
pnniPortIdMapTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2), )
if mibBuilder.loadTexts: pnniPortIdMapTable.setStatus('current')
if mibBuilder.loadTexts: pnniPortIdMapTable.setDescription(' Port ID map table for converting Port ID to port/vpi and ifix')
pnniPortIdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1), ).setIndexNames((0, "Fore-PNNI-MIB", "pnniPortIdMapPortId"))
if mibBuilder.loadTexts: pnniPortIdMapEntry.setStatus('current')
if mibBuilder.loadTexts: pnniPortIdMapEntry.setDescription('')
pnniPortIdMapPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 1), PnniPortId())
if mibBuilder.loadTexts: pnniPortIdMapPortId.setStatus('current')
if mibBuilder.loadTexts: pnniPortIdMapPortId.setDescription('PNNI Port ID corresponding the interface')
pnniPortIdMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortIdMapPort.setStatus('current')
if mibBuilder.loadTexts: pnniPortIdMapPort.setDescription('Port index on the switch')
pnniPortIdMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortIdMapVpi.setStatus('current')
if mibBuilder.loadTexts: pnniPortIdMapVpi.setDescription('VPI index')
pnniPortIdMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 3, 2, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniPortIdMapIfIndex.setStatus('current')
if mibBuilder.loadTexts: pnniPortIdMapIfIndex.setDescription('Pnni interface index')
pnniMapNodeExtTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16), )
if mibBuilder.loadTexts: pnniMapNodeExtTable.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtTable.setDescription('A table containing extended map node information for PNNI nodes running on FORE switches')
pnniMapNodeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniMapNodeExtRemoteNodeId"))
if mibBuilder.loadTexts: pnniMapNodeExtEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtEntry.setDescription('An entry in the table, containing the extended map node information for a particular node.')
pnniMapNodeExtRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 1), PnniNodeId())
if mibBuilder.loadTexts: pnniMapNodeExtRemoteNodeId.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtRemoteNodeId.setDescription('The PNNI node ID of the node being described.')
pnniMapNodeExtSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtSoftwareVersion.setDescription('The version number of the software on the host switch')
pnniMapNodeExtHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtHardwareVersion.setDescription('The version number of the hardware on the host switch')
pnniMapNodeExtHardwareId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtHardwareId.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtHardwareId.setDescription('A value uniquely identifying the host switch')
pnniMapNodeExtSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtSwitchName.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtSwitchName.setDescription('The system name of the host switch')
pnniMapNodeExtRemoteNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtRemoteNodeIndex.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtRemoteNodeIndex.setDescription('The node index of the node on the host switch')
pnniMapNodeExtForeNodalFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeExtForeNodalFlags.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeExtForeNodalFlags.setDescription('A bit vector indicating the status of several flags on the node')
class InterfaceLabel(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

pnniMapNodeIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17), )
if mibBuilder.loadTexts: pnniMapNodeIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeIpAddrTable.setDescription('A table containing the configured IP address of the map nodes. The key is formed by combining the local node index, the remote node id, and the IP address.')
pnniMapNodeIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17, 1), ).setIndexNames((0, "PNNI-MIB", "pnniNodeIndex"), (0, "Fore-PNNI-MIB", "pnniMapNodeExtRemoteNodeId"), (0, "Fore-PNNI-MIB", "pnniMapNodeIpAddr"))
if mibBuilder.loadTexts: pnniMapNodeIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeIpAddrEntry.setDescription('An entry in the switch IP address table.')
pnniMapNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeIpAddr.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeIpAddr.setDescription('The ip address of an interface')
pnniMapNodeIpAddrIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 2, 4, 1, 17, 1, 2), InterfaceLabel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniMapNodeIpAddrIfName.setStatus('current')
if mibBuilder.loadTexts: pnniMapNodeIpAddrIfName.setDescription('The name of the IP address interface')
mibBuilder.exportSymbols("Fore-PNNI-MIB", pnniMapNodeExtEntry=pnniMapNodeExtEntry, pnniMapAddrRaigVarianceFactor=pnniMapAddrRaigVarianceFactor, pnniPcProfileMapOptIndex=pnniPcProfileMapOptIndex, atmrIDRDomainID=atmrIDRDomainID, pnniConnTreeMapStatus=pnniConnTreeMapStatus, pnniPcProfileOptCDV=pnniPcProfileOptCDV, pnniPcProfileEntry=pnniPcProfileEntry, pnniDtlComputationCompute=pnniDtlComputationCompute, rtDomainDefSumState=rtDomainDefSumState, pnniNodeScStatsNrOfPacketsDropped=pnniNodeScStatsNrOfPacketsDropped, PnniPcProfileIndex=PnniPcProfileIndex, pnniPortIdMapPortId=pnniPortIdMapPortId, pnniConnTreeMapLinkType=pnniConnTreeMapLinkType, pnniNodeExtnAdvertisedPglPriority=pnniNodeExtnAdvertisedPglPriority, pnniDtlListTable=pnniDtlListTable, pnniPcProfilePreferLinkTable=pnniPcProfilePreferLinkTable, pnniPcProfileNumberOfHits=pnniPcProfileNumberOfHits, pnniPcProfileAvoidLinkNodeId=pnniPcProfileAvoidLinkNodeId, pnniExportPolicyTnsId=pnniExportPolicyTnsId, pnniExportPolicyMetricsTag=pnniExportPolicyMetricsTag, pnniMapAddrRaigEntry=pnniMapAddrRaigEntry, pnniPcProfileMapCellLossRatio=pnniPcProfileMapCellLossRatio, pnniExportPolicyAddress=pnniExportPolicyAddress, pnniMapRaigEntry=pnniMapRaigEntry, forePnniDTLEntry=forePnniDTLEntry, atmrPteType=atmrPteType, atmrIDRDestDomainID=atmrIDRDestDomainID, pnniIfMapGroup=pnniIfMapGroup, pnniExportPolicyPrefixLength=pnniExportPolicyPrefixLength, atmrPrefixOwnerProtocol=atmrPrefixOwnerProtocol, pnniMapAddrRaigTable=pnniMapAddrRaigTable, pnniLoadBalancedUbrEnable=pnniLoadBalancedUbrEnable, pnniGroup=pnniGroup, pnniPcProfileMapVarianceFactor=pnniPcProfileMapVarianceFactor, rtDomainPrefix=rtDomainPrefix, pnniMapAddrRaigCellRateMargin=pnniMapAddrRaigCellRateMargin, PYSNMP_MODULE_ID=forePnniGroup, atmrPrefixLength=atmrPrefixLength, pnniSpanningTreeMapLinkType=pnniSpanningTreeMapLinkType, pnniNodeScStatsNrOfTimeoutPurges=pnniNodeScStatsNrOfTimeoutPurges, atmrPteTnsPlan=atmrPteTnsPlan, pnniExportPolicyEntry=pnniExportPolicyEntry, pnniMapRaigAdminWt=pnniMapRaigAdminWt, pnniConnTreeMapEntry=pnniConnTreeMapEntry, pnniNodeScStatsNrOfEvents=pnniNodeScStatsNrOfEvents, pnniPcProfilePreferLinkPortId=pnniPcProfilePreferLinkPortId, pnniMaxDtlSize=pnniMaxDtlSize, atmrPrefixTimeStamp=atmrPrefixTimeStamp, pnniPcProfileMapTable=pnniPcProfileMapTable, atmrPteProtocol=atmrPteProtocol, pnniMapAddrRaigCellLossRatio1=pnniMapAddrRaigCellLossRatio1, pnniMapAddrRaigMaximumCellRate=pnniMapAddrRaigMaximumCellRate, pnniDtlComputationDestNsapAddress=pnniDtlComputationDestNsapAddress, atmrPrefixEntry=atmrPrefixEntry, pnniPcProfileTimeStamp=pnniPcProfileTimeStamp, pnniPcProfileFwdCLR=pnniPcProfileFwdCLR, pnniPcProfileMapCellDelayVariation=pnniPcProfileMapCellDelayVariation, pnniDtlComputationDtlIndex=pnniDtlComputationDtlIndex, pnniMapNodeIpAddrTable=pnniMapNodeIpAddrTable, pnniMapRaigCellTransferDelay=pnniMapRaigCellTransferDelay, pnniPortIdMapPort=pnniPortIdMapPort, pnniNodeExtnPcCongestionRange=pnniNodeExtnPcCongestionRange, atmrPtePathFlags=atmrPtePathFlags, rtDomainDefaultPrefix=rtDomainDefaultPrefix, pnniPortVpiMapPortId=pnniPortVpiMapPortId, atmrPrefixOwnerLevel=atmrPrefixOwnerLevel, pnniExportPolicyTnsPlan=pnniExportPolicyTnsPlan, pnniPcProfileRevClpType=pnniPcProfileRevClpType, pnniPcProfileMinRevCR=pnniPcProfileMinRevCR, pnniMapAddrRaigAdminWt=pnniMapAddrRaigAdminWt, rtDomainName=rtDomainName, atmrPteSourceArea=atmrPteSourceArea, pnniPcProfileMapAdminWt=pnniPcProfileMapAdminWt, pnniMapRaigCellDelayVariation=pnniMapRaigCellDelayVariation, atmrPteEntry=atmrPteEntry, rtDomainTable=rtDomainTable, pnniMapRaigFlags=pnniMapRaigFlags, pnniPcProfileRstrVPOnly=pnniPcProfileRstrVPOnly, pnniNodeExtnShutdown=pnniNodeExtnShutdown, atmrInterDomainRouteEntry=atmrInterDomainRouteEntry, pnniNodeExtnLoadBalancing=pnniNodeExtnLoadBalancing, pnniPcProfileAvoidLinkEntry=pnniPcProfileAvoidLinkEntry, pnniPortVpiMapEntry=pnniPortVpiMapEntry, pnniMapRaigAvailableCellRate=pnniMapRaigAvailableCellRate, pnniPcProfileAvoidLinkRemoteNodeId=pnniPcProfileAvoidLinkRemoteNodeId, atmrPteArea=atmrPteArea, pnniMapNodeExtRemoteNodeIndex=pnniMapNodeExtRemoteNodeIndex, rtDomainStatus=rtDomainStatus, pnniMapAddrRaigIndex=pnniMapAddrRaigIndex, forePnniDTLValidity=forePnniDTLValidity, pnniPcProfileNumberOfPreferLinks=pnniPcProfileNumberOfPreferLinks, pnniDtlListWeight=pnniDtlListWeight, pnniNodeScStatsNrOfUpLinkEvents=pnniNodeScStatsNrOfUpLinkEvents, pnniMapRaigIndex=pnniMapRaigIndex, pnniPortIdMapTable=pnniPortIdMapTable, atmrIDRRowStatus=atmrIDRRowStatus, pnniSpanningTreeMapNodeId=pnniSpanningTreeMapNodeId, pnniMapAddrRaigFlags=pnniMapAddrRaigFlags, pnniPortIdMapIfIndex=pnniPortIdMapIfIndex, atmrPteScope=atmrPteScope, pnniMapNodeExtForeNodalFlags=pnniMapNodeExtForeNodalFlags, pnniDtlListNodeIndex=pnniDtlListNodeIndex, pnniDtlListEntry=pnniDtlListEntry, pnniNodeExtnTable=pnniNodeExtnTable, pnniPcProfileRstrLoadBalance=pnniPcProfileRstrLoadBalance, pnniPcProfileAvoidLinkType=pnniPcProfileAvoidLinkType, pnniPcProfilePreferLinkType=pnniPcProfilePreferLinkType, pnniNodeScStatsEntry=pnniNodeScStatsEntry, atmRoutingGroup=atmRoutingGroup, pnniNodeExtnForeArea=pnniNodeExtnForeArea, pnniPcProfileServiceCategory=pnniPcProfileServiceCategory, pnniNodeScStatsNrOfHiPriPktsDropped=pnniNodeScStatsNrOfHiPriPktsDropped, rtDomainID=rtDomainID, pnniExportPolicyRowStatus=pnniExportPolicyRowStatus, pnniMapRaigCellLossRatio1=pnniMapRaigCellLossRatio1, atmrDestNsapTable=atmrDestNsapTable, forePnniGroup=forePnniGroup, atmrDestNsapAddr=atmrDestNsapAddr, atmrIDRAddr=atmrIDRAddr, pnniPcProfileAvoidLinkPortId=pnniPcProfileAvoidLinkPortId, pnniPcProfileRevCLR=pnniPcProfileRevCLR, atmrPrefixAddr=atmrPrefixAddr, pnniPcProfileMapEntry=pnniPcProfileMapEntry, pnniSpanningTreeMapParentNode=pnniSpanningTreeMapParentNode, pnniExportPolicyAction=pnniExportPolicyAction, pnniExportPolicyTnsType=pnniExportPolicyTnsType, rtDomainDefaultProto=rtDomainDefaultProto, pnniMapAddrRaigCellDelayVariation=pnniMapAddrRaigCellDelayVariation, pnniPcProfileMapCellRateMargin=pnniPcProfileMapCellRateMargin, atmrPrefixFlags=atmrPrefixFlags, atmrPrefixTable=atmrPrefixTable, pnniPcProfileState=pnniPcProfileState, pnniParametersGroup=pnniParametersGroup, atmrPteLevel=atmrPteLevel, pnniMapRaigCellLossRatio=pnniMapRaigCellLossRatio, atmrPteProtocolHandle=atmrPteProtocolHandle, pnniSpanningTreeMapStatus=pnniSpanningTreeMapStatus, pnniPcProfilePreferLinkEntry=pnniPcProfilePreferLinkEntry, pnniDtlListTag=pnniDtlListTag, atmrPteIndex=atmrPteIndex, pnniMapAddrRaigCellTransferDelay=pnniMapAddrRaigCellTransferDelay, pnniNodeExtnDomainID=pnniNodeExtnDomainID, pnniPortVpiMapVpi=pnniPortVpiMapVpi, pnniConnTreeMapNodeId=pnniConnTreeMapNodeId, pnniPortIdMapEntry=pnniPortIdMapEntry, pnniMapNodeExtTable=pnniMapNodeExtTable, pnniPcProfileCongestionBased=pnniPcProfileCongestionBased, atmrPteTnsType=atmrPteTnsType, pnniNodeScStatsNrOfNodalStateEvents=pnniNodeScStatsNrOfNodalStateEvents, pnniPcProfileFwdClpType=pnniPcProfileFwdClpType, pnniNodeScStatsNrOfHorizLinkEvents=pnniNodeScStatsNrOfHorizLinkEvents, pnniConnTreeMapPort=pnniConnTreeMapPort, pnniSpanningTreeMapEntry=pnniSpanningTreeMapEntry, pnniPcProfileMinFwdCR=pnniPcProfileMinFwdCR, pnniPcProfileTable=pnniPcProfileTable, pnniPcProfileType=pnniPcProfileType, pnniDtlListStatus=pnniDtlListStatus, pnniNodeExtnForeLevel=pnniNodeExtnForeLevel, pnniNodeScStatsNrOfNodalInfoEvents=pnniNodeScStatsNrOfNodalInfoEvents, pnniMapRaigDirection=pnniMapRaigDirection, pnniCrankbackGroup=pnniCrankbackGroup, pnniMapNodeExtHardwareId=pnniMapNodeExtHardwareId, pnniPcProfileNumberOfAvoidLinks=pnniPcProfileNumberOfAvoidLinks, pnniPcProfileOptAdminWeight=pnniPcProfileOptAdminWeight, atmrPteTnsLen=atmrPteTnsLen, pnniMapNodeExtHardwareVersion=pnniMapNodeExtHardwareVersion, pnniPortIdMapVpi=pnniPortIdMapVpi, pnniNodeScStatsNrOfPurges=pnniNodeScStatsNrOfPurges, atmrPrefixOwnerPathFlags=atmrPrefixOwnerPathFlags, pnniMapNodeIpAddrEntry=pnniMapNodeIpAddrEntry, pnniPcProfileIndex=pnniPcProfileIndex, pnniMapNodeIpAddr=pnniMapNodeIpAddr, pnniConnTreeMapTable=pnniConnTreeMapTable, atmrDestNsapEntry=atmrDestNsapEntry, atmrInterDomainRouteTable=atmrInterDomainRouteTable, pnniMapNodeExtSwitchName=pnniMapNodeExtSwitchName, atmrPteTnsId=atmrPteTnsId, pnniPcProfileAvoidLinkIndex=pnniPcProfileAvoidLinkIndex, forePnniDTLName=forePnniDTLName, atmrPteTable=atmrPteTable, pnniPcProfileAvoidLinkTable=pnniPcProfileAvoidLinkTable, pnniPcProfilePreferLinkIndex=pnniPcProfilePreferLinkIndex, pnniMapRaigMaximumCellRate=pnniMapRaigMaximumCellRate, pnniDtlListDtlIndex=pnniDtlListDtlIndex, atmrPteProtocolId=atmrPteProtocolId, pnniPortVpiMapIfIndex=pnniPortVpiMapIfIndex, pnniPcProfileMapAvailableCellRate=pnniPcProfileMapAvailableCellRate, pnniMapNodeExtSoftwareVersion=pnniMapNodeExtSoftwareVersion, pnniExportPolicyTable=pnniExportPolicyTable, pnniMapAddrRaigDirection=pnniMapAddrRaigDirection, pnniNodeScStatsTable=pnniNodeScStatsTable, pnniPcProfilePreferLinkNodeId=pnniPcProfilePreferLinkNodeId, forePnniDTLTable=forePnniDTLTable, pnniConnTreeMapParentNode=pnniConnTreeMapParentNode, pnniPortVpiMapTable=pnniPortVpiMapTable, pnniMapNodeIpAddrIfName=pnniMapNodeIpAddrIfName, pnniDtlComputationEntry=pnniDtlComputationEntry, pnniSpanningTreeMapPort=pnniSpanningTreeMapPort, pnniMapAddrRaigAvailableCellRate=pnniMapAddrRaigAvailableCellRate, pnniPcProfileMapParentNode=pnniPcProfileMapParentNode, pnniPcProfileRowStatus=pnniPcProfileRowStatus, pnniPcProfileOptCTD=pnniPcProfileOptCTD, pnniSpanningTreeMapTable=pnniSpanningTreeMapTable, pnniMaxCrankbackTries=pnniMaxCrankbackTries, pnniMapNodeExtRemoteNodeId=pnniMapNodeExtRemoteNodeId, pnniExportPolicyType=pnniExportPolicyType, pnniPortVpiMapPort=pnniPortVpiMapPort, pnniMapRaigVarianceFactor=pnniMapRaigVarianceFactor, pnniExportPolicyState=pnniExportPolicyState, pnniPcProfileMapCellLossRatio1=pnniPcProfileMapCellLossRatio1, pnniPcProfileMapMaximumCellRate=pnniPcProfileMapMaximumCellRate, pnniDtlComputationNodeIndex=pnniDtlComputationNodeIndex, pnniPcProfileMapCellTransferDelay=pnniPcProfileMapCellTransferDelay, pnniDtlComputationTable=pnniDtlComputationTable, rtDomainEntry=rtDomainEntry, InterfaceLabel=InterfaceLabel, pnniNodeExtnEntry=pnniNodeExtnEntry, pnniMapRaigTable=pnniMapRaigTable, pnniNodeScStatsNrOfLowPriPktsDropped=pnniNodeScStatsNrOfLowPriPktsDropped, atmrIDRAddrLen=atmrIDRAddrLen, pnniMapAddrRaigCellLossRatio=pnniMapAddrRaigCellLossRatio, pnniPcProfileMapLocalPort=pnniPcProfileMapLocalPort, pnniPcProfileMapNodeId=pnniPcProfileMapNodeId, pnniPcProfilePreferLinkRemoteNodeId=pnniPcProfilePreferLinkRemoteNodeId, pnniMapRaigCellRateMargin=pnniMapRaigCellRateMargin)
