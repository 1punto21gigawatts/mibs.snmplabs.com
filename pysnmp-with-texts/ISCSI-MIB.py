#
# PySNMP MIB module ISCSI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ISCSI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Gauge32, TimeTicks, iso, ModuleIdentity, mib_2, ObjectIdentity, MibIdentifier, Bits, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Gauge32", "TimeTicks", "iso", "ModuleIdentity", "mib-2", "ObjectIdentity", "MibIdentifier", "Bits", "Counter32", "Unsigned32")
TimeStamp, AutonomousType, StorageType, TextualConvention, RowPointer, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "AutonomousType", "StorageType", "TextualConvention", "RowPointer", "RowStatus", "DisplayString", "TruthValue")
iscsiMibModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 142))
iscsiMibModule.setRevisions(('2014-02-18 00:00', '2006-05-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: iscsiMibModule.setRevisionsDescriptions(('Second version of the iSCSI Protocol MIB Module. RFC 7143 makes several updates to [RFC3720]. This version makes corresponding updates to the MIB module. This MIB module published as RFC 7147.', 'Initial version of the iSCSI Protocol MIB module. This MIB module published as RFC 4544.',))
if mibBuilder.loadTexts: iscsiMibModule.setLastUpdated('201402180000Z')
if mibBuilder.loadTexts: iscsiMibModule.setOrganization('IETF STORage Maintenance (STORM) Working Group')
if mibBuilder.loadTexts: iscsiMibModule.setContactInfo(' Working Group Email: storm@ietf.org Attn: Mark Bakke Dell Email: mark_bakke@dell.com Prakash Venkatesen HCL Technologies Email: prakashvn@hcl.com')
if mibBuilder.loadTexts: iscsiMibModule.setDescription("This module defines management information specific to the iSCSI protocol. Copyright (c) 2014 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).")
iscsiNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 0))
iscsiObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1))
iscsiConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 2))
iscsiAdmin = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 3))
class IscsiTransportProtocol(TextualConvention, Unsigned32):
    description = 'This data type is used to define the transport protocols that will carry iSCSI PDUs. Protocol numbers are assigned by IANA. A current list of all assignments is available from <http://www.iana.org/assignments/protocol-numbers/>.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class IscsiDigestMethod(TextualConvention, Integer32):
    reference = 'RFC 7143, Section 13.1, HeaderDigest and DataDigest'
    description = 'This data type represents the methods possible for digest negotiation. none - a placeholder for a secondary digest method that means only the primary method can be used. other - a digest method other than those defined below. noDigest - does not support digests (will operate without a digest (Note: implementations must support digests to be compliant with RFC 7143). CRC32c - require a CRC32C digest.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("other", 2), ("noDigest", 3), ("crc32c", 4))

class IscsiName(TextualConvention, OctetString):
    reference = 'RFC 7143, Section 4.2.7, iSCSI Names.'
    description = 'This data type is used for objects whose value is an iSCSI name with the properties described in RFC 7143, Section 4.2.7.1, and encoded as specified in RFC 7143, Section 4.2.7.2. A zero-length string indicates the absence of an iSCSI name.'
    status = 'current'
    displayHint = '223t'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 223), )
iscsiDescriptors = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 3, 1))
iscsiHeaderIntegrityTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 3, 1, 1))
iscsiHdrIntegrityNone = ObjectIdentity((1, 3, 6, 1, 2, 1, 142, 3, 1, 1, 1))
if mibBuilder.loadTexts: iscsiHdrIntegrityNone.setStatus('current')
if mibBuilder.loadTexts: iscsiHdrIntegrityNone.setDescription('The authoritative identifier when no integrity scheme for the header is being used.')
if mibBuilder.loadTexts: iscsiHdrIntegrityNone.setReference('RFC 7143, Section 13.1, HeaderDigest and DataDigest')
iscsiHdrIntegrityCrc32c = ObjectIdentity((1, 3, 6, 1, 2, 1, 142, 3, 1, 1, 2))
if mibBuilder.loadTexts: iscsiHdrIntegrityCrc32c.setStatus('current')
if mibBuilder.loadTexts: iscsiHdrIntegrityCrc32c.setDescription('The authoritative identifier when the integrity scheme for the header is CRC32c.')
if mibBuilder.loadTexts: iscsiHdrIntegrityCrc32c.setReference('RFC 7143, Section 13.1, HeaderDigest and DataDigest')
iscsiDataIntegrityTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 3, 1, 2))
iscsiDataIntegrityNone = ObjectIdentity((1, 3, 6, 1, 2, 1, 142, 3, 1, 2, 1))
if mibBuilder.loadTexts: iscsiDataIntegrityNone.setStatus('current')
if mibBuilder.loadTexts: iscsiDataIntegrityNone.setDescription('The authoritative identifier when no integrity scheme for the data is being used.')
if mibBuilder.loadTexts: iscsiDataIntegrityNone.setReference('RFC 7143, Section 13.1, HeaderDigest and DataDigest')
iscsiDataIntegrityCrc32c = ObjectIdentity((1, 3, 6, 1, 2, 1, 142, 3, 1, 2, 2))
if mibBuilder.loadTexts: iscsiDataIntegrityCrc32c.setStatus('current')
if mibBuilder.loadTexts: iscsiDataIntegrityCrc32c.setDescription('The authoritative identifier when the integrity scheme for the data is CRC32c.')
if mibBuilder.loadTexts: iscsiDataIntegrityCrc32c.setReference('RFC 7143, Section 13.1, HeaderDigest and DataDigest')
iscsiInstance = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 1))
iscsiInstanceAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 1, 1), )
if mibBuilder.loadTexts: iscsiInstanceAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiInstanceAttributesTable.setDescription('A list of iSCSI instances present on the system.')
iscsiInstanceAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"))
if mibBuilder.loadTexts: iscsiInstanceAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiInstanceAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular iSCSI instance.')
iscsiInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiInstIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiInstIndex.setDescription('An arbitrary integer used to uniquely identify a particular iSCSI instance. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
iscsiInstDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstDescr.setStatus('current')
if mibBuilder.loadTexts: iscsiInstDescr.setDescription('A UTF-8 string, determined by the implementation to describe the iSCSI instance. When only a single instance is present, this object may be set to the zero-length string; with multiple iSCSI instances, it may be used in an implementation-dependent manner to describe the purpose of the respective instance.')
iscsiInstVersionMin = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstVersionMin.setReference('RFC 7143, Section 11.12, Login Request')
if mibBuilder.loadTexts: iscsiInstVersionMin.setStatus('current')
if mibBuilder.loadTexts: iscsiInstVersionMin.setDescription('The minimum version number of the iSCSI specification such that this iSCSI instance supports this minimum value, the maximum value indicated by the corresponding instance in iscsiInstVersionMax, and all versions in between.')
iscsiInstVersionMax = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstVersionMax.setReference('RFC 7143, Section 11.12, Login Request')
if mibBuilder.loadTexts: iscsiInstVersionMax.setStatus('current')
if mibBuilder.loadTexts: iscsiInstVersionMax.setDescription('The maximum version number of the iSCSI specification such that this iSCSI instance supports this maximum value, the minimum value indicated by the corresponding instance in iscsiInstVersionMin, and all versions in between.')
iscsiInstVendorID = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstVendorID.setStatus('current')
if mibBuilder.loadTexts: iscsiInstVendorID.setDescription('A UTF-8 string describing the manufacturer of the implementation of this instance.')
iscsiInstVendorVersion = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstVendorVersion.setStatus('current')
if mibBuilder.loadTexts: iscsiInstVendorVersion.setDescription('A UTF-8 string set by the manufacturer describing the version of the implementation of this instance. The format of this string is determined solely by the manufacturer; the string is for informational purposes only. It is unrelated to the iSCSI specification version numbers.')
iscsiInstPortalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 7), Unsigned32()).setUnits('transport endpoints').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstPortalNumber.setStatus('current')
if mibBuilder.loadTexts: iscsiInstPortalNumber.setDescription('The number of rows in the iscsiPortalAttributesTable that are currently associated with this iSCSI instance.')
iscsiInstNodeNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 8), Unsigned32()).setUnits('iSCSI nodes').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstNodeNumber.setStatus('current')
if mibBuilder.loadTexts: iscsiInstNodeNumber.setDescription('The number of rows in the iscsiNodeAttributesTable that are currently associated with this iSCSI instance.')
iscsiInstSessionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 9), Unsigned32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstSessionNumber.setStatus('current')
if mibBuilder.loadTexts: iscsiInstSessionNumber.setDescription('The number of rows in the iscsiSessionAttributesTable that are currently associated with this iSCSI instance.')
iscsiInstSsnFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 10), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstSsnFailures.setReference('RFC 7143, Section 13.1, HeaderDigest and DataDigest')
if mibBuilder.loadTexts: iscsiInstSsnFailures.setStatus('current')
if mibBuilder.loadTexts: iscsiInstSsnFailures.setDescription('This object counts the number of times a session belonging to this instance has failed. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiInstDiscontinuityTime.')
iscsiInstLastSsnFailureType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 11), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstLastSsnFailureType.setStatus('current')
if mibBuilder.loadTexts: iscsiInstLastSsnFailureType.setDescription('The counter object in the iscsiInstanceSsnErrorStatsTable that was incremented when the last session failure occurred. If the reason for failure is not found in the iscsiInstanceSsnErrorStatsTable, the value { 0.0 } is used instead.')
iscsiInstLastSsnRmtNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 12), IscsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstLastSsnRmtNodeName.setStatus('current')
if mibBuilder.loadTexts: iscsiInstLastSsnRmtNodeName.setDescription('The iSCSI name of the remote node from the failed session.')
iscsiInstDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: iscsiInstDiscontinuityTime.setDescription("The value of SysUpTime on the most recent occasion at which any one or more of this instance's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
iscsiInstXNodeArchitecture = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstXNodeArchitecture.setReference('RFC 7143, Section 13.26, X#NodeArchitecture')
if mibBuilder.loadTexts: iscsiInstXNodeArchitecture.setStatus('current')
if mibBuilder.loadTexts: iscsiInstXNodeArchitecture.setDescription('A UTF-8 string set by the manufacturer declaring the details of its iSCSI node architecture to the remote endpoint. These details may include, but are not limited to, iSCSI vendor software, firmware, or hardware versions, the OS version, or hardware architecture. The format of this string is determined solely by the manufacturer; the string is for informational purposes only. It is unrelated to the iSCSI specification version numbers.')
iscsiInstanceSsnErrorStatsTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 1, 2), )
if mibBuilder.loadTexts: iscsiInstanceSsnErrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiInstanceSsnErrorStatsTable.setDescription('Statistics regarding the occurrences of error types that result in a session failure.')
iscsiInstanceSsnErrorStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 1, 2, 1), )
iscsiInstanceAttributesEntry.registerAugmentions(("ISCSI-MIB", "iscsiInstanceSsnErrorStatsEntry"))
iscsiInstanceSsnErrorStatsEntry.setIndexNames(*iscsiInstanceAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiInstanceSsnErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiInstanceSsnErrorStatsEntry.setDescription('An entry (row) containing management information applicable to a particular iSCSI instance.')
iscsiInstSsnDigestErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 2, 1, 1), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstSsnDigestErrors.setReference('RFC 7143, Section 7.8, Digest Errors')
if mibBuilder.loadTexts: iscsiInstSsnDigestErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiInstSsnDigestErrors.setDescription('The count of sessions that failed due to receipt of a PDU containing header or data digest errors. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiInstDiscontinuityTime.')
iscsiInstSsnCxnTimeoutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 2, 1, 2), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstSsnCxnTimeoutErrors.setReference('RFC 7143, Section 7.5, Connection Timeout Management')
if mibBuilder.loadTexts: iscsiInstSsnCxnTimeoutErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiInstSsnCxnTimeoutErrors.setDescription('The count of sessions that failed due to a sequence exceeding a time limit. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiInstDiscontinuityTime.')
iscsiInstSsnFormatErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 2, 1, 3), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstSsnFormatErrors.setReference('RFC 7143 Section 7.7, Format Errors')
if mibBuilder.loadTexts: iscsiInstSsnFormatErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiInstSsnFormatErrors.setDescription('The count of sessions that failed due to receipt of a PDU that contained a format error. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiInstDiscontinuityTime.')
iscsiInstSsnTgtUnmappedErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 1, 2, 1, 4), Counter32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiInstSsnTgtUnmappedErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiInstSsnTgtUnmappedErrors.setDescription('The count of sessions that failed due to the target becoming unmapped. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiInstDiscontinuityTime.')
iscsiPortal = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 2))
iscsiPortalAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 2, 1), )
if mibBuilder.loadTexts: iscsiPortalAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalAttributesTable.setDescription('A list of transport endpoints (using TCP or another transport protocol) used by this iSCSI instance. An iSCSI instance may use a portal to listen for incoming connections to its targets, to initiate connections to other targets, or both.')
iscsiPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiPortalIndex"))
if mibBuilder.loadTexts: iscsiPortalAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular portal instance.')
iscsiPortalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiPortalIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalIndex.setDescription('An arbitrary integer used to uniquely identify a particular transport endpoint within this iSCSI instance. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
iscsiPortalRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalRowStatus.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. When the value of this object is 'active', the values of the other objects in this table cannot be changed. Rows may be discarded using RowStatus. Note that creating a row in this table will typically cause the agent to create one or more rows in the iscsiTgtPortalAttributesTable and/or the iscsiIntrPortalAttributesTable.")
iscsiPortalRoles = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 3), Bits().clone(namedValues=NamedValues(("targetTypePortal", 0), ("initiatorTypePortal", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalRoles.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalRoles.setDescription('A portal can operate in one or both of two roles: as a target portal and/or an initiator portal. If the portal will operate in both roles, both bits must be set. This object will define a corresponding row that will exist or must be created in the iscsiTgtPortalAttributesTable, the iscsiIntrPortalAttributesTable, or both. If the targetTypePortal bit is set, one or more corresponding iscsiTgtPortalAttributesEntry rows will be found or created. If the initiatorTypePortal bit is set, one or more corresponding iscsiIntrPortalAttributesEntry rows will be found or created. If both bits are set, one or more corresponding rows will be found or created in one of the above tables.')
iscsiPortalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalAddrType.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalAddrType.setDescription('The type of Internet Network Address contained in the corresponding instance of the iscsiPortalAddr.')
iscsiPortalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalAddr.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalAddr.setDescription("The portal's Internet Network Address, of the type specified by the object iscsiPortalAddrType. If iscsiPortalAddrType has the value 'dns', this address gets resolved to an IP address whenever a new iSCSI connection is established using this portal.")
iscsiPortalProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 6), IscsiTransportProtocol().clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalProtocol.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalProtocol.setDescription("The portal's transport protocol.")
iscsiPortalMaxRecvDataSegLength = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(8192)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalMaxRecvDataSegLength.setReference('RFC 7143, Section 13.12, MaxRecvDataSegmentLength')
if mibBuilder.loadTexts: iscsiPortalMaxRecvDataSegLength.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalMaxRecvDataSegLength.setDescription('The maximum PDU length this portal can receive. This may be constrained by hardware characteristics, and individual implementations may choose not to allow this object to be changed.')
iscsiPortalPrimaryHdrDigest = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 8), IscsiDigestMethod().clone('crc32c')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalPrimaryHdrDigest.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalPrimaryHdrDigest.setDescription('The preferred header digest for this portal.')
iscsiPortalPrimaryDataDigest = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 9), IscsiDigestMethod().clone('crc32c')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalPrimaryDataDigest.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalPrimaryDataDigest.setDescription('The preferred data digest method for this portal.')
iscsiPortalSecondaryHdrDigest = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 10), IscsiDigestMethod().clone('noDigest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalSecondaryHdrDigest.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalSecondaryHdrDigest.setDescription('An alternate header digest preference for this portal.')
iscsiPortalSecondaryDataDigest = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 11), IscsiDigestMethod().clone('noDigest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalSecondaryDataDigest.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalSecondaryDataDigest.setDescription('An alternate data digest preference for this portal.')
iscsiPortalRecvMarker = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalRecvMarker.setReference('RFC 7143, Section 13.25, Obsoleted Keys.')
if mibBuilder.loadTexts: iscsiPortalRecvMarker.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiPortalRecvMarker.setDescription('This object indicates whether or not this portal will request markers in its incoming data stream.')
iscsiPortalStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 13), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiPortalStorageType.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalStorageType.setDescription("The storage type for this row. Rows in this table that were created through an external process (e.g., not created via this MIB) may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
iscsiPortalDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 2, 1, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiPortalDescr.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalDescr.setDescription('A UTF-8 string, determined by the implementation to describe the iSCSI portal. When only a single instance is present, this object may be set to the zero-length string; with multiple iSCSI portals, it may be used in an implementation-dependent manner to describe the respective portal, and could include information such as Host Bus Adapter (HBA) model, description, and version, or software driver and version.')
iscsiTargetPortal = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 3))
iscsiTgtPortalAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 3, 1), )
if mibBuilder.loadTexts: iscsiTgtPortalAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtPortalAttributesTable.setDescription('A list of transport endpoints (using TCP or another transport protocol) on which this iSCSI instance listens for incoming connections to its targets.')
iscsiTgtPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 3, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiPortalIndex"), (0, "ISCSI-MIB", "iscsiTgtPortalNodeIndexOrZero"))
if mibBuilder.loadTexts: iscsiTgtPortalAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtPortalAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular portal instance that is used to listen for incoming connections to local targets. One or more rows in this table is populated by the agent for each iscsiPortalAttributesEntry row that has the bit targetTypePortal set in its iscsiPortalRoles column.')
iscsiTgtPortalNodeIndexOrZero = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: iscsiTgtPortalNodeIndexOrZero.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtPortalNodeIndexOrZero.setDescription('An arbitrary integer used to uniquely identify a particular node within an iSCSI instance present on the local system. For implementations where each {portal, node} tuple can have a different portal tag, this value will map to the iscsiNodeIndex. For implementations where the portal tag is the same for a given portal regardless of which node is using the portal, the value 0 (zero) is used.')
iscsiTgtPortalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 3, 1, 1, 2), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiTgtPortalPort.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtPortalPort.setDescription("The portal's transport protocol port number on which the portal listens for incoming iSCSI connections when the portal is used as a target portal. This object's storage type is specified in iscsiPortalStorageType.")
iscsiTgtPortalTag = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiTgtPortalTag.setReference('RFC 7143, Section 4.4.1, iSCSI Architecture Model')
if mibBuilder.loadTexts: iscsiTgtPortalTag.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtPortalTag.setDescription("The portal's aggregation tag when the portal is used as a target portal. Multiple-connection sessions may be aggregated over portals sharing an identical aggregation tag. This object's storage type is specified in iscsiPortalStorageType.")
iscsiInitiatorPortal = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 4))
iscsiIntrPortalAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 4, 1), )
if mibBuilder.loadTexts: iscsiIntrPortalAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrPortalAttributesTable.setDescription('A list of Internet Network Addresses (using TCP or another transport protocol) from which this iSCSI instance may initiate connections to other targets.')
iscsiIntrPortalAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 4, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiPortalIndex"), (0, "ISCSI-MIB", "iscsiIntrPortalNodeIndexOrZero"))
if mibBuilder.loadTexts: iscsiIntrPortalAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrPortalAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular portal instance that is used to initiate connections to iSCSI targets. One or more rows in this table is populated by the agent for each iscsiPortalAttributesEntry row that has the bit initiatorTypePortal set in its iscsiPortalRoles column.')
iscsiIntrPortalNodeIndexOrZero = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: iscsiIntrPortalNodeIndexOrZero.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrPortalNodeIndexOrZero.setDescription('An arbitrary integer used to uniquely identify a particular node within an iSCSI instance present on the local system. For implementations where each {portal, node} tuple can have a different portal tag, this value will map to the iscsiNodeIndex. For implementations where the portal tag is the same for a given portal regardless of which node is using the portal, the value 0 (zero) is used.')
iscsiIntrPortalTag = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIntrPortalTag.setReference('RFC 7143, Section 4.4.1, iSCSI Architecture Model')
if mibBuilder.loadTexts: iscsiIntrPortalTag.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrPortalTag.setDescription("The portal's aggregation tag when the portal is used as an initiator portal. Multiple-connection sessions may be aggregated over portals sharing an identical aggregation tag. This object's storage type is specified in iscsiPortalStorageType.")
iscsiNode = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 5))
iscsiNodeAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 5, 1), )
if mibBuilder.loadTexts: iscsiNodeAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeAttributesTable.setDescription('A list of iSCSI nodes belonging to each iSCSI instance present on the local system. An iSCSI node can act as an initiator, a target, or both.')
iscsiNodeAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiNodeIndex"))
if mibBuilder.loadTexts: iscsiNodeAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeAttributesEntry.setDescription('A conceptual row containing management information applicable to a particular iSCSI node.')
iscsiNodeIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiNodeIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeIndex.setDescription('An arbitrary integer used to uniquely identify a particular node within an iSCSI instance. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.')
iscsiNodeName = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 2), IscsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiNodeName.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeName.setDescription("This node's iSCSI name, which is independent of the location of the node, and can be resolved into a set of addresses through various discovery services.")
iscsiNodeAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiNodeAlias.setReference('RFC 7143, Sections 13.6 (TargetAlias) and 13.7 (InitiatorAlias)')
if mibBuilder.loadTexts: iscsiNodeAlias.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeAlias.setDescription("A character string that is a human-readable name or description of the iSCSI node. If configured, this alias may be communicated to the initiator or target node at the remote end of the connection during a Login Request or Response message. This string is not used as an identifier, but it can be displayed by the system's user interface in a list of initiators and/or targets to which it is connected. If no alias exists, the value is a zero-length string.")
iscsiNodeRoles = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 4), Bits().clone(namedValues=NamedValues(("targetTypeNode", 0), ("initiatorTypeNode", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiNodeRoles.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeRoles.setDescription('A node can operate in one or both of two roles: a target role and/or an initiator role. If the node will operate in both roles, both bits must be set. This object will also define the corresponding rows that will exist in the iscsiTargetAttributesTable, the iscsiInitiatorAttributesTable, or both. If the targetTypeNode bit is set, there will be a corresponding iscsiTargetAttributesEntry. If the initiatorTypeNode bit is set, there will be a corresponding iscsiInitiatorAttributesEntry. If both bits are set, there will be a corresponding iscsiTgtPortalAttributesEntry and iscsiPortalAttributesEntry.')
iscsiNodeTransportType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiNodeTransportType.setReference('SCSI-MIB, RFC 4455, Section 9, Object Definitions, scsiTransportTypes')
if mibBuilder.loadTexts: iscsiNodeTransportType.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeTransportType.setDescription('A pointer to the corresponding row in the appropriate table for this SCSI transport, thereby allowing management stations to locate the SCSI-level device that is represented by this iscsiNode. For example, it will usually point to the corresponding scsiTrnspt object in the SCSI MIB module. If no corresponding row exists, the value 0.0 must be used to indicate this.')
iscsiNodeInitialR2T = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiNodeInitialR2T.setReference('RFC 7143, Section 13.10, InitialR2T')
if mibBuilder.loadTexts: iscsiNodeInitialR2T.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeInitialR2T.setDescription('This object indicates the InitialR2T preference for this node: true = YES, false = will try to negotiate NO, will accept YES ')
iscsiNodeImmediateData = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeImmediateData.setReference('RFC 7143, Section 13.11, ImmediateData')
if mibBuilder.loadTexts: iscsiNodeImmediateData.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeImmediateData.setDescription('This object indicates ImmediateData preference for this node: true = YES (but will accept NO), false = NO ')
iscsiNodeMaxOutstandingR2T = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setUnits('R2Ts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeMaxOutstandingR2T.setReference('RFC 7143, Section 13.17, MaxOutstandingR2T')
if mibBuilder.loadTexts: iscsiNodeMaxOutstandingR2T.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeMaxOutstandingR2T.setDescription('Maximum number of outstanding requests-to-transmit (R2Ts) allowed per iSCSI task.')
iscsiNodeFirstBurstLength = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(65536)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeFirstBurstLength.setReference('RFC 7143, Section 13.14, FirstBurstLength')
if mibBuilder.loadTexts: iscsiNodeFirstBurstLength.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeFirstBurstLength.setDescription('The maximum length (bytes) supported for unsolicited data to/from this node.')
iscsiNodeMaxBurstLength = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215)).clone(262144)).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeMaxBurstLength.setReference('RFC 7143, Section 13.13, MaxBurstLength')
if mibBuilder.loadTexts: iscsiNodeMaxBurstLength.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeMaxBurstLength.setDescription('The maximum number of bytes that can be sent within a single sequence of Data-In or Data-Out PDUs.')
iscsiNodeMaxConnections = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setUnits('connections').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeMaxConnections.setReference('RFC 7143, Section 13.2, MaxConnections')
if mibBuilder.loadTexts: iscsiNodeMaxConnections.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeMaxConnections.setDescription('The maximum number of connections allowed in each session to and/or from this node.')
iscsiNodeDataSequenceInOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeDataSequenceInOrder.setReference('RFC 7143, Section 13.19, DataSequenceInOrder')
if mibBuilder.loadTexts: iscsiNodeDataSequenceInOrder.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeDataSequenceInOrder.setDescription('The DataSequenceInOrder preference of this node. False (=No) indicates that iSCSI data PDU sequences may be transferred in any order. True (=Yes) indicates that data PDU sequences must be transferred using continuously increasing offsets, except during error recovery.')
iscsiNodeDataPDUInOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeDataPDUInOrder.setReference('RFC 7143, Section 13.18, DataPDUInOrder')
if mibBuilder.loadTexts: iscsiNodeDataPDUInOrder.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeDataPDUInOrder.setDescription('The DataPDUInOrder preference of this node. False (=No) indicates that iSCSI data PDUs within sequences may be in any order. True (=Yes) indicates that data PDUs within sequences must be at continuously increasing addresses, with no gaps or overlay between PDUs.')
iscsiNodeDefaultTime2Wait = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(2)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeDefaultTime2Wait.setReference('RFC 7143, Section 13.15, DefaultTime2Wait')
if mibBuilder.loadTexts: iscsiNodeDefaultTime2Wait.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeDefaultTime2Wait.setDescription('The DefaultTime2Wait preference of this node. This is the minimum time, in seconds, to wait before attempting an explicit/implicit logout or active iSCSI task reassignment after an unexpected connection termination or a connection reset.')
iscsiNodeDefaultTime2Retain = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeDefaultTime2Retain.setReference('RFC 7143, Section 13.16, DefaultTime2Retain')
if mibBuilder.loadTexts: iscsiNodeDefaultTime2Retain.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeDefaultTime2Retain.setDescription('The DefaultTime2Retain preference of this node. This is the maximum time, in seconds after an initial wait (Time2Wait), before which an active iSCSI task reassignment is still possible after an unexpected connection termination or a connection reset.')
iscsiNodeErrorRecoveryLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeErrorRecoveryLevel.setReference('RFC 7143, Section 13.20, ErrorRecoveryLevel')
if mibBuilder.loadTexts: iscsiNodeErrorRecoveryLevel.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeErrorRecoveryLevel.setDescription('The ErrorRecoveryLevel preference of this node. Currently, only 0-2 are valid. This object is designed to accommodate future error-recovery levels. Higher error-recovery levels imply support in addition to support for the lower error level functions. In other words, error level 2 implies support for levels 0-1, since those functions are subsets of error level 2.')
iscsiNodeDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 17), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiNodeDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeDiscontinuityTime.setDescription("The value of SysUpTime on the most recent occasion at which any one or more of this node's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
iscsiNodeStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 5, 1, 1, 18), StorageType().clone('volatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiNodeStorageType.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeStorageType.setDescription("The storage type for all read-write objects within this row. Rows in this table are always created via an external process (e.g., not created via this MIB module). Conceptual rows having the value 'permanent' need not allow Write access to any columnar objects in the row. If this object has the value 'volatile', modifications to read-write objects in this row are not persistent across reboots. If this object has the value 'nonVolatile', modifications to objects in this row are persistent. An implementation may choose to allow this object to be set to either 'nonVolatile' or 'volatile', allowing the management application to choose this behavior.")
iscsiTarget = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 6))
iscsiTargetAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 6, 1), )
if mibBuilder.loadTexts: iscsiTargetAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetAttributesTable.setDescription('A list of iSCSI nodes that can take on a target role, belonging to each iSCSI instance present on the local system.')
iscsiTargetAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiNodeIndex"))
if mibBuilder.loadTexts: iscsiTargetAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular node that can take on a target role.')
iscsiTgtLoginFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1, 1), Counter32()).setUnits('failed login attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLoginFailures.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiTgtLoginFailures.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginFailures.setDescription('This object counts the number of times a login attempt to this local target has failed. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLastFailureTime = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLastFailureTime.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLastFailureTime.setDescription('The timestamp of the most recent failure of a login attempt to this target. A value of zero indicates that no such failures have occurred since the last system boot.')
iscsiTgtLastFailureType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLastFailureType.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLastFailureType.setDescription('The type of the most recent failure of a login attempt to this target, represented as the OID of the counter object in iscsiTargetLoginStatsTable for which the relevant instance was incremented. If no such failures have occurred since the last system boot, this attribute will have the value 0.0. A value of 0.0 may also be used to indicate a type that is not represented by any of the counters in iscsiTargetLoginStatsTable.')
iscsiTgtLastIntrFailureName = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1, 4), IscsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLastIntrFailureName.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLastIntrFailureName.setDescription('The iSCSI name of the initiator that failed the last login attempt. If no such failures have occurred since the last system boot, this value is a zero-length string.')
iscsiTgtLastIntrFailureAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLastIntrFailureAddrType.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLastIntrFailureAddrType.setDescription("The type of Internet Network Address contained in the corresponding instance of the iscsiTgtLastIntrFailureAddr. The value 'dns' is not allowed. If no such failures have occurred since the last system boot, this value is zero.")
iscsiTgtLastIntrFailureAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLastIntrFailureAddr.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLastIntrFailureAddr.setDescription('An Internet Network Address, of the type specified by the object iscsiTgtLastIntrFailureAddrType, giving the host address of the initiator that failed the last login attempt. If no such failures have occurred since the last system boot, this value is a zero-length string.')
iscsiTgtLastIntrFailurePort = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLastIntrFailurePort.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLastIntrFailurePort.setDescription('The transport protocol port number used by the initiator that failed the last login attempt. If no such failures have occurred since the last system boot, this value is a zero-length string.')
iscsiTargetLoginStatsTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 6, 2), )
if mibBuilder.loadTexts: iscsiTargetLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetLoginStatsTable.setDescription("A table of counters that keep a record of the results of initiators' login attempts to this target.")
iscsiTargetLoginStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 6, 2, 1), )
iscsiTargetAttributesEntry.registerAugmentions(("ISCSI-MIB", "iscsiTargetLoginStatsEntry"))
iscsiTargetLoginStatsEntry.setIndexNames(*iscsiTargetAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiTargetLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetLoginStatsEntry.setDescription('An entry (row) containing counters for each result of a login attempt to this target.')
iscsiTgtLoginAccepts = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 2, 1, 1), Counter32()).setUnits('successful logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLoginAccepts.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiTgtLoginAccepts.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginAccepts.setDescription('The count of Login Response PDUs with status 0x0000, Accept Login, transmitted by this target. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLoginOtherFails = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 2, 1, 2), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLoginOtherFails.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiTgtLoginOtherFails.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginOtherFails.setDescription('The number of Login Response PDUs that were transmitted by this target and that were not counted by any other object in the row. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLoginRedirects = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 2, 1, 3), Counter32()).setUnits('redirected logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLoginRedirects.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiTgtLoginRedirects.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginRedirects.setDescription('The count of Login Response PDUs with status class 0x01, Redirection, transmitted by this target. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLoginAuthorizeFails = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 2, 1, 4), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLoginAuthorizeFails.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiTgtLoginAuthorizeFails.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginAuthorizeFails.setDescription('The count of Login Response PDUs with status 0x0202, Forbidden Target, transmitted by this target. If this counter is incremented, an iscsiTgtLoginFailure notification should be generated. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLoginAuthenticateFails = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 2, 1, 5), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLoginAuthenticateFails.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiTgtLoginAuthenticateFails.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginAuthenticateFails.setDescription('The count of Login Response PDUs with status 0x0201, Authentication Failed, transmitted by this target. If this counter is incremented, an iscsiTgtLoginFailure notification should be generated. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLoginNegotiateFails = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 2, 1, 6), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLoginNegotiateFails.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginNegotiateFails.setDescription('The number of times a target has effectively refused a login because the parameter negotiation failed. If this counter is incremented, an iscsiTgtLoginFailure notification should be generated. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTargetLogoutStatsTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 6, 3), )
if mibBuilder.loadTexts: iscsiTargetLogoutStatsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetLogoutStatsTable.setDescription('When a target receives a Logout command, it responds with a Logout Response that carries a status code. This table contains counters for both normal and abnormal Logout Requests received by this target.')
iscsiTargetLogoutStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 6, 3, 1), )
iscsiTargetAttributesEntry.registerAugmentions(("ISCSI-MIB", "iscsiTargetLogoutStatsEntry"))
iscsiTargetLogoutStatsEntry.setIndexNames(*iscsiTargetAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiTargetLogoutStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetLogoutStatsEntry.setDescription('An entry (row) containing counters of Logout Response PDUs that were received by this target.')
iscsiTgtLogoutNormals = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 3, 1, 1), Counter32()).setUnits('normal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLogoutNormals.setReference('RFC 7143, Section 11.14.1, Reason Code')
if mibBuilder.loadTexts: iscsiTgtLogoutNormals.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLogoutNormals.setDescription('The count of Logout Command PDUs received by this target, with reason code 0 (closes the session). If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLogoutOthers = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 3, 1, 2), Counter32()).setUnits('abnormal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLogoutOthers.setReference('RFC 7143, Section 11.14.1, Reason Code')
if mibBuilder.loadTexts: iscsiTgtLogoutOthers.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLogoutOthers.setDescription('The count of Logout Command PDUs received by this target, with any reason code other than 0. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLogoutCxnClosed = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 3, 1, 3), Counter32()).setUnits('abnormal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLogoutCxnClosed.setReference('RFC 7143, Section 11.14.1, Reason Code')
if mibBuilder.loadTexts: iscsiTgtLogoutCxnClosed.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLogoutCxnClosed.setDescription('The count of Logout Command PDUs received by this target, with reason code 1 (closes the connection). If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtLogoutCxnRemoved = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 6, 3, 1, 4), Counter32()).setUnits('abnormal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiTgtLogoutCxnRemoved.setReference('RFC 7143, Section 11.14.1, Reason Code')
if mibBuilder.loadTexts: iscsiTgtLogoutCxnRemoved.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLogoutCxnRemoved.setDescription('The count of Logout Command PDUs received by this target, with reason code 2 (removes the connection). If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiTgtAuthorization = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 7))
iscsiTgtAuthAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 7, 1), )
if mibBuilder.loadTexts: iscsiTgtAuthAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtAuthAttributesTable.setDescription('A list of initiator identities that are authorized to access each target node within each iSCSI instance present on the local system.')
iscsiTgtAuthAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 7, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiNodeIndex"), (0, "ISCSI-MIB", "iscsiTgtAuthIndex"))
if mibBuilder.loadTexts: iscsiTgtAuthAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtAuthAttributesEntry.setDescription("An entry (row) containing management information applicable to a particular target node's authorized initiator identity.")
iscsiTgtAuthIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiTgtAuthIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtAuthIndex.setDescription("An arbitrary integer used to uniquely identify a particular target's authorized initiator identity within an iSCSI instance present on the local system. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.")
iscsiTgtAuthRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiTgtAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtAuthRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. When the value of this object is 'active', the values of the other objects in this table cannot be changed. Rows may be discarded using RowStatus.")
iscsiTgtAuthIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 7, 1, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiTgtAuthIdentity.setReference('IPS-AUTH MIB, RFC 4545, Section 7.3, ipsAuthIdentity')
if mibBuilder.loadTexts: iscsiTgtAuthIdentity.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtAuthIdentity.setDescription('A pointer to the corresponding user entry in the IPS-AUTH MIB module that will be allowed to access this iSCSI target.')
iscsiTgtAuthStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 7, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiTgtAuthStorageType.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtAuthStorageType.setDescription("The storage type for this row. Rows in this table that were created through an external process (e.g., not created via this MIB) may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
iscsiInitiator = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 8))
iscsiInitiatorAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 8, 1), )
if mibBuilder.loadTexts: iscsiInitiatorAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorAttributesTable.setDescription('A list of iSCSI nodes that can take on an initiator role, belonging to each iSCSI instance present on the local system.')
iscsiInitiatorAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiNodeIndex"))
if mibBuilder.loadTexts: iscsiInitiatorAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular iSCSI node that has initiator capabilities.')
iscsiIntrLoginFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1, 1), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginFailures.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiIntrLoginFailures.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginFailures.setDescription('This object counts the number of times a login attempt from this local initiator has failed. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLastFailureTime = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLastFailureTime.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLastFailureTime.setDescription('The timestamp of the most recent failure of a login attempt from this initiator. A value of zero indicates that no such failures have occurred since the last system boot.')
iscsiIntrLastFailureType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLastFailureType.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLastFailureType.setDescription('The type of the most recent failure of a login attempt from this initiator, represented as the OID of the counter object in iscsiInitiatorLoginStatsTable for which the relevant instance was incremented. If no such failures have occurred since the last system boot, this attribute will have the value 0.0. A value of 0.0 may also be used to indicate a type that is not represented by any of the counters in iscsiInitiatorLoginStatsTable.')
iscsiIntrLastTgtFailureName = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1, 4), IscsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLastTgtFailureName.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLastTgtFailureName.setDescription('A UTF-8 string giving the name of the target that failed the last login attempt. If no such failures have occurred since the last system boot, this value is a zero-length string.')
iscsiIntrLastTgtFailureAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLastTgtFailureAddrType.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLastTgtFailureAddrType.setDescription("The type of Internet Network Address contained in the corresponding instance of the iscsiIntrLastTgtFailureAddr. The value 'dns' is not allowed. If no such failures have occurred since the last system boot, this value is zero.")
iscsiIntrLastTgtFailureAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLastTgtFailureAddr.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLastTgtFailureAddr.setDescription('An Internet Network Address, of the type specified by the object iscsiIntrLastTgtFailureAddrType, giving the host address of the target that failed the last login attempt. If no such failures have occurred since the last system boot, this value is a zero-length string.')
iscsiIntrLastTgtFailurePort = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLastTgtFailurePort.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLastTgtFailurePort.setDescription('The transport protocol port number used by the target that failed the last login attempt. If no such failures have occurred since the last system boot, this value is a zero-length string.')
iscsiInitiatorLoginStatsTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 8, 2), )
if mibBuilder.loadTexts: iscsiInitiatorLoginStatsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorLoginStatsTable.setDescription("A table of counters that keep track of the results of this initiator's login attempts.")
iscsiInitiatorLoginStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1), )
iscsiInitiatorAttributesEntry.registerAugmentions(("ISCSI-MIB", "iscsiInitiatorLoginStatsEntry"))
iscsiInitiatorLoginStatsEntry.setIndexNames(*iscsiInitiatorAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiInitiatorLoginStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorLoginStatsEntry.setDescription("An entry (row) containing counters of each result of this initiator's login attempts.")
iscsiIntrLoginAcceptRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1, 1), Counter32()).setUnits('successful logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginAcceptRsps.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiIntrLoginAcceptRsps.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginAcceptRsps.setDescription('The count of Login Response PDUs with status 0x0000, Accept Login, received by this initiator. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLoginOtherFailRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1, 2), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginOtherFailRsps.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiIntrLoginOtherFailRsps.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginOtherFailRsps.setDescription('The count of Login Response PDUs received by this initiator with any status code not counted in the objects below. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLoginRedirectRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1, 3), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginRedirectRsps.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiIntrLoginRedirectRsps.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginRedirectRsps.setDescription('The count of Login Response PDUs with status class 0x01, Redirection, received by this initiator. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLoginAuthFailRsps = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1, 4), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginAuthFailRsps.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiIntrLoginAuthFailRsps.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginAuthFailRsps.setDescription('The count of Login Response PDUs with status class 0x201, Authentication Failed, received by this initiator. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLoginAuthenticateFails = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1, 5), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginAuthenticateFails.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiIntrLoginAuthenticateFails.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginAuthenticateFails.setDescription('The number of times the initiator has aborted a login because the target could not be authenticated. No response is generated. If this counter is incremented, an iscsiIntrLoginFailure notification should be generated. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLoginNegotiateFails = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1, 6), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginNegotiateFails.setReference('RFC 7143, Section 7.12, Negotiation Failures')
if mibBuilder.loadTexts: iscsiIntrLoginNegotiateFails.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginNegotiateFails.setDescription('The number of times the initiator has aborted a login because parameter negotiation with the target failed. No response is generated. If this counter is incremented, an iscsiIntrLoginFailure notification should be generated. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLoginAuthorizeFails = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 2, 1, 7), Counter32()).setUnits('failed logins').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLoginAuthorizeFails.setReference('RFC 7143, Section 11.13.5, Status-Class and Status-Detail')
if mibBuilder.loadTexts: iscsiIntrLoginAuthorizeFails.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginAuthorizeFails.setDescription('The count of Login Response PDUs with status 0x0202, Forbidden Target, received by this initiator. If this counter is incremented, an iscsiIntrLoginFailure notification should be generated. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiInitiatorLogoutStatsTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 8, 3), )
if mibBuilder.loadTexts: iscsiInitiatorLogoutStatsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorLogoutStatsTable.setDescription('When an initiator attempts to send a Logout command, the target responds with a Logout Response that carries a status code. This table contains a list of counters of Logout Response PDUs of each status code that was received by each initiator belonging to this iSCSI instance present on this system.')
iscsiInitiatorLogoutStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 8, 3, 1), )
iscsiInitiatorAttributesEntry.registerAugmentions(("ISCSI-MIB", "iscsiInitiatorLogoutStatsEntry"))
iscsiInitiatorLogoutStatsEntry.setIndexNames(*iscsiInitiatorAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiInitiatorLogoutStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorLogoutStatsEntry.setDescription('An entry (row) containing counters of Logout Response PDUs of each status code that was generated by this initiator.')
iscsiIntrLogoutNormals = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 3, 1, 1), Counter32()).setUnits('normal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLogoutNormals.setReference('RFC 7143, Section 11.14.1, Reason Code')
if mibBuilder.loadTexts: iscsiIntrLogoutNormals.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLogoutNormals.setDescription('The count of Logout Command PDUs generated by this initiator with reason code 0 (closes the session). If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrLogoutOthers = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 8, 3, 1, 2), Counter32()).setUnits('abnormal logouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIntrLogoutOthers.setReference('RFC 7143, Section 11.14.1, Reason Code')
if mibBuilder.loadTexts: iscsiIntrLogoutOthers.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLogoutOthers.setDescription('The count of Logout Command PDUs generated by this initiator with any status code other than 0. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiNodeDiscontinuityTime.')
iscsiIntrAuthorization = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 9))
iscsiIntrAuthAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 9, 1), )
if mibBuilder.loadTexts: iscsiIntrAuthAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrAuthAttributesTable.setDescription('A list of target identities that each initiator on the local system may access.')
iscsiIntrAuthAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 9, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiNodeIndex"), (0, "ISCSI-MIB", "iscsiIntrAuthIndex"))
if mibBuilder.loadTexts: iscsiIntrAuthAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrAuthAttributesEntry.setDescription("An entry (row) containing management information applicable to a particular initiator node's authorized target identity.")
iscsiIntrAuthIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiIntrAuthIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrAuthIndex.setDescription("An arbitrary integer used to uniquely identify a particular initiator node's authorized target identity within an iSCSI instance present on the local system. This index value must not be modified or reused by an agent unless a reboot has occurred. An agent should attempt to keep this value persistent across reboots.")
iscsiIntrAuthRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 9, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiIntrAuthRowStatus.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrAuthRowStatus.setDescription("This field allows entries to be dynamically added and removed from this table via SNMP. When adding a row to this table, all non-Index/RowStatus objects must be set. When the value of this object is 'active', the values of the other objects in this table cannot be changed. Rows may be discarded using RowStatus.")
iscsiIntrAuthIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 9, 1, 1, 3), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiIntrAuthIdentity.setReference('IPS-AUTH MIB, RFC 4545, Section 7.3, ipsAuthIdentity')
if mibBuilder.loadTexts: iscsiIntrAuthIdentity.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrAuthIdentity.setDescription('A pointer to the corresponding user entry in the IPS-AUTH MIB module to which this initiator node should attempt to establish an iSCSI session.')
iscsiIntrAuthStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 9, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiIntrAuthStorageType.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrAuthStorageType.setDescription("The storage type for this row. Rows in this table that were created through an external process (e.g., not created via this MIB) may have a storage type of readOnly or permanent. Conceptual rows having the value 'permanent' need not allow write access to any columnar objects in the row.")
iscsiSession = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 10))
iscsiSessionAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 10, 1), )
if mibBuilder.loadTexts: iscsiSessionAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionAttributesTable.setDescription('A list of sessions belonging to each iSCSI instance present on the system.')
iscsiSessionAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiSsnNodeIndex"), (0, "ISCSI-MIB", "iscsiSsnIndex"))
if mibBuilder.loadTexts: iscsiSessionAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular session. If this session is a discovery session that is not attached to any particular node, the iscsiSsnNodeIndex will be zero. Otherwise, the iscsiSsnNodeIndex will have the same value as iscsiNodeIndex.')
iscsiSsnNodeIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: iscsiSsnNodeIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnNodeIndex.setDescription('An arbitrary integer used to uniquely identify a particular node within an iSCSI instance present on the local system. For normal, non-discovery sessions, this value will map to the iscsiNodeIndex. For discovery sessions that do not have a node associated, the value 0 (zero) is used.')
iscsiSsnIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiSsnIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnIndex.setDescription('An arbitrary integer used to uniquely identify a particular session within an iSCSI instance present on the local system. An agent should attempt to not reuse index values unless a reboot has occurred. iSCSI sessions are destroyed during a reboot; rows in this table are not persistent across reboots.')
iscsiSsnDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inboundSession", 1), ("outboundSession", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnDirection.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnDirection.setDescription('Direction of iSCSI session: inboundSession - session is established from an external initiator to a target within this iSCSI instance. outboundSession - session is established from an initiator within this iSCSI instance to an external target.')
iscsiSsnInitiatorName = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 4), IscsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnInitiatorName.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnInitiatorName.setDescription('If iscsiSsnDirection is Inbound, this object is a UTF-8 string that will contain the name of the remote initiator. If this session is a discovery session that does not specify a particular initiator, this object will contain a zero-length string. If iscsiSsnDirection is Outbound, this object will contain a zero-length string.')
iscsiSsnTargetName = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 5), IscsiName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnTargetName.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnTargetName.setDescription('If iscsiSsnDirection is Outbound, this object is a UTF-8 string that will contain the name of the remote target. If this session is a discovery session that does not specify a particular target, this object will contain a zero-length string. If iscsiSsnDirection is Inbound, this object will contain a zero-length string.')
iscsiSsnTSIH = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnTSIH.setReference('RFC 7143, Section 11.12.6, TSIH')
if mibBuilder.loadTexts: iscsiSsnTSIH.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnTSIH.setDescription('The target-defined identification handle for this session.')
iscsiSsnISID = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnISID.setReference('RFC 7143, Section 11.12.5, ISID')
if mibBuilder.loadTexts: iscsiSsnISID.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnISID.setDescription('The initiator-defined portion of the iSCSI Session ID.')
iscsiSsnInitiatorAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnInitiatorAlias.setReference('RFC 7143, Section 13.7, InitiatorAlias')
if mibBuilder.loadTexts: iscsiSsnInitiatorAlias.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnInitiatorAlias.setDescription('A UTF-8 string that gives the alias communicated by the initiator end of the session during the login phase. If no alias exists, the value is a zero-length string.')
iscsiSsnTargetAlias = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnTargetAlias.setReference('RFC 7143, Section 13.6, TargetAlias')
if mibBuilder.loadTexts: iscsiSsnTargetAlias.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnTargetAlias.setDescription('A UTF-8 string that gives the alias communicated by the target end of the session during the login phase. If no alias exists, the value is a zero-length string.')
iscsiSsnInitialR2T = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnInitialR2T.setReference('RFC 7143, Section 13.10, InitialR2T')
if mibBuilder.loadTexts: iscsiSsnInitialR2T.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnInitialR2T.setDescription('If set to true, indicates that the initiator must wait for an R2T before sending to the target. If set to false, the initiator may send data immediately, within limits set by iscsiSsnFirstBurstLength and the expected data transfer length of the request.')
iscsiSsnImmediateData = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnImmediateData.setReference('RFC 7143, Section 13.11, ImmediateData')
if mibBuilder.loadTexts: iscsiSsnImmediateData.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnImmediateData.setDescription('Indicates whether the initiator and target have agreed to support immediate data on this session.')
iscsiSsnType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalSession", 1), ("discoverySession", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnType.setReference('RFC 7143, Section 13.21, SessionType')
if mibBuilder.loadTexts: iscsiSsnType.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnType.setDescription('Type of iSCSI session: normalSession - session is a normal iSCSI session discoverySession - session is being used only for discovery.')
iscsiSsnMaxOutstandingR2T = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('R2Ts').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnMaxOutstandingR2T.setReference('RFC 7143, Section 13.17, MaxOutstandingR2T')
if mibBuilder.loadTexts: iscsiSsnMaxOutstandingR2T.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnMaxOutstandingR2T.setDescription('The maximum number of outstanding requests-to-transmit (R2Ts) per iSCSI task within this session.')
iscsiSsnFirstBurstLength = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnFirstBurstLength.setReference('RFC 7143, Section 13.14, FirstBurstLength')
if mibBuilder.loadTexts: iscsiSsnFirstBurstLength.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnFirstBurstLength.setDescription('The maximum length supported for unsolicited data sent within this session.')
iscsiSsnMaxBurstLength = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnMaxBurstLength.setReference('RFC 7143, Section 13.13, MaxBurstLength')
if mibBuilder.loadTexts: iscsiSsnMaxBurstLength.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnMaxBurstLength.setDescription('The maximum number of bytes that can be sent within a single sequence of Data-In or Data-Out PDUs.')
iscsiSsnConnectionNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnConnectionNumber.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnConnectionNumber.setDescription('The number of transport protocol connections that currently belong to this session.')
iscsiSsnAuthIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 17), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnAuthIdentity.setReference('IPS-AUTH MIB, RFC 4545, Section 7.3, ipsAuthIdentity')
if mibBuilder.loadTexts: iscsiSsnAuthIdentity.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnAuthIdentity.setDescription('This object contains a pointer to a row in the IPS-AUTH MIB module that identifies the authentication identity being used on this session, as communicated during the login phase.')
iscsiSsnDataSequenceInOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnDataSequenceInOrder.setReference('RFC 7143, Section 13.19, DataSequenceInOrder')
if mibBuilder.loadTexts: iscsiSsnDataSequenceInOrder.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnDataSequenceInOrder.setDescription('False indicates that iSCSI data PDU sequences may be transferred in any order. True indicates that data PDU sequences must be transferred using continuously increasing offsets, except during error recovery.')
iscsiSsnDataPDUInOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnDataPDUInOrder.setReference('RFC 7143, Section 13.18, DataPDUInOrder')
if mibBuilder.loadTexts: iscsiSsnDataPDUInOrder.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnDataPDUInOrder.setDescription('False indicates that iSCSI data PDUs within sequences may be in any order. True indicates that data PDUs within sequences must be at continuously increasing addresses, with no gaps or overlay between PDUs. Default is true.')
iscsiSsnErrorRecoveryLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnErrorRecoveryLevel.setReference('RFC 7143, Section 13.20, ErrorRecoveryLevel')
if mibBuilder.loadTexts: iscsiSsnErrorRecoveryLevel.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnErrorRecoveryLevel.setDescription('The level of error recovery negotiated between the initiator and the target. Higher numbers represent more detailed recovery schemes.')
iscsiSsnDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnDiscontinuityTime.setDescription("The value of SysUpTime on the most recent occasion at which any one or more of this session's counters suffered a discontinuity. When a session is established, and this object is created, it is initialized to the current value of SysUpTime.")
iscsiSsnProtocolLevel = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnProtocolLevel.setReference('RFC 7144, Section 7.1.1, iSCSIProtocolLevel')
if mibBuilder.loadTexts: iscsiSsnProtocolLevel.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnProtocolLevel.setDescription('The iSCSI protocol level negotiated for this session.')
iscsiSsnTaskReporting = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 1, 1, 23), Bits().clone(namedValues=NamedValues(("taskReportingRfc3720", 0), ("taskReportingResponseFence", 1), ("taskReportingFastAbort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnTaskReporting.setReference('RFC 7143, Section 13.23, TaskReporting')
if mibBuilder.loadTexts: iscsiSsnTaskReporting.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnTaskReporting.setDescription('This key is used to negotiate the task completion reporting semantics from the SCSI target. Default value is taskReportingRfc3720.')
iscsiSessionStatsTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 10, 2), )
if mibBuilder.loadTexts: iscsiSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionStatsTable.setDescription('A list of general iSCSI traffic counters for each of the sessions present on the system.')
iscsiSessionStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1), )
iscsiSessionAttributesEntry.registerAugmentions(("ISCSI-MIB", "iscsiSessionStatsEntry"))
iscsiSessionStatsEntry.setIndexNames(*iscsiSessionAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionStatsEntry.setDescription('An entry (row) containing general iSCSI traffic counters for a particular session.')
iscsiSsnCmdPDUs = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 1), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnCmdPDUs.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnCmdPDUs.setDescription('The count of Command PDUs transferred on this session. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSsnRspPDUs = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 2), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnRspPDUs.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnRspPDUs.setDescription('The count of Response PDUs transferred on this session. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSsnTxDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnTxDataOctets.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnTxDataOctets.setDescription('The count of data octets that were transmitted by the local iSCSI node on this session. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSsnRxDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 4), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnRxDataOctets.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnRxDataOctets.setDescription('The count of data octets that were received by the local iSCSI node on this session. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSsnLCTxDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnLCTxDataOctets.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnLCTxDataOctets.setDescription('A Low-Capacity shadow object of iscsiSsnTxDataOctets for those systems that are accessible via SNMPv1 only. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSsnLCRxDataOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 6), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnLCRxDataOctets.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnLCRxDataOctets.setDescription('A Low-Capacity shadow object of iscsiSsnRxDataOctets for those systems which are accessible via SNMPv1 only. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSsnNopReceivedPDUs = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 7), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnNopReceivedPDUs.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnNopReceivedPDUs.setDescription('The count of NOP-In or NOP-Out PDUs received on this session. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSsnNopSentPDUs = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 2, 1, 8), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnNopSentPDUs.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnNopSentPDUs.setDescription('The count of NOP-In or NOP-Out PDUs sent on this session. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime.')
iscsiSessionCxnErrorStatsTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 10, 3), )
if mibBuilder.loadTexts: iscsiSessionCxnErrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionCxnErrorStatsTable.setDescription('A list of error counters for each of the sessions present on this system.')
iscsiSessionCxnErrorStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 10, 3, 1), )
iscsiSessionAttributesEntry.registerAugmentions(("ISCSI-MIB", "iscsiSessionCxnErrorStatsEntry"))
iscsiSessionCxnErrorStatsEntry.setIndexNames(*iscsiSessionAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiSessionCxnErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionCxnErrorStatsEntry.setDescription('An entry (row) containing error counters for a particular session.')
iscsiSsnCxnDigestErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 3, 1, 1), Counter32()).setUnits('PDUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnCxnDigestErrors.setReference('RFC 7143, Section 7.8, Digest Errors')
if mibBuilder.loadTexts: iscsiSsnCxnDigestErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnCxnDigestErrors.setDescription('The count of PDUs that were received on the session and contained header or data digest errors. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime. This counter is most likely provided when the error-recovery level is 1 or 2')
iscsiSsnCxnTimeoutErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 10, 3, 1, 2), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnCxnTimeoutErrors.setReference('RFC 7143, Section 7.5, Connection Timeout Management')
if mibBuilder.loadTexts: iscsiSsnCxnTimeoutErrors.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnCxnTimeoutErrors.setDescription('The count of connections within this session that have been terminated due to timeout. If this counter has suffered a discontinuity, the time of the last discontinuity is indicated in iscsiSsnDiscontinuityTime. This counter is most likely provided when the error-recovery level is 2')
iscsiConnection = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 1, 11))
iscsiConnectionAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 142, 1, 11, 1), )
if mibBuilder.loadTexts: iscsiConnectionAttributesTable.setStatus('current')
if mibBuilder.loadTexts: iscsiConnectionAttributesTable.setDescription('A list of connections belonging to each iSCSI instance present on the system.')
iscsiConnectionAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1), ).setIndexNames((0, "ISCSI-MIB", "iscsiInstIndex"), (0, "ISCSI-MIB", "iscsiSsnNodeIndex"), (0, "ISCSI-MIB", "iscsiSsnIndex"), (0, "ISCSI-MIB", "iscsiCxnIndex"))
if mibBuilder.loadTexts: iscsiConnectionAttributesEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiConnectionAttributesEntry.setDescription('An entry (row) containing management information applicable to a particular connection.')
iscsiCxnIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiCxnIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnIndex.setDescription('An arbitrary integer used to uniquely identify a particular connection of a particular session within an iSCSI instance present on the local system. An agent should attempt to not reuse index values unless a reboot has occurred. iSCSI connections are destroyed during a reboot; rows in this table are not persistent across reboots.')
iscsiCxnCid = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnCid.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnCid.setDescription('The iSCSI Connection ID for this connection.')
iscsiCxnState = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("login", 1), ("full", 2), ("logout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnState.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnState.setDescription('The current state of this connection, from an iSCSI negotiation point of view. Here are the states: login - The transport protocol connection has been established, but a valid iSCSI login response with the final bit set has not been sent or received. full - A valid iSCSI login response with the final bit set has been sent or received. logout - A valid iSCSI logout command has been sent or received, but the transport protocol connection has not yet been closed.')
iscsiCxnAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnAddrType.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnAddrType.setDescription("The type of Internet Network Addresses contained in the corresponding instances of iscsiCxnLocalAddr and iscsiCxnRemoteAddr. The value 'dns' is not allowed.")
iscsiCxnLocalAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnLocalAddr.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnLocalAddr.setDescription('The local Internet Network Address, of the type specified by iscsiCxnAddrType, used by this connection.')
iscsiCxnProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 6), IscsiTransportProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnProtocol.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnProtocol.setDescription('The transport protocol over which this connection is running.')
iscsiCxnLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnLocalPort.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnLocalPort.setDescription('The local transport protocol port used by this connection. This object cannot have the value zero, since it represents an established connection.')
iscsiCxnRemoteAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnRemoteAddr.setDescription('The remote Internet Network Address, of the type specified by iscsiCxnAddrType, used by this connection.')
iscsiCxnRemotePort = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnRemotePort.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnRemotePort.setDescription('The remote transport protocol port used by this connection. This object cannot have the value zero, since it represents an established connection.')
iscsiCxnMaxRecvDataSegLength = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnMaxRecvDataSegLength.setReference('RFC 7143, Section 13.12, MaxRecvDataSegmentLength')
if mibBuilder.loadTexts: iscsiCxnMaxRecvDataSegLength.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnMaxRecvDataSegLength.setDescription('The maximum data payload size supported for command or data PDUs able to be received on this connection.')
iscsiCxnMaxXmitDataSegLength = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(512, 16777215))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnMaxXmitDataSegLength.setReference('RFC 7143, Section 13.12, MaxRecvDataSegmentLength')
if mibBuilder.loadTexts: iscsiCxnMaxXmitDataSegLength.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnMaxXmitDataSegLength.setDescription('The maximum data payload size supported for command or data PDUs to be sent on this connection.')
iscsiCxnHeaderIntegrity = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 12), IscsiDigestMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnHeaderIntegrity.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnHeaderIntegrity.setDescription('This object identifies the iSCSI header digest scheme in use within this connection.')
iscsiCxnDataIntegrity = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 13), IscsiDigestMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnDataIntegrity.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnDataIntegrity.setDescription('This object identifies the iSCSI data digest scheme in use within this connection.')
iscsiCxnRecvMarker = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnRecvMarker.setReference('RFC 7143, Section 13.25, Obsoleted Keys.')
if mibBuilder.loadTexts: iscsiCxnRecvMarker.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiCxnRecvMarker.setDescription('This object indicates whether or not this connection is receiving markers in its incoming data stream.')
iscsiCxnSendMarker = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnSendMarker.setReference('RFC 7143, Section 13.25, Obsoleted Keys.')
if mibBuilder.loadTexts: iscsiCxnSendMarker.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiCxnSendMarker.setDescription('This object indicates whether or not this connection is inserting markers in its outgoing data stream.')
iscsiCxnVersionActive = MibTableColumn((1, 3, 6, 1, 2, 1, 142, 1, 11, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiCxnVersionActive.setReference('RFC 7143, Section 11.12, Login Request')
if mibBuilder.loadTexts: iscsiCxnVersionActive.setStatus('current')
if mibBuilder.loadTexts: iscsiCxnVersionActive.setDescription('Active version number of the iSCSI specification negotiated on this connection.')
iscsiTgtLoginFailure = NotificationType((1, 3, 6, 1, 2, 1, 142, 0, 1)).setObjects(("ISCSI-MIB", "iscsiTgtLoginFailures"), ("ISCSI-MIB", "iscsiTgtLastFailureType"), ("ISCSI-MIB", "iscsiTgtLastIntrFailureName"), ("ISCSI-MIB", "iscsiTgtLastIntrFailureAddrType"), ("ISCSI-MIB", "iscsiTgtLastIntrFailureAddr"), ("ISCSI-MIB", "iscsiTgtLastIntrFailurePort"))
if mibBuilder.loadTexts: iscsiTgtLoginFailure.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLoginFailure.setDescription('Sent when a login is failed by a target. To avoid sending an excessive number of notifications due to multiple errors counted, an SNMP agent implementing this notification SHOULD NOT send more than 3 notifications of this type in any 10-second time period.')
iscsiIntrLoginFailure = NotificationType((1, 3, 6, 1, 2, 1, 142, 0, 2)).setObjects(("ISCSI-MIB", "iscsiIntrLoginFailures"), ("ISCSI-MIB", "iscsiIntrLastFailureType"), ("ISCSI-MIB", "iscsiIntrLastTgtFailureName"), ("ISCSI-MIB", "iscsiIntrLastTgtFailureAddrType"), ("ISCSI-MIB", "iscsiIntrLastTgtFailureAddr"), ("ISCSI-MIB", "iscsiIntrLastTgtFailurePort"))
if mibBuilder.loadTexts: iscsiIntrLoginFailure.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLoginFailure.setDescription('Sent when a login is failed by an initiator. To avoid sending an excessive number of notifications due to multiple errors counted, an SNMP agent implementing this notification SHOULD NOT send more than 3 notifications of this type in any 10-second time period.')
iscsiInstSessionFailure = NotificationType((1, 3, 6, 1, 2, 1, 142, 0, 3)).setObjects(("ISCSI-MIB", "iscsiInstSsnFailures"), ("ISCSI-MIB", "iscsiInstLastSsnFailureType"), ("ISCSI-MIB", "iscsiInstLastSsnRmtNodeName"))
if mibBuilder.loadTexts: iscsiInstSessionFailure.setStatus('current')
if mibBuilder.loadTexts: iscsiInstSessionFailure.setDescription('Sent when an active session is failed by either the initiator or the target. To avoid sending an excessive number of notifications due to multiple errors counted, an SNMP agent implementing this notification SHOULD NOT send more than 3 notifications of this type in any 10-second time period.')
iscsiCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 2, 1))
iscsiGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 142, 2, 2))
iscsiInstanceAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 1)).setObjects(("ISCSI-MIB", "iscsiInstDescr"), ("ISCSI-MIB", "iscsiInstVersionMin"), ("ISCSI-MIB", "iscsiInstVersionMax"), ("ISCSI-MIB", "iscsiInstVendorID"), ("ISCSI-MIB", "iscsiInstVendorVersion"), ("ISCSI-MIB", "iscsiInstPortalNumber"), ("ISCSI-MIB", "iscsiInstNodeNumber"), ("ISCSI-MIB", "iscsiInstSessionNumber"), ("ISCSI-MIB", "iscsiInstSsnFailures"), ("ISCSI-MIB", "iscsiInstLastSsnFailureType"), ("ISCSI-MIB", "iscsiInstLastSsnRmtNodeName"), ("ISCSI-MIB", "iscsiInstDiscontinuityTime"), ("ISCSI-MIB", "iscsiInstXNodeArchitecture"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiInstanceAttributesGroup = iscsiInstanceAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiInstanceAttributesGroup.setDescription('A collection of objects providing information about iSCSI instances.')
iscsiInstanceSsnErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 2)).setObjects(("ISCSI-MIB", "iscsiInstSsnDigestErrors"), ("ISCSI-MIB", "iscsiInstSsnCxnTimeoutErrors"), ("ISCSI-MIB", "iscsiInstSsnFormatErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiInstanceSsnErrorStatsGroup = iscsiInstanceSsnErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiInstanceSsnErrorStatsGroup.setDescription('A collection of objects providing information about errors that have caused a session failure for an iSCSI instance.')
iscsiPortalAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 3)).setObjects(("ISCSI-MIB", "iscsiPortalRowStatus"), ("ISCSI-MIB", "iscsiPortalStorageType"), ("ISCSI-MIB", "iscsiPortalRoles"), ("ISCSI-MIB", "iscsiPortalAddrType"), ("ISCSI-MIB", "iscsiPortalAddr"), ("ISCSI-MIB", "iscsiPortalProtocol"), ("ISCSI-MIB", "iscsiPortalMaxRecvDataSegLength"), ("ISCSI-MIB", "iscsiPortalPrimaryHdrDigest"), ("ISCSI-MIB", "iscsiPortalPrimaryDataDigest"), ("ISCSI-MIB", "iscsiPortalSecondaryHdrDigest"), ("ISCSI-MIB", "iscsiPortalSecondaryDataDigest"), ("ISCSI-MIB", "iscsiPortalRecvMarker"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiPortalAttributesGroup = iscsiPortalAttributesGroup.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiPortalAttributesGroup.setDescription('A collection of objects providing information about the transport protocol endpoints of the local targets. This object group is deprecated because the marker key is obsolete.')
if mibBuilder.loadTexts: iscsiPortalAttributesGroup.setReference('RFC 7143, Section 13.25, Obsoleted Keys.')
iscsiTgtPortalAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 4)).setObjects(("ISCSI-MIB", "iscsiTgtPortalPort"), ("ISCSI-MIB", "iscsiTgtPortalTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiTgtPortalAttributesGroup = iscsiTgtPortalAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtPortalAttributesGroup.setDescription('A collection of objects providing information about the transport protocol endpoints of the local targets.')
iscsiIntrPortalAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 5)).setObjects(("ISCSI-MIB", "iscsiIntrPortalTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiIntrPortalAttributesGroup = iscsiIntrPortalAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrPortalAttributesGroup.setDescription('An object providing information about the portal tags used by the local initiators.')
iscsiNodeAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 6)).setObjects(("ISCSI-MIB", "iscsiNodeName"), ("ISCSI-MIB", "iscsiNodeAlias"), ("ISCSI-MIB", "iscsiNodeRoles"), ("ISCSI-MIB", "iscsiNodeTransportType"), ("ISCSI-MIB", "iscsiNodeInitialR2T"), ("ISCSI-MIB", "iscsiNodeImmediateData"), ("ISCSI-MIB", "iscsiNodeMaxOutstandingR2T"), ("ISCSI-MIB", "iscsiNodeFirstBurstLength"), ("ISCSI-MIB", "iscsiNodeMaxBurstLength"), ("ISCSI-MIB", "iscsiNodeMaxConnections"), ("ISCSI-MIB", "iscsiNodeDataSequenceInOrder"), ("ISCSI-MIB", "iscsiNodeDataPDUInOrder"), ("ISCSI-MIB", "iscsiNodeDefaultTime2Wait"), ("ISCSI-MIB", "iscsiNodeDefaultTime2Retain"), ("ISCSI-MIB", "iscsiNodeErrorRecoveryLevel"), ("ISCSI-MIB", "iscsiNodeDiscontinuityTime"), ("ISCSI-MIB", "iscsiNodeStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiNodeAttributesGroup = iscsiNodeAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeAttributesGroup.setDescription('A collection of objects providing information about all local targets.')
iscsiTargetAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 7)).setObjects(("ISCSI-MIB", "iscsiTgtLoginFailures"), ("ISCSI-MIB", "iscsiTgtLastFailureTime"), ("ISCSI-MIB", "iscsiTgtLastFailureType"), ("ISCSI-MIB", "iscsiTgtLastIntrFailureName"), ("ISCSI-MIB", "iscsiTgtLastIntrFailureAddrType"), ("ISCSI-MIB", "iscsiTgtLastIntrFailureAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiTargetAttributesGroup = iscsiTargetAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetAttributesGroup.setDescription('A collection of objects providing information about all local targets.')
iscsiTargetLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 8)).setObjects(("ISCSI-MIB", "iscsiTgtLoginAccepts"), ("ISCSI-MIB", "iscsiTgtLoginOtherFails"), ("ISCSI-MIB", "iscsiTgtLoginRedirects"), ("ISCSI-MIB", "iscsiTgtLoginAuthorizeFails"), ("ISCSI-MIB", "iscsiTgtLoginAuthenticateFails"), ("ISCSI-MIB", "iscsiTgtLoginNegotiateFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiTargetLoginStatsGroup = iscsiTargetLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetLoginStatsGroup.setDescription('A collection of objects providing information about all login attempts by remote initiators to local targets.')
iscsiTargetLogoutStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 9)).setObjects(("ISCSI-MIB", "iscsiTgtLogoutNormals"), ("ISCSI-MIB", "iscsiTgtLogoutOthers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiTargetLogoutStatsGroup = iscsiTargetLogoutStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetLogoutStatsGroup.setDescription('A collection of objects providing information about all logout events between remote initiators and local targets.')
iscsiTargetAuthGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 10)).setObjects(("ISCSI-MIB", "iscsiTgtAuthRowStatus"), ("ISCSI-MIB", "iscsiTgtAuthStorageType"), ("ISCSI-MIB", "iscsiTgtAuthIdentity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiTargetAuthGroup = iscsiTargetAuthGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetAuthGroup.setDescription('A collection of objects providing information about all remote initiators that are authorized to connect to local targets.')
iscsiInitiatorAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 11)).setObjects(("ISCSI-MIB", "iscsiIntrLoginFailures"), ("ISCSI-MIB", "iscsiIntrLastFailureTime"), ("ISCSI-MIB", "iscsiIntrLastFailureType"), ("ISCSI-MIB", "iscsiIntrLastTgtFailureName"), ("ISCSI-MIB", "iscsiIntrLastTgtFailureAddrType"), ("ISCSI-MIB", "iscsiIntrLastTgtFailureAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiInitiatorAttributesGroup = iscsiInitiatorAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorAttributesGroup.setDescription('A collection of objects providing information about all local initiators.')
iscsiInitiatorLoginStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 12)).setObjects(("ISCSI-MIB", "iscsiIntrLoginAcceptRsps"), ("ISCSI-MIB", "iscsiIntrLoginOtherFailRsps"), ("ISCSI-MIB", "iscsiIntrLoginRedirectRsps"), ("ISCSI-MIB", "iscsiIntrLoginAuthFailRsps"), ("ISCSI-MIB", "iscsiIntrLoginAuthenticateFails"), ("ISCSI-MIB", "iscsiIntrLoginNegotiateFails"), ("ISCSI-MIB", "iscsiIntrLoginAuthorizeFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiInitiatorLoginStatsGroup = iscsiInitiatorLoginStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorLoginStatsGroup.setDescription('A collection of objects providing information about all login attempts by local initiators to remote targets.')
iscsiInitiatorLogoutStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 13)).setObjects(("ISCSI-MIB", "iscsiIntrLogoutNormals"), ("ISCSI-MIB", "iscsiIntrLogoutOthers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiInitiatorLogoutStatsGroup = iscsiInitiatorLogoutStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorLogoutStatsGroup.setDescription('A collection of objects providing information about all logout events between local initiators and remote targets.')
iscsiInitiatorAuthGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 14)).setObjects(("ISCSI-MIB", "iscsiIntrAuthRowStatus"), ("ISCSI-MIB", "iscsiIntrAuthStorageType"), ("ISCSI-MIB", "iscsiIntrAuthIdentity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiInitiatorAuthGroup = iscsiInitiatorAuthGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorAuthGroup.setDescription('A collection of objects providing information about all remote targets that are initiators of the local system that they are authorized to access.')
iscsiSessionAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 15)).setObjects(("ISCSI-MIB", "iscsiSsnDirection"), ("ISCSI-MIB", "iscsiSsnInitiatorName"), ("ISCSI-MIB", "iscsiSsnTargetName"), ("ISCSI-MIB", "iscsiSsnTSIH"), ("ISCSI-MIB", "iscsiSsnISID"), ("ISCSI-MIB", "iscsiSsnInitiatorAlias"), ("ISCSI-MIB", "iscsiSsnTargetAlias"), ("ISCSI-MIB", "iscsiSsnInitialR2T"), ("ISCSI-MIB", "iscsiSsnImmediateData"), ("ISCSI-MIB", "iscsiSsnType"), ("ISCSI-MIB", "iscsiSsnMaxOutstandingR2T"), ("ISCSI-MIB", "iscsiSsnFirstBurstLength"), ("ISCSI-MIB", "iscsiSsnMaxBurstLength"), ("ISCSI-MIB", "iscsiSsnConnectionNumber"), ("ISCSI-MIB", "iscsiSsnAuthIdentity"), ("ISCSI-MIB", "iscsiSsnDataSequenceInOrder"), ("ISCSI-MIB", "iscsiSsnDataPDUInOrder"), ("ISCSI-MIB", "iscsiSsnErrorRecoveryLevel"), ("ISCSI-MIB", "iscsiSsnDiscontinuityTime"), ("ISCSI-MIB", "iscsiSsnProtocolLevel"), ("ISCSI-MIB", "iscsiSsnTaskReporting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiSessionAttributesGroup = iscsiSessionAttributesGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionAttributesGroup.setDescription('A collection of objects providing information applicable to all sessions.')
iscsiSessionPDUStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 16)).setObjects(("ISCSI-MIB", "iscsiSsnCmdPDUs"), ("ISCSI-MIB", "iscsiSsnRspPDUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiSessionPDUStatsGroup = iscsiSessionPDUStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionPDUStatsGroup.setDescription('A collection of objects providing information about PDU traffic for each session.')
iscsiSessionOctetStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 17)).setObjects(("ISCSI-MIB", "iscsiSsnTxDataOctets"), ("ISCSI-MIB", "iscsiSsnRxDataOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiSessionOctetStatsGroup = iscsiSessionOctetStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionOctetStatsGroup.setDescription('A collection of objects providing information about octet traffic for each session using a Counter64 data type.')
iscsiSessionLCOctetStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 18)).setObjects(("ISCSI-MIB", "iscsiSsnLCTxDataOctets"), ("ISCSI-MIB", "iscsiSsnLCRxDataOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiSessionLCOctetStatsGroup = iscsiSessionLCOctetStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionLCOctetStatsGroup.setDescription('A collection of objects providing information about octet traffic for each session using a Counter32 data type.')
iscsiSessionCxnErrorStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 19)).setObjects(("ISCSI-MIB", "iscsiSsnCxnDigestErrors"), ("ISCSI-MIB", "iscsiSsnCxnTimeoutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiSessionCxnErrorStatsGroup = iscsiSessionCxnErrorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionCxnErrorStatsGroup.setDescription('A collection of objects providing information about connection errors for all sessions.')
iscsiConnectionAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 20)).setObjects(("ISCSI-MIB", "iscsiCxnCid"), ("ISCSI-MIB", "iscsiCxnState"), ("ISCSI-MIB", "iscsiCxnProtocol"), ("ISCSI-MIB", "iscsiCxnAddrType"), ("ISCSI-MIB", "iscsiCxnLocalAddr"), ("ISCSI-MIB", "iscsiCxnLocalPort"), ("ISCSI-MIB", "iscsiCxnRemoteAddr"), ("ISCSI-MIB", "iscsiCxnRemotePort"), ("ISCSI-MIB", "iscsiCxnMaxRecvDataSegLength"), ("ISCSI-MIB", "iscsiCxnMaxXmitDataSegLength"), ("ISCSI-MIB", "iscsiCxnHeaderIntegrity"), ("ISCSI-MIB", "iscsiCxnDataIntegrity"), ("ISCSI-MIB", "iscsiCxnRecvMarker"), ("ISCSI-MIB", "iscsiCxnSendMarker"), ("ISCSI-MIB", "iscsiCxnVersionActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiConnectionAttributesGroup = iscsiConnectionAttributesGroup.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiConnectionAttributesGroup.setDescription('A collection of objects providing information about all connections used by all sessions. This object group is deprecated because the marker key is obsolete.')
if mibBuilder.loadTexts: iscsiConnectionAttributesGroup.setReference('RFC 7143, Section 13.25, Obsoleted Keys.')
iscsiTgtLgnNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 21)).setObjects(("ISCSI-MIB", "iscsiTgtLoginFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiTgtLgnNotificationsGroup = iscsiTgtLgnNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiTgtLgnNotificationsGroup.setDescription('A collection of notifications that indicate a login failure from a remote initiator to a local target.')
iscsiIntrLgnNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 22)).setObjects(("ISCSI-MIB", "iscsiIntrLoginFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiIntrLgnNotificationsGroup = iscsiIntrLgnNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrLgnNotificationsGroup.setDescription('A collection of notifications that indicate a login failure from a local initiator to a remote target.')
iscsiSsnFlrNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 23)).setObjects(("ISCSI-MIB", "iscsiInstSessionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiSsnFlrNotificationsGroup = iscsiSsnFlrNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnFlrNotificationsGroup.setDescription('A collection of notifications that indicate session failures occurring after login.')
iscsiPortalAttributesGroupV2 = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 24)).setObjects(("ISCSI-MIB", "iscsiPortalRowStatus"), ("ISCSI-MIB", "iscsiPortalStorageType"), ("ISCSI-MIB", "iscsiPortalRoles"), ("ISCSI-MIB", "iscsiPortalAddrType"), ("ISCSI-MIB", "iscsiPortalAddr"), ("ISCSI-MIB", "iscsiPortalProtocol"), ("ISCSI-MIB", "iscsiPortalMaxRecvDataSegLength"), ("ISCSI-MIB", "iscsiPortalPrimaryHdrDigest"), ("ISCSI-MIB", "iscsiPortalPrimaryDataDigest"), ("ISCSI-MIB", "iscsiPortalSecondaryHdrDigest"), ("ISCSI-MIB", "iscsiPortalSecondaryDataDigest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiPortalAttributesGroupV2 = iscsiPortalAttributesGroupV2.setStatus('current')
if mibBuilder.loadTexts: iscsiPortalAttributesGroupV2.setDescription('A collection of objects providing information about the transport protocol endpoints of the local targets.')
iscsiConnectionAttributesGroupV2 = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 25)).setObjects(("ISCSI-MIB", "iscsiCxnCid"), ("ISCSI-MIB", "iscsiCxnState"), ("ISCSI-MIB", "iscsiCxnProtocol"), ("ISCSI-MIB", "iscsiCxnAddrType"), ("ISCSI-MIB", "iscsiCxnLocalAddr"), ("ISCSI-MIB", "iscsiCxnLocalPort"), ("ISCSI-MIB", "iscsiCxnRemoteAddr"), ("ISCSI-MIB", "iscsiCxnRemotePort"), ("ISCSI-MIB", "iscsiCxnMaxRecvDataSegLength"), ("ISCSI-MIB", "iscsiCxnMaxXmitDataSegLength"), ("ISCSI-MIB", "iscsiCxnHeaderIntegrity"), ("ISCSI-MIB", "iscsiCxnDataIntegrity"), ("ISCSI-MIB", "iscsiCxnVersionActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiConnectionAttributesGroupV2 = iscsiConnectionAttributesGroupV2.setStatus('current')
if mibBuilder.loadTexts: iscsiConnectionAttributesGroupV2.setDescription('A collection of objects providing information about all connections used by all sessions.')
iscsiNewObjectsV2 = ObjectGroup((1, 3, 6, 1, 2, 1, 142, 2, 2, 26)).setObjects(("ISCSI-MIB", "iscsiInstXNodeArchitecture"), ("ISCSI-MIB", "iscsiSsnTaskReporting"), ("ISCSI-MIB", "iscsiSsnProtocolLevel"), ("ISCSI-MIB", "iscsiSsnNopReceivedPDUs"), ("ISCSI-MIB", "iscsiSsnNopSentPDUs"), ("ISCSI-MIB", "iscsiIntrLastTgtFailurePort"), ("ISCSI-MIB", "iscsiTgtLastIntrFailurePort"), ("ISCSI-MIB", "iscsiPortalDescr"), ("ISCSI-MIB", "iscsiInstSsnTgtUnmappedErrors"), ("ISCSI-MIB", "iscsiTgtLogoutCxnClosed"), ("ISCSI-MIB", "iscsiTgtLogoutCxnRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiNewObjectsV2 = iscsiNewObjectsV2.setStatus('current')
if mibBuilder.loadTexts: iscsiNewObjectsV2.setDescription('A collection of objects added in the second version of the iSCSI MIB.')
iscsiComplianceV1 = ModuleCompliance((1, 3, 6, 1, 2, 1, 142, 2, 1, 1)).setObjects(("ISCSI-MIB", "iscsiInstanceAttributesGroup"), ("ISCSI-MIB", "iscsiInstanceSsnErrorStatsGroup"), ("ISCSI-MIB", "iscsiPortalAttributesGroup"), ("ISCSI-MIB", "iscsiNodeAttributesGroup"), ("ISCSI-MIB", "iscsiSessionAttributesGroup"), ("ISCSI-MIB", "iscsiSessionPDUStatsGroup"), ("ISCSI-MIB", "iscsiSessionCxnErrorStatsGroup"), ("ISCSI-MIB", "iscsiConnectionAttributesGroup"), ("ISCSI-MIB", "iscsiSsnFlrNotificationsGroup"), ("ISCSI-MIB", "iscsiSessionOctetStatsGroup"), ("ISCSI-MIB", "iscsiSessionLCOctetStatsGroup"), ("ISCSI-MIB", "iscsiTgtPortalAttributesGroup"), ("ISCSI-MIB", "iscsiTargetAttributesGroup"), ("ISCSI-MIB", "iscsiTargetLoginStatsGroup"), ("ISCSI-MIB", "iscsiTargetLogoutStatsGroup"), ("ISCSI-MIB", "iscsiTgtLgnNotificationsGroup"), ("ISCSI-MIB", "iscsiTargetAuthGroup"), ("ISCSI-MIB", "iscsiIntrPortalAttributesGroup"), ("ISCSI-MIB", "iscsiInitiatorAttributesGroup"), ("ISCSI-MIB", "iscsiInitiatorLoginStatsGroup"), ("ISCSI-MIB", "iscsiInitiatorLogoutStatsGroup"), ("ISCSI-MIB", "iscsiIntrLgnNotificationsGroup"), ("ISCSI-MIB", "iscsiInitiatorAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiComplianceV1 = iscsiComplianceV1.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiComplianceV1.setDescription('Initial version of compliance statement. If an implementation can be both a target and an initiator, all groups are mandatory. This module compliance is deprecated because the marker keys are obsolete.')
if mibBuilder.loadTexts: iscsiComplianceV1.setReference('RFC 7143, Section 13.25, Obsoleted Keys.')
iscsiComplianceV2 = ModuleCompliance((1, 3, 6, 1, 2, 1, 142, 2, 1, 2)).setObjects(("ISCSI-MIB", "iscsiInstanceAttributesGroup"), ("ISCSI-MIB", "iscsiInstanceSsnErrorStatsGroup"), ("ISCSI-MIB", "iscsiPortalAttributesGroupV2"), ("ISCSI-MIB", "iscsiNodeAttributesGroup"), ("ISCSI-MIB", "iscsiSessionAttributesGroup"), ("ISCSI-MIB", "iscsiSessionPDUStatsGroup"), ("ISCSI-MIB", "iscsiSessionCxnErrorStatsGroup"), ("ISCSI-MIB", "iscsiConnectionAttributesGroupV2"), ("ISCSI-MIB", "iscsiSsnFlrNotificationsGroup"), ("ISCSI-MIB", "iscsiSessionOctetStatsGroup"), ("ISCSI-MIB", "iscsiSessionLCOctetStatsGroup"), ("ISCSI-MIB", "iscsiTgtPortalAttributesGroup"), ("ISCSI-MIB", "iscsiTargetAttributesGroup"), ("ISCSI-MIB", "iscsiTargetLoginStatsGroup"), ("ISCSI-MIB", "iscsiTargetLogoutStatsGroup"), ("ISCSI-MIB", "iscsiTgtLgnNotificationsGroup"), ("ISCSI-MIB", "iscsiTargetAuthGroup"), ("ISCSI-MIB", "iscsiIntrPortalAttributesGroup"), ("ISCSI-MIB", "iscsiInitiatorAttributesGroup"), ("ISCSI-MIB", "iscsiInitiatorLoginStatsGroup"), ("ISCSI-MIB", "iscsiInitiatorLogoutStatsGroup"), ("ISCSI-MIB", "iscsiIntrLgnNotificationsGroup"), ("ISCSI-MIB", "iscsiInitiatorAuthGroup"), ("ISCSI-MIB", "iscsiNewObjectsV2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    iscsiComplianceV2 = iscsiComplianceV2.setStatus('current')
if mibBuilder.loadTexts: iscsiComplianceV2.setDescription('Version 2 of compliance statement based on this revised version of the MIB module. If an implementation can be both a target and an initiator, all groups are mandatory.')
mibBuilder.exportSymbols("ISCSI-MIB", iscsiPortalRecvMarker=iscsiPortalRecvMarker, iscsiIntrAuthRowStatus=iscsiIntrAuthRowStatus, iscsiIntrPortalTag=iscsiIntrPortalTag, iscsiSsnTargetAlias=iscsiSsnTargetAlias, iscsiIntrLastTgtFailureName=iscsiIntrLastTgtFailureName, iscsiIntrAuthIdentity=iscsiIntrAuthIdentity, iscsiNodeRoles=iscsiNodeRoles, iscsiSession=iscsiSession, iscsiTgtAuthStorageType=iscsiTgtAuthStorageType, iscsiIntrLogoutOthers=iscsiIntrLogoutOthers, iscsiSsnDiscontinuityTime=iscsiSsnDiscontinuityTime, iscsiCxnIndex=iscsiCxnIndex, iscsiSsnFirstBurstLength=iscsiSsnFirstBurstLength, iscsiCxnMaxRecvDataSegLength=iscsiCxnMaxRecvDataSegLength, iscsiDataIntegrityNone=iscsiDataIntegrityNone, iscsiPortalSecondaryDataDigest=iscsiPortalSecondaryDataDigest, iscsiNodeImmediateData=iscsiNodeImmediateData, iscsiInstVendorID=iscsiInstVendorID, iscsiInstVersionMin=iscsiInstVersionMin, iscsiCxnDataIntegrity=iscsiCxnDataIntegrity, iscsiPortalProtocol=iscsiPortalProtocol, iscsiSsnAuthIdentity=iscsiSsnAuthIdentity, iscsiTargetAuthGroup=iscsiTargetAuthGroup, iscsiPortalPrimaryHdrDigest=iscsiPortalPrimaryHdrDigest, iscsiObjects=iscsiObjects, iscsiSsnErrorRecoveryLevel=iscsiSsnErrorRecoveryLevel, iscsiTgtPortalAttributesEntry=iscsiTgtPortalAttributesEntry, iscsiIntrPortalAttributesGroup=iscsiIntrPortalAttributesGroup, iscsiPortalMaxRecvDataSegLength=iscsiPortalMaxRecvDataSegLength, iscsiTarget=iscsiTarget, iscsiInstXNodeArchitecture=iscsiInstXNodeArchitecture, iscsiInstVersionMax=iscsiInstVersionMax, iscsiTgtLoginFailures=iscsiTgtLoginFailures, iscsiSsnCxnTimeoutErrors=iscsiSsnCxnTimeoutErrors, iscsiNodeDefaultTime2Retain=iscsiNodeDefaultTime2Retain, iscsiDataIntegrityTypes=iscsiDataIntegrityTypes, iscsiCxnVersionActive=iscsiCxnVersionActive, IscsiName=IscsiName, iscsiTgtAuthAttributesTable=iscsiTgtAuthAttributesTable, iscsiInitiatorLoginStatsTable=iscsiInitiatorLoginStatsTable, iscsiComplianceV2=iscsiComplianceV2, iscsiNodeFirstBurstLength=iscsiNodeFirstBurstLength, iscsiInstSessionFailure=iscsiInstSessionFailure, iscsiInstanceSsnErrorStatsTable=iscsiInstanceSsnErrorStatsTable, iscsiSsnConnectionNumber=iscsiSsnConnectionNumber, iscsiDataIntegrityCrc32c=iscsiDataIntegrityCrc32c, iscsiNodeAlias=iscsiNodeAlias, iscsiIntrAuthorization=iscsiIntrAuthorization, iscsiIntrPortalNodeIndexOrZero=iscsiIntrPortalNodeIndexOrZero, iscsiNodeAttributesTable=iscsiNodeAttributesTable, iscsiTargetAttributesTable=iscsiTargetAttributesTable, iscsiCxnHeaderIntegrity=iscsiCxnHeaderIntegrity, iscsiSsnIndex=iscsiSsnIndex, iscsiSsnTxDataOctets=iscsiSsnTxDataOctets, iscsiNodeMaxConnections=iscsiNodeMaxConnections, iscsiIntrLastFailureType=iscsiIntrLastFailureType, iscsiTgtLoginFailure=iscsiTgtLoginFailure, iscsiCxnSendMarker=iscsiCxnSendMarker, iscsiInstLastSsnFailureType=iscsiInstLastSsnFailureType, iscsiInstanceSsnErrorStatsGroup=iscsiInstanceSsnErrorStatsGroup, iscsiInstanceAttributesTable=iscsiInstanceAttributesTable, iscsiTgtLoginNegotiateFails=iscsiTgtLoginNegotiateFails, iscsiTgtLoginAuthenticateFails=iscsiTgtLoginAuthenticateFails, iscsiInstDescr=iscsiInstDescr, iscsiSessionLCOctetStatsGroup=iscsiSessionLCOctetStatsGroup, iscsiIntrLoginOtherFailRsps=iscsiIntrLoginOtherFailRsps, iscsiSessionStatsTable=iscsiSessionStatsTable, iscsiPortalAddrType=iscsiPortalAddrType, iscsiSessionAttributesTable=iscsiSessionAttributesTable, iscsiCxnRemotePort=iscsiCxnRemotePort, iscsiHeaderIntegrityTypes=iscsiHeaderIntegrityTypes, iscsiSsnISID=iscsiSsnISID, iscsiInstDiscontinuityTime=iscsiInstDiscontinuityTime, iscsiInitiatorAttributesGroup=iscsiInitiatorAttributesGroup, iscsiTargetLoginStatsTable=iscsiTargetLoginStatsTable, iscsiTgtLoginOtherFails=iscsiTgtLoginOtherFails, iscsiTargetLoginStatsEntry=iscsiTargetLoginStatsEntry, iscsiConnectionAttributesGroupV2=iscsiConnectionAttributesGroupV2, iscsiNodeDataSequenceInOrder=iscsiNodeDataSequenceInOrder, iscsiTgtLogoutCxnRemoved=iscsiTgtLogoutCxnRemoved, iscsiIntrAuthAttributesTable=iscsiIntrAuthAttributesTable, iscsiMibModule=iscsiMibModule, iscsiSsnType=iscsiSsnType, iscsiSessionOctetStatsGroup=iscsiSessionOctetStatsGroup, iscsiSessionStatsEntry=iscsiSessionStatsEntry, iscsiTgtAuthRowStatus=iscsiTgtAuthRowStatus, iscsiIntrLoginAuthenticateFails=iscsiIntrLoginAuthenticateFails, iscsiInstSessionNumber=iscsiInstSessionNumber, iscsiPortalAttributesEntry=iscsiPortalAttributesEntry, iscsiSsnImmediateData=iscsiSsnImmediateData, iscsiTgtPortalAttributesTable=iscsiTgtPortalAttributesTable, iscsiInitiatorLogoutStatsGroup=iscsiInitiatorLogoutStatsGroup, iscsiInstSsnFormatErrors=iscsiInstSsnFormatErrors, PYSNMP_MODULE_ID=iscsiMibModule, iscsiIntrLastTgtFailureAddr=iscsiIntrLastTgtFailureAddr, iscsiSsnFlrNotificationsGroup=iscsiSsnFlrNotificationsGroup, iscsiInstVendorVersion=iscsiInstVendorVersion, iscsiTgtAuthIndex=iscsiTgtAuthIndex, iscsiIntrAuthIndex=iscsiIntrAuthIndex, iscsiNodeErrorRecoveryLevel=iscsiNodeErrorRecoveryLevel, iscsiConnectionAttributesGroup=iscsiConnectionAttributesGroup, iscsiSessionAttributesEntry=iscsiSessionAttributesEntry, iscsiInstLastSsnRmtNodeName=iscsiInstLastSsnRmtNodeName, iscsiNodeTransportType=iscsiNodeTransportType, iscsiTargetAttributesEntry=iscsiTargetAttributesEntry, iscsiSsnMaxBurstLength=iscsiSsnMaxBurstLength, iscsiSessionCxnErrorStatsTable=iscsiSessionCxnErrorStatsTable, iscsiCxnRemoteAddr=iscsiCxnRemoteAddr, iscsiTargetAttributesGroup=iscsiTargetAttributesGroup, iscsiTgtPortalTag=iscsiTgtPortalTag, iscsiInitiatorLogoutStatsEntry=iscsiInitiatorLogoutStatsEntry, iscsiSsnDataSequenceInOrder=iscsiSsnDataSequenceInOrder, IscsiTransportProtocol=IscsiTransportProtocol, iscsiConnectionAttributesEntry=iscsiConnectionAttributesEntry, iscsiPortal=iscsiPortal, iscsiSsnInitiatorName=iscsiSsnInitiatorName, iscsiPortalAttributesGroup=iscsiPortalAttributesGroup, iscsiSsnTaskReporting=iscsiSsnTaskReporting, iscsiIntrPortalAttributesTable=iscsiIntrPortalAttributesTable, iscsiConnection=iscsiConnection, iscsiTgtLoginAccepts=iscsiTgtLoginAccepts, iscsiCxnLocalPort=iscsiCxnLocalPort, iscsiPortalAttributesGroupV2=iscsiPortalAttributesGroupV2, iscsiIntrLoginAuthorizeFails=iscsiIntrLoginAuthorizeFails, iscsiComplianceV1=iscsiComplianceV1, iscsiInstanceAttributesEntry=iscsiInstanceAttributesEntry, iscsiSessionPDUStatsGroup=iscsiSessionPDUStatsGroup, iscsiInstanceAttributesGroup=iscsiInstanceAttributesGroup, iscsiSsnNopSentPDUs=iscsiSsnNopSentPDUs, iscsiCxnCid=iscsiCxnCid, iscsiIntrLoginFailure=iscsiIntrLoginFailure, iscsiTgtLastIntrFailureAddrType=iscsiTgtLastIntrFailureAddrType, iscsiPortalStorageType=iscsiPortalStorageType, iscsiTgtPortalAttributesGroup=iscsiTgtPortalAttributesGroup, iscsiSsnCmdPDUs=iscsiSsnCmdPDUs, iscsiPortalRowStatus=iscsiPortalRowStatus, iscsiCxnLocalAddr=iscsiCxnLocalAddr, iscsiIntrLgnNotificationsGroup=iscsiIntrLgnNotificationsGroup, iscsiNodeMaxBurstLength=iscsiNodeMaxBurstLength, iscsiCxnAddrType=iscsiCxnAddrType, iscsiInstSsnTgtUnmappedErrors=iscsiInstSsnTgtUnmappedErrors, iscsiTgtAuthorization=iscsiTgtAuthorization, iscsiNodeAttributesGroup=iscsiNodeAttributesGroup, iscsiPortalAttributesTable=iscsiPortalAttributesTable, iscsiTgtLogoutCxnClosed=iscsiTgtLogoutCxnClosed, iscsiHdrIntegrityNone=iscsiHdrIntegrityNone, iscsiTgtAuthAttributesEntry=iscsiTgtAuthAttributesEntry, iscsiSessionCxnErrorStatsGroup=iscsiSessionCxnErrorStatsGroup, iscsiAdmin=iscsiAdmin, iscsiTgtLoginAuthorizeFails=iscsiTgtLoginAuthorizeFails, iscsiHdrIntegrityCrc32c=iscsiHdrIntegrityCrc32c, iscsiIntrAuthStorageType=iscsiIntrAuthStorageType, iscsiSsnCxnDigestErrors=iscsiSsnCxnDigestErrors, iscsiNodeMaxOutstandingR2T=iscsiNodeMaxOutstandingR2T, iscsiSsnLCRxDataOctets=iscsiSsnLCRxDataOctets, iscsiConnectionAttributesTable=iscsiConnectionAttributesTable, iscsiIntrLastTgtFailurePort=iscsiIntrLastTgtFailurePort, iscsiSsnTargetName=iscsiSsnTargetName, iscsiInstSsnFailures=iscsiInstSsnFailures, iscsiPortalSecondaryHdrDigest=iscsiPortalSecondaryHdrDigest, iscsiTgtLoginRedirects=iscsiTgtLoginRedirects, iscsiSsnTSIH=iscsiSsnTSIH, iscsiSsnRspPDUs=iscsiSsnRspPDUs, iscsiGroups=iscsiGroups, iscsiTgtPortalNodeIndexOrZero=iscsiTgtPortalNodeIndexOrZero, iscsiNode=iscsiNode, iscsiInstSsnCxnTimeoutErrors=iscsiInstSsnCxnTimeoutErrors, iscsiTgtLastFailureType=iscsiTgtLastFailureType, iscsiPortalIndex=iscsiPortalIndex, iscsiTgtLastIntrFailurePort=iscsiTgtLastIntrFailurePort, iscsiTgtLogoutOthers=iscsiTgtLogoutOthers, iscsiSsnDataPDUInOrder=iscsiSsnDataPDUInOrder, iscsiIntrLoginRedirectRsps=iscsiIntrLoginRedirectRsps, iscsiCxnState=iscsiCxnState, iscsiNotifications=iscsiNotifications, iscsiPortalAddr=iscsiPortalAddr, iscsiCompliances=iscsiCompliances, iscsiIntrLoginFailures=iscsiIntrLoginFailures, iscsiSsnDirection=iscsiSsnDirection, iscsiIntrLoginAuthFailRsps=iscsiIntrLoginAuthFailRsps, iscsiTgtPortalPort=iscsiTgtPortalPort, iscsiNodeDiscontinuityTime=iscsiNodeDiscontinuityTime, iscsiConformance=iscsiConformance, iscsiCxnRecvMarker=iscsiCxnRecvMarker, iscsiIntrLastTgtFailureAddrType=iscsiIntrLastTgtFailureAddrType, iscsiSsnRxDataOctets=iscsiSsnRxDataOctets, iscsiIntrPortalAttributesEntry=iscsiIntrPortalAttributesEntry, iscsiInitiatorLoginStatsEntry=iscsiInitiatorLoginStatsEntry, iscsiInstPortalNumber=iscsiInstPortalNumber, iscsiPortalRoles=iscsiPortalRoles, iscsiTgtLastIntrFailureName=iscsiTgtLastIntrFailureName, iscsiSessionAttributesGroup=iscsiSessionAttributesGroup, iscsiTargetLogoutStatsEntry=iscsiTargetLogoutStatsEntry, iscsiNodeDataPDUInOrder=iscsiNodeDataPDUInOrder, iscsiTgtLgnNotificationsGroup=iscsiTgtLgnNotificationsGroup, iscsiCxnProtocol=iscsiCxnProtocol, iscsiCxnMaxXmitDataSegLength=iscsiCxnMaxXmitDataSegLength, iscsiPortalDescr=iscsiPortalDescr, iscsiTargetLogoutStatsTable=iscsiTargetLogoutStatsTable, iscsiInitiatorAttributesEntry=iscsiInitiatorAttributesEntry, iscsiSsnInitiatorAlias=iscsiSsnInitiatorAlias, iscsiNodeDefaultTime2Wait=iscsiNodeDefaultTime2Wait, IscsiDigestMethod=IscsiDigestMethod, iscsiInstIndex=iscsiInstIndex, iscsiPortalPrimaryDataDigest=iscsiPortalPrimaryDataDigest, iscsiIntrLoginAcceptRsps=iscsiIntrLoginAcceptRsps, iscsiTargetLoginStatsGroup=iscsiTargetLoginStatsGroup, iscsiIntrLogoutNormals=iscsiIntrLogoutNormals, iscsiInitiatorAuthGroup=iscsiInitiatorAuthGroup, iscsiTargetLogoutStatsGroup=iscsiTargetLogoutStatsGroup, iscsiSsnProtocolLevel=iscsiSsnProtocolLevel, iscsiTgtLastFailureTime=iscsiTgtLastFailureTime, iscsiIntrLoginNegotiateFails=iscsiIntrLoginNegotiateFails, iscsiInstanceSsnErrorStatsEntry=iscsiInstanceSsnErrorStatsEntry, iscsiNodeStorageType=iscsiNodeStorageType, iscsiSsnInitialR2T=iscsiSsnInitialR2T, iscsiInstNodeNumber=iscsiInstNodeNumber, iscsiInitiatorPortal=iscsiInitiatorPortal, iscsiDescriptors=iscsiDescriptors, iscsiSsnNopReceivedPDUs=iscsiSsnNopReceivedPDUs, iscsiSsnMaxOutstandingR2T=iscsiSsnMaxOutstandingR2T, iscsiSessionCxnErrorStatsEntry=iscsiSessionCxnErrorStatsEntry, iscsiNodeAttributesEntry=iscsiNodeAttributesEntry, iscsiInstSsnDigestErrors=iscsiInstSsnDigestErrors, iscsiNodeName=iscsiNodeName, iscsiNewObjectsV2=iscsiNewObjectsV2, iscsiInstance=iscsiInstance, iscsiTgtLogoutNormals=iscsiTgtLogoutNormals, iscsiSsnLCTxDataOctets=iscsiSsnLCTxDataOctets, iscsiInitiatorLogoutStatsTable=iscsiInitiatorLogoutStatsTable, iscsiTgtAuthIdentity=iscsiTgtAuthIdentity, iscsiInitiatorLoginStatsGroup=iscsiInitiatorLoginStatsGroup, iscsiTargetPortal=iscsiTargetPortal, iscsiNodeInitialR2T=iscsiNodeInitialR2T, iscsiTgtLastIntrFailureAddr=iscsiTgtLastIntrFailureAddr, iscsiInitiatorAttributesTable=iscsiInitiatorAttributesTable, iscsiIntrAuthAttributesEntry=iscsiIntrAuthAttributesEntry, iscsiIntrLastFailureTime=iscsiIntrLastFailureTime, iscsiSsnNodeIndex=iscsiSsnNodeIndex, iscsiNodeIndex=iscsiNodeIndex, iscsiInitiator=iscsiInitiator)
