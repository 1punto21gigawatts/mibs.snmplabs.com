#
# PySNMP MIB module APPIAN-LPORT-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-LPORT-DS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcAdminStatus, AcNodeId, acLport = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcAdminStatus", "AcNodeId", "acLport")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
PerfIntervalCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Bits, Counter64, IpAddress, MibIdentifier, TimeTicks, NotificationType, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Bits", "Counter64", "IpAddress", "MibIdentifier", "TimeTicks", "NotificationType", "ObjectIdentity", "Unsigned32")
TimeStamp, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "TruthValue")
acLogicalDs1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2))
if mibBuilder.loadTexts: acLogicalDs1.setLastUpdated('0008210000Z')
if mibBuilder.loadTexts: acLogicalDs1.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acLogicalDs1.setContactInfo('Brian Johnson')
if mibBuilder.loadTexts: acLogicalDs1.setDescription('The MIB module to describe the Appian Logical DS1 interfaces objects.')
acLogicalDs1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1), )
if mibBuilder.loadTexts: acLogicalDs1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigTable.setDescription('The Appian Logical DS1 Configuration table. This table is created by the EMS/CLI.')
acLogicalDs1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigEntry.setDescription('An entry in the Appian Logical DS1 Configuration table.')
acLogicalDs1ConfigNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ConfigNodeId.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acLogicalDs1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ConfigIndex.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigIndex.setDescription('This value for this object is equal to the value of index from the Time Slot Table that this DS1 corresponds. The value can be a number between 1 and 65535 (64k - 1).')
acLogicalDs1ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 3), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), inactivate(2) or delete(3). Refer to the Appian-SMI.mib file for additional information.')
acLogicalDs1ConfigTimeElapsedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedInterval.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedInterval.setDescription("The number of seconds that have elapsed since the beginning of the near end current error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acLogicalDs1ConfigValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidIntervals.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigValidIntervals.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acLogicalDs1ConfigTimeElapsedDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedDay.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedDay.setDescription("The number of seconds that have elapsed since the beginning of the near end current day error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current day interval exceeds the maximum value, the agent will return the maximum value.")
acLogicalDs1ConfigValidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidDays.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigValidDays.setDescription('The number of previous near end days for which data was collected. The value will be 30 unless the interface was brought online within the last 30 days, in which case the value will be the number of complete 24 hr near end days since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acLogicalDs1ConfigTimeElapsedFarEndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedFarEndInterval.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedFarEndInterval.setDescription("The number of seconds that have elapsed since the beginning of the far end current error-measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
acLogicalDs1ConfigValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidFarEndIntervals.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigValidFarEndIntervals.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acLogicalDs1ConfigTimeElapsedFarEndDay = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedFarEndDay.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigTimeElapsedFarEndDay.setDescription("The number of seconds that have elapsed since the beginning of the far end current day error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current day interval exceeds the maximum value, the agent will return the maximum value.")
acLogicalDs1ConfigValidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigValidFarEndDays.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigValidFarEndDays.setDescription('The number of previous near end days for which data was collected. The value will be 30 unless the far/near end interface was brought online within the last 30 days, in which case the value will be the number of complete 24 hr far end days since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
acLogicalDs1ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ds1SendNoCode", 1), ("ds1SendLineCode", 2), ("ds1SendPayloadCode", 3), ("ds1SendResetCode", 4), ("ds1SendQRS", 5), ("ds1Send511Pattern", 6), ("ds1Send3in24Pattern", 7), ("ds1SendOtherTestPattern", 8))).clone('ds1SendNoCode')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigSendCode.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigSendCode.setDescription('This variable indicates what type of code is being sent across the DS1 interface by the device. Setting this variable causes the interface to send the code requested. The values mean: ds1SendNoCode sending looped or normal data ds1SendLineCode sending a request for a line loopback ds1SendPayloadCode sending a request for a payload loopback ds1SendResetCode sending a loopback termination request ds1SendQRS sending a Quasi-Random Signal (QRS) test pattern ds1Send511Pattern sending a 511 bit fixed test pattern ds1Send3in24Pattern sending a fixed test pattern of 3 bits set in 24 ds1SendOtherTestPattern sending a test pattern other than those described by this object')
acLogicalDs1ConfigCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
acLogicalDs1ConfigLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ds1NoLoop", 1), ("ds1PayloadLoop", 2), ("ds1LineLoop", 3), ("ds1OtherLoop", 4), ("ds1InwardLoop", 5), ("ds1DualLoop", 6))).clone('ds1NoLoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigLoopbackConfig.setDescription("This variable represents the desired loopback configuration of the DS1 interface. Agents supporting read/write access should return inconsistentValue in response to a requested loopback state that the interface does not support. The values mean: ds1NoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as its value. ds1PayloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. ds1LineLoop The received signal at this interface does not go through the device (minimum penetration) but is looped back out. ds1OtherLoop Loopbacks that are not defined here. ds1InwardLoop The transmitted signal at this interface is looped back and received by the same interface. What is transmitted onto the line is product dependent. ds1DualLoop Both ds1LineLoop and ds1InwardLoop will be active simultaneously.")
acLogicalDs1ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatus.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatus.setDescription("This variable indicates the Line Status of the interface. It contains loopback, failure, received 'alarm' and transmitted 'alarms information. The ds1LineStatus is a bit map represented as a sum, therefore, it can represent multiple failures (alarms) and a LoopbackState simultaneously. ds1NoAlarm must be set if and only if no other flag is set. If the ds1loopbackState bit is set, the loopback in effect can be determined from the ds1loopbackConfig object. The various bit positions are: 1 ds1NoAlarm No alarm present 2 ds1RcvFarEndLOF Far end LOF (a.k.a., Yellow Alarm) 4 ds1XmtFarEndLOF Near end sending LOF Indication 8 ds1RcvAIS Far end sending AIS 16 ds1XmtAIS Near end sending AIS 32 ds1LossOfFrame Near end LOF (a.k.a., Red Alarm) 64 dsLossOfSignal Near end Loss Of Signal 128 ds1LoopbackState Near end is looped 256 ds1RcvFarEndLOMF Far End Sending TS16 LOMF 512 ds1XmtFarEndLOMF Near End Sending TS16 LOMF 1024 ds1RcvTestCode Near End detects a test code 2048 ds1OtherFailure any line status not defined here 4096 ds1UnavailSigState Near End in Unavailable Signal State 16384 ds1NetEquipOOS Carrier Equipment Out of Service")
acLogicalDs1ConfigTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigTransmitClockSource.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigTransmitClockSource.setDescription("The source of Transmit Clock. For the logicalDs1, the timing will be throughTiming. This is not currently a configurable parameter. The options are: 'loopTiming' indicates that the recovered receive clock is used as the transmit clock. 'localTiming' indicates that a local clock source is used or when an external clock is attached to the box containing the interface. 'throughTiming' indicates that recovered receive clock from another interface is used as the transmit clock.")
acLogicalDs1ConfigInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidIntervals.setDescription('The number of intervals in the range from 0 to ds1ValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acLogicalDs1ConfigInvalidDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidDays.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidDays.setDescription('The number of days in the range from 0 to ds1ValidDays for which no data is available. This object will typically be zero except in cases where the data for some days are not available (e.g., in proxy situations).')
acLogicalDs1ConfigInvalidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidFarEndIntervals.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidFarEndIntervals.setDescription('The number of intervals in the range from 0 to acLogicalDs1ConfigValidFarEndIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
acLogicalDs1ConfigInvalidFarEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidFarEndDays.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigInvalidFarEndDays.setDescription('The number of days in the range from 0 to acLogicalDs1ConfigValidFarEndDays for which no data is available. This object will typically be zero except in cases where the data for some days are not available (e.g., in proxy situations).')
acLogicalDs1ConfigLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 21), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatusLastChange.setDescription("The value of MIB II's sysUpTime object at the time this DS1 entered its current line status state. If the current state was entered prior to the last re-initialization of the proxy-agent, then this object contains a zero value.")
acLogicalDs1ConfigLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatusChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigLineStatusChangeTrapEnable.setDescription('Indicates whether acLogicalDs1ConfigLineStatusChange traps should be generated for this interface.')
acLogicalDs1ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigLoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS1 interface. It contains information about loopbacks established by a manager and remotely from the far end. The ds1LoopbackStatus is a bit map represented as a sum, therefore is can represent multiple loopbacks simultaneously. The various bit positions are: 1 ds1NoLoopback 2 ds1NearEndPayloadLoopback 4 ds1NearEndLineLoopback 8 ds1NearEndOtherLoopback 16 ds1NearEndInwardLoopback 32 ds1FarEndPayloadLoopback 64 ds1FarEndLineLoopback')
acLogicalDs1ConfigVTNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1ConfigVTNumber.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ConfigVTNumber.setDescription('This variable represents the virtual tributary number in the STS-1 frame that this DS1 corresponds to.')
acLogicalDs1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2), )
if mibBuilder.loadTexts: acLogicalDs1IntervalTable.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalTable.setDescription('The Appian DS1 Interval Table contains various statistics collected by each DS1 Interface over the previous 24 hours of operation as well as over the current period. The past 24 hours are broken into 96 completed 15 minute intervals. The first row in this table (identified by acLogicalDs1IntervalNumber=1) represents the current interval statistics. The next 96 rows in this table (represented by acLogicalDs1IntervalNumber=2..97) represents one of the past 15 minute intervals. The final row (identified by acLogicalDs1IntervalNumber=98) is the total of all the past intervals (2..97). This table is created automatically.')
acLogicalDs1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1IntervalNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1IntervalIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1IntervalNumber"))
if mibBuilder.loadTexts: acLogicalDs1IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalEntry.setDescription('An entry in the Appian DS1 Interval table.')
acLogicalDs1IntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1IntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acLogicalDs1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1IntervalIndex.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a acLogicalDs1Index object instance.')
acLogicalDs1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1IntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalNumber.setDescription('A number between 1 and 98, where 1 is the current 15 minute interval in progress, 2 is the most recently completed 15 minute interval and 97 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 2, and 98 is the total (sum) of all of the previous completed intervals (2..97).')
acLogicalDs1IntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalValidStats.setDescription('This variable indicates if the data for this interval is valid. For acLogicalDs1IntervalNumber=98, this value will only be true if all data is valid for intervals 2..97.')
acLogicalDs1IntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1IntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalResetStats.setDescription('This variable allows the data for the current interval (acLogicalDs1IntervalNumber = 1) to be reset. The acLogicalDs1IntervalValidStats will be set to False after the reset for the current interval. This field has no effect on acLogicalDs1IntervalNumber 2..98. This field will always show a value of False when read.')
acLogicalDs1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalESs.setDescription('The number of Errored Seconds.')
acLogicalDs1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalSESs.setDescription('The number of Severely Errored Seconds.')
acLogicalDs1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds.')
acLogicalDs1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalUASs.setDescription('The number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
acLogicalDs1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalCSSs.setDescription('The number of Controlled Slip Seconds.')
acLogicalDs1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalPCVs.setDescription('The number of Path Coding Violations.')
acLogicalDs1IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalLESs.setDescription('The number of Line Errored Seconds.')
acLogicalDs1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalBESs.setDescription('The number of Bursty Errored Seconds.')
acLogicalDs1IntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalDMs.setDescription('The number of Degraded Minutes.')
acLogicalDs1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 2, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1IntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1IntervalLCVs.setDescription('The number of Line Code Violations.')
acLogicalDs1DayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3), )
if mibBuilder.loadTexts: acLogicalDs1DayTable.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayTable.setDescription('The Appian Logical DS1 Day Table contains various statistics collected by each DS1 Interface over the previous 30 days of operation as well as over the current day period. The first row in this table (identified by acLogicalDs1DayNumber=1) represents the current day statistics. The next 30 rows in this table (represented by acLogicalDs1DayNumber=2..31) represents one of the past 24 hr periods (day). This table is created automatically.')
acLogicalDs1DayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1DayNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1DayIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1DayNumber"))
if mibBuilder.loadTexts: acLogicalDs1DayEntry.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayEntry.setDescription('An entry in the Appian DS1 Day table.')
acLogicalDs1DayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1DayNodeId.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acLogicalDs1DayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1DayIndex.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a acLogicalDs1Index object instance.')
acLogicalDs1DayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1DayNumber.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayNumber.setDescription('A number between 1 and 31, where 1 is the current 24 hour interval in progress (day), 2 is the most recently completed 24 hour interval and 31 is the 24 hour interval completed 29 days prior to interval 1.')
acLogicalDs1DayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayValidStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acLogicalDs1DayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1DayResetStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayResetStats.setDescription('This variable allows the data for the current day (acLogicalDs1DayIndex = 1) to be reset. The acLogicalDs1DayValidStats will be set to False after the reset for the current day. This field has no effect on acLogicalDs1DayIndex 2..31. This field will always show a value of False when read.')
acLogicalDs1DayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayESs.setDescription('The number of Errored Seconds.')
acLogicalDs1DaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DaySESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DaySESs.setDescription('The number of Severely Errored Seconds.')
acLogicalDs1DaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DaySEFSs.setDescription('The number of Severely Errored Framing Seconds.')
acLogicalDs1DayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayUASs.setDescription('The number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
acLogicalDs1DayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayCSSs.setDescription('The number of Controlled Slip Seconds.')
acLogicalDs1DayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayPCVs.setDescription('The number of Path Coding Violations.')
acLogicalDs1DayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayLESs.setDescription('The number of Line Errored Seconds.')
acLogicalDs1DayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayBESs.setDescription('The number of Bursty Errored Seconds.')
acLogicalDs1DayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayDMs.setDescription('The number of Degraded Minutes.')
acLogicalDs1DayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 3, 1, 15), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1DayLCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1DayLCVs.setDescription('The number of Line Code Violations.')
acLogicalDs1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4), )
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalTable.setDescription('The DS1 Logical Far End Interval Table contains various statistics collected by each DS1 interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by acLogicalDs1FarEndIntervalNumber) for one specific instance (identified by acLogicalDs1FarEndIntervalIndex). This table is created automatically.')
acLogicalDs1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndIntervalNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndIntervalIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndIntervalNumber"))
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalEntry.setDescription('An entry in the DS1 Far End Interval table.')
acLogicalDs1FarEndIntervalNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalNodeId.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acLogicalDs1FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is identical to the interface identified by the same value of acLogicalDs1Index.')
acLogicalDs1FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 98))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalNumber.setDescription('A number between 1 and 98, where 1 is current 15 minute interval in progress, 2 is the most recently completed 15 minute interval and 97 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 2, and 98 is the total of intervals 2..97 (sum).')
acLogicalDs1FarEndIntervalValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalValidStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalValidStats.setDescription('This variable indicates if the data for this interval is valid. For acLogicalDs1FarEndIntervalNumber=98, this value will only be true if all data is valid for intervals 2..97.')
acLogicalDs1FarEndIntervalResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalResetStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalResetStats.setDescription('This variable allows the data for the current interval (acLogicalDs1FarEndIntervalNumber = 1) to be reset. The acLogicalDs1FarEndIntervalValidStats will be set to False after the reset for the current interval. This field has no effect on acLogicalDs1FarEndIntervalNumber 2..98. This field will always show a value of false when read.')
acLogicalDs1FarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalESs.setDescription('The number of Far End Errored Seconds.')
acLogicalDs1FarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalSESs.setDescription('The number of Far End Severely Errored Seconds.')
acLogicalDs1FarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalSEFSs.setDescription('The number of Far End Severely Errored Framing Seconds.')
acLogicalDs1FarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalUASs.setDescription('The number of Unavailable Seconds.')
acLogicalDs1FarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalCSSs.setDescription('The number of Far End Controlled Slip Seconds.')
acLogicalDs1FarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalLESs.setDescription('The number of Far End Line Errored Seconds.')
acLogicalDs1FarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalPCVs.setDescription('The number of Far End Path Coding Violations.')
acLogicalDs1FarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalBESs.setDescription('The number of Far End Bursty Errored Seconds.')
acLogicalDs1FarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 4, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndIntervalDMs.setDescription('The number of Far End Degraded Minutes.')
acLogicalDs1FarEndDayTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5), )
if mibBuilder.loadTexts: acLogicalDs1FarEndDayTable.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayTable.setDescription('The DS1 Logical Far End Day Table contains various statistics collected by each DS1 interface over the previous 30 days of operation. Each row in this table represents a one day interval (identified by acLogicalDs1FarEndDayNumber). This table is created automatically.')
acLogicalDs1FarEndDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndDayNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndDayIndex"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1FarEndDayNumber"))
if mibBuilder.loadTexts: acLogicalDs1FarEndDayEntry.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayEntry.setDescription('An entry in the DS1 Far End Day table.')
acLogicalDs1FarEndDayNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayNodeId.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acLogicalDs1FarEndDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayIndex.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is identical to the interface identified by the same value of acLogicalDs1Index.')
acLogicalDs1FarEndDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayNumber.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayNumber.setDescription('A number between 1 and 31, where 1 is current 24 hour day interval in progress, 2 is the most recently completed 24 hour day interval and 31 is the 24 hour day interval completed 29 days prior to interval 2.')
acLogicalDs1FarEndDayValidStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayValidStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayValidStats.setDescription('This variable indicates if the data for this interval is valid.')
acLogicalDs1FarEndDayResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayResetStats.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayResetStats.setDescription('This variable allows the data for the current day (acLogicalDs1FarEndDayIndex = 1) to be reset. The acLogicalDs1FarEndDayValidStats will be set to False after the reset for the current interval. This field has no effect on acLogicalDs1FarEndDayIndex 2..31. This field will always show a value of false when read.')
acLogicalDs1FarEndDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayESs.setDescription('The number of Far End Errored Seconds.')
acLogicalDs1FarEndDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDaySESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDaySESs.setDescription('The number of Far End Severely Errored Seconds.')
acLogicalDs1FarEndDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDaySEFSs.setDescription('The number of Far End Severely Errored Framing Seconds.')
acLogicalDs1FarEndDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayUASs.setDescription('The number of Unavailable Seconds.')
acLogicalDs1FarEndDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayCSSs.setDescription('The number of Far End Controlled Slip Seconds.')
acLogicalDs1FarEndDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayLESs.setDescription('The number of Far End Line Errored Seconds.')
acLogicalDs1FarEndDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayPCVs.setDescription('The number of Far End Path Coding Violations.')
acLogicalDs1FarEndDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayBESs.setDescription('The number of Far End Bursty Errored Seconds.')
acLogicalDs1FarEndDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 5, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acLogicalDs1FarEndDayDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1FarEndDayDMs.setDescription('The number of Far End Degraded Minutes.')
acLogicalDs1ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6), )
if mibBuilder.loadTexts: acLogicalDs1ThresholdTable.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdTable.setDescription('The Appian DS1 Logical Threshold Table allows the user to configure the threshold values for each of the statistics found in the interval table base on the 15 minute interval on the day. This table is created automatically.')
acLogicalDs1ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1), ).setIndexNames((0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), (0, "APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdEntry.setDescription('An entry in the Appian DS1 Threshold table.')
acLogicalDs1ThresholdNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNodeId.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acLogicalDs1ThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acLogicalDs1ThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a acLogicalDs1Index object instance. This table is created automatically.')
acLogicalDs1ThresholdNEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalESs.setDescription('The threshold value for interval number of Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalSESs.setDescription('The threshold value for the interval number of Severely Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalSEFSs.setDescription('The threshold for the interval number of Severely Errored Framing Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalUASs.setDescription('The threshold for the interval number of Unavailable Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalCSSs.setDescription('The threshold for the interval number of Controlled Slip Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalPCVs.setDescription('The threshold for the interval number of Path Coding Violations. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalLESs.setDescription('The threshold value for the interval number of Line Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalBESs.setDescription('The threshold for the interval number of Bursty Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalDMs.setDescription('The threshold for the interval number of Degraded Minutes. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEIntervalLCVs.setDescription('The threshold for the interval number of Line Code Violations. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayESs.setDescription('The threshold value for day number of Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDaySESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDaySESs.setDescription('The threshold for the day number of Severely Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDaySEFSs.setDescription('The threshold value for the day number of Severely Errored Framing Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayUASs.setDescription('The threshold value for the day number of Unavailable Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayCSSs.setDescription('The threshold for the day number of Controlled Slip Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayPCVs.setDescription('The threshold value for the day number of Path Coding Violations. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayLESs.setDescription('The threshold for the day number of Line Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayBESs.setDescription('The threshold for the day number of Bursty Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayDMs.setDescription('The threshold for the day number of Degraded Minutes. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdNEDayLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayLCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdNEDayLCVs.setDescription('The threshold for the day number of Line Code Violations. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalESs.setDescription('The threshold for the far end interval number of Far End Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalSESs.setDescription('The threshold for the far end interval number of Far End Severely Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalSEFSs.setDescription('The threshold for the far end interval number of Far End Severely Errored Framing Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalUASs.setDescription('The threshold value for the far end interval number of Unavailable Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalCSSs.setDescription('The threshold value for the far end interval number of Far End Controlled Slip Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalLESs.setDescription('The threshold value for the far end interal number of Far End Line Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalPCVs.setDescription('The threshold for the far end internal number of Far End Path Coding Violations. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalBESs.setDescription('The threshold for the far end interval number of Far End Bursty Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEIntervalDMs.setDescription('The threshold for the far end interval number of Far End Degraded Minutes. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayESs.setDescription('The threshold for the far end day number of Far End Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDaySESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDaySESs.setDescription('The threshold for the far end day number of Far End Severely Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDaySEFSs.setDescription('The threshold for the far end day number of Far End Severely Errored Framing Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayUASs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayUASs.setDescription('The threshold value for the far end day number of Unavailable Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDayCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayCSSs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayCSSs.setDescription('The threshold value for the far end day number of Far End Controlled Slip Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDayLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayLESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayLESs.setDescription('The threshold value for the far end interal number of Far End Line Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDayPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayPCVs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayPCVs.setDescription('The threshold for the far end internal number of Far End Path Coding Violations. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDayBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayBESs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayBESs.setDescription('The threshold for the far end day number of Far End Bursty Errored Seconds. A value of 0 disables the threshold for this error.')
acLogicalDs1ThresholdFEDayDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 6, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayDMs.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ThresholdFEDayDMs.setDescription('The threshold for the far end day number of Far End Degraded Minutes. A value of 0 disables the threshold for this error.')
acLogicalDs1Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0))
acLogicalDs1LineStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigLineStatus"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigLineStatusLastChange"))
if mibBuilder.loadTexts: acLogicalDs1LineStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1LineStatusChangeTrap.setDescription('An acLogcialDs1LineStatusChange trap is sent when the value of an instance acLogicalDs1ConfigLineStatus changes. It can be utilized by an NMS to trigger polls.')
acLogicalDs1StatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1StatsResetTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1StatsResetTrap.setDescription('The Logical Ds1 statistics for this interface have been reset to zero (0) which may effect long term trending functions monitoring this interface.')
acLogicalDs1CfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1CfgErrorTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1CfgErrorTrap.setDescription('A configuration request to the Logical Ds1 configuration table for an interface has been detected as invalid or corrupt.')
acLogicalDs1LinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1LinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1LinkDownTrap.setDescription('The link for this ds1 interface has obtained sync.')
acLogicalDs1LinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ConfigIndex"))
if mibBuilder.loadTexts: acLogicalDs1LinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1LinkUpTrap.setDescription('The link for this ds1 interface has lost sync.')
acLogicalDs1ExceededThresholdNEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 7)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 8)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalSESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 9)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 10)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalUASsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 11)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalCSSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 12)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalPCVsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 13)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalLESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 14)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalBESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 15)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalDMsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEIntervalLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 16)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalLCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEIntervalLCVsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 17)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 18)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDaySESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDaySESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 19)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDaySEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDaySEFSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 20)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayUASsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 21)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayCSSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 22)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayPCVsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 23)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayLESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 24)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayBESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 25)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayDMsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdNEDayLCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 26)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayLCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdNEDayLCVsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 27)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalSESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 28)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalSESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalSESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 29)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 30)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalUASsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 31)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalCSSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 32)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalLESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 33)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalPCVsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 34)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalBESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEIntervalDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 35)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEIntervalDMsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDayESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 36)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDaySESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 37)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDaySESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDaySESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDaySEFSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 38)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDaySEFSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDaySEFSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDayUASsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 39)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayUASsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayUASsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDayCSSsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 40)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayCSSsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayCSSsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDayLESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 41)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayLESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayLESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDayPCVsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 42)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayPCVsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayPCVsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDayBESsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 43)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayBESsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayBESsTrap.setDescription('The specified threshold for this interface has been exceeded.')
acLogicalDs1ExceededThresholdFEDayDMsTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 4, 2, 0, 44)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdNodeId"), ("APPIAN-LPORT-DS1-MIB", "acLogicalDs1ThresholdIndex"))
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayDMsTrap.setStatus('current')
if mibBuilder.loadTexts: acLogicalDs1ExceededThresholdFEDayDMsTrap.setDescription('The specified threshold for this interface has been exceeded.')
mibBuilder.exportSymbols("APPIAN-LPORT-DS1-MIB", acLogicalDs1ThresholdFEDayDMs=acLogicalDs1ThresholdFEDayDMs, acLogicalDs1ExceededThresholdNEDaySEFSsTrap=acLogicalDs1ExceededThresholdNEDaySEFSsTrap, acLogicalDs1FarEndDayEntry=acLogicalDs1FarEndDayEntry, acLogicalDs1ThresholdNEIntervalESs=acLogicalDs1ThresholdNEIntervalESs, acLogicalDs1ThresholdFEDayLESs=acLogicalDs1ThresholdFEDayLESs, acLogicalDs1FarEndDayTable=acLogicalDs1FarEndDayTable, acLogicalDs1ThresholdNEIntervalUASs=acLogicalDs1ThresholdNEIntervalUASs, acLogicalDs1ExceededThresholdFEIntervalESsTrap=acLogicalDs1ExceededThresholdFEIntervalESsTrap, acLogicalDs1ConfigIndex=acLogicalDs1ConfigIndex, acLogicalDs1ThresholdFEIntervalBESs=acLogicalDs1ThresholdFEIntervalBESs, acLogicalDs1DayUASs=acLogicalDs1DayUASs, acLogicalDs1IntervalSEFSs=acLogicalDs1IntervalSEFSs, acLogicalDs1ExceededThresholdNEDayBESsTrap=acLogicalDs1ExceededThresholdNEDayBESsTrap, acLogicalDs1DaySEFSs=acLogicalDs1DaySEFSs, acLogicalDs1FarEndIntervalSESs=acLogicalDs1FarEndIntervalSESs, acLogicalDs1ThresholdNEIntervalLCVs=acLogicalDs1ThresholdNEIntervalLCVs, acLogicalDs1ExceededThresholdFEIntervalUASsTrap=acLogicalDs1ExceededThresholdFEIntervalUASsTrap, acLogicalDs1DayCSSs=acLogicalDs1DayCSSs, acLogicalDs1FarEndDayBESs=acLogicalDs1FarEndDayBESs, acLogicalDs1DayLCVs=acLogicalDs1DayLCVs, acLogicalDs1FarEndDaySESs=acLogicalDs1FarEndDaySESs, acLogicalDs1ExceededThresholdNEDayESsTrap=acLogicalDs1ExceededThresholdNEDayESsTrap, acLogicalDs1FarEndIntervalEntry=acLogicalDs1FarEndIntervalEntry, acLogicalDs1ExceededThresholdNEIntervalLESsTrap=acLogicalDs1ExceededThresholdNEIntervalLESsTrap, acLogicalDs1ConfigLineStatusChangeTrapEnable=acLogicalDs1ConfigLineStatusChangeTrapEnable, acLogicalDs1LinkUpTrap=acLogicalDs1LinkUpTrap, acLogicalDs1ThresholdFEDaySEFSs=acLogicalDs1ThresholdFEDaySEFSs, acLogicalDs1ThresholdFEDayBESs=acLogicalDs1ThresholdFEDayBESs, acLogicalDs1ThresholdFEIntervalCSSs=acLogicalDs1ThresholdFEIntervalCSSs, acLogicalDs1ExceededThresholdFEIntervalDMsTrap=acLogicalDs1ExceededThresholdFEIntervalDMsTrap, acLogicalDs1ExceededThresholdFEDaySESsTrap=acLogicalDs1ExceededThresholdFEDaySESsTrap, acLogicalDs1IntervalNodeId=acLogicalDs1IntervalNodeId, acLogicalDs1Traps=acLogicalDs1Traps, acLogicalDs1ExceededThresholdNEIntervalLCVsTrap=acLogicalDs1ExceededThresholdNEIntervalLCVsTrap, acLogicalDs1IntervalResetStats=acLogicalDs1IntervalResetStats, acLogicalDs1FarEndIntervalESs=acLogicalDs1FarEndIntervalESs, acLogicalDs1ThresholdNEDaySESs=acLogicalDs1ThresholdNEDaySESs, acLogicalDs1StatsResetTrap=acLogicalDs1StatsResetTrap, acLogicalDs1LineStatusChangeTrap=acLogicalDs1LineStatusChangeTrap, acLogicalDs1ThresholdIndex=acLogicalDs1ThresholdIndex, acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap=acLogicalDs1ExceededThresholdFEIntervalSEFSsTrap, acLogicalDs1DayBESs=acLogicalDs1DayBESs, acLogicalDs1FarEndIntervalResetStats=acLogicalDs1FarEndIntervalResetStats, acLogicalDs1FarEndDayDMs=acLogicalDs1FarEndDayDMs, acLogicalDs1ExceededThresholdFEIntervalCSSsTrap=acLogicalDs1ExceededThresholdFEIntervalCSSsTrap, acLogicalDs1IntervalValidStats=acLogicalDs1IntervalValidStats, acLogicalDs1ExceededThresholdNEDayLESsTrap=acLogicalDs1ExceededThresholdNEDayLESsTrap, acLogicalDs1DayValidStats=acLogicalDs1DayValidStats, acLogicalDs1ConfigLoopbackConfig=acLogicalDs1ConfigLoopbackConfig, acLogicalDs1ThresholdNodeId=acLogicalDs1ThresholdNodeId, acLogicalDs1ExceededThresholdNEDayLCVsTrap=acLogicalDs1ExceededThresholdNEDayLCVsTrap, acLogicalDs1IntervalCSSs=acLogicalDs1IntervalCSSs, acLogicalDs1FarEndDayIndex=acLogicalDs1FarEndDayIndex, acLogicalDs1FarEndDayESs=acLogicalDs1FarEndDayESs, acLogicalDs1ExceededThresholdNEIntervalCSSsTrap=acLogicalDs1ExceededThresholdNEIntervalCSSsTrap, acLogicalDs1FarEndDayCSSs=acLogicalDs1FarEndDayCSSs, acLogicalDs1ExceededThresholdFEIntervalBESsTrap=acLogicalDs1ExceededThresholdFEIntervalBESsTrap, acLogicalDs1FarEndIntervalUASs=acLogicalDs1FarEndIntervalUASs, acLogicalDs1ConfigTimeElapsedDay=acLogicalDs1ConfigTimeElapsedDay, acLogicalDs1IntervalESs=acLogicalDs1IntervalESs, acLogicalDs1ExceededThresholdNEDayDMsTrap=acLogicalDs1ExceededThresholdNEDayDMsTrap, acLogicalDs1ConfigTimeElapsedFarEndDay=acLogicalDs1ConfigTimeElapsedFarEndDay, acLogicalDs1ThresholdNEIntervalPCVs=acLogicalDs1ThresholdNEIntervalPCVs, acLogicalDs1IntervalPCVs=acLogicalDs1IntervalPCVs, acLogicalDs1ExceededThresholdFEDayESsTrap=acLogicalDs1ExceededThresholdFEDayESsTrap, acLogicalDs1DayLESs=acLogicalDs1DayLESs, acLogicalDs1DayEntry=acLogicalDs1DayEntry, acLogicalDs1FarEndIntervalBESs=acLogicalDs1FarEndIntervalBESs, acLogicalDs1ConfigAdminStatus=acLogicalDs1ConfigAdminStatus, acLogicalDs1FarEndDayLESs=acLogicalDs1FarEndDayLESs, acLogicalDs1ExceededThresholdFEDayCSSsTrap=acLogicalDs1ExceededThresholdFEDayCSSsTrap, acLogicalDs1DayNumber=acLogicalDs1DayNumber, acLogicalDs1ThresholdNEDayBESs=acLogicalDs1ThresholdNEDayBESs, acLogicalDs1ExceededThresholdNEIntervalPCVsTrap=acLogicalDs1ExceededThresholdNEIntervalPCVsTrap, acLogicalDs1ThresholdNEDayUASs=acLogicalDs1ThresholdNEDayUASs, acLogicalDs1FarEndIntervalCSSs=acLogicalDs1FarEndIntervalCSSs, acLogicalDs1FarEndDayResetStats=acLogicalDs1FarEndDayResetStats, acLogicalDs1FarEndIntervalSEFSs=acLogicalDs1FarEndIntervalSEFSs, acLogicalDs1FarEndDaySEFSs=acLogicalDs1FarEndDaySEFSs, acLogicalDs1FarEndDayValidStats=acLogicalDs1FarEndDayValidStats, acLogicalDs1ThresholdNEDayPCVs=acLogicalDs1ThresholdNEDayPCVs, acLogicalDs1ExceededThresholdFEDayPCVsTrap=acLogicalDs1ExceededThresholdFEDayPCVsTrap, acLogicalDs1IntervalBESs=acLogicalDs1IntervalBESs, acLogicalDs1CfgErrorTrap=acLogicalDs1CfgErrorTrap, acLogicalDs1IntervalIndex=acLogicalDs1IntervalIndex, acLogicalDs1IntervalLCVs=acLogicalDs1IntervalLCVs, acLogicalDs1FarEndDayUASs=acLogicalDs1FarEndDayUASs, acLogicalDs1ExceededThresholdFEDayBESsTrap=acLogicalDs1ExceededThresholdFEDayBESsTrap, acLogicalDs1ThresholdNEDayCSSs=acLogicalDs1ThresholdNEDayCSSs, acLogicalDs1ConfigTransmitClockSource=acLogicalDs1ConfigTransmitClockSource, acLogicalDs1ThresholdFEIntervalDMs=acLogicalDs1ThresholdFEIntervalDMs, acLogicalDs1DayTable=acLogicalDs1DayTable, acLogicalDs1ConfigLineStatusLastChange=acLogicalDs1ConfigLineStatusLastChange, acLogicalDs1LinkDownTrap=acLogicalDs1LinkDownTrap, acLogicalDs1ExceededThresholdNEDayPCVsTrap=acLogicalDs1ExceededThresholdNEDayPCVsTrap, acLogicalDs1FarEndIntervalPCVs=acLogicalDs1FarEndIntervalPCVs, acLogicalDs1FarEndIntervalDMs=acLogicalDs1FarEndIntervalDMs, acLogicalDs1FarEndIntervalTable=acLogicalDs1FarEndIntervalTable, acLogicalDs1ThresholdFEIntervalUASs=acLogicalDs1ThresholdFEIntervalUASs, acLogicalDs1=acLogicalDs1, acLogicalDs1ConfigInvalidFarEndDays=acLogicalDs1ConfigInvalidFarEndDays, acLogicalDs1FarEndIntervalValidStats=acLogicalDs1FarEndIntervalValidStats, acLogicalDs1ConfigCircuitIdentifier=acLogicalDs1ConfigCircuitIdentifier, acLogicalDs1ConfigTimeElapsedInterval=acLogicalDs1ConfigTimeElapsedInterval, acLogicalDs1ThresholdTable=acLogicalDs1ThresholdTable, acLogicalDs1ThresholdNEDayLESs=acLogicalDs1ThresholdNEDayLESs, acLogicalDs1ThresholdFEIntervalPCVs=acLogicalDs1ThresholdFEIntervalPCVs, acLogicalDs1DayNodeId=acLogicalDs1DayNodeId, acLogicalDs1ConfigInvalidFarEndIntervals=acLogicalDs1ConfigInvalidFarEndIntervals, acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap=acLogicalDs1ExceededThresholdNEIntervalSEFSsTrap, acLogicalDs1ExceededThresholdFEIntervalSESsTrap=acLogicalDs1ExceededThresholdFEIntervalSESsTrap, acLogicalDs1ExceededThresholdNEIntervalUASsTrap=acLogicalDs1ExceededThresholdNEIntervalUASsTrap, acLogicalDs1ExceededThresholdNEDayCSSsTrap=acLogicalDs1ExceededThresholdNEDayCSSsTrap, acLogicalDs1DayESs=acLogicalDs1DayESs, acLogicalDs1ConfigValidDays=acLogicalDs1ConfigValidDays, acLogicalDs1ThresholdNEIntervalDMs=acLogicalDs1ThresholdNEIntervalDMs, acLogicalDs1ThresholdFEDaySESs=acLogicalDs1ThresholdFEDaySESs, acLogicalDs1ThresholdNEDayESs=acLogicalDs1ThresholdNEDayESs, acLogicalDs1ConfigInvalidIntervals=acLogicalDs1ConfigInvalidIntervals, acLogicalDs1FarEndDayNumber=acLogicalDs1FarEndDayNumber, acLogicalDs1ConfigVTNumber=acLogicalDs1ConfigVTNumber, acLogicalDs1ThresholdFEDayCSSs=acLogicalDs1ThresholdFEDayCSSs, acLogicalDs1DayResetStats=acLogicalDs1DayResetStats, acLogicalDs1FarEndIntervalNodeId=acLogicalDs1FarEndIntervalNodeId, acLogicalDs1FarEndDayNodeId=acLogicalDs1FarEndDayNodeId, acLogicalDs1ThresholdNEIntervalSEFSs=acLogicalDs1ThresholdNEIntervalSEFSs, acLogicalDs1ConfigTable=acLogicalDs1ConfigTable, acLogicalDs1IntervalEntry=acLogicalDs1IntervalEntry, acLogicalDs1ThresholdFEIntervalESs=acLogicalDs1ThresholdFEIntervalESs, acLogicalDs1IntervalLESs=acLogicalDs1IntervalLESs, acLogicalDs1ThresholdFEIntervalSEFSs=acLogicalDs1ThresholdFEIntervalSEFSs, acLogicalDs1ThresholdFEIntervalLESs=acLogicalDs1ThresholdFEIntervalLESs, acLogicalDs1ConfigEntry=acLogicalDs1ConfigEntry, acLogicalDs1IntervalSESs=acLogicalDs1IntervalSESs, acLogicalDs1ThresholdFEDayPCVs=acLogicalDs1ThresholdFEDayPCVs, acLogicalDs1ExceededThresholdNEIntervalESsTrap=acLogicalDs1ExceededThresholdNEIntervalESsTrap, acLogicalDs1ThresholdNEIntervalCSSs=acLogicalDs1ThresholdNEIntervalCSSs, PYSNMP_MODULE_ID=acLogicalDs1, acLogicalDs1ConfigValidFarEndIntervals=acLogicalDs1ConfigValidFarEndIntervals, acLogicalDs1ExceededThresholdNEIntervalSESsTrap=acLogicalDs1ExceededThresholdNEIntervalSESsTrap, acLogicalDs1ThresholdNEIntervalSESs=acLogicalDs1ThresholdNEIntervalSESs, acLogicalDs1ThresholdNEDayLCVs=acLogicalDs1ThresholdNEDayLCVs, acLogicalDs1ExceededThresholdNEDayUASsTrap=acLogicalDs1ExceededThresholdNEDayUASsTrap, acLogicalDs1ExceededThresholdFEDaySEFSsTrap=acLogicalDs1ExceededThresholdFEDaySEFSsTrap, acLogicalDs1ExceededThresholdFEDayUASsTrap=acLogicalDs1ExceededThresholdFEDayUASsTrap, acLogicalDs1IntervalDMs=acLogicalDs1IntervalDMs, acLogicalDs1ThresholdEntry=acLogicalDs1ThresholdEntry, acLogicalDs1ExceededThresholdFEIntervalLESsTrap=acLogicalDs1ExceededThresholdFEIntervalLESsTrap, acLogicalDs1ThresholdFEIntervalSESs=acLogicalDs1ThresholdFEIntervalSESs, acLogicalDs1ExceededThresholdFEIntervalPCVsTrap=acLogicalDs1ExceededThresholdFEIntervalPCVsTrap, acLogicalDs1DayDMs=acLogicalDs1DayDMs, acLogicalDs1ExceededThresholdNEIntervalBESsTrap=acLogicalDs1ExceededThresholdNEIntervalBESsTrap, acLogicalDs1FarEndIntervalIndex=acLogicalDs1FarEndIntervalIndex, acLogicalDs1FarEndDayPCVs=acLogicalDs1FarEndDayPCVs, acLogicalDs1ExceededThresholdFEDayLESsTrap=acLogicalDs1ExceededThresholdFEDayLESsTrap, acLogicalDs1FarEndIntervalNumber=acLogicalDs1FarEndIntervalNumber, acLogicalDs1ConfigInvalidDays=acLogicalDs1ConfigInvalidDays, acLogicalDs1ThresholdFEDayUASs=acLogicalDs1ThresholdFEDayUASs, acLogicalDs1ConfigValidFarEndDays=acLogicalDs1ConfigValidFarEndDays, acLogicalDs1ConfigLineStatus=acLogicalDs1ConfigLineStatus, acLogicalDs1DayIndex=acLogicalDs1DayIndex, acLogicalDs1ThresholdNEDayDMs=acLogicalDs1ThresholdNEDayDMs, acLogicalDs1ThresholdNEDaySEFSs=acLogicalDs1ThresholdNEDaySEFSs, acLogicalDs1ThresholdFEDayESs=acLogicalDs1ThresholdFEDayESs, acLogicalDs1DayPCVs=acLogicalDs1DayPCVs, acLogicalDs1ExceededThresholdNEIntervalDMsTrap=acLogicalDs1ExceededThresholdNEIntervalDMsTrap, acLogicalDs1ExceededThresholdFEDayDMsTrap=acLogicalDs1ExceededThresholdFEDayDMsTrap, acLogicalDs1ConfigValidIntervals=acLogicalDs1ConfigValidIntervals, acLogicalDs1ConfigLoopbackStatus=acLogicalDs1ConfigLoopbackStatus, acLogicalDs1IntervalUASs=acLogicalDs1IntervalUASs, acLogicalDs1ConfigTimeElapsedFarEndInterval=acLogicalDs1ConfigTimeElapsedFarEndInterval, acLogicalDs1ThresholdNEIntervalBESs=acLogicalDs1ThresholdNEIntervalBESs, acLogicalDs1ConfigSendCode=acLogicalDs1ConfigSendCode, acLogicalDs1DaySESs=acLogicalDs1DaySESs, acLogicalDs1ThresholdNEIntervalLESs=acLogicalDs1ThresholdNEIntervalLESs, acLogicalDs1IntervalTable=acLogicalDs1IntervalTable, acLogicalDs1ExceededThresholdNEDaySESsTrap=acLogicalDs1ExceededThresholdNEDaySESsTrap, acLogicalDs1IntervalNumber=acLogicalDs1IntervalNumber, acLogicalDs1ConfigNodeId=acLogicalDs1ConfigNodeId, acLogicalDs1FarEndIntervalLESs=acLogicalDs1FarEndIntervalLESs)
