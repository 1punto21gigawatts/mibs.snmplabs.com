#
# PySNMP MIB module HPN-ICF-SPB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-SPB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
IEEE8021SpbmSPsourceId, = mibBuilder.importSymbols("IEEE8021-SPB-MIB", "IEEE8021SpbmSPsourceId")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIdOrNone, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Unsigned32, Gauge32, ModuleIdentity, MibIdentifier, Bits, IpAddress, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, ObjectIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "Gauge32", "ModuleIdentity", "MibIdentifier", "Bits", "IpAddress", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "ObjectIdentity", "NotificationType")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
hpnicfSpb = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128))
hpnicfSpb.setRevisions(('2012-11-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfSpb.setRevisionsDescriptions(('This MIB describes objects used for managing Shortest Path Bridging (SPB).',))
if mibBuilder.loadTexts: hpnicfSpb.setLastUpdated('201211220000Z')
if mibBuilder.loadTexts: hpnicfSpb.setOrganization('')
if mibBuilder.loadTexts: hpnicfSpb.setContactInfo('')
if mibBuilder.loadTexts: hpnicfSpb.setDescription('802.1 SPB MIB')
hpnicfSpbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1))
hpnicfSpbSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 1))
hpnicfSpbSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbSysStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSysStatus.setDescription('To descript the status of Shortest Path Bridging MAC Mode(SPBM) is Enabled or Disabled.')
hpnicfSpbMulticastBVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbMulticastBVlanStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbMulticastBVlanStatus.setDescription('To descript the status of SPBM multicast bvlan is Enabled or Disabled.')
hpnicfSpbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2))
hpnicfSpbIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfSpbIfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbIfTable.setDescription('This table describes the interface status of SPBM is Enabled or Disabled.')
hpnicfSpbIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfSpbIfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbIfEntry.setDescription('The entry of hpnicfSpbIfEntry.')
hpnicfSpbIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbIfStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbIfStatus.setDescription('To descript the interface status of SPBM is Enabled or Disabled.')
hpnicfSpbSrvTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfSpbSrvTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSrvTable.setDescription('This table descript the Base VlanID(VID) associated with the service and the service multicast duplicate mode.')
hpnicfSpbSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-SPB-MIB", "hpnicfSpbSrvTableEntryTopIx"), (0, "HPN-ICF-SPB-MIB", "hpnicfSpbSrvTableEntryIsid"))
if mibBuilder.loadTexts: hpnicfSpbSrvEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSrvEntry.setDescription('The entry of hpnicfSpbSrvEntry.')
hpnicfSpbSrvTableEntryTopIx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryTopIx.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryTopIx.setDescription('Unique identifier of this SPB topology This is index is allocated for this ISIS/MT instance. It is used as an index to most other SPB tables below and to select the exact ISIS instance and which MT instance together.')
hpnicfSpbSrvTableEntryIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(255, 16777215)))
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryIsid.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryIsid.setDescription('An ISID (service) originating/terminating on this bridge.')
hpnicfSpbSrvTableEntryBaseVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 3), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryBaseVid.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryBaseVid.setDescription('The Base VID associated with this service. The Base VID determines the ECT Algorithm that is associated with this service. Otherwise no Base VID associated with the service, should be set = 0.')
hpnicfSpbSrvTableEntryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("headEnd", 1), ("tandem", 2))).clone('headEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSrvTableEntryMode.setDescription('Indication of supporting multicast replicate mode head-end/tandem.')
hpnicfSpbTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3))
hpnicfSpbTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 0))
hpnicfSpbTrapsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1))
hpnicfSpbSPSourceConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 0, 1)).setObjects(("HPN-ICF-SPB-MIB", "hpnicfSpbConflictSysID"), ("HPN-ICF-SPB-MIB", "hpnicfSpbConflictSPSourceID"))
if mibBuilder.loadTexts: hpnicfSpbSPSourceConflictTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbSPSourceConflictTrap.setDescription('This notification will be generated when the SPSourceID is conflict with another bridge.')
hpnicfSpbBMacConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 0, 2)).setObjects(("HPN-ICF-SPB-MIB", "hpnicfSpbConflictSysID"), ("HPN-ICF-SPB-MIB", "hpnicfSpbConflictBMac"))
if mibBuilder.loadTexts: hpnicfSpbBMacConflictTrap.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbBMacConflictTrap.setDescription('This notification will be generated when the BMAC is conflict with another bridge.')
hpnicfSpbConflictSysID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSpbConflictSysID.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbConflictSysID.setDescription("The bridge's SPSourceID is conflict with this bridge.")
hpnicfSpbConflictSPSourceID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1, 2), IEEE8021SpbmSPsourceId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSpbConflictSPSourceID.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbConflictSPSourceID.setDescription('The Shortest Path Source Identifier which is conflict.')
hpnicfSpbConflictBMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 128, 1, 3, 1, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfSpbConflictBMac.setStatus('current')
if mibBuilder.loadTexts: hpnicfSpbConflictBMac.setDescription('The BMAC which is conflict.')
mibBuilder.exportSymbols("HPN-ICF-SPB-MIB", hpnicfSpbSrvTable=hpnicfSpbSrvTable, hpnicfSpbConflictSysID=hpnicfSpbConflictSysID, hpnicfSpbIfTable=hpnicfSpbIfTable, hpnicfSpbSrvTableEntryMode=hpnicfSpbSrvTableEntryMode, hpnicfSpb=hpnicfSpb, hpnicfSpbBMacConflictTrap=hpnicfSpbBMacConflictTrap, hpnicfSpbSrvTableEntryTopIx=hpnicfSpbSrvTableEntryTopIx, hpnicfSpbConflictBMac=hpnicfSpbConflictBMac, hpnicfSpbIfEntry=hpnicfSpbIfEntry, hpnicfSpbConfig=hpnicfSpbConfig, hpnicfSpbSrvEntry=hpnicfSpbSrvEntry, hpnicfSpbSrvTableEntryBaseVid=hpnicfSpbSrvTableEntryBaseVid, hpnicfSpbConflictSPSourceID=hpnicfSpbConflictSPSourceID, hpnicfSpbIfStatus=hpnicfSpbIfStatus, hpnicfSpbTrap=hpnicfSpbTrap, hpnicfSpbSysObjects=hpnicfSpbSysObjects, hpnicfSpbSysStatus=hpnicfSpbSysStatus, hpnicfSpbObjects=hpnicfSpbObjects, PYSNMP_MODULE_ID=hpnicfSpb, hpnicfSpbSPSourceConflictTrap=hpnicfSpbSPSourceConflictTrap, hpnicfSpbMulticastBVlanStatus=hpnicfSpbMulticastBVlanStatus, hpnicfSpbTraps=hpnicfSpbTraps, hpnicfSpbTrapsObjects=hpnicfSpbTrapsObjects, hpnicfSpbSrvTableEntryIsid=hpnicfSpbSrvTableEntryIsid)
