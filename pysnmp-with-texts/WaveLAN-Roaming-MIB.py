#
# PySNMP MIB module WaveLAN-Roaming-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WaveLAN-Roaming-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, enterprises, Counter32, MibIdentifier, Unsigned32, Bits, Counter64, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "enterprises", "Counter32", "MibIdentifier", "Unsigned32", "Bits", "Counter64", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "TimeTicks", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
att_2, att_mgmt, wavelan = mibBuilder.importSymbols("WaveLAN-MIB", "att-2", "att-mgmt", "wavelan")
wavelanRoaming = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 21, 3))
class Timeout(Integer32):
    pass

wlrGenTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1), )
if mibBuilder.loadTexts: wlrGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: wlrGenTable.setDescription('Generic Roaming information for a collection of WaveLAN interfaces attached to a particular system.')
wlrGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1), ).setIndexNames((0, "WaveLAN-Roaming-MIB", "wlrGenIndex"))
if mibBuilder.loadTexts: wlrGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wlrGenEntry.setDescription('Generic Roaming information for a particular WaveLAN interface.')
wlrGenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrGenIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wlrGenIndex.setDescription('An index value that uniquely identifies a WaveLAN network interface this roaming information applies to. The interface associated with a particular value of this index is the same interface as identified by the same value of ifIndex.')
wlrDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrDomainId.setStatus('mandatory')
if mibBuilder.loadTexts: wlrDomainId.setDescription("The Domain Identifier identifies the (multi-cellular) roaming service domain. Mobile stations will connect only to those access points that have the same DomainId as they have been configured with themselves. (note: Value '0000'H has a special meaning; it may be used to disable roaming)")
wlrBeaconKey = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrBeaconKey.setStatus('mandatory')
if mibBuilder.loadTexts: wlrBeaconKey.setDescription('The key used to encipher the WaveLAN NWID when included as data in the Beacon message.')
wlrMsTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2), )
if mibBuilder.loadTexts: wlrMsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsTable.setDescription('Mobile station roaming information for a collection of WaveLAN interfaces attached to a particular system.')
wlrMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1), ).setIndexNames((0, "WaveLAN-Roaming-MIB", "wlrMsIndex"))
if mibBuilder.loadTexts: wlrMsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsEntry.setDescription('Mobile station roaming information for a particular WaveLAN interface.')
wlrMsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsIndex.setDescription('An index value that uniquely identifies a WaveLAN network interface this roaming information applies to. The interface associated with a particular value of this index is the same interface as identified by the same value of ifIndex.')
wlrRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: wlrRetryLimit.setDescription('The protocol retry limit for the handover procedure.')
wlrNumberOfRecovers = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrNumberOfRecovers.setStatus('mandatory')
if mibBuilder.loadTexts: wlrNumberOfRecovers.setDescription('The number of Recover requests to be sent after an unsuccessful handover procedure.')
wlrCommsQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrCommsQuality.setStatus('mandatory')
if mibBuilder.loadTexts: wlrCommsQuality.setDescription('The Communications Quality to the current access point. This is the running average maintained by the driver software. Expressed as percentage of maximum possible.')
wlrCurrentApName = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrCurrentApName.setStatus('mandatory')
if mibBuilder.loadTexts: wlrCurrentApName.setDescription('The name of the current access point this mobile station is connected to.')
wlrMsSignOnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsSignOnFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsSignOnFailures.setDescription('The number of times no timely response was received to the Sign-on request protocol message during the sign-on and handover procedures.')
wlrMsHandovers = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsHandovers.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsHandovers.setDescription('The number of times a handover has been initiated. (i.e. Sign-on request sent, not re-sent).')
wlrMsHandoverFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsHandoverFailures.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsHandoverFailures.setDescription('The number of times a handover procedure failed due to not receiving a response to the Sign-on requests and retries got exhausted.')
wlrMsBeaconsMissedNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsBeaconsMissedNormal.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsBeaconsMissedNormal.setDescription('The number of Beacons missed from current access point(s), during normal mode.')
wlrMsBeaconsMissedSearch = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsBeaconsMissedSearch.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsBeaconsMissedSearch.setDescription('The number of Beacons missed from current access point(s), during regular search mode.')
wlrMsRegularCellSearchEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsRegularCellSearchEntered.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsRegularCellSearchEntered.setDescription('The number of times the regular cell search mode was entered from the normal mode.')
wlrMsFastCellSearchEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsFastCellSearchEntered.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsFastCellSearchEntered.setDescription('The number of times the fast cell search mode was entered.')
wlrMsTimeInNormalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsTimeInNormalMode.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsTimeInNormalMode.setDescription('The total time in normal (i.e. non-cell-search) mode since the roaming functionality got initialized. (in seconds)')
wlrMsTimeInRegularSearchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsTimeInRegularSearchMode.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsTimeInRegularSearchMode.setDescription('The total time in Regular Cell Search Mode since the roaming functionality got initialized. (in seconds)')
wlrMsTimeInFastSearchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrMsTimeInFastSearchMode.setStatus('mandatory')
if mibBuilder.loadTexts: wlrMsTimeInFastSearchMode.setDescription('The total time in Fast Cell Search Mode since the roaming functionality got initialized. (in seconds)')
wlrApTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3), )
if mibBuilder.loadTexts: wlrApTable.setStatus('mandatory')
if mibBuilder.loadTexts: wlrApTable.setDescription('Access point roaming information for a collection of WaveLAN interfaces attached to a particular system.')
wlrApEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1), ).setIndexNames((0, "WaveLAN-Roaming-MIB", "wlrApIndex"))
if mibBuilder.loadTexts: wlrApEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wlrApEntry.setDescription('Access point roaming information for a particular WaveLAN interface.')
wlrApIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wlrApIndex.setDescription('An index value that uniquely identifies a WaveLAN network interface this roaming information applies to. The interface associated with a particular value of this index is the same interface as identified by the same value of ifIndex.')
wlrStopCellSearchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrStopCellSearchThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wlrStopCellSearchThreshold.setDescription('The level of communications quality on which the mobile station stops looking for other access point(s). Expressed on percentage-scale. Should be greater than wlrRegularCellSearchThreshold + 3.')
wlrRegularCellSearchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrRegularCellSearchThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wlrRegularCellSearchThreshold.setDescription('The level of communications quality on which the mobile station starts looking for an access point with a level of communications quality higher than the Stop Cell Search Threshold. Expressed on percentage-scale. Should be smaller than wlrStopCellSearchThreshold - 3, and greater than wlrFastCellSearchThreshold + 3')
wlrFastCellSearchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrFastCellSearchThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wlrFastCellSearchThreshold.setDescription('The level of communications quality on which the mobile station starts looking for an access point with a level of communications quality higher than this threshold. Expressed on percentage-scale. Should be smaller than wlrRegularCellSearchThreshold - 3')
wlrBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 5), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrBeaconInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wlrBeaconInterval.setDescription('The Beacon interval time. In units of a hundredth of a second (1/100 s, or 10 ms).')
wlrBeaconTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 6), Timeout()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlrBeaconTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wlrBeaconTimeout.setDescription('The Beacon time-out value. In units of a hundredth of a second (1/100 s, or 10 ms). Should be at least 2 * wlrBeaconInterval.')
wlrApSignOnRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApSignOnRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wlrApSignOnRequests.setDescription('The number of Sign-on Requests received.')
wlrApHandoversSent = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApHandoversSent.setStatus('mandatory')
if mibBuilder.loadTexts: wlrApHandoversSent.setDescription('The number of times a handover has been requested from an other Access point.')
wlrApHandoversReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 21, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlrApHandoversReceived.setStatus('mandatory')
if mibBuilder.loadTexts: wlrApHandoversReceived.setDescription('The number of times a mobile station has been handed over to an other access point.')
mibBuilder.exportSymbols("WaveLAN-Roaming-MIB", wlrGenIndex=wlrGenIndex, wlrDomainId=wlrDomainId, wlrMsEntry=wlrMsEntry, wavelanRoaming=wavelanRoaming, wlrRetryLimit=wlrRetryLimit, wlrMsBeaconsMissedSearch=wlrMsBeaconsMissedSearch, wlrApHandoversReceived=wlrApHandoversReceived, wlrCurrentApName=wlrCurrentApName, wlrApSignOnRequests=wlrApSignOnRequests, wlrMsIndex=wlrMsIndex, wlrBeaconKey=wlrBeaconKey, wlrApTable=wlrApTable, Timeout=Timeout, wlrMsTimeInNormalMode=wlrMsTimeInNormalMode, wlrStopCellSearchThreshold=wlrStopCellSearchThreshold, wlrBeaconTimeout=wlrBeaconTimeout, wlrGenTable=wlrGenTable, wlrRegularCellSearchThreshold=wlrRegularCellSearchThreshold, wlrBeaconInterval=wlrBeaconInterval, wlrMsSignOnFailures=wlrMsSignOnFailures, wlrMsRegularCellSearchEntered=wlrMsRegularCellSearchEntered, wlrMsHandovers=wlrMsHandovers, wlrMsFastCellSearchEntered=wlrMsFastCellSearchEntered, wlrCommsQuality=wlrCommsQuality, wlrApIndex=wlrApIndex, wlrMsTable=wlrMsTable, wlrApEntry=wlrApEntry, wlrNumberOfRecovers=wlrNumberOfRecovers, wlrMsHandoverFailures=wlrMsHandoverFailures, wlrMsTimeInRegularSearchMode=wlrMsTimeInRegularSearchMode, wlrApHandoversSent=wlrApHandoversSent, wlrFastCellSearchThreshold=wlrFastCellSearchThreshold, wlrMsBeaconsMissedNormal=wlrMsBeaconsMissedNormal, wlrGenEntry=wlrGenEntry, wlrMsTimeInFastSearchMode=wlrMsTimeInFastSearchMode)
