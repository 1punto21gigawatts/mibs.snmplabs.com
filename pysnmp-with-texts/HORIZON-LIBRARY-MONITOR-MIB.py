#
# PySNMP MIB module HORIZON-LIBRARY-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HORIZON-LIBRARY-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, iso, TimeTicks, MibIdentifier, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Counter32, Gauge32, NotificationType, NotificationType, IpAddress, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "iso", "TimeTicks", "MibIdentifier", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Counter32", "Gauge32", "NotificationType", "NotificationType", "IpAddress", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
storagetek = MibIdentifier((1, 3, 6, 1, 4, 1, 1211))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1))
horizonLibraryMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 5))
hlmAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 5, 1))
hlmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 5, 2))
hlmHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3))
class HlmSenseCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39))
    namedValues = NamedValues(("unknown", 1), ("nrNotReportable", 2), ("nrInProcess", 3), ("nrManIntervReq", 4), ("nrMaintenance", 5), ("nrCapOpen", 6), ("hwGeneral", 7), ("hwTapeDrive", 8), ("hwCap", 9), ("hwMicroCode", 10), ("irParamLength", 11), ("irInvalidCommand", 12), ("irInvalidElt", 13), ("irInvalidCDB", 14), ("irInvalidLun", 15), ("irInvalidField", 16), ("irIncompatibleMedia", 17), ("irSavingParamNotSupported", 18), ("irMediumNotPresent", 19), ("irDestEltFull", 20), ("irSrcEltEmpty", 21), ("uaPowerOn", 22), ("uaNotReady", 23), ("uaIoEltAccess", 24), ("uaModeParamChanged", 25), ("uaMicroCodeChanged", 26), ("acSCSIParity", 27), ("acInitiator", 28), ("acCommandOverlap", 29), ("nrCleaningCartridgeInstalled", 30), ("irInvalidReleaseOfPersistentReservation", 31), ("irMediumMagazineRemoved", 32), ("irInsufficientReservationResources", 33), ("uaPowerOnOccured", 34), ("uaReservationPreempted", 35), ("uaReservationReleased", 36), ("uaRegistrationPreempted", 37), ("uaSCSIBusReset", 38), ("uaBusDeviceResetMessageOccured", 39))

hlmAgtRelease = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmAgtRelease.setStatus('mandatory')
if mibBuilder.loadTexts: hlmAgtRelease.setDescription('The release of the agent. Format is %d.%d')
hlmAgtStatus = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("running", 2), ("expiring", 3), ("expired", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmAgtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hlmAgtStatus.setDescription('When starting and initializing internal variables, the agent is >initializing< and may not answer correctly to request. Status of the agent should be queried at the beginning of every session and respond >running<. When license expires in less than 3 days, the status is >expiring<. When license is no more valid, the status of the agent switch to >expired<.')
hlmAgtBootDate = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmAgtBootDate.setStatus('mandatory')
if mibBuilder.loadTexts: hlmAgtBootDate.setDescription('The date & time when the agent started. Format is YYYY-MM-DDThh:mm')
hlmAgtUrl = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlmAgtUrl.setStatus('mandatory')
if mibBuilder.loadTexts: hlmAgtUrl.setDescription('Url to be provided at the agent level-Can be used for library web based management purpose')
hlmTrpMinPollingRate = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmTrpMinPollingRate.setStatus('mandatory')
if mibBuilder.loadTexts: hlmTrpMinPollingRate.setDescription('Minimum polling rate in second. The value is read from a file when the agent starts')
hlmTrpCurPollingRate = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlmTrpCurPollingRate.setStatus('mandatory')
if mibBuilder.loadTexts: hlmTrpCurPollingRate.setDescription('Current polling rate in seconde. The value could not be set under hlmTrpMinPollingRate')
hlmTrpMsg = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmTrpMsg.setStatus('mandatory')
if mibBuilder.loadTexts: hlmTrpMsg.setDescription('A trap displayString varbind')
hlmTrpOid = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 2, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmTrpOid.setStatus('mandatory')
if mibBuilder.loadTexts: hlmTrpOid.setDescription('A trap OID varbind')
hlmTrpLogReportLevel = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("silent", 1), ("error", 2), ("warning", 3), ("info", 4), ("unclassified", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlmTrpLogReportLevel.setStatus('mandatory')
if mibBuilder.loadTexts: hlmTrpLogReportLevel.setDescription("Log message reporting level preferred by the Enterprise Management Framework destinations. 'silent' means no message is sent to the framework. 'error' means only error messages are sent. 'warning' means errors+warnings are sent. 'info' means errors+warnings+information messages are sent. 'unclassified' means every messages stored into the library are sent to the framework")
hlmTrpErr = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,1)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpMsg"))
if mibBuilder.loadTexts: hlmTrpErr.setDescription('A error trap message')
hlmTrpWar = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,2)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpMsg"))
if mibBuilder.loadTexts: hlmTrpWar.setDescription('A warning trap message')
hlmTrpInfo = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,3)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpMsg"))
if mibBuilder.loadTexts: hlmTrpInfo.setDescription('An info trap message')
hlmTrpUncl = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,4)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpMsg"))
if mibBuilder.loadTexts: hlmTrpUncl.setDescription('An unclassified trap message')
hlmTrpNorStatus = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,5)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpOid"))
if mibBuilder.loadTexts: hlmTrpNorStatus.setDescription('A normal status notification trap')
hlmTrpUnkStatus = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,6)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpOid"))
if mibBuilder.loadTexts: hlmTrpUnkStatus.setDescription('A unknown status notification trap')
hlmTrpWarStatus = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,7)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpOid"))
if mibBuilder.loadTexts: hlmTrpWarStatus.setDescription('A warning status notification trap')
hlmTrpMinStatus = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,8)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpOid"))
if mibBuilder.loadTexts: hlmTrpMinStatus.setDescription('A minor status notification trap')
hlmTrpMajStatus = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,9)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpOid"))
if mibBuilder.loadTexts: hlmTrpMajStatus.setDescription('A major status notification trap')
hlmTrpCriStatus = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 5) + (0,10)).setObjects(("HORIZON-LIBRARY-MONITOR-MIB", "hlmTrpOid"))
if mibBuilder.loadTexts: hlmTrpCriStatus.setDescription('A critical status notification trap')
hlmLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1))
hlmLibCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibCount.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibCount.setDescription('Count of the libraries in the library table')
hlmLibTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2), )
if mibBuilder.loadTexts: hlmLibTable.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibTable.setDescription('This is a table of detected library detected on the SCSI bus')
hlmLibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1), ).setIndexNames((0, "HORIZON-LIBRARY-MONITOR-MIB", "hlmLibIndex"))
if mibBuilder.loadTexts: hlmLibEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibEntry.setDescription('An entry in the library table')
hlmLibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibIndex.setDescription('Integer index of the library')
hlmLibType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibType.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibType.setDescription('The model of the library, e.g 9730, 9710')
hlmLibVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibVendor.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibVendor.setDescription('The vendor of the library, e.g STK')
hlmLibStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("error", 3), ("busy", 4), ("reservConflict", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibStatus.setDescription('The status of the library. See hlmLibSense for details when this status equals error')
hlmLibSense = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 5), HlmSenseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibSense.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibSense.setDescription('The sense info when status is error')
hlmLibMicLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibMicLevel.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibMicLevel.setDescription('The micro code level of the library')
hlmLibSlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibSlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibSlotCount.setDescription('Count of slot of the library')
hlmLibCapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibCapCount.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibCapCount.setDescription('Count of CAP of the library')
hlmLibDriveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibDriveCount.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibDriveCount.setDescription('Count of drives present into the library')
hlmLibSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibSerialNumber.setDescription('The modelserial number of the library')
hlmLibSenseText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmLibSenseText.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibSenseText.setDescription('A short label describing the sense code returned by the library -- see hlmLibSense')
hlmLibUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 1, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hlmLibUrl.setStatus('mandatory')
if mibBuilder.loadTexts: hlmLibUrl.setDescription('Url provided at the library level - Can be used for web based library management purpose')
hlmDrive = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2))
hlmDrvCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvCount.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvCount.setDescription('Total count of the drives detected. They may not all belong to the same library')
hlmDrvTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2), )
if mibBuilder.loadTexts: hlmDrvTable.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvTable.setDescription('This is the table of drives.')
hlmDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1), ).setIndexNames((0, "HORIZON-LIBRARY-MONITOR-MIB", "hlmDrvLibIndex"), (0, "HORIZON-LIBRARY-MONITOR-MIB", "hlmDrvIndex"))
if mibBuilder.loadTexts: hlmDrvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvEntry.setDescription('An entry in the drive table')
hlmDrvLibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvLibIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvLibIndex.setDescription('Index of the library it belongs to')
hlmDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvIndex.setDescription('Index of the drive')
hlmDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("undetermined", 1), ("dlt2000", 2), ("dlt2000XT", 3), ("dlt4000", 4), ("dlt7000", 5), ("dlt12000", 6), ("dlt20000", 7), ("drive9840", 8), ("twinPeaks4890", 9), ("silverton4490or4791", 10), ("redWoodSD3", 11), ("timberLine9490", 12), ("timberLine9491", 13), ("drve4781or4480", 14), ("dlt8000", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvType.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvType.setDescription('The model of the drive. Other values might be returned to describe new model of drives. These values and their corresponding drive model will be read from a file at the agent start')
hlmDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvStatus.setDescription('The status of the drive. See hlmDrvSense for details when rhis status equals error')
hlmDrvSense = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 5), HlmSenseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvSense.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvSense.setDescription('The sense info of the drive. See hlmLibSense for possible values')
hlmDrvContent = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvContent.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvContent.setDescription('Report if the drive contains a cartridge')
hlmDrvVolType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("undetermined", 1), ("dltCompactIIIOrdltCleaning", 2), ("dltCompactIV", 3), ("dltCompactIIIXT", 4), ("normalOrCleaning3480", 5), ("extendedLengthCartridge3490E", 6), ("shortLengthRedWoodDD3A", 7), ("standardLengthRedWoodDD3B", 8), ("longLengthRedWoodDD3C", 9), ("cleaningRedWoodDD3D", 10), ("standard9840", 11), ("cleaning9840", 12), ("extendedEnhanced3490", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvVolType.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvVolType.setDescription('The type of the catridge present into the drive. Other value may be returned to describe new model of volume.')
hlmDrvVolLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvVolLabel.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvVolLabel.setDescription("The label of the cartridge present into the drive, '------' if the drive is empty")
hlmDrvTypeText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvTypeText.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvTypeText.setDescription('Textual type of the drive')
hlmDrvVolTypeText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvVolTypeText.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvVolTypeText.setDescription('Textual type of the volume present into the drive')
hlmDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvSerialNumber.setDescription('The serial number of the drive')
hlmDrvSenseText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 2, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmDrvSenseText.setStatus('mandatory')
if mibBuilder.loadTexts: hlmDrvSenseText.setDescription('A short description of the sense code')
hlmCap = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3))
hlmCapCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapCount.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapCount.setDescription('Total count of CAP')
hlmCapTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2), )
if mibBuilder.loadTexts: hlmCapTable.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapTable.setDescription('This is the table of CAPs.')
hlmCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1), ).setIndexNames((0, "HORIZON-LIBRARY-MONITOR-MIB", "hlmCapLibIndex"), (0, "HORIZON-LIBRARY-MONITOR-MIB", "hlmCapIndex"))
if mibBuilder.loadTexts: hlmCapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapEntry.setDescription('An entry in the CAP table')
hlmCapLibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapLibIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapLibIndex.setDescription('Index of the library it belongs to')
hlmCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapIndex.setDescription('Index of the CAP')
hlmCapHandAccessibility = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("close", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapHandAccessibility.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapHandAccessibility.setDescription('Report whether the CAP is open or not')
hlmCapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("error", 3), ("warning", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapStatus.setDescription('Report the operational state of the CAP.')
hlmCapSense = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1, 5), HlmSenseCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapSense.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapSense.setDescription('Sense info when the status equals error.')
hlmCapCellCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapCellCount.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapCellCount.setDescription('Count of cell of the cap')
hlmCapSenseText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 5, 3, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hlmCapSenseText.setStatus('mandatory')
if mibBuilder.loadTexts: hlmCapSenseText.setDescription('A short description of the sense code')
mibBuilder.exportSymbols("HORIZON-LIBRARY-MONITOR-MIB", horizonLibraryMonitor=horizonLibraryMonitor, hlmTrpUnkStatus=hlmTrpUnkStatus, hlmTrpMajStatus=hlmTrpMajStatus, hlmTrpCriStatus=hlmTrpCriStatus, hlmLibSense=hlmLibSense, hlmLibCount=hlmLibCount, hlmLibCapCount=hlmLibCapCount, storagetek=storagetek, hlmDrvType=hlmDrvType, hlmDrvContent=hlmDrvContent, hlmAgent=hlmAgent, hlmDrvEntry=hlmDrvEntry, hlmDrvLibIndex=hlmDrvLibIndex, hlmLibStatus=hlmLibStatus, hlmTrpCurPollingRate=hlmTrpCurPollingRate, hlmAgtRelease=hlmAgtRelease, hlmTrpMinStatus=hlmTrpMinStatus, hlmCapSenseText=hlmCapSenseText, hlmDrvVolLabel=hlmDrvVolLabel, hlmAgtStatus=hlmAgtStatus, hlmCapTable=hlmCapTable, hlmCapStatus=hlmCapStatus, hlmTrap=hlmTrap, hlmCapIndex=hlmCapIndex, hlmLibMicLevel=hlmLibMicLevel, hlmHardware=hlmHardware, HlmSenseCode=HlmSenseCode, hlmTrpWar=hlmTrpWar, hlmDrvCount=hlmDrvCount, hlmCapCount=hlmCapCount, hlmCap=hlmCap, hlmTrpNorStatus=hlmTrpNorStatus, hlmCapLibIndex=hlmCapLibIndex, hlmDrvSense=hlmDrvSense, hlmAgtBootDate=hlmAgtBootDate, hlmTrpErr=hlmTrpErr, hlmLibTable=hlmLibTable, hlmDrvVolType=hlmDrvVolType, hlmDrvIndex=hlmDrvIndex, hlmDrvSerialNumber=hlmDrvSerialNumber, hlmLibVendor=hlmLibVendor, hlmCapCellCount=hlmCapCellCount, hlmTrpWarStatus=hlmTrpWarStatus, hlmAgtUrl=hlmAgtUrl, products=products, hlmLibEntry=hlmLibEntry, hlmDrvTable=hlmDrvTable, hlmCapHandAccessibility=hlmCapHandAccessibility, hlmTrpInfo=hlmTrpInfo, hlmLibrary=hlmLibrary, hlmDrvStatus=hlmDrvStatus, hlmDrvSenseText=hlmDrvSenseText, hlmTrpOid=hlmTrpOid, hlmTrpMsg=hlmTrpMsg, hlmLibIndex=hlmLibIndex, hlmLibType=hlmLibType, hlmLibSerialNumber=hlmLibSerialNumber, hlmLibDriveCount=hlmLibDriveCount, hlmCapEntry=hlmCapEntry, hlmTrpMinPollingRate=hlmTrpMinPollingRate, hlmLibSlotCount=hlmLibSlotCount, hlmTrpLogReportLevel=hlmTrpLogReportLevel, hlmLibSenseText=hlmLibSenseText, hlmLibUrl=hlmLibUrl, hlmDrvTypeText=hlmDrvTypeText, hlmCapSense=hlmCapSense, hlmDrive=hlmDrive, hlmDrvVolTypeText=hlmDrvVolTypeText, hlmTrpUncl=hlmTrpUncl)
