#
# PySNMP MIB module INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
chassis, = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-MIB", "chassis")
groups, regModule = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-REG", "groups", "regModule")
Index, INT32withException, Power, PowerLedStates, IdromBinary16, FaultLedStates, FeatureSet, PresenceLedStates, Presence = mibBuilder.importSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-TC", "Index", "INT32withException", "Power", "PowerLedStates", "IdromBinary16", "FaultLedStates", "FeatureSet", "PresenceLedStates", "Presence")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, ModuleIdentity, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, Counter64, TimeTicks, Counter32, Bits, iso, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "Counter64", "TimeTicks", "Counter32", "Bits", "iso", "IpAddress", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
multiFlexServerDrivesMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 1, 1, 15))
multiFlexServerDrivesMibModule.setRevisions(('2007-08-16 12:00', '2007-07-20 16:45', '2007-06-07 20:30', '2007-06-07 13:30', '2007-05-30 17:00', '2007-04-18 19:05', '2007-04-09 15:45', '2007-04-09 15:30', '2007-03-27 11:30', '2007-03-14 11:30', '2007-03-06 10:30', '2007-02-22 17:00', '2006-12-28 17:30', '2006-12-05 10:30', '2006-11-27 15:30', '2006-11-20 13:30', '2006-11-07 11:30', '2006-10-02 10:24',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: multiFlexServerDrivesMibModule.setRevisionsDescriptions(('Fixed up minor errors causing some managers grief (ommission or addition of commas in lists) Corrected a few entries that were marked as read-write when they should have been read-only', 'Minor edit to make MIB SMIv2 compliant Dropped driveBackplaneBmcFirmwareVersion as there is no BMC for the drive backplane', 'Added the IdromBinary16 to represent the asset tag, part number, and serial number fields within the IDROM fields.', 'Corrected maximum/nominal IDROM parameters and comments', 'Added enumeration for exceptions Added missing Presence column to sharedDriveTable', 'Moved the trees and chassis nodes around to accomodate the unique power supply characteristics', 'Moved driveBackplane IDROM data to sharedDrives tree from storage tree where it makes more logical sense Relocated both tables after the driveBackplane tree', 'Dropped sDriveAlias', 'Renamed all references of Array to StoragePool', 'Renamed all references of Disk to Drive Dropped redundant sDriveIndex (moved and replaced it with sDriveSlotNumber)', "Changed Mask representation from an Opaque to a DisplayString at the request of the architects such that it now is an ASCII representation of bit string reflecting the presence with the left most 'bit' being bit 1 and max* bits being represented.", 'Renamed MIB file and updated internal relevance to formal product name Multi-Flex Server', 'Corrected sharedDiskStatsTable INDEX to AUGMENTS.', "Updated several object types to reflect changes in the OEM objects. sDiskArrayID Integer32 -> INTEGER sDiskSequenceNumber Integer32 -> INTEGER sDiskDriveType DisplayString -> INTEGER Cleaned up some illegal character usage to make it SMIv2 compliant. Renamed all of the *Transfered to *Transferred Renumbered sharedDiskStatsTable to match OEM's.", 'Removed nolonger supported SATA & SAS drive feature tables Renumbered Stats from { sharedDisks 4 } to { sharedDisks 2 }', 'Replaced sharedDisksStats table index with sDiskIndex to be consistent with the rest of the tables. All tables are indexed by the drive ID', "Consolodated use of Presence datatype and changed 'chassis' to 'chassis'", "Partitioned off and created as it's own module",))
if mibBuilder.loadTexts: multiFlexServerDrivesMibModule.setLastUpdated('200708161200Z')
if mibBuilder.loadTexts: multiFlexServerDrivesMibModule.setOrganization('Intel Corporation')
if mibBuilder.loadTexts: multiFlexServerDrivesMibModule.setContactInfo('Brian Kurle Intel Corporation JF5-2-C3 Tel: 503-712-5032 E-Mail: brianx.j.kurle@intel.com')
if mibBuilder.loadTexts: multiFlexServerDrivesMibModule.setDescription('Shared Disks Module of the Multi-Flex Server')
maxSharedDrives = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxSharedDrives.setStatus('current')
if mibBuilder.loadTexts: maxSharedDrives.setDescription('Maximum number of Shared Drives possible in this chassis')
numOfSharedDrives = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfSharedDrives.setStatus('current')
if mibBuilder.loadTexts: numOfSharedDrives.setDescription('The number of Shared Drives in the system')
sDrivePresenceMask = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDrivePresenceMask.setStatus('current')
if mibBuilder.loadTexts: sDrivePresenceMask.setDescription("ASCII representation of bit string reflecting the presence of the shared drives with the left most 'bit' being bit 1 and maxSharedDrives bits being represented. Thus, '11001111111111' would express that all the shared drives (of fourteen shared drives) are present with exception of drives 3 & 4")
sharedDrives = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205))
if mibBuilder.loadTexts: sharedDrives.setStatus('current')
if mibBuilder.loadTexts: sharedDrives.setDescription('Container for Shared Drive specific information as well as all components logically contained within.')
driveBackplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1))
if mibBuilder.loadTexts: driveBackplane.setStatus('current')
if mibBuilder.loadTexts: driveBackplane.setDescription('IDROM information from the Drive Backplane')
driveBackplaneVendor = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplaneVendor.setStatus('current')
if mibBuilder.loadTexts: driveBackplaneVendor.setDescription('Device manufacturer')
driveBackplaneMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplaneMfgDate.setStatus('current')
if mibBuilder.loadTexts: driveBackplaneMfgDate.setDescription('Manufacture date/time')
driveBackplaneDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplaneDeviceName.setStatus('current')
if mibBuilder.loadTexts: driveBackplaneDeviceName.setDescription('Device Name')
driveBackplanePart = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 4), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplanePart.setStatus('current')
if mibBuilder.loadTexts: driveBackplanePart.setDescription('Device Part Number')
driveBackplaneSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 5), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplaneSerialNo.setStatus('current')
if mibBuilder.loadTexts: driveBackplaneSerialNo.setDescription('Device Serial Number')
driveBackplaneMaximumPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 6), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplaneMaximumPower.setStatus('current')
if mibBuilder.loadTexts: driveBackplaneMaximumPower.setDescription('Static maximum power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Maximum power generation/consumption not known or specified')
driveBackplaneNominalPower = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 7), Power()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplaneNominalPower.setStatus('current')
if mibBuilder.loadTexts: driveBackplaneNominalPower.setDescription('Static Nominal power generation / consumption (in watts): <0 - Negative numbers indicate device consumes power (in watts) >0 - Positive numbers indicate device generates power (in watts) 0 - Device is passive (does not not consume or generate power) -1 - Nominal power generation/consumption not known or specified')
driveBackplaneAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 1, 8), IdromBinary16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveBackplaneAssetTag.setStatus('current')
if mibBuilder.loadTexts: driveBackplaneAssetTag.setDescription('Asset Tag # of device')
sharedDriveTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2), )
if mibBuilder.loadTexts: sharedDriveTable.setStatus('current')
if mibBuilder.loadTexts: sharedDriveTable.setDescription('Each row describes a shared drive in the chassis')
sharedDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1), ).setIndexNames((0, "INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveSlotNumber"))
if mibBuilder.loadTexts: sharedDriveEntry.setStatus('current')
if mibBuilder.loadTexts: sharedDriveEntry.setDescription('The parameters of a physical drive.')
sDriveSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveSlotNumber.setStatus('current')
if mibBuilder.loadTexts: sDriveSlotNumber.setDescription('The slot number on the enclosure where the drive is located (drive ID)')
sDrivePresence = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 2), Presence()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDrivePresence.setStatus('current')
if mibBuilder.loadTexts: sDrivePresence.setDescription('column used to flag the existence of a particular FRU')
sDriveInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveInterface.setStatus('current')
if mibBuilder.loadTexts: sDriveInterface.setDescription('The Drive Interface of the physical drive.')
sDriveModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveModelNumber.setStatus('current')
if mibBuilder.loadTexts: sDriveModelNumber.setDescription('The Model Number of the physical drive.')
sDriveSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveSerialNumber.setStatus('current')
if mibBuilder.loadTexts: sDriveSerialNumber.setDescription('The Serial Number of the physical drive.')
sDriveFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: sDriveFirmwareVersion.setDescription('The Firmware Version of the physical drive.')
sDriveProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: sDriveProtocolVersion.setDescription('The Protocol Version of the physical drive.')
sDriveOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: sDriveOperationalStatus.setDescription('The Operational Status of the physical drive.')
sDriveCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveCondition.setStatus('current')
if mibBuilder.loadTexts: sDriveCondition.setDescription('The condition of the physical drive, e.g. PFA.')
sDriveOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveOperation.setStatus('current')
if mibBuilder.loadTexts: sDriveOperation.setDescription('The current operation on the physical drive, e.g. mediapatrolling, migrating.')
sDriveConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveConfiguration.setStatus('current')
if mibBuilder.loadTexts: sDriveConfiguration.setDescription('The configuration on the physical drive, e.g. array %d seqno %d, or dedicated spare.')
sDriveStoragePoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, -1, 256))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("unavailable", -1), ("notavailable", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStoragePoolID.setStatus('current')
if mibBuilder.loadTexts: sDriveStoragePoolID.setDescription('The drive array id, if the physical drive is part of a drive array; the spare id, if the drive is a spare.')
sDriveSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, -1))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("unavailable", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: sDriveSequenceNumber.setDescription('The sequence number of the drive in the drive array. Valid only when the drive is part of a drive array.')
sDriveEnclosureID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 14), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveEnclosureID.setStatus('current')
if mibBuilder.loadTexts: sDriveEnclosureID.setDescription('The id of the enclosure to which the drive is inserted.')
sDriveBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 15), INT32withException()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveBlockSize.setStatus('current')
if mibBuilder.loadTexts: sDriveBlockSize.setDescription(' The Block Size in bytes of the physical drive.')
sDrivePhysicalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDrivePhysicalCapacity.setStatus('current')
if mibBuilder.loadTexts: sDrivePhysicalCapacity.setDescription(' The Physical Size in bytes of the physical drive.')
sDriveConfigurableCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveConfigurableCapacity.setStatus('current')
if mibBuilder.loadTexts: sDriveConfigurableCapacity.setDescription(' The Configurable Size in bytes of the physical drive.')
sDriveUsedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveUsedCapacity.setStatus('current')
if mibBuilder.loadTexts: sDriveUsedCapacity.setDescription('The Used Size in bytes of the physical drive.')
sDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-32, -16, -1, 1, 4))).clone(namedValues=NamedValues(("notApplicable", -32), ("unknown", -16), ("unavailable", -1), ("sata", 1), ("sas", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveType.setStatus('current')
if mibBuilder.loadTexts: sDriveType.setDescription('The type of the physical drive. e.g. SATA or SAS')
sharedDriveStatsTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3), )
if mibBuilder.loadTexts: sharedDriveStatsTable.setStatus('current')
if mibBuilder.loadTexts: sharedDriveStatsTable.setDescription('A table of Physical Drive Statistics (augments sharedDriveTable)')
sharedDriveStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1), )
sharedDriveEntry.registerAugmentions(("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sharedDriveStatsEntry"))
sharedDriveStatsEntry.setIndexNames(*sharedDriveEntry.getIndexNames())
if mibBuilder.loadTexts: sharedDriveStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sharedDriveStatsEntry.setDescription('The statistics of a physical drive since its last reset or statistics rest.')
sDriveStatsDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsDataTransferred.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsDataTransferred.setDescription('The total number of bytes of data transfered to and from the controller.')
sDriveStatsReadDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsReadDataTransferred.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsReadDataTransferred.setDescription('The total number of bytes of data transfered from the controller.')
sDriveStatsWriteDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsWriteDataTransferred.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsWriteDataTransferred.setDescription('The total number of bytes of data transfered to the controller.')
sDriveStatsNumOfErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfErrors.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfErrors.setDescription('The total number of errors.')
sDriveStatsNumOfNonRWErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfNonRWErrors.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfNonRWErrors.setDescription('The total number of non-RW errors.')
sDriveStatsNumOfReadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfReadErrors.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfReadErrors.setDescription('The total number of Read errors.')
sDriveStatsNumOfWriteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfWriteErrors.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfWriteErrors.setDescription('The total number of Write errors.')
sDriveStatsNumOfIORequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfIORequests.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfIORequests.setDescription('The total number of IO requests.')
sDriveStatsNumOfNonRWRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfNonRWRequests.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfNonRWRequests.setDescription('The total number of non-RW requests.')
sDriveStatsNumOfReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfReadRequests.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfReadRequests.setDescription('The total number of read requests.')
sDriveStatsNumOfWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsNumOfWriteRequests.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsNumOfWriteRequests.setDescription('The total number of write requests.')
sDriveStatsStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsStartTime.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsStartTime.setDescription('The time when the statistics date starts to accumulate since last statistics reset.')
sDriveStatsCollectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 10, 205, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sDriveStatsCollectionTime.setStatus('current')
if mibBuilder.loadTexts: sDriveStatsCollectionTime.setDescription('The time when the statistics data was collected or updated last time.')
sDriveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 343, 2, 19, 1, 2, 2, 2, 15)).setObjects(("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "maxSharedDrives"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "numOfSharedDrives"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDrivePresenceMask"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplaneVendor"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplaneMfgDate"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplaneDeviceName"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplanePart"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplaneSerialNo"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplaneMaximumPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplaneNominalPower"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "driveBackplaneAssetTag"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveSlotNumber"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDrivePresence"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveInterface"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveModelNumber"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveSerialNumber"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveFirmwareVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveProtocolVersion"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveOperationalStatus"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveCondition"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveOperation"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveConfiguration"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStoragePoolID"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveSequenceNumber"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveEnclosureID"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveBlockSize"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDrivePhysicalCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveConfigurableCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveUsedCapacity"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveType"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsReadDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsWriteDataTransferred"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfNonRWErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfReadErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfWriteErrors"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfIORequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfNonRWRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfReadRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsNumOfWriteRequests"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsStartTime"), ("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", "sDriveStatsCollectionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sDriveGroup = sDriveGroup.setStatus('current')
if mibBuilder.loadTexts: sDriveGroup.setDescription('Description.')
mibBuilder.exportSymbols("INTELCORPORATION-MULTI-FLEX-SERVER-DRIVE-MIB", sharedDriveStatsEntry=sharedDriveStatsEntry, sDriveStoragePoolID=sDriveStoragePoolID, driveBackplanePart=driveBackplanePart, multiFlexServerDrivesMibModule=multiFlexServerDrivesMibModule, driveBackplaneMaximumPower=driveBackplaneMaximumPower, driveBackplaneSerialNo=driveBackplaneSerialNo, driveBackplaneAssetTag=driveBackplaneAssetTag, sDriveStatsNumOfWriteErrors=sDriveStatsNumOfWriteErrors, sDriveUsedCapacity=sDriveUsedCapacity, driveBackplaneNominalPower=driveBackplaneNominalPower, sharedDrives=sharedDrives, sDriveStatsCollectionTime=sDriveStatsCollectionTime, sDriveOperationalStatus=sDriveOperationalStatus, sDrivePresence=sDrivePresence, sDriveInterface=sDriveInterface, sDrivePhysicalCapacity=sDrivePhysicalCapacity, maxSharedDrives=maxSharedDrives, sharedDriveStatsTable=sharedDriveStatsTable, sDriveStatsNumOfReadErrors=sDriveStatsNumOfReadErrors, sDriveType=sDriveType, sDriveStatsNumOfIORequests=sDriveStatsNumOfIORequests, sDriveSerialNumber=sDriveSerialNumber, sDriveGroup=sDriveGroup, sDrivePresenceMask=sDrivePresenceMask, sDriveModelNumber=sDriveModelNumber, driveBackplane=driveBackplane, numOfSharedDrives=numOfSharedDrives, sDriveConfiguration=sDriveConfiguration, sDriveStatsNumOfErrors=sDriveStatsNumOfErrors, driveBackplaneVendor=driveBackplaneVendor, sDriveStatsNumOfNonRWRequests=sDriveStatsNumOfNonRWRequests, sDriveStatsNumOfWriteRequests=sDriveStatsNumOfWriteRequests, sharedDriveEntry=sharedDriveEntry, sDriveBlockSize=sDriveBlockSize, sDriveSlotNumber=sDriveSlotNumber, driveBackplaneMfgDate=driveBackplaneMfgDate, sDriveFirmwareVersion=sDriveFirmwareVersion, sDriveSequenceNumber=sDriveSequenceNumber, driveBackplaneDeviceName=driveBackplaneDeviceName, sDriveConfigurableCapacity=sDriveConfigurableCapacity, sDriveStatsStartTime=sDriveStatsStartTime, sDriveProtocolVersion=sDriveProtocolVersion, sDriveEnclosureID=sDriveEnclosureID, sDriveStatsDataTransferred=sDriveStatsDataTransferred, sDriveStatsWriteDataTransferred=sDriveStatsWriteDataTransferred, sDriveStatsNumOfNonRWErrors=sDriveStatsNumOfNonRWErrors, PYSNMP_MODULE_ID=multiFlexServerDrivesMibModule, sDriveStatsNumOfReadRequests=sDriveStatsNumOfReadRequests, sDriveCondition=sDriveCondition, sDriveOperation=sDriveOperation, sDriveStatsReadDataTransferred=sDriveStatsReadDataTransferred, sharedDriveTable=sharedDriveTable)
