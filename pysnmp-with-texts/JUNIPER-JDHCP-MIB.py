#
# PySNMP MIB module JUNIPER-JDHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JDHCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
jnxJdhcpMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxJdhcpMibRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, ModuleIdentity, iso, Counter64, Gauge32, ObjectIdentity, MibIdentifier, Unsigned32, TimeTicks, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "ModuleIdentity", "iso", "Counter64", "Gauge32", "ObjectIdentity", "MibIdentifier", "Unsigned32", "TimeTicks", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention, DateAndTime, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "MacAddress")
jnxJdhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61))
jnxJdhcpMIB.setRevisions(('2015-03-03 00:00', '2011-07-09 00:00', '2011-03-15 00:00', '2011-01-25 00:00', '2010-04-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxJdhcpMIB.setRevisionsDescriptions(('Add statistics for leasequery and bulk leasequery messages', 'Add scalar for pkts dropped due to recovery in progress', 'Add OIDs to the Interface Statistics Table', 'Add Interface Statistics Table', 'Creation Date',))
if mibBuilder.loadTexts: jnxJdhcpMIB.setLastUpdated('201503030000Z')
if mibBuilder.loadTexts: jnxJdhcpMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJdhcpMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxJdhcpMIB.setDescription('The JUNOS DHCP MIB for the Juniper Networks enterprise.')
jnxJdhcpLocalServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1))
jnxJdhcpRelayObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2))
jnxJdhcpLocalServerStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1))
jnxJdhcpLocalServerBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2))
jnxJdhcpLocalServerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3))
jnxJdhcpLocalServerTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4))
jnxJdhcpLocalServerIfcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5))
jnxJdhcpLocalServerTotalDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerTotalDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerTotalDropped.setDescription('The total number of packets dropped.')
jnxJdhcpLocalServerBadHardwareDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadHardwareDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadHardwareDropped.setDescription('The total number of packets dropped due to bad hardware address.')
jnxJdhcpLocalServerBadBootpOpcodeDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadBootpOpcodeDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadBootpOpcodeDropped.setDescription('The number of packets dropped due to not BOOTP message.')
jnxJdhcpLocalServerBadOptionsDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadOptionsDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadOptionsDropped.setDescription('The number of packets dropped due to bad options in the packet.')
jnxJdhcpLocalServerBadAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadAddressDropped.setDescription('The number of packets dropped due to invalid server address.')
jnxJdhcpLocalServerNoAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoAddressDropped.setDescription('The number of packets dropped due to no available addresses.')
jnxJdhcpLocalServerNoInterfaceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoInterfaceDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoInterfaceDropped.setDescription('The number of packets dropped due to no interface match.')
jnxJdhcpLocalServerNoRoutingInstanceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoRoutingInstanceDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoRoutingInstanceDropped.setDescription('The number of packets dropped due to no routing instance match.')
jnxJdhcpLocalServerNoLocalAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoLocalAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerNoLocalAddressDropped.setDescription('The number of packets dropped due to no valid local address.')
jnxJdhcpLocalServerShortPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerShortPacketDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerShortPacketDropped.setDescription('The number of packets dropped due to packet too short.')
jnxJdhcpLocalServerBadReadDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadReadDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadReadDropped.setDescription('The number of packets dropped due to send error.')
jnxJdhcpLocalServerBadSendDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadSendDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBadSendDropped.setDescription('The number of packets dropped due to send error.')
jnxJdhcpLocalServerAuthenticationDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerAuthenticationDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerAuthenticationDropped.setDescription('The number of packets dropped due to authentication failure.')
jnxJdhcpLocalServerDynamicProfileDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDynamicProfileDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDynamicProfileDropped.setDescription('The number of packets dropped due to dynamic profile error.')
jnxJdhcpLocalServerLicenseDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLicenseDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerLicenseDropped.setDescription('The number of packets dropped due to license error.')
jnxJdhcpLocalServerBootRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBootRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBootRequestReceived.setDescription('The number of Boot Request packets received.')
jnxJdhcpLocalServerDhcpDeclineReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpDeclineReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpDeclineReceived.setDescription('The number of DHCP Decline packets received.')
jnxJdhcpLocalServerDhcpDiscoverReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpDiscoverReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpDiscoverReceived.setDescription('The number of DHCP Discover packets received.')
jnxJdhcpLocalServerDhcpInformReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpInformReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpInformReceived.setDescription('The number of DHCP inform packets received.')
jnxJdhcpLocalServerDhcpReleaseReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpReleaseReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpReleaseReceived.setDescription('The number of DHCP release packets received.')
jnxJdhcpLocalServerDhcpRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpRequestReceived.setDescription('The number of DHCP request packets received.')
jnxJdhcpLocalServerDhcpBootReplySent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpBootReplySent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpBootReplySent.setDescription('The number of DHCP Boot Reply packets sent.')
jnxJdhcpLocalServerDhcpOfferSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpOfferSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpOfferSent.setDescription('The number of DHCP Offer packets sent.')
jnxJdhcpLocalServerDhcpAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpAckSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpAckSent.setDescription('The number of DHCP Ack packets sent.')
jnxJdhcpLocalServerDhcpNakSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpNakSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDhcpNakSent.setDescription('The number of DHCP Nak packets sent.')
jnxJdhcpLocalServerForceRenewSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerForceRenewSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerForceRenewSent.setDescription('The number of DHCP Force Renew packets sent.')
jnxJdhcpLocalServerTotalLeaseCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerTotalLeaseCount.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerTotalLeaseCount.setDescription('The number of Bound DHCP Clients.')
jnxJdhcpLocalServerSwitchDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerSwitchDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerSwitchDropped.setDescription('The number of packets dropped due to switchover recovery in progress.')
jnxJdhcpLocalServerLeaseQueryReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseQueryReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseQueryReceived.setDescription('The number of DHCP Lease Query Request received.')
jnxJdhcpLocalServerBulkLeaseQueryReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBulkLeaseQueryReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBulkLeaseQueryReceived.setDescription('The number of DHCP Bulk Lease Query Request Received.')
jnxJdhcpLocalServerLeaseActiveSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseActiveSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseActiveSent.setDescription('The number of DHCP Lease Active Sent.')
jnxJdhcpLocalServerLeaseUnknownSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseUnknownSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseUnknownSent.setDescription('The number of DHCP Lease Unknown Sent.')
jnxJdhcpLocalServerLeaseUnAssignedSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseUnAssignedSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseUnAssignedSent.setDescription('The number of DHCP Lease UnAssigned Sent.')
jnxJdhcpLocalServerLeaseQueryDoneSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseQueryDoneSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerLeaseQueryDoneSent.setDescription('The number of DHCP Lease Query Done Sent.')
jnxJdhcpLocalServerBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1), )
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsTable.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsTable.setDescription('A table of address bindings maintained by this JUNOS DHCP Local Server.')
jnxJdhcpLocalServerBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1), ).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerBindingsIpAddress"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsEntry.setDescription('An entry (conceptual row) representing an address binding (client) maintained by this JUNOS DHCP Local Server.')
jnxJdhcpLocalServerBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsIpAddress.setDescription('The IP Address associated with this entry in the bindings table.')
jnxJdhcpLocalServerBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsMacAddress.setDescription('The MAC Address associated with this entry in the bindings table and corresponding to the IP Address denoted by the table index.')
jnxJdhcpLocalServerBindingsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("init", 1), ("selecting", 2), ("requesting", 3), ("release", 4), ("bound", 5), ("renewing", 6), ("rebinding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsState.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsState.setDescription('The state associated with this entry in the bindings table.')
jnxJdhcpLocalServerBindingsLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseEndTime.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseEndTime.setDescription('The time the lease expires on this binding.')
jnxJdhcpLocalServerBindingsLeaseExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseExpireTime.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseExpireTime.setDescription('The time remaining until the lease expires for this binding.')
jnxJdhcpLocalServerBindingsLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsLeaseStartTime.setDescription('The time the lease was started for this binding.')
jnxJdhcpLocalServerBindingsIncomingClientInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsIncomingClientInterface.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsIncomingClientInterface.setDescription('The incoming interface for this binding.')
jnxJdhcpLocalServerBindingsClientInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientInterfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientInterfaceVlanId.setDescription('The VLAN ID for this binding.')
jnxJdhcpLocalServerBindingsDemuxInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsDemuxInterfaceName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsDemuxInterfaceName.setDescription('The demux interface for this binding.')
jnxJdhcpLocalServerBindingsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsServerIpAddress.setDescription('The IP Address associated with the server for this entry in the bindings table.')
jnxJdhcpLocalServerBindingsBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsBootpRelayAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsBootpRelayAddress.setDescription('The BOOTP relay Address associated with the server for this entry in the bindings table.')
jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress.setDescription('The Previous BOOTP relay Address associated with the server for this entry in the bindings table.')
jnxJdhcpLocalServerBindingsClientPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientPoolName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientPoolName.setDescription('The client pool name for this binding.')
jnxJdhcpLocalServerBindingsClientProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerBindingsClientProfileName.setDescription('The client pool name for this binding.')
jnxJdhcpLocalServerIfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1), )
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTable.setDescription('A table of interface statistics maintained by this JUNOS DHCP Local Server.')
jnxJdhcpLocalServerIfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1), ).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerIfcStatsIfIndex"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsEntry.setDescription('An entry (conceptual row) representing an address binding (client) maintained by this JUNOS DHCP Local Server.')
jnxJdhcpLocalServerIfcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsIfIndex.setDescription('The ifIndex value of the interface for which this entry contains information.')
jnxJdhcpLocalServerIfcStatsTotalDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTotalDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTotalDropped.setDescription('The total number of packets dropped.')
jnxJdhcpLocalServerIfcStatsBadHardwareDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadHardwareDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadHardwareDropped.setDescription('The total number of packets dropped due to bad hardware address.')
jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped.setDescription('The number of packets dropped due to not BOOTP message.')
jnxJdhcpLocalServerIfcStatsBadOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadOptionsDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadOptionsDropped.setDescription('The number of packets dropped due to bad options in the packet.')
jnxJdhcpLocalServerIfcStatsBadAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadAddressDropped.setDescription('The number of packets dropped due to invalid server address.')
jnxJdhcpLocalServerIfcStatsNoAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoAddressDropped.setDescription('The number of packets dropped due to no available addresses.')
jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped.setDescription('The number of packets dropped due to no interface match.')
jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped.setDescription('The number of packets dropped due to no valid local address.')
jnxJdhcpLocalServerIfcStatsShortPacketDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsShortPacketDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsShortPacketDropped.setDescription('The number of packets dropped due to packet too short.')
jnxJdhcpLocalServerIfcStatsBadSendDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadSendDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadSendDropped.setDescription('The number of packets dropped due to send error.')
jnxJdhcpLocalServerIfcStatsAuthenticationDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsAuthenticationDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsAuthenticationDropped.setDescription('The number of packets dropped due to authentication failure.')
jnxJdhcpLocalServerIfcStatsDynamicProfileDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDynamicProfileDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDynamicProfileDropped.setDescription('The number of packets dropped due to dynamic profile error.')
jnxJdhcpLocalServerIfcStatsLicenseDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsLicenseDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsLicenseDropped.setDescription('The number of packets dropped due to license error.')
jnxJdhcpLocalServerIfcStatsBootRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBootRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBootRequestReceived.setDescription('The number of Boot Request packets received.')
jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived.setDescription('The number of DHCP Decline packets received.')
jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived.setDescription('The number of DHCP Discover packets received.')
jnxJdhcpLocalServerIfcStatsDhcpInformReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpInformReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpInformReceived.setDescription('The number of DHCP inform packets received.')
jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived.setDescription('The number of DHCP release packets received.')
jnxJdhcpLocalServerIfcStatsDhcpRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpRequestReceived.setDescription('The number of DHCP request packets received.')
jnxJdhcpLocalServerIfcStatsDhcpBootReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpBootReplySent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpBootReplySent.setDescription('The number of DHCP Boot Reply packets sent.')
jnxJdhcpLocalServerIfcStatsDhcpOfferSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpOfferSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpOfferSent.setDescription('The number of DHCP Offer packets sent.')
jnxJdhcpLocalServerIfcStatsDhcpAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpAckSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpAckSent.setDescription('The number of DHCP Ack packets sent.')
jnxJdhcpLocalServerIfcStatsDhcpNakSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpNakSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsDhcpNakSent.setDescription('The number of DHCP Nak packets sent.')
jnxJdhcpLocalServerIfcStatsForceRenewSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsForceRenewSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsForceRenewSent.setDescription('The number of DHCP Force Renew packets sent.')
jnxJdhcpLocalServerIfcStatsTotalLeaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTotalLeaseCount.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTotalLeaseCount.setDescription('The number of Bound DHCP Clients.')
jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped.setDescription('The number of packets dropped with bad DHCP opcode.')
jnxJdhcpLocalServerIfcStatsNoOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoOptionsDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsNoOptionsDropped.setDescription('The number of packets dropped with no options.')
jnxJdhcpLocalServerIfcStatsHopLimitDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsHopLimitDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsHopLimitDropped.setDescription('The number of packets dropped due to hop limit violation.')
jnxJdhcpLocalServerIfcStatsTtlExpiredDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTtlExpiredDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsTtlExpiredDropped.setDescription('The number of packets dropped due to ttl expiration.')
jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped.setDescription('The number of packets dropped due to bad UDP checksum.')
jnxJdhcpLocalServerIfcStatsOption60Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsOption60Dropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerIfcStatsOption60Dropped.setDescription('The number of packets dropped due to bad option 60.')
jnxJdhcpRelayStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1))
jnxJdhcpRelayBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2))
jnxJdhcpRelayTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 3))
jnxJdhcpRelayTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4))
jnxJdhcpRelayIfcStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5))
jnxJdhcpRelayTotalDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayTotalDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayTotalDropped.setDescription('The total number of packets dropped.')
jnxJdhcpRelayBadHardwareDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadHardwareDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBadHardwareDropped.setDescription('The total number of packets dropped due to bad hardware address.')
jnxJdhcpRelayBadBootpOpcodeDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadBootpOpcodeDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBadBootpOpcodeDropped.setDescription('The number of packets dropped due to not BOOTP message.')
jnxJdhcpRelayBadOptionsDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadOptionsDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBadOptionsDropped.setDescription('The number of packets dropped due to bad options in the packet.')
jnxJdhcpRelayBadAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBadAddressDropped.setDescription('The number of packets dropped due to invalid server address.')
jnxJdhcpRelayNoAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayNoAddressDropped.setDescription('The number of packets dropped due to no available addresses.')
jnxJdhcpRelayNoInterfaceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoInterfaceDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayNoInterfaceDropped.setDescription('The number of packets dropped due to no interface match.')
jnxJdhcpRelayNoRoutingInstanceDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoRoutingInstanceDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayNoRoutingInstanceDropped.setDescription('The number of packets dropped due to no routing instance match.')
jnxJdhcpRelayNoLocalAddressDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayNoLocalAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayNoLocalAddressDropped.setDescription('The number of packets dropped due to no valid local address.')
jnxJdhcpRelayShortPacketDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayShortPacketDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayShortPacketDropped.setDescription('The number of packets dropped due to packet too short.')
jnxJdhcpRelayBadReadDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadReadDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBadReadDropped.setDescription('The number of packets dropped due to read error.')
jnxJdhcpRelayBadSendDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBadSendDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBadSendDropped.setDescription('The number of packets dropped due to send error.')
jnxJdhcpRelayOption82Dropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayOption82Dropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayOption82Dropped.setDescription('The number of packets dropped due to failure to add Option 82.')
jnxJdhcpRelayOption60Dropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayOption60Dropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayOption60Dropped.setDescription('The number of packets dropped due to configure to drop.')
jnxJdhcpRelayAuthenticationDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayAuthenticationDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayAuthenticationDropped.setDescription('The number of packets dropped due to authentication failure.')
jnxJdhcpRelayDynamicProfileDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDynamicProfileDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDynamicProfileDropped.setDescription('The number of packets dropped due to dynamic profile error.')
jnxJdhcpRelayLicenseDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayLicenseDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayLicenseDropped.setDescription('The number of packets dropped due to license error.')
jnxJdhcpRelayBootRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBootRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBootRequestReceived.setDescription('The number of Boot Request packets received.')
jnxJdhcpRelayDhcpDeclineReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpDeclineReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpDeclineReceived.setDescription('The number of DHCP Decline packets received.')
jnxJdhcpRelayDhcpDiscoverReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpDiscoverReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpDiscoverReceived.setDescription('The number of DHCP Discover packets received.')
jnxJdhcpRelayDhcpInformReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpInformReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpInformReceived.setDescription('The number of DHCP inform packets received.')
jnxJdhcpRelayDhcpReleaseReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpReleaseReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpReleaseReceived.setDescription('The number of DHCP release packets received.')
jnxJdhcpRelayDhcpRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpRequestReceived.setDescription('The number of DHCP request packets received.')
jnxJdhcpRelayDhcpBootReplySent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpBootReplySent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpBootReplySent.setDescription('The number of DHCP Boot Reply packets sent.')
jnxJdhcpRelayDhcpOfferSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpOfferSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpOfferSent.setDescription('The number of DHCP Offer packets sent.')
jnxJdhcpRelayDhcpAckSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpAckSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpAckSent.setDescription('The number of DHCP Ack packets sent.')
jnxJdhcpRelayDhcpNakSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpNakSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayDhcpNakSent.setDescription('The number of DHCP Nak packets sent.')
jnxJdhcpRelayForceRenewSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayForceRenewSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayForceRenewSent.setDescription('The number of DHCP Force Renew packets sent.')
jnxJdhcpRelayTotalLeaseCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayTotalLeaseCount.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayTotalLeaseCount.setDescription('The number of Bound DHCP Clients.')
jnxJdhcpRelaySwitchDropped = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelaySwitchDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelaySwitchDropped.setDescription('The number of packets dropped due to switchover recovery in progress.')
jnxJdhcpRelayLeaseQuerySent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseQuerySent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseQuerySent.setDescription('The number of Lease Query Request sent.')
jnxJdhcpRelayBulkLeaseQuerySent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBulkLeaseQuerySent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBulkLeaseQuerySent.setDescription('The number of Bulk Lease Query Request sent.')
jnxJdhcpRelayLeaseActiveReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseActiveReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseActiveReceived.setDescription('The number of Lease Active received.')
jnxJdhcpRelayLeaseUnknownReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseUnknownReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseUnknownReceived.setDescription('The number of Lease Unknown received.')
jnxJdhcpRelayLeaseUnAssignedReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseUnAssignedReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseUnAssignedReceived.setDescription('The number of Lease Un Assigned received.')
jnxJdhcpRelayLeaseQueryDoneReceived = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseQueryDoneReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayLeaseQueryDoneReceived.setDescription('The number of Lease Query Done received.')
jnxJdhcpRelayBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1), )
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsTable.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsTable.setDescription('A table of address bindings maintained by this JUNOS DHCP Relay.')
jnxJdhcpRelayBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1), ).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpRelayBindingsIpAddress"))
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsEntry.setDescription('An entry (conceptual row) representing an address binding (client) maintained by this JUNOS DHCP Relay.')
jnxJdhcpRelayBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsIpAddress.setDescription('The IP Address associated with this entry in the bindings table.')
jnxJdhcpRelayBindingsLeaseState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("init", 1), ("selecting", 2), ("requesting", 3), ("release", 4), ("bound", 5), ("renewing", 6), ("rebinding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseState.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseState.setDescription('The state associated with this entry in the bindings table.')
jnxJdhcpRelayBindingsLeaseEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseEndTime.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseEndTime.setDescription('The time the lease expires on this binding.')
jnxJdhcpRelayBindingsLeaseExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseExpireTime.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseExpireTime.setDescription('The time remaining until the lease expires for this binding.')
jnxJdhcpRelayBindingsLeaseStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseStartTime.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsLeaseStartTime.setDescription('The time the lease was started for this binding.')
jnxJdhcpRelayBindingsIncomingClientInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsIncomingClientInterface.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsIncomingClientInterface.setDescription('The incoming interface or this binding.')
jnxJdhcpRelayBindingsClientInterfaceVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsClientInterfaceVlanId.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsClientInterfaceVlanId.setDescription('The VLAN ID for this binding.')
jnxJdhcpRelayBindingsDemuxInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsDemuxInterfaceName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsDemuxInterfaceName.setDescription('The demux interface for this binding.')
jnxJdhcpRelayBindingsServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 9), IpAddress())
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsServerIpAddress.setDescription('The IP Address associated with the server for this entry in the bindings table.')
jnxJdhcpRelayBindingsServerInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsServerInterface.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsServerInterface.setDescription('The demux interface for this binding.')
jnxJdhcpRelayBindingsBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 11), IpAddress())
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsBootpRelayAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsBootpRelayAddress.setDescription('The IP Address associated with the Bootp Relay for this entry in the bindings table.')
jnxJdhcpRelayBindingsPreviousBootpRelayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 12), IpAddress())
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsPreviousBootpRelayAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsPreviousBootpRelayAddress.setDescription('The IP Address associated with the Previous Bootp Relay for this entry in the bindings table.')
jnxJdhcpRelayBindingsClientProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsClientProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayBindingsClientProfileName.setDescription('The display client profile name.')
jnxJdhcpRelayIfcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1), )
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTable.setDescription('A table of interface statistics maintained by this JUNOS DHCP Relay.')
jnxJdhcpRelayIfcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1), ).setIndexNames((0, "JUNIPER-JDHCP-MIB", "jnxJdhcpRelayIfcStatsIfIndex"))
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsEntry.setDescription('An entry (conceptual row) representing an address binding (client) maintained by this JUNOS DHCP Relay.')
jnxJdhcpRelayIfcStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsIfIndex.setDescription('The ifIndex value of the interface for which this entry contains information.')
jnxJdhcpRelayIfcStatsTotalDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTotalDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTotalDropped.setDescription('The total number of packets dropped.')
jnxJdhcpRelayIfcStatsBadHardwareDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadHardwareDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadHardwareDropped.setDescription('The total number of packets dropped due to bad hardware address.')
jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped.setDescription('The number of packets dropped due to not BOOTP message.')
jnxJdhcpRelayIfcStatsBadOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadOptionsDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadOptionsDropped.setDescription('The number of packets dropped due to bad options in the packet.')
jnxJdhcpRelayIfcStatsBadAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadAddressDropped.setDescription('The number of packets dropped due to invalid server address.')
jnxJdhcpRelayIfcStatsNoAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoAddressDropped.setDescription('The number of packets dropped due to no available addresses.')
jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped.setDescription('The number of packets dropped due to no interface match.')
jnxJdhcpRelayIfcStatsNoLocalAddressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoLocalAddressDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoLocalAddressDropped.setDescription('The number of packets dropped due to no valid local address.')
jnxJdhcpRelayIfcStatsShortPacketDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsShortPacketDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsShortPacketDropped.setDescription('The number of packets dropped due to packet too short.')
jnxJdhcpRelayIfcStatsBadSendDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadSendDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadSendDropped.setDescription('The number of packets dropped due to send error.')
jnxJdhcpRelayIfcStatsAuthenticationDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsAuthenticationDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsAuthenticationDropped.setDescription('The number of packets dropped due to authentication failure.')
jnxJdhcpRelayIfcStatsDynamicProfileDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDynamicProfileDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDynamicProfileDropped.setDescription('The number of packets dropped due to dynamic profile error.')
jnxJdhcpRelayIfcStatsLicenseDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsLicenseDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsLicenseDropped.setDescription('The number of packets dropped due to license error.')
jnxJdhcpRelayIfcStatsBootRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBootRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBootRequestReceived.setDescription('The number of Boot Request packets received.')
jnxJdhcpRelayIfcStatsDhcpDeclineReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpDeclineReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpDeclineReceived.setDescription('The number of DHCP Decline packets received.')
jnxJdhcpRelayIfcStatsDhcpDiscoverReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpDiscoverReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpDiscoverReceived.setDescription('The number of DHCP Discover packets received.')
jnxJdhcpRelayIfcStatsDhcpInformReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpInformReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpInformReceived.setDescription('The number of DHCP inform packets received.')
jnxJdhcpRelayIfcStatsDhcpReleaseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpReleaseReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpReleaseReceived.setDescription('The number of DHCP release packets received.')
jnxJdhcpRelayIfcStatsDhcpRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpRequestReceived.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpRequestReceived.setDescription('The number of DHCP request packets received.')
jnxJdhcpRelayIfcStatsDhcpBootReplySent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpBootReplySent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpBootReplySent.setDescription('The number of DHCP Boot Reply packets sent.')
jnxJdhcpRelayIfcStatsDhcpOfferSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpOfferSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpOfferSent.setDescription('The number of DHCP Offer packets sent.')
jnxJdhcpRelayIfcStatsDhcpAckSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpAckSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpAckSent.setDescription('The number of DHCP Ack packets sent.')
jnxJdhcpRelayIfcStatsDhcpNakSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpNakSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsDhcpNakSent.setDescription('The number of DHCP Nak packets sent.')
jnxJdhcpRelayIfcStatsForceRenewSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsForceRenewSent.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsForceRenewSent.setDescription('The number of DHCP Force Renew packets sent.')
jnxJdhcpRelayIfcStatsTotalLeaseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTotalLeaseCount.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTotalLeaseCount.setDescription('The number of Bound DHCP Clients.')
jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped.setDescription('The number of packets dropped with bad DHCP opcode.')
jnxJdhcpRelayIfcStatsNoOptionsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoOptionsDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsNoOptionsDropped.setDescription('The number of packets dropped with no options.')
jnxJdhcpRelayIfcStatsHopLimitDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsHopLimitDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsHopLimitDropped.setDescription('The number of packets dropped due to hop limit violation.')
jnxJdhcpRelayIfcStatsTtlExpiredDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTtlExpiredDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsTtlExpiredDropped.setDescription('The number of packets dropped due to ttl expiration.')
jnxJdhcpRelayIfcStatsBadUdpCksumDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadUdpCksumDropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsBadUdpCksumDropped.setDescription('The number of packets dropped due to bad UDP checksum.')
jnxJdhcpRelayIfcStatsOption82Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsOption82Dropped.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayIfcStatsOption82Dropped.setDescription('The number of packets dropped due to failure to add Option 82.')
jnxJdhcpLocalServerLastDetected = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 1), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpLocalServerLastDetected.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerLastDetected.setDescription('The time the duplicate client was last detected')
jnxJdhcpRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpRouterName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRouterName.setDescription('The VRF ID in JUNOS. Represented as the Logical Router (LR) Name followed by the Router Instance (RI) Name.')
jnxJdhcpLocalServerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpLocalServerMacAddress.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerMacAddress.setDescription('The MAC address of the client that changed interfaces.')
jnxJdhcpLocalServerInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceName.setDescription('The interface where the DHCP client was detected')
jnxJdhcpLocalServerInterfaceLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 5), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimit.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimit.setDescription('The number of clients supported on this interface.')
jnxJdhcpLocalServerEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("debug", 0), ("warning", 1), ("critical", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpLocalServerEventSeverity.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerEventSeverity.setDescription('The level of error. ')
jnxJdhcpLocalServerEventString = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 4, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpLocalServerEventString.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerEventString.setDescription('The text of the event string associated with the health event.')
jnxJdhcpRelayRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 257))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpRelayRouterName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayRouterName.setDescription('The VRF ID in JUNOS. Represented as the Logical Router (LR) Name followed by the Router Instance (RI) Name.')
jnxJdhcpRelayInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceName.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceName.setDescription('The interface where the DHCP client was detected')
jnxJdhcpRelayInterfaceLimit = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 4, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimit.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimit.setDescription('The number of clients supported on this interface.')
jnxJdhcpLocalServerDuplicateClient = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 1)).setObjects(("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerMacAddress"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerLastDetected"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerDuplicateClient.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerDuplicateClient.setDescription('Reports the first occurance of detection of a DHCP client that changed interfaces.')
jnxJdhcpLocalServerInterfaceLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 2)).setObjects(("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceLimit"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimitExceeded.setDescription('Reports when the limit of clients has been exceeded on an interface.')
jnxJdhcpLocalServerInterfaceLimitAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 3)).setObjects(("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerInterfaceLimit"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimitAbated.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerInterfaceLimitAbated.setDescription('Reports when the number of clients on an interface has fallen below the limit allowed on that interface.')
jnxJdhcpLocalServerHealth = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 1, 3, 4)).setObjects(("JUNIPER-JDHCP-MIB", "jnxJdhcpRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerEventSeverity"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpLocalServerEventString"))
if mibBuilder.loadTexts: jnxJdhcpLocalServerHealth.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpLocalServerHealth.setDescription('Reports when a health event occurs in the Local Server application.')
jnxJdhcpRelayInterfaceLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 3, 1)).setObjects(("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceLimit"))
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimitExceeded.setDescription('Reports when the limit of clients has been exceeded on an interface.')
jnxJdhcpRelayInterfaceLimitAbated = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 61, 61, 2, 3, 2)).setObjects(("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayRouterName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceName"), ("JUNIPER-JDHCP-MIB", "jnxJdhcpRelayInterfaceLimit"))
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimitAbated.setStatus('current')
if mibBuilder.loadTexts: jnxJdhcpRelayInterfaceLimitAbated.setDescription('Reports when the number of clients on an interface has fallen below the limit allowed on that interface.')
mibBuilder.exportSymbols("JUNIPER-JDHCP-MIB", jnxJdhcpLocalServerDhcpReleaseReceived=jnxJdhcpLocalServerDhcpReleaseReceived, jnxJdhcpLocalServerSwitchDropped=jnxJdhcpLocalServerSwitchDropped, jnxJdhcpRelayIfcStatsDhcpInformReceived=jnxJdhcpRelayIfcStatsDhcpInformReceived, jnxJdhcpLocalServerIfcStatsBootRequestReceived=jnxJdhcpLocalServerIfcStatsBootRequestReceived, jnxJdhcpRelayIfcStatsDhcpOfferSent=jnxJdhcpRelayIfcStatsDhcpOfferSent, jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped=jnxJdhcpLocalServerIfcStatsNoInterfaceCfgDropped, jnxJdhcpLocalServerIfcStatsTotalDropped=jnxJdhcpLocalServerIfcStatsTotalDropped, jnxJdhcpRelayShortPacketDropped=jnxJdhcpRelayShortPacketDropped, jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived=jnxJdhcpLocalServerIfcStatsDhcpDeclineReceived, jnxJdhcpRelayBulkLeaseQuerySent=jnxJdhcpRelayBulkLeaseQuerySent, jnxJdhcpLocalServerBadHardwareDropped=jnxJdhcpLocalServerBadHardwareDropped, jnxJdhcpLocalServerIfcStatsDhcpAckSent=jnxJdhcpLocalServerIfcStatsDhcpAckSent, jnxJdhcpLocalServerIfcStatsTable=jnxJdhcpLocalServerIfcStatsTable, jnxJdhcpRelayIfcStatsBadUdpCksumDropped=jnxJdhcpRelayIfcStatsBadUdpCksumDropped, jnxJdhcpLocalServerIfcStatsForceRenewSent=jnxJdhcpLocalServerIfcStatsForceRenewSent, jnxJdhcpLocalServerDhcpInformReceived=jnxJdhcpLocalServerDhcpInformReceived, jnxJdhcpLocalServerIfcStatsBadSendDropped=jnxJdhcpLocalServerIfcStatsBadSendDropped, jnxJdhcpRelayDhcpBootReplySent=jnxJdhcpRelayDhcpBootReplySent, PYSNMP_MODULE_ID=jnxJdhcpMIB, jnxJdhcpLocalServerLeaseQueryDoneSent=jnxJdhcpLocalServerLeaseQueryDoneSent, jnxJdhcpLocalServerIfcStatsBadOptionsDropped=jnxJdhcpLocalServerIfcStatsBadOptionsDropped, jnxJdhcpRelayForceRenewSent=jnxJdhcpRelayForceRenewSent, jnxJdhcpRelayBindingsClientProfileName=jnxJdhcpRelayBindingsClientProfileName, jnxJdhcpLocalServerAuthenticationDropped=jnxJdhcpLocalServerAuthenticationDropped, jnxJdhcpRelayIfcStatsBadSendDropped=jnxJdhcpRelayIfcStatsBadSendDropped, jnxJdhcpRelayIfcStatsBadAddressDropped=jnxJdhcpRelayIfcStatsBadAddressDropped, jnxJdhcpLocalServerEventSeverity=jnxJdhcpLocalServerEventSeverity, jnxJdhcpLocalServerIfcStatsNoAddressDropped=jnxJdhcpLocalServerIfcStatsNoAddressDropped, jnxJdhcpLocalServerBadSendDropped=jnxJdhcpLocalServerBadSendDropped, jnxJdhcpRelayIfcStatsShortPacketDropped=jnxJdhcpRelayIfcStatsShortPacketDropped, jnxJdhcpRelayIfcStatsDhcpBootReplySent=jnxJdhcpRelayIfcStatsDhcpBootReplySent, jnxJdhcpRelayBindingsEntry=jnxJdhcpRelayBindingsEntry, jnxJdhcpRelayLeaseActiveReceived=jnxJdhcpRelayLeaseActiveReceived, jnxJdhcpLocalServerDhcpBootReplySent=jnxJdhcpLocalServerDhcpBootReplySent, jnxJdhcpRelayLicenseDropped=jnxJdhcpRelayLicenseDropped, jnxJdhcpLocalServerBindingsClientProfileName=jnxJdhcpLocalServerBindingsClientProfileName, jnxJdhcpLocalServerIfcStatsShortPacketDropped=jnxJdhcpLocalServerIfcStatsShortPacketDropped, jnxJdhcpLocalServerIfcStatsDhcpOfferSent=jnxJdhcpLocalServerIfcStatsDhcpOfferSent, jnxJdhcpRelayIfcStatsBadHardwareDropped=jnxJdhcpRelayIfcStatsBadHardwareDropped, jnxJdhcpRelayIfcStatsTotalLeaseCount=jnxJdhcpRelayIfcStatsTotalLeaseCount, jnxJdhcpLocalServerNoRoutingInstanceDropped=jnxJdhcpLocalServerNoRoutingInstanceDropped, jnxJdhcpRelayBindingsLeaseEndTime=jnxJdhcpRelayBindingsLeaseEndTime, jnxJdhcpRelayIfcStatsNoOptionsDropped=jnxJdhcpRelayIfcStatsNoOptionsDropped, jnxJdhcpLocalServerIfcStatsDhcpBootReplySent=jnxJdhcpLocalServerIfcStatsDhcpBootReplySent, jnxJdhcpRelayIfcStatsHopLimitDropped=jnxJdhcpRelayIfcStatsHopLimitDropped, jnxJdhcpLocalServerIfcStats=jnxJdhcpLocalServerIfcStats, jnxJdhcpRelayIfcStatsNoLocalAddressDropped=jnxJdhcpRelayIfcStatsNoLocalAddressDropped, jnxJdhcpRelayIfcStatsOption82Dropped=jnxJdhcpRelayIfcStatsOption82Dropped, jnxJdhcpLocalServerBootRequestReceived=jnxJdhcpLocalServerBootRequestReceived, jnxJdhcpLocalServerBindings=jnxJdhcpLocalServerBindings, jnxJdhcpRelayDhcpRequestReceived=jnxJdhcpRelayDhcpRequestReceived, jnxJdhcpLocalServerTotalDropped=jnxJdhcpLocalServerTotalDropped, jnxJdhcpLocalServerDhcpDeclineReceived=jnxJdhcpLocalServerDhcpDeclineReceived, jnxJdhcpRelayInterfaceLimit=jnxJdhcpRelayInterfaceLimit, jnxJdhcpRelayBindingsLeaseExpireTime=jnxJdhcpRelayBindingsLeaseExpireTime, jnxJdhcpRelayIfcStatsTotalDropped=jnxJdhcpRelayIfcStatsTotalDropped, jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped=jnxJdhcpLocalServerIfcStatsBadDhcpOpcodeDropped, jnxJdhcpLocalServerMacAddress=jnxJdhcpLocalServerMacAddress, jnxJdhcpRelayIfcStatsTtlExpiredDropped=jnxJdhcpRelayIfcStatsTtlExpiredDropped, jnxJdhcpRelayIfcStatsForceRenewSent=jnxJdhcpRelayIfcStatsForceRenewSent, jnxJdhcpRelayBindingsBootpRelayAddress=jnxJdhcpRelayBindingsBootpRelayAddress, jnxJdhcpLocalServerIfcStatsLicenseDropped=jnxJdhcpLocalServerIfcStatsLicenseDropped, jnxJdhcpLocalServerLeaseActiveSent=jnxJdhcpLocalServerLeaseActiveSent, jnxJdhcpLocalServerIfcStatsBadHardwareDropped=jnxJdhcpLocalServerIfcStatsBadHardwareDropped, jnxJdhcpRelayObjects=jnxJdhcpRelayObjects, jnxJdhcpLocalServerIfcStatsDhcpRequestReceived=jnxJdhcpLocalServerIfcStatsDhcpRequestReceived, jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped=jnxJdhcpLocalServerIfcStatsBadUdpCksumDropped, jnxJdhcpLocalServerHealth=jnxJdhcpLocalServerHealth, jnxJdhcpLocalServerIfcStatsDhcpNakSent=jnxJdhcpLocalServerIfcStatsDhcpNakSent, jnxJdhcpRelayDhcpOfferSent=jnxJdhcpRelayDhcpOfferSent, jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped=jnxJdhcpLocalServerIfcStatsNoLocalAddressDropped, jnxJdhcpLocalServerDhcpDiscoverReceived=jnxJdhcpLocalServerDhcpDiscoverReceived, jnxJdhcpLocalServerShortPacketDropped=jnxJdhcpLocalServerShortPacketDropped, jnxJdhcpLocalServerDhcpRequestReceived=jnxJdhcpLocalServerDhcpRequestReceived, jnxJdhcpLocalServerIfcStatsOption60Dropped=jnxJdhcpLocalServerIfcStatsOption60Dropped, jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress=jnxJdhcpLocalServerBindingsPreviousBootpRelayAddress, jnxJdhcpRelayBindings=jnxJdhcpRelayBindings, jnxJdhcpRelayTrapVars=jnxJdhcpRelayTrapVars, jnxJdhcpLocalServerBindingsLeaseStartTime=jnxJdhcpLocalServerBindingsLeaseStartTime, jnxJdhcpRelayBadSendDropped=jnxJdhcpRelayBadSendDropped, jnxJdhcpLocalServerBadOptionsDropped=jnxJdhcpLocalServerBadOptionsDropped, jnxJdhcpRelayAuthenticationDropped=jnxJdhcpRelayAuthenticationDropped, jnxJdhcpRelayLeaseQuerySent=jnxJdhcpRelayLeaseQuerySent, jnxJdhcpRelayIfcStatsDhcpReleaseReceived=jnxJdhcpRelayIfcStatsDhcpReleaseReceived, jnxJdhcpLocalServerLeaseUnknownSent=jnxJdhcpLocalServerLeaseUnknownSent, jnxJdhcpLocalServerInterfaceLimit=jnxJdhcpLocalServerInterfaceLimit, jnxJdhcpLocalServerStatistics=jnxJdhcpLocalServerStatistics, jnxJdhcpRelayInterfaceName=jnxJdhcpRelayInterfaceName, jnxJdhcpRelayIfcStatsLicenseDropped=jnxJdhcpRelayIfcStatsLicenseDropped, jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped=jnxJdhcpRelayIfcStatsNoInterfaceCfgDropped, jnxJdhcpRelayOption60Dropped=jnxJdhcpRelayOption60Dropped, jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped=jnxJdhcpRelayIfcStatsBadBootpOpcodeDropped, jnxJdhcpLocalServerTraps=jnxJdhcpLocalServerTraps, jnxJdhcpRelayRouterName=jnxJdhcpRelayRouterName, jnxJdhcpLocalServerInterfaceLimitExceeded=jnxJdhcpLocalServerInterfaceLimitExceeded, jnxJdhcpRelayBindingsDemuxInterfaceName=jnxJdhcpRelayBindingsDemuxInterfaceName, jnxJdhcpRelayDhcpNakSent=jnxJdhcpRelayDhcpNakSent, jnxJdhcpRelaySwitchDropped=jnxJdhcpRelaySwitchDropped, jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived=jnxJdhcpLocalServerIfcStatsDhcpReleaseReceived, jnxJdhcpRelayIfcStats=jnxJdhcpRelayIfcStats, jnxJdhcpLocalServerBindingsServerIpAddress=jnxJdhcpLocalServerBindingsServerIpAddress, jnxJdhcpLocalServerBindingsClientPoolName=jnxJdhcpLocalServerBindingsClientPoolName, jnxJdhcpMIB=jnxJdhcpMIB, jnxJdhcpRelayLeaseUnknownReceived=jnxJdhcpRelayLeaseUnknownReceived, jnxJdhcpLocalServerBulkLeaseQueryReceived=jnxJdhcpLocalServerBulkLeaseQueryReceived, jnxJdhcpRouterName=jnxJdhcpRouterName, jnxJdhcpLocalServerIfcStatsTtlExpiredDropped=jnxJdhcpLocalServerIfcStatsTtlExpiredDropped, jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped=jnxJdhcpRelayIfcStatsBadDhcpOpcodeDropped, jnxJdhcpLocalServerInterfaceName=jnxJdhcpLocalServerInterfaceName, jnxJdhcpRelayBadAddressDropped=jnxJdhcpRelayBadAddressDropped, jnxJdhcpLocalServerLicenseDropped=jnxJdhcpLocalServerLicenseDropped, jnxJdhcpLocalServerBindingsState=jnxJdhcpLocalServerBindingsState, jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped=jnxJdhcpLocalServerIfcStatsBadBootpOpcodeDropped, jnxJdhcpRelayDhcpAckSent=jnxJdhcpRelayDhcpAckSent, jnxJdhcpRelayNoRoutingInstanceDropped=jnxJdhcpRelayNoRoutingInstanceDropped, jnxJdhcpRelayInterfaceLimitExceeded=jnxJdhcpRelayInterfaceLimitExceeded, jnxJdhcpLocalServerBadAddressDropped=jnxJdhcpLocalServerBadAddressDropped, jnxJdhcpLocalServerBindingsLeaseExpireTime=jnxJdhcpLocalServerBindingsLeaseExpireTime, jnxJdhcpLocalServerForceRenewSent=jnxJdhcpLocalServerForceRenewSent, jnxJdhcpRelayNoInterfaceDropped=jnxJdhcpRelayNoInterfaceDropped, jnxJdhcpLocalServerBindingsTable=jnxJdhcpLocalServerBindingsTable, jnxJdhcpLocalServerIfcStatsIfIndex=jnxJdhcpLocalServerIfcStatsIfIndex, jnxJdhcpRelayBadBootpOpcodeDropped=jnxJdhcpRelayBadBootpOpcodeDropped, jnxJdhcpRelayBindingsIncomingClientInterface=jnxJdhcpRelayBindingsIncomingClientInterface, jnxJdhcpRelayBindingsPreviousBootpRelayAddress=jnxJdhcpRelayBindingsPreviousBootpRelayAddress, jnxJdhcpRelayIfcStatsDhcpRequestReceived=jnxJdhcpRelayIfcStatsDhcpRequestReceived, jnxJdhcpLocalServerTotalLeaseCount=jnxJdhcpLocalServerTotalLeaseCount, jnxJdhcpRelayDhcpInformReceived=jnxJdhcpRelayDhcpInformReceived, jnxJdhcpLocalServerIfcStatsAuthenticationDropped=jnxJdhcpLocalServerIfcStatsAuthenticationDropped, jnxJdhcpRelayIfcStatsDhcpAckSent=jnxJdhcpRelayIfcStatsDhcpAckSent, jnxJdhcpRelayBadOptionsDropped=jnxJdhcpRelayBadOptionsDropped, jnxJdhcpLocalServerNoAddressDropped=jnxJdhcpLocalServerNoAddressDropped, jnxJdhcpRelayIfcStatsTable=jnxJdhcpRelayIfcStatsTable, jnxJdhcpRelayTotalLeaseCount=jnxJdhcpRelayTotalLeaseCount, jnxJdhcpLocalServerTrapVars=jnxJdhcpLocalServerTrapVars, jnxJdhcpLocalServerBindingsClientInterfaceVlanId=jnxJdhcpLocalServerBindingsClientInterfaceVlanId, jnxJdhcpLocalServerDhcpAckSent=jnxJdhcpLocalServerDhcpAckSent, jnxJdhcpLocalServerBindingsEntry=jnxJdhcpLocalServerBindingsEntry, jnxJdhcpRelayBindingsLeaseStartTime=jnxJdhcpRelayBindingsLeaseStartTime, jnxJdhcpRelayBindingsLeaseState=jnxJdhcpRelayBindingsLeaseState, jnxJdhcpLocalServerBindingsIpAddress=jnxJdhcpLocalServerBindingsIpAddress, jnxJdhcpRelayTotalDropped=jnxJdhcpRelayTotalDropped, jnxJdhcpRelayIfcStatsBootRequestReceived=jnxJdhcpRelayIfcStatsBootRequestReceived, jnxJdhcpLocalServerIfcStatsHopLimitDropped=jnxJdhcpLocalServerIfcStatsHopLimitDropped, jnxJdhcpRelayDhcpReleaseReceived=jnxJdhcpRelayDhcpReleaseReceived, jnxJdhcpRelayDynamicProfileDropped=jnxJdhcpRelayDynamicProfileDropped, jnxJdhcpLocalServerBadBootpOpcodeDropped=jnxJdhcpLocalServerBadBootpOpcodeDropped, jnxJdhcpLocalServerLeaseUnAssignedSent=jnxJdhcpLocalServerLeaseUnAssignedSent, jnxJdhcpRelayIfcStatsEntry=jnxJdhcpRelayIfcStatsEntry, jnxJdhcpRelayIfcStatsDynamicProfileDropped=jnxJdhcpRelayIfcStatsDynamicProfileDropped, jnxJdhcpLocalServerBindingsMacAddress=jnxJdhcpLocalServerBindingsMacAddress, jnxJdhcpRelayBindingsServerIpAddress=jnxJdhcpRelayBindingsServerIpAddress, jnxJdhcpLocalServerBindingsDemuxInterfaceName=jnxJdhcpLocalServerBindingsDemuxInterfaceName, jnxJdhcpRelayNoAddressDropped=jnxJdhcpRelayNoAddressDropped, jnxJdhcpLocalServerIfcStatsDhcpInformReceived=jnxJdhcpLocalServerIfcStatsDhcpInformReceived, jnxJdhcpRelayBootRequestReceived=jnxJdhcpRelayBootRequestReceived, jnxJdhcpRelayDhcpDiscoverReceived=jnxJdhcpRelayDhcpDiscoverReceived, jnxJdhcpLocalServerEventString=jnxJdhcpLocalServerEventString, jnxJdhcpLocalServerLeaseQueryReceived=jnxJdhcpLocalServerLeaseQueryReceived, jnxJdhcpLocalServerBindingsBootpRelayAddress=jnxJdhcpLocalServerBindingsBootpRelayAddress, jnxJdhcpRelayIfcStatsDhcpNakSent=jnxJdhcpRelayIfcStatsDhcpNakSent, jnxJdhcpLocalServerIfcStatsTotalLeaseCount=jnxJdhcpLocalServerIfcStatsTotalLeaseCount, jnxJdhcpRelayIfcStatsDhcpDiscoverReceived=jnxJdhcpRelayIfcStatsDhcpDiscoverReceived, jnxJdhcpLocalServerObjects=jnxJdhcpLocalServerObjects, jnxJdhcpLocalServerDynamicProfileDropped=jnxJdhcpLocalServerDynamicProfileDropped, jnxJdhcpLocalServerNoLocalAddressDropped=jnxJdhcpLocalServerNoLocalAddressDropped, jnxJdhcpLocalServerDuplicateClient=jnxJdhcpLocalServerDuplicateClient, jnxJdhcpLocalServerLastDetected=jnxJdhcpLocalServerLastDetected, jnxJdhcpRelayLeaseQueryDoneReceived=jnxJdhcpRelayLeaseQueryDoneReceived, jnxJdhcpLocalServerInterfaceLimitAbated=jnxJdhcpLocalServerInterfaceLimitAbated, jnxJdhcpRelayInterfaceLimitAbated=jnxJdhcpRelayInterfaceLimitAbated, jnxJdhcpRelayBindingsTable=jnxJdhcpRelayBindingsTable, jnxJdhcpLocalServerBadReadDropped=jnxJdhcpLocalServerBadReadDropped, jnxJdhcpLocalServerDhcpOfferSent=jnxJdhcpLocalServerDhcpOfferSent, jnxJdhcpRelayLeaseUnAssignedReceived=jnxJdhcpRelayLeaseUnAssignedReceived, jnxJdhcpRelayIfcStatsNoAddressDropped=jnxJdhcpRelayIfcStatsNoAddressDropped, jnxJdhcpLocalServerIfcStatsDynamicProfileDropped=jnxJdhcpLocalServerIfcStatsDynamicProfileDropped, jnxJdhcpRelayIfcStatsBadOptionsDropped=jnxJdhcpRelayIfcStatsBadOptionsDropped, jnxJdhcpLocalServerBindingsLeaseEndTime=jnxJdhcpLocalServerBindingsLeaseEndTime, jnxJdhcpRelayBadReadDropped=jnxJdhcpRelayBadReadDropped, jnxJdhcpRelayIfcStatsDhcpDeclineReceived=jnxJdhcpRelayIfcStatsDhcpDeclineReceived, jnxJdhcpLocalServerDhcpNakSent=jnxJdhcpLocalServerDhcpNakSent, jnxJdhcpLocalServerIfcStatsEntry=jnxJdhcpLocalServerIfcStatsEntry, jnxJdhcpLocalServerIfcStatsNoOptionsDropped=jnxJdhcpLocalServerIfcStatsNoOptionsDropped, jnxJdhcpRelayBindingsIpAddress=jnxJdhcpRelayBindingsIpAddress, jnxJdhcpRelayBindingsClientInterfaceVlanId=jnxJdhcpRelayBindingsClientInterfaceVlanId, jnxJdhcpRelayBadHardwareDropped=jnxJdhcpRelayBadHardwareDropped, jnxJdhcpRelayDhcpDeclineReceived=jnxJdhcpRelayDhcpDeclineReceived, jnxJdhcpRelayBindingsServerInterface=jnxJdhcpRelayBindingsServerInterface, jnxJdhcpRelayStatistics=jnxJdhcpRelayStatistics, jnxJdhcpLocalServerBindingsIncomingClientInterface=jnxJdhcpLocalServerBindingsIncomingClientInterface, jnxJdhcpRelayIfcStatsIfIndex=jnxJdhcpRelayIfcStatsIfIndex, jnxJdhcpRelayOption82Dropped=jnxJdhcpRelayOption82Dropped, jnxJdhcpLocalServerIfcStatsBadAddressDropped=jnxJdhcpLocalServerIfcStatsBadAddressDropped, jnxJdhcpRelayIfcStatsAuthenticationDropped=jnxJdhcpRelayIfcStatsAuthenticationDropped, jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived=jnxJdhcpLocalServerIfcStatsDhcpDiscoverReceived, jnxJdhcpRelayNoLocalAddressDropped=jnxJdhcpRelayNoLocalAddressDropped, jnxJdhcpRelayTraps=jnxJdhcpRelayTraps, jnxJdhcpLocalServerNoInterfaceDropped=jnxJdhcpLocalServerNoInterfaceDropped)
