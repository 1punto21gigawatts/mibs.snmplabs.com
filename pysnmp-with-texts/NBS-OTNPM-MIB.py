#
# PySNMP MIB module NBS-OTNPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NBS-OTNPM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, ifAlias = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifAlias")
nbs, WritableU64, Unsigned64 = mibBuilder.importSymbols("NBS-MIB", "nbs", "WritableU64", "Unsigned64")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Bits, Counter64, ObjectIdentity, Counter32, iso, Integer32, MibIdentifier, TimeTicks, ModuleIdentity, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Bits", "Counter64", "ObjectIdentity", "Counter32", "iso", "Integer32", "MibIdentifier", "TimeTicks", "ModuleIdentity", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nbsOtnpmMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 629, 222))
if mibBuilder.loadTexts: nbsOtnpmMib.setLastUpdated('201401230000Z')
if mibBuilder.loadTexts: nbsOtnpmMib.setOrganization('NBS')
if mibBuilder.loadTexts: nbsOtnpmMib.setContactInfo('For technical support, please contact your service channel')
if mibBuilder.loadTexts: nbsOtnpmMib.setDescription('OTN Performance Monitoring and user-controlled statistics')
nbsOtnpmThresholdsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 1))
if mibBuilder.loadTexts: nbsOtnpmThresholdsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsGrp.setDescription('Maximum considered safe by user')
nbsOtnpmCurrentGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 2))
if mibBuilder.loadTexts: nbsOtnpmCurrentGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentGrp.setDescription('Subtotals and statistics for sample now underway')
nbsOtnpmHistoricGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 3))
if mibBuilder.loadTexts: nbsOtnpmHistoricGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricGrp.setDescription('Totals and final statistics for a previous sample')
nbsOtnpmRunningGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 4))
if mibBuilder.loadTexts: nbsOtnpmRunningGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningGrp.setDescription('Totals and statistics since (boot-up) protocol configuration')
nbsOtnAlarmsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 80))
if mibBuilder.loadTexts: nbsOtnAlarmsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsGrp.setDescription('OTN alarms')
nbsOtnStatsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 90))
if mibBuilder.loadTexts: nbsOtnStatsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsGrp.setDescription('User-controlled OTN alarms and statistics')
nbsOtnpmEventsGrp = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 100))
if mibBuilder.loadTexts: nbsOtnpmEventsGrp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmEventsGrp.setDescription('Threshold crossing events')
nbsOtnpmTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 629, 222, 100, 0))
if mibBuilder.loadTexts: nbsOtnpmTraps.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTraps.setDescription('Threshold crossing Traps or Notifications')
class NbsOtnAlarmId(TextualConvention, Integer32):
    description = 'OTN alarm id, also used to identify a mask bit'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))
    namedValues = NamedValues(("aLOS", 1), ("aLOF", 2), ("aOOF", 3), ("aLOM", 4), ("aOOM", 5), ("aRxLOL", 6), ("aTxLOL", 7), ("aOtuAIS", 8), ("aSectBDI", 9), ("aSectBIAE", 10), ("aSectIAE", 11), ("aSectTIM", 12), ("aOduAIS", 13), ("aOduOCI", 14), ("aOduLCK", 15), ("aPathBDI", 16), ("aPathTIM", 17), ("aTcm1BDI", 18), ("aTcm2BDI", 19), ("aTcm3BDI", 20), ("aTcm4BDI", 21), ("aTcm5BDI", 22), ("aTcm6BDI", 23), ("aTcm1BIAE", 24), ("aTcm2BIAE", 25), ("aTcm3BIAE", 26), ("aTcm4BIAE", 27), ("aTcm5BIAE", 28), ("aTcm6BIAE", 29), ("aTcm1IAE", 30), ("aTcm2IAE", 31), ("aTcm3IAE", 32), ("aTcm4IAE", 33), ("aTcm5IAE", 34), ("aTcm6IAE", 35), ("aTcm1LTC", 36), ("aTcm2LTC", 37), ("aTcm3LTC", 38), ("aTcm4LTC", 39), ("aTcm5LTC", 40), ("aTcm6LTC", 41), ("aTcm1TIM", 42), ("aTcm2TIM", 43), ("aTcm3TIM", 44), ("aTcm4TIM", 45), ("aTcm5TIM", 46), ("aTcm6TIM", 47), ("aFwdSF", 48), ("aFwdSD", 49), ("aBwdSF", 50), ("aBwdSD", 51), ("aPTM", 52), ("aCSF", 53))

class NbsOtnAlarmMask(TextualConvention, OctetString):
    description = 'OTN alarm mask, encoded within an octet string. The bit assigned to a particular alarm (id from NbsOtnAlarmId) is calculated by: index = id/8; bit = id%8; where the leftmost bit (msb) is deemed as bit 0. The mask length is either full-size or zero if not supported.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 7)

nbsOtnpmThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 222, 1, 1), )
if mibBuilder.loadTexts: nbsOtnpmThresholdsTable.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsTable.setDescription('OTN Performance Monitoring thresholds')
nbsOtnpmThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1), ).setIndexNames((0, "NBS-OTNPM-MIB", "nbsOtnpmThresholdsIfIndex"), (0, "NBS-OTNPM-MIB", "nbsOtnpmThresholdsInterval"), (0, "NBS-OTNPM-MIB", "nbsOtnpmThresholdsScope"))
if mibBuilder.loadTexts: nbsOtnpmThresholdsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsEntry.setDescription('Performance monitoring thresholds for a particular interface')
nbsOtnpmThresholdsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmThresholdsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsIfIndex.setDescription('The mib2 ifIndex')
nbsOtnpmThresholdsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarterHour", 1), ("twentyfourHour", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmThresholdsInterval.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsInterval.setDescription('Indicates the sampling period to which these thresholds apply')
nbsOtnpmThresholdsScope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tcm1", 1), ("tcm2", 2), ("tcm3", 3), ("tcm4", 4), ("tcm5", 5), ("tcm6", 6), ("section", 7), ("path", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmThresholdsScope.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsScope.setDescription('This object specifies the network segment to which these thresholds apply.')
nbsOtnpmThresholdsEs = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsEs.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsEs.setDescription('Persistent. The number of Errored Seconds (ES) which, if met or exceeded at the end of the nbsOtnpmThresholdsInterval period, should trigger the nbsOtnpmTrapsEs event notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmThresholdsEsrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsEsrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsEsrSig.setDescription('Persistent. The significand of the Errored Seconds Ratio (ESR) threshold, which is calculated by: nbsOtnpmThresholdsEsrSig x 10^nbsOtnpmThresholdsEsrExp An ESR that meets or exceeds this threshold at the end of the nbsOtnpmThresholdsInterval period triggers the nbsOtnpmTrapsEsr event notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmThresholdsEsrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsEsrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsEsrExp.setDescription('Persistent. The exponent of the Errored Seconds Ratio (ESR) threshold; see nbsOtnpmThresholdsEsrSig. Not supported value: 0x80000000')
nbsOtnpmThresholdsSes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsSes.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsSes.setDescription('Persistent. The number of Severely Errored Seconds (SES) which, if met or exceeded at the end of the nbsOtnpmThresholdsInterval period, should trigger the nbsOtnpmTrapsSes event notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmThresholdsSesrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsSesrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsSesrSig.setDescription('Persistent. The significand of the Severely Errored Seconds Ratio (SESR) threshold, which is calculated by: nbsOtnpmThresholdsSesrSig x 10^nbsOtnpmThresholdsSesrExp A SESR that meets or exceeds this threshold at the end of the nbsOtnpmThresholdsInterval period triggers the nbsOtnpmTrapsSesr notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmThresholdsSesrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsSesrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsSesrExp.setDescription('Persistent. The exponent of the Severely Errored Seconds Ratio (SESR) threshold; see nbsOtnpmThresholdsSesrSig. Not supported value: 0x80000000')
nbsOtnpmThresholdsBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 16), WritableU64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsBbe.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsBbe.setDescription('Persistent. The number of Background Block Errors (BBE) which, if met or exceeded at the end of the nbsOtnpmThresholdsInterval period, should trigger the nbsOtnpmTrapsBbe event notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmThresholdsBberSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsBberSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsBberSig.setDescription('Persistent. The significand of the Background Block Errors Ratio (BBER) threshold, which is calculated by: nbsOtnpmThresholdsBberSig x 10^nbsOtnpmThresholdsBberExp A BBER that meets or exceeds this threshold at the end of the nbsOtnpmThresholdsInterval period triggers the nbsOtnpmTrapsBber notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmThresholdsBberExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsBberExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsBberExp.setDescription('Persistent. The exponent of the Background Block Errors Ratio (BBER) threshold; see nbsOtnpmThresholdsBberSig. Not supported value: 0x80000000')
nbsOtnpmThresholdsUas = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsUas.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsUas.setDescription('Persistent. The number of Unavailable Seconds (UAS) which, if met or exceeded at the end of the nbsOtnpmThresholdsInterval period, should trigger the nbsOtnpmTrapsUas event notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmThresholdsFc = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 1, 1, 1, 20), WritableU64()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnpmThresholdsFc.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmThresholdsFc.setDescription('Persistent. The number of Failure Counts (FC) which, if met or exceeded at the end of the nbsOtnpmThresholdsInterval period, should trigger the nbsOtnpmTrapsFc event notification. The reserved value 0 disables notifications for this event.')
nbsOtnpmCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 629, 222, 2, 3), )
if mibBuilder.loadTexts: nbsOtnpmCurrentTable.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentTable.setDescription('All OTN Performance Monitoring statistics for the nbsOtnpmCurrentInterval now underway.')
nbsOtnpmCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1), ).setIndexNames((0, "NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), (0, "NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), (0, "NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"))
if mibBuilder.loadTexts: nbsOtnpmCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentEntry.setDescription('OTN Performance Monitoring statistics for a specific port/ interface and nbsOtnpmCurrentInterval.')
nbsOtnpmCurrentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentIfIndex.setDescription('The mib2 ifIndex')
nbsOtnpmCurrentInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarterHour", 1), ("twentyfourHour", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentInterval.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentInterval.setDescription('Indicates the sampling period of statistic')
nbsOtnpmCurrentScope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tcm1", 1), ("tcm2", 2), ("tcm3", 3), ("tcm4", 4), ("tcm5", 5), ("tcm6", 6), ("section", 7), ("path", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentScope.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentScope.setDescription("Indicates statistic's network segment")
nbsOtnpmCurrentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentDate.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentDate.setDescription('The date (UTC) this interval began, represented by an eight digit decimal number: yyyymmdd')
nbsOtnpmCurrentTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentTime.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentTime.setDescription('The time (UTC) this interval began, represented by a six digit decimal number: hhmmss')
nbsOtnpmCurrentEs = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentEs.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentEs.setDescription('The number of Errored Seconds (ES) in this interval so far.')
nbsOtnpmCurrentEsrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentEsrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentEsrSig.setDescription('The significand of the current Errored Seconds Ratio (ESR), which is calculated by: nbsOtnpmCurrentEsrSig x 10^nbsOtnpmCurrentEsrExp')
nbsOtnpmCurrentEsrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentEsrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentEsrExp.setDescription('The exponent of the current Errored Seconds Ratio (ESR); see nbsOtnpmCurrentEsrSig. Not supported value: 0x80000000')
nbsOtnpmCurrentSes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentSes.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentSes.setDescription('The number of Severely Errored Seconds (SES) in this interval so far')
nbsOtnpmCurrentSesrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentSesrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentSesrSig.setDescription('The significand of the current Severely Errored Seconds Ratio (SESR), which is calculated by: nbsOtnpmCurrentSesrSig x 10^nbsOtnpmCurrentSesrExp')
nbsOtnpmCurrentSesrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentSesrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentSesrExp.setDescription('The exponent of the current Severely Errored Seconds Ratio (SESR); see nbsOtnpmCurrentSesrSig. Not supported value: 0x80000000')
nbsOtnpmCurrentBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentBbe.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentBbe.setDescription('The number of Background Block Errors (BBE) so far, i.e. the count of Bit Interleave Parity (BIP8) errors.')
nbsOtnpmCurrentBberSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentBberSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentBberSig.setDescription('The significand of the current Background Block Errors (BBER), which is calculated by: nbsOtnpmCurrentBberSig x 10^nbsOtnpmCurrentBberExp')
nbsOtnpmCurrentBberExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentBberExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentBberExp.setDescription('The exponent of the current Background Block Errors Ratio (BBER); see nbsOtnpmCurrentBberSig. Not supported value: 0x80000000')
nbsOtnpmCurrentUas = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentUas.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentUas.setDescription('The number of Unavailable Seconds (UAS) so far')
nbsOtnpmCurrentFc = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentFc.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentFc.setDescription('The number of Failure Counts (FC) so far, i.e. the count of Backward Error Indication (BEI) errors.')
nbsOtnpmCurrentAlarmsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 100), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentAlarmsSupported.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentAlarmsSupported.setDescription('The mask of OTN alarms that are supported.')
nbsOtnpmCurrentAlarmsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 101), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentAlarmsRaised.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentAlarmsRaised.setDescription('The mask of OTN alarms that are currently raised.')
nbsOtnpmCurrentAlarmsChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 2, 3, 1, 102), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmCurrentAlarmsChanged.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmCurrentAlarmsChanged.setDescription('The mask of OTN alarms that have changed so far, i.e. alarms that have transitioned at least once from clear to raised or from raised to clear.')
nbsOtnpmHistoricTable = MibTable((1, 3, 6, 1, 4, 1, 629, 222, 3, 3), )
if mibBuilder.loadTexts: nbsOtnpmHistoricTable.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricTable.setDescription('All OTN Performance Monitoring statistics for past nbsOtnpmHistoricInterval periods.')
nbsOtnpmHistoricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1), ).setIndexNames((0, "NBS-OTNPM-MIB", "nbsOtnpmHistoricIfIndex"), (0, "NBS-OTNPM-MIB", "nbsOtnpmHistoricInterval"), (0, "NBS-OTNPM-MIB", "nbsOtnpmHistoricScope"), (0, "NBS-OTNPM-MIB", "nbsOtnpmHistoricSample"))
if mibBuilder.loadTexts: nbsOtnpmHistoricEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricEntry.setDescription('OTN Performance Monitoring statistics for a specific port/ interface and nbsOtnpmHistoricInterval.')
nbsOtnpmHistoricIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricIfIndex.setDescription('The mib2 ifIndex')
nbsOtnpmHistoricInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quarterHour", 1), ("twentyfourHour", 2))))
if mibBuilder.loadTexts: nbsOtnpmHistoricInterval.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricInterval.setDescription('Indicates the sampling period of statistic')
nbsOtnpmHistoricScope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tcm1", 1), ("tcm2", 2), ("tcm3", 3), ("tcm4", 4), ("tcm5", 5), ("tcm6", 6), ("section", 7), ("path", 8))))
if mibBuilder.loadTexts: nbsOtnpmHistoricScope.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricScope.setDescription("Indicates statistic's network segment")
nbsOtnpmHistoricSample = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 4), Integer32())
if mibBuilder.loadTexts: nbsOtnpmHistoricSample.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricSample.setDescription('Indicates the sample number of this statistic. The most recent sample is numbered 1, the next previous 2, and so on until the oldest sample.')
nbsOtnpmHistoricDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricDate.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricDate.setDescription('The date (UTC) the interval began, represented by an eight digit decimal number: yyyymmdd')
nbsOtnpmHistoricTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricTime.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricTime.setDescription('The time (UTC) the interval began, represented by a six digit decimal number: hhmmss')
nbsOtnpmHistoricEs = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricEs.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricEs.setDescription('The final count of Errored Seconds (ES) for this interval')
nbsOtnpmHistoricEsrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricEsrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricEsrSig.setDescription('The significand of the final Errored Seconds Ratio (ESR) for this interval, which is calculated by: nbsOtnpmHistoricEsrSig x 10^nbsOtnpmHistoricEsrExp')
nbsOtnpmHistoricEsrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricEsrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricEsrExp.setDescription('The exponent of the final Errored Seconds Ratio (ESR) for this interval; see nbsOtnpmHistoricEsrSig. Not supported value: 0x80000000')
nbsOtnpmHistoricSes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricSes.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricSes.setDescription('The final count of Severely Errored Seconds (SES) in this interval')
nbsOtnpmHistoricSesrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricSesrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricSesrSig.setDescription('The significand of the final Severely Errored Seconds Ratio (SESR) for this interval, which is calculated by: nbsOtnpmHistoricSesrSig x 10^nbsOtnpmHistoricSesrExp')
nbsOtnpmHistoricSesrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricSesrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricSesrExp.setDescription('The exponent of the final Severely Errored Seconds Ratio (SESR) for this interval; see nbsOtnpmHistoricSesrSig. Not supported value: 0x80000000')
nbsOtnpmHistoricBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricBbe.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricBbe.setDescription('The final count of Background Block Errors (BBE), i.e. the count of Bit Interleave Parity (BIP8) errors.')
nbsOtnpmHistoricBberSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricBberSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricBberSig.setDescription('The significand of the final Background Block Errors Ratio (BBER) for this interval, which is calculated by: nbsOtnpmHistoricBberSig x 10^nbsOtnpmHistoricBberExp)')
nbsOtnpmHistoricBberExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricBberExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricBberExp.setDescription('The exponent of the final Background Block Errors Ratio (BBER) for this interval; see nbsOtnpmHistoricBberSig. Not supported value: 0x80000000')
nbsOtnpmHistoricUas = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricUas.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricUas.setDescription('The final count of Unavailable Seconds (UAS)')
nbsOtnpmHistoricFc = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 20), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricFc.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricFc.setDescription('The final number of Failure Counts (FC), i.e. the count of Backward Error Indication (BEI) errors.')
nbsOtnpmHistoricAlarmsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 100), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricAlarmsSupported.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricAlarmsSupported.setDescription('The mask of OTN alarms that were supported.')
nbsOtnpmHistoricAlarmsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 101), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricAlarmsRaised.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricAlarmsRaised.setDescription('The mask of OTN alarms that were raised at the end of this interval.')
nbsOtnpmHistoricAlarmsChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 3, 3, 1, 102), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmHistoricAlarmsChanged.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmHistoricAlarmsChanged.setDescription('The mask of OTN alarms that changed in this interval, i.e. alarms that transitioned at least once from clear to raised or from raised to clear.')
nbsOtnpmRunningTable = MibTable((1, 3, 6, 1, 4, 1, 629, 222, 4, 3), )
if mibBuilder.loadTexts: nbsOtnpmRunningTable.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningTable.setDescription('All OTN Performance Monitoring statistics since (boot-up) protocol configuration.')
nbsOtnpmRunningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1), ).setIndexNames((0, "NBS-OTNPM-MIB", "nbsOtnpmRunningIfIndex"), (0, "NBS-OTNPM-MIB", "nbsOtnpmRunningScope"))
if mibBuilder.loadTexts: nbsOtnpmRunningEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningEntry.setDescription('OTN Performance Monitoring statistics for a specific port/ interface.')
nbsOtnpmRunningIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningIfIndex.setDescription('The mib2 ifIndex')
nbsOtnpmRunningScope = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tcm1", 1), ("tcm2", 2), ("tcm3", 3), ("tcm4", 4), ("tcm5", 5), ("tcm6", 6), ("section", 7), ("path", 8))))
if mibBuilder.loadTexts: nbsOtnpmRunningScope.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningScope.setDescription("Indicates statistic's network segment")
nbsOtnpmRunningDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningDate.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningDate.setDescription('The date (UTC) of protocol configuration, represented by an eight digit decimal number: yyyymmdd')
nbsOtnpmRunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningTime.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningTime.setDescription('The time (UTC) of protocol configuration, represented by a six digit decimal number: hhmmss')
nbsOtnpmRunningEs = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningEs.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningEs.setDescription('The number of Errored Seconds (ES) since protocol configuration.')
nbsOtnpmRunningEsrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningEsrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningEsrSig.setDescription('The significand of the running Errored Seconds Ratio (ESR), which is calculated by: nbsOtnpmRunningEsrSig x 10^nbsOtnpmRunningEsrExp')
nbsOtnpmRunningEsrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningEsrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningEsrExp.setDescription('The exponent of the running Errored Seconds Ratio (ESR); see nbsOtnpmRunningEsrSig. Not supported value: 0x80000000')
nbsOtnpmRunningSes = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningSes.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningSes.setDescription('The number of Severely Errored Seconds (SES) since protocol configuration')
nbsOtnpmRunningSesrSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningSesrSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningSesrSig.setDescription('The significand of the running Severely Errored Seconds Ratio (SESR), which is calculated by: nbsOtnpmRunningSesrSig x 10^nbsOtnpmRunningSesrExp')
nbsOtnpmRunningSesrExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningSesrExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningSesrExp.setDescription('The exponent of the running Severely Errored Seconds Ratio (SESR); see nbsOtnpmRunningSesrSig. Not supported value: 0x80000000')
nbsOtnpmRunningBbe = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningBbe.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningBbe.setDescription('The number of Background Block Errors (BBE) since protocol configuration, i.e. the count of Bit Interleave Parity (BIP8) errors.')
nbsOtnpmRunningBberSig = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningBberSig.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningBberSig.setDescription('The significand of the running Background Block Errors (BBER), which is calculated by: nbsOtnpmRunningBberSig x 10^nbsOtnpmRunningBberExp')
nbsOtnpmRunningBberExp = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningBberExp.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningBberExp.setDescription('The exponent of the running Background Block Errors Ratio (BBER); see nbsOtnpmRunningBberSig. Not supported value: 0x80000000')
nbsOtnpmRunningUas = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningUas.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningUas.setDescription('The number of Unavailable Seconds (UAS) since protocol configuration')
nbsOtnpmRunningFc = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningFc.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningFc.setDescription('The number of Failure Counts (FC) since protocol configuration, i.e. the count of Backward Error Indication (BEI) errors.')
nbsOtnpmRunningAlarmsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 100), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningAlarmsSupported.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningAlarmsSupported.setDescription('The mask of OTN alarms that are supported.')
nbsOtnpmRunningAlarmsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 101), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningAlarmsRaised.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningAlarmsRaised.setDescription('The mask of OTN alarms that are currently raised.')
nbsOtnpmRunningAlarmsChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 4, 3, 1, 102), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnpmRunningAlarmsChanged.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmRunningAlarmsChanged.setDescription('The mask of OTN alarms that changed since protocol configuration, i.e. alarms that transitioned at least once from clear to raised or from raised to clear.')
nbsOtnAlarmsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 222, 80, 3), )
if mibBuilder.loadTexts: nbsOtnAlarmsTable.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsTable.setDescription('OTN alarm monitoring scoreboard, showing for each possible alarm if it is currently raised and if it has changed since monitoring began (or was cleared). The latter indicator may be cleared at anytime without affecting normal performance monitoring activity.')
nbsOtnAlarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1), ).setIndexNames((0, "NBS-OTNPM-MIB", "nbsOtnAlarmsIfIndex"))
if mibBuilder.loadTexts: nbsOtnAlarmsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsEntry.setDescription('OTN alarm monitoring scoreboard for a specific port/interface.')
nbsOtnAlarmsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsIfIndex.setDescription('The mib2 ifIndex')
nbsOtnAlarmsDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsDate.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsDate.setDescription('The date (UTC) OTN alarm monitoring began (was cleared), represented by an eight digit decimal number: yyyymmdd')
nbsOtnAlarmsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsTime.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsTime.setDescription('The time (UTC) OTN alarm monitoring began (was cleared), represented by a six digit decimal number: hhmmss')
nbsOtnAlarmsSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsSpan.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsSpan.setDescription('The amount of time (deci-sec) since nbsOtnAlarmsDate and nbsOtnAlarmsTime.')
nbsOtnAlarmsState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("monitoring", 2), ("clearing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnAlarmsState.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsState.setDescription("This object reads 'notSupported' if the port is not configured with an OTN protocol. Otherwise it reads 'monitoring' to indicate that supported OTN alarms are actively reported in nbsOtnAlarmsRaised and nbsOtnAlarmsChanged. Writing 'clearing' to this object clears nbsOtnAlarmsChanged.")
nbsOtnAlarmsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 100), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsSupported.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsSupported.setDescription('The mask of OTN alarms that are supported on this port.')
nbsOtnAlarmsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 101), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsRaised.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsRaised.setDescription('The mask of OTN alarms that are currently raised.')
nbsOtnAlarmsChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 102), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsChanged.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsChanged.setDescription('The mask of OTN alarms that have changed since nbsOtnAlarmsDate and AlarmsTime, i.e. alarms that have transitioned at least once from clear to raised or from raised to clear.')
nbsOtnAlarmsRcvdFTFL = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 80, 3, 1, 110), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnAlarmsRcvdFTFL.setStatus('current')
if mibBuilder.loadTexts: nbsOtnAlarmsRcvdFTFL.setDescription('The current Fault Type Fault Location information received on the given port. The length will be zero when there is a no fault code in both the forward and backward fields. Otherwise, the full 256 bytes will be provided; see ITU-T G.709, section 15.8.2.5.')
nbsOtnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 222, 90, 3), )
if mibBuilder.loadTexts: nbsOtnStatsTable.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsTable.setDescription('OTN alarms and statistics monitoring managed per user discretion. This monitoring may be started, stopped, and cleared as desired without affecting the normal performance monitoring activity.')
nbsOtnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1), ).setIndexNames((0, "NBS-OTNPM-MIB", "nbsOtnStatsIfIndex"))
if mibBuilder.loadTexts: nbsOtnStatsEntry.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsEntry.setDescription('User-controlled OTN monitoring for a specific port/interface.')
nbsOtnStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsIfIndex.setDescription('The mib2 ifIndex')
nbsOtnStatsDate = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsDate.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsDate.setDescription('The date (UTC) OTN statistics collection began, represented by an eight digit decimal number: yyyymmdd')
nbsOtnStatsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsTime.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsTime.setDescription('The time (UTC) OTN statistics collection began, represented by a six digit decimal number: hhmmss')
nbsOtnStatsSpan = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsSpan.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsSpan.setDescription('The amount of time (deci-sec) statistics collection has been underway since nbsOtnStatsDate and nbsOtnStatsTime, or if stopped, the duration of the prior collection.')
nbsOtnStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("counting", 2), ("clearing", 3), ("stopped", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsOtnStatsState.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsState.setDescription("Writing 'stopped' to this object stops (pauses) OTN statistics collection. Re-configuring this port to a non-OTN protocol sets this object to 'stopped' automatically. Writing 'counting' to this object starts (resumes) OTN statistics collection if this port is configured with an OTN protocol. Writing 'clearing' to this object clears all statistical counters.")
nbsOtnStatsErrCntSectBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntSectBEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntSectBEI.setDescription('The count of section Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntPathBEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntPathBEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntPathBEI.setDescription('The count of path Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm1BEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm1BEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm1BEI.setDescription('The count of TCM1 Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm2BEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm2BEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm2BEI.setDescription('The count of TCM2 Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm3BEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm3BEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm3BEI.setDescription('The count of TCM3 Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm4BEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm4BEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm4BEI.setDescription('The count of TCM4 Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm5BEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm5BEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm5BEI.setDescription('The count of TCM5 Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm6BEI = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm6BEI.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm6BEI.setDescription('The count of TCM6 Backward Error Indication errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntSectBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntSectBIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntSectBIP8.setDescription('The count of section Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntPathBIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntPathBIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntPathBIP8.setDescription('The count of path Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm1BIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm1BIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm1BIP8.setDescription('The count of TCM1 Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm2BIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm2BIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm2BIP8.setDescription('The count of TCM2 Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm3BIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm3BIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm3BIP8.setDescription('The count of TCM3 Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm4BIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm4BIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm4BIP8.setDescription('The count of TCM4 Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm5BIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm5BIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm5BIP8.setDescription('The count of TCM5 Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsErrCntTcm6BIP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm6BIP8.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsErrCntTcm6BIP8.setDescription('The count of TCM6 Bit Interleave Parity errors detected since OTN statistics collection began.')
nbsOtnStatsAlarmsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 100), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsAlarmsSupported.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsAlarmsSupported.setDescription('The mask of OTN alarms that are supported.')
nbsOtnStatsAlarmsRaised = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 101), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsAlarmsRaised.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsAlarmsRaised.setDescription('The mask of OTN alarms that are currently raised.')
nbsOtnStatsAlarmsChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 222, 90, 3, 1, 102), NbsOtnAlarmMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsOtnStatsAlarmsChanged.setStatus('current')
if mibBuilder.loadTexts: nbsOtnStatsAlarmsChanged.setDescription('The mask of OTN alarms that have changed since OTN statistics collection began, i.e. alarms that have transitioned at least once from clear to raised or from raised to clear.')
nbsOtnpmTrapsEs = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 10)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentEs"))
if mibBuilder.loadTexts: nbsOtnpmTrapsEs.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsEs.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsEs is non-zero and less than or equal to nbsOtnpmCurrentEs.')
nbsOtnpmTrapsEsr = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 11)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentEsrSig"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentEsrExp"))
if mibBuilder.loadTexts: nbsOtnpmTrapsEsr.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsEsr.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsEsr is non-zero and less than or equal to nbsOtnpmCurrentEsr.')
nbsOtnpmTrapsSes = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 12)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentSes"))
if mibBuilder.loadTexts: nbsOtnpmTrapsSes.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsSes.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsSes is non-zero and less than or equal to nbsOtnpmCurrentSes.')
nbsOtnpmTrapsSesr = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 13)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentSesrSig"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentSesrExp"))
if mibBuilder.loadTexts: nbsOtnpmTrapsSesr.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsSesr.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsSesr is non-zero and less than or equal to nbsOtnpmCurrentSesr.')
nbsOtnpmTrapsBbe = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 14)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentBbe"))
if mibBuilder.loadTexts: nbsOtnpmTrapsBbe.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsBbe.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsBbe is non-zero and less than or equal to nbsOtnpmCurrentBbe.')
nbsOtnpmTrapsBber = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 15)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentBberSig"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentBberExp"))
if mibBuilder.loadTexts: nbsOtnpmTrapsBber.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsBber.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsBber is non-zero and less than or equal to nbsOtnpmCurrentBber.')
nbsOtnpmTrapsUas = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 16)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentUas"))
if mibBuilder.loadTexts: nbsOtnpmTrapsUas.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsUas.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsUas is non-zero and less than or equal to nbsOtnpmCurrentUas.')
nbsOtnpmTrapsFc = NotificationType((1, 3, 6, 1, 4, 1, 629, 222, 100, 0, 17)).setObjects(("NBS-OTNPM-MIB", "nbsOtnpmCurrentIfIndex"), ("IF-MIB", "ifAlias"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentInterval"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentScope"), ("NBS-OTNPM-MIB", "nbsOtnpmCurrentFc"))
if mibBuilder.loadTexts: nbsOtnpmTrapsFc.setStatus('current')
if mibBuilder.loadTexts: nbsOtnpmTrapsFc.setDescription('Sent at the conclusion of an nbsOtnpmThresholdsInterval if nbsOtnpmThresholdsFc is non-zero and less than or equal to nbsOtnpmCurrentFc.')
mibBuilder.exportSymbols("NBS-OTNPM-MIB", nbsOtnpmRunningIfIndex=nbsOtnpmRunningIfIndex, nbsOtnpmHistoricGrp=nbsOtnpmHistoricGrp, nbsOtnpmCurrentSes=nbsOtnpmCurrentSes, nbsOtnpmMib=nbsOtnpmMib, nbsOtnpmRunningTable=nbsOtnpmRunningTable, nbsOtnAlarmsRcvdFTFL=nbsOtnAlarmsRcvdFTFL, nbsOtnpmRunningGrp=nbsOtnpmRunningGrp, nbsOtnpmCurrentFc=nbsOtnpmCurrentFc, nbsOtnStatsErrCntTcm6BEI=nbsOtnStatsErrCntTcm6BEI, nbsOtnpmCurrentTime=nbsOtnpmCurrentTime, nbsOtnpmThresholdsTable=nbsOtnpmThresholdsTable, nbsOtnpmRunningBbe=nbsOtnpmRunningBbe, nbsOtnStatsErrCntTcm1BEI=nbsOtnStatsErrCntTcm1BEI, nbsOtnAlarmsTable=nbsOtnAlarmsTable, nbsOtnpmThresholdsSes=nbsOtnpmThresholdsSes, nbsOtnAlarmsTime=nbsOtnAlarmsTime, nbsOtnpmThresholdsEs=nbsOtnpmThresholdsEs, nbsOtnAlarmsDate=nbsOtnAlarmsDate, nbsOtnpmCurrentGrp=nbsOtnpmCurrentGrp, nbsOtnStatsGrp=nbsOtnStatsGrp, nbsOtnpmCurrentEs=nbsOtnpmCurrentEs, nbsOtnpmHistoricEsrSig=nbsOtnpmHistoricEsrSig, nbsOtnAlarmsState=nbsOtnAlarmsState, nbsOtnStatsErrCntTcm4BEI=nbsOtnStatsErrCntTcm4BEI, nbsOtnpmThresholdsIfIndex=nbsOtnpmThresholdsIfIndex, nbsOtnpmHistoricSes=nbsOtnpmHistoricSes, nbsOtnpmCurrentIfIndex=nbsOtnpmCurrentIfIndex, nbsOtnpmCurrentBbe=nbsOtnpmCurrentBbe, nbsOtnpmCurrentEntry=nbsOtnpmCurrentEntry, nbsOtnpmRunningEsrExp=nbsOtnpmRunningEsrExp, nbsOtnAlarmsSpan=nbsOtnAlarmsSpan, nbsOtnStatsErrCntTcm2BEI=nbsOtnStatsErrCntTcm2BEI, nbsOtnpmCurrentBberExp=nbsOtnpmCurrentBberExp, nbsOtnpmCurrentInterval=nbsOtnpmCurrentInterval, nbsOtnStatsAlarmsRaised=nbsOtnStatsAlarmsRaised, nbsOtnpmRunningDate=nbsOtnpmRunningDate, nbsOtnpmCurrentSesrSig=nbsOtnpmCurrentSesrSig, nbsOtnpmRunningAlarmsSupported=nbsOtnpmRunningAlarmsSupported, nbsOtnpmRunningUas=nbsOtnpmRunningUas, nbsOtnAlarmsRaised=nbsOtnAlarmsRaised, nbsOtnStatsErrCntTcm2BIP8=nbsOtnStatsErrCntTcm2BIP8, nbsOtnpmThresholdsSesrSig=nbsOtnpmThresholdsSesrSig, nbsOtnpmHistoricBbe=nbsOtnpmHistoricBbe, nbsOtnpmHistoricUas=nbsOtnpmHistoricUas, nbsOtnpmCurrentDate=nbsOtnpmCurrentDate, nbsOtnpmHistoricIfIndex=nbsOtnpmHistoricIfIndex, nbsOtnpmRunningFc=nbsOtnpmRunningFc, nbsOtnpmEventsGrp=nbsOtnpmEventsGrp, nbsOtnStatsErrCntSectBEI=nbsOtnStatsErrCntSectBEI, nbsOtnStatsErrCntTcm6BIP8=nbsOtnStatsErrCntTcm6BIP8, nbsOtnpmHistoricSesrExp=nbsOtnpmHistoricSesrExp, nbsOtnpmThresholdsInterval=nbsOtnpmThresholdsInterval, nbsOtnpmThresholdsFc=nbsOtnpmThresholdsFc, nbsOtnpmRunningAlarmsChanged=nbsOtnpmRunningAlarmsChanged, nbsOtnpmRunningEntry=nbsOtnpmRunningEntry, nbsOtnStatsAlarmsSupported=nbsOtnStatsAlarmsSupported, nbsOtnpmThresholdsBbe=nbsOtnpmThresholdsBbe, NbsOtnAlarmId=NbsOtnAlarmId, nbsOtnpmTrapsEs=nbsOtnpmTrapsEs, nbsOtnpmHistoricBberExp=nbsOtnpmHistoricBberExp, nbsOtnpmCurrentEsrExp=nbsOtnpmCurrentEsrExp, nbsOtnpmTrapsEsr=nbsOtnpmTrapsEsr, nbsOtnStatsEntry=nbsOtnStatsEntry, nbsOtnpmHistoricScope=nbsOtnpmHistoricScope, nbsOtnStatsErrCntTcm5BEI=nbsOtnStatsErrCntTcm5BEI, nbsOtnpmTrapsSesr=nbsOtnpmTrapsSesr, nbsOtnpmCurrentBberSig=nbsOtnpmCurrentBberSig, nbsOtnpmThresholdsGrp=nbsOtnpmThresholdsGrp, nbsOtnpmThresholdsSesrExp=nbsOtnpmThresholdsSesrExp, nbsOtnAlarmsEntry=nbsOtnAlarmsEntry, nbsOtnpmCurrentAlarmsSupported=nbsOtnpmCurrentAlarmsSupported, nbsOtnpmRunningTime=nbsOtnpmRunningTime, nbsOtnStatsState=nbsOtnStatsState, nbsOtnpmRunningEs=nbsOtnpmRunningEs, nbsOtnStatsErrCntTcm3BEI=nbsOtnStatsErrCntTcm3BEI, nbsOtnStatsErrCntSectBIP8=nbsOtnStatsErrCntSectBIP8, nbsOtnAlarmsIfIndex=nbsOtnAlarmsIfIndex, nbsOtnpmRunningBberSig=nbsOtnpmRunningBberSig, nbsOtnpmHistoricSample=nbsOtnpmHistoricSample, nbsOtnpmThresholdsEsrSig=nbsOtnpmThresholdsEsrSig, nbsOtnStatsErrCntTcm5BIP8=nbsOtnStatsErrCntTcm5BIP8, nbsOtnStatsErrCntTcm1BIP8=nbsOtnStatsErrCntTcm1BIP8, nbsOtnpmRunningBberExp=nbsOtnpmRunningBberExp, nbsOtnpmCurrentScope=nbsOtnpmCurrentScope, nbsOtnpmRunningEsrSig=nbsOtnpmRunningEsrSig, nbsOtnpmTrapsBbe=nbsOtnpmTrapsBbe, nbsOtnpmHistoricEsrExp=nbsOtnpmHistoricEsrExp, nbsOtnpmRunningSesrExp=nbsOtnpmRunningSesrExp, nbsOtnpmHistoricDate=nbsOtnpmHistoricDate, nbsOtnpmCurrentEsrSig=nbsOtnpmCurrentEsrSig, nbsOtnStatsErrCntTcm3BIP8=nbsOtnStatsErrCntTcm3BIP8, nbsOtnpmThresholdsBberSig=nbsOtnpmThresholdsBberSig, nbsOtnStatsTime=nbsOtnStatsTime, nbsOtnpmHistoricBberSig=nbsOtnpmHistoricBberSig, NbsOtnAlarmMask=NbsOtnAlarmMask, nbsOtnpmHistoricTable=nbsOtnpmHistoricTable, nbsOtnpmRunningSes=nbsOtnpmRunningSes, nbsOtnpmHistoricAlarmsRaised=nbsOtnpmHistoricAlarmsRaised, nbsOtnpmRunningSesrSig=nbsOtnpmRunningSesrSig, nbsOtnStatsIfIndex=nbsOtnStatsIfIndex, nbsOtnStatsSpan=nbsOtnStatsSpan, nbsOtnpmCurrentAlarmsRaised=nbsOtnpmCurrentAlarmsRaised, nbsOtnpmHistoricEs=nbsOtnpmHistoricEs, nbsOtnpmThresholdsEntry=nbsOtnpmThresholdsEntry, nbsOtnpmRunningAlarmsRaised=nbsOtnpmRunningAlarmsRaised, nbsOtnpmCurrentUas=nbsOtnpmCurrentUas, nbsOtnpmThresholdsScope=nbsOtnpmThresholdsScope, nbsOtnpmTrapsSes=nbsOtnpmTrapsSes, nbsOtnpmThresholdsEsrExp=nbsOtnpmThresholdsEsrExp, nbsOtnpmCurrentTable=nbsOtnpmCurrentTable, nbsOtnpmHistoricTime=nbsOtnpmHistoricTime, nbsOtnAlarmsGrp=nbsOtnAlarmsGrp, nbsOtnpmTrapsUas=nbsOtnpmTrapsUas, nbsOtnpmHistoricAlarmsSupported=nbsOtnpmHistoricAlarmsSupported, nbsOtnpmTraps=nbsOtnpmTraps, nbsOtnpmCurrentSesrExp=nbsOtnpmCurrentSesrExp, nbsOtnpmTrapsFc=nbsOtnpmTrapsFc, PYSNMP_MODULE_ID=nbsOtnpmMib, nbsOtnpmHistoricFc=nbsOtnpmHistoricFc, nbsOtnAlarmsSupported=nbsOtnAlarmsSupported, nbsOtnAlarmsChanged=nbsOtnAlarmsChanged, nbsOtnStatsTable=nbsOtnStatsTable, nbsOtnStatsErrCntPathBEI=nbsOtnStatsErrCntPathBEI, nbsOtnpmTrapsBber=nbsOtnpmTrapsBber, nbsOtnpmHistoricAlarmsChanged=nbsOtnpmHistoricAlarmsChanged, nbsOtnpmCurrentAlarmsChanged=nbsOtnpmCurrentAlarmsChanged, nbsOtnStatsErrCntPathBIP8=nbsOtnStatsErrCntPathBIP8, nbsOtnpmHistoricSesrSig=nbsOtnpmHistoricSesrSig, nbsOtnpmRunningScope=nbsOtnpmRunningScope, nbsOtnpmThresholdsBberExp=nbsOtnpmThresholdsBberExp, nbsOtnStatsDate=nbsOtnStatsDate, nbsOtnStatsErrCntTcm4BIP8=nbsOtnStatsErrCntTcm4BIP8, nbsOtnpmHistoricEntry=nbsOtnpmHistoricEntry, nbsOtnpmHistoricInterval=nbsOtnpmHistoricInterval, nbsOtnStatsAlarmsChanged=nbsOtnStatsAlarmsChanged, nbsOtnpmThresholdsUas=nbsOtnpmThresholdsUas)
