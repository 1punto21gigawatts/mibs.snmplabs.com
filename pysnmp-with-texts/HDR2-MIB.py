#
# PySNMP MIB module HDR2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HDR2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:24:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32, iso, IpAddress, ObjectIdentity, Counter64, Integer32, MibIdentifier, Gauge32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32", "iso", "IpAddress", "ObjectIdentity", "Counter64", "Integer32", "MibIdentifier", "Gauge32", "Bits", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 4))
hdr2 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 4, 48))
hdr2Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 4, 48, 1))
hdr2CfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1), )
if mibBuilder.loadTexts: hdr2CfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgTable.setDescription('A table containing the configuration parameters for the Hiper E1/R2 Card.')
hdr2CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1), ).setIndexNames((0, "HDR2-MIB", "hdr2CfgIndex"))
if mibBuilder.loadTexts: hdr2CfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgEntry.setDescription('Configuration parameters for the E1/R2 module. ')
hdr2CfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdr2CfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgIndex.setDescription('The index which uniquely identifies the Hiper E1/R2 CARD to which this entry is applicable. ')
hdr2CfgRegSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("r2MFC", 1), ("r2MFSC", 2))).clone('r2MFC')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgRegSigType.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgRegSigType.setDescription('This object Defines the type of Register Signaling used for Bit Oriented Signaling.')
hdr2CfgAnumIden = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgAnumIden.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgAnumIden.setDescription('This parameter enables or disables the collection of calling party ( A party or ANI) phone numbers when used with R2MFC signaling type.')
hdr2CfgForcedRel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgForcedRel.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgForcedRel.setDescription('In E1/ R2 ,Forced Release Line signal will be sent only in case of this parameter is enabled. This signal is optional.')
hdr2CfgLastBDigTout = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgLastBDigTout.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgLastBDigTout.setDescription('This parameter decides, after how many milliseconds of silence during the B digit reception, the B party number is assumed as completed. ')
hdr2CfgAddrComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("a3", 1), ("a5", 2), ("a6", 3))).clone('a3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgAddrComplete.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgAddrComplete.setDescription('On reception of this signal it is assumed that the required number of B party digits are received. It can hold the values ranging from A1 to A15. It depends on country specification. ')
hdr2CfgEndBparty = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgEndBparty.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgEndBparty.setDescription('This indicates whether I15 is will be received as an indication for End of B party number or not. If enabled, at the end of B party number , this I15 signal is received informing that B party number is completed. ')
hdr2CfgAlawMulaw = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aLAW", 1), ("mULAW", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgAlawMulaw.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgAlawMulaw.setDescription('This object is configuration to apply A Law(E1) or MuLaw(T1) Companding. ')
hdr2CfgLineSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("r2DIG", 1), ("p7DIG", 2), ("r2EandM", 3))).clone('r2DIG')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgLineSigType.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgLineSigType.setDescription('This object defines the type of Line Signaling for Bit Oriented Signaling. ')
hdr2CfgProjID = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("iTU-T", 1), ("argentina", 2), ("australia", 3), ("brazil", 4), ("chile", 5), ("china", 6), ("colombia", 7), ("india", 8), ("korea", 9), ("malaysia", 10), ("mexico", 11), ("newZealand", 12), ("philippines", 13), ("sweden", 14), ("venezuela", 15))).clone('iTU-T')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgProjID.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgProjID.setDescription('Depending on this parameter, country dependent or project dependent parameters are updated. Each and every parameter has a set of variables to be initialized. ')
hdr2CfgSeizeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSeizeAck.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSeizeAck.setDescription('It defines whether seize acknowledge signal is used or not for Bit Oriented Signaling. ')
hdr2CfgAnumBnum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 36)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgAnumBnum.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgAnumBnum.setDescription('During Bit oriented Register Signaling , after number of B party ( called party or DNIS) digits have been received, the A party (calling or ANI) digits are requested , provided A party (ANI) request is enabled. Otherwise this parameter is ignored. ')
hdr2CfgSubBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b2", 1), ("b3", 2))).clone('b3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSubBusy.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSubBusy.setDescription('This object is used in case of subscirber busy. ')
hdr2CfgSndCallingPtyCatgy = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a5", 1), ("a6", 2))).clone('a5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSndCallingPtyCatgy.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSndCallingPtyCatgy.setDescription("This register Signal requests the calling ( A PARTY's ) category. ")
hdr2CfgLineDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("both", 3))).clone('incoming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgLineDirection.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgLineDirection.setDescription('This object sets the direction of the channels on the span line. ')
hdr2CfgPersistentOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgPersistentOverride.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgPersistentOverride.setDescription('This object allows the recieved line signal persistence (debounce time). ')
hdr2CfgWrongNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b5", 1), ("b7", 2))).clone('b5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgWrongNumber.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgWrongNumber.setDescription('This object is the backward register signal used to indicate that an invalid number has been dialed. ')
hdr2CfgIncomingCpc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("analog", 1), ("digital", 2), ("maintanace", 3), ("test", 4))).clone('analog')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgIncomingCpc.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgIncomingCpc.setDescription('This object determines the default calling party category to be assumed when none is supplied for an incoming call. ')
hdr2CfgRegSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgRegSigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgRegSigStatus.setDescription('This object determines whether or not register signalling is used for incoming and outgoing calls for R2.')
hdr2CfgUnusedAbcd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgUnusedAbcd.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgUnusedAbcd.setDescription('This object determines the bit pattern transmitted for whichever of the ABCD bits are not used for the selected line signalling scheme. This means CD for R2 Digital and P7, and BCD for R2 E&M.')
hdr2CfgBlkToBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgBlkToBlk.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgBlkToBlk.setDescription('This object determines whether or not a blocking signals received in the idle state is automatically responded to with a transmitted block signals.')
hdr2CfgDelayLos = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(6000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgDelayLos.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgDelayLos.setDescription('This object determines the required duration of the LOS state before active calls are dropped and the signalling is reinitialised. Restoration of signal during this period allows calls to continue.')
hdr2CfgInGlare = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgInGlare.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgInGlare.setDescription('This object determines whether the incoming call is accepted and the outgoing call is dropped in a glare condition, or both calls are dropped as currently implemented.')
hdr2CfgClrCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgClrCall.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgClrCall.setDescription('This object determines whether an active call is cleared when an unexpected line signal is received, or the line signal is ignored as currently implemented.')
hdr2CfgANumQry = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgANumQry.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgANumQry.setDescription('This object determines whether or not an extra MFC cycle is used before to the A-number to indicate whether an A-number is available,using III-1 for yes and III-0 for no.')
hdr2CfgANumNAv = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgANumNAv.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgANumNAv.setDescription('THis object interpret I-12 as A-number not available.')
hdr2CfgANumReq = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("c1", 1), ("c5", 2), ("c6", 3), ("c9", 4))).clone('c5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgANumReq.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgANumReq.setDescription('this object backward register signal used to request transmission of the next A-number digit Frequently this is the same as the signal used to request transmission of the call category and A-number .')
hdr2CfgClrFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgClrFwd.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgClrFwd.setDescription('This object repeatd size/clear-forward sequence is sent to startup to try to provoke a response from attached equipment.')
hdr2CfgRelGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgRelGuard.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgRelGuard.setDescription('This object is duration for which Release Guard signal is sent.')
hdr2CfgPIClrBck = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgPIClrBck.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgPIClrBck.setDescription('This object determines whether or not a repeated release/Seize-ack sequence is sent while attempting to clear anincoming call.')
hdr2CfgDelayAns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgDelayAns.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgDelayAns.setDescription('this object determines the delay between the end of addressing and transmission of the answer signal.')
hdr2CfgBNumLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 36)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgBNumLen.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgBNumLen.setDescription("this object determines the number of B-number digits to accept beore sending the 'address complete'signal, provided the 'end of B_number'signal is not received first.")
hdr2CfgActBTout = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b-number", 1), ("error", 2))).clone('b-number')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgActBTout.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgActBTout.setDescription('this object determines action to be taken on last B-digit timeout.')
hdr2CfgInSubFree = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b1", 1), ("b5", 2), ("b6", 3))).clone('b6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgInSubFree.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgInSubFree.setDescription('this object backward register signal used to indicate acceptance of an incoming call.')
hdr2CfgBNumNFnd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("acceptAllCalls", 1), ("rejectAllCalls", 2), ("acceptAllCallsAsDigital", 3), ("acceptAllCallsAnalog", 4))).clone('acceptAllCalls')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgBNumNFnd.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgBNumNFnd.setDescription('this object determines the action on B-Number not found in teh DNIS handling table.')
hdr2CfgSndBNumN = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a9", 1), ("a10", 2))).clone('a9')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSndBNumN.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSndBNumN.setDescription('this object backward signal requesting retransmission of curent B-number digit for outgoing calls.')
hdr2CfgSndBNumN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("a2", 1), ("a8", 2), ("a9", 3), ("a10", 4))).clone('a2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSndBNumN1.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSndBNumN1.setDescription('this object backward signal requesting transmission of B-number digit N-1 for outgoing calls.')
hdr2CfgSndBNumN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a7", 1), ("a9", 2))).clone('a7')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSndBNumN2.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSndBNumN2.setDescription('this object backward signal requesting transimission of B-number digit N-2 for outgoing calls.')
hdr2CfgSndBNumN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a8", 1), ("a10", 2))).clone('a8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSndBNumN3.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSndBNumN3.setDescription('this object backward signal requesting transimission of B-number digit N-3 for outgoing calls.')
hdr2CfgSndFBNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("a2", 1), ("a9", 2), ("a10", 3))).clone('a10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgSndFBNum.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgSndFBNum.setDescription("this object determines whether or not the I-15 'end of B-number' signal is used for outgoing calls.")
hdr2CfgDumANum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 36)).clone('1234')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgDumANum.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgDumANum.setDescription('this object default A-number for outgoing calls in case none is supplied during call initiation.')
hdr2CfgEndANum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iii-12", 1), ("iii-15", 2))).clone('iii-15')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgEndANum.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgEndANum.setDescription('This object forward register signal used to indicate that no more a_number digits are avaible.default=iii-15.')
hdr2CfgOutCatAnalog = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ii-1", 1), ("ii-2", 2), ("ii-3", 3), ("ii-4", 4), ("ii-5", 5), ("ii-6", 6), ("ii-7", 7), ("ii-8", 8), ("ii-9", 9), ("ii-10", 10), ("ii-11", 11), ("ii-12", 12), ("ii-13", 13), ("ii-14", 14), ("ii-15", 15))).clone('ii-1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgOutCatAnalog.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgOutCatAnalog.setDescription('This object forward signals used to indicate the call category for outgoing calls.')
hdr2CfgOutCatDigital = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ii-1", 1), ("ii-2", 2), ("ii-3", 3), ("ii-4", 4), ("ii-5", 5), ("ii-6", 6), ("ii-7", 7), ("ii-8", 8), ("ii-9", 9), ("ii-10", 10), ("ii-11", 11), ("ii-12", 12), ("ii-13", 13), ("ii-14", 14), ("ii-15", 15))).clone('ii-6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgOutCatDigital.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgOutCatDigital.setDescription('')
hdr2CfgOutCatTest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ii-1", 1), ("ii-2", 2), ("ii-3", 3), ("ii-4", 4), ("ii-5", 5), ("ii-6", 6), ("ii-7", 7), ("ii-8", 8), ("ii-9", 9), ("ii-10", 10), ("ii-11", 11), ("ii-12", 12), ("ii-13", 13), ("ii-14", 14), ("ii-15", 15))).clone('ii-13')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgOutCatTest.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgOutCatTest.setDescription('')
hdr2CfgOutCatMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("ii-1", 1), ("ii-2", 2), ("ii-3", 3), ("ii-4", 4), ("ii-5", 5), ("ii-6", 6), ("ii-7", 7), ("ii-8", 8), ("ii-9", 9), ("ii-10", 10), ("ii-11", 11), ("ii-12", 12), ("ii-13", 13), ("ii-14", 14), ("ii-15", 15))).clone('ii-3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2CfgOutCatMaintenance.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2CfgOutCatMaintenance.setDescription('')
hdr2InCatMap = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 4, 48, 2))
hdr2InCatMapTable = MibTable((1, 3, 6, 1, 4, 1, 429, 4, 48, 2, 1), )
if mibBuilder.loadTexts: hdr2InCatMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2InCatMapTable.setDescription('A table containing in cat map configurations for the Hiper E1/R2 Module.')
hdr2InCatMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 4, 48, 2, 1, 1), ).setIndexNames((0, "HDR2-MIB", "hdr2InCatMapIndex"), (0, "HDR2-MIB", "hdr2InCatMapSigNum"))
if mibBuilder.loadTexts: hdr2InCatMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2InCatMapEntry.setDescription('Configuration parameters for the E1/R2 module.')
hdr2InCatMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdr2InCatMapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2InCatMapIndex.setDescription('The index which uniquely identifies the Hiper E1/R2 Module to which this entry is applicable. ')
hdr2InCatMapSigNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdr2InCatMapSigNum.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2InCatMapSigNum.setDescription('This object is the index for one of 15 possible forward call category signals for imcoming calls.')
hdr2InCatMapCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("analog", 1), ("digital", 2), ("test", 3), ("maintenance", 4))).clone('analog')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2InCatMapCallType.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2InCatMapCallType.setDescription('This object determines the meaning of forward call category for incoming calls.')
hdr2Pte = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 4, 48, 3))
hdr2PteTable = MibTable((1, 3, 6, 1, 4, 1, 429, 4, 48, 3, 1), )
if mibBuilder.loadTexts: hdr2PteTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2PteTable.setDescription('A table containing the Positron Trap Enable configurations for the Hiper E1/R2 Module.')
hdr2PteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 4, 48, 3, 1, 1), ).setIndexNames((0, "HDR2-MIB", "hdr2PteIndex"))
if mibBuilder.loadTexts: hdr2PteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2PteEntry.setDescription('Trap Enable Configuration parameters for the E1/R2 module. ')
hdr2PteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdr2PteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2PteIndex.setDescription('The index which uniquely identifies the Hiper E1/R2 Module to which this entry is applicable. ')
hdr2PteMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disableAll", 1), ("enableTrapOnly", 2), ("enableSysLogOnly", 3), ("enableAll", 4))).clone('enableAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2PteMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2PteMultiFrame.setDescription('Enable the generation of an SNMP trap upon detection of a Multi-Frame Alignment condition on the specified DS1. ')
hdr2PteMultiFrameClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disableAll", 1), ("enableTrapOnly", 2), ("enableSysLogOnly", 3), ("enableAll", 4))).clone('enableAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2PteMultiFrameClr.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2PteMultiFrameClr.setDescription('Enable the generation of an SNMP trap upon detection of clearing a Multi-Frame Alignment condition on the specified DS1. ')
hdr2PteRemMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disableAll", 1), ("enableTrapOnly", 2), ("enableSysLogOnly", 3), ("enableAll", 4))).clone('enableAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2PteRemMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2PteRemMultiFrame.setDescription('Enable the generation of an SNMP trap upon detection of a Remote Multi-Frame Alignment condition on the specified DS1. ')
hdr2PteRemMultiFrameClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disableAll", 1), ("enableTrapOnly", 2), ("enableSysLogOnly", 3), ("enableAll", 4))).clone('enableAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2PteRemMultiFrameClr.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2PteRemMultiFrameClr.setDescription('Enable the generation of an SNMP trap upon detection of clearing a Remote Multi-Frame Alignment condition on the specified DS1. ')
hdr2Te = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 4, 48, 4))
hdr2TeTable = MibTable((1, 3, 6, 1, 4, 1, 429, 4, 48, 4, 1), )
if mibBuilder.loadTexts: hdr2TeTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2TeTable.setDescription('A table containing the Trap Enable configurations for the Hiper E1/R2 Module.')
hdr2TeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 4, 48, 4, 1, 1), ).setIndexNames((0, "HDR2-MIB", "hdr2TeIndex"))
if mibBuilder.loadTexts: hdr2TeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2TeEntry.setDescription('Trap Enable Configuration parameters for the E1/R2 module. ')
hdr2TeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdr2TeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2TeIndex.setDescription('The index which uniquely identifies the Hiper E1/R2 CARD to which this entry is applicable. ')
hdr2TeMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2TeMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2TeMultiFrame.setDescription('Enable the generation of an SNMP trap upon detection of a Multi-Frame Alignment condition on the specified DS1. ')
hdr2TeMultiFrameClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2TeMultiFrameClr.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2TeMultiFrameClr.setDescription('Enable the generation of an SNMP trap upon detection of clearing a Multi-Frame Alignment condition on the specified DS1. ')
hdr2TeRemMultiFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2TeRemMultiFrame.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2TeRemMultiFrame.setDescription('Enable the generation of an SNMP trap upon detection of a Remote Multi-Frame Alignment condition on the specified DS1. ')
hdr2TeRemMultiFrameClr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 4, 48, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdr2TeRemMultiFrameClr.setStatus('mandatory')
if mibBuilder.loadTexts: hdr2TeRemMultiFrameClr.setDescription('Enable the generation of an SNMP trap upon detection of clearing a Remote Multi-Frame Alignment condition on the specified DS1. ')
mibBuilder.exportSymbols("HDR2-MIB", hdr2CfgOutCatAnalog=hdr2CfgOutCatAnalog, hdr2CfgForcedRel=hdr2CfgForcedRel, hdr2CfgANumNAv=hdr2CfgANumNAv, hdr2CfgPersistentOverride=hdr2CfgPersistentOverride, hdr2CfgRegSigStatus=hdr2CfgRegSigStatus, common=common, hdr2CfgClrCall=hdr2CfgClrCall, hdr2CfgEndANum=hdr2CfgEndANum, hdr2Pte=hdr2Pte, hdr2CfgLineDirection=hdr2CfgLineDirection, hdr2CfgInGlare=hdr2CfgInGlare, hdr2CfgSndBNumN=hdr2CfgSndBNumN, hdr2CfgSubBusy=hdr2CfgSubBusy, hdr2CfgSndBNumN1=hdr2CfgSndBNumN1, hdr2CfgSndBNumN2=hdr2CfgSndBNumN2, hdr2TeIndex=hdr2TeIndex, hdr2CfgLastBDigTout=hdr2CfgLastBDigTout, hdr2CfgSeizeAck=hdr2CfgSeizeAck, hdr2CfgSndCallingPtyCatgy=hdr2CfgSndCallingPtyCatgy, hdr2CfgEndBparty=hdr2CfgEndBparty, hdr2CfgWrongNumber=hdr2CfgWrongNumber, hdr2CfgSndFBNum=hdr2CfgSndFBNum, hdr2CfgActBTout=hdr2CfgActBTout, hdr2InCatMapSigNum=hdr2InCatMapSigNum, hdr2TeMultiFrameClr=hdr2TeMultiFrameClr, hdr2CfgDumANum=hdr2CfgDumANum, hdr2CfgOutCatMaintenance=hdr2CfgOutCatMaintenance, hdr2=hdr2, hdr2CfgPIClrBck=hdr2CfgPIClrBck, hdr2CfgANumReq=hdr2CfgANumReq, hdr2CfgAnumIden=hdr2CfgAnumIden, hdr2CfgANumQry=hdr2CfgANumQry, hdr2Cfg=hdr2Cfg, hdr2PteIndex=hdr2PteIndex, hdr2PteRemMultiFrameClr=hdr2PteRemMultiFrameClr, hdr2TeMultiFrame=hdr2TeMultiFrame, hdr2PteRemMultiFrame=hdr2PteRemMultiFrame, usr=usr, hdr2CfgDelayLos=hdr2CfgDelayLos, hdr2CfgOutCatDigital=hdr2CfgOutCatDigital, hdr2CfgIndex=hdr2CfgIndex, hdr2CfgOutCatTest=hdr2CfgOutCatTest, hdr2InCatMapTable=hdr2InCatMapTable, hdr2InCatMapIndex=hdr2InCatMapIndex, hdr2Te=hdr2Te, hdr2InCatMap=hdr2InCatMap, hdr2InCatMapEntry=hdr2InCatMapEntry, hdr2TeRemMultiFrameClr=hdr2TeRemMultiFrameClr, hdr2CfgBNumNFnd=hdr2CfgBNumNFnd, hdr2CfgIncomingCpc=hdr2CfgIncomingCpc, hdr2CfgDelayAns=hdr2CfgDelayAns, hdr2TeEntry=hdr2TeEntry, hdr2CfgTable=hdr2CfgTable, hdr2PteEntry=hdr2PteEntry, hdr2TeRemMultiFrame=hdr2TeRemMultiFrame, hdr2CfgClrFwd=hdr2CfgClrFwd, hdr2PteMultiFrameClr=hdr2PteMultiFrameClr, hdr2CfgUnusedAbcd=hdr2CfgUnusedAbcd, hdr2CfgBlkToBlk=hdr2CfgBlkToBlk, hdr2CfgEntry=hdr2CfgEntry, hdr2InCatMapCallType=hdr2InCatMapCallType, hdr2CfgRelGuard=hdr2CfgRelGuard, hdr2CfgInSubFree=hdr2CfgInSubFree, hdr2CfgProjID=hdr2CfgProjID, hdr2CfgRegSigType=hdr2CfgRegSigType, hdr2CfgSndBNumN3=hdr2CfgSndBNumN3, hdr2CfgLineSigType=hdr2CfgLineSigType, hdr2CfgAddrComplete=hdr2CfgAddrComplete, hdr2PteMultiFrame=hdr2PteMultiFrame, hdr2CfgAnumBnum=hdr2CfgAnumBnum, hdr2CfgAlawMulaw=hdr2CfgAlawMulaw, hdr2CfgBNumLen=hdr2CfgBNumLen, hdr2PteTable=hdr2PteTable, hdr2TeTable=hdr2TeTable)
