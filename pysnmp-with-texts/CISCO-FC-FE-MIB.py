#
# PySNMP MIB module CISCO-FC-FE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FC-FE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
cieIfOperStatusCause, = mibBuilder.importSymbols("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcPortTxTypes, FcIfServiceStateType, FcClassOfServices, FcPortModuleTypes, FcNameId, FcAddressId, FcIfSpeed, FcPortTypes = mibBuilder.importSymbols("CISCO-ST-TC", "FcPortTxTypes", "FcIfServiceStateType", "FcClassOfServices", "FcPortModuleTypes", "FcNameId", "FcAddressId", "FcIfSpeed", "FcPortTypes")
MicroSeconds, = mibBuilder.importSymbols("CISCO-TC", "MicroSeconds")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
FcList, = mibBuilder.importSymbols("CISCO-ZS-MIB", "FcList")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Bits, ObjectIdentity, Integer32, IpAddress, Unsigned32, NotificationType, Counter64, Gauge32, iso, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "Counter64", "Gauge32", "iso", "TimeTicks", "ModuleIdentity")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoFcFeMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 289))
ciscoFcFeMIB.setRevisions(('2014-02-06 00:00', '2013-04-09 00:00', '2012-11-19 00:00', '2011-06-15 00:00', '2010-08-18 09:00', '2010-03-04 09:00', '2009-05-13 09:00', '2009-02-05 09:00', '2008-12-03 09:00', '2007-08-02 00:00', '2007-01-18 00:00', '2007-01-09 00:00', '2006-11-26 00:00', '2006-05-10 00:00', '2006-04-13 00:00', '2006-02-20 00:00', '2005-02-15 00:00', '2004-10-19 00:00', '2004-03-30 00:00', '2003-11-14 00:00', '2003-11-06 00:00', '2003-10-17 00:00', '2003-09-22 00:00', '2003-08-18 00:00', '2003-06-12 00:00', '2003-05-14 00:00', '2003-04-18 00:00', '2003-03-25 00:00', '2002-11-11 00:00', '2002-11-01 00:00', '2002-10-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFcFeMIB.setRevisionsDescriptions(('-Added the following objects to FcIfEntry: fcIfAdminFECState, fcIfOperFECState -Added the following objects to FcIfErrorEntry: fcIfFECCorrectedBlks, fcIfFECUncorrectedBlks -Added the following new groups: fcIfGroupRev4 fcIfErrorGroupRev3 -Deprecated cffFcFeMIBComplianceRev13 compliance statement. -Added cffFcFeMIBComplianceRev14 compliance statement.', '-Added the following objects to FcIfErrorEntry: fcIfBBCreditTransistionToZero, fcHCIfBBCreditTransistionFromZero, fcHCIfBBCreditTransistionToZero.', '-Added the following enums for FcIfOperStatusReason: ficonNoPortSwapLogicalPort, ficonInvalidPortNum, remotePortInL2vpnDown, suspendedDueToNoLacpPdus, fcotValidationFailedAtDriver, unsupportedTransceiverMd5DigestNotSame, unsupportedTransceiver, adminStateConfigChange, vlanAllowedList, vlanAllowedListOverride, vlanAllowedListAdd, vlanAllowedRemove, vlanCfgStateChange, vlanCfgDelete, pppPeerNotResponding, pppAuthFailed, xcvrAuthFailed, badFramesRcvdFromLink. Also changed the description for fcIfTxWtAvgBBCreditTransitionToZero and fcIfBBCreditTransistionFromZero.', '-Added the following enums for FcIfOperStatusReason: xcvrInitializing, xcvrAbsent, xcvrInvalid, vfcBindingInvalid, vlanNotFcoeEnabled, pvlanNativeVlanErr, ethL2VlanDown, ethIntfInvalidBinding, pmonFailure, l3NotReady, speedMismatch, flowControlMismatch, vdcMode, suspendedDueToMinLinks, enmPinFailLinkDown, inactiveM1PortFpathActiveVlan, parentPortDown, moduleRemoved, corePortMct, nonCorePortMct, ficonInorderNotActive, invalidEncapsulation, modemLineDeasserted, ipSecHndshkInProgress, sfpEthCompliantErr, cellularModemUnattached, outOfGlblRxBuffers, sfpFcCompliantErr, ethIntfNotLicensed, domainIdsInvalid, fabricNameInvalid', '-Added the following objects to FcIfErrorEntry: fcIfTimeOutDiscards, fcIfOutDiscards, fcIfCreditLoss, fcIfTxWtAvgBBCreditTransitionToZero. -Added the following object to FcIfGigEEntry: fcIfGigConnectorType. -Added the following new groups: fcIfGigEinfoExtGroupRev1 fcIfErrorGroupRev2 -Deprecated cffFcFeMIBComplianceRev11 compliance statement. -Added cffFcFeMIBComplianceRev12 compliance statement.', '-Added the following enums for FcIfOperStatusReason: ipQosMgrPolicyAppFailure, pauseRateLimitErrDisabled, lstGrpUplinkDown, stickyDnLinkFailure, routerMacFailure, dcxMultipleMsapIds, dcxHundredPdusRcvdNoAck, enmSatIncompatibleUplink, enmLoopDetected, nonStickyExternallyDisabled, subGroupIdNotAssigned, vemUnlicensed, profileNotFound, nonExistentVlan, vlanInvalidType, vlanDown, vpcPeerUpgrade, ipQosDcbxpCompatFailure, nonCiscoHbaVfTag, domainIdConfigMismatch and sfpSpeedMismatch.', '-Added the following enums for FcIfOperStatusReason: portDisabled, tunnelModeNotConfigured, tunnelSrcNotConfigured, tunnelDstNotConfigured, tunnelUnableToResolveSrcIP tunnelUnableToResolveDstIP, tunnelVrfDown, sifAdminDown, phyIntfDown, ifSifLimitExceeded, sifHoldDown, noFcoe, dcxCompatMismatch, isolateBundleLimitExceeded, sifNotBound, errDisabledLacpMiscfg, satFabricIfDown, invalidSatFabricIf, noRemoteChassis, vicEnableNotReceived, vicDisableReceived, vlanVsanMappingNotEnabled, stpNotFwdingInFcoeMappedVlan, moduleOffline, udldAggModeLinkFailure, stpInconsVpcPeerDisabled, setPortStateFailed, suspendedByVpc, vpcCfgInProgress, vpcPeerLinkDown, vpcNoRspFromPeer, protoPortSuspend, tunnelSrcDown, cdpInfoUnavailable, fexSfpInvalid, errDisabledIpConflict, fcotClkRateMismatch, portGuardTrustSecViolation, sdpTimeout, satIncompatTopo, waitForFlogi, satNotConfigured, npivNotEnabledInUpstream, vsanMismatchWithUpstreamSwPort, portGuardBitErrRate, portGuardSigLoss, portGuardSyncLoss, portGuardLinkReset and portGuardCreditLoss. -Added the following new enums to fcIfFlapCtrlConfigReason: bitErrorRate, signalLoss, syncLoss, linkReset and creditLoss.', '-Added new object fcIfModuleXcvrFrequencyConfig to fcIfModuleTable. -Deprecated fcIfToggleCtrlConfigTable -Added fcIfFlapCtrlConfigTable -Deprecated fcIfModuleGroup -Added the following new groups: fcIfFlapCtrlConfigGroup fcIfModuleGroupRev1 -Deprecated cffFcFeMIBComplianceRev10 compliance statement. -Added cffFcFeMIBComplianceRev11 compliance statement.', '-Added the following enums for FcIfOperStatusReason: sfpReadError, stickyDownOnLinkFailure, tooManyLinkFlapsErr, unidirectionalUDLD, txRxLoopUDLD, neighborMismatchUDLD, authzPending, hotStdbyInBundle, incompleteConfig, incompleteTunnelCfg, hwProgrammingFailed, tunnelDstUnreachable, suspendByMtu, sfpInvalid, sfpAbsent, portCapabilitiesUnknown, channelErrDisabled, vrfMismatch, vrfForwardReferencing, dupTunnelConfigDetected, primaryVLANDown, vrfUnusable, errDisableHandShkFailure, errDisabledBPDUGuard, dot1xSecViolationErrDisabled, emptyEchoUDLD and vfTaggingCapErr. -Added fcIfToggleCtrlConfigTable. Deprecated cffFcFeMIBComplianceRev8 compliance statement. Deprecated cffFcFeMIBComplianceRev9 compliance statement. Added cffFcFeMIBComplianceRev10 compliance statement.', '-Added the following enums for FcIfOperStatusReason: unavailableNPVUpstreamPort unavailableNPVPrefUpstreamPort.', '-Added new object fcIfModuleBandwidthFairnessOper to fcIfModuleTable.', '-Added new object fcIfModuleBandwidthFairnessConfig to fcIfModuleTable. -Added the following enums for FcIfOperStatusReason: fcidAllocationFailed, externallyDisabled.', '-Added fcIfModuleTable. -Added following objects to fcIfCapTable: fcIfIsServiceStateCapable fcIfIsPortRateModeCapable fcIfIsAdminRxBbCreditExtendedCapable -Added following objects to fcIfTable: fcIfPortType -Added the following enums for FcIfOperStatusReason: fcRedirectIsolation, portActLicenseNotAvailable, sdmIsolation. -Added the following OBJECT-GROUPS: fcIfCapableGroup fcIfInfoPortGroup fcIfModuleGroup -Added cffFcFeMIBComplianceRev9 MODULE-COMPLIANCE.', 'Added new object fcIfAdminBbScnMode to fcIfTable. fcIfBbScnGroup OBJECT-GROUP added. cffFcFeMIBComplianceRev8 MODULE-COMPLIANCE added.', 'Added the following enums to FcIfOperStatusReason: localRcf, twoSwitchesWithSameWWN, invalidOtherSidePrincEFPReqRecd, domainOther.', "- Added the following objects to fcIfTable: fcIfServiceState, fcIfFcTunnelIfIndex and fcIfAdminRxBbCreditExtended. - Updated the description of the following objects: fcIfAdminRxBbCreditModeISL, fcIfAdminRxBbCreditModeFx and fcIfOperRxBbCredit. - Changed the enums for object fcIfPortRateMode from 'frm' to 'dedicated' and 'osm' to 'shared'. - Added the following objects to FcIfGigEEntry: fcIfGigEAutoNegotiate, fcIfGigEBeaconMode. - Added the following enums to FcIfOperStatusReason: portBringupIsolation, domainNotAllowedIsolated, virtualIvrDomainOverlapIsolation, outOfService, portAuthFailed, bundleStandby, portConnectorTypeErr, errorDisabledReInitLimitReached, ficonDupPortNum.", 'In FcIfOperStatusReason, corrected typo. isolatedBundel changed to isolatedBundle.', "Added new table 'fcIfGigETable' to provide the port channel information for the Gigabit Ethernet (GigE) interfaces in the fibre channel switch. Added two new notifications 'fcotInserted' and 'fcotRemoved'. Added new enums to FcIfOperStatusReason.", 'Added new object fcIfPortInitStatus to fcIfTable. Added new enums to FcIfOperStatusReason. Added fcIfRNIDInfoTable.', 'Added new enums to FcIfOperStatusReason.', 'Added Compliance statement for fcIfAdminRxBbCreditModeISL and fcIfAdminRxBbCreditModeFx.', 'Updated Compliance statement.', "Added the following objects for Loop Initialization Primitive Sequence (LIP) counters to 'fcIfErrorTable': fcIfLipF8In, fcIfLipF8Out, fcIfNonLipF8In and fcIfNonLipF8Out. Added new enums to FcIfOperStatusReason. Modified conformance information.", 'Added fcIfStatTable. Modified conformance information.', 'Added FcPerfBuffer TC. Added the following to fcIfTable: fcIfPortRateMode,fcIfAdminRxPerfBuffer, fcIfOperRxPerfBuffer,fcIfBbScn. Added the following to fcIfCapTable: fcIfCapBbScnCapable,fcIfCapBbScnMax, fcIfCapOsmFrmCapable. Added fcIfCapOsmTable,fcIfCapFrmTable. Added more reason codes in FcIfOperStatusReason. Replaced AUGMENTS clause with INDEX clause for the following tables: fcIfCapTable,fcIfErrorTable. Modified conformance information. Deprecated following objects in fcIfCapTable: fcIfCapRxBbCreditMax, fcIfCapRxBbCreditMin, fcIfCapISLRxBbCreditMax,fcIfCapISLRxBbCreditMin, fcIfCapRxBbCreditWriteable,fcIfCapRxBbCreditDefault, fcIfCapISLRxBbCreditDefault.', 'Modified description of fcIfAllowedVsanList2k, fcIfAllowedVsanList4k, fcIfAdminSpeed, fcIfAdminRxBbCredit.', 'updated the textual convention, FcIfOperStatusReason. Added enumerations: firstPortUpAsEport,firstPortNotUp, peerFCIPPortClosedConnection,peerFCIPPortResetConnection, fcipPortMaxReTx,fcipPortKeepAliveTimerExpire, fcipPortPersistTimerExpire,fcipPortSrcLinkDown, fcipPortSrcAdminDown,fcipPortAdminCfgChange, fcipSrcPortRemoved,fcipSrcModuleNotOnline,invalidConfig, portBindFailure,portFabricBindFailure, noCommonVsanIsolation.', 'Added: fcIfActiveVsanUpList2k, fcIfActiveVsanUpList4k. Modified conformance information.', 'Modified fcTrunkIfUpNotify description.', 'Modifed fcIfTable, fcIfCapTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFcFeMIB.setLastUpdated('201402060000Z')
if mibBuilder.loadTexts: ciscoFcFeMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoFcFeMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFcFeMIB.setDescription('This is the Cisco fibre element management MIB module. It covers: - Cisco extension to the interface MIB ( IF-MIB ) - Contains all the groups from FIBRE-CHANNEL-FE-MIB relevant to Cisco fabric. - Other features specific to Cisco fabric. This MIB supports all the port types defined by the textual convention FcPortTypes. In addition it also supports Nx_port, where Nx_port can be either N_port or NL_port. The FC standards define Interconnect_Ports to be E_ports or B_Ports. This MIB supports Port Channel ports. Port Channel port is a single logical port, which contains multiple physical ports as its members. Presently only E_ports can be a member of Port Channel port. In addition it provides GigE and port channel information for all the Gigabit Ethernet (GigE) ports in the fabric. Terminology ELP : Exchange Link parameters EPP : Exchange Peer Parameters.')
ciscoFcFeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1))
cffFcFeMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 2))
cffFcFeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1))
cffFcFeStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2))
cffFcFeNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3))
cffFcFeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0))
class FcphVersion(TextualConvention, Integer32):
    description = 'Represents the version of FC-PH supported by an NxPort or FC-Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FcBbCredit(TextualConvention, Integer32):
    description = 'Represents the buffer-to-buffer credit of an NxPort or FC-Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32767)

class FcRxDataFieldSize(TextualConvention, Integer32):
    description = 'Represents the receive data field size of an NxPort or FC-Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(128, 2112)

class FcBbCreditModel(TextualConvention, Integer32):
    description = 'Represents the Buffer-to-Buffer Credit model of an FC-Port. regular(1) - Credit model is regular alternate(2) - Credit model is alternate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regular", 1), ("alternate", 2))

class FcIfOperStatusReason(TextualConvention, Integer32):
    description = "The cause of current operational state of the port. GLOSSARY: BB - Buffer-to-Buffer. BB_Credit - Buffer-to-Buffer credit, a link level flow control mechanism. B_Port - A Fibre Channel, Bridging port. BPDU - Bridge Protocol Data Unit. CDP - Cisco Discovery Protocol. Class F - A connectionless service with notification on non-delivery between E_Ports, used for control, coordination, and configuration of the Fabric. Class N - Refers to any class of service (different types of frame delivery services) other than Class F. E_D_TOV - Error Detect Timeout Value. ENM - Egress Non-Multicast. ELP - Exchange Link Parameter. E-mode - A fibre channel port providing E_Port functionality. E_Port - A Fabric Expansion Port. EPP - Exchange Peer Parameters. ESC - Exchange Switch Capabilities. Fabric - The set of physically connected fibre channel switches. FEX - Fabric EXtender. FC-FS - Fibre Channel Framing and Signaling. FCIP - Fibre Channel over IP protocol. FCID - Fibre Channel Domain ID. FCOE - Fibre Channel Over Ethernet. FCOT - Fibre channel optical transmitter. FC-PH - The Fibre Channel Physical and Signaling standard. FCSP - Fibre Channel Security Protocol. Fibre Channel - The primary protocol for building SANs. FICON - An I\\O protocol used between IBM (and compatible) mainframes and storage. FLOGI - Fabric Login, used by a node port to establish a session with the fabric. GBIC - Gigabit Interface Converter; a removable transceiver module permitting Fibre Channel and Gigabit Ethernet physical-layer transport. Interconnect_Ports - Switch Ports that assume either the E_Port or B_Port mode are generally referred to as Interconnect_Ports. LACP - Link Access Control Protocol. LIP - Loop Initialization Primitive sequence. LR - Link Reset, the FC-PH defined primitive sequence used to initiate a link reset. MTU - Maximun transmission unit. NOS - Not Operational Sequence, the FC-PH defined primitive sequence to indicate that the transmitting port has detected a link failure (or) offline condition. VIC - Virtual Interface Card. VPC - Virtual Port Channel. NPIV - N Port Identifier Virtualization. NPV - NPort Virtualizer. Nx_Port - A Fiber Channel Node Port. OLS - Offline Sequence, the FC-PH defined primitive sequence to indicate that the port is entering into offline state. OHMS - Online Health Management System. PMON - Port Monitor. R_A_TOV - Resource Allocation Timeout Value. RCF - Reconfigure Fabric. Rxbbcredit - Receive BB credit value configured for a FC interface. SAN - Storage Area Network; a network linking computing devices to disk or tape arrays and other devices over Fibre Channel. SIF - Service Information Field. SDM - Security Device Manager. SDP - Secure Device Provisioning. SFP - Small Formfactor Pluggable. TE_Port - Trunking E_Port. TOV - Time out value. UDLD - Uni Directional Link Detection. VDC - Virtual Device Context. VEM - Virtual Ethernet Module. VFC - Virtual Fibre Channel. VRF - VPN Routing and Forwarding. VSAN - Virtual Storage Area Network. WWN - World Wide Name. xE_Port - A Fiber channel port that can assume either E_Port or TE_Port mode. The enumerated values which provides the cause of the current operational state of the interface are: 'other(1)' - reasons other than defined here. 'none(2)' - no failure 'hwFailure(3)' - hardware failure. 'loopbackDiagFailure(4)' - loopback diagnostics failure. 'errorDisabled(5)' - the port is not operational due to some error conditions that require administrative attention. 'swFailure(6)' - software failure. 'linkFailure(7)' - physical link failure. 'offline(8)' - physical link is in offline state as defined in the FC-FS standards. 'nonParticipating(9)' - during loop initialization, the port is not allowed to participate in loop operations. 'initializing(10)' - port is being initialized. 'vsanInactive(11)'- port VSAN is inactive. The port becomes operational again when the port VSAN is active. 'adminDown(12)' - 'ifAdminStatus' is down(2). 'channelAdminDown(13)' - this port is a member of a port channel and that port channel's ifAdminStatus is 'down(2)'. 'channelOperSuspended(14)' - this port is a member of a port channel and its operational parameters are incompatible with the port channel parameters. 'channelConfigurationInProgress(15)' - this port is undergoing a port channel configuration. 'rcfInProgress(16)' - an isolated xE_port is transmiting an reconfigure fabric, requesting a disruptive reconfiguration in an attempt to build a single, non-isolated fabric. Only the Interconnect_Ports can become isolated. 'elpFailureIsolation(17)' - during a port initialization the prospective Interconnect_Ports find incompatible link parameters. 'escFailureIsolation(18) - during a port initialization the prospective Interconnect_Ports are unable to proceed with initialization as a result of Exchange Switch Capabilities (ESC). 'domainOverlapIsolation(19)' - there is a overlap in domains while attempting to connect two existing fabrics. 'domainAddrAssignFailureIsolation(20)' - the elected principal switch is not capable of performing domain address manager functions so no Nx_port traffic can be forwarded across switches, hence all Interconnect_Ports in the switch are isolated. 'domainOtherSideEportIsolation(21)' - the peer e-port is isolated. 'domainInvalidRCFReceived(22)' - Invalid rcf received. 'domainManagerDisabled(23) - domain manager is disabled. 'zoneMergeFailureIsolation(24)' - the two Interconnect_Ports cannot merge zoning configuration after having exchanged merging request for zoning. 'vsanMismatchIsolation(25)' - this vsan is not configured on both sides of a trunk port. 'parentDown(26)' - the physical port to which this interface is bound is down. 'srcPortNotBound(27)'- no source port is specified for this interface. 'interfaceRemoved(28)' - interface is being removed. 'fcotNotPresent(29)' - fcot(GBIC) not present. 'fcotVendorNotSupported(30)' - fcot(GBIC) vendor is not supported. 'incompatibleAdminMode(31)' - port admin mode is incompatible with port capabilities. 'incompatibleAdminSpeed(32)' - port speed is incompatible with port capabilities. 'suspendedByMode(33)' - port that belongs to a port channel is suspended due to incompatible operational mode. 'suspendedBySpeed(34)' - port that belongs to a port channel is suspended due to incompatible operational speed. 'suspendedByWWN(35)' - port that belongs to a port channel is suspended due to incompatible remote switch WWN. 'domainMaxReTxFailure(36)' - domain manager failure after maximum retries. 'eppFailure(37)' - trunk negotiation protocol failure after maximum retries. 'portVsanMismatchIsolation(38)' - an attempt is made to connect two switches using non-trunking ports having different port VSANs. 'loopbackIsolation(39)' - port is connected to another port in the same switch. 'upgradeInProgress(40)' - linecard upgrade in progress. 'incompatibleAdminRxBBCredit(41)' - receive BB credit is incompatible. 'incompatibleAdminRxBufferSize(42)' - receive buffer size is incompatible. 'portChannelMembersDown(43)' - no operational members. 'zoneRemoteNoRespIsolation(44)' - isolation due to remote zone server not responding. 'firstPortUpAsEport(45)' - in a over subscribed line card, when the first port in a group is up in E mode, other ports in that group cannot be brought up. 'firstPortNotUp(46)' - in a over subscribed line card, first port cannot be brought up in E-mode when the other ports in the group are up. 'peerFCIPPortClosedConnection(47)' - port went down because peer FCIP port closed TCP connection. 'peerFCIPPortResetConnection(48)' - port went down because the TCP connection was reset by the peer fcip port. 'fcipPortMaxReTx(49)' - fcip port went down due to max tcp re-transmissions reached the configured limit. 'fcipPortKeepAliveTimerExpire(50)' - fcip port went down due to TCP keep alive timer expired. 'fcipPortPersistTimerExpire(51)' - fcip port went down due to TCP persist timer expired. 'fcipPortSrcLinkDown(52)' - fcip port went down due to ethernet link down. 'fcipPortSrcAdminDown(53)' - fcip port went down because the source ethernet link was administratively shutdown. 'fcipPortAdminCfgChange(54)' - fcip port went down due to configuration change. 'fcipSrcPortRemoved(55)' - fcip port went down due to source port removal. 'fcipSrcModuleNotOnline(56)' - fcip port went down due to source module not online. 'invalidConfig(57)' - this port has a misconfiguration with respect to port channels. 'portBindFailure(58)' - port got isolated due to port bind failure. 'portFabricBindFailure(59)' - port got isolated due to fabric bind failure. 'noCommonVsanIsolation(60)' - trunk is isolated because there are no common vsans with peer. 'ficonVsanDown' - Ficon vsan down 'invalidAttachment' - Invalid attachment 'portBlocked' - Port blocked due to Ficon 'incomAdminRxBBCreditPerBuf' - disabled due to incompatible admin port rxbbcredit, performance buffers. 'tooManyInvalidFLOGIs' - Suspended due to too many invalid flogis. 'deniedDueToPortBinding' - Suspended due to port binding. 'elpFailureRevMismatch' - Isolated for ELP failure due to revision mismatch. 'elpFailureClassFParamErr' - Isolated for ELP failure due to class F param error. 'elpFailureClassNParamErr' - Isolated for ELP failure due to class N param error. 'elpFailureUnknownFlowCTLCode' - Isolated for ELP failure due to invalid flow control code 'elpFailureInvalidFlowCTLParam' - Isolated for ELP failure due to invalid flow control param. 'elpFailureInvalidPortName' - Isolated for ELP failure due to invalid port name. 'elpFailureInvalidSwitchName' - Isolated for ELP failure due to invalid switch name. 'elpFailureRatovEdtovMismatch' - Isolated for ELP failure due to R_A_TOV or E_D_TOV mismatch. 'elpFailureLoopbackDetected' - Isolated for ELP failure due to loopback detected. 'elpFailureInvalidTxBBCredit' - Isolated for ELP failure due to invalid transmit B2B credit. 'elpFailureInvalidPayloadSize' - Isolated for ELP failure due to invalid payload size. 'bundleMisCfg' - misconfiguration in portchannel membership detected. 'bitErrRTThresExceeded' - bit error rate too high. 'linkFailLinkReset' - link failure due to link reset. 'linkFailPortInitFail' - link failure due to port initialization failure. 'linkFailPortUnusable' - link failure due to port unusable. 'linkFailLossOfSignal' - link failure due to loss of signal. 'linkFailLossOfSync' - link failure due to loss of sync. 'linkFailNOSRcvd' - link failure due to non-operational sequences received. 'linkFailOLSRcvd' - link failure due to offline sequences received. 'linkFailDebounceTimeout' - link failure due to re-negotiation failed. 'linkFailLRRcvdB2B' - link failure when link reset(LR) operation fails due to non-empty receive queue. 'linkFailCreditLoss' - link failure due to excessive credit loss indications. 'linkFailRxQOverFlow' - link failure due to receive queue overflow. 'linkFailTooManyINTR' - link failure due to excessive port interrupts. 'linkFailLIPRcvdB2B' - link failure when loop initialization(LIP) operation fails due to non empty receive queue. 'linkFailCreditLossB2B' - link failure when link reset(LR) operation fails due to queue not empty. 'linkFailOPNyTMOB2B' - link failure due to open primitive signal timeout while receive queue not empty. 'linkFailOPNyRETB2B' - link failure due to open primitive signal returned while receive queue not empty. 'linkFailLIPF8Rcvd' - link failure due to F8 LIP received. 'linkFailLineCardPortShutdown' - link failure due to port shutdown. 'fcspAuthenfailure' - fibre channel security protocol authorization fail. 'fcotChksumErr' - FCOT SPROM checksum error. 'ohmsExtLBTest' - link suspended due to external loopback diagnostics failure. 'invalidFabricBindExh' - invalid fabric binding exchange. 'tovMismatch' - link isolation due to TOV mismatch. 'ficonNotEnabled - Ficon not enabled. 'ficonNoPortnumber' - no Ficon portnumber. 'ficonBeingEnabled' - Ficon is being enabled. 'ePortProhibited' - port down because FICON prohibit mask in place for E/TE port. 'portGracefulShutdown' - port has been shutdown gracefully. 'trunkNotFullyActive' - some of the VSANs which are common with the peer are not up. 'fabricBindingSWWNNotFound' - Peer switch WWN not found in fabric binding active database. 'fabricBindingDomainInvalid' - Peer domain ID is invalid in fabric binding active database. 'fabricBindingDBMismatch' - fabric binding active database mismatch with peer. 'fabricBindingNoRspFromPeer' - fabric binding no response from peer. 'vsanSuspended' - dynamic VSAN is suspended. 'vsanNotFound' - dynamic VSAN not found. 'trackedPortDown' - tracked port is down. 'ecSuspendedLoop' - EC is currently suspended for loopback. 'isolatedBundle' - isolated bundle due to misconfigurations. 'peerNotSupportBundle' - peer deivice does not support port channel. 'portBringupIsolation' - trunk port isolated during bringup time. 'domainNotAllowedIsolated' - port isolated due to domain not allowed. 'virtualIvrDomainOverlapIsolation' - port isolated due to virtual IVR domain overlap. 'outOfService' - port is in out of service state. 'portAuthFailed' - port has encountered an 802.1x authentication failure. 'bundleStandby' - port cannot be brought up in a bundle, since the bundle has maximum members. 'portConnectorTypeErr' - Error in the port connector type (SFP). 'errorDisabledReInitLimitReached' - the port is not operational after trying to initialize the port multiple times due to some errors. 'ficonDupPortNum' - the FICON VSAN has a duplicate port number. 'localRcf' - local disruptive reconfiguration (the local domain became invalid; no RCF frames have been sent outside the local switch). 'twoSwitchesWithSameWWN' - merge attempt between VSANs containing the same WWN. If the user attempts to merge two different VSANs and both have at least one switch with the same WWN then the link in between the VSANs is isolated. 'invalidOtherSidePrincEFPReqRecd' - EFP request frame indicating a principal switch other than the locally known one. 'domainOther' - other domain manager reasons not defined here. 'elpFailureAllZeroPeerWWNRcvd' - isolated for ELP failure due to peer WWN is received with all zeros. 'preferredPathIsolation' - port isolated due to preferred path not able to program the routes. 'fcRedirectIsolation' - port isolated due to FC Redirect not being able to program routes. 'portActLicenseNotAvailable' - port not brought up due to lack of port activation licenses. 'sdmIsolation' - port isolated due to SDM not being able to program routes. 'fcidAllocationFailed' - port down due to failure in FCID allocation. 'externallyDisabled' - port externally disabled. 'unavailableNPVUpstreamPort' - NPV upstream port not available. 'unavailableNPVPrefUpstreamPort' - NPV preferred upstream port not available. 'sfpReadError' - the port is not operational due to SFP read error. 'stickyDownOnLinkFailure' - the port is not operational due to link failure in the sticky down mode. 'tooManyLinkFlapsErr' - too many link flaps on the port in a short interval. 'unidirectionalUDLD' - unidirectional UDLD detected. 'txRxLoopUDLD' - UDLD Tx Rx loop. 'neighborMismatchUDLD' - UDLD neighbor mismatch. 'authzPending' - authorization pending. 'hotStdbyInBundle' - hot standby in bundle. 'incompleteConfig' - all parameters on the port have not been configured. 'incompleteTunnelCfg' - incomplete tunnel config. 'hwProgrammingFailed' - hardware programming failed. 'tunnelDstUnreachable' - no route to tunnel destination address. 'suspendByMtu' - MTU allocation failed. 'sfpInvalid' - SFP is not Cisco certified. 'sfpAbsent' - SFP is absent. 'portCapabilitiesUnknown' - the capabilities of the port are unknown. 'channelErrDisabled' - the port-channel to which the port belongs is in error disabled state. 'vrfMismatch' - Mismatch in source and transport VRF. 'vrfForwardReferencing' - Forward referencing transport VRF. 'dupTunnelConfigDetected' - two tunnel interfaces with same configuration is not allowed. 'primaryVLANDown' - primary VLAN is in down state. 'vrfUnusable' - VRF is unusable. 'errDisableHandShkFailure' - port is not operational due to an internal handshake failure. 'errDisabledBPDUGuard' - BPDUGuard triggered error disable on the port. 'dot1xSecViolationErrDisabled' - error disabled due to dot1x security violation. 'emptyEchoUDLD' - UDLD empty echo. 'vfTaggingCapErr' - VF Tagging capability mismatch error. 'portDisabled' - Port disabled. 'tunnelModeNotConfigured' - Tunnel Mode is not configured. 'tunnelSrcNotConfigured' - Tunnel Source is not configured. 'tunnelDstNotConfigured' - Tunnel Destination is not configured. 'tunnelUnableToResolveSrcIP' - Unable to resolve tunnel source IP address. 'tunnelUnableToResolveDstIP' - Unable to resolve tunnel destination IP address. 'tunnelVrfDown' - Tunnel VRF down. 'sifAdminDown' - SIF is admin down. 'phyIntfDown' - Physical interface is down. 'ifSifLimitExceeded' - Interface SIF limit is exceeded. 'sifHoldDown' - SIF hold down. 'noFcoe' - No FCOE configuration. 'dcxCompatMismatch' - DCX Compatibility Mismatch. 'isolateBundleLimitExceeded' - Isolation due to bundle limit exceeded. 'sifNotBound' - SIF is not bound. 'errDisabledLacpMiscfg' - Error Disabled due to LACP misconfig. 'satFabricIfDown' - Satellite fabric interface down. 'invalidSatFabricIf' - Invalid satellite fabric interface. 'noRemoteChassis' - No remote chassis. 'vicEnableNotReceived' - VIC enable not received. 'vicDisableReceived' - VIC disable received. 'vlanVsanMappingNotEnabled' - VLAN VSAN mapping not enabled. 'stpNotFwdingInFcoeMappedVlan' - STP not forwarding in FCOE Mapped Vlan. 'moduleOffline' - Module Offline. 'udldAggModeLinkFailure' - UDLD aggresive mode link failure. 'stpInconsVpcPeerDisabled' - STP inconsistent VPC peer disabled. 'setPortStateFailed' - Set port state failed. 'suspendedByVpc' - Suspended by VPC. 'vpcCfgInProgress' - VPC configuration in progress. 'vpcPeerLinkDown' - VPC peer link down. 'vpcNoRspFromPeer' - VPC no response from peer. 'protoPortSuspend' - Proto port suspend. 'tunnelSrcDown' - Tunnel source down. 'cdpInfoUnavailable' - CDP information unavailable. 'fexSfpInvalid' - FEX SFP invalid. 'errDisabledIpConflict' - Error Disabled due to IP conflict. 'fcotClkRateMismatch' - FCOT CLK rate mismatch. 'portGuardTrustSecViolation' - Error disabled due to port guard (Cisco Trusted Security Violation). 'sdpTimeout' - SDP timeout. 'satIncompatTopo' - Satellite incompatible topology. 'waitForFlogi' - Wait for FLOGI. 'satNotConfigured' - Satellite not configured. 'npivNotEnabledInUpstream' - NPIV not enabled in upstream. 'vsanMismatchWithUpstreamSwPort' - VSAN mismatch with upstream switch port. 'portGuardBitErrRate' - Error disabled due to port guard (Bit Error Rate). 'portGuardSigLoss' - Error disabled due to port guard (Signal Loss). 'portGuardSyncLoss' - Error disabled due to port guard (Sync Loss). 'portGuardLinkReset' - Error disabled due to port guard (Link Reset). 'portGuardCreditLoss' - Error disabled due to port guard (Credit Loss). 'ipQosMgrPolicyAppFailure' - IP QOS Manager policy application failure. 'pauseRateLimitErrDisabled' - Port error disabled due to pause rate limit condition. 'lstGrpUplinkDown' - EthPM LSTGRP downstream link down due to upstream link down. 'stickyDnLinkFailure' - Port kept in error disabled state due to Link Failure. 'routerMacFailure' - Router MAC failure. 'dcxMultipleMsapIds' - Port error disabled due to multiple MSAP IDs (DCX). 'dcxHundredPdusRcvdNoAck' - Hundred PDUs received without ACK (DCX). 'enmSatIncompatibleUplink' - Satellite Incompatible Uplink. 'enmLoopDetected' - Loop Detected (ENM). 'nonStickyExternallyDisabled' - Disabled by VPD Manager with SHut/No Shut allowed. 'subGroupIdNotAssigned' - Sub-group ID not assigned. 'vemUnlicensed' - VEM Unlicensed. 'profileNotFound' - Profile not found. 'nonExistentVlan' - VLAN does not exist. 'vlanInvalidType' - Invalid VLAN type. 'vlanDown' - VLAN down. 'vpcPeerUpgrade' - VPC Peer Upgrade. 'ipQosDcbxpCompatFailure' - IPQOS DCBXP compatibility failure. 'nonCiscoHbaVfTag' - Error Disabled due to Non-Cisco HBA VF Tag. 'domainIdConfigMismatch' - Domain ID config mismatch. 'sfpSpeedMismatch' - SFP speed mismatch. 'xcvrInitializing' - Transceiver initializing. 'xcvrAbsent' - Transceiver absent. 'xcvrInvalid' - Transceiver invalid. 'vfcBindingInvalid' - Invalid VFC Binding. 'vlanNotFcoeEnabled' - VLAN down due to FCOE disabled. 'pvlanNativeVlanErr' - Private VLAN - Native VLAN error. 'ethL2VlanDown' - Ethernet L2 VLAN down. 'ethIntfInvalidBinding' - Invalid Binding to Ethernet Interface. 'pmonFailure' - PMON Failure. 'l3NotReady' - L3 not ready. 'speedMismatch' - Speed Mismatch. 'flowControlMismatch' - Flow Control Mismatch. 'vdcMode' - VDC mode 'suspendedDueToMinLinks' - Suspended due to Min Links. 'enmPinFailLinkDown' - ENM Pin Fail Link Down. 'inactiveM1PortFpathActiveVlan' - Inactive M1 Port F Path Active VLAN. 'parentPortDown' - Parent Port Down. 'moduleRemoved' - Module Removed. 'corePortMct' - Core Port MCT. 'nonCorePortMct' - Non Core port MCT. 'ficonInorderNotActive'- FICON Inorder Not Active. 'invalidEncapsulation' - Invalid Encapsulation. 'modemLineDeasserted' - Modem line asserted. 'ipSecHndshkInProgress' - IP Sec Handshake in progress. 'sfpEthCompliantErr' - Sfp Ethernet compliant error. 'cellularModemUnattached' - Cellular Modem unattached. 'outOfGlblRxBuffers' - Out of global Rx buffers. 'sfpFcCompliantErr' - Sfp Fc Compliant Error. 'ethIntfNotLicensed' - Ethernet interface not licensed. 'domainIdsInvalid' - Domain IDs Invalid. 'fabricNameInvalid' - Fabric Name Invalid. 'ficonNoPortSwapLogicalPort' - Ficon No Port Swap Logical Port. 'ficonInvalidPortNum ' - Ficon Invalid Port Number. 'remotePortInL2vpnDown' - Remote Port in L2VPN Down. 'suspendedDueToNoLacpPdus' - Suspended due to no LACP PDUs. 'fcotValidationFailedAtDriver' - Fcot validation failed at driver. 'unsupportedTransceiverMd5DigestNotSame' - Unsupported transceiver MD5 digest not Same. 'unsupportedTransceiver' - Unsupport transceiver. 'adminStateConfigChange' - Admin state config change. 'vlanAllowedList' - Allowed Vlan list configured on the port. 'vlanAllowedListOverride' - Allowed Vlan list changed on the port. 'vlanAllowedListAdd' - Vlan has been added to the allowed Vlan list on the port. 'vlanAllowedListRemove' - Vlan has been removed from the allowed Vlan list on the port. 'vlanCfgStateChange' - Port affected due to Vlan state change. 'vlanCfgDelete' - Port affected due to Vlan delete. 'pppPeerNotResponding' - ppp peer not responding. 'pppAuthFailed' - ppp authentication failed. 'xcvrAuthFailed' - Transceiver authentication failed. 'badFramesRcvdFromLink' - Excessive bad frames received from link."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286))
    namedValues = NamedValues(("other", 1), ("none", 2), ("hwFailure", 3), ("loopbackDiagFailure", 4), ("errorDisabled", 5), ("swFailure", 6), ("linkFailure", 7), ("offline", 8), ("nonParticipating", 9), ("initializing", 10), ("vsanInactive", 11), ("adminDown", 12), ("channelAdminDown", 13), ("channelOperSuspended", 14), ("channelConfigurationInProgress", 15), ("rcfInProgress", 16), ("elpFailureIsolation", 17), ("escFailureIsolation", 18), ("domainOverlapIsolation", 19), ("domainAddrAssignFailureIsolation", 20), ("domainOtherSideEportIsolation", 21), ("domainInvalidRCFReceived", 22), ("domainManagerDisabled", 23), ("zoneMergeFailureIsolation", 24), ("vsanMismatchIsolation", 25), ("parentDown", 26), ("srcPortNotBound", 27), ("interfaceRemoved", 28), ("fcotNotPresent", 29), ("fcotVendorNotSupported", 30), ("incompatibleAdminMode", 31), ("incompatibleAdminSpeed", 32), ("suspendedByMode", 33), ("suspendedBySpeed", 34), ("suspendedByWWN", 35), ("domainMaxReTxFailure", 36), ("eppFailure", 37), ("portVsanMismatchIsolation", 38), ("loopbackIsolation", 39), ("upgradeInProgress", 40), ("incompatibleAdminRxBBCredit", 41), ("incompatibleAdminRxBufferSize", 42), ("portChannelMembersDown", 43), ("zoneRemoteNoRespIsolation", 44), ("firstPortUpAsEport", 45), ("firstPortNotUp", 46), ("peerFCIPPortClosedConnection", 47), ("peerFCIPPortResetConnection", 48), ("fcipPortMaxReTx", 49), ("fcipPortKeepAliveTimerExpire", 50), ("fcipPortPersistTimerExpire", 51), ("fcipPortSrcLinkDown", 52), ("fcipPortSrcAdminDown", 53), ("fcipPortAdminCfgChange", 54), ("fcipSrcPortRemoved", 55), ("fcipSrcModuleNotOnline", 56), ("invalidConfig", 57), ("portBindFailure", 58), ("portFabricBindFailure", 59), ("noCommonVsanIsolation", 60), ("ficonVsanDown", 61), ("invalidAttachment", 62), ("portBlocked", 63), ("incomAdminRxBBCreditPerBuf", 64), ("tooManyInvalidFLOGIs", 65), ("deniedDueToPortBinding", 66), ("elpFailureRevMismatch", 67), ("elpFailureClassFParamErr", 68), ("elpFailureClassNParamErr", 69), ("elpFailureUnknownFlowCTLCode", 70), ("elpFailureInvalidFlowCTLParam", 71), ("elpFailureInvalidPortName", 72), ("elpFailureInvalidSwitchName", 73), ("elpFailureRatovEdtovMismatch", 74), ("elpFailureLoopbackDetected", 75), ("elpFailureInvalidTxBBCredit", 76), ("elpFailureInvalidPayloadSize", 77), ("bundleMisCfg", 78), ("bitErrRTThresExceeded", 79), ("linkFailLinkReset", 80), ("linkFailPortInitFail", 81), ("linkFailPortUnusable", 82), ("linkFailLossOfSignal", 83), ("linkFailLossOfSync", 84), ("linkFailNOSRcvd", 85), ("linkFailOLSRcvd", 86), ("linkFailDebounceTimeout", 87), ("linkFailLRRcvdB2B", 88), ("linkFailCreditLoss", 89), ("linkFailRxQOverFlow", 90), ("linkFailTooManyINTR", 91), ("linkFailLIPRcvdB2B", 92), ("linkFailCreditLossB2B", 93), ("linkFailOPNYTMOB2B", 94), ("linkFailOPNYRETB2B", 95), ("linkFailLIPF8Rcvd", 96), ("linkFailLineCardPortShutdown", 97), ("fcspAuthenfailure", 98), ("fcotChksumErr", 99), ("ohmsExtLBTest", 100), ("invalidFabricBindExh", 101), ("tovMismatch", 102), ("ficonNotEnabled", 103), ("ficonNoPortnumber", 104), ("ficonBeingEnabled", 105), ("ePortProhibited", 106), ("portGracefulShutdown", 107), ("trunkNotFullyActive", 108), ("fabricBindingSWWNNotFound", 109), ("fabricBindingDomainInvalid", 110), ("fabricBindingDBMismatch", 111), ("fabricBindingNoRspFromPeer", 112), ("vsanSuspended", 113), ("vsanNotFound", 114), ("trackedPortDown", 115), ("ecSuspendedLoop", 116), ("isolatedBundle", 117), ("peerNotSupportBundle", 118), ("portBringupIsolation", 119), ("domainNotAllowedIsolated", 120), ("virtualIvrDomainOverlapIsolation", 121), ("outOfService", 122), ("portAuthFailed", 123), ("bundleStandby", 124), ("portConnectorTypeErr", 125), ("errorDisabledReInitLimitReached", 126), ("ficonDupPortNum", 127), ("localRcf", 128), ("twoSwitchesWithSameWWN", 129), ("invalidOtherSidePrincEFPReqRecd", 130), ("domainOther", 131), ("elpFailureAllZeroPeerWWNRcvd", 132), ("preferredPathIsolation", 133), ("fcRedirectIsolation", 134), ("portActLicenseNotAvailable", 135), ("sdmIsolation", 136), ("fcidAllocationFailed", 137), ("externallyDisabled", 138), ("unavailableNPVUpstreamPort", 139), ("unavailableNPVPrefUpstreamPort", 140), ("sfpReadError", 141), ("stickyDownOnLinkFailure", 142), ("tooManyLinkFlapsErr", 143), ("unidirectionalUDLD", 144), ("txRxLoopUDLD", 145), ("neighborMismatchUDLD", 146), ("authzPending", 147), ("hotStdbyInBundle", 148), ("incompleteConfig", 149), ("incompleteTunnelCfg", 150), ("hwProgrammingFailed", 151), ("tunnelDstUnreachable", 152), ("suspendByMtu", 153), ("sfpInvalid", 154), ("sfpAbsent", 155), ("portCapabilitiesUnknown", 156), ("channelErrDisabled", 157), ("vrfMismatch", 158), ("vrfForwardReferencing", 159), ("dupTunnelConfigDetected", 160), ("primaryVLANDown", 161), ("vrfUnusable", 162), ("errDisableHandShkFailure", 163), ("errDisabledBPDUGuard", 164), ("dot1xSecViolationErrDisabled", 165), ("emptyEchoUDLD", 166), ("vfTaggingCapErr", 167), ("portDisabled", 168), ("tunnelModeNotConfigured", 169), ("tunnelSrcNotConfigured", 170), ("tunnelDstNotConfigured", 171), ("tunnelUnableToResolveSrcIP", 172), ("tunnelUnableToResolveDstIP", 173), ("tunnelVrfDown", 174), ("sifAdminDown", 175), ("phyIntfDown", 176), ("ifSifLimitExceeded", 177), ("sifHoldDown", 178), ("noFcoe", 179), ("dcxCompatMismatch", 180), ("isolateBundleLimitExceeded", 181), ("sifNotBound", 182), ("errDisabledLacpMiscfg", 183), ("satFabricIfDown", 184), ("invalidSatFabricIf", 185), ("noRemoteChassis", 186), ("vicEnableNotReceived", 187), ("vicDisableReceived", 188), ("vlanVsanMappingNotEnabled", 189), ("stpNotFwdingInFcoeMappedVlan", 190), ("moduleOffline", 191), ("udldAggModeLinkFailure", 192), ("stpInconsVpcPeerDisabled", 193), ("setPortStateFailed", 194), ("suspendedByVpc", 195), ("vpcCfgInProgress", 196), ("vpcPeerLinkDown", 197), ("vpcNoRspFromPeer", 198), ("protoPortSuspend", 199), ("tunnelSrcDown", 200), ("cdpInfoUnavailable", 201), ("fexSfpInvalid", 202), ("errDisabledIpConflict", 203), ("fcotClkRateMismatch", 204), ("portGuardTrustSecViolation", 205), ("sdpTimeout", 206), ("satIncompatTopo", 207), ("waitForFlogi", 208), ("satNotConfigured", 209), ("npivNotEnabledInUpstream", 210), ("vsanMismatchWithUpstreamSwPort", 211), ("portGuardBitErrRate", 212), ("portGuardSigLoss", 213), ("portGuardSyncLoss", 214), ("portGuardLinkReset", 215), ("portGuardCreditLoss", 216), ("ipQosMgrPolicyAppFailure", 217), ("pauseRateLimitErrDisabled", 218), ("lstGrpUplinkDown", 219), ("stickyDnLinkFailure", 220), ("routerMacFailure", 221), ("dcxMultipleMsapIds", 222), ("dcxHundredPdusRcvdNoAck", 223), ("enmSatIncompatibleUplink", 224), ("enmLoopDetected", 225), ("nonStickyExternallyDisabled", 226), ("subGroupIdNotAssigned", 227), ("vemUnlicensed", 228), ("profileNotFound", 229), ("nonExistentVlan", 230), ("vlanInvalidType", 231), ("vlanDown", 232), ("vpcPeerUpgrade", 233), ("ipQosDcbxpCompatFailure", 234), ("nonCiscoHbaVfTag", 235), ("domainIdConfigMismatch", 236), ("sfpSpeedMismatch", 237), ("xcvrInitializing", 238), ("xcvrAbsent", 239), ("xcvrInvalid", 240), ("vfcBindingInvalid", 241), ("vlanNotFcoeEnabled", 242), ("pvlanNativeVlanErr", 243), ("ethL2VlanDown", 244), ("ethIntfInvalidBinding", 245), ("pmonFailure", 246), ("l3NotReady", 247), ("speedMismatch", 248), ("flowControlMismatch", 249), ("vdcMode", 250), ("suspendedDueToMinLinks", 251), ("enmPinFailLinkDown", 252), ("inactiveM1PortFpathActiveVlan", 253), ("parentPortDown", 254), ("moduleRemoved", 255)) + NamedValues(("corePortMct", 256), ("nonCorePortMct", 257), ("ficonInorderNotActive", 258), ("invalidEncapsulation", 259), ("modemLineDeasserted", 260), ("ipSecHndshkInProgress", 261), ("sfpEthCompliantErr", 262), ("cellularModemUnattached", 263), ("outOfGlblRxBuffers", 264), ("sfpFcCompliantErr", 265), ("ethIntfNotLicensed", 266), ("domainIdsInvalid", 267), ("fabricNameInvalid", 268), ("ficonNoPortSwapLogicalPort", 269), ("ficonInvalidPortNum", 270), ("remotePortInL2vpnDown", 271), ("suspendedDueToNoLacpPdus", 272), ("fcotValidationFailedAtDriver", 273), ("unsupportedTransceiverMd5DigestNotSame", 274), ("unsupportedTransceiver", 275), ("adminStateConfigChange", 276), ("vlanAllowedList", 277), ("vlanAllowedListOverride", 278), ("vlanAllowedListAdd", 279), ("vlanAllowedRemove", 280), ("vlanCfgStateChange", 281), ("vlanCfgDelete", 282), ("pppPeerNotResponding", 283), ("pppAuthFailed", 284), ("xcvrAuthFailed", 285), ("badFramesRcvdFromLink", 286))

class FcPerfBuffer(TextualConvention, Integer32):
    description = "Represents the number of performance buffers of a physical FC-port. These buffers in addition to the buffer-to-buffer credits are used to improve the performance of a port, hence called 'Performance buffers'. A value of zero for this means the agent uses the built-in algorithm to calculate the number of performance buffers to be used."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 145)

cffFcFeElementName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 1), FcNameId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cffFcFeElementName.setStatus('current')
if mibBuilder.loadTexts: cffFcFeElementName.setDescription("The World-Wide Name of this fabric element. It's a 64-bit identifier and is unique worldwide.")
fcIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2), )
if mibBuilder.loadTexts: fcIfTable.setStatus('current')
if mibBuilder.loadTexts: fcIfTable.setDescription('This table contains one entry per fibre channel switch port interface. Each entry holds the port interface parameters. The entries are created by the fabric switch when a module is inserted and it identifies a port on the module. Similarly when a module is removed from the fabric switch all the port entries in this table corresponding to that module are removed. This table also hold entries for Port Channel ports. NOTE: Nx_ports are not represented in this table.')
fcIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfEntry.setDescription('Each entry contains FC-port configuration parameters and state information.')
fcIfWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 1), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfWwn.setStatus('current')
if mibBuilder.loadTexts: fcIfWwn.setDescription("The World-Wide Name of this FC-Port. It's a 64-bit identifier and is unique worldwide.")
fcIfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 2), FcPortTypes().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminMode.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminMode.setDescription("The port mode configured by the user. If the user configured the port as auto(1), then the port initialization scheme determines the mode of the port. In this case the user can look at 'fcIfOperMode' to determine the current operating mode of port. If this interface is a Port Channel port then only auto(1) or ePort(4) is allowed.")
fcIfOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 3), FcPortTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperMode.setStatus('current')
if mibBuilder.loadTexts: fcIfOperMode.setDescription('The current operating mode of the port. This object will also be an additional varbind sent in the linkUp notification ( defined in IF-MIB ) in addition to the varbinds defined for this notification.')
fcIfAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 4), FcIfSpeed().clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminSpeed.setDescription('The port speed configured by the user. If this interface is a member of a port channel port then this object cannot be modified. Since this is a characteristic of a physical port, this object may not be applicable for some non-physical ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfBeaconMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfBeaconMode.setStatus('current')
if mibBuilder.loadTexts: fcIfBeaconMode.setDescription("The Beacon mode configured by the user. If 'true', the Beacon mode is enabled. If 'false', the beacon mode is disabled. In Beacon mode, an interface LED is put into flashing mode for easy identification of a particular interface.")
fcIfPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPortChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: fcIfPortChannelIfIndex.setDescription('The ifIndex of the port channel port this port belongs to. A value of zero indicates that this port is not part of any port channel. For port channel port this object will have the ifIndex of the port channel port itself.')
fcIfOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 7), FcIfOperStatusReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperStatusCause.setStatus('current')
if mibBuilder.loadTexts: fcIfOperStatusCause.setDescription("The cause of current operational state of the port. The current operational state of the port is shown by the 'ifOperStatus' defined in IF-MIB. This object will show 'none(2)' for all the 'ifOperStatus' values except for 'down(2)'. It will show one of the values from the 'FcIfOperStatusReason' textual convention if 'ifOperStatus' is 'down(2)'. It will show other(1) if the operational status cause is not from one defined in 'FcIfOperStatusReason'. This object will also be an additional varbind sent in the linkDown notification ( defined in IF-MIB ) in addition to the varbinds defined for this notification.")
fcIfOperStatusCauseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperStatusCauseDescr.setStatus('current')
if mibBuilder.loadTexts: fcIfOperStatusCauseDescr.setDescription("The description for the cause of current operational state of the port, shown by the object 'fcIfOperStatusCause'.")
fcIfAdminTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonTrunk", 1), ("trunk", 2), ("auto", 3))).clone('nonTrunk')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminTrunkMode.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminTrunkMode.setDescription("The trunking mode configured by the user. When set to 'nonTrunk(1)', the port negotiates and converts the link into non-trunking mode. This port and the neighboring port's fcIfOperTrunkMode becomes non-trunk. When set to 'trunk(2)', the port negotiates and converts the link into trunking mode only if the neighboring port, fcIfAdminTrunkMode is either 'trunk(2)' or 'auto(3)'. When set to 'auto(3)', the port is willing to convert the link to a trunk link only if the the neighboring port, fcIfAdminTrunkMode is set to 'trunk(2)' mode.")
fcIfOperTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonTrunk", 1), ("trunk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperTrunkMode.setStatus('current')
if mibBuilder.loadTexts: fcIfOperTrunkMode.setDescription('The current trunking mode of the port.')
fcIfAllowedVsanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 11), FcList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAllowedVsanList2k.setStatus('current')
if mibBuilder.loadTexts: fcIfAllowedVsanList2k.setDescription("The list of VSANs (in the range 0 through 2047) which are allowed to be received/transmitted on the port when the port is operating in trunking mode. Only ports operating in trunk mode can belong to multiple VSANs. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 0 through 7, the second octet specifying VSANs 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, is represented by a single bit within the value of this object. The corresponding VSAN is allowed on this port if and only if that bit has a value of '1'. VSAN 0 is reserved. This object is applicable to only ports operating in trunk mode. The value configured to this object will be retained but will not be applicable when the port is put into non-trunking mode. It will be again applicable when the port is operating in trunking mode. Similarly, it can be modified at the time when this object is not applicable, i.e. when the port is operating in non-trunking mode, but the modified value is retained for use on subsequent occasions when this object is applicable when the port is operating in trunking mode.")
fcIfAllowedVsanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 12), FcList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAllowedVsanList4k.setStatus('current')
if mibBuilder.loadTexts: fcIfAllowedVsanList4k.setDescription("The list of VSANs (in the range 2048 to 4096 ) which are allowed to be received/transmitted on the port when the port is operating in trunking mode. Only ports operating in trunk mode can belong to multiple VSANs. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 2048 through 2055, the second octet specifying VSANs 2056 through 2063, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, is represented by a single bit within the value of this object. The corresponding VSAN is allowed on this port if and only if that bit has a value of '1'. This object is applicable to only ports operating in trunk mode. The value configured to this object will be retained but will not be applicable when the port is put into non-trunking mode. It will be again applicable when the port is operating in trunking mode. Similarly, it can be modified at the time when this object is not applicable, i.e. when the port is operating in non-trunking mode, but the modified value is retained for use on subsequent occasions when this object is applicable when the port is operating in trunking mode.")
fcIfActiveVsanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 13), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanList2k.setStatus('current')
if mibBuilder.loadTexts: fcIfActiveVsanList2k.setDescription("The list of VSANs (in the range 0 through 2047) this port is associated with. Only ports operating in trunk mode can belong to multiple VSANs. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 0 through 7, the second octet specifying VSANs 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, that this port is associated with, is represented by a single bit within the value of this object. The corresponding VSAN that this port is a member of is active if and only if that bit has a value of '1'. Note that the zero-length string represents that none of the VSANs that this port is a member of are active. VSAN 0 is reserved. This object is applicable to only ports operating in trunk mode.")
fcIfActiveVsanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 14), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanList4k.setStatus('current')
if mibBuilder.loadTexts: fcIfActiveVsanList4k.setDescription("The list of VSANs (in the range 2048 through 4096) this port is associated with. Only ports operating in trunk mode can belong to multiple VSANs. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 2048 through 2055, the second octet specifying VSANs 2056 through 2063, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, that this port is associated with, is represented by a single bit within the value of this object. The corresponding VSAN that this port is a member of is active if and only if that bit has a value of '1'. Note that the zero-length string represents that none of the VSANs that this port is a member of are active. This object is applicable to only ports operating in trunk mode.")
fcIfBbCreditModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 15), FcBbCreditModel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBbCreditModel.setStatus('current')
if mibBuilder.loadTexts: fcIfBbCreditModel.setDescription('The BB_Credit model used by the FC-port. The alternate BB_Credit management model can be used in the arbitrated loop topology to manage the flow of frames between the two ports participating in the current loop circuit. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 16), MicroSeconds()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfHoldTime.setStatus('current')
if mibBuilder.loadTexts: fcIfHoldTime.setDescription('The maximum time that the FC-Port shall hold a frame in the transmitter buffer before discarding it, if it is unable to deliver the frame. The value 0 in this object means the frame will be discarded immediately if the port is unable to deliver the frame. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfTransmitterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 17), FcPortTxTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTransmitterType.setStatus('current')
if mibBuilder.loadTexts: fcIfTransmitterType.setDescription('The technology of the port transceiver. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 18), FcPortModuleTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfConnectorType.setStatus('current')
if mibBuilder.loadTexts: fcIfConnectorType.setDescription("The module type of the port connector. This object refers to the hardware implementation of the port. It will be 'embedded' if the hardware equivalent to Gigabit interface card ( GBIC ) is part of the line card and is unremovable. It will be 'glm' if its a gigabit link module ( GLM ). A GLM has a different form factor than GBIC. GLM is not supported by our switch. It will be 'gbicWithSerialID' if the GBIC serial id can be read, else it will be 'gbicWithoutSerialID'. It will be 'sfpWithSerialID', if the small form factor ( SFP ) pluggable GBICs serial id can be read, else it will be 'sfpWithoutSerialID'. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.")
fcIfSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSerialNo.setStatus('current')
if mibBuilder.loadTexts: fcIfSerialNo.setDescription('The serial number of the connector unit ( e.g., for a GBIC ). If this is not applicable, return a zero-length string. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 20), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRevision.setStatus('current')
if mibBuilder.loadTexts: fcIfRevision.setDescription('The port revision of the connector unit (e.g., for a GBIC). If this is not applicable it returns a zero-length string. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfVendor.setStatus('current')
if mibBuilder.loadTexts: fcIfVendor.setDescription('The connector unit ( e.g., for a GBIC ) vendor. If this is not applicable it returns a zero-length string. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfSFPSerialIDData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 22), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSFPSerialIDData.setStatus('current')
if mibBuilder.loadTexts: fcIfSFPSerialIDData.setDescription('The connector unit ( e.g., for a GBIC ) Serial ID data. If this is not applicable it returns a zero-length string. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 23), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPartNumber.setStatus('current')
if mibBuilder.loadTexts: fcIfPartNumber.setDescription('The connector unit ( e.g., for a GBIC ) part number. If this is not applicable it returns a zero-length string. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfAdminRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 24), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCredit.setReference('cfcFeatureCtrlIndex in CISCO-FEATURE-CONTROL-MIB.')
if mibBuilder.loadTexts: fcIfAdminRxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminRxBbCredit.setDescription("The receive buffer-to-buffer credits configured for this port. If the value configured is zero, then the value of the object fcIfCapOsmRxBbCreditDefault or fcIfCapFrmRxBbCreditDefault is used if the port is operating in Fx mode. Value of fcIfCapOsmRxBbCreditDefault is used if fcIfPortRateMode is 'shared'. Value of fcIfCapFrmRxBbCreditDefault is used if fcIfPortRateMode is 'dedicated'. Similarly, if the port is operating in inter switch link (ISL) mode then the value of the object fcIfCapOsmISLRxBbCreditDefault or fcIfCapFrmISLRxBbCreditDefault is used. Value of fcIfCapOsmISLRxBbCreditDefault is used if fcIfPortRateMode is 'shared'. Value of fcIfCapFrmISLRxBbCreditDefault is used if fcIfPortRateMode is 'dedicated'. If a non-zero value is configured for this object then, if the values configured for fcIfAdminRxBbCreditModeISL and fcIfAdminRxBbCreditModeFx is zero, then the value of this object is used for the port operating in either Fx or ISL port mode. But if fcIfAdminRxBbCreditModeISL is configured with a valid value, then the value of fcIfAdminRxBbCreditModeISL object is used instead of this value, if the port is operating in ISL port mode. Similarly, if the values configured for fcIfAdminRxBbCreditModeFx is valid, then the value of fcIfAdminRxBbCreditModeFx object is used instead of this value, if the port is operating in Fx mode. If this object is set to non-zero value then objects fcIfAdminRxBbCreditModeISL and fcIfAdminRxBbCreditModeFx are set to zero at that time. But later the objects fcIfAdminRxBbCreditModeISL and fcIfAdminRxBbCreditModeFx can be configured to non-zero values even if this object present value is non-zero. NOTE: The value of this object is not used if cfcFeatureCtrlIndex object is configured with a value of 'extenedCredit' and fcIfAdminRxBbCreditExtended object is configured.")
fcIfAdminRxBbCreditModeISL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 25), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeISL.setReference('cfcFeatureCtrlIndex in CISCO-FEATURE-CONTROL-MIB.')
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeISL.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeISL.setDescription("The receive buffer-to-buffer credits configured for this port to be used if it is operating in xE_port mode. NOTE: The value of this object is not used if cfcFeatureCtrlIndex object is configured with a value of 'extenedCredit' and fcIfAdminRxBbCreditExtended object is configured.")
fcIfAdminRxBbCreditModeFx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 26), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeFx.setReference('cfcFeatureCtrlIndex in CISCO-FEATURE-CONTROL-MIB.')
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeFx.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminRxBbCreditModeFx.setDescription("The receive buffer-to-buffer credits configured for this port to be used if it is operating in Fx mode. NOTE: The value of this object is not used if cfcFeatureCtrlIndex object is configured with a value of 'extenedCredit' and fcIfAdminRxBbCreditExtended object is configured.")
fcIfOperRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 27), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperRxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfOperRxBbCredit.setDescription('The receive buffer-to-buffer credits configured for the operational port mode.')
fcIfRxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 28), FcRxDataFieldSize()).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfRxDataFieldSize.setStatus('current')
if mibBuilder.loadTexts: fcIfRxDataFieldSize.setDescription('The largest Data_Field size for an FT_1 frame that can be received by this port.')
fcIfActiveVsanUpList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 29), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanUpList2k.setStatus('current')
if mibBuilder.loadTexts: fcIfActiveVsanUpList2k.setDescription("The list of VSANs (in the range 0 through 2047) whose operational state is 'up', that this port is associated with. Only ports operating in trunk mode can be associated to multiple VSANs. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 0 through 7, the second octet specifying VSANs 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, whose operational state is 'up', that this port is associated with, is represented by a single bit within the value of this object. The corresponding VSAN that this port is a member of is operationally 'up' if and only if that bit has a value of '1'. Note that the zero-length string represents that none of the VSANs that this port is a member of are operationally 'up'. VSAN 0 is reserved. This object is applicable to only ports operating in trunk mode.")
fcIfActiveVsanUpList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 30), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfActiveVsanUpList4k.setStatus('current')
if mibBuilder.loadTexts: fcIfActiveVsanUpList4k.setDescription("The list of VSANs (in the range 2048 to 4096 ) whose operational state is 'up', that this port is associated with. Only ports operating in trunk mode can be associated to multiple VSANs. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 2048 through 2055, the second octet specifying VSANs 2056 through 2063, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, whose operational state is 'up', that this port is associated with, is represented by a single bit within the value of this object. The corresponding VSAN that this port is a member of is operationally 'up' if and only if that bit has a value of '1'. Note that the zero-length string represents that none of the VSANs that this port is a member of are active. This object is applicable to only ports operating in trunk mode.")
fcIfPortRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dedicated", 1), ("shared", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfPortRateMode.setStatus('current')
if mibBuilder.loadTexts: fcIfPortRateMode.setDescription("The rate of data traffic supported by this port. 'dedicated' - this interface is operating in dedicated rate mode. In dedicated rate mode each interface has an allocated fabric bandwidth to sustain line rate traffic at the maximum configured operating speed. 'shared' - this interface is operating in over subscription mode. In over subscription mode the available fabric bandwidth of a link is shared by more than one interface, so that multiple front panel ports share the same link internally to the switch fabric. For modules that are capable of switching between 'dedicated' and 'shared' modes, certain restrictions apply based on the available bandwidth and speed. The keywords 'osm' and 'shared', 'frm' and 'dedicated' are interchangeable.")
fcIfAdminRxPerfBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 32), FcPerfBuffer()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxPerfBuffer.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminRxPerfBuffer.setDescription("The performance buffers configured for this port. These buffers in addition to the buffer-to-buffer credits are used to improve the performance of a port, hence called 'Performance buffers'. If a value of zero is set for this object, then the agent uses the built-in algorithm to calculate the number of performance buffers to be used.")
fcIfOperRxPerfBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 33), FcPerfBuffer()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperRxPerfBuffer.setStatus('current')
if mibBuilder.loadTexts: fcIfOperRxPerfBuffer.setDescription('The performance buffers presently operational on this port.')
fcIfBbScn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBbScn.setReference('FC-FS REV1_90 Section 15.6.2.5')
if mibBuilder.loadTexts: fcIfBbScn.setStatus('current')
if mibBuilder.loadTexts: fcIfBbScn.setDescription('The buffer-to-buffer state change number operational on this interface.')
fcIfPortInitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPortInitStatus.setStatus('current')
if mibBuilder.loadTexts: fcIfPortInitStatus.setDescription("If 'true', this port successfully completed a link initialization or there was an error during link initialization. If 'false', this port did not perform successful link initialization since it was brought down by the user or switch was powered up.")
fcIfAdminRxBbCreditExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 36), FcBbCredit()).setUnits('buffers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminRxBbCreditExtended.setReference('cfcFeatureCtrlIndex in CISCO-FEATURE-CONTROL-MIB.')
if mibBuilder.loadTexts: fcIfAdminRxBbCreditExtended.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminRxBbCreditExtended.setDescription("This object specifies the extended BB credits that can be configured on an FC port (in the range 256 through 4095). The acceptable value depends on the BB credit configuration of other ports in the line card. Since this is an optional feature, the value of this object can only be modified after (enabling extended credit feature) cfcFeatureCtrlIndex object is configured with a value of 'extenedCredit'. If extended credit feature is enabled, the MIB objects fcIfAdminRxBbCredit, fcIfAdminRxBbCreditModeISL, fcIfAdminRxBbCreditModeFx values are not used; instead fcIfAdminRxBbCreditExtended is used regardless of port mode operation. If extended credit feature is disabled, the previous configured values of fcIfAdminRxBbCredit fcIfAdminRxBbCreditModeISL, fcIfAdminRxBbCreditModeFx are used as defined. NOTE: This object can be modified only on certain modules having hardware capability to support the extended BB credit feature.")
fcIfFcTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 37), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFcTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: fcIfFcTunnelIfIndex.setDescription('This object specifies the ifIndex of a FC tunnel that represents a logical Fibre Channel data path between a source switch and destination switch. RSPAN uses a special FC tunnel that originates at the ST port in the source switch and terminates at the SD port in the destination switch. The FC tunnel must be first bound to an ST port in the source switch and then mapped to an SD port in the destination switch for RSPAN feature configuration, which enables monitoring traffic from a remote switch. A value of zero indicates that no FC tunnel is mapped to a ST port. GLOSSARY: SPAN: Switch Port Analyzer (SPAN) is a feature that enables user to analyze network traffic in a switched network using network analyzer attached to a switch port. RSPAN: Remote SPAN that enables monitoring of traffic from remote switches. FC tunnel: An FC tunnel is a logical data path between a source switch and destination switch. SPAN tunnel (ST) port: The ST port is used to forward traffic to FC tunnel. SPAN destination (SD) port: The SD port is used to forward traffic to an Analyzer for monitoring purposes.')
fcIfServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 38), FcIfServiceStateType().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfServiceState.setStatus('current')
if mibBuilder.loadTexts: fcIfServiceState.setDescription("The service state of the interface. Some but not all interfaces, e.g., those on hardware modules with a capability of supporting shared resources, can have their state changed to 'outOfService'. Examples of such shared resources include speed/bandwidth and buffer memory. Shared resources include the values of the following objects: fcIfAdminSpeed, fcIfAdminMode, fcIfPortRateMode, fcIfAdminRxBbCredit, fcIfAdminRxBbCreditModeISL, fcIfAdminRxBbCreditModeFx, fcIfAdminRxBbCreditExtended, fcIfAdminRxPerfBuffer. When an attempt is made to change a particular interface's value for this object to 'outOfService': - if the interface's ifAdminStatus is 'up' or if the interface is a part of a Port channel, then the change to the value of this object is rejected. - if the interface's value of this object is successfully changed to 'outOfService', then each and every user-configured parameter value of the above-listed shared resource objects for that interface is set to its default value. When an interface is in the 'outOfService' state then: - the interface is not operational and no packets can be passed, - the interface's shared resource objects can not be configured to non-default values, - the interface cannot be added to a port channel. - the interface cannot be involved in a port swap (using cficonPortSwapTable in CISCO-FICON-MIB). - ifAdminStatus in IF-MIB cannot be changed to 'up' state. - other interface objects are not affected. Changing the value of this object on one interface to 'outOfService' does not affect the functionality of any other interface. When an attempt is made to change a particular interface's value for this object to 'inService', the attempt is rejected if necessary shared resources are unavailable.")
fcIfAdminBbScnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 39), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminBbScnMode.setReference('FC-FS-2 Rev 1.90, Section 15.6.2.5 BB_SC_N.')
if mibBuilder.loadTexts: fcIfAdminBbScnMode.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminBbScnMode.setDescription("The Buffer-to-buffer State Change Number (BB_SC_N) field (word 1, bits 15-12) specifies the Buffer-to-buffer State Change Number. It indicates that the sender of the PLOGI or FLOGI frame is requesting 2 power BB_SC_N number of frames to be sent between two consecutive BB_SCs primitives, and 2 power BB_SC_N number of R_RDY primitives to be sent between two consecutive BB_SCr primitives. If 'true', the BB_SC_N mode is enabled. If 'false', the BB_SC_N mode is disabled.")
fcIfPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPortType.setStatus('current')
if mibBuilder.loadTexts: fcIfPortType.setDescription("Indicates whether this interface is internal orexternal interface on the chassis. internal(1) - This type of interface is not accessible via an externally-mounted connector on the device external(2) - This type of interface is accessible via an externally-mounted connector on the device Except on certain platforms, the interfaces are usually of the fcIfPortType 'external'.")
fcIfAdminFECState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfAdminFECState.setStatus('current')
if mibBuilder.loadTexts: fcIfAdminFECState.setDescription('The port FEC state configured by the user. When set to up(1), the port negotiates and converts the link into operational FEC up only if the neighboring port fcIfAdminFECState is up(1). When set to down(2) the fcIfOperFECState for this port and the neighboring port remains down(2) after negotiation. If this interface is a member of a port channel then this object cannot be modified.')
fcIfOperFECState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOperFECState.setStatus('current')
if mibBuilder.loadTexts: fcIfOperFECState.setDescription('The current operating FEC state of the port.The value is down(2) by default. If fcIfAdminFECState is up(1) for a physical port, the port negotiates and converts the link into operational FEC up only if the neighboring port fcIfAdminFECState is up(1).')
fcTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3), )
if mibBuilder.loadTexts: fcTrunkIfTable.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfTable.setDescription('This table contains one entry for each trunking fibre channel port per VSAN. When the FC-port goes into trunking mode, the fibre channel switch creates one entry per FC-port for each active VSAN, from the allowed VSAN list for this port. The allowed VSAN list is configured using the objects, fcIfAllowedVsanList2k and fcIfAllowedVsanList4k. If an VSAN becomes inactive then the switch removes the corresponding entries from this table, if they exist.')
fcTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: fcTrunkIfEntry.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfEntry.setDescription('Each entry contains trunking FC-port parameters.')
fcTrunkIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrunkIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfOperStatus.setDescription("The operational state of a VSAN on this port. If the port is in trunking mode, it is possible that the port state may be 'down(2)' only in some VSANs. If this port is down in this VSAN only then port state shown by 'ifOperStatus' may not be 'down(2)', but this object will show 'down(2)'. The 'fcTrunkIfOperStatusCause' object shows the reason for port being 'down(2)'.")
fcTrunkIfOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1, 2), FcIfOperStatusReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrunkIfOperStatusCause.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfOperStatusCause.setDescription("The cause of current operational state of the port. The current operational state of the port is shown by the 'fcTrunkIfOperStatus'. This object will show 'none(2)' for all the 'fcTrunkIfOperStatus' values except for 'down(2)'. It will show one of the values from the 'FcIfOperStatusReason' textual convention if 'fcTrunkIfOperStatus' is 'down(2)'.")
fcTrunkIfOperStatusCauseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTrunkIfOperStatusCauseDescr.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfOperStatusCauseDescr.setDescription("The description for the cause of current operational state of the port, shown by the object 'fcTrunkIfOperStatusCause'.")
fcIfLoginEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLoginEntryCount.setStatus('current')
if mibBuilder.loadTexts: fcIfLoginEntryCount.setDescription('The number of login entries in fcIfFLoginTable.')
fcIfFLoginTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5), )
if mibBuilder.loadTexts: fcIfFLoginTable.setStatus('current')
if mibBuilder.loadTexts: fcIfFLoginTable.setDescription('This table contains, one entry for each Nx_Port attached to a particular FC-port in this VSAN in the Fabric element. Each entry contains services parameters established from the most recent Fabric Login, explicit or implicit. In case of private devices attached to port, the fabric switch does the login on behalf of the private device. The fabric switch creates or deletes an entry in this table. Note: An FC-port may have one or more Nx_Port logged-in to it.')
fcIfFLoginEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FC-FE-MIB", "fcIfNxLoginIndex"))
if mibBuilder.loadTexts: fcIfFLoginEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfFLoginEntry.setDescription('An entry containing service parameters established by a successful Fabric Login to the port indicated by ifIndex.')
fcIfNxLoginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fcIfNxLoginIndex.setStatus('current')
if mibBuilder.loadTexts: fcIfNxLoginIndex.setDescription('An arbitrary value identifying the associated Nx_Port in the attachment for which the entry contains information.')
fcIfNxPortNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxPortNodeName.setStatus('current')
if mibBuilder.loadTexts: fcIfNxPortNodeName.setDescription('The world wide name of the Remote Node the logged-in Nx_Port belongs to.')
fcIfNxPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 3), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxPortName.setStatus('current')
if mibBuilder.loadTexts: fcIfNxPortName.setDescription('The world wide name of the logged-in Nx_Port.')
fcIfNxPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 4), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxPortAddress.setStatus('current')
if mibBuilder.loadTexts: fcIfNxPortAddress.setDescription('The address identifier that has been assigned to the logged-in Nx_Port.')
fcIfNxFcphVersionAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 5), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxFcphVersionAgreed.setStatus('current')
if mibBuilder.loadTexts: fcIfNxFcphVersionAgreed.setDescription('The version of FC-PH that the Fx_Port has agreed to support from the Fabric Login.')
fcIfNxRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxRxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfNxRxBbCredit.setDescription('The maximum number of receive buffers available for holding Class 2, Class 3 received from the logged-in Nx_Port. It is for buffer-to-buffer flow control in the incoming direction from the logged-in Nx_Port to FC-port.')
fcIfNxTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 7), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxTxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfNxTxBbCredit.setDescription('The total number of buffers available for holding Class 2, Class 3 frames to be transmitted to the logged-in Nx_Port. It is for buffer-to-buffer flow control in the direction from FC-Port to Nx_Port. The buffer-to-buffer flow control mechanism is indicated in the respective fcIfBbCreditModel.')
fcIfNxClass2RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 8), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass2RxDataFieldSize.setStatus('current')
if mibBuilder.loadTexts: fcIfNxClass2RxDataFieldSize.setDescription('The Class 2 Receive Data Field Size of the logged-in Nx_Port. This object specifies the largest Data Field Size for an FT_1 frame that can be received by the Nx_Port.')
fcIfNxClass3RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 9), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass3RxDataFieldSize.setStatus('current')
if mibBuilder.loadTexts: fcIfNxClass3RxDataFieldSize.setDescription('The Class 3 Receive Data Field Size of the logged-in Nx_Port. This object specifies the largest Data Field Size for an FT_1 frame that can be received by the Nx_Port.')
fcIfNxCosSuppAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 10), FcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxCosSuppAgreed.setStatus('current')
if mibBuilder.loadTexts: fcIfNxCosSuppAgreed.setDescription('The object indicating the classes of services that the logged-in Nx_Port has requested the FC-Port to support and the FC-Port has granted the request.')
fcIfNxClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass2SeqDelivAgreed.setStatus('current')
if mibBuilder.loadTexts: fcIfNxClass2SeqDelivAgreed.setDescription('The object indicating whether the FC-Port has agreed to support Class 2 sequential delivery during the Fabric Login. This is meaningful only if Class 2 service has been agreed. This object is applicable only to Fx_Ports.')
fcIfNxClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNxClass3SeqDelivAgreed.setStatus('current')
if mibBuilder.loadTexts: fcIfNxClass3SeqDelivAgreed.setDescription('The flag indicating whether the Fx_Port has agreed to support Class 3 sequential delivery during the Fabric Login. This is meaningful only if Class 3 service has been agreed. This object is applicable only to Fx_Ports.')
fcIfElpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6), )
if mibBuilder.loadTexts: fcIfElpTable.setStatus('current')
if mibBuilder.loadTexts: fcIfElpTable.setDescription('This table contains, one entry for each local Interconnect_Port that has performed Exchange Link Parameters Switch Fabric Internal Link Service exchange with its peer Interconnect_Port. Each entry contains Exchange Link Parameters established from the most recent ELP exchange between the 2 Interconnect_Port. The agent creates and deletes each entry in this table. The agent creates an entry in this table on a successful completion of a ELP exchange. Similarly the agent deletes the entry when the port goes down. NOTE: Port Channel ports are not represented in this table.')
fcIfElpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfElpEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfElpEntry.setDescription('An entry containing Exchange Link parameters established between the Interconnect_Port indicated by ifIndex and the peer Interconnect_Port indicated by fcIfElpNbrPortName.')
fcIfElpNbrNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 1), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpNbrNodeName.setStatus('current')
if mibBuilder.loadTexts: fcIfElpNbrNodeName.setDescription('The node world wide name of the peer Node.')
fcIfElpNbrPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpNbrPortName.setStatus('current')
if mibBuilder.loadTexts: fcIfElpNbrPortName.setDescription('The port world wide name of the peer Interconnect_Port.')
fcIfElpRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 3), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpRxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfElpRxBbCredit.setDescription('The maximum number of receive buffers available for holding Class 2, Class 3, Class F frames received from the peer Interconnect_Port. It is for buffer-to-buffer flow control in the incoming direction from the peer Interconnect_Port to local Interconnect_Port. The buffer-to-buffer flow control mechanism is indicated in the respective fcIfBbCreditModel.')
fcIfElpTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 4), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpTxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfElpTxBbCredit.setDescription('The total number of buffers available for holding Class 2, Class 3, Class F frames to be transmitted to the peer Interconnect_Port. It is for buffer-to-buffer flow control in the direction from the local Interconnect_Port to peer Interconnect_Port. The buffer-to-buffer flow control mechanism is indicated in the corresponding fcIfBbCreditModel.')
fcIfElpCosSuppAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 5), FcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpCosSuppAgreed.setStatus('current')
if mibBuilder.loadTexts: fcIfElpCosSuppAgreed.setDescription('The object indicating the classes of services that the peer Interconnect_Port has requested the local Interconnect_Port to support and the local Interconnect_Port has granted the request.')
fcIfElpClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass2SeqDelivAgreed.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClass2SeqDelivAgreed.setDescription('The object indicating whether the local Interconnect_Port has agreed to support Class 2 sequential delivery during the Exchange Link Parameters Switch Fabric Internal Link Service request. This is meaningful only if Class 2 service has been agreed.')
fcIfElpClass2RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 7), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass2RxDataFieldSize.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClass2RxDataFieldSize.setDescription('The Class 2 Receive Data Field Size of the peer Interconnect_Port. This object specifies the largest Data Field Size for an FT_1 frame that can be received by the Interconnect_Port. This is meaningful only if Class 2 service has been agreed.')
fcIfElpClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass3SeqDelivAgreed.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClass3SeqDelivAgreed.setDescription('The object indicating whether the local Interconnect_Port has agreed to support Class 3 sequential delivery during the Exchange Link Parameters Switch Fabric Internal Link Service request. This is meaningful only if Class 3 service has been agreed.')
fcIfElpClass3RxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 9), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClass3RxDataFieldSize.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClass3RxDataFieldSize.setDescription('The Class 3 Receive Data Field Size of the peer Interconnect_Port. This object specifies the largest Data Field Size for an FT_1 frame that can be received by the Interconnect_Port. This is meaningful only if Class 3 service has been agreed.')
fcIfElpClassFXII = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFXII.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClassFXII.setDescription('The object when true(1) indicates that the peer Interconnect_Port supplying this parameter requires that an interlock be used during X_ID assignment in Class F. This is meaningful only if Class F service has been agreed.')
fcIfElpClassFRxDataFieldSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 11), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFRxDataFieldSize.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClassFRxDataFieldSize.setDescription('The Class F Receive Data Field Size of the peer Interconnect_Port. Class F service is always agreed between two Interconnect_Ports, and thus this object is always meaningful. This object specifies the largest Data Field Size for an FT_1 frame that can be received by the Interconnect_Port.')
fcIfElpClassFConcurrentSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFConcurrentSeq.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClassFConcurrentSeq.setDescription('The object indicating the number of sequence status blocks provided by the Interconnect_Port supplying the parameters for tracking the progress of a sequence as a sequence recipient. The maximum number of concurrent sequences that can be specified is 255. A value of zero in this field is reserved.')
fcIfElpClassFEndToEndCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFEndToEndCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClassFEndToEndCredit.setDescription('The object indicating the maximum number of Class F data frames which can be transmitted by an Interconnect_Port without receipt of accompanying ACK or Link_Response frames. The minimum value of end-to-end credit is one. The end-to-end credit field specified is associated with the number of buffers available for holding the Data_Field of a Class F frame and processing the contents of that Data_Field by the Interconnect_Port supplying the parameters.')
fcIfElpClassFOpenSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfElpClassFOpenSeq.setStatus('current')
if mibBuilder.loadTexts: fcIfElpClassFOpenSeq.setDescription('The value of the open sequences per exchange shall specify the maximum number of sequences that can be open at one time at the recipient between a pair of Interconnect_Ports for one exchange. This value is used for exchange and sequence tracking.')
fcIfCapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7), )
if mibBuilder.loadTexts: fcIfCapTable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapTable.setDescription('This table contains, one entry for each FC-Port. It contains information describing about what each FC-port is inherently capable in its current configuration of operating or supporting. Entries in this table are created/deleted on an as-needed basis by the agent. This table shows the capability of this port hardware as currently configured. NOTE: This table has objects which represent the characteristics of a physical port. Thus, Port Channel ports are not represented in this table. The recommended method to get the current capability for the objects affected by the setting of fcIfPortRateMode is to inspect the relevant objects in whichever table corresponds to the value of fcIfPortRateMode. As a result, the relevant objects in this table have been deprecated.')
fcIfCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCapEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfCapEntry.setDescription('Each entry contains the Capability of a FC-Port.')
fcIfCapFcphVersionHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 1), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFcphVersionHigh.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFcphVersionHigh.setDescription('The highest version of FC-PH that the FC-Port is capable of supporting.')
fcIfCapFcphVersionLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 2), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFcphVersionLow.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFcphVersionLow.setDescription('The lowest version of FC-PH that the FC-Port is capable of supporting.')
fcIfCapRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 3), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditMax.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapRxBbCreditMax.setDescription('The maximum number of receive buffers the port hardware is capable of receiving from the attached Nx_Port. This object is applicable to ports operating in Fx mode.')
fcIfCapRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 4), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditMin.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapRxBbCreditMin.setDescription('The minimum number of receive buffers the port hardware is capable of receiving from the attached Nx_Port. This object is applicable to ports operating in Fx mode.')
fcIfCapRxDataFieldSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 5), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxDataFieldSizeMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapRxDataFieldSizeMax.setDescription('The maximum size in bytes of the Data Field in a frame that the FC-Port is capable of receiving from its attached FC-port.')
fcIfCapRxDataFieldSizeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 6), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxDataFieldSizeMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapRxDataFieldSizeMin.setDescription('The minimum size in bytes of the Data Field in a frame that the FC-Port is capable of receiving from its attached FC-port.')
fcIfCapCos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 7), FcClassOfServices()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapCos.setStatus('current')
if mibBuilder.loadTexts: fcIfCapCos.setDescription('The Bit mask indicating the set of Classes of Service that the FC-Port is capable of supporting.')
fcIfCapClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapClass2SeqDeliv.setStatus('current')
if mibBuilder.loadTexts: fcIfCapClass2SeqDeliv.setDescription('The flag indicating whether or not the FC-Port is capable of supporting Class 2 Sequential Delivery.')
fcIfCapClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapClass3SeqDeliv.setStatus('current')
if mibBuilder.loadTexts: fcIfCapClass3SeqDeliv.setDescription('The flag indicating whether or not the FC-Port is capable of supporting Class 3 Sequential Delivery.')
fcIfCapHoldTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 10), MicroSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapHoldTimeMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapHoldTimeMax.setDescription('The maximum holding time ( in microseconds ) that the FC-Port is capable of supporting.')
fcIfCapHoldTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 11), MicroSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapHoldTimeMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapHoldTimeMin.setDescription('The minimum holding time ( in microseconds ) that the FC-Port is capable of supporting.')
fcIfCapISLRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 12), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditMax.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditMax.setDescription('The maximum number of receive buffers the port hardware is capable of receiving from the attached Inter Connect port. This object is applicable to ports operating in xE_port mode.')
fcIfCapISLRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 13), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditMin.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditMin.setDescription('The minimum number of receive buffers the port hardware is capable of receiving from the attached xE_port or B_port. This object is applicable to ports operating in xE_port mode.')
fcIfCapRxBbCreditWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditWriteable.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapRxBbCreditWriteable.setDescription('The value indicating whether the port is capable of allowing the user to configure receive buffer to buffer credit. The values configured for the objects: fcIfAdminRxBbCredit, fcIfAdminRxBbCreditModeISL, fcIfAdminRxBbCreditModeFx will take effect only if the value of this object is true(1), otherwise the default values specified by the objects: fcIfCapRxBbCreditDefault, fcIfCapISLRxBbCreditDefault will stay in effect depending on the operating mode of the port.')
fcIfCapRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 15), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapRxBbCreditDefault.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapRxBbCreditDefault.setDescription('The default receive buffer-to-buffer credits if the port is operating in Fx mode.')
fcIfCapISLRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 16), FcBbCredit()).setUnits('buffers').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditDefault.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapISLRxBbCreditDefault.setDescription('The default receive buffer-to-buffer credits if the port is operating in xE_port mode.')
fcIfCapBbScnCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapBbScnCapable.setReference('FC-FS REV1_90 Section 15.6.2.5')
if mibBuilder.loadTexts: fcIfCapBbScnCapable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapBbScnCapable.setDescription("Indicates whether this interface is capable of handling buffer-to-buffer state change number. 'true' : capable of handling. 'false' : it is not capable of handling it.")
fcIfCapBbScnMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapBbScnMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapBbScnMax.setDescription('The maximum buffer-to-buffer state change number this interface can handle.')
fcIfCapOsmFrmCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmFrmCapable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmFrmCapable.setDescription("This value indicates whether this interface is capable to operate in different port rate modes. 'true' : the port is capable of being configured with the mode it is to operate in, e.g., a port which can operate in over subscription mode and full rate mode. 'false': the port rate mode cannot be changed. If the value of this object is 'true' then the fcIfCapOsmTable would show the values of the port when it operates in over subscribed mode and fcIfCapFrmTable would show the values when it operates in full rate mode. The currently configured mode is given by fcIfPortRateMode.")
fcIfIsServiceStateCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfIsServiceStateCapable.setStatus('current')
if mibBuilder.loadTexts: fcIfIsServiceStateCapable.setDescription("Indicates whether this interface is capable of handling service state change. 'true' : capable of changing the service state of the interface. This means that the user can configure the object fcIfServiceState on this interface. 'false' : not capable of a change in service state of the interface. The user cannot configure the object fcIfServiceState on this interface.")
fcIfIsPortRateModeCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfIsPortRateModeCapable.setStatus('current')
if mibBuilder.loadTexts: fcIfIsPortRateModeCapable.setDescription("Indicates whether this interface is capable of being configured in either of 'dedicated' or 'shared' port rate modes. 'true' : capable of changing the port rate mode of the interface. The user can configure the object fcIfAdminPortRateMode. 'false' : not capable of changing the port rate mode of the interface. The user cannot configure the object fcIfAdminPortRateMode.")
fcIfIsAdminRxBbCreditExtendedCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 7, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfIsAdminRxBbCreditExtendedCapable.setStatus('current')
if mibBuilder.loadTexts: fcIfIsAdminRxBbCreditExtendedCapable.setDescription("Indicates whether extended buffer-to-buffer credit feature can be enabled on a given interface. 'true' : capable of changing the extended buffer-to-buffer credits on the interface. The user can configure the object fcIfAdminRxBbCreditExtended on this interface. 'false' : not capable of changing the extended buffer-to-buffer credits on the interface. The user cannot configure the object fcIfAdminRxBbCreditExtended on this interface.")
adminTrunkProtocol = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTrunkProtocol.setStatus('current')
if mibBuilder.loadTexts: adminTrunkProtocol.setDescription("The object to either enable or disable the trunking protocol for the device. The trunking protocol is used for negotiating trunk mode and calculating operational VSANs on an EISL link. It also performs port VSAN consistency checks. On non-trunking ISL links, if the port VSANs are different, the E ports will be isolated. To avoid this isolation, this MIB variable should be set to 'disable(2)'. enable(1) - enables trunking protocol. disable (2) - disables the trunking protocol.")
fcIfElpRejectReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcIfElpRejectReasonCode.setReference('FC-SW-2 REV 4.9 Section 6.1.2')
if mibBuilder.loadTexts: fcIfElpRejectReasonCode.setStatus('current')
if mibBuilder.loadTexts: fcIfElpRejectReasonCode.setDescription('The reason code for the ELP reject.')
fcIfElpRejectReasonCodeExpl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fcIfElpRejectReasonCodeExpl.setReference('FC-SW-2 REV 4.9 Section 6.1.2')
if mibBuilder.loadTexts: fcIfElpRejectReasonCodeExpl.setStatus('current')
if mibBuilder.loadTexts: fcIfElpRejectReasonCodeExpl.setDescription('The reason code explanation for the ELP reject.')
fcIfCapOsmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11), )
if mibBuilder.loadTexts: fcIfCapOsmTable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmTable.setDescription('This table contains, one entry for each FC-Port which is capable of operating in over subscription port rate mode. It contains information describing about what each FC-port is inherently capable of operating or supporting in over subscription mode. Entries in this table are created/deleted on an as-needed basis by the agent. NOTE: This table has objects which represent the characteristics of a physical port. Thus, Port Channel ports are not represented in this table.')
fcIfCapOsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCapOsmEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmEntry.setDescription('Each entry contains the Capability of a FC-Port operating in over subscribed mode.')
fcIfCapOsmRxBbCreditWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditWriteable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditWriteable.setDescription('The value indicating whether the port operating in over subscribed mode is capable of allowing the user to configure receive buffer to buffer credit. The values configured for the objects: fcIfAdminRxBbCredit, fcIfAdminRxBbCreditModeISL, fcIfAdminRxBbCreditModeFx will take effect only if the value of this object is true(1), otherwise the default values specified by the objects: fcIfCapOsmRxBbCreditDefault, fcIfCapOsmISLRxBbCreditDefault will stay in effect depending on the operating mode of the port.')
fcIfCapOsmRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 2), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditMax.setDescription('The maximum number of receive buffers the port hardware is capable of receiving from the attached Nx_Port. This object is applicable to ports operating in Fx mode. .')
fcIfCapOsmRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 3), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditMin.setDescription('The minimum number of receive buffers the port hardware is capable of receiving from the attached Nx_Port. This object is applicable to ports operating in Fx mode.')
fcIfCapOsmRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 4), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxBbCreditDefault.setDescription('The default receive buffer-to-buffer credits if the port is operating in Fx mode.')
fcIfCapOsmISLRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditMax.setDescription('The maximum number of receive buffers the port hardware is capable of receiving from the attached Inter Connect port. This object is applicable to ports operating in inter switch link mode.')
fcIfCapOsmISLRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditMin.setDescription('The minimum number of receive buffers the port hardware is capable of receiving from the attached xE_port or B_port. This object is applicable to ports operating in inter switch link mode.')
fcIfCapOsmISLRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 7), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmISLRxBbCreditDefault.setDescription('The default receive buffer-to-buffer credits if the port is operating in inter switch link mode.')
fcIfCapOsmRxPerfBufWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufWriteable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufWriteable.setDescription('The value indicating whether the port is capable of allowing the user to configure receive performance buffers. The values configured for the objects: fcIfAdminRxPerfBuffer will take effect only if the value of this object is true(1), otherwise the default values specified by the objects: fcIfCapOsmRxPerfBufDefault, fcIfCapOsmISLRxPerfBufDefault will stay in effect depending on the operating mode of the port.')
fcIfCapOsmRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 9), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufMax.setDescription('The maximum number of performance buffers that can be configured for this port. The object is applicable to ports operating in Fx mode.')
fcIfCapOsmRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 10), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufMin.setDescription('The minimum number of performance buffers that can be configured for this port. The object is applicable to ports operating in Fx mode.')
fcIfCapOsmRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 11), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmRxPerfBufDefault.setDescription('The default performance buffers if the port is operating in Fx mode. The object is applicable to ports operating in Fx mode.')
fcIfCapOsmISLRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 12), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufMax.setDescription('The maximum number of performance buffers that can be configured for this port. This object is applicable to inter switch link ports.')
fcIfCapOsmISLRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 13), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufMin.setDescription('The minimum number of performance buffers that can be configured for this port. This object is applicable to inter switch link ports.')
fcIfCapOsmISLRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 11, 1, 14), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapOsmISLRxPerfBufDefault.setDescription('The default performance buffers if the port is operating as an inter switch link port.')
fcIfCapFrmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12), )
if mibBuilder.loadTexts: fcIfCapFrmTable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmTable.setDescription('This table contains, one entry for each FC-Port which is capable of operating in Full Rate mode. It contains information describing about what each FC-port is inherently capable of operating or supporting in full rate mode. Entries in this table are created/deleted on an as-needed basis by the agent. NOTE: This table has objects which represent the characteristics of a physical port. Thus, Port Channel ports are not represented in this table.')
fcIfCapFrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCapFrmEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmEntry.setDescription('Each entry contains the Capability of a FC-Port operating in Full Rate mode.')
fcIfCapFrmRxBbCreditWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditWriteable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditWriteable.setDescription('The value indicating whether the port operating in full rate mode is capable of allowing the user to configure receive buffer to buffer credit. The values configured for the objects: fcIfAdminRxBbCredit, fcIfAdminRxBbCreditModeISL, fcIfAdminRxBbCreditModeFx will take effect only if the value of this object is true(1), otherwise the default values specified by the objects: fcIfCapFrmRxBbCreditDefault, fcIfCapFrmISLRxBbCreditDefault will stay in effect depending on the operating mode of the port.')
fcIfCapFrmRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 2), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditMax.setDescription('The maximum number of receive buffers the port hardware is capable of receiving from the attached Nx_Port. This object is applicable to ports operating in Fx mode.')
fcIfCapFrmRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 3), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditMin.setDescription('The minimum number of receive buffers the port hardware is capable of receiving from the attached Nx_Port. This object is applicable to ports operating in Fx mode.')
fcIfCapFrmRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 4), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxBbCreditDefault.setDescription('The default receive buffer-to-buffer credits if the port is operating in Fx mode.')
fcIfCapFrmISLRxBbCreditMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditMax.setDescription('The maximum number of receive buffers the port hardware is capable of receiving from the attached Inter Connect port. This object is applicable to ports operating in inter switch link mode.')
fcIfCapFrmISLRxBbCreditMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditMin.setDescription('The minimum number of receive buffers the port hardware is capable of receiving from the attached xE_port or B_port. This object is applicable to ports operating in inter switch link mode.')
fcIfCapFrmISLRxBbCreditDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 7), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmISLRxBbCreditDefault.setDescription('The default receive buffer-to-buffer credits if the port is operating in inter switch link mode.')
fcIfCapFrmRxPerfBufWriteable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufWriteable.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufWriteable.setDescription('The value indicating whether the port is capable of allowing the user to configure receive performance buffers. The values configured for the objects: fcIfAdminRxPerfBuffer will take effect only if the value of this object is true(1), otherwise the default values specified by the objects: fcIfCapFrmRxPerfBufDefault, fcIfCapFrmISLRxPerfBufDefault will stay in effect depending on the operating mode of the port.')
fcIfCapFrmRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 9), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufMax.setDescription('The maximum number of performance buffers that can be configured for this port. The object is applicable to ports operating in Fx mode.')
fcIfCapFrmRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 10), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufMin.setDescription('The minimum number of performance buffers that can be configured for this port. The object is applicable to ports operating in Fx mode.')
fcIfCapFrmRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 11), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmRxPerfBufDefault.setDescription('The default performance buffers if the port is operating in Fx mode. The object is applicable to ports operating in Fx mode.')
fcIfCapFrmISLRxPerfBufMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 12), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufMax.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufMax.setDescription('The maximum number of performance buffers that can be configured for this port. This object is applicable to inter switch link ports.')
fcIfCapFrmISLRxPerfBufMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 13), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufMin.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufMin.setDescription('The minimum number of performance buffers that can be configured for this port. This object is applicable to inter switch link ports.')
fcIfCapFrmISLRxPerfBufDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 12, 1, 14), FcPerfBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufDefault.setStatus('current')
if mibBuilder.loadTexts: fcIfCapFrmISLRxPerfBufDefault.setDescription('The default performance buffers if the port is operating as an inter switch link port.')
fcIfRNIDInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13), )
if mibBuilder.loadTexts: fcIfRNIDInfoTable.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoTable.setDescription('A table listing the peer node identification data per port per VSAN.')
fcIfRNIDInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: fcIfRNIDInfoEntry.setReference('FC-SB-3 rev 1.6, Section 6.3.8.')
if mibBuilder.loadTexts: fcIfRNIDInfoEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoEntry.setDescription('Each entry provides node identification data of the peer. This data is got through performing request-node-identification-data(RNID) extended link service. The table would have entry for each port, identified by ifIndex, on this VSAN, identified by vsanIndex. This table would hold entries only for physical FC ports, FC port channel ports and FCIP ports.')
fcIfRNIDInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2), ("old", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfRNIDInfoStatus.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoStatus.setDescription('This object specifies the status of the row, is valid, invalid or old. The only value that can be assigned by the Network Management System(NMS) is invalid(2). The NMS cannot set this object to any other value (i.e valid (1) or old(3) ).')
fcIfRNIDInfoTypeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoTypeNumber.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoTypeNumber.setDescription('The type number of the peer node. For example the type number could be 002105.')
fcIfRNIDInfoModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoModelNumber.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoModelNumber.setDescription('The model number of the peer node. For example the model number could be F20.')
fcIfRNIDInfoManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoManufacturer.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoManufacturer.setDescription('The name of the the company that manufactured the peer node. For example the Manufacturer info could be HTC.')
fcIfRNIDInfoPlantOfMfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoPlantOfMfg.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoPlantOfMfg.setDescription('The plant code that identifies the plant of manufacture of the peer node. For example the plant code of manufacture could be 00.')
fcIfRNIDInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoSerialNumber.setDescription('The sequence number assigned to the peer node during manufacturing. For example the serial number could be 000000023053.')
fcIfRNIDInfoUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("channel", 1), ("controlUnit", 2), ("fabric", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoUnitType.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoUnitType.setDescription("The type of the peer node that this port is communicating. channel - Host controlUnit - Disk fabric - Another SAN switch unknown - if fcIfRNIDInfoStatus is 'invalid' this would be unknown.")
fcIfRNIDInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRNIDInfoPortId.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoPortId.setDescription('The identifier of the port in the peer node connected to this port. If the peer node is a channel, as described by the instance of fcIfRNIDInfoUnitType, then fcIfRNIDInfoPortId will be the CHPID (Channel Path Identifier) of the channel path that contains the port in the peer node connected to this port. If the peer node is controlUnit, then fcIfRNIDInfoPortId will be 0. If the peer node is fabric, then fcIfRNIDInfoPortId will be port address of the port in peer node connected to this port.')
fcIfGigETable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14), )
if mibBuilder.loadTexts: fcIfGigETable.setStatus('current')
if mibBuilder.loadTexts: fcIfGigETable.setDescription("This table contains one entry per fibre channel switch Gigabit Ethernet (GigE) interface. This table also provides an easy way to find out whether a GigE interface is part of an port channel or not. The table is indexed by the 'ifIndex' of the GigE port in the fiber channel switch.")
fcIfGigEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfGigEEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfGigEEntry.setDescription('Each entry contains GigE port configuration and state information.')
fcIfGigEPortChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfGigEPortChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: fcIfGigEPortChannelIfIndex.setDescription('The ifIndex of the ether channel port this GigE port belongs to. A value of zero indicates that this GigE port is not part of any port channel. For port channel port this object will have the ifIndex of the port channel port itself.')
fcIfGigEAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfGigEAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: fcIfGigEAutoNegotiate.setDescription('This object Indicates whether auto-negotiation (of speed and duplex mode) should be used on this interface.')
fcIfGigEBeaconMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfGigEBeaconMode.setStatus('current')
if mibBuilder.loadTexts: fcIfGigEBeaconMode.setDescription("In Beacon mode, an interface LED is put into flashing mode for easy identification of a particular interface. The Beacon mode configured by the user. If 'true', the Beacon mode is enabled. If 'false', the beacon mode is disabled.")
fcIfGigConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 14, 1, 4), FcPortModuleTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfGigConnectorType.setStatus('current')
if mibBuilder.loadTexts: fcIfGigConnectorType.setDescription('The module type of the port connector. Since this is a characteristic of a physical port, this object is not applicable for Port Channel ports, i.e., the value is instantiated but its value is irrelevant.')
fcIfModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15), )
if mibBuilder.loadTexts: fcIfModuleTable.setStatus('current')
if mibBuilder.loadTexts: fcIfModuleTable.setDescription('This table is used for configuring the module specific features for Fibre Channel modules (or whatever equivalent).')
fcIfModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: fcIfModuleEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfModuleEntry.setDescription('An entry in fcIfModuleTable. Each entry represents the module specific attributes.')
fcIfModuleOverSubscriptionRatioConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfModuleOverSubscriptionRatioConfig.setStatus('current')
if mibBuilder.loadTexts: fcIfModuleOverSubscriptionRatioConfig.setDescription('This object helps the user to control the restriction on oversubscription ratio on modules that support it. enable(1) - Enables the restriction on oversubscription ratio disable(2) - Disables the restriction on oversubscription ratio By default, the restriction on oversubscription ratio is enabled. If the user configures this object to disable (2), all the interfaces on the module are capable of operating at maximum admin speed, given by fcIfAdminSpeed, regardless of the available bandwidth.')
fcIfModuleBandwidthFairnessConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfModuleBandwidthFairnessConfig.setStatus('current')
if mibBuilder.loadTexts: fcIfModuleBandwidthFairnessConfig.setDescription("This object helps the user to control bandwidth fairness on modules that support it. enable(1) - Enables the bandwidth fairness disable(2) - Disables the bandwidth fairness By default, bandwidth fairness is enabled for a module. If the user configures this object to disable (2), fair bandwidth provisioning will not be guaranteed for interfaces with fcIfPortRadeMode equal to 'dedicated'.")
fcIfModuleBandwidthFairnessOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfModuleBandwidthFairnessOper.setStatus('current')
if mibBuilder.loadTexts: fcIfModuleBandwidthFairnessOper.setDescription('The operational status of bandwidth fairness on the module. enabled(1) - Bandwidth fairness is enabled on the module disabled(2) - Bandwidth fairness is disabled on the module')
fcIfModuleXcvrFrequencyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("xcvrFreqX2FC", 2), ("xcvrFreqX2Eth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfModuleXcvrFrequencyConfig.setReference('IEEE Std 802.3ae, ANSI 10GFC Rev 4.0')
if mibBuilder.loadTexts: fcIfModuleXcvrFrequencyConfig.setStatus('current')
if mibBuilder.loadTexts: fcIfModuleXcvrFrequencyConfig.setDescription('This object specifies the transceiver frequency of this module. notApplicable(1) - This value is read-only and is always returned for module which does not support this configuration. xcvrFreqX2FC(2) - Sets the object to 10G FC transceiver frequency. xcvrFreqX2Eth(3) - Sets the object to 10G Ethernet transceiver frequency.')
fcIfToggleCtrlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16), )
if mibBuilder.loadTexts: fcIfToggleCtrlConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfToggleCtrlConfigTable.setDescription('This table contains one entry per fibre channel interface. In certain scenarios, when an interface in a system transitions to a down state, it is likely for the interface to keep toggling and flapping between up and down states continuously. The objects in each entry of this table help in controlling such behaviour on an interface by stopping such frequent transitions and holding the interface in down state, if a stipulated number of such toggles happen in a given duration, as described in the objects.')
fcIfToggleCtrlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfToggleCtrlConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfToggleCtrlConfigEntry.setDescription('An entry in the fcIfToggleCtrlConfigTable.')
fcIfToggleCtrlConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigEnable.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfToggleCtrlConfigEnable.setDescription("This object specifies if an interface can be stopped from toggling between up and down states or allowed to toggle continuously. If 'true', the interface will be stopped from toggling between up and down states. If 'false', the interface will be allowed to toggle continuously.")
fcIfToggleCtrlConfigReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notApplicable", 1), ("linkFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigReason.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfToggleCtrlConfigReason.setDescription("This object indicates the reason for which a port can be allowed to toggle between up and down states. notApplicable (1) - this reason is displayed when fcIfToggleCtrlConfigEnable is 'false'. linkFailure (2) - physical link failure.")
fcIfToggleCtrlConfigDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigDuration.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfToggleCtrlConfigDuration.setDescription("This object specifies the time duration in which the port is allowed to toggle as many as the number of times given by fcIfToggleCtrlConfigNumFlaps. When fcIfToggleCtrlConfigEnable is 'false', this object does not take effect and its value cannot be changed.")
fcIfToggleCtrlConfigNumFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 16, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfToggleCtrlConfigNumFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfToggleCtrlConfigNumFlaps.setDescription("This object specifies the number of times a port can flap in the duration given by fcIfToggleCtrlConfigDuration. When fcIfToggleCtrlConfigEnable is 'false', this object does not take effect and its value cannot be changed.")
fcIfFlapCtrlConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17), )
if mibBuilder.loadTexts: fcIfFlapCtrlConfigTable.setStatus('current')
if mibBuilder.loadTexts: fcIfFlapCtrlConfigTable.setDescription('In certain scenarios, when an interface in a system transitions to a down state due to a particular reason, it is likely for the interface to keep flapping between up and down states continuously. The objects in each entry of this table help in controlling such behaviour on an interface by stopping such frequent transitions and holding the interface in down state, if a stipulated number of such toggles happen in a given duration, as described in the objects. Per each reason for which the interface flaps, an entry in this table can be used to configure the following: whether or not the flapping should be controlled on the interface, the allowed number of flaps and the allowed duration before the interface is held in down state.')
fcIfFlapCtrlConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1), ).setIndexNames((0, "CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigReason"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfFlapCtrlConfigEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfFlapCtrlConfigEntry.setDescription('An entry in the fcIfFlapCtrlConfigTable.')
fcIfFlapCtrlConfigReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("linkFailure", 1), ("trustSecViolation", 2), ("bitErrorRate", 3), ("signalLoss", 4), ("syncLoss", 5), ("linkReset", 6), ("creditLoss", 7))))
if mibBuilder.loadTexts: fcIfFlapCtrlConfigReason.setStatus('current')
if mibBuilder.loadTexts: fcIfFlapCtrlConfigReason.setDescription('This object indicates the reason for which a port can be allowed to toggle between up and down states. linkFailure (1) - physical link failure. trustSecViolation (2) - Cisco Trusted Security violation. bitErrorRate (3) - bit error rate threshold exceeded. signalLoss (4) - link failure due to loss of signal. syncLoss (5) - link failure due to loss of sync. linkReset (6) - link failure due to link reset. creditLoss (7) - link failure due to excessive credit loss indications.')
fcIfFlapCtrlConfigEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFlapCtrlConfigEnable.setStatus('current')
if mibBuilder.loadTexts: fcIfFlapCtrlConfigEnable.setDescription("This object specifies if an interface can be stopped from toggling between up and down states or allowed to toggle continuously. If 'true', the interface will be stopped from toggling between up and down states. If 'false', the interface will be allowed to toggle continuously.")
fcIfFlapCtrlConfigDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFlapCtrlConfigDuration.setStatus('current')
if mibBuilder.loadTexts: fcIfFlapCtrlConfigDuration.setDescription("This object specifies the time duration in which the port is allowed to toggle as many as the number of times given by fcIfFlapCtrlConfigNumFlaps. When fcIfFlapCtrlConfigEnable is 'false', this object does not take effect and its value cannot be changed.")
fcIfFlapCtrlConfigNumFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 1, 17, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcIfFlapCtrlConfigNumFlaps.setStatus('current')
if mibBuilder.loadTexts: fcIfFlapCtrlConfigNumFlaps.setDescription("This object specifies the number of times a port can flap in the duration given by fcIfFlapCtrlConfigDuration. When fcIfFlapCtrlConfigEnable is 'false', this object does not take effect and its value cannot be changed.")
fcIfErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1), )
if mibBuilder.loadTexts: fcIfErrorTable.setStatus('current')
if mibBuilder.loadTexts: fcIfErrorTable.setDescription('This table contains, one entry for each fabric channel port( including any Port Channel ports ). It contains counters that record the errors detected. This table is an extension to interfaces group defined in IF-MIB. It contains additional errors specific to this device.')
fcIfErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfErrorEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfErrorEntry.setDescription('Each entry contains error counters of a fabric channel port.')
fcIfLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLinkFailures.setReference('FC-PH REV 4.3 Section 29.3.1')
if mibBuilder.loadTexts: fcIfLinkFailures.setStatus('current')
if mibBuilder.loadTexts: fcIfLinkFailures.setDescription('The number of link failures detected by the FC-Port.')
fcIfSyncLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSyncLosses.setReference('FC-PH REV 4.3 Section 12.1.3.1')
if mibBuilder.loadTexts: fcIfSyncLosses.setStatus('current')
if mibBuilder.loadTexts: fcIfSyncLosses.setDescription('The number of loss of synchronization failures detected by the FC-Port.')
fcIfSigLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfSigLosses.setReference('FC-PH REV 4.3 Section 12.1.3.4')
if mibBuilder.loadTexts: fcIfSigLosses.setStatus('current')
if mibBuilder.loadTexts: fcIfSigLosses.setDescription('The number of signal losses detected by the FC-Port.')
fcIfPrimSeqProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfPrimSeqProtoErrors.setReference('FC-PH REV 4.3 Section 29.3.3')
if mibBuilder.loadTexts: fcIfPrimSeqProtoErrors.setStatus('current')
if mibBuilder.loadTexts: fcIfPrimSeqProtoErrors.setDescription('The number of primitive sequence protocol errors detected by the FC-Port.')
fcIfInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfInvalidTxWords.setReference('FC-PH REV 4.3 Section 12.1.3.1')
if mibBuilder.loadTexts: fcIfInvalidTxWords.setStatus('current')
if mibBuilder.loadTexts: fcIfInvalidTxWords.setDescription('The number of invalid transmission words detected by the FC-Port.')
fcIfInvalidCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfInvalidCrcs.setReference('FC-PH REV 4.3 Section 29.8')
if mibBuilder.loadTexts: fcIfInvalidCrcs.setStatus('current')
if mibBuilder.loadTexts: fcIfInvalidCrcs.setDescription('The number of invalid CRCs detected by the FC-Port. Loop ports should not count CRC errors passing through when monitoring.')
fcIfDelimiterErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfDelimiterErrors.setReference('FC-PH REV 4.3 Section 29.9')
if mibBuilder.loadTexts: fcIfDelimiterErrors.setStatus('current')
if mibBuilder.loadTexts: fcIfDelimiterErrors.setDescription('The number of Delimiter Errors detected by the FC-Port.')
fcIfAddressIdErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfAddressIdErrors.setReference('FC-PH REV 4.3 Section 29.9')
if mibBuilder.loadTexts: fcIfAddressIdErrors.setStatus('current')
if mibBuilder.loadTexts: fcIfAddressIdErrors.setDescription('The number of address identifier errors detected by the FC-Port.')
fcIfLinkResetIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLinkResetIns.setReference('FC-PH REV 4.3 Section 29.4')
if mibBuilder.loadTexts: fcIfLinkResetIns.setStatus('current')
if mibBuilder.loadTexts: fcIfLinkResetIns.setDescription('The number of link reset protocol errors received by the FC-Port from the attached FC-port.')
fcIfLinkResetOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLinkResetOuts.setReference('FC-PH REV 4.3 Section 29.4')
if mibBuilder.loadTexts: fcIfLinkResetOuts.setStatus('current')
if mibBuilder.loadTexts: fcIfLinkResetOuts.setDescription('The number of link reset protocol errors issued by the FC-Port to the attached FC-Port.')
fcIfOlsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOlsIns.setReference('FC-PH REV 4.3 Section 16.4.3')
if mibBuilder.loadTexts: fcIfOlsIns.setStatus('current')
if mibBuilder.loadTexts: fcIfOlsIns.setDescription('The number of Offline Sequence errors received by the FC-Port.')
fcIfOlsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOlsOuts.setReference('FC-PH REV 4.3 Section 16.4.3')
if mibBuilder.loadTexts: fcIfOlsOuts.setStatus('current')
if mibBuilder.loadTexts: fcIfOlsOuts.setDescription('The number of Offline Sequence errors issued by the FC-Port.')
fcIfRuntFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfRuntFramesIn.setStatus('current')
if mibBuilder.loadTexts: fcIfRuntFramesIn.setDescription('The number of frames received by the FC-port that are shorter than the minimum allowable frame length regardless if the CRC is good or not.')
fcIfJabberFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfJabberFramesIn.setStatus('current')
if mibBuilder.loadTexts: fcIfJabberFramesIn.setDescription('The number of frames received by the FC-port that are longer than a maximum frame length and also have a CRC error.')
fcIfTxWaitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTxWaitCount.setStatus('current')
if mibBuilder.loadTexts: fcIfTxWaitCount.setDescription('The number of times the FC-port waited due to lack of transmit credits.')
fcIfFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramesTooLong.setStatus('current')
if mibBuilder.loadTexts: fcIfFramesTooLong.setDescription('The number of frames received by the FC-port where the frame length was greater than what was agreed to in FLOGI/PLOGI. This could be caused by losing the end of frame delimiter.')
fcIfFramesTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramesTooShort.setStatus('current')
if mibBuilder.loadTexts: fcIfFramesTooShort.setDescription('The number of frames received by the FC-port where the frame length was less than the minimum indicated by the frame header (normally 24 bytes), but it could be more if the DFCTL field indicates an optional header should be present.')
fcIfLRRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLRRIn.setReference('FC-PH REV 4.3 Section 16.4.5')
if mibBuilder.loadTexts: fcIfLRRIn.setStatus('current')
if mibBuilder.loadTexts: fcIfLRRIn.setDescription('The number of Link reset responses received by the FC-port.')
fcIfLRROut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLRROut.setReference('FC-PH REV 4.3 Section 16.4.5')
if mibBuilder.loadTexts: fcIfLRROut.setStatus('current')
if mibBuilder.loadTexts: fcIfLRROut.setDescription('The number of Link reset responses transmitted by the FC-port.')
fcIfNOSIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNOSIn.setReference('FC-PH REV 4.3 Section 16.4.2')
if mibBuilder.loadTexts: fcIfNOSIn.setStatus('current')
if mibBuilder.loadTexts: fcIfNOSIn.setDescription('The number of non-operational sequences received by the FC-port.')
fcIfNOSOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNOSOut.setReference('FC-PH REV 4.3 Section 16.4.2')
if mibBuilder.loadTexts: fcIfNOSOut.setStatus('current')
if mibBuilder.loadTexts: fcIfNOSOut.setDescription('The number of non-operational sequences transmitted by the FC-port.')
fcIfFragFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFragFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfFragFrames.setDescription('The number of fragmented frames received by the FC-port.')
fcIfEOFaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfEOFaFrames.setReference('FC-PH REV 4.3 Section 17.6.3')
if mibBuilder.loadTexts: fcIfEOFaFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfEOFaFrames.setDescription('The number of frames received by FC-port with EOF aborts.')
fcIfUnknownClassFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfUnknownClassFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfUnknownClassFrames.setDescription('The number of unknown class frames received by FC-port.')
fcIf8b10bDisparityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIf8b10bDisparityErrors.setStatus('current')
if mibBuilder.loadTexts: fcIf8b10bDisparityErrors.setDescription('The number of 8b10b disparity errors.')
fcIfFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramesDiscard.setStatus('current')
if mibBuilder.loadTexts: fcIfFramesDiscard.setDescription('The number of frames discarded by the FC-port.')
fcIfELPFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfELPFailures.setReference('FC-PH REV 4.3 Section 29.3.1')
if mibBuilder.loadTexts: fcIfELPFailures.setStatus('current')
if mibBuilder.loadTexts: fcIfELPFailures.setDescription('The number of Exchange Link Parameters Switch Fabric Internal Link service request failures detected by the FC-Port. This object is applicable to only Interconnect_Port, which are E_Port or B_Port.')
fcIfBBCreditTransistionFromZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBBCreditTransistionFromZero.setStatus('current')
if mibBuilder.loadTexts: fcIfBBCreditTransistionFromZero.setDescription('fcIfBBCreditTransistionFromZero increments if the transmit b2b credit is zero')
fcIfEISLFramesDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfEISLFramesDiscard.setStatus('current')
if mibBuilder.loadTexts: fcIfEISLFramesDiscard.setDescription('The number of Enhanced Inter Switch Link (EISL) frames discarded by the FC-port. EISL frames carry an EISL header containing VSAN among other information.')
fcIfFramingErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFramingErrorFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfFramingErrorFrames.setDescription('The number of framing errors. This denotes that the FC-port detected an inconsistency of frame structure.')
fcIfLipF8In = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLipF8In.setReference('FC-FS Rev 1.90 Section 5.5.4, and FC-AL-2.')
if mibBuilder.loadTexts: fcIfLipF8In.setStatus('current')
if mibBuilder.loadTexts: fcIfLipF8In.setDescription("The number of 'F8' (LIP(F8,x)) type of Loop failures - Loop Initialization Primitive Sequence (LIP) errors received by the FC-Port from the attached FC-port.")
fcIfLipF8Out = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfLipF8Out.setReference('FC-FS Rev 1.90 Section 5.5.4, and FC-AL-2.')
if mibBuilder.loadTexts: fcIfLipF8Out.setStatus('current')
if mibBuilder.loadTexts: fcIfLipF8Out.setDescription("The number of 'F8' (LIP(F8,x)) type of Loop failures - Loop Initialization Primitive Sequence (LIP) errors issued by the FC-Port to the attached FC-Port.")
fcIfNonLipF8In = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNonLipF8In.setReference('FC-FS Rev 1.90 Section 5.5.4, and FC-AL-2.')
if mibBuilder.loadTexts: fcIfNonLipF8In.setStatus('current')
if mibBuilder.loadTexts: fcIfNonLipF8In.setDescription("The number of Non 'F8' (LIP(F8,x)) type of Loop failures - Loop Initialization Primitive Sequence (LIP) errors received by the FC-Port from the attached FC-port.")
fcIfNonLipF8Out = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfNonLipF8Out.setReference('FC-FS Rev 1.90 Section 5.5.4, and FC-AL-2.')
if mibBuilder.loadTexts: fcIfNonLipF8Out.setStatus('current')
if mibBuilder.loadTexts: fcIfNonLipF8Out.setDescription("The number of Non 'F8' (LIP(F8,x)) type of Loop failures - Loop Initialization Primitive Sequence (LIP) errors issued by the FC-Port to the attached FC-Port.")
fcIfTimeOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTimeOutDiscards.setStatus('current')
if mibBuilder.loadTexts: fcIfTimeOutDiscards.setDescription('The number of packets that are dropped due to time-out at the FC-port or due to the FC-port going offline.')
fcIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: fcIfOutDiscards.setDescription('The total number of packets that are discarded in the egress side of the FC-port.')
fcIfCreditLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCreditLoss.setStatus('current')
if mibBuilder.loadTexts: fcIfCreditLoss.setDescription('The number of link reset has occurred due to unavailable credits from the peer side of the link.')
fcIfTxWtAvgBBCreditTransitionToZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfTxWtAvgBBCreditTransitionToZero.setStatus('current')
if mibBuilder.loadTexts: fcIfTxWtAvgBBCreditTransitionToZero.setDescription('fcIfTxWtAvgBBCreditTransitionToZero increments if the credit available is zero for 100 ms.')
fcIfBBCreditTransistionToZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfBBCreditTransistionToZero.setStatus('current')
if mibBuilder.loadTexts: fcIfBBCreditTransistionToZero.setDescription('fcIfBBCreditTransistionToZero increments if the receive b2b credit is zero')
fcHCIfBBCreditTransistionFromZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHCIfBBCreditTransistionFromZero.setStatus('current')
if mibBuilder.loadTexts: fcHCIfBBCreditTransistionFromZero.setDescription('fcHCIfBBCreditTransistionFromZero increments if the transmit b2b credit is zero.')
fcHCIfBBCreditTransistionToZero = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcHCIfBBCreditTransistionToZero.setStatus('current')
if mibBuilder.loadTexts: fcHCIfBBCreditTransistionToZero.setDescription('fcHCIfBBCreditTransistionToZero increments if the receive b2b credit is zero.')
fcIfFECCorrectedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFECCorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: fcIfFECCorrectedBlks.setDescription('The number of blocks corrected by FEC decoder.')
fcIfFECUncorrectedBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfFECUncorrectedBlks.setStatus('current')
if mibBuilder.loadTexts: fcIfFECUncorrectedBlks.setDescription('The number of blocks FEC decoder was unable to correct.')
fcIfC2AccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2), )
if mibBuilder.loadTexts: fcIfC2AccountingTable.setStatus('current')
if mibBuilder.loadTexts: fcIfC2AccountingTable.setDescription('This table contains, one entry for each F, FL or TL ports in the fabric element, including Port Channel ports. It contains Class 2 accounting information.')
fcIfC2AccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfC2AccountingEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfC2AccountingEntry.setDescription('Each entry contains Class 2 accounting information for each F, FL or TL port.')
fcIfC2InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2InFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC2InFrames.setDescription('The number of Class 2 frames received by this port from its attached Nx_Port.')
fcIfC2OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2OutFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC2OutFrames.setDescription('The number of Class 2 frames delivered through this port to its attached Nx_Port.')
fcIfC2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2InOctets.setStatus('current')
if mibBuilder.loadTexts: fcIfC2InOctets.setDescription('The number of Class 2 frame octets, including the frame delimiters, received by this port from its attached Nx_Port.')
fcIfC2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2OutOctets.setStatus('current')
if mibBuilder.loadTexts: fcIfC2OutOctets.setDescription('The number of Class 2 frame octets, including the frame delimiters, delivered through this port to its attached Nx_Port.')
fcIfC2Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2Discards.setStatus('current')
if mibBuilder.loadTexts: fcIfC2Discards.setDescription('The number of Class 2 frames discarded by this port.')
fcIfC2FbsyFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2FbsyFrames.setReference('FC-PH REV 4.3 Section 20.3.3.1')
if mibBuilder.loadTexts: fcIfC2FbsyFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC2FbsyFrames.setDescription('The number of F_BSY frames generated by this port against Class 2 frames.')
fcIfC2FrjtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2FrjtFrames.setReference('FC-PH REV 4.3 Section 20.3.3.3')
if mibBuilder.loadTexts: fcIfC2FrjtFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC2FrjtFrames.setDescription('The number of F_RJT frames generated by this port against Class 2 frames.')
fcIfC2PBSYFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2PBSYFrames.setReference('FC-PH REV 4.3 Section 29.9.2')
if mibBuilder.loadTexts: fcIfC2PBSYFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC2PBSYFrames.setDescription('The number of times that port busy was returned to this port as result of a class 2 frame that could not be delivered to the other end of the link. This occurs if the destination Nx_Port is temporarily busy. PBSY can only occur on SOFc1 frames ( the frames that establish a connection ).')
fcIfC2PRJTFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC2PRJTFrames.setReference('FC-PH REV 4.3 Section 29.9.2')
if mibBuilder.loadTexts: fcIfC2PRJTFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC2PRJTFrames.setDescription('The number of times that port reject was returned to this port as a result of a class 2 frame that was rejected at the destination Nx_Port.')
fcIfC3AccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3), )
if mibBuilder.loadTexts: fcIfC3AccountingTable.setStatus('current')
if mibBuilder.loadTexts: fcIfC3AccountingTable.setDescription('This table contains, one entry for each F, FL or TL ports in the fabric element, including Port Channel ports. It contains Class 3 accounting information.')
fcIfC3AccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfC3AccountingEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfC3AccountingEntry.setDescription('Each entry contains Class 3 accounting information for each F, FL or TL port.')
fcIfC3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3InFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC3InFrames.setDescription('The number of Class 3 frames received by this port from its attached Nx_Port.')
fcIfC3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3OutFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfC3OutFrames.setDescription('The number of Class 3 frames transmitted by this port to its attached Nx_Port.')
fcIfC3InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3InOctets.setStatus('current')
if mibBuilder.loadTexts: fcIfC3InOctets.setDescription('The number of Class 3 frame octets, including the frame delimiters, received by this port from its attached Nx_Port.')
fcIfC3OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3OutOctets.setStatus('current')
if mibBuilder.loadTexts: fcIfC3OutOctets.setDescription('The number of Class 3 frame octets, including the frame delimiters, transmitted by this port to its a attached Nx_Port.')
fcIfC3Discards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfC3Discards.setStatus('current')
if mibBuilder.loadTexts: fcIfC3Discards.setDescription('The number of Class 3 frames discarded by this port.')
fcIfCfAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4), )
if mibBuilder.loadTexts: fcIfCfAccountingTable.setStatus('current')
if mibBuilder.loadTexts: fcIfCfAccountingTable.setDescription('A table that contains, one entry for each Interconnect_Ports (xE_port, B_port) in the fabric element, including Port Channel ports. It contains Class F accounting information.')
fcIfCfAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfCfAccountingEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfCfAccountingEntry.setDescription('An entry containing Class F accounting information for each xE_port.')
fcIfCfInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfInFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfCfInFrames.setDescription('The number of Class F frames received by this port.')
fcIfCfOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfOutFrames.setStatus('current')
if mibBuilder.loadTexts: fcIfCfOutFrames.setDescription('The number of Class F frames transmitted by this port.')
fcIfCfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfInOctets.setStatus('current')
if mibBuilder.loadTexts: fcIfCfInOctets.setDescription('The number of Class F frame octets, including the frame delimiters, received by this port from its attached Nx_Port.')
fcIfCfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfOutOctets.setStatus('current')
if mibBuilder.loadTexts: fcIfCfOutOctets.setDescription('The number of Class F frame octets, including the frame delimiters, transmitted by this port to its a attached Nx_Port.')
fcIfCfDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCfDiscards.setStatus('current')
if mibBuilder.loadTexts: fcIfCfDiscards.setDescription('The number of Class F frames discarded by this port.')
fcIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5), )
if mibBuilder.loadTexts: fcIfStatTable.setStatus('current')
if mibBuilder.loadTexts: fcIfStatTable.setDescription('A table that contains, one entry for each physical fibre channel port. It contains statistics information.')
fcIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fcIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: fcIfStatEntry.setDescription('An entry containing statistics information for each fibre channel port.')
fcIfCurrRxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5, 1, 1), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCurrRxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfCurrRxBbCredit.setDescription('The current value of receive buffer-to-buffer credits for this port.')
fcIfCurrTxBbCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 2, 5, 1, 2), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcIfCurrTxBbCredit.setStatus('current')
if mibBuilder.loadTexts: fcIfCurrTxBbCredit.setDescription('The current value of transmit buffer-to-buffer credits for this port.')
fcTrunkIfDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 1)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfOperStatus"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCauseDescr"))
if mibBuilder.loadTexts: fcTrunkIfDownNotify.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfDownNotify.setDescription('This notification is generated by the agent whenever the fcTrunkifOperStatus object for this trunk interface is about to enter the down state from some other state. This other state is indicated by the included value of fcTrunkifOperStatus.')
fcTrunkIfUpNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 2)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfOperStatus"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCauseDescr"))
if mibBuilder.loadTexts: fcTrunkIfUpNotify.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfUpNotify.setDescription('This notification is generated by the agent whenever the fcTrunkifOperStatus object for one of its trunk interfaces has left the down state and transitioned into some other state. This other state is indicated by the included value of fcTrunkifOperStatus.')
fcIfElpReject = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 3)).setObjects(("CISCO-FC-FE-MIB", "fcIfElpNbrNodeName"), ("CISCO-FC-FE-MIB", "fcIfElpNbrPortName"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCode"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCodeExpl"))
if mibBuilder.loadTexts: fcIfElpReject.setStatus('current')
if mibBuilder.loadTexts: fcIfElpReject.setDescription('This notification is generated by the agent whenever this interface received a ELP request and rejected it.')
fcotInserted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 4)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause"))
if mibBuilder.loadTexts: fcotInserted.setStatus('current')
if mibBuilder.loadTexts: fcotInserted.setDescription("This notification indicates that a Fibre Channel Optical Transmitter (FCOT) for an interface is inserted. This notification is generated by the agent whenever the 'cieIfOperStatusCause' object for one of its interfaces has transitioned into some other state from 'fcotNotPresent' state. This other state is indicated by the included value of 'cieIfOperStatusCause'.")
fcotRemoved = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 289, 1, 3, 0, 5)).setObjects(("CISCO-IF-EXTENSION-MIB", "cieIfOperStatusCause"))
if mibBuilder.loadTexts: fcotRemoved.setStatus('current')
if mibBuilder.loadTexts: fcotRemoved.setDescription("This notification indicates that a Fibre Channel Optical Transmitter (FCOT) for an interface is removed. This notification is generated by the agent whenever the 'cieIfOperStatusCause' object for one of its interfaces has entered into 'fcotNotPresent' state.")
cffFcFeMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1))
cffFcFeMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2))
cffFcFeMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 1)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfCapGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance = cffFcFeMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 2)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfCapGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance1 = cffFcFeMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBCompliance1.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 3)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance2 = cffFcFeMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBCompliance2.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 4)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance3 = cffFcFeMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBCompliance3.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 5)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance4 = cffFcFeMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBCompliance4.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 6)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBCompliance5 = cffFcFeMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBCompliance5.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 7)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev6 = cffFcFeMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev6.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 8)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev7 = cffFcFeMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev7.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 9)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev8 = cffFcFeMIBComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev8.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 10)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev9 = cffFcFeMIBComplianceRev9.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev9.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 11)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroup"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev10 = cffFcFeMIBComplianceRev10.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev10.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 12)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev11 = cffFcFeMIBComplianceRev11.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev11.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 13)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev12 = cffFcFeMIBComplianceRev12.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev12.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 14)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev13 = cffFcFeMIBComplianceRev13.setStatus('deprecated')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev13.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
cffFcFeMIBComplianceRev14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 1, 15)).setObjects(("CISCO-FC-FE-MIB", "fcFeGroup"), ("CISCO-FC-FE-MIB", "fcIfGroup"), ("CISCO-FC-FE-MIB", "fcTrunkIfGroup"), ("CISCO-FC-FE-MIB", "fcIfLoginGroup"), ("CISCO-FC-FE-MIB", "fcIfElpGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroup"), ("CISCO-FC-FE-MIB", "fcIfC2AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfC3AccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfCfAccountingGroup"), ("CISCO-FC-FE-MIB", "fcIfNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfCapGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfStatGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEinfoExtGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfBbScnGroup"), ("CISCO-FC-FE-MIB", "fcIfCapableGroup"), ("CISCO-FC-FE-MIB", "fcIfInfoPortGroup"), ("CISCO-FC-FE-MIB", "fcIfModuleGroupRev1"), ("CISCO-FC-FE-MIB", "fcIfGroupRev4"), ("CISCO-FC-FE-MIB", "fcotInfoNotificationGroup"), ("CISCO-FC-FE-MIB", "fcIfGigEInfoGroup"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigGroup"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev2"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev3"), ("CISCO-FC-FE-MIB", "fcIfErrorGroupRev4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cffFcFeMIBComplianceRev14 = cffFcFeMIBComplianceRev14.setStatus('current')
if mibBuilder.loadTexts: cffFcFeMIBComplianceRev14.setDescription('The compliance statement for entities which implement the CISCO-FC-FE-MIB.')
fcFeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 1)).setObjects(("CISCO-FC-FE-MIB", "cffFcFeElementName"), ("CISCO-FC-FE-MIB", "adminTrunkProtocol"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCode"), ("CISCO-FC-FE-MIB", "fcIfElpRejectReasonCodeExpl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcFeGroup = fcFeGroup.setStatus('current')
if mibBuilder.loadTexts: fcFeGroup.setDescription('A collection objects giving port information.')
fcIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 2)).setObjects(("CISCO-FC-FE-MIB", "fcIfWwn"), ("CISCO-FC-FE-MIB", "fcIfAdminMode"), ("CISCO-FC-FE-MIB", "fcIfOperMode"), ("CISCO-FC-FE-MIB", "fcIfAdminSpeed"), ("CISCO-FC-FE-MIB", "fcIfBeaconMode"), ("CISCO-FC-FE-MIB", "fcIfPortChannelIfIndex"), ("CISCO-FC-FE-MIB", "fcIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcIfOperStatusCauseDescr"), ("CISCO-FC-FE-MIB", "fcIfAdminTrunkMode"), ("CISCO-FC-FE-MIB", "fcIfOperTrunkMode"), ("CISCO-FC-FE-MIB", "fcIfAllowedVsanList2k"), ("CISCO-FC-FE-MIB", "fcIfAllowedVsanList4k"), ("CISCO-FC-FE-MIB", "fcIfActiveVsanList2k"), ("CISCO-FC-FE-MIB", "fcIfActiveVsanList4k"), ("CISCO-FC-FE-MIB", "fcIfBbCreditModel"), ("CISCO-FC-FE-MIB", "fcIfHoldTime"), ("CISCO-FC-FE-MIB", "fcIfTransmitterType"), ("CISCO-FC-FE-MIB", "fcIfConnectorType"), ("CISCO-FC-FE-MIB", "fcIfSerialNo"), ("CISCO-FC-FE-MIB", "fcIfRevision"), ("CISCO-FC-FE-MIB", "fcIfVendor"), ("CISCO-FC-FE-MIB", "fcIfSFPSerialIDData"), ("CISCO-FC-FE-MIB", "fcIfPartNumber"), ("CISCO-FC-FE-MIB", "fcIfAdminRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfAdminRxBbCreditModeISL"), ("CISCO-FC-FE-MIB", "fcIfAdminRxBbCreditModeFx"), ("CISCO-FC-FE-MIB", "fcIfOperRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfRxDataFieldSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroup = fcIfGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfGroup.setDescription('A collection objects giving port information.')
fcTrunkIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 3)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfOperStatus"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCause"), ("CISCO-FC-FE-MIB", "fcTrunkIfOperStatusCauseDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcTrunkIfGroup = fcTrunkIfGroup.setStatus('current')
if mibBuilder.loadTexts: fcTrunkIfGroup.setDescription('A collection objects giving trunk port information.')
fcIfLoginGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 4)).setObjects(("CISCO-FC-FE-MIB", "fcIfLoginEntryCount"), ("CISCO-FC-FE-MIB", "fcIfNxPortNodeName"), ("CISCO-FC-FE-MIB", "fcIfNxPortName"), ("CISCO-FC-FE-MIB", "fcIfNxPortAddress"), ("CISCO-FC-FE-MIB", "fcIfNxFcphVersionAgreed"), ("CISCO-FC-FE-MIB", "fcIfNxRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfNxTxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfNxClass2RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfNxClass3RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfNxCosSuppAgreed"), ("CISCO-FC-FE-MIB", "fcIfNxClass2SeqDelivAgreed"), ("CISCO-FC-FE-MIB", "fcIfNxClass3SeqDelivAgreed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfLoginGroup = fcIfLoginGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfLoginGroup.setDescription('A collection of objects giving Fabric Login info for Fx_Port.')
fcIfElpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 5)).setObjects(("CISCO-FC-FE-MIB", "fcIfElpNbrNodeName"), ("CISCO-FC-FE-MIB", "fcIfElpNbrPortName"), ("CISCO-FC-FE-MIB", "fcIfElpRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfElpTxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfElpCosSuppAgreed"), ("CISCO-FC-FE-MIB", "fcIfElpClass2SeqDelivAgreed"), ("CISCO-FC-FE-MIB", "fcIfElpClass2RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfElpClass3SeqDelivAgreed"), ("CISCO-FC-FE-MIB", "fcIfElpClass3RxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfElpClassFXII"), ("CISCO-FC-FE-MIB", "fcIfElpClassFRxDataFieldSize"), ("CISCO-FC-FE-MIB", "fcIfElpClassFConcurrentSeq"), ("CISCO-FC-FE-MIB", "fcIfElpClassFEndToEndCredit"), ("CISCO-FC-FE-MIB", "fcIfElpClassFOpenSeq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfElpGroup = fcIfElpGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfElpGroup.setDescription('A collection of objects giving Exchange Link Parameters established between the 2 Interconnect_Ports.')
fcIfCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 6)).setObjects(("CISCO-FC-FE-MIB", "fcIfCapFcphVersionHigh"), ("CISCO-FC-FE-MIB", "fcIfCapFcphVersionLow"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMax"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMin"), ("CISCO-FC-FE-MIB", "fcIfCapCos"), ("CISCO-FC-FE-MIB", "fcIfCapClass2SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapClass3SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMax"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMin"), ("CISCO-FC-FE-MIB", "fcIfCapISLRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapISLRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapISLRxBbCreditDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCapGroup = fcIfCapGroup.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfCapGroup.setDescription('A collection of objects providing information what the port is capable of supporting.')
fcIfErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 7)).setObjects(("CISCO-FC-FE-MIB", "fcIfLinkFailures"), ("CISCO-FC-FE-MIB", "fcIfSyncLosses"), ("CISCO-FC-FE-MIB", "fcIfSigLosses"), ("CISCO-FC-FE-MIB", "fcIfPrimSeqProtoErrors"), ("CISCO-FC-FE-MIB", "fcIfInvalidTxWords"), ("CISCO-FC-FE-MIB", "fcIfInvalidCrcs"), ("CISCO-FC-FE-MIB", "fcIfDelimiterErrors"), ("CISCO-FC-FE-MIB", "fcIfAddressIdErrors"), ("CISCO-FC-FE-MIB", "fcIfLinkResetIns"), ("CISCO-FC-FE-MIB", "fcIfLinkResetOuts"), ("CISCO-FC-FE-MIB", "fcIfOlsIns"), ("CISCO-FC-FE-MIB", "fcIfOlsOuts"), ("CISCO-FC-FE-MIB", "fcIfRuntFramesIn"), ("CISCO-FC-FE-MIB", "fcIfJabberFramesIn"), ("CISCO-FC-FE-MIB", "fcIfTxWaitCount"), ("CISCO-FC-FE-MIB", "fcIfFramesTooLong"), ("CISCO-FC-FE-MIB", "fcIfFramesTooShort"), ("CISCO-FC-FE-MIB", "fcIfLRRIn"), ("CISCO-FC-FE-MIB", "fcIfLRROut"), ("CISCO-FC-FE-MIB", "fcIfNOSIn"), ("CISCO-FC-FE-MIB", "fcIfNOSOut"), ("CISCO-FC-FE-MIB", "fcIfFragFrames"), ("CISCO-FC-FE-MIB", "fcIfEOFaFrames"), ("CISCO-FC-FE-MIB", "fcIfUnknownClassFrames"), ("CISCO-FC-FE-MIB", "fcIf8b10bDisparityErrors"), ("CISCO-FC-FE-MIB", "fcIfFramesDiscard"), ("CISCO-FC-FE-MIB", "fcIfELPFailures"), ("CISCO-FC-FE-MIB", "fcIfBBCreditTransistionFromZero"), ("CISCO-FC-FE-MIB", "fcIfEISLFramesDiscard"), ("CISCO-FC-FE-MIB", "fcIfFramingErrorFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroup = fcIfErrorGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfErrorGroup.setDescription('A collection of objects providing errors of the ports.')
fcIfC2AccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 8)).setObjects(("CISCO-FC-FE-MIB", "fcIfC2InFrames"), ("CISCO-FC-FE-MIB", "fcIfC2OutFrames"), ("CISCO-FC-FE-MIB", "fcIfC2InOctets"), ("CISCO-FC-FE-MIB", "fcIfC2OutOctets"), ("CISCO-FC-FE-MIB", "fcIfC2Discards"), ("CISCO-FC-FE-MIB", "fcIfC2FbsyFrames"), ("CISCO-FC-FE-MIB", "fcIfC2FrjtFrames"), ("CISCO-FC-FE-MIB", "fcIfC2PBSYFrames"), ("CISCO-FC-FE-MIB", "fcIfC2PRJTFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfC2AccountingGroup = fcIfC2AccountingGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfC2AccountingGroup.setDescription('A collection of objects providing class 2 accounting information of the ports.')
fcIfC3AccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 9)).setObjects(("CISCO-FC-FE-MIB", "fcIfC3InFrames"), ("CISCO-FC-FE-MIB", "fcIfC3OutFrames"), ("CISCO-FC-FE-MIB", "fcIfC3InOctets"), ("CISCO-FC-FE-MIB", "fcIfC3OutOctets"), ("CISCO-FC-FE-MIB", "fcIfC3Discards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfC3AccountingGroup = fcIfC3AccountingGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfC3AccountingGroup.setDescription('A collection of objects providing class 3 accounting information of the ports.')
fcIfCfAccountingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 10)).setObjects(("CISCO-FC-FE-MIB", "fcIfCfInFrames"), ("CISCO-FC-FE-MIB", "fcIfCfOutFrames"), ("CISCO-FC-FE-MIB", "fcIfCfInOctets"), ("CISCO-FC-FE-MIB", "fcIfCfOutOctets"), ("CISCO-FC-FE-MIB", "fcIfCfDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCfAccountingGroup = fcIfCfAccountingGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfCfAccountingGroup.setDescription('A collection of objects providing class f accounting information of the ports.')
fcIfNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 11)).setObjects(("CISCO-FC-FE-MIB", "fcTrunkIfDownNotify"), ("CISCO-FC-FE-MIB", "fcTrunkIfUpNotify"), ("CISCO-FC-FE-MIB", "fcIfElpReject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfNotificationGroup = fcIfNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfNotificationGroup.setDescription('A collection of notifications for monitoring fibre channel interfaces.')
fcIfGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 12)).setObjects(("CISCO-FC-FE-MIB", "fcIfActiveVsanUpList2k"), ("CISCO-FC-FE-MIB", "fcIfActiveVsanUpList4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev1 = fcIfGroupRev1.setStatus('current')
if mibBuilder.loadTexts: fcIfGroupRev1.setDescription('A collection objects giving port information.')
fcIfCapGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 13)).setObjects(("CISCO-FC-FE-MIB", "fcIfCapFcphVersionHigh"), ("CISCO-FC-FE-MIB", "fcIfCapFcphVersionLow"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMax"), ("CISCO-FC-FE-MIB", "fcIfCapRxDataFieldSizeMin"), ("CISCO-FC-FE-MIB", "fcIfCapCos"), ("CISCO-FC-FE-MIB", "fcIfCapClass2SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapClass3SeqDeliv"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMax"), ("CISCO-FC-FE-MIB", "fcIfCapHoldTimeMin"), ("CISCO-FC-FE-MIB", "fcIfCapBbScnCapable"), ("CISCO-FC-FE-MIB", "fcIfCapBbScnMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmFrmCapable"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmRxPerfBufDefault"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapOsmISLRxPerfBufDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxBbCreditMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxBbCreditMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxBbCreditDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufWriteable"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmRxPerfBufDefault"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxPerfBufMax"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxPerfBufMin"), ("CISCO-FC-FE-MIB", "fcIfCapFrmISLRxPerfBufDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCapGroupRev1 = fcIfCapGroupRev1.setStatus('current')
if mibBuilder.loadTexts: fcIfCapGroupRev1.setDescription('A collection of objects providing information what the port is capable of supporting.')
fcIfGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 14)).setObjects(("CISCO-FC-FE-MIB", "fcIfPortRateMode"), ("CISCO-FC-FE-MIB", "fcIfAdminRxPerfBuffer"), ("CISCO-FC-FE-MIB", "fcIfOperRxPerfBuffer"), ("CISCO-FC-FE-MIB", "fcIfBbScn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev2 = fcIfGroupRev2.setStatus('current')
if mibBuilder.loadTexts: fcIfGroupRev2.setDescription('A collection objects giving port information.')
fcIfStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 15)).setObjects(("CISCO-FC-FE-MIB", "fcIfCurrRxBbCredit"), ("CISCO-FC-FE-MIB", "fcIfCurrTxBbCredit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfStatGroup = fcIfStatGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfStatGroup.setDescription('A collection objects giving port statistics.')
fcIfErrorGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 16)).setObjects(("CISCO-FC-FE-MIB", "fcIfLipF8In"), ("CISCO-FC-FE-MIB", "fcIfLipF8Out"), ("CISCO-FC-FE-MIB", "fcIfNonLipF8In"), ("CISCO-FC-FE-MIB", "fcIfNonLipF8Out"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev1 = fcIfErrorGroupRev1.setStatus('current')
if mibBuilder.loadTexts: fcIfErrorGroupRev1.setDescription('A collection of objects providing errors of the ports.')
fcIfGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 17)).setObjects(("CISCO-FC-FE-MIB", "fcIfPortInitStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev3 = fcIfGroupRev3.setStatus('current')
if mibBuilder.loadTexts: fcIfGroupRev3.setDescription('A collection objects giving port information.')
fcIfRNIDInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 18)).setObjects(("CISCO-FC-FE-MIB", "fcIfRNIDInfoStatus"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoTypeNumber"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoModelNumber"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoManufacturer"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoPlantOfMfg"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoSerialNumber"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoUnitType"), ("CISCO-FC-FE-MIB", "fcIfRNIDInfoPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfRNIDInfoGroup = fcIfRNIDInfoGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfRNIDInfoGroup.setDescription('A collection objects giving the peer node identification data.')
fcIfGigEInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 19)).setObjects(("CISCO-FC-FE-MIB", "fcIfGigEPortChannelIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGigEInfoGroup = fcIfGigEInfoGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfGigEInfoGroup.setDescription('A collection objects to provide port channel information for gigabit ethernet interfaces.')
fcotInfoNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 20)).setObjects(("CISCO-FC-FE-MIB", "fcotInserted"), ("CISCO-FC-FE-MIB", "fcotRemoved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcotInfoNotificationGroup = fcotInfoNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: fcotInfoNotificationGroup.setDescription('A collection of notifications for FCOT Inserted/Removed.')
fcIfInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 21)).setObjects(("CISCO-FC-FE-MIB", "fcIfAdminRxBbCreditExtended"), ("CISCO-FC-FE-MIB", "fcIfFcTunnelIfIndex"), ("CISCO-FC-FE-MIB", "fcIfServiceState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfInfoGroup = fcIfInfoGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfInfoGroup.setDescription('A collection of objects providing information what the port is capable of supporting.')
fcIfGigEinfoExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 22)).setObjects(("CISCO-FC-FE-MIB", "fcIfGigEAutoNegotiate"), ("CISCO-FC-FE-MIB", "fcIfGigEBeaconMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGigEinfoExtGroup = fcIfGigEinfoExtGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfGigEinfoExtGroup.setDescription('A collection objects giving providing information about GigE interfaces.')
fcIfBbScnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 23)).setObjects(("CISCO-FC-FE-MIB", "fcIfAdminBbScnMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfBbScnGroup = fcIfBbScnGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfBbScnGroup.setDescription('A collection of objects providing information what the port is capable of supporting.')
fcIfCapableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 24)).setObjects(("CISCO-FC-FE-MIB", "fcIfIsServiceStateCapable"), ("CISCO-FC-FE-MIB", "fcIfIsPortRateModeCapable"), ("CISCO-FC-FE-MIB", "fcIfIsAdminRxBbCreditExtendedCapable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfCapableGroup = fcIfCapableGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfCapableGroup.setDescription('This is a group of objects that help the user figure out if the system is capable of a change in the given object.')
fcIfInfoPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 25)).setObjects(("CISCO-FC-FE-MIB", "fcIfPortType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfInfoPortGroup = fcIfInfoPortGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfInfoPortGroup.setDescription('A collection objects giving port information.')
fcIfModuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 26)).setObjects(("CISCO-FC-FE-MIB", "fcIfModuleOverSubscriptionRatioConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfModuleGroup = fcIfModuleGroup.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfModuleGroup.setDescription('A collection objects giving module information.')
fcIfToggleCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 27)).setObjects(("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigEnable"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigReason"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigDuration"), ("CISCO-FC-FE-MIB", "fcIfToggleCtrlConfigNumFlaps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfToggleCtrlConfigGroup = fcIfToggleCtrlConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: fcIfToggleCtrlConfigGroup.setDescription('A collection of objects which provides toggle control information for fibre channel interface.')
fcIfFlapCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 28)).setObjects(("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigEnable"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigDuration"), ("CISCO-FC-FE-MIB", "fcIfFlapCtrlConfigNumFlaps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfFlapCtrlConfigGroup = fcIfFlapCtrlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: fcIfFlapCtrlConfigGroup.setDescription('A collection of objects which provides toggle control information for fibre channel interface.')
fcIfModuleGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 29)).setObjects(("CISCO-FC-FE-MIB", "fcIfModuleOverSubscriptionRatioConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessConfig"), ("CISCO-FC-FE-MIB", "fcIfModuleBandwidthFairnessOper"), ("CISCO-FC-FE-MIB", "fcIfModuleXcvrFrequencyConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfModuleGroupRev1 = fcIfModuleGroupRev1.setStatus('current')
if mibBuilder.loadTexts: fcIfModuleGroupRev1.setDescription('A collection objects giving module information.')
fcIfGigEinfoExtGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 30)).setObjects(("CISCO-FC-FE-MIB", "fcIfGigConnectorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGigEinfoExtGroupRev1 = fcIfGigEinfoExtGroupRev1.setStatus('current')
if mibBuilder.loadTexts: fcIfGigEinfoExtGroupRev1.setDescription('A collection objects giving providing information about GigE interfaces.')
fcIfErrorGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 31)).setObjects(("CISCO-FC-FE-MIB", "fcIfTimeOutDiscards"), ("CISCO-FC-FE-MIB", "fcIfOutDiscards"), ("CISCO-FC-FE-MIB", "fcIfCreditLoss"), ("CISCO-FC-FE-MIB", "fcIfTxWtAvgBBCreditTransitionToZero"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev2 = fcIfErrorGroupRev2.setStatus('current')
if mibBuilder.loadTexts: fcIfErrorGroupRev2.setDescription('A collection of objects providing errors of the ports.')
fcIfErrorGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 32)).setObjects(("CISCO-FC-FE-MIB", "fcIfBBCreditTransistionToZero"), ("CISCO-FC-FE-MIB", "fcHCIfBBCreditTransistionFromZero"), ("CISCO-FC-FE-MIB", "fcHCIfBBCreditTransistionToZero"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev3 = fcIfErrorGroupRev3.setStatus('current')
if mibBuilder.loadTexts: fcIfErrorGroupRev3.setDescription('A collection of objects providing errors of the ports.')
fcIfGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 33)).setObjects(("CISCO-FC-FE-MIB", "fcIfAdminFECState"), ("CISCO-FC-FE-MIB", "fcIfOperFECState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfGroupRev4 = fcIfGroupRev4.setStatus('current')
if mibBuilder.loadTexts: fcIfGroupRev4.setDescription('A collection objects giving port information.')
fcIfErrorGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 289, 2, 2, 34)).setObjects(("CISCO-FC-FE-MIB", "fcIfFECCorrectedBlks"), ("CISCO-FC-FE-MIB", "fcIfFECUncorrectedBlks"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcIfErrorGroupRev4 = fcIfErrorGroupRev4.setStatus('current')
if mibBuilder.loadTexts: fcIfErrorGroupRev4.setDescription('A collection of objects providing errors of the ports.')
mibBuilder.exportSymbols("CISCO-FC-FE-MIB", cffFcFeMIBCompliance5=cffFcFeMIBCompliance5, fcIfWwn=fcIfWwn, fcIfElpReject=fcIfElpReject, fcTrunkIfTable=fcTrunkIfTable, fcIfToggleCtrlConfigEnable=fcIfToggleCtrlConfigEnable, fcIfInvalidTxWords=fcIfInvalidTxWords, fcIfLipF8In=fcIfLipF8In, fcIfElpEntry=fcIfElpEntry, fcIfErrorGroupRev1=fcIfErrorGroupRev1, cffFcFeStatistics=cffFcFeStatistics, fcIfInfoGroup=fcIfInfoGroup, cffFcFeMIBCompliance1=cffFcFeMIBCompliance1, fcIfElpClassFConcurrentSeq=fcIfElpClassFConcurrentSeq, fcIfCapFrmRxBbCreditMax=fcIfCapFrmRxBbCreditMax, fcIfC2OutOctets=fcIfC2OutOctets, fcIfRNIDInfoUnitType=fcIfRNIDInfoUnitType, fcIfCapFrmISLRxBbCreditMin=fcIfCapFrmISLRxBbCreditMin, fcotRemoved=fcotRemoved, fcIfFlapCtrlConfigEnable=fcIfFlapCtrlConfigEnable, fcIfC2PRJTFrames=fcIfC2PRJTFrames, fcIfIsAdminRxBbCreditExtendedCapable=fcIfIsAdminRxBbCreditExtendedCapable, fcIfElpTxBbCredit=fcIfElpTxBbCredit, fcIfCapRxDataFieldSizeMin=fcIfCapRxDataFieldSizeMin, fcIfGigEPortChannelIfIndex=fcIfGigEPortChannelIfIndex, fcIfRNIDInfoEntry=fcIfRNIDInfoEntry, fcIfCapFrmRxPerfBufWriteable=fcIfCapFrmRxPerfBufWriteable, fcIfErrorGroupRev3=fcIfErrorGroupRev3, fcIfCapOsmISLRxPerfBufMax=fcIfCapOsmISLRxPerfBufMax, fcIfCapHoldTimeMin=fcIfCapHoldTimeMin, fcIfIsServiceStateCapable=fcIfIsServiceStateCapable, fcIfNOSOut=fcIfNOSOut, fcIfCurrRxBbCredit=fcIfCurrRxBbCredit, fcIfNxClass3SeqDelivAgreed=fcIfNxClass3SeqDelivAgreed, fcIfCapOsmTable=fcIfCapOsmTable, fcIfOutDiscards=fcIfOutDiscards, fcIfFramesTooLong=fcIfFramesTooLong, fcIfCfInOctets=fcIfCfInOctets, fcIfVendor=fcIfVendor, fcIfCfAccountingTable=fcIfCfAccountingTable, FcBbCreditModel=FcBbCreditModel, fcIfElpClass2SeqDelivAgreed=fcIfElpClass2SeqDelivAgreed, fcIfLoginEntryCount=fcIfLoginEntryCount, fcIfToggleCtrlConfigEntry=fcIfToggleCtrlConfigEntry, fcIfGigEBeaconMode=fcIfGigEBeaconMode, fcIfGigEInfoGroup=fcIfGigEInfoGroup, fcIfAdminRxBbCredit=fcIfAdminRxBbCredit, fcIfCapOsmRxBbCreditMax=fcIfCapOsmRxBbCreditMax, fcIfBeaconMode=fcIfBeaconMode, fcIfCapOsmEntry=fcIfCapOsmEntry, fcIfModuleEntry=fcIfModuleEntry, fcIfOperMode=fcIfOperMode, fcIfFcTunnelIfIndex=fcIfFcTunnelIfIndex, fcIfTable=fcIfTable, fcIfElpClassFEndToEndCredit=fcIfElpClassFEndToEndCredit, fcIfCapRxBbCreditWriteable=fcIfCapRxBbCreditWriteable, fcIfCapFrmISLRxPerfBufMax=fcIfCapFrmISLRxPerfBufMax, fcIfNxFcphVersionAgreed=fcIfNxFcphVersionAgreed, cffFcFeElementName=cffFcFeElementName, fcIfC3InFrames=fcIfC3InFrames, fcIfCreditLoss=fcIfCreditLoss, fcIfRNIDInfoModelNumber=fcIfRNIDInfoModelNumber, FcBbCredit=FcBbCredit, fcIfModuleOverSubscriptionRatioConfig=fcIfModuleOverSubscriptionRatioConfig, fcIfAdminRxPerfBuffer=fcIfAdminRxPerfBuffer, fcIfCapOsmISLRxPerfBufMin=fcIfCapOsmISLRxPerfBufMin, fcIfCapFrmISLRxBbCreditMax=fcIfCapFrmISLRxBbCreditMax, fcIfServiceState=fcIfServiceState, fcIfBbScn=fcIfBbScn, fcIfLRROut=fcIfLRROut, fcIfErrorEntry=fcIfErrorEntry, fcIfCapFrmRxPerfBufDefault=fcIfCapFrmRxPerfBufDefault, fcIfGroupRev4=fcIfGroupRev4, fcIfCapFrmRxPerfBufMax=fcIfCapFrmRxPerfBufMax, fcIfCapOsmISLRxBbCreditMax=fcIfCapOsmISLRxBbCreditMax, fcIfActiveVsanList4k=fcIfActiveVsanList4k, fcIfBbScnGroup=fcIfBbScnGroup, fcIfCapGroupRev1=fcIfCapGroupRev1, fcIfElpRejectReasonCodeExpl=fcIfElpRejectReasonCodeExpl, fcIfEOFaFrames=fcIfEOFaFrames, fcTrunkIfDownNotify=fcTrunkIfDownNotify, fcIfFlapCtrlConfigDuration=fcIfFlapCtrlConfigDuration, fcIfCapOsmRxBbCreditMin=fcIfCapOsmRxBbCreditMin, fcIfFECCorrectedBlks=fcIfFECCorrectedBlks, fcIfElpNbrPortName=fcIfElpNbrPortName, fcIfCfOutOctets=fcIfCfOutOctets, fcIfOperStatusCauseDescr=fcIfOperStatusCauseDescr, fcIfSerialNo=fcIfSerialNo, fcIfCfDiscards=fcIfCfDiscards, fcIfNxRxBbCredit=fcIfNxRxBbCredit, fcIfRxDataFieldSize=fcIfRxDataFieldSize, fcIfCapRxBbCreditDefault=fcIfCapRxBbCreditDefault, fcIfOlsIns=fcIfOlsIns, fcIfCapOsmRxPerfBufMax=fcIfCapOsmRxPerfBufMax, fcTrunkIfGroup=fcTrunkIfGroup, fcIfRNIDInfoManufacturer=fcIfRNIDInfoManufacturer, FcRxDataFieldSize=FcRxDataFieldSize, fcIfCapFrmRxBbCreditWriteable=fcIfCapFrmRxBbCreditWriteable, fcIfC2InOctets=fcIfC2InOctets, fcIfPortType=fcIfPortType, fcIfGroupRev1=fcIfGroupRev1, fcIfCapISLRxBbCreditMax=fcIfCapISLRxBbCreditMax, fcIfGroupRev2=fcIfGroupRev2, fcIfAdminRxBbCreditModeISL=fcIfAdminRxBbCreditModeISL, fcIfRNIDInfoGroup=fcIfRNIDInfoGroup, fcIfCapClass2SeqDeliv=fcIfCapClass2SeqDeliv, fcTrunkIfOperStatus=fcTrunkIfOperStatus, fcIfCapRxBbCreditMin=fcIfCapRxBbCreditMin, fcIfGigEinfoExtGroupRev1=fcIfGigEinfoExtGroupRev1, fcIfLinkResetOuts=fcIfLinkResetOuts, fcIfOperStatusCause=fcIfOperStatusCause, fcIfCapOsmRxBbCreditDefault=fcIfCapOsmRxBbCreditDefault, fcIfC2InFrames=fcIfC2InFrames, fcIfStatTable=fcIfStatTable, cffFcFeNotification=cffFcFeNotification, cffFcFeMIBComplianceRev7=cffFcFeMIBComplianceRev7, fcIfCapFrmEntry=fcIfCapFrmEntry, fcIfAdminRxBbCreditModeFx=fcIfAdminRxBbCreditModeFx, fcIfRNIDInfoTypeNumber=fcIfRNIDInfoTypeNumber, fcIfAdminMode=fcIfAdminMode, fcIfRevision=fcIfRevision, fcTrunkIfEntry=fcTrunkIfEntry, fcIfToggleCtrlConfigTable=fcIfToggleCtrlConfigTable, fcIfCfAccountingGroup=fcIfCfAccountingGroup, fcIfRNIDInfoSerialNumber=fcIfRNIDInfoSerialNumber, cffFcFeMIBCompliance4=cffFcFeMIBCompliance4, fcIfNOSIn=fcIfNOSIn, fcIfNxTxBbCredit=fcIfNxTxBbCredit, fcIfModuleGroup=fcIfModuleGroup, fcIfActiveVsanUpList4k=fcIfActiveVsanUpList4k, fcIfCapHoldTimeMax=fcIfCapHoldTimeMax, fcTrunkIfOperStatusCauseDescr=fcTrunkIfOperStatusCauseDescr, fcTrunkIfUpNotify=fcTrunkIfUpNotify, fcIfModuleGroupRev1=fcIfModuleGroupRev1, fcIfFECUncorrectedBlks=fcIfFECUncorrectedBlks, FcphVersion=FcphVersion, fcIfRNIDInfoTable=fcIfRNIDInfoTable, fcIfC3AccountingEntry=fcIfC3AccountingEntry, fcIfCapOsmFrmCapable=fcIfCapOsmFrmCapable, fcIfSyncLosses=fcIfSyncLosses, fcIfCapOsmRxPerfBufWriteable=fcIfCapOsmRxPerfBufWriteable, fcIfCapOsmISLRxBbCreditDefault=fcIfCapOsmISLRxBbCreditDefault, fcIfCapISLRxBbCreditDefault=fcIfCapISLRxBbCreditDefault, fcIfElpRxBbCredit=fcIfElpRxBbCredit, fcIfCapISLRxBbCreditMin=fcIfCapISLRxBbCreditMin, fcIfElpNbrNodeName=fcIfElpNbrNodeName, fcIfFramingErrorFrames=fcIfFramingErrorFrames, fcIfIsPortRateModeCapable=fcIfIsPortRateModeCapable, fcIfElpClass3RxDataFieldSize=fcIfElpClass3RxDataFieldSize, fcIfElpClass3SeqDelivAgreed=fcIfElpClass3SeqDelivAgreed, fcIfCapClass3SeqDeliv=fcIfCapClass3SeqDeliv, fcIfCapFrmISLRxPerfBufMin=fcIfCapFrmISLRxPerfBufMin, fcIfCurrTxBbCredit=fcIfCurrTxBbCredit, fcIfGigEinfoExtGroup=fcIfGigEinfoExtGroup, fcIfNonLipF8In=fcIfNonLipF8In, fcIfC3AccountingGroup=fcIfC3AccountingGroup, fcIfOperFECState=fcIfOperFECState, fcIfC2Discards=fcIfC2Discards, fcIfCapFrmRxBbCreditDefault=fcIfCapFrmRxBbCreditDefault, fcIfHoldTime=fcIfHoldTime, fcIfToggleCtrlConfigReason=fcIfToggleCtrlConfigReason, fcIfModuleXcvrFrequencyConfig=fcIfModuleXcvrFrequencyConfig, fcIfRNIDInfoPlantOfMfg=fcIfRNIDInfoPlantOfMfg, fcIfAdminRxBbCreditExtended=fcIfAdminRxBbCreditExtended, fcIfNxPortName=fcIfNxPortName, fcTrunkIfOperStatusCause=fcTrunkIfOperStatusCause, fcIfC3InOctets=fcIfC3InOctets, fcIfDelimiterErrors=fcIfDelimiterErrors, cffFcFeMIBComplianceRev14=cffFcFeMIBComplianceRev14, fcIfEISLFramesDiscard=fcIfEISLFramesDiscard, fcIfCfAccountingEntry=fcIfCfAccountingEntry, fcIfGigConnectorType=fcIfGigConnectorType, fcIfErrorGroup=fcIfErrorGroup, fcIfCapRxBbCreditMax=fcIfCapRxBbCreditMax, fcIfCapBbScnMax=fcIfCapBbScnMax, fcIfNotificationGroup=fcIfNotificationGroup, fcIfAdminBbScnMode=fcIfAdminBbScnMode, fcIfNxClass3RxDataFieldSize=fcIfNxClass3RxDataFieldSize, fcIfCapOsmRxBbCreditWriteable=fcIfCapOsmRxBbCreditWriteable, fcIfRNIDInfoPortId=fcIfRNIDInfoPortId, cffFcFeMIBComplianceRev9=cffFcFeMIBComplianceRev9, fcIf8b10bDisparityErrors=fcIf8b10bDisparityErrors, fcIfNxPortAddress=fcIfNxPortAddress, fcIfUnknownClassFrames=fcIfUnknownClassFrames, fcIfFlapCtrlConfigGroup=fcIfFlapCtrlConfigGroup, fcIfCapFrmTable=fcIfCapFrmTable, fcIfTimeOutDiscards=fcIfTimeOutDiscards, fcIfBBCreditTransistionToZero=fcIfBBCreditTransistionToZero, fcIfC3AccountingTable=fcIfC3AccountingTable, fcIfPrimSeqProtoErrors=fcIfPrimSeqProtoErrors, cffFcFeMIBComplianceRev8=cffFcFeMIBComplianceRev8, fcIfBbCreditModel=fcIfBbCreditModel, fcIfCapFrmRxPerfBufMin=fcIfCapFrmRxPerfBufMin, fcIfCapFcphVersionLow=fcIfCapFcphVersionLow, cffFcFeMIBComplianceRev13=cffFcFeMIBComplianceRev13, fcIfGroup=fcIfGroup, fcIfCapOsmISLRxPerfBufDefault=fcIfCapOsmISLRxPerfBufDefault, fcIfActiveVsanList2k=fcIfActiveVsanList2k, fcIfModuleTable=fcIfModuleTable, cffFcFeConfig=cffFcFeConfig, fcIfC2FbsyFrames=fcIfC2FbsyFrames, fcIfCapOsmRxPerfBufDefault=fcIfCapOsmRxPerfBufDefault, fcIfOperTrunkMode=fcIfOperTrunkMode, fcIfAllowedVsanList2k=fcIfAllowedVsanList2k, fcIfAllowedVsanList4k=fcIfAllowedVsanList4k, fcIfCapEntry=fcIfCapEntry, fcIfCapTable=fcIfCapTable, fcIfNxCosSuppAgreed=fcIfNxCosSuppAgreed, fcIfGigEAutoNegotiate=fcIfGigEAutoNegotiate, fcIfAddressIdErrors=fcIfAddressIdErrors, fcIfOperRxBbCredit=fcIfOperRxBbCredit, fcIfToggleCtrlConfigNumFlaps=fcIfToggleCtrlConfigNumFlaps, fcIfCapOsmRxPerfBufMin=fcIfCapOsmRxPerfBufMin, fcIfCapGroup=fcIfCapGroup, fcotInfoNotificationGroup=fcotInfoNotificationGroup, fcIfRuntFramesIn=fcIfRuntFramesIn, fcIfC2PBSYFrames=fcIfC2PBSYFrames, cffFcFeNotifications=cffFcFeNotifications, cffFcFeMIBComplianceRev6=cffFcFeMIBComplianceRev6, cffFcFeMIBGroups=cffFcFeMIBGroups, fcIfInfoPortGroup=fcIfInfoPortGroup, fcIfFramesDiscard=fcIfFramesDiscard, fcIfCapFrmISLRxPerfBufDefault=fcIfCapFrmISLRxPerfBufDefault, fcIfFragFrames=fcIfFragFrames, fcIfAdminTrunkMode=fcIfAdminTrunkMode, fcIfToggleCtrlConfigGroup=fcIfToggleCtrlConfigGroup, fcFeGroup=fcFeGroup, fcIfNonLipF8Out=fcIfNonLipF8Out, fcIfLoginGroup=fcIfLoginGroup, fcIfBBCreditTransistionFromZero=fcIfBBCreditTransistionFromZero, fcIfElpGroup=fcIfElpGroup, fcIfNxClass2SeqDelivAgreed=fcIfNxClass2SeqDelivAgreed, fcIfSFPSerialIDData=fcIfSFPSerialIDData, cffFcFeMIBComplianceRev11=cffFcFeMIBComplianceRev11, fcIfC2AccountingGroup=fcIfC2AccountingGroup, PYSNMP_MODULE_ID=ciscoFcFeMIB, cffFcFeMIBCompliance=cffFcFeMIBCompliance, fcIfCapOsmISLRxBbCreditMin=fcIfCapOsmISLRxBbCreditMin, fcIfCfInFrames=fcIfCfInFrames, fcIfC2AccountingTable=fcIfC2AccountingTable, fcIfCapableGroup=fcIfCapableGroup, fcIfPortInitStatus=fcIfPortInitStatus, fcIfLinkResetIns=fcIfLinkResetIns, fcIfPortRateMode=fcIfPortRateMode, fcIfElpClass2RxDataFieldSize=fcIfElpClass2RxDataFieldSize, fcIfStatGroup=fcIfStatGroup, fcIfElpClassFXII=fcIfElpClassFXII, fcIfLipF8Out=fcIfLipF8Out, fcIfFlapCtrlConfigEntry=fcIfFlapCtrlConfigEntry, fcIfNxClass2RxDataFieldSize=fcIfNxClass2RxDataFieldSize, fcIfOlsOuts=fcIfOlsOuts, fcIfTransmitterType=fcIfTransmitterType, fcIfTxWaitCount=fcIfTxWaitCount, adminTrunkProtocol=adminTrunkProtocol, ciscoFcFeObjects=ciscoFcFeObjects)
mibBuilder.exportSymbols("CISCO-FC-FE-MIB", fcIfRNIDInfoStatus=fcIfRNIDInfoStatus, fcIfElpRejectReasonCode=fcIfElpRejectReasonCode, fcIfFlapCtrlConfigTable=fcIfFlapCtrlConfigTable, fcIfELPFailures=fcIfELPFailures, fcIfJabberFramesIn=fcIfJabberFramesIn, fcIfModuleBandwidthFairnessConfig=fcIfModuleBandwidthFairnessConfig, fcIfPartNumber=fcIfPartNumber, fcotInserted=fcotInserted, fcIfElpCosSuppAgreed=fcIfElpCosSuppAgreed, fcIfFLoginTable=fcIfFLoginTable, fcIfCapCos=fcIfCapCos, fcIfC3Discards=fcIfC3Discards, fcIfStatEntry=fcIfStatEntry, fcIfElpTable=fcIfElpTable, fcIfGigEEntry=fcIfGigEEntry, cffFcFeMIBCompliances=cffFcFeMIBCompliances, fcIfPortChannelIfIndex=fcIfPortChannelIfIndex, fcIfAdminSpeed=fcIfAdminSpeed, cffFcFeMIBConformance=cffFcFeMIBConformance, fcIfCapFrmRxBbCreditMin=fcIfCapFrmRxBbCreditMin, fcIfC2FrjtFrames=fcIfC2FrjtFrames, ciscoFcFeMIB=ciscoFcFeMIB, fcIfGroupRev3=fcIfGroupRev3, fcIfErrorGroupRev2=fcIfErrorGroupRev2, FcIfOperStatusReason=FcIfOperStatusReason, fcIfModuleBandwidthFairnessOper=fcIfModuleBandwidthFairnessOper, fcIfCapBbScnCapable=fcIfCapBbScnCapable, fcHCIfBBCreditTransistionFromZero=fcHCIfBBCreditTransistionFromZero, fcIfNxLoginIndex=fcIfNxLoginIndex, fcIfCapRxDataFieldSizeMax=fcIfCapRxDataFieldSizeMax, fcIfEntry=fcIfEntry, fcIfConnectorType=fcIfConnectorType, fcIfLRRIn=fcIfLRRIn, fcIfCfOutFrames=fcIfCfOutFrames, FcPerfBuffer=FcPerfBuffer, fcIfFramesTooShort=fcIfFramesTooShort, fcIfOperRxPerfBuffer=fcIfOperRxPerfBuffer, fcIfElpClassFOpenSeq=fcIfElpClassFOpenSeq, fcIfSigLosses=fcIfSigLosses, fcIfC3OutOctets=fcIfC3OutOctets, fcIfActiveVsanUpList2k=fcIfActiveVsanUpList2k, cffFcFeMIBCompliance2=cffFcFeMIBCompliance2, fcIfFlapCtrlConfigReason=fcIfFlapCtrlConfigReason, fcIfGigETable=fcIfGigETable, fcIfLinkFailures=fcIfLinkFailures, fcIfNxPortNodeName=fcIfNxPortNodeName, fcIfFLoginEntry=fcIfFLoginEntry, fcIfInvalidCrcs=fcIfInvalidCrcs, fcIfElpClassFRxDataFieldSize=fcIfElpClassFRxDataFieldSize, fcIfC3OutFrames=fcIfC3OutFrames, fcHCIfBBCreditTransistionToZero=fcHCIfBBCreditTransistionToZero, fcIfCapFcphVersionHigh=fcIfCapFcphVersionHigh, cffFcFeMIBComplianceRev10=cffFcFeMIBComplianceRev10, fcIfAdminFECState=fcIfAdminFECState, fcIfTxWtAvgBBCreditTransitionToZero=fcIfTxWtAvgBBCreditTransitionToZero, fcIfErrorGroupRev4=fcIfErrorGroupRev4, cffFcFeMIBComplianceRev12=cffFcFeMIBComplianceRev12, fcIfC2OutFrames=fcIfC2OutFrames, fcIfCapFrmISLRxBbCreditDefault=fcIfCapFrmISLRxBbCreditDefault, fcIfErrorTable=fcIfErrorTable, cffFcFeMIBCompliance3=cffFcFeMIBCompliance3, fcIfFlapCtrlConfigNumFlaps=fcIfFlapCtrlConfigNumFlaps, fcIfToggleCtrlConfigDuration=fcIfToggleCtrlConfigDuration, fcIfC2AccountingEntry=fcIfC2AccountingEntry)
