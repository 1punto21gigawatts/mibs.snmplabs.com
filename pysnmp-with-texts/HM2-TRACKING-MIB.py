#
# PySNMP MIB module HM2-TRACKING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-TRACKING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hm2ConfigurationMibs, HmTimeSeconds1970, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmTimeSeconds1970", "HmEnabledStatus")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
inetCidrRouteEntry, = mibBuilder.importSymbols("IP-FORWARD-MIB", "inetCidrRouteEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, Integer32, NotificationType, MibIdentifier, ObjectIdentity, iso, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "Integer32", "NotificationType", "MibIdentifier", "ObjectIdentity", "iso", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Counter32", "Gauge32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hm2TrackingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 115))
hm2TrackingMib.setRevisions(('2013-09-03 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2TrackingMib.setRevisionsDescriptions(('Initial Version',))
if mibBuilder.loadTexts: hm2TrackingMib.setLastUpdated('201309031200Z')
if mibBuilder.loadTexts: hm2TrackingMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2TrackingMib.setContactInfo('Customer Support Postal: Hirschmann Automation and Control GmbH Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Tel: +49 7127 14 1981 Web: http://www.hicomcenter.com/ E-Mail: hicomcenter@hirschmann.com')
if mibBuilder.loadTexts: hm2TrackingMib.setDescription('The Hirschmann Private Tracking MIB definitions for Platform devices.')
hm2TrackingMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 0))
hm2TrackingMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 1))
hm2TrackStatusChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 115, 0, 1)).setObjects(("HM2-TRACKING-MIB", "hm2TrackType"), ("HM2-TRACKING-MIB", "hm2TrackId"), ("HM2-TRACKING-MIB", "hm2TrackStatus"), ("HM2-TRACKING-MIB", "hm2TrackOperState"))
if mibBuilder.loadTexts: hm2TrackStatusChangeEvent.setStatus('current')
if mibBuilder.loadTexts: hm2TrackStatusChangeEvent.setDescription('Sent when the state of a tracking instance changes between up and down.')
hm2TrackingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1))
hm2TrackingInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 2))
hm2TrackingPingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3))
hm2TrackingLogicalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 4))
hm2TrackingApplicationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 5))
hm2TrackingStaticRouteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 6))
hm2TrackingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1), )
if mibBuilder.loadTexts: hm2TrackingConfigTable.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingConfigTable.setDescription('Tracking configuration table. This table provides the interface to setup a specific tracking instance in the tracking database.')
hm2TrackingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1), ).setIndexNames((0, "HM2-TRACKING-MIB", "hm2TrackType"), (0, "HM2-TRACKING-MIB", "hm2TrackId"))
if mibBuilder.loadTexts: hm2TrackingConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingConfigEntry.setDescription('The entry of the hm2TrackingConfigTable.')
hm2TrackType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("ping", 2), ("logical", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2TrackType.setStatus('current')
if mibBuilder.loadTexts: hm2TrackType.setDescription('The kind of an object being tracked.')
hm2TrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2TrackId.setStatus('current')
if mibBuilder.loadTexts: hm2TrackId.setDescription('The id of an object being tracked.')
hm2TrackName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackName.setStatus('current')
if mibBuilder.loadTexts: hm2TrackName.setDescription('The name of an object being tracked.')
hm2TrackDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2TrackDescription.setStatus('current')
if mibBuilder.loadTexts: hm2TrackDescription.setDescription('The name of an object being tracked.')
hm2TrackOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notReady", 3))).clone('notReady')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackOperState.setStatus('current')
if mibBuilder.loadTexts: hm2TrackOperState.setDescription('Shows if the tracked object is currently up(1), down(2) or notReady(3). in case the state indicates notReady, the corresponding configuration is missing or invalid.')
hm2TrackNumberOfChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackNumberOfChanges.setStatus('current')
if mibBuilder.loadTexts: hm2TrackNumberOfChanges.setDescription('The number of state changes after an object being tracked, entered its operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
hm2TrackTimeLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 7), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackTimeLastChange.setStatus('current')
if mibBuilder.loadTexts: hm2TrackTimeLastChange.setDescription('The time of the last state change of an object being tracked, measured in seconds since 00:00:00, January 1, 1970. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains the time the system was re-initialized. value.')
hm2TrackSendStateChangeTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 8), HmEnabledStatus().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2TrackSendStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: hm2TrackSendStateChangeTrap.setDescription('Enables or disables the sending of a trap when hm2TrackStatus changes')
hm2TrackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2TrackStatus.setStatus('current')
if mibBuilder.loadTexts: hm2TrackStatus.setDescription('Defines the status of the tracking database entry. Set to createAndWait(5) to create a new row. Set to destroy(6) to delete an entry. Reads as active(1) if the tracked object exists and is trackable, notReady(3) otherwise.')
hm2TrackingInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 2, 1), )
if mibBuilder.loadTexts: hm2TrackingInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingInterfaceTable.setDescription('Interface tracking configuration table. This table provides the interface to setup the parameters for an interface tracking object.')
hm2TrackingInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 2, 1, 1), ).setIndexNames((0, "HM2-TRACKING-MIB", "hm2TrackInterfaceId"))
if mibBuilder.loadTexts: hm2TrackingInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingInterfaceEntry.setDescription('The entry of the hm2TrackingInterfaceTable.')
hm2TrackInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2TrackInterfaceId.setStatus('current')
if mibBuilder.loadTexts: hm2TrackInterfaceId.setDescription('The identifier of the interface object being tracked.')
hm2TrackIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 2, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackIfNumber.setStatus('current')
if mibBuilder.loadTexts: hm2TrackIfNumber.setDescription('The number of the interface being tracked.')
hm2TrackIfLinkUpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackIfLinkUpDelay.setStatus('current')
if mibBuilder.loadTexts: hm2TrackIfLinkUpDelay.setDescription('If a link-up recovers within this delay, the tracked object is not considered as up.')
hm2TrackIfLinkDownDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackIfLinkDownDelay.setStatus('current')
if mibBuilder.loadTexts: hm2TrackIfLinkDownDelay.setDescription('If a link-down recovers within this delay, the tracked object is not considered as down.')
hm2TrackingPingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1), )
if mibBuilder.loadTexts: hm2TrackingPingTable.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingPingTable.setDescription('Ping tracking configuration table. This table provides the interface to setup the parameters for a ping tracking object.')
hm2TrackingPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1), ).setIndexNames((0, "HM2-TRACKING-MIB", "hm2TrackPingId"))
if mibBuilder.loadTexts: hm2TrackingPingEntry.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingPingEntry.setDescription('The entry of the hm2TrackingPingTable.')
hm2TrackPingId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2TrackPingId.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingId.setDescription('The identifier of the ping object being tracked.')
hm2TrackPingIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingIfNumber.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingIfNumber.setDescription('The number of the source interface, the ping packets are sent. A value of Zero (0) indicates that no interface is configured.')
hm2TrackPingInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingInetAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingInetAddrType.setDescription('The address type of the router being monitored.')
hm2TrackPingInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingInetAddr.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingInetAddr.setDescription('The address of the router being monitored.')
hm2TrackPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 20000)).clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingInterval.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingInterval.setDescription('The number of milliseconds between the pings to the target router address.')
hm2TrackPingMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingMiss.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingMiss.setDescription('This specifies the number of consecutive ping misses until the tracked object is considered to be down.')
hm2TrackPingSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingSuccess.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingSuccess.setDescription('This specifies the number of consecutive ping successes until the tracked object is considered to be up.')
hm2TrackPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10000)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingTimeout.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingTimeout.setDescription('This specifies the timeout in milliseconds for a ping reply. After the timeout the ping reply is considered as lost.')
hm2TrackPingTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackPingTTL.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingTTL.setDescription('This specifies the time to live for a ping request packet.')
hm2TrackPingBestRouteIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 3, 1, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackPingBestRouteIfNumber.setStatus('current')
if mibBuilder.loadTexts: hm2TrackPingBestRouteIfNumber.setDescription('This shows the number of the interface which belongs to the best route. The interface number is zero if the best route is not used to send ping packets.')
hm2TrackLogicalInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 4, 1), )
if mibBuilder.loadTexts: hm2TrackLogicalInstanceTable.setStatus('current')
if mibBuilder.loadTexts: hm2TrackLogicalInstanceTable.setDescription('This table contains the configuration of the tracking instances that are combined into logical tracking instances.')
hm2TrackLogicalInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 4, 1, 1), ).setIndexNames((0, "HM2-TRACKING-MIB", "hm2TrackLogicalId"))
if mibBuilder.loadTexts: hm2TrackLogicalInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: hm2TrackLogicalInstanceEntry.setDescription('The entry of the hm2TrackLogicalInstanceTable.')
hm2TrackLogicalId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2TrackLogicalId.setStatus('current')
if mibBuilder.loadTexts: hm2TrackLogicalId.setDescription('The identifier of the logical object being tracked.')
hm2TrackLogicalOperandNameA = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackLogicalOperandNameA.setStatus('current')
if mibBuilder.loadTexts: hm2TrackLogicalOperandNameA.setDescription('The name of the tracking object to be used as operand A in the logical operation: A operator B.')
hm2TrackLogicalOperandNameB = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 4, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackLogicalOperandNameB.setStatus('current')
if mibBuilder.loadTexts: hm2TrackLogicalOperandNameB.setDescription('The name of the tracking object to be used as operand B in the logical operation: A operator B.')
hm2TrackLogicalOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2))).clone('or')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2TrackLogicalOperator.setStatus('current')
if mibBuilder.loadTexts: hm2TrackLogicalOperator.setDescription('Defines the logical operation performed on the configured operands A and B.')
hm2TrackingApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 5, 1), )
if mibBuilder.loadTexts: hm2TrackingApplicationTable.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingApplicationTable.setDescription('This table contains information about registered applications, for each object being tracked.')
hm2TrackingApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 5, 1, 1), ).setIndexNames((0, "HM2-TRACKING-MIB", "hm2TrackAppId"), (0, "HM2-TRACKING-MIB", "hm2TrackType"), (0, "HM2-TRACKING-MIB", "hm2TrackId"))
if mibBuilder.loadTexts: hm2TrackingApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: hm2TrackingApplicationEntry.setDescription('The entry of the hm2TrackingApplicationTable.')
hm2TrackAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2TrackAppId.setStatus('current')
if mibBuilder.loadTexts: hm2TrackAppId.setDescription('The id of an application which tracks an object.')
hm2TrackAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 5, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackAppName.setStatus('current')
if mibBuilder.loadTexts: hm2TrackAppName.setDescription('The name of the registered application.')
hm2TrackAppObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 5, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackAppObjectName.setStatus('current')
if mibBuilder.loadTexts: hm2TrackAppObjectName.setDescription('The name of the tracking object the application registered for.')
hm2TrackStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 6, 1), )
if mibBuilder.loadTexts: hm2TrackStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: hm2TrackStaticRouteTable.setDescription('.')
hm2TrackStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 6, 1, 1), )
inetCidrRouteEntry.registerAugmentions(("HM2-TRACKING-MIB", "hm2TrackStaticRouteEntry"))
hm2TrackStaticRouteEntry.setIndexNames(*inetCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: hm2TrackStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: hm2TrackStaticRouteEntry.setDescription('.')
hm2TrackStaticRouteTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 6, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2TrackStaticRouteTrackId.setStatus('current')
if mibBuilder.loadTexts: hm2TrackStaticRouteTrackId.setDescription('Associate and dissociate the tracking instance to a static route. To dissociate, pass an empty string.')
hm2TrackStaticRouteTrackState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 115, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notReady", 3))).clone('notReady')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2TrackStaticRouteTrackState.setStatus('current')
if mibBuilder.loadTexts: hm2TrackStaticRouteTrackState.setDescription('Shows if the tracked object is currently up(1), down(2) or notReady(3). in case the state indicates notReady, the corresponding configuration is missing or invalid.')
mibBuilder.exportSymbols("HM2-TRACKING-MIB", hm2TrackPingBestRouteIfNumber=hm2TrackPingBestRouteIfNumber, hm2TrackAppId=hm2TrackAppId, hm2TrackPingIfNumber=hm2TrackPingIfNumber, hm2TrackingApplicationGroup=hm2TrackingApplicationGroup, hm2TrackStatusChangeEvent=hm2TrackStatusChangeEvent, hm2TrackPingInetAddrType=hm2TrackPingInetAddrType, hm2TrackStaticRouteTrackId=hm2TrackStaticRouteTrackId, hm2TrackPingSuccess=hm2TrackPingSuccess, hm2TrackIfNumber=hm2TrackIfNumber, hm2TrackPingId=hm2TrackPingId, hm2TrackStaticRouteEntry=hm2TrackStaticRouteEntry, hm2TrackType=hm2TrackType, hm2TrackPingInetAddr=hm2TrackPingInetAddr, hm2TrackingMib=hm2TrackingMib, hm2TrackLogicalInstanceTable=hm2TrackLogicalInstanceTable, hm2TrackingInterfaceGroup=hm2TrackingInterfaceGroup, hm2TrackingPingGroup=hm2TrackingPingGroup, hm2TrackingConfigEntry=hm2TrackingConfigEntry, hm2TrackingApplicationEntry=hm2TrackingApplicationEntry, hm2TrackSendStateChangeTrap=hm2TrackSendStateChangeTrap, hm2TrackLogicalInstanceEntry=hm2TrackLogicalInstanceEntry, hm2TrackTimeLastChange=hm2TrackTimeLastChange, hm2TrackStaticRouteTable=hm2TrackStaticRouteTable, hm2TrackPingMiss=hm2TrackPingMiss, hm2TrackingPingEntry=hm2TrackingPingEntry, hm2TrackOperState=hm2TrackOperState, hm2TrackName=hm2TrackName, hm2TrackLogicalId=hm2TrackLogicalId, hm2TrackingApplicationTable=hm2TrackingApplicationTable, hm2TrackInterfaceId=hm2TrackInterfaceId, hm2TrackPingInterval=hm2TrackPingInterval, hm2TrackingStaticRouteGroup=hm2TrackingStaticRouteGroup, hm2TrackingInterfaceEntry=hm2TrackingInterfaceEntry, hm2TrackingPingTable=hm2TrackingPingTable, hm2TrackPingTTL=hm2TrackPingTTL, hm2TrackingMibNotifications=hm2TrackingMibNotifications, hm2TrackingMibObjects=hm2TrackingMibObjects, hm2TrackAppName=hm2TrackAppName, hm2TrackDescription=hm2TrackDescription, PYSNMP_MODULE_ID=hm2TrackingMib, hm2TrackIfLinkDownDelay=hm2TrackIfLinkDownDelay, hm2TrackLogicalOperandNameA=hm2TrackLogicalOperandNameA, hm2TrackingLogicalGroup=hm2TrackingLogicalGroup, hm2TrackStaticRouteTrackState=hm2TrackStaticRouteTrackState, hm2TrackIfLinkUpDelay=hm2TrackIfLinkUpDelay, hm2TrackPingTimeout=hm2TrackPingTimeout, hm2TrackStatus=hm2TrackStatus, hm2TrackingConfigGroup=hm2TrackingConfigGroup, hm2TrackingInterfaceTable=hm2TrackingInterfaceTable, hm2TrackId=hm2TrackId, hm2TrackNumberOfChanges=hm2TrackNumberOfChanges, hm2TrackLogicalOperandNameB=hm2TrackLogicalOperandNameB, hm2TrackLogicalOperator=hm2TrackLogicalOperator, hm2TrackAppObjectName=hm2TrackAppObjectName, hm2TrackingConfigTable=hm2TrackingConfigTable)
