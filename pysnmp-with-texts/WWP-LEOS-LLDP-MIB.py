#
# PySNMP MIB module WWP-LEOS-LLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-LLDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, IpAddress, NotificationType, MibIdentifier, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, ObjectIdentity, Gauge32, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "IpAddress", "NotificationType", "MibIdentifier", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "ObjectIdentity", "Gauge32", "Integer32", "Unsigned32")
DisplayString, TruthValue, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TimeStamp", "TextualConvention")
wwpModulesLeos, wwpModules = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos", "wwpModules")
wwpLeosLldpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26))
wwpLeosLldpMIB.setRevisions(('2004-04-18 00:00', '2003-04-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosLldpMIB.setRevisionsDescriptions(('Whole MIB deprecated.', 'Initial Version.',))
if mibBuilder.loadTexts: wwpLeosLldpMIB.setLastUpdated('200404180000Z')
if mibBuilder.loadTexts: wwpLeosLldpMIB.setOrganization('IEEE 802.1AB Workgroup')
if mibBuilder.loadTexts: wwpLeosLldpMIB.setContactInfo('The Institute of Electrical and Electronics Engineers, Inc. 3 Park Avenue, New York, NY 10016-5997, USA http://grouper.ieee.org/groups/802/1/index.html')
if mibBuilder.loadTexts: wwpLeosLldpMIB.setDescription('The MIB module for LLDP configuration, statistics, local system data and remote systems data components.')
wwpLeosLldpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1))
wwpLeosLldpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1))
wwpLeosLldpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2))
wwpLeosLldpLocalSystemData = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3))
wwpLeosLldpRemoteSystemsData = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4))
wwpLeosLldpExtentions = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 5))
wwpLeosLldpGlobalAtts = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 6))
wwpLeosLldpNotifMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 3))
wwpLeosLldpNotifMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 3, 0))
class TimeFilter(TextualConvention, TimeTicks):
    description = "To be used for the index to a table. Allows an application to download only those rows changed since a particular time. A row is considered changed if the value of any object in the row changes or if the row is created or deleted. When sysUpTime is equal to zero, this table shall be empty. One entry exists for each past value of sysUpTime, except that the whole table is purged should sysUpTime wrap. As this basic row is updated new conceptual rows are created (which still share the now updated object values with all other instances). The number of instances which are created is determined by the value of sysUpTime at which the basic row was last updated. One instance will exist for each value of sysUpTime at the last update time for the row. A new timeMark instance is created for each new sysUpTime value. Each new conceptual row will be associated with the timeMark instance which was created at the value of sysUpTime with which the conceptual row is to be associated. By definition all conceptual rows were updated at or after time zero and so at least one conceptual row (associated with timeMark.0) must exist for each underlying (basic) row. See the appendix for further discussion of this variable. Consider the following fooTable: fooTable ... INDEX { fooTimeMark, fooIndex } FooEntry { fooTimeMark TimeFilter fooIndex INTEGER, fooCounts Counter } Should there be two basic rows in this table (fooIndex == 1, fooIndex == 2) and row 1 was updated most recently at time 6, while row 2 was updated most recently at time 8, and both rows had been updated on several earlier occasions such that the deprecated values were 5 and 9 respectively then the following fooCounts instances would exist. fooCounts.0.1 5 fooCounts.0.2 9 fooCounts.1.1 5 fooCounts.1.2 9 fooCounts.2.1 5 fooCounts.2.2 9 fooCounts.3.1 5 fooCounts.3.2 9 fooCounts.4.1 5 fooCounts.4.2 9 fooCounts.5.1 5 fooCounts.5.2 9 fooCounts.6.1 5 fooCounts.6.2 9 fooCounts.7.2 9 -- note that row 1 doesn't exist for fooCounts.8.2 9 -- times 7 and 8"
    status = 'deprecated'

class SnmpAdminString(TextualConvention, OctetString):
    description = 'An octet string containing administrative information, preferably in human-readable form. To facilitate internationalization, this information is represented using the ISO/IEC IS 10646-1 character set, encoded as an octet string using the UTF-8 transformation format described in [RFC2279]. Since additional code points are added by amendments to the 10646 standard from time to time, implementations must be prepared to encounter any code point from 0x00000000 to 0x7fffffff. Byte sequences that do not correspond to the valid UTF-8 encoding of a code point or are outside this range are prohibited. The use of control codes should be avoided. When it is necessary to represent a newline, the control code sequence CR LF should be used. The use of leading or trailing white space should be avoided. For code points not directly supported by user interface hardware or software, an alternative means of entry and display, such as hexadecimal, may be provided. For information encoded in 7-bit US-ASCII, the UTF-8 encoding is identical to the US-ASCII encoding. UTF-8 may require multiple bytes to represent a single character / code point; thus the length of this object in octets may be different from the number of characters encoded. Similarly, size constraints refer to the number of encoded octets, not the number of characters represented by an encoding. Note that when this TC is used for an object that is used or envisioned to be used as an index, then a SIZE restriction MUST be specified so that the number of sub-identifiers for any object instance does not exceed the limit of 128, as defined by [RFC1905]. Note that the size of an SnmpAdminString object is measured in octets, not characters. '
    status = 'deprecated'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class WwpLeosLldpChassisIdType(TextualConvention, Integer32):
    description = "This TC describes the source of a chassis identifier. The enumeration 'entPhysicalAlias(1)' represents a chassis identifier based on the value of entPhysicalAlias for a chassis component (i.e., an entPhysicalClass value of 'chassis(3)'). The enumeration 'ifAlias(2)' represents a chassis identifier based on the value of ifAlias for an interface on the containing chassis. The enumeration 'portEntPhysicalAlias(3)' represents a chassis identifier based on the value of entPhysicalAlias for a port component (i.e., entPhysicalClass value of 'port(10)'), within the containing chassis. The enumeration 'backplaneEntPhysicalAlias(4)' represents a chassis identifier based on the value of entPhysicalAlias for backplane component (i.e., entPhysicalClass value of 'backplane(4)'), within the containing chassis. The enumeration 'macAddress(5)' represents a chassis identifier based on the value of a unicast source MAC address (encoded in network byte order and IEEE 802.3 canonical bit order), of a port on the containing chassis. The enumeration 'networkAddress(6)' represents a chassis identifier based on a network address, associated with a particular chassis. The encoded address is actually composed of two fields. The first field is a single octet, representing the IANA AddressFamilyNumbers value for the specific address type, and the second field is the network address value. The enumeration 'local(7)' represents a chassis identifier based on a locally defined value."
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("entPhysicalAlias", 1), ("ifAlias", 2), ("portEntPhysicalAlias", 3), ("backplaneEntPhysicalAlias", 4), ("macAddress", 5), ("networkAddress", 6), ("local", 7))

class WwpLeosLldpChassisId(TextualConvention, OctetString):
    description = "This TC describes the format of a chassis identifier string. Objects of this type are always used with an associated WwpLeosLldpChassisIdType object, which identifies the format of the particular WwpLeosLldpChassisId object instance. If the associated ChassisIdType object has a value of 'entPhysicalAlias(1)', then the octet string identifies a particular instance of the entPhysicalAlias object for a chassis component (i.e., an entPhysicalClass value of 'chassis(3)'). If the associated WwpLeosLldpChassisIdType object has a value of 'ifAlias(2)', then the octet string identifies a particular instance of the ifAlias object for an interface on the containing chassis. If the associated WwpLeosLldpChassisIdType object has a value of 'portEntPhysicalAlias(3)', then the octet string identifies a particular instance of the entPhysicalAlias object for a port component within the containing chassis. If the associated WwpLeosLldpChassisIdType object has a value of 'backplaneEntPhysicalAlias(4)', then the octet string identifies a particular instance of the entPhysicalAlias object for the backplane component within the containing chassis. If the associated ChassisIdType object has a value of 'macAddress(5)', then this string identifies a particular unicast source MAC address (encoded in network byte order and IEEE 802.3 canonical bit order), of a port on the containing chassis. If the associated ChassisIdType object has a value of 'networkAddress(6)', then this string identifies a particular network address, encoded in network byte order, associated with one or more ports on the containing chassis. The first octet contains the IANA Address Family Numbers enumeration value for the specific address type, and octets 2 through N contain the network address value in network byte order. If the associated ChassisIdType object has a value of 'local(7)', then this string identifies a locally assigned Chassis ID."
    status = 'deprecated'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class WwpLeosLldpPortIdType(TextualConvention, Integer32):
    description = "This TC describes the source of a particular type of port identifier used in the LLDP MIB. The enumeration 'ifAlias(1)' represents a port identifier based on the ifAlias MIB object. The enumeration 'portEntPhysicalAlias(2)' represents a port identifier based on the value of entPhysicalAlias for a port component (i.e., entPhysicalClass value of 'port(10)'), within the containing chassis. The enumeration 'backplaneEntPhysicalAlias(3)' represents a port identifier based on the value of entPhysicalAlias for a backplane component (i.e., entPhysicalClass value of 'backplane(4)'), within the containing chassis. The enumeration 'macAddress(4)' represents a port identifier based on a unicast source MAC address, which has been detected by the agent and associated with a particular port. The enumeration 'networkAddress(5)' represents a port identifier based on a network address, detected by the agent and associated with a particular port. The enumeration 'local(6)' represents a port identifier based on a value locally assigned."
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ifAlias", 1), ("portEntPhysicalAlias", 2), ("backplaneEntPhysicalAlias", 3), ("macAddress", 4), ("networkAddress", 5), ("local", 6))

class WwpLeosLldpPortId(TextualConvention, OctetString):
    description = "This TC describes the format of a port identifier string. Objects of this type are always used with an associated WwpLeosLldpPortIdType object, which identifies the format of the particular WwpLeosLldpPortId object instance. If the associated WwpLeosLldpPortIdType object has a value of 'ifAlias(1)', then the octet string identifies a particular instance of the ifAlias object. If the associated WwpLeosLldpPortIdType object has a value of 'portEntPhysicalAlias(2)', then the octet string identifies a particular instance of the entPhysicalAlias object for a port component (i.e., entPhysicalClass value of 'port(10)'). If the associated LlpdPortIdType object has a value of 'backplaneEntPhysicalAlias(3)', then the octet string identifies a particular instance of the entPhysicalAlias object for a backplane component (i.e., entPhysicalClass value of 'port(4)'). If the associated WwpLeosLldpPortIdType object has a value of 'macAddr(4)', then this string identifies a particular unicast source MAC address associated with the port. If the associated WwpLeosLldpPortIdType object has a value of 'networkAddress(5)', then this string identifies a network address associated with the port. The first octet contains the IANA AddressFamilyNumbers enumeration value for the specific address type, and octets 2 through N contain the networkAddress address value in network byte order. If the associated WwpLeosLldpPortIdType object has a value of 'local(6)', then this string identifies a locally assigned port ID."
    status = 'deprecated'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class WwpLeosLldpManAddrIfSubtype(TextualConvention, Integer32):
    description = "This TC describes the basis of a particular type of management address interface used in the LLDP MIB. The enumeration 'unknown(1)' represents the case where the interface is not known. The enumeration 'ifIndex(2)' represents interface identifier based on the ifIndex MIB object. The enumeration 'systemPortNumber(3)' represents interface identifier based on the system port numbering convention."
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("ifIndex", 2), ("systemPortNumber", 3))

class WwpLeosLldpManAddress(TextualConvention, OctetString):
    description = 'The value of a management address.'
    status = 'deprecated'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 31)

class WwpLeosLldpSystemCapabilitiesMap(TextualConvention, Bits):
    description = "This TC describes the system capabilities. The bit 'repeater(0)' indicates that the system has repeater capability. The bit 'bridge(1)' indicates that the system has bridge capability. The bit 'accessPoint(2)' indicates that the system has access point capability. The bit 'router(3)' indicates that the system has router capability. The bit 'telephone(4)' indicates that the system has telephone capability. The bit 'wirelessStation(5)' indicates that the system has wireless Station capability. The bit 'stationOnly(6)' indicates that the system has only station capability and nothing else."
    status = 'deprecated'
    namedValues = NamedValues(("repeater", 0), ("bridge", 1), ("accessPoint", 2), ("router", 3), ("telephone", 4), ("wirelessStation", 5), ("stationOnly", 6))

class WwpLeosLldpPortNumber(TextualConvention, Integer32):
    description = "Each port contained in the chassis (that is known to the LLDP agent) is uniquely identified by a port number. A port number has no mandatory relationship to an interface number (of the interfaces MIB.) However, if interfaces MIB is present, it is strongly recommended that a port number has the same value as the corresponding interface's interface number. Port numbers are in the range (1..1024) since a particular port is also represented by the corresponding port number bit in LldpPortList. For more information about the LldpPortList, please refer to 'LldpPortList' TC description."
    status = 'deprecated'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1024)

class WwpLeosLldpPortList(TextualConvention, OctetString):
    reference = 'description is taken from RFC 2674, Section 5'
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the system is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'deprecated'

wwpLeosLldpMessageTxInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32768)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpMessageTxInterval.setReference('IEEE 802.1AB/D8 section 10.5.5.3')
if mibBuilder.loadTexts: wwpLeosLldpMessageTxInterval.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpMessageTxInterval.setDescription('The interval at which LLDP frames are transmitted on behalf of this LLDP agent. The default value for lldpMessageTxInterval object is 30 seconds. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a re-initialization of the management system.')
wwpLeosLldpMessageTxHoldMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpMessageTxHoldMultiplier.setReference('IEEE 802.1AB/D8 section 10.5.5.3')
if mibBuilder.loadTexts: wwpLeosLldpMessageTxHoldMultiplier.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpMessageTxHoldMultiplier.setDescription("The time-to-live value expressed as a multiple of the wwpLeosLldpMessageTxInterval object. The actual time-to-live value used in LLDP frames, transmitted on behalf of this LLDP agent, can be expressed by the following formula: TTL = min(65535, (wwpLeosLldpMessageTxInterval * wwpLeosLldpMessageTxHoldMultiplier)) For example, if the value of wwpLeosLldpMessageTxInterval is '30', and the value of wwpLeosLldpMessageTxHoldMultiplier is '4', then the value '120' is encoded in the TTL field in the LLDP header. The default value for wwpLeosLldpMessageTxHoldMultiplier object is 4. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a re-initialization of the management system.")
wwpLeosLldpReinitDelay = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpReinitDelay.setReference('IEEE 802.1AB/D8 section 10.5.3.3')
if mibBuilder.loadTexts: wwpLeosLldpReinitDelay.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpReinitDelay.setDescription("The wwpLeosLldpReinitDelay indicates the delay (in units of seconds) from when adminStatus becomes 'disable' until re-initialization will be attempted. The default value for wwpLeosLldpReintDelay object is one second. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a re-initialization of the management system.")
wwpLeosLldpTxDelay = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(8)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpTxDelay.setReference('IEEE 802.1AB/D8 section 10.5.3.3')
if mibBuilder.loadTexts: wwpLeosLldpTxDelay.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpTxDelay.setDescription('The wwpLeosLldpTxDelay indicates the delay (in units of seconds) between successive LLDP frame transmissions initiated by value/status changes in the LLDP local systems MIB. The recommended value for the wwpLeosLldpTxDelay is set by the following formula: 1 <= wwpLeosLldpTxDelay <= (0.25 * wwpLeosLldpMessageTxInterval) The default value for wwpLeosLldpTxDelay object is 8 seconds. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a re-initialization of the management system.')
wwpLeosLldpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosLldpPortConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigTable.setDescription('The table that controls LLDP frame transmission on individual ports.')
wwpLeosLldpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpPortConfigPortNum"))
if mibBuilder.loadTexts: wwpLeosLldpPortConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigEntry.setDescription('LLDP configuration information for a particular port. The port must be contained in the same chassis as the LLDP agent. This configuration parameter controls the transmission and the reception of LLDP frames on those ports whose rows are created in this table.')
wwpLeosLldpPortConfigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5, 1, 1), WwpLeosLldpPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosLldpPortConfigPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigPortNum.setDescription('The index value used to identify the port component (contained in the local chassis with the LLDP agent) associated with this entry. The value of this object is used as a port index to the wwpLeosLldpPortConfigTable.')
wwpLeosLldpPortConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("txOnly", 1), ("rxOnly", 2), ("txAndRx", 3), ("disabled", 4))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpPortConfigAdminStatus.setReference('IEEE 802.1AB/D8 section 9.5.1')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigAdminStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigAdminStatus.setDescription("The administratively desired status of the local LLDP agent. If the associated wwpLeosLldpPortConfigAdminStatus object has a value of 'txOnly(1)', then this port will transmit LLDP frames only and it will not store any information about the remote systems connected. If the associated wwpLeosLldpPortConfigAdminStatus object has a value of 'rxOnly(2)', then this port will receive LLDP frames only. If the associated wwpLeosLldpPortConfigAdminStatus object has a value of 'txAndRx(3)', then this port will transmit and receive LLDP frames. If the associated wwpLeosLldpPortConfigAdminStatus object has a value of 'disabled(4)', then this port will not transmit or receive LLDP frames.")
wwpLeosLldpPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5, 1, 3), Bits().clone(namedValues=NamedValues(("portDesc", 4), ("sysName", 5), ("sysDesc", 6), ("sysCap", 7))).clone(namedValues=NamedValues(("portDesc", 4), ("sysName", 5), ("sysDesc", 6), ("sysCap", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpPortConfigTLVsTxEnable.setReference('IEEE 802.1AB/D8 section 10.2.1.1')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigTLVsTxEnable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigTLVsTxEnable.setDescription("The wwpLeosLldpTLVsTxEnable, defined as a bitmap, includes the basic set of LLDP TLVs whose transmission is allowed on the local LLDP agent by the network management. Each bit in the bitmap corresponds to a TLV type associated with a specific optional TLV. Some of the bits, such as 0 through 3, are not included in the bitmap since they represent mandatory TLVs that all LLDP agents should transmit. It should be noted that the organizationally defined TLVs are excluded from the wwpLeosLldpTLVsTxEnable bitmap. LLDP Organization Specific Information Extension MIBs should have similar configuration object to control transmission of their organizationally defined TLVs. The bit 'portDesc(4)' indicates that LLDP agent should transmit 'Port Description TLV'. The bit 'sysName(5)' indicates that LLDP agent should transmit 'System Name TLV'. The bit 'sysDesc(6)' indicates that LLDP agent should transmit 'System Description TLV'. The bit 'sysCap(7)' indicates that LLDP agent should transmit 'System Capabilities TLV'. There is no bit reserved for the management address TLV type since transmission of management address TLVs are controlled by another object, wwpLeosLldpConfigManAddrTable. If the agent is capable of storing non-volatile configuration, then the value of this object must be restored after a re-initialization of the management system.")
wwpLeosLldpPortConfigStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpPortConfigStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigStatsClear.setDescription("Setting this object to 'true' will clear the LLDP statistics of given port.")
wwpLeosLldpPortConfigOperPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpPortConfigOperPortSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigOperPortSpeed.setDescription('The current egress bandwidth of the port in kbps.')
wwpLeosLldpPortConfigReqPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpPortConfigReqPortSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLldpPortConfigReqPortSpeed.setDescription('The requested egress bandwidth of the port in kbps. If no request to change the egress bandwidth has been made, this value will be 0.')
wwpLeosLldpConfigManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosLldpConfigManAddrTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpConfigManAddrTable.setDescription('The table that controls selection of LLDP management address TLV instances to be transmitted on individual ports.')
wwpLeosLldpManAddrPortsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 6, 1, 1), WwpLeosLldpPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpManAddrPortsTxEnable.setReference('IEEE 802.1AB/D8 section 10.2.1.1')
if mibBuilder.loadTexts: wwpLeosLldpManAddrPortsTxEnable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpManAddrPortsTxEnable.setDescription('a set of ports that are identified by a PortList, in which each port is represented as a bit. The corresponding local system management address instance will be transmitted on the member ports of the wwpLeosLldpManAddrPortsTxEnable.')
wwpLeosLldpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosLldpStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsTable.setDescription("A table containing LLDP statistics for individual ports. Entries are not required to exist in this table while the lldpPortConfigEntry object is equal to 'disabled(4)'.")
wwpLeosLldpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsPortNum"))
if mibBuilder.loadTexts: wwpLeosLldpStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsEntry.setDescription('LLDP frame statistics for a particular port. The port must be contained in the same chassis as the LLDP agent. All statistical counter values in a particular entry shall be maintained on a continuing basis and shall not be deleted upon expiration of rxInfoTTL timing counters in the LLDP remote systems MIB of the receipt of a shutdown frame from a remote LLDP agent. All statistical counters associated with a particular port on the local LLDP agent become frozen whenever the adminStatus is disabled for the same port.')
wwpLeosLldpStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 1), WwpLeosLldpPortNumber())
if mibBuilder.loadTexts: wwpLeosLldpStatsPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsPortNum.setDescription('The index value used to identify the port component (contained in the local chassis with the LLDP agent) associated with this entry. The value of this object is used as a port index to the lldpStatsTable.')
wwpLeosLldpStatsFramesDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesDiscardedTotal.setReference('IEEE 802.1AB/D8 section 11.4.2')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesDiscardedTotal.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesDiscardedTotal.setDescription('The number of LLDP frames received by this LLDP agent on the indicated port, and then discarded for any reason. This counter can provide an indication that LLDP header formatting problems may exist with the local LLDP agent in the sending system or that LLDPDU validation problems may exit with the local LLDP agent in the receiving system. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of wwpLeosLldpCounterDiscontinuityTime.')
wwpLeosLldpStatsFramesInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesInErrors.setReference('IEEE 802.1AB/D8 section 11.4.2')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesInErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesInErrors.setDescription('The number of invalid LLDP frames received by this LLDP agent on the indicated port, while this LLDP agent is enabled. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of wwpLeosLldpCounterDiscontinuityTime.')
wwpLeosLldpStatsFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesInTotal.setReference('IEEE 802.1AB/D8 section 11.4.2')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesInTotal.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesInTotal.setDescription('The number of valid LLDP frames received by this LLDP agent on the indicated port, while this LLDP agent is enabled. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of wwpLeosLldpCounterDiscontinuityTime.')
wwpLeosLldpStatsFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesOutTotal.setReference('IEEE 802.1AB/D8 section 11.4.2')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesOutTotal.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsFramesOutTotal.setDescription('The number of LLDP frames transmitted by this LLDP agent on the indicated port. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of wwpLeosLldpCounterDiscontinuityTime.')
wwpLeosLldpStatsTLVsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsInErrors.setReference('IEEE 802.1AB/D8 section 11.4.2')
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsInErrors.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsInErrors.setDescription('The number of erroneous LLDP TLVs received by this LLDP agent on the indicated port. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of wwpLeosLldpCounterDiscontinuityTime.')
wwpLeosLldpStatsTLVsDiscardedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsDiscardedTotal.setReference('IEEE 802.1AB/D8 section 11.4.2')
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsDiscardedTotal.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsDiscardedTotal.setDescription('The number of LLDP TLVs discarded for any reason by this LLDP agent on the indicated port. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of wwpLeosLldpCounterDiscontinuityTime.')
wwpLeosLldpStatsTLVsUnrecognizedTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsUnrecognizedTotal.setReference('IEEE 802.1AB/D8 section 11.4.2')
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsUnrecognizedTotal.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsTLVsUnrecognizedTotal.setDescription('The number of LLDP TLVs received on the given port that are not recognized by this LLDP agent on the indicated port. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of wwpLeosLldpCounterDiscontinuityTime.')
wwpLeosLldpCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 2, 1, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpCounterDiscontinuityTime.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpCounterDiscontinuityTime.setDescription('This object is defined to record the time of the last discontinuity in statistics counters of the indicated port. The relevant counters are the specific instances associated with this port of any Counter32 objects contained in the wwpLeosLldpStatsTable. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
wwpLeosLldpLocChassisType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 1), WwpLeosLldpChassisIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocChassisType.setReference('IEEE 802.1AB/D8 section 9.4.2.2')
if mibBuilder.loadTexts: wwpLeosLldpLocChassisType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocChassisType.setDescription('The type of encoding used to identify the chassis associated with the local system.')
wwpLeosLldpLocChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 2), WwpLeosLldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocChassisId.setReference('IEEE 802.1AB/D8 section 9.4.2.3')
if mibBuilder.loadTexts: wwpLeosLldpLocChassisId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocChassisId.setDescription('The string value used to identify the chassis component associated with the local system.')
wwpLeosLldpLocSysName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocSysName.setReference('IEEE 802.1AB/D8 section 9.4.6.2')
if mibBuilder.loadTexts: wwpLeosLldpLocSysName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocSysName.setDescription('The string value used to identify the system name of the local system.')
wwpLeosLldpLocSysDesc = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocSysDesc.setReference('IEEE 802.1AB/D8 section 9.4.7.2')
if mibBuilder.loadTexts: wwpLeosLldpLocSysDesc.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocSysDesc.setDescription('The string value used to identify the system description of the local system.')
wwpLeosLldpLocSysCapSupported = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 5), WwpLeosLldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocSysCapSupported.setReference('IEEE 802.1AB/D8 section 9.4.8.2')
if mibBuilder.loadTexts: wwpLeosLldpLocSysCapSupported.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocSysCapSupported.setDescription('The bitmap value used to identify which system capabilities are supported on the local system.')
wwpLeosLldpLocSysCapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 6), WwpLeosLldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocSysCapEnabled.setReference('IEEE 802.1AB/D8 section 9.4.8.3')
if mibBuilder.loadTexts: wwpLeosLldpLocSysCapEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocSysCapEnabled.setDescription('The bitmap value used to identify which system capabilities are enabled on the local system.')
wwpLeosLldpLocPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 7), )
if mibBuilder.loadTexts: wwpLeosLldpLocPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocPortTable.setDescription('This table contains one or more rows per port information associated with the local system known to this agent.')
wwpLeosLldpLocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 7, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocPortNum"))
if mibBuilder.loadTexts: wwpLeosLldpLocPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocPortEntry.setDescription('Information about a particular port component. Entries may be created and deleted in this table by the agent.')
wwpLeosLldpLocPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 7, 1, 1), WwpLeosLldpPortNumber())
if mibBuilder.loadTexts: wwpLeosLldpLocPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocPortNum.setDescription('The index value used to identify the port component (contained in the local chassis with the LLDP agent) associated with this entry. The value of this object is used as a port index to the wwpLeosLldpLocPortTable.')
wwpLeosLldpLocPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 7, 1, 2), WwpLeosLldpPortIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocPortType.setReference('IEEE 802.1AB/D8 section 9.4.3.2')
if mibBuilder.loadTexts: wwpLeosLldpLocPortType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocPortType.setDescription("The type of port identifier encoding used in the associated 'wwpLeosLldpLocPortId' object.")
wwpLeosLldpLocPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 7, 1, 3), WwpLeosLldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocPortId.setReference('IEEE 802.1AB/D8 section 9.4.3.3')
if mibBuilder.loadTexts: wwpLeosLldpLocPortId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocPortId.setDescription('The string value used to identify the port component associated with a given port in the local system.')
wwpLeosLldpLocPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 7, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocPortDesc.setReference('IEEE 802.1AB/D8 section 9.4.5.2')
if mibBuilder.loadTexts: wwpLeosLldpLocPortDesc.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocPortDesc.setDescription("The string value used to identify the 802 LAN station's port description associated with the local system.")
wwpLeosLldpLocManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8), )
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrTable.setDescription('This table contains one row per management address information on the local system known to this agent.')
wwpLeosLldpLocManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocManAddrType"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocManAddr"))
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrEntry.setDescription("Management address information about a particular chassis component. There may be multiple management addresses configured on the system identified by a particular wwpLeosLldpLocChassisId. Each management address should have distinct 'management address type' (wwpLeosLldpLocManAddrType) and 'management address' (wwpLeosLldpLocManAddr.) Entries may be created and deleted in this table by the agent.")
wwpLeosLldpConfigManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 1, 6, 1), )
wwpLeosLldpLocManAddrEntry.registerAugmentions(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpConfigManAddrEntry"))
wwpLeosLldpConfigManAddrEntry.setIndexNames(*wwpLeosLldpLocManAddrEntry.getIndexNames())
if mibBuilder.loadTexts: wwpLeosLldpConfigManAddrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpConfigManAddrEntry.setDescription('LLDP configuration information that specifies the set of ports (represented as a PortList) on which the local system management address instance will be transmitted. This configuration object augments the wwpLeosLldpLocManAddrEntry, therefore it is only present along with the management address instance contained in the associated wwpLeosLldpLocManAddrEntry entry. If the agent is capable of storing non-volatile configuration, then each active wwpLeosLldpManAddrConfigTxPortsEntry must be re-created (along with the corresponding wwpLeosLldpLocManAddrEntry) after a re-initialization of the management system.')
wwpLeosLldpLocManAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8, 1, 1), AddressFamilyNumbers())
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrType.setReference('IEEE 802.1AB/D8 section 9.4.9.3')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrType.setDescription("The type of management address identifier encoding used in the associated 'wwpLeosLldpLocManagmentAddr' object.")
wwpLeosLldpLocManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8, 1, 2), WwpLeosLldpManAddress())
if mibBuilder.loadTexts: wwpLeosLldpLocManAddr.setReference('IEEE 802.1AB/D8 section 9.4.9.4')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddr.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddr.setDescription('The string value used to identify the management address component associated with the local system.')
wwpLeosLldpLocManAddrLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8, 1, 3), Integer32())
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrLen.setReference('IEEE 802.1AB/D8 section 9.4.9.2')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrLen.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrLen.setDescription('The total length of the management address subtype and the management address fields in LLDPDUs transmitted by the local LLDP agent. The management address length field is needed so that the receiving systems that do not implement SNMP will not be required to implement an IANA family numbers/address length equivalency table in order to decode the management address.')
wwpLeosLldpLocManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8, 1, 4), WwpLeosLldpManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrIfSubtype.setReference('IEEE 802.1AB/D8 section 9.4.9.5')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrIfSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrIfSubtype.setDescription('The enumeration value used to identify the interface numbering subtype from which the interface number is derived associated with the local system.')
wwpLeosLldpLocManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrIfId.setReference('IEEE 802.1AB/D8 section 9.4.9.6')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrIfId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrIfId.setDescription('The integer value used to identify the interface number regarding the management address component associated with the local system.')
wwpLeosLldpLocManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 3, 8, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrOID.setReference('IEEE 802.1AB/D8 section 9.4.9.8')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrOID.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocManAddrOID.setDescription('The OID value used to identify the type of hardware component or protocol entity associated with the management address advertised by the local system agent.')
wwpLeosLldpRemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1), )
if mibBuilder.loadTexts: wwpLeosLldpRemTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemTable.setDescription('This table contains one or more rows per physical network connection known to this agent. The agent may wish to ensure that only one wwpLeosLldpRemEntry is present for each local port, or it may choose to maintain multiple wwpLeosLldpRemEntries for the same local port.')
wwpLeosLldpRemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemTimeMark"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemLocalPortNum"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemIndex"))
if mibBuilder.loadTexts: wwpLeosLldpRemEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemEntry.setDescription('Information about a particular physical network connection. Entries may be created and deleted in this table by the agent, if a physical topology discovery process is active.')
wwpLeosLldpRemTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 1), TimeFilter())
if mibBuilder.loadTexts: wwpLeosLldpRemTimeMark.setReference('RFC 2021 section 6')
if mibBuilder.loadTexts: wwpLeosLldpRemTimeMark.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemTimeMark.setDescription('A TimeFilter for this entry. See the TimeFilter textual convention in RFC 2021 to see how this works.')
wwpLeosLldpRemLocalPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 2), WwpLeosLldpPortNumber())
if mibBuilder.loadTexts: wwpLeosLldpRemLocalPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemLocalPortNum.setDescription('The index value used to identify the port component (contained in the local chassis with the LLDP agent) associated with this entry. The wwpLeosLldpRemLocalPortNum identifies the port on which the remote system information is received. The value of this object is used as a port index to the wwpLeosLldpRemTable.')
wwpLeosLldpRemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wwpLeosLldpRemIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemIndex.setDescription('This object represents an arbitrary local integer value used by this agent to identify a particular connection instance, unique only for the indicated remote system. A particular wwpLeosLldpRemIndex value may be reused in the event an entry is aged out and later re-learned with the same (or different) remote chassis and port identifiers. An agent is encouraged to assign monotonically increasing index values to new entries, starting with one, after each reboot. It is considered unlikely that the wwpLeosLldpRemIndex will wrap between reboots.')
wwpLeosLldpRemRemoteChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 4), WwpLeosLldpChassisIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemRemoteChassisType.setReference('IEEE 802.1AB/D8 section 9.4.2.2')
if mibBuilder.loadTexts: wwpLeosLldpRemRemoteChassisType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemRemoteChassisType.setDescription('The type of encoding used to identify the chassis associated with the remote system.')
wwpLeosLldpRemRemoteChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 5), WwpLeosLldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemRemoteChassis.setReference('IEEE 802.1AB/D8 section 9.4.2.3')
if mibBuilder.loadTexts: wwpLeosLldpRemRemoteChassis.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemRemoteChassis.setDescription('The string value used to identify the chassis component associated with the remote system.')
wwpLeosLldpRemRemotePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 6), WwpLeosLldpPortIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemRemotePortType.setReference('IEEE 802.1AB/D8 section 9.4.3.2')
if mibBuilder.loadTexts: wwpLeosLldpRemRemotePortType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemRemotePortType.setDescription("The type of port identifier encoding used in the associated 'wwpLeosLldpRemRemotePort' object.")
wwpLeosLldpRemRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 7), WwpLeosLldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemRemotePort.setReference('IEEE 802.1AB/D8 section 9.4.3.3')
if mibBuilder.loadTexts: wwpLeosLldpRemRemotePort.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemRemotePort.setDescription('The string value used to identify the port component associated with the remote system.')
wwpLeosLldpRemPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemPortDesc.setReference('IEEE 802.1AB/D8 section 9.4.5.2')
if mibBuilder.loadTexts: wwpLeosLldpRemPortDesc.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemPortDesc.setDescription('The string value used to identify the description of the given port associated with the remote system.')
wwpLeosLldpRemSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemSysName.setReference('IEEE 802.1AB/D8 section 9.4.6.2')
if mibBuilder.loadTexts: wwpLeosLldpRemSysName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemSysName.setDescription('The string value used to identify the system name of the remote system.')
wwpLeosLldpRemSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemSysDesc.setReference('IEEE 802.1AB/D8 section 9.4.7.2')
if mibBuilder.loadTexts: wwpLeosLldpRemSysDesc.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemSysDesc.setDescription('The string value used to identify the system description of the remote system.')
wwpLeosLldpRemSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 11), WwpLeosLldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemSysCapSupported.setReference('IEEE 802.1AB/D8 section 9.4.8.2')
if mibBuilder.loadTexts: wwpLeosLldpRemSysCapSupported.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemSysCapSupported.setDescription('The bitmap value used to identify which system capabilities are supported on the remote system.')
wwpLeosLldpRemSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 1, 1, 12), WwpLeosLldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemSysCapEnabled.setReference('IEEE 802.1AB/D8 section 9.4.8.3')
if mibBuilder.loadTexts: wwpLeosLldpRemSysCapEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemSysCapEnabled.setDescription('The bitmap value used to identify which system capabilities are enabled on the remote system.')
wwpLeosLldpRemManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 2), )
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrTable.setDescription('This table contains one or more rows per management address information on the remote system learned on a particular port contained in the local chassis known to this agent.')
wwpLeosLldpRemManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 2, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemTimeMark"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemLocalPortNum"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemIndex"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemManAddrType"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemManAddr"))
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrEntry.setDescription("Management address information about a particular chassis component. There may be multiple management addresses configured on the remote system identified by a particular wwpLeosLldpRemIndex whose information is received on wwpLeosLldpRemLocalPortNum of the local system. Each management address should have distinct 'management address type' (wwpLeosLldpRemManAddrType) and 'management address' (wwpLeosLldpRemManAddr.) Entries may be created and deleted in this table by the agent.")
wwpLeosLldpRemManAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 2, 1, 1), AddressFamilyNumbers())
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrType.setReference('IEEE 802.1AB/D8 section 9.4.9.3')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrType.setDescription("The type of management address identifier encoding used in the associated 'wwpLeosLldpRemManagmentAddr' object.")
wwpLeosLldpRemManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 2, 1, 2), WwpLeosLldpManAddress())
if mibBuilder.loadTexts: wwpLeosLldpRemManAddr.setReference('IEEE 802.1AB/D8 section 9.4.9.4')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddr.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddr.setDescription('The string value used to identify the management address component associated with the remote system.')
wwpLeosLldpRemManAddrIfSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 2, 1, 3), WwpLeosLldpManAddrIfSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrIfSubtype.setReference('IEEE 802.1AB/D8 section 9.4.9.5')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrIfSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrIfSubtype.setDescription('The enumeration value used to identify the interface numbering subtype from which the interface number is derived associated with the remote system.')
wwpLeosLldpRemManAddrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrIfId.setReference('IEEE 802.1AB/D8 section 9.4.9.6')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrIfId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrIfId.setDescription('The integer value used to identify the interface number regarding the management address component associated with the remote system.')
wwpLeosLldpRemManAddrOID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrOID.setReference('IEEE 802.1AB/D8 section 9.4.9.8')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrOID.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemManAddrOID.setDescription('The OID value used to identify the type of hardware component or protocol entity associated with the management address advertised by the remote system agent.')
wwpLeosLldpRemUnknownTLVTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 3), )
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVTable.setDescription('This table contains information about an incoming TLV which is not recognized by the receiving LLDP agent. The TLV may be from a later version of the basic management set.')
wwpLeosLldpRemUnknownTLVEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 3, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemTimeMark"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemLocalPortNum"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemIndex"))
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVEntry.setDescription('Information about an unrecognized TLV received from a physical network connection. Entries may be created and deleted in this table by the agent, if a physical topology discovery process is active.')
wwpLeosLldpRemUnknownTLVType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 126)))
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVType.setReference('IEEE 802.1AB/D8 section 10.3.5')
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVType.setDescription('This object represents the value extracted from the type field of the TLV.')
wwpLeosLldpRemUnknownTLVInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 511))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVInfo.setReference('IEEE 802.1AB/D8 section 10.3.5')
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVInfo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemUnknownTLVInfo.setDescription('This object represents the value extracted from the value field of the TLV.')
wwpLeosLldpRemOrgDefInfoTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 4), )
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoTable.setDescription('This table contains one or more rows per physical network connection which advertises the organizationally defined information. Note that this table contains one or more rows of organizationally defined information that is not recognized by the local agent. The agent may wish to ensure that only one wwpLeosLldpRemOrgDefInfoEntry is present for each remote system, or it may choose to maintain multiple wwpLeosLldpRemOrgDefInfoEntries for the same remote system. If the local system is capable of recognizing any organizationally defined information, appropriate extension MIBs from the organization should be used for information retrieval.')
wwpLeosLldpRemOrgDefInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 4, 1), ).setIndexNames((0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemTimeMark"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemLocalPortNum"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemIndex"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemOrgDefInfoOUI"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemOrgDefInfoSubtype"), (0, "WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemOrgDefInfoIndex"))
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoEntry.setDescription('Information about the unrecognized organizationally defined information advertised by the remote system. The wwpLeosLldpRemTimeMark, wwpLeosLldpRemLocalPortNum, wwpLeosLldpRemIndex, wwpLeosLldpRemOrgDefInfoOUI, wwpLeosLldpRemOrgDefInfoSubtype, and wwpLeosLldpRemOrgDefInfoIndex are indexes to this table. If there is an wwpLeosLldpRemOrgDefInfoEntry associated with a particular remote system identified by the wwpLeosLldpRemLocalPortNum and wwpLeosLldpRemIndex, there must be an wwpLeosLldpRemEntry associated with the same instance (i.e, using same indexes.) When the wwpLeosLldpRemEntry for the same index is removed from the wwpLeosLldpRemTable, the associated wwpLeosLldpRemOrgDefInfoEntry should be removed from the wwpLeosLldpRemOrgDefInfoTable. Entries may be created and deleted in this table by the agent.')
wwpLeosLldpRemOrgDefInfoOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoOUI.setReference('IEEE 802.1AB/D8 section 9.5.1.3')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoOUI.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoOUI.setDescription('The Organizationally Unique Identifier (OUI), as defined in IEEE std. 802-2001, is a 24 bit (three octets) globally unique assigned number referenced by various standards, of the information received from the remote system.')
wwpLeosLldpRemOrgDefInfoSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoSubtype.setReference('IEEE 802.1AB/D8 section 9.5.1.4')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoSubtype.setDescription('The integer value used to identify the subtype of the organizationally defined information received from the remote system. The subtype value is required to identify different instances of organizationally defined information that could not be retrieved without a unique identifier that indicates the particular type of information contained in the information string.')
wwpLeosLldpRemOrgDefInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfoIndex.setDescription('This object represents an arbitrary local integer value used by this agent to identify a particular unrecognized organizationally defined information instance, unique only for the wwpLeosLldpRemOrgDefInfoOUI and wwpLeosLldpRemOrgDefInfoSubtype from the same remote system. A particular wwpLeosLldpRemOrgDefInfoIndex value may be reused in the event an entry is aged out and later re-learned with the same (or different) wwpLeosLldpRemOrgDefInfoOUI and wwpLeosLldpRemOrgDefInfoSubtype. An agent is encouraged to assign monotonically increasing index values to new entries, starting with one, after each reboot. It is considered unlikely that the wwpLeosLldpRemOrgDefInfoIndex will wrap between reboots.')
wwpLeosLldpRemOrgDefInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 507))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfo.setReference('IEEE 802.1AB/D8 section 9.5.1.5')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemOrgDefInfo.setDescription('The string value used to identify the organizationally defined information of the remote system. The encoding for this object should be as defined for SnmpAdminString TC.')
wwpLeosLldpStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 1, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosLldpStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLldpStatsClear.setDescription("Setting this mib object to 'true' will clear all statistics of LLDP.")
wwpLeosLldpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2))
wwpLeosLldpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 1))
wwpLeosLldpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 2))
wwpLeosLldpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 1, 1)).setObjects(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpConfigGroup"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsGroup"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocSysGroup"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemSysGroup"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpOptLocSysGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosLldpCompliance = wwpLeosLldpCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpCompliance.setDescription('The compliance statement for SNMP entities which implement the LLDP MIB.')
wwpLeosLldpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 2, 1)).setObjects(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpMessageTxInterval"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpMessageTxHoldMultiplier"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpReinitDelay"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpTxDelay"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpPortConfigAdminStatus"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpPortConfigTLVsTxEnable"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpManAddrPortsTxEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosLldpConfigGroup = wwpLeosLldpConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpConfigGroup.setDescription('The collection of objects which are used to configure the LLDP implementation behavior. This group is mandatory for agents which implement the LLDP.')
wwpLeosLldpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 2, 2)).setObjects(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsFramesDiscardedTotal"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsFramesInErrors"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsFramesInTotal"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsFramesOutTotal"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsTLVsInErrors"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsTLVsDiscardedTotal"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpStatsTLVsUnrecognizedTotal"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpCounterDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosLldpStatsGroup = wwpLeosLldpStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpStatsGroup.setDescription('The collection of objects which are used to represent LLDP statistics. This group is mandatory for agents which implement the LLDP.')
wwpLeosLldpLocSysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 2, 3)).setObjects(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocChassisType"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocChassisId"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocPortType"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocPortId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosLldpLocSysGroup = wwpLeosLldpLocSysGroup.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpLocSysGroup.setDescription('The collection of objects which are used to represent LLDP Local System Information. The objects represent the information associated with the mandatory TLVs. This group is mandatory for agents which implement the LLDP.')
wwpLeosLldpOptLocSysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 2, 4)).setObjects(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocPortDesc"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocSysDesc"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocSysName"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocSysCapSupported"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocSysCapEnabled"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocManAddrIfSubtype"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocManAddrIfId"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpLocManAddrOID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosLldpOptLocSysGroup = wwpLeosLldpOptLocSysGroup.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpOptLocSysGroup.setDescription('The collection of objects which are used to represent optional LLDP Local System Information. The objects represent the information associated with the optional TLVs. This group is optional for agents which implement the Lldp.')
wwpLeosLldpRemSysGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 2, 2, 5)).setObjects(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemRemoteChassisType"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemRemoteChassis"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemRemotePortType"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemRemotePort"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemPortDesc"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemSysName"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemSysDesc"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemSysCapSupported"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemSysCapEnabled"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemManAddrIfSubtype"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemManAddrIfId"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemManAddrOID"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemUnknownTLVInfo"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpRemOrgDefInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wwpLeosLldpRemSysGroup = wwpLeosLldpRemSysGroup.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosLldpRemSysGroup.setDescription("The collection of objects which are used to represent LLDP Remote Systems Information. The objects represent the information associated with the basic TLV set. Please note that even the agent doesn't implement some of the optional TLVs, it shall recognize all the optional TLV information that the remote system may advertise. This group is mandatory for agents which implement the Lldp.")
wwpLeosLldpPortSpeedChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 26, 3, 0, 1)).setObjects(("WWP-LEOS-LLDP-MIB", "wwpLeosLldpPortConfigPortNum"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpPortConfigOperPortSpeed"), ("WWP-LEOS-LLDP-MIB", "wwpLeosLldpPortConfigReqPortSpeed"))
if mibBuilder.loadTexts: wwpLeosLldpPortSpeedChangeTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosLldpPortSpeedChangeTrap.setDescription('A notification is sent whenever a request is made to change the egress bandwidth of the port. OperPortSpeed is the speed of the port at the time the request is received, ReqPortSpeed is the new requested speed.')
mibBuilder.exportSymbols("WWP-LEOS-LLDP-MIB", WwpLeosLldpSystemCapabilitiesMap=WwpLeosLldpSystemCapabilitiesMap, wwpLeosLldpOptLocSysGroup=wwpLeosLldpOptLocSysGroup, wwpLeosLldpRemManAddrIfId=wwpLeosLldpRemManAddrIfId, WwpLeosLldpManAddrIfSubtype=WwpLeosLldpManAddrIfSubtype, wwpLeosLldpManAddrPortsTxEnable=wwpLeosLldpManAddrPortsTxEnable, wwpLeosLldpLocManAddr=wwpLeosLldpLocManAddr, wwpLeosLldpRemTimeMark=wwpLeosLldpRemTimeMark, wwpLeosLldpRemLocalPortNum=wwpLeosLldpRemLocalPortNum, wwpLeosLldpStatsFramesInTotal=wwpLeosLldpStatsFramesInTotal, wwpLeosLldpRemUnknownTLVInfo=wwpLeosLldpRemUnknownTLVInfo, wwpLeosLldpRemRemotePortType=wwpLeosLldpRemRemotePortType, wwpLeosLldpLocManAddrOID=wwpLeosLldpLocManAddrOID, wwpLeosLldpLocManAddrLen=wwpLeosLldpLocManAddrLen, wwpLeosLldpStatsTLVsInErrors=wwpLeosLldpStatsTLVsInErrors, wwpLeosLldpPortConfigEntry=wwpLeosLldpPortConfigEntry, wwpLeosLldpLocPortType=wwpLeosLldpLocPortType, wwpLeosLldpRemUnknownTLVTable=wwpLeosLldpRemUnknownTLVTable, wwpLeosLldpStatistics=wwpLeosLldpStatistics, wwpLeosLldpConfigGroup=wwpLeosLldpConfigGroup, WwpLeosLldpChassisId=WwpLeosLldpChassisId, wwpLeosLldpTxDelay=wwpLeosLldpTxDelay, wwpLeosLldpLocSysGroup=wwpLeosLldpLocSysGroup, wwpLeosLldpStatsClear=wwpLeosLldpStatsClear, wwpLeosLldpRemManAddrIfSubtype=wwpLeosLldpRemManAddrIfSubtype, wwpLeosLldpLocPortEntry=wwpLeosLldpLocPortEntry, wwpLeosLldpMessageTxHoldMultiplier=wwpLeosLldpMessageTxHoldMultiplier, wwpLeosLldpRemOrgDefInfo=wwpLeosLldpRemOrgDefInfo, wwpLeosLldpPortConfigTable=wwpLeosLldpPortConfigTable, wwpLeosLldpPortConfigOperPortSpeed=wwpLeosLldpPortConfigOperPortSpeed, WwpLeosLldpPortNumber=WwpLeosLldpPortNumber, wwpLeosLldpExtentions=wwpLeosLldpExtentions, wwpLeosLldpRemSysDesc=wwpLeosLldpRemSysDesc, wwpLeosLldpPortConfigTLVsTxEnable=wwpLeosLldpPortConfigTLVsTxEnable, wwpLeosLldpRemSysCapSupported=wwpLeosLldpRemSysCapSupported, wwpLeosLldpPortConfigPortNum=wwpLeosLldpPortConfigPortNum, wwpLeosLldpRemoteSystemsData=wwpLeosLldpRemoteSystemsData, wwpLeosLldpRemEntry=wwpLeosLldpRemEntry, wwpLeosLldpLocSysName=wwpLeosLldpLocSysName, wwpLeosLldpRemIndex=wwpLeosLldpRemIndex, wwpLeosLldpConfiguration=wwpLeosLldpConfiguration, wwpLeosLldpReinitDelay=wwpLeosLldpReinitDelay, wwpLeosLldpRemOrgDefInfoOUI=wwpLeosLldpRemOrgDefInfoOUI, wwpLeosLldpStatsEntry=wwpLeosLldpStatsEntry, wwpLeosLldpRemUnknownTLVEntry=wwpLeosLldpRemUnknownTLVEntry, wwpLeosLldpPortConfigStatsClear=wwpLeosLldpPortConfigStatsClear, wwpLeosLldpRemSysCapEnabled=wwpLeosLldpRemSysCapEnabled, wwpLeosLldpGlobalAtts=wwpLeosLldpGlobalAtts, SnmpAdminString=SnmpAdminString, wwpLeosLldpStatsGroup=wwpLeosLldpStatsGroup, TimeFilter=TimeFilter, wwpLeosLldpStatsPortNum=wwpLeosLldpStatsPortNum, wwpLeosLldpLocPortDesc=wwpLeosLldpLocPortDesc, wwpLeosLldpStatsFramesInErrors=wwpLeosLldpStatsFramesInErrors, WwpLeosLldpPortList=WwpLeosLldpPortList, wwpLeosLldpCompliances=wwpLeosLldpCompliances, wwpLeosLldpLocManAddrEntry=wwpLeosLldpLocManAddrEntry, wwpLeosLldpNotifMIBNotificationPrefix=wwpLeosLldpNotifMIBNotificationPrefix, wwpLeosLldpLocChassisType=wwpLeosLldpLocChassisType, wwpLeosLldpMIBObjects=wwpLeosLldpMIBObjects, wwpLeosLldpRemOrgDefInfoEntry=wwpLeosLldpRemOrgDefInfoEntry, wwpLeosLldpCompliance=wwpLeosLldpCompliance, wwpLeosLldpConformance=wwpLeosLldpConformance, wwpLeosLldpLocPortNum=wwpLeosLldpLocPortNum, WwpLeosLldpPortIdType=WwpLeosLldpPortIdType, wwpLeosLldpRemManAddrType=wwpLeosLldpRemManAddrType, wwpLeosLldpLocPortTable=wwpLeosLldpLocPortTable, wwpLeosLldpLocSysDesc=wwpLeosLldpLocSysDesc, wwpLeosLldpRemPortDesc=wwpLeosLldpRemPortDesc, wwpLeosLldpLocChassisId=wwpLeosLldpLocChassisId, wwpLeosLldpStatsFramesDiscardedTotal=wwpLeosLldpStatsFramesDiscardedTotal, wwpLeosLldpLocPortId=wwpLeosLldpLocPortId, wwpLeosLldpRemRemotePort=wwpLeosLldpRemRemotePort, wwpLeosLldpConfigManAddrEntry=wwpLeosLldpConfigManAddrEntry, wwpLeosLldpRemUnknownTLVType=wwpLeosLldpRemUnknownTLVType, WwpLeosLldpManAddress=WwpLeosLldpManAddress, wwpLeosLldpLocalSystemData=wwpLeosLldpLocalSystemData, wwpLeosLldpConfigManAddrTable=wwpLeosLldpConfigManAddrTable, wwpLeosLldpStatsTLVsUnrecognizedTotal=wwpLeosLldpStatsTLVsUnrecognizedTotal, wwpLeosLldpRemManAddrEntry=wwpLeosLldpRemManAddrEntry, wwpLeosLldpPortConfigReqPortSpeed=wwpLeosLldpPortConfigReqPortSpeed, wwpLeosLldpLocSysCapSupported=wwpLeosLldpLocSysCapSupported, wwpLeosLldpRemSysGroup=wwpLeosLldpRemSysGroup, wwpLeosLldpCounterDiscontinuityTime=wwpLeosLldpCounterDiscontinuityTime, wwpLeosLldpRemManAddr=wwpLeosLldpRemManAddr, wwpLeosLldpRemOrgDefInfoTable=wwpLeosLldpRemOrgDefInfoTable, wwpLeosLldpPortSpeedChangeTrap=wwpLeosLldpPortSpeedChangeTrap, wwpLeosLldpMessageTxInterval=wwpLeosLldpMessageTxInterval, wwpLeosLldpStatsTable=wwpLeosLldpStatsTable, wwpLeosLldpMIB=wwpLeosLldpMIB, wwpLeosLldpRemOrgDefInfoSubtype=wwpLeosLldpRemOrgDefInfoSubtype, wwpLeosLldpGroups=wwpLeosLldpGroups, wwpLeosLldpRemRemoteChassis=wwpLeosLldpRemRemoteChassis, wwpLeosLldpRemRemoteChassisType=wwpLeosLldpRemRemoteChassisType, wwpLeosLldpRemOrgDefInfoIndex=wwpLeosLldpRemOrgDefInfoIndex, wwpLeosLldpRemManAddrTable=wwpLeosLldpRemManAddrTable, wwpLeosLldpNotifMIBNotification=wwpLeosLldpNotifMIBNotification, wwpLeosLldpStatsTLVsDiscardedTotal=wwpLeosLldpStatsTLVsDiscardedTotal, wwpLeosLldpLocManAddrIfId=wwpLeosLldpLocManAddrIfId, WwpLeosLldpChassisIdType=WwpLeosLldpChassisIdType, wwpLeosLldpRemManAddrOID=wwpLeosLldpRemManAddrOID, wwpLeosLldpRemSysName=wwpLeosLldpRemSysName, wwpLeosLldpLocManAddrType=wwpLeosLldpLocManAddrType, wwpLeosLldpLocSysCapEnabled=wwpLeosLldpLocSysCapEnabled, wwpLeosLldpLocManAddrIfSubtype=wwpLeosLldpLocManAddrIfSubtype, wwpLeosLldpLocManAddrTable=wwpLeosLldpLocManAddrTable, PYSNMP_MODULE_ID=wwpLeosLldpMIB, wwpLeosLldpStatsFramesOutTotal=wwpLeosLldpStatsFramesOutTotal, WwpLeosLldpPortId=WwpLeosLldpPortId, wwpLeosLldpPortConfigAdminStatus=wwpLeosLldpPortConfigAdminStatus, wwpLeosLldpRemTable=wwpLeosLldpRemTable)
