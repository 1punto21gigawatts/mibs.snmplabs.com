#
# PySNMP MIB module LanMgr-Mib-II-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LanMgr-Mib-II-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, ModuleIdentity, Integer32, iso, IpAddress, enterprises, Counter64, Gauge32, Counter32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "ModuleIdentity", "Integer32", "iso", "IpAddress", "enterprises", "Counter64", "Gauge32", "Counter32", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lanmanager = MibIdentifier((1, 3, 6, 1, 4, 1, 77))
lanmgr_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 1)).setLabel("lanmgr-2")
common = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 1, 1))
server = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 1, 2))
workstation = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 1, 3))
domain = MibIdentifier((1, 3, 6, 1, 4, 1, 77, 1, 4))
comVersionMaj = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comVersionMaj.setStatus('mandatory')
if mibBuilder.loadTexts: comVersionMaj.setDescription('The major release version number of the software.')
comVersionMin = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comVersionMin.setStatus('mandatory')
if mibBuilder.loadTexts: comVersionMin.setDescription('The minor release version number of the software.')
comType = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comType.setStatus('mandatory')
if mibBuilder.loadTexts: comType.setDescription('The type of LAN Manager software this system is running. If no server is running the node is a workstation. This object type is an octet string of length 4 treated as a bit map (with the least significant bit being bit 0): OCTET 1 -- Software Type Bit ------------- --- workstation 0 server 1 sqlserver 2 Primary DC 3 Backup DC 4 Time Source 5 AFP Server 6 Netware Server 7 OCTET 2 -- undefined OCTET 3 -- undefined OCTET 4 -- undefined')
comStatStart = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comStatStart.setStatus('mandatory')
if mibBuilder.loadTexts: comStatStart.setDescription('The time, represented as seconds since January 1, 1970, at which the statistics on this node were last cleared.')
comStatNumNetIOs = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comStatNumNetIOs.setStatus('mandatory')
if mibBuilder.loadTexts: comStatNumNetIOs.setDescription('The number of network I/O operations submitted on this node.')
comStatFiNetIOs = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comStatFiNetIOs.setStatus('mandatory')
if mibBuilder.loadTexts: comStatFiNetIOs.setDescription('The number of network I/O operations on this node that failed issue.')
comStatFcNetIOs = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: comStatFcNetIOs.setStatus('mandatory')
if mibBuilder.loadTexts: comStatFcNetIOs.setDescription('The number of network I/O operations on this node that failed completion.')
svDescription = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svDescription.setStatus('mandatory')
if mibBuilder.loadTexts: svDescription.setDescription('A comment describing this server.')
svSvcNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSvcNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcNumber.setDescription('The number of network services installed on this server.')
svSvcTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 2, 3), )
if mibBuilder.loadTexts: svSvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcTable.setDescription('A list of service entries describing network services installed on this server.')
svSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 2, 3, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "svSvcName"))
if mibBuilder.loadTexts: svSvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcEntry.setDescription('The names of the network services installed on this server.')
svSvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSvcName.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcName.setDescription('The name of the network service described by this entry.')
svSvcInstalledState = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("uninstalled", 1), ("install-pending", 2), ("uninstall-pending", 3), ("installed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSvcInstalledState.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcInstalledState.setDescription('The installation status of the network service specified by this entry.')
svSvcOperatingState = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("continue-pending", 2), ("pause-pending", 3), ("paused", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSvcOperatingState.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcOperatingState.setDescription('The operating status of the network service specified by this entry.')
svSvcCanBeUninstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cannot-be-uninstalled", 1), ("can-be-uninstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSvcCanBeUninstalled.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcCanBeUninstalled.setDescription('Whether or not the network service specified by this entry can be uninstalled.')
svSvcCanBePaused = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cannot-be-paused", 1), ("can-be-paused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSvcCanBePaused.setStatus('mandatory')
if mibBuilder.loadTexts: svSvcCanBePaused.setDescription('Whether or not the network service specified by this entry can be paused.')
svStatOpens = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatOpens.setStatus('mandatory')
if mibBuilder.loadTexts: svStatOpens.setDescription('The total number of files that have been opened on the server.')
svStatDevOpens = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatDevOpens.setStatus('mandatory')
if mibBuilder.loadTexts: svStatDevOpens.setDescription('The total number of communication devices opened on the server.')
svStatQueuedJobs = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatQueuedJobs.setStatus('mandatory')
if mibBuilder.loadTexts: svStatQueuedJobs.setDescription('The total number of print jobs that have been spooled on the server.')
svStatSOpens = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatSOpens.setStatus('mandatory')
if mibBuilder.loadTexts: svStatSOpens.setDescription('The number of sessions that have been started on the server.')
svStatErrorOuts = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatErrorOuts.setStatus('mandatory')
if mibBuilder.loadTexts: svStatErrorOuts.setDescription('The number of sessions disconnected due to an error on the server.')
svStatPwErrors = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatPwErrors.setStatus('mandatory')
if mibBuilder.loadTexts: svStatPwErrors.setDescription('The number of password violations encountered on the server.')
svStatPermErrors = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatPermErrors.setStatus('mandatory')
if mibBuilder.loadTexts: svStatPermErrors.setDescription('The number of access permission violations encountered on this server.')
svStatSysErrors = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatSysErrors.setStatus('mandatory')
if mibBuilder.loadTexts: svStatSysErrors.setDescription('The number of system errors encountered on the server.')
svStatSentBytes = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: svStatSentBytes.setDescription('The number of bytes sent by the server.')
svStatRcvdBytes = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatRcvdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: svStatRcvdBytes.setDescription('The number of bytes received by this server.')
svStatAvResponse = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatAvResponse.setStatus('mandatory')
if mibBuilder.loadTexts: svStatAvResponse.setDescription('The mean number of milliseconds it has taken this server to process a workstation I/O request.')
svSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("share-level", 1), ("user-level", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSecurityMode.setStatus('mandatory')
if mibBuilder.loadTexts: svSecurityMode.setDescription('The type of security being run at this server.')
svUsers = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svUsers.setStatus('mandatory')
if mibBuilder.loadTexts: svUsers.setDescription('The number of concurrent users this server is able to support.')
svStatReqBufsNeeded = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatReqBufsNeeded.setStatus('mandatory')
if mibBuilder.loadTexts: svStatReqBufsNeeded.setDescription('The number of times the server has needed a request buffer in the process of handling a client request and could not allocate one.')
svStatBigBufsNeeded = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svStatBigBufsNeeded.setStatus('mandatory')
if mibBuilder.loadTexts: svStatBigBufsNeeded.setDescription('The number of times the server has needed a big buffer in the process of handling a client request and could not allocate one.')
svSessionNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSessionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svSessionNumber.setDescription('The number of sessions have established to this server.')
svSessionTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 2, 20), )
if mibBuilder.loadTexts: svSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: svSessionTable.setDescription('A list of session entries corressponding to the current sessions clients have with this server.')
svSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "svSesClientName"), (0, "LanMgr-Mib-II-MIB", "svSesUserName"))
if mibBuilder.loadTexts: svSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svSessionEntry.setDescription('A session that is currently established to this server.')
svSesClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSesClientName.setStatus('mandatory')
if mibBuilder.loadTexts: svSesClientName.setDescription('The name of the remote machine that has established the session.')
svSesUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSesUserName.setStatus('mandatory')
if mibBuilder.loadTexts: svSesUserName.setDescription('The name of the user at the remote machine that established the session.')
svSesNumOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSesNumOpens.setStatus('mandatory')
if mibBuilder.loadTexts: svSesNumOpens.setDescription('The number of open files, devices and pipes are open on this session.')
svSesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSesTime.setStatus('mandatory')
if mibBuilder.loadTexts: svSesTime.setDescription('The length of time in seconds this session has been established.')
svSesIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSesIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: svSesIdleTime.setDescription('The length of time in seconds this session has been idle.')
svSesClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("down-level", 1), ("dos-lm", 2), ("dos-lm-2", 3), ("os2-lm-1", 4), ("os2-lm-2", 5), ("dos-lm-2-1", 6), ("os2-lm-2-1", 7), ("afp-1-1", 8), ("afp-2-0", 9), ("nt-3-1", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSesClientType.setStatus('mandatory')
if mibBuilder.loadTexts: svSesClientType.setDescription('The type of client that established the session.')
svSesState = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("deleted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svSesState.setStatus('mandatory')
if mibBuilder.loadTexts: svSesState.setDescription('Used to indicate the state of this session. The deleted state will never be returned on a session but can be used in set requests to delete a session.')
svAutoDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svAutoDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: svAutoDisconnects.setDescription('The number of sessions that the server has auto-disconnected due to timeout.')
svDisConTime = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svDisConTime.setStatus('mandatory')
if mibBuilder.loadTexts: svDisConTime.setDescription('The number of seconds the server waits before disconnecting an idle session. A value of 0xffff indicates that idle sessions will never be disconnected.')
svAuditLogSize = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svAuditLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: svAuditLogSize.setDescription("The maximum size in kilobytes that the server's audit log can attain.")
svUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svUserNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svUserNumber.setDescription('The number of users that have accounts on this server.')
svUserTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 2, 25), )
if mibBuilder.loadTexts: svUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: svUserTable.setDescription('The table of active user accounts on this server.')
svUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 2, 25, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "svUserName"))
if mibBuilder.loadTexts: svUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svUserEntry.setDescription('One of the user accounts on this server.')
svUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 25, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svUserName.setStatus('mandatory')
if mibBuilder.loadTexts: svUserName.setDescription('The name of the user account.')
svShareNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svShareNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svShareNumber.setDescription('The number of shared resources on this server.')
svShareTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 2, 27), )
if mibBuilder.loadTexts: svShareTable.setStatus('mandatory')
if mibBuilder.loadTexts: svShareTable.setDescription('The table of shares on this server.')
svShareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 2, 27, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "svShareName"))
if mibBuilder.loadTexts: svShareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svShareEntry.setDescription('A table entry corresponding to a single share on this server.')
svShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 27, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svShareName.setStatus('mandatory')
if mibBuilder.loadTexts: svShareName.setDescription('The name of the share.')
svSharePath = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 27, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svSharePath.setStatus('mandatory')
if mibBuilder.loadTexts: svSharePath.setDescription('The local name of this shared resource.')
svShareComment = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 27, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svShareComment.setStatus('mandatory')
if mibBuilder.loadTexts: svShareComment.setDescription('A comment associated with this share.')
svPrintQNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrintQNumber.setStatus('mandatory')
if mibBuilder.loadTexts: svPrintQNumber.setDescription('The number of print queues on this server.')
svPrintQTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 2, 29), )
if mibBuilder.loadTexts: svPrintQTable.setStatus('mandatory')
if mibBuilder.loadTexts: svPrintQTable.setDescription('The table of print queues on this server.')
svPrintQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 2, 29, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "svPrintQName"))
if mibBuilder.loadTexts: svPrintQEntry.setStatus('mandatory')
if mibBuilder.loadTexts: svPrintQEntry.setDescription('A table entry corresponding to a single print queue on this server.')
svPrintQName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 29, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrintQName.setStatus('mandatory')
if mibBuilder.loadTexts: svPrintQName.setDescription('The name of the print queue.')
svPrintQNumJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 2, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svPrintQNumJobs.setStatus('mandatory')
if mibBuilder.loadTexts: svPrintQNumJobs.setDescription('The number of jobs currently in this print queue.')
wkstaStatSessStarts = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wkstaStatSessStarts.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaStatSessStarts.setDescription('The number of sessions that this workstation has initiated.')
wkstaStatSessFails = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wkstaStatSessFails.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaStatSessFails.setDescription('The number of failed sessions that this workstation has experienced.')
wkstaStatUses = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wkstaStatUses.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaStatUses.setDescription('The number of connections this workstation has initiated.')
wkstaStatUseFails = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wkstaStatUseFails.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaStatUseFails.setDescription('The number of failed connections this workstation has experienced.')
wkstaStatAutoRecs = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wkstaStatAutoRecs.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaStatAutoRecs.setDescription('The number of sessions broken and then automatically reestablished.')
wkstaErrorLogSize = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wkstaErrorLogSize.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaErrorLogSize.setDescription('The size in kilobytes to which the workstation error log can grow.')
wkstaUseNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wkstaUseNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaUseNumber.setDescription('The number of active uses the workstation is currently maintaining.')
wkstaUseTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 3, 8), )
if mibBuilder.loadTexts: wkstaUseTable.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaUseTable.setDescription('The table of active uses made by this workstation.')
wkstaUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 3, 8, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "useLocalName"), (0, "LanMgr-Mib-II-MIB", "useRemote"))
if mibBuilder.loadTexts: wkstaUseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wkstaUseEntry.setDescription('A use of a remote network resource.')
useLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 3, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: useLocalName.setStatus('mandatory')
if mibBuilder.loadTexts: useLocalName.setDescription('The name of the local devicename (e.g. e: or lpt1:) that is redirected.')
useRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 3, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: useRemote.setStatus('mandatory')
if mibBuilder.loadTexts: useRemote.setDescription('The name of the remote shared resource to which the redirection has been made. (eg. \\\\server\\share).')
useStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("use-ok", 1), ("use-paused", 2), ("use-session-lost", 3), ("use-network-error", 4), ("use-connecting", 5), ("use-reconnecting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: useStatus.setStatus('mandatory')
if mibBuilder.loadTexts: useStatus.setDescription('The status of this connection.')
domPrimaryDomain = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domPrimaryDomain.setStatus('mandatory')
if mibBuilder.loadTexts: domPrimaryDomain.setDescription('The name of the primary domain to which this machine belongs.')
domLogonDomain = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domLogonDomain.setStatus('mandatory')
if mibBuilder.loadTexts: domLogonDomain.setDescription('The name of the domain to which this machine is logged on.')
domOtherDomainNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domOtherDomainNumber.setStatus('mandatory')
if mibBuilder.loadTexts: domOtherDomainNumber.setDescription('The number of entries in domOtherDamainTable.')
domOtherDomainTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 4, 4), )
if mibBuilder.loadTexts: domOtherDomainTable.setStatus('mandatory')
if mibBuilder.loadTexts: domOtherDomainTable.setDescription('The list of other domains which this machine is monitoring.')
domOtherDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 4, 4, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "domOtherName"))
if mibBuilder.loadTexts: domOtherDomainEntry.setStatus('mandatory')
if mibBuilder.loadTexts: domOtherDomainEntry.setDescription('An entry in the table of other domains.')
domOtherName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domOtherName.setStatus('mandatory')
if mibBuilder.loadTexts: domOtherName.setDescription('The name of an additional domain which this machine is monitoring.')
domServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domServerNumber.setStatus('mandatory')
if mibBuilder.loadTexts: domServerNumber.setDescription('The number of entries in domServerTable.')
domServerTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 4, 6), )
if mibBuilder.loadTexts: domServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: domServerTable.setDescription('The list of non-hidden servers that are on all of the domains this machine is monitoring.')
domServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 4, 6, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "domServerName"))
if mibBuilder.loadTexts: domServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: domServerEntry.setDescription('An entry in the domain server table.')
domServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domServerName.setStatus('mandatory')
if mibBuilder.loadTexts: domServerName.setDescription('The name of a server on one of the domains which this machine is monitoring.')
domLogonNumber = MibScalar((1, 3, 6, 1, 4, 1, 77, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: domLogonNumber.setStatus('mandatory')
if mibBuilder.loadTexts: domLogonNumber.setDescription('The number of entries in domLogonTable.')
domLogonTable = MibTable((1, 3, 6, 1, 4, 1, 77, 1, 4, 8), )
if mibBuilder.loadTexts: domLogonTable.setStatus('mandatory')
if mibBuilder.loadTexts: domLogonTable.setDescription('The list of domain logons which this machine has processed. Available only on servers acting as primary or backup domain controllers. To compile the complete table of all logons on a given domain it is necessary to query all primary and backup domain controllers on the domain.')
domLogonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 77, 1, 4, 8, 1), ).setIndexNames((0, "LanMgr-Mib-II-MIB", "domLogonUser"), (0, "LanMgr-Mib-II-MIB", "domLogonMachine"))
if mibBuilder.loadTexts: domLogonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: domLogonEntry.setDescription('An entry in the logon table.')
domLogonUser = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 4, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domLogonUser.setStatus('mandatory')
if mibBuilder.loadTexts: domLogonUser.setDescription('The name of the user who is logged on to this domain.')
domLogonMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 77, 1, 4, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domLogonMachine.setStatus('mandatory')
if mibBuilder.loadTexts: domLogonMachine.setDescription('The name of the machine from which the user logged on.')
mibBuilder.exportSymbols("LanMgr-Mib-II-MIB", comStatNumNetIOs=comStatNumNetIOs, domLogonNumber=domLogonNumber, comStatFiNetIOs=comStatFiNetIOs, svShareComment=svShareComment, server=server, svSvcEntry=svSvcEntry, wkstaStatAutoRecs=wkstaStatAutoRecs, svStatSOpens=svStatSOpens, wkstaStatUses=wkstaStatUses, domLogonEntry=domLogonEntry, domOtherName=domOtherName, svSvcOperatingState=svSvcOperatingState, svStatPermErrors=svStatPermErrors, svSvcCanBePaused=svSvcCanBePaused, svUsers=svUsers, wkstaStatSessStarts=wkstaStatSessStarts, domOtherDomainNumber=domOtherDomainNumber, svUserTable=svUserTable, svPrintQNumber=svPrintQNumber, svSvcTable=svSvcTable, svSecurityMode=svSecurityMode, domLogonTable=domLogonTable, svStatOpens=svStatOpens, svDisConTime=svDisConTime, svSesNumOpens=svSesNumOpens, lanmanager=lanmanager, svStatDevOpens=svStatDevOpens, comStatFcNetIOs=comStatFcNetIOs, domServerNumber=domServerNumber, comStatStart=comStatStart, domServerTable=domServerTable, domServerEntry=domServerEntry, svSessionEntry=svSessionEntry, svStatRcvdBytes=svStatRcvdBytes, svShareNumber=svShareNumber, domain=domain, wkstaStatUseFails=wkstaStatUseFails, domOtherDomainEntry=domOtherDomainEntry, svStatReqBufsNeeded=svStatReqBufsNeeded, svStatSentBytes=svStatSentBytes, svStatPwErrors=svStatPwErrors, domLogonMachine=domLogonMachine, svSvcInstalledState=svSvcInstalledState, svUserName=svUserName, svPrintQName=svPrintQName, svAuditLogSize=svAuditLogSize, svSesClientName=svSesClientName, svDescription=svDescription, svShareTable=svShareTable, svSesTime=svSesTime, svStatBigBufsNeeded=svStatBigBufsNeeded, wkstaErrorLogSize=wkstaErrorLogSize, svAutoDisconnects=svAutoDisconnects, common=common, svSvcNumber=svSvcNumber, svPrintQEntry=svPrintQEntry, domOtherDomainTable=domOtherDomainTable, svPrintQNumJobs=svPrintQNumJobs, domServerName=domServerName, useLocalName=useLocalName, svStatErrorOuts=svStatErrorOuts, svSesUserName=svSesUserName, comVersionMaj=comVersionMaj, svUserNumber=svUserNumber, useRemote=useRemote, svShareName=svShareName, svSesIdleTime=svSesIdleTime, domLogonDomain=domLogonDomain, svSessionNumber=svSessionNumber, comVersionMin=comVersionMin, wkstaUseTable=wkstaUseTable, domPrimaryDomain=domPrimaryDomain, svStatSysErrors=svStatSysErrors, svSesState=svSesState, svSharePath=svSharePath, svPrintQTable=svPrintQTable, svShareEntry=svShareEntry, svUserEntry=svUserEntry, useStatus=useStatus, wkstaUseEntry=wkstaUseEntry, wkstaStatSessFails=wkstaStatSessFails, svStatAvResponse=svStatAvResponse, workstation=workstation, svSvcCanBeUninstalled=svSvcCanBeUninstalled, comType=comType, svSvcName=svSvcName, svSesClientType=svSesClientType, svStatQueuedJobs=svStatQueuedJobs, svSessionTable=svSessionTable, domLogonUser=domLogonUser, wkstaUseNumber=wkstaUseNumber, lanmgr_2=lanmgr_2)
