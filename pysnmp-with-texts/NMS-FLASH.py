#
# PySNMP MIB module NMS-FLASH (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-FLASH
# Produced by pysmi-0.3.4 at Wed May  1 14:22:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
nmslocal, = mibBuilder.importSymbols("NMS-SMI", "nmslocal")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, IpAddress, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Gauge32, iso, TimeTicks, ObjectIdentity, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "IpAddress", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "TimeTicks", "ObjectIdentity", "Integer32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nmslflash = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10))
nmsflashSize = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashSize.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashSize.setDescription('Total Size in Octets of Flash memory')
nmsflashFree = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashFree.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashFree.setDescription('Unused Size in Octets of Flash memory')
nmsflashController = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashController.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashController.setDescription('Provides the type of Flash controller (either CCTL or CCTL2) installed in the router.')
nmsflashCard = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashCard.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashCard.setDescription('Provides the type of Flash Card installed in the router. For example, the type of Flash Card could be either CSC-MS or CSC-MC+.')
nmsflashVPP = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashVPP.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashVPP.setDescription('State of the VPP DIP jumper on the Flash memory card. Files can be written to the Flash memory card only if the VPP DIP jumper is turned on.')
nmsflashErase = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nmsflashErase.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashErase.setDescription('Request to erase flash memory')
nmsflashEraseTime = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashEraseTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashEraseTime.setDescription('Indicates the value of sysUptime the last time Flash memory was erased. If the flash had not been erased after powerup it has a value of 0 days 00:00:00.')
nmsflashEraseStatus = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashEraseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashEraseStatus.setDescription('Status of current or last flash erasing')
nmsflashToNet = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 9), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nmsflashToNet.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashToNet.setDescription('Write flash entry to tftp server. Value should be the name of the flash entry to send. Instance is the IP address of the tftp host.')
nmsflashToNetTime = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashToNetTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashToNetTime.setDescription('Indicates the value of sysUpTime the last time a file was transfered from Flash memory on the router to a TFTP host. Returns 0 days 00:00:00 if there had been no transfer since powerup.')
nmsflashToNetStatus = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashToNetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashToNetStatus.setDescription('Status of current or last flash to net transfer')
nmsnetToFlash = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 12), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: nmsnetToFlash.setStatus('mandatory')
if mibBuilder.loadTexts: nmsnetToFlash.setDescription('Write flash entry from tftp server. Value should be the name of the flash entry to write. Instance is the IP address of the tftp host.')
nmsnetToFlashTime = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsnetToFlashTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsnetToFlashTime.setDescription('Indicates the value of sysUpTime the last time file was copied from a Trivial File Transfer Protocol(TFTP) server to the Flash memory on the router. Returns 0 days 00:00:00 if there had been no transfers since powerup.')
nmsnetToFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("flashOpInProgress", 1), ("flashOpSuccess", 2), ("flashOpFailure", 3), ("flashReadOnly", 4), ("flashOpenFailure", 5), ("bufferAllocationFailure", 6), ("noOpAfterPowerOn", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsnetToFlashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsnetToFlashStatus.setDescription('Status of current or last net to flash transfer')
nmsflashStatus = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("busy", 1), ("available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashStatus.setDescription('Status of the availability of flash')
nmsflashEntries = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashEntries.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashEntries.setDescription('Number of entries in the flash directory')
nmslflashFileDirTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 17), )
if mibBuilder.loadTexts: nmslflashFileDirTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmslflashFileDirTable.setDescription(' A list of flash file entries.')
nmslflashFileDirEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 17, 1), ).setIndexNames((0, "NMS-FLASH", "flashEntries"))
if mibBuilder.loadTexts: nmslflashFileDirEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmslflashFileDirEntry.setDescription('A collection of flash eprom objects')
nmsflashDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 17, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashDirName.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashDirName.setDescription('Name associated with the flash entry')
nmsflashDirSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashDirSize.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashDirSize.setDescription('Size in Octets of a flash entry')
nmsflashDirStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 2, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("deleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsflashDirStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nmsflashDirStatus.setDescription('Indicates the status of the entry')
mibBuilder.exportSymbols("NMS-FLASH", nmsflashStatus=nmsflashStatus, nmsflashFree=nmsflashFree, nmsflashEraseTime=nmsflashEraseTime, nmsflashErase=nmsflashErase, nmsflashVPP=nmsflashVPP, nmsflashToNetStatus=nmsflashToNetStatus, nmsnetToFlashStatus=nmsnetToFlashStatus, nmsflashToNet=nmsflashToNet, nmsflashCard=nmsflashCard, nmsflashSize=nmsflashSize, nmsflashEntries=nmsflashEntries, nmsflashToNetTime=nmsflashToNetTime, nmslflash=nmslflash, nmsflashController=nmsflashController, nmsflashDirStatus=nmsflashDirStatus, nmsflashEraseStatus=nmsflashEraseStatus, nmslflashFileDirTable=nmslflashFileDirTable, nmslflashFileDirEntry=nmslflashFileDirEntry, nmsnetToFlashTime=nmsnetToFlashTime, nmsflashDirSize=nmsflashDirSize, nmsnetToFlash=nmsnetToFlash, nmsflashDirName=nmsflashDirName)
