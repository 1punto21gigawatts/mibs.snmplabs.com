#
# PySNMP MIB module DNOS-TIMEZONE-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-TIMEZONE-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:52:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, iso, Integer32, Unsigned32, MibIdentifier, TimeTicks, Bits, ObjectIdentity, Gauge32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "iso", "Integer32", "Unsigned32", "MibIdentifier", "TimeTicks", "Bits", "ObjectIdentity", "Gauge32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fastPathTimeZonePrivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32))
fastPathTimeZonePrivate.setRevisions(('2011-01-26 00:00', '2007-02-28 05:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathTimeZonePrivate.setRevisionsDescriptions(('Postal address updated.', 'Initial revision.',))
if mibBuilder.loadTexts: fastPathTimeZonePrivate.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathTimeZonePrivate.setOrganization('Dell, Inc.')
if mibBuilder.loadTexts: fastPathTimeZonePrivate.setContactInfo('')
if mibBuilder.loadTexts: fastPathTimeZonePrivate.setDescription('The Broadcom Private MIB for DNOS for system time, timezone and summer-time settings')
agentSystemTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 1))
agentTimeZoneGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 2))
agentSummerTimeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3))
agentSummerTimeRecurringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2))
agentSummerTimeNonRecurringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3))
agentSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentSystemTime.setDescription('the current sytem time (includes the TimeZone offset and summertime Offset) Only in the case of platforms supporting Real Time Clock, this object can be set')
agentSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemDate.setStatus('current')
if mibBuilder.loadTexts: agentSystemDate.setDescription('the current sytem date. Only in the case of platforms supporting Real Time Clock, this object can be set and range is Jan 01 2010 to Dec 31 2079')
agentSystemTimeZoneAcronym = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSystemTimeZoneAcronym.setStatus('current')
if mibBuilder.loadTexts: agentSystemTimeZoneAcronym.setDescription('the zone acronym of summertime when summertime is in effect If summer-time is not in effect or if there is no acronym for summer-time it defaults To TimeZone acronym.')
agentSystemTimeSource = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("sntp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSystemTimeSource.setStatus('current')
if mibBuilder.loadTexts: agentSystemTimeSource.setDescription('the time source from which the time update is taken.')
agentSystemSummerTimeState = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSystemSummerTimeState.setStatus('current')
if mibBuilder.loadTexts: agentSystemSummerTimeState.setDescription('enabled : summer-time is in effect currently disabled : summer-time is not in effect currently')
agentTimeZoneHoursOffset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTimeZoneHoursOffset.setStatus('current')
if mibBuilder.loadTexts: agentTimeZoneHoursOffset.setDescription('the hours to be added to the UTC time')
agentTimeZoneMinutesOffset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTimeZoneMinutesOffset.setStatus('current')
if mibBuilder.loadTexts: agentTimeZoneMinutesOffset.setDescription('the minutes to be added to the UTC time.')
agentTimeZoneAcronym = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTimeZoneAcronym.setStatus('current')
if mibBuilder.loadTexts: agentTimeZoneAcronym.setDescription('the acronym associated with the zone.')
agentSummerTimeMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noSummertime", 0), ("recurring", 1), ("recurringEu", 2), ("recurringUsa", 3), ("nonrecurring", 4))).clone('noSummertime')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSummerTimeMode.setStatus('current')
if mibBuilder.loadTexts: agentSummerTimeMode.setDescription('recurring- set the parameters for recurring summer-time non-recurring- set the parameters for non-recurring summer-time no-summertime- disable the summer-time ')
agentStRecurringStartingWeek = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringStartingWeek.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringStartingWeek.setDescription('the week of the month from which the summer-time should be effective.')
agentStRecurringStartingDay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringStartingDay.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringStartingDay.setDescription('the day of the agentStRecurringStartingWeek from which the summer-time should be effective.')
agentStRecurringStartingMonth = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringStartingMonth.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringStartingMonth.setDescription('the month of the year from which the summer-time should be effective.')
agentStRecurringStartingTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringStartingTime.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringStartingTime.setDescription('the time in the hh:mm format from which the summer-time should be effective. range for hh: 0 to 23 range for mm: 0 to 59 ')
agentStRecurringEndingWeek = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("first", 1), ("second", 2), ("third", 3), ("fourth", 4), ("last", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringEndingWeek.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringEndingWeek.setDescription('the week of the Month in which the summer-time should end.')
agentStRecurringEndingDay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringEndingDay.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringEndingDay.setDescription('the day of the agentStRecurringStartingWeek on which the summer-time should end.')
agentStRecurringEndingMonth = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringEndingMonth.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringEndingMonth.setDescription('the month of the year in which the summer-time should end.')
agentStRecurringEndingTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringEndingTime.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringEndingTime.setDescription('the time of the agentStRecurringEndingDay in hh:mm format at which the summer-time should end. range for hh: 0 to 23 range for mm: 0 to 59')
agentStRecurringZoneAcronym = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringZoneAcronym.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringZoneAcronym.setDescription('the zone associated with the summer-time recurring configuration. the acronym maximum legth is 4 characters')
agentStRecurringZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1440), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStRecurringZoneOffset.setStatus('current')
if mibBuilder.loadTexts: agentStRecurringZoneOffset.setDescription('the zone offset in minutes which will be added to the UTC time during the summer-time of every year.')
agentStNonRecurringStartingDay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 31), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringStartingDay.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringStartingDay.setDescription('the day of the agentStNonRecurringStartingMonth from which the summer-time should be effective.')
agentStNonRecurringStartingMonth = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringStartingMonth.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringStartingMonth.setDescription('the Month of the agentStNonRecurringStartingYear from which the summer-time should be effective.')
agentStNonRecurringStartingYear = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2097), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringStartingYear.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringStartingYear.setDescription('the year from which the summer-time should be effective.')
agentStNonRecurringStartingTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringStartingTime.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringStartingTime.setDescription('the time in the hh:mm format. The time of agentStNonRecurringStartingDay from which the summer-time should be effective. range for hh: 0 to 23 range for mm: 0 to 59')
agentStNonRecurringEndingDay = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 31), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringEndingDay.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringEndingDay.setDescription('the day of the agentStNonRecurringEndingMonth on which the summer-time should end.')
agentStNonRecurringEndingMonth = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringEndingMonth.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringEndingMonth.setDescription('the month of the agentStNonRecurringEndingYear in which the summer-time should end.')
agentStNonRecurringEndingYear = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 2097), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringEndingYear.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringEndingYear.setDescription('the year in which the summer-time should end.')
agentStNonRecurringEndingTime = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringEndingTime.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringEndingTime.setDescription('the time on the agentStNonRecurringEndingDay in hh:mm format at which the summer-time should end. range for hh: 0 to 23 range for mm: 0 to 59')
agentStNonRecurringZoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1440), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringZoneOffset.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringZoneOffset.setDescription('the zone offset in minutes which will be added to the UTC time during the summer-time.')
agentStNonRecurringZoneAcronym = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 32, 3, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStNonRecurringZoneAcronym.setStatus('current')
if mibBuilder.loadTexts: agentStNonRecurringZoneAcronym.setDescription('the zone associated with the summer-time non recurring configuration. the acronym maximum legth is 4 characters')
mibBuilder.exportSymbols("DNOS-TIMEZONE-PRIVATE-MIB", agentStNonRecurringStartingMonth=agentStNonRecurringStartingMonth, agentSystemTime=agentSystemTime, fastPathTimeZonePrivate=fastPathTimeZonePrivate, agentStRecurringEndingTime=agentStRecurringEndingTime, agentSystemTimeSource=agentSystemTimeSource, agentSummerTimeGroup=agentSummerTimeGroup, agentSystemSummerTimeState=agentSystemSummerTimeState, agentSummerTimeMode=agentSummerTimeMode, agentStRecurringZoneAcronym=agentStRecurringZoneAcronym, agentStNonRecurringEndingMonth=agentStNonRecurringEndingMonth, agentStNonRecurringZoneAcronym=agentStNonRecurringZoneAcronym, agentTimeZoneGroup=agentTimeZoneGroup, agentSystemTimeGroup=agentSystemTimeGroup, agentSummerTimeRecurringGroup=agentSummerTimeRecurringGroup, agentStRecurringEndingDay=agentStRecurringEndingDay, agentStRecurringZoneOffset=agentStRecurringZoneOffset, agentStNonRecurringStartingDay=agentStNonRecurringStartingDay, agentTimeZoneHoursOffset=agentTimeZoneHoursOffset, agentStNonRecurringStartingTime=agentStNonRecurringStartingTime, agentStRecurringEndingMonth=agentStRecurringEndingMonth, agentSystemDate=agentSystemDate, agentStNonRecurringEndingTime=agentStNonRecurringEndingTime, agentStNonRecurringEndingDay=agentStNonRecurringEndingDay, agentTimeZoneMinutesOffset=agentTimeZoneMinutesOffset, agentStNonRecurringStartingYear=agentStNonRecurringStartingYear, agentStRecurringStartingWeek=agentStRecurringStartingWeek, agentStNonRecurringEndingYear=agentStNonRecurringEndingYear, agentSystemTimeZoneAcronym=agentSystemTimeZoneAcronym, agentTimeZoneAcronym=agentTimeZoneAcronym, agentStRecurringStartingTime=agentStRecurringStartingTime, agentStNonRecurringZoneOffset=agentStNonRecurringZoneOffset, PYSNMP_MODULE_ID=fastPathTimeZonePrivate, agentStRecurringEndingWeek=agentStRecurringEndingWeek, agentSummerTimeNonRecurringGroup=agentSummerTimeNonRecurringGroup, agentStRecurringStartingMonth=agentStRecurringStartingMonth, agentStRecurringStartingDay=agentStRecurringStartingDay)
