#
# PySNMP MIB module MESSAGE-TRACKING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MESSAGE-TRACKING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, MibIdentifier, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, ObjectIdentity, Unsigned32, Integer32, experimental, ModuleIdentity, Gauge32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "ObjectIdentity", "Unsigned32", "Integer32", "experimental", "ModuleIdentity", "Gauge32", "IpAddress", "iso")
DisplayString, DateAndTime, TimeInterval, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TimeInterval", "TextualConvention")
msgTracking = MibIdentifier((1, 3, 6, 1, 3, 73, 2))
mta_message_track = ModuleIdentity((1, 3, 6, 1, 3, 73, 2, 1)).setLabel("mta-message-track")
if mibBuilder.loadTexts: mta_message_track.setLastUpdated('9704110000Z')
if mibBuilder.loadTexts: mta_message_track.setOrganization('IETF')
if mibBuilder.loadTexts: mta_message_track.setContactInfo('Gordon Jones Postal: 1820 Dolly Madison Boulevard Mc Lean, VA 22102-3481 Tel: +1 703 883 7670 Fax: +1 703 883 7670 E-mail: gbjones@mitre.org')
if mibBuilder.loadTexts: mta_message_track.setDescription('The MIB module describing message tracking')
class NameForm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("freeForm", 1), ("x400", 2), ("smtp", 3))

class DispositionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 1), ("transferred", 2), ("delivered", 3), ("non-delivered", 4), ("redirected", 5), ("dlist-expanded", 6), ("in-queue", 7))

class MsgType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("any", 1), ("data", 2), ("status", 3), ("probe", 4))

mtaInformationTable = MibTable((1, 3, 6, 1, 3, 73, 2, 1, 1), )
if mibBuilder.loadTexts: mtaInformationTable.setStatus('current')
if mibBuilder.loadTexts: mtaInformationTable.setDescription('The table holding information about the MTA being queried. A table is used because there may be multiple MTAs at a single host.')
mtaInformationEntry = MibTableRow((1, 3, 6, 1, 3, 73, 2, 1, 1, 1), ).setIndexNames((0, "MESSAGE-TRACKING-MIB", "mtaIndex"))
if mibBuilder.loadTexts: mtaInformationEntry.setStatus('current')
if mibBuilder.loadTexts: mtaInformationEntry.setDescription('One entry in the table holding information about the MTA being queried')
mtaIndex = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaIndex.setStatus('current')
if mibBuilder.loadTexts: mtaIndex.setDescription('The integer index into this table.')
mtaName = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaName.setStatus('current')
if mibBuilder.loadTexts: mtaName.setDescription('The name of the MTA described in this row of the table.')
mtaMessagingType = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaMessagingType.setStatus('current')
if mibBuilder.loadTexts: mtaMessagingType.setDescription(' Common name of the messaging system of this MTA (e.g. X.400, SMTP).')
mtaStartTimeforRecordedInformation = MibScalar((1, 3, 6, 1, 3, 73, 2, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaStartTimeforRecordedInformation.setStatus('current')
if mibBuilder.loadTexts: mtaStartTimeforRecordedInformation.setDescription(' The date/time of the oldest message tracking information available from this MTA.')
mtaAlternativeAgent = MibScalar((1, 3, 6, 1, 3, 73, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtaAlternativeAgent.setStatus('current')
if mibBuilder.loadTexts: mtaAlternativeAgent.setDescription('The name (or address) of another agent that may have message tracking information concerning this MTA.')
msgTrackNextRequestIndex = MibScalar((1, 3, 6, 1, 3, 73, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgTrackNextRequestIndex.setStatus('current')
if mibBuilder.loadTexts: msgTrackNextRequestIndex.setDescription("The index that may be used by a manager (requestor) on a 'set-request' PDU to create a new conceptual row in the msgTrackRequestTable table (and thereby issue a message tracking query).")
msgTrackRequestTable = MibTable((1, 3, 6, 1, 3, 73, 2, 1, 3), )
if mibBuilder.loadTexts: msgTrackRequestTable.setStatus('current')
if mibBuilder.loadTexts: msgTrackRequestTable.setDescription('The table holding all active message tracking requests.')
msgTrackRequestEntry = MibTableRow((1, 3, 6, 1, 3, 73, 2, 1, 3, 1), ).setIndexNames((0, "MESSAGE-TRACKING-MIB", "reqEntryIndex"))
if mibBuilder.loadTexts: msgTrackRequestEntry.setStatus('current')
if mibBuilder.loadTexts: msgTrackRequestEntry.setDescription('The entry associated with each request for message information.')
reqEntryIndex = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqEntryIndex.setStatus('current')
if mibBuilder.loadTexts: reqEntryIndex.setDescription('The integer index into the msgTrackRequestTable table.')
reqRowStatus = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqRowStatus.setStatus('current')
if mibBuilder.loadTexts: reqRowStatus.setDescription('The status of the conceptual row. These are mapped to the same values as the RowStatus textual conversion in SNMPv2 and carry the same semantics with one exception: the exception is that when a manager (requestor) sets the value to destroy(6), this also has the added semantics of deleting all conceptual rows in the msgTrackResponseTable table whose respEntryIndex matches the reqEntryIndex of this conceptual row.')
reqResponseStatus = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("inProgress", 2), ("failedNoMatches", 3), ("failedInvalidQuery", 4), ("failedError", 5), ("successUnderqualified", 6), ("success", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqResponseStatus.setStatus('current')
if mibBuilder.loadTexts: reqResponseStatus.setDescription('Indicates the status of this query and its responses in the msgTrackResponseTable. Values are: unknown - The status of this query is not known. inProgress - The agent(responder) is still processing the request. failedNoMatches - The query has been processed and has produced no matches. failedInvalidQuery - The query could not be processed due to invalid or missing data in the original query. FailedError - The query could not be processed due to an error in the agent(responder). successUnderqualified - The query was successfully processed, but the query was found to be underqualified. That is, more reponses were found than were specified in reqMaxResponses. reqMaxResponses entries were returned in the msgTrackResponseTable. success - The query succeeded, returning from 1 to reqMaxResponse entries in the msgTrackResponseTable.')
reqMaxResponses = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqMaxResponses.setStatus('current')
if mibBuilder.loadTexts: reqMaxResponses.setDescription('Specifies the largest number of responses to be returned in the msgTrackResponseTable on an underspecified query (i.e. the maximum value of respMsgIndex in the msgTrackResponseTable conceptual row whose respEntryIndex matches the reqEntryIndex of this conceptual row).')
reqUniqueMsgId = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqUniqueMsgId.setStatus('current')
if mibBuilder.loadTexts: reqUniqueMsgId.setDescription('Specifies a unique message id used internally by the MTA for identification of a message. This form of the message id may or may not be identical to the inbound and/or outbound forms of the message id. If specified, this may be the only search criteria required. If the entire unique message id is not specified, prefix matching is assumed. Set to an empty (zero length) string if unknown or irrelevant to query.')
reqInboundMsgId = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqInboundMsgId.setStatus('current')
if mibBuilder.loadTexts: reqInboundMsgId.setDescription('Specifies a unique message id as received by the MTA for identification of a message. This form of the message id may or may not be identical to the internal and/or outbound forms of the message id. If specified, this may be the only search criteria required. If the entire inbound message id is not specified, prefix matching is assumed. Set to an empty (zero length) string if unknown or irrelevant to query.')
reqOutboundMsgId = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqOutboundMsgId.setStatus('current')
if mibBuilder.loadTexts: reqOutboundMsgId.setDescription('Specifies a unique message id as transmitted by the MTA for identification of a message. This form of the message id may or may not be identical to the internal and/or inbound forms of the message id. If specified, this may be the only search criteria required. If the entire outbound message id is not specified, prefix matching is assumed. Set to an empty (zero length) string if unknown or irrelevant to query.')
reqInboundOriginator = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqInboundOriginator.setStatus('current')
if mibBuilder.loadTexts: reqInboundOriginator.setDescription("Identifies the originator of the message in its received form, expressed in string format. The style and format of this identifier varies according to a specific messaging technology. As a result of potentially disparate messaging technologies, this identifier is only guaranteed to be the name known to the end-user on the first MTA in the delivery sequence. If reqOriginatorNameForm is set to 'x.400(2)' or 'smtp(3)', the supplied attributes will be considered in the match. Any attributes not supplied will be wildcarded. If reqOriginatorNameForm is set to 'freeForm(1)', this value is assumed to be a substring of the originator name. Set to an empty (zero length) string if unknown or irrelevant to query.")
reqOutboundOriginator = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqOutboundOriginator.setStatus('current')
if mibBuilder.loadTexts: reqOutboundOriginator.setDescription("Identifies the originator of the message in its transmitted form, expressed in string format. The style and format of this identifier varies according to a specific messaging technology. As a result of potentially disparate messaging technologies this identifier is only guaranteed to be the name known to the end-user on the last MTA in the delivery sequence. If reqOriginatorNameForm is set to 'x.400(2)' or 'smtp(3)', the supplied attributes will be considered in the match. Any attributes not supplied will be wildcarded. If reqOriginatorNameForm is set to 'freeForm(1)', this value is assumed to be a substring of the originator name. Set to an empty (zero length) string if unknown or irrelevant to query.")
reqOriginatorNameForm = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 10), NameForm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqOriginatorNameForm.setStatus('current')
if mibBuilder.loadTexts: reqOriginatorNameForm.setDescription("Identifies the name form of originator strings supplied in the reqInboundOriginator and/or reqOutboundOriginator values. This value is used by the agent to perform name form dependant parsing of these values. If neither of these strings are supplied, this name form value is irrelevant to the query. A value of 'any(1)' implies that no special parsing should be performed on the originator names supplied.")
reqInboundRecipient = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqInboundRecipient.setStatus('current')
if mibBuilder.loadTexts: reqInboundRecipient.setDescription("Identifies one of the recipients (the one to be tracked) of the message in its received form, expressed in string format. The style and format of this identifier varies according to a specific messaging technology. As a result of potentially disparate messaging technologies, this identifier is only guaranteed to be the name an end-user knows the recipient by on the first MTA in the delivery sequence. If reqRecipientNameForm is set to 'x.400(2)' or 'smtp(3)', the supplied attributes will be considered in the match. Any attributes not supplied will be wildcarded. If reqRecipientNameForm is set to 'freeForm(1)', this value is assumed to be a substring of the recipient name. Set to an empty (zero length) string if unknown or irrelevant to query.")
reqOutboundRecipient = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqOutboundRecipient.setStatus('current')
if mibBuilder.loadTexts: reqOutboundRecipient.setDescription("Identifies one of the recipients (the one to be tracked) of the message in its transmitted form, expressed in string format. The style and format of this identifier varies according to a specific messaging technology. As a result of potentially disparate messaging technologies, this identifier is only guaranteed to be the name an end-user knows the recipient by on the last MTA in the delivery sequence. If reqRecipientNameForm is set to 'x.400(2)' or 'smtp(3)', the supplied attributes will be considered in the match. Any attributes not supplied will be wildcarded. If reqRecipientNameForm is set to 'freeForm(1)', this value is assumed to be a substring of the recipient name. Set to an empty (zero length) string if unknown or irrelevant to query.")
reqRecipientNameForm = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 13), NameForm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqRecipientNameForm.setStatus('current')
if mibBuilder.loadTexts: reqRecipientNameForm.setDescription("Identifies the name form of recipient strings supplied in the reqInboundRecipient and/or reqOutboundRecipient values. This value is used by the agent to perform name form dependant parsing of these values. If neither of these strings are supplied, this name form value is irrelevant to the query. A value of 'any(1)' implies that no special parsing should be performed on the recipient names supplied.")
reqSubject = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqSubject.setStatus('current')
if mibBuilder.loadTexts: reqSubject.setDescription("Identifies a substring of the text of the 'Subject' attribute of the message. Since some messaging technologies make it difficult for an MTA to preserve this data, it may not be supported by all agents. Set to an empty (zero length) string if unknown or irrelevant to query.")
reqMinMsgSize = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqMinMsgSize.setStatus('current')
if mibBuilder.loadTexts: reqMinMsgSize.setDescription('Specifies the minimum size of a message to be tracked (content, excluding envelope), expressed in kilo-octets. Set both reqMinMsgSize and reqMaxMsgSize to zero if message size is irrelevant to the query.')
reqMaxMsgSize = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqMaxMsgSize.setStatus('current')
if mibBuilder.loadTexts: reqMaxMsgSize.setDescription('Specifies the maximum size of a message to be tracked (content, excluding envelope), expressed in kilo-octets. Set both reqMinMsgSize and reqMaxMsgSize to zero if message size is irrelevant to the query.')
reqEarliestArrivalTime = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 17), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqEarliestArrivalTime.setStatus('current')
if mibBuilder.loadTexts: reqEarliestArrivalTime.setDescription('Specifies the earliest arrival time, at this MTA, for a message to be tracked. Set to an empty (zero length) string if unknown or irrelevant to query.')
reqLatestArrivalTime = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 18), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqLatestArrivalTime.setStatus('current')
if mibBuilder.loadTexts: reqLatestArrivalTime.setDescription('Specifies the latest arrival time, at this MTA, for a message to be tracked. Set to an empty (zero length) string if unknown or irrelevant to query.')
reqDispositionStatus = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 19), DispositionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqDispositionStatus.setStatus('current')
if mibBuilder.loadTexts: reqDispositionStatus.setDescription("Specifies the disposition status of the message for a particular recipient. Set to 'unknown(1)' if unknown or irrelevant to the query.")
reqMsgType = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 20), MsgType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqMsgType.setStatus('current')
if mibBuilder.loadTexts: reqMsgType.setDescription("The type of message to be tracked. Set to 'any(1)' if message type is unknown or irrelevant to the query.")
reqCollapseRecipients = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reqCollapseRecipients.setStatus('current')
if mibBuilder.loadTexts: reqCollapseRecipients.setDescription("If a value of 'true(2)' is specified, a single msgTrackResponseEntry will be created for each matching message regardless of the number of recipients. If not specified or set to 'false(1)', a msgTrackResponseEntry will be created for each matching message and/or recipient. This variable may be used in the case of a distribution list or a message with a large number of recipients.")
reqFailureReason = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reqFailureReason.setStatus('current')
if mibBuilder.loadTexts: reqFailureReason.setDescription("A textual description of why a message tracking request failed. This variable may be set by an agent when the reqResponseStatus is set to either 'failedInvalidQuery(4)', or 'failedError(5)'.")
msgTrackResponseTable = MibTable((1, 3, 6, 1, 3, 73, 2, 1, 4), )
if mibBuilder.loadTexts: msgTrackResponseTable.setStatus('current')
if mibBuilder.loadTexts: msgTrackResponseTable.setDescription('The table holding the response to all active message tracking requests.')
msgTrackResponseEntry = MibTableRow((1, 3, 6, 1, 3, 73, 2, 1, 4, 1), ).setIndexNames((0, "MESSAGE-TRACKING-MIB", "respEntryIndex"), (0, "MESSAGE-TRACKING-MIB", "respMsgIndex"))
if mibBuilder.loadTexts: msgTrackResponseEntry.setStatus('current')
if mibBuilder.loadTexts: msgTrackResponseEntry.setDescription('The entry associated with each response to a request for message information.')
respEntryIndex = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: respEntryIndex.setStatus('current')
if mibBuilder.loadTexts: respEntryIndex.setDescription('The primary integer index into the msgTrackResponseTable table. It matches the value of reqEntryIndex for the original request. ')
respMsgIndex = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: respMsgIndex.setStatus('current')
if mibBuilder.loadTexts: respMsgIndex.setDescription('The secondary integer index into the msgTrackResponseTable table. For each value of respEntryIndex in the table, there may be multiple conceptual rows indexed by respMsgIndex, each denoting a possible response to the tracking query. The maximum number of entries should have an upper bound of the value of reqMaxResponses in the conceptual row of msgTrackRequestTable that represents the original query request. ')
respDispositionStatus = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 3), DispositionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respDispositionStatus.setStatus('current')
if mibBuilder.loadTexts: respDispositionStatus.setDescription('Indicates the disposition of this message by this MTA for this recipient.')
rspDispositionTime = MibScalar((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rspDispositionTime.setStatus('current')
if mibBuilder.loadTexts: rspDispositionTime.setDescription('Time at which this MTA disposed of this message for this recipient.')
respNextHopMta = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respNextHopMta.setStatus('current')
if mibBuilder.loadTexts: respNextHopMta.setDescription("Name of the MTA to which this message was sent. MADMAN-compliant MTA's should be addressed in the form '(<host-id>::<mtaName>)'.")
respPrevHopMta = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respPrevHopMta.setStatus('current')
if mibBuilder.loadTexts: respPrevHopMta.setDescription("Name of the MTA from which this message was received. MADMAN- compliant MTA's should be addressed in the form '(<host-id>::<mtaName>)'.")
respNonDeliveryReason = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respNonDeliveryReason.setStatus('current')
if mibBuilder.loadTexts: respNonDeliveryReason.setDescription('A textual representation representing the reason for non-delivery to this recipient. No attempt is made to normalize these non-delivered reasons across systems, since this indicates a terminal condition.')
respMsgArrivalTime = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respMsgArrivalTime.setStatus('current')
if mibBuilder.loadTexts: respMsgArrivalTime.setDescription('Represents the time at which this message for this recipient arrived at this MTA.')
respMsgSize = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: respMsgSize.setStatus('current')
if mibBuilder.loadTexts: respMsgSize.setDescription('Size of the message in kilo-octets.')
respMsgPriority = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respMsgPriority.setStatus('current')
if mibBuilder.loadTexts: respMsgPriority.setDescription('Textual representation of the priority of the message. No attempt is made to normalize these values across disparate messaging technologies.')
respUniqueMsgId = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respUniqueMsgId.setStatus('current')
if mibBuilder.loadTexts: respUniqueMsgId.setDescription('The unique message identifier that the MTA assigned internally to the message.')
respInboundMsgId = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respInboundMsgId.setStatus('current')
if mibBuilder.loadTexts: respInboundMsgId.setDescription("The unique message identifier that the 'previous hop' MTA assigned to the message. If the 'previous' MTA uses a different messaging technology or identifier scheme, this identifier serves to correlate the message from MTA to MTA. If the 'previous' MTA uses the same technology, this value is generally superfluous. If this is the first MTA in the delivery sequence, or if the previous message id is unknown, this variable is null- valued.")
respOutboundMsgId = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respOutboundMsgId.setStatus('current')
if mibBuilder.loadTexts: respOutboundMsgId.setDescription("The unique message identifier that the 'next hop' MTA assigned to the message. If the 'next' MTA uses a different messaging technology or identifier scheme, this identifier serves to correlate the message from MTA to MTA. If the 'next' MTA uses the same technology, this value is generally superfluous. If this is the last MTA in the delivery sequence, or if the next hop message id is unknown, this variable is null-valued.")
respInboundOriginator = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respInboundOriginator.setStatus('current')
if mibBuilder.loadTexts: respInboundOriginator.setDescription("Textual representation identifying the originator of the message as it was received from the 'previous hop' MTA. The style of this variable varies according to a specific messaging technology.")
respOutboundOriginator = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respOutboundOriginator.setStatus('current')
if mibBuilder.loadTexts: respOutboundOriginator.setDescription("Textual representation identifying the originator of the message as it was (or will be) presented to the 'next hop' MTA. The style of this variable varies according to a specific messaging technology.")
respInboundRecipient = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respInboundRecipient.setStatus('current')
if mibBuilder.loadTexts: respInboundRecipient.setDescription("Textual representation identifying the recipient of the message as it was received from the 'previous hop' MTA. The style of this variable varies according to a specific messaging technology..")
respOutboundRecipient = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respOutboundRecipient.setStatus('current')
if mibBuilder.loadTexts: respOutboundRecipient.setDescription("Textual representation identifying the recipient of the message as it was (or will be) presented to the 'next hop' MTA. The style of this variable varies according to a specific messaging technology.")
respSupplementalInformation = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respSupplementalInformation.setStatus('current')
if mibBuilder.loadTexts: respSupplementalInformation.setDescription('Contains information provided by the agent to the manager that may be of use in identifying or tracking this message. No formal structure for this information is specified. Knowledge of the contents of this field is by bilateral agreement.')
respSubject = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respSubject.setStatus('current')
if mibBuilder.loadTexts: respSubject.setDescription('The full text of the subject of the tracked message')
respMsgType = MibTableColumn((1, 3, 6, 1, 3, 73, 2, 1, 4, 1, 20), MsgType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: respMsgType.setStatus('current')
if mibBuilder.loadTexts: respMsgType.setDescription('The type of the tracked message')
messageTrackingConformance = MibIdentifier((1, 3, 6, 1, 3, 73, 2, 1, 5))
messageTrackingGroups = MibIdentifier((1, 3, 6, 1, 3, 73, 2, 1, 5, 1))
messageTrackingCompliances = MibIdentifier((1, 3, 6, 1, 3, 73, 2, 1, 5, 2))
limitedCompliance = ModuleCompliance((1, 3, 6, 1, 3, 73, 2, 1, 5, 2, 1)).setObjects(("MESSAGE-TRACKING-MIB", "msgIdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    limitedCompliance = limitedCompliance.setStatus('current')
if mibBuilder.loadTexts: limitedCompliance.setDescription('The basic levels of compliance for SNMPv2 entities that implement this MIB for message tracking requiring the knowledge of a message Id.')
basicCompliance = ModuleCompliance((1, 3, 6, 1, 3, 73, 2, 1, 5, 2, 2)).setObjects(("MESSAGE-TRACKING-MIB", "msgIdGroup"), ("MESSAGE-TRACKING-MIB", "basicGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicCompliance = basicCompliance.setStatus('current')
if mibBuilder.loadTexts: basicCompliance.setDescription('The basic levels of compliance for SNMPv2 entities that implement this MIB for message tracking without requiring the knowledge of a message Id.')
enhancedCompliance = ModuleCompliance((1, 3, 6, 1, 3, 73, 2, 1, 5, 2, 3)).setObjects(("MESSAGE-TRACKING-MIB", "msgIdGroup"), ("MESSAGE-TRACKING-MIB", "basicGroup"), ("MESSAGE-TRACKING-MIB", "enhancedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    enhancedCompliance = enhancedCompliance.setStatus('current')
if mibBuilder.loadTexts: enhancedCompliance.setDescription('The basic levels of compliance for SNMPv2 entities that implement this MIB for message tracking without requiring the knowledge of a message Id and allowing an enhanced level of query capabilities.')
gatewayCompliance = ModuleCompliance((1, 3, 6, 1, 3, 73, 2, 1, 5, 2, 4)).setObjects(("MESSAGE-TRACKING-MIB", "msgIdGroup"), ("MESSAGE-TRACKING-MIB", "basicGroup"), ("MESSAGE-TRACKING-MIB", "enhancedGroup"), ("MESSAGE-TRACKING-MIB", "gatewayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gatewayCompliance = gatewayCompliance.setStatus('current')
if mibBuilder.loadTexts: gatewayCompliance.setDescription("The basic levels of compliance for SNMPv2 entities that implement this MIB for message tracking across mta's that perform a gateway function.")
msgIdGroup = ObjectGroup((1, 3, 6, 1, 3, 73, 2, 1, 5, 1, 1)).setObjects(("MESSAGE-TRACKING-MIB", "msgTrackNextRequestIndex"), ("MESSAGE-TRACKING-MIB", "reqRowStatus"), ("MESSAGE-TRACKING-MIB", "reqResponseStatus"), ("MESSAGE-TRACKING-MIB", "reqMaxResponses"), ("MESSAGE-TRACKING-MIB", "reqUniqueMsgId"), ("MESSAGE-TRACKING-MIB", "reqFailureReason"), ("MESSAGE-TRACKING-MIB", "respDispositionStatus"), ("MESSAGE-TRACKING-MIB", "respDispositionTime"), ("MESSAGE-TRACKING-MIB", "respNonDeliveryReason"), ("MESSAGE-TRACKING-MIB", "respMsgArrivalTime"), ("MESSAGE-TRACKING-MIB", "respUniqueMsgId"), ("MESSAGE-TRACKING-MIB", "respInboundOriginator"), ("MESSAGE-TRACKING-MIB", "respInboundRecipient"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    msgIdGroup = msgIdGroup.setStatus('current')
if mibBuilder.loadTexts: msgIdGroup.setDescription(' A collection of objects for tracking messages where the messageId is known with responses containing basic message information.')
basicGroup = ObjectGroup((1, 3, 6, 1, 3, 73, 2, 1, 5, 1, 2)).setObjects(("MESSAGE-TRACKING-MIB", "reqInboundOriginator"), ("MESSAGE-TRACKING-MIB", "reqInboundRecipient"), ("MESSAGE-TRACKING-MIB", "reqOriginatorNameForm"), ("MESSAGE-TRACKING-MIB", "reqRecipientNameForm"), ("MESSAGE-TRACKING-MIB", "reqEarliestArrivalTime"), ("MESSAGE-TRACKING-MIB", "reqLatestArrivalTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    basicGroup = basicGroup.setStatus('current')
if mibBuilder.loadTexts: basicGroup.setDescription(' A collection of objects for tracking messages where the messageId is not known with responses containing basic message information.')
enhancedGroup = ObjectGroup((1, 3, 6, 1, 3, 73, 2, 1, 5, 1, 3)).setObjects(("MESSAGE-TRACKING-MIB", "reqSubject"), ("MESSAGE-TRACKING-MIB", "reqMinMsgSize"), ("MESSAGE-TRACKING-MIB", "reqMaxMsgSize"), ("MESSAGE-TRACKING-MIB", "reqDispositionStatus"), ("MESSAGE-TRACKING-MIB", "reqMsgType"), ("MESSAGE-TRACKING-MIB", "reqCollapseRecipients"), ("MESSAGE-TRACKING-MIB", "respMsgSize"), ("MESSAGE-TRACKING-MIB", "respMsgPriority"), ("MESSAGE-TRACKING-MIB", "respSupplementalInformation"), ("MESSAGE-TRACKING-MIB", "respSubject"), ("MESSAGE-TRACKING-MIB", "respMsgType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    enhancedGroup = enhancedGroup.setStatus('current')
if mibBuilder.loadTexts: enhancedGroup.setDescription(' A collection of objects for tracking messages where the messageId is not known with responses containing enhanced message information as well as enhanced query capabilities.')
gatewayGroup = ObjectGroup((1, 3, 6, 1, 3, 73, 2, 1, 5, 1, 4)).setObjects(("MESSAGE-TRACKING-MIB", "reqInboundMsgId"), ("MESSAGE-TRACKING-MIB", "reqOutboundMsgId"), ("MESSAGE-TRACKING-MIB", "reqOutboundOriginator"), ("MESSAGE-TRACKING-MIB", "reqOutboundRecipient"), ("MESSAGE-TRACKING-MIB", "respNextHopMta"), ("MESSAGE-TRACKING-MIB", "respPrevHopMta"), ("MESSAGE-TRACKING-MIB", "respInboundMsgId"), ("MESSAGE-TRACKING-MIB", "respOutboundMsgId"), ("MESSAGE-TRACKING-MIB", "respOutboundOriginator"), ("MESSAGE-TRACKING-MIB", "respOutboundRecipient"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gatewayGroup = gatewayGroup.setStatus('current')
if mibBuilder.loadTexts: gatewayGroup.setDescription(' A collection of object for tracking messages that have passed through a gateway mta.')
mibBuilder.exportSymbols("MESSAGE-TRACKING-MIB", reqOriginatorNameForm=reqOriginatorNameForm, reqUniqueMsgId=reqUniqueMsgId, mta_message_track=mta_message_track, reqEntryIndex=reqEntryIndex, respNextHopMta=respNextHopMta, enhancedCompliance=enhancedCompliance, reqInboundOriginator=reqInboundOriginator, rspDispositionTime=rspDispositionTime, mtaAlternativeAgent=mtaAlternativeAgent, reqFailureReason=reqFailureReason, NameForm=NameForm, respInboundMsgId=respInboundMsgId, msgTracking=msgTracking, mtaStartTimeforRecordedInformation=mtaStartTimeforRecordedInformation, reqDispositionStatus=reqDispositionStatus, gatewayCompliance=gatewayCompliance, MsgType=MsgType, reqOutboundRecipient=reqOutboundRecipient, msgTrackRequestEntry=msgTrackRequestEntry, reqRecipientNameForm=reqRecipientNameForm, reqMinMsgSize=reqMinMsgSize, reqOutboundMsgId=reqOutboundMsgId, msgTrackResponseEntry=msgTrackResponseEntry, respMsgSize=respMsgSize, reqRowStatus=reqRowStatus, basicGroup=basicGroup, respOutboundOriginator=respOutboundOriginator, mtaInformationEntry=mtaInformationEntry, respMsgIndex=respMsgIndex, msgIdGroup=msgIdGroup, respInboundRecipient=respInboundRecipient, messageTrackingGroups=messageTrackingGroups, reqInboundMsgId=reqInboundMsgId, reqMaxResponses=reqMaxResponses, reqMsgType=reqMsgType, msgTrackResponseTable=msgTrackResponseTable, gatewayGroup=gatewayGroup, basicCompliance=basicCompliance, mtaInformationTable=mtaInformationTable, reqResponseStatus=reqResponseStatus, respDispositionStatus=respDispositionStatus, respUniqueMsgId=respUniqueMsgId, PYSNMP_MODULE_ID=mta_message_track, messageTrackingCompliances=messageTrackingCompliances, respSubject=respSubject, reqOutboundOriginator=reqOutboundOriginator, respOutboundMsgId=respOutboundMsgId, mtaName=mtaName, mtaMessagingType=mtaMessagingType, respNonDeliveryReason=respNonDeliveryReason, respEntryIndex=respEntryIndex, respOutboundRecipient=respOutboundRecipient, respInboundOriginator=respInboundOriginator, reqInboundRecipient=reqInboundRecipient, respSupplementalInformation=respSupplementalInformation, reqEarliestArrivalTime=reqEarliestArrivalTime, respMsgType=respMsgType, messageTrackingConformance=messageTrackingConformance, enhancedGroup=enhancedGroup, mtaIndex=mtaIndex, msgTrackNextRequestIndex=msgTrackNextRequestIndex, limitedCompliance=limitedCompliance, DispositionStatus=DispositionStatus, respMsgPriority=respMsgPriority, reqCollapseRecipients=reqCollapseRecipients, msgTrackRequestTable=msgTrackRequestTable, respMsgArrivalTime=respMsgArrivalTime, reqSubject=reqSubject, reqLatestArrivalTime=reqLatestArrivalTime, respPrevHopMta=respPrevHopMta, reqMaxMsgSize=reqMaxMsgSize)
