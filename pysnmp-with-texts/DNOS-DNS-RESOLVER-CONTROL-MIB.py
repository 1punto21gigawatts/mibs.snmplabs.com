#
# PySNMP MIB module DNOS-DNS-RESOLVER-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DNOS-DNS-RESOLVER-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
dnOS, = mibBuilder.importSymbols("DELL-REF-MIB", "dnOS")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Bits, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, NotificationType, Counter32, ObjectIdentity, MibIdentifier, Gauge32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "NotificationType", "Counter32", "ObjectIdentity", "MibIdentifier", "Gauge32", "iso", "IpAddress")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
fastPathDnsResControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37))
fastPathDnsResControlMIB.setRevisions(('2011-12-14 00:00', '2011-01-26 00:00', '2007-05-23 00:00', '2005-03-28 11:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathDnsResControlMIB.setRevisionsDescriptions(('DNS Client Source Interface related changes.', 'Postal address updated.', 'Dell branding related changes.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: fastPathDnsResControlMIB.setLastUpdated('201112140000Z')
if mibBuilder.loadTexts: fastPathDnsResControlMIB.setOrganization('Dell, Inc.')
if mibBuilder.loadTexts: fastPathDnsResControlMIB.setContactInfo('')
if mibBuilder.loadTexts: fastPathDnsResControlMIB.setDescription('This MIB module defines a portion of the SNMP MIB under the Dell enterprise OID pertaining to DNS Client control configuration')
class DnsCacheEntryType(TextualConvention, Integer32):
    description = 'A DNS cache entry type. This is for address or for canonical name.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dnsCacheAddresstype", 1), ("dnsCacheCnametye", 2))

fastPathDnsResCtlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1))
agentResCtlglobal = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1))
agentResCtlServConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 2))
agentResCtlStaticServConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 3))
agentResCtlAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResCtlAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentResCtlAdminMode.setDescription('The dns client administrative modes supported by the device. The dns client services can be turned on or off.')
agentResCtlDefDomainName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResCtlDefDomainName.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDefDomainName.setDescription('The default domain name for unqualified hostnames.')
agentResCtlCacheFlushStatus = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dnsCacheFlushEnable", 1), ("dnsCacheFlushDisable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResCtlCacheFlushStatus.setStatus('current')
if mibBuilder.loadTexts: agentResCtlCacheFlushStatus.setDescription('The cache Flush status. If set to enable all dynamic cache entries would be removed.')
agentResCtlRequestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResCtlRequestTimeout.setStatus('current')
if mibBuilder.loadTexts: agentResCtlRequestTimeout.setDescription('The timeout before retransmitting a request to the server. The timeout value is configured and displayed in seconds.')
agentResCtlRequestRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResCtlRequestRetransmits.setStatus('current')
if mibBuilder.loadTexts: agentResCtlRequestRetransmits.setDescription('The number of times the request is retransmitted. The request is retransmitted provided the maximum timeout value allows this many number of retransmits.')
agentResCtlDomainListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 6), )
if mibBuilder.loadTexts: agentResCtlDomainListTable.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDomainListTable.setDescription('A table for default domain list.')
agentResCtlDomainListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 6, 1), ).setIndexNames((0, "DNOS-DNS-RESOLVER-CONTROL-MIB", "agentResCtlDomainListName"))
if mibBuilder.loadTexts: agentResCtlDomainListEntry.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDomainListEntry.setDescription('An entry in the DNS domain name list. Rows may be created or deleted at any time by the DNS Resolver and by SNMP SET requests.')
agentResCtlDomainListName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 6, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentResCtlDomainListName.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDomainListName.setDescription('The dns domain list entry identified by this row of the table.')
agentResCtlDomainListNameStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentResCtlDomainListNameStatus.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDomainListNameStatus.setDescription('Status of the DNS domain list Entry Table Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentResCtlServConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 2, 1), )
if mibBuilder.loadTexts: agentResCtlServConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentResCtlServConfigTable.setDescription('Table of DNS servers list')
agentResCtlConfigIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 2, 1, 1), ).setIndexNames((0, "DNOS-DNS-RESOLVER-CONTROL-MIB", "agentResCtlDnsNameServerIPType"), (0, "DNOS-DNS-RESOLVER-CONTROL-MIB", "agentResCtlDnsNameServerIP"))
if mibBuilder.loadTexts: agentResCtlConfigIPEntry.setStatus('current')
if mibBuilder.loadTexts: agentResCtlConfigIPEntry.setDescription('An entry in the DNS Servers list. Rows may be created or deleted at any time by the DNS Resolver and by SNMP SET requests.')
agentResCtlDnsNameServerIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: agentResCtlDnsNameServerIPType.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDnsNameServerIPType.setDescription('The Type of IP address of the dns server identified by this row of the table. Can be either ipv4(1), or ipv6(2).')
agentResCtlDnsNameServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 2, 1, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: agentResCtlDnsNameServerIP.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDnsNameServerIP.setDescription('The IP address of the dns server identified by this row of the table.')
agentResCtlDnsNameServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentResCtlDnsNameServerStatus.setStatus('current')
if mibBuilder.loadTexts: agentResCtlDnsNameServerStatus.setDescription('Status of the DNS Server Address Table Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentResCtlStaticServConfigTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 3, 1), )
if mibBuilder.loadTexts: agentResCtlStaticServConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentResCtlStaticServConfigTable.setDescription('Static table of DNS hostname to IP address table')
agentResCtlStaticServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 3, 1, 1), ).setIndexNames((0, "DNOS-DNS-RESOLVER-CONTROL-MIB", "agentResCtlStaticHostName"), (0, "DNOS-DNS-RESOLVER-CONTROL-MIB", "agentResCtlStaticIPAddress"))
if mibBuilder.loadTexts: agentResCtlStaticServEntry.setStatus('current')
if mibBuilder.loadTexts: agentResCtlStaticServEntry.setDescription('An entry in the static DNS hostname IP address list. Rows may be created or deleted at any time by the DNS Resolver and by SNMP SET requests.')
agentResCtlStaticHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: agentResCtlStaticHostName.setStatus('current')
if mibBuilder.loadTexts: agentResCtlStaticHostName.setDescription('The static hostname to be stored in the name server table.')
agentResCtlStaticIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: agentResCtlStaticIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentResCtlStaticIPAddress.setDescription('The IP address of the dns server for the static hostname.')
agentResCtlStaticNameServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentResCtlStaticNameServerStatus.setStatus('current')
if mibBuilder.loadTexts: agentResCtlStaticNameServerStatus.setDescription('Status of the Static Host Name - IP Address Table Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentResCtlSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 2, 6132, 1, 1, 37, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResCtlSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentResCtlSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based routing interface, port based routing interface, loopback interface, tunnel interface). A non-zero value indicates ifIndex for the corresponding interface entry in the ifTable is selected. A zero value indicates the source-interface un-selection.')
mibBuilder.exportSymbols("DNOS-DNS-RESOLVER-CONTROL-MIB", agentResCtlAdminMode=agentResCtlAdminMode, agentResCtlServConfig=agentResCtlServConfig, agentResCtlStaticServConfig=agentResCtlStaticServConfig, agentResCtlDomainListTable=agentResCtlDomainListTable, agentResCtlDnsNameServerStatus=agentResCtlDnsNameServerStatus, agentResCtlCacheFlushStatus=agentResCtlCacheFlushStatus, agentResCtlConfigIPEntry=agentResCtlConfigIPEntry, agentResCtlServConfigTable=agentResCtlServConfigTable, agentResCtlStaticIPAddress=agentResCtlStaticIPAddress, agentResCtlglobal=agentResCtlglobal, agentResCtlStaticServEntry=agentResCtlStaticServEntry, agentResCtlDomainListName=agentResCtlDomainListName, agentResCtlDefDomainName=agentResCtlDefDomainName, agentResCtlRequestRetransmits=agentResCtlRequestRetransmits, agentResCtlDnsNameServerIP=agentResCtlDnsNameServerIP, fastPathDnsResControlMIB=fastPathDnsResControlMIB, agentResCtlSourceInterface=agentResCtlSourceInterface, DnsCacheEntryType=DnsCacheEntryType, agentResCtlRequestTimeout=agentResCtlRequestTimeout, fastPathDnsResCtlMIBObjects=fastPathDnsResCtlMIBObjects, PYSNMP_MODULE_ID=fastPathDnsResControlMIB, agentResCtlDnsNameServerIPType=agentResCtlDnsNameServerIPType, agentResCtlStaticNameServerStatus=agentResCtlStaticNameServerStatus, agentResCtlDomainListNameStatus=agentResCtlDomainListNameStatus, agentResCtlStaticHostName=agentResCtlStaticHostName, agentResCtlDomainListEntry=agentResCtlDomainListEntry, agentResCtlStaticServConfigTable=agentResCtlStaticServConfigTable)
