#
# PySNMP MIB module Wellfleet-TFTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-TFTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, IpAddress, Gauge32, Counter64, Counter32, Bits, MibIdentifier, ModuleIdentity, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "IpAddress", "Gauge32", "Counter64", "Counter32", "Bits", "MibIdentifier", "ModuleIdentity", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfInternet, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfInternet")
wfTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6))
wfTftpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpDisable.setDescription('Enables or Disables TFTP Subsystem')
wfTftpDefaultVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 65, 100, 101, 200, 201, 300, 301, 400, 401, 500, 501, 600, 601, 700, 701, 800, 801, 900, 901, 1000, 1001, 1100, 1101, 1200, 1201, 1300, 1301, 1400, 1401))).clone(namedValues=NamedValues(("volume1", 1), ("volume2", 2), ("volume3", 3), ("volume4", 4), ("volume5", 5), ("volume6", 6), ("volume7", 7), ("volume8", 8), ("volume9", 9), ("volume10", 10), ("volume11", 11), ("volume12", 12), ("volume13", 13), ("volume14", 14), ("volumea", 65), ("volume1a", 100), ("volume1b", 101), ("volume2a", 200), ("volume2b", 201), ("volume3a", 300), ("volume3b", 301), ("volume4a", 400), ("volume4b", 401), ("volume5a", 500), ("volume5b", 501), ("volume6a", 600), ("volume6b", 601), ("volume7a", 700), ("volume7b", 701), ("volume8a", 800), ("volume8b", 801), ("volume9a", 900), ("volume9b", 901), ("volume10a", 1000), ("volume10b", 1001), ("volume11a", 1100), ("volume11b", 1101), ("volume12a", 1200), ("volume12b", 1201), ("volume13a", 1300), ("volume13b", 1301), ("volume14a", 1400), ("volume14b", 1401))).clone('volume2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpDefaultVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpDefaultVolume.setDescription("The file system volume number to which transferred files will be written and from which they will be retrieved. The volume number corresponds to the slot number on which the volume resides. On systems with a floppy disk, the value 65 represents volume 'A'. On systems which support flash file system partitioning, the volume is = (slot * 100 + partition number) where 0 and 1 are valid partition numbers, and represent 'partition a' and 'partition b' respectively. If no default volume is specified, the system chooses the lowest available active volume.")
wfTftpXfers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpXfers.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpXfers.setDescription('Number of Transfers in Progress')
wfTftpTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpTimeOut.setDescription('General Retransmission time-out value (seconds)')
wfTftpCloseTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpCloseTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpCloseTimeOut.setDescription('Retransmission time-out value for sender of final ACK (seconds)')
wfTftpRexmit = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpRexmit.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpRexmit.setDescription('Maximum Number of Retransmissions')
wfTftpIpTos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lowdelay", 2))).clone('lowdelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpIpTos.setStatus('obsolete')
if mibBuilder.loadTexts: wfTftpIpTos.setDescription('The Type Of Service value set in the IP datagram specifies to the Internet transport layer how the datagram should be handled. For TFTP packet transfers low delay is preferred')
wfTftpInFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInFiles.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpInFiles.setDescription('Number of files Successfully received')
wfTftpOutFiles = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutFiles.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpOutFiles.setDescription('Number of files Successfully sent')
wfTftpInWRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInWRQ.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpInWRQ.setDescription('Number of write requests received')
wfTftpOutWRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutWRQ.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpOutWRQ.setDescription('Number of write requests sent')
wfTftpInRRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInRRQ.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpInRRQ.setDescription('Number of read requests received')
wfTftpOutRRQ = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutRRQ.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpOutRRQ.setDescription('Number of read requests sent')
wfTftpRexmitPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpRexmitPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpRexmitPkts.setDescription('Number of Re-transmitted packets')
wfTftpInErr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpInErr.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpInErr.setDescription('Number of Error PDUs Received')
wfTftpOutErr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpOutErr.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpOutErr.setDescription('Number of Error PDUs Sent')
wfTftpAborts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTftpAborts.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpAborts.setDescription('Number of Aborted Pseudo Connections')
wfTftpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTftpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfTftpDelete.setDescription('Create/Delete parameter. Default is created.')
mibBuilder.exportSymbols("Wellfleet-TFTP-MIB", wfTftpInRRQ=wfTftpInRRQ, wfTftpOutFiles=wfTftpOutFiles, wfTftp=wfTftp, wfTftpDisable=wfTftpDisable, wfTftpTimeOut=wfTftpTimeOut, wfTftpDelete=wfTftpDelete, wfTftpXfers=wfTftpXfers, wfTftpRexmitPkts=wfTftpRexmitPkts, wfTftpCloseTimeOut=wfTftpCloseTimeOut, wfTftpOutWRQ=wfTftpOutWRQ, wfTftpRexmit=wfTftpRexmit, wfTftpInErr=wfTftpInErr, wfTftpOutErr=wfTftpOutErr, wfTftpIpTos=wfTftpIpTos, wfTftpDefaultVolume=wfTftpDefaultVolume, wfTftpAborts=wfTftpAborts, wfTftpInFiles=wfTftpInFiles, wfTftpInWRQ=wfTftpInWRQ, wfTftpOutRRQ=wfTftpOutRRQ)
