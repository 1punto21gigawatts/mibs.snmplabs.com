#
# PySNMP MIB module JUNIPER-EX-MAC-NOTIFICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-EX-MAC-NOTIFICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
jnxMacNotificationRoot, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxMacNotificationRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter64, ObjectIdentity, Unsigned32, Integer32, iso, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, TimeTicks, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ObjectIdentity", "Unsigned32", "Integer32", "iso", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "TimeTicks", "Counter32", "NotificationType")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
jnxMacNotificationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1))
jnxMacNotificationMIB.setRevisions(('2009-01-20 00:00', '2009-05-27 00:00', '2010-02-09 00:00', '2010-04-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxMacNotificationMIB.setRevisionsDescriptions(('Initial revision.', 'Updated the description of the Objects.', 'Updated the description of jnxHistMacChangedMsg. When next hop gets changed the port information gets updated and is logged.', 'Added new scalar jnxMacAddressesUpdated which increments for each mac address updated.',))
if mibBuilder.loadTexts: jnxMacNotificationMIB.setLastUpdated('201004280000Z')
if mibBuilder.loadTexts: jnxMacNotificationMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxMacNotificationMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxMacNotificationMIB.setDescription('This MIB module is for configuration of the MAC notification feature. MAC notification is a mechanism to inform monitoring devices when there are MAC addresses learnt or removed from the forwarding database of the monitored devices.')
jnxMacNotificationMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1))
jnxMacNotificationMIBGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1))
jnxMacGlobalFeatureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacGlobalFeatureEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxMacGlobalFeatureEnabled.setDescription('Indicates whether the MAC notification feature is currently running in the device. Setting this object to false(2) disables the MAC notification feature globally. Setting this object to true(1) will start the MAC notification feature running in the device. If the feature is already running, setting to true(1) has no effect. ')
jnxMacNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: jnxMacNotificationInterval.setDescription('This object specifies the maximum interval of time between jnxMacChangedNotifications being generated by the device. If the value of jnxNotificationsEnabled is true(1), the device will send out the generated jnxMacChangedNotifications and archive the MAC change notification events in the jnxMacHistoryTable. If the value of jnxNotificationEnabled is false(2), the device will not send out the generated jnxMacChangedNotifications but it will archive these events in the jnxMacHistoryTable. If the value of this object is equal to 0, the device will generate jnxMacChangedNotifications and archive the MAC change notification events in the jnxMacHistoryTable as soon as there is MAC address learnt or removed by the device. If the value of this object is greater than 0, the device will wait for a period of time equal to the value of this object before generate the jnxMacChangedNotifications and archive the MAC change notification events in the jnxMacHistoryTable.')
jnxMacAddressesLearnt = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacAddressesLearnt.setStatus('current')
if mibBuilder.loadTexts: jnxMacAddressesLearnt.setDescription('Indicates the number of MAC addresses learnt by the device.')
jnxMacAddressesRemoved = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacAddressesRemoved.setStatus('current')
if mibBuilder.loadTexts: jnxMacAddressesRemoved.setDescription('Indicates the number of MAC addresses removed from the forwarding database.')
jnxMacNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxMacNotificationsEnabled.setDescription("Indicates whether jnxMacChangedNotification notifications will or will not be sent when there are MAC addresses learnt or removed from the device's forwarding database. Disabling notifications does not prevent the MAC address info from being added to the jnxMacHistoryTable.")
jnxMacNotificationsSent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacNotificationsSent.setStatus('current')
if mibBuilder.loadTexts: jnxMacNotificationsSent.setDescription('Indicates the number of jnxMacChangedNotifications sent out by the device.')
jnxMacHistTableMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500)).clone(256)).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacHistTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: jnxMacHistTableMaxLength.setDescription('The upper limit on the number of entries that the jnxMacHistoryTable may contain. A value of 0 will prevent any history from being retained. When this table is full, the oldest entry will be deleted and a new one will be created.')
jnxMacHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 8), )
if mibBuilder.loadTexts: jnxMacHistoryTable.setStatus('current')
if mibBuilder.loadTexts: jnxMacHistoryTable.setDescription('This table will archive the MAC change notification events generated by this device. The MAC change notification events are archived here even if jnxMacChangesNotifications are not actually sent.')
jnxMacHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 8, 1), ).setIndexNames((0, "JUNIPER-EX-MAC-NOTIFICATION-MIB", "jnxHistIndex"))
if mibBuilder.loadTexts: jnxMacHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMacHistoryEntry.setDescription('A MAC change notification message that was previously generated by this device. Each entry is indexed by a message index.')
jnxHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: jnxHistIndex.setStatus('current')
if mibBuilder.loadTexts: jnxHistIndex.setDescription('An index that uniquely identifies a MAC change notification event previously generated by the device. This index starts at 1 and increases by one when a MAC change notification is generated. When it reaches the maximum value, the agent wraps the value back to 1.')
jnxHistMacChangedMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxHistMacChangedMsg.setStatus('current')
if mibBuilder.loadTexts: jnxHistMacChangedMsg.setDescription("This object contains the information of a MAC change notification event. It consists of several tuples packed together in the format of '<tuple1><tuple2>...'. Each tuple consist of 13 octets in the format of '<operation><VLAN><MAC><dot1dBasePort>' where <operation> is of size 1 octet and supports the following values 0 - End of MIB object. 1 - MAC learnt. 2 - MAC removed. 3 - MAC updated. <VLAN> is VLAN number of the VLAN which the MAC address is belonged to and has size of 2 octet. <MAC> is the Layer2 Mac Address and has size of 6 octets. <dot1dBasePort> is the value of dot1dBasePort for the interface from which the MAC address is learnt and has size of 4 octets.")
jnxHistTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 8, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxHistTimestamp.setStatus('current')
if mibBuilder.loadTexts: jnxHistTimestamp.setDescription('The value of sysUpTime when the jnxMacChangedNotification containing the information denoted by the jnxHistMacChangedMsg object in this entry was generated.')
jnxMacAddressesUpdated = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 1, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMacAddressesUpdated.setStatus('current')
if mibBuilder.loadTexts: jnxMacAddressesUpdated.setDescription('Indicates the number of MAC addresses updated by the device.')
jnxMacNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 2))
jnxMacNotificationsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 2, 0))
if mibBuilder.loadTexts: jnxMacNotificationsPrefix.setStatus('current')
if mibBuilder.loadTexts: jnxMacNotificationsPrefix.setDescription('All Mac Notifications are registered under this branch.')
jnxMacChangedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 7, 2, 0, 1)).setObjects(("JUNIPER-EX-MAC-NOTIFICATION-MIB", "jnxHistMacChangedMsg"), ("JUNIPER-EX-MAC-NOTIFICATION-MIB", "jnxHistTimestamp"))
if mibBuilder.loadTexts: jnxMacChangedNotification.setStatus('current')
if mibBuilder.loadTexts: jnxMacChangedNotification.setDescription('This notification is generated when there is enough MAC address information to fully occupy a maximum size SNMP trap message. This notification is also generated when there is at least one MAC address changed or removed and the amount of time elapsed from the previous notification is greater than the maximum wait time denoted by jnxNotificationInterval object. If there are more MAC addresses information than can fit into one cmmHistTrapContent object, then multiple notifications will be generated.')
mibBuilder.exportSymbols("JUNIPER-EX-MAC-NOTIFICATION-MIB", jnxMacAddressesRemoved=jnxMacAddressesRemoved, jnxMacNotificationMIBObjects=jnxMacNotificationMIBObjects, jnxMacGlobalFeatureEnabled=jnxMacGlobalFeatureEnabled, jnxMacChangedNotification=jnxMacChangedNotification, jnxHistIndex=jnxHistIndex, jnxMacAddressesLearnt=jnxMacAddressesLearnt, jnxHistMacChangedMsg=jnxHistMacChangedMsg, PYSNMP_MODULE_ID=jnxMacNotificationMIB, jnxMacNotificationMIBGlobalObjects=jnxMacNotificationMIBGlobalObjects, jnxMacNotificationsSent=jnxMacNotificationsSent, jnxHistTimestamp=jnxHistTimestamp, jnxMacHistoryTable=jnxMacHistoryTable, jnxMacHistTableMaxLength=jnxMacHistTableMaxLength, jnxMacHistoryEntry=jnxMacHistoryEntry, jnxMacAddressesUpdated=jnxMacAddressesUpdated, jnxMacNotifications=jnxMacNotifications, jnxMacNotificationMIB=jnxMacNotificationMIB, jnxMacNotificationsEnabled=jnxMacNotificationsEnabled, jnxMacNotificationInterval=jnxMacNotificationInterval, jnxMacNotificationsPrefix=jnxMacNotificationsPrefix)
