#
# PySNMP MIB module ALTEON-CHEETAH-LAYER4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-CHEETAH-LAYER4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Counter32, Integer32, Gauge32, ObjectIdentity, MibIdentifier, TimeTicks, iso, Counter64, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Counter32", "Integer32", "Gauge32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "iso", "Counter64", "IpAddress")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
layer4 = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4))
layer4.setRevisions(('2009-08-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: layer4.setRevisionsDescriptions(('Added revision clause for SMIv2 compliance.',))
if mibBuilder.loadTexts: layer4.setLastUpdated('200908050000Z')
if mibBuilder.loadTexts: layer4.setOrganization('Radware Ltd')
if mibBuilder.loadTexts: layer4.setContactInfo('Lobby 1 (Visitors) and Lobby 2 (Deliveries) 575 Corporate Drive Mahwah, NJ 07430 support@radware.com')
if mibBuilder.loadTexts: layer4.setDescription('The MIB module for the Alteon OS Layer 4 configuration, statistics and information .')
layer4Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1))
layer4Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2))
layer4Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3))
layer4Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4))
slbCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1))
filterCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2))
gslbCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3))
layer4TableSize = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4))
wlmCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6))
slbGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1))
realServerCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2))
realServerGroupCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3))
virtualServerCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4))
portCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5))
syncCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6))
wapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 7))
waphcCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8))
synAttackDetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9))
hcsCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13))
snmphcCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14))
pipTblCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15))
linklbCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16))
smtportCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17))
acclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18))
caching = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1))
compression = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2))
sslCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19))
sslPol = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3))
authPol = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4))
certs = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5))
sapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20))
peerpipTblCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21))
nwclssCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22))
syncGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1))
gslbGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1))
gslbSitesCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2))
gslbEnhNetworkCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4))
gslbRuleCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5))
gslbDnsSecCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6))
gslbDnsResVipCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7))
gslbDnsSecGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1))
gslbDnsSecKeyCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2))
gslbDnsSecZoneCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3))
gslbDnsSecImportExport = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4))
slbSpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1))
slbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5))
filterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 6))
gslbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7))
wapStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8))
ftpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10))
rtspStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 11))
tcpLimitStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 12))
dnsSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13))
sslSlbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16))
sipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 20))
sessMirrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22))
accelStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23))
cachStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1))
compStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2))
httpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24))
connmngStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17))
sapStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25))
slbRealServerMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbRealServerMaxSize.setDescription('The maximum number of entries in SLB RealServerTable.')
slbCurCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2), )
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerTable.setDescription('The table of Real Server configuration in the current_config.')
slbCurCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgRealServerIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerEntry.setDescription('Information about a particular Real Server configuration.')
slbCurCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerIndex.setDescription('The real server number')
slbCurCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerIpAddr.setDescription('IP address of the real server identified by the instance of the slbRealServerIndex.')
slbCurCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerWeight.setDescription('The server weight.')
slbCurCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerMaxConns.setDescription('The maximum number of connections that are allowed.')
slbCurCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbCurCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerBackUp.setDescription('The backup server number for this server.')
slbCurCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerPingInterval.setDescription('The interval between keep-alive (ping) attempts in number of seconds. Zero means disabling ping attempt.')
slbCurCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerFailRetry.setDescription('The number of failed attempts to declare this server DOWN.')
slbCurCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerSuccRetry.setDescription('The number of successful attempts to declare a server UP.')
slbCurCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("disabled-with-fastage", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerState.setDescription('Enable or disable the server and remove the existing sessions using disabled-with-fastage option.')
slbCurCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerType.setDescription('The server type. It participates in global server load balancing when it is configured as remote-server.')
slbCurCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerName.setDescription('The name of the real server.')
slbCurCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerUrlBmap.setDescription('The URL Pathes selected for URL load balancing for by the real server. The selected URL Pathes are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL Path is selected 0 - The represented URL Path is not selected')
slbCurCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerCookie.setDescription("The real server that will handle client requests that doesn't contain an URL cookie if Cookie loadbalance is enabled.")
slbCurCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerExcludeStr.setDescription("The real server will handle requests that don't match the loadbalance string if it is enabled.")
slbCurCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerSubmac.setDescription('The real server config to enable/disable MAC SA substitution for L4 traffic. If disabled (the default) we will NOT substitute the MAC SA of client-to-server frames. If enabled, we will substitute the MAC SA.')
slbCurCfgRealServerProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerProxy.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerProxy.setDescription('The real server config to enable/disable client proxy operation.')
slbCurCfgRealServerLdapwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerLdapwr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerLdapwr.setDescription('The real server config to enable/disable LDAP write server.')
slbCurCfgRealServerOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerOid.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerOid.setDescription('The OID to be sent in the SNMP get request packet.')
slbCurCfgRealServerCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerCommString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerCommString.setDescription('The community string to be used in the SNMP get request packet.')
slbCurCfgRealServerIdsvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIdsvlan.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerIdsvlan.setDescription('The VLAN to be associated with the IDS server.')
slbCurCfgRealServerIdsport = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIdsport.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerIdsport.setDescription('The port to be connected to the IDS server.')
slbCurCfgRealServerAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerAvail.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerAvail.setDescription('The remote real server Global SLB availability.')
slbCurCfgRealServerFastHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerFastHealthCheck.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerFastHealthCheck.setDescription('The real server config to enable/disable Fast Health Check Operation.')
slbCurCfgRealServerSubdmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerSubdmac.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerSubdmac.setDescription('The real server config to enable/disable MAC DA substitution for L4 traffic. If disabled, we will NOT substitute the MAC DA of client-to-server frames. If enabled(default), we will substitute the MAC DA.')
slbCurCfgRealServerOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerOverflow.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerOverflow.setDescription('The real server config to enable/disable Overflow. If enabled(default) allows Backup server to kick in if real server reaches maximum connections.')
slbCurCfgRealServerBkpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerBkpPreempt.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerBkpPreempt.setDescription('The real server config to enable/disable backup preemption. If enabled (default)allows to preempt the backup server when the primary server comes up. If disabled the backup server will continue to serve the traffic even when primary server comes up.')
slbCurCfgRealServerIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIpVer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerIpVer.setDescription('The type of IP address.')
slbCurCfgRealServerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 2, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServerIpv6Addr.setDescription(' IPV6 address of the real server identified by the instance of the slbRealServerIndex. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
slbNewCfgRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3), )
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerTable.setDescription('The table of Real Server configuration in the new_config.')
slbNewCfgRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgRealServerIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerEntry.setDescription('Information about a particular Real Server configuration.')
slbNewCfgRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerIndex.setDescription('The real server number')
slbNewCfgRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerIpAddr.setDescription('IP address of the real server identified by the instance of slbRealServerIndex.')
slbNewCfgRealServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerWeight.setDescription('The server weight.')
slbNewCfgRealServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerMaxConns.setDescription('The maximum number of connections that are allowed.')
slbNewCfgRealServerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbNewCfgRealServerBackUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerBackUp.setDescription('The backup server number for this server.')
slbNewCfgRealServerPingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerPingInterval.setDescription('The interval between keep-alive (ping) attempts in number of seconds. Zero means disabling ping attempt.')
slbNewCfgRealServerFailRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerFailRetry.setDescription('The number of failed attempts to declare this server DOWN.')
slbNewCfgRealServerSuccRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerSuccRetry.setDescription('The number of successful attempts to declare a server UP.')
slbNewCfgRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("disabled-with-fastage", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerState.setDescription('Enable or disable the server and remove the existing sessions using disabled-with-fastage option.')
slbNewCfgRealServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgRealServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local-server", 1), ("remote-server", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerType.setDescription('The server type. It participates in global server load balancing when it is configured as remote-server.')
slbNewCfgRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerName.setDescription('The name of the real server.')
slbNewCfgRealServerUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerUrlBmap.setDescription('The URL Pathes selected for URL load balancing for by the real server. The selected URL Pathes are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL Path is selected 0 - The represented URL Path is not selected')
slbNewCfgRealServerAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerAddUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be added to the real server. A zero is returned when read.')
slbNewCfgRealServerRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerRemUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be removed from the real server. A zero is returned when read.')
slbNewCfgRealServerCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerCookie.setDescription("Enable or disable real server to handle client requests that don't contain a cookie if cookie loadbalance is enabled.")
slbNewCfgRealServerExcludeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerExcludeStr.setDescription('Enable or disable exclusionary matching string on real server.')
slbNewCfgRealServerSubmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerSubmac.setDescription('The real server config to enable/disable MAC SA substitution for L4 traffic. If disabled (the default) we will NOT substitute the MAC SA of client-to-server frames. If enabled, we will substitute the MAC SA.')
slbNewCfgRealServerProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerProxy.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerProxy.setDescription('The real server config to enable/disable client proxy operation.')
slbNewCfgRealServerLdapwr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerLdapwr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerLdapwr.setDescription('The real server config to enable/disable LDAP write server.')
slbNewCfgRealServerOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerOid.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerOid.setDescription('The OID to be sent in the SNMP get request packet.')
slbNewCfgRealServerCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerCommString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerCommString.setDescription('The community string to be used in the SNMP get request packet.')
slbNewCfgRealServerIdsvlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerIdsvlan.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerIdsvlan.setDescription('The VLAN to be associated with IDS server.')
slbNewCfgRealServerIdsport = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerIdsport.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerIdsport.setDescription('The port to be connected to IDS server.')
slbNewCfgRealServerAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerAvail.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerAvail.setDescription('The remote real server Global SLB availability.')
slbNewCfgRealServerFastHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerFastHealthCheck.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerFastHealthCheck.setDescription('The real server config to enable/disable Fast Health Check Operation.')
slbNewCfgRealServerSubdmac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerSubdmac.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerSubdmac.setDescription('The real server config to enable/disable MAC DA substitution for L4 traffic. If disabled, we will NOT substitute the MAC DA of client-to-server frames. If enabled(default), we will substitute the MAC DA.')
slbNewCfgRealServerOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerOverflow.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerOverflow.setDescription('The real server config to enable/disable Overflow. If enabled(default) allows Backup server to kick in if real server reaches maximum connections.')
slbNewCfgRealServerBkpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerBkpPreempt.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerBkpPreempt.setDescription('The real server config to enable/disable backup preemption. If enabled (default)allows to preempt the backup server when the primary server comes up. If disabled the backup server will continue to serve the traffic even when primary server comes up.')
slbNewCfgRealServerIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerIpVer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerIpVer.setDescription('The type of IP address.')
slbNewCfgRealServerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerIpv6Addr.setDescription(' IPV6 address of the real server identified by the instance of the slbRealServerIndex. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
slbNewCfgRealServerNxtRportIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerNxtRportIdx.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerNxtRportIdx.setDescription('The next available free slot index number, to add the real port to the server. Value 0 will be returned if no free slot available.')
slbNewCfgRealServerNxtBuddyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServerNxtBuddyIdx.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServerNxtBuddyIdx.setDescription('The next available free slot Buddy index number, to add the Buddy Server to the Real server. Value 0 will be returned if no free slot available.')
slbRealServPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServPortTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbRealServPortTableMaxSize.setDescription('The maximum number of entries in SLB RealServPortTable.')
slbCurCfgRealServPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 5), )
if mibBuilder.loadTexts: slbCurCfgRealServPortTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServPortTable.setDescription('The table of real server service ports.')
slbCurCfgRealServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgRealServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgRealServPortIndex"))
if mibBuilder.loadTexts: slbCurCfgRealServPortEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServPortEntry.setDescription('A row in the real server service ports table.')
slbCurCfgRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServIndex.setDescription('The number of the real server.')
slbCurCfgRealServPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServPortIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServPortIndex.setDescription('The port index. This has no external meaning')
slbCurCfgRealServRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServRealPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServRealPort.setDescription('The layer4 real service port number.')
slbNewCfgRealServPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 6), )
if mibBuilder.loadTexts: slbNewCfgRealServPortTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServPortTable.setDescription('The table of real server service ports.')
slbNewCfgRealServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgRealServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgRealServPortIndex"))
if mibBuilder.loadTexts: slbNewCfgRealServPortEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServPortEntry.setDescription('A row in the real server service ports table.')
slbNewCfgRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServIndex.setDescription('The number of the real server.')
slbNewCfgRealServPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServPortIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServPortIndex.setDescription('The port index. This has no external meaning')
slbNewCfgRealServRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServRealPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServRealPort.setDescription('The layer4 real service port number.')
slbNewCfgRealServPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServPortDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServPortDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbNewCfgRealServRealPortFreeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgRealServRealPortFreeIdx.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServRealPortFreeIdx.setDescription('The first free port index number of the real server. Value 0 will be returned when all 64 ports are configured for a real server.')
slbBuddyTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbBuddyTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbBuddyTableMaxSize.setDescription('The maximum number of entries in SLB real buddy server table.')
slbCurCfgBuddyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 8), )
if mibBuilder.loadTexts: slbCurCfgBuddyTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgBuddyTable.setDescription('The table of buddy information.')
slbCurCfgBuddyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgRealSerIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgBuddyIndex"))
if mibBuilder.loadTexts: slbCurCfgBuddyEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgBuddyEntry.setDescription('A row in the buddy server table.')
slbCurCfgRealSerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealSerIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealSerIndex.setDescription('The number of the real server.')
slbCurCfgBuddyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgBuddyIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgBuddyIndex.setDescription('The buddy index. This has no external meaning')
slbCurCfgBuddyRealIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgBuddyRealIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgBuddyRealIndex.setDescription("The buddy server's real server number.")
slbCurCfgBuddyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgBuddyGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgBuddyGroupIndex.setDescription("The buddy server's real group number.")
slbCurCfgBuddyService = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgBuddyService.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgBuddyService.setDescription("The buddy server's service.")
slbNewCfgBuddyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9), )
if mibBuilder.loadTexts: slbNewCfgBuddyTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgBuddyTable.setDescription('The table of buddy servers.')
slbNewCfgBuddyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgRealSerIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgBuddyIndex"))
if mibBuilder.loadTexts: slbNewCfgBuddyEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgBuddyEntry.setDescription('A row in the real server buddy table.')
slbNewCfgRealSerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealSerIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealSerIndex.setDescription('The number of the real server.')
slbNewCfgBuddyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgBuddyIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgBuddyIndex.setDescription('The buddy index. This has no external meaning')
slbNewCfgBuddyRealIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgBuddyRealIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgBuddyRealIndex.setDescription("The buddy server's real server number.")
slbNewCfgBuddyGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgBuddyGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgBuddyGroupIndex.setDescription("The buddy server's real group number.")
slbNewCfgBuddyService = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgBuddyService.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgBuddyService.setDescription("The buddy server's service.")
slbNewCfgBuddyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgBuddyDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgBuddyDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbGroupTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbGroupTableMaxSize.setDescription('The maximum number of entries in SLB group tables.')
slbGroupMaxIdsSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbGroupMaxIdsSize.setStatus('current')
if mibBuilder.loadTexts: slbGroupMaxIdsSize.setDescription('The maximum number of groups IDS can be enabled on.')
slbCurCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3), )
if mibBuilder.loadTexts: slbCurCfgGroupTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupTable.setDescription('The table of groups')
slbCurCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgGroupIndex"))
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupEntry.setDescription('A row in the slbCurCfgGroupTable ')
slbCurCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupIndex.setDescription('The group number for which the information pertains.')
slbCurCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRealServers.setDescription('The Real servers in the group. The servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented server belongs to the group 0 - The represented server does not belong to the group')
slbCurCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4), ("response", 5), ("bandwidth", 6), ("phash", 7), ("svcLeast", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupMetric.setDescription('The metric used to select next server in group.')
slbCurCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupBackupServer.setDescription('The backup real server for this group.')
slbCurCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupBackupGroup.setDescription('The backup real server group for this group.')
slbCurCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckUrl.setDescription('The specific content which is examined during health checks. The content depends on the type of health check.')
slbCurCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 44, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("httphead", 44), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19), ("script9", 20), ("script10", 21), ("script11", 22), ("script12", 23), ("script13", 24), ("script14", 25), ("script15", 26), ("script16", 27), ("link", 28), ("wsp", 29), ("wtls", 30), ("ldap", 31), ("udpdns", 32), ("arp", 33), ("snmp1", 34), ("snmp2", 35), ("snmp3", 36), ("snmp4", 37), ("snmp5", 38), ("radiusacs", 39), ("tftp", 40), ("wtp", 41), ("rtsp", 42), ("sipping", 43), ("sipoptions", 45), ("wts", 46), ("dhcp", 47), ("radiusaa", 48), ("sslv3", 49), ("script17", 116), ("script18", 117), ("script19", 118), ("script20", 119), ("script21", 120), ("script22", 121), ("script23", 122), ("script24", 123), ("script25", 124), ("script26", 125), ("script27", 126), ("script28", 127), ("script29", 128), ("script30", 129), ("script31", 130), ("script32", 131), ("script33", 132), ("script34", 133), ("script35", 134), ("script36", 135), ("script37", 136), ("script38", 137), ("script39", 138), ("script40", 139), ("script41", 140), ("script42", 141), ("script43", 142), ("script44", 143), ("script45", 144), ("script46", 145), ("script47", 146), ("script48", 147), ("script49", 148), ("script50", 149), ("script51", 150), ("script52", 151), ("script53", 152), ("script54", 153), ("script55", 154), ("script56", 155), ("script57", 156), ("script58", 157), ("script59", 158), ("script60", 159), ("script61", 160), ("script62", 161), ("script63", 162), ("script64", 163)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckLayer.setDescription('The OSI layer at which servers are health checked.')
slbCurCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupName.setDescription('The name of the real server group.')
slbCurCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRealThreshold.setDescription('The minimum number of real servers available. If at any time, the number reaches this minimum limit, a SYSLOG ALERT message is send to to the configured syslog servers stating that the real server threshold has been reached for the concerned group.')
slbCurCfgGroupVipHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupVipHealthCheck.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupVipHealthCheck.setDescription('Enable or disable VIP health checking in DSR mode.')
slbCurCfgGroupIdsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIdsState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupIdsState.setDescription('Enable or disable intrusion detection.')
slbCurCfgGroupIdsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIdsPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupIdsPort.setDescription('The intrusion detection port. A value of 1 is invalid.')
slbCurCfgGroupIdsFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIdsFlood.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupIdsFlood.setDescription('Enable or disable intrusion detection group flood.')
slbCurCfgGroupMinmissHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minmiss-24", 1), ("minmiss-32", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMinmissHash.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupMinmissHash.setDescription('24|32 number of ip bits used for minmisses hash in the current_configuration block.')
slbCurCfgGroupPhashMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupPhashMask.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupPhashMask.setDescription('IP address mask used by the persistent hash metric.')
slbCurCfgGroupRmetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("roundRobin", 1), ("hash", 2), ("leastConnections", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRmetric.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRmetric.setDescription('The metric used to select next rport in server.')
slbCurCfgGroupHealthCheckFormula = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckFormula.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupHealthCheckFormula.setDescription("The formula used to state the actual health of a virtual service. It allows user to use the symbols of '(', ')', '|', '&' to construct a formula to state the health of the server group. This string can take the following formats : '(1&2|3..)', '128' or 'none' Example: Consider a group with 4 reals 1, 2, 3, 4. An example of a formuala to mark the server group failed for the virtual server if 1 and 2 FAILED or 3 and 4 FAILED is (1|2)&(3|4) This formula will mark the virtual server UP, if 1 or 2 and 3 or 4 are health checked sucessfully.")
slbCurCfgGroupOperatorAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupOperatorAccess.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupOperatorAccess.setDescription('Enable or disable access to this group for operator.')
slbCurCfgGroupWlm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupWlm.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupWlm.setDescription('The Workload Manager for this Group.')
slbCurCfgGroupRadiusAuthenString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRadiusAuthenString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRadiusAuthenString.setDescription('The group RADIUS authentication string. The string is used for generating encrypted authentication string while doing RADIUS health check for this group radius servers.')
slbCurCfgGroupSecBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupSecBackupGroup.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupSecBackupGroup.setDescription('The Secondary backup real server group for this group.')
slbCurCfgGroupSlowstart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupSlowstart.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupSlowstart.setDescription('The slow-start time for this group.')
slbCurCfgGroupMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMinThreshold.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupMinThreshold.setDescription('The minimum threshold value for this group.')
slbCurCfgGroupMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupMaxThreshold.setDescription('The maximum threshold value for this group.')
slbCurCfgGroupIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("mixed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupIpVer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupIpVer.setDescription('The type of real server group IP address.')
slbCurCfgGroupBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupBackup.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupBackup.setDescription('The backup real group or real server for this group.')
slbNewCfgGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4), )
if mibBuilder.loadTexts: slbNewCfgGroupTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupTable.setDescription('The table of groups')
slbNewCfgGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgGroupIndex"))
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupEntry.setDescription('A row in the slbNewCfgGroupTable ')
slbNewCfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupIndex.setDescription('The group number for which the information pertains.')
slbNewCfgGroupRealServers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRealServers.setDescription('The Real servers in the group. The servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented server belongs to the group 0 - The represented server does not belong to the group')
slbNewCfgGroupAddServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupAddServer.setDescription('The real server to be added to the group. When read, 0 is returned.')
slbNewCfgGroupRemoveServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRemoveServer.setDescription('The real server to be removed from the group. When read, 0 is returned.')
slbNewCfgGroupMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("roundRobin", 1), ("leastConnections", 2), ("minMisses", 3), ("hash", 4), ("response", 5), ("bandwidth", 6), ("phash", 7), ("svcLeast", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupMetric.setDescription('The metric used to select next server in group.')
slbNewCfgGroupBackupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupBackupServer.setDescription('The backup real server for this group.')
slbNewCfgGroupBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupBackupGroup.setDescription('The backup real server group for this group.')
slbNewCfgGroupHealthCheckUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckUrl.setDescription('The specific content which is examined during health checks. The content depends on the type of health check.')
slbNewCfgGroupHealthCheckLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 44, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163))).clone(namedValues=NamedValues(("icmp", 1), ("tcp", 2), ("http", 3), ("httphead", 44), ("dns", 4), ("smtp", 5), ("pop3", 6), ("nntp", 7), ("ftp", 8), ("imap", 9), ("radius", 10), ("sslh", 11), ("script1", 12), ("script2", 13), ("script3", 14), ("script4", 15), ("script5", 16), ("script6", 17), ("script7", 18), ("script8", 19), ("script9", 20), ("script10", 21), ("script11", 22), ("script12", 23), ("script13", 24), ("script14", 25), ("script15", 26), ("script16", 27), ("link", 28), ("wsp", 29), ("wtls", 30), ("ldap", 31), ("udpdns", 32), ("arp", 33), ("snmp1", 34), ("snmp2", 35), ("snmp3", 36), ("snmp4", 37), ("snmp5", 38), ("radiusacs", 39), ("tftp", 40), ("wtp", 41), ("rtsp", 42), ("sipping", 43), ("sipoptions", 45), ("wts", 46), ("dhcp", 47), ("radiusaa", 48), ("sslv3", 49), ("script17", 116), ("script18", 117), ("script19", 118), ("script20", 119), ("script21", 120), ("script22", 121), ("script23", 122), ("script24", 123), ("script25", 124), ("script26", 125), ("script27", 126), ("script28", 127), ("script29", 128), ("script30", 129), ("script31", 130), ("script32", 131), ("script33", 132), ("script34", 133), ("script35", 134), ("script36", 135), ("script37", 136), ("script38", 137), ("script39", 138), ("script40", 139), ("script41", 140), ("script42", 141), ("script43", 142), ("script44", 143), ("script45", 144), ("script46", 145), ("script47", 146), ("script48", 147), ("script49", 148), ("script50", 149), ("script51", 150), ("script52", 151), ("script53", 152), ("script54", 153), ("script55", 154), ("script56", 155), ("script57", 156), ("script58", 157), ("script59", 158), ("script60", 159), ("script61", 160), ("script62", 161), ("script63", 162), ("script64", 163)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckLayer.setDescription('The OSI layer at which servers are health checked.')
slbNewCfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupName.setDescription('The name of the real server group.')
slbNewCfgGroupRealThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRealThreshold.setDescription('The minimum number of real servers available. If at any time, the number reaches this minimum limit, a SYSLOG ALERT message is send to to the configured syslog servers stating that the real server threshold has been reached for the concerned group.')
slbNewCfgGroupVipHealthCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupVipHealthCheck.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupVipHealthCheck.setDescription('Enable or disable VIP health checking in DSR mode.')
slbNewCfgGroupIdsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupIdsState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupIdsState.setDescription('Enable or disable intrusion detection.')
slbNewCfgGroupIdsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupIdsPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupIdsPort.setDescription('The intrusion detection port. A value of 1 is invalid.')
slbNewCfgGroupDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupDelete.setDescription('By setting the value to delete(2), the entire group is deleted.')
slbNewCfgGroupIdsFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupIdsFlood.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupIdsFlood.setDescription('Enable or disable intrusion detection group flood.')
slbNewCfgGroupMinmissHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minmiss-24", 1), ("minmiss-32", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupMinmissHash.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupMinmissHash.setDescription('24|32 number of sip bits used for minmisses hash in the new_configuration block.')
slbNewCfgGroupPhashMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 18), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupPhashMask.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupPhashMask.setDescription('IP address mask used by the persistent hash metric.')
slbNewCfgGroupRmetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("roundRobin", 1), ("hash", 2), ("leastConnections", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupRmetric.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRmetric.setDescription('The metric used to select next rport in server.')
slbNewCfgGroupHealthCheckFormula = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckFormula.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupHealthCheckFormula.setDescription("The formula used to state the actual health of a virtual service. It allows user to use the symbols of '(', ')', '|', '&' to construct a formula to state the health of the server group. This string can take the following formats : '(1&2|3..)', '128' or 'none' Example: Consider a group with 4 reals 1, 2, 3, 4. An example of a formuala to mark the server group failed for the virtual server if 1 and 2 FAILED or 3 and 4 FAILED is (1|2)&(3|4) This formula will mark the virtual server UP, if 1 or 2 and 3 or 4 are health checked sucessfully.")
slbNewCfgGroupOperatorAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupOperatorAccess.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupOperatorAccess.setDescription('Enable or disable access to this group for operator.')
slbNewCfgGroupWlm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupWlm.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupWlm.setDescription('The Workload Manager for this Group.')
slbNewCfgGroupRadiusAuthenString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGroupRadiusAuthenString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRadiusAuthenString.setDescription('The group RADIUS authentication string. The string is used for generating encrypted authentication string while doing RADIUS health check for this group radius servers.')
slbNewCfgGroupSecBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupSecBackupGroup.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupSecBackupGroup.setDescription('The Secondary backup real server group for this group.')
slbNewCfgGroupSlowstart = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupSlowstart.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupSlowstart.setDescription('The slow-start time for this group.')
slbNewCfgGroupMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupMinThreshold.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupMinThreshold.setDescription('The minimum threshold value for this group.')
slbNewCfgGroupMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 27), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupMaxThreshold.setDescription('The maximum threshold value for this group.')
slbNewCfgGroupIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("mixed", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupIpVer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupIpVer.setDescription('The type of real server group IP address.')
slbNewCfgGroupBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupBackup.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupBackup.setDescription('The backup real group or real server for this group.')
slbNewCfgGroupBackupType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("server", 2), ("group", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupBackupType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupBackupType.setDescription('Backup type of the real server group.')
slbCurCfgGroupRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 5), )
if mibBuilder.loadTexts: slbCurCfgGroupRealServerTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRealServerTable.setDescription('The table of real servers per group.')
slbCurCfgGroupRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgRealServGroupIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgGroupRealServIndex"))
if mibBuilder.loadTexts: slbCurCfgGroupRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRealServerEntry.setDescription('A row in the Real server group table.')
slbCurCfgRealServGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRealServGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRealServGroupIndex.setDescription('The real server group index.')
slbCurCfgGroupRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealServIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRealServIndex.setDescription('The real server index.')
slbCurCfgGroupRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGroupRealServerState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGroupRealServerState.setDescription('Enable/disable a real server gracefully on a per group basis.')
slbNewCfgGroupRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 6), )
if mibBuilder.loadTexts: slbNewCfgGroupRealServerTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRealServerTable.setDescription('The table of real server per group.')
slbNewCfgGroupRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgRealServGroupIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgGroupRealServIndex"))
if mibBuilder.loadTexts: slbNewCfgGroupRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRealServerEntry.setDescription('A row in the Real server group table.')
slbNewCfgRealServGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgRealServGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRealServGroupIndex.setDescription('The real server group index.')
slbNewCfgGroupRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgGroupRealServIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRealServIndex.setDescription('The real server index.')
slbNewCfgGroupRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgGroupRealServerState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGroupRealServerState.setDescription('Enable/disable a real server gracefully on a per group basis.')
slbVirtServerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbVirtServerTableMaxSize.setDescription('The maximum number of entries in SLB VirtServerTable.')
slbCurCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2), )
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerTable.setDescription('The table of virtual Servers.')
slbCurCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtualServerEntry.setDescription('A row in the virtual server table.')
slbCurCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerIndex.setDescription('Virtual Server Number')
slbCurCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerIpAddress.setDescription('IP address of the virtual server.')
slbCurCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerLayer3Only.setDescription('Enable or disable layer3 only balancing.')
slbCurCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerState.setDescription('Enable or disable the virtual server.')
slbCurCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerDname.setDescription('The domain name of the virtual server.')
slbCurCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerBwmContract.setDescription('The default BW contract of virtual server.')
slbCurCfgVirtServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerWeight.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerWeight.setDescription('The virtual server Global SLB weight.')
slbCurCfgVirtServerAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerAvail.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerAvail.setDescription('The virtual server Global SLB availability.')
slbCurCfgVirtServerRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerRule.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerRule.setDescription('The Global SLB rules for the domain. The rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented rule belongs to the domain 0 - The represented rule does not belong to the domain')
slbCurCfgVirtServerVname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerVname.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerVname.setDescription('The name of the virtual server.')
slbCurCfgVirtServerIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIpVer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerIpVer.setDescription('The type of IP address.')
slbCurCfgVirtServerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerIpv6Addr.setDescription('The IPv6 address of the virtual server. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbCurCfgVirtServerCReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServerCReset.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServerCReset.setDescription('Enable/disable client connection reset for invalid VPORT.')
slbNewCfgVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3), )
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerTable.setDescription('The table of virtual Servers.')
slbNewCfgVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServerIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtualServerEntry.setDescription('A row in the virtual server table.')
slbNewCfgVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerIndex.setDescription('The Virtual Server Number')
slbNewCfgVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerIpAddress.setDescription('IP address of the virtual server.')
slbNewCfgVirtServerLayer3Only = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer3Only", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerLayer3Only.setDescription('Enable or disable layer3 only balancing.')
slbNewCfgVirtServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerState.setDescription('Enable or disable the virtual server.')
slbNewCfgVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerDname.setDescription('The domain name of the virtual server.')
slbNewCfgVirtServerBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerBwmContract.setDescription('The default BW contract number of the virtual server.')
slbNewCfgVirtServerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgVirtServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerWeight.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerWeight.setDescription('The virtual server Global SLB weight.')
slbNewCfgVirtServerAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerAvail.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerAvail.setDescription('The virtual server Global SLB availability.')
slbNewCfgVirtServerRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServerRule.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerRule.setDescription('The Global SLB rules for the domain. The rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented rule belongs to the domain 0 - The represented rule does not belong to the domain')
slbNewCfgVirtServerAddRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerAddRule.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerAddRule.setDescription('The rule to be added to the domain. When read, 0 is returned.')
slbNewCfgVirtServerRemoveRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerRemoveRule.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerRemoveRule.setDescription('The rule to be removed from the domain. When read, 0 is returned.')
slbNewCfgVirtServerVname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerVname.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerVname.setDescription('The name of the virtual server.')
slbNewCfgVirtServerIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerIpVer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerIpVer.setDescription('The type of IP address.')
slbNewCfgVirtServerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerIpv6Addr.setDescription('The IPv6 address of the virtual server. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbNewCfgVirtServerFreeServiceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServerFreeServiceIdx.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerFreeServiceIdx.setDescription('The first free service index number of the virtual server. Value 0 will be returned when all 8 virtual services are configured for a virtual server.')
slbNewCfgVirtServerCReset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServerCReset.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServerCReset.setDescription('Enable/disable client connection reset for invalid VPORT.')
slbVirtServicesTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesTableMaxSize.setDescription('The maximum number of entries in SLB Virtual Services Table.')
slbCurCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesTable.setDescription('The table of virtual services.')
slbCurCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesEntry.setDescription('A row in the virtual services table.')
slbCurCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServIndex.setDescription('The number of the virtual server.')
slbCurCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbCurCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceVirtPort.setDescription('The layer4 virtual port number of the service.')
slbCurCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealGroup.setDescription('The real server group number for this service.')
slbCurCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRealPort.setDescription('The layer4 real port number of the service.')
slbCurCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceUDPBalance.setDescription('Enable, disable or stateless the UDP balancing for the virtual port.')
slbCurCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHname.setDescription('The host name of the virtual service.')
slbCurCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceBwmContract.setDescription('The BWM contract number for this service.')
slbCurCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirServerRtn.setDescription('Enable or disable direct server return feature. To translate only MAC addresses in performing server load balancing when enabled. This allow servers to return directly to client since IP addresses have not been changed.')
slbCurCfgVirtServiceRtspUrlParse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("l4hash", 2), ("hash", 3), ("patternMatch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRtspUrlParse.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRtspUrlParse.setDescription('Select RTSP URL load balancing type.')
slbCurCfgVirtServiceDBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("forceproxy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDBind.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDBind.setDescription('Enable/disable/forceproxy delayed binding.')
slbCurCfgVirtServiceFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceFtpParsing.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual service.')
slbCurCfgVirtServiceRemapUDPFrags = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRemapUDPFrags.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRemapUDPFrags.setDescription('Enable or disable remapping UDP server fragments')
slbCurCfgVirtServiceDnsSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDnsSlb.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDnsSlb.setDescription('Enable or disable DNS query load balancing.')
slbCurCfgVirtServiceResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceResponseCount.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceResponseCount.setDescription('The number of cookie search response count.')
slbCurCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("clientip", 2), ("disabled", 3), ("sslid", 4), ("cookie", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicePBind.setDescription('Enable or disable persistent bindings for the virtual port.')
slbCurCfgVirtServiceCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCname.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCname.setDescription('The cookie name of the virtual server used for cookie load balance.')
slbCurCfgVirtServiceCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCoffset.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCoffset.setDescription('The starting byte offset of the cookie value.')
slbCurCfgVirtServiceClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceClength.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceClength.setDescription('The number of bytes to extract from the cookie value.')
slbCurCfgVirtServiceUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUriCookie.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceUriCookie.setDescription('Enable or disable cookie search in URI')
slbCurCfgVirtServiceCExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCExpire.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCExpire.setDescription('The cookie expire of the virtual server used for insert cookie load balance depending on the mode it has the following format <MM/dd/yy[@hh:mm]> absolute mode or <days[:hours[:minutes]]> for relative mode.')
slbCurCfgVirtServiceCookieMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rewrite", 1), ("passive", 2), ("insert", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieMode.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieMode.setDescription('Select cookie persistence mode.')
slbCurCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8), ("version", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbCurCfgVirtServiceHttpSlbOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("and", 1), ("or", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlbOption.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlbOption.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbCurCfgVirtServiceHttpSlb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8), ("version", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb2.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpSlb2.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbCurCfgVirtServiceHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpHdrName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpHdrName.setDescription('The HTTP header name of the virtual server.')
slbCurCfgVirtServiceUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUrlHashLen.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceUrlHashLen.setDescription('The number of bytes used to hash onto server, A zero means URL hashing disabled.')
slbCurCfgVirtServiceDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirect.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDirect.setDescription('Enable or disable DAM for this service.')
slbCurCfgVirtServiceThash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sip", 1), ("sip-sport", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceThash.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceThash.setDescription('Set hash parameter.')
slbCurCfgVirtServiceLdapreset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceLdapreset.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceLdapreset.setDescription('Enable or disable LDAP Server Reset')
slbCurCfgVirtServiceLdapslb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceLdapslb.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceLdapslb.setDescription('Enable or disable LDAP Server load balancing')
slbCurCfgVirtServiceSip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceSip.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceSip.setDescription('Enable/disable SIP load balancing.')
slbCurCfgVirtServiceXForwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceXForwardedFor.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceXForwardedFor.setDescription('Enable/disable X-Forwarded-For for proxy mode.')
slbCurCfgVirtServiceHttpRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpRedir.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpRedir.setDescription('Enable/disable HTTP/HTTPS redirect for GSLB.')
slbCurCfgVirtServicePbindRport = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServicePbindRport.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicePbindRport.setDescription('Enable or disable use of rport in the session lookup for a persistent session.')
slbCurCfgVirtServiceEgressPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceEgressPip.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceEgressPip.setDescription('Enable/disable pip selection based on egress port/vlan.')
slbCurCfgVirtServiceCookieDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieDname.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieDname.setDescription('Select dname for insert cookie persistence mode.')
slbCurCfgVirtServiceWts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceWts.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceWts.setDescription('Enable or disable WTS loadbalancing and persistence.')
slbCurCfgVirtServiceUhash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUhash.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceUhash.setDescription('Enable when there is no Session Directory server.')
slbCurCfgVirtServiceTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceTimeOut.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbCurCfgVirtServiceSessionMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceSessionMirror.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceSessionMirror.setDescription('Enable/disable session mirroring.')
slbCurCfgVirtServiceSoftGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceSoftGrid.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceSoftGrid.setDescription('Enable/disable softgrid load balancing.')
slbCurCfgVirtServiceSdpNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceSdpNat.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceSdpNat.setDescription('Enable/disable SIP Media portal NAT.')
slbCurCfgVirtServiceConnPooling = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceConnPooling.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceConnPooling.setDescription('Enable/disable connection pooling for HTTP traffic.')
slbCurCfgVirtPersistentTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 5, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtPersistentTimeOut.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtPersistentTimeOut.setDescription('The maximum number of minutes a persistent session should exist.')
slbCurCfgVirtServicesSecondPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesSecondPartTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesSecondPartTable.setDescription('The table of virtual Services.')
slbCurCfgVirtServicesSecondPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServSecondPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServiceSecondPartIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesSecondPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesSecondPartEntry.setDescription('A row in the virtual services table.')
slbCurCfgVirtServSecondPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServSecondPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServSecondPartIndex.setDescription('The number of the virtual server.')
slbCurCfgVirtServiceSecondPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceSecondPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceSecondPartIndex.setDescription('The service index. This has no external meaning')
slbCurCfgVirtServiceConnmgtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("pooling", 1), ("muxenabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceConnmgtStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceConnmgtStatus.setDescription('Connection management configuration for HTTP traffic(Enable/disable/pooling) [Default: Disable].')
slbCurCfgVirtServiceConnmgtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceConnmgtTimeout.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceConnmgtTimeout.setDescription('Connection management server side connection idle timeout in minutes [0-32768] [Default: 10].')
slbCurCfgVirtServiceCachepol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCachepol.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCachepol.setDescription('Cache policy name associated with this virtual service.')
slbCurCfgVirtServiceComppol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceComppol.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceComppol.setDescription('Compression policy name associated with this virtual service.')
slbCurCfgVirtServiceSSLpol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceSSLpol.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceSSLpol.setDescription('SSL policy name associated with this virtual service.')
slbCurCfgVirtServiceServCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceServCert.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceServCert.setDescription('Server Certificate name associated with this virtual service.')
slbCurCfgVirtServiceHttpmodList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpmodList.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceHttpmodList.setDescription('HTTP Content Modifications Rule-list associated with this virtual service.')
slbCurCfgVirtServiceCloaksrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCloaksrv.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCloaksrv.setDescription('Enable/disable server cloaking.')
slbCurCfgVirtServErrcodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("clear", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeStatus.setDescription('Enable/disable/clear error-code configuration.')
slbCurCfgVirtServErrcodeMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeMatch.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeMatch.setDescription('Match error-code(s), e.g 203,204 .')
slbCurCfgVirtServErrcodeHttpRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeHttpRedir.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeHttpRedir.setDescription('Use http redirection [yes/no] [Default: yes].')
slbCurCfgVirtServErrcodeUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeUrl.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeUrl.setDescription('URL for redirection.')
slbCurCfgVirtServErrcode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServErrcode.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServErrcode.setDescription('Set error code [Default: 302].')
slbCurCfgVirtServErrcodeNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeNew.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeNew.setDescription('Enter Cur error code [Default: 302].')
slbCurCfgVirtServErrcodeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeReason.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServErrcodeReason.setDescription('Enter error reason.')
slbCurCfgVirtServUrlchangStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangStatus.setDescription('Enter enabled/disabled/clear [Default: clear].')
slbCurCfgVirtServUrlchangHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("incl", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangHostType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangHostType.setDescription('Enter hostname match type [sufx|prefx|eq|incl|any] [Default: any]')
slbCurCfgVirtServicesThirdPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesThirdPartTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesThirdPartTable.setDescription('The table of virtual Services.')
slbCurCfgVirtServicesThirdPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServThirdPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServiceThirdPartIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesThirdPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesThirdPartEntry.setDescription('A row in the virtual services table.')
slbCurCfgVirtServThirdPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServThirdPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServThirdPartIndex.setDescription('The number of the virtual server.')
slbCurCfgVirtServiceThirdPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceThirdPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceThirdPartIndex.setDescription('The service index. This has no external meaning')
slbCurCfgVirtServUrlchangHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangHostName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangHostName.setDescription('Enter hostname to match.')
slbCurCfgVirtServUrlchangPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("incl", 4), ("any", 5), ("none", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPathType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPathType.setDescription('Enter path match type [sufx|prefx|eq|incl|any].')
slbCurCfgVirtServUrlchangPathMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPathMatch.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPathMatch.setDescription('Enter path to match.')
slbCurCfgVirtServUrlchangPageName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPageName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPageName.setDescription('Enter page name to match or none.')
slbCurCfgVirtServUrlchangPageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPageType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPageType.setDescription('Enter page type to match or none.')
slbCurCfgVirtServUrlchangActnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangActnType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangActnType.setDescription('Enter path action type.')
slbCurCfgVirtServUrlchangPathInsrt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPathInsrt.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangPathInsrt.setDescription('Enter path to insert.')
slbCurCfgVirtServUrlchangInsrtPostn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("before", 1), ("after", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangInsrtPostn.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangInsrtPostn.setDescription('Insert the specified path before or after the matched section?')
slbCurCfgVirtServicesFourthPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesFourthPartTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesFourthPartTable.setDescription('The table of virtual Services.')
slbCurCfgVirtServicesFourthPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServFourthPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServiceFourthPartIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesFourthPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesFourthPartEntry.setDescription('A row in the virtual services table.')
slbCurCfgVirtServFourthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServFourthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServFourthPartIndex.setDescription('The number of the virtual server.')
slbCurCfgVirtServiceFourthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceFourthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceFourthPartIndex.setDescription('The service index. This has no external meaning')
slbCurCfgVirtServUrlchangNewPgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangNewPgName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangNewPgName.setDescription('Enter Cur page name or none.')
slbCurCfgVirtServUrlchangNewPgType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangNewPgType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServUrlchangNewPgType.setDescription('Enter Cur page type or none.')
slbCurCfgVirtServPathHideStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServPathHideStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServPathHideStatus.setDescription('Enter enabled/disabled/clear [Default: clear].')
slbCurCfgVirtServPathHideHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("incl", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServPathHideHostType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServPathHideHostType.setDescription('Enter hostname type [sufx|prefx|eq|incl|any] [Default: any].')
slbCurCfgVirtServPathHideHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServPathHideHostName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServPathHideHostName.setDescription('Enter hostname to match.')
slbCurCfgVirtServPathHidePathType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServPathHidePathType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServPathHidePathType.setDescription('Enter path match type [sufx|prefx|eq|none].')
slbCurCfgVirtServPathHidePathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServPathHidePathName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServPathHidePathName.setDescription('Enter path to remove.')
slbCurCfgVirtServTextrepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepStatus.setDescription('Enter enabled/disabled/clear [Default: clear].')
slbCurCfgVirtServTextrepAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("replace", 1), ("remove", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepAction.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepAction.setDescription('Enter action [replace|remove|none].')
slbCurCfgVirtServicesFifthPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15), )
if mibBuilder.loadTexts: slbCurCfgVirtServicesFifthPartTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesFifthPartTable.setDescription('The table of virtual Services.')
slbCurCfgVirtServicesFifthPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServFifthPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgVirtServiceFifthPartIndex"))
if mibBuilder.loadTexts: slbCurCfgVirtServicesFifthPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServicesFifthPartEntry.setDescription('A row in the virtual services table.')
slbCurCfgVirtServFifthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServFifthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServFifthPartIndex.setDescription('The number of the virtual server.')
slbCurCfgVirtServiceFifthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceFifthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceFifthPartIndex.setDescription('The service index. This has no external meaning')
slbCurCfgVirtServTextrepMatchText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepMatchText.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepMatchText.setDescription('Enter text to be replaced.')
slbCurCfgVirtServTextrepReplacTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepReplacTxt.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServTextrepReplacTxt.setDescription('Enter Cur text/ text to remove.')
slbCurCfgVirtServApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("basic-slb", 1), ("dns", 2), ("ftp", 3), ("ftp-data", 4), ("ldap", 5), ("http", 6), ("https", 7), ("ssl", 8), ("rtsp", 9), ("sip", 10), ("wts", 11), ("tftp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServApplicationType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServApplicationType.setDescription('Application Type for virtual service.')
slbCurCfgVirtServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceName.setDescription('The name of the virtual service.')
slbCurCfgVirtServiceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group", 1), ("redirect", 2), ("discard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceAction.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceAction.setDescription('Action type of the service.If we set value as group(1) it will Load balance the traffic between the servers defined in the group field after performing all other services actions.when set to a value of redirect(2) for http/https services, an http/s redirection will be performed with the values set in the application redirection.If we set value as discard(3) it will drop the session.')
slbCurCfgVirtServiceRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceRedirect.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceRedirect.setDescription('application redirection location.We need to provide this value When action type is set to redirect(2).')
slbCurCfgVirtServiceServCertGrpMark = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cert", 1), ("group", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceServCertGrpMark.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceServCertGrpMark.setDescription('Group Mark for Server Certificate. If we set value as cert(0) It will denote that the server certificate (name) associated with this virtual service, represents a certificate. Otherwise, a value of group(1), denotes that the server certificate (name) represents a group.')
slbCurCfgVirtServiceDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dns", 1), ("dnssec", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceDnsType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceDnsType.setDescription('Set DNS type for this service (DNS, DNSSEC).')
slbCurCfgVirtServiceClntproxType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("http", 2), ("https", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceClntproxType.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceClntproxType.setDescription('Set client proximity type for this service.')
slbCurCfgVirtServiceZerowinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceZerowinSize.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceZerowinSize.setDescription('Enable or disable zero window size in SYN+ACK for this service.')
slbCurCfgVirtServiceCookiePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookiePath.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookiePath.setDescription('The cookie path name of the virtual server used for cookie load balance.')
slbCurCfgVirtServiceCookieSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieSecure.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCookieSecure.setDescription('Is cookie secure [yes/no] [Default: no].')
slbCurCfgVirtServiceNoRtsp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceNoRtsp.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceNoRtsp.setDescription('Enable or disable only rtsp SLB for this service.')
slbCurCfgVirtServiceCkRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceCkRebind.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceCkRebind.setDescription('Server rebalancing when cookie is absent. When enabled, server load balancing will happen for subsequent request comes without cookie.')
slbCurCfgVirtServiceParseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceParseLimit.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceParseLimit.setDescription('Enable or disable buffer limit for content based selection.')
slbCurCfgVirtServiceParseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceParseLength.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceParseLength.setDescription('The buffer length for content based selection.')
slbCurCfgVirtServiceUriNorm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 15, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtServiceUriNorm.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtServiceUriNorm.setDescription('Enable or disable URI normalization for HTTP content matching.')
slbNewCfgVirtServicesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesTable.setDescription('The table of virtual Services.')
slbNewCfgVirtServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServiceIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesEntry.setDescription('A row in the virtual services table.')
slbNewCfgVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServIndex.setDescription('The number of the virtual server.')
slbNewCfgVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbNewCfgVirtServiceVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceVirtPort.setDescription('The layer4 virtual port number of the service.')
slbNewCfgVirtServiceRealGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealGroup.setDescription('The real server group number for this service.')
slbNewCfgVirtServiceRealPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRealPort.setDescription('The layer4 real port number of the service.')
slbNewCfgVirtServiceUDPBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3), ("stateless", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceUDPBalance.setDescription('Enable, disable or stateless the UDP balancing for the virtual port.')
slbNewCfgVirtServiceHname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHname.setDescription('The host name of the virtual service.')
slbNewCfgVirtServiceBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceBwmContract.setDescription('The BWM contract number for this service.')
slbNewCfgVirtServiceDirServerRtn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirServerRtn.setDescription('Enable or disable direct server return feature. To translate only MAC addresses in performing server load balancing when enabled. This allow servers to return directly to client since IP addresses have not been changed.')
slbNewCfgVirtServiceRtspUrlParse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("l4hash", 2), ("hash", 3), ("patternMatch", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRtspUrlParse.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRtspUrlParse.setDescription('Select RTSP URL load balancing type.')
slbNewCfgVirtServiceDBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("forceproxy", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDBind.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDBind.setDescription('Enable/disable/forceproxy delayed binding.')
slbNewCfgVirtServiceFtpParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceFtpParsing.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceFtpParsing.setDescription('Enable or Disable the ftp parsing for the virtual service.')
slbNewCfgVirtServiceRemapUDPFrags = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRemapUDPFrags.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRemapUDPFrags.setDescription('Enable or disable remapping UDP server fragments')
slbNewCfgVirtServiceDnsSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDnsSlb.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDnsSlb.setDescription('Enable or disable DNS query load balancing.')
slbNewCfgVirtServiceResponseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceResponseCount.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceResponseCount.setDescription('The number of cookie search response count.')
slbNewCfgVirtServicePBind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("clientip", 2), ("disabled", 3), ("sslid", 4), ("cookie", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicePBind.setDescription('Enable or disable persistent bindings for the virtual port.')
slbNewCfgVirtServiceCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCname.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCname.setDescription('The cookie name of the virtual server used for cookie load balance.')
slbNewCfgVirtServiceCoffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCoffset.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCoffset.setDescription('The starting byte offset of the cookie value.')
slbNewCfgVirtServiceClength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceClength.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceClength.setDescription('The number of bytes to extract from the cookie value.')
slbNewCfgVirtServiceUriCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUriCookie.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceUriCookie.setDescription('Enable or disable cookie search in URI')
slbNewCfgVirtServiceCExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCExpire.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCExpire.setDescription('The cookie expire of the virtual server used for insert cookie load balance depending on the mode it has the following format <MM/dd/yy[@hh:mm]> absolute mode or <days[:hours[:minutes]]> for relative mode.')
slbNewCfgVirtServiceCookieMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rewrite", 1), ("passive", 2), ("insert", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieMode.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieMode.setDescription('Select cookie persistence mode.')
slbNewCfgVirtServiceHttpSlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8), ("version", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbNewCfgVirtServiceHttpSlbOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("and", 1), ("or", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlbOption.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlbOption.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbNewCfgVirtServiceHttpSlb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("urlslb", 2), ("urlhash", 3), ("cookie", 4), ("host", 5), ("browser", 6), ("others", 7), ("headerhash", 8), ("version", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb2.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpSlb2.setDescription('Select HTTP server loadbalancing for the virtual port.')
slbNewCfgVirtServiceHttpHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpHdrName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpHdrName.setDescription('The HTTP header name of the virtual server.')
slbNewCfgVirtServiceUrlHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUrlHashLen.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceUrlHashLen.setDescription('The number of bytes used to hash onto server, A zero means URL hashing disabled.')
slbNewCfgVirtServiceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbNewCfgVirtServiceDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirect.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDirect.setDescription('Enable or disable DAM for this service.')
slbNewCfgVirtServiceThash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sip", 1), ("sip-sport", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceThash.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceThash.setDescription('Set hash parameter.')
slbNewCfgVirtServiceLdapreset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceLdapreset.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceLdapreset.setDescription('Enable or disable LDAP Server Reset')
slbNewCfgVirtServiceLdapslb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceLdapslb.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceLdapslb.setDescription('Enable or disable LDAP Server load balancing')
slbNewCfgVirtServiceSip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceSip.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceSip.setDescription('Enable/disable SIP load balancing.')
slbNewCfgVirtServiceXForwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceXForwardedFor.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceXForwardedFor.setDescription('Enable/disable X-Forwarded-For for proxy mode.')
slbNewCfgVirtServiceHttpRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpRedir.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpRedir.setDescription('Enable/disable HTTP/HTTPS redirect for GSLB.')
slbNewCfgVirtServicePbindRport = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServicePbindRport.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicePbindRport.setDescription('Enable or disable use of rport in the session lookup for a persistent session.')
slbNewCfgVirtServiceEgressPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceEgressPip.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceEgressPip.setDescription('Enable/disable pip selection based on egress port/vlan.')
slbNewCfgVirtServiceCookieDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieDname.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieDname.setDescription('Select dname for insert cookie persistence mode.')
slbNewCfgVirtServiceWts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceWts.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceWts.setDescription('Enable or disable WTS loadbalancing and persistence.')
slbNewCfgVirtServiceUhash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUhash.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceUhash.setDescription('Enable when there is no Session Directory server.')
slbNewCfgVirtServiceTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceTimeOut.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceTimeOut.setDescription('The maximum number of minutes an inactive connection remains open.')
slbNewCfgVirtServiceSessionMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceSessionMirror.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceSessionMirror.setDescription('Enable/disable session mirroring.')
slbNewCfgVirtServiceSoftGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceSoftGrid.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceSoftGrid.setDescription('Enable/disable softgrid load balancing.')
slbNewCfgVirtServiceSdpNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceSdpNat.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceSdpNat.setDescription('Enable/disable SIP Media portal NAT.')
slbNewCfgVirtServiceConnPooling = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceConnPooling.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceConnPooling.setDescription('Enable/disable connection pooling for HTTP traffic.')
slbNewCfgVirtPersistentTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 6, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtPersistentTimeOut.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtPersistentTimeOut.setDescription('The maximum number of minutes a persistent session should exist.')
slbNewCfgVirtServicesSecondPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesSecondPartTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesSecondPartTable.setDescription('The table of virtual Services.')
slbNewCfgVirtServicesSecondPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServSecondPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServiceSecondPartIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesSecondPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesSecondPartEntry.setDescription('A row in the virtual services table.')
slbNewCfgVirtServSecondPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServSecondPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServSecondPartIndex.setDescription('The number of the virtual server.')
slbNewCfgVirtServiceSecondPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceSecondPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceSecondPartIndex.setDescription('The service index. This has no external meaning')
slbNewCfgVirtServiceConnmgtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("pooling", 1), ("muxenabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceConnmgtStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceConnmgtStatus.setDescription('Connection management configuration for HTTP traffic(Enable/disable/pooling) [Default: Disable].')
slbNewCfgVirtServiceConnmgtTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceConnmgtTimeout.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceConnmgtTimeout.setDescription('Connection management server side connection idle timeout in minutes [0-32768] [Default: 10].')
slbNewCfgVirtServiceCachepol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCachepol.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCachepol.setDescription('Cache policy name associated with this virtual service.Set none to delete entry')
slbNewCfgVirtServiceComppol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceComppol.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceComppol.setDescription('Compression policy name associated with this virtual service.Set none to delete entry')
slbNewCfgVirtServiceSSLpol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceSSLpol.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceSSLpol.setDescription('SSL policy name associated with this virtual service.Set none to delete entry')
slbNewCfgVirtServiceServCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceServCert.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceServCert.setDescription('Server Certificate name associated with this virtual service.')
slbNewCfgVirtServiceHttpmodList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpmodList.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceHttpmodList.setDescription('HTTP Content Modifications Rule-list associated with this virtual service.Set none to delete entry')
slbNewCfgVirtServiceCloaksrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCloaksrv.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCloaksrv.setDescription('Enable/disable server cloaking.')
slbNewCfgVirtServErrcodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("clear", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeStatus.setDescription('Enable/disable/clear error-code configuration.')
slbNewCfgVirtServErrcodeMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeMatch.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeMatch.setDescription('Match error-code(s), e.g 203,204 .')
slbNewCfgVirtServErrcodeHttpRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeHttpRedir.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeHttpRedir.setDescription('Use http redirection [yes/no] [Default: yes].')
slbNewCfgVirtServErrcodeUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeUrl.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeUrl.setDescription('URL for redirection.')
slbNewCfgVirtServErrcode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServErrcode.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServErrcode.setDescription('set error code [Default: 302].')
slbNewCfgVirtServErrcodeNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeNew.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeNew.setDescription('Enter new error code [Default: 302].')
slbNewCfgVirtServErrcodeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeReason.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServErrcodeReason.setDescription('Enter error reason.')
slbNewCfgVirtServUrlchangStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangStatus.setDescription('Enter enabled/disabled/clear [Default: clear].')
slbNewCfgVirtServUrlchangHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 16, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("incl", 4), ("any", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangHostType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangHostType.setDescription('Enter hostname match type [sufx|prefx|eq|incl|any] [Default: any]')
slbNewCfgVirtServicesThirdPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesThirdPartTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesThirdPartTable.setDescription('The table of virtual Services.')
slbNewCfgVirtServicesThirdPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServThirdPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServiceThirdPartIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesThirdPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesThirdPartEntry.setDescription('A row in the virtual services table.')
slbNewCfgVirtServThirdPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServThirdPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServThirdPartIndex.setDescription('The number of the virtual server.')
slbNewCfgVirtServiceThirdPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceThirdPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceThirdPartIndex.setDescription('The service index. This has no external meaning')
slbNewCfgVirtServUrlchangHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangHostName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangHostName.setDescription('Enter hostname to match.')
slbNewCfgVirtServUrlchangPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("incl", 4), ("any", 5), ("none", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPathType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPathType.setDescription('Enter path match type [sufx|prefx|eq|incl|any|none].')
slbNewCfgVirtServUrlchangPathMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPathMatch.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPathMatch.setDescription('Enter path to match.')
slbNewCfgVirtServUrlchangPageName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPageName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPageName.setDescription('Enter page name to match or none.')
slbNewCfgVirtServUrlchangPageType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPageType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPageType.setDescription('Enter page type to match or none.')
slbNewCfgVirtServUrlchangActnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("insert", 1), ("replace", 2), ("remove", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangActnType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangActnType.setDescription('Enter path action type.')
slbNewCfgVirtServUrlchangPathInsrt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPathInsrt.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangPathInsrt.setDescription('Enter path to insert.')
slbNewCfgVirtServUrlchangInsrtPostn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("before", 1), ("after", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangInsrtPostn.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangInsrtPostn.setDescription('Insert the specified path before or after the matched section?')
slbNewCfgVirtServicesFourthPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesFourthPartTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesFourthPartTable.setDescription('The table of virtual Services.')
slbNewCfgVirtServicesFourthPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServFourthPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServiceFourthPartIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesFourthPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesFourthPartEntry.setDescription('A row in the virtual services table.')
slbNewCfgVirtServFourthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServFourthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServFourthPartIndex.setDescription('The number of the virtual server.')
slbNewCfgVirtServiceFourthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceFourthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceFourthPartIndex.setDescription('The service index. This has no external meaning')
slbNewCfgVirtServUrlchangNewPgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangNewPgName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangNewPgName.setDescription('Enter new page name or none.')
slbNewCfgVirtServUrlchangNewPgType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangNewPgType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServUrlchangNewPgType.setDescription('Enter new page type or none.')
slbNewCfgVirtServPathHideStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServPathHideStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServPathHideStatus.setDescription('Enter enabled/disabled/clear [Default: clear].')
slbNewCfgVirtServPathHideHostType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("incl", 4), ("any", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServPathHideHostType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServPathHideHostType.setDescription('Enter hostname type [sufx|prefx|eq|incl|any] [Default: any].')
slbNewCfgVirtServPathHideHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServPathHideHostName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServPathHideHostName.setDescription('Enter hostname to match.')
slbNewCfgVirtServPathHidePathType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sufx", 1), ("prefx", 2), ("eq", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServPathHidePathType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServPathHidePathType.setDescription('Enter path match type [sufx|prefx|eq|none].')
slbNewCfgVirtServPathHidePathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 250))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServPathHidePathName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServPathHidePathName.setDescription('Enter path to remove.')
slbNewCfgVirtServTextrepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("clear", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepStatus.setDescription('Enter enabled/disabled/clear [Default: clear].')
slbNewCfgVirtServTextrepAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("replace", 1), ("remove", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepAction.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepAction.setDescription('Enter action [replace|remove|none].')
slbNewCfgVirtServicesFifthPartTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19), )
if mibBuilder.loadTexts: slbNewCfgVirtServicesFifthPartTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesFifthPartTable.setDescription('The table of virtual Services.')
slbNewCfgVirtServicesFifthPartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServFifthPartIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgVirtServiceFifthPartIndex"))
if mibBuilder.loadTexts: slbNewCfgVirtServicesFifthPartEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServicesFifthPartEntry.setDescription('A row in the virtual services table.')
slbNewCfgVirtServFifthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServFifthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServFifthPartIndex.setDescription('The number of the virtual server.')
slbNewCfgVirtServiceFifthPartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgVirtServiceFifthPartIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceFifthPartIndex.setDescription('The service index. This has no external meaning')
slbNewCfgVirtServTextrepMatchText = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepMatchText.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepMatchText.setDescription('Enter text to be replaced.')
slbNewCfgVirtServTextrepReplacTxt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepReplacTxt.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServTextrepReplacTxt.setDescription('Enter new text/ text to remove.')
slbNewCfgVirtServApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("basic-slb", 1), ("dns", 2), ("ftp", 3), ("ftp-data", 4), ("ldap", 5), ("http", 6), ("https", 7), ("ssl", 8), ("rtsp", 9), ("sip", 10), ("wts", 11), ("tftp", 12)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServApplicationType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServApplicationType.setDescription('Application Type for virtual service.')
slbNewCfgVirtServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceName.setDescription('The name of the virtual service.')
slbNewCfgVirtServiceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group", 1), ("redirect", 2), ("discard", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceAction.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceAction.setDescription('Action type of the service.If we set value as group(1) it will Load balance the traffic between the servers defined in the group field after performing all other services actions.when set to a value of redirect(2) for http/https services, an http/s redirection will be performed with the values set in the application redirection.If we set value as discard(3) it will drop the session.')
slbNewCfgVirtServiceRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceRedirect.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceRedirect.setDescription('application redirection location.We need to provide this value When action type is set to redirect(2).')
slbNewCfgVirtServiceServCertGrpMark = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cert", 1), ("group", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceServCertGrpMark.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceServCertGrpMark.setDescription('Group Mark for Server Certificate. If we set value as cert(0) It will denote that the server certificate (name) associated with this virtual service, represents a certificate. Otherwise, a value of group(1), denotes that the server certificate (name) represents a group.')
slbNewCfgVirtServiceDnsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dns", 1), ("dnssec", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceDnsType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceDnsType.setDescription('Set DNS type for this service (DNS, DNSSEC).')
slbNewCfgVirtServiceClntproxType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("http", 2), ("https", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceClntproxType.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceClntproxType.setDescription('Set client proximity type for this service.')
slbNewCfgVirtServiceZerowinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceZerowinSize.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceZerowinSize.setDescription('Enable or disable zero window size in SYN+ACK for this service.')
slbNewCfgVirtServiceCookiePath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookiePath.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookiePath.setDescription('The cookie path name of the virtual server used for cookie load balance.')
slbNewCfgVirtServiceCookieSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieSecure.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCookieSecure.setDescription('Is cookie secure [yes/no] [Default: no].')
slbNewCfgVirtServiceNoRtsp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceNoRtsp.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceNoRtsp.setDescription('Enable or disable only rtsp SLB for this service.')
slbNewCfgVirtServiceCkRebind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceCkRebind.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceCkRebind.setDescription('Enable or disable server rebalancing when cookie is absent. When enabled, server load balancing will happen for subsequent request comes without cookie.')
slbNewCfgVirtServiceParseLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceParseLimit.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceParseLimit.setDescription('Enable or disable buffer limit for content based selection.')
slbNewCfgVirtServiceParseLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceParseLength.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceParseLength.setDescription('The buffer length for content based selection.')
slbNewCfgVirtServiceUriNorm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 19, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgVirtServiceUriNorm.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtServiceUriNorm.setDescription('Enable or disable URI normalization for HTTP content matching.')
slbUrlBwmTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbUrlBwmTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbUrlBwmTableMaxSize.setDescription('The maximum number of entries in SLB URL BWM Table.')
slbCurCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 8), )
if mibBuilder.loadTexts: slbCurCfgUrlBwmTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlBwmTable.setDescription('The table of URL based BWM for Virtual Services.')
slbCurCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgUrlBwmVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgUrlBwmVirtServiceIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: slbCurCfgUrlBwmEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlBwmEntry.setDescription('A row in the URL based BWM virtual services table.')
slbCurCfgUrlBwmVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServIndex.setDescription('The number of the virtual server.')
slbCurCfgUrlBwmVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlBwmVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbCurCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmUrlId.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
slbCurCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgUrlBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgUrlBwmContract.setDescription('The BW contract number.')
slbNewCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 9), )
if mibBuilder.loadTexts: slbNewCfgUrlBwmTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlBwmTable.setDescription('The table of URL based BWM for Virtual Services.')
slbNewCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgUrlBwmVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgUrlBwmVirtServiceIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: slbNewCfgUrlBwmEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlBwmEntry.setDescription('A row in the URL based BWM virtual services table.')
slbNewCfgUrlBwmVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServIndex.setDescription('The number of the virtual server.')
slbNewCfgUrlBwmVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlBwmVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbNewCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgUrlBwmUrlId.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
slbNewCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 9, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlBwmContract.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlBwmContract.setDescription('The BW contract number.')
slbNewCfgUrlBwmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgUrlBwmDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgUrlBwmDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbCurCfgContRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10), )
if mibBuilder.loadTexts: slbCurCfgContRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleTable.setDescription('The table of Content based Services Rules.')
slbCurCfgContRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgContVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgContVirtServiceIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgContRuleIndex"))
if mibBuilder.loadTexts: slbCurCfgContRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleEntry.setDescription('A row in the Content Based Services Rules table.')
slbCurCfgContVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContVirtServIndex.setDescription('The number of the virtual server.')
slbCurCfgContVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbCurCfgContRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleIndex.setDescription('The content based service rule index.')
slbCurCfgContRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleName.setDescription('The Content Rule Name.')
slbCurCfgContRuleContClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleContClass.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleContClass.setDescription('The Content Class for the rule.')
slbCurCfgContRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("group", 1), ("appredir", 2), ("discard", 3), ("goto", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleAction.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleAction.setDescription('Action type of the rule.')
slbCurCfgContRuleRealGrpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleRealGrpNum.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleRealGrpNum.setDescription('The group number of real server.')
slbCurCfgContRuleGotoRuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleGotoRuleNum.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleGotoRuleNum.setDescription('The group number of real server.')
slbCurCfgContRuleRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleRedirection.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleRedirection.setDescription('Application redirection for the rule.')
slbCurCfgContRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgContRuleState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgContRuleState.setDescription('Enable or disable Content Based Services Rule .')
slbNewCfgContRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11), )
if mibBuilder.loadTexts: slbNewCfgContRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleTable.setDescription('The table of Content based Services Rules.')
slbNewCfgContRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgContVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgContVirtServiceIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgContRuleIndex"))
if mibBuilder.loadTexts: slbNewCfgContRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleEntry.setDescription('A row in the Content Based Services Rules table.')
slbNewCfgContVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgContVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContVirtServIndex.setDescription('The number of the virtual server.')
slbNewCfgContVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgContVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContVirtServiceIndex.setDescription('The service index. This has no external meaning')
slbNewCfgContRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgContRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleIndex.setDescription('The content based service index.')
slbNewCfgContRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleName.setDescription('The Content Rule Name.')
slbNewCfgContRuleContClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleContClass.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleContClass.setDescription('The Content Class for the rule.')
slbNewCfgContRuleAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("group", 1), ("appredir", 2), ("discard", 3), ("goto", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleAction.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleAction.setDescription('Action type of the rule.')
slbNewCfgContRuleRealGrpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleRealGrpNum.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleRealGrpNum.setDescription('The group number of real server.')
slbNewCfgContRuleGotoRuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleGotoRuleNum.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleGotoRuleNum.setDescription('The group number of real server.')
slbNewCfgContRuleRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleRedirection.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleRedirection.setDescription('Application redirection for the rule.')
slbNewCfgContRuleCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleCopy.setDescription('The Number to which current rule is to be copied.')
slbNewCfgContRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleState.setDescription('Enable or disable Content Based Services Rule .')
slbNewCfgContRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 4, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgContRuleDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgContRuleDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbPortTableMaxSize.setDescription('The maximum number of entries in SLB Port Table.')
slbCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2), )
if mibBuilder.loadTexts: slbCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortTable.setDescription('The table of ports and their SLB states')
slbCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgPortIndex"))
if mibBuilder.loadTexts: slbCurCfgPortEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortEntry.setDescription('A row in the slbPortTable ')
slbCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortIndex.setDescription('The port number for which the SLB information pertains.')
slbCurCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbState.setDescription('The SLB state of the port. none(1) - not SLB port client(2) - SLB client port server(3) - SLB server port client-server(4) - SLB client and server port')
slbCurCfgPortSlbFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbFilter.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbFilter.setDescription('Enable or disable Filtering.')
slbCurCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbHotStandby.setDescription('Enable or disable hot standby processing on the switch port.')
slbCurCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbInterSwitch.setDescription('Enable or disable inter-switch processing on the switch port.')
slbCurCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbPipState.setDescription('Enable or disable use of proxy IP address on the switch port.')
slbCurCfgPortSlbRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbRtsState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbRtsState.setDescription('Enable or disable RTS processing on the switch port.')
slbCurCfgPortSlbIdslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbIdslbState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbIdslbState.setDescription('Enable or disable Intrusion Detection server load balancing.')
slbCurCfgPortSlbServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbServState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbServState.setDescription('Enable or disable server processing.')
slbCurCfgPortSlbClntState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbClntState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbClntState.setDescription('Enable or disable client processing.')
slbCurCfgPortSlbL3Filter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbL3Filter.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbL3Filter.setDescription('Enable or disable Layer3 Filtering.')
slbCurCfgPortSlbFilterBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortSlbFilterBmap.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortSlbFilterBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltCurCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
slbCurCfgPortInterSwitchVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortInterSwitchVlan.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortInterSwitchVlan.setDescription('VLAN for inter-switch processing.')
slbCurCfgPortVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortVlanBmap.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortVlanBmap.setDescription('VLANs associated with this port. The VLANs are presented in a bitmap format. OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ VLAN 9 || || || ||___ VLAN 8 || |____ VLAN 7 || . . . ||_________ VLAN 2 |__________ VLAN 1 where x : 1 - VLAN is associated 0 - VLAN is not associated')
slbNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3), )
if mibBuilder.loadTexts: slbNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortTable.setDescription('The table of ports and their SLB states')
slbNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgPortIndex"))
if mibBuilder.loadTexts: slbNewCfgPortEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortEntry.setDescription('A row in the slbPortTable ')
slbNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortIndex.setDescription('The port number for which the SLB information pertains.')
slbNewCfgPortSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("server", 3), ("client-server", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbState.setDescription('The SLB state of the port. none(1) - not SLB port client(2) - SLB client port server(3) - SLB server port client-server(4) - SLB client and server port')
slbNewCfgPortSlbHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbHotStandby.setDescription('Enable or disable hot standby processing on the switch port.')
slbNewCfgPortSlbInterSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbInterSwitch.setDescription('Enable or disable inter-switch processing on the switch port.')
slbNewCfgPortSlbPipState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbPipState.setDescription('Enable or disable use of proxy IP address on the switch port.')
slbNewCfgPortSlbRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbRtsState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbRtsState.setDescription('Enable or disable RTS processing on the switch port.')
slbNewCfgPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbNewCfgPortSlbIdslbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbIdslbState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbIdslbState.setDescription('Enable or disable Intrusion Detection server load balancing.')
slbNewCfgPortSlbFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbFilter.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbFilter.setDescription('Enable or disable Filtering.')
slbNewCfgPortSlbAddFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbAddFilter.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbAddFilter.setDescription('Specify the Filter Number to be added to this Port table.')
slbNewCfgPortSlbRemFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbRemFilter.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbRemFilter.setDescription('Specify the Filter Number to be deleted from this Port table.')
slbNewCfgPortSlbServState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbServState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbServState.setDescription('Enable or disable Server Processing.')
slbNewCfgPortSlbClntState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbClntState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbClntState.setDescription('Enable or disable Client Processing.')
slbNewCfgPortSlbL3Filter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortSlbL3Filter.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbL3Filter.setDescription('Enable or disable Layer3 Filtering.')
slbNewCfgPortSlbFilterBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPortSlbFilterBmap.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortSlbFilterBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltCurCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
slbNewCfgPortInterSwitchVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortInterSwitchVlan.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortInterSwitchVlan.setDescription('VLAN for inter-switch processing.')
slbNewCfgPortVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 5, 3, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPortVlanBmap.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortVlanBmap.setDescription('VLANs associated with this port. The VLANs are presented in a bitmap format. OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ VLAN 9 || || || ||___ VLAN 8 || |____ VLAN 7 || . . . ||_________ VLAN 2 |__________ VLAN 1 where x : 1 - VLAN is associated 0 - VLAN is not associated')
slbCurCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGlobalControl.setDescription('The global state of Server Load Balancing.')
slbNewCfgGlobalControl = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGlobalControl.setDescription('The global state of Server Load Balancing.')
slbCurCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgImask.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgImask.setDescription('The virtual and real IP address mask - corresponding to the imask command of the slb configuration menu.')
slbNewCfgImask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgImask.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgImask.setDescription('The virtual and real IP address mask - corresponding to the imask command of the slb configuration menu.')
slbCurCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMnet.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgMnet.setDescription('The management network - corresponding to the mnet command of the slb configuration menu.')
slbNewCfgMnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMnet.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgMnet.setDescription('The management network - corresponding to the mnet command of the slb configuration menu.')
slbCurCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMmask.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgMmask.setDescription('The management subnet mask - corresponding to the mmask command of the slb configuration menu.')
slbNewCfgMmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMmask.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgMmask.setDescription('The management subnet mask - corresponding to the mmask command of the slb configuration menu.')
slbCurCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRadiusAuthenString.setDescription('The RADIUS authentication string. The string is used for generating encrypted authentication string for RADIUS health check.')
slbNewCfgRadiusAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRadiusAuthenString.setDescription('The RADIUS authentication string. The string is used for generating encrypted authentication string for RADIUS health check.')
slbCurCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDirectMode.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDirectMode.setDescription('Enable or disable direct access mode. It allows direct access to real servers and any combination of virtual and real servers when set to enabled(1).')
slbNewCfgDirectMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgDirectMode.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDirectMode.setDescription('Enable or disable direct access mode. It allows direct access to real servers and any combination of virtual and real servers when set to enabled(1).')
slbCurCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPmask.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPmask.setDescription('The persistent mask - corresponding to the pmask command of the slb configuration menu.')
slbNewCfgPmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPmask.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPmask.setDescription('The persistent mask - corresponding to the pmask command of the slb configuration menu.')
slbCurCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgGrace.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgGrace.setDescription('Enable or disable graceful server failure. It allows to keep the connection to the failure real servers when set to enabled(1).')
slbNewCfgGrace = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgGrace.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgGrace.setDescription('Enable or disable graceful server failure. It allows to keep the connection to the failure real servers when set to enabled(1).')
slbCurCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtMatrixArch.setDescription('Enable or disable Virtual Matrix Architecture.')
slbNewCfgVirtMatrixArch = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtMatrixArch.setDescription('Enable or disable Virtual Matrix Architecture.')
slbCurCfgFastage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgFastage.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgFastage.setDescription('Session table fast-age (1 sec) period bit shift.')
slbNewCfgFastage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgFastage.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgFastage.setDescription('Session table fast-age (1 sec) period bit shift.')
slbCurCfgSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSlowage.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgSlowage.setDescription('Session table slow-age (2 min) period bit shift.')
slbNewCfgSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSlowage.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgSlowage.setDescription('Session table slow-age (2 min) period bit shift.')
slbCurCfgTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgTpcp.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgTpcp.setDescription('Enable or disable Transparent Proxy Cache Protocol.')
slbNewCfgTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgTpcp.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgTpcp.setDescription('Enable or disable Transparent Proxy Cache Protocol.')
slbCurCfgMetricInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgMetricInterval.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgMetricInterval.setDescription('The interval of response and bandwidth metric updates.')
slbNewCfgMetricInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgMetricInterval.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgMetricInterval.setDescription('The interval of response and bandwidth metric updates.')
slbCurCfgLdapVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2", 1), ("version3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgLdapVersion.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgLdapVersion.setDescription('The version number for LDAP.')
slbNewCfgLdapVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version2", 1), ("version3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgLdapVersion.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgLdapVersion.setDescription('The Version number of LDAP.')
slbCurCfgAllowHttpHc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgAllowHttpHc.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgAllowHttpHc.setDescription('Enable or disable allow HTTP health check on any port. If disabled the non-HTTP virtual services will use TCP Health Checks, if enabled the HTTP Content Health Check will be sent to any port except HTTPS (443) if properly configured.')
slbNewCfgAllowHttpHc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgAllowHttpHc.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgAllowHttpHc.setDescription('Enable or disable allow HTTP health check on any port. If disabled the non-HTTP virtual services will use TCP Health Checks, if enabled the HTTP Content Health Check will be sent to any port except HTTPS (443) if properly configured.')
slbCurCfgSubmac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSubmac.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSubmac.setDescription('Enable or disable Source MAC Address substitution. Enabling this feature supercedes individual real server setting for Source MAC Address substitution.')
slbNewCfgSubmac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSubmac.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSubmac.setDescription('Enable or disable Source MAC Address substitution. Enabling this feature supercedes individual real server setting for Source MAC Address substitution.')
slbCurCfgProxyGratArp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgProxyGratArp.setStatus('obsolete')
if mibBuilder.loadTexts: slbCurCfgProxyGratArp.setDescription('Enable or disable Proxy IP Gratuitous ARP.')
slbNewCfgProxyGratArp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgProxyGratArp.setStatus('obsolete')
if mibBuilder.loadTexts: slbNewCfgProxyGratArp.setDescription('Enable or disable Proxy IP Gratuitous ARP.')
slbCurCfgRtsVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRtsVlan.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRtsVlan.setDescription('Enable or disable use VLAN info for real server lookup')
slbNewCfgRtsVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRtsVlan.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRtsVlan.setDescription('Enable or disable use VLAN info for real server lookup')
slbCurCfgVirtualServiceStats = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVirtualServiceStats.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVirtualServiceStats.setDescription('Enable/disable Virtual Service Statistics.')
slbNewCfgVirtualServiceStats = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVirtualServiceStats.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVirtualServiceStats.setDescription('Enable/disable Virtual Service Statistics.')
slbCurCfgSlbSessAtkIntrval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSlbSessAtkIntrval.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSlbSessAtkIntrval.setDescription('Set SLB session attack inspection interval.')
slbNewCfgSlbSessAtkIntrval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSlbSessAtkIntrval.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSlbSessAtkIntrval.setDescription('Set SLB session attack inspection interval.')
slbCurCfgSlbSessAtkAllowlim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11999961))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSlbSessAtkAllowlim.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSlbSessAtkAllowlim.setDescription('Set SLB session attack alert allowable limit.')
slbNewCfgSlbSessAtkAllowlim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 11999961))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSlbSessAtkAllowlim.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSlbSessAtkAllowlim.setDescription('Set SLB session attack alert allowable limit.')
slbCurCfgNewSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgNewSlowage.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgNewSlowage.setDescription('Session table slow-age (2 min) period bit shift.')
slbNewCfgNewSlowage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgNewSlowage.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgNewSlowage.setDescription('Session table slow-age (2 min) period bit shift.')
slbCurCfgPortBind = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPortBind.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPortBind.setDescription('Enable/disable ingress port for session table Binding. SP uses ingress port for session lookup when set to enable.')
slbNewCfgPortBind = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPortBind.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPortBind.setDescription('Enable/disable ingress port for session table Binding. SP uses ingress port for session lookup when set to enable.')
slbCurCfgVmaSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVmaSrcPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVmaSrcPort.setDescription('Enable/disable VMA source port.')
slbNewCfgVmaSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVmaSrcPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVmaSrcPort.setDescription('Enable/disable VMA source port.')
slbCurCfgIpTcpCksum = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgIpTcpCksum.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgIpTcpCksum.setDescription('Enable/disable Layer 7 IP/TCP Checksum Validation.')
slbNewCfgIpTcpCksum = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgIpTcpCksum.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgIpTcpCksum.setDescription('Enable/disable Layer 7 IP/TCP Checksum Validation.')
slbCurCfgAuxRipHash = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgAuxRipHash.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgAuxRipHash.setDescription('Enable/disable Include RIP in AUX table hashing.')
slbNewCfgAuxRipHash = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgAuxRipHash.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgAuxRipHash.setDescription('Enable/disable Include RIP in AUX table hashing.')
slbCurCfgClearBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgClearBackup.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgClearBackup.setDescription('Enable/Disable clear backup in the current config.')
slbNewCfgClearBackup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgClearBackup.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgClearBackup.setDescription('Enable/Disable clear backup in the new config.')
slbCurCfgmStat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgmStat.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgmStat.setDescription('Measuring period for Acceleration, HTTP and SSL offloading statistics in the current config.')
slbNewCfgmStat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgmStat.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgmStat.setDescription('Measuring period for Acceleration, HTTP and SSL offloading statistics in the new config.')
slbCurCfgvStat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgvStat.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgvStat.setDescription('Enable/Disable Virtual Service Statistics in the current config.')
slbNewCfgvStat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgvStat.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgvStat.setDescription('Enable/Disable Virtual Service Statistics in the new config.')
slbCurCfgVmaDip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgVmaDip.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgVmaDip.setDescription('Enable/Disable VMA with destination IP in the current config.')
slbNewCfgVmaDip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgVmaDip.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgVmaDip.setDescription('Enable/Disable VMA with destination IP in the new config.')
slbCurCfgClsRst = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgClsRst.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgClsRst.setDescription('Enable/Disable Session clear on RST in the current config.')
slbNewCfgClsRst = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgClsRst.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgClsRst.setDescription('Enable/Disable Session clear on RST in the new config.')
slbCurCfgRtsIpLkp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgRtsIpLkp.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgRtsIpLkp.setDescription('Enable/Disable RTS-IP lookup in the current config.')
slbNewCfgRtsIpLkp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgRtsIpLkp.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgRtsIpLkp.setDescription('Enable/Disable RTS-IP lookup in the new config.')
slbCurCfgPprefix = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPprefix.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPprefix.setDescription('The ipv6 persistent prefix length - corresponding to the pmask command of the slb configuration menu.')
slbNewCfgPprefix = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgPprefix.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPprefix.setDescription('The ipv6 persistent prefix length - corresponding to the pmask command of the slb configuration menu.')
slbCurCfgSubdmac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSubdmac.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSubdmac.setDescription('Enable or disable DMAC substitution. Enabling this feature supercedes individual real server setting for DMAC substitution.')
slbNewCfgSubdmac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSubdmac.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSubdmac.setDescription('Enable or disable DMAC substitution. Enabling this feature supercedes individual real server setting for DMAC substitution.')
slbCurCfgpVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgpVlanTag.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgpVlanTag.setDescription('Enable or disable preserving vlan tag during packet forwarding')
slbNewCfgpVlanTag = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgpVlanTag.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgpVlanTag.setDescription('Enable or disable preserving vlan tag during packet forwarding')
slbCurCfgNmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 71), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgNmask.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgNmask.setDescription('The session mask in the current config block.')
slbNewCfgNmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 1, 72), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgNmask.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgNmask.setDescription('The session mask in the new config block.')
slbCurCfgWaphcWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWSPPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWSPPort.setDescription('The WSP port number to health check.')
slbNewCfgWaphcWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWSPPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWSPPort.setDescription('The WSP port number to health check.')
slbCurCfgWaphcOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcOffset.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcOffset.setDescription('The offset in received WSP packet.')
slbNewCfgWaphcOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcOffset.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcOffset.setDescription('The offset in received WSP packet.')
slbCurCfgWaphcSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcSndContent.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcSndContent.setDescription('The content to be sent to the WAP gateway.')
slbNewCfgWaphcSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcSndContent.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcSndContent.setDescription('The content to be sent to the WAP gateway.')
slbCurCfgWaphcRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcRcvContent.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcRcvContent.setDescription('The content to be received from the WAP gateway.')
slbNewCfgWaphcRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcRcvContent.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcRcvContent.setDescription('The content to be received from the WAP gateway.')
slbCurCfgWaphcWTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTLSPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWTLSPort.setDescription('The WTLS port number to health check.')
slbNewCfgWaphcWTLSPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTLSPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWTLSPort.setDescription('The WTLS port number to health check.')
slbCurCfgWaphcWTPSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTPSndContent.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWTPSndContent.setDescription('The WTP+WSP content to be sent to the WAP gateway.')
slbNewCfgWaphcWTPSndContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTPSndContent.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWTPSndContent.setDescription('The WTP+WSP content to be sent to the WAP gateway.')
slbCurCfgWaphcWTPRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTPRcvContent.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWTPRcvContent.setDescription('The WTP+WSP content to be received from the WAP gateway.')
slbNewCfgWaphcWTPRcvContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTPRcvContent.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWTPRcvContent.setDescription('The WTP+WSP content to be received from the WAP gateway.')
slbCurCfgWaphcWTPConnContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTPConnContent.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWTPConnContent.setDescription('The WTP+WSP CONNECT content to be sent to the WAP gateway.')
slbNewCfgWaphcWTPConnContent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTPConnContent.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWTPConnContent.setDescription('The WTP+WSP CONNECT content to be sent to the WAP gateway.')
slbCurCfgWaphcWTPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTPPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWTPPort.setDescription('The WTP port number to health check.')
slbNewCfgWaphcWTPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTPPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWTPPort.setDescription('The WTP port number to health check.')
slbCurCfgWaphcWTLSWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTLSWSPPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWTLSWSPPort.setDescription('The WTLS+WSP port number to health check.')
slbNewCfgWaphcWTLSWSPPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTLSWSPPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWTLSWSPPort.setDescription('The WTLS+WSP port number to health check.')
slbCurCfgWaphcWTPOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcWTPOffset.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcWTPOffset.setDescription('The offset in received WTP packet.')
slbNewCfgWaphcWTPOffset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcWTPOffset.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcWTPOffset.setDescription('The offset in received WTP packet.')
slbCurCfgWaphcCouple = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcCouple.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcCouple.setDescription('Enable or disable coupling of WAP and RADIUS Accounting health checks.')
slbNewCfgWaphcCouple = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcCouple.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcCouple.setDescription('Enable or disable coupling of WAP and RADIUS Accounting health checks.')
slbCurCfgWaphcConnPDU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcConnPDU.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcConnPDU.setDescription('The CONNECT PDU to be sent to the WAP gateway.')
slbNewCfgWaphcConnPDU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcConnPDU.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcConnPDU.setDescription('The CONNECT PDU to be sent to the WAP gateway.')
slbCurCfgWaphcSndPDU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcSndPDU.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcSndPDU.setDescription('The GET PDU to be sent to the WAP gateway.')
slbNewCfgWaphcSndPDU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcSndPDU.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcSndPDU.setDescription('The GET PDU to be sent to the WAP gateway.')
slbCurCfgWaphcRcvPDU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWaphcRcvPDU.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWaphcRcvPDU.setDescription('The REPLY PDU to be received from the WAP gateway.')
slbNewCfgWaphcRcvPDU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 8, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWaphcRcvPDU.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWaphcRcvPDU.setDescription('The REPLY PDU to be received from the WAP gateway.')
slbCurCfgWapTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWapTpcp.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWapTpcp.setDescription('Enable or disable WAP load balancing. ')
slbNewCfgWapTpcp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWapTpcp.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWapTpcp.setDescription('Enable or disable WAP load balancing. ')
slbCurCfgWapDebug = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWapDebug.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWapDebug.setDescription('WAP Debug level.')
slbNewCfgWapDebug = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgWapDebug.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWapDebug.setDescription('WAP Debug level.')
slbPeerTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPeerTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbPeerTableMaxSize.setDescription('The maximum number of entries in SLB Peer Table.')
slbCurCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 3), )
if mibBuilder.loadTexts: slbCurCfgPeerTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerTable.setDescription('The table of Synch Peer Switch configuration in the current_config.')
slbCurCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgPeerIndex"))
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerEntry.setDescription('Information about Synch Peer Switch configuration.')
slbCurCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerIndex.setDescription('The index for synch peer switchs.')
slbCurCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerIpAddr.setDescription('The IP address of the peer switch.')
slbCurCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerState.setDescription('Enable or disable the peer switch.')
slbCurCfgPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerIpv6Addr.setDescription('The IPv6 address of the Peer switch. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbCurCfgPeerIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("ipv4", 4), ("ipv6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerIpVersion.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerIpVersion.setDescription('Peer Ip Address Version.')
slbNewCfgPeerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4), )
if mibBuilder.loadTexts: slbNewCfgPeerTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerTable.setDescription('The table of Synch Peer Switch configuration in the new_config.')
slbNewCfgPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgPeerIndex"))
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerEntry.setDescription('Information about synch peer switch configuration.')
slbNewCfgPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerIndex.setDescription('The index number for synch peer switchs.')
slbNewCfgPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerIpAddr.setDescription('The IP address of the peer switch.')
slbNewCfgPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgPeerState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerState.setDescription('Enable or disable the peer switch.')
slbNewCfgPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgPeerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerIpv6Addr.setDescription('The IPv6 address of the Peer switch. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbNewCfgPeerIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("ipv4", 4), ("ipv6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPeerIpVersion.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerIpVersion.setDescription('Peer Ip Address Version.')
slbCurCfgPeerPIPTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 1), )
if mibBuilder.loadTexts: slbCurCfgPeerPIPTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerPIPTable.setDescription('The table of Peer PIP configuration in the current_config.')
slbCurCfgPeerPIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgPeerPIPIndex"))
if mibBuilder.loadTexts: slbCurCfgPeerPIPEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerPIPEntry.setDescription('Information about Peer PIP configuration.')
slbCurCfgPeerPIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerPIPIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerPIPIndex.setDescription('The index for peer PIP.')
slbCurCfgPeerPIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerPIPAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerPIPAddr.setDescription('The IP address of the peer PIP.')
slbCurCfgPeerPIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgPeerPIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgPeerPIPv6Addr.setDescription('The IPv6 address of the Peer PIP. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbNewCfgPeerPIPTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 2), )
if mibBuilder.loadTexts: slbNewCfgPeerPIPTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerPIPTable.setDescription('The table of Peer PIP configuration in the new_config.')
slbNewCfgPeerPIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgPeerPIPIndex"))
if mibBuilder.loadTexts: slbNewCfgPeerPIPEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerPIPEntry.setDescription('Information about Peer PIP configuration.')
slbNewCfgPeerPIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgPeerPIPIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerPIPIndex.setDescription('The index for peer PIP.')
slbNewCfgPeerPIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgPeerPIPAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerPIPAddr.setDescription('The IP address of the peer PIP.')
slbNewCfgPeerPIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgPeerPIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerPIPv6Addr.setDescription('The IPv6 address of the Peer PIP. Address should be 16-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbNewCfgPeerPIPDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgPeerPIPDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgPeerPIPDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbCurCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncFilt.setDescription('Enable or disable synch filter configuration.')
slbNewCfgSyncFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncFilt.setDescription('Enable or disable synch filter configuration.')
slbCurCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncPort.setDescription('Enable or disable synch port configuration.')
slbNewCfgSyncPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncPort.setDescription('Enable or disable synch port configuration.')
slbCurCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncVrrp.setDescription('Enable or disable synch VRRP Priorities.')
slbNewCfgSyncVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncVrrp.setDescription('Enable or disable synch VRRP Priorities.')
slbCurCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPip.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncPip.setDescription('Enable or disable synch proxy IP addresses.')
slbNewCfgSyncPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPip.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncPip.setDescription('Enable or disable synch proxy IP addresses.')
slbCurCfgSyncSfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncSfo.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncSfo.setDescription('Enable or disable synch stateful failover.')
slbNewCfgSyncSfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncSfo.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncSfo.setDescription('Enable or disable synch stateful failover.')
slbCurCfgSyncSfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncSfoUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncSfoUpdatePeriod.setDescription('The stateful failover update period in seconds.')
slbNewCfgSyncSfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncSfoUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncSfoUpdatePeriod.setDescription('The stateful failover update period in seconds.')
slbCurCfgSyncBwm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncBwm.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncBwm.setDescription('Enable or disable syncing BWM configuration.')
slbNewCfgSyncBwm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncBwm.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncBwm.setDescription('Enable or disable syncing BWM configuration.')
slbCurCfgSyncPeerPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncPeerPip.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncPeerPip.setDescription('Enable or disable synch peer proxy IP addresses.')
slbNewCfgSyncPeerPip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncPeerPip.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncPeerPip.setDescription('Enable or disable synch peer proxy IP addresses.')
slbCurCfgSyncCerts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncCerts.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncCerts.setDescription('Enable or disable syncing certificate repository components.')
slbNewCfgSyncCerts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncCerts.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncCerts.setDescription('Enable or disable syncing certificate repository components. If Enable option is selected then Passphrase to encrypt/decrypt certificates and private keys during configuration sync must be set in all peer switches.')
slbCurCfgSyncCertsPassPhrase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncCertsPassPhrase.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncCertsPassPhrase.setDescription("Set passphrase to encrypt/decrypt synced certificates' and dnssec private keys.")
slbNewCfgSyncCertsPassPhrase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncCertsPassPhrase.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncCertsPassPhrase.setDescription("Set passphrase to encrypt/decrypt synced certificates' and dnssec private keys.Same PassPhrase should be set at all peer switches.")
slbNewCfgSyncCertsConfPassPhrase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncCertsConfPassPhrase.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncCertsConfPassPhrase.setDescription('This character string is used to confirm Passphrase which is already entered in slbNewCfgSyncCertsPassPhrase.')
slbCurCfgSyncRoute = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSyncRoute.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSyncRoute.setDescription('Enable or disable synch static route configuration.')
slbNewCfgSyncRoute = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgSyncRoute.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSyncRoute.setDescription('Enable or disable synch static route configuration.')
synAttackCurCfgInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgInterval.setStatus('current')
if mibBuilder.loadTexts: synAttackCurCfgInterval.setDescription('The interval specified in seconds determines how frequently the switch checks for SYN attacks.')
synAttackNewCfgInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgInterval.setStatus('current')
if mibBuilder.loadTexts: synAttackNewCfgInterval.setDescription('The interval specified in seconds determines how frequently the switch checks for SYN attacks.')
synAttackCurCfgThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgThreshhold.setStatus('current')
if mibBuilder.loadTexts: synAttackCurCfgThreshhold.setDescription('The threshhold indicating the number of new half-open sessions per second.')
synAttackNewCfgThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgThreshhold.setStatus('current')
if mibBuilder.loadTexts: synAttackNewCfgThreshhold.setDescription('The threshhold indicating the number of new half-open sessions per second.')
synAttackCurCfgResponseInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgResponseInterval.setStatus('current')
if mibBuilder.loadTexts: synAttackCurCfgResponseInterval.setDescription('The interval specified in milliseconds determines how frequently the switch generate new SYN cookie value.')
synAttackNewCfgResponseInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgResponseInterval.setStatus('current')
if mibBuilder.loadTexts: synAttackNewCfgResponseInterval.setDescription('The interval specified in milliseconds determines how frequently the switch generate new SYN cookie value.')
synAttackCurCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAttackCurCfgOnOff.setStatus('current')
if mibBuilder.loadTexts: synAttackCurCfgOnOff.setDescription('Globally ON or OFF of SYN Protection.')
synAttackNewCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synAttackNewCfgOnOff.setStatus('current')
if mibBuilder.loadTexts: synAttackNewCfgOnOff.setDescription('Globally ON or OFF of SYN Protection.')
fltCfgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCfgTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: fltCfgTableMaxSize.setDescription('The maximum number of filtering table entries.')
fltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2), )
if mibBuilder.loadTexts: fltCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgTable.setDescription('The filtering table in the current configuration block.')
fltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltCurCfgIndx"))
if mibBuilder.loadTexts: fltCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgTableEntry.setDescription('A row in the filtering table.')
fltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIndx.setDescription('The filtering table index.')
fltCurCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIp.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgSrcIp.setDescription('The source IP address to be filtered.')
fltCurCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgSrcIpMask.setDescription('The source IP sub-net mask for filtering.')
fltCurCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIp.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgDstIp.setDescription('The destination IP address to be filtered.')
fltCurCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgDstIpMask.setDescription('The destination IP sub-net mask for filtering.')
fltCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgProtocol.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgProtocol.setDescription('The protocol to be filtered.')
fltCurCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRangeHighSrcPort.setDescription("The higher source TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRangeLowSrcPort.setDescription("The lower source TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRangeLowDstPort.setDescription("The lower destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRangeHighDstPort.setDescription("The higher destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltCurCfgProtocol is UDP or TCP. '0' means no filtering.")
fltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4), ("goto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAction.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAction.setDescription('The action for the filtering rule.')
fltCurCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirPort.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRedirPort.setDescription('The real server port number used for redirection.')
fltCurCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRedirGroup.setDescription('The real server group to be redirected to.')
fltCurCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLog.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgLog.setDescription('Enable or disable logging.')
fltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgState.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgState.setDescription('The state of this filtering rule.')
fltCurCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2), ("multicast-address", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNat.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgNat.setDescription('The selection of destination or source or multicast for network address translation.')
fltCurCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgCache.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgCache.setDescription('Enable or disable caching sessions that match filter.')
fltCurCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgInvert.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgInvert.setDescription('Turn the invert logic on or off for the filter entry.')
fltCurCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgClientProxy.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgClientProxy.setDescription('Enable or disable client proxy.')
fltCurCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpAck.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgTcpAck.setDescription('Enable or disable filtering on matching TCP ACK and RST flag.')
fltCurCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 22), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcMac.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgSrcMac.setDescription('The source MAC address to be filtered.')
fltCurCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 23), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstMac.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgDstMac.setDescription('The Destination MAC address to be filtered.')
fltCurCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgFtpNatActive.setDescription('Enable or disable FTP NAT for active ftp only.')
fltCurCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclTcpUrg.setDescription('Enable or disable TCP URG packet.')
fltCurCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclTcpAck.setDescription('Enable or disable TCP ACK packet.')
fltCurCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclTcpPsh.setDescription('Enable or disable TCP PSH packet.')
fltCurCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclTcpRst.setDescription('Enable or disable TCP RST packet.')
fltCurCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclTcpSyn.setDescription('Enable or disable TCP SYN packet.')
fltCurCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclTcpFin.setDescription('Enable or disable TCP FIN packet.')
fltCurCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclIcmp.setDescription("ICMP type to be filtered. A ICMP type of 255 indicates 'any'")
fltCurCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclIpOption.setDescription('Enable or disable IP option matching.')
fltCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgBwmContract.setDescription('Filt default BW contract number.')
fltCurCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclIpTos.setDescription('The IP TOS value to be filtered.')
fltCurCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclIpTosMask.setDescription('The IP TOS mask for filtering.')
fltCurCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclIpTosNew.setDescription('The new IP TOS value to over-write when filtering fired.')
fltCurCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgFwlb.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgFwlb.setDescription('Enable or disable filtering on firewall redirect hash method.')
fltCurCfgNatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNatTimeout.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgNatTimeout.setDescription('The NAT session timeout. The timeout value should be an even number between 4 and 32768.')
fltCurCfgLinklb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLinklb.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgLinklb.setDescription('Enable or disable WAN link load balancing.')
fltCurCfgWapRadiusSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgWapRadiusSnoop.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgWapRadiusSnoop.setDescription('Enable or disable WAP RADIUS snooping.')
fltCurCfgSrcIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSrcIpMac.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgSrcIpMac.setDescription('Set a flag indicating whether filtering should be based on the source IP address or the source MAC address field.')
fltCurCfgDstIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDstIpMac.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgDstIpMac.setDescription('Set a flag indicating whether filtering should be based on the destination IP address or the destination MAC address field.')
fltCurCfgIdslbHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIdslbHash.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIdslbHash.setDescription('Set hash parameter for intrusion detection server load balancing.')
fltCurCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgVlan.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgVlan.setDescription('Set the VLAN assoicated with the filter.')
fltCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgName.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgName.setDescription('The name of the filter.')
fltCurCfgTcpRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpRateLimit.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgTcpRateLimit.setDescription('Enable or disable protocol rate limiting.')
fltCurCfgTcpRateMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTcpRateMaxConn.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgTcpRateMaxConn.setDescription('Set maximum connections (number of connections in units of 10) for TCP connection rate limiting. In the case of ICMP and UDP, this is the maximum packets (number of packets in units of 10).')
fltCurCfgHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("sip", 2), ("dip", 3), ("both", 4), ("sipsport", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHash.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHash.setDescription('Set hash parameter for the filter.')
fltCurCfgLayer7DenyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7DenyState.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgLayer7DenyState.setDescription('Enable or disable layer 7 deny filtering.')
fltCurCfgLayer7DenyUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 51), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7DenyUrlBmap.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgLayer7DenyUrlBmap.setDescription('The URL strings selected for Layer 7 deny filters. The selected URL strings are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL string is selected 0 - The represented URL string is not selected')
fltCurCfgGotoFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgGotoFilter.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgGotoFilter.setDescription('The filter ID for GOTO action in the current config.')
fltCurCfgRadiusWapPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRadiusWapPersist.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRadiusWapPersist.setDescription('Enable or disable Radius/WAP persistence.')
fltCurCfgPbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPbind.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPbind.setDescription('Enable or disable filter persistent binding.')
fltCurCfgTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgTimeWindow.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgTimeWindow.setDescription('The time window for protocol rate limiting (in seconds).')
fltCurCfgHoldDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHoldDuration.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHoldDuration.setDescription('The hold down duration for protocol rate limiting (in minutes).')
fltCurCfgPatternMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPatternMatch.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPatternMatch.setDescription('Enable or disable binary pattern matching.')
fltCurCfgLayer7DenyMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7DenyMatchAll.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgLayer7DenyMatchAll.setDescription('Enable or disable match-all criteria for L7 deny string matching.')
fltCurCfgProxyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 59), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgProxyIp.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgProxyIp.setDescription('The client proxy IP address for NAT and REDIR filter.')
fltCurCfgLayer7ParseAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgLayer7ParseAll.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgLayer7ParseAll.setDescription('Enable or disable layer 7 lookup (parsing) of all packets.')
fltCurCfgSecurityParseAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSecurityParseAll.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgSecurityParseAll.setDescription('Enable or disable pattern string lookup (parsing) of all packets.')
fltCurCfgPatternMatchGroupBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 62), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPatternMatchGroupBmap.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPatternMatchGroupBmap.setDescription('The pattern match group. The pattern match groups are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ pattern match group || || || ||___ pattern match group 8 || |____ pattern match group 7 || . . . ||_________ pattern match group 2 |__________ pattern match group 1 where x : 1 - The represented pattern match group is selected 0 - The represented pattern match group is not selected')
fltCurCfg8021pBitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfg8021pBitsValue.setStatus('current')
if mibBuilder.loadTexts: fltCurCfg8021pBitsValue.setDescription('The 802.1p bits value to match.')
fltCurCfg8021pBitsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfg8021pBitsMatch.setStatus('current')
if mibBuilder.loadTexts: fltCurCfg8021pBitsMatch.setDescription('Enable or disable matching on 802.1p bits in the packets.')
fltCurCfgAclIpLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgAclIpLength.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgAclIpLength.setDescription("Set the IP maximum packet length in bytes. A value can be either 0 which indicates 'any' length or between 64 and 65535.")
fltCurCfgIdsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIdsGroup.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIdsGroup.setDescription("The real server group for IDS load balancing. A value of 0 indicates 'none'.")
fltCurCfgEgressPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgEgressPip.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgEgressPip.setDescription('Enable or disable pip selection based on egress port/vlan.')
fltCurCfgDbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgDbind.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgDbind.setDescription('Enable or disable filter delayed binding.')
fltCurCfgRevBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRevBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRevBwmContract.setDescription('Filt reverse session BWM contract number.')
fltCurCfgReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgReverse.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgReverse.setDescription('Enable or disable creating session for reverse side traffic.')
fltCurCfgParseChn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgParseChn.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgParseChn.setDescription('Enable or disable chained pgroup match criteria for l7 filtering.')
fltCurCfgRtpBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgRtpBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgRtpBwmContract.setDescription('BWM contract for SIP RTP traffic.')
fltCurCfgSipParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSipParsing.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgSipParsing.setDescription('Enable or disable SIP NAT.')
fltCurCfgSessionMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgSessionMirror.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgSessionMirror.setDescription('Enable or disable session mirroring.')
fltCurCfgIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIpVer.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIpVer.setDescription('The type of IP address.')
fltCurCfgIpv6Sip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIpv6Sip.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIpv6Sip.setDescription('The source IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltCurCfgIpv6Sprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIpv6Sprefix.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIpv6Sprefix.setDescription('The prefix length associated with source IP address .')
fltCurCfgIpv6Dip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIpv6Dip.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIpv6Dip.setDescription('The destination IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltCurCfgIpv6Dprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIpv6Dprefix.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIpv6Dprefix.setDescription('The prefix length associated with destination IP address .')
fltCurCfgHdrHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("headerhash", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHdrHash.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHdrHash.setDescription('The header hash filter.')
fltCurCfgHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHdrName.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHdrName.setDescription('The header name of the filter.')
fltCurCfgHdrHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHdrHashLen.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHdrHashLen.setDescription('The header hash length of the filter.')
fltCurCfgL3Filter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgL3Filter.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgL3Filter.setDescription('The L3 filter processing state for this filter.')
fltCurCfgNatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 84), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNatIp.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgNatIp.setDescription('The nat IP address to be filtered.')
fltCurCfgIpv6Nip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIpv6Nip.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIpv6Nip.setDescription('The nat IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltCurCfgIpv6Proxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgIpv6Proxy.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgIpv6Proxy.setDescription('The proxy IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltCurCfgL7SipFilt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgL7SipFilt.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgL7SipFilt.setDescription('Enable/Disable L7 application SIP UDP filtering.')
fltCurCfgNatMcastVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNatMcastVlan.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgNatMcastVlan.setDescription('Multicast VLAN.')
fltCurCfgNbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgNbind.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgNbind.setDescription('Enable or disable subnet binding for redirection.')
fltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3), )
if mibBuilder.loadTexts: fltNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgTable.setDescription('The filtering table in the new configuration block.')
fltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltNewCfgIndx"))
if mibBuilder.loadTexts: fltNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgTableEntry.setDescription('A row in the filtering table.')
fltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIndx.setDescription('The filtering table index.')
fltNewCfgSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgSrcIp.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgSrcIp.setDescription('The source IP address to be filtered.')
fltNewCfgSrcIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgSrcIpMask.setDescription('The source IP sub-net mask for filtering.')
fltNewCfgDstIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgDstIp.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgDstIp.setDescription('The destination IP address to be filtered.')
fltNewCfgDstIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgDstIpMask.setDescription('The destination IP sub-net mask for filtering.')
fltNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgProtocol.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgProtocol.setDescription('The protocol to be filtered.')
fltNewCfgRangeHighSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRangeHighSrcPort.setDescription("The higher source TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeLowSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRangeLowSrcPort.setDescription("The lower source TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeLowDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRangeLowDstPort.setDescription("The lower destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgRangeHighDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRangeHighDstPort.setDescription("The higher destination TCP/UDP port number to be filtered. It applies only when protocol defined in fltNewCfgProtocol is UDP or TCP. '0' means no filtering.")
fltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2), ("redirect", 3), ("nat", 4), ("goto", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAction.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAction.setDescription('The action for the filtering rule.')
fltNewCfgRedirPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRedirPort.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRedirPort.setDescription('The real server port number used for redirection.')
fltNewCfgRedirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRedirGroup.setDescription('The real server group to be redirected to.')
fltNewCfgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgLog.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLog.setDescription('Enable or disable logging.')
fltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgState.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgState.setDescription('The state of this filtering rule.')
fltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
fltNewCfgNat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("destination-address", 1), ("source-address", 2), ("multicast-address", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgNat.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgNat.setDescription('The selection of destination or source or multicast for network address translation.')
fltNewCfgCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgCache.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgCache.setDescription('Enable or disable caching sessions that match filter.')
fltNewCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgInvert.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgInvert.setDescription('Turn the invert logic on or off for the filter entry.')
fltNewCfgClientProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgClientProxy.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgClientProxy.setDescription('Enable or disable client proxy.')
fltNewCfgTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgTcpAck.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgTcpAck.setDescription('Enable or disable filtering on matching TCP ACK and RST flag.')
fltNewCfgSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 23), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgSrcMac.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgSrcMac.setDescription('The source MAC address to be filtered.')
fltNewCfgDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 24), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgDstMac.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgDstMac.setDescription('The Destination MAC address to be filtered.')
fltNewCfgFtpNatActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgFtpNatActive.setDescription('Enable or disable FTP NAT for active ftp.')
fltNewCfgAclTcpUrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclTcpUrg.setDescription('Enable or disable TCP URG packet.')
fltNewCfgAclTcpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclTcpAck.setDescription('Enable or disable TCP ACK packet.')
fltNewCfgAclTcpPsh = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclTcpPsh.setDescription('Enable or disable TCP PSH packet.')
fltNewCfgAclTcpRst = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclTcpRst.setDescription('Enable or disable TCP RST packet.')
fltNewCfgAclTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclTcpSyn.setDescription('Enable or disable TCP SYN packet.')
fltNewCfgAclTcpFin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclTcpFin.setDescription('Enable or disable TCP FIN packet.')
fltNewCfgAclIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclIcmp.setDescription("ICMP type to be filtered. A ICMP type of 255 indicates 'any'")
fltNewCfgAclIpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclIpOption.setDescription('Enable or disable IP option matching.')
fltNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 34), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgBwmContract.setDescription('Filt default BW contract number.')
fltNewCfgAclIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclIpTos.setDescription('The IP TOS value to be filtered.')
fltNewCfgAclIpTosMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclIpTosMask.setDescription('The IP TOS mask for filtering.')
fltNewCfgAclIpTosNew = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclIpTosNew.setDescription('The new IP TOS value to over-write when filtering fired.')
fltNewCfgFwlb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgFwlb.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgFwlb.setDescription('Enable or disable filtering on firewall redirect hash method.')
fltNewCfgNatTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 32768))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgNatTimeout.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgNatTimeout.setDescription('The NAT session timeout. The timeout value should be an even number between 4 and 32768.')
fltNewCfgLinklb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgLinklb.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLinklb.setDescription('Enable or disable WAN link load balancing.')
fltNewCfgWapRadiusSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgWapRadiusSnoop.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgWapRadiusSnoop.setDescription('Enable or disable WAP RADIUS snooping.')
fltNewCfgSrcIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgSrcIpMac.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgSrcIpMac.setDescription('Set a flag indicating whether filtering should be based on the source IP address or the source MAC address field.')
fltNewCfgDstIpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mac", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgDstIpMac.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgDstIpMac.setDescription('Set a flag indicating whether filtering should be based on the destination IP address or the destination MAC address field.')
fltNewCfgIdslbHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sip", 1), ("dip", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgIdslbHash.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIdslbHash.setDescription('Set hash parameter for intrusion detection server load balancing.')
fltNewCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgVlan.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgVlan.setDescription('Set the VLAN assoicated with the filter.')
fltNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgName.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgName.setDescription('The name of the filter.')
fltNewCfgTcpRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgTcpRateLimit.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgTcpRateLimit.setDescription('Enable or disable protocol rate limiting.')
fltNewCfgTcpRateMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgTcpRateMaxConn.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgTcpRateMaxConn.setDescription('Set maximum connections (number of connections in units of 10) for TCP connection rate limiting. In the case of ICMP and UDP, this is the maximum packets (number of packets in units of 10).')
fltNewCfgHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("sip", 2), ("dip", 3), ("both", 4), ("sipsport", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgHash.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHash.setDescription('Set hash parameter for the filter.')
fltNewCfgLayer7DenyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyState.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyState.setDescription('Enable or disable layer 7 deny filtering.')
fltNewCfgLayer7DenyUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 52), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyUrlBmap.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyUrlBmap.setDescription('The URL strings selected for Layer 7 deny filters. The selected URL strings are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL string is selected 0 - The represented URL string is not selected')
fltNewCfgLayer7DenyAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 53), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyAddUrl.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyAddUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be added to the Layer 7 deny filter. A zero is returned when read.')
fltNewCfgLayer7DenyRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 54), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyRemUrl.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyRemUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be removed from the Layer 7 deny filter. A zero is returned when read.')
fltNewCfgGotoFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 55), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgGotoFilter.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgGotoFilter.setDescription('The filter ID for GOTO action in the new config.')
fltNewCfgRadiusWapPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRadiusWapPersist.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRadiusWapPersist.setDescription('Enable or disable Radius/WAP persistence.')
fltNewCfgPbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgPbind.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPbind.setDescription('Enable or disable filter persistent binding.')
fltNewCfgTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgTimeWindow.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgTimeWindow.setDescription('The time window for protocol rate limiting (in seconds).')
fltNewCfgHoldDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgHoldDuration.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHoldDuration.setDescription('The hold down duration for protocol rate limiting (in minutes).')
fltNewCfgPatternMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgPatternMatch.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPatternMatch.setDescription('Enable or disable binary pattern matching.')
fltNewCfgLayer7DenyMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgLayer7DenyMatchAll.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLayer7DenyMatchAll.setDescription('Enable or disable match-all criteria for L7 deny string matching.')
fltNewCfgProxyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 62), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgProxyIp.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgProxyIp.setDescription('The client proxy IP address for NAT and REDIR filter.')
fltNewCfgLayer7ParseAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgLayer7ParseAll.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgLayer7ParseAll.setDescription('Enable or disable layer 7 lookup (parsing) of all packets.')
fltNewCfgSecurityParseAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgSecurityParseAll.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgSecurityParseAll.setDescription('Enable or disable pattern string lookup (parsing) of all packets.')
fltNewCfgPatternMatchGroupBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 65), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPatternMatchGroupBmap.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPatternMatchGroupBmap.setDescription('The pattern match group. The pattern match groups are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ pattern match group || || || ||___ pattern match group 8 || |____ pattern match group 7 || . . . ||_________ pattern match group 2 |__________ pattern match group 1 where x : 1 - The represented pattern match group is selected 0 - The represented pattern match group is not selected')
fltNewCfgAddPatternMatchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 66), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAddPatternMatchGroup.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAddPatternMatchGroup.setDescription('The pattern match group to be added to the security filter. A zero is returned when read.')
fltNewCfgRemPatternMatchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 67), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRemPatternMatchGroup.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRemPatternMatchGroup.setDescription('The pattern match group to be to be removed from the security filter. A zero is returned when read.')
fltNewCfg8021pBitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfg8021pBitsValue.setStatus('current')
if mibBuilder.loadTexts: fltNewCfg8021pBitsValue.setDescription('The 802.1p bits value to match.')
fltNewCfg8021pBitsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfg8021pBitsMatch.setStatus('current')
if mibBuilder.loadTexts: fltNewCfg8021pBitsMatch.setDescription('Enable or disable matching on 802.1p bits in the packets.')
fltNewCfgAclIpLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgAclIpLength.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgAclIpLength.setDescription("Set the IP maximum packet length in bytes. A value can be either 0 which indicates 'any' length or between 64 and 65535.")
fltNewCfgIdsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 71), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgIdsGroup.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIdsGroup.setDescription("The real server group for IDS load balancing. A value of 0 indicates 'none'.")
fltNewCfgEgressPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgEgressPip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgEgressPip.setDescription('Enable or disable pip selection based on egress port/vlan.')
fltNewCfgDbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgDbind.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgDbind.setDescription('Enable or disable filter delayed binding.')
fltNewCfgRevBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 74), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRevBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRevBwmContract.setDescription('Filt reverse session BWM contract number.')
fltNewCfgReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgReverse.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgReverse.setDescription('Enable or disable creating session for reverse side traffic.')
fltNewCfgParseChn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgParseChn.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgParseChn.setDescription('Enable or disable chained pgroup match criteria for l7 filtering.')
fltNewCfgRtpBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 77), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgRtpBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgRtpBwmContract.setDescription('BWM contract for SIP RTP traffic.')
fltNewCfgSipParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgSipParsing.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgSipParsing.setDescription('Enable or disable SIP NAT.')
fltNewCfgSessionMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgSessionMirror.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgSessionMirror.setDescription('Enable or disable session mirroring.')
fltNewCfgIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgIpVer.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIpVer.setDescription('The type of IP address.')
fltNewCfgIpv6Sip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgIpv6Sip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIpv6Sip.setDescription('The source IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgIpv6Sprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgIpv6Sprefix.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIpv6Sprefix.setDescription('The prefix length associated with source IP address .')
fltNewCfgIpv6Dip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgIpv6Dip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIpv6Dip.setDescription('The destination IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgIpv6Dprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgIpv6Dprefix.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIpv6Dprefix.setDescription('The prefix length associated with destination IP address .')
fltNewCfgHdrHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("headerhash", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgHdrHash.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHdrHash.setDescription('The header hash filter.')
fltNewCfgHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgHdrName.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHdrName.setDescription('The header name of the filter. Headerhash should be enabled before header name is configured.')
fltNewCfgHdrHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgHdrHashLen.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHdrHashLen.setDescription('The header hash length of the filter. Headerhash should be enabled before hash length is configured.')
fltNewCfgL3Filter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgL3Filter.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgL3Filter.setDescription('The L3 filter processing state for this filter.')
fltNewCfgNatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 89), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNatIp.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgNatIp.setDescription('The nat IP address to be filtered.')
fltNewCfgIpv6Nip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgIpv6Nip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIpv6Nip.setDescription('The nat IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgIpv6Proxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgIpv6Proxy.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgIpv6Proxy.setDescription('The proxy IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgL7SipFilt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgL7SipFilt.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgL7SipFilt.setDescription('Enable/Disable L7 application SIP UDP filtering.')
fltNewCfgNatMcastVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 93), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgNatMcastVlan.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgNatMcastVlan.setDescription('Multicast VLAN.')
fltNewCfgNbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 3, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgNbind.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgNbind.setDescription('Enable or disable subnet binding for redirection.')
fltNewCfgExtendedTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12), )
if mibBuilder.loadTexts: fltNewCfgExtendedTable.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedTable.setDescription('The filtering table in the new configuration block.')
fltNewCfgExtendedTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltNewCfgExtendedIndx"))
if mibBuilder.loadTexts: fltNewCfgExtendedTableEntry.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedTableEntry.setDescription('A row in the filtering table.')
fltNewCfgExtendedIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgExtendedIndx.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIndx.setDescription('The filtering table index.')
fltNewCfgExtendedLayer7DenyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyState.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyState.setDescription('Enable or disable layer 7 deny filtering.')
fltNewCfgExtendedLayer7DenyUrlBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyUrlBmap.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyUrlBmap.setDescription('The URL strings selected for Layer 7 deny filters. The selected URL strings are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ URL Path 9 || || || ||___ URL Path 8 || |____ URL Path 7 || . . . ||_________ URL Path 2 |__________ URL Path 1 where x : 1 - The represented URL string is selected 0 - The represented URL string is not selected')
fltNewCfgExtendedLayer7DenyAddUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyAddUrl.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyAddUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be added to the Layer 7 deny filter. A zero is returned when read.')
fltNewCfgExtendedLayer7DenyRemUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyRemUrl.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyRemUrl.setDescription('The URL Path (slbCurCfgUrlLbPathIndex) to be removed from the Layer 7 deny filter. A zero is returned when read.')
fltNewCfgExtendedGotoFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedGotoFilter.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedGotoFilter.setDescription('The filter ID for GOTO action in the new config.')
fltNewCfgExtendedRadiusWapPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedRadiusWapPersist.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedRadiusWapPersist.setDescription('Enable or disable Radius/WAP persistence.')
fltNewCfgExtendedPbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedPbind.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedPbind.setDescription('Enable or disable filter persistent binding.')
fltNewCfgExtendedTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedTimeWindow.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedTimeWindow.setDescription('The time window for protocol rate limiting (in seconds).')
fltNewCfgExtendedHoldDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedHoldDuration.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedHoldDuration.setDescription('The hold down duration for protocol rate limiting (in minutes).')
fltNewCfgExtendedPatternMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedPatternMatch.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedPatternMatch.setDescription('Enable or disable binary pattern matching.')
fltNewCfgExtendedLayer7DenyMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyMatchAll.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7DenyMatchAll.setDescription('Enable or disable match-all criteria for L7 deny string matching.')
fltNewCfgExtendedProxyIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedProxyIp.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedProxyIp.setDescription('The client proxy IP address for NAT and REDIR filter.')
fltNewCfgExtendedLayer7ParseAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7ParseAll.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedLayer7ParseAll.setDescription('Enable or disable layer 7 lookup (parsing) of all packets.')
fltNewCfgExtendedSecurityParseAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedSecurityParseAll.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedSecurityParseAll.setDescription('Enable or disable pattern string lookup (parsing) of all packets.')
fltNewCfgExtendedPatternMatchGroupBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgExtendedPatternMatchGroupBmap.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedPatternMatchGroupBmap.setDescription('The pattern match group. The pattern match groups are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ pattern match group || || || ||___ pattern match group 8 || |____ pattern match group 7 || . . . ||_________ pattern match group 2 |__________ pattern match group 1 where x : 1 - The represented pattern match group is selected 0 - The represented pattern match group is not selected')
fltNewCfgExtendedAddPatternMatchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedAddPatternMatchGroup.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedAddPatternMatchGroup.setDescription('The pattern match group to be added to the security filter. A zero is returned when read.')
fltNewCfgExtendedRemPatternMatchGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedRemPatternMatchGroup.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedRemPatternMatchGroup.setDescription('The pattern match group to be to be removed from the security filter. A zero is returned when read.')
fltNewCfgExtended8021pBitsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtended8021pBitsValue.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtended8021pBitsValue.setDescription('The 802.1p bits value to match.')
fltNewCfgExtended8021pBitsMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtended8021pBitsMatch.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtended8021pBitsMatch.setDescription('Enable or disable matching on 802.1p bits in the packets.')
fltNewCfgExtendedAclIpLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedAclIpLength.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedAclIpLength.setDescription("Set the IP maximum packet length in bytes. A value can be either 0 which indicates 'any' length or between 64 and 65535.")
fltNewCfgExtendedIdsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedIdsGroup.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIdsGroup.setDescription("The real server group for IDS load balancing. A value of 0 indicates 'none'.")
fltNewCfgExtendedEgressPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedEgressPip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedEgressPip.setDescription('Enable or disable pip selection based on egress port/vlan.')
fltNewCfgExtendedDbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedDbind.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedDbind.setDescription('Enable or disable filter delayed binding.')
fltNewCfgExtendedRevBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 26), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedRevBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedRevBwmContract.setDescription('Filt reverse session BWM contract number.')
fltNewCfgExtendedReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedReverse.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedReverse.setDescription('Enable or disable creating session for reverse side traffic.')
fltNewCfgExtendedParseChn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedParseChn.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedParseChn.setDescription('Enable or disable chained pgroup match criteria for l7 filtering.')
fltNewCfgExtendedRtpBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 29), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedRtpBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedRtpBwmContract.setDescription('BWM contract for SIP RTP traffic.')
fltNewCfgExtendedSipParsing = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedSipParsing.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedSipParsing.setDescription('Enable or disable SIP NAT.')
fltNewCfgExtendedSessionMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedSessionMirror.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedSessionMirror.setDescription('Enable or disable session mirroring.')
fltNewCfgExtendedIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedIpVer.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIpVer.setDescription('The type of IP address.')
fltNewCfgExtendedIpv6Sip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Sip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Sip.setDescription('The source IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgExtendedIpv6Sprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Sprefix.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Sprefix.setDescription('The prefix length associated with source IP address .')
fltNewCfgExtendedIpv6Dip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Dip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Dip.setDescription('The destination IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgExtendedIpv6Dprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Dprefix.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Dprefix.setDescription('The prefix length associated with destination IP address .')
fltNewCfgExtendedHdrHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("headerhash", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedHdrHash.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedHdrHash.setDescription('The header hash filter.')
fltNewCfgExtendedHdrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedHdrName.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedHdrName.setDescription('The header name of the filter. Headerhash should be enabled before header name is configured.')
fltNewCfgExtendedHdrHashLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedHdrHashLen.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedHdrHashLen.setDescription('The header hash length of the filter. Headerhash should be enabled before hash length is configured.')
fltNewCfgExtendedNatIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgExtendedNatIp.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedNatIp.setDescription('The nat IP address to be filtered.')
fltNewCfgExtendedIpv6Nip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Nip.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Nip.setDescription('The nat IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgExtendedIpv6Proxy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Proxy.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedIpv6Proxy.setDescription('The proxy IPv6 address to be filtered. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
fltNewCfgExtendedL7SipFilt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgExtendedL7SipFilt.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedL7SipFilt.setDescription('Enable/Disable L7 application SIP UDP filtering.')
fltNewCfgExtendedNatMcastVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fltNewCfgExtendedNatMcastVlan.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedNatMcastVlan.setDescription('Multicast VLAN.')
fltNewCfgExtendedNbind = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedNbind.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedNbind.setDescription('Enable or disable subnet binding for redirection.')
fltNewCfgExtendedL3State = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 12, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgExtendedL3State.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgExtendedL3State.setDescription('The L3 filter processing state for this filter.')
fltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 4), )
if mibBuilder.loadTexts: fltCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPortTable.setDescription('The filtering port table in the current configuration block.')
fltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltCurCfgPortIndx"))
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPortTableEntry.setDescription('A row in the filtering port table.')
fltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortIndx.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPortIndx.setDescription('The port index.')
fltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortState.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPortState.setDescription('Enable or disable filtering.')
fltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgPortFiltBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltCurCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
fltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 5), )
if mibBuilder.loadTexts: fltNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPortTable.setDescription('The filtering port table in the new configuration block.')
fltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltNewCfgPortIndx"))
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPortTableEntry.setDescription('A row in the filtering port table.')
fltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgPortIndx.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPortIndx.setDescription('The port index.')
fltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgPortState.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPortState.setDescription('Enable or disable filtering.')
fltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPortFiltBmap.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltNewCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
fltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 5, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPortAddFiltRule.setDescription("This is an action object to add filtering rule to a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be added to the port. The range of the valid index is between 1 and fltCurCfgTableMaxSize. When read, the value '0' is returned always.")
fltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgPortRemFiltRule.setDescription("This is an action object to remove filtering rule from a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be removed from the port. The range of the valid index is between 1 and fltCurCfgTableMaxSize. When read, the value '0' is returned always.")
fltUrlBwmTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltUrlBwmTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: fltUrlBwmTableMaxSize.setDescription('The maximum number of URL based BWM entries.')
fltCurCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 7), )
if mibBuilder.loadTexts: fltCurCfgUrlBwmTable.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgUrlBwmTable.setDescription('The table of URL based BWM for filtering.')
fltCurCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltCurCfgUrlBwmFltIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "fltCurCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: fltCurCfgUrlBwmEntry.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgUrlBwmEntry.setDescription('A row in the URL based BWM filtering table.')
fltCurCfgUrlBwmFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmFltIndex.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgUrlBwmFltIndex.setDescription('The number of the filter.')
fltCurCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmUrlId.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
fltCurCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgUrlBwmContract.setDescription('The BW contract.')
fltCurCfgUrlReverseBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgUrlReverseBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgUrlReverseBwmContract.setDescription('The BWM contract for reverse traffic.')
fltNewCfgUrlBwmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 8), )
if mibBuilder.loadTexts: fltNewCfgUrlBwmTable.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgUrlBwmTable.setDescription('The table of URL based BWM for filtering.')
fltNewCfgUrlBwmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltNewCfgUrlBwmFltIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "fltNewCfgUrlBwmUrlId"))
if mibBuilder.loadTexts: fltNewCfgUrlBwmEntry.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgUrlBwmEntry.setDescription('A row in the URL based BWM filtering table.')
fltNewCfgUrlBwmFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgUrlBwmFltIndex.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgUrlBwmFltIndex.setDescription('The number of the filter.')
fltNewCfgUrlBwmUrlId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgUrlBwmUrlId.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgUrlBwmUrlId.setDescription('The URL Path Identifier.')
fltNewCfgUrlBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 8, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgUrlBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgUrlBwmContract.setDescription('The BW traffic contract.')
fltNewCfgUrlBwmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgUrlBwmDelete.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgUrlBwmDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
fltNewCfgUrlReverseBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgUrlReverseBwmContract.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgUrlReverseBwmContract.setDescription('The BWM contract for reverse traffic.')
fltCfgHttpRedirMappingTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCfgHttpRedirMappingTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: fltCfgHttpRedirMappingTableMaxSize.setDescription('The maximum number of entries in HttpRedirMappingTable.')
fltCurCfgHttpRedirMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 10), )
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingTable.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingTable.setDescription('The table of HTTP redirection mapping table.')
fltCurCfgHttpRedirMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltCurCfgHttpRedirMappingFilter"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "fltCurCfgHttpRedirMappingFromStr"))
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingEntry.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingEntry.setDescription('A row in the HTTP redirect mapping table.')
fltCurCfgHttpRedirMappingFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingFilter.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingFilter.setDescription('The filter number.')
fltCurCfgHttpRedirMappingFromStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingFromStr.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingFromStr.setDescription('This index is the string ID of Layer7 string table. If HTTP request matches this string, then switch issues a HTTP REDIRECT to client with the fltCurCfgHttpRedirMappingToStr string.')
fltCurCfgHttpRedirMappingToStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingToStr.setStatus('current')
if mibBuilder.loadTexts: fltCurCfgHttpRedirMappingToStr.setDescription('The string ID of Layer7 string table. The switch sends HTTP Redirect back to client with this string when HTTP request matches the fltCurCfgHttpRedirMappingFromStr string')
fltNewCfgHttpRedirMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 11), )
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingTable.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingTable.setDescription('The table of HTTP redirection mapping table.')
fltNewCfgHttpRedirMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltNewCfgHttpRedirMappingFilter"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "fltNewCfgHttpRedirMappingFromStr"))
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingEntry.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingEntry.setDescription('A row in the HTTP redirect mapping table.')
fltNewCfgHttpRedirMappingFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingFilter.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingFilter.setDescription('The filter number.')
fltNewCfgHttpRedirMappingFromStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingFromStr.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingFromStr.setDescription('The string ID of Layer7 string table. If HTTP request matches this string then switch issues a HTTP REDIRECT to client with the fltNewCfgHttpRedirMappingToStr string.')
fltNewCfgHttpRedirMappingToStr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingToStr.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingToStr.setDescription('The string ID of Layer7 string table. The switch sends HTTP Redirect back to client with this string when the HTTP request matches fltNewCfgHttpRedirMappingFromStr string.')
fltNewCfgHttpRedirMappingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingDelete.setStatus('current')
if mibBuilder.loadTexts: fltNewCfgHttpRedirMappingDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenState.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenState.setDescription('Turn on or off Distributed Server Load Balance.')
gslbNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenState.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenState.setDescription('Turn on or off Distributed Server Load Balance.')
gslbCurCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenHttpRedirect.setDescription('Enable/Disable HTTP redirect based GSLB in the current_configuration block.')
gslbNewCfgGenHttpRedirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenHttpRedirect.setDescription('Enable/Disable HTTP redirect based GSLB in the new_configuration block.')
gslbCurCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenMinco.setDescription('Minmum number of site connections in the current_configuration block.')
gslbNewCfgGenMinco = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenMinco.setDescription('Minmum number of site connections in the new_configuration block.')
gslbCurCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenUsern.setDescription('Enable/Disable HTTP redirect to real server name.')
gslbNewCfgGenUsern = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenUsern.setDescription('Enable/Disable HTTP redirect to real server name.')
gslbCurCfgGenNoremote = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenNoremote.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenNoremote.setDescription('Enable/Disable no remote real SLB. Enabling will prevent the switch from load balancing incoming traffic to remote reals in the event that all local reals are down.')
gslbNewCfgGenNoremote = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenNoremote.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenNoremote.setDescription('Enable/Disable no remote real SLB. Enabling will prevent the switch from load balancing incoming traffic to remote reals in the event that all local reals are down.')
gslbCurCfgGenEncrypt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenEncrypt.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenEncrypt.setDescription('Enable/Disable encrypting remote site update.')
gslbNewCfgGenEncrypt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenEncrypt.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenEncrypt.setDescription('Enable/Disable encrypting remote site update.')
gslbCurCfgGenRemSiteUpdatePort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdatePort.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdatePort.setDescription('TCP port number for remote site updates in the current configuration block.')
gslbNewCfgGenRemSiteUpdatePort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdatePort.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdatePort.setDescription('TCP port number for remote site updates in the new configuration block.')
gslbCurCfgGenSessUtilCap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenSessUtilCap.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenSessUtilCap.setDescription('Session utilization capacity threshold in the current configuration block.')
gslbNewCfgGenSessUtilCap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenSessUtilCap.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenSessUtilCap.setDescription('Session utilization capacity threshold in the new configuration block.')
gslbCurCfgGenCpuUtilCap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenCpuUtilCap.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenCpuUtilCap.setDescription('CPU utilization capacity threshold in the current configuration block.')
gslbNewCfgGenCpuUtilCap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenCpuUtilCap.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenCpuUtilCap.setDescription('CPU utilization capacity threshold in the new configuration block.')
gslbCurCfgGenSourceIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 35), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenSourceIpNetmask.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenSourceIpNetmask.setDescription('Source IP netmask for DNS persistence cache in the current configuration block.')
gslbNewCfgGenSourceIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenSourceIpNetmask.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenSourceIpNetmask.setDescription('Source IP netmask for DNS persistence cache in the new configuration block.')
gslbCurCfgGenTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenTimeout.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenTimeout.setDescription('Timeout in minutes for DNS persistence cache in the current configuration block.')
gslbNewCfgGenTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenTimeout.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenTimeout.setDescription('Timeout in minutes for DNS persistence cache in the new configuration block.')
gslbCurCfgGenDnsDirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenDnsDirect.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenDnsDirect.setDescription('Enable/Disable authoritative DNS direct based Global SLB in the current configuration block.')
gslbNewCfgGenDnsDirect = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenDnsDirect.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenDnsDirect.setDescription('Enable/Disable authoritative DNS direct based Global SLB in the new configuration block.')
gslbCurCfgGenRemSiteUpdateVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateVersion.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateVersion.setDescription('DSSP version 1,2,3,4 or 5 to send out remote site updates in the current configuration block.')
gslbNewCfgGenRemSiteUpdateVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateVersion.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateVersion.setDescription('DSSP version 1,2,3,4 or 5 to send out remote site updates in the new configuration block.')
gslbCurCfgGenHostname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenHostname.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenHostname.setDescription('Enable/Disable virtual service hostname matching in the current configuration block.')
gslbNewCfgGenHostname = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenHostname.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenHostname.setDescription('Enable/Disable virtual service hostname matching in the new configuration block.')
gslbCurCfgGenRemSiteUpdateIntervalSeconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 7200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateIntervalSeconds.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenRemSiteUpdateIntervalSeconds.setDescription('The time interval in seconds for updating remote site status in the current_configuration block.')
gslbNewCfgGenRemSiteUpdateIntervalSeconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateIntervalSeconds.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenRemSiteUpdateIntervalSeconds.setDescription('The time interval in seconds for updating remote site status in the new_configuration block.')
gslbCurCfgGenNoResp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenNoResp.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenNoResp.setDescription('DNS response code when no server is returned for the current_configuration block.')
gslbNewCfgGenNoResp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenNoResp.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenNoResp.setDescription('DNS response code when no server is returned for the new_configuration block.')
gslbCurCfgProximityTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgProximityTime.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgProximityTime.setDescription('Current_configuration block maximum time allowed for Client Proximity calculation.')
gslbNewCfgProximityTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgProximityTime.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgProximityTime.setDescription('New_configuration block maximum time allowed for Client Proximity calculation.')
gslbCurCfgProximityMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgProximityMask.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgProximityMask.setDescription('Client Proximity default netmask of the client cache for the current_configuration block.')
gslbNewCfgProximityMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgProximityMask.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgProximityMask.setDescription('Client Proximity default netmask of the client cache for the new_configuration block.')
gslbCurCfgProximityAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgProximityAge.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgProximityAge.setDescription('Client Proximity Age timeout of each client network entries for the current_configuration block.')
gslbNewCfgProximityAge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgProximityAge.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgProximityAge.setDescription('Client Proximity Age timeout of each client network entries for the new_configuration block.')
gslbCurCfgGenSourceIpv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgGenSourceIpv6Prefix.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgGenSourceIpv6Prefix.setDescription('Source IPv6 prefix for DNS persistence cache in the current configuration block.')
gslbNewCfgGenSourceIpv6Prefix = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgGenSourceIpv6Prefix.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgGenSourceIpv6Prefix.setDescription('Source IPv6 prefix for DNS persistence cache in the new configuration block.')
gslbRemSiteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: gslbRemSiteTableMaxSize.setDescription('The maximum number of GSLB remote sites.')
gslbCurCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2), )
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteTable.setDescription('The GSLB remote site table in the current configuration block.')
gslbCurCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteTableEntry.setDescription('A row in the GSLB remote site table.')
gslbCurCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteIndx.setDescription('The GSLB remote site table index.')
gslbCurCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp.setDescription('The primary IP address of the remote site in the current_configuration block.')
gslbCurCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp.setDescription('The secondary IP address of the remote site in the current_configuration block.')
gslbCurCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteState.setDescription('Enable/Disable GSLB for the remote site in the current_configuration block.')
gslbCurCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteUpdate.setDescription('Enable/Disable GSLB for the remote site status update in the current_configuration block.')
gslbCurCfgRemSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteName.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteName.setDescription('The name of the GSLB remote site.')
gslbCurCfgRemSitePrimaryIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIPVer.setDescription('The primary IP address version of the remote site.')
gslbCurCfgRemSitePrimaryIp6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp6.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSitePrimaryIp6.setDescription(' Primary IPV6 address of the remote site Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbCurCfgRemSiteSecondaryIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIPVer.setDescription('The secondary IP address version of the remote site.')
gslbCurCfgRemSiteSecondaryIp6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp6.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRemSiteSecondaryIp6.setDescription(' Secondary IPV6 address of the remote site Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbNewCfgRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3), )
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteTable.setDescription('The GSLB remote site table in the current configuration block.')
gslbNewCfgRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewCfgRemSiteIndx"))
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteTableEntry.setDescription('A row in the GSLB remote site table in the current configuration block.')
gslbNewCfgRemSiteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteIndx.setDescription('The GSLB remote site table index.')
gslbNewCfgRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp.setDescription('The primary IP address of the remote site in the new_configuration block.')
gslbNewCfgRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp.setDescription('The secondary IP address of the remote site in the new_configuration block.')
gslbNewCfgRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteState.setDescription('Enable/Disable GSLB for the remote site in the new_configuration block.')
gslbNewCfgRemSiteUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteUpdate.setDescription('Enable/Disable GSLB for the remote site status update in the new_configuration block.')
gslbNewCfgRemSiteDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSiteDelete.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbNewCfgRemSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSiteName.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteName.setDescription('The name of the GSLB remote site.')
gslbNewCfgRemSitePrimaryIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIPVer.setDescription('The primary IP address version of the remote site.')
gslbNewCfgRemSitePrimaryIp6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp6.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSitePrimaryIp6.setDescription(' Primary IPV6 address of the remote site Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbNewCfgRemSiteSecondaryIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIPVer.setDescription('The secondary IP address version of the remote site.')
gslbNewCfgRemSiteSecondaryIp6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 2, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp6.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRemSiteSecondaryIp6.setDescription(' Secondary IPV6 address of the remote site Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbEnhNetworkTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbEnhNetworkTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: gslbEnhNetworkTableMaxSize.setDescription('The maximum number of Global SLB networks.')
gslbCurCfgEnhNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2), )
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkTable.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkTable.setDescription('The table of network preference in the current_config.')
gslbCurCfgEnhNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurCfgEnhNetworkIndx"))
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkTableEntry.setDescription('The table about a network preference entry configuration.')
gslbCurCfgEnhNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkIndx.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkIndx.setDescription('The current network preference table index.')
gslbCurCfgEnhNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkState.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkState.setDescription('Enable/Disable Global SLB for the network in the current_configuration block.')
gslbCurCfgEnhNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkSourceIp.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkSourceIp.setDescription('The Source IP address of the network preference table.')
gslbCurCfgEnhNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkNetMask.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkNetMask.setDescription('The Net mask of the network preference table.')
gslbCurCfgEnhNetworkVirtServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkVirtServer.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkVirtServer.setDescription('The virtual servers in the network. The virtual servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented virtual server belongs to the network 0 - The represented virtual server does not belong to the network')
gslbCurCfgEnhNetworkRemRealServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkRemRealServer.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkRemRealServer.setDescription('The remote real servers in the network. The remote real servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented remote real server belongs to the network 0 - The represented remote real server does not belong to the network')
gslbCurCfgEnhNetworkSourceIpV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkSourceIpV6.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkSourceIpV6.setDescription(' The Source IPV6 address of the network table Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbCurCfgEnhNetworkVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkVer.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkVer.setDescription('The secondary IP address version of the remote site.')
gslbCurCfgEnhNetworkSprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkSprefix.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgEnhNetworkSprefix.setDescription('The prefix length associated with the source IPV6 address of the network table.')
gslbNewCfgEnhNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3), )
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkTable.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkTable.setDescription('The table of network preference in the new_config.')
gslbNewCfgEnhNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewCfgEnhNetworkIndx"))
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkTableEntry.setDescription('The table about a network preference entry configuration.')
gslbNewCfgEnhNetworkIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkIndx.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkIndx.setDescription('The new network preference table index.')
gslbNewCfgEnhNetworkState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkState.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkState.setDescription('Enable/Disable Global SLB for the network in the new_configuration block.')
gslbNewCfgEnhNetworkSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkSourceIp.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkSourceIp.setDescription('The Source IP address of the network table.')
gslbNewCfgEnhNetworkNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkNetMask.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkNetMask.setDescription('The Net mask of the network preference table.')
gslbNewCfgEnhNetworkDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkDelete.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbNewCfgEnhNetworkVirtServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkVirtServer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkVirtServer.setDescription('The virtual servers in the network. The virtual servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented virtual server belongs to the network 0 - The represented virtual server does not belong to the network')
gslbNewCfgEnhNetworkRemRealServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkRemRealServer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkRemRealServer.setDescription('The remote real servers in the network. The remote real servers are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... | || |_ server 9 | || | ||___ server 8 | |____ server 7 | . . . |__________ server 1 where x : 1 - The represented remote real server belongs to the network 0 - The represented remote real server does not belong to the network')
gslbNewCfgEnhNetworkAddVirtServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkAddVirtServer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkAddVirtServer.setDescription('The virtual server to be added to the network. When read, 0 is returned.')
gslbNewCfgEnhNetworkRemoveVirtServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkRemoveVirtServer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkRemoveVirtServer.setDescription('The virtual server to be removed from the network. When read, 0 is returned.')
gslbNewCfgEnhNetworkAddRemRealServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkAddRemRealServer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkAddRemRealServer.setDescription('The remote real server to be added to the network. When read, 0 is returned.')
gslbNewCfgEnhNetworkRemoveRemRealServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkRemoveRemRealServer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkRemoveRemRealServer.setDescription('The remote real server to be removed from the network. When read, 0 is returned.')
gslbNewCfgEnhNetworkSourceIpV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkSourceIpV6.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkSourceIpV6.setDescription(' The Source IPV6 address of the network table Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbNewCfgEnhNetworkVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkVer.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkVer.setDescription('The secondary IP address version of the remote site.')
gslbNewCfgEnhNetworkSprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkSprefix.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgEnhNetworkSprefix.setDescription('The prefix length associated with the source IPV6 address of the network table.')
gslbRuleTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbRuleTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: gslbRuleTableMaxSize.setDescription('The maximum number of Global SLB rules.')
gslbCurCfgRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2), )
if mibBuilder.loadTexts: gslbCurCfgRuleTable.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleTable.setDescription('The rule table in the current configuration block.')
gslbCurCfgRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurCfgRuleIndx"))
if mibBuilder.loadTexts: gslbCurCfgRuleTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleTableEntry.setDescription('An entry in the rule table in the current configuration block.')
gslbCurCfgRuleIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleIndx.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleIndx.setDescription('The rule table index in the current configuration block.')
gslbCurCfgRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleState.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleState.setDescription('Enable/Disable the rule in the current configuration block.')
gslbCurCfgRuleStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleStartHour.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleStartHour.setDescription('Start hour in 24-hour format for the rule in the current configuration block.')
gslbCurCfgRuleStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleStartMin.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleStartMin.setDescription('Start minutes for the rule in the current configuration block.')
gslbCurCfgRuleEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleEndHour.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleEndHour.setDescription('End hour in 24-hour format for the rule in the current configuration block.')
gslbCurCfgRuleEndMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleEndMin.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleEndMin.setDescription('End minutes for the rule in the current configuration block.')
gslbCurCfgRuleTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleTTL.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleTTL.setDescription('Time to live in seconds of DNS resource records for the rule in the current configuration block.')
gslbCurCfgRuleRR = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleRR.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleRR.setDescription('DNS resource records in DNS response for the rule in the current configuration block.')
gslbCurCfgRuleDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleDname.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleDname.setDescription('Network preference domain name for rule.')
gslbNewCfgRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3), )
if mibBuilder.loadTexts: gslbNewCfgRuleTable.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleTable.setDescription('The rule table in the new configuration block.')
gslbNewCfgRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewCfgRuleIndx"))
if mibBuilder.loadTexts: gslbNewCfgRuleTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleTableEntry.setDescription('An entry in the rule table in the new configuration block.')
gslbNewCfgRuleIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRuleIndx.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleIndx.setDescription('The rule table index in the new configuration block.')
gslbNewCfgRuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRuleState.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleState.setDescription('Enable/Disable the rule in the new configuration block.')
gslbNewCfgRuleStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRuleStartHour.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleStartHour.setDescription('Start hour in 24-hour format for the rule in the new configuration block.')
gslbNewCfgRuleStartMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRuleStartMin.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleStartMin.setDescription('Start minutes for the rule in the new configuration block.')
gslbNewCfgRuleEndHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRuleEndHour.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleEndHour.setDescription('End hour in 24-hour format for the rule in the new configuration block.')
gslbNewCfgRuleEndMin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRuleEndMin.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleEndMin.setDescription('End minutes for the rule in the new configuration block.')
gslbNewCfgRuleTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRuleTTL.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleTTL.setDescription('Time to live in seconds of DNS resource records for the rule in the new configuration block.')
gslbNewCfgRuleRR = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgRuleRR.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleRR.setDescription('DNS resource records in DNS response for the rule in the new configuration block.')
gslbNewCfgRuleDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRuleDname.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleDname.setDescription('Network preference domain name for rule')
gslbNewCfgRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewCfgRuleDelete.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbMetricTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbMetricTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: gslbMetricTableMaxSize.setDescription('The maximum number of Global SLB metrics for each Global SLB rule.')
gslbCurCfgMetricTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 5), )
if mibBuilder.loadTexts: gslbCurCfgMetricTable.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgMetricTable.setDescription('The metric table in the current configuration block.')
gslbCurCfgMetricTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurCfgRuleMetricIndx"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurCfgMetricIndx"))
if mibBuilder.loadTexts: gslbCurCfgMetricTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgMetricTableEntry.setDescription('An entry in the metric table in the current configuration block.')
gslbCurCfgRuleMetricIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgRuleMetricIndx.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgRuleMetricIndx.setDescription('The rule table index in the current configuration block.')
gslbCurCfgMetricIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgMetricIndx.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgMetricIndx.setDescription('The metric table index in the current configuration block.')
gslbCurCfgMetricMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("leastconns", 1), ("roundrobin", 2), ("response", 3), ("geographical", 4), ("network", 5), ("random", 6), ("availability", 7), ("qos", 8), ("minmisses", 9), ("hash", 10), ("local", 11), ("always", 12), ("remote", 13), ("none", 14), ("persistence", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgMetricMetric.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgMetricMetric.setDescription('The metric to use to select next server in the current configuration block.')
gslbCurCfgMetricNetworkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgMetricNetworkBmap.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgMetricNetworkBmap.setDescription('The networks added to the metric. The networks added are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ network 9 || || || ||___ network 8 || |____ network 7 || . . . ||_________ network 2 |__________ network 1 where x : 1 - The represented network added to the metric 0 - The represented network added to the metric')
gslbNewCfgMetricTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6), )
if mibBuilder.loadTexts: gslbNewCfgMetricTable.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgMetricTable.setDescription('The metric table in the current configuration block.')
gslbNewCfgMetricTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewCfgRuleMetricIndx"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewCfgMetricIndx"))
if mibBuilder.loadTexts: gslbNewCfgMetricTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgMetricTableEntry.setDescription('An entry in the metric table in the current configuration block.')
gslbNewCfgRuleMetricIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgRuleMetricIndx.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgRuleMetricIndx.setDescription('The rule table index in the new configuration block.')
gslbNewCfgMetricIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgMetricIndx.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgMetricIndx.setDescription('The metric table index in the new configuration block.')
gslbNewCfgMetricMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("leastconns", 1), ("roundrobin", 2), ("response", 3), ("geographical", 4), ("network", 5), ("random", 6), ("availability", 7), ("qos", 8), ("minmisses", 9), ("hash", 10), ("local", 11), ("always", 12), ("remote", 13), ("none", 14), ("persistence", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgMetricMetric.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgMetricMetric.setDescription('The metric to use to select next server in the new configuration block.')
gslbNewCfgMetricNetworkBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewCfgMetricNetworkBmap.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgMetricNetworkBmap.setDescription('The networks added to the metric. The networks added are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ network 9 || || || ||___ network 8 || |____ network 7 || . . . ||_________ network 2 |__________ network 1 where x : 1 - The represented network added to the metric 0 - The represented network added to the metric')
gslbNewCfgMetricAddNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgMetricAddNetwork.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgMetricAddNetwork.setDescription("This is an action object to add network to a metric. The range of the valid index is between 1 and gslbEnhNetworkTableMaxSize. When read, the value '0' is returned always.")
gslbNewCfgMetricRemNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgMetricRemNetwork.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgMetricRemNetwork.setDescription("This is an action object to remove network to a metric. The range of the valid index is between 1 and gslbEnhNetworkTableMaxSize. When read, the value '0' is returned always.")
gslbCurCfgDnsSecGlobalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalEnabled.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalEnabled.setDescription('.')
gslbNewCfgDnsSecGlobalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalEnabled.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalEnabled.setDescription('.')
gslbCurCfgDnsSecGlobalRollTm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalRollTm.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalRollTm.setDescription('Automatic Roll Over Timer - In Hours.')
gslbNewCfgDnsSecGlobalRollTm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalRollTm.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalRollTm.setDescription('Automatic Roll Over Timer - In Hours.')
gslbCurCfgDnsSecGlobalType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nsec", 1), ("nsec3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalType.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalType.setDescription('Automatic Roll Over Timer - In Hours.')
gslbNewCfgDnsSecGlobalType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nsec", 1), ("nsec3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalType.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalType.setDescription('Automatic Roll Over Timer - In Hours.')
gslbCurCfgDnsSecGlobalKskRollTm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalKskRollTm.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalKskRollTm.setDescription('Automatic KSK Roll Over Timer - In Hours.')
gslbNewCfgDnsSecGlobalKskRollTm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalKskRollTm.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalKskRollTm.setDescription('Automatic KSK Roll Over Timer - In Hours.')
gslbCurCfgDnsSecGlobalNsec3SaltLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalNsec3SaltLen.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalNsec3SaltLen.setDescription('NSEC3 Salt Length in bytes.')
gslbNewCfgDnsSecGlobalNsec3SaltLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalNsec3SaltLen.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalNsec3SaltLen.setDescription('NSEC3 Salt Length in bytes.')
gslbCurCfgDnsSecGlobalNsec3SaltLifetime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(86400, 2419200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalNsec3SaltLifetime.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalNsec3SaltLifetime.setDescription('NSEC3 Salt Lifetime in seconds.')
gslbNewCfgDnsSecGlobalNsec3SaltLifetime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(86400, 2419200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalNsec3SaltLifetime.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalNsec3SaltLifetime.setDescription('NSEC3 Salt Lifetime in seconds.')
gslbCurCfgDnsSecGlobalNsec3HashIterations = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalNsec3HashIterations.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalNsec3HashIterations.setDescription('NSEC3 Salt Hash Iterations.')
gslbNewCfgDnsSecGlobalNsec3HashIterations = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalNsec3HashIterations.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalNsec3HashIterations.setDescription('NSEC3 Salt Hash Iterations.')
gslbCurCfgDnsSecGlobalSMPTServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalSMPTServerUserName.setStatus('current')
if mibBuilder.loadTexts: gslbCurCfgDnsSecGlobalSMPTServerUserName.setDescription('SMPT Server User Name.')
gslbNewCfgDnsSecGlobalSMPTServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalSMPTServerUserName.setStatus('current')
if mibBuilder.loadTexts: gslbNewCfgDnsSecGlobalSMPTServerUserName.setDescription('SMPT Server User Name.')
gslbCurDnsSecKeyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1), )
if mibBuilder.loadTexts: gslbCurDnsSecKeyTable.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyTable.setDescription('.')
gslbCurDnsSecKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurDnsSecKeyID"))
if mibBuilder.loadTexts: gslbCurDnsSecKeyEntry.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyEntry.setDescription('.')
gslbCurDnsSecKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyID.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyID.setDescription('DNS Sec Table Key.')
gslbCurDnsSecKeyUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyUseCount.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyUseCount.setDescription('Usage count.')
gslbCurDnsSecKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keyTypeKSK", 1), ("keyTypeZSK", 2), ("keyTypeInvalid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyType.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyType.setDescription('KSK or ZSK.')
gslbCurDnsSecKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyStatus.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyStatus.setDescription('Key status.')
gslbCurDnsSecKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("keySize1024", 1), ("keySize2048", 2), ("keySize4096", 3), ("keySizeInvalid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeySize.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeySize.setDescription('Size of key (bits).')
gslbCurDnsSecKeyAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keyAlgoRsaSha1", 1), ("keyAlgoRsaSha256", 2), ("keyAlgoRsaSha512", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyAlgo.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyAlgo.setDescription('Signing algorithm.')
gslbCurDnsSecKeyTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyTTL.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyTTL.setDescription('DNSSEC - TTL in Seconds.')
gslbCurDnsSecKeyExpPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyExpPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyExpPeriod.setDescription('Expiration period in Seconds.')
gslbCurDnsSecKeyRollOverPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyRollOverPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyRollOverPeriod.setDescription('RollOver period in Seconds.')
gslbCurDnsSecKeyValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyValidityPeriod.setDescription('Signature validity period in Seconds.')
gslbCurDnsSecKeyPublicationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecKeyPublicationPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecKeyPublicationPeriod.setDescription('Signature publication period in Seconds.')
gslbNewDnsSecKeyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2), )
if mibBuilder.loadTexts: gslbNewDnsSecKeyTable.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyTable.setDescription('.')
gslbNewDnsSecKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewDnsSecKeyID"))
if mibBuilder.loadTexts: gslbNewDnsSecKeyEntry.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyEntry.setDescription('.')
gslbNewDnsSecKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsSecKeyID.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyID.setDescription('DNS Sec Table Key.')
gslbNewDnsSecKeyUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewDnsSecKeyUseCount.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyUseCount.setDescription('Usage count.')
gslbNewDnsSecKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keyTypeKSK", 1), ("keyTypeZSK", 2), ("keyTypeInvalid", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsSecKeyType.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyType.setDescription('KSK or ZSK.')
gslbNewDnsSecKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecKeyStatus.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyStatus.setDescription('Key state.')
gslbNewDnsSecKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("keySize1024", 1), ("keySize2048", 2), ("keySize4096", 3), ("keySizeInvalid", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsSecKeySize.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeySize.setDescription('Size of key (bits).')
gslbNewDnsSecKeyAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keyAlgoRsaSha1", 1), ("keyAlgoRsaSha256", 2), ("keyAlgoRsaSha512", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsSecKeyAlgo.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyAlgo.setDescription('Signing algorithm.')
gslbNewDnsSecKeyTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecKeyTTL.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyTTL.setDescription('DNSSEC - TTL.')
gslbNewDnsSecKeyExpPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecKeyExpPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyExpPeriod.setDescription('Expiration period in Seconds.')
gslbNewDnsSecKeyRollOverPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecKeyRollOverPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyRollOverPeriod.setDescription('RollOver period in Seconds.')
gslbNewDnsSecKeyValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecKeyValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyValidityPeriod.setDescription('Signature validity period in Seconds.')
gslbNewDnsSecKeyPublicationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecKeyPublicationPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyPublicationPeriod.setDescription('Signature publication period in Seconds.')
gslbNewDnsSecKeyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsSecKeyDelete.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbNewDnsSecKeyGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("generate", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsSecKeyGenerate.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyGenerate.setDescription('By setting the value to generate(2), the key will be generated.')
gslbNewDnsSecKeyGenerateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notGenerated", 1), ("generated", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewDnsSecKeyGenerateStatus.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecKeyGenerateStatus.setDescription('Returns the generate status.')
gslbCurDnsSecZoneTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1), )
if mibBuilder.loadTexts: gslbCurDnsSecZoneTable.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneTable.setDescription('.')
gslbCurDnsSecZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurDnsSecZoneID"))
if mibBuilder.loadTexts: gslbCurDnsSecZoneEntry.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneEntry.setDescription('.')
gslbCurDnsSecZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneID.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneID.setDescription('Zone ID.')
gslbCurDnsSecZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneName.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneName.setDescription("Zone name (virt's dname).")
gslbCurDnsSecZoneKSK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneKSK1.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneKSK1.setDescription('KSK 1 of the zone.')
gslbCurDnsSecZoneKSK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneKSK2.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneKSK2.setDescription('KSK 2 of the zone.')
gslbCurDnsSecZoneKSK3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneKSK3.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneKSK3.setDescription('KSK 3 of the zone.')
gslbCurDnsSecZoneZSK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneZSK1.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneZSK1.setDescription('ZSK 1 of the zone.')
gslbCurDnsSecZoneZSK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneZSK2.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneZSK2.setDescription('ZSK 2 of the zone.')
gslbCurDnsSecZoneZSK3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneZSK3.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneZSK3.setDescription('ZSK 1 of the zone.')
gslbCurDnsSecZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneStatus.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneStatus.setDescription('Zone status - Enabled/Disabled.')
gslbCurDnsSecZoneParentIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneParentIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneParentIPVer.setDescription('The type of IP address.')
gslbCurDnsSecZoneParentIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneParentIPv4.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneParentIPv4.setDescription('Parent IP.')
gslbCurDnsSecZoneParentIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsSecZoneParentIPv6.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsSecZoneParentIPv6.setDescription(' IPV6 address of the Parent IP Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbNewDnsSecZoneTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2), )
if mibBuilder.loadTexts: gslbNewDnsSecZoneTable.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneTable.setDescription('.')
gslbNewDnsSecZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewDnsSecZoneID"))
if mibBuilder.loadTexts: gslbNewDnsSecZoneEntry.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneEntry.setDescription('.')
gslbNewDnsSecZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsSecZoneID.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneID.setDescription('Zone ID.')
gslbNewDnsSecZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneName.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneName.setDescription("Zone name (virt's dname).")
gslbNewDnsSecZoneKSK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneKSK1.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneKSK1.setDescription('KSK 1 of the zone.')
gslbNewDnsSecZoneKSK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneKSK2.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneKSK2.setDescription('KSK 2 of the zone.')
gslbNewDnsSecZoneKSK3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneKSK3.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneKSK3.setDescription('KSK 3 of the zone.')
gslbNewDnsSecZoneZSK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneZSK1.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneZSK1.setDescription('ZSK 1 of the zone.')
gslbNewDnsSecZoneZSK2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneZSK2.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneZSK2.setDescription('ZSK 2 of the zone.')
gslbNewDnsSecZoneZSK3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneZSK3.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneZSK3.setDescription('ZSK 3 of the zone.')
gslbNewDnsSecZoneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneStatus.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneStatus.setDescription('Zone status - Enabled/Disabled.')
gslbNewDnsSecZoneParentIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbNewDnsSecZoneParentIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneParentIPVer.setDescription('The type of IP address.')
gslbNewDnsSecZoneParentIPv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneParentIPv4.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneParentIPv4.setDescription('IPV4 address of the Parent IP.')
gslbNewDnsSecZoneParentIPv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneParentIPv6.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneParentIPv6.setDescription(' IPV6 address of the Parent IP Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbNewDnsSecZoneDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsSecZoneDelete.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsSecZoneDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbDnsSecImportExportSCPHostName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPHostName.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPHostName.setDescription('SCP Server Host Name or Server IP Address.')
gslbDnsSecImportExportSCPFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPFileName.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPFileName.setDescription('SCP Server File name.')
gslbDnsSecImportExportSCPUserName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPUserName.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPUserName.setDescription('SCP Server User Name.')
gslbDnsSecImportExportSCPPassword = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPPassword.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportSCPPassword.setDescription('SCP Server Password.')
gslbDnsSecImportExportKeyID = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportKeyID.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportKeyID.setDescription('DNSSEC Key ID.')
gslbDnsSecImportExportZoneID = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportZoneID.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportZoneID.setDescription('DNSSEC Zone ID.')
gslbDnsSecImportExportPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportPassphrase.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportPassphrase.setDescription('Passphrase.')
gslbDnsSecImportExportComponentType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("key", 1), ("dnskey", 2), ("dsrecord", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportComponentType.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportComponentType.setDescription('Component type to import/export: key, dnskey or ds record. Currently only the key is Supported')
gslbDnsSecImportExportPortType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("data", 0), ("mgmt", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportPortType.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportPortType.setDescription('The port type: management or data.')
gslbDnsSecImportExportImpKeyType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keyTypeKSK", 1), ("keyTypeZSK", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyType.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyType.setDescription('KSK or ZSK.')
gslbDnsSecImportExportImpKeyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyStatus.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyStatus.setDescription('Key status.')
gslbDnsSecImportExportImpKeySize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keySize1024", 1), ("keySize2048", 2), ("keySize4096", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeySize.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeySize.setDescription('Size of key (bits).')
gslbDnsSecImportExportImpKeyAlgo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("keyAlgoRsaSha1", 1), ("keyAlgoRsaSha256", 2), ("keyAlgoRsaSha512", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyAlgo.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyAlgo.setDescription('Signing algorithm.')
gslbDnsSecImportExportImpKeyTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyTTL.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyTTL.setDescription('DNSSEC - TTL in Seconds.')
gslbDnsSecImportExportImpKeyExpPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyExpPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyExpPeriod.setDescription('Expiration period in Seconds.')
gslbDnsSecImportExportImpKeyRollOverPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyRollOverPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyRollOverPeriod.setDescription('RollOver period in Seconds.')
gslbDnsSecImportExportImpKeyValidityPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyValidityPeriod.setDescription('Signature validity period in Seconds.')
gslbDnsSecImportExportImpKeyPublicationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyPublicationPeriod.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportImpKeyPublicationPeriod.setDescription('Signature publication period in Seconds.')
gslbDnsSecImportExportAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 6, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("import", 1), ("export", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbDnsSecImportExportAction.setStatus('current')
if mibBuilder.loadTexts: gslbDnsSecImportExportAction.setDescription('Component type to import/export: key or dnskey.')
gslbCurDnsResVipTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1), )
if mibBuilder.loadTexts: gslbCurDnsResVipTable.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipTable.setDescription('.')
gslbCurDnsResVipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurDnsResVipIndex1"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbCurDnsResVipIndex2"))
if mibBuilder.loadTexts: gslbCurDnsResVipEntry.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipEntry.setDescription('.')
gslbCurDnsResVipIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsResVipIndex1.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipIndex1.setDescription('DNS Responder VIP Index 1.')
gslbCurDnsResVipIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsResVipIndex2.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipIndex2.setDescription('DNS Responder VIP Index 2.')
gslbCurDnsResVipName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsResVipName.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipName.setDescription('DNS Responder VIP Name.')
gslbCurDnsResVipIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsResVipIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipIPVer.setDescription('The type of IP address of DNS Responder VIP.')
gslbCurDnsResVipV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsResVipV4.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipV4.setDescription('IPV4 address of the DNS Responder VIP.')
gslbCurDnsResVipV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsResVipV6.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipV6.setDescription(' IPV6 address of the DNS Responder VIP Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbCurDnsResVipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbCurDnsResVipStatus.setStatus('current')
if mibBuilder.loadTexts: gslbCurDnsResVipStatus.setDescription('Zone status - Enabled/Disabled.')
gslbNewDnsResVipTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2), )
if mibBuilder.loadTexts: gslbNewDnsResVipTable.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipTable.setDescription('.')
gslbNewDnsResVipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewDnsResVipIndex1"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbNewDnsResVipIndex2"))
if mibBuilder.loadTexts: gslbNewDnsResVipEntry.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipEntry.setDescription('.')
gslbNewDnsResVipIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsResVipIndex1.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipIndex1.setDescription('DNS Responder VIP Index 1.')
gslbNewDnsResVipIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: gslbNewDnsResVipIndex2.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipIndex2.setDescription('DNS Responder VIP Index 2.')
gslbNewDnsResVipName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsResVipName.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipName.setDescription('DNS Responder VIP Name.')
gslbNewDnsResVipIPVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsResVipIPVer.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipIPVer.setDescription('The type of IP address of DNS Responder VIP.')
gslbNewDnsResVipV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsResVipV4.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipV4.setDescription('IPV4 address of the DNS Responder VIP.')
gslbNewDnsResVipV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsResVipV6.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipV6.setDescription(' IPV6 address of the DNS Responder VIP Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbNewDnsResVipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsResVipStatus.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipStatus.setDescription('Zone status - Enabled/Disabled.')
gslbNewDnsResVipDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbNewDnsResVipDelete.setStatus('current')
if mibBuilder.loadTexts: gslbNewDnsResVipDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
gslbDnsResVipEmptyIndexesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 3), )
if mibBuilder.loadTexts: gslbDnsResVipEmptyIndexesTable.setStatus('current')
if mibBuilder.loadTexts: gslbDnsResVipEmptyIndexesTable.setDescription('.')
gslbDnsResVipEmptyIndexesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbDnsResVipEmptyIndexesIndex"))
if mibBuilder.loadTexts: gslbDnsResVipEmptyIndexesEntry.setStatus('current')
if mibBuilder.loadTexts: gslbDnsResVipEmptyIndexesEntry.setDescription('.')
gslbDnsResVipEmptyIndexesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbDnsResVipEmptyIndexesIndex.setStatus('current')
if mibBuilder.loadTexts: gslbDnsResVipEmptyIndexesIndex.setDescription('DNS Responder VIP Index.')
hcsTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcsTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: hcsTableMaxSize.setDescription('The maximum number of scriptable health check entries.')
hcsCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 2), )
if mibBuilder.loadTexts: hcsCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: hcsCurCfgTable.setDescription('The scriptable health check table in the current configuration block.')
hcsCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "hcsCurCfgScriptIndex"))
if mibBuilder.loadTexts: hcsCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: hcsCurCfgTableEntry.setDescription('A row in the scriptable health check table.')
hcsCurCfgScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcsCurCfgScriptIndex.setStatus('current')
if mibBuilder.loadTexts: hcsCurCfgScriptIndex.setDescription('The index in the scriptable health check table.')
hcsCurCfgScriptString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcsCurCfgScriptString.setStatus('current')
if mibBuilder.loadTexts: hcsCurCfgScriptString.setDescription('The scriptable health check string.')
hcsNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3), )
if mibBuilder.loadTexts: hcsNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgTable.setDescription('The scriptable health check table in the new configuration block.')
hcsNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "hcsNewCfgScriptIndex"))
if mibBuilder.loadTexts: hcsNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgTableEntry.setDescription('A row in the scriptable health check table.')
hcsNewCfgScriptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcsNewCfgScriptIndex.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgScriptIndex.setDescription('The index the scriptable health check.')
hcsNewCfgScriptString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcsNewCfgScriptString.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgScriptString.setDescription('The scriptable health check string.')
hcsNewCfgAddSendCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddSendCmd.setStatus('obsolete')
if mibBuilder.loadTexts: hcsNewCfgAddSendCmd.setDescription("Append an 'send' command to the script. The set value of this object should be the exact characters to be sent on the port opened with the 'open' command. The 'send ' characters will be automatically appended. Also a 'null terminator' (\\0) will be automatically appended. The null terminator and the 'send ' characters will be counted as characters in the script.")
hcsNewCfgAddExpectCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddExpectCmd.setStatus('obsolete')
if mibBuilder.loadTexts: hcsNewCfgAddExpectCmd.setDescription("Append an 'expect' command to the script. The set value of this object should be the exact characters expected to be received on the port opened with the 'open' command. The value could also be a single wildcard character '*' which means any received content will be accepted. The 'expect ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'expect ' characters will be counted as characters in the script.")
hcsNewCfgAddCloseCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("close", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddCloseCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddCloseCmd.setDescription("Add close command to end of the script. When set to the value of 2 (add), 'close' will be appended to the script. Also, a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'close' characters will be counted as characters in the script. This command is only valid for TCP.")
hcsNewCfgRemLastCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("remove", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgRemLastCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgRemLastCmd.setDescription('Remove the last command from the script. When set to the value of 2 (remove), last command will be removed from the script. When read, other(1) is returned.')
hcsNewCfgDeleteScript = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgDeleteScript.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgDeleteScript.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
hcsNewCfgAddOffsetCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1464))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddOffsetCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddOffsetCmd.setDescription("Append an 'offset' command to the script. The set value of this object should be the offset from the beginning of the data area of the TCP/UDP packet to start matching the string configured in the last bexpect command. The 'offset ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'offset ' characters will be counted as characters in the script. When read, the return value has no significant meaning, but a 1 is always returned.")
hcsNewCfgAddWaitCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddWaitCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddWaitCmd.setDescription("Append a 'wait' command to the script. The set value of this object should be the maximum waiting time for the packet containing the content configured in the last expect command. Wait time is in units of milliseconds, and the maximum supported is 65535 ms. The 'wait ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'wait ' characters will be counted as characters in the script. When read, the return value has no significant meaning, but a 1 is always returned. ")
hcsNewCfgAddOpenProtCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddOpenProtCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddOpenProtCmd.setDescription("Append an 'open' command to the script. The value of this object should be real server port number or name, followed by a comma, and then the protocol (either tcp or udp), e.g. '80,tcp'. Only the port number or name, and tcp or udp should be set. The 'open ' characters will be automatically appended. Also a 'null terminator' (\\0) will be automatically appended. The null terminator and the 'open ' characters will be counted as characters in the script.")
hcsNewCfgAddNsendCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddNsendCmd.setStatus('obsolete')
if mibBuilder.loadTexts: hcsNewCfgAddNsendCmd.setDescription("Append an 'nsend' command to the script. The 'nsend' command is used to append additional content to the packet generated by the 'bsend' command when the desired 'bsend' content is more than 255 characters. The set value of this object should be the exact characters to be appended. The 'nsend ' characters will be automatically appended. Also a 'null terminator' (\\0) will be automatically appended. The null terminator and the 'nsend ' characters will be counted as characters in the script.")
hcsNewCfgAddNexpectCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddNexpectCmd.setStatus('obsolete')
if mibBuilder.loadTexts: hcsNewCfgAddNexpectCmd.setDescription("Append an 'nexpect' command to the script. The 'nexpect' command is used to append additional characters to the 'bexpect' string when the desired 'bexpect' string is more than 255 characters. The set value of this object should be the exact characters to be appended. The 'nexpect ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'nexpect ' characters will be counted as characters in the script.")
hcsNewCfgAddDepthCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1464))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddDepthCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddDepthCmd.setDescription("Append a 'depth' command to the script. The set value of this object should be the depth (search window) within the data area of the TCP/UDP packet for matching the string configured in the last bexpect command. The 'depth ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'depth ' characters will be counted as characters in the script. When read, the return value has no significant meaning, but a 1 is always returned.")
hcsNewCfgAddLongBsendCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 506))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddLongBsendCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddLongBsendCmd.setDescription("Append a 'bsend' command to the script. The set value of this object should be the exact binary data in hex format to be sent on the port opened with the 'open' command. The 'bsend ' characters will be automatically appended. Also a 'null terminator' (\\0) will be automatically appended. The null terminator and the 'bsend ' characters will be counted as characters in the script.")
hcsNewCfgAddLongBexpectCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 504))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddLongBexpectCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddLongBexpectCmd.setDescription("Append a 'bexpect' command to the script. The set value of this object should be the exact binary data in hex format expected to be received on the port opened with the 'open' command. The value could also be a single wildcard character '*' which means any received content will be accepted. The 'bexpect ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'bexpect ' characters will be counted as characters in the script.")
hcsNewCfgAddLongSendCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 507))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddLongSendCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddLongSendCmd.setDescription("Append an 'send' command to the script. The set value of this object should be the exact characters to be sent on the port opened with the 'open' command. The 'send ' characters will be automatically appended. Also a 'null terminator' (\\0) will be automatically appended. The null terminator and the 'send ' characters will be counted as characters in the script.")
hcsNewCfgAddLongExpectCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 505))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddLongExpectCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddLongExpectCmd.setDescription("Append an 'expect' command to the script. The set value of this object should be the exact characters expected to be received on the port opened with the 'open' command. The value could also be a single wildcard character '*' which means any received content will be accepted. The 'expect ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'expect ' characters will be counted as characters in the script.")
hcsNewCfgAddLongNsendCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 506))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddLongNsendCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddLongNsendCmd.setDescription("Append an 'nsend' command to the script. The 'nsend' command is used to append additional content to the packet generated by the 'bsend' command when the desired 'bsend' content is more than 255 characters. The set value of this object should be the exact characters to be appended. The 'nsend ' characters will be automatically appended. Also a 'null terminator' (\\0) will be automatically appended. The null terminator and the 'nsend ' characters will be counted as characters in the script.")
hcsNewCfgAddLongNexpectCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 13, 3, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 504))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcsNewCfgAddLongNexpectCmd.setStatus('current')
if mibBuilder.loadTexts: hcsNewCfgAddLongNexpectCmd.setDescription("Append an 'nexpect' command to the script. The 'nexpect' command is used to append additional characters to the 'bexpect' string when the desired 'bexpect' string is more than 255 characters. The set value of this object should be the exact characters to be appended. The 'nexpect ' characters will be automatically appended. Also a 'null terminator'(\\0) will be automatically appended. The null terminator and the 'nexpect ' characters will be counted as characters in the script.")
snmphcTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: snmphcTableMaxSize.setDescription('The maximum number of SNMP health check entries.')
snmphcCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2), )
if mibBuilder.loadTexts: snmphcCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgTable.setDescription('The SNMP health check table in the current configuration block.')
snmphcCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "snmphcCurCfgIndex"))
if mibBuilder.loadTexts: snmphcCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgTableEntry.setDescription('A row in the SNMP health check table.')
snmphcCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgIndex.setDescription('The index of the SNMP health check.')
snmphcCurCfgOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcCurCfgOid.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgOid.setDescription('The OID to be sent in the SNMP get request packet.')
snmphcCurCfgCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcCurCfgCommString.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgCommString.setDescription('The community string to be used in the SNMP get request packet.')
snmphcCurCfgRcvContent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcCurCfgRcvContent.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgRcvContent.setDescription('The content expected in the SNMP response packet. The content specified can be either a string or an integer value.')
snmphcCurCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcCurCfgInvert.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgInvert.setDescription('When the invert option is enabled the health check will fail if the response packet contains the value specified in the receive content field.')
snmphcCurCfgUseWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcCurCfgUseWeight.setStatus('current')
if mibBuilder.loadTexts: snmphcCurCfgUseWeight.setDescription('When the weight option is enabled the real server weights are adjusted dynamically based on the SNMP health check response.')
snmphcNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3), )
if mibBuilder.loadTexts: snmphcNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgTable.setDescription('The SNMP health check table in the new configuration block.')
snmphcNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "snmphcNewCfgIndex"))
if mibBuilder.loadTexts: snmphcNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgTableEntry.setDescription('A row in the SNMP health check table.')
snmphcNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmphcNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgIndex.setDescription('The index of the SNMP health check.')
snmphcNewCfgOid = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmphcNewCfgOid.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgOid.setDescription('The OID to be sent in the SNMP get request packet.')
snmphcNewCfgCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmphcNewCfgCommString.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgCommString.setDescription('The community string to be used in the SNMP get request packet.')
snmphcNewCfgRcvContent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmphcNewCfgRcvContent.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgRcvContent.setDescription('The content expected in the SNMP response packet. The content specified can be either a string or an integer value.')
snmphcNewCfgInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmphcNewCfgInvert.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgInvert.setDescription('When the invert option is enabled the health check will fail if the response packet contains the value specified in the receive content field.')
snmphcNewCfgDeleteHc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmphcNewCfgDeleteHc.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgDeleteHc.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
snmphcNewCfgUseWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmphcNewCfgUseWeight.setStatus('current')
if mibBuilder.loadTexts: snmphcNewCfgUseWeight.setDescription('When the weight option is enabled the real server weights are adjusted dynamically based on the SNMP health check response.')
curCfgFilterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curCfgFilterTableSize.setStatus('current')
if mibBuilder.loadTexts: curCfgFilterTableSize.setDescription('Indicates the number of entries in the filter table current configuration.')
newCfgFilterTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newCfgFilterTableSize.setStatus('current')
if mibBuilder.loadTexts: newCfgFilterTableSize.setDescription('Indicates the number of entries in the filter table new configuration.')
curCfgRealServerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curCfgRealServerTableSize.setStatus('current')
if mibBuilder.loadTexts: curCfgRealServerTableSize.setDescription('Indicates the number of entries in the SLB real server table current configuration.')
newCfgRealServerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newCfgRealServerTableSize.setStatus('current')
if mibBuilder.loadTexts: newCfgRealServerTableSize.setDescription('Indicates the number of entries in the SLB real server table new configuration.')
curCfgRealServerGroupTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curCfgRealServerGroupTableSize.setStatus('current')
if mibBuilder.loadTexts: curCfgRealServerGroupTableSize.setDescription('Indicates the number of entries in the SLB real server group table current configuration.')
newCfgRealServerGroupTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newCfgRealServerGroupTableSize.setStatus('current')
if mibBuilder.loadTexts: newCfgRealServerGroupTableSize.setDescription('Indicates the number of entries in the SLB real server group table new configuration.')
curCfgVirtServerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: curCfgVirtServerTableSize.setStatus('current')
if mibBuilder.loadTexts: curCfgVirtServerTableSize.setDescription('Indicates the number of entries in the SLB virtual server table current configuration.')
newCfgVirtServerTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newCfgVirtServerTableSize.setStatus('current')
if mibBuilder.loadTexts: newCfgVirtServerTableSize.setDescription('Indicates the number of entries in the SLB virtual server table new configuration.')
pipTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: pipTableMaxSize.setDescription('The maximum number of PIP entries.')
pipCurCfgBaseType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipCurCfgBaseType.setStatus('current')
if mibBuilder.loadTexts: pipCurCfgBaseType.setDescription('The PIP base. 1 = port based, 2 = VLAN based')
pipCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 3), )
if mibBuilder.loadTexts: pipCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: pipCurCfgTable.setDescription('The PIP table in the current configuration block.')
pipCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "pipCurCfgPip"))
if mibBuilder.loadTexts: pipCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: pipCurCfgTableEntry.setDescription('A row in the PIP table.')
pipCurCfgPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipCurCfgPip.setStatus('current')
if mibBuilder.loadTexts: pipCurCfgPip.setDescription('Proxy IP address by the instance of the pipCurCfgIndex.')
pipCurCfgPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipCurCfgPortMap.setStatus('current')
if mibBuilder.loadTexts: pipCurCfgPortMap.setDescription('This is a bit map of port. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 ||_________ port 1 |__________ unused where x : 1 - PIP is used for this port. x : 0 - PIP Not used for this port.')
pipCurCfgVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipCurCfgVlanMap.setStatus('current')
if mibBuilder.loadTexts: pipCurCfgVlanMap.setDescription('This is a bit map of VLAN. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ VLAN 8 || || || ||___ VLAN 7 || |____ VLAN 6 ||_________ VLAN 1 |__________ unused where x : 1 - PIP is used for this VLAN. x : 0 - PIP Not used for this VLAN.')
pipNewCfgBaseType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pipNewCfgBaseType.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgBaseType.setDescription('The PIP base. 1 = port based, 2 = VLAN based')
pipNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5), )
if mibBuilder.loadTexts: pipNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgTable.setDescription('The PIP table in the New configuration block.')
pipNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "pipNewCfgPip"))
if mibBuilder.loadTexts: pipNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgTableEntry.setDescription('A row in the PIP table.')
pipNewCfgPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipNewCfgPip.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgPip.setDescription('PIP address by the instance of the pipCurCfgIndex.')
pipNewCfgPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipNewCfgPortMap.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgPortMap.setDescription('The bit map of port for PIP. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 ||_________ port 1 |__________ unused where x : 1 - PIP is used for this port. x : 0 - PIP Not used for this port.')
pipNewCfgVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pipNewCfgVlanMap.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgVlanMap.setDescription('The bit map of VLAN for PIP. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ VLAN 8 || || || ||___ VLAN 7 || |____ VLAN 6 ||_________ VLAN 1 |__________ unused where x : 1 - PIP is used for this VLAN. x : 0 - PIP Not used for this VLAN.')
pipNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pipNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
pipNewCfgAddPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pipNewCfgAddPortVlan.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgAddPortVlan.setDescription('The Port or VLAN to be associated with the PIP. When read, 0 is returned.')
pipNewCfgRemovePortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pipNewCfgRemovePortVlan.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgRemovePortVlan.setDescription('The Port or VLAN to be disassociated from the PIP. When read, 0 is returned.')
pipNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pipNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgAddPort.setDescription('The Port to be associated with the PIP. When read, 0 is returned.')
pipNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pipNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgAddVlan.setDescription('The VLAN to be associated with the PIP. When read, 0 is returned.')
pipNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pipNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgRemovePort.setDescription('The Port to be disassociated from the PIP. When read, 0 is returned.')
pipNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 5, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pipNewCfgRemoveVlan.setStatus('current')
if mibBuilder.loadTexts: pipNewCfgRemoveVlan.setDescription('The VLAN to be disassociated from the PIP. When read, 0 is returned.')
pip6CurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 6), )
if mibBuilder.loadTexts: pip6CurCfgTable.setStatus('current')
if mibBuilder.loadTexts: pip6CurCfgTable.setDescription('The IPv6 PIP table in the current configuration block.')
pip6CurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "pip6CurCfgPip"))
if mibBuilder.loadTexts: pip6CurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: pip6CurCfgTableEntry.setDescription('A row in the IPv6 PIP table.')
pip6CurCfgPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pip6CurCfgPip.setStatus('current')
if mibBuilder.loadTexts: pip6CurCfgPip.setDescription('IPv6 Proxy IP address by the instance of the pip6CurCfgIndex.')
pip6CurCfgPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pip6CurCfgPortMap.setStatus('current')
if mibBuilder.loadTexts: pip6CurCfgPortMap.setDescription('This is a bit map of port. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 ||_________ port 1 |__________ unused where x : 1 - PIP is used for this port. x : 0 - PIP Not used for this port.')
pip6CurCfgVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pip6CurCfgVlanMap.setStatus('current')
if mibBuilder.loadTexts: pip6CurCfgVlanMap.setDescription('This is a bit map of VLAN. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ VLAN 8 || || || ||___ VLAN 7 || |____ VLAN 6 ||_________ VLAN 1 |__________ unused where x : 1 - PIP is used for this VLAN. x : 0 - PIP Not used for this VLAN.')
pip6NewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7), )
if mibBuilder.loadTexts: pip6NewCfgTable.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgTable.setDescription('The IPv6 PIP table in the New configuration block.')
pip6NewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "pip6NewCfgPip"))
if mibBuilder.loadTexts: pip6NewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgTableEntry.setDescription('A row in the IPv6 PIP table.')
pip6NewCfgPip = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pip6NewCfgPip.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgPip.setDescription('IPv6 PIP address by the instance of the pip6CurCfgIndex.')
pip6NewCfgPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pip6NewCfgPortMap.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgPortMap.setDescription('The bit map of port for PIP. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 ||_________ port 1 |__________ unused where x : 1 - PIP is used for this port. x : 0 - PIP Not used for this port.')
pip6NewCfgVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pip6NewCfgVlanMap.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgVlanMap.setDescription('The bit map of VLAN for PIP. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ VLAN 8 || || || ||___ VLAN 7 || |____ VLAN 6 ||_________ VLAN 1 |__________ unused where x : 1 - PIP is used for this VLAN. x : 0 - PIP Not used for this VLAN.')
pip6NewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pip6NewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
pip6NewCfgAddPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pip6NewCfgAddPortVlan.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgAddPortVlan.setDescription('The Port or VLAN to be associated with the PIP. When read, 0 is returned.')
pip6NewCfgRemovePortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pip6NewCfgRemovePortVlan.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgRemovePortVlan.setDescription('The Port or VLAN to be disassociated from the PIP. When read, 0 is returned.')
pip6NewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pip6NewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgAddPort.setDescription('The Port to be associated with the PIP. When read, 0 is returned.')
pip6NewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pip6NewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgAddVlan.setDescription('The VLAN to be associated with the PIP. When read, 0 is returned.')
pip6NewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pip6NewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgRemovePort.setDescription('The Port to be disassociated from the PIP. When read, 0 is returned.')
pip6NewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 15, 7, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pip6NewCfgRemoveVlan.setStatus('current')
if mibBuilder.loadTexts: pip6NewCfgRemoveVlan.setDescription('The VLAN to be disassociated from the PIP. When read, 0 is returned.')
slbStatSpRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1), )
if mibBuilder.loadTexts: slbStatSpRealServerTable.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerTable.setDescription('The sp-server statistics table. This table shows the statistics of real servers for a particular SP.')
slbStatSpRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSpRealServerSpIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSpRealServerServerIndex"))
if mibBuilder.loadTexts: slbStatSpRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerEntry.setDescription('A row in the sp-server statistics table.')
slbStatSpRealServerSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpRealServerSpIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerSpIndex.setDescription('The SP index.')
slbStatSpRealServerServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpRealServerServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerServerIndex.setDescription('The real server number that identifies the server.')
slbStatSpRealServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpRealServerCurrSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerCurrSessions.setDescription('The current sessions for the real server.')
slbStatSpRealServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpRealServerTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerTotalSessions.setDescription('The total number of sessions for the real server.')
slbStatSpRealServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpRealServerHCOctetsLow32.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerHCOctetsLow32.setDescription('The lower 32 bit value of the total octets received and transmitted out of the real server on a particular SP.')
slbStatSpRealServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpRealServerHCOctetsHigh32.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerHCOctetsHigh32.setDescription('The higher 32 bit value of the total octets received and transmitted out of the real server on a particular SP.')
slbStatSpRealServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpRealServerHCOctets.setStatus('current')
if mibBuilder.loadTexts: slbStatSpRealServerHCOctets.setDescription('The total octets received and transmitted by the real server on a particular SP.')
slbStatSpFltTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 4), )
if mibBuilder.loadTexts: slbStatSpFltTable.setStatus('current')
if mibBuilder.loadTexts: slbStatSpFltTable.setDescription('The filter statistics table. This table shows the statistics of filters for a particular SP.')
slbStatSpFltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSpFltSpIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSpFltIndex"))
if mibBuilder.loadTexts: slbStatSpFltEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatSpFltEntry.setDescription('A row in the filter statistics table.')
slbStatSpFltSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpFltSpIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSpFltSpIndex.setDescription('The SP index.')
slbStatSpFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpFltIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSpFltIndex.setDescription('The filter number.')
slbStatSpFltFirings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpFltFirings.setStatus('current')
if mibBuilder.loadTexts: slbStatSpFltFirings.setDescription('The number of instances that the received packet matches the filter rule on this SP.')
slbStatSpMaintTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5), )
if mibBuilder.loadTexts: slbStatSpMaintTable.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintTable.setDescription('The table of SLB SP maintenance statistics.')
slbStatSpMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSpMaintSpIndex"))
if mibBuilder.loadTexts: slbStatSpMaintEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintEntry.setDescription('A row in the SLB SP maintenance statistics table.')
slbStatSpMaintSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSpIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSpIndex.setDescription('The SP number for which the statistics apply.')
slbStatSpMaintMaximumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintMaximumSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintMaximumSessions.setDescription('The maximun number of entries per SP in the session table.')
slbStatSpMaintCurBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintCurBindings.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintCurBindings.setDescription('The current number of sessions on the SP.')
slbStatSpMaintCurBindings4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintCurBindings4Seconds.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintCurBindings4Seconds.setDescription('The 4 second average current number of sessions on the SP.')
slbStatSpMaintCurBindings64Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintCurBindings64Seconds.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintCurBindings64Seconds.setDescription('The 64 second average current number of sessions on the SP.')
slbStatSpMaintTerminatedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintTerminatedSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintTerminatedSessions.setDescription('The count of the number of sessions closed because the server failed.')
slbStatSpMaintBindingFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintBindingFails.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintBindingFails.setDescription('The total number of binding failures on the SP. A binding failure occurs when a SP runs out of session table entries.')
slbStatSpMaintNonTcpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintNonTcpFrames.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintNonTcpFrames.setDescription('The total number of non-TCP/IP frames dropped on the SP.')
slbStatSpMaintTcpFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintTcpFragments.setStatus('obsolete')
if mibBuilder.loadTexts: slbStatSpMaintTcpFragments.setDescription('The total number of TCP fragments dropped on the SP.')
slbStatSpMaintUdpDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintUdpDatagrams.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintUdpDatagrams.setDescription('The total number of UDP datagrams dropped on the SP.')
slbStatSpMaintIncorrectVIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintIncorrectVIPs.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintIncorrectVIPs.setDescription('The total number of frames with incorrect VIPs that are dropped on the SP.')
slbStatSpMaintIncorrectVports = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintIncorrectVports.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintIncorrectVports.setDescription('The total number of frames with incorrect Virtual Port that are dropped on the SP.')
slbStatSpMaintRealServerNoAvails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintRealServerNoAvails.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintRealServerNoAvails.setDescription('The total number of frames that are dropped on the SP because no real server is available.')
slbStatSpMaintFilteredDeniedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintFilteredDeniedFrames.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintFilteredDeniedFrames.setDescription('The total number of frames that are denied on the SP by the filter.')
slbStatSpMaintLandAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintLandAttacks.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintLandAttacks.setDescription('The total number of attacks that frames contain the same source and destination IP addresses.')
slbStatSpMaintIpFragTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintIpFragTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintIpFragTotalSessions.setDescription('The total number of fragment sessions processed on the SP.')
slbStatSpMaintIpFragCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintIpFragCurSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintIpFragCurSessions.setDescription('The number of sessions in the IP fragment binding table on the SP.')
slbStatSpMaintIpFragDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintIpFragDiscards.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintIpFragDiscards.setDescription('The total number of fragments discarded on the SP because there is no entry in the IP fragment binding table. ')
slbStatSpMaintIpFragTableFull = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintIpFragTableFull.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintIpFragTableFull.setDescription('The total number of times IP fragment binding table is full on the SP.')
slbStatSpMaintClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbStatSpMaintClear.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintClear.setDescription('This is an action object to clear the non-operational SLB statistics on the particular SP. ok(1) is returned when read.')
slbStatSpMaintOOSFinPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintOOSFinPktDrops.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintOOSFinPktDrops.setDescription('The total number of Out of state FIN Packets received on the SP.')
slbStatSpMaintSymSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymSessions.setDescription('Number of Symantec sessions.')
slbStatSpMaintSymValidSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymValidSegments.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymValidSegments.setDescription('Number of Symantec valid segments.')
slbStatSpMaintSymFragSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymFragSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymFragSessions.setDescription('Number of Symantec fragment sessions.')
slbStatSpMaintSymSegAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymSegAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymSegAllocFails.setDescription('Number of Symantec segment allocation fails.')
slbStatSpMaintSymBufferAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymBufferAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymBufferAllocFails.setDescription('Number of Symantec buffers allocation fails.')
slbStatSpMaintSymConnAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymConnAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymConnAllocFails.setDescription('Number of Symantec Connection allocation fails.')
slbStatSpMaintSymInvalidBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymInvalidBuffers.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymInvalidBuffers.setDescription('Number of Symantec Invalid buffers.')
slbStatSpMaintSymSegReallocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymSegReallocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymSegReallocFails.setDescription('Number of Symantec Segment reallocation fails.')
slbStatSpMaintSymPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymPacketsIn.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymPacketsIn.setDescription('Symantec Deuce Inspection Stats - No. of packets in.')
slbStatSpMaintSymPacketsWithNoData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymPacketsWithNoData.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymPacketsWithNoData.setDescription('Symantec Deuce Inspection Stats - No. of packets with no data.')
slbStatSpMaintSymTcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymTcpPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymTcpPackets.setDescription('Symantec Deuce Inspection Stats - No. of TCP packets')
slbStatSpMaintSymUdpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymUdpPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymUdpPackets.setDescription('Symantec Deuce Inspection Stats - No. of UDP Packets')
slbStatSpMaintSymIcmpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymIcmpPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymIcmpPackets.setDescription('Symantec Deuce Inspection Stats - No. of ICMP Packets')
slbStatSpMaintSymOtherPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymOtherPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymOtherPackets.setDescription('Symantec Deuce Inspection Stats - No. of Packets other than TCP UDP or ICMP')
slbStatSpMaintSymMatchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymMatchCount.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymMatchCount.setDescription('Symantec Deuce Inspection Stats - Match Count')
slbStatSpMaintSymFetchErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymFetchErrors.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymFetchErrors.setDescription('Symantec Deuce Inspection Stats - No. of Fetch Errors')
slbStatSpMaintSymTruncPayloadToMp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymTruncPayloadToMp.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymTruncPayloadToMp.setDescription('Symantec Deuce Inspection Stats - No. of Truncated payload to MP')
slbStatSpMaintSymPacketsInFastPath = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpMaintSymPacketsInFastPath.setStatus('current')
if mibBuilder.loadTexts: slbStatSpMaintSymPacketsInFastPath.setDescription('Symantec Deuce Inspection Stats - No. of Packets in fast path')
slbStatSpAuxSessTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 6), )
if mibBuilder.loadTexts: slbStatSpAuxSessTable.setStatus('current')
if mibBuilder.loadTexts: slbStatSpAuxSessTable.setDescription('The auxiliary session table statistics for a particular SP.')
slbStatSpAuxSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSpAuxSessSpIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSpAuxSessIndex"))
if mibBuilder.loadTexts: slbStatSpAuxSessEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatSpAuxSessEntry.setDescription('The statistics of a particular auxiliary session table entry.')
slbStatSpAuxSessSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpAuxSessSpIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSpAuxSessSpIndex.setDescription('The SP number.')
slbStatSpAuxSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpAuxSessIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSpAuxSessIndex.setDescription('The auxiliary session table number.')
slbStatSpAuxSessCurConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpAuxSessCurConn.setStatus('current')
if mibBuilder.loadTexts: slbStatSpAuxSessCurConn.setDescription('The number of connections in this auxiliary sessions table.')
slbStatSpAuxSessMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpAuxSessMaxConn.setStatus('current')
if mibBuilder.loadTexts: slbStatSpAuxSessMaxConn.setDescription('The maximum number of connections handled by this auxiliary session table.')
slbStatSpAuxSessAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSpAuxSessAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatSpAuxSessAllocFails.setDescription('The total number of allocation failures for this auxiliary session table.')
slbStatRServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2), )
if mibBuilder.loadTexts: slbStatRServerTable.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerTable.setDescription('The real server statistics table.')
slbStatRServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatRServerIndex"))
if mibBuilder.loadTexts: slbStatRServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerEntry.setDescription('The statistics of a particular real server.')
slbStatRServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerIndex.setDescription('The real server number that identifies the server.')
slbStatRServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerCurrSessions.setDescription('The number of sessions that are currently handled by the real server.')
slbStatRServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerTotalSessions.setDescription('The total number of sessions that are handled by the real server.')
slbStatRServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerFailures.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerFailures.setDescription('The total number of times that the real server is claimed down.')
slbStatRServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerHighestSessions.setDescription('The highest sessions that have been handled by the real server.')
slbStatRServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the real server.')
slbStatRServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the real server.')
slbStatRServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRServerHCOctets.setStatus('current')
if mibBuilder.loadTexts: slbStatRServerHCOctets.setDescription('The total number of octets received and transmitted by the real server.')
slbStatGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3), )
if mibBuilder.loadTexts: slbStatGroupTable.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupTable.setDescription('The real server group statistics table.')
slbStatGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatGroupIndex"))
if mibBuilder.loadTexts: slbStatGroupEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupEntry.setDescription('The statistics of a particular real server group.')
slbStatGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupIndex.setDescription('The real server group number that identifies the group.')
slbStatGroupCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupCurrSessions.setDescription('The number of sessions that are currently handled by the real server group.')
slbStatGroupTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupTotalSessions.setDescription('The total number of sessions that are handled by the real server group.')
slbStatGroupHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupHighestSessions.setDescription('The highest sessions that have been handled by the real server group.')
slbStatGroupHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the real server group.')
slbStatGroupHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the real server group.')
slbStatGroupHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupHCOctets.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupHCOctets.setDescription('The total octets received and transmitted by the real server group.')
slbStatGroupWlmUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatGroupWlmUpdates.setStatus('current')
if mibBuilder.loadTexts: slbStatGroupWlmUpdates.setDescription('Total weight updates from work load manager.')
slbStatVServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4), )
if mibBuilder.loadTexts: slbStatVServerTable.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerTable.setDescription('The virtual server statistics table.')
slbStatVServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatVServerIndex"))
if mibBuilder.loadTexts: slbStatVServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerEntry.setDescription('The statistics of a particular virtual server group.')
slbStatVServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerIndex.setDescription('The virtual server number that identifies the server.')
slbStatVServerCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerCurrSessions.setDescription('The number of sessions that are currently handled by the virtual server.')
slbStatVServerTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerTotalSessions.setDescription('The total number of sessions that are handled by the virtual server.')
slbStatVServerHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerHighestSessions.setDescription('The highest sessions that have been handled by the virtual server.')
slbStatVServerHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the virtual server.')
slbStatVServerHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the virtual server.')
slbStatVServerHeaderHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerHeaderHits.setDescription('The current HTTP header hits.')
slbStatVServerHeaderMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerHeaderMisses.setDescription('The current HTTP header misses.')
slbStatVServerHeaderTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerHeaderTotalSessions.setDescription('The total HTTP header sessions.')
slbStatVServerCookieRewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCookieRewrites.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerCookieRewrites.setDescription('The total Cookie Rewrites.')
slbStatVServerCookieInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerCookieInserts.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerCookieInserts.setDescription('The total Cookie Inserts.')
slbStatVServerHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerHCOctets.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerHCOctets.setDescription('The total octets received and transmitted by the virtual server.')
slbStatVServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: slbStatVServerIpAddress.setDescription('IP address of the virtual server.')
slbStatMaintMaximumSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintMaximumSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintMaximumSessions.setDescription('The maximun number entries in the session table.')
slbStatMaintCurBindings = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintCurBindings.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintCurBindings.setDescription('The current number of bindings on the port.')
slbStatMaintCurBindings4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintCurBindings4Seconds.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintCurBindings4Seconds.setDescription('The 4 second average current number of bindings on the port.')
slbStatMaintCurBindings64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintCurBindings64Seconds.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintCurBindings64Seconds.setDescription('The 64 second average current number of bindings on the port.')
slbStatMaintTerminatedSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintTerminatedSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintTerminatedSessions.setDescription('The count of the number of sessions closed because the server failed.')
slbStatMaintAllocFailures = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintAllocFailures.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintAllocFailures.setDescription('The total number of Binding failures on the port. A Binding Failure occurs when a port runs out of binding table entries.')
slbStatMaintNonTcpFrames = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintNonTcpFrames.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintNonTcpFrames.setDescription('The total number of non-TCP/IP frames dropped on the port.')
slbStatMaintTcpFragments = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintTcpFragments.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintTcpFragments.setDescription('The total number of TCP fragments dropped on the port.')
slbStatMaintUdpDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintUdpDatagrams.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintUdpDatagrams.setDescription('The total number of UDP datagrams dropped on the port.')
slbIncorrectVirtServs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectVirtServs.setStatus('current')
if mibBuilder.loadTexts: slbIncorrectVirtServs.setDescription('Incorrect Virtual Servers specified for Server Load Balancing.')
slbIncorrectVports = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectVports.setStatus('current')
if mibBuilder.loadTexts: slbIncorrectVports.setDescription('Incorrect Virtual ports specified for Server Load Balancing.')
slbNoRealServs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNoRealServs.setStatus('current')
if mibBuilder.loadTexts: slbNoRealServs.setDescription('No Real Servers available for Server Load Balancing.')
slbStatMaintBackupServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintBackupServActs.setDescription('The total number of times that backup servers become active due to failure of primary servers.')
slbStatMaintOverflowServActs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintOverflowServActs.setDescription('The total number of times that backup servers become active due to primary servers reach overflow situation.')
slbStatMaintFilteredDeniedFrames = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintFilteredDeniedFrames.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintFilteredDeniedFrames.setDescription('The total number of frames that are denied on the port by the filter.')
slbStatMaintLandAttacks = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintLandAttacks.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintLandAttacks.setDescription('The total number of attacks that frames contain the same source and destination IP addresses.')
slbStatMaintIpFragTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintIpFragTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintIpFragTotalSessions.setDescription('The total number of fragment sessions processed.')
slbStatMaintIpFragCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintIpFragCurSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintIpFragCurSessions.setDescription('The number of sessions in the IP fragment binding table.')
slbStatMaintIpFragDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintIpFragDiscards.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintIpFragDiscards.setDescription('The total number of fragmemts discarded on the SP because there is no entry in the IP fragment binding table. ')
slbStatMaintIpFragTableFull = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintIpFragTableFull.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintIpFragTableFull.setDescription('The total number times IP fragment binding table is full on the SP.')
slbStatMaintIp6CurrSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintIp6CurrSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintIp6CurrSessions.setDescription('The number of sessions for ipv6.')
slbIncorrectIp6Vip = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectIp6Vip.setStatus('current')
if mibBuilder.loadTexts: slbIncorrectIp6Vip.setDescription('Incorrect Ip6 VIPs specified for server load balancing.')
slbIncorrectIp6Vports = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbIncorrectIp6Vports.setStatus('current')
if mibBuilder.loadTexts: slbIncorrectIp6Vports.setDescription('Incorrect Ip6 virtual ports specified for server load balancing.')
slbStatMaintIp6PktDropped = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintIp6PktDropped.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintIp6PktDropped.setDescription('The total number of Ip6 pacekets dropped.')
slbStatMaintOOSFinPktDrops = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintOOSFinPktDrops.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintOOSFinPktDrops.setDescription('The total number Out of state FIN Packet drops.')
slbStatMaintSymSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymSessions.setDescription('Total number of Symantec sessions.')
slbStatMaintSymValidSegments = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymValidSegments.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymValidSegments.setDescription('Total number of Symantec valid segments.')
slbStatMaintSymFragSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymFragSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymFragSessions.setDescription('Total number of Symantec fragment sessions.')
slbStatMaintSymSegAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymSegAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymSegAllocFails.setDescription('Total number of Symantec segment allocation fails.')
slbStatMaintSymBufferAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymBufferAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymBufferAllocFails.setDescription('Total number of Symantec buffers allocation fails.')
slbStatMaintSymConnAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymConnAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymConnAllocFails.setDescription('Total number of Symantec Connection allocation fails.')
slbStatMaintSymInvalidBuffers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymInvalidBuffers.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymInvalidBuffers.setDescription('Total number of Symantec Invalid buffers.')
slbStatMaintSymSegReallocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymSegReallocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymSegReallocFails.setDescription('Total number of Symantec Segment reallocation fails.')
slbStatMaintSymPacketsIn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymPacketsIn.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymPacketsIn.setDescription('Symantec Deuce Inspection Stats - Total no. of Packets in.')
slbStatMaintSymPacketsWithNoData = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymPacketsWithNoData.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymPacketsWithNoData.setDescription('Symantec Deuce Inspection Stats - Total no. of Packets with no data.')
slbStatMaintSymTcpPackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymTcpPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymTcpPackets.setDescription('Symantec Deuce Inspection Stats - Total no. of TCP packets')
slbStatMaintSymUdpPackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymUdpPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymUdpPackets.setDescription('Symantec Deuce Inspection Stats - Total no. of UDP Packets')
slbStatMaintSymIcmpPackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymIcmpPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymIcmpPackets.setDescription('Symantec Deuce Inspection Stats - Total no. of ICMP Packets')
slbStatMaintSymOtherPackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymOtherPackets.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymOtherPackets.setDescription('Symantec Deuce Inspection Stats - Total no. of Packets other than TCP UDP or ICMP')
slbStatMaintSymMatchCount = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymMatchCount.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymMatchCount.setDescription('Symantec Deuce Inspection Stats - Total Match Count')
slbStatMaintSymFetchErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymFetchErrors.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymFetchErrors.setDescription('Symantec Deuce Inspection Stats - Total no. of Fetch Errors')
slbStatMaintSymTruncPayloadToMp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymTruncPayloadToMp.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymTruncPayloadToMp.setDescription('Symantec Deuce Inspection Stats - Total no. of Truncated payload to MP')
slbStatMaintSymPacketsInFastPath = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 5, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatMaintSymPacketsInFastPath.setStatus('current')
if mibBuilder.loadTexts: slbStatMaintSymPacketsInFastPath.setDescription('Symantec Deuce Inspection Stats - Total no. of Packets in fast path')
fltStatTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 6, 1), )
if mibBuilder.loadTexts: fltStatTable.setStatus('current')
if mibBuilder.loadTexts: fltStatTable.setDescription('The filter statistics table.')
fltStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 6, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "fltStatFltIndex"))
if mibBuilder.loadTexts: fltStatTableEntry.setStatus('current')
if mibBuilder.loadTexts: fltStatTableEntry.setDescription('A row in filter statistics table.')
fltStatFltIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltIndex.setStatus('current')
if mibBuilder.loadTexts: fltStatFltIndex.setDescription('The number that identifies the filter.')
fltStatFltFirings = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fltStatFltFirings.setStatus('current')
if mibBuilder.loadTexts: fltStatFltFirings.setDescription('The number of instances that the received packet matches the filter rule.')
gslbStatRemRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 1), )
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemRealServerTable.setDescription('The GSLB remote real server statistics table.')
gslbStatRemRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatRemRealServerIndex"))
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemRealServerEntry.setDescription('A row in the remote real server statistics table.')
gslbStatRemRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemRealServerIndex.setDescription('The server number that identifies the remote real server.')
gslbStatRemRealServerDnsHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemRealServerDnsHandoffs.setDescription('The number of DNS handoffs by the remote real server.')
gslbStatRemRealServerHttpRedirs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemRealServerHttpRedirs.setDescription('The number of HTTP redirections by the remote real server.')
gslbMaintStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2))
gslbStatMaintInGoodSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates.setDescription('The number of good DSSPv1 remote site updates received.')
gslbStatMaintInBadSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintInBadSiteUpdates.setDescription('The number of bad remote site packets received.')
gslbStatMaintOutSiteUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintOutSiteUpdates.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintOutSiteUpdates.setDescription('The number of DSSPv1 remote site updates sent.')
gslbStatMaintInGoodSiteUpdates2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates2.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintInGoodSiteUpdates2.setDescription('The number of good DSSPv2 remote site updates received.')
gslbStatMaintOutSiteUpdates2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintOutSiteUpdates2.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintOutSiteUpdates2.setDescription('The number of DSSPv2 remote site updates sent.')
gslbStatMaintLocalSitePers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintLocalSitePers.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintLocalSitePers.setDescription('The number of local site DNS persistence cache entries added.')
gslbStatMaintInDns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInDns.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintInDns.setDescription('The number of DNS queries received.')
gslbStatMaintInBadDns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInBadDns.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintInBadDns.setDescription('The number of bad DNS queries received.')
gslbStatMaintOutDns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintOutDns.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintOutDns.setDescription('The number of DNS responses sent.')
gslbStatMaintInHttp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInHttp.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintInHttp.setDescription('The number of HTTP requests received.')
gslbStatMaintInBadHttp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintInBadHttp.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintInBadHttp.setDescription('The number of bad HTTP requests received.')
gslbStatMaintOutHttp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintOutHttp.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintOutHttp.setDescription('The number of HTTP responses sent.')
gslbStatMaintNoServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintNoServer.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintNoServer.setDescription('The number of times no server returned.')
gslbStatMaintNoDomain = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintNoDomain.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintNoDomain.setDescription('The number of times no matching domain.')
gslbStatMaintHostHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintHostHits.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintHostHits.setDescription('The number of hostname domain hits.')
gslbStatMaintRuleHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintRuleHits.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintRuleHits.setDescription('The number of network domain hits.')
gslbStatMaintVirtHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintVirtHits.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintVirtHits.setDescription('The number of basic domain hits.')
gslbStatMaintNoServerHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintNoServerHost.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintNoServerHost.setDescription('The number of times no server returned for hostname domain.')
gslbStatMaintNoServerRule = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintNoServerRule.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintNoServerRule.setDescription('The number of times no server returned for network domain.')
gslbStatMaintNoServerVirt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintNoServerVirt.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintNoServerVirt.setDescription('The number of times no server returned for basic domain.')
gslbStatMaintLastNoResultDomain = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintLastNoResultDomain.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintLastNoResultDomain.setDescription('The last no result domain.')
gslbStatMaintLastSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintLastSrcIp.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintLastSrcIp.setDescription('The last source IP address.')
gslbStatMaintThresholdHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintThresholdHits.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintThresholdHits.setDescription('The number of times any servers not returned due to threshold exceeded for the corresponding server.')
gslbStatMaintLastSrcIpV6 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatMaintLastSrcIpV6.setStatus('current')
if mibBuilder.loadTexts: gslbStatMaintLastSrcIpV6.setDescription('The last source IPV6 address.')
gslbStatGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 3), )
if mibBuilder.loadTexts: gslbStatGroupTable.setStatus('current')
if mibBuilder.loadTexts: gslbStatGroupTable.setDescription('The GSLB group statistics table.')
gslbStatGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatGroupIndex"))
if mibBuilder.loadTexts: gslbStatGroupEntry.setStatus('current')
if mibBuilder.loadTexts: gslbStatGroupEntry.setDescription('A row in the GSLB group statistics table.')
gslbStatGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGroupIndex.setStatus('current')
if mibBuilder.loadTexts: gslbStatGroupIndex.setDescription('The group number that identifies the real server group.')
gslbStatGroupDnsHandoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGroupDnsHandoffs.setStatus('current')
if mibBuilder.loadTexts: gslbStatGroupDnsHandoffs.setDescription('The total number of DNS hand-offs sent to the remote real servers in the group.')
gslbStatGroupHttpRedirs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGroupHttpRedirs.setStatus('current')
if mibBuilder.loadTexts: gslbStatGroupHttpRedirs.setDescription('The total number of HTTP redirects sent to the remote real servers in the group.')
gslbStatVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4), )
if mibBuilder.loadTexts: gslbStatVirtServerTable.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerTable.setDescription('The Global SLB virtual server statistics table.')
gslbStatVirtServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatVirtServerIdx"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatVirtServerServiceIdx"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatVirtServerRserverIdx"))
if mibBuilder.loadTexts: gslbStatVirtServerEntry.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerEntry.setDescription('A row in the Global SLB virtual server statistics table.')
gslbStatVirtServerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerIdx.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerIdx.setDescription('The virtual server number that identifies the virtual server.')
gslbStatVirtServerServiceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerServiceIdx.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerServiceIdx.setDescription('The virtual server service number that identifies the virtual service.')
gslbStatVirtServerRserverIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerRserverIdx.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerRserverIdx.setDescription('The real server number that identifies a remote site. A index of 0 indicates a local virtual server number.')
gslbStatVirtServerVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerVirtPort.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerVirtPort.setDescription('The virtual server service port.')
gslbStatVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerIpAddress.setDescription('The IP address of the virtual server or remote real server.')
gslbStatVirtServerResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerResponseTime.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerResponseTime.setDescription('The average time (current weight) that each service takes to respond to information exchanges with its peers The time is specified in ticks of 65 milliseconds.')
gslbStatVirtServerMinSessAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerMinSessAvail.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerMinSessAvail.setDescription('The current number of sessions available for serving client requests. This number will change as client traffic loads change, or as real servers under the virtual server or remote sites go in or out of service.')
gslbStatVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerDname.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerDname.setDescription('The domain name of the virtual server and remote real server.')
gslbStatVirtServerRemSite = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtServerRemSite.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtServerRemSite.setDescription('The remote site of the remote real server. For virtual server, the remote site is 0.')
gslbStatVirtDnsDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatVirtDnsDirect.setStatus('current')
if mibBuilder.loadTexts: gslbStatVirtDnsDirect.setDescription('The total number of DNS directs sent to the virtual server or remote real server.')
gslbStatRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5), )
if mibBuilder.loadTexts: gslbStatRemSiteTable.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteTable.setDescription('The Global SLB remote site statistics table.')
gslbStatRemSiteTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatRemSiteIdx"))
if mibBuilder.loadTexts: gslbStatRemSiteTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteTableEntry.setDescription('A row in the Global SLB remote site statistics table.')
gslbStatRemSiteIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemSiteIdx.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteIdx.setDescription('The remote site number that identifies the remote site.')
gslbStatRemSiteOutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemSiteOutUpdates.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteOutUpdates.setDescription('The number of DSSPv1 remote site updates sent.')
gslbStatRemSiteInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemSiteInUpdates.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteInUpdates.setDescription('The number of good DSSPv1 remote site updates received.')
gslbStatRemSiteOutUpdates2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemSiteOutUpdates2.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteOutUpdates2.setDescription('The number of DSSPv2 remote site updates sent.')
gslbStatRemSiteInUpdates2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemSiteInUpdates2.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteInUpdates2.setDescription('The number of good DSSPv2 remote site updates received.')
gslbStatRemSiteInBadUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRemSiteInBadUpdates.setStatus('current')
if mibBuilder.loadTexts: gslbStatRemSiteInBadUpdates.setDescription('The number of bad remote site updates received.')
gslbStatEnhNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 6), )
if mibBuilder.loadTexts: gslbStatEnhNetworkTable.setStatus('current')
if mibBuilder.loadTexts: gslbStatEnhNetworkTable.setDescription('The Global SLB network statistics table.')
gslbStatEnhNetworkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatEnhNetworkIdx"))
if mibBuilder.loadTexts: gslbStatEnhNetworkTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbStatEnhNetworkTableEntry.setDescription('A row in the Global SLB network statistics table.')
gslbStatEnhNetworkIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatEnhNetworkIdx.setStatus('current')
if mibBuilder.loadTexts: gslbStatEnhNetworkIdx.setDescription('The network number that identifies the network.')
gslbStatEnhNetworkHit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatEnhNetworkHit.setStatus('current')
if mibBuilder.loadTexts: gslbStatEnhNetworkHit.setDescription('The number of times network is selected.')
gslbStatRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7), )
if mibBuilder.loadTexts: gslbStatRuleTable.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleTable.setDescription('The Global SLB rule statistics table.')
gslbStatRuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbStatRuleIdx"))
if mibBuilder.loadTexts: gslbStatRuleTableEntry.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleTableEntry.setDescription('A row in the Global SLB rule statistics table.')
gslbStatRuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleIdx.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleIdx.setDescription('The rule number that identifies the rule.')
gslbStatRuleLeastconns = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleLeastconns.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleLeastconns.setDescription('The number of times leastconns is used.')
gslbStatRuleRoundrobin = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleRoundrobin.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleRoundrobin.setDescription('The number of times roundrobin is used.')
gslbStatRuleMinmisses = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleMinmisses.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleMinmisses.setDescription('The number of times minmisses is used.')
gslbStatRuleHash = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleHash.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleHash.setDescription('The number of times hash is used.')
gslbStatRuleResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleResponse.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleResponse.setDescription('The number of times response is used.')
gslbStatRuleGeographical = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleGeographical.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleGeographical.setDescription('The number of times geographical is used.')
gslbStatRuleNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleNetwork.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleNetwork.setDescription('The number of times network is used.')
gslbStatRuleRandom = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleRandom.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleRandom.setDescription('The number of times random is used.')
gslbStatRuleAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleAvailability.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleAvailability.setDescription('The number of times availability is used.')
gslbStatRuleQos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleQos.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleQos.setDescription('The number of times qos is used.')
gslbStatRulePersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRulePersistence.setStatus('current')
if mibBuilder.loadTexts: gslbStatRulePersistence.setDescription('The number of times persistence is used.')
gslbStatRuleLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleLocal.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleLocal.setDescription('The number of times local is used.')
gslbStatRuleAlways = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleAlways.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleAlways.setDescription('The number of times always is used.')
gslbStatRuleRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleRemote.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleRemote.setDescription('The number of times remote is used.')
gslbStatRuleTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatRuleTotal.setStatus('current')
if mibBuilder.loadTexts: gslbStatRuleTotal.setDescription('The number of times all the metrics are used.')
gslbStatGeo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8))
gslbStatGeoNA = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoNA.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoNA.setDescription('The number of times North America is selected.')
gslbStatGeoSA = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoSA.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoSA.setDescription('The number of times South America is selected.')
gslbStatGeoEU = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoEU.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoEU.setDescription('The number of times Europe is selected.')
gslbStatGeoCA = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoCA.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoCA.setDescription('The number of times Caribbean is selected.')
gslbStatGeoPR = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoPR.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoPR.setDescription('The number of times Pacific Rim is selected.')
gslbStatGeoSS = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoSS.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoSS.setDescription('The number of times Sub-Sahara is selected.')
gslbStatGeoJP = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoJP.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoJP.setDescription('The number of times Japan is selected.')
gslbStatGeoTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoTotal.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoTotal.setDescription('The number of times any of the regions are selected.')
gslbStatGeoAF = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatGeoAF.setStatus('current')
if mibBuilder.loadTexts: gslbStatGeoAF.setDescription('The number of times Africa is selected.')
gslbStatPers = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 9))
gslbStatPersCurrent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatPersCurrent.setStatus('current')
if mibBuilder.loadTexts: gslbStatPersCurrent.setDescription('The current number of entries in the DNS persistence cache.')
gslbStatPersHiwat = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatPersHiwat.setStatus('current')
if mibBuilder.loadTexts: gslbStatPersHiwat.setDescription('The highest number of entries recorded in the DNS persistence cache.')
gslbStatPersMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 7, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbStatPersMax.setStatus('current')
if mibBuilder.loadTexts: gslbStatPersMax.setDescription('The maximum number of entries supported in the DNS persistence cache.')
ftpSlbStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpSlbStatTotal.setStatus('current')
if mibBuilder.loadTexts: ftpSlbStatTotal.setDescription('The number of times the switch receives both active and passive FTP connections.')
ftpNatStatTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpNatStatTotal.setStatus('current')
if mibBuilder.loadTexts: ftpNatStatTotal.setDescription("The number of times the switch receives the 'port' command from the client.")
ftpStatActiveNatIndex = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpStatActiveNatIndex.setStatus('current')
if mibBuilder.loadTexts: ftpStatActiveNatIndex.setDescription("The number of times the switch creates a new index due to 'port' command from the client.")
ftpStatNatAckSeqDiff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpStatNatAckSeqDiff.setStatus('current')
if mibBuilder.loadTexts: ftpStatNatAckSeqDiff.setDescription('The difference in the numbers of ACK and SEQ that the switch needs for packet adjustment.')
ftpStatSlbParseIndex = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpStatSlbParseIndex.setStatus('current')
if mibBuilder.loadTexts: ftpStatSlbParseIndex.setDescription("The number of times the switch creates a new index in response to the 'pasv' command from the client.")
ftpStatSlbParseAckSeqDiff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpStatSlbParseAckSeqDiff.setStatus('current')
if mibBuilder.loadTexts: ftpStatSlbParseAckSeqDiff.setDescription('The difference in the numbers of ACK and SEQ that the switch needs for FTP SLB parsing.')
ftpStatModeSwitchError = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpStatModeSwitchError.setStatus('current')
if mibBuilder.loadTexts: ftpStatModeSwitchError.setDescription('The number of times the switch is not able to switch modes from active to passive and vice versa.')
radiusAcctReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1))
tpcpAddSessReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 2))
tpcpDeleteSessReqsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 3))
radiusAcctReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctReqs.setDescription('Radius Account Request.')
radiusAcctWrapReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctWrapReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctWrapReqs.setDescription('Radius Account Wrap Request.')
radiusAcctStartReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctStartReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctStartReqs.setDescription('Radius Account Start Request.')
radiusAcctUpdateReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctUpdateReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctUpdateReqs.setDescription('Radius Account Update Request.')
radiusAcctStopReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctStopReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctStopReqs.setDescription('Radius Account stop Request.')
radiusAcctBadReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctBadReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctBadReqs.setDescription('Radius Account Bad Request.')
radiusAcctAddSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctAddSessionReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctAddSessionReqs.setDescription('Radius Account add session Request.')
radiusAcctDeleteSessionReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctDeleteSessionReqs.setStatus('current')
if mibBuilder.loadTexts: radiusAcctDeleteSessionReqs.setDescription('Radius Account delete session Request.')
radiusAcctReqFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsSPDead.setStatus('current')
if mibBuilder.loadTexts: radiusAcctReqFailsSPDead.setDescription('Radius Account request fails SP Dead.')
radiusAcctReqFailsDMAFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqFailsDMAFails.setStatus('current')
if mibBuilder.loadTexts: radiusAcctReqFailsDMAFails.setDescription('Radius Account request fails DMA fails.')
radiusAcctReqWithFramedIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqWithFramedIp.setStatus('current')
if mibBuilder.loadTexts: radiusAcctReqWithFramedIp.setDescription('Radius Account request containing the FRAMED_IP field.')
radiusAcctReqWithoutFramedIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAcctReqWithoutFramedIp.setStatus('current')
if mibBuilder.loadTexts: radiusAcctReqWithoutFramedIp.setDescription('Radius Account request not containing the FRAMED_IP field.')
tpcpAddSessReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqs.setStatus('current')
if mibBuilder.loadTexts: tpcpAddSessReqs.setDescription('WAP add Session requests.')
tpcpAddSessReqsFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpAddSessReqsFailsSPDead.setStatus('current')
if mibBuilder.loadTexts: tpcpAddSessReqsFailsSPDead.setDescription('WAP add Session Fails as the SP is dead.')
tpcpDeleteSessReqs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqs.setStatus('current')
if mibBuilder.loadTexts: tpcpDeleteSessReqs.setDescription('TPCP Delete Session Requests.')
tpcpDeleteSessReqsFailsSPDead = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsSPDead.setStatus('current')
if mibBuilder.loadTexts: tpcpDeleteSessReqsFailsSPDead.setDescription('TPCP Delete Session Fails as the SP is dead.')
wapRequestToWrongSP = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wapRequestToWrongSP.setStatus('current')
if mibBuilder.loadTexts: wapRequestToWrongSP.setDescription('The WAP delete Session Entries sent to wrong SP.')
rtspStatControlConns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatControlConns.setStatus('current')
if mibBuilder.loadTexts: rtspStatControlConns.setDescription('Total number of active RTSP control connections.')
rtspStatUDPStreams = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatUDPStreams.setStatus('current')
if mibBuilder.loadTexts: rtspStatUDPStreams.setDescription('Total number of active UDP streams.')
rtspStatRedirects = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatRedirects.setStatus('current')
if mibBuilder.loadTexts: rtspStatRedirects.setDescription('Total number of switch redirects.')
rtspStatConnDenied = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatConnDenied.setStatus('current')
if mibBuilder.loadTexts: rtspStatConnDenied.setDescription('Total connections denied due to RTSP connection limit.')
rtspStatAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatAllocFails.setStatus('current')
if mibBuilder.loadTexts: rtspStatAllocFails.setDescription('Total cases of heap memory allocation failures.')
rtspStatBufferAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 11, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtspStatBufferAllocs.setStatus('current')
if mibBuilder.loadTexts: rtspStatBufferAllocs.setDescription('The total number of buffer allocations used.')
tcpLimitStatHoldDowns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLimitStatHoldDowns.setStatus('current')
if mibBuilder.loadTexts: tcpLimitStatHoldDowns.setDescription('Total number of client hold downs triggered.')
tcpLimitStatClientEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 12, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpLimitStatClientEntries.setStatus('current')
if mibBuilder.loadTexts: tcpLimitStatClientEntries.setDescription('Current number of TCP rate limiting per-client state entries.')
udpLimitStatHoldDowns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLimitStatHoldDowns.setStatus('current')
if mibBuilder.loadTexts: udpLimitStatHoldDowns.setDescription('Total number of UDP client hold downs triggered.')
icmpLimitStatHoldDowns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpLimitStatHoldDowns.setStatus('current')
if mibBuilder.loadTexts: icmpLimitStatHoldDowns.setDescription('Total number of ICMP client hold downs triggered.')
udpLimitStatClientEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpLimitStatClientEntries.setStatus('current')
if mibBuilder.loadTexts: udpLimitStatClientEntries.setDescription('Current number of UDP rate limiting per-client state entries.')
icmpLimitStatClientEntries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpLimitStatClientEntries.setStatus('current')
if mibBuilder.loadTexts: icmpLimitStatClientEntries.setDescription('Current number of ICMP rate limiting per-client state entries.')
dnsSlbStatTCPQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatTCPQueries.setStatus('current')
if mibBuilder.loadTexts: dnsSlbStatTCPQueries.setDescription('Total number of TCP DNS queries.')
dnsSlbStatUDPQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatUDPQueries.setStatus('current')
if mibBuilder.loadTexts: dnsSlbStatUDPQueries.setDescription('Total number of UDP DNS queries.')
dnsSlbStatInvalidQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatInvalidQueries.setStatus('current')
if mibBuilder.loadTexts: dnsSlbStatInvalidQueries.setDescription('Total number of invalid DNS queries.')
dnsSlbStatMultipleQueries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatMultipleQueries.setStatus('current')
if mibBuilder.loadTexts: dnsSlbStatMultipleQueries.setDescription('Total number of multiple DNS queries.')
dnsSlbStatDnameParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatDnameParseErrors.setStatus('current')
if mibBuilder.loadTexts: dnsSlbStatDnameParseErrors.setDescription('Total number of domain name parse errors.')
dnsSlbStatFailedMatches = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatFailedMatches.setStatus('current')
if mibBuilder.loadTexts: dnsSlbStatFailedMatches.setDescription('Total number of failed real server name matches.')
dnsSlbStatInternalErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsSlbStatInternalErrors.setStatus('current')
if mibBuilder.loadTexts: dnsSlbStatInternalErrors.setDescription('Total number of DNS parsing internal errors.')
slbStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbStatsClear.setStatus('current')
if mibBuilder.loadTexts: slbStatsClear.setDescription('This is an action object to clear the non-operational SLB statistics. ok(1) is returned when read.')
slbStatAuxSessTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 17), )
if mibBuilder.loadTexts: slbStatAuxSessTable.setStatus('current')
if mibBuilder.loadTexts: slbStatAuxSessTable.setDescription('The auxiliary session table statistics.')
slbStatAuxSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 17, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatAuxSessIndex"))
if mibBuilder.loadTexts: slbStatAuxSessEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatAuxSessEntry.setDescription('The statistics of a particular auxiliary session table entry.')
slbStatAuxSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatAuxSessIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatAuxSessIndex.setDescription('The auxiliary session table number.')
slbStatAuxSessCurConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 17, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatAuxSessCurConn.setStatus('current')
if mibBuilder.loadTexts: slbStatAuxSessCurConn.setDescription('The number of connections in this auxiliary sessions table.')
slbStatAuxSessMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatAuxSessMaxConn.setStatus('current')
if mibBuilder.loadTexts: slbStatAuxSessMaxConn.setDescription('The maximum number of connections handled by this auxiliary session table.')
slbStatAuxSessAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatAuxSessAllocFails.setStatus('current')
if mibBuilder.loadTexts: slbStatAuxSessAllocFails.setDescription('The total number of allocation failures for this auxiliary session table.')
sslSlbStatSessIdAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatSessIdAllocFails.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatSessIdAllocFails.setDescription('The number of times allocation of a session table entry failed when attempting to store a SessionId in the table.')
sslSlbStatCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatCurSessions.setDescription('The current number of different TCP sessions using SSL service.')
sslSlbStatTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatTotalSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatTotalSessions.setDescription('The total number of different TCP sessions using SSL service.')
sslSlbStatHighestSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatHighestSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatHighestSessions.setDescription('The high water mark of current sessions of different TCP sessions using SSL service.')
sslSlbStatUniqCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatUniqCurSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatUniqCurSessions.setDescription('The current number of unique SSL sessions seen on the switch.')
sslSlbStatUniqTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatUniqTotalSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatUniqTotalSessions.setDescription('The total number of unique SSL sessions seen on the switch.')
sslSlbStatUniqHighestSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatUniqHighestSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatUniqHighestSessions.setDescription('The high water mark of unique SSL sessions seen on the switch.')
sslSlbStatPersistPortCurSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatPersistPortCurSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatPersistPortCurSessions.setDescription('The current number of SessionIds maintained on SP 4, to allow for persistence across different client ports.')
sslSlbStatPersistPortTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatPersistPortTotalSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatPersistPortTotalSessions.setDescription('The total number of SessionIds maintained on SP 4, to allow for persistence across different client ports.')
sslSlbStatPersistPortHighestSessions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSlbStatPersistPortHighestSessions.setStatus('current')
if mibBuilder.loadTexts: sslSlbStatPersistPortHighestSessions.setDescription('The high water mask of SessionIds maintained on SP 4, to allow for persistence across different client ports.')
slbStatVirtServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18), )
if mibBuilder.loadTexts: slbStatVirtServiceTable.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceTable.setDescription('The virtual service statistics table.')
slbStatVirtServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatVirtServerIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatVirtServiceIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatRealServerIndex"))
if mibBuilder.loadTexts: slbStatVirtServiceEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceEntry.setDescription('The statistics of a particular virtual service.')
slbStatVirtServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServerIndex.setDescription('The virtual server number that identifies the service.')
slbStatVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceIndex.setDescription('The virtual service number that identifies the service.')
slbStatRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatRealServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatRealServerIndex.setDescription('The real server index.')
slbStatVirtServiceCurrSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServiceCurrSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceCurrSessions.setDescription('The number of sessions that are currently handled by the virtual service.')
slbStatVirtServiceTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServiceTotalSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceTotalSessions.setDescription('The total number of sessions that are handled by the virtual service.')
slbStatVirtServiceHighestSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServiceHighestSessions.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceHighestSessions.setDescription('The highest sessions that have been handled by the virtual service.')
slbStatVirtServiceHCOctetsLow32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServiceHCOctetsLow32.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceHCOctetsLow32.setDescription('The lower 32 bit value of octets received and transmitted out of the virtual service.')
slbStatVirtServiceHCOctetsHigh32 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServiceHCOctetsHigh32.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceHCOctetsHigh32.setDescription('The higher 32 bit value of octets received and transmitted out of the virtual service.')
slbStatVirtServiceHCOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 18, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatVirtServiceHCOctets.setStatus('current')
if mibBuilder.loadTexts: slbStatVirtServiceHCOctets.setDescription('The total octets received and transmitted by the virtual service.')
sipTotalClientParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 20, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipTotalClientParseErrors.setStatus('current')
if mibBuilder.loadTexts: sipTotalClientParseErrors.setDescription('Total number of SIP Client parse Errors.')
sipTotalServerParseErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 20, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipTotalServerParseErrors.setStatus('current')
if mibBuilder.loadTexts: sipTotalServerParseErrors.setDescription('Total number of SIP Server parse Errors.')
sipTotalUnknownMethodReq = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 20, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipTotalUnknownMethodReq.setStatus('current')
if mibBuilder.loadTexts: sipTotalUnknownMethodReq.setDescription('Total number of SIP unknown method requests.')
sipTotalIncompleteMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 20, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipTotalIncompleteMsgs.setStatus('current')
if mibBuilder.loadTexts: sipTotalIncompleteMsgs.setDescription('Total number of SIP Incomplete messages.')
sipTotalSdpNatPackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 20, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sipTotalSdpNatPackets.setStatus('current')
if mibBuilder.loadTexts: sipTotalSdpNatPackets.setDescription('Total number of SDP NAT packets.')
wlmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21))
slbStatWlmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1), )
if mibBuilder.loadTexts: slbStatWlmTable.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmTable.setDescription('The WLM statistics table.')
slbStatWlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatWlmIndex"))
if mibBuilder.loadTexts: slbStatWlmEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmEntry.setDescription('The statistics of a particular work load manager.')
slbStatWlmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmIndex.setDescription('The work load manager number.')
slbStatWlmRegReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmRegReq.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmRegReq.setDescription('Total number of registration request messages sent by the switch.')
slbStatWlmRegRep = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmRegRep.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmRegRep.setDescription('Total number of registration replies received from the GWM.')
slbStatWlmRegRepErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmRegRepErr.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmRegRepErr.setDescription('Total number of registration replies received where the return code indicates an error.')
slbStatWlmDeregReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmDeregReq.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmDeregReq.setDescription('Total number of deregistration request messages sent by the switch.')
slbStatWlmDeregRep = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmDeregRep.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmDeregRep.setDescription('Total number of deregistration replies received from the GWM.')
slbStatWlmDeregRepErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmDeregRepErr.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmDeregRepErr.setDescription('Total number of deregistration replies received where the return code flag set indicating an error in processing of the deregistration request.')
slbStatWlmLbStateReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmLbStateReq.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmLbStateReq.setDescription('Total number of set LB state request messages sent by the switch.')
slbStatWlmLbStateRep = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmLbStateRep.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmLbStateRep.setDescription('Total number of set LB state replies received from the GWM.')
slbStatWlmLbStateRepErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmLbStateRepErr.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmLbStateRepErr.setDescription('Total number of set LB state replies received where the return code code flag set indicating an error in processing of the set LB state request.')
slbStatWlmMembStateReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmMembStateReq.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmMembStateReq.setDescription('Total number of set member state request messages sent by the switch.')
slbStatWlmMembStateRep = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmMembStateRep.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmMembStateRep.setDescription('Total number of set member state replies received from the GWM.')
slbStatWlmMembStateRepErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmMembStateRepErr.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmMembStateRepErr.setDescription('Total number of set member state replies received where the return code code flag set indicating an error in processing of the set member state request.')
slbStatWlmWtMsgRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmWtMsgRecv.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmWtMsgRecv.setDescription('Total number of weight updates received from the GWM.')
slbStatWlmWtMsgParErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmWtMsgParErr.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmWtMsgParErr.setDescription('Total number of errorsencountered during parsing of the send weights message.')
slbStatWlmTotInvalidLb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmTotInvalidLb.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmTotInvalidLb.setDescription('This counter is incremented when the LB name in send weights message does not match the switch LB name.')
slbStatWlmTotInvalidGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmTotInvalidGrp.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmTotInvalidGrp.setDescription('This counter is incremented when the group name in send weights message does not match with any of the groups configured on the switch.')
slbStatWlmTotInvalidRealSer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmTotInvalidRealSer.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmTotInvalidRealSer.setDescription('This counter is incremented when the real server name in send weights message does not match with any of the reals configured on the switch.')
slbStatWlmMsgInvalidSASPHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmMsgInvalidSASPHeader.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmMsgInvalidSASPHeader.setDescription('Total number of messages received from the GWM with invalid headers.')
slbStatWlmMsgParseErr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmMsgParseErr.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmMsgParseErr.setDescription('Total number of parse errors.')
slbStatWlmMsgUnsupMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 21, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatWlmMsgUnsupMsgType.setStatus('current')
if mibBuilder.loadTexts: slbStatWlmMsgUnsupMsgType.setDescription('Total messages received where the message type is not supported by the switch.')
sessMirrorTotalCreateSessionMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalCreateSessionMsgRx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalCreateSessionMsgRx.setDescription('Total number of create session messages received.')
sessMirrorTotalCreateSessionMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalCreateSessionMsgTx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalCreateSessionMsgTx.setDescription('Total number of create session messages transmitted .')
sessMirrorTotalCreateDataSessionMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalCreateDataSessionMsgRx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalCreateDataSessionMsgRx.setDescription('Total number of create data session messages received.')
sessMirrorTotalCreateDataSessionMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalCreateDataSessionMsgTx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalCreateDataSessionMsgTx.setDescription('Total number of create data session messages transmitted.')
sessMirrorTotalUpdateSessionMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalUpdateSessionMsgRx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalUpdateSessionMsgRx.setDescription('Total number of update session messages received.')
sessMirrorTotalUpdateSessionMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalUpdateSessionMsgTx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalUpdateSessionMsgTx.setDescription('Total number of update session messages transmitted.')
sessMirrorTotalUpdateDataSessionMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalUpdateDataSessionMsgRx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalUpdateDataSessionMsgRx.setDescription('Total number of update data session messages received.')
sessMirrorTotalUpdateDataSessionMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalUpdateDataSessionMsgTx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalUpdateDataSessionMsgTx.setDescription('Total number of update data session messages transmitted.')
sessMirrorTotalDeleteSessionMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalDeleteSessionMsgRx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalDeleteSessionMsgRx.setDescription('Total number of delete session messages received.')
sessMirrorTotalDeleteSessionMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalDeleteSessionMsgTx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalDeleteSessionMsgTx.setDescription('Total number of delete session messages transmitted.')
sessMirrorTotalDeleteDataSessionMsgRx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalDeleteDataSessionMsgRx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalDeleteDataSessionMsgRx.setDescription('Total number of delete data session messages received.')
sessMirrorTotalDeleteDataSessionMsgTx = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalDeleteDataSessionMsgTx.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalDeleteDataSessionMsgTx.setDescription('Total number of delete data session messages transmitted.')
sessMirrorTotalSessionsCreated = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalSessionsCreated.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalSessionsCreated.setDescription('Total number of sessions created.')
sessMirrorTotalDataSessionsCreated = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalDataSessionsCreated.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalDataSessionsCreated.setDescription('Total number of data sessions created.')
sessMirrorTotalSessionsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalSessionsUpdated.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalSessionsUpdated.setDescription('Total number of sessions updated.')
sessMirrorTotalDataSessionsUpdated = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalDataSessionsUpdated.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalDataSessionsUpdated.setDescription('Total number of data sessions updated.')
sessMirrorTotalSessionsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalSessionsDeleted.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalSessionsDeleted.setDescription('Total number of sessions deleted.')
sessMirrorTotalDataSessionsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorTotalDataSessionsDeleted.setStatus('current')
if mibBuilder.loadTexts: sessMirrorTotalDataSessionsDeleted.setDescription('Total number of data sessions deleted.')
sessMirrorSessionTableFullErr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorSessionTableFullErr.setStatus('current')
if mibBuilder.loadTexts: sessMirrorSessionTableFullErr.setDescription('Error indicates session table full.')
sessMirrorNoPortErr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorNoPortErr.setStatus('current')
if mibBuilder.loadTexts: sessMirrorNoPortErr.setDescription('Error indicates unavailable port.')
sessMirrorSessionPresentErr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorSessionPresentErr.setStatus('current')
if mibBuilder.loadTexts: sessMirrorSessionPresentErr.setDescription('Error indicates session already present.')
sessMirrorSessionNotFoundErr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorSessionNotFoundErr.setStatus('current')
if mibBuilder.loadTexts: sessMirrorSessionNotFoundErr.setDescription('Error indicates session not found.')
sessMirrorCtrlSessionNotFoundErr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 22, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sessMirrorCtrlSessionNotFoundErr.setStatus('current')
if mibBuilder.loadTexts: sessMirrorCtrlSessionNotFoundErr.setDescription('Error indicates control session not found.')
slbRealServerInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1), )
if mibBuilder.loadTexts: slbRealServerInfoTable.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoTable.setDescription('The table of real server run-time information.')
slbRealServerInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbRealServerInfoIndex"))
if mibBuilder.loadTexts: slbRealServerInfoEntry.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoEntry.setDescription('A row in the real server information table.')
slbRealServerInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIndex.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoIndex.setDescription('The real server index')
slbRealServerInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoIpAddr.setDescription('IP address of the real server.')
slbRealServerMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerMacAddr.setStatus('current')
if mibBuilder.loadTexts: slbRealServerMacAddr.setDescription('The MAC address of the real server.')
slbRealServerInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoSwitchPort.setDescription('The switch port that the real server is connected to.')
slbRealServerInfoHealthLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("layer1", 1), ("layer3", 3), ("layer4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoHealthLayer.setDescription('The OSI layer at which the real server functionality is verified.')
slbRealServerInfoOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("overflow", 1), ("no-overflow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoOverflow.setDescription('The overflow state of the real server.')
slbRealServerInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("running", 2), ("failed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoState.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoState.setDescription('The state of the real server.')
slbRealServerInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerInfoVlan.setStatus('current')
if mibBuilder.loadTexts: slbRealServerInfoVlan.setDescription('The VLAN that the real server belongs to.')
slbRealServerRportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 3), )
if mibBuilder.loadTexts: slbRealServerRportInfoTable.setStatus('current')
if mibBuilder.loadTexts: slbRealServerRportInfoTable.setDescription('The table of real server rport run-time information.')
slbRealServerRportInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbRealServerRportRealIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbRealServerRportServIndex"))
if mibBuilder.loadTexts: slbRealServerRportInfoEntry.setStatus('current')
if mibBuilder.loadTexts: slbRealServerRportInfoEntry.setDescription('A row in the real server rport information table.')
slbRealServerRportRealIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerRportRealIndex.setStatus('current')
if mibBuilder.loadTexts: slbRealServerRportRealIndex.setDescription('The real server index')
slbRealServerRportServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerRportServIndex.setStatus('current')
if mibBuilder.loadTexts: slbRealServerRportServIndex.setDescription('The real server service index')
slbRealServerRportInfoRport = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerRportInfoRport.setStatus('current')
if mibBuilder.loadTexts: slbRealServerRportInfoRport.setDescription('The real server real port number')
slbRealServerRportInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("slowstart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerRportInfoState.setStatus('current')
if mibBuilder.loadTexts: slbRealServerRportInfoState.setDescription('The state of the real server port.')
slbRealServerRportInfoGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbRealServerRportInfoGroup.setStatus('current')
if mibBuilder.loadTexts: slbRealServerRportInfoGroup.setDescription('The real server group number.')
slbVirtServicesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4), )
if mibBuilder.loadTexts: slbVirtServicesInfoTable.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoTable.setDescription('The table of virtual server services run-time information.')
slbVirtServicesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbVirtServicesInfoVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbVirtServicesInfoSvcIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbVirtServicesInfoRealServIndex"))
if mibBuilder.loadTexts: slbVirtServicesInfoEntry.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoEntry.setDescription('A row in the virtual service information table.')
slbVirtServicesInfoVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoVirtServIndex.setDescription('The virtual server index.')
slbVirtServicesInfoSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoSvcIndex.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoSvcIndex.setDescription('The virtual service index.')
slbVirtServicesInfoRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoRealServIndex.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoRealServIndex.setDescription('The real server index.')
slbVirtServicesInfoVport = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoVport.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoVport.setDescription('The layer 4 virtual port number for the service.')
slbVirtServicesInfoRport = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoRport.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoRport.setDescription('The layer 4 real port number for the service.')
slbVirtServicesInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("blocked", 1), ("running", 2), ("failed", 3), ("disabled", 4), ("slowstart", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoState.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoState.setDescription('The state of the real server for this virtual service.')
slbVirtServicesInfoResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoResponseTime.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoResponseTime.setDescription('The health check response time for the real server for this virtual service.')
slbVirtServicesInfoWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbVirtServicesInfoWeight.setStatus('current')
if mibBuilder.loadTexts: slbVirtServicesInfoWeight.setDescription('The real server weight.')
slbSessionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5))
slbSessionInfoState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("start", 1), ("idle", 2), ("inprogress", 3), ("complete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSessionInfoState.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoState.setDescription("When this object is read the current state is returned. idle(2) indicates that there is no session binding table request in progress. When a read on this object returns inprogress(3) indicates that a session binding table retrieval request is in progress. Setting the value to start(1), will start a new session table retrieval operation based on the filtering criteria. complete(4) indicates that the session table has been retrieved. Once the slbSessionInfoTable is read the state should be set back to 'idle' which frees the session table buffer and others can issue a request command via SNMP.")
slbSessionInfoType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("all", 1), ("cip", 2), ("cport", 3), ("dip", 4), ("dport", 5), ("pip", 6), ("pport", 7), ("filter", 8), ("flag", 9), ("port", 10), ("real", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSessionInfoType.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoType.setDescription('This identifies the filtering criteria for the session binding table request. all(1) : Show all session entries cip(2) : Show all session entries with source IP address cport(3) : Show all session entries with source port dip(4) : Show all session entries with destination IP address dport(5) : Show all session entries with destination port pip(6) : Show all session entries with proxy IP address pport(7) : Show all session entries with proxy port filter(8): Show all session entries with matching filter flag(9) : Show all session entries with matching flag port(10) : Show all session entries with ingress port real(11) : Show all session entries with real IP address.')
slbSessionInfoIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSessionInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoIpAddr.setDescription('IP address of the requested filtering criteria 0.0.0.0 if the filtering criteria is not to match session entries with the same IP address.')
slbSessionInfoFilterId = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSessionInfoFilterId.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoFilterId.setDescription('This field indicates that the session is created by filtering code as a result of the IP header keys matching the filtering criteria. 0 if slbSessionInfoFilterID is not the matching criteria.')
slbSessionInfoPortId = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSessionInfoPortId.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoPortId.setDescription('The <port number> if the filtering criteria is (port) to match all session entries with the matching ingress port or this represents the <real port> if the requested filtering criteria is to match session entries with (pport) proxy port, (cport) source port, (dport) destination port, This entry is 0 if the filtering criteria is not to match session entries with the same port.')
slbSessionInfoFlag = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20))).clone(namedValues=NamedValues(("eFlag", 1), ("lFlag", 2), ("nFlag", 3), ("pFlag", 4), ("sFlag", 5), ("tFlag", 6), ("uFlag", 7), ("wFlag", 8), ("ruFlag", 9), ("riFlag", 10), ("viFlag", 11), ("vrFlag", 12), ("vsFlag", 13), ("vmFlag", 14), ("vdFlag", 15), ("none", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSessionInfoFlag.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoFlag.setDescription('If the filtering criteria is flag select one of e|l|n|p|s|t|u|w(Flag) none(20) is selected if flag is not the fitering criteria. eFlag: Indicates the session is in use and will be aged out if no traffic is received within session timeout value. lFlag: Indicates the session is a link load balance session. nFlag: Indicates the session only translates the destination MAC when forwarding client traffic to the real server. pFlag: Indicates the session is a persistent session and is not to be aged out. Fields (6), (7) and (8) are not shown for persistent session. sFlag: Indicates the session is a persistent session and the application is SSL or Cookie Pbind. tFlag: Indicates the session is TCP rate limiting per-client entry. uFlag: Indicates the session is L7 delay binding and switch is trying to open TCP connection to real server. wFlag: Indicates the session only translates the destination MAC when forwarding layer 7 WCR traffic to the real server. ruFlag: Indicates the session is a UDP rate limiting per-client entry. riFlag: Indicates the session is a ICMP rate limiting per-client entry. viFlag: Indicates the session is a SIP INVITE session. vrFlag: Indicates the session is a SIP REGISTER session. vsFlag: Indicates the session is a SIP SUBSCRIBE session. vmFlag: Indicates the session is a SIP MESSAGE session. vdFlag: Indicates the session is a SIP NAT data session.')
slbSessionInfoStringFormatFlag = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("formatted", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbSessionInfoStringFormatFlag.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoStringFormatFlag.setDescription('The flag which determines if the session table entries have to be formatted or (none) indicates no formatting to be done.')
slbSessionInfoMaxSessDump = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSessionInfoMaxSessDump.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoMaxSessDump.setDescription('The maximum number of sessions that can exist at any given time.')
slbSessionInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 8), )
if mibBuilder.loadTexts: slbSessionInfoTable.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoTable.setDescription('The table of SLB session entries.')
slbSessionInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbSessionInfoSpIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbSessionInfoIndex"))
if mibBuilder.loadTexts: slbSessionInfoEntry.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoEntry.setDescription('Information about SLB sessions.')
slbSessionInfoSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSessionInfoSpIndex.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoSpIndex.setDescription('The SP which created the session.')
slbSessionInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSessionInfoIndex.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoIndex.setDescription('The index to the slbSessionInfoTable.')
slbSessionInfoString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 5, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSessionInfoString.setStatus('current')
if mibBuilder.loadTexts: slbSessionInfoString.setDescription("The string representing the SLB session entries in the formatted case: The fields, (1)-(13), associated with a session, as identified in the example below are described in the following. 3, 01: 1.1.1.1 4586, 2.2.2.1 http -> 3567 3.3.3.1 http age 6 f:10 ELNPSRtUW c:# (1) (2) (3) (4) (5) (6) (7) (8) (9) (10) (11) (12) (13) 3, 01: 1.1.1.1 4586, 2.2.2.1 http -> (1) (2) (3) (4) (5) (6) 1.1.1.2 3567 3.3.3.1 http age 6 f:10 ELNPSRtUW c:# (7a) (7) (8) (9) (10) (11) (12) (13) ------------------------------------------------------------------ (1) SP number: This field indicates which SP created the session. (2) Ingress port: This field shows the physical port# of the client traffic that entered to the switch. (3) Source IP address: This field contains the source IP address from client IP packet. (4) Source port: This field identifies the TCP/UDP source port from client packet. (5) Destination IP address: This is the destination IP address from client TCP/UDP packet. For load balancing, this address is the virtual IP address. For filtering redirect, this address is the destination server's address. (6) Destination port: This field identifies the TCP/UDP destination port from client packet. (7a)Proxy IP address: This field contains the proxy IP address substituted by the switch. (7) Proxy port: This field identifies the TCP/UDP source port substituted by the switch. The switch does this substitution when Direct Access Mode is enabled or Proxy is enabled. (8) Real server IP address: For load balancing, this field contains the IP address of the real server that the switch selects to forward client packet to. If the switch does not find live server, this field is the same as destination IP address(5). e.g. 3,01: 1.1.1.1 1040, 2.2.2.1 http -> 3.3.3.1 http age 10 3,01: 1.1.1.1 1040, 2.2.2.1 http -> 2.2.2.1 http age 10 For filtering, this field also shows the real server IP address. No address is shown if the filter action is Allow, Deny or NAT. It will show ALLOW, DENY or NAT instead. e.g. 3,01: 1.1.1.1 1040, 2.2.2.1 http -> 3.3.3.1 http age 10 f:11 3,01: 1.1.1.1 1040, 2.2.2.1 http ALLOW age 10 f:22 (9) Server port: For load balancing, this field is the same as destination port(6) except for the RTSP UDP session. For RTSP UDP session, this server port is obtained from client-server negotiation. e.g. 3,01: 1.1.1.1 1040, 2.2.2.1 http -> 3.3.3.1 http age 10 3,01: 1.1.1.1 6970, 2.2.2.1 rtsp -> 3.3.3.1 21220 age 10 P For filtering, this field is the filtering application port. It is for internal use only. This field can be urlwcr, wcr, idslb, linkslb or nonat. e.g. 3,01: 1.1.1.1 1040, 2.2.2.1 http -> 3.3.3.1 urlwcr age 4 f:123 2,07: 1.1.1.1 1706, 2.2.2.1 http -> 192.168.4.10 linklb age 8 f:10 E (10) Age: This is the session timeout value. If no packet is received within the value specified, the session is freed. e.g. age 10 - The session is aged out in 10 minutes. age < 160 - The session is aged out in 160 minutes. This < indicates that slowage is used(user configures /cfg/slb/adv/slowage) (11) Filter number: This field indicates that the session is created by filtering code as a result of the IP header keys matching the filtering criteria. (12) Flag: E: Indicates the session is in use and will be aged out if no traffic is received within session timeout value. L: Indicates the session is a link load balance session. N: Indicates the session only translates the destination MAC when forwarding client traffic to the real server. P: Indicates the session is a persistent session and is not to be aged out. Fields (6), (7) and (8) are not shown for persistent session. S: Indicates the session is a persistent session and the application is SSL or Cookie Pbind. Rt: Indicates the session is TCP rate limiting per-client entry. Ru: Indicates the session is UDP rate limiting per-client entry. Ri: Indicates the session is ICMP rate limiting per-client entry. U: Indicates the session is L7 delay binding and switch is trying to open TCP connection to real server. W: Indicates the session only translates the destination MAC when forwarding layer 7 WCR traffic to the real server. (13) Persistent session user count: This counter indicates the number of client sessions created associated with this persistent session.")
gslbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6))
gslbInfoRemRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 1), )
if mibBuilder.loadTexts: gslbInfoRemRealServerTable.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemRealServerTable.setDescription('The Global SLB virtual server information table.')
gslbInfoRemRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbInfoRemRealServerIdx"))
if mibBuilder.loadTexts: gslbInfoRemRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemRealServerEntry.setDescription('A row in the Global SLB remote real server information table.')
gslbInfoRemRealServerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemRealServerIdx.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemRealServerIdx.setDescription('The remote real server number that identifies the remote real server.')
gslbInfoRemRealServerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemRealServerIpAddr.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemRealServerIpAddr.setDescription('IP address of the remote real server.')
gslbInfoRemRealServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemRealServerName.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemRealServerName.setDescription('The name of the remote real server.')
gslbInfoRemRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("running", 2), ("failed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemRealServerState.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemRealServerState.setDescription('The state of the remote real server.')
gslbInfoVirtServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2), )
if mibBuilder.loadTexts: gslbInfoVirtServerTable.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerTable.setDescription('The Global SLB virtual server information table.')
gslbInfoVirtServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbInfoVirtServerIdx"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbInfoVirtServerServiceIdx"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbInfoVirtServerRserverIdx"))
if mibBuilder.loadTexts: gslbInfoVirtServerEntry.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerEntry.setDescription('A row in the Global SLB virtual server information table.')
gslbInfoVirtServerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerIdx.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerIdx.setDescription('The virtual server number that identifies the virtual server.')
gslbInfoVirtServerServiceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerServiceIdx.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerServiceIdx.setDescription('The virtual server service number that identifies the virtual service.')
gslbInfoVirtServerRserverIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerRserverIdx.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerRserverIdx.setDescription('The real server number that identifies a remote real server. An index of 0 indicates virtual server.')
gslbInfoVirtServerDname = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerDname.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerDname.setDescription('The domain name of the virtual server and remote real server.')
gslbInfoVirtServerVirtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerVirtPort.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerVirtPort.setDescription('The service port of the virtual server and remote real server.')
gslbInfoVirtServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerIpAddress.setDescription('The IP address of the virtual server or remote real server.')
gslbInfoVirtServerResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerResponse.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerResponse.setDescription('The health check response time of the virtual server or remote real server.')
gslbInfoVirtServerSessAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerSessAvail.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerSessAvail.setDescription('The available sessions of the virtual server or remote real server.')
gslbInfoVirtServerSessCur = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerSessCur.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerSessCur.setDescription('The current sessions of the virtual server or remote real server.')
gslbInfoVirtServerSessMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerSessMax.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerSessMax.setDescription('The maximum sessions supported by the virtual server or remote real server.')
gslbInfoVirtServerSessUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerSessUtil.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerSessUtil.setDescription('The sessions utilization (current/max) of the virtual server or remote real server.')
gslbInfoVirtServerCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerCpuUtil.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerCpuUtil.setDescription('The CPU utilization of the virtual server or remote real server.')
gslbInfoVirtServerRemSite = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerRemSite.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerRemSite.setDescription('The remote site of the remote real server. For virtual server, the remote site is 0.')
gslbInfoVirtServerWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerWeight.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerWeight.setDescription('The weight of the virtual server or remote real server.')
gslbInfoVirtServerAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerAvail.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerAvail.setDescription('The availability of the virtual server or remote real server.')
gslbInfoVirtServerRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 0), ("northamerica", 1), ("southamerica", 2), ("europe", 3), ("caribbean", 4), ("pacificrim", 5), ("subsahara", 6), ("japan", 7), ("caribbeansubsahara", 8), ("africa", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoVirtServerRegion.setStatus('current')
if mibBuilder.loadTexts: gslbInfoVirtServerRegion.setDescription('The region of the virtual server or remote real server.')
gslbInfoRemSiteTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 3), )
if mibBuilder.loadTexts: gslbInfoRemSiteTable.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemSiteTable.setDescription('The Global SLB remote site information table.')
gslbInfoRemSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbInfoRemSiteIdx"))
if mibBuilder.loadTexts: gslbInfoRemSiteEntry.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemSiteEntry.setDescription('A row in the Global SLB remote site information table.')
gslbInfoRemSiteIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemSiteIdx.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemSiteIdx.setDescription('The remote site number that identifies the remote site.')
gslbInfoRemSitePrimaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemSitePrimaryIp.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemSitePrimaryIp.setDescription('The primary IP address of the remote site.')
gslbInfoRemSiteSecondaryIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemSiteSecondaryIp.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemSiteSecondaryIp.setDescription('The secondary IP address of the remote site.')
gslbInfoRemSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemSiteName.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemSiteName.setDescription('The name of the remote site.')
gslbInfoRemSiteState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("running", 2), ("failed", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoRemSiteState.setStatus('current')
if mibBuilder.loadTexts: gslbInfoRemSiteState.setDescription('The state of the remote site.')
gslbInfoDnsSec = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 4))
gslbInfoDnsSecKey = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 4, 2))
gslbInfoDnsSecKeyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 4, 2, 1), )
if mibBuilder.loadTexts: gslbInfoDnsSecKeyTable.setStatus('current')
if mibBuilder.loadTexts: gslbInfoDnsSecKeyTable.setDescription('.')
gslbInfoDnsSecKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 4, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbInfoDnsSecKeyID"))
if mibBuilder.loadTexts: gslbInfoDnsSecKeyEntry.setStatus('current')
if mibBuilder.loadTexts: gslbInfoDnsSecKeyEntry.setDescription('.')
gslbInfoDnsSecKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 4, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoDnsSecKeyID.setStatus('current')
if mibBuilder.loadTexts: gslbInfoDnsSecKeyID.setDescription('DNS Sec Table Key.')
gslbInfoDnsSecKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 6, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initRollProess", 1), ("newKeyCreated", 2), ("newZskKeyDeployed", 3), ("oldKeyRemoval", 4), ("retrDsFromParent", 5), ("newKskKeyDeployed", 6), ("waitDsChangeOnParent", 7), ("rolloverNotRunning", 8), ("invalid", 9), ("expired", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbInfoDnsSecKeyStatus.setStatus('current')
if mibBuilder.loadTexts: gslbInfoDnsSecKeyStatus.setDescription('Key status.')
wlmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 7))
slbWlmInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 7, 1), )
if mibBuilder.loadTexts: slbWlmInfoTable.setStatus('current')
if mibBuilder.loadTexts: slbWlmInfoTable.setDescription('The table of workload manager run-time information.')
slbWlmInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 7, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbWlmInfoIndex"))
if mibBuilder.loadTexts: slbWlmInfoEntry.setStatus('current')
if mibBuilder.loadTexts: slbWlmInfoEntry.setDescription('A row in the workload manager information table.')
slbWlmInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbWlmInfoIndex.setStatus('current')
if mibBuilder.loadTexts: slbWlmInfoIndex.setDescription('The workload manager index.')
slbWlmInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbWlmInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbWlmInfoIpAddr.setDescription('IP address of the workload manager.')
slbWlmInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbWlmInfoPort.setStatus('current')
if mibBuilder.loadTexts: slbWlmInfoPort.setDescription('The port number of the workload manager.')
slbWlmInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbWlmInfoState.setStatus('current')
if mibBuilder.loadTexts: slbWlmInfoState.setDescription('The state of the workload manager.')
slbPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8))
slbPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1), )
if mibBuilder.loadTexts: slbPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: slbPortInfoTable.setDescription('The table of port information.')
slbPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbPortInfoIndex"))
if mibBuilder.loadTexts: slbPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: slbPortInfoEntry.setDescription('A row in the port information table.')
slbPortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortInfoIndex.setStatus('current')
if mibBuilder.loadTexts: slbPortInfoIndex.setDescription('Index of slb port.')
slbPortClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortClientState.setStatus('current')
if mibBuilder.loadTexts: slbPortClientState.setDescription('Client state on the slb port.')
slbPortSerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortSerState.setStatus('current')
if mibBuilder.loadTexts: slbPortSerState.setDescription('Server state on the slb port.')
slbPortFltState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortFltState.setStatus('current')
if mibBuilder.loadTexts: slbPortFltState.setDescription(' Filter state on the slb port .')
slbPortRTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortRTSState.setStatus('current')
if mibBuilder.loadTexts: slbPortRTSState.setDescription('RTS processing state on the slb port.')
slbPortHotStandbyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortHotStandbyState.setStatus('current')
if mibBuilder.loadTexts: slbPortHotStandbyState.setDescription('Hot standby state on the slb port.')
slbPortInterSWState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortInterSWState.setStatus('current')
if mibBuilder.loadTexts: slbPortInterSWState.setDescription('Inter-switch processing state on the slb port.')
slbPortProxyState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortProxyState.setStatus('current')
if mibBuilder.loadTexts: slbPortProxyState.setDescription('Proxy state on the slb port.')
slbPortIdSlbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortIdSlbState.setStatus('current')
if mibBuilder.loadTexts: slbPortIdSlbState.setDescription('Intrusion detection server load balancing state on the slb port.')
slbPortSymantecState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortSymantecState.setStatus('current')
if mibBuilder.loadTexts: slbPortSymantecState.setDescription(' Symantec Processing state on the slb port.')
slbPortFitersAdded = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 8, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbPortFitersAdded.setStatus('current')
if mibBuilder.loadTexts: slbPortFitersAdded.setDescription('The filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port.')
synAttackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 9))
synAtkState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAtkState.setStatus('current')
if mibBuilder.loadTexts: synAtkState.setDescription('State of the Syn Attack, represents whether it is running or not.')
synAtkInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAtkInterval.setStatus('current')
if mibBuilder.loadTexts: synAtkInterval.setDescription('Specifies interval period of syn attack inspection in seconds, it returns 0 if synAtk is OFF.')
synAtkThreshhold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAtkThreshhold.setStatus('current')
if mibBuilder.loadTexts: synAtkThreshhold.setDescription('Specifies threshold of syn attack alram, it returns 0 if synAtk is OFF .')
synAtkWarningFired = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAtkWarningFired.setStatus('current')
if mibBuilder.loadTexts: synAtkWarningFired.setDescription('Specifies number of times syn attack warnings fired.')
synAtkResponseInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAtkResponseInterval.setStatus('current')
if mibBuilder.loadTexts: synAtkResponseInterval.setDescription('Specifies interval period of syn cookie generation in milliseconds, it returns 0 if synAtk is OFF.')
synAtkOnOff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: synAtkOnOff.setStatus('current')
if mibBuilder.loadTexts: synAtkOnOff.setDescription('Globaly set SYN Protection ON/FF.')
slbFreeVirtualServerIndexInfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFreeVirtualServerIndexInfo.setStatus('current')
if mibBuilder.loadTexts: slbFreeVirtualServerIndexInfo.setDescription('Retrieve the next virtual server index')
slbFreeRealGroupIndexInfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFreeRealGroupIndexInfo.setStatus('current')
if mibBuilder.loadTexts: slbFreeRealGroupIndexInfo.setDescription('Retrieve the next server group index')
slbFreeRealServerIndexInfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbFreeRealServerIndexInfo.setStatus('current')
if mibBuilder.loadTexts: slbFreeRealServerIndexInfo.setDescription('Retrieve the next real server index')
slbOperRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 1), )
if mibBuilder.loadTexts: slbOperRealServerTable.setStatus('current')
if mibBuilder.loadTexts: slbOperRealServerTable.setDescription('The table of real servers.')
slbOperRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbOperRealServerIndex"))
if mibBuilder.loadTexts: slbOperRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbOperRealServerEntry.setDescription('A row in the slbOperRealServerTable ')
slbOperRealServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbOperRealServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbOperRealServerIndex.setDescription('The index for the real server.')
slbOperRealServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("cookiepersistent", 3), ("fastage", 4), ("cookiepersistentfastage", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperRealServerStatus.setStatus('current')
if mibBuilder.loadTexts: slbOperRealServerStatus.setDescription("This an action object which is used to temporarily enable/disable a real server. The real server will be returned to its configured operational mode when the switch is reset. Setting the value to 'cookiepersistant' allows cookie persistent HTTP 1.0 sessions when the real server is offline.'fastage' option is for removing the existing sessions. And 'cookiepersistentfastage' allows cookie persistent sessions and remove the existing sessions when real server is offline.")
slbOperClearSessionTable = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperClearSessionTable.setStatus('current')
if mibBuilder.loadTexts: slbOperClearSessionTable.setDescription('This is an action object to clear session binding table. ok(1) is returned when read.')
slbOperConfigSync = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("sync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperConfigSync.setStatus('current')
if mibBuilder.loadTexts: slbOperConfigSync.setDescription("When set to a value of 'sync(2)' it synchronizes the SLB, filter and VRRP configuration on a peer switch. To take effect, peers must be configured on the switches and the administrator password on the switches must be identical. 'ok(1)' is returned when the object os read.")
gslbOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4))
gslbOperQuery = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 1))
gslbOperAdd = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 2))
gslbOperRemove = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperRemove.setStatus('current')
if mibBuilder.loadTexts: gslbOperRemove.setDescription('This is an action object to Remove all entries from Global SLB DNS persistence cache. ok(1) is returned when read.')
gslbOperAvPersis = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 4))
gslbOperClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperClear.setStatus('current')
if mibBuilder.loadTexts: gslbOperClear.setDescription('This is an action object when we set to a value of(2) it clear the client cache of dynamic entries. ok(1) is returned when read.')
gslbOperDnsSec = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 6))
gslbOperDnsSecTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 6, 1), )
if mibBuilder.loadTexts: gslbOperDnsSecTable.setStatus('current')
if mibBuilder.loadTexts: gslbOperDnsSecTable.setDescription('.')
gslbOperDnsSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 6, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "gslbOperDnsSecKeyID"))
if mibBuilder.loadTexts: gslbOperDnsSecEntry.setStatus('current')
if mibBuilder.loadTexts: gslbOperDnsSecEntry.setDescription('.')
gslbOperDnsSecKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbOperDnsSecKeyID.setStatus('current')
if mibBuilder.loadTexts: gslbOperDnsSecKeyID.setDescription('DNS Sec Table Key.')
gslbOperDnsSecEmergencyRollover = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("rollover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperDnsSecEmergencyRollover.setStatus('current')
if mibBuilder.loadTexts: gslbOperDnsSecEmergencyRollover.setDescription('By setting the value to rollover(2), DNSSEC emergency rollover procedure of a key will be Performed.')
gslbOperDnsSecImmediateRollover = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("rollover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperDnsSecImmediateRollover.setStatus('current')
if mibBuilder.loadTexts: gslbOperDnsSecImmediateRollover.setDescription('By setting the value to rollover(2), DNSSEC immediate rollover procedure of a key will be Performed.')
gslbOperQueryDomain = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperQueryDomain.setStatus('current')
if mibBuilder.loadTexts: gslbOperQueryDomain.setDescription('Domain to query Global SLB selection.')
gslbOperQuerySrcIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperQuerySrcIp.setStatus('current')
if mibBuilder.loadTexts: gslbOperQuerySrcIp.setDescription('Source Ip Address to query Global SLB selection.')
gslbOperSendQuery = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("query", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperSendQuery.setStatus('current')
if mibBuilder.loadTexts: gslbOperSendQuery.setDescription('Query Global SLB selection.When set to a value of Query(2) it sends Global SLB selection query.Ok(1) is returned when this object is read.')
gslbOperQuerySrcIpV6 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperQuerySrcIpV6.setStatus('current')
if mibBuilder.loadTexts: gslbOperQuerySrcIpV6.setDescription(' Source Ip V6 Address to query Global SLB selection. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
gslbOperQuerySrcIpVer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gslbOperQuerySrcIpVer.setStatus('current')
if mibBuilder.loadTexts: gslbOperQuerySrcIpVer.setDescription('Source Ip Version to query Global SLB selection.')
gslbOperQueryType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("aaaa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperQueryType.setStatus('current')
if mibBuilder.loadTexts: gslbOperQueryType.setDescription('Global SLB selection Query Type.')
gslbOperAddDomain = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAddDomain.setStatus('current')
if mibBuilder.loadTexts: gslbOperAddDomain.setDescription('Domain to be added into Global SLB DNS Presistence cache.')
gslbOperAddSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAddSrcIp.setStatus('current')
if mibBuilder.loadTexts: gslbOperAddSrcIp.setDescription('Source Ip Address to be added into Global SLB DNS Persistence cache.')
gslbOperAddServerIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAddServerIp.setStatus('current')
if mibBuilder.loadTexts: gslbOperAddServerIp.setDescription('Server Ip Address to be added into Global SLB DNS Persistence cache.')
gslbOperAddEntry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("add", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAddEntry.setStatus('current')
if mibBuilder.loadTexts: gslbOperAddEntry.setDescription('Add entry to Global SLB DNS persistence cache. When set to a value of add(2) Entry will be added into Global SLB DNS persistence cache. Ok(1) is returned when object is read.')
gslbOperAddSrcIp6 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAddSrcIp6.setStatus('current')
if mibBuilder.loadTexts: gslbOperAddSrcIp6.setDescription('Source Ip Address to be added into Global SLB DNS Persistence cache. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
gslbOperAddServerIp6 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAddServerIp6.setStatus('current')
if mibBuilder.loadTexts: gslbOperAddServerIp6.setDescription('Server IPV6 Address to be added into Global SLB DNS Persistence cache. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
gslbOperAvPersisVirtNum = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAvPersisVirtNum.setStatus('current')
if mibBuilder.loadTexts: gslbOperAvPersisVirtNum.setDescription('Enter Virtual Server Number for which GSLB availability persistence should be enabled/disabled.')
gslbOperAvPersisState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAvPersisState.setStatus('current')
if mibBuilder.loadTexts: gslbOperAvPersisState.setDescription('Enable or Disable GSLB availability persistence.')
gslbOperAvpersistence = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("config", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gslbOperAvpersistence.setStatus('current')
if mibBuilder.loadTexts: gslbOperAvpersistence.setDescription('When we set to a value of 2(config),it enable/disable GSLB availability persistence for configures virtual server. Ok(1) is returned when this object is read.')
slbOperGroupRealServerTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 5), )
if mibBuilder.loadTexts: slbOperGroupRealServerTable.setStatus('current')
if mibBuilder.loadTexts: slbOperGroupRealServerTable.setDescription('The table of real server per group.')
slbOperGroupRealServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbOperRealServGroupIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbOperGroupRealServIndex"))
if mibBuilder.loadTexts: slbOperGroupRealServerEntry.setStatus('current')
if mibBuilder.loadTexts: slbOperGroupRealServerEntry.setDescription('A row in the Real server group table.')
slbOperRealServGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbOperRealServGroupIndex.setStatus('current')
if mibBuilder.loadTexts: slbOperRealServGroupIndex.setDescription('The real server group index.')
slbOperGroupRealServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbOperGroupRealServIndex.setStatus('current')
if mibBuilder.loadTexts: slbOperGroupRealServIndex.setDescription('The real server index.')
slbOperGroupRealServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperGroupRealServerState.setStatus('current')
if mibBuilder.loadTexts: slbOperGroupRealServerState.setDescription('This an action object which is used to temporarily enable/disable a real server in group. The real server will be returned to its configured operational mode when the switch is reset.')
slbOperSessionDel = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 6))
slbOperSessionDelSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperSessionDelSrcIp.setStatus('current')
if mibBuilder.loadTexts: slbOperSessionDelSrcIp.setDescription('Session Source IP Address to be deleted')
slbOperSessionDelSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperSessionDelSrcPort.setStatus('current')
if mibBuilder.loadTexts: slbOperSessionDelSrcPort.setDescription('Session Source Port to be deleted')
slbOperSessionDelDestIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperSessionDelDestIp.setStatus('current')
if mibBuilder.loadTexts: slbOperSessionDelDestIp.setDescription('Session Destination IP Address to be deleted')
slbOperSessionDelDestPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperSessionDelDestPort.setStatus('current')
if mibBuilder.loadTexts: slbOperSessionDelDestPort.setDescription('Session Destination Port to be deleted')
slbOperSessionDelTransType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperSessionDelTransType.setStatus('current')
if mibBuilder.loadTexts: slbOperSessionDelTransType.setDescription('Set a flag indicating whether Transport Type is TCP or UDP')
slbOperSessionDelete = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperSessionDelete.setStatus('current')
if mibBuilder.loadTexts: slbOperSessionDelete.setDescription('This is an action object to delete session table entry. when set to a value of delete(2) it deletes session table entry. Ok(1) is returned when object is read.')
slbOperHttpCachePurgeTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 7), )
if mibBuilder.loadTexts: slbOperHttpCachePurgeTable.setStatus('current')
if mibBuilder.loadTexts: slbOperHttpCachePurgeTable.setDescription('The table of services per server.')
slbOperHttpCachePurgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbOperHttpCachePurgeServerIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbOperHttpCachePurgeServiceIndex"))
if mibBuilder.loadTexts: slbOperHttpCachePurgeEntry.setStatus('current')
if mibBuilder.loadTexts: slbOperHttpCachePurgeEntry.setDescription('A row in the http cache purge service table.')
slbOperHttpCachePurgeServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbOperHttpCachePurgeServerIndex.setStatus('current')
if mibBuilder.loadTexts: slbOperHttpCachePurgeServerIndex.setDescription('The Http Cache purge server index.')
slbOperHttpCachePurgeServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbOperHttpCachePurgeServiceIndex.setStatus('current')
if mibBuilder.loadTexts: slbOperHttpCachePurgeServiceIndex.setDescription('The Http Cache purge service index.')
slbOperHttpCachePurgeURL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 7, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbOperHttpCachePurgeURL.setStatus('current')
if mibBuilder.loadTexts: slbOperHttpCachePurgeURL.setDescription('Set object URL or all.')
ocspCachePurge = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 8))
slbOperOcspCachePurge = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 4, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbOperOcspCachePurge.setStatus('current')
if mibBuilder.loadTexts: slbOperOcspCachePurge.setDescription('Client authentication policy id or All.')
slbCurCfgLinklbState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgLinklbState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgLinklbState.setDescription('Enable or disable Inbound Link load balancing. ')
slbNewCfgLinklbState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgLinklbState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgLinklbState.setDescription('Enable or disable Inbound Link load balancing. ')
slbCurCfgLinklbRealGroup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgLinklbRealGroup.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgLinklbRealGroup.setDescription('The real server group number for Link load balancing.')
slbNewCfgLinklbRealGroup = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgLinklbRealGroup.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgLinklbRealGroup.setDescription('The real server group number for Link load balancing.')
slbCurCfgLinklbTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgLinklbTTL.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgLinklbTTL.setDescription('Set Time to Live for DNS resource records.')
slbNewCfgLinklbTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewCfgLinklbTTL.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgLinklbTTL.setDescription('Set Time to Live for DNS resource records.')
slbLinklbDrecord = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5))
slbDrecordTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbDrecordTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbDrecordTableMaxSize.setDescription('The maximum number of entries in Drecord table.')
slbCurCfgDrecordTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 2), )
if mibBuilder.loadTexts: slbCurCfgDrecordTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordTable.setDescription('The table of Domain records for Inbound link load balancing in the current configuration block.')
slbCurCfgDrecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgDrecordIndex"))
if mibBuilder.loadTexts: slbCurCfgDrecordEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordEntry.setDescription('A row in the Domain record table for Inbound Link Load balancing.')
slbCurCfgDrecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDrecordIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordIndex.setDescription('The index of the Domain record table.')
slbCurCfgDomainRecordState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDomainRecordState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDomainRecordState.setDescription('Enable/disable a domain record.')
slbCurCfgDomainRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDomainRecordName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDomainRecordName.setDescription('The name of the domain record.')
slbNewCfgDrecordTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 3), )
if mibBuilder.loadTexts: slbNewCfgDrecordTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordTable.setDescription('The table of Domain records for Inbound link load balancing in the new configuration block.')
slbNewCfgDrecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgDrecordIndex"))
if mibBuilder.loadTexts: slbNewCfgDrecordEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordEntry.setDescription('A row in the Domain record table for Inbound Link Load balancing.')
slbNewCfgDrecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgDrecordIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordIndex.setDescription('The index of the Domain record table.')
slbNewCfgDomainRecordState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgDomainRecordState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDomainRecordState.setDescription('Enable/disable a domain record.')
slbNewCfgDomainRecordName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 34))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgDomainRecordName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDomainRecordName.setDescription('The name of the domain record.')
slbNewCfgDrecordDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgDrecordDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbDrecordVirtRealMappingTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbDrecordVirtRealMappingTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbDrecordVirtRealMappingTableMaxSize.setDescription('The maximum number of entries in Drecord Virtual Real server mapping Table.')
slbCurCfgDrecordVirtRealMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 5), )
if mibBuilder.loadTexts: slbCurCfgDrecordVirtRealMappingTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordVirtRealMappingTable.setDescription('The table of Domain records and virtual server and real server mappings.')
slbCurCfgDrecordVirtRealMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgDomainRecordIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgEntryIndex"))
if mibBuilder.loadTexts: slbCurCfgDrecordVirtRealMappingEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordVirtRealMappingEntry.setDescription('A row in the Domain record and virtual/real server mapping table for Inbound Link Load balancing.')
slbCurCfgDomainRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDomainRecordIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDomainRecordIndex.setDescription('The number of the domain record.')
slbCurCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgEntryIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgEntryIndex.setDescription('The number of the entry virtual real server mapping.')
slbCurCfgDrecordVirtServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDrecordVirtServer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordVirtServer.setDescription('The virtual server number.')
slbCurCfgDrecordRealServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDrecordRealServer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordRealServer.setDescription('The Real server number.')
slbCurCfgDrecordEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgDrecordEntryState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgDrecordEntryState.setDescription('Enable/disable a mapping in this table.')
slbNewCfgDrecordVirtRealMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6), )
if mibBuilder.loadTexts: slbNewCfgDrecordVirtRealMappingTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordVirtRealMappingTable.setDescription('The table of Domain records and virtual server and real server mappings.')
slbNewCfgDrecordVirtRealMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgDomainRecordIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgEntryIndex"))
if mibBuilder.loadTexts: slbNewCfgDrecordVirtRealMappingEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordVirtRealMappingEntry.setDescription('A row in the Domain record and virtual/real server mapping table for Inbound Link Load balancing.')
slbNewCfgDomainRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgDomainRecordIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDomainRecordIndex.setDescription('The number of the domain record.')
slbNewCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgEntryIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgEntryIndex.setDescription('The number of the virtual real server mapping.')
slbNewCfgDrecordVirtServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgDrecordVirtServer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordVirtServer.setDescription('The virtual server number.')
slbNewCfgDrecordRealServer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgDrecordRealServer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordRealServer.setDescription('The Real server number.')
slbNewCfgDrecordEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgDrecordEntryState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordEntryState.setDescription('Enable/disable a mapping in this table.')
slbNewCfgDrecordEntryDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 16, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgDrecordEntryDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgDrecordEntryDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbCurSslCfgSSLAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLAdminStatus.setDescription('Status (enable/disable) of SSL policy.')
slbCurSslCfgSSLPolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5), )
if mibBuilder.loadTexts: slbCurSslCfgSSLPolTable.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolTable.setDescription('The table for configuring ssl policy.')
slbCurSslCfgSSLPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurSslCfgSSLPolNameIdIndex"))
if mibBuilder.loadTexts: slbCurSslCfgSSLPolEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolEntry.setDescription('A row in the ssl policy table.')
slbCurSslCfgSSLPolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolNameIdIndex.setDescription('The SSL policy name(key id) as an index.')
slbCurSslCfgSSLPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolName.setDescription('SSL policy name.')
slbCurSslCfgSSLPolPassInfoCipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoCipherName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoCipherName.setDescription('The SSL cipher-suite header name.')
slbCurSslCfgSSLPolPassInfoCipherFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoCipherFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoCipherFlag.setDescription('SSL cipher-suite information to backend servers enabled.')
slbCurSslCfgSSLPolPassInfoVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoVersionName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoVersionName.setDescription('SSL version header name.')
slbCurSslCfgSSLPolPassInfoVersionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoVersionFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoVersionFlag.setDescription('SSL version information to backend servers enabled.')
slbCurSslCfgSSLPolPassInfoHeadBitsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoHeadBitsName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoHeadBitsName.setDescription('The passive cipher bits information to backend server.')
slbCurSslCfgSSLPolPassInfoHeadBitsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoHeadBitsFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoHeadBitsFlag.setDescription('Cipher bits information to backend servers enabled.')
slbCurSslCfgSSLPolPassInfoFrontend = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoFrontend.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolPassInfoFrontend.setDescription('Enable/Disable add Front-End-Https: on header.')
slbCurSslCfgSSLPolCipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolCipherName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolCipherName.setDescription('Cipher name for SSL.')
slbCurSslCfgSSLPolCipherUserdef = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolCipherUserdef.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolCipherUserdef.setDescription('Cipher-suite allowed for SSL.')
slbCurSslCfgSSLPolIntermcaChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolIntermcaChainName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolIntermcaChainName.setDescription('Intermediate CA certificate chain name.')
slbCurSslCfgSSLPolIntermcaChainType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolIntermcaChainType.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolIntermcaChainType.setDescription('Intermediate CA certificate chain type certificate=cert,Group=group,None=<empty string>.')
slbCurSslCfgSSLPolBecipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolBecipher.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolBecipher.setDescription('Allowed cipher-suites in backend SSL [0-low, 1-midium, 2-high] .')
slbCurSslCfgSSLPolAuthpol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolAuthpol.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolAuthpol.setDescription('Client authentication policy.')
slbCurSslCfgSSLPolConvuri = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolConvuri.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolConvuri.setDescription('Host regex for HTTP redirection conversion.')
slbCurSslCfgSSLPolBessl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolBessl.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolBessl.setDescription('Enable/Disable backend SSL encryption.')
slbCurSslCfgSSLPolConvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolConvert.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolConvert.setDescription('Enable/Disable HTTP redirection conversion.')
slbCurSslCfgSSLPolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgSSLPolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgSSLPolAdminStatus.setDescription('Enable or disable ssl policy.')
slbNewSslCfgSSLAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLAdminStatus.setDescription('Status (enable/disable) of SSL policy.')
slbNewSslCfgSSLPolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7), )
if mibBuilder.loadTexts: slbNewSslCfgSSLPolTable.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolTable.setDescription('The table for configuring ssl policy.')
slbNewSslCfgSSLPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewSslCfgSSLPolNameIdIndex"))
if mibBuilder.loadTexts: slbNewSslCfgSSLPolEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolEntry.setDescription('A row in the ssl policy table.')
slbNewSslCfgSSLPolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolNameIdIndex.setDescription('The SSL policy name(key id) as an index.')
slbNewSslCfgSSLPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolName.setDescription('SSL policy name,length of the string should be 32 charecters.')
slbNewSslCfgSSLPolPassInfoCipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoCipherName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoCipherName.setDescription('The SSL cipher-suite header name.')
slbNewSslCfgSSLPolPassInfoCipherFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoCipherFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoCipherFlag.setDescription('Enable/Disable cipher-suite information to backend servers.')
slbNewSslCfgSSLPolPassInfoVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoVersionName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoVersionName.setDescription('SSL version header name.')
slbNewSslCfgSSLPolPassInfoVersionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoVersionFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoVersionFlag.setDescription('Enable/Disable SSL version information to backend servers.')
slbNewSslCfgSSLPolPassInfoHeadBitsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoHeadBitsName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoHeadBitsName.setDescription('The passive cipher bits information to backend server.')
slbNewSslCfgSSLPolPassInfoHeadBitsFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoHeadBitsFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoHeadBitsFlag.setDescription('Enable/Disable Cipher bits information to backend servers.')
slbNewSslCfgSSLPolPassInfoFrontend = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoFrontend.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolPassInfoFrontend.setDescription('Enable/Disable add Front-End-Https: on header.')
slbNewSslCfgSSLPolCipherName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolCipherName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolCipherName.setDescription('Cipher name for SSL.')
slbNewSslCfgSSLPolCipherUserdef = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolCipherUserdef.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolCipherUserdef.setDescription('Cipher-suite allowed for SSL.')
slbNewSslCfgSSLPolIntermcaChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolIntermcaChainName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolIntermcaChainName.setDescription('Intermediate CA certificate chain name.')
slbNewSslCfgSSLPolIntermcaChainType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolIntermcaChainType.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolIntermcaChainType.setDescription('Intermediate CA certificate chain type certificate=cert,Group=group,None=<empty string>.')
slbNewSslCfgSSLPolBecipher = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolBecipher.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolBecipher.setDescription('Allowed cipher-suites in backend SSL [0-low, 1-midium, 2-high].')
slbNewSslCfgSSLPolAuthpol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolAuthpol.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolAuthpol.setDescription('Client authentication policy.')
slbNewSslCfgSSLPolConvuri = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolConvuri.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolConvuri.setDescription('Host regex for HTTP redirection conversion.')
slbNewSslCfgSSLPolBessl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolBessl.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolBessl.setDescription('Enable/Disable backend SSL encryption.')
slbNewSslCfgSSLPolConvert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolConvert.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolConvert.setDescription('Enable/Disable HTTP redirection conversion.')
slbNewSslCfgSSLPolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolAdminStatus.setDescription('Enable or disable ssl policy.')
slbNewSslCfgSSLPolDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 3, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgSSLPolDel.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgSSLPolDel.setDescription('Delete SSL policy.')
slbCurSslCfgAuthPolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1), )
if mibBuilder.loadTexts: slbCurSslCfgAuthPolTable.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolTable.setDescription('The table for configuring Client Authentication policy.')
slbCurSslCfgAuthPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurSslCfgAuthPolNameIdIndex"))
if mibBuilder.loadTexts: slbCurSslCfgAuthPolEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolEntry.setDescription('A row in the Client Authentication policy table.')
slbCurSslCfgAuthPolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolNameIdIndex.setDescription('The Auth policy name(key id) as an index.')
slbCurSslCfgAuthPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolName.setDescription('Auth policy name.')
slbCurSslCfgAuthPolValidityMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityMethod.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityMethod.setDescription('Certificate validation check method.')
slbCurSslCfgAuthPolValidityStaturi = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityStaturi.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityStaturi.setDescription('Static URI for OCSP validation requests.')
slbCurSslCfgAuthPolValidityUriprior = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clientcert", 1), ("staticuri", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityUriprior.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityUriprior.setDescription('OCSP URI priority.')
slbCurSslCfgAuthPolValidityCachtime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityCachtime.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityCachtime.setDescription('OCSP response cache time.')
slbCurSslCfgAuthPolValidityTimedev = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityTimedev.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityTimedev.setDescription('OCSP response time deviation.')
slbCurSslCfgAuthPolValidityAlgorthmName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityAlgorthmName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityAlgorthmName.setDescription('Allowed signing algorithm for the OCSP response[all, md5, sha1, sha256, sha384, sha512].')
slbCurSslCfgAuthPolValidityVchain = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityVchain.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValidityVchain.setDescription('Enable/Disable validating every CA certificate in the CA chain u.')
slbCurSslCfgAuthPolValiditySecure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValiditySecure.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolValiditySecure.setDescription('Enable/Disable secure OCSP response by sending random nonce with.')
slbCurSslCfgAuthPolPassinfoVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoVersionName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoVersionName.setDescription('Certificate version header.')
slbCurSslCfgAuthPolPassinfoVersionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoVersionFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoVersionFlag.setDescription('Pass certificate version information to backend server?.')
slbCurSslCfgAuthPolPassinfoSerialName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSerialName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSerialName.setDescription('Certificate serial-number header .')
slbCurSslCfgAuthPolPassinfoSerialFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSerialFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSerialFlag.setDescription('Pass certificate serial-number to backend server?.')
slbCurSslCfgAuthPolPassinfoAlgoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoAlgoName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoAlgoName.setDescription('Certificate signature algorithm header name.')
slbCurSslCfgAuthPolPassinfoAlgoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoAlgoFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoAlgoFlag.setDescription('Pass certificate Signature Algorithm to backend server?')
slbCurSslCfgAuthPolPassinfoIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoIssuerName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoIssuerName.setDescription('Certificate issuer header.')
slbCurSslCfgAuthPolPassinfoIssuerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoIssuerFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoIssuerFlag.setDescription('Pass certificate issuer information to backend server?')
slbCurSslCfgAuthPolPassinfoNbeforeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNbeforeName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNbeforeName.setDescription("Certificate 'Not Before Validity Dates' header.")
slbCurSslCfgAuthPolPassinfoNbeforeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNbeforeFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNbeforeFlag.setDescription("Pass certificate 'Not Before' Validity Date to backend serverr?")
slbCurSslCfgAuthPolPassinfoNafterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNafterName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNafterName.setDescription("Certificate 'Not After Validity Dates' header.")
slbCurSslCfgAuthPolPassinfoNafterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNafterFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoNafterFlag.setDescription("Pass certificate 'Not After' Validity Date to backend server?")
slbCurSslCfgAuthPolPassinfoSubjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSubjectName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSubjectName.setDescription('Certificate subject header name.')
slbCurSslCfgAuthPolPassinfoSubjectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSubjectFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoSubjectFlag.setDescription('Pass certificate subject to backend server?')
slbCurSslCfgAuthPolPassinfoKeytypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoKeytypeName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoKeytypeName.setDescription('Certificate Public Key Type header.')
slbCurSslCfgAuthPolPassinfoKeytypeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoKeytypeFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoKeytypeFlag.setDescription('Pass certificate Public Key Type information to backend servers?')
slbCurSslCfgAuthPolPassinfoMd5Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoMd5Name.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoMd5Name.setDescription('Certificate MD5 Hash header.')
slbCurSslCfgAuthPolPassinfoMd5Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoMd5Flag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoMd5Flag.setDescription('Pass certificate MD5 Hash information to backend servers?')
slbCurSslCfgAuthPolPassinfoCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCertName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCertName.setDescription('Certificate header.')
slbCurSslCfgAuthPolPassinfoCertFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCertFormat.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCertFormat.setDescription('Certificate Header Lines Format.')
slbCurSslCfgAuthPolPassinfoCertFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCertFlag.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCertFlag.setDescription('Pass certificate information to backend servers?')
slbCurSslCfgAuthPolPassinfoCharset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCharset.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoCharset.setDescription('Set the character set to be used for information.')
slbCurSslCfgAuthPolTrustcaChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolTrustcaChainName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolTrustcaChainName.setDescription("Trusted client's CA certificate.")
slbCurSslCfgAuthPolTrustcaChainType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolTrustcaChainType.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolTrustcaChainType.setDescription("Tusted client's CA certificate type certificate=cert,Group=group,None=<empty string>.")
slbCurSslCfgAuthPolCadepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolCadepth.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolCadepth.setDescription('Maximum depth to search the trusted CA in the CA certificate.')
slbCurSslCfgAuthPolCaverify = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolCaverify.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolCaverify.setDescription("Certificate's CA verification level.")
slbCurSslCfgAuthPolFailurl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolFailurl.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolFailurl.setDescription('URL for redirection when client authentication fails')
slbCurSslCfgAuthPolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolAdminStatus.setDescription('Enable or disable Auth policy.')
slbCurSslCfgAuthPolPassinfoComp2424 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoComp2424.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgAuthPolPassinfoComp2424.setDescription('Enable/Disable the 2424SSL Headers Compliance Mode.')
slbNewSslCfgAuthPolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3), )
if mibBuilder.loadTexts: slbNewSslCfgAuthPolTable.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolTable.setDescription('The table for configuring Client Authentication policy.')
slbNewSslCfgAuthPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewSslCfgAuthPolNameIdIndex"))
if mibBuilder.loadTexts: slbNewSslCfgAuthPolEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolEntry.setDescription('A row in the Client Authentication policy table.')
slbNewSslCfgAuthPolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolNameIdIndex.setDescription('The Auth policy name(key id) as an index.')
slbNewSslCfgAuthPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolName.setDescription('Auth policy name.')
slbNewSslCfgAuthPolValidityMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityMethod.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityMethod.setDescription('Certificate validation check method.')
slbNewSslCfgAuthPolValidityStaturi = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityStaturi.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityStaturi.setDescription('Static URI for OCSP validation requests.')
slbNewSslCfgAuthPolValidityUriprior = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clientcert", 1), ("staticuri", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityUriprior.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityUriprior.setDescription('OCSP URI priority.')
slbNewSslCfgAuthPolValidityCachtime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityCachtime.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityCachtime.setDescription('OCSP response cache time.')
slbNewSslCfgAuthPolValidityTimedev = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityTimedev.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityTimedev.setDescription('OCSP response time deviation.')
slbNewSslCfgAuthPolValidityAlgorthmName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityAlgorthmName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityAlgorthmName.setDescription('Allowed signing algorithm for the OCSP response [all, md5, sha1, sha256, sha384, sha512].')
slbNewSslCfgAuthPolValidityVchain = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityVchain.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValidityVchain.setDescription('Enable/Disable validating every CA certificate in the CA chain u.')
slbNewSslCfgAuthPolValiditySecure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValiditySecure.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolValiditySecure.setDescription('Enable/Disable secure OCSP response by sending random nonce with.')
slbNewSslCfgAuthPolPassinfoVersionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoVersionName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoVersionName.setDescription('Certificate version header.')
slbNewSslCfgAuthPolPassinfoVersionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoVersionFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoVersionFlag.setDescription('Pass certificate version information to backend server?.')
slbNewSslCfgAuthPolPassinfoSerialName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSerialName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSerialName.setDescription('Certificate serial-number header.')
slbNewSslCfgAuthPolPassinfoSerialFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSerialFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSerialFlag.setDescription('Pass certificate serial-number to backend server?')
slbNewSslCfgAuthPolPassinfoAlgoName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 15), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoAlgoName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoAlgoName.setDescription('Certificate signature algorithm header name.')
slbNewSslCfgAuthPolPassinfoAlgoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoAlgoFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoAlgoFlag.setDescription('Pass certificate Signature Algorithm to backend server?')
slbNewSslCfgAuthPolPassinfoIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 17), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoIssuerName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoIssuerName.setDescription('Certificate issuer header.')
slbNewSslCfgAuthPolPassinfoIssuerFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoIssuerFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoIssuerFlag.setDescription('Pass certificate issuer information to backend server?')
slbNewSslCfgAuthPolPassinfoNbeforeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNbeforeName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNbeforeName.setDescription("Certificate 'Not Before Validity Dates' header.")
slbNewSslCfgAuthPolPassinfoNbeforeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNbeforeFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNbeforeFlag.setDescription("Pass certificate 'Not Before' Validity Date to backend serverr?")
slbNewSslCfgAuthPolPassinfoNafterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 21), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNafterName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNafterName.setDescription("Certificate 'Not After Validity Dates' header.")
slbNewSslCfgAuthPolPassinfoNafterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNafterFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoNafterFlag.setDescription("Pass certificate 'Not After' Validity Date to backend server?")
slbNewSslCfgAuthPolPassinfoSubjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 23), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSubjectName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSubjectName.setDescription('Certificate subject header name.')
slbNewSslCfgAuthPolPassinfoSubjectFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSubjectFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoSubjectFlag.setDescription('Pass certificate subject to backend server?')
slbNewSslCfgAuthPolPassinfoKeytypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 25), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoKeytypeName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoKeytypeName.setDescription('Certificate Public Key Type header.')
slbNewSslCfgAuthPolPassinfoKeytypeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoKeytypeFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoKeytypeFlag.setDescription('Pass certificate Public Key Type information to backend servers?')
slbNewSslCfgAuthPolPassinfoMd5Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 27), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoMd5Name.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoMd5Name.setDescription('Certificate MD5 Hash header.')
slbNewSslCfgAuthPolPassinfoMd5Flag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoMd5Flag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoMd5Flag.setDescription('Pass certificate MD5 Hash information to backend servers?')
slbNewSslCfgAuthPolPassinfoCertName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 29), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCertName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCertName.setDescription('Certificate header.')
slbNewSslCfgAuthPolPassinfoCertFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 30), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCertFormat.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCertFormat.setDescription('Certificate Header Lines Format.')
slbNewSslCfgAuthPolPassinfoCertFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCertFlag.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCertFlag.setDescription('Pass certificate information to backend servers?')
slbNewSslCfgAuthPolPassinfoCharset = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCharset.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoCharset.setDescription('Set the character set to be used for information.')
slbNewSslCfgAuthPolTrustcaChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 33), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolTrustcaChainName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolTrustcaChainName.setDescription("Trusted client's CA certificate name.")
slbNewSslCfgAuthPolTrustcaChainType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 34), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolTrustcaChainType.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolTrustcaChainType.setDescription("Trusted client's CA certificate type certificate=cert,Group=group,None=<empty string>.")
slbNewSslCfgAuthPolCadepth = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 35), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolCadepth.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolCadepth.setDescription('Maximum depth to search the trusted CA in the CA certificate.')
slbNewSslCfgAuthPolCaverify = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 36), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolCaverify.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolCaverify.setDescription("Certificate's CA verification level.")
slbNewSslCfgAuthPolFailurl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 37), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolFailurl.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolFailurl.setDescription('URL for redirection when client authentication fails')
slbNewSslCfgAuthPolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolAdminStatus.setDescription('Enable or disable Auth policy.')
slbNewSslCfgAuthPolDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolDelete.setDescription('Delete Client Authentication Policy.')
slbNewSslCfgAuthPolPassinfoComp2424 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 4, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoComp2424.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgAuthPolPassinfoComp2424.setDescription('Enable/Disable the 2424SSL Headers Compliance Mode.')
slbCurSslCfgCertsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1), )
if mibBuilder.loadTexts: slbCurSslCfgCertsTable.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsTable.setDescription('.')
slbCurSslCfgCertsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurSslCfgCertsID"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurSslCfgCertsType"))
if mibBuilder.loadTexts: slbCurSslCfgCertsEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsEntry.setDescription('.')
slbCurSslCfgCertsID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsID.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsID.setDescription('.')
slbCurSslCfgCertsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("key", 1), ("certificateRequest", 2), ("serverCertificate", 3), ("trustedCertificate", 4), ("intermediateCertificate", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsType.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsType.setDescription('.')
slbCurSslCfgCertsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsName.setDescription('.')
slbCurSslCfgCertsKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ks512", 1), ("ks1024", 2), ("ks2048", 3), ("ks4096", 4), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsKeySize.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsKeySize.setDescription('.')
slbCurSslCfgCertsExpirty = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsExpirty.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsExpirty.setDescription('.')
slbCurSslCfgCertsCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsCommonName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsCommonName.setDescription('.')
slbCurSslCfgCertsHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("md5", 1), ("sha1", 2), ("sha256", 3), ("sha384", 4), ("sha512", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsHashAlgo.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsHashAlgo.setDescription('.')
slbCurSslCfgCertsCountryName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsCountryName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsCountryName.setDescription('.')
slbCurSslCfgCertsPrpvinceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsPrpvinceName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsPrpvinceName.setDescription('.')
slbCurSslCfgCertsLocalityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsLocalityName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsLocalityName.setDescription('.')
slbCurSslCfgCertsOrganizationName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsOrganizationName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsOrganizationName.setDescription('.')
slbCurSslCfgCertsOrganizationUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsOrganizationUnitName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsOrganizationUnitName.setDescription('.')
slbCurSslCfgCertsEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsEMail.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsEMail.setDescription('.')
slbCurSslCfgCertsValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3650))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsValidityPeriod.setDescription('.')
slbCurSslCfgCertsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generated", 1), ("notGenerated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsStatus.setDescription('Shows if the current certificate is generated.')
slbNewSslCfgCertsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2), )
if mibBuilder.loadTexts: slbNewSslCfgCertsTable.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsTable.setDescription('.')
slbNewSslCfgCertsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewSslCfgCertsID"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewSslCfgCertsType"))
if mibBuilder.loadTexts: slbNewSslCfgCertsEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsEntry.setDescription('.')
slbNewSslCfgCertsID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewSslCfgCertsID.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsID.setDescription('.')
slbNewSslCfgCertsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("key", 1), ("certificateRequest", 2), ("serverCertificate", 3), ("trustedCertificate", 4), ("intermediateCertificate", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewSslCfgCertsType.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsType.setDescription('.')
slbNewSslCfgCertsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsName.setDescription('.')
slbNewSslCfgCertsKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ks512", 1), ("ks1024", 2), ("ks2048", 3), ("ks4096", 4), ("unknown", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsKeySize.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsKeySize.setDescription('.')
slbNewSslCfgCertsExpirty = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewSslCfgCertsExpirty.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsExpirty.setDescription('.')
slbNewSslCfgCertsCommonName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsCommonName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsCommonName.setDescription('.')
slbNewSslCfgCertsHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("md5", 1), ("sha1", 2), ("sha256", 3), ("sha384", 4), ("sha512", 5), ("unknown", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsHashAlgo.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsHashAlgo.setDescription('.')
slbNewSslCfgCertsCountryName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsCountryName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsCountryName.setDescription('.')
slbNewSslCfgCertsPrpvinceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsPrpvinceName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsPrpvinceName.setDescription('.')
slbNewSslCfgCertsLocalityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsLocalityName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsLocalityName.setDescription('.')
slbNewSslCfgCertsOrganizationName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsOrganizationName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsOrganizationName.setDescription('.')
slbNewSslCfgCertsOrganizationUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsOrganizationUnitName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsOrganizationUnitName.setDescription('.')
slbNewSslCfgCertsEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsEMail.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsEMail.setDescription('.')
slbNewSslCfgCertsValidityPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3650))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewSslCfgCertsValidityPeriod.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsValidityPeriod.setDescription('.')
slbNewSslCfgCertsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsDelete.setDescription('Delete certificate.')
slbNewSslCfgCertsGenerate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("generate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsGenerate.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsGenerate.setDescription('By setting the value to generate(2), the Certicicate will be generated.')
slbNewSslCfgCertsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("generated", 1), ("notGenerated", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewSslCfgCertsStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsStatus.setDescription('Shows if the current certificate is generated.')
slbSslCfgCertsDefaults = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3))
slbCurSslCfgCertsDefaultsCountryName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsCountryName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsCountryName.setDescription('SSL certificate Country Name in 2 letter code.')
slbNewSslCfgCertsDefaultsCountryName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsCountryName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsCountryName.setDescription('SSL certificate Country Name in 2 letter code.')
slbCurSslCfgCertsDefaultsProvinceName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsProvinceName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsProvinceName.setDescription('SSL Certificate State or Province Name.')
slbNewSslCfgCertsDefaultsProvinceName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsProvinceName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsProvinceName.setDescription('SSL Certificate State or Province Name.')
slbCurSslCfgCertsDefaultsLocallyName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsLocallyName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsLocallyName.setDescription('SSL certificate locality name (e.g. city).')
slbNewSslCfgCertsDefaultsLocallyName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsLocallyName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsLocallyName.setDescription('SSL certificate locality name (e.g. city).')
slbCurSslCfgCertsDefaultsOrganizationName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsOrganizationName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsOrganizationName.setDescription('SSL certificate Organization Name (e.g. company).')
slbNewSslCfgCertsDefaultsOrganizationName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsOrganizationName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsOrganizationName.setDescription('SSL certificate Organization Name (e.g. company).')
slbCurSslCfgCertsDefaultsOrganizationUnitName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsOrganizationUnitName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsOrganizationUnitName.setDescription('SSL certificate Organizational Unit Name (e.g. accounting).')
slbNewSslCfgCertsDefaultsOrganizationUnitName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 85))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsOrganizationUnitName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsOrganizationUnitName.setDescription('SSL certificate Organizational Unit Name (e.g. accounting).')
slbCurSslCfgCertsDefaultsEMail = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsEMail.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgCertsDefaultsEMail.setDescription('SSL certificate Email (e.g. admin@company.com).')
slbNewSslCfgCertsDefaultsEMail = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 149))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsEMail.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgCertsDefaultsEMail.setDescription('SSL certificate Email (e.g. admin@company.com).')
slbCurSslCfgGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 4), )
if mibBuilder.loadTexts: slbCurSslCfgGroupsTable.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgGroupsTable.setDescription('.')
slbCurSslCfgGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurSslCfgGroupsID"))
if mibBuilder.loadTexts: slbCurSslCfgGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgGroupsEntry.setDescription('.')
slbCurSslCfgGroupsID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgGroupsID.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgGroupsID.setDescription('.')
slbCurSslCfgGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgGroupsName.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgGroupsName.setDescription('.')
slbCurSslCfgGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("serverCertificate", 3), ("trustedCertificate", 4), ("intermediateCertificate", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgGroupsType.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgGroupsType.setDescription('.')
slbCurSslCfgGroupsDefaultCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgGroupsDefaultCert.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgGroupsDefaultCert.setDescription('.')
slbCurSslCfgGroupsCertBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurSslCfgGroupsCertBmap.setStatus('current')
if mibBuilder.loadTexts: slbCurSslCfgGroupsCertBmap.setDescription('List of Certificates the group holds - Selected certificates are presented in a bitmap format. Receiving order is as: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Cert 9 || || || ||___ Cert 4 || |____ Cert 3 || . . . ||_________ Cert 2 |__________ Cert 1 where x : 1 - The represented certficate is selected 0 - The represented certificate is not selected.')
slbNewSslCfgGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5), )
if mibBuilder.loadTexts: slbNewSslCfgGroupsTable.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsTable.setDescription('.')
slbNewSslCfgGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewSslCfgGroupsID"))
if mibBuilder.loadTexts: slbNewSslCfgGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsEntry.setDescription('.')
slbNewSslCfgGroupsID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewSslCfgGroupsID.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsID.setDescription('.')
slbNewSslCfgGroupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgGroupsName.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsName.setDescription('.')
slbNewSslCfgGroupsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5))).clone(namedValues=NamedValues(("serverCertificate", 3), ("trustedCertificate", 4), ("intermediateCertificate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgGroupsType.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsType.setDescription('.')
slbNewSslCfgGroupsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgGroupsDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsDelete.setDescription('Delete certificate group.')
slbNewSslCfgGroupsDefaultCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgGroupsDefaultCert.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsDefaultCert.setDescription('.')
slbNewSslCfgGroupsAddCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgGroupsAddCert.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsAddCert.setDescription('Add cerificate to the group')
slbNewSslCfgGroupsRemCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewSslCfgGroupsRemCert.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsRemCert.setDescription('Remove cerificate from the group')
slbNewSslCfgGroupsCertBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 19, 5, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewSslCfgGroupsCertBmap.setStatus('current')
if mibBuilder.loadTexts: slbNewSslCfgGroupsCertBmap.setDescription('List of Certificates the group holds - Selected certificates are presented in a bitmap format. Receiving order is as: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Cert 9 || || || ||___ Cert 4 || |____ Cert 3 || . . . ||_________ Cert 2 |__________ Cert 1 where x : 1 - The represented certficate is selected 0 - The represented certificate is not selected.')
slbSmtportTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSmtportTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbSmtportTableMaxSize.setDescription('The maximum number of entries in service mapping real port table.')
slbCurCfgSmtportTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 2), )
if mibBuilder.loadTexts: slbCurCfgSmtportTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSmtportTable.setDescription('The service mapping real port table.')
slbCurCfgSmtportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgSmtportIndex"))
if mibBuilder.loadTexts: slbCurCfgSmtportEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSmtportEntry.setDescription('A row in the service mapping real port table.')
slbCurCfgSmtportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSmtportIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSmtportIndex.setDescription('The service mapping real port index.')
slbCurCfgSmtportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSmtportNum.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSmtportNum.setDescription('The service mapping real port number.')
slbNewCfgSmtportTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 3), )
if mibBuilder.loadTexts: slbNewCfgSmtportTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSmtportTable.setDescription('The table of real server service ports.')
slbNewCfgSmtportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgSmtportIndex"))
if mibBuilder.loadTexts: slbNewCfgSmtportEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSmtportEntry.setDescription('A row in the service mapping real port table.')
slbNewCfgSmtportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgSmtportIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSmtportIndex.setDescription('The service mapping real port index')
slbNewCfgSmtportNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSmtportNum.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSmtportNum.setDescription('The service mapping real port number.')
slbNewCfgSmtportDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSmtportDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSmtportDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbSmtportTableAvaibleIndex = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 17, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSmtportTableAvaibleIndex.setStatus('current')
if mibBuilder.loadTexts: slbSmtportTableAvaibleIndex.setDescription('The first free real port index of the Service Mapping Table. Value 0 will be returned when all 16 real ports are configured.')
slbWlmTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbWlmTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbWlmTableMaxSize.setDescription('The maximum number of entries in Workload Manager table.')
slbCurCfgWlmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 2), )
if mibBuilder.loadTexts: slbCurCfgWlmTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWlmTable.setDescription('The table of Workload Managers configuration.')
slbCurCfgWlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgWlmIndex"))
if mibBuilder.loadTexts: slbCurCfgWlmEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWlmEntry.setDescription('Information about a particular Workload Manager configuration.')
slbCurCfgWlmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWlmIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWlmIndex.setDescription('The Workload Manager number')
slbCurCfgWlmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWlmIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWlmIpAddr.setDescription('IP address of the Workload Manager.')
slbCurCfgWlmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWlmPort.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWlmPort.setDescription('The port number for the Workload Manager.')
slbCurCfgWlmGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWlmGroups.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWlmGroups.setDescription('The group number for the Workload Manager.')
slbCurCfgWlmState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgWlmState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgWlmState.setDescription('Connection state of the Workload Manager.')
slbNewCfgWlmTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3), )
if mibBuilder.loadTexts: slbNewCfgWlmTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmTable.setDescription('The table of Workload Managers configuration.')
slbNewCfgWlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgWlmIndex"))
if mibBuilder.loadTexts: slbNewCfgWlmEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmEntry.setDescription('Information about a particular Workload Manager configuration.')
slbNewCfgWlmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgWlmIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmIndex.setDescription('The Workload Manager number')
slbNewCfgWlmIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgWlmIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmIpAddr.setDescription('IP address of the Workload Manager.')
slbNewCfgWlmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgWlmPort.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmPort.setDescription('The port number for the Workload Manager.')
slbNewCfgWlmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgWlmDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewCfgWlmGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgWlmGroups.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmGroups.setDescription('The group number for the Workload Manager.')
slbNewCfgWlmState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewCfgWlmState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgWlmState.setDescription('Connection state of the Workload Manager.')
slbCurAcclCfgCachememcache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachememcache.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachememcache.setDescription('Maximum percentage of Alteon RAM to be allocate for caching.')
slbNewAcclCfgCachememcache = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewAcclCfgCachememcache.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachememcache.setDescription('Defines the maximum percentage of Alteon RAM to be allocate for caching.')
slbCurAcclCfgCacheOnOff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheOnOff.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheOnOff.setDescription('Globally ON or OFF of caching.')
slbNewAcclCfgCacheOnOff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewAcclCfgCacheOnOff.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheOnOff.setDescription('Globally ON or OFF of caching.')
slbCurAcclCfgCachePolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5), )
if mibBuilder.loadTexts: slbCurAcclCfgCachePolTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolTable.setDescription('The table for configuring caching policy.')
slbCurAcclCfgCachePolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCachePolNameIdIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCachePolEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolEntry.setDescription('A row in the caching policy table.')
slbCurAcclCfgCachePolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolNameIdIndex.setDescription('The caching policy ID(key id) as an index.')
slbCurAcclCfgCachePolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolName.setDescription('Cache policy name.')
slbCurAcclCfgCachePolExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolExpireTime.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolExpireTime.setDescription('Maximum expiration time in seconds.')
slbCurAcclCfgCachePolMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolMinSize.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolMinSize.setDescription('Minimum Object size to be stored in bytes.')
slbCurAcclCfgCachePolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolMaxSize.setDescription('Maximum Object size to be stored in bytes.')
slbCurAcclCfgCachePolURLList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolURLList.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolURLList.setDescription('URL list which is associated with this policy.')
slbCurAcclCfgCachePolStore = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("srvrhdr", 1), ("cacheall", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolStore.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolStore.setDescription('Caching behavior for storing new objects in cache.')
slbCurAcclCfgCachePolServe = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clnthdr", 1), ("refresh", 2), ("cache", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolServe.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolServe.setDescription('Cache behavior when serving clients with objects.')
slbCurAcclCfgCachePolQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("consider", 1), ("ignore", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolQuery.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolQuery.setDescription('Specifies whether query parameters added to object URL should be considered when storing/serving object from cache.')
slbCurAcclCfgCachePolBrowser = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolBrowser.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolBrowser.setDescription('Optimize browser cache.')
slbCurAcclCfgCachePolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCachePolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCachePolAdminStatus.setDescription('Status (enable/disable) of caching policy.')
slbNewAcclCfgCachePolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6), )
if mibBuilder.loadTexts: slbNewAcclCfgCachePolTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolTable.setDescription('The table for configuring caching policy.')
slbNewAcclCfgCachePolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCachePolNameIdIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCachePolEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolEntry.setDescription('A row in the caching policy table.')
slbNewAcclCfgCachePolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolNameIdIndex.setDescription('The caching policy ID(key id) as an index, length of the string should be 32 charecters.')
slbNewAcclCfgCachePolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolName.setDescription('Cache policy name, length of the string should be 32 charecters.')
slbNewAcclCfgCachePolExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolExpireTime.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolExpireTime.setDescription('Set maximum expiration time, Range is 60- 43,200,000 seconds (~500 days).')
slbNewAcclCfgCachePolMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolMinSize.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolMinSize.setDescription('Minimum Object size to be stored [Bytes], Values: 1-65536.')
slbNewAcclCfgCachePolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolMaxSize.setDescription('Maximum Object size to be stored [Bytes], Values: 1-512000000.')
slbNewAcclCfgCachePolURLList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolURLList.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolURLList.setDescription('URL list to be associated with this policy, Values: 1-32 character string.')
slbNewAcclCfgCachePolStore = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("srvrhdr", 1), ("cacheall", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolStore.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolStore.setDescription('Define caching behavior for storing New objects in cache.')
slbNewAcclCfgCachePolServe = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clnthdr", 1), ("refresh", 2), ("cache", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolServe.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolServe.setDescription('Define cache behavior when serving clients with objects.')
slbNewAcclCfgCachePolQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("consider", 1), ("ignore", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolQuery.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolQuery.setDescription('Specifies whether query parameters added to object URL should be considered when storing/serving object from cache.')
slbNewAcclCfgCachePolBrowser = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolBrowser.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolBrowser.setDescription('Optimize browser cache.')
slbNewAcclCfgCachePolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolAdminStatus.setDescription('Enable or disable caching policy.')
slbNewAcclCfgCachePolDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCachePolDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCachePolDelete.setDescription('Delete Caching policy.')
slbCurAcclCfgCacheUrlListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 7), )
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListTable.setDescription('The table for configuring caching URL LIST.')
slbCurAcclCfgCacheUrlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCacheUrlListIdIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListEntry.setDescription('A row in the caching URL LIST table.')
slbCurAcclCfgCacheUrlListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListIdIndex.setDescription('The caching policy URL LIST (key id) as an index.')
slbCurAcclCfgCacheUrlListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListName.setDescription('Cache URL LIST name.')
slbCurAcclCfgCacheUrlListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlListAdminStatus.setDescription('Status (enable/disable) of caching URL LIST.')
slbNewAcclCfgCacheUrlListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 8), )
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListTable.setDescription('The table for configuring caching URL LIST.')
slbNewAcclCfgCacheUrlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCacheUrlListIdIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListEntry.setDescription('A row in the caching URL LIST table.')
slbNewAcclCfgCacheUrlListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListIdIndex.setDescription('The caching policy URL LIST (key id) as an index.')
slbNewAcclCfgCacheUrlListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListName.setDescription('Cache URL LIST name.')
slbNewAcclCfgCacheUrlListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListAdminStatus.setDescription('Status (enable/disable) of caching URL LIST.')
slbNewAcclCfgCacheUrlListDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListDel.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListDel.setDescription('Delete Caching URL list.')
slbNewAcclCfgCacheUrlListCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 8, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlListCopy.setDescription('Duplicating an entire Rule-List by defining the destination Rule-list id.')
slbCurAcclCfgCacheUrlRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9), )
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleTable.setDescription('The table for configuring caching URL Rules.')
slbCurAcclCfgCacheUrlRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCacheUrlRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCacheUrlRuleIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleEntry.setDescription('A row in the caching URL Rule table.')
slbCurAcclCfgCacheUrlRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleListIdIndex.setDescription('The caching policy URL LIST (key id) as an index.')
slbCurAcclCfgCacheUrlRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleIndex.setDescription('The caching URL Rule number as an index.')
slbCurAcclCfgCacheUrlRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleName.setDescription('The caching URL Rule name.')
slbCurAcclCfgCacheUrlRuleDomainM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleDomainM.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleDomainM.setDescription('Defines whether Domain matching should be evaluated as String, Regex or match, any (default any).')
slbCurAcclCfgCacheUrlRuleDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleDomain.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleDomain.setDescription('Defines the Virtual Host for which this rule applies.')
slbCurAcclCfgCacheUrlRuleURLm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleURLm.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleURLm.setDescription('Defines whether URL matching should be evaluated as String, Regex or match, any (default any).')
slbCurAcclCfgCacheUrlRuleURL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleURL.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleURL.setDescription('Defines URL of specific object (file/folder) to be matched by this rule.')
slbCurAcclCfgCacheUrlRuleExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleExpire.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleExpire.setDescription('The Maximum time for the cache object to served from cache (in seconds).')
slbCurAcclCfgCacheUrlRuleCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleCache.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleCache.setDescription('Defines if the matched response should be cached or not.')
slbCurAcclCfgCacheUrlRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCacheUrlRuleAdminStatus.setDescription('Status (enable/disable) of caching URL Rule.')
slbNewAcclCfgCacheUrlRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10), )
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleTable.setDescription('The table for configuring caching URL Rules.')
slbNewAcclCfgCacheUrlRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCacheUrlRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCacheUrlRuleIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleEntry.setDescription('A row in the caching URL Rule table.')
slbNewAcclCfgCacheUrlRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleListIdIndex.setDescription('The caching policy URL LIST (key id) as an index.')
slbNewAcclCfgCacheUrlRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleIndex.setDescription('The caching URL Rule number as an index.')
slbNewAcclCfgCacheUrlRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleName.setDescription('The caching URL Rule name.')
slbNewAcclCfgCacheUrlRuleDomainM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleDomainM.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleDomainM.setDescription('Defines whether Domain matching should be evaluated as String, Regex or match, any (default any).')
slbNewAcclCfgCacheUrlRuleDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleDomain.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleDomain.setDescription('Defines the Virtual Host for which this rule applies.')
slbNewAcclCfgCacheUrlRuleURLm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleURLm.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleURLm.setDescription('Defines whether URL matching should be evaluated as String, Regex or match, any (default any).')
slbNewAcclCfgCacheUrlRuleURL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleURL.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleURL.setDescription('Defines URL of specific object (file/folder) to be matched by this rule.')
slbNewAcclCfgCacheUrlRuleExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleExpire.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleExpire.setDescription('The Maximum time for the cache object to served from cache (in seconds).')
slbNewAcclCfgCacheUrlRuleCache = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleCache.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleCache.setDescription('Defines if the matched response should be cached or not.')
slbNewAcclCfgCacheUrlRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleAdminStatus.setDescription('Status (enable/disable) of caching URL Rule.')
slbNewAcclCfgCacheUrlRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewAcclCfgCacheUrlRuleCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 1, 10, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCacheUrlRuleCopy.setDescription('Copy rule to another index in the same rule-list. When read, zero is returned.')
slbCurAcclCfgCompOnOff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompOnOff.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompOnOff.setDescription('Globally ON or OFF of compression.')
slbNewAcclCfgCompOnOff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slbNewAcclCfgCompOnOff.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompOnOff.setDescription('Globally ON or OFF of compression.')
slbCurAcclCfgCompPolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3), )
if mibBuilder.loadTexts: slbCurAcclCfgCompPolTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolTable.setDescription('The table for configuring compression policy.')
slbCurAcclCfgCompPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCompPolNameIdIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCompPolEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolEntry.setDescription('A row in the compression policy table.')
slbCurAcclCfgCompPolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolNameIdIndex.setDescription('The compression policy ID(key id) as an index.')
slbCurAcclCfgCompPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolName.setDescription('Compression policy name.')
slbCurAcclCfgCompPolAlgrthm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gzip", 1), ("deflate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolAlgrthm.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolAlgrthm.setDescription('Preferred compression algorithm.')
slbCurAcclCfgCompPolComplv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolComplv1.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolComplv1.setDescription('Compression level.')
slbCurAcclCfgCompPolMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolMinSize.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolMinSize.setDescription('Minimum file size to be compressed [Byte].')
slbCurAcclCfgCompPolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolMaxSize.setDescription('Maximum file size to be compressed [Byte].')
slbCurAcclCfgCompPolURLList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolURLList.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolURLList.setDescription('URL list which is associated with this policy.')
slbCurAcclCfgCompPolBrwsList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolBrwsList.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolBrwsList.setDescription('Browser list which is associated with this policy.')
slbCurAcclCfgCompPolPreDefBrwsRuleList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolPreDefBrwsRuleList.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolPreDefBrwsRuleList.setDescription('Enable/Disable predefined browser exceptions rule-list.')
slbCurAcclCfgCompPolCompsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolCompsrv.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolCompsrv.setDescription('Enable/Disable compression by real server.')
slbCurAcclCfgCompPolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompPolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompPolAdminStatus.setDescription('Status (enable/disable) of compression policy.')
slbNewAcclCfgCompPolTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4), )
if mibBuilder.loadTexts: slbNewAcclCfgCompPolTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolTable.setDescription('The table for configuring compression policy.')
slbNewAcclCfgCompPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCompPolNameIdIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCompPolEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolEntry.setDescription('A row in the compression policy table.')
slbNewAcclCfgCompPolNameIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolNameIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolNameIdIndex.setDescription('The compression policy ID(key id) as an index.')
slbNewAcclCfgCompPolName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolName.setDescription('Compression policy name.')
slbNewAcclCfgCompPolAlgrthm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gzip", 1), ("deflate", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolAlgrthm.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolAlgrthm.setDescription('Preferred compression algorithm.')
slbNewAcclCfgCompPolComplv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolComplv1.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolComplv1.setDescription('Compression level.')
slbNewAcclCfgCompPolMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolMinSize.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolMinSize.setDescription('Minimum file size to be compressed [Byte].')
slbNewAcclCfgCompPolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolMaxSize.setDescription('Maximum file size to be compressed [Byte], Values: 1-2000000000, 0-Unlimited ')
slbNewAcclCfgCompPolURLList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolURLList.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolURLList.setDescription('URL list which is associated with this policy.')
slbNewAcclCfgCompPolBrwsList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolBrwsList.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolBrwsList.setDescription('Browser list which is associated with this policy.')
slbNewAcclCfgCompPolPreDefBrwsRuleList = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolPreDefBrwsRuleList.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolPreDefBrwsRuleList.setDescription('Enable/Disable predefined browser exceptions rule-list.')
slbNewAcclCfgCompPolCompsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolCompsrv.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolCompsrv.setDescription('Enable/Disable compression by real server.')
slbNewAcclCfgCompPolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolAdminStatus.setDescription('Status (enable/disable) of compression policy.')
slbNewAcclCfgCompPolDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompPolDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompPolDelete.setDescription('Delete compression policy.')
slbCurAcclCfgCompUrlListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 5), )
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListTable.setDescription('The table for configuring compression URL LIST.')
slbCurAcclCfgCompUrlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCompUrlListIdIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListEntry.setDescription('A row in the compression URL LIST table.')
slbCurAcclCfgCompUrlListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListIdIndex.setDescription('The compression policy URL LIST (key id) as an index.')
slbCurAcclCfgCompUrlListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListName.setDescription('Compression URL LIST name.')
slbCurAcclCfgCompUrlListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlListAdminStatus.setDescription('Status (enable/disable) of compression URL LIST.')
slbNewAcclCfgCompUrlListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 6), )
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListTable.setDescription('The table for configuring compression URL LIST.')
slbNewAcclCfgCompUrlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCompUrlListIdIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListEntry.setDescription('A row in the compression URL LIST table.')
slbNewAcclCfgCompUrlListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListIdIndex.setDescription('The compression policy URL LIST (key id) as an index.')
slbNewAcclCfgCompUrlListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListName.setDescription('Compression URL LIST name.')
slbNewAcclCfgCompUrlListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListAdminStatus.setDescription('Status (enable/disable) of compression URL LIST.')
slbNewAcclCfgCompUrlListDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListDel.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListDel.setDescription('Delete Compression URL list.')
slbNewAcclCfgCompUrlListCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 6, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlListCopy.setDescription('Duplicating an entire Rule-List by defining the destination Rule-list id.')
slbCurAcclCfgCompUrlRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7), )
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleTable.setDescription('The table for configuring compression URL Rules.')
slbCurAcclCfgCompUrlRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCompUrlRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCompUrlRuleIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleEntry.setDescription('A row in the compression URL Rule table.')
slbCurAcclCfgCompUrlRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleListIdIndex.setDescription('The compression URL LIST (key id) as an index.')
slbCurAcclCfgCompUrlRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleIndex.setDescription('The compression URL Rule number as an index.')
slbCurAcclCfgCompUrlRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleName.setDescription('The compression URL Rule name.')
slbCurAcclCfgCompUrlRuleDomainM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleDomainM.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleDomainM.setDescription('Defines whether Domain matching should be evaluated as String, Regex or match, any (default any).')
slbCurAcclCfgCompUrlRuleDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleDomain.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleDomain.setDescription('Defines the Virtual Host for which this rule applies.')
slbCurAcclCfgCompUrlRuleURLm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleURLm.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleURLm.setDescription('Defines whether URL matching should be evaluated as String, Regex or match, any (default any).')
slbCurAcclCfgCompUrlRuleURL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleURL.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleURL.setDescription('Defines URL of specific object (file/folder) to be matched by this rule.')
slbCurAcclCfgCompUrlRuleCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleCompress.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleCompress.setDescription('Enable/Disable the compression.')
slbCurAcclCfgCompUrlRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompUrlRuleAdminStatus.setDescription('Status (enable/disable) of compression URL Rule.')
slbNewAcclCfgCompUrlRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8), )
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleTable.setDescription('The table for configuring compression URL Rules.')
slbNewAcclCfgCompUrlRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCompUrlRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCompUrlRuleIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleEntry.setDescription('A row in the compression URL Rule table.')
slbNewAcclCfgCompUrlRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleListIdIndex.setDescription('The compression URL LIST (key id) as an index.')
slbNewAcclCfgCompUrlRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleIndex.setDescription('The compression URL Rule number as an index.')
slbNewAcclCfgCompUrlRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleName.setDescription('The compression URL Rule name.')
slbNewAcclCfgCompUrlRuleDomainM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleDomainM.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleDomainM.setDescription('Defines whether Domain matching should be evaluated as String, Regex or match, any (default any).')
slbNewAcclCfgCompUrlRuleDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleDomain.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleDomain.setDescription('Defines the Virtual Host for which this rule applies.')
slbNewAcclCfgCompUrlRuleURLm = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleURLm.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleURLm.setDescription('Defines whether URL matching should be evaluated as String, Regex or match, any (default any).')
slbNewAcclCfgCompUrlRuleURL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleURL.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleURL.setDescription('Defines URL of specific object (file/folder) to be matched by this rule.')
slbNewAcclCfgCompUrlRuleCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleCompress.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleCompress.setDescription('Enable/Disable the compression.')
slbNewAcclCfgCompUrlRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleAdminStatus.setDescription('Status (enable/disable) of compression URL Rule.')
slbNewAcclCfgCompUrlRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewAcclCfgCompUrlRuleCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 8, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompUrlRuleCopy.setDescription('Copy rule to another index in the same rule-list.')
slbCurAcclCfgCompBrwsListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 9), )
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListTable.setDescription('The table for configuring compression browser LIST.')
slbCurAcclCfgCompBrwsListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCompBrwsListIdIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListEntry.setDescription('A row in the compression browser LIST table.')
slbCurAcclCfgCompBrwsListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListIdIndex.setDescription('The compression policy browser LIST (key id) as an index.')
slbCurAcclCfgCompBrwsListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListName.setDescription('Compression browser list name.')
slbCurAcclCfgCompBrwsListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsListAdminStatus.setDescription('Status (enable/disable) of compression browser list.')
slbNewAcclCfgCompBrwsListTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 10), )
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListTable.setDescription('The table for configuring compression browser list.')
slbNewAcclCfgCompBrwsListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCompBrwsListIdIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListEntry.setDescription('A row in the compression browser list table.')
slbNewAcclCfgCompBrwsListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListIdIndex.setDescription('The compression policy browser list (key id) as an index.')
slbNewAcclCfgCompBrwsListName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListName.setDescription('Compression browser list name.')
slbNewAcclCfgCompBrwsListAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListAdminStatus.setDescription('Status (enable/disable) of compression browser list.')
slbNewAcclCfgCompBrwsListDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListDel.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListDel.setDescription('Delete Compression Browser list.')
slbNewAcclCfgCompBrwsListCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 10, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsListCopy.setDescription('Duplicating an entire browser list by defining the destination browser list id.')
slbCurAcclCfgCompBrwsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11), )
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleTable.setDescription('The table for configuring compression browser Rules.')
slbCurAcclCfgCompBrwsRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCompBrwsRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurAcclCfgCompBrwsRuleIndex"))
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleEntry.setDescription('A row in the compression browser Rule table.')
slbCurAcclCfgCompBrwsRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleListIdIndex.setDescription('The compression browser list (key id) as an index.')
slbCurAcclCfgCompBrwsRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleIndex.setDescription('The compression browser Rule number as an index.')
slbCurAcclCfgCompBrwsRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleName.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleName.setDescription('The compression browser Rule name.')
slbCurAcclCfgCompBrwsRuleAgentM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleAgentM.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleAgentM.setDescription('Defines whether user agent field should be evaluated as String, Regex or match, any (default any).')
slbCurAcclCfgCompBrwsRuleAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleAgent.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleAgent.setDescription('Defines the User-Agent string for which this rule applies.')
slbCurAcclCfgCompBrwsRuleContentM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleContentM.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleContentM.setDescription('Defines whether content type should be evaluated as String, Regex or match, any (default any).')
slbCurAcclCfgCompBrwsRuleContent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleContent.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleContent.setDescription('Defines the Content-type string for which this rule applies.')
slbCurAcclCfgCompBrwsRuleCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleCompress.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleCompress.setDescription('Enable/Disable the compression. Defines if the matched response should be compressed or not')
slbCurAcclCfgCompBrwsRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbCurAcclCfgCompBrwsRuleAdminStatus.setDescription('Status (enable/disable) of compression browser Rule.')
slbNewAcclCfgCompBrwsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12), )
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleTable.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleTable.setDescription('The table for configuring compression browser Rules.')
slbNewAcclCfgCompBrwsRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCompBrwsRuleListIdIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewAcclCfgCompBrwsRuleIndex"))
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleEntry.setDescription('A row in the compression browser Rule table.')
slbNewAcclCfgCompBrwsRuleListIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleListIdIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleListIdIndex.setDescription('The compression browser list (key id) as an index.')
slbNewAcclCfgCompBrwsRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleIndex.setDescription('The compression browser Rule number as an index.')
slbNewAcclCfgCompBrwsRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleName.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleName.setDescription('The compression browser Rule name.')
slbNewAcclCfgCompBrwsRuleAgentM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleAgentM.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleAgentM.setDescription('Defines whether user agent field should be evaluated as String, Regex or match, any (default any).')
slbNewAcclCfgCompBrwsRuleAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleAgent.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleAgent.setDescription('Defines the User-Agent string for which this rule applies.')
slbNewAcclCfgCompBrwsRuleContentM = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("any", 1), ("text", 2), ("regex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleContentM.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleContentM.setDescription('Defines whether content type should be evaluated as String, Regex or match, any (default any).')
slbNewAcclCfgCompBrwsRuleContent = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleContent.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleContent.setDescription('Defines the Content-type string for which this rule applies.')
slbNewAcclCfgCompBrwsRuleCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleCompress.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleCompress.setDescription('Enable/Disable the compression. Defines if the matched response should be compressed or not')
slbNewAcclCfgCompBrwsRuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleAdminStatus.setDescription('Status (enable/disable) of compression browser Rule.')
slbNewAcclCfgCompBrwsRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewAcclCfgCompBrwsRuleCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 18, 2, 12, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewAcclCfgCompBrwsRuleCopy.setDescription('Copy rule to another index in the same rule-list.')
slbCurNwclssCfgNetworkClassesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 1), )
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesTable.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesTable.setDescription('Current network classes table.')
slbCurNwclssCfgNetworkClassesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurNwclssCfgNetworkClassesId"))
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesEntry.setDescription('A row in the network classes table.')
slbCurNwclssCfgNetworkClassesId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesId.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesId.setDescription('Network class id.')
slbCurNwclssCfgNetworkClassesName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesName.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesName.setDescription('Network class name.')
slbCurNwclssCfgNetworkClassesIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesIpVer.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkClassesIpVer.setDescription('The type of IP address.')
slbNewNwclssCfgNetworkClassesTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 2), )
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesTable.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesTable.setDescription('New network classes table.')
slbNewNwclssCfgNetworkClassesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewNwclssCfgNetworkClassesId"))
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesEntry.setDescription('A row in the new network classes table.')
slbNewNwclssCfgNetworkClassesId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesId.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesId.setDescription('Network class id.')
slbNewNwclssCfgNetworkClassesName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesName.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesName.setDescription('Network class name.')
slbNewNwclssCfgNetworkClassesIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesIpVer.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesIpVer.setDescription('The type of IP address.')
slbNewNwclssCfgNetworkClassesDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesDel.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesDel.setDescription('By setting the value to delete(2), the entire row is deleted.')
slbNewNwclssCfgNetworkClassesCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesCopy.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkClassesCopy.setDescription('Duplicating an entire Network class by defining the destination Network class id.')
slbCurNwclssCfgNetworkElementsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3), )
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsTable.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsTable.setDescription('Current network elements table.')
slbCurNwclssCfgNetworkElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurNwclssCfgNetworkElementsNcId"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurNwclssCfgNetworkElementsId"))
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsEntry.setDescription('A row in the network elements table.')
slbCurNwclssCfgNetworkElementsNcId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsNcId.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsNcId.setDescription('Id of network class which owns network element.')
slbCurNwclssCfgNetworkElementsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsId.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsId.setDescription('Network element id.')
slbCurNwclssCfgNetworkElementsNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subnet", 1), ("range", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsNetType.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsNetType.setDescription('The type of network.')
slbCurNwclssCfgNetworkElementsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsIp.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsIp.setDescription('IPv4 address of network element.')
slbCurNwclssCfgNetworkElementsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsMask.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsMask.setDescription('Subnet mask of network element.')
slbCurNwclssCfgNetworkElementsFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsFromIp.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsFromIp.setDescription('From IP address of network element.')
slbCurNwclssCfgNetworkElementsToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsToIp.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsToIp.setDescription('To IP address of network element.')
slbCurNwclssCfgNetworkElementsIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsIpv6Addr.setDescription('The IPv6 address of network element. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbCurNwclssCfgNetworkElementsPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsPrefixLen.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsPrefixLen.setDescription('The prefix length associated with the network IP address .')
slbCurNwclssCfgNetworkElementsFromIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsFromIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsFromIpv6Addr.setDescription('The from IPv6 address of network element. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbCurNwclssCfgNetworkElementsToIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsToIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsToIpv6Addr.setDescription('The to IPv6 address of network element. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbCurNwclssCfgNetworkElementsMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsMatchType.setStatus('current')
if mibBuilder.loadTexts: slbCurNwclssCfgNetworkElementsMatchType.setDescription('The match type of network element.')
slbNewNwclssCfgNetworkElementsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4), )
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsTable.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsTable.setDescription('New network elements table.')
slbNewNwclssCfgNetworkElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewNwclssCfgNetworkElementsNcId"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewNwclssCfgNetworkElementsId"))
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsEntry.setDescription('A row in the new network elements table.')
slbNewNwclssCfgNetworkElementsNcId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsNcId.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsNcId.setDescription('ID of network class which owns network element.')
slbNewNwclssCfgNetworkElementsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsId.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsId.setDescription('Network class ID.')
slbNewNwclssCfgNetworkElementsNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subnet", 1), ("range", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsNetType.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsNetType.setDescription('The type of network.')
slbNewNwclssCfgNetworkElementsIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsIp.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsIp.setDescription('IP address of network element.')
slbNewNwclssCfgNetworkElementsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsMask.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsMask.setDescription('Subnet mask of network element.')
slbNewNwclssCfgNetworkElementsFromIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsFromIp.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsFromIp.setDescription('From IP address of network element.')
slbNewNwclssCfgNetworkElementsToIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsToIp.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsToIp.setDescription('To IP address of network element.')
slbNewNwclssCfgNetworkElementsIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsIpv6Addr.setDescription('The IPv6 address of network element. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbNewNwclssCfgNetworkElementsPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsPrefixLen.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsPrefixLen.setDescription('The prefix length associated with the network IP address .')
slbNewNwclssCfgNetworkElementsFromIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsFromIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsFromIpv6Addr.setDescription('The from IPv6 address of network element. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbNewNwclssCfgNetworkElementsToIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsToIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsToIpv6Addr.setDescription('The to IPv6 address of network element. Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx')
slbNewNwclssCfgNetworkElementsMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("include", 1), ("exclude", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsMatchType.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsMatchType.setDescription('The match type of network element.')
slbNewNwclssCfgNetworkElementsDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 22, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsDel.setStatus('current')
if mibBuilder.loadTexts: slbNewNwclssCfgNetworkElementsDel.setDescription('By setting the value to delete(2), the entire row is deleted.')
cachStatSummTotObj = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummTotObj.setStatus('current')
if mibBuilder.loadTexts: cachStatSummTotObj.setDescription('Number of Objects served by cache within the measuring period.')
cachStatSummHitPerc = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummHitPerc.setStatus('current')
if mibBuilder.loadTexts: cachStatSummHitPerc.setDescription('Percent of HTTP requests served by objects from cache.')
cachStatSummServRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummServRate.setStatus('current')
if mibBuilder.loadTexts: cachStatSummServRate.setDescription('Rate of requests served by cache every second.')
cachStatSummNewCachedObj = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummNewCachedObj.setStatus('current')
if mibBuilder.loadTexts: cachStatSummNewCachedObj.setDescription('Amount of new objects cached during the measuring period.')
cachStatSummRateNewCachedObj = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummRateNewCachedObj.setStatus('current')
if mibBuilder.loadTexts: cachStatSummRateNewCachedObj.setDescription('Average number of new objects cached every second.')
cachStatSummNewCachedBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummNewCachedBytes.setStatus('current')
if mibBuilder.loadTexts: cachStatSummNewCachedBytes.setDescription('Amount of new bytes cached during the measuring period.')
cachStatSummRateNewCachedBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummRateNewCachedBytes.setStatus('current')
if mibBuilder.loadTexts: cachStatSummRateNewCachedBytes.setDescription('Average number of new bytes cached every second.')
cachStatSummObjSmaller10K = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummObjSmaller10K.setStatus('current')
if mibBuilder.loadTexts: cachStatSummObjSmaller10K.setDescription('Amount of objects cached during last measuring period of size smaller than 10KB.')
cachStatSummObj11KTO50K = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummObj11KTO50K.setStatus('current')
if mibBuilder.loadTexts: cachStatSummObj11KTO50K.setDescription('Amount of objects cached during last measuring period of size between 11KB and 50KB.')
cachStatSummObj51KTO100K = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummObj51KTO100K.setStatus('current')
if mibBuilder.loadTexts: cachStatSummObj51KTO100K.setDescription('Amount of objects cached during last measuring period of size between 51KB and 100KB.')
cachStatSummObj101KTO1M = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummObj101KTO1M.setStatus('current')
if mibBuilder.loadTexts: cachStatSummObj101KTO1M.setDescription('Amount of objects cached during last measuring period of size between 101KB and 1MB.')
cachStatSummObjLarger1M = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatSummObjLarger1M.setStatus('current')
if mibBuilder.loadTexts: cachStatSummObjLarger1M.setDescription('Amount of objects cached during last measuring period of size larger than 1MB.')
cachPerServStatTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13), )
if mibBuilder.loadTexts: cachPerServStatTable.setStatus('current')
if mibBuilder.loadTexts: cachPerServStatTable.setDescription('A table for cache statistics per virtual service.')
cachPerServStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "cachStatPerServVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "cachStatPerServVirtServiceIndex"))
if mibBuilder.loadTexts: cachPerServStatEntry.setStatus('current')
if mibBuilder.loadTexts: cachPerServStatEntry.setDescription(' The row definition for cache statistics per virtual service table.')
cachStatPerServVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cachStatPerServVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServVirtServIndex.setDescription('Virtual server index.')
cachStatPerServVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cachStatPerServVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServVirtServiceIndex.setDescription('Virtual server service index.')
cachStatPerServVirtServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cachStatPerServVirtServPort.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServVirtServPort.setDescription('Virtual server service port number.')
cachStatPerServCachePolId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServCachePolId.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServCachePolId.setDescription('Cache policy identifier associated with the virtual service.')
cachStatPerServTotObj = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServTotObj.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServTotObj.setDescription('Number of objects served by cache during the measuring period for virtual service.')
cachStatPerServHitPerc = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServHitPerc.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServHitPerc.setDescription('Percent of HTTP requests served by objects from cache for virtual service.')
cachStatPerServServRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServServRate.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServServRate.setDescription('Rate of requests served by cache every second for virtual service.')
cachStatPerServNewCachedObj = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServNewCachedObj.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServNewCachedObj.setDescription('Amount of new objects cached during the measuring period for virtual service.')
cachStatPerServRateNewCachedObj = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServRateNewCachedObj.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServRateNewCachedObj.setDescription('Average number of new objects cached every second for virtual service.')
cachStatPerServNewCachedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServNewCachedBytes.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServNewCachedBytes.setDescription('Amount of new bytes cached during the measuring period for virtual service.')
cachStatPerServRateNewCachedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServRateNewCachedBytes.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServRateNewCachedBytes.setDescription('Average number of new bytes cached every second for virtual service.')
cachStatPerServObjSmaller10K = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServObjSmaller10K.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServObjSmaller10K.setDescription('Amount of objects cached during last measuring period of size smaller than 10KB for virtual service.')
cachStatPerServObj11KTO50K = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServObj11KTO50K.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServObj11KTO50K.setDescription('Amount of objects cached during last measuring period of size between 11KB and 50KB for virtual service.')
cachStatPerServObj51KTO100K = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServObj51KTO100K.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServObj51KTO100K.setDescription('Amount of objects cached during last measuring period of size between 51KB and 100KB for virtual service.')
cachStatPerServObj101KTO1M = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServObj101KTO1M.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServObj101KTO1M.setDescription('Amount of objects cached during last measuring period of size between 101KB and 1MB for virtual service.')
cachStatPerServObjLarger1M = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 13, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachStatPerServObjLarger1M.setStatus('current')
if mibBuilder.loadTexts: cachStatPerServObjLarger1M.setDescription('Amount of objects cached during last measuring period of size larger than 1MB for virtual service.')
cachPerRuleListStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 14), )
if mibBuilder.loadTexts: cachPerRuleListStatsTable.setStatus('current')
if mibBuilder.loadTexts: cachPerRuleListStatsTable.setDescription('A table for cache statistics per rule list.')
cachPerRuleListStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 14, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "cachRuleListId"))
if mibBuilder.loadTexts: cachPerRuleListStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cachPerRuleListStatsEntry.setDescription(' The row definition for cache statistics per rule list table.')
cachRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleListIndex.setStatus('current')
if mibBuilder.loadTexts: cachRuleListIndex.setDescription('Cache rule list index.')
cachRuleListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleListId.setStatus('current')
if mibBuilder.loadTexts: cachRuleListId.setDescription('Cache rule list identifier.')
cachRuleListNumOfObjCac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleListNumOfObjCac.setStatus('current')
if mibBuilder.loadTexts: cachRuleListNumOfObjCac.setDescription('Number of objects cached by this rule list.')
cachRuleListNumOfBytesCac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleListNumOfBytesCac.setStatus('current')
if mibBuilder.loadTexts: cachRuleListNumOfBytesCac.setDescription('Number of bytes cached by this rule list.')
cachPerRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 15), )
if mibBuilder.loadTexts: cachPerRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: cachPerRuleStatsTable.setDescription('A table for cache statistics per rule.')
cachPerRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 15, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "cachRuleRuleListIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "cachRuleIndex"))
if mibBuilder.loadTexts: cachPerRuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cachPerRuleStatsEntry.setDescription(' The row definition for cache statistics per rule table.')
cachRuleRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleRuleListIndex.setStatus('current')
if mibBuilder.loadTexts: cachRuleRuleListIndex.setDescription('Cache rule rule-list index.')
cachRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleIndex.setStatus('current')
if mibBuilder.loadTexts: cachRuleIndex.setDescription('Cache rule number.')
cachRuleRuleListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleRuleListId.setStatus('current')
if mibBuilder.loadTexts: cachRuleRuleListId.setDescription('Cache rule rule-list identifier.')
cachRuleNumOfObjCac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleNumOfObjCac.setStatus('current')
if mibBuilder.loadTexts: cachRuleNumOfObjCac.setDescription('Number of objects cached by the rule.')
cachRuleNumOfBytesCac = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cachRuleNumOfBytesCac.setStatus('current')
if mibBuilder.loadTexts: cachRuleNumOfBytesCac.setDescription('Number of bytes cached by the rule.')
compUnCompressedThrputKB = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUnCompressedThrputKB.setStatus('current')
if mibBuilder.loadTexts: compUnCompressedThrputKB.setDescription('Total throughput of compressible object before compression counted during measuring period.')
compAvgSizeBefCompKB = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compAvgSizeBefCompKB.setStatus('current')
if mibBuilder.loadTexts: compAvgSizeBefCompKB.setDescription('Average object size before compression.')
compCompressedThrputKB = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compCompressedThrputKB.setStatus('current')
if mibBuilder.loadTexts: compCompressedThrputKB.setDescription('Total throughput of compressible objects after compression counted during measuring period.')
compAvgSizeAftCompKB = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compAvgSizeAftCompKB.setStatus('current')
if mibBuilder.loadTexts: compAvgSizeAftCompKB.setDescription('Average object size after compression.')
compAvgCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compAvgCompRatio.setStatus('current')
if mibBuilder.loadTexts: compAvgCompRatio.setDescription('Average compression ratio during measuring period.')
compThrputCompRatio = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compThrputCompRatio.setStatus('current')
if mibBuilder.loadTexts: compThrputCompRatio.setDescription('Effective compression ratio out of total traffic.')
compStatPerServTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7), )
if mibBuilder.loadTexts: compStatPerServTable.setStatus('current')
if mibBuilder.loadTexts: compStatPerServTable.setDescription('A table for compression statistics per virtual service.')
compStatPerServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "compStatPerServVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "compStatPerServVirtServiceIndex"))
if mibBuilder.loadTexts: compStatPerServEntry.setStatus('current')
if mibBuilder.loadTexts: compStatPerServEntry.setDescription(' The row definition for compression statistics per virtual service table.')
compStatPerServVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compStatPerServVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: compStatPerServVirtServIndex.setDescription('Virtual server number.')
compStatPerServVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compStatPerServVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: compStatPerServVirtServiceIndex.setDescription('Virtual server service index.')
compStatPerServVirtServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: compStatPerServVirtServPort.setStatus('current')
if mibBuilder.loadTexts: compStatPerServVirtServPort.setDescription('Virtual server service port number.')
compStatPerServCompPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compStatPerServCompPolId.setStatus('current')
if mibBuilder.loadTexts: compStatPerServCompPolId.setDescription('Compression policy identifier associated with the virtual service.')
compStatPerServUnComprTputKb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compStatPerServUnComprTputKb.setStatus('current')
if mibBuilder.loadTexts: compStatPerServUnComprTputKb.setDescription('Total throughput of compressible object before compression counted during measuring period for virtual service.')
compStatPerServComprTputKb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compStatPerServComprTputKb.setStatus('current')
if mibBuilder.loadTexts: compStatPerServComprTputKb.setDescription('Total throughput of compressible objects after compression counted during measuring period for virtual service.')
compStatPerServAvgSizeBefComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compStatPerServAvgSizeBefComp.setStatus('current')
if mibBuilder.loadTexts: compStatPerServAvgSizeBefComp.setDescription('Average object size before compression for virtual service.')
compStatPerServAvgSizeAftComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compStatPerServAvgSizeAftComp.setStatus('current')
if mibBuilder.loadTexts: compStatPerServAvgSizeAftComp.setDescription('Average object size after compression for virtual service.')
compStatPerServAvgCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compStatPerServAvgCompRatio.setStatus('current')
if mibBuilder.loadTexts: compStatPerServAvgCompRatio.setDescription('Average compression ratio during measuring period for virtual service.')
compStatPerServThrputCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compStatPerServThrputCompRatio.setStatus('current')
if mibBuilder.loadTexts: compStatPerServThrputCompRatio.setDescription('Effective compression ratio out of total traffic for virtual service.')
compPerBrowRuleListStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8), )
if mibBuilder.loadTexts: compPerBrowRuleListStatsTable.setStatus('current')
if mibBuilder.loadTexts: compPerBrowRuleListStatsTable.setDescription('A table for compression statistics per rule list.')
compPerBrowRuleListStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "compBrowRuleListIndex"))
if mibBuilder.loadTexts: compPerBrowRuleListStatsEntry.setStatus('current')
if mibBuilder.loadTexts: compPerBrowRuleListStatsEntry.setDescription(' The row definition for compression statistics per rule list table.')
compBrowRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleListIndex.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleListIndex.setDescription('Compression browsing rule list index.')
compBrowRuleListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleListId.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleListId.setDescription('Compression browsing rule list identifier.')
compBrowRuleListNumOfObj = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleListNumOfObj.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleListNumOfObj.setDescription('Number of objects matched by this rule-list during measuring period.')
compBrowRuleListSizeBefComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleListSizeBefComp.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleListSizeBefComp.setDescription('Total size of all matched objects by this browser rule-list before compression.')
compBrowRuleListSizeAftComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleListSizeAftComp.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleListSizeAftComp.setDescription('Total size of all matched objects by this browser rule-list after compression.')
compBrowRuleListCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleListCompRatio.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleListCompRatio.setDescription('Compression ratio per rule list.')
compPerBrowRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9), )
if mibBuilder.loadTexts: compPerBrowRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: compPerBrowRuleStatsTable.setDescription('A table for compression statistics per browser rule.')
compPerBrowRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "compBrowRuleRuleListIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "compBrowRuleIndex"))
if mibBuilder.loadTexts: compPerBrowRuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: compPerBrowRuleStatsEntry.setDescription(' The row definition for compression statistics per browser rule.')
compBrowRuleRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleRuleListIndex.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleRuleListIndex.setDescription('Compression browser rule rule-list index.')
compBrowRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleIndex.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleIndex.setDescription('Compression browser rule index.')
compBrowRuleRuleListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleRuleListId.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleRuleListId.setDescription('Compression browser rule rule-list identifier.')
compBrowRuleNumOfObj = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleNumOfObj.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleNumOfObj.setDescription('Number of objects matched by this browser rule during measuring period.')
compBrowRuleSizeBefComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleSizeBefComp.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleSizeBefComp.setDescription('Total size of all matched objects for this browser rule before compression.')
compBrowRuleSizeAftComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleSizeAftComp.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleSizeAftComp.setDescription('Total size of all matched objects for this browser rule after compression.')
compBrowRuleCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compBrowRuleCompRatio.setStatus('current')
if mibBuilder.loadTexts: compBrowRuleCompRatio.setDescription('Compression ratio per browser rule.')
compPerUrlRuleListStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10), )
if mibBuilder.loadTexts: compPerUrlRuleListStatsTable.setStatus('current')
if mibBuilder.loadTexts: compPerUrlRuleListStatsTable.setDescription('A table for compression statistics per URL Rule list.')
compPerUrlRuleListStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "compUrlRuleListIndex"))
if mibBuilder.loadTexts: compPerUrlRuleListStatsEntry.setStatus('current')
if mibBuilder.loadTexts: compPerUrlRuleListStatsEntry.setDescription(' The row definition for this table.')
compUrlRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleListIndex.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleListIndex.setDescription('Compression url rule list index.')
compUrlRuleListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleListId.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleListId.setDescription('Compression url rule list identifier.')
compUrlRuleListNumOfObj = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleListNumOfObj.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleListNumOfObj.setDescription('Number of objects matched by this url rule list during measuring period.')
compUrlRuleListSizeBefComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleListSizeBefComp.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleListSizeBefComp.setDescription('Total size of all matched objects for this url rule list before compression.')
compUrlRuleListSizeAftComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleListSizeAftComp.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleListSizeAftComp.setDescription('Total size of all matched objects this url rule list after compression.')
compUrlRuleListCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleListCompRatio.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleListCompRatio.setDescription('Compression ratio for this url rule list.')
compPerUrlRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11), )
if mibBuilder.loadTexts: compPerUrlRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: compPerUrlRuleStatsTable.setDescription('A table for compression statistics per URL Rule.')
compPerUrlRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "compUrlRuleRuleListIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "compUrlRuleIndex"))
if mibBuilder.loadTexts: compPerUrlRuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: compPerUrlRuleStatsEntry.setDescription(' The row definition for this table.')
compUrlRuleRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleRuleListIndex.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleRuleListIndex.setDescription('Compression url rule rule-list index.')
compUrlRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleIndex.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleIndex.setDescription('Compression url rule index.')
compUrlRuleRuleListId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleRuleListId.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleRuleListId.setDescription('Compression url rule rule-list identifier.')
compUrlRuleNumOfObj = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleNumOfObj.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleNumOfObj.setDescription('Number of objects matched by this url rule during measuring period.')
compUrlRuleSizeBefComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleSizeBefComp.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleSizeBefComp.setDescription('Total size of all matched objects for this url rule before compression.')
compUrlRuleSizeAftComp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleSizeAftComp.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleSizeAftComp.setDescription('Total size of all matched objects for this url rule after compression.')
compUrlRuleCompRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 23, 2, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: compUrlRuleCompRatio.setStatus('current')
if mibBuilder.loadTexts: compUrlRuleCompRatio.setDescription('Compression ratio for this url rule.')
sslOffNewHandShake = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffNewHandShake.setStatus('current')
if mibBuilder.loadTexts: sslOffNewHandShake.setDescription('Number of new SSL handshakes between clients and AAS per second.')
sslOffReusedHandShake = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffReusedHandShake.setStatus('current')
if mibBuilder.loadTexts: sslOffReusedHandShake.setDescription('Number of existing SSL handshakes reused by clients to communicate with AAS per second.')
sslOffPerReusedHandShake = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerReusedHandShake.setStatus('current')
if mibBuilder.loadTexts: sslOffPerReusedHandShake.setDescription('Percentage of SSL session re-using keys.')
sslOffPercSessUsingSSLv2 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPercSessUsingSSLv2.setStatus('current')
if mibBuilder.loadTexts: sslOffPercSessUsingSSLv2.setDescription('Percentage of session using SSLv2 out of all session during measuring period.')
sslOffPercSessUsingSSLv3 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPercSessUsingSSLv3.setStatus('current')
if mibBuilder.loadTexts: sslOffPercSessUsingSSLv3.setDescription('Percentage of session using SSLv3 out of all session during measuring period.')
sslOffPercSessUsingTLS = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPercSessUsingTLS.setStatus('current')
if mibBuilder.loadTexts: sslOffPercSessUsingTLS.setDescription('Percentage of session using TLS1.0 out of all session during measuring period.')
sslOffPerServStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17), )
if mibBuilder.loadTexts: sslOffPerServStatsTable.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServStatsTable.setDescription('A table for SSL statistics per virtual service.')
sslOffPerServStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "sslOffPerServVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "sslOffPerServVirtServiceIndex"))
if mibBuilder.loadTexts: sslOffPerServStatsEntry.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServStatsEntry.setDescription(' The row definition for SSL statistics per virtual service table.')
sslOffPerServVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServVirtServIndex.setDescription('Virtual server number.')
sslOffPerServVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServVirtServiceIndex.setDescription('Virtual server service index.')
sslOffPerServVirtServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServVirtServPort.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServVirtServPort.setDescription('Virtual server service port number.')
sslOffPerServSslPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServSslPolId.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServSslPolId.setDescription('SSL policy identifier associated with the virtual service.')
sslOffPerServNewhandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServNewhandShake.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServNewhandShake.setDescription('Number of New SSL handshakes between Clients and AAS per second for this virtual service.')
sslOffPerServReusedhandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServReusedhandShake.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServReusedhandShake.setDescription('Number of existing SSL handshakes re-used by clients to communicate with AAS per second for virtual service.')
sslOffPerServPercReusedhandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServPercReusedhandShake.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServPercReusedhandShake.setDescription('Percentage of SSL session re-using keys for virtual service.')
sslOffPerServSessUsingSSLv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServSessUsingSSLv2.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServSessUsingSSLv2.setDescription('Percentage of session using SSLv2 out of all session during measuring period for virtual service.')
sslOffPerServSessUsingSSLv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServSessUsingSSLv3.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServSessUsingSSLv3.setDescription('Percentage of session using SSLv3 out of all session during measuring period for virtual service.')
sslOffPerServSessUsingTLS = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServSessUsingTLS.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServSessUsingTLS.setDescription('Percentage of session using TLS1.0 out of all session during measuring period for virtual service.')
sslOffPerServSessUsingTLS11 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPerServSessUsingTLS11.setStatus('current')
if mibBuilder.loadTexts: sslOffPerServSessUsingTLS11.setDescription('Percentage of session using TLS1.1 out of all session during measuring period for virtual service.')
sslOffPercSessUsingTLS11 = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOffPercSessUsingTLS11.setStatus('current')
if mibBuilder.loadTexts: sslOffPercSessUsingTLS11.setDescription('Percentage of session using TLS1.1 out of all session during measuring period.')
httpStatSummCliusingKeepAliv = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummCliusingKeepAliv.setStatus('current')
if mibBuilder.loadTexts: httpStatSummCliusingKeepAliv.setDescription('Number of clients sending connection: keep-alive.')
httpStatSummHTTP10Per = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummHTTP10Per.setStatus('current')
if mibBuilder.loadTexts: httpStatSummHTTP10Per.setDescription('Percent of requests done using HTTP 1.0 during the measuring period.')
httpStatSummHTTP11Per = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummHTTP11Per.setStatus('current')
if mibBuilder.loadTexts: httpStatSummHTTP11Per.setDescription('Percent of requests done using HTTP 1.1 during measuring period.')
httpStatSummHttpToHttpsRedir = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummHttpToHttpsRedir.setStatus('current')
if mibBuilder.loadTexts: httpStatSummHttpToHttpsRedir.setDescription('Number of HTTP redirect location headers updated from HTTP to HTTPS by AAS.')
httpStatSummAvgNumReqPerConn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummAvgNumReqPerConn.setStatus('current')
if mibBuilder.loadTexts: httpStatSummAvgNumReqPerConn.setDescription('The average number of requests done over each client connection.')
httpStatSummResSmall1Kb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummResSmall1Kb.setStatus('current')
if mibBuilder.loadTexts: httpStatSummResSmall1Kb.setDescription('Number of responses for which content size reported smaller than 1KB.')
httpStatSummRes1KbTo10Kb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummRes1KbTo10Kb.setStatus('current')
if mibBuilder.loadTexts: httpStatSummRes1KbTo10Kb.setDescription('Number of responses for which content size reported between 1KB and 10KB.')
httpStatSummRes11KbTo50Kb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummRes11KbTo50Kb.setStatus('current')
if mibBuilder.loadTexts: httpStatSummRes11KbTo50Kb.setDescription('Number of responses for which content size reported between 11KB and 50KB.')
httpStatSummRes51KbTo100Kb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummRes51KbTo100Kb.setStatus('current')
if mibBuilder.loadTexts: httpStatSummRes51KbTo100Kb.setDescription('Number of responses for which content size reported between 51KB and 100KB.')
httpStatSummResLarger100Kb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpStatSummResLarger100Kb.setStatus('current')
if mibBuilder.loadTexts: httpStatSummResLarger100Kb.setDescription('Number of responses for which content size reported larger than 100KB.')
httpTransSummReqCliToAas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransSummReqCliToAas.setStatus('current')
if mibBuilder.loadTexts: httpTransSummReqCliToAas.setDescription('Number of clients requests from AAS done in the measuring period .')
httpTransSummReqAasToSer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransSummReqAasToSer.setStatus('current')
if mibBuilder.loadTexts: httpTransSummReqAasToSer.setDescription('Number of AAS requests from servers done in the measuring period.')
httpTransSummResSerToAas = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransSummResSerToAas.setStatus('current')
if mibBuilder.loadTexts: httpTransSummResSerToAas.setDescription('Number of servers responses to AAS in the measuring period.')
httpTransSummResAasToCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransSummResAasToCli.setStatus('current')
if mibBuilder.loadTexts: httpTransSummResAasToCli.setDescription('Number of AAS responses to clients in the measuring period.')
httpTransSummTransRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpTransSummTransRate.setStatus('current')
if mibBuilder.loadTexts: httpTransSummTransRate.setDescription('HTTP transactions per second.')
httpPerServStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16), )
if mibBuilder.loadTexts: httpPerServStatsTable.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsTable.setDescription('A table for HTTP statistics per virtual service.')
httpPerServStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "httpPerServStatsVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "httpPerServStatsVirtServiceIndex"))
if mibBuilder.loadTexts: httpPerServStatsEntry.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsEntry.setDescription(' The row definition for HTTP statistics per virtual service table.')
httpPerServStatsVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPerServStatsVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsVirtServIndex.setDescription('Virtual server number.')
httpPerServStatsVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPerServStatsVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsVirtServiceIndex.setDescription('Virtual server service index.')
httpPerServStatsVirtServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPerServStatsVirtServPort.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsVirtServPort.setDescription('Virtual server service port number.')
httpPerServStatsCliUseKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsCliUseKeepAlive.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsCliUseKeepAlive.setDescription('Number of clients sending Connection: Keep-Alive for virtual service.')
httpPerServStatsHttp10VsHttp11Ratio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsHttp10VsHttp11Ratio.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsHttp10VsHttp11Ratio.setDescription('Ratio of requests done using HTTP 1.0 and HTTP 1.1 during measuring period for virtual service.')
httpPerServStatsHttpToHTTPSRedir = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsHttpToHTTPSRedir.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsHttpToHTTPSRedir.setDescription('Number of HTTP redirect location headers updated from HTTP to HTTPS by AAS for virtual service.')
httpPerServStatsAvgNumReqPerConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsAvgNumReqPerConn.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsAvgNumReqPerConn.setDescription('The average number of requests done over each client connection for virtual service.')
httpPerServStatsRespSmall1Kb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsRespSmall1Kb.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsRespSmall1Kb.setDescription('Number of responses for which content size reported smaller than 1KB for virtual service.')
httpPerServStatsResp1KbTo10Kb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsResp1KbTo10Kb.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsResp1KbTo10Kb.setDescription('Number of responses for which content size reported between 1KB and 10KB for virtual service.')
httpPerServStatsResp11KbTo50Kb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsResp11KbTo50Kb.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsResp11KbTo50Kb.setDescription('Number of responses for which content size reported between 11KB and 50KB for virtual service.')
httpPerServStatsResp51KbTo100Kb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsResp51KbTo100Kb.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsResp51KbTo100Kb.setDescription('Number of responses for which content size reported between 51KB and 100KB for virtual service.')
httpPerServStatsRespLarger100Kb = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsRespLarger100Kb.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsRespLarger100Kb.setDescription('Number of responses for which content size reported larger than 100KB for virtual service.')
httpPerServStatsReqCliToAas = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsReqCliToAas.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsReqCliToAas.setDescription('Number of clients requests from AAS done in the measuring period for virtual service.')
httpPerServStatsReqAasToSer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsReqAasToSer.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsReqAasToSer.setDescription('Number of AAS requests from servers done in the measuring period for virtual service.')
httpPerServStatsRespSerToAas = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsRespSerToAas.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsRespSerToAas.setDescription('Number of servers responses to AAS in the measuring period for virtual service.')
httpPerServStatsRespAasToCli = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsRespAasToCli.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsRespAasToCli.setDescription('Number of AAS responses to clients in the measuring period for virtual service.')
httpPerServStatsTransRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 16, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPerServStatsTransRate.setStatus('current')
if mibBuilder.loadTexts: httpPerServStatsTransRate.setDescription('Transactions rate for virtual service.')
connmngStatSummServConn = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connmngStatSummServConn.setStatus('current')
if mibBuilder.loadTexts: connmngStatSummServConn.setDescription('Number of concurrent backend server connections.')
connmngStatSummCliReq = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connmngStatSummCliReq.setStatus('current')
if mibBuilder.loadTexts: connmngStatSummCliReq.setDescription('Number of client requests passed to AX.')
connmngStatSummMulRatio = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connmngStatSummMulRatio.setStatus('current')
if mibBuilder.loadTexts: connmngStatSummMulRatio.setDescription('Connection multiplexing ratio.')
connmngPerServStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4), )
if mibBuilder.loadTexts: connmngPerServStatsTable.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsTable.setDescription('A table for connection management statistics per virtual service.')
connmngPerServStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "connmngPerServStatsVirtServIndex"), (0, "ALTEON-CHEETAH-LAYER4-MIB", "connmngPerServStatsVirtServiceIndex"))
if mibBuilder.loadTexts: connmngPerServStatsEntry.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsEntry.setDescription(' The row definition for connection management statistics per virtual service table.')
connmngPerServStatsVirtServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connmngPerServStatsVirtServIndex.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsVirtServIndex.setDescription('Virtual server number.')
connmngPerServStatsVirtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connmngPerServStatsVirtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsVirtServiceIndex.setDescription('Virtual server service index.')
connmngPerServStatsVirtServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connmngPerServStatsVirtServPort.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsVirtServPort.setDescription('Virtual server service port number.')
connmngPerServStatsServConn = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connmngPerServStatsServConn.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsServConn.setDescription('Number of concurrent backend server connections for virtual service.')
connmngPerServStatsCliReq = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connmngPerServStatsCliReq.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsCliReq.setDescription('Number of client requests passed to AX for virtual service.')
connmngPerServStatsMulRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 24, 17, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connmngPerServStatsMulRatio.setStatus('current')
if mibBuilder.loadTexts: connmngPerServStatsMulRatio.setDescription('Connection multiplexing ratio for virtual service.')
slbSapAslrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbSapAslrTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: slbSapAslrTableMaxSize.setDescription('The maximum number of entries in SAP ASLR connection management table.')
slbCurCfgSapAslrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2), )
if mibBuilder.loadTexts: slbCurCfgSapAslrTable.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrTable.setDescription('The SAP ASLR connection management table.')
slbCurCfgSapAslrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbCurCfgSapAslrIndex"))
if mibBuilder.loadTexts: slbCurCfgSapAslrEntry.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrEntry.setDescription('A row in the SAP ASLR connection management table.')
slbCurCfgSapAslrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrIndex.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrIndex.setDescription('The Sap Aslr number')
slbCurCfgSapAslrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrIpAddr.setDescription('IP address of the Sap Aslr identified by the instance of the slbCurCfgSapAslrIndex.')
slbCurCfgSapAslrIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrIpv6Addr.setDescription(' IPV6 address of the Sap Aslr manager identified by the instance of the slbCurCfgSapAslrIndex Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
slbCurCfgSapAslrIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrIpVer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrIpVer.setDescription('The type of IP address.')
slbCurCfgSapAslrPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrPortNum.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrPortNum.setDescription('The Sap Aslr service port number.')
slbCurCfgSapAslrVipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrVipAddr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrVipAddr.setDescription('IP address of the VIP identified by the instance of the slbNewCfgSapAslrIndex.')
slbCurCfgSapAslrVipv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrVipv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrVipv6Addr.setDescription(' IPV6 address of the VIP identified by the instance of the slbNewCfgSapAslrIndex Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
slbCurCfgSapAslrVipIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrVipIpVer.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrVipIpVer.setDescription('The type of VIP IP address.')
slbCurCfgSapAslrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrInterval.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrInterval.setDescription('Set the Sap Aslr server inspection interval.')
slbCurCfgSapAslrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrState.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrState.setDescription('Enable or disable the Sap Aslr server sampling.')
slbCurCfgSapAslrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrName.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrName.setDescription('The name of the Sap Aslr connection.')
slbCurCfgSapAslrLastAct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrLastAct.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrLastAct.setDescription('The Sap Aslr connection last activity time stamp.')
slbCurCfgSapAslrAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("full", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbCurCfgSapAslrAutoConfig.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrAutoConfig.setDescription('Defines the configuration update process. When set the value to basic (1), the configuration is limited, comparing to full (2)')
slbCurCfgSapAslrSessionInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrSessionInfo.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrSessionInfo.setDescription('Set the Sap Aslr session information. When read, zero is returned.')
slbCurCfgSapAslrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrDelete.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbCurCfgSapAslrSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbCurCfgSapAslrSignature.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrSignature.setDescription('The Sap Aslr connection signature.')
slbCurCfgSapAslrServCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbCurCfgSapAslrServCert.setStatus('current')
if mibBuilder.loadTexts: slbCurCfgSapAslrServCert.setDescription('Server Certificate name associated with this virtual service.')
slbNewCfgSapAslrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3), )
if mibBuilder.loadTexts: slbNewCfgSapAslrTable.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrTable.setDescription('The SAP ASLR connection management table.')
slbNewCfgSapAslrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbNewCfgSapAslrIndex"))
if mibBuilder.loadTexts: slbNewCfgSapAslrEntry.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrEntry.setDescription('A row in the SAP ASLR connection management table.')
slbNewCfgSapAslrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrIndex.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrIndex.setDescription('The Sap Aslr number')
slbNewCfgSapAslrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrIpAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrIpAddr.setDescription('IP address of the Sap Aslr identified by the instance of the slbNewCfgSapAslrIndex.')
slbNewCfgSapAslrIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrIpv6Addr.setDescription(' IPV6 address of the Sap Aslr manager identified by the instance of the slbNewCfgSapAslrIndex Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
slbNewCfgSapAslrIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrIpVer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrIpVer.setDescription('The type of IP address.')
slbNewCfgSapAslrPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65534))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrPortNum.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrPortNum.setDescription('The Sap Aslr service port number.')
slbNewCfgSapAslrVipAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrVipAddr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrVipAddr.setDescription('IP address of the VIP identified by the instance of the slbNewCfgSapAslrIndex.')
slbNewCfgSapAslrVipv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrVipv6Addr.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrVipv6Addr.setDescription(' IPV6 address of the VIP identified by the instance of the slbNewCfgSapAslrIndex Address should be 4-byte haxadecimal colon notation. Valid IPv6 address should be in any of the following forms xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx or xxxx::xxxx:xxxx:xxxx:xxxx or ::xxxx ')
slbNewCfgSapAslrVipIpVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrVipIpVer.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrVipIpVer.setDescription('The type of VIP IP address.')
slbNewCfgSapAslrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrInterval.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrInterval.setDescription('Set the Sap Aslr server inspection interval.')
slbNewCfgSapAslrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrState.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrState.setDescription('Enable or disable the Sap Aslr server sampling.')
slbNewCfgSapAslrName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrName.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrName.setDescription('The name of the Sap Aslr connection.')
slbNewCfgSapAslrLastAct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrLastAct.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrLastAct.setDescription('The Sap Aslr last activity time stamp.')
slbNewCfgSapAslrAutoConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("full", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrAutoConfig.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrAutoConfig.setDescription('Defines the configuration update process. When set the value to basic (1), the configuration is limited, comparing to full (2)')
slbNewCfgSapAslrSessionInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrSessionInfo.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrSessionInfo.setDescription('Set the Sap Aslr session information. When read, zero is returned.')
slbNewCfgSapAslrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrDelete.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
slbNewCfgSapAslrSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrSignature.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrSignature.setDescription('The Sap Aslr connection signature.')
slbNewCfgSapAslrServCert = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 1, 1, 20, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: slbNewCfgSapAslrServCert.setStatus('current')
if mibBuilder.loadTexts: slbNewCfgSapAslrServCert.setDescription('Server Certificate name associated with this virtual service.')
slbStatSapAslrTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1), )
if mibBuilder.loadTexts: slbStatSapAslrTable.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrTable.setDescription('The sap aslrr statistics table. This table shows the statistics of sap aslr for a particular vip.')
slbStatSapAslrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-LAYER4-MIB", "slbStatSapAslrIndex"))
if mibBuilder.loadTexts: slbStatSapAslrEntry.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrEntry.setDescription('A row in the sap aslr statistics table.')
slbStatSapAslrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSapAslrIndex.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrIndex.setDescription('The Sap Aslr table index.')
slbStatSapAslrSampling = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSapAslrSampling.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrSampling.setDescription('The number of Sap Aslr server lookups.')
slbStatSapAslrFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSapAslrFailure.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrFailure.setDescription('The number of Sap Aslr server lookup failures.')
slbStatSapAslrDeviceUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSapAslrDeviceUpdates.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrDeviceUpdates.setDescription('The number of Alteon automated configuration updates.')
slbStatSapAslrDeviceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSapAslrDeviceFailure.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrDeviceFailure.setDescription('The number of Alteon automated configuration failure.')
slbStatSapAslrLastAct = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 4, 2, 25, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slbStatSapAslrLastAct.setStatus('current')
if mibBuilder.loadTexts: slbStatSapAslrLastAct.setDescription('The Sap Aslr last activity time stamp.')
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", gslbCurCfgRemSiteSecondaryIp=gslbCurCfgRemSiteSecondaryIp, slbCurCfgSyncCerts=slbCurCfgSyncCerts, slbStatSpFltSpIndex=slbStatSpFltSpIndex, slbPortHotStandbyState=slbPortHotStandbyState, gslbNewDnsSecKeyTTL=gslbNewDnsSecKeyTTL, fltNewCfgLayer7DenyAddUrl=fltNewCfgLayer7DenyAddUrl, slbCurCfgSlbSessAtkIntrval=slbCurCfgSlbSessAtkIntrval, gslbNewCfgRuleDname=gslbNewCfgRuleDname, slbStatSapAslrEntry=slbStatSapAslrEntry, slbCurSslCfgAuthPolValidityCachtime=slbCurSslCfgAuthPolValidityCachtime, gslbStatMaintNoServerHost=gslbStatMaintNoServerHost, slbCurAcclCfgCompUrlRuleIndex=slbCurAcclCfgCompUrlRuleIndex, slbNewCfgPeerPIPv6Addr=slbNewCfgPeerPIPv6Addr, httpPerServStatsReqAasToSer=httpPerServStatsReqAasToSer, gslbStatVirtServerResponseTime=gslbStatVirtServerResponseTime, slbStatRServerHighestSessions=slbStatRServerHighestSessions, slbNewCfgVirtServiceVirtPort=slbNewCfgVirtServiceVirtPort, sslSlbStatCurSessions=sslSlbStatCurSessions, gslbCurCfgGenRemSiteUpdateVersion=gslbCurCfgGenRemSiteUpdateVersion, snmphcCurCfgOid=snmphcCurCfgOid, slbNewCfgVirtServiceSessionMirror=slbNewCfgVirtServiceSessionMirror, fltNewCfgExtendedIndx=fltNewCfgExtendedIndx, slbNewCfgPeerIpVersion=slbNewCfgPeerIpVersion, slbNewCfgPortSlbClntState=slbNewCfgPortSlbClntState, slbCurCfgSyncFilt=slbCurCfgSyncFilt, fltCurCfgTcpRateLimit=fltCurCfgTcpRateLimit, ftpStatSlbParseAckSeqDiff=ftpStatSlbParseAckSeqDiff, hcsNewCfgAddOpenProtCmd=hcsNewCfgAddOpenProtCmd, slbCurSslCfgAuthPolPassinfoAlgoName=slbCurSslCfgAuthPolPassinfoAlgoName, slbStatSpMaintTerminatedSessions=slbStatSpMaintTerminatedSessions, slbCurCfgRealServerLdapwr=slbCurCfgRealServerLdapwr, slbCurCfgVirtServiceRealGroup=slbCurCfgVirtServiceRealGroup, slbCurAcclCfgCompBrwsRuleCompress=slbCurAcclCfgCompBrwsRuleCompress, slbNewCfgSapAslrState=slbNewCfgSapAslrState, pip6NewCfgAddPort=pip6NewCfgAddPort, sslOffPerServReusedhandShake=sslOffPerServReusedhandShake, slbNewCfgVirtServiceBwmContract=slbNewCfgVirtServiceBwmContract, fltNewCfgPortAddFiltRule=fltNewCfgPortAddFiltRule, PYSNMP_MODULE_ID=layer4, slbNewCfgVirtServicesFifthPartEntry=slbNewCfgVirtServicesFifthPartEntry, slbNewNwclssCfgNetworkElementsMask=slbNewNwclssCfgNetworkElementsMask, gslbCurCfgRuleDname=gslbCurCfgRuleDname, slbOperClearSessionTable=slbOperClearSessionTable, fltNewCfgL3Filter=fltNewCfgL3Filter, hcsCfg=hcsCfg, slbNewCfgVirtServErrcode=slbNewCfgVirtServErrcode, slbStatMaintSymConnAllocFails=slbStatMaintSymConnAllocFails, slbCurCfgMetricInterval=slbCurCfgMetricInterval, slbNewCfgWlmTable=slbNewCfgWlmTable, slbStatSpMaintBindingFails=slbStatSpMaintBindingFails, fltCurCfgReverse=fltCurCfgReverse, slbNewCfgSubdmac=slbNewCfgSubdmac, slbNewCfgWlmEntry=slbNewCfgWlmEntry, slbCurSslCfgSSLPolPassInfoCipherFlag=slbCurSslCfgSSLPolPassInfoCipherFlag, slbNewCfgGroupRmetric=slbNewCfgGroupRmetric, gslbNewCfgEnhNetworkDelete=gslbNewCfgEnhNetworkDelete, compPerUrlRuleStatsEntry=compPerUrlRuleStatsEntry, slbNewCfgGroupTable=slbNewCfgGroupTable, slbCurCfgSapAslrIpAddr=slbCurCfgSapAslrIpAddr, fltCurCfgInvert=fltCurCfgInvert, slbNewCfgRealServerDelete=slbNewCfgRealServerDelete, slbStatSpMaintOOSFinPktDrops=slbStatSpMaintOOSFinPktDrops, snmphcNewCfgTable=snmphcNewCfgTable, slbNewCfgDrecordEntry=slbNewCfgDrecordEntry, slbNewCfgRealServerIpVer=slbNewCfgRealServerIpVer, slbNewSslCfgAuthPolValidityVchain=slbNewSslCfgAuthPolValidityVchain, gslbCurDnsSecZoneZSK3=gslbCurDnsSecZoneZSK3, slbNewSslCfgAuthPolTrustcaChainName=slbNewSslCfgAuthPolTrustcaChainName, cachStatPerServObj101KTO1M=cachStatPerServObj101KTO1M, slbStatSpMaintSymOtherPackets=slbStatSpMaintSymOtherPackets, gslbStatMaintNoServer=gslbStatMaintNoServer, slbCurCfgEntryIndex=slbCurCfgEntryIndex, slbCurCfgVirtServErrcodeMatch=slbCurCfgVirtServErrcodeMatch, rtspStatConnDenied=rtspStatConnDenied, fltNewCfgExtendedHdrHash=fltNewCfgExtendedHdrHash, slbNewCfgVirtServiceResponseCount=slbNewCfgVirtServiceResponseCount, fltStatFltFirings=fltStatFltFirings, gslbCurDnsSecZoneName=gslbCurDnsSecZoneName, slbNewSslCfgCertsValidityPeriod=slbNewSslCfgCertsValidityPeriod, slbNewCfgWaphcWTPPort=slbNewCfgWaphcWTPPort, slbStatWlmRegRepErr=slbStatWlmRegRepErr, slbCurCfgSmtportTable=slbCurCfgSmtportTable, gslbStatMaintLastSrcIp=gslbStatMaintLastSrcIp, gslbCurDnsSecKeyUseCount=gslbCurDnsSecKeyUseCount, fltNewCfgPortTable=fltNewCfgPortTable, sslSlbStatTotalSessions=sslSlbStatTotalSessions, slbRealServerInfoIndex=slbRealServerInfoIndex, slbNewSslCfgAuthPolPassinfoMd5Name=slbNewSslCfgAuthPolPassinfoMd5Name, slbCurCfgContVirtServIndex=slbCurCfgContVirtServIndex, slbCurCfgVirtServPathHideHostName=slbCurCfgVirtServPathHideHostName, slbNewCfgVirtServerRule=slbNewCfgVirtServerRule, radiusAcctWrapReqs=radiusAcctWrapReqs, slbNewAcclCfgCachePolBrowser=slbNewAcclCfgCachePolBrowser, slbNewCfgVirtServErrcodeReason=slbNewCfgVirtServErrcodeReason, slbCurSslCfgCertsID=slbCurSslCfgCertsID, slbCurCfgUrlBwmVirtServIndex=slbCurCfgUrlBwmVirtServIndex, slbNewCfgVirtServiceDnsSlb=slbNewCfgVirtServiceDnsSlb, fltCurCfgSrcIpMask=fltCurCfgSrcIpMask, slbNewAcclCfgCompBrwsRuleAdminStatus=slbNewAcclCfgCompBrwsRuleAdminStatus, slbOperSessionDelDestPort=slbOperSessionDelDestPort, cachRuleNumOfObjCac=cachRuleNumOfObjCac, connmngStats=connmngStats, gslbCurDnsResVipV4=gslbCurDnsResVipV4, slbNewCfgVirtServPathHideStatus=slbNewCfgVirtServPathHideStatus, slbCurSslCfgCertsStatus=slbCurSslCfgCertsStatus, tpcpAddSessReqsStats=tpcpAddSessReqsStats, slbCurCfgDirectMode=slbCurCfgDirectMode, slbNewCfgPortSlbIdslbState=slbNewCfgPortSlbIdslbState, slbCurCfgVirtServiceHttpSlb2=slbCurCfgVirtServiceHttpSlb2, gslbCurCfgGenDnsDirect=gslbCurCfgGenDnsDirect, slbStatSpMaintCurBindings=slbStatSpMaintCurBindings, slbStatVServerIndex=slbStatVServerIndex, sslOffPerServStatsEntry=sslOffPerServStatsEntry, slbCurAcclCfgCompUrlRuleEntry=slbCurAcclCfgCompUrlRuleEntry, gslbStatRemRealServerHttpRedirs=gslbStatRemRealServerHttpRedirs, compStatPerServUnComprTputKb=compStatPerServUnComprTputKb, slbNewCfgVirtServErrcodeUrl=slbNewCfgVirtServErrcodeUrl, slbNewAcclCfgCompPolAdminStatus=slbNewAcclCfgCompPolAdminStatus, slbCurCfgSyncSfoUpdatePeriod=slbCurCfgSyncSfoUpdatePeriod, fltCurCfgPortFiltBmap=fltCurCfgPortFiltBmap, fltNewCfgTcpRateLimit=fltNewCfgTcpRateLimit, slbNewCfgDrecordEntryDelete=slbNewCfgDrecordEntryDelete, slbStatWlmTotInvalidLb=slbStatWlmTotInvalidLb, slbNewCfgVirtServTextrepStatus=slbNewCfgVirtServTextrepStatus, slbCurCfgContVirtServiceIndex=slbCurCfgContVirtServiceIndex, fltNewCfgIpVer=fltNewCfgIpVer, slbStatSpMaintTcpFragments=slbStatSpMaintTcpFragments, slbCurCfgVirtServUrlchangHostType=slbCurCfgVirtServUrlchangHostType, slbCurSslCfgSSLPolPassInfoVersionName=slbCurSslCfgSSLPolPassInfoVersionName, slbNewCfgDrecordVirtRealMappingTable=slbNewCfgDrecordVirtRealMappingTable, slbSessionInfoFlag=slbSessionInfoFlag, slbCurCfgVirtServerIpAddress=slbCurCfgVirtServerIpAddress, gslbCurDnsResVipV6=gslbCurDnsResVipV6, slbNewCfgWaphcWTLSWSPPort=slbNewCfgWaphcWTLSWSPPort, compPerBrowRuleStatsEntry=compPerBrowRuleStatsEntry, fltCurCfgRangeLowDstPort=fltCurCfgRangeLowDstPort, slbCurSslCfgCertsTable=slbCurSslCfgCertsTable, fltCurCfgHdrHashLen=fltCurCfgHdrHashLen, gslbNewCfgDnsSecGlobalNsec3SaltLen=gslbNewCfgDnsSecGlobalNsec3SaltLen, slbStatRServerFailures=slbStatRServerFailures, gslbCurDnsSecKeyEntry=gslbCurDnsSecKeyEntry, fltNewCfgExtendedNatIp=fltNewCfgExtendedNatIp, slbCurAcclCfgCompPolMaxSize=slbCurAcclCfgCompPolMaxSize, gslbDnsSecImportExportImpKeyRollOverPeriod=gslbDnsSecImportExportImpKeyRollOverPeriod, gslbStatRemSiteInBadUpdates=gslbStatRemSiteInBadUpdates, slbCurCfgPeerState=slbCurCfgPeerState, dnsSlbStatMultipleQueries=dnsSlbStatMultipleQueries, slbNewCfgRealServerFailRetry=slbNewCfgRealServerFailRetry, slbNewAcclCfgCacheUrlRuleCopy=slbNewAcclCfgCacheUrlRuleCopy, slbCurCfgVirtServiceUhash=slbCurCfgVirtServiceUhash, sslSlbStatUniqCurSessions=sslSlbStatUniqCurSessions, hcsNewCfgAddLongSendCmd=hcsNewCfgAddLongSendCmd, slbSessionInfoIpAddr=slbSessionInfoIpAddr, slbStatMaintSymFragSessions=slbStatMaintSymFragSessions, slbCurSslCfgAuthPolPassinfoAlgoFlag=slbCurSslCfgAuthPolPassinfoAlgoFlag, slbNewCfgWapDebug=slbNewCfgWapDebug, gslbCurCfgMetricTableEntry=gslbCurCfgMetricTableEntry, fltCurCfgAclIpTos=fltCurCfgAclIpTos, slbRealServerInfoTable=slbRealServerInfoTable, realServerCfg=realServerCfg, slbStatRServerHCOctetsLow32=slbStatRServerHCOctetsLow32, wapCfg=wapCfg, gslbInfoVirtServerIdx=gslbInfoVirtServerIdx, slbStatWlmDeregRepErr=slbStatWlmDeregRepErr, slbCurSslCfgAuthPolValidityAlgorthmName=slbCurSslCfgAuthPolValidityAlgorthmName, gslbStatRemRealServerIndex=gslbStatRemRealServerIndex, slbNewSslCfgAuthPolPassinfoAlgoFlag=slbNewSslCfgAuthPolPassinfoAlgoFlag, slbCurCfgRealServerIdsport=slbCurCfgRealServerIdsport, slbCurCfgVirtServiceRedirect=slbCurCfgVirtServiceRedirect, gslbNewDnsSecKeyRollOverPeriod=gslbNewDnsSecKeyRollOverPeriod, gslbCurDnsSecKeyID=gslbCurDnsSecKeyID, slbCurSslCfgAuthPolPassinfoIssuerName=slbCurSslCfgAuthPolPassinfoIssuerName, fltCurCfgTableEntry=fltCurCfgTableEntry, slbNewAcclCfgCompBrwsRuleName=slbNewAcclCfgCompBrwsRuleName, gslbOperAvpersistence=gslbOperAvpersistence, slbNewCfgGroupEntry=slbNewCfgGroupEntry, gslbCurCfgGenUsern=gslbCurCfgGenUsern, fltCurCfgRtpBwmContract=fltCurCfgRtpBwmContract, fltNewCfgLinklb=fltNewCfgLinklb, pipCurCfgTable=pipCurCfgTable, fltNewCfgBwmContract=fltNewCfgBwmContract, slbCurAcclCfgCompUrlListName=slbCurAcclCfgCompUrlListName, slbNewAcclCfgCompBrwsListAdminStatus=slbNewAcclCfgCompBrwsListAdminStatus, slbOperRealServerTable=slbOperRealServerTable, slbCurCfgVirtServiceDnsType=slbCurCfgVirtServiceDnsType, slbStatSpMaintIpFragDiscards=slbStatSpMaintIpFragDiscards, cachRuleRuleListIndex=cachRuleRuleListIndex, fltCurCfgAclTcpUrg=fltCurCfgAclTcpUrg, slbStatSapAslrDeviceFailure=slbStatSapAslrDeviceFailure, fltNewCfgExtendedParseChn=fltNewCfgExtendedParseChn, fltStatTableEntry=fltStatTableEntry, slbCurNwclssCfgNetworkElementsNetType=slbCurNwclssCfgNetworkElementsNetType, sessMirrorTotalDeleteSessionMsgRx=sessMirrorTotalDeleteSessionMsgRx, slbStatRServerIndex=slbStatRServerIndex, slbCurSslCfgAuthPolTable=slbCurSslCfgAuthPolTable, gslbInfoVirtServerTable=gslbInfoVirtServerTable, slbStatWlmLbStateRepErr=slbStatWlmLbStateRepErr, gslbCurCfgRuleEndMin=gslbCurCfgRuleEndMin, fltNewCfgSrcIp=fltNewCfgSrcIp, slbNewCfgVirtServUrlchangInsrtPostn=slbNewCfgVirtServUrlchangInsrtPostn, sslSlbStatUniqHighestSessions=sslSlbStatUniqHighestSessions, gslbInfoRemSiteName=gslbInfoRemSiteName, slbNewAcclCfgCompBrwsRuleListIdIndex=slbNewAcclCfgCompBrwsRuleListIdIndex, slbNewCfgTpcp=slbNewCfgTpcp, slbNewCfgRealServerNxtRportIdx=slbNewCfgRealServerNxtRportIdx, slbCurCfgVirtServUrlchangActnType=slbCurCfgVirtServUrlchangActnType, compUnCompressedThrputKB=compUnCompressedThrputKB, gslbNewDnsSecKeyPublicationPeriod=gslbNewDnsSecKeyPublicationPeriod, slbCurAcclCfgCacheOnOff=slbCurAcclCfgCacheOnOff, compAvgSizeBefCompKB=compAvgSizeBefCompKB, slbVirtServicesInfoEntry=slbVirtServicesInfoEntry, slbNewCfgVirtServiceEgressPip=slbNewCfgVirtServiceEgressPip, slbCurAcclCfgCompBrwsListEntry=slbCurAcclCfgCompBrwsListEntry, sessMirrorTotalCreateSessionMsgRx=sessMirrorTotalCreateSessionMsgRx, fltNewCfgRangeLowDstPort=fltNewCfgRangeLowDstPort, gslbNewCfgRuleMetricIndx=gslbNewCfgRuleMetricIndx, slbCurCfgVirtServTextrepReplacTxt=slbCurCfgVirtServTextrepReplacTxt, slbCurCfgVirtualServiceStats=slbCurCfgVirtualServiceStats, slbIncorrectVirtServs=slbIncorrectVirtServs, slbNewCfgRealServerRemUrl=slbNewCfgRealServerRemUrl, slbNewSslCfgCertsCountryName=slbNewSslCfgCertsCountryName, sslOffPercSessUsingSSLv3=sslOffPercSessUsingSSLv3, slbNewCfgBuddyDelete=slbNewCfgBuddyDelete, slbOperRealServGroupIndex=slbOperRealServGroupIndex, slbStatGroupCurrSessions=slbStatGroupCurrSessions, slbNewSslCfgAuthPolPassinfoSerialFlag=slbNewSslCfgAuthPolPassinfoSerialFlag, slbNewCfgRealServerPingInterval=slbNewCfgRealServerPingInterval, slbNewCfgVirtServiceServCertGrpMark=slbNewCfgVirtServiceServCertGrpMark, gslbCurDnsSecKeyExpPeriod=gslbCurDnsSecKeyExpPeriod, slbNewSslCfgAuthPolPassinfoSubjectName=slbNewSslCfgAuthPolPassinfoSubjectName, cachPerRuleListStatsTable=cachPerRuleListStatsTable, ftpStatActiveNatIndex=ftpStatActiveNatIndex, gslbCurCfgEnhNetworkSourceIp=gslbCurCfgEnhNetworkSourceIp, fltNewCfgSrcIpMac=fltNewCfgSrcIpMac, slbPeerTableMaxSize=slbPeerTableMaxSize, fltCurCfgSrcIpMac=fltCurCfgSrcIpMac, gslbStatVirtServerIpAddress=gslbStatVirtServerIpAddress, compBrowRuleNumOfObj=compBrowRuleNumOfObj, fltCurCfgEgressPip=fltCurCfgEgressPip, fltCurCfgIpv6Proxy=fltCurCfgIpv6Proxy, slbCurCfgVirtServiceRealPort=slbCurCfgVirtServiceRealPort, slbOperSessionDelSrcPort=slbOperSessionDelSrcPort, gslbNewCfgRuleStartHour=gslbNewCfgRuleStartHour, slbNewCfgMmask=slbNewCfgMmask, gslbCurCfgEnhNetworkSourceIpV6=gslbCurCfgEnhNetworkSourceIpV6, fltCurCfgAclTcpSyn=fltCurCfgAclTcpSyn, slbStatGroupEntry=slbStatGroupEntry, gslbInfoVirtServerWeight=gslbInfoVirtServerWeight, slbCurCfgSapAslrAutoConfig=slbCurCfgSapAslrAutoConfig, fltNewCfgState=fltNewCfgState, gslbCurCfgRemSiteUpdate=gslbCurCfgRemSiteUpdate, fltUrlBwmTableMaxSize=fltUrlBwmTableMaxSize, slbNewCfgVirtServiceCachepol=slbNewCfgVirtServiceCachepol, slbNewNwclssCfgNetworkElementsFromIpv6Addr=slbNewNwclssCfgNetworkElementsFromIpv6Addr)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", slbNewCfgSapAslrLastAct=slbNewCfgSapAslrLastAct, httpTransSummReqCliToAas=httpTransSummReqCliToAas, slbNewCfgUrlBwmContract=slbNewCfgUrlBwmContract, gslbDnsSecImportExportImpKeyPublicationPeriod=gslbDnsSecImportExportImpKeyPublicationPeriod, slbNewAcclCfgCacheUrlRuleTable=slbNewAcclCfgCacheUrlRuleTable, fltNewCfgUrlBwmUrlId=fltNewCfgUrlBwmUrlId, slbNewSslCfgAuthPolName=slbNewSslCfgAuthPolName, slbNewSslCfgAuthPolFailurl=slbNewSslCfgAuthPolFailurl, gslbInfo=gslbInfo, gslbNewDnsSecKeyType=gslbNewDnsSecKeyType, slbNewAcclCfgCompPolCompsrv=slbNewAcclCfgCompPolCompsrv, slbCurCfgWlmIpAddr=slbCurCfgWlmIpAddr, pipTableMaxSize=pipTableMaxSize, slbNewCfgDrecordTable=slbNewCfgDrecordTable, slbNewSslCfgSSLPolPassInfoCipherName=slbNewSslCfgSSLPolPassInfoCipherName, httpStatSummHttpToHttpsRedir=httpStatSummHttpToHttpsRedir, slbCurCfgMmask=slbCurCfgMmask, slbCurCfgVirtServSecondPartIndex=slbCurCfgVirtServSecondPartIndex, gslbDnsSecGlobalCfg=gslbDnsSecGlobalCfg, slbNewSslCfgAuthPolPassinfoKeytypeName=slbNewSslCfgAuthPolPassinfoKeytypeName, slbNewCfgVirtServiceSoftGrid=slbNewCfgVirtServiceSoftGrid, slbStatSpAuxSessEntry=slbStatSpAuxSessEntry, gslbOperAddServerIp6=gslbOperAddServerIp6, gslbCurCfgGenCpuUtilCap=gslbCurCfgGenCpuUtilCap, fltNewCfgRevBwmContract=fltNewCfgRevBwmContract, gslbStatGroupEntry=gslbStatGroupEntry, slbRealServerRportInfoRport=slbRealServerRportInfoRport, fltNewCfgExtendedTimeWindow=fltNewCfgExtendedTimeWindow, sipTotalUnknownMethodReq=sipTotalUnknownMethodReq, slbWlmInfoTable=slbWlmInfoTable, slbNewAcclCfgCacheUrlListEntry=slbNewAcclCfgCacheUrlListEntry, slbCurCfgGroupMinmissHash=slbCurCfgGroupMinmissHash, gslbCurCfgProximityMask=gslbCurCfgProximityMask, slbNewCfgVirtServFourthPartIndex=slbNewCfgVirtServFourthPartIndex, slbNewSslCfgGroupsTable=slbNewSslCfgGroupsTable, slbCurSslCfgAuthPolValidityUriprior=slbCurSslCfgAuthPolValidityUriprior, slbCurCfgVirtServicePBind=slbCurCfgVirtServicePBind, slbVirtServicesInfoResponseTime=slbVirtServicesInfoResponseTime, slbCurCfgSyncBwm=slbCurCfgSyncBwm, slbNewSslCfgSSLPolAdminStatus=slbNewSslCfgSSLPolAdminStatus, slbNewAcclCfgCompUrlRuleURLm=slbNewAcclCfgCompUrlRuleURLm, slbOperSessionDelSrcIp=slbOperSessionDelSrcIp, slbNewCfgVirtServerIndex=slbNewCfgVirtServerIndex, slbNewSslCfgSSLPolIntermcaChainType=slbNewSslCfgSSLPolIntermcaChainType, slbNewNwclssCfgNetworkElementsNcId=slbNewNwclssCfgNetworkElementsNcId, slbNewSslCfgGroupsAddCert=slbNewSslCfgGroupsAddCert, slbCurCfgVmaDip=slbCurCfgVmaDip, cachPerRuleListStatsEntry=cachPerRuleListStatsEntry, slbCurSslCfgGroupsTable=slbCurSslCfgGroupsTable, compStatPerServThrputCompRatio=compStatPerServThrputCompRatio, slbNewCfgSapAslrIndex=slbNewCfgSapAslrIndex, slbNewCfgSyncRoute=slbNewCfgSyncRoute, compBrowRuleListSizeBefComp=compBrowRuleListSizeBefComp, slbBuddyTableMaxSize=slbBuddyTableMaxSize, fltCurCfgParseChn=fltCurCfgParseChn, slbNewCfgPortSlbL3Filter=slbNewCfgPortSlbL3Filter, slbCurSslCfgSSLPolTable=slbCurSslCfgSSLPolTable, sslSlbStatPersistPortTotalSessions=sslSlbStatPersistPortTotalSessions, gslbStatVirtServerDname=gslbStatVirtServerDname, slbCurCfgGroupRmetric=slbCurCfgGroupRmetric, slbNewSslCfgGroupsDelete=slbNewSslCfgGroupsDelete, gslbNewDnsSecKeyExpPeriod=gslbNewDnsSecKeyExpPeriod, syncCfg=syncCfg, pip6NewCfgAddPortVlan=pip6NewCfgAddPortVlan, pipNewCfgVlanMap=pipNewCfgVlanMap, hcsNewCfgAddLongBexpectCmd=hcsNewCfgAddLongBexpectCmd, slbNewCfgRealServPortIndex=slbNewCfgRealServPortIndex, slbNewSslCfgAuthPolValidityMethod=slbNewSslCfgAuthPolValidityMethod, httpPerServStatsCliUseKeepAlive=httpPerServStatsCliUseKeepAlive, slbNewCfgWaphcWTPSndContent=slbNewCfgWaphcWTPSndContent, slbCurSslCfgGroupsEntry=slbCurSslCfgGroupsEntry, slbNewCfgRealServerBkpPreempt=slbNewCfgRealServerBkpPreempt, slbNewSslCfgSSLAdminStatus=slbNewSslCfgSSLAdminStatus, slbPortIdSlbState=slbPortIdSlbState, slbNewCfgGroupHealthCheckLayer=slbNewCfgGroupHealthCheckLayer, slbNewCfgPortDelete=slbNewCfgPortDelete, gslbStatRemSiteTable=gslbStatRemSiteTable, slbNewCfgRealServerIpv6Addr=slbNewCfgRealServerIpv6Addr, slbNewCfgGlobalControl=slbNewCfgGlobalControl, slbIncorrectVports=slbIncorrectVports, slbNewCfgPortIndex=slbNewCfgPortIndex, cachStatPerServObjLarger1M=cachStatPerServObjLarger1M, httpPerServStatsRespSmall1Kb=httpPerServStatsRespSmall1Kb, slbNewSslCfgAuthPolPassinfoIssuerFlag=slbNewSslCfgAuthPolPassinfoIssuerFlag, fltNewCfg8021pBitsMatch=fltNewCfg8021pBitsMatch, sessMirrorTotalSessionsUpdated=sessMirrorTotalSessionsUpdated, gslbStatRemSiteOutUpdates2=gslbStatRemSiteOutUpdates2, gslbInfoRemRealServerTable=gslbInfoRemRealServerTable, slbNewAcclCfgCacheUrlListName=slbNewAcclCfgCacheUrlListName, slbCurCfgPortIndex=slbCurCfgPortIndex, slbCurCfgClsRst=slbCurCfgClsRst, slbNewCfgPmask=slbNewCfgPmask, gslbNewDnsResVipName=gslbNewDnsResVipName, slbStatAuxSessCurConn=slbStatAuxSessCurConn, slbNewAcclCfgCachePolTable=slbNewAcclCfgCachePolTable, gslbRuleCfg=gslbRuleCfg, slbCurCfgVirtServiceTimeOut=slbCurCfgVirtServiceTimeOut, slbCurCfgPeerTable=slbCurCfgPeerTable, cachRuleListId=cachRuleListId, slbCurCfgSyncCertsPassPhrase=slbCurCfgSyncCertsPassPhrase, slbNewCfgVirtServIndex=slbNewCfgVirtServIndex, slbCurCfgVirtServiceZerowinSize=slbCurCfgVirtServiceZerowinSize, slbNewCfgSlowage=slbNewCfgSlowage, slbCurCfgSyncPip=slbCurCfgSyncPip, pipNewCfgPip=pipNewCfgPip, cachStatSummRateNewCachedObj=cachStatSummRateNewCachedObj, gslbCurCfgGenSourceIpv6Prefix=gslbCurCfgGenSourceIpv6Prefix, slbCurCfgRtsIpLkp=slbCurCfgRtsIpLkp, slbCurCfgContRuleEntry=slbCurCfgContRuleEntry, slbNewCfgRealServerSubmac=slbNewCfgRealServerSubmac, slbNewAcclCfgCompUrlRuleName=slbNewAcclCfgCompUrlRuleName, slbCurSslCfgSSLPolPassInfoHeadBitsName=slbCurSslCfgSSLPolPassInfoHeadBitsName, slbNewAcclCfgCacheUrlRuleEntry=slbNewAcclCfgCacheUrlRuleEntry, slbNewCfgGroupRealServerState=slbNewCfgGroupRealServerState, syncGeneralCfg=syncGeneralCfg, gslbStatMaintHostHits=gslbStatMaintHostHits, fltCurCfgL7SipFilt=fltCurCfgL7SipFilt, slbNewCfgVirtServiceSdpNat=slbNewCfgVirtServiceSdpNat, sessMirrorCtrlSessionNotFoundErr=sessMirrorCtrlSessionNotFoundErr, snmphcCfg=snmphcCfg, slbNewAcclCfgCompUrlRuleCompress=slbNewAcclCfgCompUrlRuleCompress, synAttackInfo=synAttackInfo, slbStatGroupHCOctetsLow32=slbStatGroupHCOctetsLow32, slbCurCfgImask=slbCurCfgImask, gslbStatPersMax=gslbStatPersMax, connmngPerServStatsMulRatio=connmngPerServStatsMulRatio, slbCurAcclCfgCompUrlListAdminStatus=slbCurAcclCfgCompUrlListAdminStatus, fltCurCfgL3Filter=fltCurCfgL3Filter, slbCurNwclssCfgNetworkElementsToIp=slbCurNwclssCfgNetworkElementsToIp, gslbNewCfgEnhNetworkSprefix=gslbNewCfgEnhNetworkSprefix, slbCurSslCfgSSLPolPassInfoFrontend=slbCurSslCfgSSLPolPassInfoFrontend, gslbOperQuerySrcIp=gslbOperQuerySrcIp, slbNewCfgSapAslrEntry=slbNewCfgSapAslrEntry, slbNewSslCfgCertsID=slbNewSslCfgCertsID, authPol=authPol, gslbDnsSecImportExportSCPHostName=gslbDnsSecImportExportSCPHostName, slbStatMaintIp6CurrSessions=slbStatMaintIp6CurrSessions, slbNewCfgRealServerTable=slbNewCfgRealServerTable, slbNewCfgSapAslrIpv6Addr=slbNewCfgSapAslrIpv6Addr, gslbInfoDnsSec=gslbInfoDnsSec, slbStatVServerHCOctetsHigh32=slbStatVServerHCOctetsHigh32, pipTblCfg=pipTblCfg, slbCurCfgRealServPortTable=slbCurCfgRealServPortTable, slbCurCfgpVlanTag=slbCurCfgpVlanTag, icmpLimitStatClientEntries=icmpLimitStatClientEntries, compAvgSizeAftCompKB=compAvgSizeAftCompKB, compUrlRuleListSizeBefComp=compUrlRuleListSizeBefComp, gslbCurDnsSecZoneKSK1=gslbCurDnsSecZoneKSK1, slbStatAuxSessEntry=slbStatAuxSessEntry, slbStatRServerTable=slbStatRServerTable, slbCurCfgWaphcCouple=slbCurCfgWaphcCouple, gslbCurDnsSecKeyType=gslbCurDnsSecKeyType, slbStatGroupTable=slbStatGroupTable, slbStatMaintSymBufferAllocFails=slbStatMaintSymBufferAllocFails, slbCurSslCfgAuthPolPassinfoCertName=slbCurSslCfgAuthPolPassinfoCertName, slbNewAcclCfgCachePolExpireTime=slbNewAcclCfgCachePolExpireTime, gslbNewCfgGenTimeout=gslbNewCfgGenTimeout, httpPerServStatsRespSerToAas=httpPerServStatsRespSerToAas, slbCurSslCfgSSLPolEntry=slbCurSslCfgSSLPolEntry, fltCurCfgIdsGroup=fltCurCfgIdsGroup, gslbOperDnsSecEmergencyRollover=gslbOperDnsSecEmergencyRollover, slbNewNwclssCfgNetworkElementsMatchType=slbNewNwclssCfgNetworkElementsMatchType, slbCurCfgVirtServiceClntproxType=slbCurCfgVirtServiceClntproxType, gslbNewDnsResVipDelete=gslbNewDnsResVipDelete, slbNewAcclCfgCompUrlListCopy=slbNewAcclCfgCompUrlListCopy, cachRuleListIndex=cachRuleListIndex, slbCurCfgBuddyGroupIndex=slbCurCfgBuddyGroupIndex, gslbDnsResVipCfg=gslbDnsResVipCfg, fltNewCfgAclIpOption=fltNewCfgAclIpOption, slbCurAcclCfgCachePolName=slbCurAcclCfgCachePolName, slbNewSslCfgCertsTable=slbNewSslCfgCertsTable, slbNewCfgPeerPIPIndex=slbNewCfgPeerPIPIndex, radiusAcctUpdateReqs=radiusAcctUpdateReqs, fltCurCfgUrlBwmUrlId=fltCurCfgUrlBwmUrlId, slbCurCfgVirtServTextrepAction=slbCurCfgVirtServTextrepAction, slbNewCfgPprefix=slbNewCfgPprefix, slbNewCfgWaphcCouple=slbNewCfgWaphcCouple, slbNewCfgVirtServicePBind=slbNewCfgVirtServicePBind, slbNewCfgUrlBwmDelete=slbNewCfgUrlBwmDelete, slbCurAcclCfgCompPolMinSize=slbCurAcclCfgCompPolMinSize, fltCurCfgHttpRedirMappingFromStr=fltCurCfgHttpRedirMappingFromStr, slbNewCfgWlmPort=slbNewCfgWlmPort, gslbCurCfgGenHostname=gslbCurCfgGenHostname, slbNewCfgVirtServUrlchangActnType=slbNewCfgVirtServUrlchangActnType, slbStatRealServerIndex=slbStatRealServerIndex, fltNewCfgExtendedLayer7DenyMatchAll=fltNewCfgExtendedLayer7DenyMatchAll, fltNewCfgLayer7ParseAll=fltNewCfgLayer7ParseAll, gslbCurCfgGenEncrypt=gslbCurCfgGenEncrypt, slbNewCfgBuddyRealIndex=slbNewCfgBuddyRealIndex, gslbNewCfgDnsSecGlobalKskRollTm=gslbNewCfgDnsSecGlobalKskRollTm, slbRealServerRportRealIndex=slbRealServerRportRealIndex, slbStatSapAslrFailure=slbStatSapAslrFailure, gslbNewCfgRemSiteSecondaryIp=gslbNewCfgRemSiteSecondaryIp, slbNewSslCfgCertsEntry=slbNewSslCfgCertsEntry, slbCurSslCfgCertsValidityPeriod=slbCurSslCfgCertsValidityPeriod, fltNewCfgAclIpLength=fltNewCfgAclIpLength, httpPerServStatsHttpToHTTPSRedir=httpPerServStatsHttpToHTTPSRedir, cachStatSummObj11KTO50K=cachStatSummObj11KTO50K, slbCurCfgVirtServiceFtpParsing=slbCurCfgVirtServiceFtpParsing, slbNewCfgDomainRecordIndex=slbNewCfgDomainRecordIndex, slbNewCfgWaphcWTPConnContent=slbNewCfgWaphcWTPConnContent, pip6NewCfgPortMap=pip6NewCfgPortMap, slbCurAcclCfgCompBrwsRuleName=slbCurAcclCfgCompBrwsRuleName, slbCurCfgPortSlbL3Filter=slbCurCfgPortSlbL3Filter, slbCurNwclssCfgNetworkElementsTable=slbCurNwclssCfgNetworkElementsTable, slbStatVirtServiceEntry=slbStatVirtServiceEntry, fltNewCfgExtendedAddPatternMatchGroup=fltNewCfgExtendedAddPatternMatchGroup, slbNewSslCfgAuthPolNameIdIndex=slbNewSslCfgAuthPolNameIdIndex, slbCurNwclssCfgNetworkClassesId=slbCurNwclssCfgNetworkClassesId, slbCurCfgRealServerTable=slbCurCfgRealServerTable, slbStatVirtServiceTable=slbStatVirtServiceTable, gslbNewCfgRuleDelete=gslbNewCfgRuleDelete, slbCurCfgVirtServerDname=slbCurCfgVirtServerDname, slbCurAcclCfgCachememcache=slbCurAcclCfgCachememcache, slbStatMaintLandAttacks=slbStatMaintLandAttacks, slbCurAcclCfgCompUrlRuleURLm=slbCurAcclCfgCompUrlRuleURLm, slbRealServerInfoOverflow=slbRealServerInfoOverflow, gslbStatMaintThresholdHits=gslbStatMaintThresholdHits, slbNewCfgVirtServErrcodeStatus=slbNewCfgVirtServErrcodeStatus, udpLimitStatHoldDowns=udpLimitStatHoldDowns, slbStatVirtServiceHCOctetsLow32=slbStatVirtServiceHCOctetsLow32, compCompressedThrputKB=compCompressedThrputKB, fltNewCfgAclIpTos=fltNewCfgAclIpTos, pip6NewCfgPip=pip6NewCfgPip, gslbStatMaintLastSrcIpV6=gslbStatMaintLastSrcIpV6, gslbNewDnsSecZoneTable=gslbNewDnsSecZoneTable, slbCurCfgVirtServUrlchangNewPgType=slbCurCfgVirtServUrlchangNewPgType, slbNewSslCfgAuthPolValidityTimedev=slbNewSslCfgAuthPolValidityTimedev, slbNewSslCfgCertsCommonName=slbNewSslCfgCertsCommonName, slbNewCfgVirtServUrlchangNewPgName=slbNewCfgVirtServUrlchangNewPgName, rtspStats=rtspStats, compStatPerServVirtServPort=compStatPerServVirtServPort, slbCurCfgRealServerOverflow=slbCurCfgRealServerOverflow, slbStatGroupHCOctetsHigh32=slbStatGroupHCOctetsHigh32, tpcpAddSessReqsFailsSPDead=tpcpAddSessReqsFailsSPDead, newCfgVirtServerTableSize=newCfgVirtServerTableSize, slbNewCfgVirtServiceAction=slbNewCfgVirtServiceAction, slbPortInfoEntry=slbPortInfoEntry, slbSapAslrTableMaxSize=slbSapAslrTableMaxSize, httpTransSummReqAasToSer=httpTransSummReqAasToSer, slbCurNwclssCfgNetworkElementsNcId=slbCurNwclssCfgNetworkElementsNcId, filterCfg=filterCfg, gslbRuleTableMaxSize=gslbRuleTableMaxSize, gslbNewDnsSecKeyDelete=gslbNewDnsSecKeyDelete, sslSlbStats=sslSlbStats, fltNewCfgIpv6Dprefix=fltNewCfgIpv6Dprefix, layer4Info=layer4Info, synAtkState=synAtkState, slbNewCfgVirtServiceThash=slbNewCfgVirtServiceThash, slbNewSslCfgCertsEMail=slbNewSslCfgCertsEMail, slbCurCfgPortSlbFilter=slbCurCfgPortSlbFilter, gslbNewCfgRuleTTL=gslbNewCfgRuleTTL, slbNewCfgVirtServiceDnsType=slbNewCfgVirtServiceDnsType, slbNewCfgVirtPersistentTimeOut=slbNewCfgVirtPersistentTimeOut)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", snmphcCurCfgCommString=snmphcCurCfgCommString, slbStatSpAuxSessCurConn=slbStatSpAuxSessCurConn, slbCurSslCfgCertsDefaultsLocallyName=slbCurSslCfgCertsDefaultsLocallyName, slbNewAcclCfgCompPolPreDefBrwsRuleList=slbNewAcclCfgCompPolPreDefBrwsRuleList, gslbNewDnsSecKeyValidityPeriod=gslbNewDnsSecKeyValidityPeriod, compUrlRuleListNumOfObj=compUrlRuleListNumOfObj, slbStatWlmMsgUnsupMsgType=slbStatWlmMsgUnsupMsgType, slbOperSessionDel=slbOperSessionDel, slbCurCfgVirtPersistentTimeOut=slbCurCfgVirtPersistentTimeOut, connmngPerServStatsVirtServiceIndex=connmngPerServStatsVirtServiceIndex, slbNewCfgLdapVersion=slbNewCfgLdapVersion, slbNewCfgRealServerAddUrl=slbNewCfgRealServerAddUrl, slbRealServerInfoSwitchPort=slbRealServerInfoSwitchPort, slbNewCfgPeerPIPDelete=slbNewCfgPeerPIPDelete, fltNewCfgExtendedProxyIp=fltNewCfgExtendedProxyIp, slbCurCfgVirtServiceClength=slbCurCfgVirtServiceClength, slbNewCfgVirtServerAddRule=slbNewCfgVirtServerAddRule, slbUrlBwmTableMaxSize=slbUrlBwmTableMaxSize, slbStatMaintSymInvalidBuffers=slbStatMaintSymInvalidBuffers, slbNewCfgVirtServUrlchangPathInsrt=slbNewCfgVirtServUrlchangPathInsrt, gslbStatRuleMinmisses=gslbStatRuleMinmisses, slbNewAcclCfgCompUrlRuleTable=slbNewAcclCfgCompUrlRuleTable, fltNewCfgExtendedLayer7DenyAddUrl=fltNewCfgExtendedLayer7DenyAddUrl, gslbStatVirtServerMinSessAvail=gslbStatVirtServerMinSessAvail, gslbNewCfgEnhNetworkRemoveRemRealServer=gslbNewCfgEnhNetworkRemoveRemRealServer, slbCurAcclCfgCompPolPreDefBrwsRuleList=slbCurAcclCfgCompPolPreDefBrwsRuleList, slbNewCfgSapAslrInterval=slbNewCfgSapAslrInterval, fltNewCfgPbind=fltNewCfgPbind, slbCurSslCfgSSLPolAdminStatus=slbCurSslCfgSSLPolAdminStatus, gslbNewCfgMetricMetric=gslbNewCfgMetricMetric, httpPerServStatsEntry=httpPerServStatsEntry, fltCurCfgRedirPort=fltCurCfgRedirPort, fltNewCfgAclTcpPsh=fltNewCfgAclTcpPsh, gslbNewDnsResVipV4=gslbNewDnsResVipV4, hcsNewCfgAddNexpectCmd=hcsNewCfgAddNexpectCmd, slbSessionInfoPortId=slbSessionInfoPortId, slbNewCfgVirtServUrlchangNewPgType=slbNewCfgVirtServUrlchangNewPgType, slbNewCfgUrlBwmUrlId=slbNewCfgUrlBwmUrlId, gslbNewDnsSecZoneName=gslbNewDnsSecZoneName, snmphcNewCfgUseWeight=snmphcNewCfgUseWeight, slbStatSpMaintSymSegReallocFails=slbStatSpMaintSymSegReallocFails, sslSlbStatPersistPortHighestSessions=sslSlbStatPersistPortHighestSessions, hcsNewCfgScriptIndex=hcsNewCfgScriptIndex, hcsNewCfgAddSendCmd=hcsNewCfgAddSendCmd, slbNewCfgDrecordRealServer=slbNewCfgDrecordRealServer, slbCurSslCfgSSLPolBessl=slbCurSslCfgSSLPolBessl, slbCurCfgVirtServerLayer3Only=slbCurCfgVirtServerLayer3Only, slbCurCfgVirtServiceConnPooling=slbCurCfgVirtServiceConnPooling, slbCurCfgSyncPort=slbCurCfgSyncPort, hcsCurCfgTableEntry=hcsCurCfgTableEntry, pip6NewCfgRemovePort=pip6NewCfgRemovePort, ftpStatNatAckSeqDiff=ftpStatNatAckSeqDiff, slbNewCfgWaphcWTPRcvContent=slbNewCfgWaphcWTPRcvContent, gslbNewCfgDnsSecGlobalNsec3SaltLifetime=gslbNewCfgDnsSecGlobalNsec3SaltLifetime, fltCurCfgWapRadiusSnoop=fltCurCfgWapRadiusSnoop, fltCurCfgHash=fltCurCfgHash, slbNewNwclssCfgNetworkClassesCopy=slbNewNwclssCfgNetworkClassesCopy, httpTransSummResAasToCli=httpTransSummResAasToCli, cachStatSummServRate=cachStatSummServRate, slbCurAcclCfgCompPolCompsrv=slbCurAcclCfgCompPolCompsrv, gslbNewDnsSecZoneParentIPv6=gslbNewDnsSecZoneParentIPv6, slbNewSslCfgAuthPolValidityStaturi=slbNewSslCfgAuthPolValidityStaturi, slbNewCfgPortSlbInterSwitch=slbNewCfgPortSlbInterSwitch, compUrlRuleIndex=compUrlRuleIndex, newCfgRealServerGroupTableSize=newCfgRealServerGroupTableSize, slbCurCfgWlmPort=slbCurCfgWlmPort, connmngStatSummCliReq=connmngStatSummCliReq, fltNewCfgExtendedDbind=fltNewCfgExtendedDbind, pipNewCfgRemovePort=pipNewCfgRemovePort, slbCurCfgGroupOperatorAccess=slbCurCfgGroupOperatorAccess, slbNewCfgPortSlbFilter=slbNewCfgPortSlbFilter, gslbStatVirtServerRemSite=gslbStatVirtServerRemSite, slbStatVirtServiceHighestSessions=slbStatVirtServiceHighestSessions, slbOperRealServerStatus=slbOperRealServerStatus, slbNewCfgRealServerCommString=slbNewCfgRealServerCommString, fltNewCfgIpv6Sprefix=fltNewCfgIpv6Sprefix, slbStatMaintMaximumSessions=slbStatMaintMaximumSessions, slbCurSslCfgAuthPolTrustcaChainName=slbCurSslCfgAuthPolTrustcaChainName, slbNewCfgWaphcWTPOffset=slbNewCfgWaphcWTPOffset, slbStatMaintSymSegReallocFails=slbStatMaintSymSegReallocFails, fltCurCfgSrcIp=fltCurCfgSrcIp, gslbStatMaintNoServerVirt=gslbStatMaintNoServerVirt, fltNewCfgDstIpMask=fltNewCfgDstIpMask, slbNewCfgNewSlowage=slbNewCfgNewSlowage, slbIncorrectIp6Vip=slbIncorrectIp6Vip, slbCurCfgPmask=slbCurCfgPmask, slbCurSslCfgSSLPolPassInfoHeadBitsFlag=slbCurSslCfgSSLPolPassInfoHeadBitsFlag, slbCurNwclssCfgNetworkElementsToIpv6Addr=slbCurNwclssCfgNetworkElementsToIpv6Addr, slbStatWlmMembStateReq=slbStatWlmMembStateReq, slbStatWlmMsgInvalidSASPHeader=slbStatWlmMsgInvalidSASPHeader, gslbNewDnsResVipIndex1=gslbNewDnsResVipIndex1, gslbCurDnsSecZoneParentIPv4=gslbCurDnsSecZoneParentIPv4, gslbInfoDnsSecKeyTable=gslbInfoDnsSecKeyTable, slbNewCfgmStat=slbNewCfgmStat, gslbNewCfgEnhNetworkTable=gslbNewCfgEnhNetworkTable, slbNewAcclCfgCachePolAdminStatus=slbNewAcclCfgCachePolAdminStatus, slbNewAcclCfgCompPolNameIdIndex=slbNewAcclCfgCompPolNameIdIndex, fltCurCfgFtpNatActive=fltCurCfgFtpNatActive, gslbOperAddEntry=gslbOperAddEntry, cachPerRuleStatsTable=cachPerRuleStatsTable, slbNewAcclCfgCachememcache=slbNewAcclCfgCachememcache, peerpipTblCfg=peerpipTblCfg, slbCurCfgFastage=slbCurCfgFastage, gslbStatRemSiteIdx=gslbStatRemSiteIdx, gslbCurDnsResVipStatus=gslbCurDnsResVipStatus, slbNewAcclCfgCacheUrlRuleExpire=slbNewAcclCfgCacheUrlRuleExpire, slbNewSslCfgAuthPolPassinfoCertName=slbNewSslCfgAuthPolPassinfoCertName, synAttackDetCfg=synAttackDetCfg, slbNewCfgIpTcpCksum=slbNewCfgIpTcpCksum, compUrlRuleRuleListId=compUrlRuleRuleListId, gslbNewCfgDnsSecGlobalType=gslbNewCfgDnsSecGlobalType, slbCurSslCfgSSLPolIntermcaChainName=slbCurSslCfgSSLPolIntermcaChainName, slbNewCfgVirtServErrcodeMatch=slbNewCfgVirtServErrcodeMatch, slbNewSslCfgAuthPolPassinfoAlgoName=slbNewSslCfgAuthPolPassinfoAlgoName, gslbDnsResVipEmptyIndexesEntry=gslbDnsResVipEmptyIndexesEntry, slbCurCfgVirtServiceNoRtsp=slbCurCfgVirtServiceNoRtsp, slbCurCfgSmtportEntry=slbCurCfgSmtportEntry, slbNewSslCfgCertsDefaultsProvinceName=slbNewSslCfgCertsDefaultsProvinceName, fltCurCfgPortTable=fltCurCfgPortTable, gslbSitesCfg=gslbSitesCfg, compBrowRuleCompRatio=compBrowRuleCompRatio, compUrlRuleNumOfObj=compUrlRuleNumOfObj, slbCurCfgRealServerSuccRetry=slbCurCfgRealServerSuccRetry, slbNewCfgVirtServiceHttpSlb2=slbNewCfgVirtServiceHttpSlb2, snmphcNewCfgDeleteHc=snmphcNewCfgDeleteHc, cachStatPerServRateNewCachedObj=cachStatPerServRateNewCachedObj, slbNewCfgVirtServiceUriCookie=slbNewCfgVirtServiceUriCookie, slbNewCfgRealServerMaxConns=slbNewCfgRealServerMaxConns, fltNewCfgHttpRedirMappingToStr=fltNewCfgHttpRedirMappingToStr, slbNewSslCfgCertsHashAlgo=slbNewSslCfgCertsHashAlgo, slbNewSslCfgSSLPolBessl=slbNewSslCfgSSLPolBessl, slbNewAcclCfgCompUrlListIdIndex=slbNewAcclCfgCompUrlListIdIndex, gslbOperDnsSecKeyID=gslbOperDnsSecKeyID, slbCurCfgPortSlbServState=slbCurCfgPortSlbServState, fltNewCfgLayer7DenyMatchAll=fltNewCfgLayer7DenyMatchAll, slbMaintStats=slbMaintStats, slbNewSslCfgSSLPolConvuri=slbNewSslCfgSSLPolConvuri, fltNewCfgExtendedSessionMirror=fltNewCfgExtendedSessionMirror, slbNewCfgVirtServiceConnmgtTimeout=slbNewCfgVirtServiceConnmgtTimeout, gslbDnsSecCfg=gslbDnsSecCfg, slbStatRServerCurrSessions=slbStatRServerCurrSessions, compStatPerServVirtServiceIndex=compStatPerServVirtServiceIndex, slbCurCfgSapAslrIpv6Addr=slbCurCfgSapAslrIpv6Addr, slbCurCfgVirtServPathHidePathName=slbCurCfgVirtServPathHidePathName, slbCurCfgVirtServApplicationType=slbCurCfgVirtServApplicationType, slbNewCfgSyncPeerPip=slbNewCfgSyncPeerPip, slbNewCfgRealServRealPortFreeIdx=slbNewCfgRealServRealPortFreeIdx, slbNewNwclssCfgNetworkElementsDel=slbNewNwclssCfgNetworkElementsDel, slbNewNwclssCfgNetworkElementsIp=slbNewNwclssCfgNetworkElementsIp, slbStatGroupWlmUpdates=slbStatGroupWlmUpdates, slbSessionInfoStringFormatFlag=slbSessionInfoStringFormatFlag, slbCurCfgVirtServiceSessionMirror=slbCurCfgVirtServiceSessionMirror, slbNewSslCfgSSLPolEntry=slbNewSslCfgSSLPolEntry, gslbOperQueryType=gslbOperQueryType, fltNewCfgExtendedHoldDuration=fltNewCfgExtendedHoldDuration, slbCurCfgVirtServerCReset=slbCurCfgVirtServerCReset, slbNewCfgVirtServiceCoffset=slbNewCfgVirtServiceCoffset, gslbOperClear=gslbOperClear, wlmInfo=wlmInfo, sslSlbStatUniqTotalSessions=sslSlbStatUniqTotalSessions, slbCurCfgGroupMaxThreshold=slbCurCfgGroupMaxThreshold, sessMirrorTotalDataSessionsCreated=sessMirrorTotalDataSessionsCreated, gslbNewCfgDnsSecGlobalEnabled=gslbNewCfgDnsSecGlobalEnabled, slbCurAcclCfgCachePolExpireTime=slbCurAcclCfgCachePolExpireTime, slbNewCfgRealServGroupIndex=slbNewCfgRealServGroupIndex, slbCurCfgWaphcWTPRcvContent=slbCurCfgWaphcWTPRcvContent, slbCurAcclCfgCompUrlRuleDomainM=slbCurAcclCfgCompUrlRuleDomainM, fltNewCfgHoldDuration=fltNewCfgHoldDuration, slbCurCfgWaphcRcvPDU=slbCurCfgWaphcRcvPDU, fltNewCfgDstIpMac=fltNewCfgDstIpMac, slbNewAcclCfgCompUrlRuleListIdIndex=slbNewAcclCfgCompUrlRuleListIdIndex, slbNewCfgUrlBwmTable=slbNewCfgUrlBwmTable, gslbNewCfgMetricNetworkBmap=gslbNewCfgMetricNetworkBmap, fltCurCfgDstMac=fltCurCfgDstMac, slbCurCfgSapAslrIndex=slbCurCfgSapAslrIndex, slbCurCfgSyncRoute=slbCurCfgSyncRoute, gslbStatVirtServerVirtPort=gslbStatVirtServerVirtPort, fltNewCfgPortRemFiltRule=fltNewCfgPortRemFiltRule, gslbNewCfgEnhNetworkNetMask=gslbNewCfgEnhNetworkNetMask, fltCurCfgProtocol=fltCurCfgProtocol, slbCurCfgContRuleTable=slbCurCfgContRuleTable, slbRealServerMaxSize=slbRealServerMaxSize, slbCurCfgRealServerEntry=slbCurCfgRealServerEntry, fltNewCfgPatternMatch=fltNewCfgPatternMatch, slbNewCfgPeerPIPTable=slbNewCfgPeerPIPTable, slbPortClientState=slbPortClientState, gslbDnsSecImportExport=gslbDnsSecImportExport, fltNewCfgAddPatternMatchGroup=fltNewCfgAddPatternMatchGroup, snmphcNewCfgRcvContent=snmphcNewCfgRcvContent, slbCurSslCfgCertsDefaultsOrganizationUnitName=slbCurSslCfgCertsDefaultsOrganizationUnitName, slbNewAcclCfgCachePolURLList=slbNewAcclCfgCachePolURLList, slbStatVServerTotalSessions=slbStatVServerTotalSessions, slbCurCfgRealServerTimeOut=slbCurCfgRealServerTimeOut, gslbOperAvPersisState=gslbOperAvPersisState, gslbNewCfgGenSourceIpv6Prefix=gslbNewCfgGenSourceIpv6Prefix, slbNewCfgSapAslrName=slbNewCfgSapAslrName, slbCurCfgWapTpcp=slbCurCfgWapTpcp, slbCurCfgContRuleContClass=slbCurCfgContRuleContClass, slbStatSpMaintNonTcpFrames=slbStatSpMaintNonTcpFrames, slbNewSslCfgCertsExpirty=slbNewSslCfgCertsExpirty, gslbStatMaintOutHttp=gslbStatMaintOutHttp, slbCurSslCfgSSLPolConvuri=slbCurSslCfgSSLPolConvuri, slbStatSpMaintIncorrectVports=slbStatSpMaintIncorrectVports, slbCurCfgGroupMinThreshold=slbCurCfgGroupMinThreshold, slbNewCfgDomainRecordName=slbNewCfgDomainRecordName, slbNewCfgGroupMinmissHash=slbNewCfgGroupMinmissHash, fltCurCfgNatTimeout=fltCurCfgNatTimeout, gslbStatRemRealServerEntry=gslbStatRemRealServerEntry, slbRealServerMacAddr=slbRealServerMacAddr, slbNewAcclCfgCachePolEntry=slbNewAcclCfgCachePolEntry, slbNewCfgVirtServerTable=slbNewCfgVirtServerTable, gslbStatMaintNoDomain=gslbStatMaintNoDomain, gslbInfoVirtServerSessMax=gslbInfoVirtServerSessMax, slbNewAcclCfgCompBrwsListName=slbNewAcclCfgCompBrwsListName, pip6CurCfgPip=pip6CurCfgPip, httpStatSummRes11KbTo50Kb=httpStatSummRes11KbTo50Kb, slbNewCfgVirtServerFreeServiceIdx=slbNewCfgVirtServerFreeServiceIdx, gslbStatRuleRemote=gslbStatRuleRemote, slbNewSslCfgCertsDefaultsOrganizationName=slbNewSslCfgCertsDefaultsOrganizationName, slbNewCfgPeerPIPEntry=slbNewCfgPeerPIPEntry, fltCurCfgTcpAck=fltCurCfgTcpAck, slbNewSslCfgAuthPolPassinfoNafterFlag=slbNewSslCfgAuthPolPassinfoNafterFlag, cachPerServStatEntry=cachPerServStatEntry, slbNewCfgVirtServerAvail=slbNewCfgVirtServerAvail, sipTotalClientParseErrors=sipTotalClientParseErrors, cachStatPerServVirtServiceIndex=cachStatPerServVirtServiceIndex, slbCurAcclCfgCachePolMaxSize=slbCurAcclCfgCachePolMaxSize, radiusAcctReqFailsSPDead=radiusAcctReqFailsSPDead, compStatPerServAvgSizeAftComp=compStatPerServAvgSizeAftComp, sslOffPerServSessUsingTLS11=sslOffPerServSessUsingTLS11, fltNewCfgExtendedLayer7DenyUrlBmap=fltNewCfgExtendedLayer7DenyUrlBmap, gslbCurDnsSecZoneZSK2=gslbCurDnsSecZoneZSK2, slbStatMaintSymTruncPayloadToMp=slbStatMaintSymTruncPayloadToMp, slbCurCfgVirtServiceSdpNat=slbCurCfgVirtServiceSdpNat, httpStatSummResSmall1Kb=httpStatSummResSmall1Kb, gslbCurCfgRuleTableEntry=gslbCurCfgRuleTableEntry, gslbInfoRemRealServerIdx=gslbInfoRemRealServerIdx, gslbOperQuery=gslbOperQuery, slbCurCfgVirtServicesEntry=slbCurCfgVirtServicesEntry, slbNewAcclCfgCacheUrlRuleURLm=slbNewAcclCfgCacheUrlRuleURLm, slbCurCfgGroupHealthCheckUrl=slbCurCfgGroupHealthCheckUrl, slbNewCfgRealServerOid=slbNewCfgRealServerOid, fltNewCfgPortFiltBmap=fltNewCfgPortFiltBmap, slbNewNwclssCfgNetworkElementsToIpv6Addr=slbNewNwclssCfgNetworkElementsToIpv6Addr, newCfgRealServerTableSize=newCfgRealServerTableSize, slbNewAcclCfgCacheUrlRuleName=slbNewAcclCfgCacheUrlRuleName, slbNewCfgSyncCerts=slbNewCfgSyncCerts, fltNewCfgFtpNatActive=fltNewCfgFtpNatActive, slbStatSapAslrSampling=slbStatSapAslrSampling, slbCurCfgGroupTable=slbCurCfgGroupTable, fltNewCfgNat=fltNewCfgNat, slbStatSpMaintIpFragCurSessions=slbStatSpMaintIpFragCurSessions, gslbNewCfgRemSitePrimaryIPVer=gslbNewCfgRemSitePrimaryIPVer, slbCurCfgDomainRecordState=slbCurCfgDomainRecordState)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", slbCurNwclssCfgNetworkElementsId=slbCurNwclssCfgNetworkElementsId, sessMirrorTotalUpdateSessionMsgRx=sessMirrorTotalUpdateSessionMsgRx, slbCurCfgRealServerIpAddr=slbCurCfgRealServerIpAddr, fltCurCfgBwmContract=fltCurCfgBwmContract, slbNewCfgBuddyEntry=slbNewCfgBuddyEntry, ocspCachePurge=ocspCachePurge, fltNewCfgIndx=fltNewCfgIndx, fltNewCfgEgressPip=fltNewCfgEgressPip, hcsTableMaxSize=hcsTableMaxSize, slbStatMaintSymSegAllocFails=slbStatMaintSymSegAllocFails, slbNewCfgPortBind=slbNewCfgPortBind, slbNewCfgDrecordDelete=slbNewCfgDrecordDelete, slbNewAcclCfgCompBrwsRuleAgentM=slbNewAcclCfgCompBrwsRuleAgentM, slbCurCfgWlmIndex=slbCurCfgWlmIndex, slbCurCfgVirtServerState=slbCurCfgVirtServerState, slbCurCfgRealServerSubdmac=slbCurCfgRealServerSubdmac, fltNewCfgExtendedHdrHashLen=fltNewCfgExtendedHdrHashLen, slbNewCfgVirtServiceCookieDname=slbNewCfgVirtServiceCookieDname, slbCurCfgRealServerIpVer=slbCurCfgRealServerIpVer, slbCurCfgVirtServiceDnsSlb=slbCurCfgVirtServiceDnsSlb, sapCfg=sapCfg, pipNewCfgBaseType=pipNewCfgBaseType, slbNewAcclCfgCompUrlRuleIndex=slbNewAcclCfgCompUrlRuleIndex, slbCurCfgGroupRealServIndex=slbCurCfgGroupRealServIndex, compStatPerServComprTputKb=compStatPerServComprTputKb, slbNewAcclCfgCompUrlListAdminStatus=slbNewAcclCfgCompUrlListAdminStatus, gslbNewDnsResVipTable=gslbNewDnsResVipTable, slbNewAcclCfgCompBrwsRuleDelete=slbNewAcclCfgCompBrwsRuleDelete, slbCurCfgPortSlbFilterBmap=slbCurCfgPortSlbFilterBmap, slbCurCfgPeerPIPTable=slbCurCfgPeerPIPTable, pipCurCfgPortMap=pipCurCfgPortMap, sslCfg=sslCfg, slbNewSslCfgAuthPolPassinfoNbeforeFlag=slbNewSslCfgAuthPolPassinfoNbeforeFlag, httpPerServStatsVirtServIndex=httpPerServStatsVirtServIndex, slbCurCfgVirtServiceCachepol=slbCurCfgVirtServiceCachepol, slbCurCfgGroupSlowstart=slbCurCfgGroupSlowstart, slbCurCfgVirtServerWeight=slbCurCfgVirtServerWeight, slbStatSpMaintIpFragTotalSessions=slbStatSpMaintIpFragTotalSessions, slbNewCfgWlmDelete=slbNewCfgWlmDelete, slbNewCfgSyncPort=slbNewCfgSyncPort, gslbCurCfgGenRemSiteUpdatePort=gslbCurCfgGenRemSiteUpdatePort, slbStatVServerHeaderMisses=slbStatVServerHeaderMisses, slbNewAcclCfgCachePolMinSize=slbNewAcclCfgCachePolMinSize, slbNewCfgWaphcSndContent=slbNewCfgWaphcSndContent, compBrowRuleSizeAftComp=compBrowRuleSizeAftComp, slbNewCfgBuddyGroupIndex=slbNewCfgBuddyGroupIndex, httpStatSummRes51KbTo100Kb=httpStatSummRes51KbTo100Kb, slbStatSpMaintSymPacketsIn=slbStatSpMaintSymPacketsIn, slbNewSslCfgAuthPolValidityCachtime=slbNewSslCfgAuthPolValidityCachtime, certs=certs, slbCurAcclCfgCompUrlListIdIndex=slbCurAcclCfgCompUrlListIdIndex, slbCurAcclCfgCompUrlRuleName=slbCurAcclCfgCompUrlRuleName, pip6CurCfgPortMap=pip6CurCfgPortMap, slbCurCfgPeerIpVersion=slbCurCfgPeerIpVersion, ftpNatStatTotal=ftpNatStatTotal, gslbCurCfgEnhNetworkNetMask=gslbCurCfgEnhNetworkNetMask, slbNewCfgWaphcConnPDU=slbNewCfgWaphcConnPDU, slbStatWlmTotInvalidRealSer=slbStatWlmTotInvalidRealSer, slbStatSapAslrIndex=slbStatSapAslrIndex, fltCurCfgNatIp=fltCurCfgNatIp, gslbCurCfgGenState=gslbCurCfgGenState, slbNewAcclCfgCompPolMinSize=slbNewAcclCfgCompPolMinSize, fltNewCfgSrcIpMask=fltNewCfgSrcIpMask, fltNewCfgAclTcpUrg=fltNewCfgAclTcpUrg, fltNewCfgExtendedLayer7DenyRemUrl=fltNewCfgExtendedLayer7DenyRemUrl, gslbNewCfgDnsSecGlobalNsec3HashIterations=gslbNewCfgDnsSecGlobalNsec3HashIterations, slbNewAcclCfgCompBrwsListCopy=slbNewAcclCfgCompBrwsListCopy, slbCurAcclCfgCompBrwsRuleAgentM=slbCurAcclCfgCompBrwsRuleAgentM, gslbCurCfgEnhNetworkVirtServer=gslbCurCfgEnhNetworkVirtServer, slbStatVServerHeaderTotalSessions=slbStatVServerHeaderTotalSessions, compBrowRuleRuleListId=compBrowRuleRuleListId, cachRuleListNumOfBytesCac=cachRuleListNumOfBytesCac, slbCurSslCfgCertsName=slbCurSslCfgCertsName, gslbNewCfgRuleState=gslbNewCfgRuleState, fltCurCfgRangeLowSrcPort=fltCurCfgRangeLowSrcPort, slbCurCfgRealServerCookie=slbCurCfgRealServerCookie, slbNewCfgVirtServiceDBind=slbNewCfgVirtServiceDBind, slbNewCfgSyncVrrp=slbNewCfgSyncVrrp, slbSessionInfo=slbSessionInfo, slbStatRServerEntry=slbStatRServerEntry, slbCurCfgVirtServerIpVer=slbCurCfgVirtServerIpVer, gslbStatPersHiwat=gslbStatPersHiwat, gslbNewCfgRuleIndx=gslbNewCfgRuleIndx, gslbStatGeoTotal=gslbStatGeoTotal, gslbCurDnsSecKeyPublicationPeriod=gslbCurDnsSecKeyPublicationPeriod, slbCurAcclCfgCompPolComplv1=slbCurAcclCfgCompPolComplv1, slbNewCfgVirtServicesEntry=slbNewCfgVirtServicesEntry, slbCurCfgGroupRealServerEntry=slbCurCfgGroupRealServerEntry, slbNewAcclCfgCachePolName=slbNewAcclCfgCachePolName, slbNewCfgVirtServiceSip=slbNewCfgVirtServiceSip, slbNewCfgWaphcOffset=slbNewCfgWaphcOffset, gslbDnsSecImportExportAction=gslbDnsSecImportExportAction, gslbStatVirtServerEntry=gslbStatVirtServerEntry, slbCurCfgPeerPIPAddr=slbCurCfgPeerPIPAddr, slbNewCfgVirtServiceHttpSlbOption=slbNewCfgVirtServiceHttpSlbOption, slbStatMaintSymPacketsWithNoData=slbStatMaintSymPacketsWithNoData, hcsNewCfgAddLongExpectCmd=hcsNewCfgAddLongExpectCmd, slbNewSslCfgCertsDefaultsEMail=slbNewSslCfgCertsDefaultsEMail, slbCurSslCfgAuthPolPassinfoCertFormat=slbCurSslCfgAuthPolPassinfoCertFormat, compUrlRuleRuleListIndex=compUrlRuleRuleListIndex, smtportCfg=smtportCfg, slbNewCfgSapAslrVipAddr=slbNewCfgSapAslrVipAddr, fltCurCfgSessionMirror=fltCurCfgSessionMirror, rtspStatControlConns=rtspStatControlConns, slbNewAcclCfgCompUrlListName=slbNewAcclCfgCompUrlListName, slbStatMaintUdpDatagrams=slbStatMaintUdpDatagrams, slbNewCfgRealServerEntry=slbNewCfgRealServerEntry, slbNewCfgVirtServiceCkRebind=slbNewCfgVirtServiceCkRebind, sslOffPerServVirtServPort=sslOffPerServVirtServPort, tcpLimitStats=tcpLimitStats, hcsNewCfgAddDepthCmd=hcsNewCfgAddDepthCmd, gslbNewDnsSecZoneKSK1=gslbNewDnsSecZoneKSK1, compUrlRuleCompRatio=compUrlRuleCompRatio, fltNewCfgLayer7DenyRemUrl=fltNewCfgLayer7DenyRemUrl, httpStatSummHTTP11Per=httpStatSummHTTP11Per, slbCurCfgVirtServicesTable=slbCurCfgVirtServicesTable, pipCurCfgVlanMap=pipCurCfgVlanMap, synAtkOnOff=synAtkOnOff, slbNewAcclCfgCompBrwsRuleEntry=slbNewAcclCfgCompBrwsRuleEntry, slbNewCfgLinklbTTL=slbNewCfgLinklbTTL, httpStatSummAvgNumReqPerConn=httpStatSummAvgNumReqPerConn, slbNewCfgDrecordVirtServer=slbNewCfgDrecordVirtServer, fltCurCfgIpv6Sip=fltCurCfgIpv6Sip, slbNewCfgLinklbState=slbNewCfgLinklbState, slbCurCfgVirtServiceThash=slbCurCfgVirtServiceThash, gslbStatRuleRoundrobin=gslbStatRuleRoundrobin, slbCurCfgVirtServiceHttpmodList=slbCurCfgVirtServiceHttpmodList, slbNewSslCfgAuthPolTable=slbNewSslCfgAuthPolTable, curCfgRealServerTableSize=curCfgRealServerTableSize, fltCurCfgAclIcmp=fltCurCfgAclIcmp, fltNewCfgPatternMatchGroupBmap=fltNewCfgPatternMatchGroupBmap, slbNewAcclCfgCacheUrlRuleAdminStatus=slbNewAcclCfgCacheUrlRuleAdminStatus, slbNewSslCfgCertsOrganizationName=slbNewSslCfgCertsOrganizationName, slbNewSslCfgSSLPolDel=slbNewSslCfgSSLPolDel, slbNewAcclCfgCompUrlRuleDomain=slbNewAcclCfgCompUrlRuleDomain, slbCurSslCfgSSLAdminStatus=slbCurSslCfgSSLAdminStatus, slbCurCfgVirtServiceLdapslb=slbCurCfgVirtServiceLdapslb, slbNewCfgWlmGroups=slbNewCfgWlmGroups, gslbStatMaintOutSiteUpdates2=gslbStatMaintOutSiteUpdates2, sslOffPerServVirtServiceIndex=sslOffPerServVirtServiceIndex, slbNewCfgVirtServiceRealPort=slbNewCfgVirtServiceRealPort, slbNewCfgRealServerState=slbNewCfgRealServerState, slbCurCfgGroupBackupGroup=slbCurCfgGroupBackupGroup, slbCurCfgBuddyService=slbCurCfgBuddyService, hcsNewCfgScriptString=hcsNewCfgScriptString, slbCurCfgVirtServiceCookieMode=slbCurCfgVirtServiceCookieMode, slbCurCfgVirtServiceServCert=slbCurCfgVirtServiceServCert, slbStatSpAuxSessTable=slbStatSpAuxSessTable, slbCurCfgVirtServiceUriCookie=slbCurCfgVirtServiceUriCookie, slbNewAcclCfgCompUrlListTable=slbNewAcclCfgCompUrlListTable, slbStatVServerHeaderHits=slbStatVServerHeaderHits, slbCurCfgGrace=slbCurCfgGrace, slbNewCfgVirtServiceXForwardedFor=slbNewCfgVirtServiceXForwardedFor, gslbNewCfgRemSiteState=gslbNewCfgRemSiteState, slbCurCfgWapDebug=slbCurCfgWapDebug, slbNewSslCfgAuthPolPassinfoSerialName=slbNewSslCfgAuthPolPassinfoSerialName, slbCurAcclCfgCompUrlRuleCompress=slbCurAcclCfgCompUrlRuleCompress, slbNewSslCfgSSLPolPassInfoCipherFlag=slbNewSslCfgSSLPolPassInfoCipherFlag, slbCurCfgSapAslrIpVer=slbCurCfgSapAslrIpVer, slbCurCfgGroupHealthCheckFormula=slbCurCfgGroupHealthCheckFormula, slbNewCfgGroupIdsState=slbNewCfgGroupIdsState, slbCurCfgPortBind=slbCurCfgPortBind, gslbNewCfgProximityTime=gslbNewCfgProximityTime, fltNewCfgExtendedHdrName=fltNewCfgExtendedHdrName, gslbStatEnhNetworkHit=gslbStatEnhNetworkHit, slbNewSslCfgCertsGenerate=slbNewSslCfgCertsGenerate, slbCurSslCfgAuthPolAdminStatus=slbCurSslCfgAuthPolAdminStatus, slbCurAcclCfgCompBrwsRuleContent=slbCurAcclCfgCompBrwsRuleContent, gslbGeneralCfg=gslbGeneralCfg, slbNewCfgVirtServiceHttpRedir=slbNewCfgVirtServiceHttpRedir, gslbStatGeoJP=gslbStatGeoJP, slbNewAcclCfgCompPolMaxSize=slbNewAcclCfgCompPolMaxSize, slbCurCfgLinklbTTL=slbCurCfgLinklbTTL, slbCurAcclCfgCompUrlRuleAdminStatus=slbCurAcclCfgCompUrlRuleAdminStatus, slbStatSpRealServerServerIndex=slbStatSpRealServerServerIndex, gslbStatRuleQos=gslbStatRuleQos, slbNewSslCfgAuthPolPassinfoIssuerName=slbNewSslCfgAuthPolPassinfoIssuerName, slbCurCfgWaphcOffset=slbCurCfgWaphcOffset, gslbCurCfgEnhNetworkVer=gslbCurCfgEnhNetworkVer, cachStatPerServVirtServIndex=cachStatPerServVirtServIndex, synAtkInterval=synAtkInterval, slbCurCfgRealServerState=slbCurCfgRealServerState, slbNewCfgPortSlbState=slbNewCfgPortSlbState, slbNewCfgGroupHealthCheckFormula=slbNewCfgGroupHealthCheckFormula, slbNewCfgUrlBwmVirtServIndex=slbNewCfgUrlBwmVirtServIndex, slbCurCfgVirtServTextrepStatus=slbCurCfgVirtServTextrepStatus, httpPerServStatsRespLarger100Kb=httpPerServStatsRespLarger100Kb, slbCurCfgWaphcRcvContent=slbCurCfgWaphcRcvContent, slbCurAcclCfgCacheUrlRuleExpire=slbCurAcclCfgCacheUrlRuleExpire, slbCurCfgContRuleAction=slbCurCfgContRuleAction, slbCurCfgRealServerMaxConns=slbCurCfgRealServerMaxConns, slbNewSslCfgSSLPolCipherUserdef=slbNewSslCfgSSLPolCipherUserdef, slbCurCfgPeerPIPIndex=slbCurCfgPeerPIPIndex, hcsNewCfgTableEntry=hcsNewCfgTableEntry, slbNewSslCfgAuthPolValidityUriprior=slbNewSslCfgAuthPolValidityUriprior, slbNewCfgVirtServiceRtspUrlParse=slbNewCfgVirtServiceRtspUrlParse, slbFreeVirtualServerIndexInfo=slbFreeVirtualServerIndexInfo, slbCurCfgPeerIpv6Addr=slbCurCfgPeerIpv6Addr, slbStatVirtServiceHCOctetsHigh32=slbStatVirtServiceHCOctetsHigh32, slbGroupTableMaxSize=slbGroupTableMaxSize, slbCurAcclCfgCompUrlListTable=slbCurAcclCfgCompUrlListTable, slbNewCfgVirtServicesFourthPartTable=slbNewCfgVirtServicesFourthPartTable, gslbDnsSecZoneCfg=gslbDnsSecZoneCfg, slbCurNwclssCfgNetworkElementsIpv6Addr=slbCurNwclssCfgNetworkElementsIpv6Addr, cachStatSummObjSmaller10K=cachStatSummObjSmaller10K, fltCurCfgNat=fltCurCfgNat, gslbOperAdd=gslbOperAdd, slbCurSslCfgGroupsType=slbCurSslCfgGroupsType, slbNewNwclssCfgNetworkClassesDel=slbNewNwclssCfgNetworkClassesDel, compBrowRuleListId=compBrowRuleListId, compPerBrowRuleStatsTable=compPerBrowRuleStatsTable, fltCurCfgUrlBwmEntry=fltCurCfgUrlBwmEntry, gslbMaintStats=gslbMaintStats, slbCurCfgGroupIpVer=slbCurCfgGroupIpVer, pipNewCfgTable=pipNewCfgTable, gslbCurCfgRemSiteIndx=gslbCurCfgRemSiteIndx, slbNewCfgSapAslrIpVer=slbNewCfgSapAslrIpVer, slbCurCfgVirtServiceCookieDname=slbCurCfgVirtServiceCookieDname, gslbNewDnsSecZoneKSK3=gslbNewDnsSecZoneKSK3, slbCurCfgVirtServUrlchangPathType=slbCurCfgVirtServUrlchangPathType, gslbInfoRemSiteEntry=gslbInfoRemSiteEntry, slbNewAcclCfgCompBrwsRuleCompress=slbNewAcclCfgCompBrwsRuleCompress, slbNewSslCfgGroupsID=slbNewSslCfgGroupsID, slbCurAcclCfgCompBrwsListName=slbCurAcclCfgCompBrwsListName, slbCurCfgPeerIpAddr=slbCurCfgPeerIpAddr, gslbStatGeoNA=gslbStatGeoNA, gslbNewCfgGenRemSiteUpdateVersion=gslbNewCfgGenRemSiteUpdateVersion, gslbStatRemSiteInUpdates=gslbStatRemSiteInUpdates, slbCurCfgPeerPIPv6Addr=slbCurCfgPeerPIPv6Addr, fltNewCfgAclIcmp=fltNewCfgAclIcmp, slbStatVServerHCOctets=slbStatVServerHCOctets, gslbInfoVirtServerVirtPort=gslbInfoVirtServerVirtPort, slbNewSslCfgSSLPolPassInfoHeadBitsFlag=slbNewSslCfgSSLPolPassInfoHeadBitsFlag, gslbInfoRemRealServerEntry=gslbInfoRemRealServerEntry, fltNewCfgExtendedIpv6Sprefix=fltNewCfgExtendedIpv6Sprefix, slbNewCfgVirtServiceCookieSecure=slbNewCfgVirtServiceCookieSecure, gslbStatEnhNetworkIdx=gslbStatEnhNetworkIdx, slbNewCfgGroupMetric=slbNewCfgGroupMetric, slbCurAcclCfgCachePolBrowser=slbCurAcclCfgCachePolBrowser, slbStatGroupHighestSessions=slbStatGroupHighestSessions, slbCurSslCfgAuthPolValidityTimedev=slbCurSslCfgAuthPolValidityTimedev, slbVirtServicesInfoRport=slbVirtServicesInfoRport, slbCurCfgSapAslrEntry=slbCurCfgSapAslrEntry, slbCurCfgVirtServicesThirdPartTable=slbCurCfgVirtServicesThirdPartTable, slbRealServerRportInfoState=slbRealServerRportInfoState, gslbInfoRemSiteSecondaryIp=gslbInfoRemSiteSecondaryIp, slbCurCfgVirtServicesFourthPartTable=slbCurCfgVirtServicesFourthPartTable, slbNewCfgVirtServiceCookiePath=slbNewCfgVirtServiceCookiePath, slbNewCfgEntryIndex=slbNewCfgEntryIndex, slbCurCfgVirtServPathHideHostType=slbCurCfgVirtServPathHideHostType, fltNewCfgExtendedIpVer=fltNewCfgExtendedIpVer, gslbCurDnsResVipEntry=gslbCurDnsResVipEntry, slbStatWlmMsgParseErr=slbStatWlmMsgParseErr, slbCurCfgContRuleRedirection=slbCurCfgContRuleRedirection)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", gslbStatRuleLocal=gslbStatRuleLocal, slbNewCfgVirtServiceClength=slbNewCfgVirtServiceClength, slbNewAcclCfgCachePolQuery=slbNewAcclCfgCachePolQuery, fltNewCfgExtendedSecurityParseAll=fltNewCfgExtendedSecurityParseAll, fltNewCfgRedirGroup=fltNewCfgRedirGroup, slbStatAuxSessAllocFails=slbStatAuxSessAllocFails, slbNewCfgVirtServiceParseLimit=slbNewCfgVirtServiceParseLimit, gslbStatEnhNetworkTable=gslbStatEnhNetworkTable, slbStatWlmTotInvalidGrp=slbStatWlmTotInvalidGrp, pipNewCfgAddVlan=pipNewCfgAddVlan, fltCurCfgSrcMac=fltCurCfgSrcMac, slbNewCfgUrlBwmVirtServiceIndex=slbNewCfgUrlBwmVirtServiceIndex, slbNewCfgPortSlbRemFilter=slbNewCfgPortSlbRemFilter, fltNewCfgExtendedIpv6Proxy=fltNewCfgExtendedIpv6Proxy, slbCurCfgLinklbState=slbCurCfgLinklbState, slbCurCfgDrecordVirtRealMappingTable=slbCurCfgDrecordVirtRealMappingTable, wapRequestToWrongSP=wapRequestToWrongSP, slbNewCfgVirtServiceDirect=slbNewCfgVirtServiceDirect, slbNewCfgVirtServiceCname=slbNewCfgVirtServiceCname, fltNewCfgNatTimeout=fltNewCfgNatTimeout, slbCurSslCfgAuthPolPassinfoMd5Flag=slbCurSslCfgAuthPolPassinfoMd5Flag, gslbCurDnsSecZoneParentIPv6=gslbCurDnsSecZoneParentIPv6, slbCurCfgGroupRealServerState=slbCurCfgGroupRealServerState, slbCurCfgVirtServiceSSLpol=slbCurCfgVirtServiceSSLpol, slbNewAcclCfgCompUrlRuleDelete=slbNewAcclCfgCompUrlRuleDelete, tcpLimitStatClientEntries=tcpLimitStatClientEntries, slbNewAcclCfgCompBrwsListDel=slbNewAcclCfgCompBrwsListDel, fltCurCfgProxyIp=fltCurCfgProxyIp, synAtkWarningFired=synAtkWarningFired, gslbCurDnsSecKeyValidityPeriod=gslbCurDnsSecKeyValidityPeriod, slbCurCfgVmaSrcPort=slbCurCfgVmaSrcPort, slbStatMaintIpFragTableFull=slbStatMaintIpFragTableFull, fltNewCfgTcpAck=fltNewCfgTcpAck, slbCurCfgVirtServiceUDPBalance=slbCurCfgVirtServiceUDPBalance, ftpStatModeSwitchError=ftpStatModeSwitchError, slbStatVirtServiceTotalSessions=slbStatVirtServiceTotalSessions, slbStatSpRealServerCurrSessions=slbStatSpRealServerCurrSessions, slbNewAcclCfgCacheUrlListIdIndex=slbNewAcclCfgCacheUrlListIdIndex, slbOperSessionDelTransType=slbOperSessionDelTransType, slbNewCfgProxyGratArp=slbNewCfgProxyGratArp, compStatPerServEntry=compStatPerServEntry, fltCurCfgHttpRedirMappingToStr=fltCurCfgHttpRedirMappingToStr, cachStatSummTotObj=cachStatSummTotObj, slbNewAcclCfgCacheUrlRuleListIdIndex=slbNewAcclCfgCacheUrlRuleListIdIndex, slbCurAcclCfgCacheUrlRuleDomain=slbCurAcclCfgCacheUrlRuleDomain, slbNewCfgPeerEntry=slbNewCfgPeerEntry, slbCurCfgVirtServiceHttpSlb=slbCurCfgVirtServiceHttpSlb, fltCurCfgHttpRedirMappingTable=fltCurCfgHttpRedirMappingTable, gslbCurCfgGenNoremote=gslbCurCfgGenNoremote, slbCurCfgRealServerIndex=slbCurCfgRealServerIndex, compPerUrlRuleListStatsEntry=compPerUrlRuleListStatsEntry, slbCurCfgSyncPeerPip=slbCurCfgSyncPeerPip, fltCurCfg8021pBitsMatch=fltCurCfg8021pBitsMatch, slbCurCfgDrecordRealServer=slbCurCfgDrecordRealServer, slbNewCfgPortEntry=slbNewCfgPortEntry, slbNewAcclCfgCachePolNameIdIndex=slbNewAcclCfgCachePolNameIdIndex, gslbNewCfgGenDnsDirect=gslbNewCfgGenDnsDirect, slbNewSslCfgGroupsCertBmap=slbNewSslCfgGroupsCertBmap, slbDrecordVirtRealMappingTableMaxSize=slbDrecordVirtRealMappingTableMaxSize, slbNewSslCfgCertsLocalityName=slbNewSslCfgCertsLocalityName, slbVirtServicesInfoWeight=slbVirtServicesInfoWeight, slbCurNwclssCfgNetworkElementsEntry=slbCurNwclssCfgNetworkElementsEntry, slbNewCfgVirtualServiceStats=slbNewCfgVirtualServiceStats, gslbInfoDnsSecKeyEntry=gslbInfoDnsSecKeyEntry, slbStatSpMaintIncorrectVIPs=slbStatSpMaintIncorrectVIPs, compUrlRuleListSizeAftComp=compUrlRuleListSizeAftComp, slbNewCfgRealSerIndex=slbNewCfgRealSerIndex, fltNewCfgHdrHash=fltNewCfgHdrHash, fltCurCfgLog=fltCurCfgLog, slbNewCfgVirtServTextrepAction=slbNewCfgVirtServTextrepAction, slbCurAcclCfgCacheUrlRuleEntry=slbCurAcclCfgCacheUrlRuleEntry, slbStatsClear=slbStatsClear, gslbCurDnsSecKeyAlgo=gslbCurDnsSecKeyAlgo, slbNewAcclCfgCompBrwsRuleAgent=slbNewAcclCfgCompBrwsRuleAgent, slbNewSslCfgAuthPolPassinfoVersionName=slbNewSslCfgAuthPolPassinfoVersionName, slbCurCfgPortSlbClntState=slbCurCfgPortSlbClntState, slbCurSslCfgAuthPolTrustcaChainType=slbCurSslCfgAuthPolTrustcaChainType, slbNewCfgVirtServiceHname=slbNewCfgVirtServiceHname, slbNewNwclssCfgNetworkClassesId=slbNewNwclssCfgNetworkClassesId, gslbStatRulePersistence=gslbStatRulePersistence, gslbNewCfgGenSessUtilCap=gslbNewCfgGenSessUtilCap, gslbCurDnsSecZoneKSK2=gslbCurDnsSecZoneKSK2, slbCurCfgPortSlbIdslbState=slbCurCfgPortSlbIdslbState, compPerBrowRuleListStatsTable=compPerBrowRuleListStatsTable, layer4Stats=layer4Stats, gslbNewCfgRuleRR=gslbNewCfgRuleRR, slbStatSpMaintMaximumSessions=slbStatSpMaintMaximumSessions, fltCurCfgTable=fltCurCfgTable, fltNewCfgExtendedNbind=fltNewCfgExtendedNbind, slbNewCfgVirtServPathHideHostName=slbNewCfgVirtServPathHideHostName, slbCurCfgRealServerProxy=slbCurCfgRealServerProxy, slbCurCfgDomainRecordIndex=slbCurCfgDomainRecordIndex, slbNewCfgRealServerNxtBuddyIdx=slbNewCfgRealServerNxtBuddyIdx, slbStatSpMaintUdpDatagrams=slbStatSpMaintUdpDatagrams, slbNewCfgContRuleIndex=slbNewCfgContRuleIndex, gslbCurDnsResVipIndex2=gslbCurDnsResVipIndex2, slbSessionInfoState=slbSessionInfoState, slbCurCfgVirtServiceDBind=slbCurCfgVirtServiceDBind, slbNewCfgPortSlbHotStandby=slbNewCfgPortSlbHotStandby, snmphcCurCfgIndex=snmphcCurCfgIndex, gslbOperSendQuery=gslbOperSendQuery, slbStatMaintCurBindings=slbStatMaintCurBindings, slbNewCfgVirtServicesTable=slbNewCfgVirtServicesTable, slbCurAcclCfgCacheUrlRuleListIdIndex=slbCurAcclCfgCacheUrlRuleListIdIndex, slbCurCfgGroupName=slbCurCfgGroupName, slbNewSslCfgAuthPolPassinfoMd5Flag=slbNewSslCfgAuthPolPassinfoMd5Flag, fltNewCfgDelete=fltNewCfgDelete, fltNewCfgIdslbHash=fltNewCfgIdslbHash, sessMirrorTotalCreateSessionMsgTx=sessMirrorTotalCreateSessionMsgTx, slbNewCfgVirtServThirdPartIndex=slbNewCfgVirtServThirdPartIndex, slbSmtportTableMaxSize=slbSmtportTableMaxSize, slbNewCfgRealServerSuccRetry=slbNewCfgRealServerSuccRetry, fltNewCfgHdrHashLen=fltNewCfgHdrHashLen, slbCurCfgVirtServiceCname=slbCurCfgVirtServiceCname, snmphcCurCfgTable=snmphcCurCfgTable, fltCurCfgFwlb=fltCurCfgFwlb, gslbNewDnsResVipIPVer=gslbNewDnsResVipIPVer, slbNewCfgSapAslrDelete=slbNewCfgSapAslrDelete, gslbInfoVirtServerSessAvail=gslbInfoVirtServerSessAvail, slbStatSpMaintSpIndex=slbStatSpMaintSpIndex, fltCurCfgAclIpLength=fltCurCfgAclIpLength, cachStatSummHitPerc=cachStatSummHitPerc, fltNewCfgRangeHighSrcPort=fltNewCfgRangeHighSrcPort, gslbDnsSecImportExportImpKeySize=gslbDnsSecImportExportImpKeySize, fltNewCfgHttpRedirMappingEntry=fltNewCfgHttpRedirMappingEntry, slbNewAcclCfgCompPolComplv1=slbNewAcclCfgCompPolComplv1, slbIncorrectIp6Vports=slbIncorrectIp6Vports, tpcpDeleteSessReqsFailsSPDead=tpcpDeleteSessReqsFailsSPDead, slbNewSslCfgGroupsType=slbNewSslCfgGroupsType, slbStatVServerCurrSessions=slbStatVServerCurrSessions, slbOperGroupRealServerState=slbOperGroupRealServerState, gslbStatGroupDnsHandoffs=gslbStatGroupDnsHandoffs, slbStatMaintSymSessions=slbStatMaintSymSessions, fltCurCfgGotoFilter=fltCurCfgGotoFilter, slbPortRTSState=slbPortRTSState, slbNewSslCfgAuthPolPassinfoComp2424=slbNewSslCfgAuthPolPassinfoComp2424, cachStatSummObj101KTO1M=cachStatSummObj101KTO1M, gslbNewCfgGenNoResp=gslbNewCfgGenNoResp, sessMirrorTotalDataSessionsUpdated=sessMirrorTotalDataSessionsUpdated, slbCurSslCfgSSLPolBecipher=slbCurSslCfgSSLPolBecipher, connmngPerServStatsEntry=connmngPerServStatsEntry, slbNewCfgMnet=slbNewCfgMnet, slbCurCfgPortVlanBmap=slbCurCfgPortVlanBmap, slbCurSslCfgGroupsCertBmap=slbCurSslCfgGroupsCertBmap, fltNewCfgClientProxy=fltNewCfgClientProxy, slbPortInfoTable=slbPortInfoTable, slbNewCfgGrace=slbNewCfgGrace, slbNewAcclCfgCacheUrlListTable=slbNewAcclCfgCacheUrlListTable, slbCurAcclCfgCacheUrlRuleAdminStatus=slbCurAcclCfgCacheUrlRuleAdminStatus, slbOperHttpCachePurgeServiceIndex=slbOperHttpCachePurgeServiceIndex, slbNewCfgVirtServicesSecondPartTable=slbNewCfgVirtServicesSecondPartTable, slbNewCfgRealServerName=slbNewCfgRealServerName, slbPortProxyState=slbPortProxyState, fltCurCfgAclTcpAck=fltCurCfgAclTcpAck, fltNewCfgRedirPort=fltNewCfgRedirPort, slbOperSessionDelDestIp=slbOperSessionDelDestIp, gslbOperQuerySrcIpV6=gslbOperQuerySrcIpV6, slbStatMaintAllocFailures=slbStatMaintAllocFailures, fltCurCfgPbind=fltCurCfgPbind, slbVirtServicesInfoVirtServIndex=slbVirtServicesInfoVirtServIndex, slbNewAcclCfgCacheOnOff=slbNewAcclCfgCacheOnOff, gslbInfoVirtServerRemSite=gslbInfoVirtServerRemSite, sessMirrorTotalDeleteSessionMsgTx=sessMirrorTotalDeleteSessionMsgTx, slbNewCfgGroupOperatorAccess=slbNewCfgGroupOperatorAccess, slbCurCfgVirtServiceIndex=slbCurCfgVirtServiceIndex, slbStatWlmRegReq=slbStatWlmRegReq, slbCurCfgVirtServiceHttpSlbOption=slbCurCfgVirtServiceHttpSlbOption, httpTransSummTransRate=httpTransSummTransRate, gslbNewDnsSecZoneParentIPv4=gslbNewDnsSecZoneParentIPv4, fltNewCfgHash=fltNewCfgHash, gslbNewCfgGenCpuUtilCap=gslbNewCfgGenCpuUtilCap, radiusAcctBadReqs=radiusAcctBadReqs, sslOffPerServSessUsingSSLv3=sslOffPerServSessUsingSSLv3, slbCurCfgVirtServUrlchangPageType=slbCurCfgVirtServUrlchangPageType, slbStatVServerHCOctetsLow32=slbStatVServerHCOctetsLow32, slbCurSslCfgAuthPolPassinfoKeytypeFlag=slbCurSslCfgAuthPolPassinfoKeytypeFlag, gslbCurDnsResVipTable=gslbCurDnsResVipTable, radiusAcctAddSessionReqs=radiusAcctAddSessionReqs, slbNewCfgDirectMode=slbNewCfgDirectMode, pip6NewCfgRemovePortVlan=pip6NewCfgRemovePortVlan, slbCurCfgVirtServiceResponseCount=slbCurCfgVirtServiceResponseCount, fltNewCfgTable=fltNewCfgTable, slbNoRealServs=slbNoRealServs, fltNewCfgAclTcpSyn=fltNewCfgAclTcpSyn, sessMirrorTotalCreateDataSessionMsgTx=sessMirrorTotalCreateDataSessionMsgTx, slbFreeRealGroupIndexInfo=slbFreeRealGroupIndexInfo, fltCurCfgIdslbHash=fltCurCfgIdslbHash, gslbOperAddSrcIp=gslbOperAddSrcIp, slbCurNwclssCfgNetworkElementsMask=slbCurNwclssCfgNetworkElementsMask, slbNewAcclCfgCompUrlRuleEntry=slbNewAcclCfgCompUrlRuleEntry, slbNewSslCfgAuthPolPassinfoVersionFlag=slbNewSslCfgAuthPolPassinfoVersionFlag, fltCurCfg8021pBitsValue=fltCurCfg8021pBitsValue, slbCurCfgVirtServerTable=slbCurCfgVirtServerTable, fltNewCfgCache=fltNewCfgCache, slbNewCfgRealServerIdsport=slbNewCfgRealServerIdsport, slbNewCfgVirtServiceUDPBalance=slbNewCfgVirtServiceUDPBalance, fltCurCfgName=fltCurCfgName, slbNewSslCfgSSLPolIntermcaChainName=slbNewSslCfgSSLPolIntermcaChainName, slbSessionInfoFilterId=slbSessionInfoFilterId, slbNewCfgVirtServerBwmContract=slbNewCfgVirtServerBwmContract, slbCurCfgPeerPIPEntry=slbCurCfgPeerPIPEntry, slbNewCfgGroupRealServers=slbNewCfgGroupRealServers, slbCurCfgAllowHttpHc=slbCurCfgAllowHttpHc, synAttackCurCfgResponseInterval=synAttackCurCfgResponseInterval, slbCurCfgVirtServUrlchangInsrtPostn=slbCurCfgVirtServUrlchangInsrtPostn, slbNewCfgSyncCertsPassPhrase=slbNewCfgSyncCertsPassPhrase, gslbStatGroupTable=gslbStatGroupTable, slbCurCfgVirtServPathHidePathType=slbCurCfgVirtServPathHidePathType, gslbStatMaintNoServerRule=gslbStatMaintNoServerRule, connmngPerServStatsTable=connmngPerServStatsTable, slbCurSslCfgAuthPolPassinfoVersionName=slbCurSslCfgAuthPolPassinfoVersionName, slbVirtServicesInfoSvcIndex=slbVirtServicesInfoSvcIndex, httpStatSummCliusingKeepAliv=httpStatSummCliusingKeepAliv, slbCurCfgVirtServErrcodeHttpRedir=slbCurCfgVirtServErrcodeHttpRedir, slbCurNwclssCfgNetworkClassesEntry=slbCurNwclssCfgNetworkClassesEntry, fltNewCfgExtended8021pBitsMatch=fltNewCfgExtended8021pBitsMatch, slbCurCfgContRuleIndex=slbCurCfgContRuleIndex, fltCurCfgVlan=fltCurCfgVlan, slbStatVServerTable=slbStatVServerTable, slbCurAcclCfgCompOnOff=slbCurAcclCfgCompOnOff, slbNewSslCfgAuthPolCadepth=slbNewSslCfgAuthPolCadepth, slbCurCfgVirtServUrlchangStatus=slbCurCfgVirtServUrlchangStatus, gslbOperDnsSec=gslbOperDnsSec, fltNewCfgProtocol=fltNewCfgProtocol, gslbNewCfgEnhNetworkTableEntry=gslbNewCfgEnhNetworkTableEntry, gslbNewCfgRemSiteSecondaryIPVer=gslbNewCfgRemSiteSecondaryIPVer, httpTransSummResSerToAas=httpTransSummResSerToAas, slbCurNwclssCfgNetworkClassesName=slbCurNwclssCfgNetworkClassesName, slbCurSslCfgCertsExpirty=slbCurSslCfgCertsExpirty, slbCurCfgRealServerIdsvlan=slbCurCfgRealServerIdsvlan, slbStatSpAuxSessAllocFails=slbStatSpAuxSessAllocFails, fltCurCfgHdrHash=fltCurCfgHdrHash, slbCurSslCfgAuthPolPassinfoNbeforeName=slbCurSslCfgAuthPolPassinfoNbeforeName, slbCurCfgVirtServiceComppol=slbCurCfgVirtServiceComppol, slbCurSslCfgAuthPolValidityMethod=slbCurSslCfgAuthPolValidityMethod, cachStatPerServServRate=cachStatPerServServRate, slbNewCfgWaphcWTLSPort=slbNewCfgWaphcWTLSPort, pip6NewCfgTableEntry=pip6NewCfgTableEntry, httpStatSummRes1KbTo10Kb=httpStatSummRes1KbTo10Kb, slbNewCfgVirtServerLayer3Only=slbNewCfgVirtServerLayer3Only, gslbCurCfgEnhNetworkTableEntry=gslbCurCfgEnhNetworkTableEntry, slbCurAcclCfgCacheUrlRuleName=slbCurAcclCfgCacheUrlRuleName, slbNewCfgVirtServTextrepReplacTxt=slbNewCfgVirtServTextrepReplacTxt, fltCurCfgAction=fltCurCfgAction, slbCurCfgVirtServiceName=slbCurCfgVirtServiceName, slbNewCfgGroupBackupGroup=slbNewCfgGroupBackupGroup, slbCurCfgVirtServUrlchangPageName=slbCurCfgVirtServUrlchangPageName, slbRealServerInfoVlan=slbRealServerInfoVlan, slbCurAcclCfgCacheUrlListTable=slbCurAcclCfgCacheUrlListTable, slbNewSslCfgSSLPolNameIdIndex=slbNewSslCfgSSLPolNameIdIndex, slbStatMaintSymMatchCount=slbStatMaintSymMatchCount, slbCurCfgVirtServiceThirdPartIndex=slbCurCfgVirtServiceThirdPartIndex, slbNewCfgRealServerTimeOut=slbNewCfgRealServerTimeOut, fltNewCfgIpv6Nip=fltNewCfgIpv6Nip)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", gslbNewCfgRemSitePrimaryIp=gslbNewCfgRemSitePrimaryIp, slbCurCfgVirtServerBwmContract=slbCurCfgVirtServerBwmContract, pip6NewCfgRemoveVlan=pip6NewCfgRemoveVlan, slbCurCfgVirtServiceUrlHashLen=slbCurCfgVirtServiceUrlHashLen, slbCurCfgSlbSessAtkAllowlim=slbCurCfgSlbSessAtkAllowlim, fltCurCfgLayer7DenyUrlBmap=fltCurCfgLayer7DenyUrlBmap, sessMirrorSessionPresentErr=sessMirrorSessionPresentErr, radiusAcctReqFailsDMAFails=radiusAcctReqFailsDMAFails, slbCurCfgIpTcpCksum=slbCurCfgIpTcpCksum, slbStatSpMaintSymInvalidBuffers=slbStatSpMaintSymInvalidBuffers, waphcCfg=waphcCfg, slbStatVServerCookieInserts=slbStatVServerCookieInserts, radiusAcctReqWithFramedIp=radiusAcctReqWithFramedIp, slbOperConfigSync=slbOperConfigSync, slbCurCfgSubmac=slbCurCfgSubmac, gslbEnhNetworkCfg=gslbEnhNetworkCfg, slbCurCfgPortTable=slbCurCfgPortTable, slbCurSslCfgAuthPolValidityStaturi=slbCurSslCfgAuthPolValidityStaturi, slbNewAcclCfgCompBrwsListEntry=slbNewAcclCfgCompBrwsListEntry, slbNewCfgPeerIpAddr=slbNewCfgPeerIpAddr, slbCurCfgGroupVipHealthCheck=slbCurCfgGroupVipHealthCheck, slbCurCfgNewSlowage=slbCurCfgNewSlowage, slbStatSpRealServerHCOctetsHigh32=slbStatSpRealServerHCOctetsHigh32, fltNewCfgGotoFilter=fltNewCfgGotoFilter, slbCurCfgUrlBwmContract=slbCurCfgUrlBwmContract, slbNewCfgGroupRadiusAuthenString=slbNewCfgGroupRadiusAuthenString, slbNewAcclCfgCompPolName=slbNewAcclCfgCompPolName, pip6CurCfgTable=pip6CurCfgTable, gslbCurCfgGenRemSiteUpdateIntervalSeconds=gslbCurCfgGenRemSiteUpdateIntervalSeconds, gslbStatRuleTable=gslbStatRuleTable, slbNewCfgMetricInterval=slbNewCfgMetricInterval, slbStatMaintTerminatedSessions=slbStatMaintTerminatedSessions, gslbStatMaintInBadDns=gslbStatMaintInBadDns, gslbNewDnsResVipEntry=gslbNewDnsResVipEntry, slbCurCfgVirtualServerEntry=slbCurCfgVirtualServerEntry, httpPerServStatsResp11KbTo50Kb=httpPerServStatsResp11KbTo50Kb, slbNewAcclCfgCachePolDelete=slbNewAcclCfgCachePolDelete, fltCurCfgRedirGroup=fltCurCfgRedirGroup, slbNewCfgSmtportDelete=slbNewCfgSmtportDelete, slbNewCfgVirtServiceParseLength=slbNewCfgVirtServiceParseLength, slbNewCfgVirtServiceName=slbNewCfgVirtServiceName, slbCurCfgGroupMetric=slbCurCfgGroupMetric, slbCurCfgRealServPortIndex=slbCurCfgRealServPortIndex, gslbCurCfgDnsSecGlobalType=gslbCurCfgDnsSecGlobalType, slbCurAcclCfgCompPolTable=slbCurAcclCfgCompPolTable, portCfg=portCfg, realServerGroupCfg=realServerGroupCfg, layer4TableSize=layer4TableSize, gslbCurCfgRemSiteTable=gslbCurCfgRemSiteTable, gslbNewDnsSecKeyAlgo=gslbNewDnsSecKeyAlgo, slbStatMaintOOSFinPktDrops=slbStatMaintOOSFinPktDrops, slbNewCfgSapAslrIpAddr=slbNewCfgSapAslrIpAddr, synAttackNewCfgOnOff=synAttackNewCfgOnOff, slbCurCfgVirtServiceCoffset=slbCurCfgVirtServiceCoffset, synAttackNewCfgThreshhold=synAttackNewCfgThreshhold, slbNewSslCfgAuthPolPassinfoNafterName=slbNewSslCfgAuthPolPassinfoNafterName, slbNewCfgGroupSecBackupGroup=slbNewCfgGroupSecBackupGroup, snmphcNewCfgTableEntry=snmphcNewCfgTableEntry, gslbNewCfgDnsSecGlobalRollTm=gslbNewCfgDnsSecGlobalRollTm, fltCurCfgClientProxy=fltCurCfgClientProxy, slbNewCfgVirtServUrlchangPageName=slbNewCfgVirtServUrlchangPageName, gslbOperAddServerIp=gslbOperAddServerIp, fltNewCfgExtendedIpv6Dip=fltNewCfgExtendedIpv6Dip, slbNewSslCfgCertsDelete=slbNewSslCfgCertsDelete, slbStatWlmRegRep=slbStatWlmRegRep, gslbNewCfgGenRemSiteUpdateIntervalSeconds=gslbNewCfgGenRemSiteUpdateIntervalSeconds, fltNewCfgExtendedRemPatternMatchGroup=fltNewCfgExtendedRemPatternMatchGroup, slbCurCfgWaphcWTLSWSPPort=slbCurCfgWaphcWTLSWSPPort, slbNewCfgVirtServiceSecondPartIndex=slbNewCfgVirtServiceSecondPartIndex, slbNewCfgVmaDip=slbNewCfgVmaDip, slbCurSslCfgCertsType=slbCurSslCfgCertsType, slbCurCfgVirtServiceHttpRedir=slbCurCfgVirtServiceHttpRedir, gslbInfoVirtServerDname=gslbInfoVirtServerDname, fltCurCfgNbind=fltCurCfgNbind, slbNewCfgRealServerIndex=slbNewCfgRealServerIndex, slbNewCfgGroupIdsPort=slbNewCfgGroupIdsPort, slbCurCfgLinklbRealGroup=slbCurCfgLinklbRealGroup, radiusAcctDeleteSessionReqs=radiusAcctDeleteSessionReqs, slbGroupMaxIdsSize=slbGroupMaxIdsSize, slbCurCfgVirtServicesSecondPartTable=slbCurCfgVirtServicesSecondPartTable, slbNewCfgVirtServiceNoRtsp=slbNewCfgVirtServiceNoRtsp, slbNewCfgRealServerIpAddr=slbNewCfgRealServerIpAddr, slbNewNwclssCfgNetworkElementsNetType=slbNewNwclssCfgNetworkElementsNetType, slbCurCfgSapAslrName=slbCurCfgSapAslrName, gslbStatPers=gslbStatPers, slbNewSslCfgSSLPolBecipher=slbNewSslCfgSSLPolBecipher, hcsCurCfgTable=hcsCurCfgTable, gslbDnsSecImportExportImpKeyStatus=gslbDnsSecImportExportImpKeyStatus, slbNewCfgContRuleName=slbNewCfgContRuleName, slbNewCfgRealServPortEntry=slbNewCfgRealServPortEntry, cachStatSummRateNewCachedBytes=cachStatSummRateNewCachedBytes, hcsNewCfgAddNsendCmd=hcsNewCfgAddNsendCmd, compStatPerServTable=compStatPerServTable, slbCurCfgPortSlbState=slbCurCfgPortSlbState, fltNewCfgExtendedTableEntry=fltNewCfgExtendedTableEntry, slbCurCfgPortSlbRtsState=slbCurCfgPortSlbRtsState, slbCurAcclCfgCachePolTable=slbCurAcclCfgCachePolTable, slbCurSslCfgAuthPolFailurl=slbCurSslCfgAuthPolFailurl, compStatPerServAvgCompRatio=compStatPerServAvgCompRatio, sipTotalIncompleteMsgs=sipTotalIncompleteMsgs, slbCurCfgVirtServUrlchangPathInsrt=slbCurCfgVirtServUrlchangPathInsrt, slbCurCfgVirtServFifthPartIndex=slbCurCfgVirtServFifthPartIndex, gslbNewDnsSecKeyID=gslbNewDnsSecKeyID, httpPerServStatsVirtServiceIndex=httpPerServStatsVirtServiceIndex, gslbNewCfgProximityMask=gslbNewCfgProximityMask, gslbStatVirtServerIdx=gslbStatVirtServerIdx, slbNewCfgVirtualServerEntry=slbNewCfgVirtualServerEntry, slbCurCfgvStat=slbCurCfgvStat, gslbCurCfgGenTimeout=gslbCurCfgGenTimeout, slbNewCfgWaphcRcvContent=slbNewCfgWaphcRcvContent, slbWlmInfoIndex=slbWlmInfoIndex, slbNewSslCfgCertsPrpvinceName=slbNewSslCfgCertsPrpvinceName, slbCurCfgWaphcWTPPort=slbCurCfgWaphcWTPPort, slbCurCfgBuddyRealIndex=slbCurCfgBuddyRealIndex, slbOperGroupRealServIndex=slbOperGroupRealServIndex, slbNewCfgGroupSlowstart=slbNewCfgGroupSlowstart, sessMirrorTotalDeleteDataSessionMsgRx=sessMirrorTotalDeleteDataSessionMsgRx, slbNewCfgVirtServiceSSLpol=slbNewCfgVirtServiceSSLpol, slbNewCfgWlmIndex=slbNewCfgWlmIndex, slbCurCfgUrlBwmVirtServiceIndex=slbCurCfgUrlBwmVirtServiceIndex, fltCurCfgAclIpOption=fltCurCfgAclIpOption, fltCurCfgLayer7DenyState=fltCurCfgLayer7DenyState, slbOperHttpCachePurgeEntry=slbOperHttpCachePurgeEntry, httpPerServStatsAvgNumReqPerConn=httpPerServStatsAvgNumReqPerConn, sessMirrorTotalUpdateDataSessionMsgRx=sessMirrorTotalUpdateDataSessionMsgRx, fltNewCfgIpv6Proxy=fltNewCfgIpv6Proxy, radiusAcctStartReqs=radiusAcctStartReqs, sessMirrorTotalCreateDataSessionMsgRx=sessMirrorTotalCreateDataSessionMsgRx, slbCurAcclCfgCachePolEntry=slbCurAcclCfgCachePolEntry, cachStatSummObj51KTO100K=cachStatSummObj51KTO100K, hcsNewCfgRemLastCmd=hcsNewCfgRemLastCmd, connmngPerServStatsVirtServIndex=connmngPerServStatsVirtServIndex, slbCurCfgSapAslrServCert=slbCurCfgSapAslrServCert, gslbStatGroupHttpRedirs=gslbStatGroupHttpRedirs, slbStatSpMaintSymPacketsInFastPath=slbStatSpMaintSymPacketsInFastPath, layer4Configs=layer4Configs, slbSpStats=slbSpStats, slbPortSymantecState=slbPortSymantecState, slbNewCfgRealServIndex=slbNewCfgRealServIndex, sslSlbStatSessIdAllocFails=sslSlbStatSessIdAllocFails, slbCurNwclssCfgNetworkElementsFromIp=slbCurNwclssCfgNetworkElementsFromIp, slbNewSslCfgGroupsName=slbNewSslCfgGroupsName, compThrputCompRatio=compThrputCompRatio, gslbNewDnsSecZoneParentIPVer=gslbNewDnsSecZoneParentIPVer, sessMirrorSessionNotFoundErr=sessMirrorSessionNotFoundErr, slbNewSslCfgCertsKeySize=slbNewSslCfgCertsKeySize, slbCurCfgWlmState=slbCurCfgWlmState, slbCurCfgVirtServicesFourthPartEntry=slbCurCfgVirtServicesFourthPartEntry, slbCurAcclCfgCompPolAdminStatus=slbCurAcclCfgCompPolAdminStatus, connmngPerServStatsServConn=connmngPerServStatsServConn, gslbDnsSecImportExportImpKeyType=gslbDnsSecImportExportImpKeyType, slbCurNwclssCfgNetworkClassesTable=slbCurNwclssCfgNetworkClassesTable, slbNewCfgVirtServUrlchangHostName=slbNewCfgVirtServUrlchangHostName, gslbNewCfgRuleEndMin=gslbNewCfgRuleEndMin, slbCurCfgPortInterSwitchVlan=slbCurCfgPortInterSwitchVlan, slbStatGroupIndex=slbStatGroupIndex, slbPortFltState=slbPortFltState, slbCurSslCfgSSLPolAuthpol=slbCurSslCfgSSLPolAuthpol, slbCurCfgSmtportNum=slbCurCfgSmtportNum, fltNewCfgExtendedLayer7ParseAll=fltNewCfgExtendedLayer7ParseAll, fltNewCfgExtended8021pBitsValue=fltNewCfgExtended8021pBitsValue, slbStatSpMaintSymUdpPackets=slbStatSpMaintSymUdpPackets, sslOffPerServSessUsingTLS=sslOffPerServSessUsingTLS, gslbDnsResVipEmptyIndexesIndex=gslbDnsResVipEmptyIndexesIndex, slbStatVirtServerIndex=slbStatVirtServerIndex, slbCurSslCfgCertsOrganizationUnitName=slbCurSslCfgCertsOrganizationUnitName, cachStatPerServNewCachedBytes=cachStatPerServNewCachedBytes, ftpStats=ftpStats, slbCurCfgContRuleRealGrpNum=slbCurCfgContRuleRealGrpNum, gslbDnsSecImportExportSCPPassword=gslbDnsSecImportExportSCPPassword, gslbCurCfgRemSitePrimaryIp=gslbCurCfgRemSitePrimaryIp, httpPerServStatsResp1KbTo10Kb=httpPerServStatsResp1KbTo10Kb, pipNewCfgDelete=pipNewCfgDelete, slbOperRealServerEntry=slbOperRealServerEntry, acclCfg=acclCfg, slbNewAcclCfgCompPolTable=slbNewAcclCfgCompPolTable, gslbNewCfgRemSiteName=gslbNewCfgRemSiteName, fltNewCfgLayer7DenyUrlBmap=fltNewCfgLayer7DenyUrlBmap, slbCurSslCfgAuthPolPassinfoKeytypeName=slbCurSslCfgAuthPolPassinfoKeytypeName, sslOffPerReusedHandShake=sslOffPerReusedHandShake, pipNewCfgTableEntry=pipNewCfgTableEntry, fltCurCfgIpv6Nip=fltCurCfgIpv6Nip, slbVirtServicesInfoVport=slbVirtServicesInfoVport, pipNewCfgAddPort=pipNewCfgAddPort, slbNewAcclCfgCompUrlRuleCopy=slbNewAcclCfgCompUrlRuleCopy, slbNewCfgGroupHealthCheckUrl=slbNewCfgGroupHealthCheckUrl, slbCurAcclCfgCachePolNameIdIndex=slbCurAcclCfgCachePolNameIdIndex, slbNewCfgRealServerBackUp=slbNewCfgRealServerBackUp, slbNewCfgVirtServiceIndex=slbNewCfgVirtServiceIndex, slbNewSslCfgAuthPolEntry=slbNewSslCfgAuthPolEntry, slbNewAcclCfgCachePolStore=slbNewAcclCfgCachePolStore, gslbNewCfgGenMinco=gslbNewCfgGenMinco, slbNewCfgRealServerProxy=slbNewCfgRealServerProxy, slbNewCfgVirtServicePbindRport=slbNewCfgVirtServicePbindRport, slbStatSpRealServerTable=slbStatSpRealServerTable, slbNewCfgVirtServerDname=slbNewCfgVirtServerDname, slbSmtportTableAvaibleIndex=slbSmtportTableAvaibleIndex, slbNewCfgRealServerIdsvlan=slbNewCfgRealServerIdsvlan, gslbNewCfgMetricTableEntry=gslbNewCfgMetricTableEntry, slbCurCfgRealSerIndex=slbCurCfgRealSerIndex, slbNewCfgVirtServicesFourthPartEntry=slbNewCfgVirtServicesFourthPartEntry, slbCurCfgSapAslrSignature=slbCurCfgSapAslrSignature, slbOperHttpCachePurgeURL=slbOperHttpCachePurgeURL, gslbInfoDnsSecKeyID=gslbInfoDnsSecKeyID, slbNewAcclCfgCompPolURLList=slbNewAcclCfgCompPolURLList, gslbCurDnsSecZoneParentIPVer=gslbCurDnsSecZoneParentIPVer, snmphcCurCfgRcvContent=snmphcCurCfgRcvContent, gslbNewCfgMetricRemNetwork=gslbNewCfgMetricRemNetwork, tpcpDeleteSessReqsStats=tpcpDeleteSessReqsStats, slbNewSslCfgCertsName=slbNewSslCfgCertsName, slbPortTableMaxSize=slbPortTableMaxSize, slbNewCfgVirtServiceRedirect=slbNewCfgVirtServiceRedirect, slbCurCfgPeerEntry=slbCurCfgPeerEntry, gslbStatGeoSS=gslbStatGeoSS, cachStatPerServCachePolId=cachStatPerServCachePolId, slbCurCfgSyncSfo=slbCurCfgSyncSfo, slbNewSslCfgAuthPolValiditySecure=slbNewSslCfgAuthPolValiditySecure, slbNewCfgSyncSfo=slbNewCfgSyncSfo, slbCurSslCfgAuthPolCadepth=slbCurSslCfgAuthPolCadepth, gslbNewCfgEnhNetworkSourceIpV6=gslbNewCfgEnhNetworkSourceIpV6, slbNewSslCfgAuthPolPassinfoNbeforeName=slbNewSslCfgAuthPolPassinfoNbeforeName, wlmCfg=wlmCfg, fltNewCfgSecurityParseAll=fltNewCfgSecurityParseAll, sslOffPerServStatsTable=sslOffPerServStatsTable, sslOffPerServVirtServIndex=sslOffPerServVirtServIndex, slbNewCfgVirtServerVname=slbNewCfgVirtServerVname, slbStatMaintBackupServActs=slbStatMaintBackupServActs, slbCurCfgGroupIndex=slbCurCfgGroupIndex, gslbInfoDnsSecKey=gslbInfoDnsSecKey, slbNewCfgVirtServiceConnPooling=slbNewCfgVirtServiceConnPooling, slbCurCfgRealServRealPort=slbCurCfgRealServRealPort, slbCurCfgGroupRadiusAuthenString=slbCurCfgGroupRadiusAuthenString, slbCurCfgGroupSecBackupGroup=slbCurCfgGroupSecBackupGroup, dnsSlbStatInvalidQueries=dnsSlbStatInvalidQueries, slbNewCfgSapAslrTable=slbNewCfgSapAslrTable, gslbCurDnsResVipName=gslbCurDnsResVipName, snmphcNewCfgIndex=snmphcNewCfgIndex, slbCurCfgVirtServiceHname=slbCurCfgVirtServiceHname, gslbCurCfgGenSessUtilCap=gslbCurCfgGenSessUtilCap, cachStatPerServObj11KTO50K=cachStatPerServObj11KTO50K, fltCfgTableMaxSize=fltCfgTableMaxSize, slbStatRServerHCOctetsHigh32=slbStatRServerHCOctetsHigh32, fltNewCfgTimeWindow=fltNewCfgTimeWindow, fltNewCfgDbind=fltNewCfgDbind, gslbStatMaintVirtHits=gslbStatMaintVirtHits, slbOperGroupRealServerEntry=slbOperGroupRealServerEntry, slbNewSslCfgAuthPolAdminStatus=slbNewSslCfgAuthPolAdminStatus, slbCurCfgVirtServiceAction=slbCurCfgVirtServiceAction, slbNewCfgContRuleEntry=slbNewCfgContRuleEntry, gslbNewDnsSecKeyUseCount=gslbNewDnsSecKeyUseCount, gslbNewCfgGenUsern=gslbNewCfgGenUsern, slbNewCfgRealServerWeight=slbNewCfgRealServerWeight, tpcpAddSessReqs=tpcpAddSessReqs, gslbDnsSecImportExportSCPUserName=gslbDnsSecImportExportSCPUserName)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", slbRealServerInfoEntry=slbRealServerInfoEntry, slbCurAcclCfgCacheUrlRuleURL=slbCurAcclCfgCacheUrlRuleURL, fltNewCfgExtendedRtpBwmContract=fltNewCfgExtendedRtpBwmContract, slbCurSslCfgAuthPolValidityVchain=slbCurSslCfgAuthPolValidityVchain, cachStatPerServRateNewCachedBytes=cachStatPerServRateNewCachedBytes, slbCurCfgWaphcConnPDU=slbCurCfgWaphcConnPDU, fltNewCfgAclIpTosMask=fltNewCfgAclIpTosMask, fltNewCfgNbind=fltNewCfgNbind, gslbStatMaintInGoodSiteUpdates=gslbStatMaintInGoodSiteUpdates, slbStatSpMaintIpFragTableFull=slbStatSpMaintIpFragTableFull, slbNewCfgVirtServiceUrlHashLen=slbNewCfgVirtServiceUrlHashLen, gslbInfoDnsSecKeyStatus=gslbInfoDnsSecKeyStatus, gslbNewCfgRuleEndHour=gslbNewCfgRuleEndHour, gslbNewCfgGenEncrypt=gslbNewCfgGenEncrypt, gslbNewDnsSecKeySize=gslbNewDnsSecKeySize, slbPortFitersAdded=slbPortFitersAdded, slbCurCfgWlmGroups=slbCurCfgWlmGroups, caching=caching, fltCurCfgPortTableEntry=fltCurCfgPortTableEntry, slbStatWlmMembStateRep=slbStatWlmMembStateRep, slbNewCfgRealServPortTable=slbNewCfgRealServPortTable, slbNewSslCfgSSLPolPassInfoVersionName=slbNewSslCfgSSLPolPassInfoVersionName, gslbCurCfgDnsSecGlobalNsec3HashIterations=gslbCurCfgDnsSecGlobalNsec3HashIterations, compStatPerServCompPolId=compStatPerServCompPolId, synAttackCurCfgInterval=synAttackCurCfgInterval, gslbNewCfgRemSiteTableEntry=gslbNewCfgRemSiteTableEntry, slbNewCfgGroupMaxThreshold=slbNewCfgGroupMaxThreshold, fltNewCfgUrlBwmTable=fltNewCfgUrlBwmTable, slbCurCfgVirtServiceRtspUrlParse=slbCurCfgVirtServiceRtspUrlParse, slbRealServerRportInfoGroup=slbRealServerRportInfoGroup, gslbEnhNetworkTableMaxSize=gslbEnhNetworkTableMaxSize, slbStatSpMaintLandAttacks=slbStatSpMaintLandAttacks, slbNewCfgLinklbRealGroup=slbNewCfgLinklbRealGroup, slbCurSslCfgAuthPolNameIdIndex=slbCurSslCfgAuthPolNameIdIndex, fltNewCfgRangeLowSrcPort=fltNewCfgRangeLowSrcPort, slbCurCfgVirtServerVname=slbCurCfgVirtServerVname, gslbStatRuleResponse=gslbStatRuleResponse, slbCurCfgVirtServiceEgressPip=slbCurCfgVirtServiceEgressPip, cachRuleNumOfBytesCac=cachRuleNumOfBytesCac, fltCurCfgUrlBwmFltIndex=fltCurCfgUrlBwmFltIndex, fltNewCfgAclTcpAck=fltNewCfgAclTcpAck, gslbDnsSecImportExportSCPFileName=gslbDnsSecImportExportSCPFileName, slbNewAcclCfgCompUrlRuleDomainM=slbNewAcclCfgCompUrlRuleDomainM, slbNewCfgWlmState=slbNewCfgWlmState, fltCurCfgRadiusWapPersist=fltCurCfgRadiusWapPersist, gslbInfoVirtServerCpuUtil=gslbInfoVirtServerCpuUtil, slbNewAcclCfgCompUrlListEntry=slbNewAcclCfgCompUrlListEntry, synAttackNewCfgResponseInterval=synAttackNewCfgResponseInterval, slbCurCfgGroupRealThreshold=slbCurCfgGroupRealThreshold, gslbOperAddDomain=gslbOperAddDomain, slbCurSslCfgSSLPolPassInfoVersionFlag=slbCurSslCfgSSLPolPassInfoVersionFlag, pipCurCfgTableEntry=pipCurCfgTableEntry, slbCurCfgVirtServicesFifthPartTable=slbCurCfgVirtServicesFifthPartTable, slbStatSpFltIndex=slbStatSpFltIndex, slbNewCfgVirtServiceServCert=slbNewCfgVirtServiceServCert, slbNewCfgSapAslrServCert=slbNewCfgSapAslrServCert, slbStatMaintSymValidSegments=slbStatMaintSymValidSegments, slbStatSpMaintSymSegAllocFails=slbStatSpMaintSymSegAllocFails, slbNewSslCfgGroupsDefaultCert=slbNewSslCfgGroupsDefaultCert, slbCurAcclCfgCacheUrlListName=slbCurAcclCfgCacheUrlListName, slbCurCfgRealServerOid=slbCurCfgRealServerOid, slbCurSslCfgAuthPolPassinfoCertFlag=slbCurSslCfgAuthPolPassinfoCertFlag, slbStatGroupHCOctets=slbStatGroupHCOctets, slbCurSslCfgSSLPolPassInfoCipherName=slbCurSslCfgSSLPolPassInfoCipherName, synAtkResponseInterval=synAtkResponseInterval, slbNewCfgRealServerExcludeStr=slbNewCfgRealServerExcludeStr, fltNewCfgUrlReverseBwmContract=fltNewCfgUrlReverseBwmContract, gslbCurDnsSecKeyTable=gslbCurDnsSecKeyTable, gslbDnsSecImportExportComponentType=gslbDnsSecImportExportComponentType, slbCurAcclCfgCompPolEntry=slbCurAcclCfgCompPolEntry, gslbOperAddSrcIp6=gslbOperAddSrcIp6, radiusAcctReqsStats=radiusAcctReqsStats, gslbStats=gslbStats, slbCurCfgPeerIndex=slbCurCfgPeerIndex, slbCurSslCfgCertsEMail=slbCurSslCfgCertsEMail, slbStatVServerEntry=slbStatVServerEntry, slbNewCfgVmaSrcPort=slbNewCfgVmaSrcPort, slbNewAcclCfgCachePolMaxSize=slbNewAcclCfgCachePolMaxSize, slbNewCfgGroupBackup=slbNewCfgGroupBackup, slbNewCfgSlbSessAtkIntrval=slbNewCfgSlbSessAtkIntrval, fltNewCfgDstMac=fltNewCfgDstMac, slbStatAuxSessIndex=slbStatAuxSessIndex, compUrlRuleSizeBefComp=compUrlRuleSizeBefComp, compPerUrlRuleStatsTable=compPerUrlRuleStatsTable, slbNewCfgVirtServicesThirdPartTable=slbNewCfgVirtServicesThirdPartTable, slbNewCfgDrecordEntryState=slbNewCfgDrecordEntryState, slbCurSslCfgCertsCountryName=slbCurSslCfgCertsCountryName, slbStatMaintNonTcpFrames=slbStatMaintNonTcpFrames, slbCurCfgSlowage=slbCurCfgSlowage, slbCurAcclCfgCacheUrlListIdIndex=slbCurAcclCfgCacheUrlListIdIndex, slbCurAcclCfgCompUrlListEntry=slbCurAcclCfgCompUrlListEntry, slbWlmInfoState=slbWlmInfoState, slbVirtServicesInfoTable=slbVirtServicesInfoTable, slbNewCfgPeerTable=slbNewCfgPeerTable, slbCurCfgVirtServiceSecondPartIndex=slbCurCfgVirtServiceSecondPartIndex, slbCurCfgDrecordIndex=slbCurCfgDrecordIndex, gslbCurCfgDnsSecGlobalSMPTServerUserName=gslbCurCfgDnsSecGlobalSMPTServerUserName, slbCurCfgWaphcWTLSPort=slbCurCfgWaphcWTLSPort, slbNewAcclCfgCacheUrlListAdminStatus=slbNewAcclCfgCacheUrlListAdminStatus, compStatPerServVirtServIndex=compStatPerServVirtServIndex, gslbCurCfgRuleState=gslbCurCfgRuleState, slbNewCfgPeerIndex=slbNewCfgPeerIndex, slbCurNwclssCfgNetworkElementsFromIpv6Addr=slbCurNwclssCfgNetworkElementsFromIpv6Addr, compBrowRuleListNumOfObj=compBrowRuleListNumOfObj, slbOperHttpCachePurgeServerIndex=slbOperHttpCachePurgeServerIndex, slbCurAcclCfgCompBrwsRuleContentM=slbCurAcclCfgCompBrwsRuleContentM, slbStatGroupTotalSessions=slbStatGroupTotalSessions, slbNewSslCfgAuthPolPassinfoCharset=slbNewSslCfgAuthPolPassinfoCharset, fltNewCfgTcpRateMaxConn=fltNewCfgTcpRateMaxConn, fltNewCfgRemPatternMatchGroup=fltNewCfgRemPatternMatchGroup, gslbNewCfgEnhNetworkRemRealServer=gslbNewCfgEnhNetworkRemRealServer, gslbNewCfgRemSiteIndx=gslbNewCfgRemSiteIndx, slbCurCfgRealServerFastHealthCheck=slbCurCfgRealServerFastHealthCheck, fltNewCfgAclTcpFin=fltNewCfgAclTcpFin, slbNewCfgVirtServiceLdapreset=slbNewCfgVirtServiceLdapreset, sslSlbStatHighestSessions=sslSlbStatHighestSessions, slbCurAcclCfgCacheUrlRuleURLm=slbCurAcclCfgCacheUrlRuleURLm, slbCurCfgVirtServiceConnmgtTimeout=slbCurCfgVirtServiceConnmgtTimeout, slbCurCfgVirtServiceLdapreset=slbCurCfgVirtServiceLdapreset, gslbNewCfgEnhNetworkIndx=gslbNewCfgEnhNetworkIndx, fltCurCfgUrlBwmTable=fltCurCfgUrlBwmTable, slbCurAcclCfgCompBrwsRuleTable=slbCurAcclCfgCompBrwsRuleTable, slbNewNwclssCfgNetworkClassesEntry=slbNewNwclssCfgNetworkClassesEntry, slbCurCfgVirtServiceWts=slbCurCfgVirtServiceWts, pipNewCfgRemoveVlan=pipNewCfgRemoveVlan, compBrowRuleListIndex=compBrowRuleListIndex, slbCurAcclCfgCacheUrlRuleIndex=slbCurAcclCfgCacheUrlRuleIndex, slbCurCfgmStat=slbCurCfgmStat, gslbCfg=gslbCfg, slbCurCfgTpcp=slbCurCfgTpcp, slbNewCfgImask=slbNewCfgImask, fltNewCfg8021pBitsValue=fltNewCfg8021pBitsValue, fltNewCfgExtendedL7SipFilt=fltNewCfgExtendedL7SipFilt, slbNewCfgPeerState=slbNewCfgPeerState, slbNewNwclssCfgNetworkClassesTable=slbNewNwclssCfgNetworkClassesTable, slbCurAcclCfgCacheUrlRuleDomainM=slbCurAcclCfgCacheUrlRuleDomainM, fltCurCfgDstIp=fltCurCfgDstIp, slbNewCfgVirtServiceZerowinSize=slbNewCfgVirtServiceZerowinSize, slbCurCfgWaphcWTPSndContent=slbCurCfgWaphcWTPSndContent, gslbNewCfgRemSitePrimaryIp6=gslbNewCfgRemSitePrimaryIp6, connmngStatSummMulRatio=connmngStatSummMulRatio, slbStatSpMaintTable=slbStatSpMaintTable, fltCurCfgLinklb=fltCurCfgLinklb, gslbCurCfgRuleIndx=gslbCurCfgRuleIndx, slbNewCfgWaphcWSPPort=slbNewCfgWaphcWSPPort, slbNewCfgRealServerLdapwr=slbNewCfgRealServerLdapwr, slbCurCfgWaphcWTPOffset=slbCurCfgWaphcWTPOffset, slbNewCfgDrecordIndex=slbNewCfgDrecordIndex, slbCurCfgSapAslrSessionInfo=slbCurCfgSapAslrSessionInfo, compUrlRuleListCompRatio=compUrlRuleListCompRatio, slbCurCfgGroupRealServerTable=slbCurCfgGroupRealServerTable, slbCurNwclssCfgNetworkElementsIp=slbCurNwclssCfgNetworkElementsIp, gslbCurCfgProximityTime=gslbCurCfgProximityTime, cachStatPerServNewCachedObj=cachStatPerServNewCachedObj, slbNewAcclCfgCacheUrlListDel=slbNewAcclCfgCacheUrlListDel, slbNewCfgGroupRemoveServer=slbNewCfgGroupRemoveServer, slbCurCfgVirtServiceDirServerRtn=slbCurCfgVirtServiceDirServerRtn, fltNewCfgUrlBwmContract=fltNewCfgUrlBwmContract, slbNewCfgRealServerFastHealthCheck=slbNewCfgRealServerFastHealthCheck, gslbNewDnsResVipStatus=gslbNewDnsResVipStatus, slbNewAcclCfgCompBrwsListIdIndex=slbNewAcclCfgCompBrwsListIdIndex, slbCurCfgMnet=slbCurCfgMnet, slbNewCfgVirtServiceTimeOut=slbNewCfgVirtServiceTimeOut, gslbCurCfgRuleStartMin=gslbCurCfgRuleStartMin, slbStatAuxSessMaxConn=slbStatAuxSessMaxConn, fltCurCfgHdrName=fltCurCfgHdrName, slbStatMaintSymPacketsIn=slbStatMaintSymPacketsIn, slbCurSslCfgAuthPolPassinfoIssuerFlag=slbCurSslCfgAuthPolPassinfoIssuerFlag, slbStatMaintIp6PktDropped=slbStatMaintIp6PktDropped, slbCurAcclCfgCompUrlRuleTable=slbCurAcclCfgCompUrlRuleTable, slbCurCfgSyncVrrp=slbCurCfgSyncVrrp, gslbCurCfgDnsSecGlobalRollTm=gslbCurCfgDnsSecGlobalRollTm, fltCurCfgAclTcpRst=fltCurCfgAclTcpRst, gslbDnsSecKeyCfg=gslbDnsSecKeyCfg, dnsSlbStatTCPQueries=dnsSlbStatTCPQueries, gslbCurCfgRuleMetricIndx=gslbCurCfgRuleMetricIndx, fltCurCfgHttpRedirMappingEntry=fltCurCfgHttpRedirMappingEntry, cachRuleIndex=cachRuleIndex, hcsNewCfgDeleteScript=hcsNewCfgDeleteScript, slbNewCfgGroupAddServer=slbNewCfgGroupAddServer, slbNewCfgContRuleTable=slbNewCfgContRuleTable, gslbNewCfgRemSiteSecondaryIp6=gslbNewCfgRemSiteSecondaryIp6, slbStatVirtServiceIndex=slbStatVirtServiceIndex, slbStatSpMaintCurBindings64Seconds=slbStatSpMaintCurBindings64Seconds, gslbStatGeoCA=gslbStatGeoCA, fltNewCfgName=fltNewCfgName, slbCurCfgWlmTable=slbCurCfgWlmTable, slbNewCfgClsRst=slbNewCfgClsRst, slbNewCfgContRuleState=slbNewCfgContRuleState, gslbCurCfgMetricTable=gslbCurCfgMetricTable, gslbStatRuleAlways=gslbStatRuleAlways, slbNewCfgGroupPhashMask=slbNewCfgGroupPhashMask, gslbCurDnsSecZoneEntry=gslbCurDnsSecZoneEntry, fltNewCfgAclTcpRst=fltNewCfgAclTcpRst, slbNewCfgSapAslrSignature=slbNewCfgSapAslrSignature, slbNewSslCfgCertsDefaultsCountryName=slbNewSslCfgCertsDefaultsCountryName, slbCurCfgSapAslrLastAct=slbCurCfgSapAslrLastAct, udpLimitStatClientEntries=udpLimitStatClientEntries, slbNewCfgContVirtServIndex=slbNewCfgContVirtServIndex, slbCurCfgVirtServTextrepMatchText=slbCurCfgVirtServTextrepMatchText, fltNewCfgExtendedNatMcastVlan=fltNewCfgExtendedNatMcastVlan, gslbNewCfgEnhNetworkVer=gslbNewCfgEnhNetworkVer, sapStats=sapStats, slbSessionInfoType=slbSessionInfoType, virtualServerCfg=virtualServerCfg, slbNewCfgVirtServiceComppol=slbNewCfgVirtServiceComppol, slbNewCfgVirtServiceDelete=slbNewCfgVirtServiceDelete, slbNewCfgFastage=slbNewCfgFastage, fltNewCfgExtendedPatternMatch=fltNewCfgExtendedPatternMatch, gslbMetricTableMaxSize=gslbMetricTableMaxSize, httpPerServStatsHttp10VsHttp11Ratio=httpPerServStatsHttp10VsHttp11Ratio, slbCurAcclCfgCachePolQuery=slbCurAcclCfgCachePolQuery, slbCurNwclssCfgNetworkElementsMatchType=slbCurNwclssCfgNetworkElementsMatchType, gslbCurCfgGenSourceIpNetmask=gslbCurCfgGenSourceIpNetmask, fltCurCfgIpVer=fltCurCfgIpVer, slbNewCfgContRuleCopy=slbNewCfgContRuleCopy, sessMirrorSessionTableFullErr=sessMirrorSessionTableFullErr, slbCurCfgRealServGroupIndex=slbCurCfgRealServGroupIndex, compBrowRuleSizeBefComp=compBrowRuleSizeBefComp, slbNewCfgPortVlanBmap=slbNewCfgPortVlanBmap, gslbStatRemRealServerDnsHandoffs=gslbStatRemRealServerDnsHandoffs, slbNewCfgVirtServerIpVer=slbNewCfgVirtServerIpVer, gslbNewCfgMetricAddNetwork=gslbNewCfgMetricAddNetwork, slbWlmInfoPort=slbWlmInfoPort, slbCurCfgSapAslrPortNum=slbCurCfgSapAslrPortNum, gslbCurCfgRuleTable=gslbCurCfgRuleTable, fltNewCfgProxyIp=fltNewCfgProxyIp, fltCurCfgCache=fltCurCfgCache, slbCurSslCfgAuthPolPassinfoNafterName=slbCurSslCfgAuthPolPassinfoNafterName, fltCurCfgLayer7ParseAll=fltCurCfgLayer7ParseAll, slbNewCfgAuxRipHash=slbNewCfgAuxRipHash, slbCurCfgVirtServiceSip=slbCurCfgVirtServiceSip, slbNewCfgVirtServiceFourthPartIndex=slbNewCfgVirtServiceFourthPartIndex, slbNewCfgPortSlbPipState=slbNewCfgPortSlbPipState, gslbNewDnsSecKeyTable=gslbNewDnsSecKeyTable, nwclssCfg=nwclssCfg, gslbNewDnsResVipIndex2=gslbNewDnsResVipIndex2, gslbStatRuleTotal=gslbStatRuleTotal, cachStatPerServVirtServPort=cachStatPerServVirtServPort, slbCurCfgSapAslrState=slbCurCfgSapAslrState, cachStatSummNewCachedObj=cachStatSummNewCachedObj, slbNewCfgVirtServiceCExpire=slbNewCfgVirtServiceCExpire, gslbCurDnsResVipIPVer=gslbCurDnsResVipIPVer, slbNewCfgVirtServiceHttpmodList=slbNewCfgVirtServiceHttpmodList, fltCurCfgPatternMatchGroupBmap=fltCurCfgPatternMatchGroupBmap, compBrowRuleListCompRatio=compBrowRuleListCompRatio, sslOffReusedHandShake=sslOffReusedHandShake, slbNewSslCfgCertsStatus=slbNewSslCfgCertsStatus, snmphcNewCfgInvert=snmphcNewCfgInvert, gslbCurCfgDnsSecGlobalNsec3SaltLen=gslbCurCfgDnsSecGlobalNsec3SaltLen, slbStatWlmLbStateReq=slbStatWlmLbStateReq, slbNewSslCfgSSLPolTable=slbNewSslCfgSSLPolTable, slbCurCfgGroupIdsPort=slbCurCfgGroupIdsPort, gslbInfoRemSitePrimaryIp=gslbInfoRemSitePrimaryIp)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", snmphcTableMaxSize=snmphcTableMaxSize, slbCurCfgBuddyTable=slbCurCfgBuddyTable, slbNewSslCfgAuthPolPassinfoCertFormat=slbNewSslCfgAuthPolPassinfoCertFormat, slbCurCfgVirtServiceFifthPartIndex=slbCurCfgVirtServiceFifthPartIndex, gslbCurCfgMetricIndx=gslbCurCfgMetricIndx, slbWlmInfoIpAddr=slbWlmInfoIpAddr, slbCurCfgWaphcSndContent=slbCurCfgWaphcSndContent, slbNewSslCfgAuthPolPassinfoCertFlag=slbNewSslCfgAuthPolPassinfoCertFlag, slbStatMaintIpFragDiscards=slbStatMaintIpFragDiscards, slbCurCfgVirtServiceCExpire=slbCurCfgVirtServiceCExpire, slbCurAcclCfgCompPolName=slbCurAcclCfgCompPolName, slbNewSslCfgAuthPolValidityAlgorthmName=slbNewSslCfgAuthPolValidityAlgorthmName, gslbNewCfgDnsSecGlobalSMPTServerUserName=gslbNewCfgDnsSecGlobalSMPTServerUserName, gslbStatRuleGeographical=gslbStatRuleGeographical, slbNewCfgGroupRealServerTable=slbNewCfgGroupRealServerTable, slbNewCfgRealServerSubdmac=slbNewCfgRealServerSubdmac, slbCurCfgVirtServerAvail=slbCurCfgVirtServerAvail, slbStatSpMaintSymSessions=slbStatSpMaintSymSessions, gslbInfoRemRealServerIpAddr=gslbInfoRemRealServerIpAddr, slbWlmTableMaxSize=slbWlmTableMaxSize, slbNewAcclCfgCacheUrlRuleIndex=slbNewAcclCfgCacheUrlRuleIndex, slbCurCfgVirtServErrcode=slbCurCfgVirtServErrcode, slbCurSslCfgAuthPolValiditySecure=slbCurSslCfgAuthPolValiditySecure, slbNewSslCfgSSLPolPassInfoFrontend=slbNewSslCfgSSLPolPassInfoFrontend, fltNewCfgLayer7DenyState=fltNewCfgLayer7DenyState, slbCurCfgLdapVersion=slbCurCfgLdapVersion, gslbCurCfgGenNoResp=gslbCurCfgGenNoResp, sslPol=sslPol, slbNewCfgVirtServiceConnmgtStatus=slbNewCfgVirtServiceConnmgtStatus, compUrlRuleListId=compUrlRuleListId, gslbNewDnsSecZoneZSK2=gslbNewDnsSecZoneZSK2, slbNewAcclCfgCompPolEntry=slbNewAcclCfgCompPolEntry, slbCurSslCfgAuthPolPassinfoComp2424=slbCurSslCfgAuthPolPassinfoComp2424, slbNewCfgBuddyService=slbNewCfgBuddyService, slbCurCfgClearBackup=slbCurCfgClearBackup, slbStatMaintOverflowServActs=slbStatMaintOverflowServActs, slbCurSslCfgSSLPolIntermcaChainType=slbCurSslCfgSSLPolIntermcaChainType, slbCurCfgVirtServiceSoftGrid=slbCurCfgVirtServiceSoftGrid, gslbCurDnsSecZoneTable=gslbCurDnsSecZoneTable, slbCurAcclCfgCompPolBrwsList=slbCurAcclCfgCompPolBrwsList, slbNewCfgDrecordVirtRealMappingEntry=slbNewCfgDrecordVirtRealMappingEntry, gslbNewCfgEnhNetworkAddRemRealServer=gslbNewCfgEnhNetworkAddRemRealServer, gslbStatRemSiteOutUpdates=gslbStatRemSiteOutUpdates, gslbStatMaintOutSiteUpdates=gslbStatMaintOutSiteUpdates, hcsNewCfgAddExpectCmd=hcsNewCfgAddExpectCmd, slbCurCfgSubdmac=slbCurCfgSubdmac, slbStatSpMaintRealServerNoAvails=slbStatSpMaintRealServerNoAvails, httpPerServStatsResp51KbTo100Kb=httpPerServStatsResp51KbTo100Kb, slbCurCfgWaphcWSPPort=slbCurCfgWaphcWSPPort, slbCurSslCfgSSLPolNameIdIndex=slbCurSslCfgSSLPolNameIdIndex, compUrlRuleSizeAftComp=compUrlRuleSizeAftComp, gslbCurDnsSecKeyTTL=gslbCurDnsSecKeyTTL, slbCurAcclCfgCompBrwsListTable=slbCurAcclCfgCompBrwsListTable, tpcpDeleteSessReqs=tpcpDeleteSessReqs, gslbNewCfgGenState=gslbNewCfgGenState, slbNewCfgPortSlbAddFilter=slbNewCfgPortSlbAddFilter, fltCurCfgUrlBwmContract=fltCurCfgUrlBwmContract, slbCurCfgDrecordTable=slbCurCfgDrecordTable, slbCurCfgVirtServUrlchangPathMatch=slbCurCfgVirtServUrlchangPathMatch, sessMirrorTotalDeleteDataSessionMsgTx=sessMirrorTotalDeleteDataSessionMsgTx, slbNewAcclCfgCompOnOff=slbNewAcclCfgCompOnOff, slbStatSpRealServerHCOctetsLow32=slbStatSpRealServerHCOctetsLow32, slbNewSslCfgSSLPolConvert=slbNewSslCfgSSLPolConvert, fltCfgHttpRedirMappingTableMaxSize=fltCfgHttpRedirMappingTableMaxSize, slbNewSslCfgSSLPolPassInfoVersionFlag=slbNewSslCfgSSLPolPassInfoVersionFlag, slbCurCfgUrlBwmEntry=slbCurCfgUrlBwmEntry, slbStatSapAslrDeviceUpdates=slbStatSapAslrDeviceUpdates, slbCurCfgVirtServiceFourthPartIndex=slbCurCfgVirtServiceFourthPartIndex, fltCurCfgSipParsing=fltCurCfgSipParsing, slbNewCfgVirtServErrcodeNew=slbNewCfgVirtServErrcodeNew, slbCurCfgRadiusAuthenString=slbCurCfgRadiusAuthenString, hcsNewCfgAddLongBsendCmd=hcsNewCfgAddLongBsendCmd, slbRealServerInfoState=slbRealServerInfoState, slbNewCfgWaphcSndPDU=slbNewCfgWaphcSndPDU, slbStatMaintCurBindings64Seconds=slbStatMaintCurBindings64Seconds, slbNewCfgVirtServUrlchangPathMatch=slbNewCfgVirtServUrlchangPathMatch, curCfgFilterTableSize=curCfgFilterTableSize, slbNewCfgVirtServSecondPartIndex=slbNewCfgVirtServSecondPartIndex, ftpStatSlbParseIndex=ftpStatSlbParseIndex, slbNewCfgVirtServicesThirdPartEntry=slbNewCfgVirtServicesThirdPartEntry, slbStatVServerHighestSessions=slbStatVServerHighestSessions, slbCurAcclCfgCompBrwsRuleListIdIndex=slbCurAcclCfgCompBrwsRuleListIdIndex, slbCurCfgVirtServUrlchangHostName=slbCurCfgVirtServUrlchangHostName, hcsCurCfgScriptIndex=hcsCurCfgScriptIndex, slbNewCfgVirtServiceCloaksrv=slbNewCfgVirtServiceCloaksrv, slbCurAcclCfgCompUrlRuleListIdIndex=slbCurAcclCfgCompUrlRuleListIdIndex, fltNewCfgSessionMirror=fltNewCfgSessionMirror, fltCurCfgDstIpMask=fltCurCfgDstIpMask, gslbInfoVirtServerSessUtil=gslbInfoVirtServerSessUtil, sslOffNewHandShake=sslOffNewHandShake, slbNewCfgVirtServerWeight=slbNewCfgVirtServerWeight, slbNewCfgPeerDelete=slbNewCfgPeerDelete, gslbNewCfgEnhNetworkAddVirtServer=gslbNewCfgEnhNetworkAddVirtServer, fltNewCfgParseChn=fltNewCfgParseChn, gslbCurCfgGenHttpRedirect=gslbCurCfgGenHttpRedirect, gslbNewDnsSecZoneDelete=gslbNewDnsSecZoneDelete, slbNewCfgVirtServiceCookieMode=slbNewCfgVirtServiceCookieMode, fltNewCfgInvert=fltNewCfgInvert, slbCurSslCfgSSLPolConvert=slbCurSslCfgSSLPolConvert, radiusAcctReqs=radiusAcctReqs, fltNewCfgExtendedIpv6Dprefix=fltNewCfgExtendedIpv6Dprefix, slbNewCfgVirtServiceFtpParsing=slbNewCfgVirtServiceFtpParsing, hcsNewCfgAddWaitCmd=hcsNewCfgAddWaitCmd, slbStatWlmDeregReq=slbStatWlmDeregReq, gslbInfoRemRealServerName=gslbInfoRemRealServerName, slbStatVServerIpAddress=slbStatVServerIpAddress, slbCurCfgVirtServUrlchangNewPgName=slbCurCfgVirtServUrlchangNewPgName, slbCurCfgNmask=slbCurCfgNmask, wapStats=wapStats, fltNewCfgIpv6Sip=fltNewCfgIpv6Sip, slbStatSpMaintSymIcmpPackets=slbStatSpMaintSymIcmpPackets, slbNewSslCfgSSLPolName=slbNewSslCfgSSLPolName, slbNewCfgVirtServiceRealGroup=slbNewCfgVirtServiceRealGroup, slbStatSpRealServerEntry=slbStatSpRealServerEntry, gslbNewCfgGenHttpRedirect=gslbNewCfgGenHttpRedirect, pipCurCfgPip=pipCurCfgPip, slbNewCfgVirtServiceUhash=slbNewCfgVirtServiceUhash, slbNewSslCfgSSLPolCipherName=slbNewSslCfgSSLPolCipherName, fltCurCfgAclTcpPsh=fltCurCfgAclTcpPsh, gslbNewCfgRemSiteUpdate=gslbNewCfgRemSiteUpdate, sessMirrorNoPortErr=sessMirrorNoPortErr, connmngPerServStatsVirtServPort=connmngPerServStatsVirtServPort, slbCurSslCfgCertsDefaultsProvinceName=slbCurSslCfgCertsDefaultsProvinceName, slbCurCfgVirtServErrcodeStatus=slbCurCfgVirtServErrcodeStatus, slbNewCfgContRuleRedirection=slbNewCfgContRuleRedirection, slbStatSpMaintEntry=slbStatSpMaintEntry, gslbStatVirtDnsDirect=gslbStatVirtDnsDirect, gslbOperQueryDomain=gslbOperQueryDomain, slbNewCfgpVlanTag=slbNewCfgpVlanTag, slbCurAcclCfgCompUrlRuleURL=slbCurAcclCfgCompUrlRuleURL, slbCurCfgVirtServiceCkRebind=slbCurCfgVirtServiceCkRebind, httpPerServStatsReqCliToAas=httpPerServStatsReqCliToAas, slbCurCfgUrlBwmTable=slbCurCfgUrlBwmTable, dnsSlbStatUDPQueries=dnsSlbStatUDPQueries, sslOffPerServSessUsingSSLv2=sslOffPerServSessUsingSSLv2, slbCurCfgWaphcWTPConnContent=slbCurCfgWaphcWTPConnContent, gslbStatMaintLocalSitePers=gslbStatMaintLocalSitePers, slbNewCfgSmtportNum=slbNewCfgSmtportNum, slbStatMaintSymTcpPackets=slbStatMaintSymTcpPackets, slbNewCfgAllowHttpHc=slbNewCfgAllowHttpHc, gslbOperDnsSecImmediateRollover=gslbOperDnsSecImmediateRollover, gslbCurDnsSecKeyRollOverPeriod=gslbCurDnsSecKeyRollOverPeriod, newCfgFilterTableSize=newCfgFilterTableSize, gslbCurCfgRemSiteSecondaryIPVer=gslbCurCfgRemSiteSecondaryIPVer, fltNewCfgRtpBwmContract=fltNewCfgRtpBwmContract, slbNewCfgContRuleGotoRuleNum=slbNewCfgContRuleGotoRuleNum, cachPerServStatTable=cachPerServStatTable, slbStatSpMaintSymFetchErrors=slbStatSpMaintSymFetchErrors, gslbCurCfgMetricNetworkBmap=gslbCurCfgMetricNetworkBmap, slbNewCfgVirtServUrlchangPageType=slbNewCfgVirtServUrlchangPageType, dnsSlbStatInternalErrors=dnsSlbStatInternalErrors, slbNewSslCfgAuthPolCaverify=slbNewSslCfgAuthPolCaverify, slbCurSslCfgCertsOrganizationName=slbCurSslCfgCertsOrganizationName, gslbCurDnsSecZoneStatus=gslbCurDnsSecZoneStatus, gslbCurCfgRemSiteTableEntry=gslbCurCfgRemSiteTableEntry, cachStatSummNewCachedBytes=cachStatSummNewCachedBytes, slbNewCfgSyncSfoUpdatePeriod=slbNewCfgSyncSfoUpdatePeriod, fltNewCfgPortTableEntry=fltNewCfgPortTableEntry, gslbStatRuleIdx=gslbStatRuleIdx, gslbCurCfgEnhNetworkSprefix=gslbCurCfgEnhNetworkSprefix, gslbStatRemSiteTableEntry=gslbStatRemSiteTableEntry, slbNewAcclCfgCompBrwsRuleContent=slbNewAcclCfgCompBrwsRuleContent, slbStatSpRealServerSpIndex=slbStatSpRealServerSpIndex, gslbDnsSecImportExportImpKeyTTL=gslbDnsSecImportExportImpKeyTTL, slbNewSslCfgCertsOrganizationUnitName=slbNewSslCfgCertsOrganizationUnitName, slbNewSslCfgAuthPolDelete=slbNewSslCfgAuthPolDelete, slbStatMaintSymIcmpPackets=slbStatMaintSymIcmpPackets, gslbDnsSecImportExportImpKeyExpPeriod=gslbDnsSecImportExportImpKeyExpPeriod, slbPortInfoIndex=slbPortInfoIndex, fltCurCfgState=fltCurCfgState, slbStatRServerTotalSessions=slbStatRServerTotalSessions, slbNewCfgVirtServFifthPartIndex=slbNewCfgVirtServFifthPartIndex, slbNewNwclssCfgNetworkElementsTable=slbNewNwclssCfgNetworkElementsTable, slbStatVirtServiceHCOctets=slbStatVirtServiceHCOctets, dnsSlbStats=dnsSlbStats, slbNewCfgVirtServUrlchangHostType=slbNewCfgVirtServUrlchangHostType, slbNewCfgRtsIpLkp=slbNewCfgRtsIpLkp, gslbStatMaintInBadHttp=gslbStatMaintInBadHttp, gslbCurDnsResVipIndex1=gslbCurDnsResVipIndex1, sessMirrorStats=sessMirrorStats, slbOperSessionDelete=slbOperSessionDelete, slbCurAcclCfgCacheUrlListEntry=slbCurAcclCfgCacheUrlListEntry, gslbNewDnsSecKeyGenerateStatus=gslbNewDnsSecKeyGenerateStatus, slbStatVServerCookieRewrites=slbStatVServerCookieRewrites, slbNewCfgSapAslrPortNum=slbNewCfgSapAslrPortNum, slbCurCfgProxyGratArp=slbCurCfgProxyGratArp, gslbCurCfgRuleRR=gslbCurCfgRuleRR, gslbStatRuleNetwork=gslbStatRuleNetwork, slbStatSpMaintSymPacketsWithNoData=slbStatSpMaintSymPacketsWithNoData, hcsNewCfgAddOffsetCmd=hcsNewCfgAddOffsetCmd, slbCurAcclCfgCacheUrlRuleCache=slbCurAcclCfgCacheUrlRuleCache, slbNewNwclssCfgNetworkClassesName=slbNewNwclssCfgNetworkClassesName, pipNewCfgRemovePortVlan=pipNewCfgRemovePortVlan, slbNewCfgClearBackup=slbNewCfgClearBackup, gslbStatMaintLastNoResultDomain=gslbStatMaintLastNoResultDomain, cachStatPerServTotObj=cachStatPerServTotObj, slbNewCfgVirtServiceRemapUDPFrags=slbNewCfgVirtServiceRemapUDPFrags, slbCurCfgGroupWlm=slbCurCfgGroupWlm, fltNewCfgExtendedIpv6Sip=fltNewCfgExtendedIpv6Sip, cachRuleRuleListId=cachRuleRuleListId, slbNewCfgSyncFilt=slbNewCfgSyncFilt, gslbNewDnsSecZoneKSK2=gslbNewDnsSecZoneKSK2, slbStatSpRealServerHCOctets=slbStatSpRealServerHCOctets, fltNewCfgExtendedTable=fltNewCfgExtendedTable, slbNewNwclssCfgNetworkElementsIpv6Addr=slbNewNwclssCfgNetworkElementsIpv6Addr, slbNewCfgSmtportEntry=slbNewCfgSmtportEntry, slbDrecordTableMaxSize=slbDrecordTableMaxSize, cachPerRuleStatsEntry=cachPerRuleStatsEntry, slbStatRServerHCOctets=slbStatRServerHCOctets, slbStatSpAuxSessMaxConn=slbStatSpAuxSessMaxConn, gslbNewCfgEnhNetworkRemoveVirtServer=gslbNewCfgEnhNetworkRemoveVirtServer, gslbNewCfgGenHostname=gslbNewCfgGenHostname, gslbStatGroupIndex=gslbStatGroupIndex, fltCurCfgLayer7DenyMatchAll=fltCurCfgLayer7DenyMatchAll, fltStatTable=fltStatTable, slbCurCfgRtsVlan=slbCurCfgRtsVlan, filterStats=filterStats, slbPortSerState=slbPortSerState, connmngStatSummServConn=connmngStatSummServConn, slbNewCfgContRuleAction=slbNewCfgContRuleAction, gslbCurCfgDnsSecGlobalKskRollTm=gslbCurCfgDnsSecGlobalKskRollTm, slbStatSpMaintSymFragSessions=slbStatSpMaintSymFragSessions, gslbNewCfgEnhNetworkVirtServer=gslbNewCfgEnhNetworkVirtServer, gslbStatRuleRandom=gslbStatRuleRandom, slbNewSslCfgAuthPolPassinfoSubjectFlag=slbNewSslCfgAuthPolPassinfoSubjectFlag, slbCfg=slbCfg, slbNewAcclCfgCacheUrlRuleURL=slbNewAcclCfgCacheUrlRuleURL, slbCurCfgVirtServerIpv6Addr=slbCurCfgVirtServerIpv6Addr, fltNewCfgSrcMac=fltNewCfgSrcMac, slbNewCfgVirtServerRemoveRule=slbNewCfgVirtServerRemoveRule, rtspStatAllocFails=rtspStatAllocFails, fltNewCfgIpv6Dip=fltNewCfgIpv6Dip, dnsSlbStatFailedMatches=dnsSlbStatFailedMatches, gslbNewCfgGenNoremote=gslbNewCfgGenNoremote, slbCurAcclCfgCompBrwsRuleEntry=slbCurAcclCfgCompBrwsRuleEntry, slbNewNwclssCfgNetworkElementsToIp=slbNewNwclssCfgNetworkElementsToIp, slbCurCfgVirtServFourthPartIndex=slbCurCfgVirtServFourthPartIndex, fltNewCfgExtendedRadiusWapPersist=fltNewCfgExtendedRadiusWapPersist, slbCurCfgRealServerBackUp=slbCurCfgRealServerBackUp, slbCurCfgVirtServErrcodeNew=slbCurCfgVirtServErrcodeNew, slbStatSpMaintSymValidSegments=slbStatSpMaintSymValidSegments, slbCurAcclCfgCompBrwsRuleAgent=slbCurAcclCfgCompBrwsRuleAgent, sessMirrorTotalUpdateDataSessionMsgTx=sessMirrorTotalUpdateDataSessionMsgTx, slbRealServerInfoHealthLayer=slbRealServerInfoHealthLayer, fltCurCfgSecurityParseAll=fltCurCfgSecurityParseAll, gslbInfoRemSiteIdx=gslbInfoRemSiteIdx, slbNewCfgVirtServiceWts=slbNewCfgVirtServiceWts, slbCurCfgVirtServiceServCertGrpMark=slbCurCfgVirtServiceServCertGrpMark, slbNewCfgVirtServiceLdapslb=slbNewCfgVirtServiceLdapslb, slbNewCfgRealServerType=slbNewCfgRealServerType, slbCurCfgRealServerFailRetry=slbCurCfgRealServerFailRetry, slbNewSslCfgSSLPolAuthpol=slbNewSslCfgSSLPolAuthpol, slbNewNwclssCfgNetworkElementsFromIp=slbNewNwclssCfgNetworkElementsFromIp, slbCurCfgRealServerExcludeStr=slbCurCfgRealServerExcludeStr)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", gslbInfoVirtServerEntry=gslbInfoVirtServerEntry, slbNewCfgDomainRecordState=slbNewCfgDomainRecordState, wlmStats=wlmStats, slbCurCfgRealServerName=slbCurCfgRealServerName, slbStatMaintIpFragCurSessions=slbStatMaintIpFragCurSessions, slbNewCfgSyncCertsConfPassPhrase=slbNewCfgSyncCertsConfPassPhrase, gslbStatVirtServerRserverIdx=gslbStatVirtServerRserverIdx, slbNewCfgGroupDelete=slbNewCfgGroupDelete, slbCurCfgGlobalControl=slbCurCfgGlobalControl, gslbNewDnsSecZoneZSK1=gslbNewDnsSecZoneZSK1, slbNewAcclCfgCacheUrlRuleDomainM=slbNewAcclCfgCacheUrlRuleDomainM, fltNewCfgExtendedRevBwmContract=fltNewCfgExtendedRevBwmContract, slbCurCfgSapAslrInterval=slbCurCfgSapAslrInterval, slbOperHttpCachePurgeTable=slbOperHttpCachePurgeTable, slbCurCfgBuddyEntry=slbCurCfgBuddyEntry, slbNewCfgVirtServicesSecondPartEntry=slbNewCfgVirtServicesSecondPartEntry, accelStats=accelStats, rtspStatBufferAllocs=rtspStatBufferAllocs, slbRealServerRportInfoTable=slbRealServerRportInfoTable, slbCurSslCfgSSLPolCipherName=slbCurSslCfgSSLPolCipherName, compBrowRuleRuleListIndex=compBrowRuleRuleListIndex, slbNewCfgUrlBwmEntry=slbNewCfgUrlBwmEntry, slbNewCfgVirtServiceFifthPartIndex=slbNewCfgVirtServiceFifthPartIndex, fltNewCfgL7SipFilt=fltNewCfgL7SipFilt, radiusAcctReqWithoutFramedIp=radiusAcctReqWithoutFramedIp, fltNewCfgHttpRedirMappingDelete=fltNewCfgHttpRedirMappingDelete, compStatPerServAvgSizeBefComp=compStatPerServAvgSizeBefComp, gslbCurDnsSecZoneZSK1=gslbCurDnsSecZoneZSK1, slbStatSpRealServerTotalSessions=slbStatSpRealServerTotalSessions, slbNewCfgGroupMinThreshold=slbNewCfgGroupMinThreshold, fltCurCfgDbind=fltCurCfgDbind, fltNewCfgExtendedIpv6Nip=fltNewCfgExtendedIpv6Nip, slbStatSpFltFirings=slbStatSpFltFirings, slbRealServerInfoIpAddr=slbRealServerInfoIpAddr, gslbInfoVirtServerRserverIdx=gslbInfoVirtServerRserverIdx, slbCurCfgGroupPhashMask=slbCurCfgGroupPhashMask, snmphcCurCfgUseWeight=snmphcCurCfgUseWeight, slbStatMaintSymOtherPackets=slbStatMaintSymOtherPackets, gslbDnsSecImportExportImpKeyAlgo=gslbDnsSecImportExportImpKeyAlgo, gslbNewDnsSecZoneID=gslbNewDnsSecZoneID, slbCurCfgWlmEntry=slbCurCfgWlmEntry, fltNewCfgHdrName=fltNewCfgHdrName, slbCurCfgVirtServicesSecondPartEntry=slbCurCfgVirtServicesSecondPartEntry, fltNewCfgExtendedPatternMatchGroupBmap=fltNewCfgExtendedPatternMatchGroupBmap, fltCurCfgHttpRedirMappingFilter=fltCurCfgHttpRedirMappingFilter, slbVirtServicesTableMaxSize=slbVirtServicesTableMaxSize, gslbStatRuleHash=gslbStatRuleHash, pipNewCfgAddPortVlan=pipNewCfgAddPortVlan, sipTotalServerParseErrors=sipTotalServerParseErrors, slbCurCfgVirtServPathHideStatus=slbCurCfgVirtServPathHideStatus, gslbNewCfgMetricTable=gslbNewCfgMetricTable, sslOffPercSessUsingTLS=sslOffPercSessUsingTLS, slbCurSslCfgAuthPolPassinfoCharset=slbCurSslCfgAuthPolPassinfoCharset, gslbStatMaintOutDns=gslbStatMaintOutDns, rtspStatRedirects=rtspStatRedirects, slbSessionInfoEntry=slbSessionInfoEntry, fltCurCfgIpv6Dip=fltCurCfgIpv6Dip, slbCurSslCfgCertsHashAlgo=slbCurSslCfgCertsHashAlgo, slbCurCfgVirtMatrixArch=slbCurCfgVirtMatrixArch, gslbInfoVirtServerRegion=gslbInfoVirtServerRegion, synAtkThreshhold=synAtkThreshhold, slbNewCfgSapAslrVipv6Addr=slbNewCfgSapAslrVipv6Addr, slbNewCfgSapAslrSessionInfo=slbNewCfgSapAslrSessionInfo, slbNewCfgPortSlbServState=slbNewCfgPortSlbServState, slbStatSpMaintSymTcpPackets=slbStatSpMaintSymTcpPackets, gslbOper=gslbOper, gslbCurDnsSecKeySize=gslbCurDnsSecKeySize, fltNewCfgUrlBwmFltIndex=fltNewCfgUrlBwmFltIndex, slbCurCfgVirtServThirdPartIndex=slbCurCfgVirtServThirdPartIndex, gslbNewCfgMetricIndx=gslbNewCfgMetricIndx, slbNewCfgBuddyIndex=slbNewCfgBuddyIndex, gslbNewCfgEnhNetworkState=gslbNewCfgEnhNetworkState, gslbStatGeoSA=gslbStatGeoSA, fltNewCfgReverse=fltNewCfgReverse, slbStatAuxSessTable=slbStatAuxSessTable, gslbCurCfgRemSitePrimaryIPVer=gslbCurCfgRemSitePrimaryIPVer, slbSessionInfoMaxSessDump=slbSessionInfoMaxSessDump, slbStatWlmTable=slbStatWlmTable, snmphcCurCfgInvert=snmphcCurCfgInvert, gslbCurDnsSecZoneKSK3=gslbCurDnsSecZoneKSK3, slbNewAcclCfgCacheUrlListCopy=slbNewAcclCfgCacheUrlListCopy, slbCurAcclCfgCacheUrlListAdminStatus=slbCurAcclCfgCacheUrlListAdminStatus, slbNewCfgVirtServerDelete=slbNewCfgVirtServerDelete, cachRuleListNumOfObjCac=cachRuleListNumOfObjCac, slbSessionInfoTable=slbSessionInfoTable, linklbCfg=linklbCfg, slbCurCfgPortSlbPipState=slbCurCfgPortSlbPipState, slbNewCfgRealServPortDelete=slbNewCfgRealServPortDelete, fltNewCfgExtendedLayer7DenyState=fltNewCfgExtendedLayer7DenyState, slbCurSslCfgCertsDefaultsCountryName=slbCurSslCfgCertsDefaultsCountryName, slbCurCfgGroupBackupServer=slbCurCfgGroupBackupServer, gslbStatEnhNetworkTableEntry=gslbStatEnhNetworkTableEntry, hcsNewCfgAddCloseCmd=hcsNewCfgAddCloseCmd, gslbCurCfgProximityAge=gslbCurCfgProximityAge, gslbRemSiteTableMaxSize=gslbRemSiteTableMaxSize, slbNewCfgWlmIpAddr=slbNewCfgWlmIpAddr, slbStatVirtServiceCurrSessions=slbStatVirtServiceCurrSessions, gslbNewDnsSecZoneZSK3=gslbNewDnsSecZoneZSK3, slbCurCfgPortSlbHotStandby=slbCurCfgPortSlbHotStandby, slbCurCfgRealServerAvail=slbCurCfgRealServerAvail, fltCurCfgIndx=fltCurCfgIndx, slbStatWlmIndex=slbStatWlmIndex, fltNewCfgNatMcastVlan=fltNewCfgNatMcastVlan, fltCurCfgUrlReverseBwmContract=fltCurCfgUrlReverseBwmContract, slbStatSpMaintSymBufferAllocFails=slbStatSpMaintSymBufferAllocFails, gslbOperDnsSecEntry=gslbOperDnsSecEntry, slbNewAcclCfgCompBrwsRuleCopy=slbNewAcclCfgCompBrwsRuleCopy, fltCurCfgDstIpMac=fltCurCfgDstIpMac, slbCurCfgContRuleGotoRuleNum=slbCurCfgContRuleGotoRuleNum, sslOffPerServNewhandShake=sslOffPerServNewhandShake, slbStatSpMaintSymMatchCount=slbStatSpMaintSymMatchCount, slbNewSslCfgCertsDefaultsLocallyName=slbNewSslCfgCertsDefaultsLocallyName, fltNewCfgExtendedEgressPip=fltNewCfgExtendedEgressPip, slbNewAcclCfgCompPolAlgrthm=slbNewAcclCfgCompPolAlgrthm, slbNewCfgVirtServiceClntproxType=slbNewCfgVirtServiceClntproxType, slbNewAcclCfgCacheUrlRuleDomain=slbNewAcclCfgCacheUrlRuleDomain, slbCurCfgDrecordVirtServer=slbCurCfgDrecordVirtServer, slbNewCfgVirtServApplicationType=slbNewCfgVirtServApplicationType, sslOffPercSessUsingTLS11=sslOffPercSessUsingTLS11, slbNewCfgGroupRealServIndex=slbNewCfgGroupRealServIndex, fltNewCfgNatIp=fltNewCfgNatIp, slbCurCfgVirtServErrcodeUrl=slbCurCfgVirtServErrcodeUrl, slbNewCfgBuddyTable=slbNewCfgBuddyTable, slbCurSslCfgAuthPolPassinfoVersionFlag=slbCurSslCfgAuthPolPassinfoVersionFlag, slbLinklbDrecord=slbLinklbDrecord, slbCurSslCfgCertsLocalityName=slbCurSslCfgCertsLocalityName, fltNewCfgIdsGroup=fltNewCfgIdsGroup, radiusAcctStopReqs=radiusAcctStopReqs, slbCurCfgGroupRealServers=slbCurCfgGroupRealServers, slbNewCfgGroupWlm=slbNewCfgGroupWlm, ftpSlbStatTotal=ftpSlbStatTotal, gslbCurCfgRemSitePrimaryIp6=gslbCurCfgRemSitePrimaryIp6, slbCurCfgVirtServiceParseLength=slbCurCfgVirtServiceParseLength, slbNewCfgContVirtServiceIndex=slbNewCfgContVirtServiceIndex, slbNewAcclCfgCompPolDelete=slbNewAcclCfgCompPolDelete, slbNewSslCfgAuthPolPassinfoKeytypeFlag=slbNewSslCfgAuthPolPassinfoKeytypeFlag, slbNewCfgGroupIdsFlood=slbNewCfgGroupIdsFlood, slbPortInfo=slbPortInfo, gslbStatRemRealServerTable=gslbStatRemRealServerTable, fltNewCfgUrlBwmDelete=fltNewCfgUrlBwmDelete, slbNewCfgVirtServerCReset=slbNewCfgVirtServerCReset, slbStatMaintSymFetchErrors=slbStatMaintSymFetchErrors, slbStatWlmMembStateRepErr=slbStatWlmMembStateRepErr, slbSessionInfoIndex=slbSessionInfoIndex, slbNewCfgWaphcRcvPDU=slbNewCfgWaphcRcvPDU, slbOperGroupRealServerTable=slbOperGroupRealServerTable, slbCurSslCfgCertsEntry=slbCurSslCfgCertsEntry, fltCurCfgRangeHighDstPort=fltCurCfgRangeHighDstPort, slbNewCfgWapTpcp=slbNewCfgWapTpcp, slbCurCfgContRuleName=slbCurCfgContRuleName, gslbNewCfgGenSourceIpNetmask=gslbNewCfgGenSourceIpNetmask, slbStatWlmLbStateRep=slbStatWlmLbStateRep, slbNewCfgContRuleRealGrpNum=slbNewCfgContRuleRealGrpNum, gslbNewCfgProximityAge=gslbNewCfgProximityAge, slbStatMaintSymUdpPackets=slbStatMaintSymUdpPackets, slbNewNwclssCfgNetworkElementsId=slbNewNwclssCfgNetworkElementsId, slbNewCfgRealServerOverflow=slbNewCfgRealServerOverflow, slbNewCfgVirtServPathHidePathName=slbNewCfgVirtServPathHidePathName, pipNewCfgPortMap=pipNewCfgPortMap, fltNewCfgExtendedSipParsing=fltNewCfgExtendedSipParsing, slbCurCfgRealServerSubmac=slbCurCfgRealServerSubmac, gslbStatGeoPR=gslbStatGeoPR, gslbNewDnsSecZoneStatus=gslbNewDnsSecZoneStatus, slbNewCfgGroupRealThreshold=slbNewCfgGroupRealThreshold, gslbCurDnsSecKeyStatus=gslbCurDnsSecKeyStatus, fltNewCfgUrlBwmEntry=fltNewCfgUrlBwmEntry, slbCurCfgGroupIdsFlood=slbCurCfgGroupIdsFlood, slbCurCfgVirtServiceDirect=slbCurCfgVirtServiceDirect, slbCurCfgVirtServErrcodeReason=slbCurCfgVirtServErrcodeReason, sessMirrorTotalSessionsDeleted=sessMirrorTotalSessionsDeleted, slbCurCfgGroupBackup=slbCurCfgGroupBackup, slbCurCfgVirtServiceBwmContract=slbCurCfgVirtServiceBwmContract, fltNewCfgExtendedIdsGroup=fltNewCfgExtendedIdsGroup, gslbOperQuerySrcIpVer=gslbOperQuerySrcIpVer, slbOperOcspCachePurge=slbOperOcspCachePurge, slbStatMaintSymPacketsInFastPath=slbStatMaintSymPacketsInFastPath, gslbNewCfgRemSiteDelete=gslbNewCfgRemSiteDelete, slbNewAcclCfgCacheUrlRuleCache=slbNewAcclCfgCacheUrlRuleCache, slbCurAcclCfgCompBrwsRuleIndex=slbCurAcclCfgCompBrwsRuleIndex, httpPerServStatsVirtServPort=httpPerServStatsVirtServPort, slbNewCfgvStat=slbNewCfgvStat, slbCurCfgDrecordVirtRealMappingEntry=slbCurCfgDrecordVirtRealMappingEntry, slbCurCfgSapAslrVipv6Addr=slbCurCfgSapAslrVipv6Addr, gslbDnsSecImportExportImpKeyValidityPeriod=gslbDnsSecImportExportImpKeyValidityPeriod, slbCurCfgGroupEntry=slbCurCfgGroupEntry, slbSslCfgCertsDefaults=slbSslCfgCertsDefaults, fltNewCfgExtendedPbind=fltNewCfgExtendedPbind, slbNewCfgSmtportTable=slbNewCfgSmtportTable, fltNewCfgExtendedAclIpLength=fltNewCfgExtendedAclIpLength, httpPerServStatsTransRate=httpPerServStatsTransRate, slbStatSapAslrTable=slbStatSapAslrTable, httpPerServStatsRespAasToCli=httpPerServStatsRespAasToCli, fltCurCfgAclIpTosNew=fltCurCfgAclIpTosNew, gslbOperRemove=gslbOperRemove, pip6NewCfgDelete=pip6NewCfgDelete, slbStatMaintTcpFragments=slbStatMaintTcpFragments, slbNewSslCfgCertsDefaultsOrganizationUnitName=slbNewSslCfgCertsDefaultsOrganizationUnitName, gslbInfoVirtServerSessCur=gslbInfoVirtServerSessCur, slbNewNwclssCfgNetworkClassesIpVer=slbNewNwclssCfgNetworkClassesIpVer, compAvgCompRatio=compAvgCompRatio, slbStatSpMaintCurBindings4Seconds=slbStatSpMaintCurBindings4Seconds, slbStatSpMaintClear=slbStatSpMaintClear, fltCurCfgPatternMatch=fltCurCfgPatternMatch, fltCurCfgNatMcastVlan=fltCurCfgNatMcastVlan, slbCurAcclCfgCachePolAdminStatus=slbCurAcclCfgCachePolAdminStatus, fltNewCfgExtendedReverse=fltNewCfgExtendedReverse, gslbStatGeoEU=gslbStatGeoEU, slbCurSslCfgAuthPolPassinfoSerialFlag=slbCurSslCfgAuthPolPassinfoSerialFlag, slbNewCfgRealServRealPort=slbNewCfgRealServRealPort, slbStatSpAuxSessSpIndex=slbStatSpAuxSessSpIndex, slbSessionInfoSpIndex=slbSessionInfoSpIndex, slbCurSslCfgSSLPolCipherUserdef=slbCurSslCfgSSLPolCipherUserdef, fltCurCfgPortState=fltCurCfgPortState, slbCurAcclCfgCompUrlRuleDomain=slbCurAcclCfgCompUrlRuleDomain, compression=compression, slbFreeRealServerIndexInfo=slbFreeRealServerIndexInfo, slbCurSslCfgAuthPolPassinfoSubjectName=slbCurSslCfgAuthPolPassinfoSubjectName, layer4=layer4, slbStatWlmEntry=slbStatWlmEntry, gslbCurCfgEnhNetworkTable=gslbCurCfgEnhNetworkTable, slbCurCfgVirtServicePbindRport=slbCurCfgVirtServicePbindRport, fltNewCfgHttpRedirMappingFromStr=fltNewCfgHttpRedirMappingFromStr, slbNewCfgPeerPIPAddr=slbNewCfgPeerPIPAddr, curCfgRealServerGroupTableSize=curCfgRealServerGroupTableSize, sslSlbStatPersistPortCurSessions=sslSlbStatPersistPortCurSessions, slbCurCfgVirtServiceXForwardedFor=slbCurCfgVirtServiceXForwardedFor, slbCurSslCfgGroupsDefaultCert=slbCurSslCfgGroupsDefaultCert, fltNewCfgAclIpTosNew=fltNewCfgAclIpTosNew, slbCurAcclCfgCompBrwsListAdminStatus=slbCurAcclCfgCompBrwsListAdminStatus, gslbInfoVirtServerAvail=gslbInfoVirtServerAvail, slbStatSpFltTable=slbStatSpFltTable, compPerBrowRuleListStatsEntry=compPerBrowRuleListStatsEntry, slbNewCfgRtsVlan=slbNewCfgRtsVlan, slbCurCfgDrecordEntryState=slbCurCfgDrecordEntryState, sslOffPerServSslPolId=sslOffPerServSslPolId, gslbCurCfgDnsSecGlobalEnabled=gslbCurCfgDnsSecGlobalEnabled, fltStatFltIndex=fltStatFltIndex, slbCurAcclCfgCachePolStore=slbCurAcclCfgCachePolStore, slbNewCfgVirtServiceHttpHdrName=slbNewCfgVirtServiceHttpHdrName, slbNewCfgPortSlbRtsState=slbNewCfgPortSlbRtsState, slbCurSslCfgAuthPolPassinfoSerialName=slbCurSslCfgAuthPolPassinfoSerialName, slbCurCfgVirtServicesThirdPartEntry=slbCurCfgVirtServicesThirdPartEntry, slbCurCfgPortEntry=slbCurCfgPortEntry, synAttackNewCfgInterval=synAttackNewCfgInterval, slbStatMaintCurBindings4Seconds=slbStatMaintCurBindings4Seconds, slbCurCfgSmtportIndex=slbCurCfgSmtportIndex, slbStatWlmDeregRep=slbStatWlmDeregRep, gslbNewDnsResVipV6=gslbNewDnsResVipV6, gslbStatRemSiteInUpdates2=gslbStatRemSiteInUpdates2, slbCurAcclCfgCachePolServe=slbCurAcclCfgCachePolServe, slbStatSpMaintSymTruncPayloadToMp=slbStatSpMaintSymTruncPayloadToMp, slbNewCfgVirtServiceUriNorm=slbNewCfgVirtServiceUriNorm, slbCurCfgBuddyIndex=slbCurCfgBuddyIndex, slbCurCfgAuxRipHash=slbCurCfgAuxRipHash)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", slbStatMaintFilteredDeniedFrames=slbStatMaintFilteredDeniedFrames, slbCurSslCfgGroupsName=slbCurSslCfgGroupsName, slbCurCfgSapAslrVipIpVer=slbCurCfgSapAslrVipIpVer, gslbStatMaintInBadSiteUpdates=gslbStatMaintInBadSiteUpdates, slbNewAcclCfgCompUrlListDel=slbNewAcclCfgCompUrlListDel, fltNewCfgHttpRedirMappingFilter=fltNewCfgHttpRedirMappingFilter, fltCurCfgRevBwmContract=fltCurCfgRevBwmContract, rtspStatUDPStreams=rtspStatUDPStreams, fltCurCfgRangeHighSrcPort=fltCurCfgRangeHighSrcPort, slbCurCfgContRuleState=slbCurCfgContRuleState, slbCurSslCfgAuthPolCaverify=slbCurSslCfgAuthPolCaverify, gslbNewDnsSecZoneEntry=gslbNewDnsSecZoneEntry, slbNewCfgGroupVipHealthCheck=slbNewCfgGroupVipHealthCheck, slbCurCfgRealServPortEntry=slbCurCfgRealServPortEntry, snmphcNewCfgCommString=snmphcNewCfgCommString, slbNewAcclCfgCompUrlRuleURL=slbNewAcclCfgCompUrlRuleURL, gslbCurCfgRuleStartHour=gslbCurCfgRuleStartHour, slbNewCfgSapAslrAutoConfig=slbNewCfgSapAslrAutoConfig, fltCurCfgPortIndx=fltCurCfgPortIndx, hcsNewCfgAddLongNexpectCmd=hcsNewCfgAddLongNexpectCmd, slbCurCfgVirtServiceParseLimit=slbCurCfgVirtServiceParseLimit, fltCurCfgTimeWindow=fltCurCfgTimeWindow, slbCurAcclCfgCompPolAlgrthm=slbCurAcclCfgCompPolAlgrthm, gslbCurCfgMetricMetric=gslbCurCfgMetricMetric, slbCurCfgVirtServiceConnmgtStatus=slbCurCfgVirtServiceConnmgtStatus, slbCurSslCfgCertsDefaultsEMail=slbCurSslCfgCertsDefaultsEMail, slbNewCfgRealServerCookie=slbNewCfgRealServerCookie, slbStatSpMaintFilteredDeniedFrames=slbStatSpMaintFilteredDeniedFrames, gslbNewDnsSecKeyStatus=gslbNewDnsSecKeyStatus, slbNewCfgVirtServiceHttpSlb=slbNewCfgVirtServiceHttpSlb, slbNewCfgVirtServUrlchangStatus=slbNewCfgVirtServUrlchangStatus, slbNewAcclCfgCompBrwsRuleTable=slbNewAcclCfgCompBrwsRuleTable, slbNewSslCfgGroupsEntry=slbNewSslCfgGroupsEntry, slbNewNwclssCfgNetworkElementsPrefixLen=slbNewNwclssCfgNetworkElementsPrefixLen, httpStatSummHTTP10Per=httpStatSummHTTP10Per, gslbInfoRemRealServerState=gslbInfoRemRealServerState, fltNewCfgAction=fltNewCfgAction, slbCurSslCfgAuthPolPassinfoMd5Name=slbCurSslCfgAuthPolPassinfoMd5Name, compStats=compStats, slbCurSslCfgSSLPolName=slbCurSslCfgSSLPolName, hcsNewCfgTable=hcsNewCfgTable, slbNewCfgSlbSessAtkAllowlim=slbNewCfgSlbSessAtkAllowlim, gslbStatMaintInGoodSiteUpdates2=gslbStatMaintInGoodSiteUpdates2, gslbInfoVirtServerServiceIdx=gslbInfoVirtServerServiceIdx, slbNewCfgVirtServiceDirServerRtn=slbNewCfgVirtServiceDirServerRtn, slbCurAcclCfgCachePolMinSize=slbCurAcclCfgCachePolMinSize, cachStatPerServHitPerc=cachStatPerServHitPerc, gslbNewCfgRuleTableEntry=gslbNewCfgRuleTableEntry, fltCurCfgAclIpTosMask=fltCurCfgAclIpTosMask, hcsNewCfgAddLongNsendCmd=hcsNewCfgAddLongNsendCmd, gslbStatGeoAF=gslbStatGeoAF, icmpLimitStatHoldDowns=icmpLimitStatHoldDowns, slbNewCfgSyncBwm=slbNewCfgSyncBwm, gslbStatVirtServerTable=gslbStatVirtServerTable, slbPortInterSWState=slbPortInterSWState, slbCurSslCfgAuthPolPassinfoSubjectFlag=slbCurSslCfgAuthPolPassinfoSubjectFlag, slbNewAcclCfgCachePolServe=slbNewAcclCfgCachePolServe, slbCurCfgSapAslrDelete=slbCurCfgSapAslrDelete, cachStatPerServObj51KTO100K=cachStatPerServObj51KTO100K, slbCurCfgVirtServicesFifthPartEntry=slbCurCfgVirtServicesFifthPartEntry, slbCurCfgVirtServiceRemapUDPFrags=slbCurCfgVirtServiceRemapUDPFrags, slbNewAcclCfgCacheUrlRuleDelete=slbNewAcclCfgCacheUrlRuleDelete, fltNewCfgVlan=fltNewCfgVlan, slbCurCfgSapAslrVipAddr=slbCurCfgSapAslrVipAddr, gslbInfoRemSiteState=gslbInfoRemSiteState, slbNewSslCfgGroupsRemCert=slbNewSslCfgGroupsRemCert, slbNewCfgVirtServerIpv6Addr=slbNewCfgVirtServerIpv6Addr, fltNewCfgExtendedGotoFilter=fltNewCfgExtendedGotoFilter, slbRealServerRportInfoEntry=slbRealServerRportInfoEntry, slbStatSpFltEntry=slbStatSpFltEntry, slbWlmInfoEntry=slbWlmInfoEntry, compPerUrlRuleListStatsTable=compPerUrlRuleListStatsTable, slbNewAcclCfgCompBrwsRuleContentM=slbNewAcclCfgCompBrwsRuleContentM, slbCurSslCfgAuthPolPassinfoNbeforeFlag=slbCurSslCfgAuthPolPassinfoNbeforeFlag, gslbStatRuleLeastconns=gslbStatRuleLeastconns, sipStats=sipStats, slbNewCfgGroupIndex=slbNewCfgGroupIndex, gslbCurCfgRemSiteState=gslbCurCfgRemSiteState, sslOffPercSessUsingSSLv2=sslOffPercSessUsingSSLv2, compUrlRuleListIndex=compUrlRuleListIndex, gslbStatVirtServerServiceIdx=gslbStatVirtServerServiceIdx, fltNewCfgTableEntry=fltNewCfgTableEntry, pip6CurCfgTableEntry=pip6CurCfgTableEntry, slbRealServPortTableMaxSize=slbRealServPortTableMaxSize, pip6NewCfgVlanMap=pip6NewCfgVlanMap, slbCurCfgDrecordEntry=slbCurCfgDrecordEntry, slbCurCfgVirtServiceVirtPort=slbCurCfgVirtServiceVirtPort, slbCurNwclssCfgNetworkElementsPrefixLen=slbCurNwclssCfgNetworkElementsPrefixLen, fltNewCfgRadiusWapPersist=fltNewCfgRadiusWapPersist, slbCurSslCfgCertsKeySize=slbCurSslCfgCertsKeySize, slbStatSpAuxSessIndex=slbStatSpAuxSessIndex, slbNewCfgGroupRealServerEntry=slbNewCfgGroupRealServerEntry, gslbCurCfgDnsSecGlobalNsec3SaltLifetime=gslbCurCfgDnsSecGlobalNsec3SaltLifetime, fltNewCfgLog=fltNewCfgLog, slbNewCfgSmtportIndex=slbNewCfgSmtportIndex, slbCurCfgRealServIndex=slbCurCfgRealServIndex, slbCurSslCfgCertsPrpvinceName=slbCurSslCfgCertsPrpvinceName, slbCurSslCfgAuthPolEntry=slbCurSslCfgAuthPolEntry, slbCurCfgVirtServiceUriNorm=slbCurCfgVirtServiceUriNorm, slbNewCfgSyncPip=slbNewCfgSyncPip, slbStatSpMaintSymConnAllocFails=slbStatSpMaintSymConnAllocFails, slbNewCfgVirtMatrixArch=slbNewCfgVirtMatrixArch, layer4Oper=layer4Oper, fltNewCfgHttpRedirMappingTable=fltNewCfgHttpRedirMappingTable, gslbOperAvPersisVirtNum=gslbOperAvPersisVirtNum, sessMirrorTotalSessionsCreated=sessMirrorTotalSessionsCreated, connmngPerServStatsCliReq=connmngPerServStatsCliReq, slbVirtServicesInfoRealServIndex=slbVirtServicesInfoRealServIndex, gslbCurCfgEnhNetworkRemRealServer=gslbCurCfgEnhNetworkRemRealServer, slbNewCfgVirtServerIpAddress=slbNewCfgVirtServerIpAddress, slbNewCfgContRuleContClass=slbNewCfgContRuleContClass, slbCurNwclssCfgNetworkClassesIpVer=slbCurNwclssCfgNetworkClassesIpVer, gslbCurCfgGenMinco=gslbCurCfgGenMinco, fltNewCfgWapRadiusSnoop=fltNewCfgWapRadiusSnoop, slbCurSslCfgCertsDefaultsOrganizationName=slbCurSslCfgCertsDefaultsOrganizationName, slbNewCfgVirtServPathHidePathType=slbNewCfgVirtServPathHidePathType, slbCurCfgVirtServerRule=slbCurCfgVirtServerRule, slbOperRealServerIndex=slbOperRealServerIndex, sslOffPerServPercReusedhandShake=sslOffPerServPercReusedhandShake, slbNewCfgVirtServErrcodeHttpRedir=slbNewCfgVirtServErrcodeHttpRedir, pip6NewCfgTable=pip6NewCfgTable, slbNewAcclCfgCompBrwsRuleIndex=slbNewAcclCfgCompBrwsRuleIndex, gslbNewCfgRuleStartMin=gslbNewCfgRuleStartMin, slbGeneralCfg=slbGeneralCfg, compBrowRuleIndex=compBrowRuleIndex, fltNewCfgPortIndx=fltNewCfgPortIndx, curCfgVirtServerTableSize=curCfgVirtServerTableSize, slbNewAcclCfgCompBrwsListTable=slbNewAcclCfgCompBrwsListTable, compBrowRuleListSizeAftComp=compBrowRuleListSizeAftComp, cachStatPerServObjSmaller10K=cachStatPerServObjSmaller10K, fltCurCfgIpv6Dprefix=fltCurCfgIpv6Dprefix, slbCurCfgVirtServiceCookiePath=slbCurCfgVirtServiceCookiePath, slbCurSslCfgAuthPolPassinfoNafterFlag=slbCurSslCfgAuthPolPassinfoNafterFlag, slbSessionInfoString=slbSessionInfoString, pip6CurCfgVlanMap=pip6CurCfgVlanMap, slbCurAcclCfgCacheUrlRuleTable=slbCurAcclCfgCacheUrlRuleTable, gslbDnsSecImportExportZoneID=gslbDnsSecImportExportZoneID, slbNewCfgGroupBackupType=slbNewCfgGroupBackupType, dnsSlbStatDnameParseErrors=dnsSlbStatDnameParseErrors, slbNewCfgContRuleDelete=slbNewCfgContRuleDelete, gslbInfoVirtServerIpAddress=gslbInfoVirtServerIpAddress, slbCurAcclCfgCompPolURLList=slbCurAcclCfgCompPolURLList, slbCurCfgRealServerPingInterval=slbCurCfgRealServerPingInterval, slbStatWlmWtMsgParErr=slbStatWlmWtMsgParErr, slbCurAcclCfgCompBrwsRuleAdminStatus=slbCurAcclCfgCompBrwsRuleAdminStatus, slbNewCfgVirtServTextrepMatchText=slbNewCfgVirtServTextrepMatchText, slbNewAcclCfgCompPolBrwsList=slbNewAcclCfgCompPolBrwsList, slbNewCfgVirtServUrlchangPathType=slbNewCfgVirtServUrlchangPathType, gslbNewDnsSecKeyEntry=gslbNewDnsSecKeyEntry, gslbCurDnsSecZoneID=gslbCurDnsSecZoneID, fltCurCfgAclTcpFin=fltCurCfgAclTcpFin, gslbCurCfgEnhNetworkState=gslbCurCfgEnhNetworkState, slbCurCfgSapAslrTable=slbCurCfgSapAslrTable, slbCurSslCfgGroupsID=slbCurSslCfgGroupsID, slbCurCfgRealServerWeight=slbCurCfgRealServerWeight, slbNewCfgGroupName=slbNewCfgGroupName, slbCurCfgGroupIdsState=slbCurCfgGroupIdsState, slbNewAcclCfgCompUrlRuleAdminStatus=slbNewAcclCfgCompUrlRuleAdminStatus, slbCurCfgVirtServIndex=slbCurCfgVirtServIndex, slbCurCfgVirtServiceCloaksrv=slbCurCfgVirtServiceCloaksrv, gslbStatMaintInHttp=gslbStatMaintInHttp, slbNewCfgVirtServicesFifthPartTable=slbNewCfgVirtServicesFifthPartTable, slbCurSslCfgCertsCommonName=slbCurSslCfgCertsCommonName, slbNewCfgVirtServPathHideHostType=slbNewCfgVirtServPathHideHostType, gslbStatPersCurrent=gslbStatPersCurrent, slbNewCfgVirtServerState=slbNewCfgVirtServerState, gslbCurCfgRuleTTL=gslbCurCfgRuleTTL, slbRealServerRportServIndex=slbRealServerRportServIndex, slbCurCfgPprefix=slbCurCfgPprefix, gslbNewCfgEnhNetworkSourceIp=gslbNewCfgEnhNetworkSourceIp, gslbDnsSecImportExportPortType=gslbDnsSecImportExportPortType, snmphcCurCfgTableEntry=snmphcCurCfgTableEntry, slbNewCfgRealServerUrlBmap=slbNewCfgRealServerUrlBmap, httpStats=httpStats, fltCurCfgTcpRateMaxConn=fltCurCfgTcpRateMaxConn, fltNewCfgPortState=fltNewCfgPortState, slbCurAcclCfgCompPolNameIdIndex=slbCurAcclCfgCompPolNameIdIndex, slbNewCfgGroupIpVer=slbNewCfgGroupIpVer, slbNewCfgPortInterSwitchVlan=slbNewCfgPortInterSwitchVlan, slbNewCfgPortSlbFilterBmap=slbNewCfgPortSlbFilterBmap, slbNewCfgSubmac=slbNewCfgSubmac, slbNewSslCfgCertsType=slbNewSslCfgCertsType, gslbNewCfgGenRemSiteUpdatePort=gslbNewCfgGenRemSiteUpdatePort, slbStatMaintIpFragTotalSessions=slbStatMaintIpFragTotalSessions, synAttackCurCfgOnOff=synAttackCurCfgOnOff, slbCurCfgRealServerBkpPreempt=slbCurCfgRealServerBkpPreempt, gslbStatMaintRuleHits=gslbStatMaintRuleHits, gslbDnsResVipEmptyIndexesTable=gslbDnsResVipEmptyIndexesTable, slbNewCfgPortTable=slbNewCfgPortTable, slbNewNwclssCfgNetworkElementsEntry=slbNewNwclssCfgNetworkElementsEntry, gslbOperDnsSecTable=gslbOperDnsSecTable, httpStatSummResLarger100Kb=httpStatSummResLarger100Kb, pipCurCfgBaseType=pipCurCfgBaseType, slbCurCfgDomainRecordName=slbCurCfgDomainRecordName, slbNewCfgPeerIpv6Addr=slbNewCfgPeerIpv6Addr, fltNewCfgFwlb=fltNewCfgFwlb, gslbInfoVirtServerResponse=gslbInfoVirtServerResponse, synAttackCurCfgThreshhold=synAttackCurCfgThreshhold, slbCurCfgRealServerCommString=slbCurCfgRealServerCommString, slbCurCfgVirtServiceCookieSecure=slbCurCfgVirtServiceCookieSecure, fltNewCfgSipParsing=fltNewCfgSipParsing, fltCurCfgIpv6Sprefix=fltCurCfgIpv6Sprefix, gslbCurCfgRemSiteSecondaryIp6=gslbCurCfgRemSiteSecondaryIp6, gslbCurCfgRuleEndHour=gslbCurCfgRuleEndHour, gslbStatRuleAvailability=gslbStatRuleAvailability, gslbStatGeo=gslbStatGeo, slbCurCfgPortSlbInterSwitch=slbCurCfgPortSlbInterSwitch, gslbCurCfgRemSiteName=gslbCurCfgRemSiteName, slbNewCfgGroupBackupServer=slbNewCfgGroupBackupServer, slbCurAcclCfgCompBrwsListIdIndex=slbCurAcclCfgCompBrwsListIdIndex, gslbNewCfgRemSiteTable=gslbNewCfgRemSiteTable, slbNewCfgSapAslrVipIpVer=slbNewCfgSapAslrVipIpVer, slbNewSslCfgAuthPolTrustcaChainType=slbNewSslCfgAuthPolTrustcaChainType, fltCurCfgHoldDuration=fltCurCfgHoldDuration, slbCurCfgRealServerIpv6Addr=slbCurCfgRealServerIpv6Addr, gslbStatRuleTableEntry=gslbStatRuleTableEntry, slbVirtServerTableMaxSize=slbVirtServerTableMaxSize, tcpLimitStatHoldDowns=tcpLimitStatHoldDowns, slbCurCfgRealServerType=slbCurCfgRealServerType, gslbNewDnsSecKeyGenerate=gslbNewDnsSecKeyGenerate, cachStats=cachStats, slbNewCfgVirtServiceThirdPartIndex=slbNewCfgVirtServiceThirdPartIndex, fltNewCfgExtendedL3State=fltNewCfgExtendedL3State, sessMirrorTotalDataSessionsDeleted=sessMirrorTotalDataSessionsDeleted, gslbOperAvPersis=gslbOperAvPersis, slbCurCfgUrlBwmUrlId=slbCurCfgUrlBwmUrlId, gslbDnsSecImportExportPassphrase=gslbDnsSecImportExportPassphrase, gslbCurCfgEnhNetworkIndx=gslbCurCfgEnhNetworkIndx, sipTotalSdpNatPackets=sipTotalSdpNatPackets, slbNewCfgRadiusAuthenString=slbNewCfgRadiusAuthenString, slbCurCfgWaphcSndPDU=slbCurCfgWaphcSndPDU, gslbInfoRemSiteTable=gslbInfoRemSiteTable, slbCurCfgVirtServiceHttpHdrName=slbCurCfgVirtServiceHttpHdrName, slbStatWlmWtMsgRecv=slbStatWlmWtMsgRecv, slbCurAcclCfgCachePolURLList=slbCurAcclCfgCachePolURLList, httpPerServStatsTable=httpPerServStatsTable, slbCurCfgVirtServerIndex=slbCurCfgVirtServerIndex, snmphcNewCfgOid=snmphcNewCfgOid, sessMirrorTotalUpdateSessionMsgTx=sessMirrorTotalUpdateSessionMsgTx, slbCurSslCfgAuthPolName=slbCurSslCfgAuthPolName, fltNewCfgDstIp=fltNewCfgDstIp, slbNewCfgNmask=slbNewCfgNmask, fltNewCfgRangeHighDstPort=fltNewCfgRangeHighDstPort, slbStatSapAslrLastAct=slbStatSapAslrLastAct, gslbNewCfgRuleTable=gslbNewCfgRuleTable, gslbStatMaintInDns=gslbStatMaintInDns, pip6NewCfgAddVlan=pip6NewCfgAddVlan, hcsCurCfgScriptString=hcsCurCfgScriptString, slbNewSslCfgSSLPolPassInfoHeadBitsName=slbNewSslCfgSSLPolPassInfoHeadBitsName, slbCurCfgRealServerUrlBmap=slbCurCfgRealServerUrlBmap, gslbDnsSecImportExportKeyID=gslbDnsSecImportExportKeyID, slbNewCfgRealServerAvail=slbNewCfgRealServerAvail, cachStatSummObjLarger1M=cachStatSummObjLarger1M, slbCurCfgGroupHealthCheckLayer=slbCurCfgGroupHealthCheckLayer)
mibBuilder.exportSymbols("ALTEON-CHEETAH-LAYER4-MIB", slbVirtServicesInfoState=slbVirtServicesInfoState)
