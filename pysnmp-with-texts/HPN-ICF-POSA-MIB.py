#
# PySNMP MIB module HPN-ICF-POSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-POSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, Bits, TimeTicks, NotificationType, Integer32, Gauge32, Counter32, ObjectIdentity, IpAddress, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "Bits", "TimeTicks", "NotificationType", "Integer32", "Gauge32", "Counter32", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
hpnicfPosa = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92))
hpnicfPosa.setRevisions(('2014-05-29 00:00', '2008-03-12 09:33',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfPosa.setRevisionsDescriptions(('Modify the range for hpnicfPosaAppID and hpnicfPosaBackupAppID in hpnicfPosaAppTable. Modify the range for hpnicfPosaTerminalTransAppID in hpnicfPosaTerminalTable. Modify the range for hpnicfPosaMapAppID in hpnicfPosaMapTable.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfPosa.setLastUpdated('201405290000Z')
if mibBuilder.loadTexts: hpnicfPosa.setOrganization('')
if mibBuilder.loadTexts: hpnicfPosa.setContactInfo('')
if mibBuilder.loadTexts: hpnicfPosa.setDescription('This MIB is to provide the definition of the POSA (Point Of Sale Access) system.')
class HpnicfAppServiceType(TextualConvention, Integer32):
    description = 'The service type of a POS application. It means the way in which the router connects with the application server. At present, it supports two service types, tcp(1) and flow(2). If the router connects with the server through SEARIAL/ASYNC interface, the service type is flow(1). If through TCP/IP, the service type is tcp(1).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tcp", 1), ("flow", 2))

class HpnicfAppMode(TextualConvention, Integer32):
    description = 'The work mode of a POS application. It has two value normal(1) and temporary(2). This attribute is valid only when the service type is tcp(1). If it works in temporary(2) mode, the TCP connection between router and application server is established when a POS trade begins and disconnected when a POS trade finishes. In normal(1) mode, the TCP connection is established when POS function is enabled and exists all along.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("temporary", 2))

class HpnicfPeerState(TextualConvention, Integer32):
    description = 'The current running state of the peer (application server or POS terminal) of the router. notset(1) The peer is not configured correctly. down(2) The interface connecting with the peer is down. up(3) The interface connecting with the peer is up. kept(4) The connection between router and the peer is not established. linking(5) The connection between router and the peer is establishing. linked(6) The connection between router and the peer is established. multilink(7) There are multiple connections between router and the peer. blocked(8) The connection between router and the peer is unreachable. error(9) Enable failed. The status of down(2) and up(3) appear only when the router and the peer are connected with interface. The status about TCP connections appear when the router and the peer are connected with TCP/IP. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notset", 1), ("down", 2), ("up", 3), ("kept", 4), ("linking", 5), ("linked", 6), ("multilink", 7), ("blocked", 8), ("error", 9))

class HpnicfTerminalAccessType(TextualConvention, Integer32):
    description = 'The access type of a POS terminal. Now it supports 3 types. fcm(1) The POS terminal connects with router through FCM interface. flow(2) The POS terminal connects with router through SERIAL, ASYNC, AM (Analog Modem) or AUX interface. tcp(3) The POS terminal connects with router through TCP/IP protocol. The default access type is fcm(2).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fcm", 1), ("flow", 2), ("tcp", 3))

class HpnicfTpduChangeStrategy(TextualConvention, Integer32):
    description = 'The strategy to modify the address of the packet from terminals before delivering it to application server. Now it supports 2 types. ChangeTpduSrc(1) Replace the source address of the packet with POSID. ChangeTpduDest(2) Replace the destination address of the packet with POSID.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("changeTpduSrc", 1), ("changeTpduDest", 2))

hpnicfPosaControl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1))
hpnicfPosaServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaServerEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaServerEnable.setDescription('This attribute controls the starting or stoppage of POS access function. The defalut value is disabled(1).')
hpnicfPosaFcmAnswerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 2000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmAnswerTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmAnswerTimeout.setDescription('The maximum answer time of a POS connection through a FCM (Fast Connection Modem) interface. The answer time is the interval from the POS terminal sending request to the Router giving its reply, in units of milliseconds.')
hpnicfPosaFcmTradeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30000, 12000000)).clone(12000000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmTradeTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmTradeTimeout.setDescription('The maximum time of a POS trade through a FCM interface, in units of milliseconds.')
hpnicfPosaFcmIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12000)).clone(180)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmIdleTimeout.setDescription('The maximum idle time of a POS connection through the FCM interface, in units of seconds.')
hpnicfPosaSrvStateChangeTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaSrvStateChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaSrvStateChangeTrapEnable.setDescription('This attribute controls whether the hpnicfPosaServerStatusChange trap will be sent or not.')
hpnicfPosaAppStateChangeTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaAppStateChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppStateChangeTrapEnable.setDescription('This attribute controls whether the hpnicfPosaAppStateChange trap will be sent or not.')
hpnicfPosaTerminalHangUpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaTerminalHangUpTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalHangUpTrapEnable.setDescription('This attribute controls whether the hpnicfPosaTerminalHangUp trap will be sent or not.')
hpnicfPosaFcmLnkNegoFailTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmLnkNegoFailTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmLnkNegoFailTrapEnable.setDescription('This attribute controls whether the hpnicfPosaFcmLinkNegoFailed trap will be sent or not.')
hpnicfPosaFcmPhyNegoFailTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmPhyNegoFailTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmPhyNegoFailTrapEnable.setDescription('This attribute controls whether the hpnicfPosaFcmPhyNegoFailed trap will be sent or not.')
hpnicfPosaTcpConnectionNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionNumber.setDescription('The current number of TCP connections.')
hpnicfPosaFcmConnectionNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionNumber.setDescription('The current number of FCM connections.')
hpnicfPosaTcpConnectionThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 12), Integer32().clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionThreshold.setDescription('The threshold of TCP connections.')
hpnicfPosaFcmConnectionThreshold = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 13), Integer32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionThreshold.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionThreshold.setDescription('The threshold of FCM connections.')
hpnicfPosaTcpConnectionTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionTrapEnable.setDescription('This attribute specifies the threshold that must be exceeded to send the hpnicfPosaTcpConnectionExceed trap.')
hpnicfPosaFcmConnectionTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionTrapEnable.setDescription('This attribute specifies the threshold that must be exceeded to send the hpnicfPosaFcmConnectionExceed trap.')
hpnicfPosaTcpTradeLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaTcpTradeLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTradeLimit.setDescription('The limit of concurrent trades in one TCP connection. The value 0 means unlimited.')
hpnicfPosaTcpTradeTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaTcpTradeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTradeTrapEnable.setDescription('This attribute specifies the limit that must be exceeded to send the hpnicfPosaTcpTradeExceed trap.')
hpnicfPosaTcpTradeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 1, 18), Integer32().clone(240)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaTcpTradeTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTradeTimeout.setDescription('The maximum interval to wait for the reply from sending the trade packet to the application server. The value 0 means wait forever.')
hpnicfPosaTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2))
hpnicfPosaAppTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1), )
if mibBuilder.loadTexts: hpnicfPosaAppTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppTable.setDescription('This table shows the configuration information and running status of POS application.')
hpnicfPosaAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaAppID"))
if mibBuilder.loadTexts: hpnicfPosaAppEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppEntry.setDescription('This table shows the configuration information and running status of POS application.')
hpnicfPosaAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPosaAppID.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppID.setDescription('The identification of a POS application.')
hpnicfPosaAppServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 2), HpnicfAppServiceType().clone('tcp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppServiceType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppServiceType.setDescription('The service type of a POS application. It means the way in which the router connects with the application server.')
hpnicfPosaAppIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppIfIndex.setReference('ifindex')
if mibBuilder.loadTexts: hpnicfPosaAppIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppIfIndex.setDescription('This attribute is the ifindex through which the router connecting with the application server, if the service type of POS application is flow(2). It is invalid if the service type is tcp(1). At preasent, it supports 5 types of interface: FCM, SERIAL, ASYNC, AM (Analog Modem) and AUX.')
hpnicfPosaAppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 4), HpnicfAppMode().clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppMode.setDescription('The work mode of a POS application.')
hpnicfPosaAppHostIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppHostIPType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppHostIPType.setDescription('The IP address type of the application server. And now it must be IPV4. It is invalid if the service type is flow(2).')
hpnicfPosaAppHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppHostIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppHostIP.setDescription('The IP address of the application server. And now it only supports IPV4. It is invalid if the service type is flow(2).')
hpnicfPosaAppHostPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppHostPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppHostPort.setDescription('The listening port of the application server. If the information of the application server is not specified, this object will return the value 0. It is invalid if the service type is flow(2).')
hpnicfPosaAppRouterIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppRouterIPType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppRouterIPType.setDescription('The source IP address type of the access router. Now it must be ipv4. It is invalid if the service type is flow(2).')
hpnicfPosaAppRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 9), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppRouterIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppRouterIP.setDescription('The source IP address of access router used in connecting with application server. Now it only supports ipv4. It is invalid if the service type is flow(2).')
hpnicfPosaAppKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7200)).clone(2)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppKeepAliveInterval.setDescription('The TCP keep alive interval of the connection between the router and the application server. In unit of seconds. The default value is 2 seconds. It is valid only when the service type is tcp(1).')
hpnicfPosaAppKeepAliveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppKeepAliveCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppKeepAliveCount.setDescription('The maximum number of sending TCP keep alive packets. It is valid only when the service type is tcp(1).')
hpnicfPosaAppConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(20)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppConnectTimeout.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppConnectTimeout.setDescription('The maximum interval that the router waits for the reply from application server after sending the request for establishing a TCP connection. It is invalid if the service type is flow(2).')
hpnicfPosaAppState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 13), HpnicfPeerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaAppState.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppState.setDescription('The current running state of application server.')
hpnicfPosaAppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppRowStatus.setDescription('Operation status.')
hpnicfPosaAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppName.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppName.setDescription('The description of a POS application.')
hpnicfPosaCallerIDTransEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaCallerIDTransEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerIDTransEnable.setDescription('Enable or disable the caller-id transmission function.')
hpnicfPosaTpduChangeStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 17), HpnicfTpduChangeStrategy().clone('changeTpduSrc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTpduChangeStrategy.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTpduChangeStrategy.setDescription('Set the strategy to modify the address of the packet from terminals before delivering it to application server.')
hpnicfPosaBackupAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaBackupAppID.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaBackupAppID.setDescription('Specify the backup application ID, 0 indicates not using backup application. It is invalid if the service type is flow(2).')
hpnicfPosaQuietTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaQuietTimeOut.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaQuietTimeOut.setDescription('Specify the wait time for re-activating application server. It is invalid if the service type is flow(2).')
hpnicfPosaAppHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppHello.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppHello.setDescription('Specify the switch of hello packet for the application server.')
hpnicfPosaAppHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppHelloInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppHelloInterval.setDescription('Specify the interval time in minute(s) of hello packet.')
hpnicfPosaAppRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaAppRouterPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppRouterPort.setDescription('The source port of access router used in connecting with application server. 0 indicates not to specify the source port. It is valid only if the service type is tcp(1) and mode is normal(1).')
hpnicfPosaTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2), )
if mibBuilder.loadTexts: hpnicfPosaTerminalTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalTable.setDescription('This table shows the configuration information and running status of POS terminal.')
hpnicfPosaTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaTerminalID"))
if mibBuilder.loadTexts: hpnicfPosaTerminalEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalEntry.setDescription('This table shows the configuration information and running status of POS terminal.')
hpnicfPosaTerminalID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPosaTerminalID.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalID.setDescription('The identification of a POS terminal.')
hpnicfPosaTerminalAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 2), HpnicfTerminalAccessType().clone('fcm')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTerminalAccessType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalAccessType.setDescription('The access type of a POS terminal.')
hpnicfPosaTerminalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTerminalIfIndex.setReference('ifindex')
if mibBuilder.loadTexts: hpnicfPosaTerminalIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalIfIndex.setDescription('The ifindex of the interface through which connects the POS terminal and the router. It is invalid if the access type is TCP.')
hpnicfPosaTerminalTransAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTerminalTransAppID.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalTransAppID.setDescription('The identification of the application server to which all the packets from this POS terminal will be sent. If this object is set to 0, the destination application server to which a packet from this POS terminal will be sent is determined by its TPDU (Transport Protocol Data Unit) destination address. It is invalid if the access type is TCP.')
hpnicfPosaTerminalListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTerminalListenPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalListenPort.setDescription('The listening port accepting the connection from POS terminals. It is valid only when the access type is TCP.')
hpnicfPosaTerminalState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 6), HpnicfPeerState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalState.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalState.setDescription('The current running status of a POS terminal.')
hpnicfPosaTerminalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTerminalRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalRowStatus.setDescription('Operation status.')
hpnicfPosaTerminalName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTerminalName.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalName.setDescription('The description of a POS terminal.')
hpnicfPosaTerminalCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalCfgIfIndex.setReference('ifindex')
if mibBuilder.loadTexts: hpnicfPosaTerminalCfgIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalCfgIfIndex.setDescription('The ifindex of the interface on which the terminal configuration is. If it is a physical interface, its value is equal to that of hpnicfPosaTerminalIfIndex.')
hpnicfPosaMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 3), )
if mibBuilder.loadTexts: hpnicfPosaMapTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaMapTable.setDescription('This table describe the application-mapping information.')
hpnicfPosaMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaMapSrcCode"), (0, "HPN-ICF-POSA-MIB", "hpnicfPosaMapDestCode"))
if mibBuilder.loadTexts: hpnicfPosaMapEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaMapEntry.setDescription('This table describe the application-mapping information.')
hpnicfPosaMapDestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 7)))
if mibBuilder.loadTexts: hpnicfPosaMapDestCode.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaMapDestCode.setDescription("The destination code of the mapping item. Generally, the destination code is a 4-character-string. If the destination address in POS packet matches the code, the packet will be deliveried to the corresponding application server. If any code can not be matched, the packet will be deliveried to the default server. A special destination code, 'default', is for default mapping item.")
hpnicfPosaMapAppID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaMapAppID.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaMapAppID.setDescription('The identifier of POS application. It is the index of hpnicfPosaAppTable.')
hpnicfPosaMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaMapRowStatus.setDescription('Operation status.')
hpnicfPosaMapSrcCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 7)))
if mibBuilder.loadTexts: hpnicfPosaMapSrcCode.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaMapSrcCode.setDescription("The source code of the mapping item. Generally, the source code is a 4-character-string. If the source address in POS packet matches the code, the packet will be deliveried to the corresponding application server. If any code can not be matched, the packet will be deliveried to the default server. A special source code, 'default', is for default mapping item.")
hpnicfPosaFcmStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4), )
if mibBuilder.loadTexts: hpnicfPosaFcmStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatTable.setDescription('This table shows the statistics information of FCM interface.')
hpnicfPosaFcmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaFcmStatIfIndex"))
if mibBuilder.loadTexts: hpnicfPosaFcmStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatEntry.setDescription('This table shows the statistics information of FCM interface.')
hpnicfPosaFcmStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hpnicfPosaFcmStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatIfIndex.setDescription('The index of FCM interface.')
hpnicfPosaFcmStatTimeoutCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaFcmStatTimeoutCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatTimeoutCnts.setDescription('The number of disconnections because of trade timeouts.')
hpnicfPosaFcmStatConnectFailCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaFcmStatConnectFailCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatConnectFailCnts.setDescription('The number of connection failures because of unsuccessful negotiations.')
hpnicfPosaFcmStatTransCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaFcmStatTransCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatTransCnts.setDescription('The number of all transactions made through the interface.')
hpnicfPosaFcmStatTransSuccessCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaFcmStatTransSuccessCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatTransSuccessCnts.setDescription('The number of successful transactions made through the interface.')
hpnicfPosaFcmStatTransCntsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmStatTransCntsClear.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmStatTransCntsClear.setDescription('Clear the number of successful transactions and all transactions.')
hpnicfPosaAppStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5), )
if mibBuilder.loadTexts: hpnicfPosaAppStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppStatTable.setDescription('This table shows the statistics information of application.')
hpnicfPosaAppStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaAppID"))
if mibBuilder.loadTexts: hpnicfPosaAppStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppStatEntry.setDescription('This table shows the statistics information of application.')
hpnicfPosaAppRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaAppRecvPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppRecvPkts.setDescription('The number of packets recieved from the application server.')
hpnicfPosaAppSendPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaAppSendPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppSendPkts.setDescription('The number of packets sent to the application server.')
hpnicfPosaAppErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaAppErrPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppErrPkts.setDescription('The number of inbound packets that contained errors.')
hpnicfPosaAppDistributeErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaAppDistributeErrCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppDistributeErrCnts.setDescription('The number of packets that are discarded when no corresponding POS terminal can be found.')
hpnicfPosaAppInDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaAppInDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppInDiscardedPkts.setDescription('The number of inbound packets that are discarded when the incoming buffer is full.')
hpnicfPosaAppOutDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaAppOutDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppOutDiscardedPkts.setDescription('The number of outbound packets that are discarded because of link errors between the router and the application server.')
hpnicfPosaTerminalStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6), )
if mibBuilder.loadTexts: hpnicfPosaTerminalStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalStatTable.setDescription('This table shows the statistics information of application.')
hpnicfPosaTerminalStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaTerminalID"))
if mibBuilder.loadTexts: hpnicfPosaTerminalStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalStatEntry.setDescription('This table shows the statistics information of application.')
hpnicfPosaTerminalRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalRecvPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalRecvPkts.setDescription('The number of packets recieved from the POS terminal.')
hpnicfPosaTerminalSendPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalSendPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalSendPkts.setDescription('The number of packets sent to the POS terminal.')
hpnicfPosaTerminalErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalErrPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalErrPkts.setDescription('The number of inbound packets that contained errors.')
hpnicfPosaTerminalMapErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalMapErrCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalMapErrCnts.setDescription('The number of packets that are discarded because of mapping errors.')
hpnicfPosaTerminalInDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalInDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalInDiscardedPkts.setDescription('The number of inbound packets that are discarded when the incoming buffer is full.')
hpnicfPosaTerminalOutDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTerminalOutDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalOutDiscardedPkts.setDescription('The number of outbound packets that are discarded because of link errors between the router and the POS terminal.')
hpnicfPosaBatchTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 7), )
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalTable.setDescription('The table of the configuration information relevant to a batch of POS terminals.')
hpnicfPosaBatchTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalEntry.setDescription('The configuration information relevant to a batch of POS terminals.')
hpnicfPosaBatchTerminalFirstID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalFirstID.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalFirstID.setDescription('The first ID of the batch of POS terminals.')
hpnicfPosaBatchTerminalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaBatchTerminalRowStatus.setDescription('Operation status.')
hpnicfPosaTcpTermStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8), )
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatTable.setDescription('This table shows the statistics information of terminal whose access type is tcp.')
hpnicfPosaTcpTermStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaTcpTermStatIndex"))
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatEntry.setDescription('This table shows the statistics information of terminal whose access type is tcp.')
hpnicfPosaTcpTermStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIndex.setDescription('The index of entity.')
hpnicfPosaTcpTermStatIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIPType.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIPType.setDescription('The type of Internet address. And now it must be ipv4.')
hpnicfPosaTcpTermStatIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIP.setDescription('The IP address or the subnet of the statistics terminal(s). When the vlaue is a subnet, the statistics of all the terminals in the subnet will be added up. And now it only supports ipv4.')
hpnicfPosaTcpTermStatIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIPMask.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatIPMask.setDescription('The mask associated with the IP address or the subnet. And now it only supports ipv4.')
hpnicfPosaTcpTermRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTcpTermRecvPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermRecvPkts.setDescription('The number of packets recieved from the POS terminal(s).')
hpnicfPosaTcpTermSendPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTcpTermSendPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermSendPkts.setDescription('The number of packets sent to the POS terminal(s).')
hpnicfPosaTcpTermErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTcpTermErrPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermErrPkts.setDescription('The number of inbound packets that contained errors.')
hpnicfPosaTcpTermMapErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTcpTermMapErrCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermMapErrCnts.setDescription('The number of packets that are discarded because of mapping errors.')
hpnicfPosaTcpTermInDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTcpTermInDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermInDiscardedPkts.setDescription('The number of inbound packets that are discarded when the incoming buffer is full.')
hpnicfPosaTcpTermOutDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaTcpTermOutDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermOutDiscardedPkts.setDescription('The number of outbound packets that are discarded because of link errors between the router and the POS terminal(s).')
hpnicfPosaTcpTermStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 8, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTermStatRowStatus.setDescription('Operation status.')
hpnicfPosaFcmConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9), )
if mibBuilder.loadTexts: hpnicfPosaFcmConfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmConfTable.setDescription('This table shows the configuration information of FCM (Fast Connection Modem) interfaces.')
hpnicfPosaFcmConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfPosaFcmConfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmConfEntry.setDescription('This entry shows the configuration information of FCM (Fast Connection Modem) interfaces.')
hpnicfPosaFcmNegoHookOff = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 6000)).clone(500)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmNegoHookOff.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmNegoHookOff.setDescription('Delay time for hookoff.')
hpnicfPosaFcmNegoSilence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmNegoSilence.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmNegoSilence.setDescription('Silence time for modem negotiation.')
hpnicfPosaFcmNegoScrmbBinary1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1500)).clone(250)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmNegoScrmbBinary1.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmNegoScrmbBinary1.setDescription('Scramble-binary1 time for modem negotiation.')
hpnicfPosaFcmNegoUnscrmbBinary1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1500)).clone(400)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmNegoUnscrmbBinary1.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmNegoUnscrmbBinary1.setDescription('Unscramble-binary1 time for modem negotiation.')
hpnicfPosaFcmThresholdRlsdOff = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 75)).clone(48)).setUnits('-dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdRlsdOff.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdRlsdOff.setDescription('RLSD (Received Line Signal Detect) off threshold for modem.')
hpnicfPosaFcmThresholdRlsdOn = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 75)).clone(43)).setUnits('-dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdRlsdOn.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdRlsdOn.setDescription('RLSD (Received Line Signal Detect) on threshold for modem.')
hpnicfPosaFcmThresholdTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 42)).clone(10)).setUnits('-dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdTxPower.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdTxPower.setDescription('TX power for modem.')
hpnicfPosaFcmThresholdAnswerTone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 42)).clone(9)).setUnits('-dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdAnswerTone.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmThresholdAnswerTone.setDescription('Answer tone level for modem.')
hpnicfPosaCallerStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10), )
if mibBuilder.loadTexts: hpnicfPosaCallerStatTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerStatTable.setDescription('This table shows the statistics information of terminal according the caller-ID.')
hpnicfPosaCallerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-POSA-MIB", "hpnicfPosaCallerStatCallerID"))
if mibBuilder.loadTexts: hpnicfPosaCallerStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerStatEntry.setDescription('This table shows the statistics information of terminal according the caller-ID.')
hpnicfPosaCallerStatCallerID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: hpnicfPosaCallerStatCallerID.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerStatCallerID.setDescription('The caller number.')
hpnicfPosaCallerRecvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaCallerRecvPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerRecvPkts.setDescription('The number of packets recieved from the POS terminal(s).')
hpnicfPosaCallerSendPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaCallerSendPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerSendPkts.setDescription('The number of packets sent to the POS terminal(s).')
hpnicfPosaCallerErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaCallerErrPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerErrPkts.setDescription('The number of inbound packets that contained errors.')
hpnicfPosaCallerMapErrCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaCallerMapErrCnts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerMapErrCnts.setDescription('The number of packets that are discarded because of mapping errors.')
hpnicfPosaCallerInDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaCallerInDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerInDiscardedPkts.setDescription('The number of inbound packets that are discarded when the incoming buffer is full.')
hpnicfPosaCallerOutDiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPosaCallerOutDiscardedPkts.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerOutDiscardedPkts.setDescription('The number of outbound packets that are discarded because of link errors between the router and the POS terminal(s).')
hpnicfPosaCallerStatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 2, 10, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPosaCallerStatRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaCallerStatRowStatus.setDescription('Operation status.')
hpnicfPosaTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3))
hpnicfPosaTrapPrex = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0))
hpnicfPosaServerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 1)).setObjects(("HPN-ICF-POSA-MIB", "hpnicfPosaServerEnable"))
if mibBuilder.loadTexts: hpnicfPosaServerStatusChange.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaServerStatusChange.setDescription('This trap is generated when the POS function is started or stopped.')
hpnicfPosaAppStateChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 2)).setObjects(("HPN-ICF-POSA-MIB", "hpnicfPosaAppID"), ("HPN-ICF-POSA-MIB", "hpnicfPosaAppStateChangeObject"))
if mibBuilder.loadTexts: hpnicfPosaAppStateChange.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppStateChange.setDescription('This trap is generated whenever the availability of application server changes.')
hpnicfPosaTerminalHangUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfPosaTerminalHangUp.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTerminalHangUp.setDescription('This trap is generated whenever the POS connection through a FCM (Fast Connection Modem) interface is hanged up by POS terminal.')
hpnicfPosaFcmLinkNegoFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 4)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfPosaFcmLinkNegoFailed.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmLinkNegoFailed.setDescription('This trap is generated whenever the link layer negotiation is failed between the POS terminal and router through a FCM (Fast Connection Modem) interface.')
hpnicfPosaFcmPhyNegoFailed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 5)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hpnicfPosaFcmPhyNegoFailed.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmPhyNegoFailed.setDescription('This trap is generated whenever the physical layer negotiation is failed between the POS terminal and router through a FCM (Fast Connection Modem) interface.')
hpnicfPosaTcpConnectionExceed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 6)).setObjects(("HPN-ICF-POSA-MIB", "hpnicfPosaTcpConnectionThreshold"))
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionExceed.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpConnectionExceed.setDescription('This trap is generated whenever the number of connections exceeds the threshold.')
hpnicfPosaFcmConnectionExceed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 7)).setObjects(("HPN-ICF-POSA-MIB", "hpnicfPosaFcmConnectionThreshold"))
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionExceed.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaFcmConnectionExceed.setDescription('This trap is generated whenever the number of connections exceeds the threshold.')
hpnicfPosaTcpTradeExceed = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 0, 8)).setObjects(("HPN-ICF-POSA-MIB", "hpnicfPosaTcpTradeLimit"), ("HPN-ICF-POSA-MIB", "hpnicfPosaTerminalID"))
if mibBuilder.loadTexts: hpnicfPosaTcpTradeExceed.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaTcpTradeExceed.setDescription('This trap is generated whenever the number of trades in any TCP connect exceeds the limit.')
hpnicfPosaTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 1))
hpnicfPosaAppStateChangeObject = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 92, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPosaAppStateChangeObject.setStatus('current')
if mibBuilder.loadTexts: hpnicfPosaAppStateChangeObject.setDescription('This is a dummy MIB object referenced by the hpnicfPosaAppStateChange trap. This object shows the availability changing of corresponding application server.')
mibBuilder.exportSymbols("HPN-ICF-POSA-MIB", hpnicfPosaAppName=hpnicfPosaAppName, hpnicfPosaFcmStatIfIndex=hpnicfPosaFcmStatIfIndex, hpnicfPosaFcmLinkNegoFailed=hpnicfPosaFcmLinkNegoFailed, hpnicfPosaFcmPhyNegoFailed=hpnicfPosaFcmPhyNegoFailed, hpnicfPosaTcpTermInDiscardedPkts=hpnicfPosaTcpTermInDiscardedPkts, hpnicfPosaMapAppID=hpnicfPosaMapAppID, hpnicfPosaAppKeepAliveInterval=hpnicfPosaAppKeepAliveInterval, hpnicfPosaMapDestCode=hpnicfPosaMapDestCode, hpnicfPosaCallerErrPkts=hpnicfPosaCallerErrPkts, hpnicfPosaCallerSendPkts=hpnicfPosaCallerSendPkts, hpnicfPosaMapEntry=hpnicfPosaMapEntry, hpnicfPosaAppInDiscardedPkts=hpnicfPosaAppInDiscardedPkts, hpnicfPosaBatchTerminalRowStatus=hpnicfPosaBatchTerminalRowStatus, hpnicfPosaTerminalStatEntry=hpnicfPosaTerminalStatEntry, hpnicfPosaFcmNegoHookOff=hpnicfPosaFcmNegoHookOff, hpnicfPosaFcmThresholdTxPower=hpnicfPosaFcmThresholdTxPower, hpnicfPosaTcpConnectionNumber=hpnicfPosaTcpConnectionNumber, PYSNMP_MODULE_ID=hpnicfPosa, hpnicfPosaAppStatTable=hpnicfPosaAppStatTable, hpnicfPosaAppStatEntry=hpnicfPosaAppStatEntry, hpnicfPosaAppMode=hpnicfPosaAppMode, hpnicfPosaCallerMapErrCnts=hpnicfPosaCallerMapErrCnts, HpnicfTerminalAccessType=HpnicfTerminalAccessType, hpnicfPosaAppState=hpnicfPosaAppState, hpnicfPosaMapRowStatus=hpnicfPosaMapRowStatus, hpnicfPosaTcpTradeTrapEnable=hpnicfPosaTcpTradeTrapEnable, hpnicfPosaTcpTermMapErrCnts=hpnicfPosaTcpTermMapErrCnts, hpnicfPosaServerStatusChange=hpnicfPosaServerStatusChange, hpnicfPosaCallerStatCallerID=hpnicfPosaCallerStatCallerID, hpnicfPosaFcmIdleTimeout=hpnicfPosaFcmIdleTimeout, hpnicfPosaServerEnable=hpnicfPosaServerEnable, hpnicfPosaTcpTermSendPkts=hpnicfPosaTcpTermSendPkts, hpnicfPosaMapTable=hpnicfPosaMapTable, hpnicfPosaTerminalStatTable=hpnicfPosaTerminalStatTable, hpnicfPosaTcpConnectionExceed=hpnicfPosaTcpConnectionExceed, hpnicfPosaAppEntry=hpnicfPosaAppEntry, hpnicfPosaTerminalListenPort=hpnicfPosaTerminalListenPort, hpnicfPosaCallerStatEntry=hpnicfPosaCallerStatEntry, hpnicfPosaTcpTermStatRowStatus=hpnicfPosaTcpTermStatRowStatus, hpnicfPosaTcpTradeTimeout=hpnicfPosaTcpTradeTimeout, hpnicfPosaAppErrPkts=hpnicfPosaAppErrPkts, hpnicfPosaTcpTermStatIPMask=hpnicfPosaTcpTermStatIPMask, hpnicfPosaAppHostPort=hpnicfPosaAppHostPort, hpnicfPosa=hpnicfPosa, hpnicfPosaFcmConfTable=hpnicfPosaFcmConfTable, hpnicfPosaFcmStatConnectFailCnts=hpnicfPosaFcmStatConnectFailCnts, hpnicfPosaTcpTermErrPkts=hpnicfPosaTcpTermErrPkts, hpnicfPosaTerminalCfgIfIndex=hpnicfPosaTerminalCfgIfIndex, hpnicfPosaTcpConnectionThreshold=hpnicfPosaTcpConnectionThreshold, hpnicfPosaTcpTermOutDiscardedPkts=hpnicfPosaTcpTermOutDiscardedPkts, hpnicfPosaFcmTradeTimeout=hpnicfPosaFcmTradeTimeout, hpnicfPosaFcmStatTransCnts=hpnicfPosaFcmStatTransCnts, hpnicfPosaAppConnectTimeout=hpnicfPosaAppConnectTimeout, hpnicfPosaFcmNegoScrmbBinary1=hpnicfPosaFcmNegoScrmbBinary1, hpnicfPosaTcpTermStatIPType=hpnicfPosaTcpTermStatIPType, hpnicfPosaCallerStatTable=hpnicfPosaCallerStatTable, hpnicfPosaFcmLnkNegoFailTrapEnable=hpnicfPosaFcmLnkNegoFailTrapEnable, hpnicfPosaFcmConnectionNumber=hpnicfPosaFcmConnectionNumber, hpnicfPosaAppOutDiscardedPkts=hpnicfPosaAppOutDiscardedPkts, hpnicfPosaTerminalRowStatus=hpnicfPosaTerminalRowStatus, hpnicfPosaTcpTermStatEntry=hpnicfPosaTcpTermStatEntry, hpnicfPosaAppDistributeErrCnts=hpnicfPosaAppDistributeErrCnts, hpnicfPosaAppHostIP=hpnicfPosaAppHostIP, hpnicfPosaFcmConnectionTrapEnable=hpnicfPosaFcmConnectionTrapEnable, hpnicfPosaTpduChangeStrategy=hpnicfPosaTpduChangeStrategy, hpnicfPosaTcpTermRecvPkts=hpnicfPosaTcpTermRecvPkts, hpnicfPosaTerminalEntry=hpnicfPosaTerminalEntry, hpnicfPosaAppStateChange=hpnicfPosaAppStateChange, hpnicfPosaTerminalTransAppID=hpnicfPosaTerminalTransAppID, hpnicfPosaTerminalOutDiscardedPkts=hpnicfPosaTerminalOutDiscardedPkts, hpnicfPosaBatchTerminalFirstID=hpnicfPosaBatchTerminalFirstID, hpnicfPosaCallerIDTransEnable=hpnicfPosaCallerIDTransEnable, hpnicfPosaFcmStatTransSuccessCnts=hpnicfPosaFcmStatTransSuccessCnts, hpnicfPosaCallerInDiscardedPkts=hpnicfPosaCallerInDiscardedPkts, hpnicfPosaTerminalSendPkts=hpnicfPosaTerminalSendPkts, hpnicfPosaAppRouterIP=hpnicfPosaAppRouterIP, hpnicfPosaAppIfIndex=hpnicfPosaAppIfIndex, hpnicfPosaTables=hpnicfPosaTables, hpnicfPosaTrap=hpnicfPosaTrap, hpnicfPosaTcpTermStatIndex=hpnicfPosaTcpTermStatIndex, hpnicfPosaFcmConnectionExceed=hpnicfPosaFcmConnectionExceed, hpnicfPosaTcpTradeExceed=hpnicfPosaTcpTradeExceed, hpnicfPosaTerminalTable=hpnicfPosaTerminalTable, hpnicfPosaTrapObjects=hpnicfPosaTrapObjects, hpnicfPosaTerminalName=hpnicfPosaTerminalName, hpnicfPosaAppTable=hpnicfPosaAppTable, hpnicfPosaAppID=hpnicfPosaAppID, hpnicfPosaFcmThresholdRlsdOn=hpnicfPosaFcmThresholdRlsdOn, hpnicfPosaAppHelloInterval=hpnicfPosaAppHelloInterval, hpnicfPosaBackupAppID=hpnicfPosaBackupAppID, hpnicfPosaTcpTermStatIP=hpnicfPosaTcpTermStatIP, hpnicfPosaFcmNegoUnscrmbBinary1=hpnicfPosaFcmNegoUnscrmbBinary1, hpnicfPosaTcpTermStatTable=hpnicfPosaTcpTermStatTable, hpnicfPosaFcmPhyNegoFailTrapEnable=hpnicfPosaFcmPhyNegoFailTrapEnable, hpnicfPosaAppServiceType=hpnicfPosaAppServiceType, hpnicfPosaFcmAnswerTimeout=hpnicfPosaFcmAnswerTimeout, hpnicfPosaBatchTerminalTable=hpnicfPosaBatchTerminalTable, hpnicfPosaTerminalInDiscardedPkts=hpnicfPosaTerminalInDiscardedPkts, HpnicfPeerState=HpnicfPeerState, hpnicfPosaAppHello=hpnicfPosaAppHello, hpnicfPosaCallerRecvPkts=hpnicfPosaCallerRecvPkts, hpnicfPosaSrvStateChangeTrapEnable=hpnicfPosaSrvStateChangeTrapEnable, hpnicfPosaAppRowStatus=hpnicfPosaAppRowStatus, hpnicfPosaFcmThresholdRlsdOff=hpnicfPosaFcmThresholdRlsdOff, hpnicfPosaAppRouterPort=hpnicfPosaAppRouterPort, hpnicfPosaFcmConnectionThreshold=hpnicfPosaFcmConnectionThreshold, hpnicfPosaAppSendPkts=hpnicfPosaAppSendPkts, HpnicfAppMode=HpnicfAppMode, hpnicfPosaBatchTerminalEntry=hpnicfPosaBatchTerminalEntry, hpnicfPosaTerminalAccessType=hpnicfPosaTerminalAccessType, hpnicfPosaAppStateChangeObject=hpnicfPosaAppStateChangeObject, hpnicfPosaTerminalMapErrCnts=hpnicfPosaTerminalMapErrCnts, hpnicfPosaTcpTradeLimit=hpnicfPosaTcpTradeLimit, hpnicfPosaTerminalHangUpTrapEnable=hpnicfPosaTerminalHangUpTrapEnable, hpnicfPosaFcmNegoSilence=hpnicfPosaFcmNegoSilence, hpnicfPosaFcmStatTable=hpnicfPosaFcmStatTable, hpnicfPosaAppStateChangeTrapEnable=hpnicfPosaAppStateChangeTrapEnable, hpnicfPosaTerminalRecvPkts=hpnicfPosaTerminalRecvPkts, hpnicfPosaTerminalErrPkts=hpnicfPosaTerminalErrPkts, hpnicfPosaFcmConfEntry=hpnicfPosaFcmConfEntry, HpnicfAppServiceType=HpnicfAppServiceType, hpnicfPosaTerminalHangUp=hpnicfPosaTerminalHangUp, hpnicfPosaAppRouterIPType=hpnicfPosaAppRouterIPType, hpnicfPosaTerminalIfIndex=hpnicfPosaTerminalIfIndex, hpnicfPosaTerminalID=hpnicfPosaTerminalID, hpnicfPosaCallerStatRowStatus=hpnicfPosaCallerStatRowStatus, hpnicfPosaFcmThresholdAnswerTone=hpnicfPosaFcmThresholdAnswerTone, hpnicfPosaTcpConnectionTrapEnable=hpnicfPosaTcpConnectionTrapEnable, hpnicfPosaAppHostIPType=hpnicfPosaAppHostIPType, hpnicfPosaMapSrcCode=hpnicfPosaMapSrcCode, hpnicfPosaControl=hpnicfPosaControl, hpnicfPosaQuietTimeOut=hpnicfPosaQuietTimeOut, hpnicfPosaCallerOutDiscardedPkts=hpnicfPosaCallerOutDiscardedPkts, hpnicfPosaTrapPrex=hpnicfPosaTrapPrex, hpnicfPosaTerminalState=hpnicfPosaTerminalState, hpnicfPosaFcmStatTransCntsClear=hpnicfPosaFcmStatTransCntsClear, hpnicfPosaAppKeepAliveCount=hpnicfPosaAppKeepAliveCount, hpnicfPosaFcmStatEntry=hpnicfPosaFcmStatEntry, HpnicfTpduChangeStrategy=HpnicfTpduChangeStrategy, hpnicfPosaFcmStatTimeoutCnts=hpnicfPosaFcmStatTimeoutCnts, hpnicfPosaAppRecvPkts=hpnicfPosaAppRecvPkts)
