#
# PySNMP MIB module HM2-DOS-MITIGATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-DOS-MITIGATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, MibIdentifier, NotificationType, Gauge32, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Bits, IpAddress, Counter32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "NotificationType", "Gauge32", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Bits", "IpAddress", "Counter32", "TimeTicks", "iso")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
hm2DosMitigationMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 82))
hm2DosMitigationMib.setRevisions(('2012-09-18 00:00', '2012-08-20 00:00', '2012-06-06 00:00', '2012-03-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2DosMitigationMib.setRevisionsDescriptions(('Change the range of valid values for hm2DosMitigationTcpMinimalHeaderSize MIB object from (0..255) to (20..255).', 'hm2DosMitigationTcpFrag MIB object removed.', 'Add MIB objects for all features supported by XGS4 switch.', 'Initial version.',))
if mibBuilder.loadTexts: hm2DosMitigationMib.setLastUpdated('201209180000Z')
if mibBuilder.loadTexts: hm2DosMitigationMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2DosMitigationMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2DosMitigationMib.setDescription('Hirschmann Denial of Service MIB Copyright (C) 2012. All Rights Reserved.')
class DosFeatureValue(TextualConvention, Integer32):
    description = 'Type of feature support: - hw(1): Supported in Hardware - sw(2): Supported in Software - noSup(3): Not implemented (no support)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("hw", 1), ("sw", 2), ("noSup", 3))

hm2DosMitigationNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 0))
hm2DosMitigationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1))
hm2DosMitigationConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 2))
hm2DosMitigationGeneralSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1))
hm2DosMitigationTcpHdrChecks = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1))
hm2DosMitigationTcpNullScan = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpNullScan.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpNullScan.setDescription('When enabled, TCP Null scans (TCP flags and sequence number set to 0) are filtered by the device.')
hm2DosMitigationTcpXmasScan = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpXmasScan.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpXmasScan.setDescription('When enabled TCP Xmas scans (TCP flags FIN, URG and PSH all set to 1 and a TCP sequence number = 0) are filtered by the device.')
hm2DosMitigationTcpSynFinScan = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpSynFinScan.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpSynFinScan.setDescription('When enabled TCP packets with SYN and FIN flags set are filtered by the device.')
hm2DosMitigationTcpMinimalHeader = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpMinimalHeader.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpMinimalHeader.setDescription('When enabled all TCP frames are checked for a minimal valid header size. Packets that contain an invalid header size are discarded.')
hm2DosMitigationTcpMinimalHeaderSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpMinimalHeaderSize.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpMinimalHeaderSize.setDescription(' Specifies the minimum size of a valid TCP frame header size.')
hm2DosMitigationLandAttack = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationLandAttack.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationLandAttack.setDescription('When enabled all IP frames are checked for equality of src and dst IP address (known as land attack). Packets that contain such a combination are silently discarded when enabled.')
hm2DosMitigationTcpOffsetEqu1 = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 14), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpOffsetEqu1.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpOffsetEqu1.setDescription('Enable/Disable TCP offset DoS protection. All packets ingress having a TCP header offset equal to 1 are dropped.')
hm2DosMitigationTcpPrivilegedSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 15), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpPrivilegedSrcPort.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpPrivilegedSrcPort.setDescription('Enable/Disable TCP SYN and L4 source port smaller than 1024 DoS protection. All packets ingress having the TCP SYN flag set and a L4 source port from 0 to 1023 are dropped.')
hm2DosMitigationTcpSrcDstPortEqu = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 1, 16), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationTcpSrcDstPortEqu.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpSrcDstPortEqu.setDescription('Enable/Disable L4 source port equals L4 destination port DoS protection. All TCP or UDP packets ingress having the L4 source port equal to L4 destination port are dropped.')
hm2DosMitigationIcmpChecks = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 2))
hm2DosMitigationIcmpFrags = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 2, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationIcmpFrags.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationIcmpFrags.setDescription('When enabled, all fragmented ICMP packets are filtered by the device.')
hm2DosMitigationIcmpPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1472)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationIcmpPacketSize.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationIcmpPacketSize.setDescription('Specifies the max. allowed payload size of ICMP packets. Packets having bigger payload are filtered by the device if the hm2DosMitigationIcmpPacketSizeMode is enabled.')
hm2DosMitigationIcmpPacketSizeMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 2, 5), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationIcmpPacketSizeMode.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationIcmpPacketSizeMode.setDescription('When enabled all ICMP ingress packets having the payload bigger than hm2DosMitigationIcmpPacketSize are filtered by device. ')
hm2DosMitigationIcmpSmurfAttack = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 2, 6), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationIcmpSmurfAttack.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationIcmpSmurfAttack.setDescription('When enabled, all ingress ICMP packets having the type set to ECHO_REQ (ping) and a broadcast destination IP are dropped. ')
hm2DosMitigationL2Checks = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 3))
hm2DosMitigationSMacDMac = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 3, 7), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DosMitigationSMacDMac.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationSMacDMac.setDescription('Enable/Disable source MAC address equals destination MAC address DoS protection. All packets ingress having SMAC equals DMAC are dropped.')
hm2DosMitigationCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0))
hm2DosMitigationTcpHdrChecksSup = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0, 1), DosFeatureValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DosMitigationTcpHdrChecksSup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpHdrChecksSup.setDescription('The type of support for TCP header checks.')
hm2DosMitigationIcmpChecksSup = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0, 2), DosFeatureValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DosMitigationIcmpChecksSup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationIcmpChecksSup.setDescription('The type of support for ICMP checks.')
hm2DosMitigationTcpSynLimitSup = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0, 3), DosFeatureValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DosMitigationTcpSynLimitSup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpSynLimitSup.setDescription('The type of support for TCP SYN limiter.')
hm2DosMitigationArpLimitSup = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0, 4), DosFeatureValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DosMitigationArpLimitSup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationArpLimitSup.setDescription('The type of support for ARP limiter.')
hm2DosMitigationTcpNullScanSup = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0, 5), DosFeatureValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DosMitigationTcpNullScanSup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpNullScanSup.setDescription('The type of support for TCP Null Scan.')
hm2DosMitigationTcpXmasSup = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0, 6), DosFeatureValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DosMitigationTcpXmasSup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpXmasSup.setDescription('The type of support for TCP Xmas Scan.')
hm2DosMitigationTcpLandSup = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 1, 0, 7), DosFeatureValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DosMitigationTcpLandSup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationTcpLandSup.setDescription('The type of support for land attack detection.')
hm2DosMitigationLimiter = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2))
hm2DosMitigationLimiterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 1))
hm2DosMitigationLimiterRules = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 2))
hm2DosMitigationLimiterRuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 2, 1), )
if mibBuilder.loadTexts: hm2DosMitigationLimiterRuleTable.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationLimiterRuleTable.setDescription('TCP Syn Limiter Interface Table')
hm2DosMitigationLimiterRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 2, 1, 1), ).setIndexNames((0, "HM2-DOS-MITIGATION-MIB", "hm2DosMitigationLimiterInterface"))
if mibBuilder.loadTexts: hm2DosMitigationLimiterRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationLimiterRuleEntry.setDescription('TCP Syn Interface entry.')
hm2DosMitigationLimiterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2DosMitigationLimiterInterface.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationLimiterInterface.setDescription('The interface the limiter is assigned to.')
hm2DosMitigationLimiterTcpSynLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DosMitigationLimiterTcpSynLimit.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationLimiterTcpSynLimit.setDescription('The number of allowed outgoing TCP syn packets per second per interface. A value of 0 disables the limiter for this interface.')
hm2DosMitigationLimiterArpLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DosMitigationLimiterArpLimit.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationLimiterArpLimit.setDescription('The number of allowed outgoing ARP packets per second per interface. A value of 0 disables the limiter for this interface.')
hm2DosMitigationLimiterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 82, 1, 2, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2DosMitigationLimiterRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationLimiterRowStatus.setDescription('Row status.')
hm2DosMitigationCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 2, 1))
hm2DosMitigationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 82, 2, 2))
hm2DosMitigationCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 248, 11, 82, 2, 1, 1)).setObjects(("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2DosMitigationCompliance = hm2DosMitigationCompliance.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationCompliance.setDescription('The compliance statement for an SNMP entity which implements the Hirschmann DOS Mitigation MIB.')
hm2DosMitigationGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 248, 11, 82, 2, 2, 1)).setObjects(("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpSynFinScan"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpNullScan"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpXmasScan"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpMinimalHeader"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpMinimalHeaderSize"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationLandAttack"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpOffsetEqu1"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpPrivilegedSrcPort"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpSrcDstPortEqu"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationIcmpFrags"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationIcmpPacketSize"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationIcmpPacketSizeMode"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationSMacDMac"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpHdrChecksSup"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationIcmpChecksSup"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpSynLimitSup"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationArpLimitSup"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationLimiterInterface"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationLimiterTcpSynLimit"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationLimiterArpLimit"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationLimiterRowStatus"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpXmasSup"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpNullScanSup"), ("HM2-DOS-MITIGATION-MIB", "hm2DosMitigationTcpLandSup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hm2DosMitigationGeneralGroup = hm2DosMitigationGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: hm2DosMitigationGeneralGroup.setDescription('A collection of all Hirschmann objects provided by the DoS Mitigation module.')
mibBuilder.exportSymbols("HM2-DOS-MITIGATION-MIB", hm2DosMitigationTcpLandSup=hm2DosMitigationTcpLandSup, hm2DosMitigationArpLimitSup=hm2DosMitigationArpLimitSup, hm2DosMitigationLimiter=hm2DosMitigationLimiter, hm2DosMitigationGeneralGroup=hm2DosMitigationGeneralGroup, hm2DosMitigationLimiterInterface=hm2DosMitigationLimiterInterface, hm2DosMitigationTcpHdrChecks=hm2DosMitigationTcpHdrChecks, hm2DosMitigationIcmpChecks=hm2DosMitigationIcmpChecks, hm2DosMitigationTcpMinimalHeader=hm2DosMitigationTcpMinimalHeader, hm2DosMitigationGeneralSettings=hm2DosMitigationGeneralSettings, hm2DosMitigationTcpXmasSup=hm2DosMitigationTcpXmasSup, DosFeatureValue=DosFeatureValue, hm2DosMitigationMib=hm2DosMitigationMib, hm2DosMitigationCapabilities=hm2DosMitigationCapabilities, hm2DosMitigationCompliance=hm2DosMitigationCompliance, hm2DosMitigationLimiterArpLimit=hm2DosMitigationLimiterArpLimit, hm2DosMitigationTcpSynFinScan=hm2DosMitigationTcpSynFinScan, hm2DosMitigationTcpNullScanSup=hm2DosMitigationTcpNullScanSup, hm2DosMitigationGroups=hm2DosMitigationGroups, hm2DosMitigationL2Checks=hm2DosMitigationL2Checks, hm2DosMitigationLimiterObjects=hm2DosMitigationLimiterObjects, hm2DosMitigationTcpXmasScan=hm2DosMitigationTcpXmasScan, hm2DosMitigationCompliances=hm2DosMitigationCompliances, hm2DosMitigationTcpPrivilegedSrcPort=hm2DosMitigationTcpPrivilegedSrcPort, hm2DosMitigationConformance=hm2DosMitigationConformance, hm2DosMitigationTcpOffsetEqu1=hm2DosMitigationTcpOffsetEqu1, hm2DosMitigationLimiterRuleEntry=hm2DosMitigationLimiterRuleEntry, hm2DosMitigationIcmpChecksSup=hm2DosMitigationIcmpChecksSup, hm2DosMitigationObjects=hm2DosMitigationObjects, hm2DosMitigationTcpNullScan=hm2DosMitigationTcpNullScan, hm2DosMitigationSMacDMac=hm2DosMitigationSMacDMac, hm2DosMitigationTcpMinimalHeaderSize=hm2DosMitigationTcpMinimalHeaderSize, hm2DosMitigationLimiterRowStatus=hm2DosMitigationLimiterRowStatus, hm2DosMitigationTcpSrcDstPortEqu=hm2DosMitigationTcpSrcDstPortEqu, hm2DosMitigationNotifications=hm2DosMitigationNotifications, hm2DosMitigationIcmpPacketSizeMode=hm2DosMitigationIcmpPacketSizeMode, hm2DosMitigationLimiterRuleTable=hm2DosMitigationLimiterRuleTable, hm2DosMitigationIcmpSmurfAttack=hm2DosMitigationIcmpSmurfAttack, hm2DosMitigationTcpSynLimitSup=hm2DosMitigationTcpSynLimitSup, hm2DosMitigationTcpHdrChecksSup=hm2DosMitigationTcpHdrChecksSup, hm2DosMitigationLimiterTcpSynLimit=hm2DosMitigationLimiterTcpSynLimit, PYSNMP_MODULE_ID=hm2DosMitigationMib, hm2DosMitigationLimiterRules=hm2DosMitigationLimiterRules, hm2DosMitigationLandAttack=hm2DosMitigationLandAttack, hm2DosMitigationIcmpFrags=hm2DosMitigationIcmpFrags, hm2DosMitigationIcmpPacketSize=hm2DosMitigationIcmpPacketSize)
