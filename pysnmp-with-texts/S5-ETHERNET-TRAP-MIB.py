#
# PySNMP MIB module S5-ETHERNET-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-ETHERNET-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
s5EnRedPortCompanionPortNum, s5EnRedPortOperStatus, s5EnRedPortCompanionBrdNum, s5EnRedPortRedundMode, s5EnRedPortRemoteOperStatus = mibBuilder.importSymbols("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortCompanionPortNum", "s5EnRedPortOperStatus", "s5EnRedPortCompanionBrdNum", "s5EnRedPortRedundMode", "s5EnRedPortRemoteOperStatus")
s5EnPortLinkStatus, s5EnPortPartStatus, s5EnPortJabberStatus = mibBuilder.importSymbols("S5-ETHERNET-COMMON-MIB", "s5EnPortLinkStatus", "s5EnPortPartStatus", "s5EnPortJabberStatus")
s5EthTrap, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5EthTrap")
s5SbsViolationStatusBrdIndx, s5SbsMgmViolationType, s5SbsViolationStatusMACAddress, s5SbsViolationStatusPortIndx, s5SbsMgmViolationIpAddress = mibBuilder.importSymbols("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusBrdIndx", "s5SbsMgmViolationType", "s5SbsViolationStatusMACAddress", "s5SbsViolationStatusPortIndx", "s5SbsMgmViolationIpAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Counter64, Counter32, Bits, NotificationType, ObjectIdentity, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Counter64", "Counter32", "Bits", "NotificationType", "ObjectIdentity", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
s5EthernetTrapMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0))
s5EthernetTrapMib.setRevisions(('2012-02-28 00:00', '2009-07-29 00:00', '2009-02-25 00:00', '2004-07-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: s5EthernetTrapMib.setRevisionsDescriptions(('Version 124: Added s5EtrMacAddressTablesThresholdReached.', 'Version 123: Fixed conversion to SMIv2', 'Version 115: Added additional mac security support.', 'Version 114: Conversion to SMIv2',))
if mibBuilder.loadTexts: s5EthernetTrapMib.setLastUpdated('201202280000Z')
if mibBuilder.loadTexts: s5EthernetTrapMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: s5EthernetTrapMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: s5EthernetTrapMib.setDescription("5000 Ethernet Trap MIB Copyright 1993-2009 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification (Specification) embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
s5EtrPortAutoPart = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 1)).setObjects(("S5-ETHERNET-COMMON-MIB", "s5EnPortPartStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrPortAutoPart.setStatus('current')
if mibBuilder.loadTexts: s5EtrPortAutoPart.setDescription('A port was auto partitioned (wrapped). This trap is sent only once when the condition is first detected. The following values are returned: s5EnPortPartStatus.....the partition status of the port, with the instance identifying the board and the port. s5EnPortJabberStatus...the jabber status of the DTE(s) connected to the port, with the instance identifying the board and the port.')
s5EtrPortDteJabbering = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 2)).setObjects(("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrPortDteJabbering.setStatus('current')
if mibBuilder.loadTexts: s5EtrPortDteJabbering.setDescription('An ethernet DTE started jabbering. This trap is sent only once when the condition is first detected. The following values are returned: s5EnPortJabberStatus...the jabber status of the DTE(s) connected to the port, with the instance identifying the board and the port.')
s5EtrRedPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 3)).setObjects(("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortOperStatus"), ("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortCompanionBrdNum"), ("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortCompanionPortNum"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortPartStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortLinkStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrRedPortFailure.setStatus('current')
if mibBuilder.loadTexts: s5EtrRedPortFailure.setDescription('A port that is in a redundant pair developed a fault. This trap is sent once when the condition is first detected. For all objects returned in the trap, the instance identifies the board and the port index. The following values are returned: s5EnRedPortOperStatus.........The status of the port. The value will distinguish between a local fault, a remote fault, and a missing board. s5EnRedPortCompanionBrdNum....The index of the slot containing the board of the other port in the redundant pair. s5EnRedPortCompanionPortNum...The index of the other port in the redundant pair. s5EnPortPartStatus, s5EnPortLinkStatus and s5EnPortJabberStatus..........These values may help determine the cause of the local fault.')
s5EtrRedBadRemCfgDetected = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 4)).setObjects(("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortRemoteOperStatus"), ("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortRedundMode"))
if mibBuilder.loadTexts: s5EtrRedBadRemCfgDetected.setStatus('current')
if mibBuilder.loadTexts: s5EtrRedBadRemCfgDetected.setDescription('This trap is sent periodically when the NMM detects a remoteOperStatus of invalid on a port set for redundancy. The instance identifies the board and port index. The following values are returned: s5EnRedPortRemoteOperStatus.....The value of the received signal from the remote port. s5EnRedPortRedundMode...the redundancy mode of the port.')
s5EtrSbsMacAccessViolation = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 5)).setObjects(("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusBrdIndx"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusPortIndx"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusMACAddress"))
if mibBuilder.loadTexts: s5EtrSbsMacAccessViolation.setStatus('current')
if mibBuilder.loadTexts: s5EtrSbsMacAccessViolation.setDescription('This trap is sent when the switch device detects a Mac_address based security violation on a port set by s5SbsSecurityAction defined in s5sbs100.mib. This trap is sent only once when the condition is first detected. The following values are returned: s5SbsViolationStatusBrdIndx...the Board number on which a security violation was seen. s5SbsViolationStatusPortIndx...the Port number on which a security violation was seen. s5SbsViolationStatusMACIndx...the mac address triggers this violation')
s5EtrMgmAccessViolation = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 6)).setObjects(("S5-SWITCH-BAYSECURE-MIB", "s5SbsMgmViolationType"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsMgmViolationIpAddress"))
if mibBuilder.loadTexts: s5EtrMgmAccessViolation.setStatus('current')
if mibBuilder.loadTexts: s5EtrMgmAccessViolation.setDescription('This trap is sent when the switch device detects a management access violation on the switch. This trap is sent only once when the condition is first detected. The following values are returned: s5SbsMgmViolationType.....WEB access violation or telnet access violation or SNMP access violation. s5SbsMgmViolationIpAddress...the invalid IP address.')
s5EtrPortManualPart = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 7)).setObjects(("S5-ETHERNET-COMMON-MIB", "s5EnPortPartStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrPortManualPart.setStatus('current')
if mibBuilder.loadTexts: s5EtrPortManualPart.setDescription('A port was manually partitioned (wrapped). This trap is sent once when the port is initially partitioned. The following values are returned: s5EnPortPartStatus.....the partition status of the port, with the instance identifying the board and the port. s5EnPortJabberStatus...the jabber status of the DTE(s) connected to the port, with the instance identifying the board and the port.')
s5EtrSbsMacTableFull = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 1))
if mibBuilder.loadTexts: s5EtrSbsMacTableFull.setStatus('current')
if mibBuilder.loadTexts: s5EtrSbsMacTableFull.setDescription('This trap is sent when the mac-security address table is filled.')
s5EtrSbsMacTableClearedForPort = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 2)).setObjects(("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusBrdIndx"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusPortIndx"))
if mibBuilder.loadTexts: s5EtrSbsMacTableClearedForPort.setStatus('current')
if mibBuilder.loadTexts: s5EtrSbsMacTableClearedForPort.setDescription('This trap is sent when the mac-security address table is cleared for a particular port.')
s5EtrSbsMacTableCleared = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 3))
if mibBuilder.loadTexts: s5EtrSbsMacTableCleared.setStatus('current')
if mibBuilder.loadTexts: s5EtrSbsMacTableCleared.setDescription('This trap is sent when the mac-security address table is cleared for all ports.')
s5EtrSbsMacRemoved = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 4)).setObjects(("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusBrdIndx"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusPortIndx"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusMACAddress"))
if mibBuilder.loadTexts: s5EtrSbsMacRemoved.setStatus('current')
if mibBuilder.loadTexts: s5EtrSbsMacRemoved.setDescription('This trap is sent when a mac address is removed from the mac-security address table.')
s5EtrNewSbsMacAccessViolation = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 5)).setObjects(("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusBrdIndx"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusPortIndx"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsViolationStatusMACAddress"))
if mibBuilder.loadTexts: s5EtrNewSbsMacAccessViolation.setStatus('current')
if mibBuilder.loadTexts: s5EtrNewSbsMacAccessViolation.setDescription('This trap is sent when the switch device detects a Mac_address based security violation on a port set by s5SbsSecurityAction defined in s5sbs100.mib. This trap is sent only once when the condition is first detected. The following values are returned: s5SbsViolationStatusBrdIndx...the Board number on which a security violation was seen. s5SbsViolationStatusPortIndx...the Port number on which a security violation was seen. s5SbsViolationStatusMACIndx...the mac address triggers this violation')
s5EtrNewMgmAccessViolation = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 6)).setObjects(("S5-SWITCH-BAYSECURE-MIB", "s5SbsMgmViolationType"), ("S5-SWITCH-BAYSECURE-MIB", "s5SbsMgmViolationIpAddress"))
if mibBuilder.loadTexts: s5EtrNewMgmAccessViolation.setStatus('current')
if mibBuilder.loadTexts: s5EtrNewMgmAccessViolation.setDescription('This trap is sent when the switch device detects a management access violation on the switch. This trap is sent only once when the condition is first detected. The following values are returned: s5SbsMgmViolationType.....WEB access violation or telnet access violation or SNMP access violation. s5SbsMgmViolationIpAddress...the invalid IP address.')
s5EtrNewPortManualPart = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 7)).setObjects(("S5-ETHERNET-COMMON-MIB", "s5EnPortPartStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrNewPortManualPart.setStatus('current')
if mibBuilder.loadTexts: s5EtrNewPortManualPart.setDescription('A port was manually partitioned (wrapped). This trap is sent once when the port is initially partitioned. The following values are returned: s5EnPortPartStatus.....the partition status of the port, with the instance identifying the board and the port. s5EnPortJabberStatus...the jabber status of the DTE(s) connected to the port, with the instance identifying the board and the port.')
s5EtrNewPortAutoPart = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 8)).setObjects(("S5-ETHERNET-COMMON-MIB", "s5EnPortPartStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrNewPortAutoPart.setStatus('current')
if mibBuilder.loadTexts: s5EtrNewPortAutoPart.setDescription('A port was auto partitioned (wrapped). This trap is sent only once when the condition is first detected. The following values are returned: s5EnPortPartStatus.....the partition status of the port, with the instance identifying the board and the port. s5EnPortJabberStatus...the jabber status of the DTE(s) connected to the port, with the instance identifying the board and the port.')
s5EtrNewPortDteJabbering = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 9)).setObjects(("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrNewPortDteJabbering.setStatus('current')
if mibBuilder.loadTexts: s5EtrNewPortDteJabbering.setDescription('An ethernet DTE started jabbering. This trap is sent only once when the condition is first detected. The following values are returned: s5EnPortJabberStatus...the jabber status of the DTE(s) connected to the port, with the instance identifying the board and the port.')
s5EtrNewRedPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 10)).setObjects(("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortOperStatus"), ("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortCompanionBrdNum"), ("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortCompanionPortNum"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortPartStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortLinkStatus"), ("S5-ETHERNET-COMMON-MIB", "s5EnPortJabberStatus"))
if mibBuilder.loadTexts: s5EtrNewRedPortFailure.setStatus('current')
if mibBuilder.loadTexts: s5EtrNewRedPortFailure.setDescription('A port that is in a redundant pair developed a fault. This trap is sent once when the condition is first detected. For all objects returned in the trap, the instance identifies the board and the port index. The following values are returned: s5EnRedPortOperStatus.........The status of the port. The value will distinguish between a local fault, a remote fault, and a missing board. s5EnRedPortCompanionBrdNum....The index of the slot containing the board of the other port in the redundant pair. s5EnRedPortCompanionPortNum...The index of the other port in the redundant pair. s5EnPortPartStatus, s5EnPortLinkStatus and s5EnPortJabberStatus..........These values may help determine the cause of the local fault.')
s5EtrNewRedBadRemCfgDetected = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 11)).setObjects(("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortRemoteOperStatus"), ("S5-ETH-REDUNDANT-LINKS-MIB", "s5EnRedPortRedundMode"))
if mibBuilder.loadTexts: s5EtrNewRedBadRemCfgDetected.setStatus('current')
if mibBuilder.loadTexts: s5EtrNewRedBadRemCfgDetected.setDescription('This trap is sent periodically when the NMM detects a remoteOperStatus of invalid on a port set for redundancy. The instance identifies the board and port index. The following values are returned: s5EnRedPortRemoteOperStatus.....The value of the received signal from the remote port. s5EnRedPortRedundMode...the redundancy mode of the port.')
s5EtrMacAddressTablesThresholdReached = NotificationType((1, 3, 6, 1, 4, 1, 45, 1, 6, 2, 1, 0, 12))
if mibBuilder.loadTexts: s5EtrMacAddressTablesThresholdReached.setStatus('current')
if mibBuilder.loadTexts: s5EtrMacAddressTablesThresholdReached.setDescription('A s5EtrMacAddressTablesThresholdReached trap signifies that the MAC address tables threshold is reached.')
mibBuilder.exportSymbols("S5-ETHERNET-TRAP-MIB", s5EtrRedPortFailure=s5EtrRedPortFailure, s5EtrRedBadRemCfgDetected=s5EtrRedBadRemCfgDetected, s5EtrNewRedPortFailure=s5EtrNewRedPortFailure, s5EtrNewPortDteJabbering=s5EtrNewPortDteJabbering, s5EtrSbsMacTableCleared=s5EtrSbsMacTableCleared, s5EtrNewRedBadRemCfgDetected=s5EtrNewRedBadRemCfgDetected, s5EtrSbsMacAccessViolation=s5EtrSbsMacAccessViolation, s5EtrPortDteJabbering=s5EtrPortDteJabbering, s5EtrMacAddressTablesThresholdReached=s5EtrMacAddressTablesThresholdReached, s5EtrNewSbsMacAccessViolation=s5EtrNewSbsMacAccessViolation, s5EtrSbsMacTableClearedForPort=s5EtrSbsMacTableClearedForPort, s5EthernetTrapMib=s5EthernetTrapMib, s5EtrNewPortAutoPart=s5EtrNewPortAutoPart, s5EtrPortAutoPart=s5EtrPortAutoPart, s5EtrMgmAccessViolation=s5EtrMgmAccessViolation, s5EtrNewMgmAccessViolation=s5EtrNewMgmAccessViolation, s5EtrSbsMacTableFull=s5EtrSbsMacTableFull, s5EtrSbsMacRemoved=s5EtrSbsMacRemoved, s5EtrPortManualPart=s5EtrPortManualPart, PYSNMP_MODULE_ID=s5EthernetTrapMib, s5EtrNewPortManualPart=s5EtrNewPortManualPart)
