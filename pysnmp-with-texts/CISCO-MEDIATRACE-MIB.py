#
# PySNMP MIB module CISCO-MEDIATRACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MEDIATRACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
FlowMetricValue, = mibBuilder.importSymbols("CISCO-FLOW-MONITOR-TC-MIB", "FlowMetricValue")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Counter64, ModuleIdentity, Gauge32, iso, Bits, Integer32, NotificationType, Unsigned32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Counter64", "ModuleIdentity", "Gauge32", "iso", "Bits", "Integer32", "NotificationType", "Unsigned32", "ObjectIdentity", "TimeTicks")
TruthValue, TimeStamp, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "DisplayString", "RowStatus", "TextualConvention")
ciscoMediatraceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 800))
ciscoMediatraceMIB.setRevisions(('2012-08-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMediatraceMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoMediatraceMIB.setLastUpdated('201208230000Z')
if mibBuilder.loadTexts: ciscoMediatraceMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMediatraceMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-mediatrace@cisco.com')
if mibBuilder.loadTexts: ciscoMediatraceMIB.setDescription("Mediatrace helps to isolate and troubleshoot network degradation problems by enabling a network administrator to discover an Internet Protocol (IP) flow's path, dynamically enable monitoring capabilities on the nodes along the path, and collect information on a hop-by-hop basis. This information includes, among other things, flow statistics, and utilization information for incoming and outgoing interfaces, CPUs, and memory, as well as any changes to IP routes. This information can be retrieved by configuring Cisco Mediatrace to start a recurring monitoring session at a specific time and on specific days. The session can be configured to specify which metrics to collect, and how frequently they are collected. The hops along the path are automatically discovered as part of the operation. This module defines a MIB for the features of configuring Mediatrace sessions and obtain statistics data for a particular hop at a specific time. INITIATOR/RESPONDER ==================== At the top level, this MIB module describes the initiator and responder roles for the device. The scalar objects corresponding to each role are used to enable and set parameters like maximum sessions supported, IP address used for enabling the initiator,etc. Some of the scalar objects are used to obtain information about a particular role for the device. At a time the device supports a single initiator and/or single responder. The following scalar objects are used for enabling the initiator, +---------> cMTInitiatorEnable +---------> cMTInitiatorSourceInterface +---------> cMTInitiatorSourceAddressType +---------> cMTInitiatorSourceAddress +---------> cMTInitiatorMaxSessions In addition to the above objects, the following objects are used for obtaining information about the initiator role on the device, +---------> cMTInitiatorSoftwareVersionMajor +---------> cMTInitiatorSoftwareVersionMinor +---------> cMTInitiatorProtocolVersionMajor +---------> cMTInitiatorProtocolVersionMinor +---------> cMTInitiatorConfiguredSessions +---------> cMTInitiatorPendingSessions +---------> cMTInitiatorInactiveSessions +---------> cMTInitiatorActiveSessions The following scalar objects are used for enabling the responder, +---------> cMTResponderEnable +---------> cMTResponderMaxSessions In addition to the above objects, the following object is used for obtaining information about the responder role on the device, +---------> cMTResponderActiveSessions CONTROL TABLES =============== At the next level, this MIB module describes the entities - path specifier, flow specifier, session params and profile. This section also includes the session and scheduling entities. Each row in the cMTSessionTable corresponds to a single session. The session is a container and hence the path specifier, flow specifier, session params and profile objects for each session point to the corresponding entities in the cMTPathSpecifierTable, cMTFlowSpecifierTable, cMTSessionParamsTable, cMTMediaMonitorProfileTable and cMTSystemProfileTable tables. o cMTPathSpecifierTable - describes path specifiers. o cMTFlowSpecifierTable - describes flow specifiers. o cMTSessionParamsTable - describes session params entities. o cMTMediaMonitorProfileTable - describes media monitor profile. o cMTSystemProfileTable - describes system profiles. The cMTSessionTable has a sparse dependent relationship with each of these tables, as there exist situations when data from those tables may not be used for a particular session, including : 1) The session using system profile does not need flow specifier. 2) The session using media monitor profile may not need optional flow specifier. 3) The session may only use one of the two profiles, system or media monitor. o cMTSessionTable - describes sessions. o cMTScheduleTable - describes scheduling entities for the sessions. The cMTScheduleTable has sparse dependent relationship on the cMTSessionTable, as there exist situations when the a session is not available for scheduling, including - a session is created but is not yet scheduled. +----------------------+ | cMTPathSpecifierTable| | | +-----------------------------+ | cMTPathSpecifierName = ps1 | +-----------------------------+ | | +-----------------------------+ | cMTPathSpecifierName = ps2 | +-----------------------------+ : : : : +-----------------------------+ | cMTPathSpecifierName = ps6 | +-----------------------------+ | | +----------------------+ +----------------------+ | cMTFlowSpecifierTable| | | +-----------------------------+ | cMTFlowSpecifierName = fs1 | +-----------------------------+ | | +-----------------------------+ | cMTFlowSpecifierName = fs2 | +-----------------------------+ : : : : +-----------------------------+ | cMTFlowSpecifierName = fs6 | +-----------------------------+ | | +----------------------+ +-------------------------+ +----------------------+ | cMTSessionTable | | cMTSessionParamsTable| | | | | +-------------------------------------+ +--------------------------+ | cMTSessionNumber = 1 | |cMTSessionParamsName = sp1| | +---------------------------------+ | +--------------------------+ | |cMTSessionPathSpecifierName = ps1| | | | | +---------------------------------+ | +--------------------------+ | | |cMTSessionParamsName = sp2| | +---------------------------------+ | +--------------------------+ | |cMTSessionParamName = sp1 | | : : | +---------------------------------+ | : : | | +--------------------------+ | +---------------------------------+ | |cMTSessionParamsName = sp5| | |cMTSessionProfileName = rtp1 | | +--------------------------+ | +---------------------------------+ | | | | | +-----------------------+ | +---------------------------------+ | | |cMTSessionFlowSpecifierName = fs1| | | +---------------------------------+ | | | | +---------------------------------+ | | |cMTSessionTraceRouteEnabled = T | | | +---------------------------------+ | | | +-------------------------------------+ | | | | +-------------------------------------+ | cMTSessionNumber = 2 | | +---------------------------------+ | +---------------------------+ | |cMTSessionPathSpecifierName = ps2| | |cMTMediaMonitorProfileTable| | +---------------------------------+ | | | | | +-----------------------------+ | +---------------------------------+ | |cMTMediaMonitorProfileName | | |cMTSessionParamName = sp5 | | | =rtp1 | | +---------------------------------+ | +-----------------------------+ | | | | | +---------------------------------+ | +-----------------------------+ | |cMTSessionProfileName = intf1 | | |cMTMediaMonitorProfileName | | +---------------------------------+ | | =rtp1 | | | +-----------------------------+ | +---------------------------------+ | : : | |cMTSessionTraceRouteEnabled = T | | : : | +---------------------------------+ | +-----------------------------+ | | |cMTMediaMonitorProfileName | +-------------------------------------+ | =tcp1 | : : +-----------------------------+ : : | | +-------------------------------------+ +---------------------------+ | cMTSessionNumber = 10 | | +---------------------------------+ | | |cMTSessionPathSpecifierName = ps1| | | +---------------------------------+ | | | | +---------------------------------+ | | |cMTSessionParamName = sp1 | | | +---------------------------------+ | | | | +---------------------------------+ | | |cMTSessionProfileName = tcp1 | | | +---------------------------------+ | | | | +---------------------------------+ | | |cMTSessionTraceRouteEnabled = T | | | +---------------------------------+ | | | +-------------------------------------+ | | | | +-------------------------+ +----------------------+ | cMTSystemProfileTable| | | +-----------------------------+ | cMTSystemProfileName = intf1| +-----------------------------+ | | +-----------------------------+ | cMTSystemProfileName = cpu1 | +-----------------------------+ : : : : +-----------------------------+ | cMTSystemProfileName = intf2| +-----------------------------+ | | +----------------------+ DEFINITIONS =============== Mediatrace Initiator - This is the entity that supports creation of periodic sessions using global session id. Initiator can send request, collects the responses to those request and processes them for reporting. Henceforth, it will be referred as initiator. Mediatrace Responder - This is the entity that queries local database and features to obtain information based on the request sent by the Initiator as part of a session. The collected information is sent as response to the initiator to match the session. Henceforth, it will be referred as responder. Meta-data - Meta information about the flow not contained in the data packet. Examples of such information are global session id, multi party session id, type of application that is generating this flow e.g., telepresence. Meta-data global session identifier - it is one of the meta-data attributes which uniquely identifies a flow globally and is used to query the meta-data database for obtaining the corresponding 5-tuple (destination address, destination port, source address, source port and IP protocol) for path specifier or flow specifier. Path - This specifies the route taken by the Mediatrace request for a particular session. This can be specified in terms of single or multiple 5-tuple parameters - destination address, destination port, source address, source port and IP protocol. Gateway address and VLAN are required in cases where the path starts from network element without IP address. This is specified using path specifier entity. Path Specifier - The path specifier is generally specified using complete or partial 5-tuple (destination address, destination port, source address, source port and IP protocol) for Layer 3 initiator. Gateway and VLAN ID are required for a Layer 2 initiator. It can also use the meta-data Global session Id to specify the 5-tuple. A single row corresponds to a path specifier which is created or destroyed when a path specifier is added or removed. Each path specifier entry is uniquely identified by cMTPathSpecifierName. Examples of a path specifier are as follows, path-specifier (ps1)+-------> destination address (10.10.10.2) +-------> destination port (12344) +-------> source address (10.10.12.2) +-------> source port (12567) +-------> IP protocol (UDP) +-------> gateway (10.10.11.2) +-------> VLAN ID (601) path-specifier (ps2)+-------> meta-data global identifier (345123456) Flow - A unidirectional stream of packets conforming to a classifier. For example, packets having a particular source IP address, destination IP address, protocol type, source port number, and destination port number. This is specified using a flow specifier entity. Flow Specifier - The flow specifier is generally specified using complete or partial 5-tuple (destination address, destination port, source address, source port and IP protocol). It can also use the meta-data Global session Id to specify the 5-tuple. A single row corresponds to a flow specifier which is created or destroyed when a flow specifier is added or removed. Each flow specifier entry is uniquely identified by cMTFlowSpecifierName. Examples of a flow specifier is as follows, flow-specifier (fs1)+-------> destination address(10.11.10.2) +-------> destination port (12344) +-------> source address (10.11.12.2) +-------> source port (12567) +-------> IP protocol (UDP) flow-specifier (fs2)+-------> meta-data global identifier (345123456) Metric - It defines a measurement that reflects the quality of a traffic flow or a resource on a hop or along the path e.g. number of packets for a flow, memory utilization on a hop, number of dropped packets on an interface, etc. Metric-list - It defines logical grouping of related metrics e.g. Metric-list CPU has 1% and 2% CPU utilization metric, Metric-list interface has ingress interface speed, egress interface speed, etc. Profile - It defines the set of metric-lists to be collected from the devices along the path. It can also include additional parameters which are required for collecting the metric e.g., sampling interval (also referred as monitor interval), etc. A Profile can include a set of related metric-lists along with related configuration parameters. The metrics could be the media monitoring (also referred as performance monitoring) metrics such as jitter, packet loss, bit rate etc., or system resource utilization metrics or interface counters. Two profiles, System profile and Media Monitoring (Performance Monitoring) Profile are supported. The different profiles, metric-lists and metrics are listed below, +-----> Profile +---> Metric-list +--------> one min CPU utilization | System | CPU | | | +--------> five min CPU utilization | | | +---> Metric-list +-----> memory utilization Memory | | | +---> Metric-list +------> octets input at ingress | Interface | | +------> octets output at egress | |------> packets received with error | | at ingress | +------> packets with error at egress | +------> packets discarded at ingress | +------> packets discarded at egress | +------> ingress interface speed | +------> egress interface speed | +--> Profile +--> Metric-list +--> Common +--> loss of Media Monitor | TCP | IP | measurement confidence | | metrics | | | +--> media stop event occurred | | +--> IP packet drop count | | +--> IP byte count | | +--> IP byte rate | | +--> IP DSCP | | +--> IP TTL | | +--> IP protocol | | +---> media byte | | count | | | +--> TCP +--> TCP connect round trip | specific | delay | metrics | | +--> TCP lost event count | +--> Metric-list +--> Common +--> loss of measurement RTP | IP | confidence | metrics | | +--> media stop event occurred | +--> IP packet drop count | +--> IP byte count | +--> IP byte rate | +--> IP DSCP | +--> IP TTL | +--> IP protocol | +---> media byte count | +--> RTP +--> RTP inter arrival jitter specific | delay metrics | +--> RTP packets lost +--> RTP packets expected +--> RTP packets lost event | count +---> RTP loss percent Examples of the profiles are as follows, profile system - metric-list interface (sys1) profile media-monitor - metric-list rtp (rtp1) +-------> monitor interval (60 seconds) Session parameter Profile - These correspond to the various parameters related to session such as frequency of data collection, timeout for request, etc. These are specified using the session params entity. This is the entity that executes via a conceptual session/schedule control row and populates a conceptual statistics row. Example session parameter profile is as follows, Session-params (sp1)+-------> response timeout (10 seconds) +-------> frequency (60 seconds) +-------> history data sets (2) +-------> route change reaction time (10 seconds) +-------> inactivity timeout (180 seconds) Session - The session is a grouping of various configurable entities such as profiles, session parameters and path specifiers. Flow specifier is optional and required for media monitor profile only. Once these parameters for a mediatrace session are defined through these entities, they are combined into a mediatrace session. Example of sessions are as follows, session (1) +--------> path-specifier (ps1) +--------> session-params (sp1) +--------> profile system (sys1) metric-list interface session (2) +--------> path-specifier (ps1) +--------> session-params (sp2) +--------> profile media-monitor (rtp1) | metric-list rtp +--------> flow-specifier (fs1) A session cycles through various states in its lifetime. The different states are, Active state : A session is said to be in active state when it is requesting and collecting data from the responders. Inactive state : A session becomes inactive when it is either stopped by unscheduling or life expires. In this state it will no longer collect or request data. Pending state: A session is in pending state when the session is created but not yet scheduled to be active. Based on the state and history of a session it can be classified as configured or scheduled session. Configured session : A session which is created and is in pending or inactive state is called a configured session. It can also be a newly created session which has not been scheduled (made active) yet. Scheduled session : A session which is in active state or pending state which is already requesting and collecting data or has set a time in future to start requesting or collecting data. Responder: The responder is in active state when it is able to process the requests from the initiator, collect the data locally and send the Response back to the initiator. Reachability Address: It is the address of the interface on a responder which is used to send the response to the initiator. Statistics row - This conceptual row is indexed based on the session index, session life index, bucket number and hop information (Hop address type and Hop address). This identifies the statistics for a particular session with specific life, at a particular time and for a specific hop.")
class CiscoNTPTimeStamp(TextualConvention, OctetString):
    reference = "D.L. Mills, 'Network Time Protocol (Version 3)', RFC-1305, March 1992, Section 3.1"
    description = 'CiscoNTP timestamps are represented as a 64-bit unsigned fixed-point number, in seconds relative to 00:00 on 1 January 1900. The integer part is in the first 32 bits and the fraction part is in the last 32 bits.'
    status = 'current'
    displayHint = '4d.4d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class CiscoMediatraceSupportProtocol(TextualConvention, Integer32):
    description = 'Represents different types of layer 3 protocols supported by by Mediatrace for path and flow specification. Currently two protocols - TCP and UDP are supported.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(6, 17))
    namedValues = NamedValues(("tcp", 6), ("udp", 17))

class CiscoMediatraceDiscoveryProtocol(TextualConvention, Integer32):
    description = 'Represents different types of protocols used by Mediatrace to discover the path based on the path specifier.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(46))
    namedValues = NamedValues(("rsvp", 46))

ciscoMediatraceMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 800, 0))
ciscoMediatraceMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 800, 1))
ciscoMediatraceMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 800, 2))
cMTCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1))
cMTStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2))
cMTInitiatorEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMTInitiatorEnable.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorEnable.setDescription('This object specifies the whether the Mediatrace initiator is enabled on the network element.')
cMTInitiatorSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMTInitiatorSourceInterface.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorSourceInterface.setDescription('This object specifies the interface whose IP or IPv6 address will be used as initiator address. The Initiator address is used by layer 2 mediatrace responder to unicast the response message to initiator. This address is also reachability address for mediatrace hop 0. The value of this object should be set to ifIndex value of the desired interface from the ifTable.')
cMTInitiatorSourceAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMTInitiatorSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorSourceAddressType.setDescription('Address type (IP or IPv6) of the initiator address specified in cMTInitiatorSourceAddress object. The value should be set to unknown (0) if source interface object is non zero.')
cMTInitiatorSourceAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMTInitiatorSourceAddress.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorSourceAddress.setDescription('This object specifies the IP address used by the initiator when obtaining the reachability address from a downstream responder.')
cMTInitiatorMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMTInitiatorMaxSessions.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorMaxSessions.setDescription('This object specifies the maximum number of mediatrace sessions that can be active simultaneously on the initiator.')
cMTInitiatorSoftwareVersionMajor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorSoftwareVersionMajor.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorSoftwareVersionMajor.setDescription('This object indicates the major version number of Mediatrace application.')
cMTInitiatorSoftwareVersionMinor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorSoftwareVersionMinor.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorSoftwareVersionMinor.setDescription('This object indicates the minor version number of Mediatrace application.')
cMTInitiatorProtocolVersionMajor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorProtocolVersionMajor.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorProtocolVersionMajor.setDescription('This object indicates the major version number of Mediatrace protocol.')
cMTInitiatorProtocolVersionMinor = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorProtocolVersionMinor.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorProtocolVersionMinor.setDescription('This object indicates the minor version number of Mediatrace protocol.')
cMTInitiatorConfiguredSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorConfiguredSessions.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorConfiguredSessions.setDescription('This object indicates number of mediatrace sessions configured. The session may or may not be active.')
cMTInitiatorPendingSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorPendingSessions.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorPendingSessions.setDescription('This object indicates the current number of sessions in pending state on the initiator.')
cMTInitiatorInactiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorInactiveSessions.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorInactiveSessions.setDescription('This object indicates the current number of sessions in inactive state on the initiator.')
cMTInitiatorActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInitiatorActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cMTInitiatorActiveSessions.setDescription('This object indicates the current number of sessions in active state on the initiator.')
cMTResponderEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMTResponderEnable.setStatus('current')
if mibBuilder.loadTexts: cMTResponderEnable.setDescription("This object specifies the whether the Mediatrace responder is enabled. If set to 'true' the responder will be enabled. If set to false then mediatrace responder process will be stopped and the device will no longer be discovered as mediatrace capable hop along the flow path.")
cMTResponderMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cMTResponderMaxSessions.setStatus('current')
if mibBuilder.loadTexts: cMTResponderMaxSessions.setDescription('This object specifies the maximum number of sessions that a responder can accept from initiator.')
cMTResponderActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 17), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTResponderActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cMTResponderActiveSessions.setDescription('This object indicates the current number of sessions that are in active state on the responder.')
cMTFlowSpecifierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18), )
if mibBuilder.loadTexts: cMTFlowSpecifierTable.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierTable.setDescription('This table lists the flow specifiers contained by the device.')
cMTFlowSpecifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierName"))
if mibBuilder.loadTexts: cMTFlowSpecifierEntry.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierEntry.setDescription("An entry represents a flow specifier which can be associated with a Mediatrace session contained by the cMTSessionTable. Each entry is uniquely identified by name specified by cMTFlowSpecifierName object. A row created in this table will be shown in 'show running' command and it will not be saved into non-volatile memory.")
cMTFlowSpecifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cMTFlowSpecifierName.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierName.setDescription('A unique identifier for the flow specifier.')
cMTFlowSpecifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierRowStatus.setDescription("This object specifies the status of the flow specifier. Only CreateAndGo and active status is supported. The following columns must be valid before activating the flow specifier: - cMTFlowSpecifierDestAddrType and cMTFlowSpecifierDestAddr OR - cMTFlowSpecifierMetadataGlobalId All other objects can assume default values. Once the flow specifier is activated no column can be modified. Setting this object to 'delete' will destroy the flow specifier. The flow specifier can be deleted only if it is not attached to any session.")
cMTFlowSpecifierMetadataGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierMetadataGlobalId.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierMetadataGlobalId.setDescription('This object specifies the meta-data Global ID of the flow specifier. Maximum of 24 characters can be specified for this field.')
cMTFlowSpecifierDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierDestAddrType.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierDestAddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTFlowSpecifierDestAddr.')
cMTFlowSpecifierDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierDestAddr.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierDestAddr.setDescription('Address of the destination of the flow to be monitored.')
cMTFlowSpecifierDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierDestPort.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierDestPort.setDescription('This object specifies the destination port for the flow.')
cMTFlowSpecifierSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierSourceAddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTFlowSpecifierSourceAddr.')
cMTFlowSpecifierSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierSourceAddr.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierSourceAddr.setDescription('This object specifies the source address for the flow to be monitored.')
cMTFlowSpecifierSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierSourcePort.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierSourcePort.setDescription('This object specifies the source port for the flow.')
cMTFlowSpecifierIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 18, 1, 10), CiscoMediatraceSupportProtocol().clone('udp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTFlowSpecifierIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cMTFlowSpecifierIpProtocol.setDescription('This is transport protocol type for the flow. Flow of this type between specified source and and destination will be monitored.')
cMTPathSpecifierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19), )
if mibBuilder.loadTexts: cMTPathSpecifierTable.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierTable.setDescription('This table lists the path specifiers contained by the device.')
cMTPathSpecifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTPathSpecifierName"))
if mibBuilder.loadTexts: cMTPathSpecifierEntry.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierEntry.setDescription("This entry defines path specifier that can be used in mediatrace session. Each entry is uniquely identified by name specified by cMTPathSpecifierName object. A row created in this table will be shown in 'show running' command and it will not be saved into non-volatile memory.")
cMTPathSpecifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cMTPathSpecifierName.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierName.setDescription('A unique identifier for the path specifier.')
cMTPathSpecifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierRowStatus.setDescription("This object specifies the status of the path specifier. Only CreateAndGo and active status is supported. The following columns must be valid before activating the path specifier: - cMTPathSpecifierDestAddrType and cMTPathSpecifierDestAddr OR - cMTPathSpecifierMetadataGlobalId All other objects can assume default values. Once the path specifier is activated no column can be modified. Setting this object to 'delete' will destroy the path specifier. The path specifier can be deleted only if it is not attached to any session.")
cMTPathSpecifierMetadataGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierMetadataGlobalId.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierMetadataGlobalId.setDescription('Metadata global session id can be used as path specifier. This object should be populated when this is desired. Mediatrace software will query the Metadata database for five tuple to be used for establishing the path.')
cMTPathSpecifierDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierDestAddrType.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierDestAddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTPathSpecifierDestAddr.')
cMTPathSpecifierDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierDestAddr.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierDestAddr.setDescription('This object specifies the destination address for the path specifier.')
cMTPathSpecifierDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierDestPort.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierDestPort.setDescription('This object specifies the destination port for the path specifier.')
cMTPathSpecifierSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierSourceAddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTFlowSpecifierSourceAddr.')
cMTPathSpecifierSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierSourceAddr.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierSourceAddr.setDescription('This object specifies the source address for the path specifier.')
cMTPathSpecifierSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 9), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierSourcePort.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierSourcePort.setDescription('This object specifies the source port for the path specifier.')
cMTPathSpecifierProtocolForDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 10), CiscoMediatraceDiscoveryProtocol().clone('rsvp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierProtocolForDiscovery.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierProtocolForDiscovery.setDescription('This object specifies the protocol used for path discovery on Mediatrace. Currently, only RSVP is used by default.')
cMTPathSpecifierGatewayAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 11), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierGatewayAddrType.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierGatewayAddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTPathSpecifierGatewayAddr.')
cMTPathSpecifierGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 12), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierGatewayAddr.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierGatewayAddr.setDescription('When the mediatrace session is originated on layer-2 switch the address of gateway is required to establish the session. This object specifies address of this gateway.')
cMTPathSpecifierGatewayVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 13), VlanId().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierGatewayVlanId.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierGatewayVlanId.setDescription('This object specifies the Vlan ID associated with the gateway for path specifier.')
cMTPathSpecifierIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 19, 1, 14), CiscoMediatraceSupportProtocol().clone('udp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTPathSpecifierIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cMTPathSpecifierIpProtocol.setDescription('This object specifies which metrics are monitored for a path specifier. Currently, only TCP and UDP are supported.')
cMTSessionParamsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20), )
if mibBuilder.loadTexts: cMTSessionParamsTable.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsTable.setDescription('This table is collection of session parameter profiles.')
cMTSessionParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionParamsName"))
if mibBuilder.loadTexts: cMTSessionParamsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsEntry.setDescription("An entry represents session parameters that can be associated with a Mediatrace session contained by the cMTSessionTable. Each entry is uniquely identified by name specified by cMTSessionParamsName object. A row created in this table will be shown in 'show running' command and it will not be saved into non-volatile memory.")
cMTSessionParamsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cMTSessionParamsName.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsName.setDescription('This object specifies the name of this set of session parameters.')
cMTSessionParamsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionParamsRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsRowStatus.setDescription("This object specifies the status of the session parameters. Only CreateAndGo and active status is supported. In order for this object to become active cMTSessionParamsName must be defined. The value of cMTSessionParamsInactivityTimeout needs to be at least 3 times of the value of cMTSessionParamsFrequency. All other objects assume the default value. Once the session parameters is activated no column can be modified. Setting this object to 'delete' will destroy the session parameters. The session parameters can be deleted only if it is not attached to any session.")
cMTSessionParamsResponseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionParamsResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsResponseTimeout.setDescription('This object specifies the amount of time a session should wait for the responses after sending out a Mediatrace request. The initiator will discard any responses to a particular request after this timeout.')
cMTSessionParamsFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionParamsFrequency.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsFrequency.setDescription('Duration between two successive data fetch requests.')
cMTSessionParamsInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10800))).setUnits('sconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionParamsInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsInactivityTimeout.setDescription('This object specifies the interval that the responder wait without any requests from the initiator before removing a particular session. The inactivity timeout needs to be at least 3 times of the session frequency.')
cMTSessionParamsHistoryBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setUnits('buckets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionParamsHistoryBuckets.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsHistoryBuckets.setDescription('This object specifies the number of buckets of statistics retained. Each bucket will contain complete set of metrics collected for all hops in one iteration.')
cMTSessionParamsRouteChangeReactiontime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 20, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionParamsRouteChangeReactiontime.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamsRouteChangeReactiontime.setDescription('This object specifies the amount of time the initiator should wait after receiving the first route change, before reacting to further route change notifications. Range is from 0 to 60.')
cMTMediaMonitorProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21), )
if mibBuilder.loadTexts: cMTMediaMonitorProfileTable.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileTable.setDescription('This table lists the media monitor profiles configured on the device.')
cMTMediaMonitorProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTMediaMonitorProfileName"))
if mibBuilder.loadTexts: cMTMediaMonitorProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileEntry.setDescription("An entry represents a media monitor profile that can be associated with a Mediatrace session contained by the cMTSessionTable. The entry is uniquely identified by cMTMediaMonitorProfileName. A row created in this table will be shown in 'show running' command and it will not be saved into non-volatile memory.")
cMTMediaMonitorProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cMTMediaMonitorProfileName.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileName.setDescription('This object specifies the name of the Mediatrace media monitor profile.')
cMTMediaMonitorProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTMediaMonitorProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileRowStatus.setDescription("This object specifies the status of the media monitor profile. Only CreateAndGo and active status is supported. In order for this object to become active cMTMediaMonitorProfileName must be defined. All other objects assume the default value. Once the media monitor profile is activated no column can be modified. Setting this object to 'delete' will destroy the media monitor. The media monitor profile can be deleted only if it is not attached to any session.")
cMTMediaMonitorProfileMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtp", 1), ("tcp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTMediaMonitorProfileMetric.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileMetric.setDescription("This object specifies the type of metrics group to be collected in addition to basic IP metrics. Specify value as RTP if metrics from 'Metric-List RTP' are desired and 'TCP' if metrics in 'Metric-List TCP' is desired.")
cMTMediaMonitorProfileInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 120))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTMediaMonitorProfileInterval.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileInterval.setDescription('This object specifies the sampling interval for the media monitor profile.')
cMTMediaMonitorProfileRtpMaxDropout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(10)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTMediaMonitorProfileRtpMaxDropout.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileRtpMaxDropout.setDescription('This object specifies the maximum number of dropouts allowed when sampling RTP monitoring metrics.')
cMTMediaMonitorProfileRtpMaxReorder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTMediaMonitorProfileRtpMaxReorder.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileRtpMaxReorder.setDescription('This object specifies the maximum number of reorders allowed when sampling RTP monitoring metrics.')
cMTMediaMonitorProfileRtpMinimalSequential = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 21, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTMediaMonitorProfileRtpMinimalSequential.setStatus('current')
if mibBuilder.loadTexts: cMTMediaMonitorProfileRtpMinimalSequential.setDescription('This object specifies the minimum number of sequental packets required to identify a stream as being an RTP flow.')
cMTSystemProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 22), )
if mibBuilder.loadTexts: cMTSystemProfileTable.setStatus('current')
if mibBuilder.loadTexts: cMTSystemProfileTable.setDescription('This table lists the system profiles configured on the device.')
cMTSystemProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 22, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSystemProfileName"))
if mibBuilder.loadTexts: cMTSystemProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cMTSystemProfileEntry.setDescription("An entry represents a system profile that can be associated with a Mediatrace session contained by the cMTSessionTable. Each entry is uniquely identified by name specified by cMTSystemProfileName object. A row created in this table will be shown in 'show running' command and it will not be saved into non-volatile memory.")
cMTSystemProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 22, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: cMTSystemProfileName.setStatus('current')
if mibBuilder.loadTexts: cMTSystemProfileName.setDescription('This object specifies the name of the Mediatrace system profile.')
cMTSystemProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 22, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSystemProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMTSystemProfileRowStatus.setDescription("This object specifies the status of the system profile. Only CreateAndGo and active status is supported. In order for this object to become active cMTSystemProfileName must be defined. All other objects assume the default value. Once the system profile is activated no column can be modified. Setting this object to 'delete' will destroy the system profile. The system prifile can be deleted only if it is not attached to any session.")
cMTSystemProfileMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("cpu", 2), ("memory", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSystemProfileMetric.setStatus('current')
if mibBuilder.loadTexts: cMTSystemProfileMetric.setDescription("This object specifies the type of metrics group to be collected in addition to basic IP metrics. Specify 'interface' if metrics from 'Metric-List-Interface' are desired. Specify 'cpu' if metrics in 'Metric-List-CPU' is desired. Specify 'memory' if metrics in 'Metric-List-Memory' is desired.")
cMTSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23), )
if mibBuilder.loadTexts: cMTSessionTable.setStatus('current')
if mibBuilder.loadTexts: cMTSessionTable.setDescription('This table lists the Mediatrace sessions configured on the device.')
cMTSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"))
if mibBuilder.loadTexts: cMTSessionEntry.setReference('An entry in cMTSessionTable')
if mibBuilder.loadTexts: cMTSessionEntry.setStatus('current')
if mibBuilder.loadTexts: cMTSessionEntry.setDescription("A list of objects that define specific configuration for the session of Mediatrace. The entry is uniquely identified by cMTSessionNumber. A row created in this table will be shown in 'show running' command and it will not be saved into non-volatile memory.")
cMTSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cMTSessionNumber.setStatus('current')
if mibBuilder.loadTexts: cMTSessionNumber.setDescription('This object specifies an arbitrary integer-value that uniquely identifies a Mediatrace session.')
cMTSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRowStatus.setDescription("This object indicates the status of Mediatrace session. Only CreateAndGo and active status is supported. Following columns must be specified in order to activate the session: - cMTSessionPathSpecifierName - cMTSessionProfileName All other objects can assume default values. None of the properties of session can be modified once it is in 'active' state. Setting the value of 'destroy' for this object will delete the session. The session can be deleted only if the corresponding schedule (row in cMTScheduleTable ) not exist.")
cMTSessionPathSpecifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionPathSpecifierName.setStatus('current')
if mibBuilder.loadTexts: cMTSessionPathSpecifierName.setDescription('This object specifies the name of the Mediatrace path specifier profile associated with the session.')
cMTSessionParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionParamName.setStatus('current')
if mibBuilder.loadTexts: cMTSessionParamName.setDescription('This object specifies the name of Mediatrace session parameter associated with the session.')
cMTSessionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionProfileName.setStatus('current')
if mibBuilder.loadTexts: cMTSessionProfileName.setDescription('This object specifies the name of the Mediatrace metric profile associated with the session.')
cMTSessionFlowSpecifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionFlowSpecifierName.setStatus('current')
if mibBuilder.loadTexts: cMTSessionFlowSpecifierName.setDescription('This object specifies the name of the Mediatrace flow specifier profile associated with the session. Flow specifier is not required if system profile is attached to the session. In this case, media monitor profile is attached to the session. Flow specifier is optional and the 5-tuple from the path-specifier is used instead.')
cMTSessionTraceRouteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 23, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTSessionTraceRouteEnabled.setStatus('current')
if mibBuilder.loadTexts: cMTSessionTraceRouteEnabled.setDescription('This object specifies if traceroute is enabled for this session.')
cMTScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 24), )
if mibBuilder.loadTexts: cMTScheduleTable.setStatus('current')
if mibBuilder.loadTexts: cMTScheduleTable.setDescription('A table of Mediatrace scheduling specific definitions. Each entry in this table schedules a cMTSessionEntry created via the cMTSessionTable object.')
cMTScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 24, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"))
if mibBuilder.loadTexts: cMTScheduleEntry.setReference('An entry in cMTScheduleTable')
if mibBuilder.loadTexts: cMTScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: cMTScheduleEntry.setDescription("A list of objects that define specific configuration for the scheduling of Mediatrace operations. A row is created when a session is scheduled to make it active. Likewise, a row is destroyed when the session is unscheduled. A row created in this table will be shown in 'show running' command and it will not be saved into non-volatile memory.")
cMTScheduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 24, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTScheduleRowStatus.setStatus('current')
if mibBuilder.loadTexts: cMTScheduleRowStatus.setDescription("This objects specifies the status of Mediatrace session schedule. Only CreateAndGo and destroy operations are permitted on the row. All objects can assume default values. The schedule start time (column cMTScheduleStartTime) must be specified in order to activate the schedule. Once activated none of the properties of the schedule can be changed. The schedule can be destroyed any time by setting the value of this object to 'destroy'. Destroying the schedule will stop the Mediatrace session but the session will not be destroyed.")
cMTScheduleStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 24, 1, 2), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTScheduleStartTime.setStatus('current')
if mibBuilder.loadTexts: cMTScheduleStartTime.setDescription('This object specifies the start time of the scheduled session.')
cMTScheduleLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 24, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTScheduleLife.setStatus('current')
if mibBuilder.loadTexts: cMTScheduleLife.setDescription('This object specifies the duration of the session in seconds.')
cMTScheduleEntryAgeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 24, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2073600)).clone(3600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTScheduleEntryAgeout.setStatus('current')
if mibBuilder.loadTexts: cMTScheduleEntryAgeout.setDescription('This object specifies the amount of time after which mediatrace session entry will be removed once the life of session is over and session is inactive.')
cMTScheduleRecurring = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 1, 24, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cMTScheduleRecurring.setStatus('current')
if mibBuilder.loadTexts: cMTScheduleRecurring.setDescription('This object specifies whether the schedule is recurring schedule. This object can be used when a periodic session is to be executed everyday at certain time and for certain life.')
cMTPathTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1), )
if mibBuilder.loadTexts: cMTPathTable.setStatus('current')
if mibBuilder.loadTexts: cMTPathTable.setDescription('List of paths discovered by a mediatrace session.')
cMTPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTSessionLifeNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTBucketNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTPathHopNumber"))
if mibBuilder.loadTexts: cMTPathEntry.setStatus('current')
if mibBuilder.loadTexts: cMTPathEntry.setDescription('An entry in cMTPathTable represents a Mediatrace path discovered by a session. This table contains information about the hops (Mediatrace or non-Mediatrace) discovered during a specific request. The Path table is used to find the hop address (Address type - IPv4 or IPv6 and Address) and hop type (currently Mediatrace or Traceroute) to use as index for other statistics tables. A row is created when a Mediatrace scheduled session discovers a path to the specified destination during a request. Likewise, a row is destroyed when the path is no longer avilable. A single row corresponds to a Mediatrace path discovered for a session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber, cMTBucketNumber and cMTPathHopNumber. The created rows are destroyed when the device undergoes a restart.')
cMTSessionLifeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: cMTSessionLifeNumber.setStatus('current')
if mibBuilder.loadTexts: cMTSessionLifeNumber.setDescription('This object specifies a life for a conceptual statistics row. For a particular value of cMTSessionLifeNumber, the agent assigns the first value of 0 to the current (latest) life, with 1 being the next latest and so on. The sequence keeps incrementing, despite older (lower) values being removed from the table.')
cMTBucketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)))
if mibBuilder.loadTexts: cMTBucketNumber.setStatus('current')
if mibBuilder.loadTexts: cMTBucketNumber.setDescription('This object is index of the list of statistics buckets stored. A statistics bucket corresponds to data collected from each hop in one run of the periodic mediatrace session. Bucket with Index value of 0 is the bucket for latest completed run. Index 1 is one run prior to latest completed run, index 2 is two runs prior to latest completed run, and so on.')
cMTPathHopNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cMTPathHopNumber.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopNumber.setDescription('This object specifies the hop number for a Mediatrace Path. This hop can be either Mediatrace or Non-Mediatrace node. The hop number is relative to the initiator with 0 being used to identify initiator itself, 1 for next farther node, etc. This hop number is always unique i.e., two hops cannot have same hop number.')
cMTPathHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAddrType.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTPathHopAddrType.')
cMTPathHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAddr.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAddr.setDescription('This object indicates IP Address type of the hop on a Mediatrace Path.')
cMTPathHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mediatrace", 1), ("traceroute", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopType.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopType.setDescription("This object indicates the type of the hop on a Mediatrace path. Currently, only two types are present - mediatrace(1) and traceroute(2). A hop is of type 'mediatrace' if it is discovered by only mediatrace or by both mediatrace and trace-route. The hop is 'trace route' if it is discovered by trace route only.")
cMTPathHopAlternate1AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAlternate1AddrType.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAlternate1AddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTPathHopAlternate1AddrType.')
cMTPathHopAlternate1Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAlternate1Addr.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAlternate1Addr.setDescription('This object indicates the IP Address of the first alternate hop on a traceroute path.')
cMTPathHopAlternate2AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAlternate2AddrType.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAlternate2AddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTPathHopAlternate2AddrType.')
cMTPathHopAlternate2Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAlternate2Addr.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAlternate2Addr.setDescription('This object indicates the IP Address of the second alternate hop on a traceroute path.')
cMTPathHopAlternate3AddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 11), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAlternate3AddrType.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAlternate3AddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTPathHopAlternate3AddrType.')
cMTPathHopAlternate3Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 1, 1, 12), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTPathHopAlternate3Addr.setStatus('current')
if mibBuilder.loadTexts: cMTPathHopAlternate3Addr.setDescription('This object indicates the IP Address of the third alternate hop on a traceroute path.')
cMTHopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2), )
if mibBuilder.loadTexts: cMTHopStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsTable.setDescription('An entry in cMTHopStatsTable represents a hop on the path associated to a Mediatrace session. This table contains information about particular hop (Mediatrace or non-Mediatrace) such as the address, type of hop, etc. A single row corresponds to a hop on the Mediatrace path discovered for a session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber, cMTBucketNumber,cMTHopStatsAddrType and cMTHopStatsAddr. The created rows are destroyed when the device undergoes a restart.')
cMTHopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTSessionLifeNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTBucketNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddrType"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddr"))
if mibBuilder.loadTexts: cMTHopStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsEntry.setDescription('An entry in cMTHopStatsTable')
cMTHopStatsMaskBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 1), Bits().clone(namedValues=NamedValues(("mediatraceTtlUnsupported", 0), ("mediatraceTtlUncollected", 1), ("collectionStatsUnsupported", 2), ("collectionStatsUncollected", 3), ("ingressInterfaceUnsupported", 4), ("ingressInterfaceUncollected", 5), ("egressInterfaceUnsupported", 6), ("egressInterfaceUncollected", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTHopStatsMaskBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsMaskBitmaps.setDescription('This object indicates whether the corresponding instances of these statistics fields in the table are supported. It also indicates if the statistics data are collected. There are 2 bits for each corresponding field.')
cMTHopStatsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cMTHopStatsAddrType.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsAddrType.setDescription('This object specifies the type of IP address specified by the corresponding instance of cMTHopStatsAddr.')
cMTHopStatsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 3), InetAddress())
if mibBuilder.loadTexts: cMTHopStatsAddr.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsAddr.setDescription('This object specifies the IP Address of the hop on a Mediatrace Path. This value is obtained from CMTPathHopAddr in cMTPathTable.')
cMTHopStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTHopStatsName.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsName.setDescription('This object indicates the name for this hop. This can be either the hostname or the IP address for the hop.')
cMTHopStatsMediatraceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTHopStatsMediatraceTtl.setReference("J. Postel, 'Internet Protocol', RFC-791, September 1981. J. Deering and R. Hinden, 'Internet Protocol, Version 6 (IPv6) Specification', RFC-2460, December 1998.")
if mibBuilder.loadTexts: cMTHopStatsMediatraceTtl.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsMediatraceTtl.setDescription("This object indicates the hop limit of the corresponding traffic flow. If version 4 of the IP carries the traffic flow, then the value of this column corresponds to the 'Time to Live' field of the IP header contained by packets in the Mediatrace request. If version 6 of the IP carries the traffic flow, then the value of this column corresponds to the 'Hop Limit' field of the IP header contained by packets in the Mediatrace request.")
cMTHopStatsCollectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("notSuccess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTHopStatsCollectionStatus.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsCollectionStatus.setDescription("This object indicates the operational status of data being collected on the hop for a specific session: 'success' The hop is actively collecting and responding with data. 'notsuccess' The hop is not collecting or responding with data.")
cMTHopStatsIngressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTHopStatsIngressInterface.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsIngressInterface.setDescription('This object indicates the interface on the responder that receives the Mediatrace request from the initiator.')
cMTHopStatsEgressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTHopStatsEgressInterface.setStatus('current')
if mibBuilder.loadTexts: cMTHopStatsEgressInterface.setDescription("This object indicates the interface on the responder which is used to forward the Mediatrace request from the initiator towards destination in the path specifier. Value of 'None' will be shown if the destination address in path specifier terminates on this hop.")
cMTTraceRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 3), )
if mibBuilder.loadTexts: cMTTraceRouteTable.setStatus('current')
if mibBuilder.loadTexts: cMTTraceRouteTable.setDescription('This table lists the hops discovered by traceroute executed from the initiator. These are the hops which are on media flow path but on which mediatrace is not enabled or is not supported.')
cMTTraceRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTSessionLifeNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTBucketNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddrType"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddr"))
if mibBuilder.loadTexts: cMTTraceRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cMTTraceRouteEntry.setDescription('An entry in cMTTraceRouteTable represents a Traceroute hop on the path associated to a Mediatrace session. The created rows are destroyed when the device undergoes a restart.')
cMTTraceRouteHopNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTTraceRouteHopNumber.setStatus('current')
if mibBuilder.loadTexts: cMTTraceRouteHopNumber.setDescription('This object indicates the hop number of Traceroute host relative to the Initiator. It start with 1 and increments as we go farther from the Initiator.')
cMTTraceRouteHopRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTTraceRouteHopRtt.setStatus('current')
if mibBuilder.loadTexts: cMTTraceRouteHopRtt.setDescription('This object indicates RTT. The time it takes for a packet to get to a hop and back, displayed in milliseconds. (ms).')
cMTSessionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 4), )
if mibBuilder.loadTexts: cMTSessionStatusTable.setStatus('current')
if mibBuilder.loadTexts: cMTSessionStatusTable.setDescription('This table contains aggregate data maintained by Mediatrace for session status.')
cMTSessionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"))
if mibBuilder.loadTexts: cMTSessionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cMTSessionStatusEntry.setDescription('An entry in cMTSessionStatusTable represents information about a Mediatrace session. This table contains information about particular session such as global session identifier, operation state and time to live. A single row corresponds to status of a Mediatrace session and is uniquely identified by cMTSessionNumber. The created rows are destroyed when the device undergoes a restart.')
cMTSessionStatusBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 4, 1, 1), Bits().clone(namedValues=NamedValues(("globalSessionIdUusupport", 0), ("globalSessionIdUncollected", 1), ("operationStateUusupport", 2), ("operationStateUncollected", 3), ("operationTimeToLiveUusupport", 4), ("operationTimeToLiveUncollected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionStatusBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTSessionStatusBitmaps.setDescription('This object indicates whether the corresponding instances of these statistics fields in the table are supported. It also indicates if the statistics are collected. There are 2 bits for each field.')
cMTSessionStatusGlobalSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionStatusGlobalSessionId.setStatus('current')
if mibBuilder.loadTexts: cMTSessionStatusGlobalSessionId.setDescription('This object indicates a globally unique Id to identify a session throughout the network.')
cMTSessionStatusOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pending", 1), ("active", 2), ("inactive", 3), ("sleep", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionStatusOperationState.setStatus('current')
if mibBuilder.loadTexts: cMTSessionStatusOperationState.setDescription('This object indicates the operation status of the session. pending - Session is not currently active. active - Session is in active state. inactive - Session is not active but it has not aged out. sleep - Session is in sleep state.')
cMTSessionStatusOperationTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionStatusOperationTimeToLive.setStatus('current')
if mibBuilder.loadTexts: cMTSessionStatusOperationTimeToLive.setDescription('This object indicates how long the session operation will last.')
cMTSessionRequestStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5), )
if mibBuilder.loadTexts: cMTSessionRequestStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsTable.setDescription('This table contains aggregate data maintained by Mediatrace for session request status.')
cMTSessionRequestStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTSessionLifeNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTBucketNumber"))
if mibBuilder.loadTexts: cMTSessionRequestStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsEntry.setDescription('An entry in cMTSessionRequestStatsTable represents status for each request for a particular session. A single row corresponds to a request sent by a particular Mediatrace session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber and cMTBucketNumber. The created rows are destroyed when the device undergoes a restart.')
cMTSessionRequestStatsBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 1), Bits().clone(namedValues=NamedValues(("requestTimestampUnsupport", 0), ("requestTimestampUncollected", 1), ("requestStatusUnsupport", 2), ("requestStatusUncollected", 3), ("tracerouteStatusUnsupport", 4), ("tracerouteStatusUncollected", 5), ("routeIndexUnsupport", 6), ("routeIndexUncollected", 7), ("numberOfMediatraceHopsUnsupport", 8), ("numberOfMediatraceHopsUncollected", 9), ("numberOfNonMediatraceHopsUnsupport", 10), ("numberOfNonMediatraceHopsUncollected", 11), ("numberOfValidHopsUnsupport", 12), ("numberOfValidHopsUncollected", 13), ("numberOfErrorHopsUnsupport", 14), ("numberOfErrorHopsUncollected", 15), ("numberOfNoDataRecordHopsUnsupport", 16), ("numberOfNoDataRecordHopsUncollected", 17), ("metaGlobalIdUnsupport", 18), ("metaGlobalIdUncollected", 19), ("metaMultiPartySessionIdUnsupport", 20), ("metaMultiPartySessionIdUncollected", 21), ("metaAppNameUnsupport", 22), ("metaAppNameUncollected", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsBitmaps.setDescription('This object indicates whether the corresponding instances of these stats fields in the table are supported. It also indicates if the stats data are collected. There are 2 bits for each corresponding field.')
cMTSessionRequestStatsRequestTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsRequestTimestamp.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsRequestTimestamp.setDescription('This object indicates the value of request time when the request was sent our by the initiator for this particular session.')
cMTSessionRequestStatsRequestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("completed", 1), ("notCompleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsRequestStatus.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsRequestStatus.setDescription('This object indicates the status of request for the session.')
cMTSessionRequestStatsTracerouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("completed", 1), ("notCompleted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsTracerouteStatus.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsTracerouteStatus.setDescription('This object indicates the status of traceroute for the session.')
cMTSessionRequestStatsRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsRouteIndex.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsRouteIndex.setDescription('This object indicates the route index for the session request. It signifies the number of times a route has changed for a particular session. 0 signifies no route change.')
cMTSessionRequestStatsNumberOfMediatraceHops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfMediatraceHops.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfMediatraceHops.setDescription('This object indicates the number of Mediatrace hops in the path.')
cMTSessionRequestStatsNumberOfNonMediatraceHops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfNonMediatraceHops.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfNonMediatraceHops.setDescription('This object indicates the number of non-Mediatrace hops in the path.')
cMTSessionRequestStatsNumberOfValidHops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfValidHops.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfValidHops.setDescription('This object indicates the number of hops with valid data report.')
cMTSessionRequestStatsNumberOfErrorHops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfErrorHops.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfErrorHops.setDescription('This object indicates the number of hops with error report. These hops are not able to return the statistics due to some issue.')
cMTSessionRequestStatsNumberOfNoDataRecordHops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfNoDataRecordHops.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsNumberOfNoDataRecordHops.setDescription('This object indicates the number of hops with no data record.')
cMTSessionRequestStatsMDGlobalId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsMDGlobalId.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsMDGlobalId.setDescription('This object indicates the meta-data global Id for this session.')
cMTSessionRequestStatsMDMultiPartySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsMDMultiPartySessionId.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsMDMultiPartySessionId.setDescription('This object indicates the meta-data Multi Party Session Id for this session.')
cMTSessionRequestStatsMDAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 5, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSessionRequestStatsMDAppName.setStatus('current')
if mibBuilder.loadTexts: cMTSessionRequestStatsMDAppName.setDescription('This object indicates the meta-data AppName for this session.')
cMTCommonMetricStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6), )
if mibBuilder.loadTexts: cMTCommonMetricStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricStatsTable.setDescription('This table contains the list of entries representing common IP metrics values for a particular mediatrace session on particular hop.')
cMTCommonMetricStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTSessionLifeNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTBucketNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddrType"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddr"))
if mibBuilder.loadTexts: cMTCommonMetricStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricStatsEntry.setDescription('An entry in cMTCommonMetricStatsTable represents common media monitor profile information of a hop on the path associated to a Mediatrace session such as flow sampling time stamp, packets dropped, IP TTL, etc. The devices creates a row in the cMTCommonMetricStatsTable when a Mediatrace session starts collecting a traffic metrics data and has been configured to compute common IP metrics. Likewise, the device destroys a row in the cMTCommonMetricStatsTable when the corresponding Mediatrace session has ceased collecting the traffic metrics data (e.g., when a scheduled session has timed out). A single row corresponds to a common media monitor profile information of a hop on the path discovered for a session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber, cMTBucketNumber,cMTHopStatsAddrType and cMTHopStatsAddr. The created rows are destroyed when the device undergoes a restart.')
cMTCommonMetricsBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 2), Bits().clone(namedValues=NamedValues(("flowSamplingStartTimeUnsupported", 0), ("flowSamplingStartTimeUncollected", 1), ("ipPktDroppedUnsupported", 2), ("ipPktDroppedUncollected", 3), ("ipPktCountUnsupported", 4), ("ipPktCountUncollected", 5), ("ipOctetsUnsupported", 6), ("ipOctetsUncollected", 7), ("ipByteRateUnsupported", 8), ("ipByteRateUncollected", 9), ("ipDscpUnsupported", 10), ("ipDscpUncollected", 11), ("ipTtlUnsupported", 12), ("ipTtlUncollected", 13), ("flowCounterUnsupported", 14), ("flowCounterUncollected", 15), ("flowDirectionUnsupported", 16), ("flowDirectionUncollected", 17), ("lossMeasurementUnsupported", 18), ("lossMeasurementUncollected", 19), ("mediaStopOccurredUnsupported", 20), ("mediaStopOccurredUncollected", 21), ("routeForwardUnsupported", 22), ("routeForwardUncollected", 23), ("ipProtocolUnsupported", 24), ("ipProtocolUncollected", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsBitmaps.setDescription('This object indicates whether the corresponding instances of these stats fields in the table are supported. It also indicates if the stats data are collected. There are 2 bits for each field.')
cMTCommonMetricsFlowSamplingStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 3), CiscoNTPTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsFlowSamplingStartTime.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsFlowSamplingStartTime.setDescription('This object defines the the timestamp when the statistics were collected on the responder.')
cMTCommonMetricsIpPktDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsIpPktDropped.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsIpPktDropped.setDescription("This object indicates number of packet drops observed on the flow being monitored on this hop from flow sampling start time in window of 'sample interval' length.")
cMTCommonMetricsIpOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 5), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsIpOctets.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsIpOctets.setDescription('This object indicates the total number of octets contained by the packets processed by the Mediatrace request for the corresponding traffic flow.')
cMTCommonMetricsIpPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsIpPktCount.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsIpPktCount.setDescription('This object indicates the total number of packets processed by the Mediatrace request for the corresponding traffic flow.')
cMTCommonMetricsIpByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 7), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsIpByteRate.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsIpByteRate.setDescription('This object indicates the average packet rate at which the Mediatrace request is processing data for the corresponding traffic flow. This value is cumulative over the lifetime of the traffic flow.')
cMTCommonMetricsIpDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsIpDscp.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsIpDscp.setDescription("This object indicates the DSCP value of the corresponding traffic flow. If version 4 of the IP carries the traffic flow, then the value of this column corresponds to the DSCP part of 'Type of Service' field of the IP header contained by packets in the traffic flow. If version 6 of the IP carries the traffic flow, then the value of this column corresponds to DSCP part of the 'Traffic Class' field of the IP header contained by packets in the traffic flow.")
cMTCommonMetricsIpTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsIpTtl.setReference("J. Postel, 'Internet Protocol', RFC-791, September 1981. J. Deering and R. Hinden, 'Internet Protocol, Version 6 (IPv6) Specification', RFC-2460, December 1998.")
if mibBuilder.loadTexts: cMTCommonMetricsIpTtl.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsIpTtl.setDescription("This object indicates the hop limit of the corresponding traffic flow. If version 4 of the IP carries the traffic flow, then the value of this column corresponds to the 'Time to Live' field of the IP header contained by packets in the Mediatrace request. If version 6 of the IP carries the traffic flow, then the value of this column corresponds to the 'Hop Limit' field of the IP header contained by packets in the Mediatrace request.")
cMTCommonMetricsFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsFlowCounter.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsFlowCounter.setDescription('This object indicates the number of traffic flows currently monitored by the Mediatrace request.')
cMTCommonMetricsFlowDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ingress", 2), ("egress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsFlowDirection.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsFlowDirection.setDescription("This object indicates the direction of the traffic flow where the data is monitored : 'unknown' The SNMP entity does not know the direction of the traffic flow at the point data is collected. 'ingress' Data is collected at the point where the traffic flow enters the devices 'egress' Data is colected at the point where the traffic flow leaves the device.")
cMTCommonMetricsLossMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsLossMeasurement.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsLossMeasurement.setDescription('This object indicates the loss measurement.')
cMTCommonMetricsMediaStopOccurred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsMediaStopOccurred.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsMediaStopOccurred.setDescription('This object indicates the media stop occurred.')
cMTCommonMetricsRouteForward = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 14), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsRouteForward.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsRouteForward.setDescription('This object indicates routing or forwarding status i.e. whether the packet is forwarded or dropped for the flow.')
cMTCommonMetricsIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 6, 1, 15), CiscoMediatraceSupportProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTCommonMetricsIpProtocol.setStatus('current')
if mibBuilder.loadTexts: cMTCommonMetricsIpProtocol.setDescription('This table contains entry to specify the media Metric-list for the particular Mmediatrace session on the hop.')
cMTRtpMetricStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7), )
if mibBuilder.loadTexts: cMTRtpMetricStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricStatsTable.setDescription('This table contains aggregate data maintained by Mediatrace for traffic flows for which it is computing RTP metrics.')
cMTRtpMetricStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1), )
cMTCommonMetricStatsEntry.registerAugmentions(("CISCO-MEDIATRACE-MIB", "cMTRtpMetricStatsEntry"))
cMTRtpMetricStatsEntry.setIndexNames(*cMTCommonMetricStatsEntry.getIndexNames())
if mibBuilder.loadTexts: cMTRtpMetricStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricStatsEntry.setDescription('An entry in cMTRtpMetricStatsTable represents RTP related information of a hop on the path associated to a Mediatrace session such as bit rate, octets, etc. The devices creates a row in the cMTRtpMetricStatsTable when a Mediatrace session starts collecting a traffic metrics data and has been configured to compute RTP metrics for the same traffic metrics data. Likewise, the device destroys a row in the cMTRtpMetricStatsTable when the corresponding Mediatrace session has ceased collecting the traffic metrics data (e.g., when a scheduled session has timed out). A single row corresponds to a RTP information of a hop on the path discovered for a Mediatrace session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber, cMTBucketNumber,cMTHopStatsAddrType and cMTHopStatsAddr. The created rows are destroyed when the device undergoes a restart.')
cMTRtpMetricsBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 2), Bits().clone(namedValues=NamedValues(("bitRateunSupport", 0), ("bitRateunCollected", 1), ("octetsunSupport", 2), ("octetsunCollected", 3), ("pktsunSupport", 4), ("pktsunCollected", 5), ("jitterunSupport", 6), ("jitterunCollected", 7), ("lostPktsunSupport", 8), ("lostPktsunCollected", 9), ("expectedPktsunSupport", 10), ("expectedPktsunCollected", 11), ("lostPktEventsunSupport", 12), ("lostPktEventsunCollected", 13), ("losspercentUnsupport", 14), ("losspercentUncollected", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsBitmaps.setDescription('This object indicates whether the corresponding instances of these statistics fields in the table are supported. It also indicates if the stats data are collected. There are 2 bits for each field.')
cMTRtpMetricsBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsBitRate.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsBitRate.setDescription('This object indicates the average bit rate at which the corresponding Mediatrace request is processing data for the corresponding traffic flow. This value is cumulative over the lifetime of the traffic flow.')
cMTRtpMetricsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsOctets.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsOctets.setDescription('This object indicates the total number of octets contained by the packets processed by the Mediatrace request for the corresponding traffic flow.')
cMTRtpMetricsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsPkts.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsPkts.setDescription('This object indicates the total number of packets processed by the corresponding Mediatrace request for the corresponding traffic flow.')
cMTRtpMetricsJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 6), FlowMetricValue()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsJitter.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsJitter.setDescription('This object indicates the inter-arrival jitter for the traffic flow.')
cMTRtpMetricsLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsLostPkts.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsLostPkts.setDescription('This object indicates the number of RTP packets lost for the traffic flow.')
cMTRtpMetricsExpectedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsExpectedPkts.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsExpectedPkts.setDescription('This object indicates the number of RTP packets expected for the traffic flow.')
cMTRtpMetricsLostPktEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsLostPktEvents.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsLostPktEvents.setDescription('This object indicates the number of packet loss events observed by the Mediatrace request for the corresponding traffic flow.')
cMTRtpMetricsLossPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 7, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTRtpMetricsLossPercent.setStatus('current')
if mibBuilder.loadTexts: cMTRtpMetricsLossPercent.setDescription('This object indicates the percentage of packages are lost per ten thousand packets in a traffic flow.')
cMTTcpMetricStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 8), )
if mibBuilder.loadTexts: cMTTcpMetricStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMTTcpMetricStatsTable.setDescription('This table contains aggregate data maintained by Mediatrace for traffic flows for which it is computing TCP metrics.')
cMTTcpMetricStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 8, 1), )
cMTCommonMetricStatsEntry.registerAugmentions(("CISCO-MEDIATRACE-MIB", "cMTTcpMetricStatsEntry"))
cMTTcpMetricStatsEntry.setIndexNames(*cMTCommonMetricStatsEntry.getIndexNames())
if mibBuilder.loadTexts: cMTTcpMetricStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTTcpMetricStatsEntry.setDescription('An entry in cMTTcpMetricStatsTable represents TCP information of a hop on the path associated to a Mediatrace session such as byte count, round trip delay, etc. The devices creates a row in the cMTTcpMetricStatsTable when a Mediatrace session starts collecting a traffic metrics data and has been configured to compute TCP metrics for the same traffic metrics data. Likewise, the device destroys a row in the cMTTcpMetricStatsTable when the corresponding Mediatrace session has ceased collecting the traffic metrics data (e.g., when a scheduled session has timed out). A single row corresponds to TCP information of a hop on the path discovered for a Mediatrace session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber, cMTBucketNumber,cMTHopStatsAddrType and cMTHopStatsAddr. The created rows are destroyed when the device undergoes a restart.')
cMTTcpMetricBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 8, 1, 2), Bits().clone(namedValues=NamedValues(("mediaByteCountUnsupport", 0), ("mediaByteCountUncollected", 1), ("connectRoundTripDelayUnsupport", 2), ("connectRoundTripDelayUncollected", 3), ("lostEventCountUnsupport", 4), ("lostEventCountUncollected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTTcpMetricBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTTcpMetricBitmaps.setDescription('This object indicates whether the corresponding instances of these stats fields in the table are supported. It also indicates if the stats data are collected. There are 2 bits for each field.')
cMTTcpMetricMediaByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 8, 1, 3), FlowMetricValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTTcpMetricMediaByteCount.setStatus('current')
if mibBuilder.loadTexts: cMTTcpMetricMediaByteCount.setDescription('This object indicates the number of bytes for the packets observed by the Mediatrace session for the corresponding flow.')
cMTTcpMetricConnectRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTTcpMetricConnectRoundTripDelay.setStatus('current')
if mibBuilder.loadTexts: cMTTcpMetricConnectRoundTripDelay.setDescription('This object indicates the round trip time for the packets observed by the Mediatrace session for the corresponding flow. The round trip time is defined as the length of time it takes for a TCP segment transmission and receipt of acknowledgement. This object indicates the connect round trip delay.')
cMTTcpMetricLostEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTTcpMetricLostEventCount.setStatus('current')
if mibBuilder.loadTexts: cMTTcpMetricLostEventCount.setDescription('This object indicates the number of packets lost for the traffic flow.')
cMTSystemMetricStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 9), )
if mibBuilder.loadTexts: cMTSystemMetricStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMTSystemMetricStatsTable.setDescription('A list of objects which accumulate the system metrics results of a particular node for that path.')
cMTSystemMetricStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 9, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTSessionLifeNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTBucketNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddrType"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddr"))
if mibBuilder.loadTexts: cMTSystemMetricStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTSystemMetricStatsEntry.setDescription('An entry in cMTSystemMetricStatsTable represents CPU or memory utilization information of a hop on the path associated to a Mediatrace session such as five minutes CPU utilization, memory utilization, etc. The devices creates a row in the cMTSystemMetricStatsTable when a Mediatrace session starts collecting a system metrics data and has been configured to compute system metrics. Likewise, the device destroys a row in the cMTSystemMetricStatsTable when the corresponding Mediatrace session has ceased collecting the system metrics data (e.g., when a scheduled session has timed out). A single row corresponds to a CPU or memory utilization information of a hop on the path discovered for a Mediatrace session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber, cMTBucketNumber,cMTHopStatsAddrType and cMTHopStatsAddr. The created rows are destroyed when the device undergoes a restart.')
cMTSystemMetricBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 9, 1, 1), Bits().clone(namedValues=NamedValues(("cpuOneMinuteUtilizationUnsupport", 0), ("cpuOneMinuteUtilizationUncollected", 1), ("cpuFiveMinutesUtilizationUnsupport", 2), ("cpuFiveMinutesUtilizationUncollected", 3), ("memoryMetricsUnsupport", 4), ("memoryMetricsUncollected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSystemMetricBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTSystemMetricBitmaps.setDescription('This object indicates whether the corresponding instances of these stats fields in the table are supported. It also indicates if the stats data are collected. There are 2 bits for each field.')
cMTSystemMetricCpuOneMinuteUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 9, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSystemMetricCpuOneMinuteUtilization.setStatus('current')
if mibBuilder.loadTexts: cMTSystemMetricCpuOneMinuteUtilization.setDescription('This object indicates the overall CPU busy percentage in the last 1 minute period for the network element')
cMTSystemMetricCpuFiveMinutesUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 9, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSystemMetricCpuFiveMinutesUtilization.setStatus('current')
if mibBuilder.loadTexts: cMTSystemMetricCpuFiveMinutesUtilization.setDescription('This object indicates the overall CPU busy percentage in the last 5 minute period for the network element')
cMTSystemMetricMemoryUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 9, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTSystemMetricMemoryUtilization.setStatus('current')
if mibBuilder.loadTexts: cMTSystemMetricMemoryUtilization.setDescription('This object indicates the overall memory usage percentage for the node.')
cMTInterfaceMetricStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10), )
if mibBuilder.loadTexts: cMTInterfaceMetricStatsTable.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceMetricStatsTable.setDescription('This table contains aggregate data of interface information for the network nodes.')
cMTInterfaceMetricStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1), ).setIndexNames((0, "CISCO-MEDIATRACE-MIB", "cMTSessionNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTSessionLifeNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTBucketNumber"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddrType"), (0, "CISCO-MEDIATRACE-MIB", "cMTHopStatsAddr"))
if mibBuilder.loadTexts: cMTInterfaceMetricStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceMetricStatsEntry.setDescription('An entry in cMTInterfaceMetricStatsTable represents interface information of a hop on the path associated to a Mediatrace session such as ingress interface speed, egress interface speed, etc. The devices creates a row in the cMTInterfaceMetricStatsTable when a Mediatrace session starts collecting an interface metrics data and has been configured to compute interface metrics. Likewise, the device destroys a row in the cMTInterfaceMetricStatsTable when the corresponding Mediatrace session has ceased collecting the interface metrics data (e.g., when a scheduled session has timed out). A single row corresponds to a interface information of a hop on the path discovered for a session and is uniquely identified by cMTSessionNumber, cMTSessionLifeNumber, cMTBucketNumber, cMTHopStatsAddrType and cMTHopStatsAddr. The created rows are destroyed when the device undergoes a restart.')
cMTInterfaceBitmaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 2), Bits().clone(namedValues=NamedValues(("inSpeedUnsupport", 0), ("inSpeedUncollected", 1), ("outSpeedUnsupport", 2), ("outSpeedUncollected", 3), ("outDiscardsUnsupport", 4), ("outDiscardsUncollected", 5), ("inDiscardsUnsupport", 6), ("inDiscardsUncollected", 7), ("outErrorsUnsupport", 8), ("outErrorsUncollected", 9), ("inErrorsUnsupport", 10), ("inErrorsUncollected", 11), ("outOctetsUnsupport", 12), ("outOctetsUncollected", 13), ("inOctetsUnsupport", 14), ("inOctetsUncollected", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceBitmaps.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceBitmaps.setDescription('This object indicates whether the corresponding instances of these stats fields in the table are supported. It also indicates if the stats data are collected. There are 2 bits for each field.')
cMTInterfaceOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceOutSpeed.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceOutSpeed.setDescription("This object indicates the egress interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth. Currently bandwidth above the maximum value 4,294,967,295 is not supported and it will show the maximum for this condition.")
cMTInterfaceInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceInSpeed.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceInSpeed.setDescription("This object indicates an estimate of the ingress interface's current bandwidth in bits per second. Currently bandwidth above the maximum value 4,294,967,295 is not supported and it will show the maximum for this condition.")
cMTInterfaceOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceOutDiscards.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceOutDiscards.setDescription('This object indicates the number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
cMTInterfaceInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceInDiscards.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceInDiscards.setDescription('This object indicates the number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
cMTInterfaceOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceOutErrors.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceOutErrors.setDescription('This object indicates the error packet number. For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
cMTInterfaceInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceInErrors.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceInErrors.setDescription('This object indicates the error packet number. For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
cMTInterfaceOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceOutOctets.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceOutOctets.setDescription('This object indicates the total number of octets transmitted out of the interface, including framing characters. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
cMTInterfaceInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 800, 1, 2, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cMTInterfaceInOctets.setStatus('current')
if mibBuilder.loadTexts: cMTInterfaceInOctets.setDescription('This object indicates the total number of octets received on the interface, including framing characters. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime.')
ciscoMediatraceMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 800, 2, 1))
ciscoMediatraceMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 800, 2, 2))
ciscoMediatraceMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 800, 2, 1, 1)).setObjects(("CISCO-MEDIATRACE-MIB", "ciscoMediatraceMIBMainObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMediatraceMIBCompliance = ciscoMediatraceMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoMediatraceMIBCompliance.setDescription('This is a default module-compliance containing default object groups.')
ciscoMediatraceMIBMainObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 800, 2, 2, 1)).setObjects(("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierRowStatus"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierDestAddrType"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierDestAddr"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierDestPort"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierSourceAddrType"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierSourceAddr"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierSourcePort"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierIpProtocol"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierRowStatus"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierDestAddrType"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierDestAddr"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierDestPort"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierSourceAddrType"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierSourceAddr"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierSourcePort"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierProtocolForDiscovery"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierGatewayAddrType"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierGatewayAddr"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierGatewayVlanId"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierIpProtocol"), ("CISCO-MEDIATRACE-MIB", "cMTSessionParamsResponseTimeout"), ("CISCO-MEDIATRACE-MIB", "cMTSessionParamsFrequency"), ("CISCO-MEDIATRACE-MIB", "cMTSessionParamsHistoryBuckets"), ("CISCO-MEDIATRACE-MIB", "cMTSessionParamsInactivityTimeout"), ("CISCO-MEDIATRACE-MIB", "cMTSessionParamsRouteChangeReactiontime"), ("CISCO-MEDIATRACE-MIB", "cMTSessionParamsRowStatus"), ("CISCO-MEDIATRACE-MIB", "cMTSessionPathSpecifierName"), ("CISCO-MEDIATRACE-MIB", "cMTMediaMonitorProfileRtpMaxDropout"), ("CISCO-MEDIATRACE-MIB", "cMTMediaMonitorProfileRtpMaxReorder"), ("CISCO-MEDIATRACE-MIB", "cMTMediaMonitorProfileRtpMinimalSequential"), ("CISCO-MEDIATRACE-MIB", "cMTMediaMonitorProfileInterval"), ("CISCO-MEDIATRACE-MIB", "cMTMediaMonitorProfileRowStatus"), ("CISCO-MEDIATRACE-MIB", "cMTSessionFlowSpecifierName"), ("CISCO-MEDIATRACE-MIB", "cMTSessionParamName"), ("CISCO-MEDIATRACE-MIB", "cMTSessionProfileName"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsRouteIndex"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsTracerouteStatus"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRowStatus"), ("CISCO-MEDIATRACE-MIB", "cMTScheduleLife"), ("CISCO-MEDIATRACE-MIB", "cMTScheduleStartTime"), ("CISCO-MEDIATRACE-MIB", "cMTScheduleEntryAgeout"), ("CISCO-MEDIATRACE-MIB", "cMTScheduleRowStatus"), ("CISCO-MEDIATRACE-MIB", "cMTSystemProfileMetric"), ("CISCO-MEDIATRACE-MIB", "cMTSystemProfileRowStatus"), ("CISCO-MEDIATRACE-MIB", "cMTHopStatsMediatraceTtl"), ("CISCO-MEDIATRACE-MIB", "cMTHopStatsName"), ("CISCO-MEDIATRACE-MIB", "cMTHopStatsCollectionStatus"), ("CISCO-MEDIATRACE-MIB", "cMTHopStatsIngressInterface"), ("CISCO-MEDIATRACE-MIB", "cMTHopStatsEgressInterface"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopType"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAddrType"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAddr"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAlternate1AddrType"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAlternate1Addr"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAlternate2AddrType"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAlternate2Addr"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAlternate3AddrType"), ("CISCO-MEDIATRACE-MIB", "cMTPathHopAlternate3Addr"), ("CISCO-MEDIATRACE-MIB", "cMTTraceRouteHopNumber"), ("CISCO-MEDIATRACE-MIB", "cMTTraceRouteHopRtt"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsRequestTimestamp"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsRequestStatus"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsNumberOfMediatraceHops"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsNumberOfValidHops"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsNumberOfErrorHops"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsNumberOfNoDataRecordHops"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsNumberOfNonMediatraceHops"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsIpPktDropped"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsIpOctets"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsIpPktCount"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsIpByteRate"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsIpDscp"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsIpTtl"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsFlowCounter"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsFlowDirection"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsLossMeasurement"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsMediaStopOccurred"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsRouteForward"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsIpProtocol"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsBitRate"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsOctets"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsPkts"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsJitter"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsLostPkts"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsExpectedPkts"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsLostPktEvents"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsLossPercent"), ("CISCO-MEDIATRACE-MIB", "cMTTcpMetricMediaByteCount"), ("CISCO-MEDIATRACE-MIB", "cMTTcpMetricConnectRoundTripDelay"), ("CISCO-MEDIATRACE-MIB", "cMTTcpMetricLostEventCount"), ("CISCO-MEDIATRACE-MIB", "cMTSystemMetricCpuOneMinuteUtilization"), ("CISCO-MEDIATRACE-MIB", "cMTSystemMetricCpuFiveMinutesUtilization"), ("CISCO-MEDIATRACE-MIB", "cMTSystemMetricMemoryUtilization"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceOutSpeed"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceInSpeed"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceOutDiscards"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceInDiscards"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceOutErrors"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceInErrors"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceOutOctets"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceInOctets"), ("CISCO-MEDIATRACE-MIB", "cMTMediaMonitorProfileMetric"), ("CISCO-MEDIATRACE-MIB", "cMTSessionTraceRouteEnabled"), ("CISCO-MEDIATRACE-MIB", "cMTScheduleRecurring"), ("CISCO-MEDIATRACE-MIB", "cMTFlowSpecifierMetadataGlobalId"), ("CISCO-MEDIATRACE-MIB", "cMTPathSpecifierMetadataGlobalId"), ("CISCO-MEDIATRACE-MIB", "cMTHopStatsMaskBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTSessionStatusBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTRtpMetricsBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTTcpMetricBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTSystemMetricBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTInterfaceBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTSessionStatusOperationState"), ("CISCO-MEDIATRACE-MIB", "cMTSessionStatusOperationTimeToLive"), ("CISCO-MEDIATRACE-MIB", "cMTSessionStatusGlobalSessionId"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsBitmaps"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsMDGlobalId"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsMDMultiPartySessionId"), ("CISCO-MEDIATRACE-MIB", "cMTSessionRequestStatsMDAppName"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorEnable"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorSourceInterface"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorSourceAddressType"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorSourceAddress"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorMaxSessions"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorSoftwareVersionMajor"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorProtocolVersionMajor"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorConfiguredSessions"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorPendingSessions"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorInactiveSessions"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorActiveSessions"), ("CISCO-MEDIATRACE-MIB", "cMTResponderEnable"), ("CISCO-MEDIATRACE-MIB", "cMTResponderMaxSessions"), ("CISCO-MEDIATRACE-MIB", "cMTResponderActiveSessions"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorSoftwareVersionMinor"), ("CISCO-MEDIATRACE-MIB", "cMTInitiatorProtocolVersionMinor"), ("CISCO-MEDIATRACE-MIB", "cMTCommonMetricsFlowSamplingStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoMediatraceMIBMainObjectGroup = ciscoMediatraceMIBMainObjectGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoMediatraceMIBMainObjectGroup.setDescription('The is a object group.')
mibBuilder.exportSymbols("CISCO-MEDIATRACE-MIB", cMTResponderActiveSessions=cMTResponderActiveSessions, cMTFlowSpecifierSourcePort=cMTFlowSpecifierSourcePort, cMTSessionRequestStatsNumberOfNoDataRecordHops=cMTSessionRequestStatsNumberOfNoDataRecordHops, cMTRtpMetricStatsTable=cMTRtpMetricStatsTable, cMTRtpMetricsLossPercent=cMTRtpMetricsLossPercent, cMTPathHopAddrType=cMTPathHopAddrType, cMTSessionStatusGlobalSessionId=cMTSessionStatusGlobalSessionId, cMTInitiatorActiveSessions=cMTInitiatorActiveSessions, cMTSessionRequestStatsNumberOfNonMediatraceHops=cMTSessionRequestStatsNumberOfNonMediatraceHops, cMTSessionParamsHistoryBuckets=cMTSessionParamsHistoryBuckets, cMTHopStatsEgressInterface=cMTHopStatsEgressInterface, cMTMediaMonitorProfileName=cMTMediaMonitorProfileName, cMTPathHopAlternate1Addr=cMTPathHopAlternate1Addr, cMTHopStatsEntry=cMTHopStatsEntry, cMTPathSpecifierEntry=cMTPathSpecifierEntry, cMTTraceRouteEntry=cMTTraceRouteEntry, cMTSessionFlowSpecifierName=cMTSessionFlowSpecifierName, cMTSessionStatusBitmaps=cMTSessionStatusBitmaps, cMTInitiatorSourceAddressType=cMTInitiatorSourceAddressType, cMTRtpMetricsBitRate=cMTRtpMetricsBitRate, cMTSessionRequestStatsMDGlobalId=cMTSessionRequestStatsMDGlobalId, cMTInterfaceOutSpeed=cMTInterfaceOutSpeed, cMTFlowSpecifierRowStatus=cMTFlowSpecifierRowStatus, cMTSystemProfileEntry=cMTSystemProfileEntry, cMTInitiatorSourceAddress=cMTInitiatorSourceAddress, cMTSessionParamsEntry=cMTSessionParamsEntry, cMTSessionParamsFrequency=cMTSessionParamsFrequency, cMTInitiatorProtocolVersionMinor=cMTInitiatorProtocolVersionMinor, CiscoNTPTimeStamp=CiscoNTPTimeStamp, cMTSystemMetricBitmaps=cMTSystemMetricBitmaps, cMTTcpMetricMediaByteCount=cMTTcpMetricMediaByteCount, cMTSessionRequestStatsRequestStatus=cMTSessionRequestStatsRequestStatus, cMTRtpMetricsBitmaps=cMTRtpMetricsBitmaps, ciscoMediatraceMIB=ciscoMediatraceMIB, cMTInterfaceInSpeed=cMTInterfaceInSpeed, cMTInitiatorConfiguredSessions=cMTInitiatorConfiguredSessions, cMTHopStatsMediatraceTtl=cMTHopStatsMediatraceTtl, cMTPathSpecifierDestPort=cMTPathSpecifierDestPort, cMTHopStatsCollectionStatus=cMTHopStatsCollectionStatus, cMTSessionParamsResponseTimeout=cMTSessionParamsResponseTimeout, ciscoMediatraceMIBNotifs=ciscoMediatraceMIBNotifs, cMTTcpMetricStatsEntry=cMTTcpMetricStatsEntry, cMTInterfaceMetricStatsTable=cMTInterfaceMetricStatsTable, cMTSessionParamName=cMTSessionParamName, cMTSessionLifeNumber=cMTSessionLifeNumber, cMTScheduleLife=cMTScheduleLife, cMTTcpMetricStatsTable=cMTTcpMetricStatsTable, cMTBucketNumber=cMTBucketNumber, cMTResponderMaxSessions=cMTResponderMaxSessions, cMTScheduleTable=cMTScheduleTable, cMTSessionRequestStatsRequestTimestamp=cMTSessionRequestStatsRequestTimestamp, cMTPathTable=cMTPathTable, cMTRtpMetricsLostPkts=cMTRtpMetricsLostPkts, ciscoMediatraceMIBGroups=ciscoMediatraceMIBGroups, cMTFlowSpecifierDestAddrType=cMTFlowSpecifierDestAddrType, cMTCommonMetricsMediaStopOccurred=cMTCommonMetricsMediaStopOccurred, cMTCommonMetricStatsTable=cMTCommonMetricStatsTable, cMTPathEntry=cMTPathEntry, cMTInitiatorMaxSessions=cMTInitiatorMaxSessions, cMTInterfaceInOctets=cMTInterfaceInOctets, cMTFlowSpecifierTable=cMTFlowSpecifierTable, cMTHopStatsMaskBitmaps=cMTHopStatsMaskBitmaps, cMTSessionRequestStatsMDAppName=cMTSessionRequestStatsMDAppName, cMTSessionPathSpecifierName=cMTSessionPathSpecifierName, cMTMediaMonitorProfileRowStatus=cMTMediaMonitorProfileRowStatus, cMTPathSpecifierProtocolForDiscovery=cMTPathSpecifierProtocolForDiscovery, cMTCtrl=cMTCtrl, cMTFlowSpecifierEntry=cMTFlowSpecifierEntry, cMTCommonMetricsBitmaps=cMTCommonMetricsBitmaps, cMTInitiatorPendingSessions=cMTInitiatorPendingSessions, cMTSystemProfileTable=cMTSystemProfileTable, CiscoMediatraceDiscoveryProtocol=CiscoMediatraceDiscoveryProtocol, cMTFlowSpecifierName=cMTFlowSpecifierName, cMTCommonMetricsIpOctets=cMTCommonMetricsIpOctets, cMTSystemProfileMetric=cMTSystemProfileMetric, cMTHopStatsIngressInterface=cMTHopStatsIngressInterface, cMTHopStatsAddr=cMTHopStatsAddr, cMTPathSpecifierGatewayAddrType=cMTPathSpecifierGatewayAddrType, CiscoMediatraceSupportProtocol=CiscoMediatraceSupportProtocol, cMTPathSpecifierIpProtocol=cMTPathSpecifierIpProtocol, cMTSessionRowStatus=cMTSessionRowStatus, cMTFlowSpecifierIpProtocol=cMTFlowSpecifierIpProtocol, cMTTcpMetricBitmaps=cMTTcpMetricBitmaps, cMTSystemMetricCpuFiveMinutesUtilization=cMTSystemMetricCpuFiveMinutesUtilization, cMTSessionNumber=cMTSessionNumber, cMTPathSpecifierSourceAddrType=cMTPathSpecifierSourceAddrType, cMTInitiatorSoftwareVersionMajor=cMTInitiatorSoftwareVersionMajor, cMTSessionRequestStatsNumberOfErrorHops=cMTSessionRequestStatsNumberOfErrorHops, cMTMediaMonitorProfileRtpMaxReorder=cMTMediaMonitorProfileRtpMaxReorder, cMTSessionParamsRowStatus=cMTSessionParamsRowStatus, cMTHopStatsAddrType=cMTHopStatsAddrType, cMTMediaMonitorProfileEntry=cMTMediaMonitorProfileEntry, cMTInterfaceOutDiscards=cMTInterfaceOutDiscards, cMTSessionParamsRouteChangeReactiontime=cMTSessionParamsRouteChangeReactiontime, cMTRtpMetricsPkts=cMTRtpMetricsPkts, cMTSessionParamsName=cMTSessionParamsName, cMTResponderEnable=cMTResponderEnable, cMTSessionTable=cMTSessionTable, cMTTraceRouteHopNumber=cMTTraceRouteHopNumber, cMTPathSpecifierDestAddr=cMTPathSpecifierDestAddr, cMTInitiatorProtocolVersionMajor=cMTInitiatorProtocolVersionMajor, cMTPathHopAddr=cMTPathHopAddr, cMTSessionStatusTable=cMTSessionStatusTable, cMTSystemMetricStatsTable=cMTSystemMetricStatsTable, cMTInterfaceMetricStatsEntry=cMTInterfaceMetricStatsEntry, cMTTraceRouteHopRtt=cMTTraceRouteHopRtt, cMTSessionRequestStatsNumberOfMediatraceHops=cMTSessionRequestStatsNumberOfMediatraceHops, cMTSessionParamsInactivityTimeout=cMTSessionParamsInactivityTimeout, cMTSystemProfileRowStatus=cMTSystemProfileRowStatus, cMTFlowSpecifierSourceAddrType=cMTFlowSpecifierSourceAddrType, cMTPathHopNumber=cMTPathHopNumber, cMTSessionRequestStatsNumberOfValidHops=cMTSessionRequestStatsNumberOfValidHops, cMTScheduleRowStatus=cMTScheduleRowStatus, cMTCommonMetricsIpTtl=cMTCommonMetricsIpTtl, cMTSessionTraceRouteEnabled=cMTSessionTraceRouteEnabled, cMTSessionRequestStatsTracerouteStatus=cMTSessionRequestStatsTracerouteStatus, cMTRtpMetricsOctets=cMTRtpMetricsOctets, cMTSystemMetricCpuOneMinuteUtilization=cMTSystemMetricCpuOneMinuteUtilization, cMTSessionStatusOperationState=cMTSessionStatusOperationState, ciscoMediatraceMIBCompliances=ciscoMediatraceMIBCompliances, cMTPathSpecifierRowStatus=cMTPathSpecifierRowStatus, cMTCommonMetricsIpPktCount=cMTCommonMetricsIpPktCount, cMTPathSpecifierGatewayAddr=cMTPathSpecifierGatewayAddr, cMTInterfaceBitmaps=cMTInterfaceBitmaps, cMTFlowSpecifierMetadataGlobalId=cMTFlowSpecifierMetadataGlobalId, cMTPathHopAlternate2AddrType=cMTPathHopAlternate2AddrType, cMTSessionRequestStatsRouteIndex=cMTSessionRequestStatsRouteIndex, cMTPathSpecifierName=cMTPathSpecifierName, cMTTcpMetricConnectRoundTripDelay=cMTTcpMetricConnectRoundTripDelay, cMTCommonMetricsRouteForward=cMTCommonMetricsRouteForward, cMTSessionRequestStatsTable=cMTSessionRequestStatsTable, cMTSystemMetricStatsEntry=cMTSystemMetricStatsEntry, cMTPathHopAlternate3Addr=cMTPathHopAlternate3Addr, cMTPathHopAlternate1AddrType=cMTPathHopAlternate1AddrType, cMTCommonMetricsIpDscp=cMTCommonMetricsIpDscp, ciscoMediatraceMIBObjects=ciscoMediatraceMIBObjects, cMTPathSpecifierGatewayVlanId=cMTPathSpecifierGatewayVlanId, cMTTraceRouteTable=cMTTraceRouteTable, cMTPathSpecifierMetadataGlobalId=cMTPathSpecifierMetadataGlobalId, cMTPathSpecifierDestAddrType=cMTPathSpecifierDestAddrType, cMTSessionRequestStatsMDMultiPartySessionId=cMTSessionRequestStatsMDMultiPartySessionId, cMTPathHopType=cMTPathHopType, cMTPathHopAlternate3AddrType=cMTPathHopAlternate3AddrType, cMTMediaMonitorProfileMetric=cMTMediaMonitorProfileMetric, cMTPathSpecifierTable=cMTPathSpecifierTable, cMTStats=cMTStats, cMTSessionStatusEntry=cMTSessionStatusEntry, cMTPathSpecifierSourcePort=cMTPathSpecifierSourcePort, cMTSessionRequestStatsEntry=cMTSessionRequestStatsEntry, ciscoMediatraceMIBMainObjectGroup=ciscoMediatraceMIBMainObjectGroup, cMTCommonMetricsFlowCounter=cMTCommonMetricsFlowCounter, cMTHopStatsName=cMTHopStatsName, cMTSystemMetricMemoryUtilization=cMTSystemMetricMemoryUtilization, cMTFlowSpecifierSourceAddr=cMTFlowSpecifierSourceAddr, PYSNMP_MODULE_ID=ciscoMediatraceMIB, cMTMediaMonitorProfileTable=cMTMediaMonitorProfileTable, ciscoMediatraceMIBConform=ciscoMediatraceMIBConform, cMTMediaMonitorProfileInterval=cMTMediaMonitorProfileInterval, cMTCommonMetricStatsEntry=cMTCommonMetricStatsEntry, cMTRtpMetricsExpectedPkts=cMTRtpMetricsExpectedPkts, cMTFlowSpecifierDestAddr=cMTFlowSpecifierDestAddr, cMTCommonMetricsFlowSamplingStartTime=cMTCommonMetricsFlowSamplingStartTime, cMTInitiatorSoftwareVersionMinor=cMTInitiatorSoftwareVersionMinor, cMTPathHopAlternate2Addr=cMTPathHopAlternate2Addr, cMTSessionProfileName=cMTSessionProfileName, cMTCommonMetricsIpProtocol=cMTCommonMetricsIpProtocol, cMTFlowSpecifierDestPort=cMTFlowSpecifierDestPort, cMTPathSpecifierSourceAddr=cMTPathSpecifierSourceAddr, cMTCommonMetricsFlowDirection=cMTCommonMetricsFlowDirection, cMTSessionStatusOperationTimeToLive=cMTSessionStatusOperationTimeToLive, cMTSessionRequestStatsBitmaps=cMTSessionRequestStatsBitmaps, cMTInterfaceInErrors=cMTInterfaceInErrors, cMTHopStatsTable=cMTHopStatsTable, cMTInterfaceInDiscards=cMTInterfaceInDiscards, cMTScheduleRecurring=cMTScheduleRecurring, cMTSessionParamsTable=cMTSessionParamsTable, cMTCommonMetricsIpByteRate=cMTCommonMetricsIpByteRate, cMTInitiatorInactiveSessions=cMTInitiatorInactiveSessions, cMTSystemProfileName=cMTSystemProfileName, cMTInterfaceOutOctets=cMTInterfaceOutOctets, cMTScheduleEntryAgeout=cMTScheduleEntryAgeout, cMTCommonMetricsLossMeasurement=cMTCommonMetricsLossMeasurement, cMTRtpMetricsJitter=cMTRtpMetricsJitter, cMTInterfaceOutErrors=cMTInterfaceOutErrors, cMTRtpMetricStatsEntry=cMTRtpMetricStatsEntry, cMTScheduleEntry=cMTScheduleEntry, cMTInitiatorSourceInterface=cMTInitiatorSourceInterface, cMTTcpMetricLostEventCount=cMTTcpMetricLostEventCount, cMTSessionEntry=cMTSessionEntry, cMTMediaMonitorProfileRtpMaxDropout=cMTMediaMonitorProfileRtpMaxDropout, ciscoMediatraceMIBCompliance=ciscoMediatraceMIBCompliance, cMTMediaMonitorProfileRtpMinimalSequential=cMTMediaMonitorProfileRtpMinimalSequential, cMTInitiatorEnable=cMTInitiatorEnable, cMTScheduleStartTime=cMTScheduleStartTime, cMTCommonMetricsIpPktDropped=cMTCommonMetricsIpPktDropped, cMTRtpMetricsLostPktEvents=cMTRtpMetricsLostPktEvents)
