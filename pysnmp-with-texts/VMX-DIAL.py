#
# PySNMP MIB module VMX-DIAL (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VMX-DIAL
# Produced by pysmi-0.3.4 at Wed May  1 15:35:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
sysDescr, = mibBuilder.importSymbols("RFC1158-MIB", "sysDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Integer32, TimeTicks, IpAddress, Counter64, ModuleIdentity, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, ObjectIdentity, Counter32, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "TimeTicks", "IpAddress", "Counter64", "ModuleIdentity", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "ObjectIdentity", "Counter32", "iso", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
octel = MibIdentifier((1, 3, 6, 1, 4, 1, 662))
octelOIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1))
octelPlatforms = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1, 1))
vmx200 = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1, 1, 3))
vmx300 = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 1, 1, 4))
octelProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3))
vmxDial = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1))
config = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 1))
dNetstat = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2))
location = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3))
hwerr = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 4))
message = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1))
lanCh = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2))
lanConn = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3))
systemName = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemName.setStatus('mandatory')
if mibBuilder.loadTexts: systemName.setDescription('VMX System Name, from Configuration')
sysSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: sysSerialNum.setDescription('VMX System Serial Number.')
systemID = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemID.setStatus('mandatory')
if mibBuilder.loadTexts: systemID.setDescription('VMX System Identification Number.')
sentVoiceMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentVoiceMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: sentVoiceMsgs.setDescription('Total number of voice messages sent to the networks')
recvVoiceMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvVoiceMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: recvVoiceMsgs.setDescription('Total number of voice messages received from the networks')
sentFaxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sentFaxMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: sentFaxMsgs.setDescription('Total number of fax messages sent to the networks')
recvFaxMsgs = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvFaxMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: recvFaxMsgs.setDescription('Total number of fax messages received from the networks')
recvNames = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: recvNames.setStatus('mandatory')
if mibBuilder.loadTexts: recvNames.setDescription('Total number of name received from the networks')
playedRtNames = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: playedRtNames.setStatus('mandatory')
if mibBuilder.loadTexts: playedRtNames.setDescription('Total number of Real Time network name played')
secSent = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secSent.setStatus('mandatory')
if mibBuilder.loadTexts: secSent.setDescription('Total number of seconds of message sent to the networks')
secRecv = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secRecv.setStatus('mandatory')
if mibBuilder.loadTexts: secRecv.setDescription('Total number of seconds of message received from the networks')
lchNumber = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lchNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lchNumber.setDescription('Maximum number of LAN channel available in the system.')
sec50pct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sec50pct.setStatus('mandatory')
if mibBuilder.loadTexts: sec50pct.setDescription('Total number of second that 50 percent of lan channel is busy')
sec75pct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sec75pct.setStatus('mandatory')
if mibBuilder.loadTexts: sec75pct.setDescription('Total number of second that 75 percent of lan channel is busy')
sec100pct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sec100pct.setStatus('mandatory')
if mibBuilder.loadTexts: sec100pct.setDescription('Total number of second that all of lan channel is busy')
lchInSendSec = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lchInSendSec.setStatus('mandatory')
if mibBuilder.loadTexts: lchInSendSec.setDescription('Number of second LCH is in used for sending message')
lchInRecvSec = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lchInRecvSec.setStatus('mandatory')
if mibBuilder.loadTexts: lchInRecvSec.setDescription('Number of second LCH is in used for receiving message')
outAttempts = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: outAttempts.setDescription('Number of time an outgoing lan connection is attempted')
outRejects = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outRejects.setStatus('mandatory')
if mibBuilder.loadTexts: outRejects.setDescription('Number of time an outgoing lan connection is rejected')
outGotBusys = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outGotBusys.setStatus('mandatory')
if mibBuilder.loadTexts: outGotBusys.setDescription('Number of time an outgoing lan connection is rejected, due to all LCH busy')
inAttempts = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: inAttempts.setDescription('Number of time an incoming lan connection is requested')
inRejects = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inRejects.setStatus('mandatory')
if mibBuilder.loadTexts: inRejects.setDescription('Number of time an incoming lan connection is rejected')
inGotBusys = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inGotBusys.setStatus('mandatory')
if mibBuilder.loadTexts: inGotBusys.setDescription('Number of time an incoming lan connection is rejected, due to all LCH busy')
lanAvailPct = MibScalar((1, 3, 6, 1, 4, 1, 662, 3, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanAvailPct.setStatus('mandatory')
if mibBuilder.loadTexts: lanAvailPct.setDescription('Percentage of LAN availability.')
locTable = MibTable((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1), )
if mibBuilder.loadTexts: locTable.setStatus('mandatory')
if mibBuilder.loadTexts: locTable.setDescription('List of active Digital Network Location.')
locEntry = MibTableRow((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1), ).setIndexNames((0, "VMX-DIAL", "locIndex"))
if mibBuilder.loadTexts: locEntry.setStatus('mandatory')
if mibBuilder.loadTexts: locEntry.setDescription('Each entry contains info about the Network Location.')
locIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIndex.setStatus('mandatory')
if mibBuilder.loadTexts: locIndex.setDescription('Index of this Location Entry')
locName = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locName.setStatus('mandatory')
if mibBuilder.loadTexts: locName.setDescription('System Name of This Location Entry, SELF means this system')
locIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: locIpAddr.setDescription('Internet Address of this Location')
locLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowspeed", 1), ("highspeed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: locLinkType.setDescription('Type of the network interface')
locInDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locInDomain.setStatus('mandatory')
if mibBuilder.loadTexts: locInDomain.setDescription('Whether this location is in the same Uniform Numbering Plan domain. ')
locColocated = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locColocated.setStatus('mandatory')
if mibBuilder.loadTexts: locColocated.setDescription('Whether this location is in the same location.')
locroute = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7))
route1 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: route1.setStatus('mandatory')
if mibBuilder.loadTexts: route1.setDescription('First Entry in the Route Table for this location.')
route2 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: route2.setStatus('mandatory')
if mibBuilder.loadTexts: route2.setDescription('Second Entry in the Route Table for this location.')
route3 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: route3.setStatus('mandatory')
if mibBuilder.loadTexts: route3.setDescription('Third Entry in the Route Table for this location.')
locConn = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8))
cattempts = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cattempts.setStatus('mandatory')
if mibBuilder.loadTexts: cattempts.setDescription('Number of times LAN connection attempted.')
cfailures = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfailures.setStatus('mandatory')
if mibBuilder.loadTexts: cfailures.setDescription('Number of times LAN connection to this location failed.')
cdroppeds = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdroppeds.setStatus('mandatory')
if mibBuilder.loadTexts: cdroppeds.setDescription('Number of times LAN connection to this location dropped.')
cbusys = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbusys.setStatus('mandatory')
if mibBuilder.loadTexts: cbusys.setDescription('Number of times All LAN Connection is busy.')
cdayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdayMin.setStatus('mandatory')
if mibBuilder.loadTexts: cdayMin.setDescription('Number of minutes(day time) LAN connection is established.')
cnightMin = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnightMin.setStatus('mandatory')
if mibBuilder.loadTexts: cnightMin.setDescription('Number of minutes(night time) LAN connection is established.')
msgDelivery = MibIdentifier((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9))
mdvcAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdvcAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: mdvcAttempts.setDescription('Number of voice message delivery attempts to this location.')
mdvcFails = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdvcFails.setStatus('mandatory')
if mibBuilder.loadTexts: mdvcFails.setDescription('Number of voice message delivery failures to this location.')
mdvcRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdvcRetries.setStatus('mandatory')
if mibBuilder.loadTexts: mdvcRetries.setDescription('Number of voice message delivery retries to this location.')
mdfxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdfxAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: mdfxAttempts.setDescription('Number of fax message delivery attempts to this location.')
mdfxFails = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdfxFails.setStatus('mandatory')
if mibBuilder.loadTexts: mdfxFails.setDescription('Number of fax message delivery failures to this location.')
mdfxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdfxRetries.setStatus('mandatory')
if mibBuilder.loadTexts: mdfxRetries.setDescription('Number of fax message delivery retries to this location.')
mdDiskfulls = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdDiskfulls.setStatus('mandatory')
if mibBuilder.loadTexts: mdDiskfulls.setDescription('Number of message delivery to this location fails due to disk full.')
mdMbxfails = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdMbxfails.setStatus('mandatory')
if mibBuilder.loadTexts: mdMbxfails.setDescription('Number of message delivery to this location fails due to mailbox verification failure.')
mdMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdMinute.setStatus('mandatory')
if mibBuilder.loadTexts: mdMinute.setDescription('Total number of message (in minute) delivered to this location.')
locPlayedNames = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locPlayedNames.setStatus('mandatory')
if mibBuilder.loadTexts: locPlayedNames.setDescription('Number of Real Time Network Name Played from this location.')
locLinkdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locLinkdrops.setStatus('mandatory')
if mibBuilder.loadTexts: locLinkdrops.setDescription('Number of time LAN connection dropped, High Speed link only.')
locAnalogstndbys = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locAnalogstndbys.setStatus('mandatory')
if mibBuilder.loadTexts: locAnalogstndbys.setDescription('Number of times Analog Standby used to this location.')
hwerrTable = MibTable((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1), )
if mibBuilder.loadTexts: hwerrTable.setStatus('mandatory')
if mibBuilder.loadTexts: hwerrTable.setDescription('Table of Hardware errors.')
hwerrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1), ).setIndexNames((0, "VMX-DIAL", "heIdx"))
if mibBuilder.loadTexts: hwerrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hwerrEntry.setDescription('Hardware Error table Entry')
heIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heIdx.setStatus('mandatory')
if mibBuilder.loadTexts: heIdx.setDescription('Index of this Hardware Entry')
heType = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heType.setStatus('mandatory')
if mibBuilder.loadTexts: heType.setDescription('Error Type of this hardare error.')
heSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heSlot.setStatus('mandatory')
if mibBuilder.loadTexts: heSlot.setDescription('Slot Number of this Hardware Error Entry')
heMon = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("jan", 1), ("feb", 2), ("mar", 3), ("apr", 4), ("may", 5), ("jun", 6), ("jul", 7), ("aug", 8), ("sep", 9), ("oct", 10), ("nov", 11), ("dec", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: heMon.setStatus('mandatory')
if mibBuilder.loadTexts: heMon.setDescription('Month in which this Hardware Error Entry occurred')
heDay = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heDay.setStatus('mandatory')
if mibBuilder.loadTexts: heDay.setDescription('Day on which this Hardware Error Entry occurred')
heHour = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heHour.setStatus('mandatory')
if mibBuilder.loadTexts: heHour.setDescription('Hour on which this Hardware Error Entry occurred')
heMin = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heMin.setStatus('mandatory')
if mibBuilder.loadTexts: heMin.setDescription('Minute on which this Hardware Error Entry occurred')
heCh = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heCh.setStatus('mandatory')
if mibBuilder.loadTexts: heCh.setDescription('Channel Number of this Hardware Error Entry')
hePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hePrio.setStatus('mandatory')
if mibBuilder.loadTexts: hePrio.setDescription('Priority of this Hardware Error Entry')
heCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heCnt.setStatus('mandatory')
if mibBuilder.loadTexts: heCnt.setDescription('Frequency of this hardare error.')
heData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData1.setStatus('mandatory')
if mibBuilder.loadTexts: heData1.setDescription('Data1 of this hardare error.')
heData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData2.setStatus('mandatory')
if mibBuilder.loadTexts: heData2.setDescription('Data2 of this hardare error.')
heData3 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData3.setStatus('mandatory')
if mibBuilder.loadTexts: heData3.setDescription('Data3 of this hardare error.')
heData4 = MibTableColumn((1, 3, 6, 1, 4, 1, 662, 3, 1, 4, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: heData4.setStatus('mandatory')
if mibBuilder.loadTexts: heData4.setDescription('Data4 of this hardare error.')
hwerrTrap = NotificationType((1, 3, 6, 1, 4, 1, 662) + (0,1)).setObjects(("RFC1158-MIB", "sysDescr"), ("VMX-DIAL", "heType"), ("VMX-DIAL", "heSlot"), ("VMX-DIAL", "heMon"), ("VMX-DIAL", "heDay"), ("VMX-DIAL", "heHour"), ("VMX-DIAL", "heMin"), ("VMX-DIAL", "heCh"), ("VMX-DIAL", "hePrio"), ("VMX-DIAL", "heCnt"), ("VMX-DIAL", "heData1"), ("VMX-DIAL", "heData2"), ("VMX-DIAL", "heData3"), ("VMX-DIAL", "heData4"))
if mibBuilder.loadTexts: hwerrTrap.setDescription('A hwerrTrap signifies that the VMX system has hardware errors logged. This trap is sent if the user has configured it.')
mibBuilder.exportSymbols("VMX-DIAL", mdMinute=mdMinute, hePrio=hePrio, locIndex=locIndex, locEntry=locEntry, sec75pct=sec75pct, hwerr=hwerr, octelOIDs=octelOIDs, route3=route3, recvVoiceMsgs=recvVoiceMsgs, sec50pct=sec50pct, heMon=heMon, cnightMin=cnightMin, locInDomain=locInDomain, locroute=locroute, mdfxFails=mdfxFails, inAttempts=inAttempts, mdvcAttempts=mdvcAttempts, heHour=heHour, hwerrEntry=hwerrEntry, lanAvailPct=lanAvailPct, octelProducts=octelProducts, locIpAddr=locIpAddr, outRejects=outRejects, secRecv=secRecv, sec100pct=sec100pct, recvNames=recvNames, mdvcFails=mdvcFails, inGotBusys=inGotBusys, lchInRecvSec=lchInRecvSec, location=location, vmx200=vmx200, heData4=heData4, locTable=locTable, msgDelivery=msgDelivery, octelPlatforms=octelPlatforms, message=message, cfailures=cfailures, lanConn=lanConn, locAnalogstndbys=locAnalogstndbys, heDay=heDay, locLinkType=locLinkType, systemName=systemName, cdayMin=cdayMin, sentFaxMsgs=sentFaxMsgs, heData3=heData3, hwerrTable=hwerrTable, outGotBusys=outGotBusys, recvFaxMsgs=recvFaxMsgs, locName=locName, config=config, dNetstat=dNetstat, lchInSendSec=lchInSendSec, locConn=locConn, sentVoiceMsgs=sentVoiceMsgs, locLinkdrops=locLinkdrops, heType=heType, heCnt=heCnt, lanCh=lanCh, inRejects=inRejects, mdvcRetries=mdvcRetries, lchNumber=lchNumber, heSlot=heSlot, cdroppeds=cdroppeds, mdfxRetries=mdfxRetries, mdDiskfulls=mdDiskfulls, systemID=systemID, cattempts=cattempts, secSent=secSent, heData1=heData1, heIdx=heIdx, sysSerialNum=sysSerialNum, vmxDial=vmxDial, locColocated=locColocated, mdfxAttempts=mdfxAttempts, octel=octel, mdMbxfails=mdMbxfails, outAttempts=outAttempts, route2=route2, route1=route1, vmx300=vmx300, locPlayedNames=locPlayedNames, heCh=heCh, cbusys=cbusys, heMin=heMin, heData2=heData2, hwerrTrap=hwerrTrap, playedRtNames=playedRtNames)
