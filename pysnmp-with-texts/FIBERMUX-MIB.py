#
# PySNMP MIB module FIBERMUX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FIBERMUX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, enterprises, Bits, NotificationType, TimeTicks, Unsigned32, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, iso, Counter32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "Bits", "NotificationType", "TimeTicks", "Unsigned32", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "iso", "Counter32", "IpAddress", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fibermux = MibIdentifier((1, 3, 6, 1, 4, 1, 120))
fmxProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 1))
fmxCrossbow = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 1, 1))
fmxVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2))
fmxHubs = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2, 1))
fmxSystemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2, 1, 1))
fmxCrossbowGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2, 1, 2))
fmxHubHwVer = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubHwVer.setStatus('mandatory')
fmxHubFwVer = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubFwVer.setStatus('mandatory')
fmxHubAddress = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAddress.setStatus('mandatory')
fmxHubDate = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxHubDate.setStatus('mandatory')
fmxHubElapsetick = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubElapsetick.setStatus('mandatory')
fmxHubSamplingRate = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxHubSamplingRate.setStatus('mandatory')
fmxHubPeakTraffic = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubPeakTraffic.setStatus('mandatory')
fmxHubAverageTraffic = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAverageTraffic.setStatus('mandatory')
fmxHubCurrentTraffic = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubCurrentTraffic.setStatus('mandatory')
fmxHubTotalFrameRx = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubTotalFrameRx.setStatus('mandatory')
fmxHubAverageByte = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAverageByte.setStatus('mandatory')
fmxHubCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubCRCErrors.setStatus('mandatory')
fmxHubAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAlignErrors.setStatus('mandatory')
fmxHubMissedErrors = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubMissedErrors.setStatus('mandatory')
fmxHubStatus = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pwrAB-bad", 0), ("pwrB-OK", 1), ("pwrA-OK", 2), ("pwrAB-OK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubStatus.setStatus('mandatory')
fmxHubClear = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fmxHubClear.setStatus('mandatory')
fmxCbCardTable = MibTable((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCardTable.setStatus('mandatory')
fmxCbCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCardEntry.setStatus('mandatory')
fmxCbCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCIndex.setStatus('mandatory')
fmxCbCType = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCType.setStatus('mandatory')
fmxCbCReset = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fmxCbCReset.setStatus('mandatory')
fmxCbCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCEnable.setStatus('mandatory')
fmxCbCFIFOError = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCFIFOError.setStatus('mandatory')
fmxCbCJabberError = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCJabberError.setStatus('mandatory')
fmxCbCLockup = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCLockup.setStatus('mandatory')
fmxCbCTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCTraffic.setStatus('mandatory')
fmxCbCTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCTimeslot.setStatus('mandatory')
fmxCbCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCAddress.setStatus('mandatory')
fmxCbCPortTable = MibTable((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPortTable.setStatus('mandatory')
fmxCbCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPortEntry.setStatus('mandatory')
fmxCbCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPIndex.setStatus('mandatory')
fmxCbCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPEnable.setStatus('mandatory')
fmxCbCPIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPIntegrity.setStatus('mandatory')
fmxCbCPJabberError = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPJabberError.setStatus('mandatory')
fmxCbCPRedundCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundCtrl.setStatus('mandatory')
fmxCbCPRedundPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundPrimary.setStatus('mandatory')
fmxCbCPRedundActive = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPRedundActive.setStatus('mandatory')
fmxCbCPRedundPort = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundPort.setStatus('mandatory')
fmxCbCPRedundCard = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundCard.setStatus('mandatory')
fmxCbCPRedundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPRedundErrors.setStatus('mandatory')
fmxCbCPRedundErrorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundErrorLimit.setStatus('mandatory')
mibBuilder.exportSymbols("FIBERMUX-MIB", fmxCbCJabberError=fmxCbCJabberError, fmxCbCPJabberError=fmxCbCPJabberError, fmxHubAddress=fmxHubAddress, fmxHubStatus=fmxHubStatus, fmxCbCPIndex=fmxCbCPIndex, fmxCbCardEntry=fmxCbCardEntry, fibermux=fibermux, fmxCbCFIFOError=fmxCbCFIFOError, fmxCbCPRedundCtrl=fmxCbCPRedundCtrl, fmxHubAverageByte=fmxHubAverageByte, fmxProducts=fmxProducts, fmxHubCRCErrors=fmxHubCRCErrors, fmxCbCardTable=fmxCbCardTable, fmxCbCPRedundErrors=fmxCbCPRedundErrors, fmxCbCPortTable=fmxCbCPortTable, fmxSystemGrp=fmxSystemGrp, fmxHubClear=fmxHubClear, fmxHubDate=fmxHubDate, fmxHubHwVer=fmxHubHwVer, fmxVariables=fmxVariables, fmxHubAverageTraffic=fmxHubAverageTraffic, fmxCbCPRedundCard=fmxCbCPRedundCard, fmxCbCPRedundPrimary=fmxCbCPRedundPrimary, fmxCbCPIntegrity=fmxCbCPIntegrity, fmxHubPeakTraffic=fmxHubPeakTraffic, fmxHubFwVer=fmxHubFwVer, fmxHubCurrentTraffic=fmxHubCurrentTraffic, fmxCbCEnable=fmxCbCEnable, fmxCbCPEnable=fmxCbCPEnable, fmxCbCIndex=fmxCbCIndex, fmxHubs=fmxHubs, fmxCbCAddress=fmxCbCAddress, fmxCrossbowGrp=fmxCrossbowGrp, fmxCbCTraffic=fmxCbCTraffic, fmxCbCReset=fmxCbCReset, fmxCbCPRedundErrorLimit=fmxCbCPRedundErrorLimit, fmxCbCPRedundActive=fmxCbCPRedundActive, fmxCrossbow=fmxCrossbow, fmxCbCType=fmxCbCType, fmxHubTotalFrameRx=fmxHubTotalFrameRx, fmxCbCPRedundPort=fmxCbCPRedundPort, fmxCbCTimeslot=fmxCbCTimeslot, fmxHubAlignErrors=fmxHubAlignErrors, fmxCbCPortEntry=fmxCbCPortEntry, fmxHubSamplingRate=fmxHubSamplingRate, fmxHubElapsetick=fmxHubElapsetick, fmxHubMissedErrors=fmxHubMissedErrors, fmxCbCLockup=fmxCbCLockup)
