#
# PySNMP MIB module IBMHPRROUTETEST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBMHPRROUTETEST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, MibIdentifier, Integer32, ModuleIdentity, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, TimeTicks, IpAddress, Counter32, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "MibIdentifier", "Integer32", "ModuleIdentity", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "TimeTicks", "IpAddress", "Counter32", "ObjectIdentity", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmArchitecture = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5))
hpr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10))
ibmHprRouteTest = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4))
ibmHprRtGlobe = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 1))
ibmHprRtGlobeConnTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 1, 1), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(10, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmHprRtGlobeConnTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGlobeConnTrigger.setDescription('This object is used to trigger an HPR route test of the physical path of an existing RTP Connection. The format of this object is: nceid-length.nceid.tcid, where - nceid-length: 1 octet. valid values are 1-8. - nceid: 1-8 octets. - tcid: 8 octets.')
ibmHprRtGlobeNameTrigger = MibScalar((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 26), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ibmHprRtGlobeNameTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGlobeNameTrigger.setDescription('This object is used to trigger an HPR route test of the physical path of an existing or non-existing RTP Connection. The names will be used to generate a HPR Route which may or may not match an existing RTP Connection; but must be reside on a current or potential RTP Connection endpoint node. The format of this object is: netid.lu-name.mode-name, where - netid: 1-8 octets. - period: 1 octet. - lu-name: 1-8 octets. - period: 1 octet. - mode-name: 1-8 octets.')
ibmHprRtGenResults = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2))
ibmHprRtGenTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1), )
if mibBuilder.loadTexts: ibmHprRtGenTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenTable.setDescription('The HPR Route Test General Results Table.')
ibmHprRtGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1), ).setIndexNames((0, "IBMHPRROUTETEST-MIB", "ibmHprRtGenTestId"))
if mibBuilder.loadTexts: ibmHprRtGenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenEntry.setDescription('The HPR Route Test Id is used to index to this table. This Id is an integer that begins at 1 and is incremented with each route test executed on the agent node.')
ibmHprRtGenTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenTestId.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenTestId.setDescription('The route test id. This Id is an integer that begins at 1 and is incremented with each route test execution.')
ibmHprRtGenTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connTrigger", 1), ("nameTrigger", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenTestType.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenTestType.setDescription('The route test type. This indicates whether the route test was triggered by setting the: 1. global connection trigger, or 2. global name trigger.')
ibmHprRtGenConnTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(10, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenConnTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenConnTrigger.setDescription('This object will be valid if the route test was triggered by setting the global connection trigger. If the route test was triggered by setting the global name trigger, this object will return the zero-length string. When it is not null, the format of this object is: nceid-length.nceid.tcid, where - nceid-length: 1 octet. valid values are 1-8. - nceid: 1-8 octets. - tcid: 8 octets.')
ibmHprRtGenNameTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(5, 26), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenNameTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenNameTrigger.setDescription('This object will be valid if the route test was triggered by setting the global name trigger. If the route test was triggered by setting the global connection trigger, this object will return the zero-length string. When it is not null, the format of this object is: netid.lu-name.mode-name, where - netid: 1-8 octets. - period: 1 octet. - lu-name: 1-8 octets. - period: 1 octet. - mode-name: 1-8 octets.')
ibmHprRtGenResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("successful", 1), ("inProgess", 2), ("noResponse", 3), ("nceidInvalid", 4), ("tcidInvalid", 5), ("luInvalid", 6), ("modeInvalid", 7), ("noHprRoute", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenResult.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenResult.setDescription('The route test result. This indicates whether the route test was: 1. successfully executed, or 2. in progress and has not completed yet, or 3. no response was received from one or more nodes, or 4. the nce id used to trigger the route test was invalid, or 5. the tcid used to trigger the route test was invalid, or 6. the lu name used to trigger the route test was invalid, or 7. the mode name used to trigger the route test was invalid for the lu name specified, or 8. a contiguous hpr route from this node to the target lu does not exist and cannot be created.')
ibmHprRtGenSenseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenSenseCode.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenSenseCode.setDescription('The SNA sense data that corresponds to the route test result.')
ibmHprRtGenCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenCosName.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenCosName.setDescription('The class of service name used for this route test.')
ibmHprRtGenRscv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtGenRscv.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtGenRscv.setDescription('The route selection control vector used for this route test.')
ibmHprRtDetResults = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3))
ibmHprRtDetTable = MibTable((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1), )
if mibBuilder.loadTexts: ibmHprRtDetTable.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetTable.setDescription('The HPR Route Test Detailed Results Table.')
ibmHprRtDetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1), ).setIndexNames((0, "IBMHPRROUTETEST-MIB", "ibmHprRtDetTestId"), (0, "IBMHPRROUTETEST-MIB", "ibmHprRtDetSubTestId"))
if mibBuilder.loadTexts: ibmHprRtDetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetEntry.setDescription('The HPR Route Test Id and HPR Route Sub Test Id are used to index this table. The Test Id is an integer that begins at 1 and is incremented with each route test execution. The Sub Test Id is an integer that begins at 1 and is incremented with each node along the path being tested.')
ibmHprRtDetTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetTestId.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetTestId.setDescription('The route test id. This Id is an integer that begins at 1 and is incremented with each route test execution. If this object has the same value as the ibmHprRtGenTestId, then the two objects apply to the same route test.')
ibmHprRtDetSubTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetSubTestId.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetSubTestId.setDescription('The sub test id. This Id is an integer that begins at 1 and is incremented with each node along the path being tested. The last entry of the test will be designated by a value 255.')
ibmHprRtDetDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetDestNode.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetDestNode.setDescription('The destination node name for this portion of the route test.')
ibmHprRtDetPriorNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetPriorNode.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetPriorNode.setDescription('The name of the node which is prior to the destination node for this portion of the route test.')
ibmHprRtDetLastTgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetLastTgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetLastTgNumber.setDescription('The last TG number for this portion of the route test.')
ibmHprRtDetRtripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetRtripTime.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetRtripTime.setDescription('The round trip time for this portion of the route test. It is the total time from when the test frame was sent by this node to the time when the test frame was received back at this node.')
ibmHprRtDetResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 5, 10, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successful", 1), ("noResponse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibmHprRtDetResult.setStatus('mandatory')
if mibBuilder.loadTexts: ibmHprRtDetResult.setDescription('The result of this portion of the route test. It indicates whether this portion of the route test was: 1. successfully executed, or 2. no response was received.')
mibBuilder.exportSymbols("IBMHPRROUTETEST-MIB", ibmHprRtDetEntry=ibmHprRtDetEntry, ibmHprRtGenCosName=ibmHprRtGenCosName, ibmHprRtDetResult=ibmHprRtDetResult, ibmHprRtGlobeConnTrigger=ibmHprRtGlobeConnTrigger, ibmArchitecture=ibmArchitecture, ibmHprRtDetResults=ibmHprRtDetResults, ibmHprRtGlobeNameTrigger=ibmHprRtGlobeNameTrigger, ibmHprRtGenSenseCode=ibmHprRtGenSenseCode, ibm=ibm, hpr=hpr, ibmHprRtGenResult=ibmHprRtGenResult, ibmHprRtGenConnTrigger=ibmHprRtGenConnTrigger, ibmHprRtDetSubTestId=ibmHprRtDetSubTestId, ibmHprRtDetPriorNode=ibmHprRtDetPriorNode, ibmHprRtDetDestNode=ibmHprRtDetDestNode, ibmHprRtGenTable=ibmHprRtGenTable, ibmHprRtGenResults=ibmHprRtGenResults, ibmHprRtDetTestId=ibmHprRtDetTestId, ibmHprRtGlobe=ibmHprRtGlobe, ibmHprRtGenEntry=ibmHprRtGenEntry, ibmHprRtGenTestId=ibmHprRtGenTestId, ibmHprRtDetLastTgNumber=ibmHprRtDetLastTgNumber, ibmHprRtGenRscv=ibmHprRtGenRscv, ibmHprRtGenTestType=ibmHprRtGenTestType, ibmHprRtDetTable=ibmHprRtDetTable, ibmHprRtDetRtripTime=ibmHprRtDetRtripTime, ibmHprRtGenNameTrigger=ibmHprRtGenNameTrigger, ibmHprRouteTest=ibmHprRouteTest)
