#
# PySNMP MIB module CISCO-SCSI-FLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SCSI-FLOW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ScsiLUNOrZero, = mibBuilder.importSymbols("CISCO-SCSI-MIB", "ScsiLUNOrZero")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
VsanIndex, FcNameId = mibBuilder.importSymbols("CISCO-ST-TC", "VsanIndex", "FcNameId")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, ObjectIdentity, IpAddress, iso, TimeTicks, ModuleIdentity, MibIdentifier, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "ObjectIdentity", "IpAddress", "iso", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Counter32")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
ciscoScsiFlowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 447))
ciscoScsiFlowMIB.setRevisions(('2005-01-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoScsiFlowMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoScsiFlowMIB.setLastUpdated('200501060000Z')
if mibBuilder.loadTexts: ciscoScsiFlowMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoScsiFlowMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoScsiFlowMIB.setDescription('A SCSI Flow is described as a SCSI Initiator SCSI Target combination. This MIB is used to configure and monitor SCSI Flows. Glossary of terms used in this MIB: ABTS - Abort Sequence. ACA - Acquire Change Authorization. CFS - Cisco Fabric Service is a general mechanism to distribute data within a Storage Area Network. DPP - Data Path Processor. ILC - Intelligent Line Card. LUN - Logical Unit Number is a 64-bit identifier for a logical unit. pWWN - port World Wide Name. nWWN - node World Wide Name. SCSI Initiator - is a device that contains application clients and SCSI initiator ports that originate device service and task management requests to be processed by a target SCSI device. SCSI flow - connection between SCSI initiator and SCSI target. SCSI Target - is a device that contains logical units and SCSI target ports that receive device service and task management requests for processing. SFC - SCSI Flow Client. SFM - SCSI Flow Manager. TCAM - Ternary Content Addressable Memory. VSAN - Virtual Storage Area Network, similar to a VLAN. WWN - World Wide Name. Mechanism of identifying devices in Fibre Channel Networks. It is 8 bytes long.')
ciscoScsiFlowMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 0))
ciscoScsiFlowMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 1))
ciscoScsiFlowMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 2))
csfConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1))
csfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2))
csfFeatureStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3))
class CSFlowDeviceType(TextualConvention, Integer32):
    description = 'Represents the type of SCSI device. initiator(1) - the device is a SCSI initiator. target(2) - the device is a SCSI target.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("initiator", 1), ("target", 2))

class CSFlowVerifyReasonCode(TextualConvention, Integer32):
    description = 'Represents the reason codes associated with SCSI flow verification notifications. success(1) - successful. noLicense(2) - there was no license available. generalError(3) - generic error. notInNameServer(4) - device was not found in Name Server database. notInFlogiServer(5) - device was not found in FLOGI Server database. deviceNotOnIlc(6) - device was not on Intelligent Line card. deviceNotScsi(7) - device was not SCSI device. deviceNotInitiator(8) - device was not initiator. deviceNotTarget(9) - device was not target. deviceNotFibreChannel(10) - device was not a Fibre Channel device. ipcTimeout(11) - internal IPC timeout. cfsError(12) - Cisco Fabric Service has reported error. cfsTimeout(13) - Cisco Fabric Service has timed out. portsUnprovisioned(14) - ports have not been provisioned. initTargetZonedOut(15) - Initiator and target have been zoned out. statusNotChecked(16) - The device status has not been checked. initNotInNameServer(17) - The initiator was not found in Name Server database. tgtNotInNameServer(18) - The target was not found in Name Server database. tgtNotInFlogiServer(19) - The target was not found in FLOGI Server database.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("success", 1), ("noLicense", 2), ("generalError", 3), ("notInNameServer", 4), ("notInFlogiServer", 5), ("deviceNotOnIlc", 6), ("deviceNotScsi", 7), ("deviceNotInitiator", 8), ("deviceNotTarget", 9), ("deviceNotFibreChannel", 10), ("ipcTimeout", 11), ("cfsError", 12), ("cfsTimeout", 13), ("portsUnprovisioned", 14), ("initTargetZonedOut", 15), ("statusNotChecked", 16), ("initNotInNameServer", 17), ("tgtNotInNameServer", 18), ("tgtNotInFlogiServer", 19))

class CSFlowCfgReasonCode(TextualConvention, Integer32):
    description = 'Represents the reason code associated with SCSI flow feature configuration notifications. success(1) - successful. ipcError(2) - IPC error. ipcTimeout(3) - IPC timeout. sfmGenericError(4) - SCSI Flow Manager error. sfcGenericError(5) - SCSI Flow Client error. cfsError(6) - Cisco Fabric Service error. cfsTimeout(7) - Cisco Fabric Service timeout. deviceNotOnIlc(8) - device was not on Intelligent Line Card. lcIpcError(9) - Line card IPC error. tcamError(10) - Hardware programming (TCAM) error. ilcAsicDrvError(11) - Intelligent Line Card ASIC driver error. dppError(12) - Data Path Processor error. statusNotChecked(13) - The configuration status has not been checked. sfcDBError(14) - SCSI Flow Client process on ILC gives Database error. sfcNoSuchFlow(15) - No such flow exists on SFC process on ILC. sfcFlowExists(16) - The flow already exists on the SFC process on ILC. dppNoBuffers(17) - No free buffers are available on the DPP. dppNoMemory(18) - No more memory is available on the DPP. dppFlowExists(19) - Flow already exists on the DPP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("success", 1), ("ipcError", 2), ("ipcTimeout", 3), ("sfmGenericError", 4), ("sfcGenericError", 5), ("cfsError", 6), ("cfsTimeout", 7), ("deviceNotOnIlc", 8), ("lcIpcError", 9), ("tcamError", 10), ("ilcAsicDrvError", 11), ("dppError", 12), ("statusNotChecked", 13), ("sfcDBError", 14), ("sfcNoSuchFlow", 15), ("sfcFlowExists", 16), ("dppNoBuffers", 17), ("dppNoMemory", 18), ("dppFlowExists", 19))

class CSFlowFeatureCfgReasonCode(TextualConvention, Integer32):
    description = 'Represents the reason code to be used with SCSI flow feature configuration notifications. success(1) - successful. featureCfgFailure(2) - failure in configuring the feature. flowVerifFailure(3) - flow verification failure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("success", 1), ("featureCfgFailure", 2), ("flowVerifFailure", 3))

ciscoScsiFlowNextIndexAvail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowNextIndexAvail.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowNextIndexAvail.setDescription('This object contains the next available value for the object ciscoScsiFlowId. If all values are exhausted, then this object will contain a 0 value. A management application should read this object, get the (non-zero) value and use same for creating an entry in the ciscoScsiFlowTable. If two network management applications read this object at the same time and try to create an entry in the ciscoScsiFlowTable, only one of them will succeed. The network management application which failed, will need to re-read this object and try the SET again.')
ciscoScsiFlowTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2), )
if mibBuilder.loadTexts: ciscoScsiFlowTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTable.setDescription('This table allows configuration of SCSI flows. The Initiator should be connected to a port on an Intelligent Line Card on the local switch. The Target device can be present anywhere in the network. The management application should create entries in this table for all SCSI flows it is interested in. This table contains all the SCSI flows configured on the local device. A SCSI flow is identified uniquely by a SCSI flow ID.')
ciscoScsiFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowId"))
if mibBuilder.loadTexts: ciscoScsiFlowEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowEntry.setDescription('An entry, which is uniquely identified by the SCSI flow ID, contains the various attributes of a SCSI flow.')
ciscoScsiFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ciscoScsiFlowId.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowId.setDescription('This object represents the flow identifier.')
ciscoScsiFlowIntrWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 2), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowIntrWwn.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowIntrWwn.setDescription("This object represents the pWWN of the Initiator in the flow. This object must be set to a valid value before or concurrently setting the corresponding instance of ciscoScsiFlowRowStatus object to 'active'.")
ciscoScsiFlowTargetWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 3), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowTargetWwn.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTargetWwn.setDescription("This object represents the pWWN of the Target in the flow. This object must be set to a valid value before or concurrently setting the corresponding instance of ciscoScsiFlowRowStatus object to 'active'.")
ciscoScsiFlowIntrVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 4), VsanIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowIntrVsan.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowIntrVsan.setDescription('The VSAN ID of the initiator on which the flow is configured.')
ciscoScsiFlowTargetVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 5), VsanIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowTargetVsan.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTargetVsan.setDescription('The VSAN ID of the target on which the flow is configured.')
ciscoScsiFlowAllLuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowAllLuns.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowAllLuns.setDescription("If this object is set to 'true', it specifies that all the LUNs on the target are to be included in the flow.")
ciscoScsiFlowWriteAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowWriteAcc.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWriteAcc.setDescription("This object specifies if write-acceleration feature is enabled for this flow. If set to 'true' it is enabled. If set to 'false', it is disabled.")
ciscoScsiFlowBufCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowBufCount.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowBufCount.setDescription("The value of this object is relevant only if the corresponding instance of ciscoScsiFlowWriteAcc has been set to 'true'. It specifies the number of buffers to be used for write-acceleration.")
ciscoScsiFlowStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowStatsEnabled.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsEnabled.setDescription("This object specifies if the statistics gathering needs to be enabled for this flow. If it is set to 'true', then it is enabled. If it is set to 'false', then it is disabled.")
ciscoScsiFlowClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("noop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowClearStats.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowClearStats.setDescription("This object assists in clearing the statistics for this flow. If this object is set to 'clear(1)', it results in all statistics for this flow being cleared. No action is taken if it is set to 'noop(2)'. The value of this object when read is always 'noop(2)'.")
ciscoScsiFlowIntrVrfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 11), CSFlowVerifyReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowIntrVrfStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowIntrVrfStatus.setDescription('The verification status of the initiator device corresponding to the SCSI Flow.')
ciscoScsiFlowTgtVrfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 12), CSFlowVerifyReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowTgtVrfStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTgtVrfStatus.setDescription('The verification status of the target device corresponding to the SCSI Flow.')
ciscoScsiFlowIntrLCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 13), CSFlowVerifyReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowIntrLCStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowIntrLCStatus.setDescription('The status of the linecard where the SCSI Flow initiator device is located.')
ciscoScsiFlowTgtLCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 14), CSFlowVerifyReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowTgtLCStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTgtLCStatus.setDescription('The status of the linecard where the SCSI Flow target device is located.')
ciscoScsiFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoScsiFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRowStatus.setDescription("The status of this conceptual row. When creating an entry in this table, the management application MUST set values for the corresponding instances of ciscoScsiFlowIntrWwn and ciscoScsiFlowTargetWwn before or concurrently with setting this object to 'active'.")
ciscoScsiFlowNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciscoScsiFlowNum.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowNum.setDescription('This object indicates the flow ID corresponding to which notifications need to be sent.')
ciscoScsiFlowDeviceType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 4), CSFlowDeviceType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciscoScsiFlowDeviceType.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowDeviceType.setDescription('This object indicates whether the notification pertains to an initiator or target.')
ciscoScsiFlowVerifyReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 5), CSFlowVerifyReasonCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciscoScsiFlowVerifyReasonCode.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowVerifyReasonCode.setDescription('This object indicates the verification reason code to be included in notifications.')
ciscoScsiFlowCfgReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 1, 6), CSFlowCfgReasonCode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ciscoScsiFlowCfgReasonCode.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowCfgReasonCode.setDescription('This object indicates the feature configuration reason code to be included in notifications.')
ciscoScsiFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoScsiFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsTable.setDescription('A table containing statistics related to SCSI flows on active LUNs. Counters in this table pertaining to a flow on a LUN will be populated if the corresponding statistics gathering object for that flow (ciscoScsiFlowStatsEnabled) is enabled and I/Os have been done to that LUN. The management application can cause entries to be created in this table by setting the appropriate instance of ciscoScsiFlowStatsEnabled object.')
ciscoScsiFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowId"), (0, "CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowLunId"))
if mibBuilder.loadTexts: ciscoScsiFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsEntry.setDescription('An entry (conceptual row) in this table. An entry contains the statistics related to a LUN on a flow.')
ciscoScsiFlowLunId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 1), ScsiLUNOrZero())
if mibBuilder.loadTexts: ciscoScsiFlowLunId.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowLunId.setDescription('The LUN ID on this flow on which the statistics are gathered.')
ciscoScsiFlowRdIos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdIos.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdIos.setDescription('The total number of SCSI read operations on this LUN on this flow.')
ciscoScsiFlowRdFailedIos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdFailedIos.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdFailedIos.setDescription('The total number of SCSI read operations that have failed on this LUN on this flow.')
ciscoScsiFlowRdTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdTimeouts.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdTimeouts.setDescription('The total number of SCSI read operations that have timed out on this LUN on this flow.')
ciscoScsiFlowRdBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdBlocks.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdBlocks.setDescription('The total number of blocks that have been read on this LUN on this flow.')
ciscoScsiFlowRdMaxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdMaxBlocks.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdMaxBlocks.setDescription('The maximum number of blocks read across all read operations on this LUN on this flow.')
ciscoScsiFlowRdMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdMinTime.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdMinTime.setDescription('The minimum response time over all read operations on this LUN on this flow.')
ciscoScsiFlowRdMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdMaxTime.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdMaxTime.setDescription('The maximum response time over all read operations on this LUN on this flow.')
ciscoScsiFlowRdsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdsActive.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdsActive.setDescription('The number of read operations that are currently active on this LUN on this flow.')
ciscoScsiFlowWrIos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrIos.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrIos.setDescription('The total number of SCSI write operations on this LUN on this flow.')
ciscoScsiFlowWrFailedIos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrFailedIos.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrFailedIos.setDescription('The total number of SCSI write operations that have failed on this LUN on this flow.')
ciscoScsiFlowWrTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrTimeouts.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrTimeouts.setDescription('The total number of SCSI write operations that have timed out on this LUN on this flow.')
ciscoScsiFlowWrBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrBlocks.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrBlocks.setDescription('The total number of blocks that have been written on this LUN on this flow.')
ciscoScsiFlowWrMaxBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrMaxBlocks.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrMaxBlocks.setDescription('The maximum number of blocks written across all write operations on this LUN on this flow.')
ciscoScsiFlowWrMinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrMinTime.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrMinTime.setDescription('The minimum response time over all write operations on this LUN on this flow.')
ciscoScsiFlowWrMaxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrMaxTime.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrMaxTime.setDescription('The maximum response time over all write operations on this LUN on this flow.')
ciscoScsiFlowWrsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrsActive.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrsActive.setDescription('The number of write operations that are currently active on this LUN on this flow.')
ciscoScsiFlowTestUnitRdys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowTestUnitRdys.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTestUnitRdys.setDescription('The number of test unit ready SCSI commands sent on this LUN on this flow.')
ciscoScsiFlowRepLuns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRepLuns.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRepLuns.setDescription('The number of Report LUN SCSI commands sent on this LUN on this flow.')
ciscoScsiFlowInquirys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowInquirys.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowInquirys.setDescription('The number of SCSI Inquiry commands sent on this LUN on this flow.')
ciscoScsiFlowRdCapacitys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRdCapacitys.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRdCapacitys.setDescription('The number of Read Capacity SCSI commands sent on this LUN on this flow.')
ciscoScsiFlowModeSenses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowModeSenses.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowModeSenses.setDescription('The number of Mode Sense SCSI commands sent on this LUN on this flow.')
ciscoScsiFlowReqSenses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowReqSenses.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowReqSenses.setDescription('The number of Request Sense SCSI commands sent on LUN on this this flow.')
ciscoScsiFlowRxFc2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRxFc2Frames.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRxFc2Frames.setDescription('The total number of link-level FC frames received on this LUN on this flow.')
ciscoScsiFlowTxFc2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowTxFc2Frames.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTxFc2Frames.setDescription('The total number of link-level frames transmitted on this LUN on this flow.')
ciscoScsiFlowRxFc2Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowRxFc2Octets.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowRxFc2Octets.setDescription('The total number of octets received in link-level frames on this LUN on this flow.')
ciscoScsiFlowTxFc2Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowTxFc2Octets.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTxFc2Octets.setDescription('The total number of octets transmitted in link-level frames on this LUN on this flow.')
ciscoScsiFlowBusyStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowBusyStatuses.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowBusyStatuses.setDescription('The number of busy SCSI statuses received on this LUN on this flow.')
ciscoScsiFlowStatusResvConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowStatusResvConfs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatusResvConfs.setDescription('The number of reservation conflicts SCSI status received on this LUN on this flow.')
ciscoScsiFlowTskSetFulStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowTskSetFulStatuses.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowTskSetFulStatuses.setDescription('The number of task set full SCSI statuses received on this LUN on this flow.')
ciscoScsiFlowAcaActiveStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowAcaActiveStatuses.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowAcaActiveStatuses.setDescription('The number of ACA active statuses received on this LUN on this flow.')
ciscoScsiFlowSenseKeyNotRdyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyNotRdyErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyNotRdyErrs.setDescription('The number of NOT READY SCSI SENSE key errors received on this LUN on this flow. This indicates that the logical unit being addressed cannot be accessed.')
ciscoScsiFlowSenseKeyMedErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyMedErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyMedErrs.setDescription('The number of MEDIUM ERROR SCSI SENSE key errors received on this LUN on this flow. This indicates that the command terminated with a non-recovered error condition possibly caused by a flaw in the medium.')
ciscoScsiFlowSenseKeyHwErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyHwErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyHwErrs.setDescription('The number of HARDWARE ERROR SCSI SENSE key errors received on this LUN on this flow. This indicates that the target detected a non-recoverable hardware failure.')
ciscoScsiFlowSenseKeyIllReqErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyIllReqErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyIllReqErrs.setDescription('The number of ILLEGAL REQUEST SCSI SENSE key errors received on this LUN on this flow. ')
ciscoScsiFlowSenseKeyUnitAttErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyUnitAttErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyUnitAttErrs.setDescription('The number of UNIT ATTENTION SCSI SENSE key errors received on this LUN on this flow.')
ciscoScsiFlowSenseKeyDatProtErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyDatProtErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyDatProtErrs.setDescription('The number of DATA PROTECT SCSI SENSE key errors received on this LUN on this flow.')
ciscoScsiFlowSenseKeyBlankErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyBlankErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyBlankErrs.setDescription('The number of BLANK CHECK SCSI SENSE key errors received on this LUN on this flow.')
ciscoScsiFlowSenseKeyCpAbrtErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyCpAbrtErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyCpAbrtErrs.setDescription('The number of COPY ABORTED SCSI SENSE key errors received on this LUN on this flow.')
ciscoScsiFlowSenseKeyAbrtCmdErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyAbrtCmdErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyAbrtCmdErrs.setDescription('The number of ABORTED COMMAND SCSI SENSE key errors received on this LUN on this flow.')
ciscoScsiFlowSenseKeyVolFlowErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyVolFlowErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyVolFlowErrs.setDescription('The number of VOLUME OVERFLOW SCSI SENSE key errors received on this LUN on this flow.')
ciscoScsiFlowSenseKeyMiscmpErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyMiscmpErrs.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowSenseKeyMiscmpErrs.setDescription('The number of MISCOMPARE SCSI SENSE key errors received on this LUN on this flow.')
ciscoScsiFlowAbts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowAbts.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowAbts.setDescription('The number of ABTSs encountered on this LUN on this flow.')
ciscoScsiFlowWrAccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoScsiFlowWrAccStatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrAccStatusTable.setDescription('A table containing status for flows with write-acceleration configured.')
ciscoScsiFlowWrAccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowId"))
if mibBuilder.loadTexts: ciscoScsiFlowWrAccStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrAccStatusEntry.setDescription('An entry (conceptual row) in this table. An entry contains the status for write-acceleration feature of the flow.')
ciscoScsiFlowWrAccCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 1, 1, 1), CSFlowFeatureCfgReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrAccCfgStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrAccCfgStatus.setDescription('The configuration status for write-acceleration feature for this flow.')
ciscoScsiFlowWrAccIntrCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 1, 1, 2), CSFlowCfgReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrAccIntrCfgStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrAccIntrCfgStatus.setDescription('The initiator configuration status for write-acceleration feature for this flow.')
ciscoScsiFlowWrAccTgtCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 1, 1, 3), CSFlowCfgReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowWrAccTgtCfgStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrAccTgtCfgStatus.setDescription('The target configuration status for write-acceleration feature for this flow.')
ciscoScsiFlowStatsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 2), )
if mibBuilder.loadTexts: ciscoScsiFlowStatsStatusTable.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsStatusTable.setDescription('A table containing status for flows with statistics configured.')
ciscoScsiFlowStatsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowId"))
if mibBuilder.loadTexts: ciscoScsiFlowStatsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsStatusEntry.setDescription('An entry (conceptual row) in this table. An entry contains the status for statistics feature of the flow.')
ciscoScsiFlowStatsCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 2, 1, 1), CSFlowFeatureCfgReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowStatsCfgStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsCfgStatus.setDescription('The configuration status for statistics feature for this flow.')
ciscoScsiFlowStatsIntrCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 2, 1, 2), CSFlowCfgReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowStatsIntrCfgStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsIntrCfgStatus.setDescription('The initiator configuration status for statistics feature for this flow.')
ciscoScsiFlowStatsTgtCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 447, 1, 3, 2, 1, 3), CSFlowCfgReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoScsiFlowStatsTgtCfgStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsTgtCfgStatus.setDescription('The target configuration status for statistics feature for this flow.')
ciscoScsiFlowVerifyNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 447, 0, 1)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowNum"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowDeviceType"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowVerifyReasonCode"))
if mibBuilder.loadTexts: ciscoScsiFlowVerifyNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowVerifyNotify.setDescription('This notification is generated whenever a change occurs in the fabric causing a flow to be valid or invalid. The ciscoScsiFlowNum object specifies the flow and the ciscoScsiFlowVerifyReasonCode object specifies the actual reason.')
ciscoScsiFlowWrAccNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 447, 0, 2)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowNum"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowDeviceType"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowCfgReasonCode"))
if mibBuilder.loadTexts: ciscoScsiFlowWrAccNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowWrAccNotify.setDescription('This notification is generated whenever write acceleration is configured on a flow to indicate the outcome.')
ciscoScsiFlowStatsNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 447, 0, 3)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowNum"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowDeviceType"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowCfgReasonCode"))
if mibBuilder.loadTexts: ciscoScsiFlowStatsNotify.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsNotify.setDescription('This notification is generated whenever statistics gathering is configured on a flow to indicate the outcome.')
ciscoScsiFlowMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 1))
ciscoScsiFlowMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 2))
ciscoScsiFlowMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 1, 1)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowGroup"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowNotifyGroup"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowInfoGroup"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowStatsGroup"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowFeatureStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiFlowMIBCompliance = ciscoScsiFlowMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowMIBCompliance.setDescription('The compliance statement for entities that implement the CISCO-SCSI-FLOW-MIB.')
ciscoScsiFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 2, 1)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowNextIndexAvail"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowIntrWwn"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTargetWwn"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowIntrVsan"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTargetVsan"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowAllLuns"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWriteAcc"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowBufCount"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowStatsEnabled"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRowStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowClearStats"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowIntrVrfStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowIntrLCStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTgtLCStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTgtVrfStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiFlowGroup = ciscoScsiFlowGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowGroup.setDescription('A set of objects for configuring SCSI flows.')
ciscoScsiFlowStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 2, 2)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdIos"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdFailedIos"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdTimeouts"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdBlocks"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdMaxBlocks"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdMinTime"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdMaxTime"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdsActive"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrIos"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrFailedIos"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrTimeouts"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrBlocks"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrMaxBlocks"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrMinTime"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrMaxTime"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrsActive"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTestUnitRdys"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRepLuns"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowInquirys"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRdCapacitys"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowModeSenses"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowReqSenses"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRxFc2Frames"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTxFc2Frames"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowRxFc2Octets"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTxFc2Octets"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowBusyStatuses"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowStatusResvConfs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowTskSetFulStatuses"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowAcaActiveStatuses"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyNotRdyErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyMedErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyHwErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyIllReqErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyUnitAttErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyDatProtErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyBlankErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyCpAbrtErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyAbrtCmdErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyVolFlowErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowSenseKeyMiscmpErrs"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowAbts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiFlowStatsGroup = ciscoScsiFlowStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowStatsGroup.setDescription('A collection of objects for displaying SCSI flow statistics.')
ciscoScsiFlowInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 2, 3)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowNum"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowDeviceType"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowVerifyReasonCode"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowCfgReasonCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiFlowInfoGroup = ciscoScsiFlowInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowInfoGroup.setDescription('A collection of notification information objects for notification generation.')
ciscoScsiFlowNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 2, 4)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowVerifyNotify"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrAccNotify"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowStatsNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiFlowNotifyGroup = ciscoScsiFlowNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowNotifyGroup.setDescription('A collection of notifications for monitoring SCSI flows.')
ciscoScsiFlowFeatureStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 447, 2, 2, 5)).setObjects(("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrAccCfgStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrAccIntrCfgStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowWrAccTgtCfgStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowStatsCfgStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowStatsIntrCfgStatus"), ("CISCO-SCSI-FLOW-MIB", "ciscoScsiFlowStatsTgtCfgStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoScsiFlowFeatureStatusGroup = ciscoScsiFlowFeatureStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoScsiFlowFeatureStatusGroup.setDescription('A collection of objects for monitoring feature status on SCSI flows.')
mibBuilder.exportSymbols("CISCO-SCSI-FLOW-MIB", ciscoScsiFlowMIBCompliances=ciscoScsiFlowMIBCompliances, ciscoScsiFlowWrAccStatusTable=ciscoScsiFlowWrAccStatusTable, ciscoScsiFlowStatsGroup=ciscoScsiFlowStatsGroup, ciscoScsiFlowBufCount=ciscoScsiFlowBufCount, ciscoScsiFlowWrMinTime=ciscoScsiFlowWrMinTime, ciscoScsiFlowRowStatus=ciscoScsiFlowRowStatus, PYSNMP_MODULE_ID=ciscoScsiFlowMIB, ciscoScsiFlowTxFc2Frames=ciscoScsiFlowTxFc2Frames, ciscoScsiFlowTestUnitRdys=ciscoScsiFlowTestUnitRdys, CSFlowDeviceType=CSFlowDeviceType, ciscoScsiFlowBusyStatuses=ciscoScsiFlowBusyStatuses, ciscoScsiFlowMIBConform=ciscoScsiFlowMIBConform, ciscoScsiFlowSenseKeyBlankErrs=ciscoScsiFlowSenseKeyBlankErrs, ciscoScsiFlowTargetWwn=ciscoScsiFlowTargetWwn, CSFlowFeatureCfgReasonCode=CSFlowFeatureCfgReasonCode, ciscoScsiFlowInquirys=ciscoScsiFlowInquirys, ciscoScsiFlowTskSetFulStatuses=ciscoScsiFlowTskSetFulStatuses, ciscoScsiFlowSenseKeyIllReqErrs=ciscoScsiFlowSenseKeyIllReqErrs, ciscoScsiFlowWrAccTgtCfgStatus=ciscoScsiFlowWrAccTgtCfgStatus, csfConfiguration=csfConfiguration, ciscoScsiFlowRxFc2Octets=ciscoScsiFlowRxFc2Octets, ciscoScsiFlowRdTimeouts=ciscoScsiFlowRdTimeouts, ciscoScsiFlowStatsIntrCfgStatus=ciscoScsiFlowStatsIntrCfgStatus, ciscoScsiFlowSenseKeyHwErrs=ciscoScsiFlowSenseKeyHwErrs, ciscoScsiFlowStatsTable=ciscoScsiFlowStatsTable, ciscoScsiFlowSenseKeyUnitAttErrs=ciscoScsiFlowSenseKeyUnitAttErrs, ciscoScsiFlowLunId=ciscoScsiFlowLunId, ciscoScsiFlowTargetVsan=ciscoScsiFlowTargetVsan, ciscoScsiFlowFeatureStatusGroup=ciscoScsiFlowFeatureStatusGroup, ciscoScsiFlowVerifyNotify=ciscoScsiFlowVerifyNotify, csfStats=csfStats, ciscoScsiFlowStatsStatusTable=ciscoScsiFlowStatsStatusTable, ciscoScsiFlowTable=ciscoScsiFlowTable, ciscoScsiFlowStatsNotify=ciscoScsiFlowStatsNotify, ciscoScsiFlowWriteAcc=ciscoScsiFlowWriteAcc, ciscoScsiFlowWrBlocks=ciscoScsiFlowWrBlocks, ciscoScsiFlowStatsEntry=ciscoScsiFlowStatsEntry, ciscoScsiFlowRdMaxBlocks=ciscoScsiFlowRdMaxBlocks, ciscoScsiFlowIntrLCStatus=ciscoScsiFlowIntrLCStatus, ciscoScsiFlowSenseKeyVolFlowErrs=ciscoScsiFlowSenseKeyVolFlowErrs, ciscoScsiFlowStatsStatusEntry=ciscoScsiFlowStatsStatusEntry, ciscoScsiFlowNextIndexAvail=ciscoScsiFlowNextIndexAvail, ciscoScsiFlowRdMaxTime=ciscoScsiFlowRdMaxTime, ciscoScsiFlowTgtVrfStatus=ciscoScsiFlowTgtVrfStatus, ciscoScsiFlowRdsActive=ciscoScsiFlowRdsActive, ciscoScsiFlowRdFailedIos=ciscoScsiFlowRdFailedIos, ciscoScsiFlowReqSenses=ciscoScsiFlowReqSenses, CSFlowCfgReasonCode=CSFlowCfgReasonCode, ciscoScsiFlowAllLuns=ciscoScsiFlowAllLuns, ciscoScsiFlowRdBlocks=ciscoScsiFlowRdBlocks, ciscoScsiFlowSenseKeyAbrtCmdErrs=ciscoScsiFlowSenseKeyAbrtCmdErrs, csfFeatureStatus=csfFeatureStatus, ciscoScsiFlowAcaActiveStatuses=ciscoScsiFlowAcaActiveStatuses, ciscoScsiFlowWrsActive=ciscoScsiFlowWrsActive, ciscoScsiFlowTxFc2Octets=ciscoScsiFlowTxFc2Octets, ciscoScsiFlowRdIos=ciscoScsiFlowRdIos, ciscoScsiFlowSenseKeyCpAbrtErrs=ciscoScsiFlowSenseKeyCpAbrtErrs, ciscoScsiFlowAbts=ciscoScsiFlowAbts, ciscoScsiFlowSenseKeyNotRdyErrs=ciscoScsiFlowSenseKeyNotRdyErrs, ciscoScsiFlowStatsCfgStatus=ciscoScsiFlowStatsCfgStatus, ciscoScsiFlowIntrVrfStatus=ciscoScsiFlowIntrVrfStatus, ciscoScsiFlowWrIos=ciscoScsiFlowWrIos, ciscoScsiFlowWrMaxBlocks=ciscoScsiFlowWrMaxBlocks, ciscoScsiFlowSenseKeyMiscmpErrs=ciscoScsiFlowSenseKeyMiscmpErrs, ciscoScsiFlowInfoGroup=ciscoScsiFlowInfoGroup, ciscoScsiFlowVerifyReasonCode=ciscoScsiFlowVerifyReasonCode, CSFlowVerifyReasonCode=CSFlowVerifyReasonCode, ciscoScsiFlowId=ciscoScsiFlowId, ciscoScsiFlowStatusResvConfs=ciscoScsiFlowStatusResvConfs, ciscoScsiFlowWrTimeouts=ciscoScsiFlowWrTimeouts, ciscoScsiFlowRepLuns=ciscoScsiFlowRepLuns, ciscoScsiFlowMIB=ciscoScsiFlowMIB, ciscoScsiFlowWrAccNotify=ciscoScsiFlowWrAccNotify, ciscoScsiFlowMIBGroups=ciscoScsiFlowMIBGroups, ciscoScsiFlowWrAccStatusEntry=ciscoScsiFlowWrAccStatusEntry, ciscoScsiFlowWrAccIntrCfgStatus=ciscoScsiFlowWrAccIntrCfgStatus, ciscoScsiFlowCfgReasonCode=ciscoScsiFlowCfgReasonCode, ciscoScsiFlowNotifyGroup=ciscoScsiFlowNotifyGroup, ciscoScsiFlowStatsTgtCfgStatus=ciscoScsiFlowStatsTgtCfgStatus, ciscoScsiFlowMIBCompliance=ciscoScsiFlowMIBCompliance, ciscoScsiFlowEntry=ciscoScsiFlowEntry, ciscoScsiFlowNum=ciscoScsiFlowNum, ciscoScsiFlowRxFc2Frames=ciscoScsiFlowRxFc2Frames, ciscoScsiFlowStatsEnabled=ciscoScsiFlowStatsEnabled, ciscoScsiFlowTgtLCStatus=ciscoScsiFlowTgtLCStatus, ciscoScsiFlowSenseKeyMedErrs=ciscoScsiFlowSenseKeyMedErrs, ciscoScsiFlowModeSenses=ciscoScsiFlowModeSenses, ciscoScsiFlowRdMinTime=ciscoScsiFlowRdMinTime, ciscoScsiFlowRdCapacitys=ciscoScsiFlowRdCapacitys, ciscoScsiFlowGroup=ciscoScsiFlowGroup, ciscoScsiFlowSenseKeyDatProtErrs=ciscoScsiFlowSenseKeyDatProtErrs, ciscoScsiFlowIntrWwn=ciscoScsiFlowIntrWwn, ciscoScsiFlowIntrVsan=ciscoScsiFlowIntrVsan, ciscoScsiFlowClearStats=ciscoScsiFlowClearStats, ciscoScsiFlowMIBNotifs=ciscoScsiFlowMIBNotifs, ciscoScsiFlowWrFailedIos=ciscoScsiFlowWrFailedIos, ciscoScsiFlowMIBObjects=ciscoScsiFlowMIBObjects, ciscoScsiFlowWrAccCfgStatus=ciscoScsiFlowWrAccCfgStatus, ciscoScsiFlowDeviceType=ciscoScsiFlowDeviceType, ciscoScsiFlowWrMaxTime=ciscoScsiFlowWrMaxTime)
