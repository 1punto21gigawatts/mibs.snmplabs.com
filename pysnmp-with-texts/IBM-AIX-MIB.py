#
# PySNMP MIB module IBM-AIX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IBM-AIX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, Gauge32, ObjectIdentity, IpAddress, Integer32, enterprises, Bits, NotificationType, MibIdentifier, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "Gauge32", "ObjectIdentity", "IpAddress", "Integer32", "enterprises", "Bits", "NotificationType", "MibIdentifier", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ibmAIX = ModuleIdentity((1, 3, 6, 1, 4, 1, 2, 6, 191))
if mibBuilder.loadTexts: ibmAIX.setLastUpdated('200402180000Z')
if mibBuilder.loadTexts: ibmAIX.setOrganization('IBM ')
if mibBuilder.loadTexts: ibmAIX.setContactInfo(' Guoyou Chen Postal: IBM 11400 Burnet Rd. Austin Tx, 78758 US Tel: +1 512 838 0355 Fax: +1 512 838 7939 E-mail: gychen@us.ibm.com Kurt Taylor Postal: IBM 11400 Burnet Rd. Austin Tx, 78758 US Tel: +1 512 838 2496 Fax: +1 512 838 7939 E-mail: krtaylor@us.ibm.com Konrad Rzeszutek Postal: IBM 11400 Burnet Rd. Austin Tx, 78758 US Tel: +1 512 838 0357 Fax: +1 512 838 7939 E-mail: darnok@us.ibm.com')
if mibBuilder.loadTexts: ibmAIX.setDescription('This MIB module defines AIX system management objects, which model devices (printer/plotter, tape, hard disk, memory, SCSI adapter, CDROM drive) physical and logical storage (volume group, physical volume, logical volume, and paging space), print spooling (printing queue), users/groups, agent action, file systems, processes, subsystem services (subsystem, subserver), login users, system environment, events.')
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
aixSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 1))
aixAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1))
aixSystemEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 2))
aixAuxSystemEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3))
aixTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 4))
aixGeneralTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 6))
aixStorageSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 2))
aixVolumeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1))
aixLogicalVolume = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2))
aixPhysicalVolume = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3))
aixPagingSpace = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4))
aixPrintSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 3))
aixPrtQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1))
aixUser = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 4))
aixUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1))
aixGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2))
aixService = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 5))
aixSrvSubsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1))
aixSrvSubserver = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2))
aixFileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 6))
aixProcess = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 7))
aixLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 8))
aixDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9))
aixPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1))
aixTape = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2))
aixHardDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3))
aixMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4))
aixCDROM = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5))
aixScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6))
aixProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7))
aixNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8))
aixAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9))
aixConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 10))
aixAgentAction = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reset", 1), ("debugOn", 2), ("debugOff", 3), ("shutdown", 4), ("running", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixAgentAction.setStatus('current')
if mibBuilder.loadTexts: aixAgentAction.setDescription('This variable is used to trigger an action on the agent itself . 5 (running) is the normal state. When set, this variable triggers the agent to do the following: reset - flush cache, flush MIB, re-read configuration file. debugOn - turns on debugging functionality in the agent debugOff- turns off debugging functionality in the agent shutdown- shutdown the agent running - the normal state.')
aixAgentCmdString = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixAgentCmdString.setStatus('current')
if mibBuilder.loadTexts: aixAgentCmdString.setDescription('This string represents a runnable command on AIX with its parameters. Once the command string is set, the system can trigger the execution of the command by setting the value of seExeCommand. ')
aixAgentExeCommand = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trigger", 1), ("default", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixAgentExeCommand.setStatus('current')
if mibBuilder.loadTexts: aixAgentExeCommand.setDescription('The variable is used to trigger the execution of the command in seCommandString. The result is stored by seCmdResult, and the output is stored by aixAgentCmdOutTable. The normal state of this object is 2(default). When set to 1(trigger), the command stored in aixAgentCmdString will be run. trigger(1) - when the value of the variable is set to trigger(1), the command stored at aixAgentCmdString will be executed. default(2) - is the default value.')
aixAgentCmdResult = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAgentCmdResult.setStatus('current')
if mibBuilder.loadTexts: aixAgentCmdResult.setDescription('This object stores the output result of executing the command stored by aixAgentCmdString.')
aixAgentPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixAgentPollInterval.setStatus('current')
if mibBuilder.loadTexts: aixAgentPollInterval.setDescription("The poll interval(in seconds) used by the agent. The default value is zero. This value is used to define the minimum time interval during which the subagent must update an object's value, check if any events occurred and send a trap when an event occurs. If the value is zero, the polling depends on each seperate configuration variable such as aixFsPollInterval, aixVgPollInterval, etc. if it is not zero, The value can not be less than 5 seconds. If it is set to 1, 2, 3, or 4, the agent automatically sets the poll interval to 5. aixAgentPollInterval works together with the other variables such as aixFsPollInterval, aixCPUPollInterval, aixVgPollInterval, aixPagePollInterval, aixLFPollInterval to decide the final polling interval of each group. In /etc/aixmibd.conf file, this variable is corresponding to pollInterval. Originally, it is SYNTAX Integer32(0,6..2147483647), but IT Director MIB compiler does not accept this and it is changed to this. ")
aixPollEnable = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixPollEnable.setStatus('current')
if mibBuilder.loadTexts: aixPollEnable.setDescription('Enables or disables polling. It may change the following polling interval variables: aixAgentPollInterval aixFsPollInterval aixCPUPollInterval aixVgPollInterval aixPagePollInterval aixLFPollInterval If one of the polling intervals above is non-zero, its value is 1(enable), otherwise its valuse is 2 (disable). If it is set to enable(1) and all polling intervals above are zero, aixAgentPollInterval will be set to 3600 seconds. If it is set to 1(enable) and one of the polling intervals is non-zero, the agent will not change anything. If it is set to disable (2), the polling functionality is disabled, and all polling intervals are set to zero. ')
aixLastTrapMsg = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLastTrapMsg.setStatus('current')
if mibBuilder.loadTexts: aixLastTrapMsg.setDescription('This object holds the most recent trap message sent from the subagent. Its default value is set to NULL.')
aixAgentCmdOutTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 8), )
if mibBuilder.loadTexts: aixAgentCmdOutTable.setStatus('current')
if mibBuilder.loadTexts: aixAgentCmdOutTable.setDescription('The output from the execution of the command stored in aixAgentCmdString')
aixFsPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixFsPollInterval.setStatus('current')
if mibBuilder.loadTexts: aixFsPollInterval.setDescription('The polling interval for file systems. This variable works together with the general polling interval aixAgentPollInterval. Its default value is zero. 1) If aixAgentPollInterval is zero and aixFsPollInterval is zero, the polling of file systems is disabled. 2) If aixAgentPollInterval is non-zero and aixFsPollInterval is zero, the polling interval is the value of aixAgentPollInterval. 3) If both aixAgentPollInterval and aixFsPollInterval are non-zero, the polling interval of file systems is set to the value of aixFsPollInterval. That means aixFsPollInterval has a higher priority than aixAgentPollInterval . This corresponds to fsPollInterval in /etc/aixmibd.conf. ')
aixCPUPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixCPUPollInterval.setStatus('current')
if mibBuilder.loadTexts: aixCPUPollInterval.setDescription('The polling interval for CPU utilization. This variable works together with the general polling interval aixAgentPollInterval. Its default value is zero. 1) If aixAgentPollInterval is zero and aixCPUPollInterval is zero, the polling of CPU utilization is disabled. 2) If aixAgentPollInterval is non-zero and aixCPUPollInterval is zero, the polling interval is the value of aixAgentPollInterval. 3) If both aixAgentPollInterval and aixCPUPollInterval are non-zero, the polling interval of CPU utilization is set to the value of aixCPUPollInterval. That means aixCPUPollInterval has a higher priority than aixAgentPollInterval . This corresponds to cpuPollInterval in /etc/aixmibd.conf.')
aixVgPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixVgPollInterval.setStatus('current')
if mibBuilder.loadTexts: aixVgPollInterval.setDescription('The polling interval for volume groups. This variable works together with the general polling interval aixAgentPollInterval. Its default value is zero. 1) If aixAgentPollInterval is zero and aixVgPollInterval is zero, the polling of file systems is disabled. 2) If aixAgentPollInterval is non-zero and aixVgPollInterval is zero, the polling interval is the value of aixAgentPollInterval. 3) If both aixAgentPollInterval and aixVgPollInterval are non-zero, the polling interval of volume groups is set to the value of aixVgPollInterval. That means aixVgPollInterval has a higher priority than aixAgentPollInterval . This corresponds to vgPollInterval in /etc/aixmibd.conf.')
aixPagePollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixPagePollInterval.setStatus('current')
if mibBuilder.loadTexts: aixPagePollInterval.setDescription('The polling interval for paging spaces. This variable works together with the general polling interval aixAgentPollInterval. Its default value is zero. 1) If aixAgentPollInterval is zero and aixPagePollInterval is zero, the polling of file systems is disabled. 2) If aixAgentPollInterval is non-zero and aixPagePollInterval is zero, the polling interval is the value of aixAgentPollInterval. 3) If both aixAgentPollInterval and aixPagePollInterval are non-zero, the polling interval of paging spaces is set to the value of aixFsPollInterval. That means aixPagePollInterval has a higher priority than aixAgentPollInterval . This corresponds to pagePollInterval in /etc/aixmibd.conf.')
aixLFPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixLFPollInterval.setStatus('current')
if mibBuilder.loadTexts: aixLFPollInterval.setDescription('The polling interval for login failure. This variable works together with the general polling interval aixAgentPollInterval. Its default value is zero. 1) If aixAgentPollInterval is zero and aixLFPollInterval is zero, the polling of file systems is disabled. 2) If aixAgentPollInterval is non-zero and aixLFPollInterval is zero, the polling interval is the value of aixAgentPollInterval. 3) If both aixAgentPollInterval and aixFsPollInterval are non-zero, the polling interval of login failure is set to the value of aixLFPollInterval. That means aixLFPollInterval has a higher priority than aixAgentPollInterval . This corresponds to lfPollInterval in /etc/aixmibd.conf.')
aixAgentCmdOutTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 8, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixAgentCmdOutIndex"))
if mibBuilder.loadTexts: aixAgentCmdOutTableEntry.setStatus('current')
if mibBuilder.loadTexts: aixAgentCmdOutTableEntry.setDescription('An entry of the agent command output table')
aixAgentCmdOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAgentCmdOutput.setStatus('current')
if mibBuilder.loadTexts: aixAgentCmdOutput.setDescription('After the command stored in aixAgentCmdString is run, each line of the output is stored in one entry of this table.')
aixAgentCmdOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAgentCmdOutIndex.setStatus('current')
if mibBuilder.loadTexts: aixAgentCmdOutIndex.setDescription('Index of the table.')
aixSeCPUUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSeCPUUtilization.setStatus('current')
if mibBuilder.loadTexts: aixSeCPUUtilization.setDescription('It is an aggregate view for utilization of multiple CPUs. aixSeCPUUtilization equals the sum of each CPU kernel time percentage and user time percentage divided by the number of CPUs. When the CPU utilization reaches the threshold aixSeCPUThreshold, an event will be generated. After the rising event is generated, another similar event will not occur until it falls behind the threshold and reaches it again. This object will be refreshed at least with each poll interval.')
aixSeCPUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixSeCPUThreshold.setStatus('current')
if mibBuilder.loadTexts: aixSeCPUThreshold.setDescription('Threshold for the CPU utilization. When it is set to zero, the trap is disabled. The default value is 95 which means a trap would be generated if the aggregate CPU utilization reaches 95 percent.')
aixSeSystemRunLevel = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("level0", 1), ("level1", 2), ("level2", 3), ("level3", 4), ("level4", 5), ("level5", 6), ("level6", 7), ("level7", 8), ("level8", 9), ("level9", 10), ("levelm", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixSeSystemRunLevel.setStatus('current')
if mibBuilder.loadTexts: aixSeSystemRunLevel.setDescription('Tells the init command to set the run level on next system boot. ')
aixSeSystemState = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("reboot", 2), ("shutdown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixSeSystemState.setStatus('current')
if mibBuilder.loadTexts: aixSeSystemState.setDescription('The object is used to shutdown or reboot the system to the run level set by aixSeSystemRunLevel. running(1) - the system is running reboot(2) - when the value of the variable is set to reboot(2), the system will reboot. shutdown(3) - shutdown the system. ')
aixSeSystemTrap = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixSeSystemTrap.setStatus('current')
if mibBuilder.loadTexts: aixSeSystemTrap.setDescription('Enable or disable the aixUtilizationCPU trap in the system environment group. The default value is enable(1).')
aixSeDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: aixSeDateAndTime.setDescription('The system date and time.')
aixSeMaxProcPerUser = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixSeMaxProcPerUser.setStatus('current')
if mibBuilder.loadTexts: aixSeMaxProcPerUser.setDescription('The number of processes each user can use at one time. This limit does not apply to a root user. The default number is 128. Increasing or decreasing this number takes effect at the next system boot.')
aixSeLicenseNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixSeLicenseNum.setStatus('current')
if mibBuilder.loadTexts: aixSeLicenseNum.setDescription('Specifies the maximum number of fixed licenses on the system. Valid values for this option are positive integers from 1 to 32767. When this object is set, its value is updated without rebooting the system. ')
aixSeRemainingLicenseNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSeRemainingLicenseNum.setStatus('current')
if mibBuilder.loadTexts: aixSeRemainingLicenseNum.setDescription('Specifies the remaining number of fixed licenses on the system. Valid values for the is option are positive integers from 1 to 32767. ')
aixSeNumCPUs = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSeNumCPUs.setStatus('current')
if mibBuilder.loadTexts: aixSeNumCPUs.setDescription('The number of CPUs on the machine.')
aixSeMachineType = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSeMachineType.setStatus('current')
if mibBuilder.loadTexts: aixSeMachineType.setDescription('The machine type. For example: IBM,7043-150')
aixSeSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSeSerialNumber.setStatus('current')
if mibBuilder.loadTexts: aixSeSerialNumber.setDescription('The serial number of the machine.')
aixFileSystemMounted = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 4, 1)).setObjects(("IBM-AIX-MIB", "aixFsName"))
if mibBuilder.loadTexts: aixFileSystemMounted.setStatus('current')
if mibBuilder.loadTexts: aixFileSystemMounted.setDescription('When a file system is mounted or unmounted through SNMP, an event is generated. aixFsName is defined in aixFsTable.')
aixFileSystemFull = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 4, 2)).setObjects(("IBM-AIX-MIB", "aixFsName"), ("IBM-AIX-MIB", "aixFsSize"), ("IBM-AIX-MIB", "aixFsFree"), ("IBM-AIX-MIB", "aixFsThreshold"))
if mibBuilder.loadTexts: aixFileSystemFull.setStatus('current')
if mibBuilder.loadTexts: aixFileSystemFull.setDescription('When the current sampled used percentage of a file system is above aixFsThreshold and the value at last interval is less than the aixFsThreshold, an the event will be generated. This event message contains the file system name, the total size of the file system and available size. aixFsName - file system name, aixFsSize - file system size in megabytes aixFsFree - free file system size in megabytes aixFsThreshold - the threshold for the file system size')
aixVolumeGroupFull = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 4, 3)).setObjects(("IBM-AIX-MIB", "aixVgName"), ("IBM-AIX-MIB", "aixVgSize"), ("IBM-AIX-MIB", "aixVgFree"), ("IBM-AIX-MIB", "aixVgThreshold"))
if mibBuilder.loadTexts: aixVolumeGroupFull.setStatus('current')
if mibBuilder.loadTexts: aixVolumeGroupFull.setDescription('When the current sampled used percentage of a volume group is above aixVgThreshold and the value at the last interval is less than the aixVgThreshold, an event will be generated. This event message contains the volume group name, the size, the free size and the threshold. aixVgName - the name of the volume group. aixVgSize - the total size of the volume group. aixVgFree - the free size of the volume group. aixVgThreshold - the threshold for the volume group.')
aixPageFull = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 4, 4)).setObjects(("IBM-AIX-MIB", "aixPageName"), ("IBM-AIX-MIB", "aixPagePercentUsed"), ("IBM-AIX-MIB", "aixPageThreshold"))
if mibBuilder.loadTexts: aixPageFull.setStatus('current')
if mibBuilder.loadTexts: aixPageFull.setDescription('When the current used percentage of a paging space is above aixPageThreshold and the value at the last interval is less than the aixPageThreshold, an event will be generated. The event message includes the name of the paging space, the total size, the used percentage, the volume group it belongs to, and threshold value. aixPageName - the paging space name aixPagePercentUsed - percentage of used Paging space. aixPageThreshold - the threshold value of the paging space. ')
aixUserLoginFailed = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 4, 5)).setObjects(("IBM-AIX-MIB", "aixFailedLoginTimePeriod"))
if mibBuilder.loadTexts: aixUserLoginFailed.setStatus('current')
if mibBuilder.loadTexts: aixUserLoginFailed.setDescription('If a user fails to log into the system in the number of attempts defined by aixLoginFailedThreshold in the last time period defined by aixFailedLoginTimePeriod, an event is generated. The event message includes the attempts of all users who failed to log into the system and the time period during which these attempts occurred.')
aixUtilizationCPU = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 4, 6)).setObjects(("IBM-AIX-MIB", "aixSeCPUUtilization"), ("IBM-AIX-MIB", "aixSeCPUThreshold"))
if mibBuilder.loadTexts: aixUtilizationCPU.setStatus('current')
if mibBuilder.loadTexts: aixUtilizationCPU.setDescription('When the CPU utilization reaches the threshold, an event is generated. The event contains the utilization, and threshold values. aixSeCPUUtilization - CPU Utilization value. aixSeThresholdCPU - Threshold value. ')
aixSnmptrapHolder = NotificationType((1, 3, 6, 1, 4, 1, 2, 6, 191, 1, 6, 1))
if mibBuilder.loadTexts: aixSnmptrapHolder.setStatus('current')
if mibBuilder.loadTexts: aixSnmptrapHolder.setDescription('Together with the agent, the snmptrap command is delivered. The snmptrap command sends a trap message to the agent. This object is place holder for snmptrap command. ')
aixVgThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixVgThreshold.setStatus('current')
if mibBuilder.loadTexts: aixVgThreshold.setDescription('The percentage threshold for the volume group. When the current used percentage for the volume group is above aixVgThreshold and the value of the last poll interval is less than the threshold, an event is generated. The value for aixVgThreshold should be between 0 and 100. When it is zero, the related trap, aixVolumeGroupFull, is disabled. Its default value is 95. ')
aixVgTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2), )
if mibBuilder.loadTexts: aixVgTable.setStatus('current')
if mibBuilder.loadTexts: aixVgTable.setDescription('A table of defined volume groups. The number of entries depends on the configuration of the system. On AIX, a volume group is a collection of 1 to 32 physical volumes of varying size and type with a system-wide unique name of up to 15 characters. Each system can have one to 255 volume groups configured. This table will be refreshed at least with each poll interval.')
aixVgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixVgIndex"))
if mibBuilder.loadTexts: aixVgEntry.setStatus('current')
if mibBuilder.loadTexts: aixVgEntry.setDescription('An entry of vgTable. Each entry contains all the attributes of each volume group.')
aixVgName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgName.setStatus('current')
if mibBuilder.loadTexts: aixVgName.setDescription('The name of a volume group. The name must be system-wide unique and can range from 1 to 15 characters')
aixVgIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgIdentifier.setStatus('current')
if mibBuilder.loadTexts: aixVgIdentifier.setDescription('It is a series of numbers(e.g. 0038455182a7b5f6) to identify the volume group.')
aixVgState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activeComplete", 1), ("activePartial", 2), ("inactive", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgState.setStatus('current')
if mibBuilder.loadTexts: aixVgState.setDescription('State of the volume group. If the volume group is activated with the varyonvg command, the state is either active/complete (indicating all physical volumes are active) or active/partial (indicating some physical volumes are not active). If the volume group is not activated with the varyonvg command, the state is inactive .')
aixVgSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgSize.setStatus('current')
if mibBuilder.loadTexts: aixVgSize.setDescription('The total size of the volume group in megabytes.')
aixVgFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgFree.setStatus('current')
if mibBuilder.loadTexts: aixVgFree.setDescription('The available size of the volume group in megabytes.')
aixVgCurNumLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgCurNumLVs.setStatus('current')
if mibBuilder.loadTexts: aixVgCurNumLVs.setDescription('The number of logical volumes currently in the volume group.')
aixVgOpenLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgOpenLVs.setStatus('current')
if mibBuilder.loadTexts: aixVgOpenLVs.setDescription('Number of logical volumes within the volume group that are currently open.')
aixVgActivePVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgActivePVs.setStatus('current')
if mibBuilder.loadTexts: aixVgActivePVs.setDescription('The number of active physical voulmes currently in the volume group.')
aixVgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixVgIndex.setStatus('current')
if mibBuilder.loadTexts: aixVgIndex.setDescription('The columnar index for the vgTable.')
aixLvTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1), )
if mibBuilder.loadTexts: aixLvTable.setStatus('current')
if mibBuilder.loadTexts: aixLvTable.setDescription(' A logical volume is a collection of logical partitions made up of physical partitions, all contained in a single volume group. Logical volumes are expandable and can span several physical volumes in a volume group. Because it is very slow to get the data in the table, no data may be returned from the snmp agent.')
aixLvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixLvIndex"))
if mibBuilder.loadTexts: aixLvEntry.setStatus('current')
if mibBuilder.loadTexts: aixLvEntry.setDescription(' An entry of lvTable')
aixLvName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLvName.setStatus('current')
if mibBuilder.loadTexts: aixLvName.setDescription(' Logical volume names must be system-wide unique and can range from 1 to 15 characters.')
aixLvNameVG = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLvNameVG.setStatus('current')
if mibBuilder.loadTexts: aixLvNameVG.setDescription('Name of the volume group the logical volume belongs to. Volume group names must be unique system wide and can range from 1 to 15 characters.')
aixLvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("jfs", 1), ("jfslog", 2), ("paging", 3), ("boot", 4), ("jfs2", 5), ("jfs2log", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixLvType.setStatus('current')
if mibBuilder.loadTexts: aixLvType.setDescription('Logical volume type. The type may be boot, jfslog, jfs, and paging. ')
aixLvMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLvMountPoint.setStatus('current')
if mibBuilder.loadTexts: aixLvMountPoint.setDescription('File system mount point for the logical volume, if applicable.')
aixLvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLvSize.setStatus('current')
if mibBuilder.loadTexts: aixLvSize.setDescription('The size of the logical volume in PPS.')
aixLvState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("openStale", 1), ("openSyncd", 2), ("closeStale", 3), ("closeSyncd", 4), ("undefined", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLvState.setStatus('current')
if mibBuilder.loadTexts: aixLvState.setDescription('The status of the logical volume. It may be open/syncd, open/stale, close/syncd, close/stale or undefined.')
aixLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLvIndex.setStatus('current')
if mibBuilder.loadTexts: aixLvIndex.setDescription('The columnar index for the lvTable.')
aixPvTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1), )
if mibBuilder.loadTexts: aixPvTable.setStatus('current')
if mibBuilder.loadTexts: aixPvTable.setDescription('A physical volume is a read-write disk physically attached to a computer, with a permanently assigned system wide unique identifier. They are added to a volume group with the extendvg command and removed from a volume group with the reducevg command. When added to the volume group, physical volumes are partitioned into contiguous, equal-sized units of space called physical partitions.')
aixPvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixPvIndex"))
if mibBuilder.loadTexts: aixPvEntry.setStatus('current')
if mibBuilder.loadTexts: aixPvEntry.setDescription('An entry of pvTable ')
aixPvName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPvName.setStatus('current')
if mibBuilder.loadTexts: aixPvName.setDescription('The name of the physical volume. Physical volume names are typically in the form hdiskx where x is a system wide unique number. This name is assigned when the disk is detected for the first time on a system startup or when the system management commands are used at runtime to add a disk to the system. ')
aixPvNameVG = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPvNameVG.setStatus('current')
if mibBuilder.loadTexts: aixPvNameVG.setDescription(' The volume group which is assigned to the physical volume. ')
aixPvState = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("missing", 2), ("removed", 3), ("variedOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPvState.setStatus('current')
if mibBuilder.loadTexts: aixPvState.setDescription('State of the physical volume. If the volume group that contains the physical volume is varied on with the varyonvg command, the state is active , missing , or removed . If the physical volume is varied off with the varyoffvg command, the state is varied off . ')
aixPvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPvSize.setStatus('current')
if mibBuilder.loadTexts: aixPvSize.setDescription('Total size of the physical volume in megabytes. ')
aixPvFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPvFree.setStatus('current')
if mibBuilder.loadTexts: aixPvFree.setDescription('Available size of the physical volume in megabytes')
aixPvNumLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPvNumLVs.setStatus('current')
if mibBuilder.loadTexts: aixPvNumLVs.setDescription('Number of logical volumes using the physical volume.')
aixPvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPvIndex.setStatus('current')
if mibBuilder.loadTexts: aixPvIndex.setDescription('The columnar index for the pvTable.')
aixPageThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixPageThreshold.setStatus('current')
if mibBuilder.loadTexts: aixPageThreshold.setDescription('The percentage used threshold for the paging space. When the current used percentage for the page space is above aixVgThreshold and the value of the last poll interval is less than the threshold, then an event will be generated. The value for aixPageThreshold should be between 0 and 100. When it is set to zero, the related trap, aixPageFull, is disabled. Its default value is 95.')
aixPageTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2), )
if mibBuilder.loadTexts: aixPageTable.setStatus('current')
if mibBuilder.loadTexts: aixPageTable.setDescription(' A paging space is fixed-disk storage for information that is resident in virtual memory, but is not currently being accessed. When the amount of free real memory in the system is low, programs or data that have not been used recently are moved from real memory to paging space in order to free real memory for other activities. This table will be refreshed at least with each poll interval.')
aixPageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixPageIndex"))
if mibBuilder.loadTexts: aixPageEntry.setStatus('current')
if mibBuilder.loadTexts: aixPageEntry.setDescription(' An entry of the pageTable Table ')
aixPageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPageName.setStatus('current')
if mibBuilder.loadTexts: aixPageName.setDescription('The name of the paging space. It is assigned by the system automatically when it is created. ')
aixPageNameVG = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPageNameVG.setStatus('current')
if mibBuilder.loadTexts: aixPageNameVG.setDescription('Specifies the volume group within which the logical volume for the paging space is created. ')
aixPageNamePV = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPageNamePV.setStatus('current')
if mibBuilder.loadTexts: aixPageNamePV.setDescription('Specifies the physical volume of the volume group. ')
aixPageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPageSize.setStatus('current')
if mibBuilder.loadTexts: aixPageSize.setDescription('The size of the paging space. ')
aixPagePercentUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPagePercentUsed.setStatus('current')
if mibBuilder.loadTexts: aixPagePercentUsed.setDescription('The used percentage of the paging space. ')
aixPageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPageStatus.setStatus('current')
if mibBuilder.loadTexts: aixPageStatus.setDescription('Status of the paging space.')
aixPageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lv", 1), ("nfs", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPageType.setStatus('current')
if mibBuilder.loadTexts: aixPageType.setDescription('The type of paging space. ')
aixPageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPageIndex.setStatus('current')
if mibBuilder.loadTexts: aixPageIndex.setDescription('The columnar index for the pageTable.')
aixPrtQueTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1), )
if mibBuilder.loadTexts: aixPrtQueTable.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueTable.setDescription('The print queue table. If several devices are attached to one queue, there are several entries whose keys are queue name and device name.')
aixPrtQueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixPrtQueIndex"))
if mibBuilder.loadTexts: aixPrtQueEntry.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueEntry.setDescription('An entry for a queue in the print queue table.')
aixPrtQueName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueName.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueName.setDescription('The name of the queue .')
aixPrtQueDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueDevice.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueDevice.setDescription('Print Queue device ')
aixPrtQueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ready", 1), ("running", 2), ("waiting", 3), ("off", 4), ("oprwait", 5), ("init", 6), ("sending", 7), ("gethost", 8), ("connect", 9), ("busy", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueStatus.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueStatus.setDescription('ready(1) indicates that virtual device is up. running(2) indicates that virtual device is running a job. waiting(3) indicates that virtual device is could not open and is waiting on a device. off(4) indicates that virtual device is down. oprwait(5) indicates that virtual device is waiting on operator message response. init(6) indicates that virtual device is running a job which has set status to initialize . sending(7) indicates that virtual device is remote and in the process of sending data to the foriegn server. gethost(8) indicates that virtual device is remote and in the process of determining the foriegn server. connect(9) indicates that virtual device is remote and in the process of connecting to the foriegn server. busy(10) indicates virtual device is busy printing another job. ')
aixPrtQueAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixPrtQueAction.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueAction.setDescription('A control variable used to trigger an action on a queue in the printer table. When read, this variable always returns the most recent value that it was previously set to. If it has not been set since the last initialization of the print subsystem on the node, it returns default(1) . When set, this variable causes the queue to undertake the indicated action: default - the default value for this queue status. start - start the print queue. stop - stop the print queue.')
aixPrtQueDescipline = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueDescipline.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueDescipline.setDescription('Specifies the order of print jobs in the queue. For example, the discipline may be first come first servei(fcfs) or shrtest job next (sjn). The selected queuing discipline applies to all printers associated with the print queue. ')
aixPrtQueAcctFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueAcctFile.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueAcctFile.setDescription('Specify the full path name of an existing file where accounting data for this print queue can be logged. If account is not wanted, it is set to FALSE.')
aixPrtQueHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueHost.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueHost.setDescription('Specifies the full path name of an existing file where accounting data for this print queue can be logged. If accounting is not wanted, FALSE is specified.')
aixPrtQueRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueRQ.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueRQ.setDescription('Specifies the remote queue name. If the queue is defined on the local host, NULL string value will be assigned. ')
aixPrtQueJobNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueJobNum.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueJobNum.setDescription('the job number of currently running job in the queue. If the queue is down, the job number of the currently running job will be zero.')
aixPrtQueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrtQueIndex.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueIndex.setDescription('The columnar index for the aixPrtQueTable.')
aixUsrTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1), )
if mibBuilder.loadTexts: aixUsrTable.setStatus('current')
if mibBuilder.loadTexts: aixUsrTable.setDescription('List of users.')
aixUsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixUsrIndex"))
if mibBuilder.loadTexts: aixUsrEntry.setStatus('current')
if mibBuilder.loadTexts: aixUsrEntry.setDescription('An entry in the users table.')
aixUsrName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixUsrName.setStatus('current')
if mibBuilder.loadTexts: aixUsrName.setDescription('Specifies a string that identifies this user account on the system. A user name contains a string of one to eight bytes. They can be letters, numbers, and some special characters in the user name. The following restrictions apply: The user name can not start with a - (minus sign), + (plus sign), or ~ (tilde). It cannot have a , (comma), : (colon), =(equals sign), * (asterisk), (double quotes), or the keywords ALL and default in the user name.')
aixUsrID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrID.setStatus('current')
if mibBuilder.loadTexts: aixUsrID.setDescription(' Defines a unique decimal integer string to associate with this user account on the system. It is strongly recommended to let the system generate the user to incorporate all the security restrictions and conventions that may apply to your system. To have the system generate the ID, leave this field blank.')
aixUsrHome = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrHome.setStatus('current')
if mibBuilder.loadTexts: aixUsrHome.setDescription('The user home directory. ')
aixUsrShell = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrShell.setStatus('current')
if mibBuilder.loadTexts: aixUsrShell.setDescription("The user's initial shell. On AIX, it is also called initial program. ")
aixUsrLocalLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrLocalLogin.setStatus('current')
if mibBuilder.loadTexts: aixUsrLocalLogin.setDescription('Indicates whether the user can log into the system with the login command locally. default value is true(1)')
aixUsrRemoteLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrRemoteLogin.setStatus('current')
if mibBuilder.loadTexts: aixUsrRemoteLogin.setDescription('Indicates whether the user can log into the system with the login command. For example, if this is set to false, the user can not login with the telnet remotely. default value is true(1).')
aixUsrPasswdMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrPasswdMaxAge.setStatus('current')
if mibBuilder.loadTexts: aixUsrPasswdMaxAge.setDescription("Defines the maximum age (in weeks) for the user's password. When the password reaches this age, the system requires it to be changed before the user can login again. The value is a decimal integer string. If 0 is specified, this feature is disabled. default value is 0.")
aixUsrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2), ("disabled", 3), ("enabled", 4), ("error", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrStatus.setStatus('current')
if mibBuilder.loadTexts: aixUsrStatus.setDescription("The user status. Determines the status of the user. Changing this variable will affect the user. 'locked(2)' is synonymous with 'disabled(3)', and unlocked(1) is the same as enabled(4). Default value is unlocked(1). ")
aixUsrGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixUsrGroups.setStatus('current')
if mibBuilder.loadTexts: aixUsrGroups.setDescription("Lists the groups to which the user belongs seperated by the \\',\\' delimiter. The first on group on the list is the primary group. Groups are collections of users that can share access authority to protected resources. Groups can be formed for users who access the same applications or hardware resources, perform similar tasks, or have similar needs for information. A user can be a member in up to 32 groups. However, only one primary group for a user can be specified. When a new user account is created and the primary group is not provided, the system assigns the user to the primary default group specified in the /usr/lib/security/mkuser.default file.")
aixUsrAllowableAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrAllowableAttempts.setStatus('current')
if mibBuilder.loadTexts: aixUsrAllowableAttempts.setDescription('Number of failed logins times before the user account is locked. Default value is 0. Zero or negative value indicates no limit exists. ')
aixUsrResetLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrResetLoginCount.setStatus('current')
if mibBuilder.loadTexts: aixUsrResetLoginCount.setDescription("After the number of unsuccessful login attempts defined by aixUsrAllowableAttempts, the user will not be able to log in until the user's unsuccessful_login_count attribute in /etc/security/lastlog to be less than the value defined by aixUsrAllowableAttempts. When this variable is set to 2(reset), the unsuccessful_login_count in /etc/security/lastlog will be set to zero. Default value is 1.")
aixUsrPrimaryGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixUsrPrimaryGroup.setStatus('current')
if mibBuilder.loadTexts: aixUsrPrimaryGroup.setDescription('The primary group that the user belongs to .')
aixUsrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixUsrIndex.setStatus('current')
if mibBuilder.loadTexts: aixUsrIndex.setDescription('The index of the user table .')
aixGrpTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1), )
if mibBuilder.loadTexts: aixGrpTable.setStatus('current')
if mibBuilder.loadTexts: aixGrpTable.setDescription('List of groups.')
aixGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixGrpIndex"))
if mibBuilder.loadTexts: aixGrpEntry.setStatus('current')
if mibBuilder.loadTexts: aixGrpEntry.setDescription('An entry in the group table.')
aixGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixGrpIndex.setStatus('current')
if mibBuilder.loadTexts: aixGrpIndex.setDescription('The index of the group table.')
aixGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixGrpName.setStatus('current')
if mibBuilder.loadTexts: aixGrpName.setDescription("Specifies the string that identifies a collection of system users that can access and work with protected resources. The system uses groups to control access to files and resources by users who do not own them. When a user invokes a process, the system associates the process with the user's ID and the group IDs of the groups of which the user is a member. If the user owns the resource or is a member of a group that can access it, the system grants read, write, or execute access to it according to the access control list of the resource or file. ")
aixGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixGrpID.setStatus('current')
if mibBuilder.loadTexts: aixGrpID.setDescription('The system assigns a unique ID associated to the group name. The group IDs are stored in the /etc/group file.')
aixGrpAdminGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixGrpAdminGroup.setStatus('current')
if mibBuilder.loadTexts: aixGrpAdminGroup.setDescription("Indicates if the group is an administrative group. Only the root user can modify the attributes of an administrative group. This field is displayed with False or True as its value. True indicates that group is an administrative group. False indicates that it is a non administrative group (its attributes can be modified by the group's specified administrators and the root user). Default value is false(2).")
aixGrpUsrList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixGrpUsrList.setStatus('current')
if mibBuilder.loadTexts: aixGrpUsrList.setDescription(' the users who are in this group.')
aixGrpAdmList = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 4, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixGrpAdmList.setStatus('current')
if mibBuilder.loadTexts: aixGrpAdmList.setDescription(' The administrator list for this group .')
aixFsThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixFsThreshold.setStatus('current')
if mibBuilder.loadTexts: aixFsThreshold.setDescription('The percentage threshold for the file system. When the current used percentage for the file system is above aixVgThreshold and the value of the last poll interval is less than the threshold, then an event will be generated. The value for aixFsThreshold should be between 0 and 100. When it is zero, the related trap, aixFileSystemFull, is disabled. Its default value is 95. ')
aixFsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2), )
if mibBuilder.loadTexts: aixFsTable.setStatus('current')
if mibBuilder.loadTexts: aixFsTable.setDescription('The file system table. This table will be refreshed at least with each poll interval.')
aixFsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixFsIndex"))
if mibBuilder.loadTexts: aixFsTableEntry.setStatus('current')
if mibBuilder.loadTexts: aixFsTableEntry.setDescription('An entry of the file system table')
aixFsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsIndex.setStatus('current')
if mibBuilder.loadTexts: aixFsIndex.setDescription('The index of the file system table.')
aixFsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsName.setStatus('current')
if mibBuilder.loadTexts: aixFsName.setDescription('The name of the file system.')
aixFsMountPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsMountPoint.setStatus('current')
if mibBuilder.loadTexts: aixFsMountPoint.setDescription('Specifies the mount point, which is the directory where the file system is available or will be made available.')
aixFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("jfs", 1), ("jfs2", 2), ("cdrfs", 3), ("procfs", 4), ("cachefs", 5), ("autofs", 6), ("afs", 7), ("dfs", 8), ("nfs", 9), ("nfs3", 10), ("other", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsType.setStatus('current')
if mibBuilder.loadTexts: aixFsType.setDescription('The file system type. The type may be JFS(Journal File System), JFS2 (extented JFS), AFS, DFS, cashefs, autofs, procfs, cdrfs (CDROM file system), NFS(Network File System), NFS3 (NFSv3 file system) ')
aixFsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixFsSize.setStatus('current')
if mibBuilder.loadTexts: aixFsSize.setDescription('The size for this file system in megabytes.')
aixFsFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsFree.setStatus('current')
if mibBuilder.loadTexts: aixFsFree.setDescription('Total number of megabytes free in file system.')
aixFsNumINodes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsNumINodes.setStatus('current')
if mibBuilder.loadTexts: aixFsNumINodes.setDescription('Total number of i-nodes on this file system.')
aixFsUsedInodes = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsUsedInodes.setStatus('current')
if mibBuilder.loadTexts: aixFsUsedInodes.setDescription('The used number of Inodes in the file system. ')
aixFsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mounted", 1), ("unmounted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsStatus.setStatus('current')
if mibBuilder.loadTexts: aixFsStatus.setDescription('The status of the file system. It is either mounted(1) or unmounted(2).')
aixFsExecution = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mount", 2), ("unmount", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixFsExecution.setStatus('current')
if mibBuilder.loadTexts: aixFsExecution.setDescription('The variable is used to trigger the mount action on unmounted file system and unmount action on mounted file system. This state can only change from mount to unmount or unmount to mount. Its normal status is other(1). The execution result is kept at aixFsResultMsg.')
aixFsResultMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 6, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixFsResultMsg.setStatus('current')
if mibBuilder.loadTexts: aixFsResultMsg.setDescription('The execution result message of mounting or umounting command. ')
aixProcNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcNum.setStatus('current')
if mibBuilder.loadTexts: aixProcNum.setDescription('The number of processes running.')
aixProcTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2), )
if mibBuilder.loadTexts: aixProcTable.setStatus('current')
if mibBuilder.loadTexts: aixProcTable.setDescription('The Process Table.')
aixProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixProcPID"))
if mibBuilder.loadTexts: aixProcEntry.setStatus('current')
if mibBuilder.loadTexts: aixProcEntry.setDescription('Each entry contains information about a process running on the system.')
aixProcPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcPID.setStatus('current')
if mibBuilder.loadTexts: aixProcPID.setDescription('The process ID (pid) of the process.')
aixProcUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcUID.setStatus('current')
if mibBuilder.loadTexts: aixProcUID.setDescription('The user ID of the process owner.')
aixProcPPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcPPID.setStatus('current')
if mibBuilder.loadTexts: aixProcPPID.setDescription('The process ID of the parent process.')
aixProcGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcGroup.setStatus('current')
if mibBuilder.loadTexts: aixProcGroup.setDescription('Indicates the effective group ID of the process.')
aixProcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcPriority.setStatus('current')
if mibBuilder.loadTexts: aixProcPriority.setDescription('The priority of the process or kernel thread, higher numbers mean lower priority.')
aixProcCMD = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcCMD.setStatus('current')
if mibBuilder.loadTexts: aixProcCMD.setDescription('The command name of the process. ')
aixProcCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcCPU.setStatus('current')
if mibBuilder.loadTexts: aixProcCPU.setDescription('CPU utilization of process or thread, incremented each time the system clock ticks and the process or thread is found to be running. Large values indicate a CPU intensive process and results in lower process priority whereas small values indicate an I/O intensive process and result in a more favorable priority. ')
aixProcStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcStart.setStatus('current')
if mibBuilder.loadTexts: aixProcStart.setDescription('The start time of the process.')
aixProcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nonexistentPS", 1), ("activePS", 2), ("swappedPS", 3), ("idlePS", 4), ("canceledPS", 5), ("stoppedPS", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcStatus.setStatus('current')
if mibBuilder.loadTexts: aixProcStatus.setDescription('For processes: (1)O Nonexistent (2)A Active (3)W Swapped (4)I Idle (waiting for startup) : (5)Z Canceled (6)T Stopped ')
aixProcTTY = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 7, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcTTY.setStatus('current')
if mibBuilder.loadTexts: aixProcTTY.setDescription('Indicates the controlling terminal name of the process. ')
aixSubSystemNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSystemNum.setStatus('current')
if mibBuilder.loadTexts: aixSubSystemNum.setDescription('The number of the subsystems in the current table.')
aixSubSysTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 2), )
if mibBuilder.loadTexts: aixSubSysTable.setStatus('current')
if mibBuilder.loadTexts: aixSubSysTable.setDescription('A table of subsystems.')
aixSubSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 2, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixSubSysIndex"))
if mibBuilder.loadTexts: aixSubSysEntry.setStatus('current')
if mibBuilder.loadTexts: aixSubSysEntry.setDescription(' An entry in the subsystem table')
aixSubSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSysName.setStatus('current')
if mibBuilder.loadTexts: aixSubSysName.setDescription('The name of the subsystem. ')
aixSubSysGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSysGroup.setStatus('current')
if mibBuilder.loadTexts: aixSubSysGroup.setDescription('A subsystem group is a group of any specified subsystems. Grouping subsystems together allows control over several subsystems at the same time. Examples of subsystem groups are TCP/IP, SNA Services, Network Information system (NIS), and Network File Systems (NFS).')
aixSubSysPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSysPID.setStatus('current')
if mibBuilder.loadTexts: aixSubSysPID.setDescription('The process ID of the subsystem. When the subsystem is inoperative, the PID is zero.')
aixSubSysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inoperative", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixSubSysStatus.setStatus('current')
if mibBuilder.loadTexts: aixSubSysStatus.setDescription('The status of the subsystem. When it is active(1), it can be stopped by setting the status to 2. Or when it is inoperative(2), it can be started by setting the status to 1.')
aixSubSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSysIndex.setStatus('current')
if mibBuilder.loadTexts: aixSubSysIndex.setDescription('The index of the subsystem table.')
aixSubSrvNum = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSrvNum.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvNum.setDescription('The number of subservers')
aixSubSrvTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2), )
if mibBuilder.loadTexts: aixSubSrvTable.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvTable.setDescription('A table of subservers. A subserver is a program or process that belongs to a subsystem. A subsystem can have multiple subservers and is responsible for starting, stopping, and providing status of the subservers.')
aixSubSrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixSubSrvIndex"))
if mibBuilder.loadTexts: aixSubSrvEntry.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvEntry.setDescription('An entry in the subserver table.')
aixSubSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSrvName.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvName.setDescription(' the subserver name.')
aixSubSrvDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSrvDescr.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvDescr.setDescription('The description of the subserver.')
aixSubSrvCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSrvCommand.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvCommand.setDescription('The command to start the subserver.')
aixSubSrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inoperative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSrvStatus.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvStatus.setDescription(' The status of the subserver.')
aixSubSrvSubsys = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSrvSubsys.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvSubsys.setDescription('the subsystem name which the subserver belongs to.')
aixSubSrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixSubSrvIndex.setStatus('current')
if mibBuilder.loadTexts: aixSubSrvIndex.setDescription(' The index of the subserver table.')
aixFailedLoginTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixFailedLoginTimePeriod.setStatus('current')
if mibBuilder.loadTexts: aixFailedLoginTimePeriod.setDescription('The time period where failed login attempts are recorded to compare against aixLoginFailedThreshold. The default is 300 seconds (5 minutes). ')
aixLoginFailedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aixLoginFailedThreshold.setStatus('current')
if mibBuilder.loadTexts: aixLoginFailedThreshold.setDescription('Defines the number of attempts which a user can try to log onto the system in the time period defined by failedLoginTimePeriod prior to the current time before a trap is generated and sent. When this variable is set to zero, the aixUserLoginFailed trap is disabled. The default is 20 which means that if users attempting and failing to log in 20 times in last time period defined by aixFailedLoginTimePeriod , a trap is generated. These attempts are recorded in /etc/security/failedlogin or /var/adm/wtmp .')
aixLoginUserTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 3), )
if mibBuilder.loadTexts: aixLoginUserTable.setStatus('current')
if mibBuilder.loadTexts: aixLoginUserTable.setDescription('loginUserTable contains users who are logged in currently.')
aixLoginUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 3, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixLoginUserIndex"))
if mibBuilder.loadTexts: aixLoginUserEntry.setStatus('current')
if mibBuilder.loadTexts: aixLoginUserEntry.setDescription(' An entry of loginUserTable ')
aixLoginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLoginUserName.setStatus('current')
if mibBuilder.loadTexts: aixLoginUserName.setDescription('The user name. If the user name is unknown, its value is UNKNOWN_U.')
aixLoginUserTTY = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLoginUserTTY.setStatus('current')
if mibBuilder.loadTexts: aixLoginUserTTY.setDescription(' The terminal tty name. ')
aixLoginUserHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLoginUserHost.setStatus('current')
if mibBuilder.loadTexts: aixLoginUserHost.setDescription('The IP address of the machine the user tried to log onto the system from. ')
aixLoginUserDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLoginUserDateAndTime.setStatus('current')
if mibBuilder.loadTexts: aixLoginUserDateAndTime.setDescription('The date and time when the user logged in.')
aixLoginUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixLoginUserIndex.setStatus('current')
if mibBuilder.loadTexts: aixLoginUserIndex.setDescription('Index for the table')
aixPrinterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1), )
if mibBuilder.loadTexts: aixPrinterTable.setStatus('current')
if mibBuilder.loadTexts: aixPrinterTable.setDescription('A table of defined printers/plotters. On AIX, the printer is defined, used and dealt with in the same way as the plotter. The number of entries depends on the configuration of the system such as the serial or parallel port number.')
aixPrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixPrinterIndex"))
if mibBuilder.loadTexts: aixPrinterEntry.setStatus('current')
if mibBuilder.loadTexts: aixPrinterEntry.setDescription('An entry of printerTable. Each entry contains all attributes of a defined printer or plotter.')
aixPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterName.setStatus('current')
if mibBuilder.loadTexts: aixPrinterName.setDescription('When a printer or plotter device is added to the system, a name is automatically assigned to the device. On AIX, this name is in the format of lpx, for example, lp0, lp1.')
aixPrinterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterIndex.setStatus('current')
if mibBuilder.loadTexts: aixPrinterIndex.setDescription('The index of the printer table.')
aixPrinterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterType.setStatus('current')
if mibBuilder.loadTexts: aixPrinterType.setDescription('This is the type of the printer/plotter. The type can be the defined printer/plotter name such as hplj-8100 which represents Hewlett-Packard LaserJet 8100, or opp for Other parallel printer, or osp for other serial printer.')
aixPrinterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterInterface.setStatus('current')
if mibBuilder.loadTexts: aixPrinterInterface.setDescription('The printer/plotter interface with the computer. Its value can be parallel, rs232, or rs422.')
aixPrinterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterStatus.setStatus('current')
if mibBuilder.loadTexts: aixPrinterStatus.setDescription('Indicates the current status of the device. Possible values are available(1), indicating that the device is configured in the system and ready to use; and defined(2), indicating that the device is defined to the system but not configured. ')
aixPrinterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterDescr.setStatus('current')
if mibBuilder.loadTexts: aixPrinterDescr.setDescription('The description for the printer/plotter. ')
aixPrinterLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterLocation.setStatus('current')
if mibBuilder.loadTexts: aixPrinterLocation.setDescription('Location codes of 00-00-S1-00 or 00-00-S2-0 indicate the printer or plotter device is connected to the standard I/O serial ports s1 or s2. A location code of 00-00-0P-00 indicates that the parallel printer is connected to the standard I/O parallel port Any other location code will indicate a printer or plotter which is connected to an adapter card other than the Standard I/O board. For these printers and plotters the location code format is AA-BB-CC-DD where AA-BB indicates the location code of the controlling adapter. A value of 00 for the AA field indicates the adapter card is located in the CPU drawer or system unit depending on the type of system. Any other value for the AA field indicates the card is located in an I/O expansion drawer; in which case, the first digit identifies the I/O bus and the second digit identifies the slot number on the bus, in the CPU drawer, that contain the asynchronous expansion adapter to which the I/O expansion drawer is connected. The first digit of this BB field identifies the I/O bus containing the adapter card. If the card is in the CPU drawer or system unit, this digit will be 0 for the standard I/O bus or 1 for the optional I/O bus. If the card is in an I/O expansion drawer, this digit is 0. The second digit identifies the slot number on the I/O bus (or slot number in the I/O expansion drawer) that contains the card. The CC field identifies the connector on the adapter card to where the asynchronous distribution box is connected. Possible values are 01, 02, 03, and 04. The DD field identifies the port number on the asynchronous distribution box where the printer or plotter is attached.')
aixPrinterPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixPrinterPortNumber.setStatus('current')
if mibBuilder.loadTexts: aixPrinterPortNumber.setDescription('The printer port number. This indicates the port on an adapter card or asynchronous distribution box to which the printer or plotter is connected. The value must be in the range 0 through 7 for an 8-port adapter card, 0 through 15 for a 16-port adapter card, and 0 through 63 for a 64-port adapter card. The standard I/O ports are designated as s1 and s2 for the two serial ports and p for the parallel port.')
aixTapeDrvTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1), )
if mibBuilder.loadTexts: aixTapeDrvTable.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvTable.setDescription('A table of defined tape drives. The number of entries depends on the configuration of the system. ')
aixTapeDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixTapeDrvIndex"))
if mibBuilder.loadTexts: aixTapeDrvEntry.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvEntry.setDescription('An entry in the aixTapeDrvTable. Each entry contains all the attributes of a tape drive.')
aixTapeDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvName.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvName.setDescription('Identifies the logical name of the device. When a tape drive is added or defined in the system, a name is automatically assigned to the device. The format of the name looks like rmt0.')
aixTapeDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvIndex.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvIndex.setDescription('The index of the tape drive table.')
aixTapeDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvType.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvType.setDescription('Identifies the predefined device type of the tape drive. For example, 4mm2gb2 is a scsi 2.0 GB 4mm Tape Drive.')
aixTapeDrvInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvInterface.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvInterface.setDescription('Identifies the type of tape drive interface. This is the same as the predefined device subclass of the device.')
aixTapeDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvStatus.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvStatus.setDescription('Indicates the current status of the tape drive. Possible values are available (1), indicating that the tape drive is configured in the system and ready to be used, and defined(2), indicating that the tape drive is defined to the system but not configured.')
aixTapeDrvDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvDescr.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvDescr.setDescription('Provides a short text description of the tape drive device.')
aixTapeDrvLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvLocation.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvLocation.setDescription("For all SCSI devices, including disks, CD-ROMs, read/write optical drives, tapes, target mode, and initiator devices, the location code format is AA-BB-CC-S,L. The AA-BB fields identify the location code of the SCSI adapter controlling the SCSI device. . A value of 00 for the AA field indicates the controlling adapter card is located in the CPU drawer or system unit, depending on the type of system. . The BB field identifies the I/O bus and slot containing the card. The first digit indicates the I/O bus. It is 0 for the standard I/O bus and 1 for the optional I/O bus. The second digit is the slot on the indicated I/O bus containing the card. A value of 00 for the BB field indicates the standard SCSI controller. . The CC field identifies the card's SCSI bus that the device is attached to. For a card that provides only a single SCSI bus, this field will be set to 00. Otherwise, a value of 00 indicates a device attached to the card's internal SCSI bus and a value of 01 indicates a device attached to the card's external SCSI bus. . The S,L field identifies the SCSI ID and logical unit number (LUN) of the SCSI device. The S value indicates the SCSI ID, and the L value indicates the LUN.")
aixTapeDrvBlkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvBlkSize.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvBlkSize.setDescription('Indicates the block size to use when reading or writing to the tape.')
aixTapeDrvManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvManufacturerName.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvManufacturerName.setDescription('The name of the manufacturer of the tape drive.')
aixTapeDrvModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvModelName.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvModelName.setDescription('The model name of the tape drive.')
aixTapeDrvSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvSN.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvSN.setDescription('The tape driver serial number.')
aixTapeDrvPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvPN.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvPN.setDescription('The tape driver part number.')
aixTapeDrvFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvFRU.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvFRU.setDescription('The tape drive FRU number (Field Replaceable Unit).')
aixTapeDrvEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 2, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixTapeDrvEC.setStatus('current')
if mibBuilder.loadTexts: aixTapeDrvEC.setDescription('The tape drive EC (Engineering Change).')
aixHdTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1), )
if mibBuilder.loadTexts: aixHdTable.setStatus('current')
if mibBuilder.loadTexts: aixHdTable.setDescription('A table of defined hard disks. The number of entries depends on the configuration of the system. ')
aixHdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixHdIndex"))
if mibBuilder.loadTexts: aixHdEntry.setStatus('current')
if mibBuilder.loadTexts: aixHdEntry.setDescription('An entry in hdTable. Each entry contains all the attributes of the individual hard disk.')
aixHdName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdName.setStatus('current')
if mibBuilder.loadTexts: aixHdName.setDescription('Identifies the logical name of the disk device.')
aixHdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdIndex.setStatus('current')
if mibBuilder.loadTexts: aixHdIndex.setDescription('The index for the hard disk table.')
aixHdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdType.setStatus('current')
if mibBuilder.loadTexts: aixHdType.setDescription(' Identifies the predefined device type of the disk.')
aixHdSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdSize.setStatus('current')
if mibBuilder.loadTexts: aixHdSize.setDescription('The size in megabytes of the hard disk. ')
aixHdInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdInterface.setStatus('current')
if mibBuilder.loadTexts: aixHdInterface.setDescription('Identifies the type of disk interface. This is the same as the predefined device subclass of the disk.')
aixHdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdStatus.setStatus('current')
if mibBuilder.loadTexts: aixHdStatus.setDescription('Indicates the current status of the disk device. Possible values are available(1), indicating that the disk device is configured in the system and ready to be used, and defined(2), indicating that the disk device is defined to the system but not configured.')
aixHdLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdLocation.setStatus('current')
if mibBuilder.loadTexts: aixHdLocation.setDescription('For all SCSI devices, including disks, CD-ROMs, read/write optical drives, tapes, target mode, and initiator devices, the location code format is AA-BB-CC-S,L. The AA-BB fields identify the location code of the SCSI adapter controlling the SCSI device. For details, please refer to aixTapeDrvLocation. ')
aixHdIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdIdentifier.setStatus('current')
if mibBuilder.loadTexts: aixHdIdentifier.setDescription('Displays the unique physical volume identifier of the physical volume of a disk. If the disk is not a physical volume, this field value will be none.')
aixHdDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdDescr.setStatus('current')
if mibBuilder.loadTexts: aixHdDescr.setDescription(' Provides a short text description of the disk device.')
aixHdManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdManufacturerName.setStatus('current')
if mibBuilder.loadTexts: aixHdManufacturerName.setDescription('The name of the manufacturer of the hard drive.')
aixHdModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdModelName.setStatus('current')
if mibBuilder.loadTexts: aixHdModelName.setDescription('The Model Name of the hard drive.')
aixHdSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdSN.setStatus('current')
if mibBuilder.loadTexts: aixHdSN.setDescription('The hard driver serial number.')
aixHdPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdPN.setStatus('current')
if mibBuilder.loadTexts: aixHdPN.setDescription('The hard driver part number.')
aixHdFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdFRU.setStatus('current')
if mibBuilder.loadTexts: aixHdFRU.setDescription('The hard drive FRU number (Field Replaceable Unit).')
aixHdEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixHdEC.setStatus('current')
if mibBuilder.loadTexts: aixHdEC.setDescription('The hard drive Engineering Change.')
aixMemTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4, 1), )
if mibBuilder.loadTexts: aixMemTable.setStatus('current')
if mibBuilder.loadTexts: aixMemTable.setDescription('A table of defined physical memory. The number of entries depends on the configuration of the system. ')
aixMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixMemIndex"))
if mibBuilder.loadTexts: aixMemEntry.setStatus('current')
if mibBuilder.loadTexts: aixMemEntry.setDescription('An entry in the memory table .')
aixMemName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixMemName.setStatus('current')
if mibBuilder.loadTexts: aixMemName.setDescription('The name of the memory. For example, it may be mem0.')
aixMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixMemIndex.setStatus('current')
if mibBuilder.loadTexts: aixMemIndex.setDescription('The index for the memory table.')
aixMemLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixMemLocation.setStatus('current')
if mibBuilder.loadTexts: aixMemLocation.setDescription('The memory location code. An example is 00-00.')
aixMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('megabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: aixMemSize.setStatus('current')
if mibBuilder.loadTexts: aixMemSize.setDescription('The size of the physical memory in megabytes. ')
aixMemDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixMemDescr.setStatus('current')
if mibBuilder.loadTexts: aixMemDescr.setDescription('The description of memory ')
aixCdromTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1), )
if mibBuilder.loadTexts: aixCdromTable.setStatus('current')
if mibBuilder.loadTexts: aixCdromTable.setDescription('A table of all defined cdroms.')
aixCdromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixCdromIndex"))
if mibBuilder.loadTexts: aixCdromEntry.setStatus('current')
if mibBuilder.loadTexts: aixCdromEntry.setDescription('An entry in the cdrom table .')
aixCdromName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromName.setStatus('current')
if mibBuilder.loadTexts: aixCdromName.setDescription('Identifies the logical name of the CD-ROM drive.')
aixCdromIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromIndex.setStatus('current')
if mibBuilder.loadTexts: aixCdromIndex.setDescription('The index for the CD-ROM table.')
aixCdromType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromType.setStatus('current')
if mibBuilder.loadTexts: aixCdromType.setDescription('Identifies the predefined device type of the CD-ROM drive.')
aixCdromInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromInterface.setStatus('current')
if mibBuilder.loadTexts: aixCdromInterface.setDescription('Identifies the type of drive interface. This is the same as the predefined device subclass of the CD-ROM drive.')
aixCdromDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromDescr.setStatus('current')
if mibBuilder.loadTexts: aixCdromDescr.setDescription('Provides a short text description of the CD-ROM drive device.')
aixCdromStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromStatus.setStatus('current')
if mibBuilder.loadTexts: aixCdromStatus.setDescription('Indicates the current status of the CD-ROM drive. Possible values are available(1), indicating that the CD-ROM drive is configured in the system and ready to be used, and defined(2), indicating that the drive is defined to the system but not configured.')
aixCdromLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromLocation.setStatus('current')
if mibBuilder.loadTexts: aixCdromLocation.setDescription('For all SCSI devices, including disks, CD-ROMs, read/write optical drives, tapes, target mode, and initiator devices, the location code format is AA-BB-CC-S,L. The AA-BB fields identify the location code of the SCSI adapter controlling the SCSI device. For details, please refer to aixTapeDrvLocation. ')
aixCdromManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromManufacturerName.setStatus('current')
if mibBuilder.loadTexts: aixCdromManufacturerName.setDescription('The name of the manufacturer of the cdrom drive.')
aixCdromModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromModelName.setStatus('current')
if mibBuilder.loadTexts: aixCdromModelName.setDescription('The cdrom driver model name.')
aixCdromPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromPN.setStatus('current')
if mibBuilder.loadTexts: aixCdromPN.setDescription('The cdrom driver part number.')
aixCdromFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromFRU.setStatus('current')
if mibBuilder.loadTexts: aixCdromFRU.setDescription('The cdrom drive FRU (Field Replaceable Unit).')
aixCdromEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 5, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixCdromEC.setStatus('current')
if mibBuilder.loadTexts: aixCdromEC.setDescription('The cdrom drive Engineering Change.')
aixScsiTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1), )
if mibBuilder.loadTexts: aixScsiTable.setStatus('current')
if mibBuilder.loadTexts: aixScsiTable.setDescription('A table of SCSI adapters.')
aixScsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixScsiIndex"))
if mibBuilder.loadTexts: aixScsiEntry.setStatus('current')
if mibBuilder.loadTexts: aixScsiEntry.setDescription('An entry of the SCSI adapter .')
aixScsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixScsiName.setStatus('current')
if mibBuilder.loadTexts: aixScsiName.setDescription('Identifies the logical name of the adapter.')
aixScsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixScsiIndex.setStatus('current')
if mibBuilder.loadTexts: aixScsiIndex.setDescription('The index for the scsi adapter table.')
aixScsiDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixScsiDescr.setStatus('current')
if mibBuilder.loadTexts: aixScsiDescr.setDescription(' Defines a short text description of the adapter.')
aixScsiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixScsiStatus.setStatus('current')
if mibBuilder.loadTexts: aixScsiStatus.setDescription('Indicates the current status of the adapter. Possible values are available, indicating that the adapter is configured in the system and ready to be used, and defined, indicating that the adapter is defined on the system but not configured.')
aixScsiLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixScsiLocation.setStatus('current')
if mibBuilder.loadTexts: aixScsiLocation.setDescription('The location code for the SCSI adapter. An example is 04-C0.')
aixScsiAdapterID = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixScsiAdapterID.setStatus('current')
if mibBuilder.loadTexts: aixScsiAdapterID.setDescription(' Specifies the SCSI ID value which the adapter will use when sending SCSI commands as an initiator device, and, if target mode is supported, specifies the SCSI ID the adapter will respond to when acting as a target device. ')
aixProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7, 1), )
if mibBuilder.loadTexts: aixProcessorTable.setStatus('current')
if mibBuilder.loadTexts: aixProcessorTable.setDescription('A table of processors.')
aixProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixProcessorIndex"))
if mibBuilder.loadTexts: aixProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: aixProcessorEntry.setDescription('An entry of the Processor .')
aixProcessorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcessorName.setStatus('current')
if mibBuilder.loadTexts: aixProcessorName.setDescription('Identifies the logical name of the processor.')
aixProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcessorIndex.setStatus('current')
if mibBuilder.loadTexts: aixProcessorIndex.setDescription('The index for the processor table.')
aixProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcessorType.setStatus('current')
if mibBuilder.loadTexts: aixProcessorType.setDescription('Defines the model type of the processor. For example: PowerPC_604e')
aixProcessorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcessorDescr.setStatus('current')
if mibBuilder.loadTexts: aixProcessorDescr.setDescription(' Defines a short text description of the processor.')
aixProcessorSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixProcessorSpeed.setStatus('current')
if mibBuilder.loadTexts: aixProcessorSpeed.setDescription('The speed of the processor in hertz.')
aixNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1), )
if mibBuilder.loadTexts: aixNetworkTable.setStatus('current')
if mibBuilder.loadTexts: aixNetworkTable.setDescription('A table of Network adapters.')
aixNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixNetworkIndex"))
if mibBuilder.loadTexts: aixNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: aixNetworkEntry.setDescription('An entry of the Network adapter .')
aixNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixNetworkName.setStatus('current')
if mibBuilder.loadTexts: aixNetworkName.setDescription('Identifies the logical name of the network adapter.')
aixNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixNetworkIndex.setStatus('current')
if mibBuilder.loadTexts: aixNetworkIndex.setDescription('The index for the network adapter table.')
aixNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixNetworkType.setStatus('current')
if mibBuilder.loadTexts: aixNetworkType.setDescription('The type of the network adapter. An example is ie3.')
aixNetworkInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixNetworkInterface.setStatus('current')
if mibBuilder.loadTexts: aixNetworkInterface.setDescription('The interface name for the Network adapter. An example is LO.')
aixNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixNetworkStatus.setStatus('current')
if mibBuilder.loadTexts: aixNetworkStatus.setDescription('Indicates the current status of the adapter. Possible values are available, indicating that the adapter is configured in the system and ready to be used, and defined, indicating that the adapter is defined on the system but not configured.')
aixNetworkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixNetworkLocation.setStatus('current')
if mibBuilder.loadTexts: aixNetworkLocation.setDescription('The location code for the Network adapter. An example is 10-60.')
aixNetworkDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 8, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixNetworkDescr.setStatus('current')
if mibBuilder.loadTexts: aixNetworkDescr.setDescription(' Defines a short text description of the adapter. An example is IEEE 802.3 Ethernet Network Interface')
aixAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1), )
if mibBuilder.loadTexts: aixAdapterTable.setStatus('current')
if mibBuilder.loadTexts: aixAdapterTable.setDescription('A table of adapters.')
aixAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1), ).setIndexNames((0, "IBM-AIX-MIB", "aixAdapterIndex"))
if mibBuilder.loadTexts: aixAdapterEntry.setStatus('current')
if mibBuilder.loadTexts: aixAdapterEntry.setDescription('An entry of the adapter ')
aixAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAdapterName.setStatus('current')
if mibBuilder.loadTexts: aixAdapterName.setDescription('Identifies the logical name of the adapter.')
aixAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAdapterIndex.setStatus('current')
if mibBuilder.loadTexts: aixAdapterIndex.setDescription('The index for the adapter table.')
aixAdapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAdapterType.setStatus('current')
if mibBuilder.loadTexts: aixAdapterType.setDescription('The type of the adapter. An example is keyboard.')
aixAdapterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAdapterInterface.setStatus('current')
if mibBuilder.loadTexts: aixAdapterInterface.setDescription('The interface name for the adapter. An example is pci.')
aixAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("defined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAdapterStatus.setStatus('current')
if mibBuilder.loadTexts: aixAdapterStatus.setDescription('Indicates the current status of the . Possible values are available, indicating that the is configured in the system and ready to be used, and defined, indicating that the is defined on the system but not configured.')
aixAdapterLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAdapterLocation.setStatus('current')
if mibBuilder.loadTexts: aixAdapterLocation.setDescription('The location code for the adapter. An example is 01-K1-00.')
aixAdapterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 191, 9, 9, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aixAdapterDescr.setStatus('current')
if mibBuilder.loadTexts: aixAdapterDescr.setDescription(' Defines a short text description of the . An example is Keyboard Adapter')
aixCfmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1))
aixCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 2))
aixCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 2, 1)).setObjects(("IBM-AIX-MIB", "aixAgentGroup"), ("IBM-AIX-MIB", "aixVGGroup"), ("IBM-AIX-MIB", "aixPVGroup"), ("IBM-AIX-MIB", "aixLVGroup"), ("IBM-AIX-MIB", "aixPagingSpaceGroup"), ("IBM-AIX-MIB", "aixFsGroup"), ("IBM-AIX-MIB", "aixProcessGroup"), ("IBM-AIX-MIB", "aixLoginUsrGroup"), ("IBM-AIX-MIB", "aixSeGroup"), ("IBM-AIX-MIB", "aixPrtQueueGroup"), ("IBM-AIX-MIB", "aixUsrGroup"), ("IBM-AIX-MIB", "aixGrpGroup"), ("IBM-AIX-MIB", "aixSubSystemGroup"), ("IBM-AIX-MIB", "aixSubServerGroup"), ("IBM-AIX-MIB", "aixSeAuxGroup"), ("IBM-AIX-MIB", "aixPrinterGroup"), ("IBM-AIX-MIB", "aixTapeGroup"), ("IBM-AIX-MIB", "aixHardDiskGroup"), ("IBM-AIX-MIB", "aixMemoryGroup"), ("IBM-AIX-MIB", "aixCDROMGroup"), ("IBM-AIX-MIB", "aixScsiGroup"), ("IBM-AIX-MIB", "aixProcessorGroup"), ("IBM-AIX-MIB", "aixNetworkGroup"), ("IBM-AIX-MIB", "aixAdapterGroup"), ("IBM-AIX-MIB", "criticalNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixCompliance = aixCompliance.setStatus('current')
if mibBuilder.loadTexts: aixCompliance.setDescription('The statement of compliance. ')
aixAgentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 1)).setObjects(("IBM-AIX-MIB", "aixAgentAction"), ("IBM-AIX-MIB", "aixAgentCmdString"), ("IBM-AIX-MIB", "aixAgentExeCommand"), ("IBM-AIX-MIB", "aixAgentCmdResult"), ("IBM-AIX-MIB", "aixAgentCmdOutput"), ("IBM-AIX-MIB", "aixAgentCmdOutIndex"), ("IBM-AIX-MIB", "aixAgentPollInterval"), ("IBM-AIX-MIB", "aixPollEnable"), ("IBM-AIX-MIB", "aixLastTrapMsg"), ("IBM-AIX-MIB", "aixFsPollInterval"), ("IBM-AIX-MIB", "aixVgPollInterval"), ("IBM-AIX-MIB", "aixCPUPollInterval"), ("IBM-AIX-MIB", "aixLFPollInterval"), ("IBM-AIX-MIB", "aixPagePollInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixAgentGroup = aixAgentGroup.setStatus('current')
if mibBuilder.loadTexts: aixAgentGroup.setDescription('The objects necessary to control and show information about the subagent. ')
aixSeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 2)).setObjects(("IBM-AIX-MIB", "aixSeCPUUtilization"), ("IBM-AIX-MIB", "aixSeCPUThreshold"), ("IBM-AIX-MIB", "aixSeSystemRunLevel"), ("IBM-AIX-MIB", "aixSeSystemState"), ("IBM-AIX-MIB", "aixSeSystemTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixSeGroup = aixSeGroup.setStatus('current')
if mibBuilder.loadTexts: aixSeGroup.setDescription('The objects neccessary to control and show information about the system environment. These objects are mandatory.')
criticalNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 3)).setObjects(("IBM-AIX-MIB", "aixFileSystemMounted"), ("IBM-AIX-MIB", "aixFileSystemFull"), ("IBM-AIX-MIB", "aixVolumeGroupFull"), ("IBM-AIX-MIB", "aixPageFull"), ("IBM-AIX-MIB", "aixUserLoginFailed"), ("IBM-AIX-MIB", "aixUtilizationCPU"), ("IBM-AIX-MIB", "aixSnmptrapHolder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    criticalNotificationGroup = criticalNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: criticalNotificationGroup.setDescription('These objects are used to send traps.')
aixVGGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 4)).setObjects(("IBM-AIX-MIB", "aixVgName"), ("IBM-AIX-MIB", "aixVgIdentifier"), ("IBM-AIX-MIB", "aixVgState"), ("IBM-AIX-MIB", "aixVgSize"), ("IBM-AIX-MIB", "aixVgFree"), ("IBM-AIX-MIB", "aixVgCurNumLVs"), ("IBM-AIX-MIB", "aixVgOpenLVs"), ("IBM-AIX-MIB", "aixVgActivePVs"), ("IBM-AIX-MIB", "aixVgThreshold"), ("IBM-AIX-MIB", "aixVgIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixVGGroup = aixVGGroup.setStatus('current')
if mibBuilder.loadTexts: aixVGGroup.setDescription('The objects neccessary for controlling and showing information about the volume group.')
aixLVGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 5)).setObjects(("IBM-AIX-MIB", "aixLvName"), ("IBM-AIX-MIB", "aixLvNameVG"), ("IBM-AIX-MIB", "aixLvType"), ("IBM-AIX-MIB", "aixLvMountPoint"), ("IBM-AIX-MIB", "aixLvSize"), ("IBM-AIX-MIB", "aixLvState"), ("IBM-AIX-MIB", "aixLvIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixLVGroup = aixLVGroup.setStatus('current')
if mibBuilder.loadTexts: aixLVGroup.setDescription('The objects neccessary for controlling and showing information about logical volumes.')
aixPVGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 6)).setObjects(("IBM-AIX-MIB", "aixPvName"), ("IBM-AIX-MIB", "aixPvNameVG"), ("IBM-AIX-MIB", "aixPvState"), ("IBM-AIX-MIB", "aixPvSize"), ("IBM-AIX-MIB", "aixPvFree"), ("IBM-AIX-MIB", "aixPvNumLVs"), ("IBM-AIX-MIB", "aixPvIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixPVGroup = aixPVGroup.setStatus('current')
if mibBuilder.loadTexts: aixPVGroup.setDescription('The objects neccessary for controlling and showing information about physical volumes.')
aixPagingSpaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 7)).setObjects(("IBM-AIX-MIB", "aixPageName"), ("IBM-AIX-MIB", "aixPageNameVG"), ("IBM-AIX-MIB", "aixPageNamePV"), ("IBM-AIX-MIB", "aixPageSize"), ("IBM-AIX-MIB", "aixPagePercentUsed"), ("IBM-AIX-MIB", "aixPageStatus"), ("IBM-AIX-MIB", "aixPageType"), ("IBM-AIX-MIB", "aixPageThreshold"), ("IBM-AIX-MIB", "aixPageIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixPagingSpaceGroup = aixPagingSpaceGroup.setStatus('current')
if mibBuilder.loadTexts: aixPagingSpaceGroup.setDescription('The objects neccessary for controlling and showing information about paging space.')
aixFsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 8)).setObjects(("IBM-AIX-MIB", "aixFsIndex"), ("IBM-AIX-MIB", "aixFsName"), ("IBM-AIX-MIB", "aixFsMountPoint"), ("IBM-AIX-MIB", "aixFsType"), ("IBM-AIX-MIB", "aixFsSize"), ("IBM-AIX-MIB", "aixFsFree"), ("IBM-AIX-MIB", "aixFsNumINodes"), ("IBM-AIX-MIB", "aixFsUsedInodes"), ("IBM-AIX-MIB", "aixFsThreshold"), ("IBM-AIX-MIB", "aixFsStatus"), ("IBM-AIX-MIB", "aixFsExecution"), ("IBM-AIX-MIB", "aixFsResultMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixFsGroup = aixFsGroup.setStatus('current')
if mibBuilder.loadTexts: aixFsGroup.setDescription('The objects neccessary for controlling and showing information about file systems.')
aixProcessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 9)).setObjects(("IBM-AIX-MIB", "aixProcPID"), ("IBM-AIX-MIB", "aixProcUID"), ("IBM-AIX-MIB", "aixProcPPID"), ("IBM-AIX-MIB", "aixProcGroup"), ("IBM-AIX-MIB", "aixProcPriority"), ("IBM-AIX-MIB", "aixProcCPU"), ("IBM-AIX-MIB", "aixProcStart"), ("IBM-AIX-MIB", "aixProcStatus"), ("IBM-AIX-MIB", "aixProcTTY"), ("IBM-AIX-MIB", "aixProcCMD"), ("IBM-AIX-MIB", "aixProcNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixProcessGroup = aixProcessGroup.setStatus('current')
if mibBuilder.loadTexts: aixProcessGroup.setDescription('The objects neccessary for controlling and showing information about processes.')
aixLoginUsrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 10)).setObjects(("IBM-AIX-MIB", "aixLoginUserName"), ("IBM-AIX-MIB", "aixLoginUserTTY"), ("IBM-AIX-MIB", "aixLoginUserHost"), ("IBM-AIX-MIB", "aixLoginUserDateAndTime"), ("IBM-AIX-MIB", "aixLoginUserIndex"), ("IBM-AIX-MIB", "aixLoginFailedThreshold"), ("IBM-AIX-MIB", "aixFailedLoginTimePeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixLoginUsrGroup = aixLoginUsrGroup.setStatus('current')
if mibBuilder.loadTexts: aixLoginUsrGroup.setDescription('The objects neccessary for controlling and showing information about users currently logged in.')
aixPrtQueueGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 11)).setObjects(("IBM-AIX-MIB", "aixPrtQueName"), ("IBM-AIX-MIB", "aixPrtQueDevice"), ("IBM-AIX-MIB", "aixPrtQueStatus"), ("IBM-AIX-MIB", "aixPrtQueAction"), ("IBM-AIX-MIB", "aixPrtQueIndex"), ("IBM-AIX-MIB", "aixPrtQueAcctFile"), ("IBM-AIX-MIB", "aixPrtQueRQ"), ("IBM-AIX-MIB", "aixPrtQueDescipline"), ("IBM-AIX-MIB", "aixPrtQueHost"), ("IBM-AIX-MIB", "aixPrtQueJobNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixPrtQueueGroup = aixPrtQueueGroup.setStatus('current')
if mibBuilder.loadTexts: aixPrtQueueGroup.setDescription('The objects neccessary for controlling and showing information about print queues.')
aixUsrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 12)).setObjects(("IBM-AIX-MIB", "aixUsrName"), ("IBM-AIX-MIB", "aixUsrID"), ("IBM-AIX-MIB", "aixUsrHome"), ("IBM-AIX-MIB", "aixUsrShell"), ("IBM-AIX-MIB", "aixUsrLocalLogin"), ("IBM-AIX-MIB", "aixUsrRemoteLogin"), ("IBM-AIX-MIB", "aixUsrPasswdMaxAge"), ("IBM-AIX-MIB", "aixUsrStatus"), ("IBM-AIX-MIB", "aixUsrGroups"), ("IBM-AIX-MIB", "aixUsrAllowableAttempts"), ("IBM-AIX-MIB", "aixUsrResetLoginCount"), ("IBM-AIX-MIB", "aixUsrPrimaryGroup"), ("IBM-AIX-MIB", "aixUsrIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixUsrGroup = aixUsrGroup.setStatus('current')
if mibBuilder.loadTexts: aixUsrGroup.setDescription('The objects neccessary for controlling and showing information about system users.')
aixGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 13)).setObjects(("IBM-AIX-MIB", "aixGrpName"), ("IBM-AIX-MIB", "aixGrpID"), ("IBM-AIX-MIB", "aixGrpAdminGroup"), ("IBM-AIX-MIB", "aixGrpIndex"), ("IBM-AIX-MIB", "aixGrpUsrList"), ("IBM-AIX-MIB", "aixGrpAdmList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixGrpGroup = aixGrpGroup.setStatus('current')
if mibBuilder.loadTexts: aixGrpGroup.setDescription('The objects neccessary for controlling and showing information about system groups.')
aixSubSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 14)).setObjects(("IBM-AIX-MIB", "aixSubSysName"), ("IBM-AIX-MIB", "aixSubSysGroup"), ("IBM-AIX-MIB", "aixSubSysPID"), ("IBM-AIX-MIB", "aixSubSysIndex"), ("IBM-AIX-MIB", "aixSubSysStatus"), ("IBM-AIX-MIB", "aixSubSystemNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixSubSystemGroup = aixSubSystemGroup.setStatus('current')
if mibBuilder.loadTexts: aixSubSystemGroup.setDescription('The objects neccessary for controlling and showing information about subsystems.')
aixSubServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 15)).setObjects(("IBM-AIX-MIB", "aixSubSrvName"), ("IBM-AIX-MIB", "aixSubSrvDescr"), ("IBM-AIX-MIB", "aixSubSrvCommand"), ("IBM-AIX-MIB", "aixSubSrvStatus"), ("IBM-AIX-MIB", "aixSubSrvNum"), ("IBM-AIX-MIB", "aixSubSrvIndex"), ("IBM-AIX-MIB", "aixSubSrvSubsys"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixSubServerGroup = aixSubServerGroup.setStatus('current')
if mibBuilder.loadTexts: aixSubServerGroup.setDescription('The objects neccessary for controlling and showing information about subservers.')
aixSeAuxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 16)).setObjects(("IBM-AIX-MIB", "aixSeDateAndTime"), ("IBM-AIX-MIB", "aixSeMaxProcPerUser"), ("IBM-AIX-MIB", "aixSeLicenseNum"), ("IBM-AIX-MIB", "aixSeRemainingLicenseNum"), ("IBM-AIX-MIB", "aixSeNumCPUs"), ("IBM-AIX-MIB", "aixSeMachineType"), ("IBM-AIX-MIB", "aixSeSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixSeAuxGroup = aixSeAuxGroup.setStatus('current')
if mibBuilder.loadTexts: aixSeAuxGroup.setDescription('The objects neccessary for controlling and showing information about the system environment. These objects are optional.')
aixPrinterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 17)).setObjects(("IBM-AIX-MIB", "aixPrinterName"), ("IBM-AIX-MIB", "aixPrinterType"), ("IBM-AIX-MIB", "aixPrinterInterface"), ("IBM-AIX-MIB", "aixPrinterStatus"), ("IBM-AIX-MIB", "aixPrinterDescr"), ("IBM-AIX-MIB", "aixPrinterLocation"), ("IBM-AIX-MIB", "aixPrinterPortNumber"), ("IBM-AIX-MIB", "aixPrinterIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixPrinterGroup = aixPrinterGroup.setStatus('current')
if mibBuilder.loadTexts: aixPrinterGroup.setDescription('The objects neccessary for showing information about the printer.')
aixTapeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 18)).setObjects(("IBM-AIX-MIB", "aixTapeDrvName"), ("IBM-AIX-MIB", "aixTapeDrvType"), ("IBM-AIX-MIB", "aixTapeDrvInterface"), ("IBM-AIX-MIB", "aixTapeDrvStatus"), ("IBM-AIX-MIB", "aixTapeDrvLocation"), ("IBM-AIX-MIB", "aixTapeDrvBlkSize"), ("IBM-AIX-MIB", "aixTapeDrvDescr"), ("IBM-AIX-MIB", "aixTapeDrvIndex"), ("IBM-AIX-MIB", "aixTapeDrvManufacturerName"), ("IBM-AIX-MIB", "aixTapeDrvModelName"), ("IBM-AIX-MIB", "aixTapeDrvSN"), ("IBM-AIX-MIB", "aixTapeDrvFRU"), ("IBM-AIX-MIB", "aixTapeDrvPN"), ("IBM-AIX-MIB", "aixTapeDrvEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixTapeGroup = aixTapeGroup.setStatus('current')
if mibBuilder.loadTexts: aixTapeGroup.setDescription('The objects neccessary for showing information about the tape.')
aixHardDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 19)).setObjects(("IBM-AIX-MIB", "aixHdName"), ("IBM-AIX-MIB", "aixHdType"), ("IBM-AIX-MIB", "aixHdSize"), ("IBM-AIX-MIB", "aixHdInterface"), ("IBM-AIX-MIB", "aixHdStatus"), ("IBM-AIX-MIB", "aixHdLocation"), ("IBM-AIX-MIB", "aixHdIdentifier"), ("IBM-AIX-MIB", "aixHdDescr"), ("IBM-AIX-MIB", "aixHdIndex"), ("IBM-AIX-MIB", "aixHdManufacturerName"), ("IBM-AIX-MIB", "aixHdModelName"), ("IBM-AIX-MIB", "aixHdSN"), ("IBM-AIX-MIB", "aixHdFRU"), ("IBM-AIX-MIB", "aixHdPN"), ("IBM-AIX-MIB", "aixHdEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixHardDiskGroup = aixHardDiskGroup.setStatus('current')
if mibBuilder.loadTexts: aixHardDiskGroup.setDescription('The objects neccessary for showing information about the hard disk. ')
aixMemoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 20)).setObjects(("IBM-AIX-MIB", "aixMemName"), ("IBM-AIX-MIB", "aixMemLocation"), ("IBM-AIX-MIB", "aixMemSize"), ("IBM-AIX-MIB", "aixMemDescr"), ("IBM-AIX-MIB", "aixMemIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixMemoryGroup = aixMemoryGroup.setStatus('current')
if mibBuilder.loadTexts: aixMemoryGroup.setDescription('The objects neccessary for showing information about the memory. ')
aixCDROMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 21)).setObjects(("IBM-AIX-MIB", "aixCdromName"), ("IBM-AIX-MIB", "aixCdromType"), ("IBM-AIX-MIB", "aixCdromInterface"), ("IBM-AIX-MIB", "aixCdromDescr"), ("IBM-AIX-MIB", "aixCdromStatus"), ("IBM-AIX-MIB", "aixCdromLocation"), ("IBM-AIX-MIB", "aixCdromIndex"), ("IBM-AIX-MIB", "aixCdromManufacturerName"), ("IBM-AIX-MIB", "aixCdromModelName"), ("IBM-AIX-MIB", "aixCdromFRU"), ("IBM-AIX-MIB", "aixCdromPN"), ("IBM-AIX-MIB", "aixCdromEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixCDROMGroup = aixCDROMGroup.setStatus('current')
if mibBuilder.loadTexts: aixCDROMGroup.setDescription('The objects neccessary for showing information about the CDROM. ')
aixScsiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 22)).setObjects(("IBM-AIX-MIB", "aixScsiName"), ("IBM-AIX-MIB", "aixScsiDescr"), ("IBM-AIX-MIB", "aixScsiStatus"), ("IBM-AIX-MIB", "aixScsiLocation"), ("IBM-AIX-MIB", "aixScsiAdapterID"), ("IBM-AIX-MIB", "aixScsiIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixScsiGroup = aixScsiGroup.setStatus('current')
if mibBuilder.loadTexts: aixScsiGroup.setDescription('The objects neccessary for showing information about the SCSI adapter.')
aixProcessorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 23)).setObjects(("IBM-AIX-MIB", "aixProcessorName"), ("IBM-AIX-MIB", "aixProcessorDescr"), ("IBM-AIX-MIB", "aixProcessorSpeed"), ("IBM-AIX-MIB", "aixProcessorType"), ("IBM-AIX-MIB", "aixProcessorIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixProcessorGroup = aixProcessorGroup.setStatus('current')
if mibBuilder.loadTexts: aixProcessorGroup.setDescription('The objects neccessary for showing information about the processors.')
aixNetworkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 24)).setObjects(("IBM-AIX-MIB", "aixNetworkName"), ("IBM-AIX-MIB", "aixNetworkDescr"), ("IBM-AIX-MIB", "aixNetworkStatus"), ("IBM-AIX-MIB", "aixNetworkLocation"), ("IBM-AIX-MIB", "aixNetworkType"), ("IBM-AIX-MIB", "aixNetworkIndex"), ("IBM-AIX-MIB", "aixNetworkInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixNetworkGroup = aixNetworkGroup.setStatus('current')
if mibBuilder.loadTexts: aixNetworkGroup.setDescription('The objects neccessary for showing information about the Network adapters.')
aixAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2, 6, 191, 10, 1, 25)).setObjects(("IBM-AIX-MIB", "aixAdapterName"), ("IBM-AIX-MIB", "aixAdapterDescr"), ("IBM-AIX-MIB", "aixAdapterStatus"), ("IBM-AIX-MIB", "aixAdapterLocation"), ("IBM-AIX-MIB", "aixAdapterType"), ("IBM-AIX-MIB", "aixAdapterIndex"), ("IBM-AIX-MIB", "aixAdapterInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    aixAdapterGroup = aixAdapterGroup.setStatus('current')
if mibBuilder.loadTexts: aixAdapterGroup.setDescription('The objects neccessary for showing information about the adapters.')
mibBuilder.exportSymbols("IBM-AIX-MIB", aixUsrStatus=aixUsrStatus, aixGrpUsrList=aixGrpUsrList, aixCdromManufacturerName=aixCdromManufacturerName, aixFsFree=aixFsFree, aixHdInterface=aixHdInterface, aixProcGroup=aixProcGroup, aixSubSysStatus=aixSubSysStatus, aixTapeDrvIndex=aixTapeDrvIndex, aixVgPollInterval=aixVgPollInterval, aixScsi=aixScsi, aixSubSrvIndex=aixSubSrvIndex, aixPrinterPortNumber=aixPrinterPortNumber, aixCdromTable=aixCdromTable, aixHdStatus=aixHdStatus, aixProcEntry=aixProcEntry, aixUsrShell=aixUsrShell, aixAgentExeCommand=aixAgentExeCommand, aixHdIndex=aixHdIndex, aixFsNumINodes=aixFsNumINodes, aixAdapterLocation=aixAdapterLocation, aixSubSystemNum=aixSubSystemNum, aixCdromFRU=aixCdromFRU, aixCompliances=aixCompliances, aixVgIdentifier=aixVgIdentifier, aixSeSystemState=aixSeSystemState, aixPageIndex=aixPageIndex, aixLoginUserHost=aixLoginUserHost, aixFileSystemMounted=aixFileSystemMounted, aixNetworkGroup=aixNetworkGroup, aixScsiEntry=aixScsiEntry, aixPageStatus=aixPageStatus, aixUsrID=aixUsrID, aixLoginFailedThreshold=aixLoginFailedThreshold, aixTapeDrvName=aixTapeDrvName, aixNetworkIndex=aixNetworkIndex, aixMemIndex=aixMemIndex, aixAdapterName=aixAdapterName, aixSnmptrapHolder=aixSnmptrapHolder, aixProcTable=aixProcTable, aixCdromName=aixCdromName, aixTapeDrvDescr=aixTapeDrvDescr, aixSubSrvEntry=aixSubSrvEntry, aixHdType=aixHdType, aixFailedLoginTimePeriod=aixFailedLoginTimePeriod, aixPrinterLocation=aixPrinterLocation, aixPageNamePV=aixPageNamePV, aixVgFree=aixVgFree, aixCdromStatus=aixCdromStatus, aixProcUID=aixProcUID, aixMemory=aixMemory, aixCfmGroup=aixCfmGroup, aixScsiLocation=aixScsiLocation, aixGrpEntry=aixGrpEntry, aixGrpName=aixGrpName, aixLvNameVG=aixLvNameVG, aixPvNumLVs=aixPvNumLVs, aixSubSrvNum=aixSubSrvNum, aixFsUsedInodes=aixFsUsedInodes, aixNetworkDescr=aixNetworkDescr, aixPrinterInterface=aixPrinterInterface, aixPollEnable=aixPollEnable, aixPvIndex=aixPvIndex, aixPageType=aixPageType, aixSrvSubserver=aixSrvSubserver, aixPagingSpace=aixPagingSpace, aixPageSize=aixPageSize, aixLoginUserEntry=aixLoginUserEntry, aixTapeDrvModelName=aixTapeDrvModelName, aixLogin=aixLogin, aixPrintSystem=aixPrintSystem, aixHdEntry=aixHdEntry, aixHdDescr=aixHdDescr, aixPrtQueHost=aixPrtQueHost, aixMemName=aixMemName, aixPrtQueue=aixPrtQueue, aixCDROMGroup=aixCDROMGroup, aixSrvSubsystem=aixSrvSubsystem, aixUsrPrimaryGroup=aixUsrPrimaryGroup, aixSeCPUUtilization=aixSeCPUUtilization, aixUsers=aixUsers, aixLFPollInterval=aixLFPollInterval, aixNetworkEntry=aixNetworkEntry, aixPagePollInterval=aixPagePollInterval, aixLoginUserIndex=aixLoginUserIndex, aixFileSystem=aixFileSystem, aixLvName=aixLvName, aixPageEntry=aixPageEntry, aixSeSystemRunLevel=aixSeSystemRunLevel, aixUsrTable=aixUsrTable, aixFsName=aixFsName, aixSeLicenseNum=aixSeLicenseNum, aixPageNameVG=aixPageNameVG, aixFsTableEntry=aixFsTableEntry, aixCdromEntry=aixCdromEntry, aixPrinterStatus=aixPrinterStatus, aixCdromInterface=aixCdromInterface, aixTapeDrvStatus=aixTapeDrvStatus, aixTapeDrvInterface=aixTapeDrvInterface, aixSubSrvStatus=aixSubSrvStatus, aixScsiDescr=aixScsiDescr, aixPrtQueTable=aixPrtQueTable, aixMemSize=aixMemSize, aixHdEC=aixHdEC, aixScsiIndex=aixScsiIndex, aixVgName=aixVgName, aixScsiGroup=aixScsiGroup, aixPhysicalVolume=aixPhysicalVolume, aixHardDisk=aixHardDisk, aixPrinterIndex=aixPrinterIndex, aixProcessorEntry=aixProcessorEntry, aixPageTable=aixPageTable, PYSNMP_MODULE_ID=ibmAIX, aixFsGroup=aixFsGroup, aixPageFull=aixPageFull, aixSeRemainingLicenseNum=aixSeRemainingLicenseNum, aixSystem=aixSystem, aixLVGroup=aixLVGroup, aixAgent=aixAgent, aixPrtQueRQ=aixPrtQueRQ, aixPageName=aixPageName, aixUsrAllowableAttempts=aixUsrAllowableAttempts, aixProcess=aixProcess, aixNetworkTable=aixNetworkTable, aixPrinterName=aixPrinterName, ibmAIX=ibmAIX, aixHdManufacturerName=aixHdManufacturerName, aixVGGroup=aixVGGroup, aixPagePercentUsed=aixPagePercentUsed, ibm=ibm, aixProcNum=aixProcNum, aixPvTable=aixPvTable, aixProcessorType=aixProcessorType, aixStorageSystem=aixStorageSystem, aixFsResultMsg=aixFsResultMsg, aixAdapterTable=aixAdapterTable, aixGeneralTrap=aixGeneralTrap, aixPrinter=aixPrinter, aixFsTable=aixFsTable, aixPrinterEntry=aixPrinterEntry, aixProcessorDescr=aixProcessorDescr, aixFsIndex=aixFsIndex, aixProcStart=aixProcStart, aixPrtQueJobNum=aixPrtQueJobNum, aixPVGroup=aixPVGroup, aixProcCPU=aixProcCPU, aixPagingSpaceGroup=aixPagingSpaceGroup, aixCdromLocation=aixCdromLocation, aixPrinterType=aixPrinterType, aixHdModelName=aixHdModelName, aixVgState=aixVgState, aixVgActivePVs=aixVgActivePVs, aixTapeDrvType=aixTapeDrvType, aixSubSysPID=aixSubSysPID, aixVgTable=aixVgTable, aixPrtQueueGroup=aixPrtQueueGroup, aixProcPID=aixProcPID, aixProcessorName=aixProcessorName, aixFsPollInterval=aixFsPollInterval, aixPrtQueAcctFile=aixPrtQueAcctFile, aixGrpAdminGroup=aixGrpAdminGroup, aixTapeDrvBlkSize=aixTapeDrvBlkSize, aixMemTable=aixMemTable, aixUsrName=aixUsrName, aixFsMountPoint=aixFsMountPoint, aixNetworkLocation=aixNetworkLocation, aixSubServerGroup=aixSubServerGroup, aixPrtQueIndex=aixPrtQueIndex, aixLoginUserName=aixLoginUserName, aixProcPPID=aixProcPPID, aixLvEntry=aixLvEntry, aixAgentGroup=aixAgentGroup, aixPrtQueEntry=aixPrtQueEntry, aixAuxSystemEnvironment=aixAuxSystemEnvironment, aixFsType=aixFsType, aixSubSystemGroup=aixSubSystemGroup, aixAdapterEntry=aixAdapterEntry, aixUsrHome=aixUsrHome, aixPvEntry=aixPvEntry, aixProcessorGroup=aixProcessorGroup, aixTapeDrvEntry=aixTapeDrvEntry, aixLoginUserDateAndTime=aixLoginUserDateAndTime, aixUsrResetLoginCount=aixUsrResetLoginCount, aixFsStatus=aixFsStatus, aixProcessorIndex=aixProcessorIndex, aixLvSize=aixLvSize, aixPrtQueDevice=aixPrtQueDevice, aixSeAuxGroup=aixSeAuxGroup, aixScsiAdapterID=aixScsiAdapterID, aixSubSrvDescr=aixSubSrvDescr, aixSubSysTable=aixSubSysTable, aixUser=aixUser, aixAdapterDescr=aixAdapterDescr, aixVgIndex=aixVgIndex, aixPrtQueAction=aixPrtQueAction, aixSubSysIndex=aixSubSysIndex, aixCompliance=aixCompliance, aixPrinterTable=aixPrinterTable, aixLvIndex=aixLvIndex, aixMemoryGroup=aixMemoryGroup, aixProcStatus=aixProcStatus, aixTapeDrvFRU=aixTapeDrvFRU, aixSystemEnvironment=aixSystemEnvironment, aixUsrLocalLogin=aixUsrLocalLogin, aixHdName=aixHdName, aixConformance=aixConformance, aixVolumeGroup=aixVolumeGroup, aixCDROM=aixCDROM, aixFsExecution=aixFsExecution, aixSeNumCPUs=aixSeNumCPUs, aixAdapterType=aixAdapterType, aixGrpTable=aixGrpTable, aixLastTrapMsg=aixLastTrapMsg, aixVgEntry=aixVgEntry, aixCdromPN=aixCdromPN, aixNetwork=aixNetwork, aixMemLocation=aixMemLocation, aixSeCPUThreshold=aixSeCPUThreshold, aixSeDateAndTime=aixSeDateAndTime, criticalNotificationGroup=criticalNotificationGroup, aixSeSerialNumber=aixSeSerialNumber, aixSubSrvName=aixSubSrvName, aixPvFree=aixPvFree, aixPageThreshold=aixPageThreshold, aixVolumeGroupFull=aixVolumeGroupFull, aixUsrEntry=aixUsrEntry, aixHdIdentifier=aixHdIdentifier, aixAdapterGroup=aixAdapterGroup, aixProcessorSpeed=aixProcessorSpeed, aixAgentCmdResult=aixAgentCmdResult, aixPvNameVG=aixPvNameVG, aixScsiStatus=aixScsiStatus, aixAdapterInterface=aixAdapterInterface, aixHdSize=aixHdSize, aixTapeDrvEC=aixTapeDrvEC, aixPrtQueDescipline=aixPrtQueDescipline, aixUsrGroups=aixUsrGroups, aixHdLocation=aixHdLocation, aixAdapterIndex=aixAdapterIndex, aixNetworkName=aixNetworkName, aixUsrRemoteLogin=aixUsrRemoteLogin, aixSubSrvSubsys=aixSubSrvSubsys, aixTapeDrvSN=aixTapeDrvSN, aixCdromIndex=aixCdromIndex, aixHdPN=aixHdPN, aixTapeDrvPN=aixTapeDrvPN, aixUsrPasswdMaxAge=aixUsrPasswdMaxAge, aixProcessGroup=aixProcessGroup, aixSubSrvTable=aixSubSrvTable, aixTapeGroup=aixTapeGroup, aixGrpID=aixGrpID, aixTapeDrvTable=aixTapeDrvTable, aixPrinterGroup=aixPrinterGroup, aixProcessor=aixProcessor, aixSubSysEntry=aixSubSysEntry)
mibBuilder.exportSymbols("IBM-AIX-MIB", aixFileSystemFull=aixFileSystemFull, aixCdromModelName=aixCdromModelName, aixTapeDrvLocation=aixTapeDrvLocation, aixSubSysGroup=aixSubSysGroup, aixLoginUsrGroup=aixLoginUsrGroup, aixGrpGroup=aixGrpGroup, aixPvState=aixPvState, aixTape=aixTape, aixPrtQueStatus=aixPrtQueStatus, aixUserLoginFailed=aixUserLoginFailed, aixSubSysName=aixSubSysName, aixUsrGroup=aixUsrGroup, aixTapeDrvManufacturerName=aixTapeDrvManufacturerName, aixVgThreshold=aixVgThreshold, aixProcCMD=aixProcCMD, aixSeSystemTrap=aixSeSystemTrap, aixLogicalVolume=aixLogicalVolume, aixHardDiskGroup=aixHardDiskGroup, aixGroups=aixGroups, aixPrtQueName=aixPrtQueName, aixAgentCmdString=aixAgentCmdString, aixLvMountPoint=aixLvMountPoint, aixDevice=aixDevice, aixHdTable=aixHdTable, aixMemEntry=aixMemEntry, aixService=aixService, aixPrinterDescr=aixPrinterDescr, aixLvType=aixLvType, aixLoginUserTable=aixLoginUserTable, aixUsrIndex=aixUsrIndex, aixAgentAction=aixAgentAction, aixLoginUserTTY=aixLoginUserTTY, aixScsiTable=aixScsiTable, aixPvName=aixPvName, aixGrpIndex=aixGrpIndex, aixAdapterStatus=aixAdapterStatus, aixFsSize=aixFsSize, aixScsiName=aixScsiName, aixHdSN=aixHdSN, aixCdromDescr=aixCdromDescr, aixLvState=aixLvState, aixNetworkStatus=aixNetworkStatus, aixAgentCmdOutTableEntry=aixAgentCmdOutTableEntry, aixGrpAdmList=aixGrpAdmList, aixAgentCmdOutIndex=aixAgentCmdOutIndex, aixVgSize=aixVgSize, aixNetworkInterface=aixNetworkInterface, aixProcTTY=aixProcTTY, aixAgentPollInterval=aixAgentPollInterval, aixProcessorTable=aixProcessorTable, aixCdromType=aixCdromType, aixPvSize=aixPvSize, aixAgentCmdOutput=aixAgentCmdOutput, aixAdapter=aixAdapter, aixVgOpenLVs=aixVgOpenLVs, aixTrap=aixTrap, aixProcPriority=aixProcPriority, ibmProd=ibmProd, aixVgCurNumLVs=aixVgCurNumLVs, aixCdromEC=aixCdromEC, aixAgentCmdOutTable=aixAgentCmdOutTable, aixSeMachineType=aixSeMachineType, aixCPUPollInterval=aixCPUPollInterval, aixLvTable=aixLvTable, aixUtilizationCPU=aixUtilizationCPU, aixSeMaxProcPerUser=aixSeMaxProcPerUser, aixNetworkType=aixNetworkType, aixHdFRU=aixHdFRU, aixMemDescr=aixMemDescr, aixSubSrvCommand=aixSubSrvCommand, aixFsThreshold=aixFsThreshold, aixSeGroup=aixSeGroup)
