#
# PySNMP MIB module CISCO-HEALTH-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-HEALTH-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, TimeTicks, Bits, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, IpAddress, Counter32, Unsigned32, Gauge32, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Bits", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32", "Gauge32", "Integer32", "Counter64")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoHealthMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 243))
ciscoHealthMonitorMIB.setRevisions(('2003-09-12 12:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoHealthMonitorMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoHealthMonitorMIB.setLastUpdated('200309121230Z')
if mibBuilder.loadTexts: ciscoHealthMonitorMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoHealthMonitorMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-healthmonitor@cisco.com')
if mibBuilder.loadTexts: ciscoHealthMonitorMIB.setDescription("Health Monitor MIB module. The Health Monitor uses a model based on events of varying severity and frequency, and predefined rules, to generate a metric that represents a system's (and its subsystems') level of health. The events are typically internally generated notifications in response to detrimental or correctional changes in the state of the hardware or software of the system. Detrimental events are classified under one of the following severity levels: Catastrophic - Causes or leads to system failure Critical - Major subsystem or functionality failure High - Potential for major impact to important functions Medium - Potential for minor impact to functionality Low - Negligible impact to functionality Whilst correctional events fall under the following classification: Positive - Not a fault event. May cause or lead to the return of functionality This MIB module provides information for tracking occurrences of the above events, and presents the associated health metric for the system and its component subsystems.")
ciscoHealthMonitorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 243, 1))
class HealthLevel(TextualConvention, Gauge32):
    description = 'Reflects the health of a system or subsystem based on system events and predefined rules, expressed as a percentage. The UNITS clause associated with each object will indicate the degree of precision.'
    status = 'current'
    subtypeSpec = Gauge32.subtypeSpec + ValueRangeConstraint(0, 10000)

ciscoHealthMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1), )
if mibBuilder.loadTexts: ciscoHealthMonitorTable.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorTable.setDescription('This table contains Health Monitor statistics for physical entities and their constituent hardware and/or software subsystems. The Health Monitor statistics present in each row provide information such as the computed health of the indicated subsystem and the number of faults it has experienced.')
ciscoHealthMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (1, "CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorSubsysName"))
if mibBuilder.loadTexts: ciscoHealthMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorEntry.setDescription('A Health Monitor statistics entry. The entPhysicalIndex identifies the physical entity (chassis or container), while the ciscoHealthMonitorSubsysName identifies by name the appropriate subsystem for which these statistics apply. If there are other entities such as peer routers or line cards then, in the context of this MIB, these are also defined to be in the same system. If these entities also run an instance of the Health Monitor then the summary information from the distributed Health Monitors is obtained here.')
ciscoHealthMonitorSubsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: ciscoHealthMonitorSubsysName.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorSubsysName.setDescription("A textual string containing the name of the hardware or software subsystem. A management station wishing to obtain summary statistics for a physical entity should use a value of 'system' for this object.")
ciscoHealthMonitorHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 2), HealthLevel()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoHealthMonitorHealth.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorHealth.setDescription('The computed current health of this subsystem on the specified entity. This health metric is based on predefined rules that specify how the health should be adjusted in response to certain events of varying severity and frequency. As these events are encountered by each subsystem or physical entity, the appropriate rules are applied and the health is modified accordingly.')
ciscoHealthMonitorHealthNotifyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoHealthMonitorHealthNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorHealthNotifyEnable.setDescription('Enables or disables health level notifications. When set to true(1), the ciscoHealthMonitorHealthLevel notification is enabled. When set to false(0), the ciscoHealthMonitorHealthLevel notification is disabled. If such a notification is desired, it is the responsibility of the management entity to ensure that the SNMP administrative model is configured in such a way as to allow the notification to be delivered.')
ciscoHealthMonitorHealthNotifyHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 4), HealthLevel().clone(10000)).setUnits('0.01 percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoHealthMonitorHealthNotifyHighThreshold.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorHealthNotifyHighThreshold.setDescription('Specifies the health level at which a ciscoHealthMonitorHealthLevel notification will be generated for the specified subsystem and entity. A notification will only be generated if the health level had previously reached the low threshold level prior to reaching this high threshold level. Health levels oscillating within the high and the low threshold levels do not generate notifications. A health level going from low threshold (or below) to high threshold (or above) represents a return to normal health for the specified subsystem. Set your optimal health level to this threshold.')
ciscoHealthMonitorHealthNotifyLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 5), HealthLevel()).setUnits('0.01 percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoHealthMonitorHealthNotifyLowThreshold.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorHealthNotifyLowThreshold.setDescription('Specifies the health level at which a ciscoHealthMonitorHealthLevel notification will be generated for the specified subsystem and entity. A notification will only be generated if the health level had previously reached the high threshold level prior to reaching this low threshold level. Health levels oscillating within the high and the low threshold levels do not generate notifications. A health level going from high threshold (or above) to low threshold (or below) represents a deterioration of the health for the specified subsystem. Set your unacceptable health level to this threshold.')
ciscoHealthMonitorCatastrophicFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoHealthMonitorCatastrophicFaults.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorCatastrophicFaults.setDescription('The number of catastrophic faults that have occurred in this subsystem on the specified entity since the system was initialized.')
ciscoHealthMonitorCriticalFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoHealthMonitorCriticalFaults.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorCriticalFaults.setDescription('The number of critical faults that have occurred in this subsystem on the specified entity since the system was initialized.')
ciscoHealthMonitorHighSeverityFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoHealthMonitorHighSeverityFaults.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorHighSeverityFaults.setDescription('The number of high severity faults that have occurred in this subsystem on the specified entity since the system was initialized.')
ciscoHealthMonitorMediumSeverityFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoHealthMonitorMediumSeverityFaults.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorMediumSeverityFaults.setDescription('The number of medium severity faults that have occurred in this subsystem on the specified entity since the system was initialized.')
ciscoHealthMonitorLowSeverityFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoHealthMonitorLowSeverityFaults.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorLowSeverityFaults.setDescription('The number of low severity faults that have occurred in this subsystem on the specified entity since the system was initialized.')
ciscoHealthMonitorPositiveEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 243, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoHealthMonitorPositiveEvents.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorPositiveEvents.setDescription('The number of positive events that have occurred in this subsystem on the specified entity since the system was initialized.')
ciscoHealthMonitorMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 243, 0))
ciscoHealthMonitorHealthLevel = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 243, 0, 1)).setObjects(("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorHealth"))
if mibBuilder.loadTexts: ciscoHealthMonitorHealthLevel.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorHealthLevel.setDescription('A ciscoHealthMonitorHealthLevel notification is sent when the health of a subsystem reaches either the ciscoHealthMonitorHealthNotifyLowThreshold or ciscoHealthMonitorHealthNotifyHighThreshold threshold as described above.')
ciscoHealthMonitorMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 243, 2))
ciscoHealthMonitorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 243, 2, 1))
ciscoHealthMonitorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 243, 2, 2))
ciscoHealthMonitorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 243, 2, 1, 1)).setObjects(("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHealthMonitorMIBCompliance = ciscoHealthMonitorMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco Health Monitor MIB')
ciscoHealthMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 243, 2, 2, 1)).setObjects(("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorHealth"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorHealthNotifyEnable"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorHealthNotifyHighThreshold"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorHealthNotifyLowThreshold"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorCatastrophicFaults"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorCriticalFaults"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorHighSeverityFaults"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorMediumSeverityFaults"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorLowSeverityFaults"), ("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorPositiveEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHealthMonitorGroup = ciscoHealthMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorGroup.setDescription('The collection of objects providing health information.')
ciscoHealthMonitorMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 243, 2, 2, 2)).setObjects(("CISCO-HEALTH-MONITOR-MIB", "ciscoHealthMonitorHealthLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoHealthMonitorMIBNotificationGroup = ciscoHealthMonitorMIBNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoHealthMonitorMIBNotificationGroup.setDescription('Set of notifications implemented in this module.')
mibBuilder.exportSymbols("CISCO-HEALTH-MONITOR-MIB", ciscoHealthMonitorCatastrophicFaults=ciscoHealthMonitorCatastrophicFaults, ciscoHealthMonitorEntry=ciscoHealthMonitorEntry, ciscoHealthMonitorPositiveEvents=ciscoHealthMonitorPositiveEvents, HealthLevel=HealthLevel, ciscoHealthMonitorHealthNotifyHighThreshold=ciscoHealthMonitorHealthNotifyHighThreshold, ciscoHealthMonitorMIBGroups=ciscoHealthMonitorMIBGroups, ciscoHealthMonitorMIBConform=ciscoHealthMonitorMIBConform, ciscoHealthMonitorHighSeverityFaults=ciscoHealthMonitorHighSeverityFaults, ciscoHealthMonitorCriticalFaults=ciscoHealthMonitorCriticalFaults, ciscoHealthMonitorHealth=ciscoHealthMonitorHealth, ciscoHealthMonitorHealthNotifyEnable=ciscoHealthMonitorHealthNotifyEnable, ciscoHealthMonitorMIB=ciscoHealthMonitorMIB, ciscoHealthMonitorGroup=ciscoHealthMonitorGroup, ciscoHealthMonitorMIBNotificationGroup=ciscoHealthMonitorMIBNotificationGroup, PYSNMP_MODULE_ID=ciscoHealthMonitorMIB, ciscoHealthMonitorLowSeverityFaults=ciscoHealthMonitorLowSeverityFaults, ciscoHealthMonitorSubsysName=ciscoHealthMonitorSubsysName, ciscoHealthMonitorMIBNotifs=ciscoHealthMonitorMIBNotifs, ciscoHealthMonitorMIBCompliances=ciscoHealthMonitorMIBCompliances, ciscoHealthMonitorHealthNotifyLowThreshold=ciscoHealthMonitorHealthNotifyLowThreshold, ciscoHealthMonitorMediumSeverityFaults=ciscoHealthMonitorMediumSeverityFaults, ciscoHealthMonitorMIBObjects=ciscoHealthMonitorMIBObjects, ciscoHealthMonitorHealthLevel=ciscoHealthMonitorHealthLevel, ciscoHealthMonitorMIBCompliance=ciscoHealthMonitorMIBCompliance, ciscoHealthMonitorTable=ciscoHealthMonitorTable)
