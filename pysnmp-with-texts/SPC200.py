#
# PySNMP MIB module SPC200 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SPC200
# Produced by pysmi-0.3.4 at Wed May  1 15:10:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
interfaces, ifIndex = mibBuilder.importSymbols("IF-MIB", "interfaces", "ifIndex")
AgentCapabilities, ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "AgentCapabilities", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, Integer32, TimeTicks, Gauge32, Unsigned32, Counter64, Bits, MibIdentifier, IpAddress, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "Integer32", "TimeTicks", "Gauge32", "Unsigned32", "Counter64", "Bits", "MibIdentifier", "IpAddress", "Counter32", "ModuleIdentity")
MacAddress, TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
spidcom, = mibBuilder.importSymbols("SPIDCOM-MIB", "spidcom")
spc200MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 22764, 1))
spc200MIB.setRevisions(('2004-12-17 12:30', '2004-11-16 12:30', '2004-09-21 12:00', '2004-09-13 12:00', '2004-07-22 12:00', '2004-07-01 17:57',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: spc200MIB.setRevisionsDescriptions(('Add software upgrade features', 'Add adapt level table , commit and reset command', 'Add quick access to channel modulation and pilots', 'Add quick access to notches', 'Corrected compilation errors', 'Initial revision',))
if mibBuilder.loadTexts: spc200MIB.setLastUpdated('200412171230Z')
if mibBuilder.loadTexts: spc200MIB.setOrganization('Organization')
if mibBuilder.loadTexts: spc200MIB.setContactInfo('Contact-info')
if mibBuilder.loadTexts: spc200MIB.setDescription('Description')
class ModulationValue(TextualConvention, Integer32):
    description = 'Modulation amplitude used by a group of carriers.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("bpsk", 2), ("qpsk", 3), ("qam16", 4), ("qam64", 5), ("qam256", 6))

class CarrierValue(TextualConvention, Integer32):
    description = 'A group is composed of 8 carriers.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 8)

class PilotValue(TextualConvention, Integer32):
    description = 'The pilot carrier wave can be chosen between the carrier 1 up to carrier 128 inside a band carrier range.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class BandValue(TextualConvention, Integer32):
    description = 'A channel is composed of 7 bands.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 7)

class PlcChannelType(TextualConvention, Integer32):
    description = 'The different type of plc channels: rx for the current reception channel, rx last for the last reception channel, tx for the current transmission channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rx", 1), ("rxLast", 2), ("tx", 3))

class EstimationMode(TextualConvention, Integer32):
    description = 'The type of Channel estimation process. Two are available: - automatic, the equipment negociates the best configuration with the remote equipment, - manual, the operator defines the configuration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("automatic", 1), ("manual", 2))

class GroupValue(TextualConvention, Integer32):
    description = 'A band is composed of 16 groups.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class ResultValue(TextualConvention, Integer32):
    description = 'Result value of input vectors.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("success", 1), ("fail", 2))

class AdaptValue(TextualConvention, Integer32):
    description = 'The adapt level integer value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8191)

class ChannelBandwidthValue(TextualConvention, Integer32):
    description = 'The channel bandwidth integer value.'
    status = 'current'

class SoftwareIndex(TextualConvention, Integer32):
    description = 'The software index.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 10)

class SoftwareActionResultValue(TextualConvention, Integer32):
    description = 'Result value of software action process.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("success", 0), ("on-going", 1), ("fileNotExist", 2), ("flashExhausted", 3), ("flashCorrupted", 4), ("notEnoughMemory", 5), ("invalidParameter", 6), ("genericError", 7))

class SoftwareActionType(TextualConvention, Integer32):
    description = 'Type of software management action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("switch", 1), ("remove", 2))

class PlcModeType(TextualConvention, Integer32):
    description = 'Type of software management action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("ad-hoc", 0), ("slave", 1), ("master", 2))

plc = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1))
stats = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1))
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
if mibBuilder.loadTexts: portStatsTable.setDescription('This table gathers all statistic data specific to SPC200 chip relative to plc connection.')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "portStatsBandIndex"), (0, "SPC200", "portStatsGroupIndex"), (0, "SPC200", "portStatsCarrierIndex"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('current')
if mibBuilder.loadTexts: portStatsEntry.setDescription('This row contains statistic data specific to SPC200 chip relative to a connection.')
portStatsBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 1), BandValue())
if mibBuilder.loadTexts: portStatsBandIndex.setStatus('current')
if mibBuilder.loadTexts: portStatsBandIndex.setDescription('The band number on which the signal, noise, ber data are collected.')
portStatsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 2), GroupValue())
if mibBuilder.loadTexts: portStatsGroupIndex.setStatus('current')
if mibBuilder.loadTexts: portStatsGroupIndex.setDescription('The group number on which the signal, noise, ber data are collected')
portStatsCarrierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 3), CarrierValue())
if mibBuilder.loadTexts: portStatsCarrierIndex.setStatus('current')
if mibBuilder.loadTexts: portStatsCarrierIndex.setDescription('The group number on which the signal, noise, ber data are collected')
portStatsSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsSignal.setStatus('current')
if mibBuilder.loadTexts: portStatsSignal.setDescription('The DB value of the signal associated with the carrier wave entry.')
portStatsNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsNoise.setStatus('current')
if mibBuilder.loadTexts: portStatsNoise.setDescription('The DB value of the noise associated with the carrier wave entry.')
portStats2Table = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3), )
if mibBuilder.loadTexts: portStats2Table.setStatus('current')
if mibBuilder.loadTexts: portStats2Table.setDescription('This table gathers all statistic data specific to SPC200 chip relative to plc channels. This table has the same information as the portChannelStatsTable but in a more compact way. This table has been added to deal with possible slow performances.')
portStats2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcModBandIndex"))
if mibBuilder.loadTexts: portStats2Entry.setStatus('current')
if mibBuilder.loadTexts: portStats2Entry.setDescription('This row contains statistic data specific to SPC200 chip relative to a connection.')
portStats2Signal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2Signal.setStatus('current')
if mibBuilder.loadTexts: portStats2Signal.setDescription('The values of the signal for all the carrier waves. The expected format is VALUE VALUE VALUE ... VALUE. Each value is coded on two bytes. There is one value for each 128 carriers of the considered band.')
portStats2Noise = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2Noise.setStatus('current')
if mibBuilder.loadTexts: portStats2Noise.setDescription('The values of the noise for all the carrier waves. The expected format is VALUE VALUE VALUE ... VALUE. Each value is coded on two bytes. There is one value for each 128 carriers of the considered band.')
portStats2AvgBandAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2AvgBandAtt.setStatus('current')
if mibBuilder.loadTexts: portStats2AvgBandAtt.setDescription('Average attenuation per band (dB).')
portStats2AvgBandSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats2AvgBandSNR.setStatus('current')
if mibBuilder.loadTexts: portStats2AvgBandSNR.setDescription('Average SNR per band (dB).')
portStats3Table = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4), )
if mibBuilder.loadTexts: portStats3Table.setStatus('current')
if mibBuilder.loadTexts: portStats3Table.setDescription('This table gathers all statistic data specific to SPC200 chip relative to plc channels. This table has the same information as the portChannelStatsTable but in a more compact way. This table has been added to deal with possible slow performances.')
portStats3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: portStats3Entry.setStatus('current')
if mibBuilder.loadTexts: portStats3Entry.setDescription('This row contains statistic data specific to SPC200 chip relative to a connection.')
portStats3AvgAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats3AvgAtt.setStatus('current')
if mibBuilder.loadTexts: portStats3AvgAtt.setDescription('Average attenuation on the link (dB).')
portStats3AvgSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStats3AvgSNR.setStatus('current')
if mibBuilder.loadTexts: portStats3AvgSNR.setDescription('Average SNR on the link (dB).')
bootstats = ObjectIdentity((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5))
if mibBuilder.loadTexts: bootstats.setStatus('current')
if mibBuilder.loadTexts: bootstats.setDescription('boot statistics')
bootstatsBoot = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootstatsBoot.setStatus('current')
if mibBuilder.loadTexts: bootstatsBoot.setDescription('Boot')
bootstatsManualReset = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootstatsManualReset.setStatus('current')
if mibBuilder.loadTexts: bootstatsManualReset.setDescription('Manual reset')
bootstatsFailureReset = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootstatsFailureReset.setStatus('current')
if mibBuilder.loadTexts: bootstatsFailureReset.setDescription('Failure reset')
plcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2))
plcMode = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 1), PlcModeType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcMode.setStatus('current')
if mibBuilder.loadTexts: plcMode.setDescription('Plc Mode')
plcTopo = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2))
plcNodeConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3))
plcSNAnalyser = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4))
plcSNAnalyserEnable = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcSNAnalyserEnable.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserEnable.setDescription('true if the modem should turn to spectrum analyser mode. In this mode the modem enters a receive only mode, and captures periodic samples of the signal on the powerline. The spectrum analyser mode shall be disabled for normal powerline modem operation.')
plcSNAnalyserTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2), )
if mibBuilder.loadTexts: plcSNAnalyserTable.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserTable.setDescription('This table gathers all statistic data specific to SPC200 chip relative to plc analyser.')
plcSNAnalyserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1), ).setIndexNames((0, "SPC200", "plcModBandIndex"))
if mibBuilder.loadTexts: plcSNAnalyserEntry.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserEntry.setDescription('This row contains statistic data specific to SPC200 chip relative to a band.')
plcSNAnalyserMinSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserMinSignal.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserMinSignal.setDescription('Minimum signal measured over several samples for the associated carrier wave entry. The value is expressed in Glomer which can be converted in dBm/Hz using the following formula: dBm/Hz = 19*log10(Glomer) - 113')
plcSNAnalyserMaxSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserMaxSignal.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserMaxSignal.setDescription('Maximum signal measured on several samples for the associated carrier wave entry. The value is expressed in Glomer which can be converted in dBm/Hz using the following formula: dBm/Hz = 19*log10(Glomer) - 113')
plcSNAnalyserAvgSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserAvgSignal.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserAvgSignal.setDescription('Average signal measured on several samples for the associated carrier wave entry. The value is expressed in Glomer which can be converted in dBm/Hz using the following formula: dBm/Hz = 19*log10(Glomer) - 113')
plcSNAnalyserLastSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserLastSignal.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserLastSignal.setDescription('Signal measured for last sample on the associated carrier wave entry. The value is expressed in Glomer which can be converted in dBm/Hz using the following formula: dBm/Hz = 19*log10(Glomer) - 113')
plcSNAnalyserFFTDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserFFTDiv.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserFFTDiv.setDescription('FFT division factor on the associated band.')
plcSNAnalyserAGC = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcSNAnalyserAGC.setStatus('current')
if mibBuilder.loadTexts: plcSNAnalyserAGC.setDescription('Gain factor in dB, as used by the Automatic Gain Control last sample')
plcAGCAnalyser = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5))
plcAGCAnalyserEnable = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcAGCAnalyserEnable.setStatus('current')
if mibBuilder.loadTexts: plcAGCAnalyserEnable.setDescription(' ')
plcAGCAnalyserSamplesPart1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcAGCAnalyserSamplesPart1.setStatus('current')
if mibBuilder.loadTexts: plcAGCAnalyserSamplesPart1.setDescription(' ')
plcAGCAnalyserSamplesPart2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 5, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcAGCAnalyserSamplesPart2.setStatus('current')
if mibBuilder.loadTexts: plcAGCAnalyserSamplesPart2.setDescription(' ')
plcTopoChanges = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcTopoChanges.setStatus('current')
if mibBuilder.loadTexts: plcTopoChanges.setDescription('The total number of topology changes detected by this plc bridge since the management entity was last reset or initialized. Such changes concerns only - the plcBasePortTable rows - the plcBasePortTable columns except for plcBasePortChannelEstimation')
plcBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: plcBasePortTable.setStatus('current')
if mibBuilder.loadTexts: plcBasePortTable.setDescription('This table contains the list of plc remote connection')
plcBasePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: plcBasePortEntry.setStatus('current')
if mibBuilder.loadTexts: plcBasePortEntry.setDescription('This row contains plc remote connection information')
plcBasePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: plcBasePortIndex.setStatus('current')
if mibBuilder.loadTexts: plcBasePortIndex.setDescription('The MAC address of the MAC layer above the plc interface of the remote PLC equipment.')
plcBasePortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcBasePortAddress.setStatus('current')
if mibBuilder.loadTexts: plcBasePortAddress.setDescription('The MAC address of the MAC layer above the plc interface of the remote PLC equipment.')
plcBasePortChannelEstimation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 3), EstimationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcBasePortChannelEstimation.setStatus('current')
if mibBuilder.loadTexts: plcBasePortChannelEstimation.setDescription('Enable or disable the automatic channel estimation processus.')
plcBasePortAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcBasePortAttenuation.setStatus('current')
if mibBuilder.loadTexts: plcBasePortAttenuation.setDescription('Link attenuation (dB).')
plcChannelModulationStringTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3), )
if mibBuilder.loadTexts: plcChannelModulationStringTable.setStatus('current')
if mibBuilder.loadTexts: plcChannelModulationStringTable.setDescription('This table contains string values for a quick access to the modulation amplitude configurations of all active channels.')
plcChannelModulationStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: plcChannelModulationStringEntry.setStatus('current')
if mibBuilder.loadTexts: plcChannelModulationStringEntry.setDescription('This row contains string values for a quick access to the modulation amplitude configuration of each active channel of the remote connection referenced by plcBasePortIndex.')
plcRxChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxChannelModulation.setStatus('current')
if mibBuilder.loadTexts: plcRxChannelModulation.setDescription('The modulation amplitude values for the Rx channel of a given remote connection entry. The expected format is VALUE VALUE VALUE ... VALUE. Each value is an octet representing two modulation values. Each modulation is coded on 4 bits. There are ( 16 groups * 7 bands ) / 2 = 66 values.')
plcRxLastChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxLastChannelModulation.setStatus('current')
if mibBuilder.loadTexts: plcRxLastChannelModulation.setDescription('The modulation amplitude values for the Rx Last channel of a given remote connection entry. The expected format is VALUE VALUE VALUE ... VALUE. Each value is an octet representing two modulation values. Each modulation is coded on 4 bits representing ModulationValue - 1. There are ( 16 groups * 7 bands ) / 2 = 66 values.')
plcTxChannelModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcTxChannelModulation.setStatus('current')
if mibBuilder.loadTexts: plcTxChannelModulation.setDescription('The modulation amplitude values for the Tx channel of a given remote connection entry. The expected format is VALUE VALUE VALUE ... VALUE. Each value is an octet representing two modulation values. Each modulation is coded on 4 bits. There are ( 16 groups * 7 bands ) / 2 = 66 values.')
plcChannelModulationTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4), )
if mibBuilder.loadTexts: plcChannelModulationTable.setStatus('current')
if mibBuilder.loadTexts: plcChannelModulationTable.setDescription('This table contains the modulation amplitude configuration of all active channels.')
plcChannelModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcPortChannelIndex"), (0, "SPC200", "plcModBandIndex"))
if mibBuilder.loadTexts: plcChannelModulationEntry.setStatus('current')
if mibBuilder.loadTexts: plcChannelModulationEntry.setDescription('This row contains modulation amplitude configuration of the channel, referenced by the plcPortChannelIndex, of the remote connection referenced by plcBasePortIndex.')
plcModBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 1), BandValue())
if mibBuilder.loadTexts: plcModBandIndex.setStatus('current')
if mibBuilder.loadTexts: plcModBandIndex.setDescription('The band number of which the modulations are defined')
plcModGroup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 2), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup1.setStatus('current')
if mibBuilder.loadTexts: plcModGroup1.setDescription('The modulation amplitude of the first group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 3), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup2.setStatus('current')
if mibBuilder.loadTexts: plcModGroup2.setDescription('The modulation amplitude of the second group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 4), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup3.setStatus('current')
if mibBuilder.loadTexts: plcModGroup3.setDescription('The modulation amplitude of the third group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup4 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 5), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup4.setStatus('current')
if mibBuilder.loadTexts: plcModGroup4.setDescription('The modulation amplitude of the fourth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup5 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 6), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup5.setStatus('current')
if mibBuilder.loadTexts: plcModGroup5.setDescription('The modulation amplitude of the fifth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup6 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 7), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup6.setStatus('current')
if mibBuilder.loadTexts: plcModGroup6.setDescription('The modulation amplitude of the sixth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup7 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 8), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup7.setStatus('current')
if mibBuilder.loadTexts: plcModGroup7.setDescription('The modulation amplitude of the seventh group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup8 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 9), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup8.setStatus('current')
if mibBuilder.loadTexts: plcModGroup8.setDescription('The modulation amplitude of the eighth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup9 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 10), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup9.setStatus('current')
if mibBuilder.loadTexts: plcModGroup9.setDescription('The modulation amplitude of the nineth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup10 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 11), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup10.setStatus('current')
if mibBuilder.loadTexts: plcModGroup10.setDescription('The modulation amplitude of the tenth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup11 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 12), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup11.setStatus('current')
if mibBuilder.loadTexts: plcModGroup11.setDescription('The modulation amplitude of the eleventh group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup12 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 13), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup12.setStatus('current')
if mibBuilder.loadTexts: plcModGroup12.setDescription('The modulation amplitude of the twelveth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup13 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 14), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup13.setStatus('current')
if mibBuilder.loadTexts: plcModGroup13.setDescription('The modulation amplitude of the thirteenth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup14 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 15), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup14.setStatus('current')
if mibBuilder.loadTexts: plcModGroup14.setDescription('The modulation amplitude of the fourteenth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup15 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 16), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup15.setStatus('current')
if mibBuilder.loadTexts: plcModGroup15.setDescription('The modulation amplitude of the fifteenth group of the band entry of the channel entry for a given remote connection entry.')
plcModGroup16 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 4, 1, 17), ModulationValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModGroup16.setStatus('current')
if mibBuilder.loadTexts: plcModGroup16.setDescription('The modulation amplitude of the sixteenth group of the band entry of the channel entry for a given remote connection entry.')
plcChannelModulationInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5))
plcModulationInputAddr = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputAddr.setStatus('current')
if mibBuilder.loadTexts: plcModulationInputAddr.setDescription('The MAC address of the MAC layer above the plc interface of the remote PLC equipment for which the modulation value changes are requested.')
plcModulationInputChannel = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 2), PlcChannelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputChannel.setStatus('current')
if mibBuilder.loadTexts: plcModulationInputChannel.setDescription('The channel type of the remote PLC equipment for which the modulation value changes are requested.')
plcModulationInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 3), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputBand.setStatus('current')
if mibBuilder.loadTexts: plcModulationInputBand.setDescription('The band number of which the modulation value changes are requested.')
plcInputModulationGroup1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 4), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup1.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup1.setDescription('The new requested modulation amplitude of the first group of the considered band and channel input values.')
plcInputModulationGroup2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 5), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup2.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup2.setDescription('The new requested modulation amplitude of the second group of the considered band and channel input values.')
plcInputModulationGroup3 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 6), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup3.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup3.setDescription('The new requested modulation amplitude of the third group of the considered band and channel input values.')
plcInputModulationGroup4 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 7), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup4.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup4.setDescription('The new requested modulation amplitude of the fourth group of the considered band and channel input values.')
plcInputModulationGroup5 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 8), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup5.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup5.setDescription('The new requested modulation amplitude of the fifth group of the considered band and channel input values.')
plcInputModulationGroup6 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 9), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup6.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup6.setDescription('The new requested modulation amplitude of the sixth group of the considered band and channel input values.')
plcInputModulationGroup7 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 10), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup7.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup7.setDescription('The new requested modulation amplitude of the seventh group of the considered band and channel input values.')
plcInputModulationGroup8 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 11), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup8.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup8.setDescription('The new requested modulation amplitude of the eighth group of the considered band and channel input values.')
plcInputModulationGroup9 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 12), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup9.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup9.setDescription('The new requested modulation amplitude of the nineth group of the considered band and channel input values.')
plcInputModulationGroup10 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 13), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup10.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup10.setDescription('The new requested modulation amplitude of the tenth group of the considered band and channel input values.')
plcInputModulationGroup11 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 14), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup11.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup11.setDescription('The new requested modulation amplitude of the eleventh group of the considered band and channel input values.')
plcInputModulationGroup12 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 15), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup12.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup12.setDescription('The new requested modulation amplitude of the twelveth group of the considered band and channel input values.')
plcInputModulationGroup13 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 16), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup13.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup13.setDescription('The new requested modulation amplitude of the thirteenth group of the considered band and channel input values.')
plcInputModulationGroup14 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 17), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup14.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup14.setDescription('The new requested modulation amplitude of the fourteenth group of the considered band and channel input values.')
plcInputModulationGroup15 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 18), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup15.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup15.setDescription('The new requested modulation amplitude of the fifteenth group of the considered band and channel input values.')
plcInputModulationGroup16 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 19), ModulationValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputModulationGroup16.setStatus('current')
if mibBuilder.loadTexts: plcInputModulationGroup16.setDescription('The new requested modulation amplitude of the sixteenth group of the considered band and channel input values.')
plcModulationInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcModulationInputProceed.setStatus('current')
if mibBuilder.loadTexts: plcModulationInputProceed.setDescription('True to request a modification of all the modulations associated to a band and a channel of a remote PLC equipment.')
plcModulationInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 5, 21), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcModulationInputResult.setStatus('current')
if mibBuilder.loadTexts: plcModulationInputResult.setDescription('Result value of the requested modulation value changes.')
plcPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6), )
if mibBuilder.loadTexts: plcPortChannelTable.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelTable.setDescription('This table contains the list of plc channels')
plcPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcPortChannelIndex"))
if mibBuilder.loadTexts: plcPortChannelEntry.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelEntry.setDescription('This row contains plc channel information')
plcPortChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: plcPortChannelIndex.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelIndex.setDescription('The channel number belongs to the remote connection with plc equipment associated with the plcBasePortIndex value. Only three channels are expected. Index 1 for RX channel Index 2 for RXLast channel index 3 for TX channel')
plcPortChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 2), PlcChannelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelType.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelType.setDescription('The channel type.')
plcPortChannelGain = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPortChannelGain.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelGain.setDescription('The gain associated with the channel.')
plcPortChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 4), ChannelBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelBandwidth.setDescription('The bandwidth of the channel in Kbit/s.')
plcPortChannelMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 5), ChannelBandwidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelMaxBandwidth.setDescription('The maximum bandwidth of the channel in Kbit/s.')
plcPortChannelSynchronizationBand = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 6, 1, 6), BandValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPortChannelSynchronizationBand.setStatus('current')
if mibBuilder.loadTexts: plcPortChannelSynchronizationBand.setDescription('The synchronization band used for this channel.')
plcChannelPilotStringTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7), )
if mibBuilder.loadTexts: plcChannelPilotStringTable.setStatus('current')
if mibBuilder.loadTexts: plcChannelPilotStringTable.setDescription('This table contains the string values representing of pilot values of all active channels.')
plcChannelPilotStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"))
if mibBuilder.loadTexts: plcChannelPilotStringEntry.setStatus('current')
if mibBuilder.loadTexts: plcChannelPilotStringEntry.setDescription('This row contains a quick access for pilot values , of the remote connection referenced by plcBasePortIndex.')
plcRxChannelPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxChannelPilots.setStatus('current')
if mibBuilder.loadTexts: plcRxChannelPilots.setDescription('The carrier wave numbers which support the pilot waves for the Rx Channel. The expected format is VALUE VALUE VALUE ... VALUE. Each value is a pair of octets representing the pilot values. There is one pair (pilot1 pilot2) for each of the 7 bands.')
plcRxLastChannelPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcRxLastChannelPilots.setStatus('current')
if mibBuilder.loadTexts: plcRxLastChannelPilots.setDescription('The carrier wave numbers which support the pilot waves for the Rx Last Channel. The expected format is VALUE VALUE VALUE ... VALUE. Each value is a pair of octets representing the pilot values. There is one pair (pilot1 pilot2) for each of the 7 bands.')
plcTxChannelPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcTxChannelPilots.setStatus('current')
if mibBuilder.loadTexts: plcTxChannelPilots.setDescription('The carrier wave numbers which support the pilot waves for the Tx Channel. The expected format is VALUE VALUE VALUE ... VALUE. Each value is a pair of octets representing the pilot values. There is one pair (pilot1 pilot2) for each of the 7 bands.')
plcChannelPilotsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8), )
if mibBuilder.loadTexts: plcChannelPilotsTable.setStatus('current')
if mibBuilder.loadTexts: plcChannelPilotsTable.setDescription('This tabel contains pilots configuration for each plc channel.')
plcChannelPilotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcPortChannelIndex"), (0, "SPC200", "plcChannelPilotBandIndex"))
if mibBuilder.loadTexts: plcChannelPilotsEntry.setStatus('current')
if mibBuilder.loadTexts: plcChannelPilotsEntry.setDescription('This row contains the pilots 1 and 2 configuration for a channel defined by the couple (plcBasePortIndex, plcPortChannelIndex)')
plcChannelPilotBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1, 1), BandValue())
if mibBuilder.loadTexts: plcChannelPilotBandIndex.setStatus('current')
if mibBuilder.loadTexts: plcChannelPilotBandIndex.setDescription('The band number on which the pilots are defined.')
plcChannelPilot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1, 2), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcChannelPilot1.setStatus('current')
if mibBuilder.loadTexts: plcChannelPilot1.setDescription('The carrier wave number which supports the first pilot wave for the channel associated with this entry.')
plcChannePilot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 8, 1, 3), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcChannePilot2.setStatus('current')
if mibBuilder.loadTexts: plcChannePilot2.setDescription('The carrier wave number which supports the second pilot wave for the channel associated with this entry.')
plcChannelPilotsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9))
plcPilotsInputAddr = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputAddr.setStatus('current')
if mibBuilder.loadTexts: plcPilotsInputAddr.setDescription('The MAC address of the MAC layer above the plc interface of the remote PLC equipment for which the pilot value changes are requested.')
plcPilotsInputChannel = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 2), PlcChannelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputChannel.setStatus('current')
if mibBuilder.loadTexts: plcPilotsInputChannel.setDescription('The channel type of the remote PLC equipment for which the pilot value changes are requested.')
plcPilotsInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 3), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputBand.setStatus('current')
if mibBuilder.loadTexts: plcPilotsInputBand.setDescription('The band number of which the pilots value changes are requested.')
plcInputChannelPilot1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 4), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputChannelPilot1.setStatus('current')
if mibBuilder.loadTexts: plcInputChannelPilot1.setDescription('The carrier wave number which supports the first pilot wave for the considered band and channel input values.')
plcInputChannelPilot2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 5), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputChannelPilot2.setStatus('current')
if mibBuilder.loadTexts: plcInputChannelPilot2.setDescription('The carrier wave number which supports the second pilot wave for the considered band and channel input values.')
plcPilotsInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcPilotsInputProceed.setStatus('current')
if mibBuilder.loadTexts: plcPilotsInputProceed.setDescription('True to request a modification of the first and second pilot associated to a band and a channel of a remote PLC equipment.')
plcPilotsInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 2, 9, 7), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcPilotsInputResult.setStatus('current')
if mibBuilder.loadTexts: plcPilotsInputResult.setDescription('Result value of the requested pilot values changes.')
plcNodeNotches = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotches.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotches.setDescription('The values of the notches for all the node bands. The expected format is VALUE VALUE VALUE ... VALUE. Each value is an octet representing the 8 notches of each group. There is one value for each 7 * 16 bands.')
plcNodeNotchesTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2), )
if mibBuilder.loadTexts: plcNodeNotchesTable.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesTable.setDescription('This table contains Notches configuration for the SPC200 chip.')
plcNodeNotchesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1), ).setIndexNames((0, "SPC200", "plcNodeNotchesBandIndex"), (0, "SPC200", "plcNodeNotchesGroupIndex"))
if mibBuilder.loadTexts: plcNodeNotchesEntry.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesEntry.setDescription('This row contains Notches configuration for a group. The group is defined by the couple (plcNodeNotchesGroupIndex, plcNodeNotchesBandIndex).')
plcNodeNotchesBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodeNotchesBandIndex.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesBandIndex.setDescription('The band number on which the notches are defined.')
plcNodeNotchesGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 2), GroupValue())
if mibBuilder.loadTexts: plcNodeNotchesGroupIndex.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesGroupIndex.setDescription('The group number on which the notches are defined.')
plcNodeNotchesCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier1.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier1.setDescription('Tell if the first carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier2.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier2.setDescription('Tell if the second carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesCarrier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier3.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier3.setDescription('Tell if the third carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesCarrier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier4.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier4.setDescription('Tell if the fourth carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesCarrier5 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier5.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier5.setDescription('Tell if the fifth carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesCarrier6 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier6.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier6.setDescription('Tell if the sixth carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesCarrier7 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier7.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier7.setDescription('Tell if the seventh carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesCarrier8 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesCarrier8.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesCarrier8.setDescription('Tell if the eighth carrier of the group entry of the band entry is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3))
plcNodeNotchesInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 1), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputBand.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputBand.setDescription('The band number on which the notches value changes are requested.')
plcNodeNotchesInputGroup = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 2), GroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputGroup.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputGroup.setDescription('The group number on which the notches value changes are requested.')
plcNodeNotchesInputCarrier1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier1.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier1.setDescription('The first carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputCarrier2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier2.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier2.setDescription('The second carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputCarrier3 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier3.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier3.setDescription('The third carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputCarrier4 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier4.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier4.setDescription('The fourth carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputCarrier5 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier5.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier5.setDescription('The eighth carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputCarrier6 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier6.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier6.setDescription('The eighth carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputCarrier7 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier7.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier7.setDescription('The seventh carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputCarrier8 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier8.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputCarrier8.setDescription('The eighth carrier of the considered group and band is a notch carrier. The true value means the current carrier is a notch.')
plcNodeNotchesInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNotchesInputProceed.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputProceed.setDescription('True to request a modification of the carrier notches associated to the considered group and band.')
plcNodeNotchesInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 3, 12), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeNotchesInputResult.setStatus('current')
if mibBuilder.loadTexts: plcNodeNotchesInputResult.setDescription('Result value of the requested node carrier notches value changes.')
plcNodePilots = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilots.setStatus('current')
if mibBuilder.loadTexts: plcNodePilots.setDescription('The values of the pilot for all the node bands. The expected format is VALUE VALUE VALUE ... VALUE. Each value is a pair of octets representing the pilot values. There is one pair (pilot1 pilot2) for each of the 7 bands.')
plcNodePilotsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5), )
if mibBuilder.loadTexts: plcNodePilotsTable.setStatus('current')
if mibBuilder.loadTexts: plcNodePilotsTable.setDescription('This table contains pilot values used by default on all channels.')
plcNodePilotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1), ).setIndexNames((0, "SPC200", "plcNodePilotsBandIndex"))
if mibBuilder.loadTexts: plcNodePilotsEntry.setStatus('current')
if mibBuilder.loadTexts: plcNodePilotsEntry.setDescription('This row contains pilot values used by default on a band. The band is defined by the index plcNodePilotsBandIndex.')
plcNodePilotsBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodePilotsBandIndex.setStatus('current')
if mibBuilder.loadTexts: plcNodePilotsBandIndex.setDescription('The band number on which the pilot values are defined.')
plcNodePilot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1, 2), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilot1.setStatus('current')
if mibBuilder.loadTexts: plcNodePilot1.setDescription('The default carrier wave number which supports the first pilot wave.')
plcNodePilot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 5, 1, 3), PilotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilot2.setStatus('current')
if mibBuilder.loadTexts: plcNodePilot2.setDescription('The default carrier wave number which supports the second pilot wave.')
plcNodePilotsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6))
plcNodePilotsInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 1), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodePilotsInputBand.setStatus('current')
if mibBuilder.loadTexts: plcNodePilotsInputBand.setDescription('The band number on which the pilot values changes are requested.')
plcInputNodePilot1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 2), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputNodePilot1.setStatus('current')
if mibBuilder.loadTexts: plcInputNodePilot1.setDescription('The default carrier wave number which supports the first pilot wave of the considered band.')
plcInputNodePilot2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 3), PilotValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcInputNodePilot2.setStatus('current')
if mibBuilder.loadTexts: plcInputNodePilot2.setDescription('The default carrier wave number which supports the second pilot wave of the considered band.')
plcNodePilotsInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodePilotsInputProceed.setStatus('current')
if mibBuilder.loadTexts: plcNodePilotsInputProceed.setDescription('True to request a modification of the pilot values associated to the considered band.')
plcNodePilotsInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 6, 5), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodePilotsInputResult.setStatus('current')
if mibBuilder.loadTexts: plcNodePilotsInputResult.setDescription('Result value of the requested node pilot values changes.')
plcNodeAdaptsStringTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7), )
if mibBuilder.loadTexts: plcNodeAdaptsStringTable.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsStringTable.setDescription('This table contains string values for a quick access to the adapt configurations of all the carriers.')
plcNodeAdaptsStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7, 1), ).setIndexNames((0, "SPC200", "plcBasePortIndex"), (0, "SPC200", "plcNodeAdaptsStringBandIndex"))
if mibBuilder.loadTexts: plcNodeAdaptsStringEntry.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsStringEntry.setDescription('This row contains string values for a quick access to the adapt configuration of each carrier of a band.')
plcNodeAdaptsStringBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodeAdaptsStringBandIndex.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsStringBandIndex.setDescription('The band number on which the adapt values are defined.')
plcNodeAdaptsStringBand = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsStringBand.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsStringBand.setDescription('The adapt values of the 128 carriers of a band. The expected format is VALUE VALUE VALUE ... VALUE. Each value is two octets representing one adapt carrier level. There are ( 16 groups * 8 carriers) = 128 values.')
plcNodeAdaptsTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8), )
if mibBuilder.loadTexts: plcNodeAdaptsTable.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsTable.setDescription('This table contains adapt level configuration for each carrier of the node.')
plcNodeAdaptsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1), ).setIndexNames((0, "SPC200", "plcNodeAdaptsBandIndex"), (0, "SPC200", "plcNodeAdaptsGroupIndex"))
if mibBuilder.loadTexts: plcNodeAdaptsEntry.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsEntry.setDescription('This row contains adapt level values for a group of carriers. The group is defined by the couple (plcNodeAdaptsBandIndex,plcNodeAdaptsGroupIndex).')
plcNodeAdaptsBandIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 1), BandValue())
if mibBuilder.loadTexts: plcNodeAdaptsBandIndex.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsBandIndex.setDescription('The band number on which the adapt values are defined.')
plcNodeAdaptsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 2), GroupValue())
if mibBuilder.loadTexts: plcNodeAdaptsGroupIndex.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsGroupIndex.setDescription('The group number on which the adapt values are defined.')
plcNodeAdaptsCarrier1 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 3), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier1.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier1.setDescription('The adapt level of the first carrier of the group.')
plcNodeAdaptsCarrier2 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 4), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier2.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier2.setDescription('The adapt level of the second carrier of the group.')
plcNodeAdaptsCarrier3 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 5), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier3.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier3.setDescription('The adapt level of the third carrier of the group.')
plcNodeAdaptsCarrier4 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 6), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier4.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier4.setDescription('The adapt level of the fourth carrier of the group.')
plcNodeAdaptsCarrier5 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 7), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier5.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier5.setDescription('The adapt level of the fifth carrier of the group.')
plcNodeAdaptsCarrier6 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 8), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier6.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier6.setDescription('The adapt level of the sixth carrier of the group.')
plcNodeAdaptsCarrier7 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 9), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier7.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier7.setDescription('The adapt level of the seventh carrier of the group.')
plcNodeAdaptsCarrier8 = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 8, 1, 10), AdaptValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsCarrier8.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsCarrier8.setDescription('The adapt level of the eighth carrier of the group.')
plcNodeAdaptsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9))
plcNodeAdaptsInputBand = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 1), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputBand.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputBand.setDescription('The band number on which the adapt level value changes are requested.')
plcNodeAdaptsInputGroup = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 2), GroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputGroup.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputGroup.setDescription('The group number on which the adapt level value changes are requested.')
plcNodeAdaptsInputCarrier1 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 3), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier1.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier1.setDescription('The adapt level of the first carrier of the considered group of the chosen band.')
plcNodeAdaptsInputCarrier2 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 4), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier2.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier2.setDescription('The adapt level of the second carrier of the considered group of the chosen band.')
plcNodeAdaptsInputCarrier3 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 5), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier3.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier3.setDescription('The adapt level of the third carrier of the considered group of the chosen band.')
plcNodeAdaptsInputCarrier4 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 6), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier4.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier4.setDescription('The adapt level of the fourth carrier of the considered group of the chosen band.')
plcNodeAdaptsInputCarrier5 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 7), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier5.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier5.setDescription('The adapt level of the fifth carrier of the considered group of the chosen band.')
plcNodeAdaptsInputCarrier6 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 8), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier6.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier6.setDescription('The adapt level of the sixth carrier of the considered group of the chosen band.')
plcNodeAdaptsInputCarrier7 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 9), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier7.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier7.setDescription('The adapt level of the seventh carrier of the considered group of the chosen band.')
plcNodeAdaptsInputCarrier8 = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 10), AdaptValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier8.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputCarrier8.setDescription('The adapt level of the eighth carrier of the considered group of the chosen band.')
plcNodeAdaptsInputProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeAdaptsInputProceed.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputProceed.setDescription('True to request a modification of the carrier adapt level associated to the considered group and band.')
plcNodeAdaptsInputResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 9, 12), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeAdaptsInputResult.setStatus('current')
if mibBuilder.loadTexts: plcNodeAdaptsInputResult.setDescription('Result value of the requested node adapt level value changes.')
plcNodeNetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10), )
if mibBuilder.loadTexts: plcNodeNetConfigTable.setStatus('current')
if mibBuilder.loadTexts: plcNodeNetConfigTable.setDescription('This table contains ip and mac addresses of the node.')
plcNodeNetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: plcNodeNetConfigEntry.setStatus('current')
if mibBuilder.loadTexts: plcNodeNetConfigEntry.setDescription('This row contains ip and mac address used by an interface.')
plcNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeIpAddr.setStatus('current')
if mibBuilder.loadTexts: plcNodeIpAddr.setDescription('The IP address of the IP layer above the interface.')
plcNodeNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeNetMask.setStatus('current')
if mibBuilder.loadTexts: plcNodeNetMask.setDescription('The IP Subnet mask of the IP layer above the interface.')
plcNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeMacAddr.setStatus('current')
if mibBuilder.loadTexts: plcNodeMacAddr.setDescription('The MAC address of the MAC layer above the interface.')
plcNodeGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeGateway.setStatus('current')
if mibBuilder.loadTexts: plcNodeGateway.setDescription('The Gateway address of the IP layer above the interface.')
plcNodeActions = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11))
plcNodeActionsCommit = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 1))
plcNodeActionsCommitProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeActionsCommitProceed.setStatus('current')
if mibBuilder.loadTexts: plcNodeActionsCommitProceed.setDescription('True to request the commit of the configuration changes into the flash memory')
plcNodeActionsCommitResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 1, 2), ResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plcNodeActionsCommitResult.setStatus('current')
if mibBuilder.loadTexts: plcNodeActionsCommitResult.setDescription('Result value of the requested flash commit operation.')
plcNodeActionsReset = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 2))
plcNodeActionsResetProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeActionsResetProceed.setStatus('current')
if mibBuilder.loadTexts: plcNodeActionsResetProceed.setDescription('True to request the reset of the node. This operation will terminate the communication between the manager and the node')
plcNodeActionsCarrier = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 3))
plcNodeActionsCarrierFlatProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 3, 11, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcNodeActionsCarrierFlatProceed.setStatus('current')
if mibBuilder.loadTexts: plcNodeActionsCarrierFlatProceed.setDescription('True to request the equipment to flat the signal')
plcBssId = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 6))
plcMasterBssId = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcMasterBssId.setStatus('current')
if mibBuilder.loadTexts: plcMasterBssId.setDescription('The value of the master Bss Id')
plcSlaveBssId = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcSlaveBssId.setStatus('current')
if mibBuilder.loadTexts: plcSlaveBssId.setDescription('The value of the slave Bss Id')
plcSpy = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 7))
plcSpyIsDynamic = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcSpyIsDynamic.setStatus('current')
if mibBuilder.loadTexts: plcSpyIsDynamic.setDescription('True to set the spy dynamic mode')
plcStaticSpySynchBandNb = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 2, 7, 2), BandValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plcStaticSpySynchBandNb.setStatus('current')
if mibBuilder.loadTexts: plcStaticSpySynchBandNb.setDescription('The synchronization band number used for static spy mode')
softwareMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3))
currentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: currentSoftwareVersion.setDescription('The name of the current software release.')
currentSoftwareBoardVersion = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSoftwareBoardVersion.setStatus('current')
if mibBuilder.loadTexts: currentSoftwareBoardVersion.setDescription('The name of the current software board release.')
currentSoftwareAFEVersion = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSoftwareAFEVersion.setStatus('current')
if mibBuilder.loadTexts: currentSoftwareAFEVersion.setDescription('The name of the current software Analog Front End release.')
softwareTable = MibTable((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4), )
if mibBuilder.loadTexts: softwareTable.setStatus('current')
if mibBuilder.loadTexts: softwareTable.setDescription('This table contains the current and reserve softwares of the node.')
softwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4, 1), ).setIndexNames((0, "SPC200", "softwareIndex"))
if mibBuilder.loadTexts: softwareEntry.setStatus('current')
if mibBuilder.loadTexts: softwareEntry.setDescription('This row contains software information.')
softwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4, 1, 1), SoftwareIndex())
if mibBuilder.loadTexts: softwareIndex.setStatus('current')
if mibBuilder.loadTexts: softwareIndex.setDescription('The index number of the software.')
softwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('The name of the software release.')
softwareUpload = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5))
softwareUploadTFTPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadTFTPServerIP.setStatus('current')
if mibBuilder.loadTexts: softwareUploadTFTPServerIP.setDescription('The IP address of the TFTP serveur')
softwareUploadLogin = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadLogin.setStatus('current')
if mibBuilder.loadTexts: softwareUploadLogin.setDescription('The user login on the TFTP server')
softwareUploadPassword = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadPassword.setStatus('current')
if mibBuilder.loadTexts: softwareUploadPassword.setDescription('The user password on the TFTP server. Warning: This field is displayed using 6 * characters')
softwareUploadFileName = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadFileName.setStatus('current')
if mibBuilder.loadTexts: softwareUploadFileName.setDescription('The software file name to upload')
softwareUploadProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadProceed.setStatus('current')
if mibBuilder.loadTexts: softwareUploadProceed.setDescription('True to request the uploading to start')
softwareUploadResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 6), SoftwareActionResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareUploadResult.setStatus('current')
if mibBuilder.loadTexts: softwareUploadResult.setDescription('Result value of the requested uploading')
softwareUploadTFTPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareUploadTFTPServerPort.setStatus('current')
if mibBuilder.loadTexts: softwareUploadTFTPServerPort.setDescription('The service port of the TFTP server')
softwareAction = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6))
softwareActionIndex = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 1), SoftwareIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareActionIndex.setStatus('current')
if mibBuilder.loadTexts: softwareActionIndex.setDescription('The index of the reserve software')
softwareActionType = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 2), SoftwareActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareActionType.setStatus('current')
if mibBuilder.loadTexts: softwareActionType.setDescription('Type of the software action software: switch, remove ')
softwareActionProceed = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: softwareActionProceed.setStatus('current')
if mibBuilder.loadTexts: softwareActionProceed.setDescription('True to request the switch between the current and the reserver software to start')
softwareActionResult = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 1, 3, 6, 4), SoftwareActionResultValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareActionResult.setStatus('current')
if mibBuilder.loadTexts: softwareActionResult.setDescription('Result value of the requested action')
plcConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4))
plcCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 1))
plcGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2))
plcCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 1, 1)).setObjects(("SPC200", "nodeGroup"), ("SPC200", "topologyGroup"), ("SPC200", "statisticGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    plcCompliance = plcCompliance.setStatus('current')
if mibBuilder.loadTexts: plcCompliance.setDescription('The compliance statement for SPC200 chip.')
nodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 1)).setObjects(("SPC200", "plcNodeNotches"), ("SPC200", "plcMode"), ("SPC200", "plcNodeNotchesCarrier1"), ("SPC200", "plcNodeNotchesCarrier2"), ("SPC200", "plcNodeNotchesCarrier3"), ("SPC200", "plcNodeNotchesCarrier4"), ("SPC200", "plcNodeNotchesCarrier5"), ("SPC200", "plcNodeNotchesCarrier6"), ("SPC200", "plcNodeNotchesCarrier7"), ("SPC200", "plcNodeNotchesCarrier8"), ("SPC200", "plcNodePilots"), ("SPC200", "plcNodePilot1"), ("SPC200", "plcNodePilot2"), ("SPC200", "plcNodeAdaptsStringBand"), ("SPC200", "plcNodeAdaptsCarrier1"), ("SPC200", "plcNodeAdaptsCarrier2"), ("SPC200", "plcNodeAdaptsCarrier3"), ("SPC200", "plcNodeAdaptsCarrier4"), ("SPC200", "plcNodeAdaptsCarrier5"), ("SPC200", "plcNodeAdaptsCarrier6"), ("SPC200", "plcNodeAdaptsCarrier7"), ("SPC200", "plcNodeAdaptsCarrier8"), ("SPC200", "plcNodeIpAddr"), ("SPC200", "plcNodeNetMask"), ("SPC200", "plcNodeMacAddr"), ("SPC200", "plcNodeGateway"), ("SPC200", "plcMasterBssId"), ("SPC200", "plcSlaveBssId"), ("SPC200", "plcSpyIsDynamic"), ("SPC200", "plcStaticSpySynchBandNb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nodeGroup = nodeGroup.setStatus('current')
if mibBuilder.loadTexts: nodeGroup.setDescription('A collection of objects providing node configuration information.')
inputNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 2)).setObjects(("SPC200", "plcNodeNotchesInputBand"), ("SPC200", "plcNodeNotchesInputGroup"), ("SPC200", "plcNodeNotchesInputCarrier1"), ("SPC200", "plcNodeNotchesInputCarrier2"), ("SPC200", "plcNodeNotchesInputCarrier3"), ("SPC200", "plcNodeNotchesInputCarrier4"), ("SPC200", "plcNodeNotchesInputCarrier5"), ("SPC200", "plcNodeNotchesInputCarrier6"), ("SPC200", "plcNodeNotchesInputCarrier7"), ("SPC200", "plcNodeNotchesInputCarrier8"), ("SPC200", "plcNodeNotchesInputProceed"), ("SPC200", "plcNodeNotchesInputResult"), ("SPC200", "plcNodePilotsInputBand"), ("SPC200", "plcInputNodePilot1"), ("SPC200", "plcInputNodePilot2"), ("SPC200", "plcNodePilotsInputProceed"), ("SPC200", "plcNodePilotsInputResult"), ("SPC200", "plcNodeAdaptsInputBand"), ("SPC200", "plcNodeAdaptsInputGroup"), ("SPC200", "plcNodeAdaptsInputCarrier1"), ("SPC200", "plcNodeAdaptsInputCarrier2"), ("SPC200", "plcNodeAdaptsInputCarrier3"), ("SPC200", "plcNodeAdaptsInputCarrier4"), ("SPC200", "plcNodeAdaptsInputCarrier5"), ("SPC200", "plcNodeAdaptsInputCarrier6"), ("SPC200", "plcNodeAdaptsInputCarrier7"), ("SPC200", "plcNodeAdaptsInputCarrier8"), ("SPC200", "plcNodeAdaptsInputProceed"), ("SPC200", "plcNodeAdaptsInputResult"), ("SPC200", "plcNodeActionsCommitProceed"), ("SPC200", "plcNodeActionsCommitResult"), ("SPC200", "plcNodeActionsResetProceed"), ("SPC200", "plcNodeActionsCarrierFlatProceed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inputNodeGroup = inputNodeGroup.setStatus('current')
if mibBuilder.loadTexts: inputNodeGroup.setDescription('A collection of objects used to request node configuration information changes.')
topologyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 3)).setObjects(("SPC200", "plcBasePortAddress"), ("SPC200", "plcBasePortChannelEstimation"), ("SPC200", "plcBasePortAttenuation"), ("SPC200", "plcChannePilot2"), ("SPC200", "plcChannelPilot1"), ("SPC200", "plcRxChannelPilots"), ("SPC200", "plcRxLastChannelPilots"), ("SPC200", "plcTxChannelPilots"), ("SPC200", "plcRxChannelModulation"), ("SPC200", "plcRxLastChannelModulation"), ("SPC200", "plcTxChannelModulation"), ("SPC200", "plcModGroup1"), ("SPC200", "plcModGroup10"), ("SPC200", "plcModGroup11"), ("SPC200", "plcModGroup12"), ("SPC200", "plcModGroup13"), ("SPC200", "plcModGroup14"), ("SPC200", "plcModGroup15"), ("SPC200", "plcModGroup16"), ("SPC200", "plcModGroup2"), ("SPC200", "plcModGroup3"), ("SPC200", "plcModGroup4"), ("SPC200", "plcModGroup5"), ("SPC200", "plcModGroup6"), ("SPC200", "plcModGroup7"), ("SPC200", "plcModGroup8"), ("SPC200", "plcModGroup9"), ("SPC200", "plcPortChannelGain"), ("SPC200", "plcPortChannelBandwidth"), ("SPC200", "plcPortChannelMaxBandwidth"), ("SPC200", "plcPortChannelSynchronizationBand"), ("SPC200", "plcPortChannelType"), ("SPC200", "plcTopoChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    topologyGroup = topologyGroup.setStatus('current')
if mibBuilder.loadTexts: topologyGroup.setDescription('A collection of objects providing topology configuration.')
inputTopologyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 4)).setObjects(("SPC200", "plcModulationInputAddr"), ("SPC200", "plcModulationInputChannel"), ("SPC200", "plcModulationInputBand"), ("SPC200", "plcInputModulationGroup1"), ("SPC200", "plcInputModulationGroup2"), ("SPC200", "plcInputModulationGroup3"), ("SPC200", "plcInputModulationGroup4"), ("SPC200", "plcInputModulationGroup5"), ("SPC200", "plcInputModulationGroup6"), ("SPC200", "plcInputModulationGroup7"), ("SPC200", "plcInputModulationGroup8"), ("SPC200", "plcInputModulationGroup9"), ("SPC200", "plcInputModulationGroup10"), ("SPC200", "plcInputModulationGroup11"), ("SPC200", "plcInputModulationGroup12"), ("SPC200", "plcInputModulationGroup13"), ("SPC200", "plcInputModulationGroup14"), ("SPC200", "plcInputModulationGroup15"), ("SPC200", "plcInputModulationGroup16"), ("SPC200", "plcModulationInputProceed"), ("SPC200", "plcModulationInputResult"), ("SPC200", "plcPilotsInputAddr"), ("SPC200", "plcPilotsInputChannel"), ("SPC200", "plcPilotsInputBand"), ("SPC200", "plcInputChannelPilot1"), ("SPC200", "plcInputChannelPilot2"), ("SPC200", "plcPilotsInputProceed"), ("SPC200", "plcPilotsInputResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inputTopologyGroup = inputTopologyGroup.setStatus('current')
if mibBuilder.loadTexts: inputTopologyGroup.setDescription('A collection of objects used to request topology configuration changes.')
statisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 5)).setObjects(("SPC200", "portStats2AvgBandAtt"), ("SPC200", "portStats2AvgBandSNR"), ("SPC200", "portStats2Noise"), ("SPC200", "portStats2Signal"), ("SPC200", "portStatsNoise"), ("SPC200", "portStatsSignal"), ("SPC200", "portStats3AvgAtt"), ("SPC200", "portStats3AvgSNR"), ("SPC200", "bootstatsBoot"), ("SPC200", "bootstatsManualReset"), ("SPC200", "bootstatsFailureReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    statisticGroup = statisticGroup.setStatus('current')
if mibBuilder.loadTexts: statisticGroup.setDescription('A collection of objects providing statistic data on node and plc link performances.')
softwareGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 6)).setObjects(("SPC200", "currentSoftwareVersion"), ("SPC200", "currentSoftwareBoardVersion"), ("SPC200", "currentSoftwareAFEVersion"), ("SPC200", "softwareVersion"), ("SPC200", "softwareUploadTFTPServerIP"), ("SPC200", "softwareUploadLogin"), ("SPC200", "softwareUploadPassword"), ("SPC200", "softwareUploadFileName"), ("SPC200", "softwareUploadProceed"), ("SPC200", "softwareUploadResult"), ("SPC200", "softwareUploadTFTPServerPort"), ("SPC200", "softwareActionIndex"), ("SPC200", "softwareActionType"), ("SPC200", "softwareActionProceed"), ("SPC200", "softwareActionResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    softwareGroup = softwareGroup.setStatus('current')
if mibBuilder.loadTexts: softwareGroup.setDescription('A collection of objects providing software management')
analyserGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 2, 7)).setObjects(("SPC200", "plcSNAnalyserAGC"), ("SPC200", "plcSNAnalyserEnable"), ("SPC200", "plcSNAnalyserMinSignal"), ("SPC200", "plcSNAnalyserMaxSignal"), ("SPC200", "plcSNAnalyserAvgSignal"), ("SPC200", "plcSNAnalyserLastSignal"), ("SPC200", "plcSNAnalyserFFTDiv"), ("SPC200", "plcAGCAnalyserEnable"), ("SPC200", "plcAGCAnalyserSamplesPart1"), ("SPC200", "plcAGCAnalyserSamplesPart2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    analyserGroup = analyserGroup.setStatus('current')
if mibBuilder.loadTexts: analyserGroup.setDescription('A collection of objects providing spectrum analyser data')
agentCapabilities = AgentCapabilities((1, 3, 6, 1, 4, 1, 22764, 1, 1, 4, 3))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    agentCapabilities = agentCapabilities.setProductRelease('Product-Release')
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    agentCapabilities = agentCapabilities.setStatus('current')
if mibBuilder.loadTexts: agentCapabilities.setDescription('The SPC200 chip SNMP agent capabilities')
ipExt = ObjectIdentity((1, 3, 6, 1, 4, 1, 22764, 1, 4))
if mibBuilder.loadTexts: ipExt.setStatus('current')
if mibBuilder.loadTexts: ipExt.setDescription('Extended ip needed for SPiDCOM functionalities')
ipDynamic = MibScalar((1, 3, 6, 1, 4, 1, 22764, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDynamic.setStatus('current')
if mibBuilder.loadTexts: ipDynamic.setDescription('True if Ip address is set dynamically')
ipExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22764, 1, 4, 2)).setObjects(("SPC200", "ipDynamic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipExtGroup = ipExtGroup.setStatus('current')
if mibBuilder.loadTexts: ipExtGroup.setDescription('The fields needed by the SPiDCOM functionalities')
mibBuilder.exportSymbols("SPC200", plcNodeNotchesBandIndex=plcNodeNotchesBandIndex, plcNodeNotchesCarrier7=plcNodeNotchesCarrier7, SoftwareActionResultValue=SoftwareActionResultValue, plcNodeAdaptsStringBandIndex=plcNodeAdaptsStringBandIndex, plcPortChannelType=plcPortChannelType, plcRxLastChannelModulation=plcRxLastChannelModulation, plcNodeNotchesInputCarrier1=plcNodeNotchesInputCarrier1, plcNodeNotchesInputCarrier8=plcNodeNotchesInputCarrier8, plcSpy=plcSpy, plcMode=plcMode, portStatsBandIndex=portStatsBandIndex, plcModGroup16=plcModGroup16, plcNodeNotchesCarrier2=plcNodeNotchesCarrier2, plcInputModulationGroup6=plcInputModulationGroup6, plcNodeActionsCommit=plcNodeActionsCommit, plcSNAnalyser=plcSNAnalyser, plcNodeActionsReset=plcNodeActionsReset, ResultValue=ResultValue, plcNodeActionsCarrierFlatProceed=plcNodeActionsCarrierFlatProceed, plcModulationInputProceed=plcModulationInputProceed, plcModGroup1=plcModGroup1, plcPilotsInputBand=plcPilotsInputBand, topologyGroup=topologyGroup, plcPilotsInputResult=plcPilotsInputResult, PYSNMP_MODULE_ID=spc200MIB, plcNodeAdaptsCarrier1=plcNodeAdaptsCarrier1, plcNodeAdaptsInputCarrier6=plcNodeAdaptsInputCarrier6, plcModGroup7=plcModGroup7, plcChannelPilotsEntry=plcChannelPilotsEntry, softwareGroup=softwareGroup, plcNodeAdaptsStringEntry=plcNodeAdaptsStringEntry, softwareUploadProceed=softwareUploadProceed, plcNodeNotchesCarrier5=plcNodeNotchesCarrier5, softwareUploadTFTPServerPort=softwareUploadTFTPServerPort, plcNodeNetMask=plcNodeNetMask, plcRxChannelModulation=plcRxChannelModulation, softwareTable=softwareTable, bootstats=bootstats, plcChannelModulationTable=plcChannelModulationTable, spc200MIB=spc200MIB, plcPortChannelGain=plcPortChannelGain, plcPortChannelSynchronizationBand=plcPortChannelSynchronizationBand, bootstatsManualReset=bootstatsManualReset, SoftwareActionType=SoftwareActionType, plcNodeNotchesCarrier1=plcNodeNotchesCarrier1, softwareActionProceed=softwareActionProceed, plcTxChannelModulation=plcTxChannelModulation, plcModGroup5=plcModGroup5, plcNodeNetConfigEntry=plcNodeNetConfigEntry, plcNodeNotchesInput=plcNodeNotchesInput, plcModGroup11=plcModGroup11, plcNodePilotsInputBand=plcNodePilotsInputBand, PilotValue=PilotValue, plcInputModulationGroup13=plcInputModulationGroup13, ipDynamic=ipDynamic, currentSoftwareAFEVersion=currentSoftwareAFEVersion, plcModGroup4=plcModGroup4, plcNodeAdaptsCarrier7=plcNodeAdaptsCarrier7, plcInputModulationGroup1=plcInputModulationGroup1, softwareVersion=softwareVersion, plcModGroup3=plcModGroup3, plcSlaveBssId=plcSlaveBssId, ipExt=ipExt, plcChannelPilotsInput=plcChannelPilotsInput, plcNodeAdaptsCarrier4=plcNodeAdaptsCarrier4, plcNodeNotchesInputCarrier5=plcNodeNotchesInputCarrier5, inputTopologyGroup=inputTopologyGroup, softwareAction=softwareAction, plcBasePortTable=plcBasePortTable, plcNodePilot1=plcNodePilot1, softwareUploadTFTPServerIP=softwareUploadTFTPServerIP, softwareActionIndex=softwareActionIndex, ipExtGroup=ipExtGroup, portStats3Entry=portStats3Entry, plcModGroup13=plcModGroup13, GroupValue=GroupValue, plcNodeAdaptsInputBand=plcNodeAdaptsInputBand, plcNodeAdaptsInputCarrier7=plcNodeAdaptsInputCarrier7, plc=plc, plcBssId=plcBssId, portStatsSignal=portStatsSignal, plcChannelPilotStringTable=plcChannelPilotStringTable, plcNodeAdaptsInputCarrier1=plcNodeAdaptsInputCarrier1, portStats3AvgAtt=portStats3AvgAtt, plcInputModulationGroup16=plcInputModulationGroup16, softwareIndex=softwareIndex, plcSNAnalyserAGC=plcSNAnalyserAGC, plcChannelModulationStringEntry=plcChannelModulationStringEntry, plcInputModulationGroup5=plcInputModulationGroup5, plcNodeNotchesCarrier3=plcNodeNotchesCarrier3, plcNodeNotchesInputBand=plcNodeNotchesInputBand, plcNodeAdaptsBandIndex=plcNodeAdaptsBandIndex, portStats2AvgBandAtt=portStats2AvgBandAtt, stats=stats, plcPortChannelIndex=plcPortChannelIndex, plcPortChannelBandwidth=plcPortChannelBandwidth, currentSoftwareVersion=currentSoftwareVersion, plcModulationInputBand=plcModulationInputBand, plcNodePilotsInput=plcNodePilotsInput, plcNodeNotchesCarrier6=plcNodeNotchesCarrier6, portStatsNoise=portStatsNoise, plcModGroup15=plcModGroup15, plcInputModulationGroup15=plcInputModulationGroup15, bootstatsBoot=bootstatsBoot, plcInputNodePilot1=plcInputNodePilot1, softwareUploadResult=softwareUploadResult, plcInputModulationGroup4=plcInputModulationGroup4, plcAGCAnalyserSamplesPart1=plcAGCAnalyserSamplesPart1, inputNodeGroup=inputNodeGroup, plcBasePortAddress=plcBasePortAddress, plcNodeNotchesInputResult=plcNodeNotchesInputResult, bootstatsFailureReset=bootstatsFailureReset, plcNodeAdaptsInputProceed=plcNodeAdaptsInputProceed, portStats2Entry=portStats2Entry, plcInputModulationGroup2=plcInputModulationGroup2, plcAGCAnalyser=plcAGCAnalyser, portStats2Noise=portStats2Noise, plcModGroup12=plcModGroup12, portStatsGroupIndex=portStatsGroupIndex, softwareUploadFileName=softwareUploadFileName, plcBasePortEntry=plcBasePortEntry, plcNodeAdaptsCarrier5=plcNodeAdaptsCarrier5, plcNodePilotsEntry=plcNodePilotsEntry, plcNodeConfiguration=plcNodeConfiguration, plcChannePilot2=plcChannePilot2, softwareActionResult=softwareActionResult, plcNodeAdaptsStringBand=plcNodeAdaptsStringBand, plcNodeAdaptsInputCarrier3=plcNodeAdaptsInputCarrier3, plcNodeAdaptsCarrier6=plcNodeAdaptsCarrier6, softwareUpload=softwareUpload, softwareUploadLogin=softwareUploadLogin, plcInputModulationGroup8=plcInputModulationGroup8, softwareEntry=softwareEntry, plcRxLastChannelPilots=plcRxLastChannelPilots, plcModulationInputResult=plcModulationInputResult, plcNodeActionsCarrier=plcNodeActionsCarrier, plcNodeAdaptsEntry=plcNodeAdaptsEntry, plcConformance=plcConformance, plcInputNodePilot2=plcInputNodePilot2, softwareUploadPassword=softwareUploadPassword, plcSNAnalyserFFTDiv=plcSNAnalyserFFTDiv, plcNodeNotchesTable=plcNodeNotchesTable, plcNodeAdaptsInputResult=plcNodeAdaptsInputResult, agentCapabilities=agentCapabilities, plcPortChannelEntry=plcPortChannelEntry, analyserGroup=analyserGroup, portStats3Table=portStats3Table, PlcChannelType=PlcChannelType, EstimationMode=EstimationMode, plcNodeAdaptsCarrier3=plcNodeAdaptsCarrier3, plcMasterBssId=plcMasterBssId, nodeGroup=nodeGroup, plcNodePilotsInputProceed=plcNodePilotsInputProceed, plcAGCAnalyserEnable=plcAGCAnalyserEnable, plcNodeNotchesInputCarrier7=plcNodeNotchesInputCarrier7, statisticGroup=statisticGroup, PlcModeType=PlcModeType, plcModulationInputAddr=plcModulationInputAddr, plcChannelPilotsTable=plcChannelPilotsTable, plcNodeNotchesCarrier4=plcNodeNotchesCarrier4, plcNodePilotsBandIndex=plcNodePilotsBandIndex, plcNodeAdaptsInputGroup=plcNodeAdaptsInputGroup, plcNodeIpAddr=plcNodeIpAddr, plcSNAnalyserLastSignal=plcSNAnalyserLastSignal, plcChannelPilot1=plcChannelPilot1, plcNodeAdaptsInputCarrier2=plcNodeAdaptsInputCarrier2, plcTopo=plcTopo, BandValue=BandValue, plcNodeNotchesInputGroup=plcNodeNotchesInputGroup, plcNodeNotchesInputCarrier4=plcNodeNotchesInputCarrier4, plcObjects=plcObjects, ModulationValue=ModulationValue, plcTopoChanges=plcTopoChanges, portStatsEntry=portStatsEntry, currentSoftwareBoardVersion=currentSoftwareBoardVersion, plcNodePilots=plcNodePilots, plcPilotsInputProceed=plcPilotsInputProceed, plcTxChannelPilots=plcTxChannelPilots, plcNodeActionsResetProceed=plcNodeActionsResetProceed, portStats2Table=portStats2Table, plcPortChannelTable=plcPortChannelTable, plcNodeActions=plcNodeActions, ChannelBandwidthValue=ChannelBandwidthValue, plcInputChannelPilot2=plcInputChannelPilot2, portStatsCarrierIndex=portStatsCarrierIndex, plcAGCAnalyserSamplesPart2=plcAGCAnalyserSamplesPart2, plcCompliances=plcCompliances, plcNodeAdaptsInputCarrier8=plcNodeAdaptsInputCarrier8, plcModGroup6=plcModGroup6, plcModBandIndex=plcModBandIndex, plcNodeAdaptsStringTable=plcNodeAdaptsStringTable, plcSNAnalyserEnable=plcSNAnalyserEnable, portStats2AvgBandSNR=portStats2AvgBandSNR, plcNodeNotchesInputCarrier2=plcNodeNotchesInputCarrier2, plcNodeNotchesInputProceed=plcNodeNotchesInputProceed, plcNodeNotchesInputCarrier3=plcNodeNotchesInputCarrier3, softwareMgnt=softwareMgnt, plcInputChannelPilot1=plcInputChannelPilot1, plcNodeAdaptsCarrier2=plcNodeAdaptsCarrier2, plcInputModulationGroup9=plcInputModulationGroup9, plcChannelPilotStringEntry=plcChannelPilotStringEntry, portStats3AvgSNR=portStats3AvgSNR, plcSNAnalyserEntry=plcSNAnalyserEntry, plcInputModulationGroup7=plcInputModulationGroup7, plcInputModulationGroup10=plcInputModulationGroup10, plcModGroup9=plcModGroup9, plcNodeNotchesInputCarrier6=plcNodeNotchesInputCarrier6, plcNodeAdaptsCarrier8=plcNodeAdaptsCarrier8, plcNodeAdaptsGroupIndex=plcNodeAdaptsGroupIndex, plcModulationInputChannel=plcModulationInputChannel, plcInputModulationGroup14=plcInputModulationGroup14, plcNodeAdaptsInput=plcNodeAdaptsInput, plcSNAnalyserMaxSignal=plcSNAnalyserMaxSignal, plcNodeNotches=plcNodeNotches, plcSNAnalyserTable=plcSNAnalyserTable, plcModGroup14=plcModGroup14, plcInputModulationGroup12=plcInputModulationGroup12, plcStaticSpySynchBandNb=plcStaticSpySynchBandNb, softwareActionType=softwareActionType, portStatsTable=portStatsTable, plcCompliance=plcCompliance, plcRxChannelPilots=plcRxChannelPilots, plcBasePortAttenuation=plcBasePortAttenuation, plcNodePilotsInputResult=plcNodePilotsInputResult, plcNodeGateway=plcNodeGateway, portStats2Signal=portStats2Signal, plcNodeActionsCommitProceed=plcNodeActionsCommitProceed, plcNodeAdaptsInputCarrier5=plcNodeAdaptsInputCarrier5, plcBasePortChannelEstimation=plcBasePortChannelEstimation, plcPortChannelMaxBandwidth=plcPortChannelMaxBandwidth, plcChannelPilotBandIndex=plcChannelPilotBandIndex, plcNodePilot2=plcNodePilot2, plcNodeNotchesGroupIndex=plcNodeNotchesGroupIndex, plcSNAnalyserAvgSignal=plcSNAnalyserAvgSignal, CarrierValue=CarrierValue, plcSNAnalyserMinSignal=plcSNAnalyserMinSignal, plcBasePortIndex=plcBasePortIndex, plcNodeNotchesCarrier8=plcNodeNotchesCarrier8, plcNodeAdaptsTable=plcNodeAdaptsTable, plcSpyIsDynamic=plcSpyIsDynamic, plcInputModulationGroup11=plcInputModulationGroup11, SoftwareIndex=SoftwareIndex, plcPilotsInputAddr=plcPilotsInputAddr, plcChannelModulationStringTable=plcChannelModulationStringTable, plcChannelModulationEntry=plcChannelModulationEntry, plcInputModulationGroup3=plcInputModulationGroup3, plcNodePilotsTable=plcNodePilotsTable, plcNodeMacAddr=plcNodeMacAddr, plcModGroup10=plcModGroup10, plcChannelModulationInput=plcChannelModulationInput, plcModGroup2=plcModGroup2, plcNodeNetConfigTable=plcNodeNetConfigTable, plcPilotsInputChannel=plcPilotsInputChannel, plcGroups=plcGroups)
mibBuilder.exportSymbols("SPC200", plcNodeNotchesEntry=plcNodeNotchesEntry, plcNodeAdaptsInputCarrier4=plcNodeAdaptsInputCarrier4, plcModGroup8=plcModGroup8, AdaptValue=AdaptValue, plcNodeActionsCommitResult=plcNodeActionsCommitResult)
