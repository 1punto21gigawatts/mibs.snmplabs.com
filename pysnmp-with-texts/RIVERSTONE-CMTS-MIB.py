#
# PySNMP MIB module RIVERSTONE-CMTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-CMTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
docsIfCmtsModIndex, docsIfCmtsModIntervalUsageCode = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsModIndex", "docsIfCmtsModIntervalUsageCode")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
riverstoneMibs, = mibBuilder.importSymbols("RSTONE-SMI-MIB", "riverstoneMibs")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, Counter64, IpAddress, Unsigned32, TimeTicks, Bits, MibIdentifier, iso, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "IpAddress", "Unsigned32", "TimeTicks", "Bits", "MibIdentifier", "iso", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "NotificationType")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
rsCmtsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 11))
rsCmtsMib.setRevisions(('2000-07-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsCmtsMib.setRevisionsDescriptions(('First Version of the Riverstone CMTS MIB.',))
if mibBuilder.loadTexts: rsCmtsMib.setLastUpdated('200007080000Z')
if mibBuilder.loadTexts: rsCmtsMib.setOrganization('Riverstone Networks, Inc')
if mibBuilder.loadTexts: rsCmtsMib.setContactInfo('Riverstone Networks, Inc 5200 Great America Parkway Santa Clara CA USA 95054 PHONE:+1 408.878.6500 EMAIL: nms-eng@riverstonenet.com WEB: http://www.riverstonenet.com')
if mibBuilder.loadTexts: rsCmtsMib.setDescription('This mib module defines the Riverstone Networks enterpise MIB for CMTS modules. http://www.riverstonenet.com/products. Copyright (C) Riverstone Networks, Inc 2000')
class RsCmtsCmdStatus(TextualConvention, Integer32):
    description = 'A unique value for each status code of the generic cmts command variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("active", 1), ("startup", 2), ("process", 3), ("success", 4), ("failed", 5))

rsCmtsBaseTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1), )
if mibBuilder.loadTexts: rsCmtsBaseTable.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseTable.setDescription('CMTS Base table settable parameters.')
rsCmtsBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsCmtsBaseEntry.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseEntry.setDescription('An entry containing objects describing attributes of each MAC entry, extending the information in ifEntry. An entry in this table exists for each ifEntry with an ifType of docsCableMaclayer(127).')
rsCmtsBaseBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseBpduFilter.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseBpduFilter.setDescription('Indicates whether we do BPDU filtering on the headend.')
rsCmtsBaseBpduFilterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsBaseBpduFilterHits.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseBpduFilterHits.setDescription('Counts number of BPDU filter hits on the headend.')
rsCmtsBaseNonIPFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseNonIPFilter.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseNonIPFilter.setDescription('Indicates whether we do non-IP filtering on the headend.')
rsCmtsBaseNonIPFilterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsBaseNonIPFilterHits.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseNonIPFilterHits.setDescription('Counts number of non-IP filter hits on the headend.')
rsCmtsBaseMapLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseMapLength.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseMapLength.setDescription('Length of the generated maps in microseconds.')
rsCmtsBaseMapLeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseMapLeadTime.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseMapLeadTime.setDescription('The amount of time between when we send a map and its effective start time in microseconds.')
rsCmtsBaseInitMaintLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseInitMaintLength.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseInitMaintLength.setDescription('The length of the initial maintenance interval in microseconds.')
rsCmtsBase3137Config1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBase3137Config1.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBase3137Config1.setDescription('3137 configuration register 1.')
rsCmtsBase3137Config2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBase3137Config2.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBase3137Config2.setDescription('3137 configuration register 2.')
rsCmtsBaseConcatenation = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseConcatenation.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseConcatenation.setDescription('Indicates whether we do Concatenation on the headend.')
rsCmtsBaseBpiHwAssist = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseBpiHwAssist.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseBpiHwAssist.setDescription('Indicates whether we do key generation in hardware.')
rsCmtsBaseGenericCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseGenericCmd.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseGenericCmd.setDescription('A generic command to be applied to the active or startup configuration. The string is not to exceed 255 alpha-numeric characters. To write or check the status of the command, use the variable rsCmtsBaseGenericCmdStatus.')
rsCmtsBaseGenericCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 14), RsCmtsCmdStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseGenericCmdStatus.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseGenericCmdStatus.setDescription('This variable is used to write the command in rsCmtsBaseGenericCmd to either the active or startup configuration file. It is also useful to determine if the command is written successfully. These are the codes of the status: undefined(0) -- default value active(1) -- write to active configuration startup(2) -- write to startup configuration process(3) -- processing request success(4) -- write succeeded failed(5) -- write failed')
rsCmtsBaseUccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsBaseUccRetryInterval.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseUccRetryInterval.setDescription('Interval in milliseconds between successive UCC requests.')
rsCmtsBaseUccRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsBaseUccRetries.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseUccRetries.setDescription('Number of UCC request retries before timing out.')
rsCmtsUpstreamTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2), )
if mibBuilder.loadTexts: rsCmtsUpstreamTable.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamTable.setDescription('CMTS Upstream table configurable parameters.')
rsCmtsUpstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsCmtsUpstreamEntry.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamEntry.setDescription('An entry containing objects describing attributes of each Upstream entry, extending the information in ifEntry.')
rsCmtsUpstreamNominalRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamNominalRxPower.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamNominalRxPower.setDescription('The value indicates the nominal, receive power (indBmV) of each upstream RF port.')
rsCmtsUpstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamState.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamState.setDescription('Indicates that the given upstream port is operational.')
rsCmtsUpstreamPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamPolicing.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamPolicing.setDescription('Indicates if we are doing upstream traffic policing.')
rsCmtsUpstreamRangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamRangeInterval.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamRangeInterval.setDescription('Indicates the Invited (Periodic) Ranging Intervals as input to the Bandwidth Allocator algorithm.')
rsCmtsUpstreamRangeRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamRangeRetryInterval.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamRangeRetryInterval.setDescription('Indicates the Invited (Periodic) Ranging Retry Intervals as input to the Bandwidth Allocator algorithm.')
rsCmtsUpstreamPowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setUnits('Quarter DBmv').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamPowerThreshold.setDescription('Indicates the Power Threshold for the upstream port.')
rsCmtsUpstreamPowerAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamPowerAdjust.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamPowerAdjust.setDescription("Indicates whether we override upstream power adjustments performed by the CMTS to the CMs. If set the 'true', all RNG-Resp messages will be transmitted with ZERO power adjustment, regardless of received upstream power levels.")
rsCmtsUpstreamTimingAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamTimingAdjust.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamTimingAdjust.setDescription("Indicates whether we override upstream timing adjustments performed by the CMTS to the CMs. If set the 'true', all RNG-Resp messages will be transmitted with ZERO timing adjustment, regardless of received upstream timing.")
rsCmtsUpstreamFreqencyAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamFreqencyAdjust.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamFreqencyAdjust.setDescription("Indicates whether we override upstream frequency adjustments performed by the CMTS to the CMs. If set the 'true', all RNG-Resp messages will be transmitted with ZERO frequency adjustment, regardless of received upstream frequency levels.")
rsCmtsUpstreamTXCoefficients = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamTXCoefficients.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamTXCoefficients.setDescription('Indicates whether we omit the equalization coefficients for this upstream channel.')
rsCmtsUpstreamForceContinue = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamForceContinue.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamForceContinue.setDescription("Indicates whether we force all RNG-Resp messages to issue a 'Continue' Ranging Status indefinitely.")
rsCmtsUpstreamQosConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamQosConfirm.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamQosConfirm.setDescription('Indicates whether we would like to confirm the requested QoS parameters for this upstream during registration.')
rsCmtsUpstreamQosMaxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsUpstreamQosMaxBps.setStatus('current')
if mibBuilder.loadTexts: rsCmtsUpstreamQosMaxBps.setDescription('The maximum number of bits per second of upstream bandwidth that we will allot to modems which request a minimum upstream rate. We use this to control the amount of bandwidth oversubscription.')
rsCmtsModulationTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3), )
if mibBuilder.loadTexts: rsCmtsModulationTable.setStatus('current')
if mibBuilder.loadTexts: rsCmtsModulationTable.setDescription('Describes a modulation profile associated with one or more upstream channels.')
rsCmtsModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsModIndex"), (0, "DOCS-IF-MIB", "docsIfCmtsModIntervalUsageCode"))
if mibBuilder.loadTexts: rsCmtsModulationEntry.setStatus('current')
if mibBuilder.loadTexts: rsCmtsModulationEntry.setDescription('Describes a modulation profile for an Interval Usage Code for one or more upstream channels.')
rsCmtsModulationUWLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsCmtsModulationUWLength.setStatus('current')
if mibBuilder.loadTexts: rsCmtsModulationUWLength.setDescription('Length of unique word pattern, in bytes.')
rsCmtsModulationDetectWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsModulationDetectWindow.setStatus('current')
if mibBuilder.loadTexts: rsCmtsModulationDetectWindow.setDescription('Time window around a nominal detection time in which the unique window detector is enabled.')
rsCmtsModulationUWMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsModulationUWMismatch.setStatus('current')
if mibBuilder.loadTexts: rsCmtsModulationUWMismatch.setDescription('Specifies precision of match between unique word pattern and incoming burst by specifying the number of bits which are allowed to NOT match.')
rsCmtsModulationEQSymbols = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsModulationEQSymbols.setStatus('current')
if mibBuilder.loadTexts: rsCmtsModulationEQSymbols.setDescription('Equalizer training sequence length, in symbols.')
rsCmtsDownstreamTable = MibTable((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4), )
if mibBuilder.loadTexts: rsCmtsDownstreamTable.setStatus('current')
if mibBuilder.loadTexts: rsCmtsDownstreamTable.setDescription('CMTS Downstream table settable parameters.')
rsCmtsDownstreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rsCmtsDownstreamEntry.setStatus('current')
if mibBuilder.loadTexts: rsCmtsDownstreamEntry.setDescription('An entry containing objects describing attributes of each Downstream entry, extending the information in ifEntry.')
rsCmtsDownstreamState = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsDownstreamState.setStatus('current')
if mibBuilder.loadTexts: rsCmtsDownstreamState.setDescription('Indicates whether the downstream port is enabled.')
rsCmtsDownstreamModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 5567, 2, 11, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsCmtsDownstreamModulation.setStatus('current')
if mibBuilder.loadTexts: rsCmtsDownstreamModulation.setDescription('Indicates whether downstream modulation is turned on. When disabled, the downstream transmitter will output a CW, or tonal signal, at the tuned RF frequency.')
rsCmtsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6))
rsCmtsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 1))
rsCmtsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 2))
rsCmtsBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 1, 1)).setObjects(("RIVERSTONE-CMTS-MIB", "rsCmtsBaseBpduFilter"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseBpduFilterHits"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseNonIPFilter"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseNonIPFilterHits"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseMapLength"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseMapLeadTime"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseInitMaintLength"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBase3137Config1"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBase3137Config2"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseConcatenation"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseBpiHwAssist"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseGenericCmd"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseGenericCmdStatus"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseUccRetryInterval"), ("RIVERSTONE-CMTS-MIB", "rsCmtsBaseUccRetries"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamNominalRxPower"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamState"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamPolicing"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamRangeInterval"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamRangeRetryInterval"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamPowerThreshold"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamPowerAdjust"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamTimingAdjust"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamFreqencyAdjust"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamTXCoefficients"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamForceContinue"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamQosConfirm"), ("RIVERSTONE-CMTS-MIB", "rsCmtsUpstreamQosMaxBps"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationUWLength"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationDetectWindow"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationUWMismatch"), ("RIVERSTONE-CMTS-MIB", "rsCmtsModulationEQSymbols"), ("RIVERSTONE-CMTS-MIB", "rsCmtsDownstreamState"), ("RIVERSTONE-CMTS-MIB", "rsCmtsDownstreamModulation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsCmtsBaseGroup = rsCmtsBaseGroup.setStatus('current')
if mibBuilder.loadTexts: rsCmtsBaseGroup.setDescription('A collection of objects providing additional configuration and monitoring capabilites of Cable Modem Line Card parameters.')
rsCmtsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 11, 6, 2, 1)).setObjects(("RIVERSTONE-CMTS-MIB", "rsCmtsBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsCmtsMibCompliance = rsCmtsMibCompliance.setStatus('current')
if mibBuilder.loadTexts: rsCmtsMibCompliance.setDescription('The compliance statement for devices implementing Riverstone extended Cable Modem MIB.')
mibBuilder.exportSymbols("RIVERSTONE-CMTS-MIB", rsCmtsDownstreamTable=rsCmtsDownstreamTable, rsCmtsDownstreamState=rsCmtsDownstreamState, rsCmtsBaseNonIPFilter=rsCmtsBaseNonIPFilter, rsCmtsBaseTable=rsCmtsBaseTable, rsCmtsBaseGenericCmd=rsCmtsBaseGenericCmd, rsCmtsModulationUWMismatch=rsCmtsModulationUWMismatch, rsCmtsGroups=rsCmtsGroups, rsCmtsBaseGenericCmdStatus=rsCmtsBaseGenericCmdStatus, rsCmtsBaseMapLeadTime=rsCmtsBaseMapLeadTime, rsCmtsBase3137Config1=rsCmtsBase3137Config1, rsCmtsUpstreamTable=rsCmtsUpstreamTable, rsCmtsDownstreamEntry=rsCmtsDownstreamEntry, rsCmtsUpstreamNominalRxPower=rsCmtsUpstreamNominalRxPower, rsCmtsBaseBpduFilter=rsCmtsBaseBpduFilter, rsCmtsUpstreamPowerAdjust=rsCmtsUpstreamPowerAdjust, rsCmtsUpstreamForceContinue=rsCmtsUpstreamForceContinue, rsCmtsModulationTable=rsCmtsModulationTable, PYSNMP_MODULE_ID=rsCmtsMib, rsCmtsBaseMapLength=rsCmtsBaseMapLength, rsCmtsBaseBpiHwAssist=rsCmtsBaseBpiHwAssist, rsCmtsCompliances=rsCmtsCompliances, rsCmtsUpstreamTXCoefficients=rsCmtsUpstreamTXCoefficients, rsCmtsMib=rsCmtsMib, rsCmtsUpstreamPolicing=rsCmtsUpstreamPolicing, rsCmtsUpstreamRangeInterval=rsCmtsUpstreamRangeInterval, rsCmtsConformance=rsCmtsConformance, rsCmtsUpstreamQosConfirm=rsCmtsUpstreamQosConfirm, rsCmtsModulationUWLength=rsCmtsModulationUWLength, rsCmtsBaseGroup=rsCmtsBaseGroup, rsCmtsModulationEQSymbols=rsCmtsModulationEQSymbols, rsCmtsUpstreamTimingAdjust=rsCmtsUpstreamTimingAdjust, RsCmtsCmdStatus=RsCmtsCmdStatus, rsCmtsBaseNonIPFilterHits=rsCmtsBaseNonIPFilterHits, rsCmtsModulationDetectWindow=rsCmtsModulationDetectWindow, rsCmtsBaseConcatenation=rsCmtsBaseConcatenation, rsCmtsBaseUccRetryInterval=rsCmtsBaseUccRetryInterval, rsCmtsUpstreamPowerThreshold=rsCmtsUpstreamPowerThreshold, rsCmtsUpstreamQosMaxBps=rsCmtsUpstreamQosMaxBps, rsCmtsModulationEntry=rsCmtsModulationEntry, rsCmtsUpstreamFreqencyAdjust=rsCmtsUpstreamFreqencyAdjust, rsCmtsBaseUccRetries=rsCmtsBaseUccRetries, rsCmtsBaseEntry=rsCmtsBaseEntry, rsCmtsBaseInitMaintLength=rsCmtsBaseInitMaintLength, rsCmtsDownstreamModulation=rsCmtsDownstreamModulation, rsCmtsBaseBpduFilterHits=rsCmtsBaseBpduFilterHits, rsCmtsUpstreamEntry=rsCmtsUpstreamEntry, rsCmtsUpstreamRangeRetryInterval=rsCmtsUpstreamRangeRetryInterval, rsCmtsUpstreamState=rsCmtsUpstreamState, rsCmtsMibCompliance=rsCmtsMibCompliance, rsCmtsBase3137Config2=rsCmtsBase3137Config2)
