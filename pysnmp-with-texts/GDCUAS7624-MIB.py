#
# PySNMP MIB module GDCUAS7624-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCUAS7624-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, MibIdentifier, TimeTicks, ModuleIdentity, ObjectIdentity, IpAddress, Unsigned32, NotificationType, iso, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "IpAddress", "Unsigned32", "NotificationType", "iso", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
niudiu = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18))
uas7624System = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1))
uas7624 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2))
uas7624Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 1))
uas7624Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 2))
uas7624Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 3))
uas7624Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 4))
uas7624Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 5))
uas7624AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 1, 6))
uas7624MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624MIBversion.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624MIBversion.setDescription("Identifies the version of the MIB. The format of the version is x.yzT, where 'x' identifies the major revision number, 'y' identifies the minor revision number, 'z' identifies the typographical revision, and T identifies the test revision. Acceptable values for the individual revision components are as follows: x: 1 - 9 y: 0 - 9 z: 0 - 9 T: A - Z Upon formal release, no designation for the test revision will be present.")
uas7624VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2), )
if mibBuilder.loadTexts: uas7624VersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624VersionTable.setDescription('The 7624 version table ')
uas7624VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624VersionIndex"))
if mibBuilder.loadTexts: uas7624VersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624VersionEntry.setDescription('An entry in the GDC uas7624System Version Table.')
uas7624VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624VersionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624VersionIndex.setDescription('Integer value which uniquely identifies the uas7624 to which this entry is applicable. For entire table: SCinstance: [L]ine=5 [i]nterface=0')
uas7624FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624FirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624FirmwareRev.setDescription('The version number of the firmware, to allow products to know which revision is installed. The released version number is sequenced from --, A-, ... AA, ... ZZ.')
uas7624CardType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624CardType.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624CardType.setDescription('This variable is used to determine the type of card family installed ex. uas7624.')
uas7624BootRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624BootRev.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624BootRev.setDescription('The version number of the boot firmware, to allow products to know which revision is installed. The released version number is sequenced from --, A-, ... AA, ... ZZ. ')
uas7624MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1), )
if mibBuilder.loadTexts: uas7624MaintenanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624MaintenanceTable.setDescription('The table describes the maintenance objects for uas7624.')
uas7624MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624MaintenanceLineIndex"))
if mibBuilder.loadTexts: uas7624MaintenanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624MaintenanceEntry.setDescription('An entry in the GDC 7624 Maintenance Table.')
uas7624MaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624MaintenanceLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624MaintenanceLineIndex.setDescription("Integer value which uniquely identifies the uas7624 to which this entry is applicable. See DESCRIPTION's below for ranges.")
uas7624SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624SoftReset.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624SoftReset.setDescription('Supports the action of soft resetting the unit. When this object is set to reset(2), then the unit performs a soft reset, whose meaning is specific to the type of unit being managed. The value of norm(1) will be returned when the reset is complete. The value of norm(1) can not be set by management. SCinstance: [L]ine=1-5 [i]nterface=0')
uas7624DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624DefaultInit.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624DefaultInit.setDescription('This is used to allow the NonVolatile Configuration to be set to a factory default state. When this value is set to factoryDefault(2) the unit will perform a reset to make the default configuration take affect. The value of normal(1) will be returned when the initialization is complete. The value of normal(1) can not be set by management. SCinstance: [L]ine=1-5 [i]nterface=0')
uas7624ResetMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetMajorAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ResetMajorAlarm.setDescription(' This variable is used. SCinstance: [L]ine=1-4 [i]nterface=1-3')
uas7624ResetMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetMinorAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ResetMinorAlarm.setDescription(' This variable is used. SCinstance: [L]ine=1-4 [i]nterface=1-3')
uas7624ResetStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ResetStatistics.setDescription('This variable is used to reset the performance intervals. When it is set to reset, the performance tables and uas7624Valid intervals are reset to zero. The value of norm(1) can not be set by management. SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624StatLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624StatLastInitialized.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624StatLastInitialized.setDescription("The elapsed time since the statistics were last initialized. This will be zero'd when uas7624ResetStatistics is reset(2). SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0")
uas7624ValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624ValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 for the T1 interface and 16 for the loop interface unless the interface was brought on-line within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online. Note: The loop interface values are 1-16, T1 values are 1-96. SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624SysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624SysUpTime.setDescription('This variable is used to report the elapsed system tick time for conversion to real time at the controller and is not related to the sysUpTime referenced in MIB-II. Upon power-up of the unit, the elapsed time is cleared. The elapsed time counter rolls over upon reaching the maximum count. SCinstance: [L]ine=5 [i]nterface=0')
uas7624LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624LedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LedStatus.setDescription('Returns a bitwise snapshot of the front panel LED state. based on the Line: For SCinstance: [L]ine=1-4 [i]nterface=0 key --- 01 = SOLID GREEN Good Condition and in Sync 10 = SOLID RED Alarm State (no Current or no Sync) 11 = FLASHING GREEN Loop in Test 1.7 - n/a 1.6 - f/u 1.5 - 2^1 1.4 - 2^0 Loop 1 (01, 10, 11) 1.3 - f/u 1.2 - f/u 1.1 - 2^1 1.0 - 2^0 Loop 2 (01, 10, 11) 2.7 - f/u 2.6 - f/u 2.5 - f/u 2.4 - f/u 2.3 - 2^1 2.2 - 2^0 Loop 3 (01, 10, 11) 2.1 - f/u 2.0 - f/u For SCinstance: [L]ine=5 [i]nterface=0 1.7 - n/a 1.6 - f/u 1.5 - f/u 1.4 - f/u 1.3 - f/u 1.2 - f/u 1.1 - f/u 1.0 - f/u 2.7 - n/a 2.6 - f/u 2.5 - Network AIS 1:RED (Alarm Indication Signal) 2.4 - Network LVC 1:RED (Line Code Violation) 2.3 - Network LOS 1:RED (Loss Of Signal) 2.2 - Network OOF 1:RED (Out Of Frame) 2.1 - ALARM 1: FLASHING RED (AIS, LVC, LOS, or OOF) 2.0 - Test Mode 1: RED (in test mode) ')
uas7624AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624AlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AlarmStatus.setDescription('Returns a bit-wise Status of alarms with both masked and unmasked. For SCinstance: [L]ine=1-4 [i]nterface=0 1.7 - f/u 1.6 - Power-up 1.5 - f/u 1.4 - Loop 1 OOS 1.3 - Loop 1 Sealing Current Non-Continuity 1.2 - Loop 1 ES 1.1 - Loop 1 SES 1.0 - Loop 1 UAS 2.7 - f/u 2.6 - f/u 2.5 - f/u 2.4 - Loop 2 OOS 2.3 - Loop 2 Sealing Current Non-Continuity 2.2 - Loop 2 ES 2.1 - Loop 2 SES 2.0 - Loop 2 UAS 3.7 - f/u 3.6 - f/u 3.5 - f/u 3.4 - Loop 3 OOS 3.3 - Loop 3 Sealing Current Non-Continuity 3.2 - Loop 3 ES 3.1 - Loop 3 SES 3.0 - Loop 3 UAS 4.7 - f/u 4.6 - f/u 4.5 - Loop 1 Major 4.4 - Loop 1 Minor 4.3 - Loop 2 Major 4.2 - Loop 2 Minor 4.1 - Loop 3 Major 4.0 - Loop 3 Minor For SCinstance: [L]ine=5 [i]nterface=0 1.7 - f/u 1.6 - LOS 1.5 - LOF 1.4 - AIS 1.3 - f/u 1.2 - Received Yellow 1.1 - f/u 1.0 - f/u 2.7 - f/u 2.6 - LCV 2.5 - CRC 2.4 - f/u 2.3 - f/u 2.2 - f/u 2.1 - f/u 2.0 - f/u 3.7 - f/u 3.6 - f/u 3.5 - f/u 3.4 - f/u 3.3 - f/u 3.2 - f/u 3.1 - f/u 3.0 - f/u 4.7 - f/u 4.6 - ES 4.5 - BES 4.4 - SES 4.3 - UAS 4.2 - f/u 4.1 - f/u 4.0 - Power-up')
uas7624LoopState = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LoopState.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LoopState.setDescription('A setting of inhibit(1) stops operation on the loop and a setting of enable(2) starts operation on the loop. SCinstance: [L]ine=1-4 [i]nterface=1-3')
uas7624ConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardMode", 1), ("softMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624ConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ConfigMode.setDescription('This variable is used to report the mode, either soft or hard, of the the uas7624. If the unit is in hard mode then the options in the uas7624ConfigTable are read-only. If the unit is in soft mode then the options in the uas7624ConfigTable are read-write. SCinstance: [L]ine=5 [i]nterface=0')
uas7624ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1), )
if mibBuilder.loadTexts: uas7624ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ConfigTable.setDescription('The GDC Configuration table.')
uas7624ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624ConfigIndex"))
if mibBuilder.loadTexts: uas7624ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ConfigEntry.setDescription('The GDC Configuration table entry.')
uas7624ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624ConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ConfigIndex.setDescription('Integer value which uniquely identifies the uas7624 to which this entry is applicable. For entire table: SCinstance: [L]ine=5 [i]nterface=0')
uas7624NetworkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("dsx1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624NetworkInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624NetworkInterfaceType.setDescription('Sets the transmit range to DSX-1 short or DS-1 long ')
uas7624TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("recovered", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624TransmitClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624TransmitClockSource.setDescription('Sets the transmit clock source.')
uas7624PreEqualization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("feet130", 2), ("feet260", 3), ("feet390", 4), ("feet530", 5), ("feet655", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624PreEqualization.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624PreEqualization.setDescription('Pre-Equalization distance')
uas7624Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eSF", 1), ("d4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624Framing.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624Framing.setDescription('Set the framing for the interface. Abbreviations are as follows: eSF - Extended Super Frame d4 - Super Frame')
uas7624LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LineCoding.setDescription('Sets the line coding for the interface.')
uas7624LineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dB0", 1), ("dB75", 2), ("dB15", 3), ("dB22", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineBuildout.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LineBuildout.setDescription('Sets the line build out for the T1 interface.')
uas7624FDLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("aNSIT1403", 2), ("tR54016", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624FDLMode.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624FDLMode.setDescription('Sets the Facility Data Link Mode.')
uas7624Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibitloop", 1), ("payloadloop", 2), ("lineloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624Loopback.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624Loopback.setDescription('Sets the loopback type')
uas7624AISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AISLoopdown.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AISLoopdown.setDescription('Sets AIS unloop time where 4 = inhibit, 5 thru 60 = number of seconds')
uas7624LineBuildoutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineBuildoutMode.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LineBuildoutMode.setDescription('Sets the line build out mode for the T1 interface.')
uas7624FramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624FramingMode.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624FramingMode.setDescription('Set the framing mode.')
uas7624DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1), )
if mibBuilder.loadTexts: uas7624DiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624DiagTable.setDescription('The GDC 7624 Diagnostics table. Information in the entries of this table support diagnostics testing, both active testing via patterns, and passive testing via loopbacks.')
uas7624DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624DiagIndex"))
if mibBuilder.loadTexts: uas7624DiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624DiagEntry.setDescription('The GDC 7624 Diagnostics table entry.')
uas7624DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624DiagIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624DiagIndex.setDescription("Integer value which uniquely identifies the uas7624 to which this entry is applicable. See DESCRIPTION's below for ranges.")
uas7624DiagConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stopTest", 1), ("lineLoopback", 2), ("payloadLoopback", 3), ("digitalLoopback", 4), ("selfTest", 5), ("rdl", 6), ("rdlSelfTest", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624DiagConfig.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624DiagConfig.setDescription(' Selects test to run. (1) stops test. SCinstance: stopTest(1) [L]ine=1-5 [i]nterface=0-3 lineLoopback(2) [L]ine=5 [i]nterface=0 payloadLoopback(3) [L]ine=5 [i]nterface=0 digitalLoopback(4) [L]ine=1-4 [i]nterface=1-3 selfTest(5) [L]ine=1-4 [i]nterface=1-3 rdl(6) [L]ine=1-4 [i]nterface=1-3 rdlSelfTest(7) [L]ine=1-4 [i]nterface=1-3')
uas7624T1TestLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noLimit", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("testTime30Secs", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624T1TestLimit.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624T1TestLimit.setDescription('Selects the duration to run a T1 diagnostic test. The value(1) noLimit signifies that the test should run indefinitely until explicitly terminated. SCinstance: [L]ine=5 [i]nterface=0')
uas7624T1TestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("notInTest", 1), ("testInProgress", 2), ("testCompleted", 4), ("testCompletedNotInTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624T1TestExecutionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624T1TestExecutionStatus.setDescription('This variable reports the status of a T1 test. notInTest(1) indicates a test is not running. testInProgress(2) indicates that a test is currently running. testCompleted(4) indicates that a test has run and is completed. testCompletedNotInTest(5) indicates that a test has completed and it is no longer in test. SCinstance: [L]ine=5 [i]nterface=0')
uas7624T1TestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624T1TestExceptions.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624T1TestExceptions.setDescription('Indicates T1 test exceptions that have occurred that may affect interpretation of the test results. The value of this object is a sum. This sum initially take the value zero. Then, for each exception, the value associated with the exception is added to the sum. The exception values are: value exception 1 a timed test was preempted so the result cannot be viewed in relation to the test duration 2 the results overflowed so the result cannot be viewed as an absolute value 4 the test was performed while synchronization could not be performed so the result may not be accurate. SCinstance: [L]ine=5 [i]nterface=0')
uas7624TestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624TestResults.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624TestResults.setDescription('The results of the last T1 diagnostic test. This can be the current test running or the last completed test. Note that the interpretation of these results may be affected by the value of the uas7624TestExceptions object. This function reads the DIU self test results in bit errors. 2^20 SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624ResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ResetTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ResetTestResults.setDescription('Resets the diagnostic T1 or Loop error count. SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1))
uas7624NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 1))
uas7624DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 2))
uas7624PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 3))
uas7624LossOfSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 4))
uas7624LossOfFrameAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 5))
uas7624AisAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 6))
uas7624YellowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 7))
uas7624OutofSyncAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 8))
uas7624SealingCurrentNoContAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 9))
uas7624UASAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 10))
uas7624ESAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 11))
uas7624LineCodeViolationAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 12))
uas7624CRCAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 13))
uas7624BESAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 14))
uas7624SESAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 15))
uas7624MajorBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 16))
uas7624MinorBERAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 18, 2, 1, 17))
uas7624AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1), )
if mibBuilder.loadTexts: uas7624AlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AlarmConfigTable.setDescription('This table contains entries that configure Alarm reporting.')
uas7624AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624AlarmConfigIndex"), (0, "GDCUAS7624-MIB", "uas7624AlarmConfigIdentifier"))
if mibBuilder.loadTexts: uas7624AlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AlarmConfigEntry.setDescription('An entry in the uas7624 Alarm Configuration table.')
uas7624AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624AlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AlarmConfigIndex.setDescription('Integer value which uniquely identifies the uas7624 to which this entry is applicable. For this table: SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624AlarmConfigIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AlarmConfigIdentifier.setDescription('The unique alarm identifier assigned to this alarm type. The format of this identifier is an OBJECT IDENTIFIER that has the following format: {iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) gdc(498) xxx(x) alarm(z) yyy(y) where xxx(x) is the administratively assigned family object identifier (z) is the object identifier for alarms in the family defined MIB and yyy(y) is the administratively assigned alarm type identifier for this alarm.')
uas7624AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AlarmCountWindow.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AlarmCountWindow.setDescription('This variable sets/reads the alarm window. This window is used with the alarm threshold to determine how long the alarm should be active before reporting. Default: disabled(1)')
uas7624AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6), ("thres10E03", 7), ("thres10E04", 8), ("thres10E05", 9), ("thres10E06", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AlarmCountThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AlarmCountThreshold.setDescription('This function sets/reads the alarm threshold criteria. This threshold is used along with the the alarm window to determine the number of instances in a given time frame for an alarm to occur before the alarm is considered active. Default: thresGT1(1)')
uas7624LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2), )
if mibBuilder.loadTexts: uas7624LocalAlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LocalAlarmConfigTable.setDescription('The uas7624LocalAlarmConfigTable contains entries that configure alarm reporting to the alarm card.')
uas7624LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: uas7624LocalAlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LocalAlarmConfigEntry.setDescription('An entry in the GDC Local Alarm Configuration table.')
uas7624LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624LocalAlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LocalAlarmConfigIndex.setDescription("Integer value which uniquely identifies the uas7624 to which this entry is applicable. For this table: See DESCRIPTION's below for ranges.")
uas7624LOSLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LOSLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LOSLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624LOFLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LOFLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LOFLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624AISLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624AISLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624AISLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624YELLOWLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624YELLOWLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624YELLOWLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624LineCodeViolationLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624LineCodeViolationLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624LineCodeViolationLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624CRCLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624CRCLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624CRCLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624ESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624ESLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624ESLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624BESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624BESLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624BESLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624SESLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624SESLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624SESLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=5 [i]nterface=0')
uas7624UASLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624UASLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624UASLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624OutofSyncLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624OutofSyncLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624OutofSyncLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=1-4 [i]nterface=1-3')
uas7624NoSealingCurrentLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uas7624NoSealingCurrentLocal.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624NoSealingCurrentLocal.setDescription('Disables or enables the alarm on the Major buss or Minor Buss. SCinstance: [L]ine=1-4 [i]nterface=1-3')
uas7624CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3), )
if mibBuilder.loadTexts: uas7624CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624CurrentTable.setDescription('The uas7624 Current table contains various statistics being collected for the current 15 minute interval.')
uas7624CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624CurrentIndex"))
if mibBuilder.loadTexts: uas7624CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624CurrentEntry.setDescription('An entry in the uas7624 Current table.')
uas7624CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624CurrentIndex.setDescription('Integer value which uniquely identifies the uas7624 to which this entry is applicable. For this table: SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624CurrentStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624CurrentStat.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624CurrentStat.setDescription(' Returns a bitwise snapshot of the interval statistics. for [L]ine=1-4 [i]nterface=1-3 (SIZE (10)) Octet 1 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^1 bit 0 - 2^0 Loop ID Octet 2 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 3 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Errored Seconds Octet 4 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 5 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Severely Errored Seconds Octet 6 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Unavailable Seconds Octet 8 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 9 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 FEBE (Far End Block Error Count) OR, Returns a bitwise snapshot of the interval statistics. for [L]ine=5 [i]nterface=0 (SIZE (17)) Octet 1 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 1: New Interval Octet 2 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 3 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 4 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Errored Seconds Octet 5 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 6 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Severely Errored Seconds Octet 8 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 9 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Bursty Errored Seconds Octet 11 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 12 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 13 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Unavailable Seconds Octet 14 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 2^7 Octet 15 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Controlled Slip Seconds Octet 16 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 2^7 Octet 17 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Loss of Frame Count')
uas7624IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4), )
if mibBuilder.loadTexts: uas7624IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624IntervalTable.setDescription('The uas7624 Interval table contains various statistics collected by each Interface over the previous 24 hours of operation. For this table: SCinstance: [L]ine=1-4 [i]nterface=1-3 [I]nterval=1-15 [L]ine=5 [i]nterface=0 [I]nterval=1-96')
uas7624IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624IntervalIndex"), (0, "GDCUAS7624-MIB", "uas7624IntervalNumber"))
if mibBuilder.loadTexts: uas7624IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624IntervalEntry.setDescription('An entry in the DS1 Interval table.')
uas7624IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624IntervalIndex.setDescription('Integer value which uniquely identifies the uas7624 to which this entry is applicable.')
uas7624IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624IntervalNumber.setDescription('For the T1 interface: A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid). For the Loop interfaces: A number between 1 and 16.')
uas7624IntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624IntervalStat.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624IntervalStat.setDescription(' Returns a bitwise snapshot of the interval statistics. for [L]ine=1-4 [i]nterface=1-3 (SIZE (11)) Octet 1 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^1 bit 0 - 2^0 Loop ID Octet 2 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Interval Octet 3 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 4 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Errored Seconds Octet 5 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 6 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Severely Errored Seconds Octet 7 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 8 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Unavailable Seconds Octet 9 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 10 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 11 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 FEBE (Far End Block Error Count) OR, Returns a bitwise snapshot of the interval statistics. for [L]ine=5 [i]nterface=0 (SIZE (16)) Octet 1 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 2 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 3 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Errored Seconds Octet 4 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 5 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 6 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Severely Errored Seconds Octet 7 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 8 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 9 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Bursty Errored Seconds Octet 10 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 11 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 12 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Unavailable Seconds Octet 13 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 2^7 Octet 14 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Controlled Slip Seconds Octet 15 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 2^7 Octet 16 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Loss of Frame Count')
uas7624TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5), )
if mibBuilder.loadTexts: uas7624TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624TotalTable.setDescription('The DS1 Total table. 24 hour interval.')
uas7624TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624TotalIndex"))
if mibBuilder.loadTexts: uas7624TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624TotalEntry.setDescription('An entry in the DS1 Total table.')
uas7624TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624TotalIndex.setDescription('Integer value which uniquely identifies the uas7624 to which this entry is applicable. For this table: SCinstance: [L]ine=1-4 [i]nterface=1-3 [L]ine=5 [i]nterface=0')
uas7624TotalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624TotalStat.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624TotalStat.setDescription(' Returns a bitwise snapshot of the interval statistics. for [L]ine=1-4 [i]nterface=1-3 (SIZE (14)) Octet 1 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^1 bit 0 - 2^0 Loop ID Octet 2 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - >65535 bit 1 - 2^15 bit 0 - 2^14 Octet 3 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 4 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Errored Seconds Octet 5 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - >65535 bit 1 - 2^15 bit 0 - 2^14 Octet 6 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Severely Errored Seconds Octet 8 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - >65535 bit 1 - 2^15 bit 0 - 2^14 Octet 9 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Unavailable Seconds Octet 11 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^23 bit 1 - 2^22 bit 0 - 2^21 Octet 12 bit 7 - not used bit 6 - 2^20 bit 5 - 2^19 bit 4 - 2^18 bit 3 - 2^17 bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 13 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 14 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 FEBE (Far End Block Error Count) OR, Returns a bitwise snapshot of the interval statistics. for [L]ine=5 [i]nterface=0 (SIZE (17)) Octet 1 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 1: New Interval Octet 2 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 3 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 4 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Errored Seconds Octet 5 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 6 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Severely Errored Seconds Octet 8 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 9 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Bursty Errored Seconds Octet 11 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^15 bit 0 - 2^14 Octet 12 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 13 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Unavailable Seconds Octet 14 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 2^7 Octet 15 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Controlled Slip Seconds Octet 16 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - 2^7 Octet 17 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Loss of Frame Count')
uas7624Recent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6), )
if mibBuilder.loadTexts: uas7624Recent24HrTable.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624Recent24HrTable.setDescription('The Recent24Hr table. 4 hour interval')
uas7624Recent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6, 1), ).setIndexNames((0, "GDCUAS7624-MIB", "uas7624Recent24HrIndex"))
if mibBuilder.loadTexts: uas7624Recent24HrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624Recent24HrEntry.setDescription('An entry in the Recent24Hr table.')
uas7624Recent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624Recent24HrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624Recent24HrIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a For this table: SCinstance: [L]ine=1-4 [i]nterface=1-3')
uas7624Recent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 18, 1, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: uas7624Recent24HrStat.setStatus('mandatory')
if mibBuilder.loadTexts: uas7624Recent24HrStat.setDescription('Returns a bitwise snapshot of the interval statistics. Octet 1 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - future use bit 1 - 2^1 bit 0 - 2^0 Loop ID Octet 2 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - >65535 bit 1 - 2^15 bit 0 - 2^14 Octet 3 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 4 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Errored Seconds Octet 5 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - >65535 bit 1 - 2^15 bit 0 - 2^14 Octet 6 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Severely Errored Seconds Octet 8 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - >65535 bit 1 - 2^15 bit 0 - 2^14 Octet 9 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Unavailable Seconds Octet 11 bit 7 - not used bit 6 - future use bit 5 - future use bit 4 - future use bit 3 - future use bit 2 - 2^23 bit 1 - 2^22 bit 0 - 2^21 Octet 12 bit 7 - not used bit 6 - 2^20 bit 5 - 2^19 bit 4 - 2^18 bit 3 - 2^17 bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 13 bit 7 - not used bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 14 bit 7 - not used bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 FEBE (Far End Block Error Count)')
mibBuilder.exportSymbols("GDCUAS7624-MIB", uas7624SESLocal=uas7624SESLocal, uas7624TotalTable=uas7624TotalTable, uas7624CurrentEntry=uas7624CurrentEntry, uas7624ValidIntervals=uas7624ValidIntervals, uas7624LineCoding=uas7624LineCoding, uas7624LocalAlarmConfigIndex=uas7624LocalAlarmConfigIndex, uas7624T1TestExceptions=uas7624T1TestExceptions, uas7624CurrentStat=uas7624CurrentStat, uas7624AisAlm=uas7624AisAlm, uas7624MaintenanceLineIndex=uas7624MaintenanceLineIndex, uas7624NetworkInterfaceType=uas7624NetworkInterfaceType, uas7624FirmwareRev=uas7624FirmwareRev, uas7624LedStatus=uas7624LedStatus, uas7624T1TestExecutionStatus=uas7624T1TestExecutionStatus, uas7624LineCodeViolationLocal=uas7624LineCodeViolationLocal, uas7624LossOfSignalAlm=uas7624LossOfSignalAlm, uas7624PreEqualization=uas7624PreEqualization, uas7624IntervalEntry=uas7624IntervalEntry, uas7624AlarmConfigEntry=uas7624AlarmConfigEntry, uas7624OutofSyncLocal=uas7624OutofSyncLocal, uas7624VersionIndex=uas7624VersionIndex, uas7624T1TestLimit=uas7624T1TestLimit, uas7624CurrentIndex=uas7624CurrentIndex, uas7624FDLMode=uas7624FDLMode, uas7624CRCLocal=uas7624CRCLocal, uas7624ResetTestResults=uas7624ResetTestResults, uas7624LOFLocal=uas7624LOFLocal, uas7624MaintenanceEntry=uas7624MaintenanceEntry, uas7624IntervalStat=uas7624IntervalStat, uas7624DiagTable=uas7624DiagTable, uas7624TotalStat=uas7624TotalStat, uas7624AlarmStatus=uas7624AlarmStatus, uas7624Recent24HrIndex=uas7624Recent24HrIndex, uas7624YELLOWLocal=uas7624YELLOWLocal, uas7624ConfigMode=uas7624ConfigMode, uas7624NoResponseAlm=uas7624NoResponseAlm, uas7624AlarmConfigTable=uas7624AlarmConfigTable, uas7624NoSealingCurrentLocal=uas7624NoSealingCurrentLocal, gdc=gdc, uas7624SESAlm=uas7624SESAlm, uas7624=uas7624, uas7624LineBuildoutMode=uas7624LineBuildoutMode, uas7624ESLocal=uas7624ESLocal, uas7624DiagIndex=uas7624DiagIndex, uas7624Maintenance=uas7624Maintenance, uas7624Diagnostics=uas7624Diagnostics, uas7624MIBversion=uas7624MIBversion, uas7624CardType=uas7624CardType, uas7624MinorBERAlm=uas7624MinorBERAlm, uas7624ConfigIndex=uas7624ConfigIndex, uas7624LocalAlarmConfigEntry=uas7624LocalAlarmConfigEntry, uas7624Framing=uas7624Framing, uas7624AlarmCountThreshold=uas7624AlarmCountThreshold, uas7624CRCAlm=uas7624CRCAlm, uas7624AlarmCountWindow=uas7624AlarmCountWindow, uas7624Configuration=uas7624Configuration, uas7624Version=uas7624Version, uas7624ResetMajorAlarm=uas7624ResetMajorAlarm, niudiu=niudiu, uas7624IntervalIndex=uas7624IntervalIndex, uas7624LOSLocal=uas7624LOSLocal, uas7624SoftReset=uas7624SoftReset, uas7624ResetMinorAlarm=uas7624ResetMinorAlarm, uas7624TransmitClockSource=uas7624TransmitClockSource, uas7624System=uas7624System, uas7624AISLocal=uas7624AISLocal, uas7624YellowAlm=uas7624YellowAlm, uas7624Alarms=uas7624Alarms, uas7624DiagConfig=uas7624DiagConfig, uas7624BootRev=uas7624BootRev, uas7624VersionEntry=uas7624VersionEntry, uas7624UASLocal=uas7624UASLocal, uas7624Loopback=uas7624Loopback, uas7624AlarmConfigIdentifier=uas7624AlarmConfigIdentifier, uas7624OutofSyncAlm=uas7624OutofSyncAlm, uas7624PowerUpAlm=uas7624PowerUpAlm, uas7624DiagEntry=uas7624DiagEntry, uas7624DefaultInit=uas7624DefaultInit, uas7624AlarmConfig=uas7624AlarmConfig, uas7624TotalEntry=uas7624TotalEntry, uas7624Performance=uas7624Performance, uas7624TestResults=uas7624TestResults, uas7624SysUpTime=uas7624SysUpTime, uas7624IntervalTable=uas7624IntervalTable, uas7624MaintenanceTable=uas7624MaintenanceTable, uas7624Recent24HrStat=uas7624Recent24HrStat, uas7624IntervalNumber=uas7624IntervalNumber, uas7624LineCodeViolationAlm=uas7624LineCodeViolationAlm, uas7624TotalIndex=uas7624TotalIndex, uas7624MajorBERAlm=uas7624MajorBERAlm, uas7624ConfigEntry=uas7624ConfigEntry, uas7624ESAlm=uas7624ESAlm, uas7624LoopState=uas7624LoopState, uas7624ResetStatistics=uas7624ResetStatistics, uas7624Recent24HrEntry=uas7624Recent24HrEntry, uas7624Recent24HrTable=uas7624Recent24HrTable, uas7624LocalAlarmConfigTable=uas7624LocalAlarmConfigTable, uas7624ConfigTable=uas7624ConfigTable, uas7624AISLoopdown=uas7624AISLoopdown, uas7624CurrentTable=uas7624CurrentTable, uas7624LossOfFrameAlm=uas7624LossOfFrameAlm, uas7624FramingMode=uas7624FramingMode, uas7624StatLastInitialized=uas7624StatLastInitialized, uas7624DiagRxErrAlm=uas7624DiagRxErrAlm, uas7624SealingCurrentNoContAlm=uas7624SealingCurrentNoContAlm, uas7624UASAlm=uas7624UASAlm, uas7624VersionTable=uas7624VersionTable, uas7624BESAlm=uas7624BESAlm, uas7624BESLocal=uas7624BESLocal, uas7624LineBuildout=uas7624LineBuildout, uas7624AlarmConfigIndex=uas7624AlarmConfigIndex)
