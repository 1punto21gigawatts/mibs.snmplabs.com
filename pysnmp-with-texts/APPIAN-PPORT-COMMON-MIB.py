#
# PySNMP MIB module APPIAN-PPORT-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-COMMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acPport, AcAdminStatus, AcOpStatus, AcNodeId, AcSlotNumber, AcPortNumber = mibBuilder.importSymbols("APPIAN-SMI-MIB", "acPport", "AcAdminStatus", "AcOpStatus", "AcNodeId", "AcSlotNumber", "AcPortNumber")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, Integer32, IpAddress, NotificationType, iso, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "Integer32", "IpAddress", "NotificationType", "iso", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
acPportCommon = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1))
acPportCommon.setRevisions(('1900-03-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acPportCommon.setRevisionsDescriptions(('Engineering draft version, not for release.',))
if mibBuilder.loadTexts: acPportCommon.setLastUpdated('0003040000Z')
if mibBuilder.loadTexts: acPportCommon.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acPportCommon.setContactInfo('Douglas Theriault')
if mibBuilder.loadTexts: acPportCommon.setDescription('Appian physical port common MIB provides configuration information common to all physical interfaces.')
acInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1), )
if mibBuilder.loadTexts: acInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: acInterfaceTable.setDescription("A table which will map a physical ports instance ID with a subscriber and reseller along with the interface name and mapping to MIB-II's ifIndex value.")
acInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-COMMON-MIB", "acInterfaceNodeId"), (0, "APPIAN-PPORT-COMMON-MIB", "acInterfaceSlot"), (0, "APPIAN-PPORT-COMMON-MIB", "acInterfacePort"))
if mibBuilder.loadTexts: acInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: acInterfaceEntry.setDescription('A single row which identifies a physical interface.')
acInterfaceNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acInterfaceNodeId.setStatus('current')
if mibBuilder.loadTexts: acInterfaceNodeId.setDescription('A unique number assigned to this node within an Appian Ring.')
acInterfaceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acInterfaceSlot.setStatus('current')
if mibBuilder.loadTexts: acInterfaceSlot.setDescription('The physical slot number where this physical interface is located.')
acInterfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acInterfacePort.setStatus('current')
if mibBuilder.loadTexts: acInterfacePort.setDescription('The physical port number on the slot where this interface is located.')
acInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("enet", 1), ("ds1", 2), ("ds3", 3), ("sonet", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acInterfaceType.setStatus('current')
if mibBuilder.loadTexts: acInterfaceType.setDescription('The type of physical interface (port)')
acInterfaceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acInterfaceChannel.setStatus('current')
if mibBuilder.loadTexts: acInterfaceChannel.setDescription('If the physical interface can be channelized, this attribute is the channel associated with a specific subscriber and reseller.')
acInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: acInterfaceIfIndex.setDescription('The associated MIB-II IfIndex value which corresponds to this physical interface. The agent will calculate this value in a deterministic manner and is here as an easy means to map the heirarchical slot.port.channel index to a linear ifIndex value.')
acInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 7), AcAdminStatus().clone('inactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acInterfaceAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), inactivate(2) or delete(3). Refer to the Appian-SMI.mib file for additional information.')
acInterfaceOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 8), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceOpStatus.setStatus('current')
if mibBuilder.loadTexts: acInterfaceOpStatus.setDescription('The current operational status of this physical interface. Refer to the appian_smi.mib file for enumeration details.')
acInterfaceInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acInterfaceInterfaceName.setStatus('current')
if mibBuilder.loadTexts: acInterfaceInterfaceName.setDescription("A user defined name which is used to identify this physical interface. The string is in readable ASCII and can be up to 64 characters in length. This name is configured in each of the physical port interface MIB's and is a read-only attribute here.")
acInterfaceSubscriberId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acInterfaceSubscriberId.setStatus('current')
if mibBuilder.loadTexts: acInterfaceSubscriberId.setDescription('A unique number assigned by the EMS that uniquely identifies the subscriber who is using this physical interface.')
acInterfaceSubscriberName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acInterfaceSubscriberName.setStatus('current')
if mibBuilder.loadTexts: acInterfaceSubscriberName.setDescription('An ASCII string which represents the subscriber in a readable form. The string can be up to 64 characters in length.')
acInterfaceResellerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acInterfaceResellerId.setStatus('current')
if mibBuilder.loadTexts: acInterfaceResellerId.setDescription('A unique number assigned by the EMS that uniquely identifies the reseller for which service is supplied by this physical interface.')
acInterfaceResellerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acInterfaceResellerName.setStatus('current')
if mibBuilder.loadTexts: acInterfaceResellerName.setDescription('An ASCII string which represents the reseller in a readable form. The string can be up to 64 characters in length.')
mibBuilder.exportSymbols("APPIAN-PPORT-COMMON-MIB", acInterfaceType=acInterfaceType, acInterfaceResellerName=acInterfaceResellerName, acInterfaceSlot=acInterfaceSlot, acInterfaceTable=acInterfaceTable, acInterfaceEntry=acInterfaceEntry, acInterfaceOpStatus=acInterfaceOpStatus, acInterfaceIfIndex=acInterfaceIfIndex, acInterfaceResellerId=acInterfaceResellerId, acInterfaceSubscriberName=acInterfaceSubscriberName, acInterfaceNodeId=acInterfaceNodeId, acInterfaceSubscriberId=acInterfaceSubscriberId, PYSNMP_MODULE_ID=acPportCommon, acInterfaceInterfaceName=acInterfaceInterfaceName, acPportCommon=acPportCommon, acInterfaceAdminStatus=acInterfaceAdminStatus, acInterfaceChannel=acInterfaceChannel, acInterfacePort=acInterfacePort)
