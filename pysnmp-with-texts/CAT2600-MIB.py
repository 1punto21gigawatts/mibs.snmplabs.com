#
# PySNMP MIB module CAT2600-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CAT2600-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:47:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, iso, TimeTicks, Bits, ObjectIdentity, ModuleIdentity, IpAddress, Counter64, Unsigned32, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "TimeTicks", "Bits", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Counter64", "Unsigned32", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "NotificationType", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

cisco = MibIdentifier((1, 3, 6, 1, 4, 1, 9))
catProd = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1))
cat2600 = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111))
cat2600Ts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1))
cat2600TsObjectID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 1))
cat2600TsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2))
dtrMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 3))
dtrConcMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 3, 1))
dtrMacMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 3, 2))
cat2600TsMain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1))
cat2600TsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1))
cat2600TsSys = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2))
cat2600TsPort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2))
cat2600TsDmns = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3))
cat2600TsPipe = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 4))
cat2600TsFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5))
cat2600TsUFC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6))
cat2600TsSysObjectID = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 1, 1))
cat2600TsFwVer = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsFwVer.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFwVer.setDescription('The firmware version in the form major.minor. For port microcode (SOLO) version information see the mgmt.mib-2.interfaces.ifTable.ifEntry.ifDescr object.')
cat2600TsHwVer = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsHwVer.setDescription('The hardware version in the form major.minor.')
cat2600TsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsSerialNumber.setDescription('System serial number.')
cat2600TsInstallationDate = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsInstallationDate.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsInstallationDate.setDescription('Firmware installation date. This date is initially set by the Network Management station. Each time the NV RAM is cleared through the console this date needs to be set by the management station. This should be in the format YYYY MM DD HH MM SS.')
cat2600TsFwSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsFwSize.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFwSize.setDescription('Size in bytes of the binary firmware image.')
cat2600TsFwCRC = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsFwCRC.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFwCRC.setDescription('Firmware binary image CRC value.')
cat2600TsFwManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsFwManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFwManufacturer.setDescription('Firmware manufacturer.')
cat2600TsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsIpAddr.setDescription('IP address of the switch. Changes to this object take effect immediately.')
cat2600TsNetMask = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsNetMask.setDescription('IP subnet mask of the switch. Changes to this object take effect immediately.')
cat2600TsDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDefaultGateway.setDescription('IP default gateway used by the switch. Changes to this object take effect immediately.')
cat2600TsTrapRcvrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 14), )
if mibBuilder.loadTexts: cat2600TsTrapRcvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrapRcvrTable.setDescription('A table of managers to which to send traps. Entries in the table are saved across resets and power cycles.')
cat2600TsTrapRcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 14, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsTrapRcvrIndex"))
if mibBuilder.loadTexts: cat2600TsTrapRcvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrapRcvrEntry.setDescription('Definition of rows in the trap receiver table. The column cat2600TsTrapRcvrStatus is used to create and delete rows in the table. Creation requires a SET PDU with objects cat2600TsTrapRcvrStatus, cat2600TsTrapRcvrIpAddress, and cat2600TsTrapRcvrComm.')
cat2600TsTrapRcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsTrapRcvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrapRcvrIndex.setDescription('The index of the row in the table.')
cat2600TsTrapRcvrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsTrapRcvrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrapRcvrStatus.setDescription('Setting the value of this object to invalid(3) deletes the row from the table. The value invalid(3) should never be returned on a GET. Setting this value to create(4) causes a new row to be created if the row does not already exist. To create a new row set cat2600TsTrapRcvrStatus to create(4) and cat2600TsTrapRcvrIndex to the next available index ( cat2600TsTrapRcvrNext ). After successful creation of the new row, you can then set the desired values for cat2600TsTrapRcvrIpAddress and cat2600TsTrapRcvrComm. The value returned on GETs should be valid(2) or other(1), which is used to indicate any other condition.')
cat2600TsTrapRcvrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 14, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsTrapRcvrIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrapRcvrIpAddress.setDescription('IP address for an SNMP manager that is to receive the trap.')
cat2600TsTrapRcvrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsTrapRcvrComm.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrapRcvrComm.setDescription('Community string to use.')
cat2600TsTrapRcvrDmns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsTrapRcvrDmns.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrapRcvrDmns.setDescription("Domains on which traps to this target are sent. Each octet within the value of this object specifies a set of eight domains, with the first octet specifying domains 0 through 7, the second octet specifying domains 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered domain, and the least significant bit represents the highest numbered domain. Thus, each domain is represented by a single bit within the value of this object. If that bit has a value of '1' then that domain is included in the set of ports which will receive the trap; the domain is not included if its bit has a value of '0'.")
cat2600TsPingInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 19), Integer32().clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPingInterval.setDescription('This variable specifies the interval in seconds of sending ICMP Echo Requests to the default gateway. No PING packets will be sent if the value is set to 0. The default interval is 10 minutes.')
cat2600TsTapPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsTapPort.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTapPort.setDescription('Select the port to monitor traffic.')
cat2600TsTapMonitoredPort = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsTapMonitoredPort.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTapMonitoredPort.setDescription('Allows the selection of the port that will be monitored by the port selected by cat2600TsTapPort.')
cat2600TsCrcThresholdHi = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsCrcThresholdHi.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsCrcThresholdHi.setDescription('Threshold for the switch to change to store and forward mode. A change in mode also generates a trap.')
cat2600TsCrcThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsCrcThresholdLow.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsCrcThresholdLow.setDescription('Threshold for the switch to change to store and forward mode. A change in mode also generates a trap.')
cat2600TsPortSwitchModeChangeTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortSwitchModeChangeTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortSwitchModeChangeTrapEnable.setDescription('Enable or disable the trap sent out when the switching mode changes from cut-through to store and forward.')
cat2600TsTrendThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsTrendThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsTrendThreshold.setDescription('Based on trend calculation of the Dynamic Cut State algorithm, when this value is exceeded the port changes from cut-through to store and forward mode. The default value for this object is 8 events. The valid range is 1-100.')
cat2600TsSamplingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsSamplingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsSamplingPeriod.setDescription('Sampling period in minutes for determining if the error rate of CRC errors has been exceeded. The default value for this object is 10 minutes. The valid range is 1-120.')
cat2600TsNumberUFC = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsNumberUFC.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsNumberUFC.setDescription('The number of UFCs installed in the switch. A value of zero (or an SNMP error of NOSUCH) indicates there are NO UFCs installed in this switch. This value indicates the number of entries in the cat2600TsUFCTable.')
cat2600TsNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsNumPorts.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsNumPorts.setDescription("The maximum number of physical ports on the switch. This value includes all base ports plus all ports on any UFC cards. It does not include internally defined Bridge Relay Function ports or the CPU 'interface'.")
cat2600TsNumStations = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsNumStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsNumStations.setDescription('Aggregate number of currently active stations (nodes) on all ports on the switch.')
cat2600TsMostStations = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsMostStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsMostStations.setDescription('Highest aggregate number of stations ever active on all ports at one time, since the last reset or power cycle. This includes the default MAC address entries from each port.')
cat2600TsMaxStations = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsMaxStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsMaxStations.setDescription('Highest aggregate number of stations which the switch can support simultaneously.')
cat2600TsReset = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("hardReset", 2), ("softReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsReset.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsReset.setDescription('This object is used to reset the switch. Writing softReset(3) causes the switch to reset the hardware, run quick diagnostics, clear all counters, start switching, issue a warmstart trap, and then be able to respond to SNMP requests. Writing hardReset(2) causes the switch to run power up diagnostics and then execute a soft reset. Note: all address tables are cleared in both cases. The administrative parameters from nonvolatile memory are used to initialize the operational parameters. The value returned on GETs should be running(1).')
cat2600TsNumResets = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsNumResets.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsNumResets.setDescription('Number of soft resets the switch has executed since the last hard reset or power cycle. Soft resets are defined as writing softReset(3) to cat2600TsReset, pressing the front panel reset button, executing a soft reset from the console, or resets induced by the switch firmware.')
cat2600TsAddrAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsAddrAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsAddrAgingTime.setDescription('Number of minutes of inactivity before an address entity is aged out. A value of zero means no aging. Note: if an address shows up on another port, the original port to address assignment is automatically deleted. The value is saved across resets and power cycles. The default value for this object is 5 minutes.')
cat2600TsSysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("toohigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsSysTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsSysTemperature.setDescription('Temperature condition of the system. A change in this value generates a TRAP.')
cat2600TsInstalledMemory = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsInstalledMemory.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsInstalledMemory.setDescription('Total amount of CPU memory installed (in megabytes).')
cat2600TsSysCurTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsSysCurTime.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsSysCurTime.setDescription('Current time at the switch. To set the time use the format yyyy mm dd hh mm ss. All fields are required.')
cat2600TsPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1), )
if mibBuilder.loadTexts: cat2600TsPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortTable.setDescription('A table of information about each port. The number of rows is given by cat2600TsNumPorts. (This value refers to PHYSICAL ports as opposed to internal logical CRF bridge ports.)')
cat2600TsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsPortIndex"))
if mibBuilder.loadTexts: cat2600TsPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortEntry.setDescription('Definition of rows in the port table. The number of rows is determined by the hardware and is specified by the value of cat2600TsNumPorts. Rows can not be created or deleted via SNMP requests.')
cat2600TsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortIndex.setDescription('The ifIndex value corresponding to each port entry. For TR interfaces, the TsPortIndex corresponds to the Port Number or POE Index.')
cat2600TsPortRcvLocalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortRcvLocalFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortRcvLocalFrames.setDescription('Number of frames received where the destination is on this port.')
cat2600TsPortForwardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortForwardedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortForwardedFrames.setDescription('Number of frames received on this port and forwarded to another port or the system module for processing.')
cat2600TsPortMostStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortMostStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortMostStations.setDescription('Highest number of stations ever active at any time since the last reset of the switch as seen by this port. This includes the default MAC address entries for the port.')
cat2600TsPortMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortMaxStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortMaxStations.setDescription('Maximum number of stations which the port can support simultaneously.')
cat2600TsPortSWHandledFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortSWHandledFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortSWHandledFrames.setDescription('Number of Frames received on this port and delivered to the system module for processing.')
cat2600TsPortLocalStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortLocalStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortLocalStations.setDescription("Number of stations on this port's address table which belong to the segment attached to this port.")
cat2600TsPortRemoteStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortRemoteStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortRemoteStations.setDescription("Number of stations on this port's address table which belong to segments attached to other ports.")
cat2600TsPortUnknownStaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortUnknownStaFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortUnknownStaFrames.setDescription("Number of unicast frames received on this port and forwarded to the system module for processing because the source or destination station address is not in the port's forwarding table.")
cat2600TsPortResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortResetStats.setDescription('Setting this object to reset(3) causes all traffic counters for this port to be set to zero. Also the value of cat2600TsPortResetTimer is set to zero.')
cat2600TsPortResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortResetTimer.setDescription('Time (in 100th second ticks) since the port counters were reset.')
cat2600TsPortResetAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("running", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortResetAddrs.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortResetAddrs.setDescription('Setting this object to reset(3) clears all address table entries for this port as well as setting all port traffic counters to zero and setting cat2600TsPortResetTimer to zero.')
cat2600TsPortRcvBcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortRcvBcasts.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortRcvBcasts.setDescription('Number of Broadcast Frames received on this port without errors.')
cat2600TsPortSwitchedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortSwitchedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortSwitchedFrames.setDescription('Number of frames switched on this port')
cat2600TsPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortLinkState.setDescription('Link state of the port.')
cat2600TsPortHashOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortHashOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortHashOverflows.setDescription('Number of times a hash bucket was full when trying to add an entry to the port address table.')
cat2600TsPortAddrAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortAddrAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortAddrAgingTime.setDescription('Port level address aging time.')
cat2600TsPortSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("storeandforward", 1), ("cutthru", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortSwitchMode.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortSwitchMode.setDescription('Operational frame switching mode for the port. When in auto mode the port uses the Direct Cut algorithm to place the port in either cut-thru or store-and- forward mode. This object is equivalent to cPortProtocolCharFrameControlOption in the dtrMac MIB. However, this object defines an additional state -auto- not defined in that standard.')
cat2600TsPortFixedCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto-detect", 1), ("fixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortFixedCfg.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortFixedCfg.setDescription('Use fixed configuration or run auto detection to determine configuration. ')
cat2600TsPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adapter", 1), ("port", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortMode.setDescription('When read, this object indicates the Port Mode obtained by the auto-detect function. It is a valid read object only when TsPortFixedCfg is set to auto-detect(1) and TsPortLinkState indicates up(1). Write to this object when defining the Port Mode for a fixed configuration (TsPortFixedCfg set to fixed(2)). This object is equivalent to the dtrMac MIB object cPortProtocolCharOperationOption.')
cat2600TsPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half-duplex", 1), ("full-duplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortDuplex.setDescription("Version 1 MIB When read, this object indicates the Port Duplex state obtained by the auto-detect function. This object is a valid read object any time that TSPortLinkState indicates up(1) or when TsPortFixedCfg indicates fixed(2). Write to this object when defining the Port Duplex state for a fixed configuration (TsPortFixedCfg set to fixed(2)). Version 2 MIB This object is related to the dtrMac MIB objects cPortProtocolCharCurrentAccessProtocol and cPortProtocolCharAccessProtcolMask as defined in the following table: TsPortLinkState | TsPortFixedCfg | TsPortDuplex equivalent to: | | down | auto | CPortProtocolCharAccess | | ProtocolMask = X'0003' | | down | fixed | CPortProtocolCharAccess | | ProtocolMask = X'0001' or | | = X'0002' | | up | auto | cPortProtocolCharCurrent | | AccessProtocol | | up | fixed | cPortProtocolCharCurrent | | AccessProtocol.")
cat2600TsPortCfgLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortCfgLoss.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortCfgLoss.setDescription('Number of events as described in TsPortCfgLossRC after the port has completed the join process and then lost communication.')
cat2600TsPortCfgLossRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("wire-fault", 1), ("beacon-auto-removal", 2), ("force-remove-macaddr", 3), ("connection-lost", 4), ("adapter-check", 5), ("close-srb", 6), ("fdx-protocol-failure", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortCfgLossRC.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortCfgLossRC.setDescription('Reason code describing the cause of configuration loss.')
cat2600TsPortCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortCRCCount.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortCRCCount.setDescription('Number of frames received with CRC error. This object is equivalent to dot5StatsLineError and to the dtrMac MIB object txiStatsLineErrorCounter.')
cat2600TsPortHPChannelFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortHPChannelFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortHPChannelFrames.setDescription('Number of frames sent to the high priority channel of the particular Token-Ring port.')
cat2600TsPortLPChannelFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortLPChannelFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortLPChannelFrames.setDescription('Number of frames sent to the low priority channel of the particular Token-Ring port.')
cat2600TsPortHPThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortHPThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortHPThreshold.setDescription('Priority level at which frames are sent to the High priority channel.')
cat2600TsPortCfgRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-16megabit", 1), ("speed-4megabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortCfgRingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortCfgRingSpeed.setDescription('When read this object indicates the Port Ring Speed obtained by the RSA function. Write to this object when defining the Port Ring Speed for a fixed configuration (TsPortCfgRSA set to fixed(2)). When TsPortCfgRSA indicates fixed(2), this object is equivalent to the dtrMac MIB object cPortProtocolCharMediumRateOption and to dot5RingSpeed. Note that the syntax of these objects is different. For cPortProtocolCharMediumRateOption 1 indicates 4 Mb/s, while for TsPortCfgRingSpeed 1 indicates 16Mb/s. This object is a valid read object any time that TSPortLinkState indicates up(1)or when TsPortCfgRSA indicates fixed(2).')
cat2600TsPortCfgRSA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rsa", 1), ("fixed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortCfgRSA.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortCfgRSA.setDescription('User configured Ring Speed Adjust or fixed speed.')
cat2600TsPortDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortDomain.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortDomain.setDescription('Domain that the port belongs to.')
cat2600TsPortCfgLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortCfgLossThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortCfgLossThreshold.setDescription('Number of configuration loss events (described in TsPortCfgLossRC) during the sample period which, if exceeded, should cause the port to be disabled. If the port is disabled by this function the port must be manually re-enabled.')
cat2600TsPortCfgLossSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPortCfgLossSamplingPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortCfgLossSamplingPeriod.setDescription('The sampling period, in minutes, for which the port monitors to see if the configuration loss threshold has been exceeeded.')
cat2600TsPortBeaconStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 33), MacAddr())
if mibBuilder.loadTexts: cat2600TsPortBeaconStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortBeaconStationAddress.setDescription('MAC address of the Station last generating a beacon MAC frame. This information is present for the generation of a trap and should not be used to represent the health of the ring.')
cat2600TsPortBeaconNAUN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 34), MacAddr())
if mibBuilder.loadTexts: cat2600TsPortBeaconNAUN.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortBeaconNAUN.setDescription('MAC address of the NAUN station last generating a beacon MAC frame. This information is present for the generation of a trap and should not be used to represent the health of the ring.')
cat2600TsPortBeaconType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 1, 1, 35), Integer32())
if mibBuilder.loadTexts: cat2600TsPortBeaconType.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortBeaconType.setDescription("The type of Beacon which last occurred. Values are the same as for the Beacon Type subvector and are defined as follows: X'0001' Issued by a Dual Ring Station during reconfiguration X'0002' Signal Loss X'0003' Timer TCT expired during claim token; no claim token frames recieved X'0004' Timer TCT expired during claim token; claim token frames recieved X'0005' TXI Access Protocol; Heart Beat Protocol Failure ")
cat2600TsPortStnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3), )
if mibBuilder.loadTexts: cat2600TsPortStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnTable.setDescription('Port station table.')
cat2600TsPortStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsPortStnPortNum"), (0, "CAT2600-MIB", "cat2600TsPortStnAddress"))
if mibBuilder.loadTexts: cat2600TsPortStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnEntry.setDescription('Definition of rows in the port table. The number of rows is determined by the hardware and is specified by the value of cat2600TsNumPorts. Rows can not be created or deleted via SNMP requests.')
cat2600TsPortStnPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortStnPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnPortNum.setDescription('Port number corresponding to this entry.')
cat2600TsPortStnAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1, 2), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortStnAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnAddress.setDescription('Station MAC address. Equivalent to ifPhysAddr for this port.')
cat2600TsPortStnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortStnLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnLocation.setDescription('Where the station is located.')
cat2600TsPortStnSrcFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortStnSrcFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnSrcFrames.setDescription('Number of frames with this station as the source.')
cat2600TsPortStnSrcBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortStnSrcBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnSrcBytes.setDescription('Number of Bytes with this station as the source.')
cat2600TsPortStnDestnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortStnDestnFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnDestnFrames.setDescription('Number of frames with this station as the destination.')
cat2600TsPortStnDestnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPortStnDestnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPortStnDestnBytes.setDescription('Number of bytes with this station as the destination.')
cat2600TsOptPortStaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 2), )
if mibBuilder.loadTexts: cat2600TsOptPortStaTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptPortStaTable.setDescription("A table of station addresses known at an individual port. This table is designed to reduce the number of SNMP GETNEXT requests. This is done by packing many values into an octet string. (The maximum size frame should be used to return the result.) The instance returned for a GETNEXT is the value that identifies the last 'row' in the octet string. When the table is completely retrieved with one or more GETNEXTs, duplicate entries may be present, and entries may be skipped if the table is changing while being retrieved.")
cat2600TsOptPortStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 2, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsPortIndex"), (0, "CAT2600-MIB", "cat2600TsOptPortStaPos"))
if mibBuilder.loadTexts: cat2600TsOptPortStaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptPortStaEntry.setDescription('Definition of the rows in the optimized port station address table. Rows can not be created or deleted via SNMP requests.')
cat2600TsOptPortStaPos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsOptPortStaPos.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptPortStaPos.setDescription('Second index for items in the optimized port station address table.')
cat2600TsOptPortStaVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsOptPortStaVal.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptPortStaVal.setDescription('An OCTET STRING containing a multiple number of stations from a port station address table. Each entry is encoded in the following format: Station MAC address - 6 octets Location 1 - local 2 - remote - 1 octet Port of exit Mask - 4 octets Source Frame Count - 4 octets (integer in little endian) Destn Frame Count - 4 octets (integer in little endian) Source Byte Count - 4 octets (integer in little endian) Destn Byte Count - 4 octets (integer in little endian) The Port of exit mask is encoded in its raw form as stored in the switch. Octet 1 Bit position 7 6 5 4 3 2 1 0 Port Number 31 30 29 28 27 26 25 24 Octet 2 Bit position 7 6 5 4 3 2 1 0 Port Number 23 22 21 20 19 18 17 16 Octet 3 Bit position 7 6 5 4 3 2 1 0 Port Number 15 14 13 12 11 10 9 8 Octet 4 Bit position 7 6 5 4 3 2 1 0 Port Number 7 6 5 4 3 2 1 CPU ')
cat2600TsDmnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1), )
if mibBuilder.loadTexts: cat2600TsDmnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnTable.setDescription('Currently active domains on the switch.')
cat2600TsDmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsDmnIndex"))
if mibBuilder.loadTexts: cat2600TsDmnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnEntry.setDescription('Definition of each row in the domain Table')
cat2600TsDmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnIndex.setDescription('Domain number for each row.')
cat2600TsDmnPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDmnPorts.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnPorts.setDescription("The set of ports that belong to this Domain. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the TokenRing Switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'. Warning: You will not receive a set- complete message as a set to this object causes the ports to reset.")
cat2600TsDmnIpState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("auto-bootp", 2), ("always-bootp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDmnIpState.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnIpState.setDescription('IP configuration method for this domain.')
cat2600TsDmnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDmnIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnIpAddress.setDescription('The IP Address of this Domain. Changes to this object will take effect immediately.')
cat2600TsDmnIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDmnIpSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnIpSubnetMask.setDescription('The subnet mask for this domain. Changes to this object will take effect immediately.')
cat2600TsDmnIpDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDmnIpDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnIpDefaultGateway.setDescription('The IP Address of the default gateway for this Domain. Changes to this object will take effect immediately.')
cat2600TsDmnStp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDmnStp.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnStp.setDescription('Turn Spanning tree on or off. Changes to this object will take effect immediately. The Spanning Tree Objects themselves are in the dtrConc MIB.')
cat2600TsDmnName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsDmnName.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnName.setDescription('User assigned name for each domain.')
cat2600TsDmnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnIfIndex.setDescription('The ifIndex of the interface entry corresponding to each configured domain.')
cat2600TsDmnBaseBridgeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 10), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnBaseBridgeAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnBaseBridgeAddr.setDescription("Base MAC address of this domain. Internally equivalent to dtrCRFMacAddress and to ifPhysAddress of the 'Domain' port.")
cat2600TsDmnNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnNumStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnNumStations.setDescription('Aggregate number of currently active stations (nodes) on all ports in the domain.')
cat2600TsDmnMostStations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnMostStations.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnMostStations.setDescription('Highest aggregate number of stations ever active on all ports at one time, since the last reset or power cycle.')
cat2600TsDmnStationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 5), )
if mibBuilder.loadTexts: cat2600TsDmnStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnStationTable.setDescription('Stations seen in each domain.')
cat2600TsDmnStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 5, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsDmnIndex"), (0, "CAT2600-MIB", "cat2600TsDmnStationAddress"))
if mibBuilder.loadTexts: cat2600TsDmnStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnStationEntry.setDescription('Definition of each row in the domain specific station table. The object is equivalent to dtrFdbDynamicAddrTable or dtrFdbStaticAddrTable depending if the entry is learned or is a configured filter.')
cat2600TsDmnStationDmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnStationDmnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnStationDmnIndex.setDescription('Integer reference to the domain number in the domain table.')
cat2600TsDmnStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnStationAddress.setDescription("The Station's MAC address.")
cat2600TsDmnStationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnStationPort.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnStationPort.setDescription('The source port for the Station. The dtrConc MIB equivalents are dtrFdbDynamicAddrPortNumber and dtrFdbStaticAddrPortNumber.')
cat2600TsDmnStationTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsDmnStationTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsDmnStationTraffic.setDescription('A bit string that identifies the ports that this station has generated traffic to or from. The bits correspond to ports, with bits and ports numbered from right to left so that bit 0 represents the CPU, bit 1 represents port 1, and so forth. For example, the returned string 01 4D can be expanded to: 00000001 01001101 binary representation of object string xxxxxxx8 7654321C ports corresponding to bits This indicates ports 8, 6, 3, 2 and the CPU. The size of this string is adjusted to include all ports with traffic.')
cat2600TsOptDmnStaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 6), )
if mibBuilder.loadTexts: cat2600TsOptDmnStaTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptDmnStaTable.setDescription("A table of station addresses known at an individual port. This table is designed to reduce the number of SNMP GETNEXT requests. This is done by packing many values into an octet string. (The maximum size frame should be used to return the result.) The instance returned for a GETNEXT is the value that identifies the last 'row' in the octet string. When the table is completely retrieved with one or more GETNEXTs, duplicate entries may be present, and entries may be skipped if the table is changing while being retrieved.")
cat2600TsOptDmnStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 6, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsDmnStationDmnIndex"), (0, "CAT2600-MIB", "cat2600TsOptDmnStaPos"))
if mibBuilder.loadTexts: cat2600TsOptDmnStaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptDmnStaEntry.setDescription('Definition of the rows in the optimized domain station address table. Rows can not be created or deleted via SNMP requests.')
cat2600TsOptDmnStaPos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsOptDmnStaPos.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptDmnStaPos.setDescription('Second index for items in the optimized port station address table.')
cat2600TsOptDmnStaVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 3, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsOptDmnStaVal.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsOptDmnStaVal.setDescription('An OCTET STRING containing a multiple number of stations from the domain station address table. Each entry is encoded in the following format: Station MAC address - 6 octets Port of Entry - 1 octet Traffic Mask - 4 octets The traffic mask is encoded in its raw form as stored in the switch. Octet 1 Bit position 7 6 5 4 3 2 1 0 Port Number 31 30 29 28 27 26 25 24 Octet 2 Bit position 7 6 5 4 3 2 1 0 Port Number 23 22 21 20 19 18 17 16 Octet 3 Bit position 7 6 5 4 3 2 1 0 Port Number 15 14 13 12 11 10 9 8 Octet 4 Bit position 7 6 5 4 3 2 1 0 Port Number 7 6 5 4 3 2 1 CPU ')
cat2600TsPipeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 4, 1), )
if mibBuilder.loadTexts: cat2600TsPipeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPipeTable.setDescription('The TokenPipe table.')
cat2600TsPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 4, 1, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsPipeNumber"))
if mibBuilder.loadTexts: cat2600TsPipeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPipeEntry.setDescription('Definition of each row in the TokenPipe table.')
cat2600TsPipeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsPipeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPipeNumber.setDescription('The TokenPipe number for this row.')
cat2600TsPipePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsPipePorts.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsPipePorts.setDescription("The set of ports in this switch which are active in this Pipe. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16 (if available), etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the NWays LAN Switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.")
cat2600TsFilterTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5, 1), )
if mibBuilder.loadTexts: cat2600TsFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFilterTable.setDescription('Filters set up in the switch.')
cat2600TsFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5, 1, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsFilterStationAddress"), (0, "CAT2600-MIB", "cat2600TsFilterType"))
if mibBuilder.loadTexts: cat2600TsFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFilterEntry.setDescription('Definition of each row in the filter table.')
cat2600TsFilterStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5, 1, 1, 1), MacAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsFilterStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFilterStationAddress.setDescription("The MAC address in a frame to which this entry's filtering information applies.")
cat2600TsFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source-filter", 1), ("destination-filter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFilterType.setDescription('There are two types of filters (i) source filters which act on the source address portion of a packet and (ii) destination filters which act on the destination address portion of a packet.')
cat2600TsFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFilterStatus.setDescription('This object indicates the status of this entry. valid(1) - this entry is currently in use and will remain so after the next reset of the bridge. invalid(2) - writing this value to the object removes the corresponding entry.')
cat2600TsFilterPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsFilterPorts.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFilterPorts.setDescription("The set of ports to which this filter is applied. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the TokenRing Switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'. All frames with destination address equal to the station address corresponding to this entry and entering from any of the specified ports will be dropped. Setting this object with a MIB instance corresponding to the dotted decimal MAC address and a filter type, with the set value equal to the mask of ports you want to filter will create an entry in the table. Ex. MIB instance: 16.0.90.3.0.36.1 SNMP set value: 7F 00 00 00 This would create a filter entry with the following characteristics: MAC Address: 10 00 5A 03 00 24 (canonical format) Filter Type: source-filter Filter Ports: 2 3 4 5 6 7 8")
cat2600TsFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsFilterMask.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsFilterMask.setDescription("The filter mask for this station. The semantics of the filter mask depend on the type of filter. For a source filter, the mask gives the ports that are allowed to receive frames from the filtered address. For a destination filter, the mask gives the ports that are forced to receive frames destined to the filtered address. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16 (if available), etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the switch is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.")
cat2600TsUFCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1), )
if mibBuilder.loadTexts: cat2600TsUFCTable.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCTable.setDescription('A table of the installed UFC cards in the switch. The number of entries in the table is given by cat2600TsNumberofUFCs.')
cat2600TsUFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1), ).setIndexNames((0, "CAT2600-MIB", "cat2600TsUFCSlotNum"))
if mibBuilder.loadTexts: cat2600TsUFCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCEntry.setDescription('The objects contained in the UFC table.')
cat2600TsUFCSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCSlotNum.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCSlotNum.setDescription('The number of the slot in which the UFC is installed.')
cat2600TsUFCNumPhysIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCNumPhysIfs.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCNumPhysIfs.setDescription('The total number of physical network interfaces on the UFC. This count does not include the interface _OF_ the card or any logical interfaces which be _ON_ the card.')
cat2600TsUFCManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCManufacturer.setDescription('Firmware manufacturer.')
cat2600TsUFCType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCType.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCType.setDescription('The code representing what type of UFC is present. UFC codes are assigned by Cisco.')
cat2600TsUFCTypeDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCTypeDesc.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCTypeDesc.setDescription('A text string describing what type of UFC is present.')
cat2600TsUFCHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCHwVer.setDescription('The hardware version in the form major.minor.')
cat2600TsUFCFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCFwVer.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCFwVer.setDescription('The firmware version in the form major.minor.')
cat2600TsUFCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cat2600TsUFCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCStatus.setDescription('The operational status of the UFC.')
cat2600TsUFCReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 1, 111, 1, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("hardReset", 2), ("softReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cat2600TsUFCReset.setStatus('mandatory')
if mibBuilder.loadTexts: cat2600TsUFCReset.setDescription('The object is used to reset a UFC. Writing a softReset(3) causes the switch to reset the hardware, run the minimum number of diagnostics, and clear all counters. Writing hardReset(2) causes the UFC to run power up diagnostics and then execute a softreset.')
mibBuilder.exportSymbols("CAT2600-MIB", cat2600TsOptPortStaTable=cat2600TsOptPortStaTable, dtrMacMIB=dtrMacMIB, cat2600TsTrapRcvrEntry=cat2600TsTrapRcvrEntry, cat2600TsDmnPorts=cat2600TsDmnPorts, cat2600TsDmnMostStations=cat2600TsDmnMostStations, cat2600TsPipeNumber=cat2600TsPipeNumber, cat2600TsFilterTable=cat2600TsFilterTable, cat2600TsPipePorts=cat2600TsPipePorts, cat2600TsPortResetStats=cat2600TsPortResetStats, cat2600TsPortHPChannelFrames=cat2600TsPortHPChannelFrames, cat2600TsDmnStationTraffic=cat2600TsDmnStationTraffic, cat2600TsPortSWHandledFrames=cat2600TsPortSWHandledFrames, cat2600TsInstalledMemory=cat2600TsInstalledMemory, cat2600TsUFCTable=cat2600TsUFCTable, cat2600TsOptPortStaVal=cat2600TsOptPortStaVal, cat2600TsTapPort=cat2600TsTapPort, cat2600TsUFCStatus=cat2600TsUFCStatus, cat2600TsPortAddrAgingTime=cat2600TsPortAddrAgingTime, cat2600TsPortStnAddress=cat2600TsPortStnAddress, cat2600TsDmnStationPort=cat2600TsDmnStationPort, cat2600TsPortMode=cat2600TsPortMode, cat2600TsDmnIpState=cat2600TsDmnIpState, cat2600TsUFCReset=cat2600TsUFCReset, cat2600TsPingInterval=cat2600TsPingInterval, cat2600TsUFC=cat2600TsUFC, cat2600TsPortCfgLossThreshold=cat2600TsPortCfgLossThreshold, cat2600TsDmnEntry=cat2600TsDmnEntry, cat2600TsUFCEntry=cat2600TsUFCEntry, cat2600TsTrapRcvrIndex=cat2600TsTrapRcvrIndex, cat2600TsUFCTypeDesc=cat2600TsUFCTypeDesc, cisco=cisco, cat2600TsUFCSlotNum=cat2600TsUFCSlotNum, cat2600TsMaxStations=cat2600TsMaxStations, cat2600TsObjectID=cat2600TsObjectID, cat2600TsPortIndex=cat2600TsPortIndex, cat2600TsDmnIndex=cat2600TsDmnIndex, cat2600TsDmnIpSubnetMask=cat2600TsDmnIpSubnetMask, cat2600TsSamplingPeriod=cat2600TsSamplingPeriod, cat2600TsPort=cat2600TsPort, cat2600TsOptPortStaPos=cat2600TsOptPortStaPos, cat2600TsMostStations=cat2600TsMostStations, cat2600TsOptDmnStaTable=cat2600TsOptDmnStaTable, cat2600TsCrcThresholdLow=cat2600TsCrcThresholdLow, cat2600TsPortStnTable=cat2600TsPortStnTable, cat2600TsPortMostStations=cat2600TsPortMostStations, cat2600TsConfig=cat2600TsConfig, cat2600TsDmnIfIndex=cat2600TsDmnIfIndex, cat2600TsPipeTable=cat2600TsPipeTable, cat2600TsPipeEntry=cat2600TsPipeEntry, cat2600TsSysCurTime=cat2600TsSysCurTime, cat2600TsDmnStationAddress=cat2600TsDmnStationAddress, cat2600TsFwSize=cat2600TsFwSize, cat2600TsFilterMask=cat2600TsFilterMask, cat2600TsPortTable=cat2600TsPortTable, cat2600TsPortCfgLossRC=cat2600TsPortCfgLossRC, cat2600TsTrapRcvrDmns=cat2600TsTrapRcvrDmns, cat2600TsSys=cat2600TsSys, cat2600TsPortLinkState=cat2600TsPortLinkState, cat2600TsTrapRcvrIpAddress=cat2600TsTrapRcvrIpAddress, cat2600TsDmns=cat2600TsDmns, cat2600TsPortStnSrcFrames=cat2600TsPortStnSrcFrames, cat2600TsPortFixedCfg=cat2600TsPortFixedCfg, cat2600TsUFCHwVer=cat2600TsUFCHwVer, cat2600TsOptPortStaEntry=cat2600TsOptPortStaEntry, cat2600TsDmnStationEntry=cat2600TsDmnStationEntry, cat2600TsPortStnPortNum=cat2600TsPortStnPortNum, cat2600TsNumPorts=cat2600TsNumPorts, cat2600TsSysTemperature=cat2600TsSysTemperature, catProd=catProd, cat2600TsFwVer=cat2600TsFwVer, cat2600TsPortCfgRingSpeed=cat2600TsPortCfgRingSpeed, cat2600TsAddrAgingTime=cat2600TsAddrAgingTime, cat2600TsDmnBaseBridgeAddr=cat2600TsDmnBaseBridgeAddr, cat2600TsOptDmnStaEntry=cat2600TsOptDmnStaEntry, cat2600TsPortRcvLocalFrames=cat2600TsPortRcvLocalFrames, cat2600TsTrapRcvrTable=cat2600TsTrapRcvrTable, cat2600TsDmnName=cat2600TsDmnName, cat2600TsTrapRcvrStatus=cat2600TsTrapRcvrStatus, cat2600TsFilterStationAddress=cat2600TsFilterStationAddress, cat2600TsNetMask=cat2600TsNetMask, cat2600TsPortEntry=cat2600TsPortEntry, MacAddr=MacAddr, cat2600TsDmnIpAddress=cat2600TsDmnIpAddress, cat2600TsDmnStp=cat2600TsDmnStp, cat2600TsDmnTable=cat2600TsDmnTable, cat2600TsPortLocalStations=cat2600TsPortLocalStations, cat2600TsUFCType=cat2600TsUFCType, cat2600TsUFCFwVer=cat2600TsUFCFwVer, cat2600TsFilter=cat2600TsFilter, cat2600TsPortBeaconNAUN=cat2600TsPortBeaconNAUN, cat2600TsFilterStatus=cat2600TsFilterStatus, cat2600TsPortBeaconStationAddress=cat2600TsPortBeaconStationAddress, cat2600TsNumResets=cat2600TsNumResets, cat2600TsPortResetTimer=cat2600TsPortResetTimer, cat2600TsPortHashOverflows=cat2600TsPortHashOverflows, cat2600TsObjects=cat2600TsObjects, cat2600TsReset=cat2600TsReset, cat2600TsSysObjectID=cat2600TsSysObjectID, cat2600TsPortSwitchedFrames=cat2600TsPortSwitchedFrames, cat2600TsDefaultGateway=cat2600TsDefaultGateway, cat2600TsPortCfgLoss=cat2600TsPortCfgLoss, dtrMIBs=dtrMIBs, cat2600TsDmnIpDefaultGateway=cat2600TsDmnIpDefaultGateway, cat2600TsTrapRcvrComm=cat2600TsTrapRcvrComm, dtrConcMIB=dtrConcMIB, cat2600TsIpAddr=cat2600TsIpAddr, cat2600=cat2600, cat2600TsNumStations=cat2600TsNumStations, cat2600TsPortRemoteStations=cat2600TsPortRemoteStations, cat2600TsFilterType=cat2600TsFilterType, cat2600TsFwCRC=cat2600TsFwCRC, cat2600TsOptDmnStaPos=cat2600TsOptDmnStaPos, cat2600TsPortBeaconType=cat2600TsPortBeaconType, cat2600TsPortMaxStations=cat2600TsPortMaxStations, cat2600TsPortSwitchMode=cat2600TsPortSwitchMode, cat2600TsPortRcvBcasts=cat2600TsPortRcvBcasts, cat2600TsPortCfgLossSamplingPeriod=cat2600TsPortCfgLossSamplingPeriod, cat2600TsPortCRCCount=cat2600TsPortCRCCount, cat2600TsDmnNumStations=cat2600TsDmnNumStations, cat2600TsPortCfgRSA=cat2600TsPortCfgRSA, cat2600TsNumberUFC=cat2600TsNumberUFC, cat2600TsFilterEntry=cat2600TsFilterEntry, cat2600TsPortDomain=cat2600TsPortDomain, cat2600TsPortUnknownStaFrames=cat2600TsPortUnknownStaFrames, cat2600Ts=cat2600Ts, cat2600TsMain=cat2600TsMain, cat2600TsPortResetAddrs=cat2600TsPortResetAddrs, cat2600TsPortHPThreshold=cat2600TsPortHPThreshold, cat2600TsFilterPorts=cat2600TsFilterPorts, cat2600TsCrcThresholdHi=cat2600TsCrcThresholdHi, cat2600TsPortForwardedFrames=cat2600TsPortForwardedFrames, cat2600TsPortStnDestnBytes=cat2600TsPortStnDestnBytes, cat2600TsPortStnLocation=cat2600TsPortStnLocation, cat2600TsOptDmnStaVal=cat2600TsOptDmnStaVal, cat2600TsPortDuplex=cat2600TsPortDuplex, cat2600TsPortLPChannelFrames=cat2600TsPortLPChannelFrames, cat2600TsUFCManufacturer=cat2600TsUFCManufacturer, cat2600TsHwVer=cat2600TsHwVer, cat2600TsPortStnDestnFrames=cat2600TsPortStnDestnFrames, cat2600TsSerialNumber=cat2600TsSerialNumber, cat2600TsDmnStationDmnIndex=cat2600TsDmnStationDmnIndex, cat2600TsTrendThreshold=cat2600TsTrendThreshold, cat2600TsPipe=cat2600TsPipe, cat2600TsInstallationDate=cat2600TsInstallationDate, cat2600TsPortStnEntry=cat2600TsPortStnEntry, cat2600TsTapMonitoredPort=cat2600TsTapMonitoredPort, cat2600TsFwManufacturer=cat2600TsFwManufacturer, cat2600TsUFCNumPhysIfs=cat2600TsUFCNumPhysIfs, cat2600TsDmnStationTable=cat2600TsDmnStationTable, cat2600TsPortStnSrcBytes=cat2600TsPortStnSrcBytes, cat2600TsPortSwitchModeChangeTrapEnable=cat2600TsPortSwitchModeChangeTrapEnable)
