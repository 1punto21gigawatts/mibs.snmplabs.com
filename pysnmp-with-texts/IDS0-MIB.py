#
# PySNMP MIB module IDS0-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IDS0-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:51:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, iso, Bits, NotificationType, Counter32, Integer32, Unsigned32, experimental, Gauge32, enterprises, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "iso", "Bits", "NotificationType", "Counter32", "Integer32", "Unsigned32", "experimental", "Gauge32", "enterprises", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
ids0 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 16))
ids0CfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 1), )
if mibBuilder.loadTexts: ids0CfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgTable.setDescription('A table of operator definable parameters for each DS0')
ids0CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1), ).setIndexNames((0, "IDS0-MIB", "ids0CfgDs1Index"), (0, "IDS0-MIB", "ids0CfgDs0Index"))
if mibBuilder.loadTexts: ids0CfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgEntry.setDescription('There is one DS0 Configure entry for each DS0 timeslot in the chassis')
ids0CfgDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CfgDs1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgDs1Index.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value of ds0CfgDs1Index matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
ids0CfgDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CfgDs0Index.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgDs0Index.setDescription('The index value which uniquely identifies the timeslot of the CSU to which this entry refers.')
ids0CfgDs0Id = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0Id.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgDs0Id.setDescription('An operator definable string useful for easy identification of a DS0 relative to the user application.')
ids0CfgBlockCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("blockNone", 2), ("blockAnalog", 3), ("blockDigital", 4), ("blockAll", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgBlockCallType.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgBlockCallType.setDescription('An oject that defines the type of calls to be blocked by the specified DS0. A value of blockAll(5) results in all calls to this DS0 being blocked. Default = blockNone(2).')
ids0CfgDs0AssignedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0AssignedSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgDs0AssignedSlot.setDescription('Defines which slot (1 thru 16) the specified DS0 is restricted to connect with. A value of 17 indicates that this DS0 is not restricted. If a value of 0 is returned, it it indicatesthat this NAC does not support the definition of this object. Default = 17.')
ids0CfgDs0AssignedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0AssignedChannel.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgDs0AssignedChannel.setDescription('Defines which channel of a modem the specified DS0 is restricted to connect with. A value of 33 indicates that this DS0 is not restricted. If a value of 0 is returned, it it indicatesthat this NAC does not support the definition of this object. Default = 33.')
ids0CfgDs0SrvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("inService", 2), ("localOutOfService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgDs0SrvcState.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgDs0SrvcState.setDescription('Defines the service state of a specified DS0. This object does not apply to Rob Bit T1 operation. Default = inService(2).')
ids0CfgNailUpDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("transparent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CfgNailUpDs0.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CfgNailUpDs0.setDescription('This will put a DS0 in either a normal or a Transparent mode. Normal Mode : This is a normal ds0. Transparent Mode : This provides clear ds0 channels to pass data between the T1-PRI NAC and modems.')
ids0StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 2), )
if mibBuilder.loadTexts: ids0StatTable.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatTable.setDescription("USR's DS0 Status table contains various timeslot status information.")
ids0StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1), ).setIndexNames((0, "IDS0-MIB", "ids0StatDs1Index"), (0, "IDS0-MIB", "ids0StatDs0Index"))
if mibBuilder.loadTexts: ids0StatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatEntry.setDescription('There is one entry in the DS0 Status table for each timeslot in the chassis.')
ids0StatDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatDs1Index.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value of ds0StatDs1Index matches the value of the index for the coresponding DS1 entity in the entity table of the chassis MIB.')
ids0StatDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs0Index.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatDs0Index.setDescription('The index value which uniquely identifies the timeslot of the CSU to which this entry refers. The value of ds0StatDs0Index matches the value of the index for the corresponding DS0 entity in the entity table of the chassis MIB.')
ids0StatDs0 = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("dialingIn", 3), ("dialingOut", 4), ("connectedIn", 5), ("connectedOut", 6), ("ds0CallDisc", 22), ("ds0IsDchan", 23), ("ds0OutOfServ", 24), ("ds0InMaint", 25), ("ds0IsFchan", 26), ("ds0LclOutOfService", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs0.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatDs0.setDescription('This object indicates the current status of the specified timeslot. The status values change dynamically with system operation.')
ids0StatDevConnTo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("isdnGateway", 2), ("quadModem", 3), ("quadIModem", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDevConnTo.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatDevConnTo.setDescription('This object indicates the device currently connected.')
ids0StatSlotConnTo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatSlotConnTo.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatSlotConnTo.setDescription('This object indicates the slot of the device currently connected. Range = 0(none)-16. ')
ids0StatChanConnTo = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatChanConnTo.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatChanConnTo.setDescription('This object indicates the channel of the device currently connected. Default 255.')
ids0StatDs0SrvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("inService", 2), ("localOutOfService", 3), ("maintenance", 4), ("remoteOutOfService", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatDs0SrvcState.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatDs0SrvcState.setDescription('This is the current service state of a DS0. This object does not apply to Rob Bit T1 operation.')
ids0StatCallArrivalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 8), Integer32())
if mibBuilder.loadTexts: ids0StatCallArrivalTime.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatCallArrivalTime.setDescription('This object indicates the call arrival time in GMT w/1 sec resolution.')
ids0StatCallConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 9), Integer32())
if mibBuilder.loadTexts: ids0StatCallConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatCallConnectTime.setDescription('This object indicates the call connect time in GMT w/1 sec resolution.')
ids0StatCallTerminateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 10), Integer32())
if mibBuilder.loadTexts: ids0StatCallTerminateTime.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatCallTerminateTime.setDescription('This object indicates the call terminate time in GMT w/1 sec resolution.')
ids0StatCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("analog", 1), ("digital", 2))))
if mibBuilder.loadTexts: ids0StatCallType.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatCallType.setDescription('This object indicates the call type (analog or digital).')
ids0StatCallBlockState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("blockNone", 2), ("blockAnalog", 3), ("blockDigital", 4), ("blockAll", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0StatCallBlockState.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatCallBlockState.setDescription('This object indicates current ids0 call block status.')
ids0StatCallDirn = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: ids0StatCallDirn.setStatus('mandatory')
if mibBuilder.loadTexts: ids0StatCallDirn.setDescription('This object indicates the call dirn (in or out bound).')
ids0CmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 3), )
if mibBuilder.loadTexts: ids0CmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdTable.setDescription('The DS0 Command table contains an entry for each of the manageable timeslots in the chassis. It provides a means through which to take specific actions on one or more timeslots in the chassis.')
ids0CmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1), ).setIndexNames((0, "IDS0-MIB", "ids0CmdDs1Index"), (0, "IDS0-MIB", "ids0CmdDs0Index"))
if mibBuilder.loadTexts: ids0CmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdEntry.setDescription('There is one entry in the DS0 Command table per timeslot in the chassis.')
ids0CmdDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdDs1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdDs1Index.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value of ds0CmdDs1Index matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB.')
ids0CmdDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdDs0Index.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdDs0Index.setDescription('The index which uniquely identifies the timeslot of the specified CSU to which this entry is applicable.')
ids0CmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdMgtStationId.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdMgtStationId.setDescription('This object is a generic read-write variable that a Management Station (MS) can use to guarantee that the results from a given command are the results of a command issued by that specific MS. Each MS must SET a unique value to this object when doing commands and GET the value of this object together with ds0CmdReqId and ds0CmdResult to detect interference from other MSs.')
ids0CmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdReqId.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdReqId.setDescription('This object contains the value of the request-id field in the SNMP PDU which invoked the current or most recent command on this DS0 entity. If the request-id is unknown or undefined, this object contains the zero value.')
ids0CmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noCommand", 1), ("disconnect", 2), ("inService", 3), ("localOutofService", 4), ("blockAnalogCalls", 5), ("blockDigitalCalls", 6), ("blockAllCalls", 7), ("blockNoCalls", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdFunction.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdFunction.setDescription('This object contains a value that identifies the command being requested.')
ids0CmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdForce.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdForce.setDescription('In some cases, the DS0 entity may be in a state such that certain commands could adversely affect connections. In such cases, a command request with ds0CmdForce not defined, or set to noForce will result in a warning. If the operator elects to ignore such warnings, ds0CmdForce can be set to force in a re-issued request and the command will be carried out regardless of its potentially hazzardous effects.')
ids0CmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ids0CmdParam.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdParam.setDescription('This object contains parameters that are specific to the particular command being issued. In some cases, there will be no additional parameters required.')
ids0CmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdResult.setDescription('This object contains the result of the most recently requested command, or the value none(1) if no commands have been requested since the last reset.')
ids0CmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 73))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("pendingSoftwareDownload", 73)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0CmdCode.setStatus('mandatory')
if mibBuilder.loadTexts: ids0CmdCode.setDescription('The value of this object upon command completion indicates a further description of what went wrong if the command was unsuccessful.')
ids0BulkAccessTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 16, 4), )
if mibBuilder.loadTexts: ids0BulkAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: ids0BulkAccessTable.setDescription('A table of parameters for each DS0 accessed in a bulk format')
ids0BulkAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 16, 4, 1), ).setIndexNames((0, "IDS0-MIB", "ids0BulkAccessDs1Index"))
if mibBuilder.loadTexts: ids0BulkAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ids0BulkAccessEntry.setDescription('There is one bulk DS0 access for each DS1 in the chassis')
ids0BulkAccessDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0BulkAccessDs1Index.setStatus('mandatory')
if mibBuilder.loadTexts: ids0BulkAccessDs1Index.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The value of ds0BulkAccessDs1Index matches the value of the index for the corresponding DS1 entity in the entity table of the chassis MIB. ')
ids0BulkAccessStatDs0Mdm = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 16, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ids0BulkAccessStatDs0Mdm.setStatus('mandatory')
if mibBuilder.loadTexts: ids0BulkAccessStatDs0Mdm.setDescription("This object contains all of the ids0Stat table parameters for all the DS0's on the DS1")
mibBuilder.exportSymbols("IDS0-MIB", ids0CfgNailUpDs0=ids0CfgNailUpDs0, ids0CmdCode=ids0CmdCode, ids0CfgDs0AssignedChannel=ids0CfgDs0AssignedChannel, ids0StatEntry=ids0StatEntry, ids0StatSlotConnTo=ids0StatSlotConnTo, ids0StatCallDirn=ids0StatCallDirn, ids0CmdReqId=ids0CmdReqId, ids0StatDs1Index=ids0StatDs1Index, ids0StatChanConnTo=ids0StatChanConnTo, ids0CfgDs0Index=ids0CfgDs0Index, ids0CmdDs1Index=ids0CmdDs1Index, nas=nas, ids0StatDevConnTo=ids0StatDevConnTo, ids0CfgDs0SrvcState=ids0CfgDs0SrvcState, ids0StatDs0Index=ids0StatDs0Index, ids0BulkAccessTable=ids0BulkAccessTable, ids0CmdFunction=ids0CmdFunction, ids0CfgTable=ids0CfgTable, ids0StatCallTerminateTime=ids0StatCallTerminateTime, ids0CmdDs0Index=ids0CmdDs0Index, ids0StatCallBlockState=ids0StatCallBlockState, ids0CmdMgtStationId=ids0CmdMgtStationId, ids0CmdTable=ids0CmdTable, ids0CfgEntry=ids0CfgEntry, ids0BulkAccessEntry=ids0BulkAccessEntry, ids0StatDs0=ids0StatDs0, usr=usr, ids0CfgBlockCallType=ids0CfgBlockCallType, ids0CmdEntry=ids0CmdEntry, ids0BulkAccessDs1Index=ids0BulkAccessDs1Index, ids0CmdForce=ids0CmdForce, ids0CmdParam=ids0CmdParam, ids0StatCallArrivalTime=ids0StatCallArrivalTime, ids0StatCallConnectTime=ids0StatCallConnectTime, ids0StatTable=ids0StatTable, ids0CmdResult=ids0CmdResult, ids0BulkAccessStatDs0Mdm=ids0BulkAccessStatDs0Mdm, ids0=ids0, ids0StatDs0SrvcState=ids0StatDs0SrvcState, ids0CfgDs0Id=ids0CfgDs0Id, ids0CfgDs0AssignedSlot=ids0CfgDs0AssignedSlot, ids0StatCallType=ids0StatCallType, ids0CfgDs1Index=ids0CfgDs1Index)
