#
# PySNMP MIB module PEPLINK-BALANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PEPLINK-BALANCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:40:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, Gauge32, Integer32, Bits, ObjectIdentity, TimeTicks, NotificationType, enterprises, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "Gauge32", "Integer32", "Bits", "ObjectIdentity", "TimeTicks", "NotificationType", "enterprises", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
peplinkBalance = ModuleIdentity((1, 3, 6, 1, 4, 1, 23695, 1))
peplinkBalance.setRevisions(('2009-03-05 00:00', '2009-03-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: peplinkBalance.setRevisionsDescriptions(('Revised this MIB to add more OID items.', 'Initial release.',))
if mibBuilder.loadTexts: peplinkBalance.setLastUpdated('200903050000Z')
if mibBuilder.loadTexts: peplinkBalance.setOrganization('Peplink')
if mibBuilder.loadTexts: peplinkBalance.setContactInfo('Peplink http://www.peplink.com Support: http://www.peplink.com/contact/support/ Email: info@peplink.com Twitter: @peplink ')
if mibBuilder.loadTexts: peplinkBalance.setDescription('MIB module for Peplink Balance.')
class TableIndex(TextualConvention, Integer32):
    description = "A unique value, greater than zero, for each interface or interface sub-layer in the managed system. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class ConnectionNum(TextualConvention, Integer32):
    description = 'A unique value, greater than zero, for each WAN connection number.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NameString(TextualConvention, OctetString):
    description = 'Balance name string.'
    status = 'current'
    displayHint = '80a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 80)

class PortSpeedType(TextualConvention, Integer32):
    description = 'Describe the port speed and type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("unknown", 0), ("auto", 1), ("fullDulplex10", 2), ("halfDulplex10", 3), ("fullDulplex100", 4), ("halfDulplex100", 5), ("fullDulplex1000", 6), ("halfDulplex1000", 7))

balanceStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 1))
balanceSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1))
balFirmware = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balFirmware.setStatus('current')
if mibBuilder.loadTexts: balFirmware.setDescription('Balance firmware version.')
balSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 2), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balSerialNumber.setStatus('current')
if mibBuilder.loadTexts: balSerialNumber.setDescription('Balance serial number.')
balTime = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 3), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balTime.setStatus('current')
if mibBuilder.loadTexts: balTime.setDescription('Balance system time.')
balUpTime = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balUpTime.setStatus('current')
if mibBuilder.loadTexts: balUpTime.setDescription('Balance up time (in hundredths of a second) since the system was last re-initialized.')
balanceLan = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 6))
balLanStatus = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 6, 1), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balLanStatus.setStatus('current')
if mibBuilder.loadTexts: balLanStatus.setDescription('Balance LAN status (up/down).')
balLanIp = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 6, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balLanIp.setStatus('current')
if mibBuilder.loadTexts: balLanIp.setDescription('Balance LAN IP address.')
balLanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 1, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balLanSubnetMask.setStatus('current')
if mibBuilder.loadTexts: balLanSubnetMask.setDescription('Balance LAN sub-net mask.')
balLinkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2))
balLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: balLinkNumber.setStatus('current')
if mibBuilder.loadTexts: balLinkNumber.setDescription('The number of network interfaces (regardless of their current state) present on this system.')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
if mibBuilder.loadTexts: linkTable.setDescription('A list of link status.')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2, 1), ).setIndexNames((0, "PEPLINK-BALANCE-MIB", "linkConnNum"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
if mibBuilder.loadTexts: linkEntry.setDescription('An entry containing management information applicable to a particular interface.')
linkConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2, 1, 1), ConnectionNum())
if mibBuilder.loadTexts: linkConnNum.setStatus('current')
if mibBuilder.loadTexts: linkConnNum.setDescription('Virtual WAN index number (1-based, unique).')
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2, 1, 2), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription('Balance link status (connecting/connected/link down).')
linkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2, 1, 3), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatus.setStatus('current')
if mibBuilder.loadTexts: linkStatus.setDescription('Balance link status (connecting/connected/link down).')
linkThroughputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkThroughputIn.setStatus('current')
if mibBuilder.loadTexts: linkThroughputIn.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of balanceWanCounterDiscontinuityTime.')
linkThroughputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkThroughputOut.setStatus('current')
if mibBuilder.loadTexts: linkThroughputOut.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of balanceWanCounterDiscontinuityTime.')
linkDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDataTransferred.setStatus('current')
if mibBuilder.loadTexts: linkDataTransferred.setDescription('The numbe of bytes transferred through.')
linkIpTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 3), )
if mibBuilder.loadTexts: linkIpTable.setStatus('current')
if mibBuilder.loadTexts: linkIpTable.setDescription('A list of link status.')
linkIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 3, 1), ).setIndexNames((0, "PEPLINK-BALANCE-MIB", "linkIpConnNum"), (0, "PEPLINK-BALANCE-MIB", "linkIpIndex"))
if mibBuilder.loadTexts: linkIpEntry.setStatus('current')
if mibBuilder.loadTexts: linkIpEntry.setDescription('An entry containing management information applicable to a particular interface.')
linkIpConnNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 3, 1, 1), ConnectionNum())
if mibBuilder.loadTexts: linkIpConnNum.setStatus('current')
if mibBuilder.loadTexts: linkIpConnNum.setDescription('Virtual WAN index number.')
linkIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 3, 1, 2), TableIndex())
if mibBuilder.loadTexts: linkIpIndex.setStatus('current')
if mibBuilder.loadTexts: linkIpIndex.setDescription('Virtual WAN index number.')
linkIp = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 2, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIp.setStatus('current')
if mibBuilder.loadTexts: linkIp.setDescription('Balance link IP address list.')
wanUsageTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 1, 1, 3), )
if mibBuilder.loadTexts: wanUsageTable.setStatus('current')
if mibBuilder.loadTexts: wanUsageTable.setDescription('A list of interface entries.')
wanUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 1, 1, 3, 1), ).setIndexNames((0, "PEPLINK-BALANCE-MIB", "wanUsageIndex"))
if mibBuilder.loadTexts: wanUsageEntry.setStatus('current')
if mibBuilder.loadTexts: wanUsageEntry.setDescription('An entry containing management information applicable to a particular interface.')
wanUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 3, 1, 1), TableIndex())
if mibBuilder.loadTexts: wanUsageIndex.setStatus('current')
if mibBuilder.loadTexts: wanUsageIndex.setDescription('Physical WAN index number.')
wanUsageThroughputIn = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanUsageThroughputIn.setStatus('current')
if mibBuilder.loadTexts: wanUsageThroughputIn.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of balanceWanCounterDiscontinuityTime.')
wanUsageThroughputOut = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanUsageThroughputOut.setStatus('current')
if mibBuilder.loadTexts: wanUsageThroughputOut.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of balanceWanCounterDiscontinuityTime.')
wanUsageDataTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanUsageDataTransferred.setStatus('current')
if mibBuilder.loadTexts: wanUsageDataTransferred.setDescription('The numbe of bytes transferred through.')
balanceMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 2))
balReboot = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 2, 1), NameString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: balReboot.setStatus('current')
if mibBuilder.loadTexts: balReboot.setDescription("Reboot the Balance. Write 'enable' to take effect.")
balanceLanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 3))
portLanSpeedConfig = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 3, 1), PortSpeedType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLanSpeedConfig.setStatus('current')
if mibBuilder.loadTexts: portLanSpeedConfig.setDescription('Set Balance LAN port speed (Auto/10baseT-FD/ 10baseT-HD/100baseTx-FD/100baseTx-HD/1000baseTx-FD/ 1000baseTx-HD.')
portWanSpeedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 23695, 1, 3, 2), )
if mibBuilder.loadTexts: portWanSpeedConfigTable.setStatus('current')
if mibBuilder.loadTexts: portWanSpeedConfigTable.setDescription('A list of interface entries.')
portWanSpeedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23695, 1, 3, 2, 1), ).setIndexNames((0, "PEPLINK-BALANCE-MIB", "portWanSpeedConfigIndex"))
if mibBuilder.loadTexts: portWanSpeedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: portWanSpeedConfigEntry.setDescription('An entry containing management information applicable to a particular interface.')
portWanSpeedConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 3, 2, 1, 1), TableIndex())
if mibBuilder.loadTexts: portWanSpeedConfigIndex.setStatus('current')
if mibBuilder.loadTexts: portWanSpeedConfigIndex.setDescription('Physical LAN/WAN port name.')
portWanSpeedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 23695, 1, 3, 2, 1, 2), PortSpeedType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portWanSpeedConfig.setStatus('current')
if mibBuilder.loadTexts: portWanSpeedConfig.setDescription('Set Balance WAN port speed (Auto/10baseT-FD/ 10baseT-HD/100baseTx-FD/100baseTx-HD/1000baseTx-FD/ 1000baseTx-HD.')
lanConfigIp = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanConfigIp.setStatus('current')
if mibBuilder.loadTexts: lanConfigIp.setDescription('Set Balance LAN IP address.')
lanConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 23695, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: lanConfigSubnetMask.setDescription('Set Balance LAN sub-net mask.')
balanceConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 50))
balCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 50, 1))
balGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 23695, 1, 50, 2))
balCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 23695, 1, 50, 1, 1)).setObjects(("PEPLINK-BALANCE-MIB", "balSystemGroup"), ("PEPLINK-BALANCE-MIB", "balLinkGroup"), ("PEPLINK-BALANCE-MIB", "balWanGroup"), ("PEPLINK-BALANCE-MIB", "balSetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    balCompliance = balCompliance.setStatus('current')
if mibBuilder.loadTexts: balCompliance.setDescription('Balance compliance groups.')
balSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 23695, 1, 50, 2, 1)).setObjects(("PEPLINK-BALANCE-MIB", "balFirmware"), ("PEPLINK-BALANCE-MIB", "balSerialNumber"), ("PEPLINK-BALANCE-MIB", "balTime"), ("PEPLINK-BALANCE-MIB", "balUpTime"), ("PEPLINK-BALANCE-MIB", "balLanStatus"), ("PEPLINK-BALANCE-MIB", "balLanIp"), ("PEPLINK-BALANCE-MIB", "balLanSubnetMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    balSystemGroup = balSystemGroup.setStatus('current')
if mibBuilder.loadTexts: balSystemGroup.setDescription('Balance system status group.')
balLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 23695, 1, 50, 2, 2)).setObjects(("PEPLINK-BALANCE-MIB", "balLinkNumber"), ("PEPLINK-BALANCE-MIB", "linkName"), ("PEPLINK-BALANCE-MIB", "linkStatus"), ("PEPLINK-BALANCE-MIB", "linkIp"), ("PEPLINK-BALANCE-MIB", "linkThroughputIn"), ("PEPLINK-BALANCE-MIB", "linkThroughputOut"), ("PEPLINK-BALANCE-MIB", "linkDataTransferred"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    balLinkGroup = balLinkGroup.setStatus('current')
if mibBuilder.loadTexts: balLinkGroup.setDescription('Balance system status group.')
balWanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 23695, 1, 50, 2, 3)).setObjects(("PEPLINK-BALANCE-MIB", "wanUsageThroughputIn"), ("PEPLINK-BALANCE-MIB", "wanUsageThroughputOut"), ("PEPLINK-BALANCE-MIB", "wanUsageDataTransferred"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    balWanGroup = balWanGroup.setStatus('current')
if mibBuilder.loadTexts: balWanGroup.setDescription('Balance system status group.')
balSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 23695, 1, 50, 2, 4)).setObjects(("PEPLINK-BALANCE-MIB", "balReboot"), ("PEPLINK-BALANCE-MIB", "portWanSpeedConfig"), ("PEPLINK-BALANCE-MIB", "portLanSpeedConfig"), ("PEPLINK-BALANCE-MIB", "lanConfigIp"), ("PEPLINK-BALANCE-MIB", "lanConfigSubnetMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    balSetGroup = balSetGroup.setStatus('current')
if mibBuilder.loadTexts: balSetGroup.setDescription('Balance system status group.')
mibBuilder.exportSymbols("PEPLINK-BALANCE-MIB", linkIpIndex=linkIpIndex, PortSpeedType=PortSpeedType, wanUsageTable=wanUsageTable, portWanSpeedConfigTable=portWanSpeedConfigTable, portWanSpeedConfig=portWanSpeedConfig, balReboot=balReboot, balLanIp=balLanIp, balCompliance=balCompliance, balLinkGroup=balLinkGroup, lanConfigSubnetMask=lanConfigSubnetMask, lanConfigIp=lanConfigIp, portWanSpeedConfigEntry=portWanSpeedConfigEntry, linkStatus=linkStatus, balSetGroup=balSetGroup, linkThroughputOut=linkThroughputOut, balFirmware=balFirmware, wanUsageThroughputOut=wanUsageThroughputOut, linkDataTransferred=linkDataTransferred, wanUsageIndex=wanUsageIndex, balanceSystem=balanceSystem, balLanSubnetMask=balLanSubnetMask, linkConnNum=linkConnNum, ConnectionNum=ConnectionNum, linkIpConnNum=linkIpConnNum, peplinkBalance=peplinkBalance, portWanSpeedConfigIndex=portWanSpeedConfigIndex, NameString=NameString, linkIpEntry=linkIpEntry, balLinkNumber=balLinkNumber, balanceLanConfig=balanceLanConfig, balGroups=balGroups, linkEntry=linkEntry, TableIndex=TableIndex, balLinkStatus=balLinkStatus, balanceLan=balanceLan, linkTable=linkTable, balanceConformance=balanceConformance, balTime=balTime, balLanStatus=balLanStatus, balanceStatus=balanceStatus, linkIpTable=linkIpTable, portLanSpeedConfig=portLanSpeedConfig, linkThroughputIn=linkThroughputIn, balWanGroup=balWanGroup, wanUsageEntry=wanUsageEntry, balanceMaintenance=balanceMaintenance, balSerialNumber=balSerialNumber, balUpTime=balUpTime, linkName=linkName, balSystemGroup=balSystemGroup, wanUsageDataTransferred=wanUsageDataTransferred, balCompliances=balCompliances, linkIp=linkIp, wanUsageThroughputIn=wanUsageThroughputIn, PYSNMP_MODULE_ID=peplinkBalance)
