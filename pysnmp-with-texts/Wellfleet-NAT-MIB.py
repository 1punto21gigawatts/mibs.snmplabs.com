#
# PySNMP MIB module Wellfleet-NAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-NAT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Unsigned32, iso, TimeTicks, ObjectIdentity, Bits, MibIdentifier, Integer32, NotificationType, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Unsigned32", "iso", "TimeTicks", "ObjectIdentity", "Bits", "MibIdentifier", "Integer32", "NotificationType", "Gauge32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfNatGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfNatGroup")
wfNatBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1))
wfNatBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseDelete.setDescription("'This value determines whether NAT is configured'")
wfNatBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseDisable.setDescription("'The administrative status of NAT in the router. The value 'enabled' denotes that the NAT Process is active on at least one interface; 'disabled' disables it on all interfaces.'")
wfNatBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("init", 2), ("down", 3), ("not-present", 4))).clone('not-present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseState.setDescription("'The state of NAT'")
wfNatBaseSoloistSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 4), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseSoloistSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSoloistSlotMask.setDescription('Slot mask for which slots the soloist gate is eligible to run on. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. Default is all slots.')
wfNatBaseSoloistSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatBaseSoloistSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSoloistSlot.setDescription('Slot on which NAT soloist gate is running. Slots can be 1-14. Default is zero.')
wfNatBaseLogMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseLogMask.setDescription('A parameter to specify which NAT log messages should be logged. Each bit represents a message as defined below. A 1 in that bit location means to log it and a 0 means not to put that log message in the log. Changing this value will NOT restart NAT, but will take effct immediately(if there are any messages to be logged. bit 31 bit 0 +---------------------------------------+ | | +---------------------------------------+ NAT_DBG_MIB_LOG 0x00000001 NAT_DBG_IP_LOG 0x00000002 NAT_DBG_FWD_LOG 0x00000004 NAT_DBG_MAPPING_LOG 0x00000008 NAT_DBG_AGING_LOG 0x00000010 NAT_DBG_SYNCH_LOG 0x00000020 ')
wfNatBaseMapTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseMapTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseMapTimeout.setDescription('This controls whether or not the dynamic mapping table entries are aged out when unused.')
wfNatBaseMapMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(3600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseMapMaxTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseMapMaxTimeout.setDescription('The maximum time in seconds before unused NAT mapping table entries are deleted. This timeout or aging does not apply to static mapping entries.')
wfNatBaseMapDynMapsCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatBaseMapDynMapsCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseMapDynMapsCount.setDescription('Number of Dynamic Mappings in the dymanic mapping table')
wfNatBaseFtpSessionCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatBaseFtpSessionCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseFtpSessionCount.setDescription('Number of FTP sessions detected on this box translated by NAT')
wfNatBaseNto1TrTotCount = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatBaseNto1TrTotCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseNto1TrTotCount.setDescription('Total number of active Nto1 translation counts on the box.')
wfNatBaseSynchronization = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseSynchronization.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSynchronization.setDescription("The administrative status of NAT Synchronization in the router. The value `enabled' denotes that the NAT Synchronization is active and is synchronizing with the peer specified in noraml conditions.; `disabled' disables it on the box and all the peer connections will be teared down.'")
wfNatBaseSynRouterID = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseSynRouterID.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSynRouterID.setDescription("This represents the Router Identifier for NAT Synchronization Only. This is used to detect the duplicate TCP connection between peers. The value of it can be any integer which is unique between all the NAT Syn peers this router has. An IP Address of one of the router interfaces can be used as the RouterID. Changing the value will result into breaking and reconnecting using new ID with all the peers.'")
wfNatBaseSynPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 14), Integer32().clone(670)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseSynPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSynPort.setDescription("This represents the TCP port on which the connection requests from the peers will be accepted. When NAT Synchronization Protocol comes up, it will open a listen connection for this port number. This attribute value has to be the same on all the peers that want to make the TCP connection.'")
wfNatBaseSynKeepAlvInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 15), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseSynKeepAlvInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSynKeepAlvInterval.setDescription('Idle session timeout period, in seconds. If an established TCP connection remains inactive for this interval, KEEPALIVE messages will be sent to the peer (if the Keepalive Timer is non-zero). Setting the Idle Timer to zero disables the keepalive feature.')
wfNatBaseSynKeepAlvTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 16), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseSynKeepAlvTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSynKeepAlvTimer.setDescription('KEEPALIVE retransmit timeout period, in seconds. This is the interval at which unacknowledged KEEPALIVE messages will be retransmitted. If the Idle Timer is set to zero, this timer ignored. If the Idle Timer is non-zero and this timer IS zero, no KEEPALIVEs are sent and the session is terminated upon expiration of the Idle Timer.')
wfNatBaseSynKeepAlvRetries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 17), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseSynKeepAlvRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseSynKeepAlvRetries.setDescription('Number of unacknowledged KEEPALIVE messages retransmitted before the TCP session is terminated. If this count is set to zero, only one KEEPALIVE message will be sent.')
wfNatBaseLocalToLocalEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseLocalToLocalEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseLocalToLocalEnable.setDescription('Allow forwarding of traffic from one local NAT interface to another local NAT interface.')
wfNatBaseInstallUniPrivAddr = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatBaseInstallUniPrivAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatBaseInstallUniPrivAddr.setDescription('This MIB was added in BayRS 14.20 to address a compatibility issue concerning non-DNS NAT translations when upgrading from a pre-14.20 NAT configuration to a 14.20 or greater version of BayRS software. This MIB should remain enabled. Disabling this MIB will cause Uni-directional NAT to no longer function correctly on the router.')
wfNatAddrRangeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 2), )
if mibBuilder.loadTexts: wfNatAddrRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddrRangeTable.setDescription('Table of address ranges that have been designated as the set of external apparent addresses that are to be mapped in place of internal actual addresses. These addresses would be the non-public reigistered addresses.')
wfNatAddrRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 2, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatAddrRangeAddress"), (0, "Wellfleet-NAT-MIB", "wfNatAddrRangePrefixLen"))
if mibBuilder.loadTexts: wfNatAddrRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddrRangeEntry.setDescription("'Information describing each of the available address ranges.'")
wfNatAddrRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddrRangeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddrRangeDelete.setDescription("'Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an address range entry.'")
wfNatAddrRangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddrRangeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddrRangeDisable.setDescription("'Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable an address range entry.'")
wfNatAddrRangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddrRangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddrRangeAddress.setDescription("'The IP beginning address of this range entry.")
wfNatAddrRangePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddrRangePrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddrRangePrefixLen.setDescription("'The IP address mask that in conjunction with the start address defines the address range of the entry.'")
wfNatLocalAddrRangeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 3), )
if mibBuilder.loadTexts: wfNatLocalAddrRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatLocalAddrRangeTable.setDescription('Table of address ranges that have been designated as the set of local addresses that are to be mapped via NAT.')
wfNatLocalAddrRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 3, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatLocalAddrRangeAddress"), (0, "Wellfleet-NAT-MIB", "wfNatLocalAddrRangePrefixLen"))
if mibBuilder.loadTexts: wfNatLocalAddrRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatLocalAddrRangeEntry.setDescription("'Information describing each of the available address ranges.'")
wfNatLocalAddrRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatLocalAddrRangeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatLocalAddrRangeDelete.setDescription("'Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an address range entry.'")
wfNatLocalAddrRangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatLocalAddrRangeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatLocalAddrRangeDisable.setDescription("'Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable an address range entry.'")
wfNatLocalAddrRangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatLocalAddrRangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatLocalAddrRangeAddress.setDescription("'The IP beginning address of this range entry.")
wfNatLocalAddrRangePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatLocalAddrRangePrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatLocalAddrRangePrefixLen.setDescription("'The IP address mask that in conjunction with the start address defines the address range of the entry.'")
wfNatLocalAddrRangeNto1Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatLocalAddrRangeNto1Addr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatLocalAddrRangeNto1Addr.setDescription('Nto1 translation address used for this range.')
wfNatStaticMapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4), )
if mibBuilder.loadTexts: wfNatStaticMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapTable.setDescription("'This table creates instances of pre-defined NAT mappings.'")
wfNatStaticMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatStaticMapLocalAddress"), (0, "Wellfleet-NAT-MIB", "wfNatStaticMapGlobalAddress"), (0, "Wellfleet-NAT-MIB", "wfNatStaticMapProtocol"), (0, "Wellfleet-NAT-MIB", "wfNatStaticMapLocalPort"), (0, "Wellfleet-NAT-MIB", "wfNatStaticMapGlobalPort"))
if mibBuilder.loadTexts: wfNatStaticMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapEntry.setDescription("'A single local-to-global address mapping.'")
wfNatStaticMapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMapDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapDelete.setDescription("'Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete a static address mapping entry.'")
wfNatStaticMapDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMapDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapDisable.setDescription("'Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable a static address mapping entry.'")
wfNatStaticMapLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMapLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapLocalAddress.setDescription("'The local or private address of the mapping pair.'")
wfNatStaticMapGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMapGlobalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapGlobalAddress.setDescription("'The global or external address of the mapping pair.'")
wfNatStaticMapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMapProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapProtocol.setDescription("'The IP protocol of the mapping pair.'")
wfNatStaticMapLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMapLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapLocalPort.setDescription("'The local UDP or TCP port of the mapping pair. This will only be relevent if the protocol is either UDP or TCP.'")
wfNatStaticMapGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMapGlobalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMapGlobalPort.setDescription("'The global UDP or TCP port of the mapping pair. This will only be relevent if the protocol is either UDP or TCP.'")
wfNatMapTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5), )
if mibBuilder.loadTexts: wfNatMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapTable.setDescription("'This table defines the current set of address mappings that are in effect.'")
wfNatMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatMapLocalAddress"), (0, "Wellfleet-NAT-MIB", "wfNatMapGlobalAddress"), (0, "Wellfleet-NAT-MIB", "wfNatMapProtocol"), (0, "Wellfleet-NAT-MIB", "wfNatMapLocalPort"), (0, "Wellfleet-NAT-MIB", "wfNatMapGlobalPort"))
if mibBuilder.loadTexts: wfNatMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapEntry.setDescription('')
wfNatMapLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapLocalAddress.setDescription("'The local address of the mapping pair.'")
wfNatMapGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapGlobalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapGlobalAddress.setDescription("'The global address of the mapping pair.'")
wfNatMapProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapProtocol.setDescription("'The IP protocol of the mapping pair.'")
wfNatMapLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapLocalPort.setDescription("'When the mapping is for a TCP connection, this denotes the TCP port number on the local side.'")
wfNatMapGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapGlobalPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapGlobalPort.setDescription("'When the mapping is for a TCP connection, this denotes the TCP port number on the global side.'")
wfNatMapTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapTxCount.setDescription("'Number of packets for this mapping pair that have been mapped from the local to the global network.'")
wfNatMapRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapRxCount.setDescription("'Number of packets for this mapping pair that have been mapped from the global to the local network.'")
wfNatMapTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapTimeout.setDescription("'The time in seconds since this mapping entry was last used. This is used to age out mapping entries.'")
wfNatMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMapMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMapMode.setDescription('This is the bit mask representing the type of this mapping. Each bit specifies the type as follows: The mapping could be only ONE of the foolowing three... 0x01000000 - This mapping is origianted on this router, i.e. this NAT router performed the translation 0x02000000 - This mapping is learned from the peer, i.e. this translation was learned from the peer using NAT Synchronization feature. 0x04000000 - This mapping is owned, i.e. it was originally learned from peer, but this router received traffic which used this mapping. ...and only ONE of the following three. 0x00000010 - This mapping is the STATIC mapping. 0x00000020 - This mapping is Dynamic(1 to 1) mapping. 0x00000040 - This mapping is N to 1 mapping.')
wfNatIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6), )
if mibBuilder.loadTexts: wfNatIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfTable.setDescription("'The set of interface that are participating in the NAT protocol.'")
wfNatIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatIfIpAddress"), (0, "Wellfleet-NAT-MIB", "wfNatIfCircuit"))
if mibBuilder.loadTexts: wfNatIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfEntry.setDescription("'An single instance of a NAT interface entry.'")
wfNatIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfDelete.setDescription('This variable determines in a NAT Interface has been configured on the router.')
wfNatIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfDisable.setDescription("'The NAT interface's administrative status. The value 'enabled' denotes that NAT has been configured on the interface. The value 'disabled' denotes that the interface is not running NAT.'")
wfNatIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfIpAddress.setDescription('The IP address of this NAT interface.')
wfNatIfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIfCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfCircuit.setDescription('The circuit number of this interface.')
wfNatIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uniDirInbound", 1), ("uniDirOutbound", 2), ("biDirectional", 3))).clone('uniDirInbound')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfType.setDescription('Denotes the type of NAT interface being defined.')
wfNatIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfState.setDescription("'The state of NAT on this interface'")
wfNatIfTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIfTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfTxCount.setDescription("Number of packets mapped over this interface from the local to the global network.'")
wfNatIfRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIfRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfRxCount.setDescription("Number of packets mapped over this interface from the global to the local network.'")
wfNatIfPktDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIfPktDropCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfPktDropCount.setDescription('Number of packets dropped on this interface')
wfNatIfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 6, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIfDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIfDomain.setDescription('When wfNatIfType is set to biDirectional, specifies the Address Domain Name that this interface is connected to, otherwise set to null.')
wfNatSynPeerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7), )
if mibBuilder.loadTexts: wfNatSynPeerTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerTable.setDescription("The Nat Synchronization Peer table contains configuration and statistical information regarding this router's NAT peers")
wfNatSynPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatSynPeerRouterID"))
if mibBuilder.loadTexts: wfNatSynPeerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerEntry.setDescription('An entry in the NAT Synchronization-Peer table')
wfNatSynPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSynPeerDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerDelete.setDescription('Create/Delete: if set to delete, this instance of the peer entry is deleted, which results into the termination of peer connection.')
wfNatSynPeerDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSynPeerDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerDisable.setDescription('Enable/Disable: controls whether the peer connection is enabled or disabled, disabling this results into the termination of TCP connection')
wfNatSynPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-present", 1), ("init", 2), ("established", 3), ("down", 4))).clone('not-present')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSynPeerState.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerState.setDescription('the administrative state of the peer connection')
wfNatSynPeerConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSynPeerConnType.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerConnType.setDescription('the type of the TCP connection with the peer, whether this connection is accepted from the peer or it was actively initialted by this router to the peer.')
wfNatSynPeerRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSynPeerRouterID.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerRouterID.setDescription('A unique non-zero RouterID of the peer that this router is expecting from the connection This is also the instance of the Peer Entry.')
wfNatSynPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSynPeerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerAddress.setDescription('the IP Address of the peer, where the router will send a connect request')
wfNatSynPeerTransSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSynPeerTransSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerTransSent.setDescription('The number of translations sent to this peer by the router')
wfNatSynPeerTransRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSynPeerTransRecd.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSynPeerTransRecd.setDescription('The number of translations received from this peer by the router')
wfNatAddressRangeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8), )
if mibBuilder.loadTexts: wfNatAddressRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeTable.setDescription('Table of address ranges. This table was replaced by wfNatSrcAddressFilterTable and wfNatTranslationPoolTable')
wfNatAddressRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatAddressRangeAddress"), (0, "Wellfleet-NAT-MIB", "wfNatAddressRangePrefixLen"), (0, "Wellfleet-NAT-MIB", "wfNatAddressRangeIndex"))
if mibBuilder.loadTexts: wfNatAddressRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeEntry.setDescription('Information describing each of the available address ranges.')
wfNatAddressRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete an address range entry.')
wfNatAddressRangeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable an address range entry.')
wfNatAddressRangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatAddressRangeAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeAddress.setDescription('The IP beginning address of this range entry.')
wfNatAddressRangePrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatAddressRangePrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangePrefixLen.setDescription('The number of contiguous bits set in the IP address mask which are used to define the address range of the entry.')
wfNatAddressRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatAddressRangeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeIndex.setDescription('A unique value for this entry in wfNatAddressRangeTable.')
wfNatAddressRangeNto1Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeNto1Addr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeNto1Addr.setDescription('When wfNatAddressRangeType is set to srcAddrFilter, specifies the N-to-1 translation address used for this range, otherwise set to zero.')
wfNatAddressRangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sourceAddrFilter", 1), ("translationPool", 2), ("domainSrcAddrFilter", 3), ("domainTransPool", 4))).clone('sourceAddrFilter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeType.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeType.setDescription('Denotes the type of address range being defined. sourceAddrFilter: a range of IP addresses used to detect packets which need traditional NAT forwarding. translationPool: for traditional NAT forwarding, a range of IP addresses from which translation addresses are picked. domainSrcAddrFilter: a range of IP addresses used to detect domain specific packets which need domain specific NAT forwarding. domainTransPool: for domain specific NAT forwarding, a range of IP addresses from which domain specific translation addresses are picked.')
wfNatAddressRangeDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeDomain.setDescription('When wfNatAddressRangeType is set to domainSrcAddrFilter or domainTransPool, specifies the Address Domain Name that this address range is valid for, otherwise set to null.')
wfNatAddressRangeTransPool = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))).clone('outbound')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeTransPool.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeTransPool.setDescription('This attribute is only valid for the wfNatAddressRangeType as domainSrcAddrFilter(3). The value of this attribute decides where to get the translation address for this range from. This could be either the translation Pool defined for the inbound domain or the outbound domain for the packet in question.')
wfNatAddressRangeStaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeStaticNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeStaticNextHop.setDescription('The IP address of the next hop of this range entry.')
wfNatAddressRangeUnnumCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 8, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatAddressRangeUnnumCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatAddressRangeUnnumCct.setDescription('This Nat Address range over the unnumbered interface.')
wfNatStaticMappingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9), )
if mibBuilder.loadTexts: wfNatStaticMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingTable.setDescription("`This table creates instances of pre-defined NAT translations.'")
wfNatStaticMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatStaticMappingTransAddress"), (0, "Wellfleet-NAT-MIB", "wfNatStaticMappingProtocol"), (0, "Wellfleet-NAT-MIB", "wfNatStaticMappingTransPort"))
if mibBuilder.loadTexts: wfNatStaticMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingEntry.setDescription('A single original source address to translated address translation.')
wfNatStaticMappingDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete a static address translation entry.')
wfNatStaticMappingDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable a static address translation entry.')
wfNatStaticMappingOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingOrigAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingOrigAddress.setDescription('The original (un-translated) address of the translation.')
wfNatStaticMappingTransAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatStaticMappingTransAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingTransAddress.setDescription('The translated address of the translation.')
wfNatStaticMappingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatStaticMappingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingProtocol.setDescription('The IP protocol of the translation. Example values are 6 for TCP, and 17 for UDP.')
wfNatStaticMappingOrigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingOrigPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingOrigPort.setDescription('The original (domain specific) UDP or TCP port of the translation. This will only be relevent if the protocol is either UDP or TCP.')
wfNatStaticMappingTransPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatStaticMappingTransPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingTransPort.setDescription('The translated UDP or TCP port of the translation. This will only be relevent if the protocol is either UDP or TCP.')
wfNatStaticMappingInDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 8), DisplayString().clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingInDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingInDomain.setDescription('This attribute specifies the name of the address domain that this source translation shall be valid for. In other words, this translation shall only be valid for source addresses coming inbound from this domain.')
wfNatStaticMappingOutDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 9), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingOutDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingOutDomain.setDescription('This attribute specifies the name of the outbound address domain that this translation will be valid for. In other words, this translation only applies to translations that will be forwarded out into this address domain.')
wfNatStaticMappingStaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingStaticNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingStaticNextHop.setDescription('The IP address of the next hop of this static entry.')
wfNatStaticMappingUnnumCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 9, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatStaticMappingUnnumCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatStaticMappingUnnumCct.setDescription('This Nat static translation over the unnumbered interface.')
wfNatMappingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10), )
if mibBuilder.loadTexts: wfNatMappingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingTable.setDescription('This table defines the current set of address translations that are in effect.')
wfNatMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatMappingTransAddress"), (0, "Wellfleet-NAT-MIB", "wfNatMappingProtocol"), (0, "Wellfleet-NAT-MIB", "wfNatMappingTransPort"))
if mibBuilder.loadTexts: wfNatMappingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingEntry.setDescription('A single original source address to translated address translation.')
wfNatMappingOrigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingOrigAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingOrigAddress.setDescription('The original (un-translated) address of the translation.')
wfNatMappingTransAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingTransAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingTransAddress.setDescription('The translated address of the translation.')
wfNatMappingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingProtocol.setDescription("`The IP protocol of the translation.'")
wfNatMappingOrigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingOrigPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingOrigPort.setDescription('When the translation is for a TCP connection, this denotes the original TCP port number.')
wfNatMappingTransPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingTransPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingTransPort.setDescription('When the translation is for a TCP connection, this denotes the translated TCP port number.')
wfNatMappingTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingTxCount.setDescription('Number of packets forwarded by NAT using this translation.')
wfNatMappingRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingRxCount.setDescription('Number of packets received by NAT using this translation.')
wfNatMappingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingTimeout.setDescription('The time in seconds since this translation entry was last used. This is used to age out translation entries.')
wfNatMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingMode.setDescription('This is the bit mask representing the type of this translation. Each bit specifies the type as follows: The translation could be only ONE of the following three... 0x01000000 - This translation is origianted on this router, i.e. this NAT router performed the translation. 0x02000000 - This translation is learned from the peer, i.e. this translation was learned from the peer using NAT Synchronization feature. 0x04000000 - This translation is owned, i.e. it was originally learned from peer, but this router received traffic which used this translation. ...and only ONE of the following three. 0x00000010 - This translation is the STATIC translation. 0x00000020 - This translation is Dynamic(1 to 1) translation. 0x00000040 - This translation is N to 1 translation.')
wfNatMappingInDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingInDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingInDomain.setDescription('This attribute specifies the name of the address domain that this source translation shall be valid for. In ther words, this translation shall only be valid for source addresses coming inbound from this domain.')
wfNatMappingOutDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 10, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatMappingOutDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatMappingOutDomain.setDescription('This attribute specifies the name of the outbound address domain that this translation will be valid for. In other words, this translation only applies to translations that will be forwarded out into this address domain.')
wfNatIntfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11), )
if mibBuilder.loadTexts: wfNatIntfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfTable.setDescription("'The list of configured NAT interfaces.'")
wfNatIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatIntfIpAddress"), (0, "Wellfleet-NAT-MIB", "wfNatIntfCircuit"))
if mibBuilder.loadTexts: wfNatIntfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfEntry.setDescription("'A NAT interface description.'")
wfNatIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIntfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfDelete.setDescription('This variable determines if a NAT Interface has been configured on the router.')
wfNatIntfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIntfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfDisable.setDescription("'The NAT interface's administrative status. The value 'enabled' denotes that NAT has been configured on the interface. The value 'disabled' denotes that the interface is not running NAT.'")
wfNatIntfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIntfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfIpAddress.setDescription('The IP address of this NAT interface.')
wfNatIntfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIntfCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfCircuit.setDescription('The circuit number of this interface.')
wfNatIntfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 5), DisplayString().clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatIntfDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfDomain.setDescription("This attribute specifies the Address Domain Name that this interface is connected to. Unidirectional NAT interfaces should be set with domain name of 'private' or 'public'")
wfNatIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIntfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfState.setDescription("'The state of NAT on this interface'")
wfNatIntfTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIntfTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfTxCount.setDescription("Number of packets mapped over this interface from the local to the global network.'")
wfNatIntfRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIntfRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfRxCount.setDescription("Number of packets mapped over this interface from the global to the local network.'")
wfNatIntfPktDropCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatIntfPktDropCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatIntfPktDropCount.setDescription('Number of packets dropped on this interface')
wfNatSrcAddressFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12), )
if mibBuilder.loadTexts: wfNatSrcAddressFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterTable.setDescription('Table of NAT source address filters.')
wfNatSrcAddressFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatSrcAddressFilterAddress"), (0, "Wellfleet-NAT-MIB", "wfNatSrcAddressFilterPrefixLen"), (0, "Wellfleet-NAT-MIB", "wfNatSrcAddressFilterIndex"))
if mibBuilder.loadTexts: wfNatSrcAddressFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterEntry.setDescription('Information describing each of the available source address filters.')
wfNatSrcAddressFilterDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSrcAddressFilterDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete a source address filter entry.')
wfNatSrcAddressFilterDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSrcAddressFilterDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable a source address filter entry.')
wfNatSrcAddressFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSrcAddressFilterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterAddress.setDescription('The IP beginning address of this source address filter entry.')
wfNatSrcAddressFilterPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSrcAddressFilterPrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterPrefixLen.setDescription('The number of contiguous bits set in the IP address mask which are used to define the address range of the entry.')
wfNatSrcAddressFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatSrcAddressFilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterIndex.setDescription('A unique value for this entry in wfNatSrcAddressFilterTable.')
wfNatSrcAddressFilterNto1Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSrcAddressFilterNto1Addr.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterNto1Addr.setDescription('specifies the N-to-1 translation address used for this source address filter, otherwise set to zero.')
wfNatSrcAddressFilterDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 7), DisplayString().clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSrcAddressFilterDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterDomain.setDescription("The value of this attribute specifies the Address Domain Name that this source address filter is valid for. For Unidirectional NAT this value must be 'public'")
wfNatSrcAddressFilterTransPoolSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))).clone('outbound')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSrcAddressFilterTransPoolSelector.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterTransPoolSelector.setDescription('The value of this attribute selects where to get the translation address for this source address filter from. This could be either the translation Pool defined for the inbound domain or the outbound domain for the packet in question.')
wfNatSrcAddressFilterStaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSrcAddressFilterStaticNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterStaticNextHop.setDescription('The IP address of the next hop of this source address filter entry.')
wfNatSrcAddressFilterUnnumCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatSrcAddressFilterUnnumCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatSrcAddressFilterUnnumCct.setDescription('This Nat source address filter over the unnumbered interface.')
wfNatTranslationPoolTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13), )
if mibBuilder.loadTexts: wfNatTranslationPoolTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolTable.setDescription('Table of address ranges.')
wfNatTranslationPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13, 1), ).setIndexNames((0, "Wellfleet-NAT-MIB", "wfNatTranslationPoolAddress"), (0, "Wellfleet-NAT-MIB", "wfNatTranslationPoolPrefixLen"), (0, "Wellfleet-NAT-MIB", "wfNatTranslationPoolIndex"))
if mibBuilder.loadTexts: wfNatTranslationPoolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolEntry.setDescription('Information describing each of the available translation pool.')
wfNatTranslationPoolDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatTranslationPoolDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolDelete.setDescription('Create/Delete parameter. Default is created. Users perform a set operation on this object in order to create/delete a translation pool entry.')
wfNatTranslationPoolDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatTranslationPoolDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolDisable.setDescription('Enable/Disable parameter. Default is enabled. Users perform a set operation on this object in order to enable/disable a translation pool entry.')
wfNatTranslationPoolAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatTranslationPoolAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolAddress.setDescription('The IP beginning address of this translation pool entry.')
wfNatTranslationPoolPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatTranslationPoolPrefixLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolPrefixLen.setDescription('The number of contiguous bits set in the IP address mask which are used to define the address range of the entry.')
wfNatTranslationPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNatTranslationPoolIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolIndex.setDescription('A unique value for this entry in wfNatTranslationPoolTable.')
wfNatTranslationPoolDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 7, 13, 1, 6), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNatTranslationPoolDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wfNatTranslationPoolDomain.setDescription("The value of this attribute specifies the Address Domain Name that this translation pool is valid for. For Unidirectional NAT this value must be 'public'")
mibBuilder.exportSymbols("Wellfleet-NAT-MIB", wfNatMappingRxCount=wfNatMappingRxCount, wfNatSrcAddressFilterTable=wfNatSrcAddressFilterTable, wfNatBaseDelete=wfNatBaseDelete, wfNatIntfIpAddress=wfNatIntfIpAddress, wfNatIntfRxCount=wfNatIntfRxCount, wfNatIntfPktDropCount=wfNatIntfPktDropCount, wfNatMapTxCount=wfNatMapTxCount, wfNatStaticMappingTransAddress=wfNatStaticMappingTransAddress, wfNatAddressRangeDelete=wfNatAddressRangeDelete, wfNatSrcAddressFilterDisable=wfNatSrcAddressFilterDisable, wfNatIfTable=wfNatIfTable, wfNatSrcAddressFilterDomain=wfNatSrcAddressFilterDomain, wfNatStaticMappingDisable=wfNatStaticMappingDisable, wfNatSynPeerDisable=wfNatSynPeerDisable, wfNatSrcAddressFilterNto1Addr=wfNatSrcAddressFilterNto1Addr, wfNatSrcAddressFilterStaticNextHop=wfNatSrcAddressFilterStaticNextHop, wfNatMappingTransPort=wfNatMappingTransPort, wfNatAddressRangeStaticNextHop=wfNatAddressRangeStaticNextHop, wfNatSynPeerTable=wfNatSynPeerTable, wfNatStaticMappingOrigPort=wfNatStaticMappingOrigPort, wfNatBaseDisable=wfNatBaseDisable, wfNatSynPeerConnType=wfNatSynPeerConnType, wfNatTranslationPoolDisable=wfNatTranslationPoolDisable, wfNatMappingEntry=wfNatMappingEntry, wfNatMappingTimeout=wfNatMappingTimeout, wfNatMappingOrigAddress=wfNatMappingOrigAddress, wfNatStaticMappingUnnumCct=wfNatStaticMappingUnnumCct, wfNatAddressRangeType=wfNatAddressRangeType, wfNatIntfCircuit=wfNatIntfCircuit, wfNatMappingInDomain=wfNatMappingInDomain, wfNatIfDomain=wfNatIfDomain, wfNatLocalAddrRangeEntry=wfNatLocalAddrRangeEntry, wfNatAddressRangeDisable=wfNatAddressRangeDisable, wfNatBaseSoloistSlot=wfNatBaseSoloistSlot, wfNatBaseSoloistSlotMask=wfNatBaseSoloistSlotMask, wfNatTranslationPoolEntry=wfNatTranslationPoolEntry, wfNatIfTxCount=wfNatIfTxCount, wfNatTranslationPoolDomain=wfNatTranslationPoolDomain, wfNatAddressRangeEntry=wfNatAddressRangeEntry, wfNatBaseSynKeepAlvTimer=wfNatBaseSynKeepAlvTimer, wfNatIfIpAddress=wfNatIfIpAddress, wfNatMapGlobalPort=wfNatMapGlobalPort, wfNatIfDisable=wfNatIfDisable, wfNatAddressRangeAddress=wfNatAddressRangeAddress, wfNatBaseSynKeepAlvRetries=wfNatBaseSynKeepAlvRetries, wfNatBase=wfNatBase, wfNatStaticMapEntry=wfNatStaticMapEntry, wfNatAddressRangePrefixLen=wfNatAddressRangePrefixLen, wfNatBaseNto1TrTotCount=wfNatBaseNto1TrTotCount, wfNatStaticMapProtocol=wfNatStaticMapProtocol, wfNatBaseState=wfNatBaseState, wfNatAddressRangeTable=wfNatAddressRangeTable, wfNatIfState=wfNatIfState, wfNatLocalAddrRangeDelete=wfNatLocalAddrRangeDelete, wfNatIfRxCount=wfNatIfRxCount, wfNatAddrRangeDisable=wfNatAddrRangeDisable, wfNatSynPeerDelete=wfNatSynPeerDelete, wfNatMapEntry=wfNatMapEntry, wfNatTranslationPoolDelete=wfNatTranslationPoolDelete, wfNatMappingTable=wfNatMappingTable, wfNatIntfDisable=wfNatIntfDisable, wfNatMapLocalPort=wfNatMapLocalPort, wfNatMapGlobalAddress=wfNatMapGlobalAddress, wfNatAddressRangeUnnumCct=wfNatAddressRangeUnnumCct, wfNatSrcAddressFilterPrefixLen=wfNatSrcAddressFilterPrefixLen, wfNatIfDelete=wfNatIfDelete, wfNatAddrRangeEntry=wfNatAddrRangeEntry, wfNatStaticMappingStaticNextHop=wfNatStaticMappingStaticNextHop, wfNatBaseFtpSessionCount=wfNatBaseFtpSessionCount, wfNatStaticMappingOutDomain=wfNatStaticMappingOutDomain, wfNatMappingProtocol=wfNatMappingProtocol, wfNatBaseMapTimeout=wfNatBaseMapTimeout, wfNatMapTimeout=wfNatMapTimeout, wfNatAddrRangePrefixLen=wfNatAddrRangePrefixLen, wfNatAddressRangeTransPool=wfNatAddressRangeTransPool, wfNatLocalAddrRangeNto1Addr=wfNatLocalAddrRangeNto1Addr, wfNatTranslationPoolTable=wfNatTranslationPoolTable, wfNatIntfState=wfNatIntfState, wfNatTranslationPoolIndex=wfNatTranslationPoolIndex, wfNatBaseMapMaxTimeout=wfNatBaseMapMaxTimeout, wfNatBaseSynKeepAlvInterval=wfNatBaseSynKeepAlvInterval, wfNatStaticMapGlobalPort=wfNatStaticMapGlobalPort, wfNatStaticMappingTransPort=wfNatStaticMappingTransPort, wfNatIfType=wfNatIfType, wfNatAddressRangeNto1Addr=wfNatAddressRangeNto1Addr, wfNatSynPeerTransSent=wfNatSynPeerTransSent, wfNatMapLocalAddress=wfNatMapLocalAddress, wfNatBaseLocalToLocalEnable=wfNatBaseLocalToLocalEnable, wfNatIntfDomain=wfNatIntfDomain, wfNatLocalAddrRangeDisable=wfNatLocalAddrRangeDisable, wfNatIntfTable=wfNatIntfTable, wfNatMapProtocol=wfNatMapProtocol, wfNatSynPeerAddress=wfNatSynPeerAddress, wfNatBaseSynRouterID=wfNatBaseSynRouterID, wfNatMappingTransAddress=wfNatMappingTransAddress, wfNatSynPeerRouterID=wfNatSynPeerRouterID, wfNatIntfDelete=wfNatIntfDelete, wfNatBaseSynPort=wfNatBaseSynPort, wfNatIfPktDropCount=wfNatIfPktDropCount, wfNatIfCircuit=wfNatIfCircuit, wfNatStaticMapDisable=wfNatStaticMapDisable, wfNatStaticMappingOrigAddress=wfNatStaticMappingOrigAddress, wfNatLocalAddrRangeAddress=wfNatLocalAddrRangeAddress, wfNatMappingOrigPort=wfNatMappingOrigPort, wfNatBaseSynchronization=wfNatBaseSynchronization, wfNatTranslationPoolPrefixLen=wfNatTranslationPoolPrefixLen, wfNatSynPeerState=wfNatSynPeerState, wfNatBaseMapDynMapsCount=wfNatBaseMapDynMapsCount, wfNatMapRxCount=wfNatMapRxCount, wfNatAddressRangeDomain=wfNatAddressRangeDomain, wfNatMappingOutDomain=wfNatMappingOutDomain, wfNatSrcAddressFilterTransPoolSelector=wfNatSrcAddressFilterTransPoolSelector, wfNatLocalAddrRangeTable=wfNatLocalAddrRangeTable, wfNatSrcAddressFilterAddress=wfNatSrcAddressFilterAddress, wfNatBaseInstallUniPrivAddr=wfNatBaseInstallUniPrivAddr, wfNatMappingMode=wfNatMappingMode, wfNatIfEntry=wfNatIfEntry, wfNatStaticMapLocalPort=wfNatStaticMapLocalPort, wfNatSynPeerTransRecd=wfNatSynPeerTransRecd, wfNatAddressRangeIndex=wfNatAddressRangeIndex, wfNatStaticMapGlobalAddress=wfNatStaticMapGlobalAddress, wfNatLocalAddrRangePrefixLen=wfNatLocalAddrRangePrefixLen, wfNatSrcAddressFilterUnnumCct=wfNatSrcAddressFilterUnnumCct, wfNatMappingTxCount=wfNatMappingTxCount, wfNatIntfTxCount=wfNatIntfTxCount, wfNatSrcAddressFilterIndex=wfNatSrcAddressFilterIndex, wfNatTranslationPoolAddress=wfNatTranslationPoolAddress, wfNatStaticMappingEntry=wfNatStaticMappingEntry, wfNatStaticMapDelete=wfNatStaticMapDelete, wfNatStaticMappingInDomain=wfNatStaticMappingInDomain, wfNatSrcAddressFilterEntry=wfNatSrcAddressFilterEntry, wfNatIntfEntry=wfNatIntfEntry, wfNatBaseLogMask=wfNatBaseLogMask, wfNatAddrRangeTable=wfNatAddrRangeTable, wfNatStaticMappingDelete=wfNatStaticMappingDelete, wfNatAddrRangeAddress=wfNatAddrRangeAddress, wfNatAddrRangeDelete=wfNatAddrRangeDelete, wfNatSynPeerEntry=wfNatSynPeerEntry, wfNatStaticMappingProtocol=wfNatStaticMappingProtocol, wfNatStaticMapTable=wfNatStaticMapTable, wfNatStaticMapLocalAddress=wfNatStaticMapLocalAddress, wfNatMapTable=wfNatMapTable, wfNatStaticMappingTable=wfNatStaticMappingTable, wfNatMapMode=wfNatMapMode, wfNatSrcAddressFilterDelete=wfNatSrcAddressFilterDelete)
