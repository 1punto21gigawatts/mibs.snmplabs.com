#
# PySNMP MIB module PDN-ATMM4EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-ATMM4EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
atmfM4TcProtoHistEntry, atmfM4VcTestEntry, atmfM4TcProtoCurrEntry, atmfM4VpTestEntry = mibBuilder.importSymbols("ATM-FORUM-SNMP-M4-MIB", "atmfM4TcProtoHistEntry", "atmfM4VcTestEntry", "atmfM4TcProtoCurrEntry", "atmfM4VpTestEntry")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdnAtm, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdnAtm")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter64, Unsigned32, iso, Gauge32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, MibIdentifier, ModuleIdentity, TimeTicks, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "iso", "Gauge32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
pdnAtmfM4ExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6))
pdnAtmfM4ExtMIB.setRevisions(('2002-08-15 00:00', '2001-03-08 00:00', '2000-09-26 00:00', '2000-09-22 00:00', '2000-09-21 00:00', '2000-09-08 00:00', '2000-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnAtmfM4ExtMIB.setRevisionsDescriptions(('P. Easwar o Added New Table pdnAtmfM4VpLoopbackTestTable. ', 'R.A.Bowhall o Added error code of adminStatusDisabled(8). ', 'R. Steinberger o Added size to pdnAtmfM4Vc1CellLoopReportedLocation. ', 'R. Steinberger o Added error code of testTimeOut(7). o Added description of use of pdnAtmfM4Vc1CellLoopTable o Changed pdnAtmfM4Vc1CellLoopReportedLocation type to meet actual M4 definition of OCTET STRING(SIZE(16)) o Added the pdnAtmfM4LoopbackLocationTable ', 'J.Strain o Added E2E and SEG as Multiple OAM Cell Tests o documented mapping of atmfM4VcTestType to the corresponding atmfM4VcTestCode results table ', 'R. Steinberger o Cleaned tabs throughout document. o Fixed naming convention. o Added pdnAtmfM4Vc1CellLoopTable for ATM OAM loopbacks that send only single test cell. o Added conformance section. ', 'Z. Pan o added augmented atmfM4VcTestTable for ATM OAM loopback test. ',))
if mibBuilder.loadTexts: pdnAtmfM4ExtMIB.setLastUpdated('200103080000Z')
if mibBuilder.loadTexts: pdnAtmfM4ExtMIB.setOrganization('Paradyne Corporation MIB Working Group')
if mibBuilder.loadTexts: pdnAtmfM4ExtMIB.setContactInfo('Paradyne Corporation 8545 126th Avenue North Largo, FL 33773 www.paradyne.com General Comments to: mibwg_team@eng.paradyne.com')
if mibBuilder.loadTexts: pdnAtmfM4ExtMIB.setDescription('This MIB Module extends the ATM-FORUM-SNMP-M4-MI defined in the Atm Forums M4 Mib ')
pdnAtmfM4ExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1))
pdnAtmfM4ExtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 2))
pdnAtmfM4ExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3))
pdnAtmfM4ExtTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 2, 0))
class PdnAtmfM4TestErrorCode(TextualConvention, Integer32):
    description = 'The specific error codes related to attempting to run a test. The codes have the following meanings: noError(0) -- No Error Occurred badIfIndex(1) -- Specified interface does not exist noVccFound(2) -- The Vcc does not exist on the interface notOwner(3) -- Not the current owner of the test noResourceAvailable(4) -- Device memory allocation failure noLoopbackAllocated(5) -- Could not start the test testCompleted(6) -- Test completed or stopped normally testTimeOut(7) -- Test unsuccessfully due to timeout adminStatusDisabled(8) -- ifAdminStatus is Disabled '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noError", 0), ("badIfIndex", 1), ("noVccFound", 2), ("notOwner", 3), ("noResourceAvailable", 4), ("noLoopbackAllocated", 5), ("testCompleted", 6), ("testTimeOut", 7), ("adminStatusDisabled", 8))

pdnAtmfM4TcProtoCurrExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1), )
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrExtTable.setDescription('The Paradyne Extension to the atmfM4TcProtoCurrTable of the ATM-FORUM-SNMP-M4-MIB.')
pdnAtmfM4TcProtoCurrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1), )
atmfM4TcProtoCurrEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrExtEntry"))
pdnAtmfM4TcProtoCurrExtEntry.setIndexNames(*atmfM4TcProtoCurrEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrExtEntry.setDescription('The Paradyne Extension to the atmfM4TcProtoCurrTable of the ATM-FORUM-SNMP-M4-MIB.')
pdnAtmfM4TcProtoCurrCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCellIns.setDescription('The number of ATM cells received on this interface since the start of this interval')
pdnAtmfM4TcProtoCurrCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCellOuts.setDescription('The number of ATM cells sent on this interface since the start of this interval')
pdnAtmfM4TcProtoCurrInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrInDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrInDiscards.setDescription('The number of RX ATM cells dropped on this interface since the start of this interval')
pdnAtmfM4TcProtoCurrOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrOutDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrOutDiscards.setDescription('The number of TX ATM cells dropped on this interface since the start of this interval')
pdnAtmfM4TcProtoCurrLCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrLCDEvents.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrLCDEvents.setDescription('The number of Loss of Cell Delineation (LCD) event occurred on this interface since the start of this interval')
pdnAtmfM4TcProtoCurrUnknownCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrUnknownCells.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrUnknownCells.setDescription('The number of unknown Cells received on this interface since the start of this interval')
pdnAtmfM4TcProtoCurrCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCorrectedHEC.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoCurrCorrectedHEC.setDescription('The number of Cell with corrected HEC received on this interface since the start of this interval')
pdnAtmfM4TcProtoHistExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2), )
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistExtTable.setDescription('The Paradyne Extension to the atmfM4TcProtoHistTable of the ATM-FORUM-SNMP-M4-MIB.')
pdnAtmfM4TcProtoHistExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1), )
atmfM4TcProtoHistEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistExtEntry"))
pdnAtmfM4TcProtoHistExtEntry.setIndexNames(*atmfM4TcProtoHistEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistExtEntry.setDescription('The Paradyne Extension to the atmfM4TcProtoHistTable of the ATM-FORUM-SNMP-M4-MIB.')
pdnAtmfM4TcProtoHistCellIns = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCellIns.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCellIns.setDescription('The number of ATM cells received on this interface during this interval')
pdnAtmfM4TcProtoHistCellOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCellOuts.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCellOuts.setDescription('The number of ATM cells sent on this interface during this interval')
pdnAtmfM4TcProtoHistInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistInDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistInDiscards.setDescription('The number of RX ATM cells dropped on this interface during this interval')
pdnAtmfM4TcProtoHistOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistOutDiscards.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistOutDiscards.setDescription('The number of TX ATM cells dropped on this interface during this interval')
pdnAtmfM4TcProtoHistLCDEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistLCDEvents.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistLCDEvents.setDescription('The number of Loss of Cell Delineation (LCD) event occurred on this interface during this interval')
pdnAtmfM4TcProtoHistUnknownCells = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistUnknownCells.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistUnknownCells.setDescription('The number of unknown Cells received on this interface since the start of this interval')
pdnAtmfM4TcProtoHistCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCorrectedHEC.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcProtoHistCorrectedHEC.setDescription('The number of Cell with corrected HEC received on this interface during this interval')
pdnAtmfM4TestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 3))
pdnAtmfM4TestOAMLoopbackSegMultiCell = ObjectIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 3, 1))
if mibBuilder.loadTexts: pdnAtmfM4TestOAMLoopbackSegMultiCell.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TestOAMLoopbackSegMultiCell.setDescription('This identifies an OAM Loopback Test on a VPL, VPC, VCL, or VCC termination point, using a segment OAM cell. The test type must have appended to it a code that uniquely identifies an intermediate point responsible for looping back the cell. If this is absent, the loopback is performed at the end of the segment or connection. E.g., the OID { pdnAtmfM4TestOAMLoopbackSegMultiCell 5 } identifies that the loopback should be performed at the intermediate point labeled 5.')
pdnAtmfM4TestOAMLoopbackE2EMultiCell = ObjectIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 3, 2))
if mibBuilder.loadTexts: pdnAtmfM4TestOAMLoopbackE2EMultiCell.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TestOAMLoopbackE2EMultiCell.setDescription('This identifies an OAM Loopback Test on a VPL, VPC, VCL, or VCC termination point, using an end-to-end OAM cell.')
pdnAtmfM4VcLoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4), )
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestTable.setDescription('This table contains input and results for OAM loopback tests. There can be only one test running per ATM VCC This table should be used in conjunction with atmfM4VcTestTable with all the semantics of atmfM4VcTestTable.')
pdnAtmfM4VcLoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1), )
atmfM4VcTestEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestEntry"))
pdnAtmfM4VcLoopbackTestEntry.setIndexNames(*atmfM4VcTestEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestEntry.setDescription('An entry containing objects for test results for ATM OAM loopback test')
pdnAtmfM4VcLoopbackTestElpsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestElpsTime.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestElpsTime.setDescription('This object contains the time that has elapsed since the test started.')
pdnAtmfM4VcLoopbackTestCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestCellsSent.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestCellsSent.setDescription('This object specifies a count of the number of test cells that have been sent. The value of this object stops increasing when it reaches its maximum value.')
pdnAtmfM4VcLoopbackTestCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestCellsRcvd.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestCellsRcvd.setDescription('This object specifies a count of the number of test cells that have been received. The value of this object stops increasing when it reaches its maximum value.')
pdnAtmfM4VcLoopbackTestMinRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestMinRTDelay.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestMinRTDelay.setDescription('This object contains the value of the shortest round trip delay since the test has been started. It is calculated only on the cells that have been received. Cells that were dropped are not counted.')
pdnAtmfM4VcLoopbackTestMaxRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestMaxRTDelay.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestMaxRTDelay.setDescription('This object contains the value of the longest round trip delay since the test has been started. It is calculated only on the cells that have been received. Cells that were dropped are not counted.')
pdnAtmfM4VcLoopbackTestAvgRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestAvgRTDelay.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestAvgRTDelay.setDescription('This object contains the value of the average round trip delay since the test has been started. It is calculated only on the cells that have been received. Cells that were dropped are not counted.')
pdnAtmfM4VcLoopbackTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 4, 1, 7), PdnAtmfM4TestErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestErrorCode.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestErrorCode.setDescription('This object contains the specific error code on the test result.')
pdnAtmfM4Vc1CellLoopTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5), )
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopTable.setDescription('This table contains input and results for single cell OAM loopback tests. There can be only one test running per ATM VCC This table should be used in conjunction with atmfM4VcTestTable with all the semantics of atmfM4VcTestTable.')
pdnAtmfM4Vc1CellLoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1), )
atmfM4VcTestEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopEntry"))
pdnAtmfM4Vc1CellLoopEntry.setIndexNames(*atmfM4VcTestEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopEntry.setDescription('An entry containing objects for test results for a single cell ATM OAM loopback test')
pdnAtmfM4Vc1CellLoopRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopRTDelay.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopRTDelay.setDescription('This object contains the value of the round trip delay of the the test cell. A value of zero indicates that no cell has been received.')
pdnAtmfM4Vc1CellLoopReportedLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopReportedLocation.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopReportedLocation.setDescription('This object contains the value of the location identifier reported by the received cell.')
pdnAtmfM4Vc1CellLoopErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 5, 1, 3), PdnAtmfM4TestErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopErrorCode.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopErrorCode.setDescription('This object contains the specific error code on the test result.')
pdnAtmfM4LoopbackLocationTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 6), )
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationTable.setDescription('This table contains the ATM OAM loopback location codes for ATM cell layer interfaces.')
pdnAtmfM4LoopbackLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationEntry.setDescription('An entry containing objects for ATM OAM loopback locations.')
pdnAtmfM4LoopbackLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationCode.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationCode.setDescription('This object contains the value of ATM OAM Loopback Location Code')
pdnAtmfM4VpLoopbackTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7), )
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestTable.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestTable.setDescription('This table contains input and results for OAM loopback tests. There can be only one test running per ATM VPC This table should be used in conjunction with atmfM4VpTestTable with all the semantics of atmfM4VpTestTable.')
pdnAtmfM4VpLoopbackTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1), )
atmfM4VpTestEntry.registerAugmentions(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestEntry"))
pdnAtmfM4VpLoopbackTestEntry.setIndexNames(*atmfM4VpTestEntry.getIndexNames())
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestEntry.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestEntry.setDescription('An entry containing objects for test results for ATM OAM loopback test')
pdnAtmfM4VpLoopbackTestElpsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestElpsTime.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestElpsTime.setDescription('This object contains the time that has elapsed since the test started.')
pdnAtmfM4VpLoopbackTestCellsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestCellsSent.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestCellsSent.setDescription('This object specifies a count of the number of test cells that have been sent. The value of this object stops increasing when it reaches its maximum value.')
pdnAtmfM4VpLoopbackTestCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestCellsRcvd.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestCellsRcvd.setDescription('This object specifies a count of the number of test cells that have been received. The value of this object stops increasing when it reaches its maximum value.')
pdnAtmfM4VpLoopbackTestMinRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestMinRTDelay.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestMinRTDelay.setDescription('This object contains the value of the shortest round trip delay since the test has been started. It is calculated only on the cells that have been received. Cells that were dropped are not counted.')
pdnAtmfM4VpLoopbackTestMaxRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestMaxRTDelay.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestMaxRTDelay.setDescription('This object contains the value of the longest round trip delay since the test has been started. It is calculated only on the cells that have been received. Cells that were dropped are not counted.')
pdnAtmfM4VpLoopbackTestAvgRTDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestAvgRTDelay.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestAvgRTDelay.setDescription('This object contains the value of the average round trip delay since the test has been started. It is calculated only on the cells that have been received. Cells that were dropped are not counted.')
pdnAtmfM4VpLoopbackTestErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 1, 7, 1, 7), PdnAtmfM4TestErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestErrorCode.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestErrorCode.setDescription('This object contains the specific error code on the test result.')
pdnAtmfM4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1))
pdnAtmfM4Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 2))
pdnAtmfM4Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 2, 1)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4LoopbackLocationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4Compliance = pdnAtmfM4Compliance.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4Compliance.setDescription('The compliance statement for SNMP entities which support the ATM M4 extensions.')
pdnAtmfM4TcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 1)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrCellIns"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrCellOuts"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrInDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrOutDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrLCDEvents"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrUnknownCells"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoCurrCorrectedHEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4TcCurrGroup = pdnAtmfM4TcCurrGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcCurrGroup.setDescription('The objects in the ATM TC layer current table.')
pdnAtmfM4TcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 2)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistCellIns"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistCellOuts"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistInDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistOutDiscards"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistLCDEvents"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistUnknownCells"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4TcProtoHistCorrectedHEC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4TcHistGroup = pdnAtmfM4TcHistGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4TcHistGroup.setDescription('The objects in the ATM TC layer history table.')
pdnAtmfM4VcLoopbackTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 3)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestElpsTime"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestCellsSent"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestCellsRcvd"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestMinRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestMaxRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestAvgRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VcLoopbackTestErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4VcLoopbackTestGroup = pdnAtmfM4VcLoopbackTestGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VcLoopbackTestGroup.setDescription('The objects in the ATM OAM Loopback Test (multiple cell) table for ATM VCC.')
pdnAtmfM4Vc1CellLoopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 4)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopReportedLocation"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4Vc1CellLoopErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4Vc1CellLoopGroup = pdnAtmfM4Vc1CellLoopGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4Vc1CellLoopGroup.setDescription('The objects in the ATM Single Cell OAM Loopback Test table.')
pdnAtmfM4LoopbackLocationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 5)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4LoopbackLocationCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4LoopbackLocationGroup = pdnAtmfM4LoopbackLocationGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4LoopbackLocationGroup.setDescription('The objects in the ATM Loopback Location table.')
pdnAtmfM4VpLoopbackTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 11, 6, 3, 1, 6)).setObjects(("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestElpsTime"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestCellsSent"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestCellsRcvd"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestMinRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestMaxRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestAvgRTDelay"), ("PDN-ATMM4EXT-MIB", "pdnAtmfM4VpLoopbackTestErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnAtmfM4VpLoopbackTestGroup = pdnAtmfM4VpLoopbackTestGroup.setStatus('current')
if mibBuilder.loadTexts: pdnAtmfM4VpLoopbackTestGroup.setDescription('The objects in the ATM OAM Loopback Test (multiple cell) table for ATM VPC.')
mibBuilder.exportSymbols("PDN-ATMM4EXT-MIB", pdnAtmfM4TcProtoCurrOutDiscards=pdnAtmfM4TcProtoCurrOutDiscards, pdnAtmfM4VcLoopbackTestErrorCode=pdnAtmfM4VcLoopbackTestErrorCode, pdnAtmfM4ExtObjects=pdnAtmfM4ExtObjects, pdnAtmfM4TcProtoHistExtEntry=pdnAtmfM4TcProtoHistExtEntry, pdnAtmfM4VpLoopbackTestCellsRcvd=pdnAtmfM4VpLoopbackTestCellsRcvd, pdnAtmfM4VpLoopbackTestGroup=pdnAtmfM4VpLoopbackTestGroup, pdnAtmfM4VcLoopbackTestAvgRTDelay=pdnAtmfM4VcLoopbackTestAvgRTDelay, pdnAtmfM4Vc1CellLoopRTDelay=pdnAtmfM4Vc1CellLoopRTDelay, pdnAtmfM4TcProtoCurrExtTable=pdnAtmfM4TcProtoCurrExtTable, pdnAtmfM4VpLoopbackTestElpsTime=pdnAtmfM4VpLoopbackTestElpsTime, pdnAtmfM4VcLoopbackTestMaxRTDelay=pdnAtmfM4VcLoopbackTestMaxRTDelay, pdnAtmfM4VpLoopbackTestCellsSent=pdnAtmfM4VpLoopbackTestCellsSent, pdnAtmfM4Vc1CellLoopGroup=pdnAtmfM4Vc1CellLoopGroup, pdnAtmfM4TestOAMLoopbackE2EMultiCell=pdnAtmfM4TestOAMLoopbackE2EMultiCell, pdnAtmfM4ExtMIB=pdnAtmfM4ExtMIB, pdnAtmfM4TcProtoCurrCorrectedHEC=pdnAtmfM4TcProtoCurrCorrectedHEC, pdnAtmfM4VpLoopbackTestAvgRTDelay=pdnAtmfM4VpLoopbackTestAvgRTDelay, pdnAtmfM4Groups=pdnAtmfM4Groups, pdnAtmfM4TestTypes=pdnAtmfM4TestTypes, pdnAtmfM4TcHistGroup=pdnAtmfM4TcHistGroup, pdnAtmfM4TcProtoCurrUnknownCells=pdnAtmfM4TcProtoCurrUnknownCells, pdnAtmfM4TcProtoCurrCellOuts=pdnAtmfM4TcProtoCurrCellOuts, pdnAtmfM4VpLoopbackTestMinRTDelay=pdnAtmfM4VpLoopbackTestMinRTDelay, pdnAtmfM4TcProtoHistLCDEvents=pdnAtmfM4TcProtoHistLCDEvents, pdnAtmfM4Vc1CellLoopTable=pdnAtmfM4Vc1CellLoopTable, pdnAtmfM4VpLoopbackTestMaxRTDelay=pdnAtmfM4VpLoopbackTestMaxRTDelay, pdnAtmfM4VcLoopbackTestCellsRcvd=pdnAtmfM4VcLoopbackTestCellsRcvd, pdnAtmfM4VcLoopbackTestMinRTDelay=pdnAtmfM4VcLoopbackTestMinRTDelay, pdnAtmfM4LoopbackLocationEntry=pdnAtmfM4LoopbackLocationEntry, pdnAtmfM4ExtTrapPrefix=pdnAtmfM4ExtTrapPrefix, pdnAtmfM4LoopbackLocationGroup=pdnAtmfM4LoopbackLocationGroup, pdnAtmfM4VpLoopbackTestTable=pdnAtmfM4VpLoopbackTestTable, pdnAtmfM4Compliance=pdnAtmfM4Compliance, pdnAtmfM4TcProtoHistCorrectedHEC=pdnAtmfM4TcProtoHistCorrectedHEC, PYSNMP_MODULE_ID=pdnAtmfM4ExtMIB, pdnAtmfM4VpLoopbackTestEntry=pdnAtmfM4VpLoopbackTestEntry, pdnAtmfM4VcLoopbackTestCellsSent=pdnAtmfM4VcLoopbackTestCellsSent, pdnAtmfM4TcProtoHistOutDiscards=pdnAtmfM4TcProtoHistOutDiscards, pdnAtmfM4TcProtoHistUnknownCells=pdnAtmfM4TcProtoHistUnknownCells, pdnAtmfM4VcLoopbackTestTable=pdnAtmfM4VcLoopbackTestTable, pdnAtmfM4VcLoopbackTestGroup=pdnAtmfM4VcLoopbackTestGroup, pdnAtmfM4TcProtoCurrInDiscards=pdnAtmfM4TcProtoCurrInDiscards, pdnAtmfM4TestOAMLoopbackSegMultiCell=pdnAtmfM4TestOAMLoopbackSegMultiCell, pdnAtmfM4Vc1CellLoopReportedLocation=pdnAtmfM4Vc1CellLoopReportedLocation, pdnAtmfM4TcProtoCurrLCDEvents=pdnAtmfM4TcProtoCurrLCDEvents, pdnAtmfM4LoopbackLocationCode=pdnAtmfM4LoopbackLocationCode, pdnAtmfM4Vc1CellLoopErrorCode=pdnAtmfM4Vc1CellLoopErrorCode, pdnAtmfM4VcLoopbackTestEntry=pdnAtmfM4VcLoopbackTestEntry, pdnAtmfM4Compliances=pdnAtmfM4Compliances, pdnAtmfM4TcProtoHistExtTable=pdnAtmfM4TcProtoHistExtTable, PdnAtmfM4TestErrorCode=PdnAtmfM4TestErrorCode, pdnAtmfM4Vc1CellLoopEntry=pdnAtmfM4Vc1CellLoopEntry, pdnAtmfM4TcCurrGroup=pdnAtmfM4TcCurrGroup, pdnAtmfM4LoopbackLocationTable=pdnAtmfM4LoopbackLocationTable, pdnAtmfM4VcLoopbackTestElpsTime=pdnAtmfM4VcLoopbackTestElpsTime, pdnAtmfM4VpLoopbackTestErrorCode=pdnAtmfM4VpLoopbackTestErrorCode, pdnAtmfM4TcProtoHistCellIns=pdnAtmfM4TcProtoHistCellIns, pdnAtmfM4ExtTraps=pdnAtmfM4ExtTraps, pdnAtmfM4TcProtoCurrCellIns=pdnAtmfM4TcProtoCurrCellIns, pdnAtmfM4TcProtoHistInDiscards=pdnAtmfM4TcProtoHistInDiscards, pdnAtmfM4TcProtoCurrExtEntry=pdnAtmfM4TcProtoCurrExtEntry, pdnAtmfM4ExtConformance=pdnAtmfM4ExtConformance, pdnAtmfM4TcProtoHistCellOuts=pdnAtmfM4TcProtoHistCellOuts)
