#
# PySNMP MIB module PAIRGAIN-DSLAM-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAIRGAIN-DSLAM-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
pgDSLAMChassis, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgDSLAMChassis")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter64, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Integer32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter64", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Integer32", "TimeTicks", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class TimeSeconds(TextualConvention, Integer32):
    description = 'The value of the pgDSLAMCalendarTime object at which a specific occurrence happened. The specific occurrence must be defined in the description of any object defined using this type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class DisplayString(OctetString):
    pass

class PgDSLAMChassisType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("dslam-co", 2), ("dslam-as5", 3), ("dslam-as3", 4))

class PgDSLAMUnitType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 40, 41, 42, 43, 44, 45, 46, 47, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 50, 51, 52, 53, 31, 32, 33, 34, 35, 36, 37, 38, 39))
    namedValues = NamedValues(("unknown", 1), ("management", 2), ("adsl-cap-frame-8", 3), ("adsl-dmt-frame-8", 4), ("adsl-cap-frame-12", 5), ("adsl-dmt-frame-12", 6), ("hdsl-frame-16", 7), ("hdsl-frame-24", 8), ("adsl-cap-cell-8", 9), ("adsl-dmt-cell-8", 10), ("adsl-cap-cell-12", 11), ("adsl-dmt-cell-12", 12), ("atm-oc3-channel-6", 13), ("t1-circuit-emul-12", 14), ("e1-circuit-emul-12", 15), ("ds3-circuit-emul-6", 16), ("e3-circuit-emul-6", 17), ("t1-higain-lu-12", 18), ("atm-oc3-channel", 40), ("t1-dsx1-channel", 41), ("e1-atm-imux-8-channel", 42), ("sdsl-frame-16", 43), ("sdsl-frame-24", 44), ("ds3-atm-channel", 45), ("idsl-frame-24", 46), ("sdsl-cell-24", 47), ("atm-oc3-line", 19), ("ds3-atm-line", 20), ("e3-atm-line", 21), ("ds3-fr-line", 22), ("e3-fr-line", 23), ("ethernet-10-100", 24), ("t1-atm-imux-6", 25), ("e1-atm-imux-6", 26), ("t1-fr-imux-6", 27), ("e1-fr-imux-6", 28), ("atm-oc12-line", 29), ("hissi-line", 30), ("t1-dsx1-line", 50), ("e1-atm-imux-8-line", 51), ("t1-dsx1-linemgmt", 52), ("pot-splitter", 53), ("adsl-cap-frame-test", 31), ("adsl-dmt-frame-test", 32), ("sdsl-frame-test", 33), ("adsl-cap-cell-test", 34), ("adsl-dmt-cell-test", 35), ("sdsl-cell-test", 36), ("circuit-emul-test", 37), ("fr-line-test", 38), ("cell-line-test", 39))

pgDSLAMChassisType = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 1), PgDSLAMChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMChassisType.setDescription('The chassis type.')
pgDSLAMChassisPsStatus = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("oneFail", 2), ("bothFail", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisPsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMChassisPsStatus.setDescription('The chassis power supply status.')
pgDSLAMChassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("fail", 2), ("ok", 3), ("hightemp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisFanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMChassisFanStatus.setDescription('The status of the chassis cooling fan.')
pgDSLAMSlotConfigTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4), )
if mibBuilder.loadTexts: pgDSLAMSlotConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotConfigTable.setDescription('The DSLAM chassis slot configuration table.')
pgDSLAMSlotConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMSlotNumber"))
if mibBuilder.loadTexts: pgDSLAMSlotConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotConfigEntry.setDescription('Entry in the DSLAM slot configuration table.')
pgDSLAMSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotNumber.setDescription('The chassis slot number. Valid entries are 1-21. The slots are numbered from left to right from 1-21. The DMU is always located in slot 1')
pgDSLAMSlotUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 2), PgDSLAMUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotUnitType.setDescription('The type of Unit this entry represents.')
pgDSLAMSlotUnitSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotUnitSerialNo.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotUnitSerialNo.setDescription('Serial number of the Unit.')
pgDSLAMSlotUnitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMSlotUnitDescr.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotUnitDescr.setDescription('Unit description.')
pgDSLAMSlotHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotHwVer.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotHwVer.setDescription('The hardware revision of the board.')
pgDSLAMSlotFwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotFwVer.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotFwVer.setDescription('The firmware revision of the board.')
pgDSLAMSlotSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotSwVer.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotSwVer.setDescription('The software revision of the board.')
pgDSLAMSlotBoardReset = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMSlotBoardReset.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotBoardReset.setDescription('This indicates the reset state of the board. Writing with the value reset (2) will reset the board.')
pgDSLAMSlotNmCntlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("nmControl", 2), ("testControl", 3), ("notNmControl", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotNmCntlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotNmCntlStatus.setDescription('Tells whether the board is under network management control.')
pgDSLAMSlotIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotIfNumber.setDescription('The number of MIB-II ifEntry maintained by this board.')
pgDSLAMSlotHwID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotHwID.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotHwID.setDescription('The hardware identification number of the board.')
pgDSLAMConfigChangeCnts = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMConfigChangeCnts.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMConfigChangeCnts.setDescription('The number of times a physical configuration change has taken place in the chassis such as the insertion/deinsertion of a Unit. Any events causing a change in the pgDSLAMSlotConfigTable or the pgDSLAMCommonBoardTable should cause this counter to be incremented.')
pgDSLAMConfigLastChange = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMConfigLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMConfigLastChange.setDescription('The value of sysUpTime at the time the most recent physical configuration change occurred.')
pgDSLAMChassisAlarmStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7), )
if mibBuilder.loadTexts: pgDSLAMChassisAlarmStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMChassisAlarmStatTable.setDescription('This table maintains the latest alarm status provided by each channel or line card in the chassis. There is only one alarm status entry per card. That means that the subsequent alarm status generated by the same card will overwrite the previous status stored in the correspondent entry.')
dslamAlarmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMAlarmCardID"))
if mibBuilder.loadTexts: dslamAlarmStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dslamAlarmStatEntry.setDescription('An entry contains the latest alarm status for a channel or line card.')
pgDSLAMAlarmCardID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmCardID.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMAlarmCardID.setDescription('The slot containing the card which generates this alarm.')
pgDSLAMAlarmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMAlarmPortNum.setDescription('Together with the pgDSLAMAlarmCardID this object uniquely identify a port which an alarm condition was detected.')
pgDSLAMAlarmStatSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("minor", 2), ("major", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmStatSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMAlarmStatSeverity.setDescription('The severity of the alarm reported by the channel or line card.')
pgDSLAMAlarmTrapOID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 7, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAlarmTrapOID.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMAlarmTrapOID.setDescription('The value of this object uniquely identify the type of alarm generated by the channel or line card. It is the same trap OID used to generate the SNMP trap when the alarm threshold value was exceeded.')
pgDSLAMChassisLEDStat = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisLEDStat.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMChassisLEDStat.setDescription("The octet within the value of this object specifies a set of eight LEDs. Within the octet, each bit represents the status of a LED on the front panel. Following is the bit-map: Lower octet: bit 0 : critical alarm LED bit 1 : major alarm LED bit 2 : minor alarm LED bit 3 : power minor alarm LED bit 4 : input power 1 bit 5 : input power 2 bit 6 : fuse alarm 1 bit 7 : fuse alarm 2 Upper octet: bit 0 : Alarm Cut Off bit 1 : abnormal bit 2 : fault bit 3 : external alarm bit 4 : fan alarm 1 bit 5 : fan alarm 2 bit 6 : fan alarm 3 bit 7 : fan alarm 4 If a bit has a value of '1' then the correspondant LED is on and '0' is off.")
pgDSLAMCalendarTime = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMCalendarTime.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMCalendarTime.setDescription('The current date and time indicated by seconds since 1900.1.1 00:00:00 ')
pgDSLAMSlotStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10), )
if mibBuilder.loadTexts: pgDSLAMSlotStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotStatTable.setDescription('The state of slots within this chassis.')
pgDSLAMSlotStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMSlotID"))
if mibBuilder.loadTexts: pgDSLAMSlotStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotStatEntry.setDescription('An entry contains the information of a specified slot.')
pgDSLAMSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotID.setDescription('The slot number.')
pgDSLAMSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("notPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMSlotStatus.setDescription('The status of the specified slot. unknown - uncertain state. up - the card plugged in this slot is up and running. down - the card is not functioning. notPresent - there is no card plugged in this slot.')
pgDSLAMChassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMChassisTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMChassisTemperature.setDescription('The current temperature inside the chassis in Centigrade.')
pgDSLAMFileDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12), )
if mibBuilder.loadTexts: pgDSLAMFileDirectoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFileDirectoryTable.setDescription('The file directory for each slot.')
pgDSLAMFileDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12, 1), ).setIndexNames((0, "PAIRGAIN-DSLAM-CHASSIS-MIB", "pgDSLAMFileDirectorySlotID"))
if mibBuilder.loadTexts: pgDSLAMFileDirectoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFileDirectoryEntry.setDescription('An entry contains the file directory of a specified slot.')
pgDSLAMFileDirectorySlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMFileDirectorySlotID.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFileDirectorySlotID.setDescription('The slot number for the file directory.')
pgDSLAMFileDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMFileDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFileDirectory.setDescription('The file directory.')
pgDSLAMFsSlotID = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFsSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFsSlotID.setDescription('The slot number for the file operation.')
pgDSLAMFsFileName = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFsFileName.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFsFileName.setDescription('The file name for the file operation.')
pgDSLAMFsAction = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMFsAction.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMFsAction.setDescription('The action for the file operation.')
pgDSLAMCalendarTimeOs = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pgDSLAMCalendarTimeOs.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMCalendarTimeOs.setDescription('A date-time format. field octets contents range ----- ------ -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 For example, Tuesday May 26, 1992 at 1:30:15 PM would be displayed as: 1992-5-26,13:30:15')
pgDSLAMAllSlotLED = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 9, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 568))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgDSLAMAllSlotLED.setStatus('mandatory')
if mibBuilder.loadTexts: pgDSLAMAllSlotLED.setDescription("This object reflects the current status of all the front panel LED's on all the slot of the Avidia Shelf. The Semantics of the octet-string is as described below. It is set of following structure. First Octet - SlotID Second Octet - CardType PgDSLAMUnitType Third Octet - Number of Bytes Used by the Slot LED Status. Fourth Octet - Status of LED for port1 Fifth Octet - Status of LED for port2 .... .... till depending on the Number of port on the card. LED Status in encoded as a bit map described below Bits 0-3 represent the State (0000-off,0001-on,0011-Blinking) Bits 4-7 represent the Color (0000-clear,0001-green,0011-yellow,0100-red) For AMC two octet will be used to represent the LED Status Lower octet: bit 0 : critical alarm LED bit 1 : major alarm LED bit 2 : minor alarm LED bit 3 : power minor alarm LED bit 4 : input power 1 bit 5 : input power 2 bit 6 : fuse alarm 1 bit 7 : fuse alarm 2 Upper octet: bit 0 : Alarm Cut Off bit 1 : abnormal bit 2 : fault bit 3 : external alarm bit 4 : fan alarm 1 bit 5 : fan alarm 2 bit 6 : fan alarm 3 bit 7 : fan alarm 4 If a bit has a value of '1' then the correspondant LED is on and '0' is off. For OC-3 each port will have three LED's Tx,Rx,Sync and one APS")
mibBuilder.exportSymbols("PAIRGAIN-DSLAM-CHASSIS-MIB", dslamAlarmStatEntry=dslamAlarmStatEntry, pgDSLAMSlotConfigTable=pgDSLAMSlotConfigTable, pgDSLAMCalendarTimeOs=pgDSLAMCalendarTimeOs, TimeSeconds=TimeSeconds, pgDSLAMFileDirectoryTable=pgDSLAMFileDirectoryTable, pgDSLAMSlotNumber=pgDSLAMSlotNumber, pgDSLAMChassisTemperature=pgDSLAMChassisTemperature, pgDSLAMSlotUnitDescr=pgDSLAMSlotUnitDescr, pgDSLAMFsFileName=pgDSLAMFsFileName, pgDSLAMSlotUnitSerialNo=pgDSLAMSlotUnitSerialNo, pgDSLAMChassisLEDStat=pgDSLAMChassisLEDStat, pgDSLAMSlotBoardReset=pgDSLAMSlotBoardReset, pgDSLAMSlotHwVer=pgDSLAMSlotHwVer, pgDSLAMAlarmCardID=pgDSLAMAlarmCardID, pgDSLAMChassisType=pgDSLAMChassisType, pgDSLAMCalendarTime=pgDSLAMCalendarTime, pgDSLAMAlarmPortNum=pgDSLAMAlarmPortNum, pgDSLAMSlotStatTable=pgDSLAMSlotStatTable, pgDSLAMSlotSwVer=pgDSLAMSlotSwVer, pgDSLAMSlotHwID=pgDSLAMSlotHwID, pgDSLAMFsAction=pgDSLAMFsAction, pgDSLAMConfigLastChange=pgDSLAMConfigLastChange, pgDSLAMSlotUnitType=pgDSLAMSlotUnitType, pgDSLAMSlotStatEntry=pgDSLAMSlotStatEntry, pgDSLAMFileDirectoryEntry=pgDSLAMFileDirectoryEntry, pgDSLAMAllSlotLED=pgDSLAMAllSlotLED, pgDSLAMChassisFanStatus=pgDSLAMChassisFanStatus, pgDSLAMFsSlotID=pgDSLAMFsSlotID, PgDSLAMUnitType=PgDSLAMUnitType, pgDSLAMConfigChangeCnts=pgDSLAMConfigChangeCnts, pgDSLAMAlarmStatSeverity=pgDSLAMAlarmStatSeverity, pgDSLAMSlotStatus=pgDSLAMSlotStatus, pgDSLAMChassisAlarmStatTable=pgDSLAMChassisAlarmStatTable, pgDSLAMSlotID=pgDSLAMSlotID, pgDSLAMFileDirectorySlotID=pgDSLAMFileDirectorySlotID, pgDSLAMSlotConfigEntry=pgDSLAMSlotConfigEntry, pgDSLAMAlarmTrapOID=pgDSLAMAlarmTrapOID, pgDSLAMSlotNmCntlStatus=pgDSLAMSlotNmCntlStatus, PgDSLAMChassisType=PgDSLAMChassisType, pgDSLAMFileDirectory=pgDSLAMFileDirectory, pgDSLAMSlotIfNumber=pgDSLAMSlotIfNumber, DisplayString=DisplayString, pgDSLAMChassisPsStatus=pgDSLAMChassisPsStatus, pgDSLAMSlotFwVer=pgDSLAMSlotFwVer)
