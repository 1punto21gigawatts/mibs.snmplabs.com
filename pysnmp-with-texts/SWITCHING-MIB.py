#
# PySNMP MIB module SWITCHING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCHING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
Ipv6AddressPrefix, Ipv6Address = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6Address")
VlanId, dot1qFdbId, dot1qVlanIndex, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "dot1qFdbId", "dot1qVlanIndex", "VlanIndex")
switch, AgentPortMask = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch", "AgentPortMask")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, TimeTicks, Bits, NotificationType, Integer32, Gauge32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "TimeTicks", "Bits", "NotificationType", "Integer32", "Gauge32", "iso", "MibIdentifier")
PhysAddress, MacAddress, DisplayString, RowStatus, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "MacAddress", "DisplayString", "RowStatus", "TruthValue", "DateAndTime", "TextualConvention")
switching = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 1))
if mibBuilder.loadTexts: switching.setLastUpdated('201108310000Z')
if mibBuilder.loadTexts: switching.setOrganization('QCT')
if mibBuilder.loadTexts: switching.setContactInfo('QCT LLC 47709 Fremont Boulevard, Fremont, CA 94538 TOLL FREE: 855-QCT-MUST Tel: +1 510-270-6111 FAX: +1 510-270-6161 WEB: www.QuantaQCT.com')
if mibBuilder.loadTexts: switching.setDescription('The QCI Private MIB for Switching')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

class VlanList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight vlans, with the first octet specifying vlans 1 through 8, the second octet specifying vlans 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered vlan, and the least significant bit represents the highest numbered vlan. Thus, each vlan supported is represented by a single bit within the value of this object. If that bit has a value of '1' then the associated port is in that vlan; the port is not included if the vlans bit has a value of '0'."
    status = 'current'

agentInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1))
agentInventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1))
agentInventorySysDescription = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySysDescription.setStatus('current')
if mibBuilder.loadTexts: agentInventorySysDescription.setDescription("The switch's Inventory system description. ")
agentInventoryMachineType = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineType.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineType.setDescription('Type of the Machine used in the Switch ')
agentInventoryMachineModel = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMachineModel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMachineModel.setDescription("The switch's Machine Model. ")
agentInventorySerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventorySerialNumber.setDescription('Serial number of the switch.')
agentInventoryFRUNumber = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryFRUNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryFRUNumber.setDescription('FRU Number of the switch')
agentInventoryMaintenanceLevel = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setStatus('current')
if mibBuilder.loadTexts: agentInventoryMaintenanceLevel.setDescription("The switch's Inventory Maintenance Level")
agentInventoryPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryPartNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryPartNumber.setDescription("The switch's Inventory Part Number")
agentInventoryHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventoryHardwareVersion.setDescription('Lists the version of hardware of this unit. This is a platform dependant string.')
agentInventoryBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentInventoryBurnedInMacAddress.setDescription('Burned-In MAC Address')
agentInventoryOperatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: agentInventoryOperatingSystem.setDescription('Operating System running on this unit')
agentInventoryNetworkProcessingDevice = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setStatus('current')
if mibBuilder.loadTexts: agentInventoryNetworkProcessingDevice.setDescription('Network Processing Device for this unit')
agentInventoryAdditionalPackages = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setStatus('current')
if mibBuilder.loadTexts: agentInventoryAdditionalPackages.setDescription('Lists additional functional packages available on this unit.')
agentInventorySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventorySoftwareVersion.setDescription('Lists the version of software loaded on this unit.')
agentInventoryManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryManufacturer.setStatus('current')
if mibBuilder.loadTexts: agentInventoryManufacturer.setDescription('Name of the Manufacturer of this unit')
agentTrapLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2))
agentTrapLogTotal = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotal.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotal.setDescription('The total number of traps sent since last reset.')
agentTrapLogTotalSinceLastViewed = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTotalSinceLastViewed.setDescription('The number of traps sent since last viewed.')
agentTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2, 4), )
if mibBuilder.loadTexts: agentTrapLogTable.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTable.setDescription('Agent Trap Log')
agentTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2, 4, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentTrapLogIndex"))
if mibBuilder.loadTexts: agentTrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogEntry.setDescription('Agent trap log entry')
agentTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogIndex.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogIndex.setDescription('Unique index of trap entry')
agentTrapLogSystemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogSystemTime.setDescription('System uptime when trap was sent. This entry shows how long the system has been up when the trap occurred.')
agentTrapLogTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTrapLogTrap.setStatus('current')
if mibBuilder.loadTexts: agentTrapLogTrap.setDescription('Description of the trap sent.')
agentSupportedMibTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 3), )
if mibBuilder.loadTexts: agentSupportedMibTable.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibTable.setDescription('Supported MIB table')
agentSupportedMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 3, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSupportedMibIndex"))
if mibBuilder.loadTexts: agentSupportedMibEntry.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibEntry.setDescription('Supported MIB entry')
agentSupportedMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibIndex.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibIndex.setDescription('Unique index of the Supported MIB entry')
agentSupportedMibName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibName.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibName.setDescription('The name of the MIB (RFC or IEEE) that is supported.')
agentSupportedMibDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSupportedMibDescription.setStatus('current')
if mibBuilder.loadTexts: agentSupportedMibDescription.setDescription('Description of the MIB (RFC or IEEE) that is supported.')
agentPortStatsRateGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 8))
agentPortStatsRateTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 8, 1), )
if mibBuilder.loadTexts: agentPortStatsRateTable.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateTable.setDescription('')
agentPortStatsRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentPortStatsRateEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateEntry.setDescription('')
agentPortStatsRateHCBitsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 8, 1, 1, 9), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondRx.setDescription('The number of bits per second received. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateHCBitsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 8, 1, 1, 10), Counter64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCBitsPerSecondTx.setDescription('The number of bits per second transmitted. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateHCPacketsPerSecondRx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 8, 1, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondRx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondRx.setDescription('The number of packets per second received. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentPortStatsRateHCPacketsPerSecondTx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 8, 1, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondTx.setStatus('current')
if mibBuilder.loadTexts: agentPortStatsRateHCPacketsPerSecondTx.setDescription('The number of packets per second transmitted. This value is an exponentially weighted average and is affected by the configured agentPortLoadStatsInterval.')
agentSwitchCpuProcessGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4))
agentSwitchCpuProcessMemFree = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemFree.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessMemFree.setDescription(' The total memory free for utilization in KBytes.')
agentSwitchCpuProcessMemAvailable = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2)).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessMemAvailable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessMemAvailable.setDescription(' The total memory available in KBytes.')
agentSwitchCpuProcessRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThreshold.setDescription('The CPU Rising utilization threshold in percentage. A zero percent threshold indicates CPU Utilization Notification feature is disabled. A notification is triggered when the total CPU utilization exceeds this threshold over the configured Rising threshold interval. If the Rising threshold is configured to be less than the Falling threshold, the Falling threshold is set equal to the Rising threshold.')
agentSwitchCpuProcessRisingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessRisingThresholdInterval.setDescription('The CPU Rising threshold interval in seconds. The time interval is configured in multiples of 5 seconds. A zero Rising interval indicates CPU Utilization Notification feature is disabled.')
agentSwitchCpuProcessFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThreshold.setDescription("The CPU Falling utilization threshold in percentage. Configuration of this object value is optional. Value '0' is not allowed for configuration, if the Rising threshold is non-zero. If the Falling threshold is configured to be greater than the Rising threshold, the Rising threshold is set equal to the Falling threshold. If the Falling threshold is not configured, it takes the same value as the Rising threshold. A notification is triggered when the total CPU utilization falls below this threshold over the configured Falling threshold interval.")
agentSwitchCpuProcessFallingThresholdInterval = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 86400), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFallingThresholdInterval.setDescription("The CPU Falling threshold interval in seconds. Configuration of this object value is optional. Value '0' is not allowed for configuration, if the Rising interval is non-zero. If the Falling interval is not configured, it takes the same value as the Rising interval. The time interval is configured in multiples of 5 seconds.")
agentSwitchCpuProcessFreeMemoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCpuProcessFreeMemoryThreshold.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessFreeMemoryThreshold.setDescription('The CPU Free Memory threshold in kilobytes. A zero threshold value indicates the CPU Free Memory Notification feature is disabled. Notifications are triggered when the CPU Free Memory falls below the configured threshold and when it rises to 10% above the configured threshold.')
agentSwitchCpuProcessTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 8), )
if mibBuilder.loadTexts: agentSwitchCpuProcessTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessTable.setDescription(' A table of Task and cpu utilization.')
agentSwitchCpuProcessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 8, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchCpuProcessIndex"))
if mibBuilder.loadTexts: agentSwitchCpuProcessEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessEntry.setDescription('Represents entry for a Task Table.')
agentSwitchCpuProcessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchCpuProcessIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessIndex.setDescription('Unique index of process table')
agentSwitchCpuProcessName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessName.setDescription('Name of the process')
agentSwitchCpuProcessPercentageUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilization.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessPercentageUtilization.setDescription('CPU utilization per task in Percentage over a period of 5, 60, 300 seconds, and the Rising threshold period also in seconds, if configured.')
agentSwitchCpuProcessId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessId.setDescription('Process ID')
agentSwitchCpuProcessTotalUtilization = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilization.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuProcessTotalUtilization.setDescription('Total CPU utilization over a period of 5, 60, 300 seconds, and the Rising threshold period also in seconds, if configured.')
agentConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2))
agentCLIConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1))
agentLoginSessionTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: agentLoginSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionTable.setDescription("A table of the switch's login session")
agentLoginSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentLoginSessionIndex"))
if mibBuilder.loadTexts: agentLoginSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionEntry.setDescription('Login Session Entry')
agentLoginSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIndex.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIndex.setDescription('Agent Login Session Index of the switch')
agentLoginSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionUserName.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionUserName.setDescription('Agent Login Session UserName of the switch')
agentLoginSessionConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("serial", 1), ("telnet", 2), ("ssh", 3), ("http", 4), ("https", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionConnectionType.setDescription('Agent Login Session Connection Type of the switch')
agentLoginSessionIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionIdleTime.setDescription('Agent Login Session Idle Time of the switch')
agentLoginSessionSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionSessionTime.setDescription('Agent Login Session Time of the switch')
agentLoginSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLoginSessionStatus.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionStatus.setDescription('Status of the user. active(1) - This connection is active. destroy(6) - Set to this value to disconnect this user.')
agentLoginSessionInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddressType.setDescription('Type of address agentLoginSessionInetAddress is returning. Can be either unknown(0), ipv4(1), or ipv6 (2). Will return unknown(0) in the case of a serial login.')
agentLoginSessionInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 1, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setStatus('current')
if mibBuilder.loadTexts: agentLoginSessionInetAddress.setDescription('Inet Address of the connecting the user is logging in with. Will return a zero-length string in the case of a serial login.')
agentTelnetConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 2))
agentTelnetLoginTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setStatus('current')
if mibBuilder.loadTexts: agentTelnetLoginTimeout.setDescription('Telnet login timeout (minutes) Config telnet timeout will set the telnet session timeout value. A session is active as long as the session has not remained idle for the value set. Specify a value from 1 to 160. Note: Changing the timeout value for active sessions does not become effective until the session is reaccessed. Any keystroke will also activate the new timeout duration.')
agentTelnetMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentTelnetMaxSessions.setDescription('Maximum number of Telnet Sessions Config telnet maxsessions is an integer value from 0 to 5 that specifies the maximum number of telnet sessions that can be established. If the value is 0, no Telnet session can be established. ')
agentTelnetAllowNewMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setStatus('current')
if mibBuilder.loadTexts: agentTelnetAllowNewMode.setDescription('Allow new telnet sessions (enable or disable) Config telnet disable means that no new Telnet sessions are to be established. Any already established session remains active until the session is ended or an abnormal network error ends it. ')
agentUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3))
agentUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigCreate.setDescription("Create a new user. When set with a non-empty string, a new user with that name will be created. This object will only return an empty string. This string is limited to alpha-numeric strings (uncluding the '-' and '_' characters).")
agentUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: agentUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigTable.setDescription('User Config Table')
agentUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentUserIndex"))
if mibBuilder.loadTexts: agentUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigEntry.setDescription('User Config Entry')
agentUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentUserIndex.setDescription('Agent User Config Index')
agentUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserName.setStatus('current')
if mibBuilder.loadTexts: agentUserName.setDescription("Agent User Name. This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserPassword.setDescription('Agent User Password This object will return an empty string even if a password is set.')
agentUserAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("suspended", 0), ("read", 1), ("write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentUserAccessMode.setDescription('Agent User Access Mode, access level 0 for Read Acecess(WEB suspended)')
agentUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserStatus.setDescription('Agent User Status. active(1) - This user account is active. destroy(6) - Set to this value to remove this user account.')
agentUserAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hmacmd5", 2), ("hmacsha", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationType.setDescription('SNMPv3 User Authentication. The user passsword must be set to a string greater than or equal to 8 characters for this to be set to anything but none(1). none(1) - no authentication used hmacmd5(2) - Use HMAC-MD5 authentication hmacsha(3) - Use HMAC-SHA authentication')
agentUserEncryptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionType.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionType.setDescription('SNMPv3 User Encryption Can not be set to des(2) if agentUserAuthenticationType is set to none(1). none(1) - no encryption used des(2) - DES encryption used')
agentUserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserEncryptionPassword.setStatus('current')
if mibBuilder.loadTexts: agentUserEncryptionPassword.setDescription('SNMPv3 User Encryption Password This object will return an empty string even if a password is set. agentUserEncryptionType must be set to des(2) before this object can be configured. This object will return an empty string even if a password is set.')
agentUserLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserLockoutStatus.setStatus('current')
if mibBuilder.loadTexts: agentUserLockoutStatus.setDescription('Displays whether the user account is locked due to excessive failed login attempts.')
agentUserPasswordExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setStatus('current')
if mibBuilder.loadTexts: agentUserPasswordExpireTime.setDescription("Date and time when the user's password expires (past or present). Only valid when password aging is enabled.")
agentUserSnmpv3AccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read", 1), ("write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserSnmpv3AccessMode.setStatus('current')
if mibBuilder.loadTexts: agentUserSnmpv3AccessMode.setDescription('SNMPv3 Access Mode read(1) - read-only write(2) - read-write')
agentUserPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 1), ValueRangeConstraint(15, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: agentUserPrivilegeLevel.setDescription('Agent User Privilege Level 0 suspended(web login), 1 read-only, 15 read-write.')
agentSerialGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5))
agentSerialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSerialTimeout.setDescription('agentSerialTimeout specifies the maximum connect time(in minutes) without console activity. A value of 0 indicates that a console can be connected indefinitely. The time range is 0 to 160. ')
agentSerialBaudrate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("baud-1200", 1), ("baud-2400", 2), ("baud-4800", 3), ("baud-9600", 4), ("baud-19200", 5), ("baud-38400", 6), ("baud-57600", 7), ("baud-115200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialBaudrate.setStatus('current')
if mibBuilder.loadTexts: agentSerialBaudrate.setDescription(' agentSerialBaudrate specifies the current baud rate at which the serial port will try to connect. The available values are 1200, 2400, 4800, 9600, 19200, 38400,57600, and 115200 baud. ')
agentSerialCharacterSize = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialCharacterSize.setStatus('current')
if mibBuilder.loadTexts: agentSerialCharacterSize.setDescription('agentSerialCharacterSize specifies the number of bits in a character. The number of bits is always 8.')
agentSerialHWFlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSerialHWFlowControlMode.setDescription('agentSerialHardwareFlowControl specifies whether hardware flow-control is enabled or disabled. Hardware Flow Control is always disabled.')
agentSerialStopBits = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialStopBits.setStatus('current')
if mibBuilder.loadTexts: agentSerialStopBits.setDescription(' agentSerialStopBits specifies the number of Stop bits per character. The number of Stop bits is always 1.')
agentSerialParityType = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSerialParityType.setStatus('current')
if mibBuilder.loadTexts: agentSerialParityType.setDescription(' agentSerialParityType specifies the Parity Method used on the Serial Port. The Parity Method is always None. ')
agentSerialTerminalLength = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialTerminalLength.setStatus('current')
if mibBuilder.loadTexts: agentSerialTerminalLength.setDescription(' agentSerialTerminalLength specifies the height of words in terminal screen.')
agentPasswordManagementConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6))
agentPasswordManagementMinLength = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(8, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementMinLength.setDescription('Minimum length for user passwords All new local user passwords must be at least this many characters in length. ')
agentPasswordManagementHistory = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementHistory.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementHistory.setDescription('The number of previous passwords to store for prevention of password reuse. This ensures that each user does not reuse passwords often. A value of 0 indicates that no previous passwords will be stored. ')
agentPasswordManagementAging = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 365))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementAging.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementAging.setDescription('The maximum time that user passwords are valid, in days, from the time the password is set. Once a password expires, the user will be required to enter a new password following the first login after password expiration. A value of 0 indicates that passwords never expire. ')
agentPasswordManagementLockAttempts = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementLockAttempts.setDescription("The number of allowable failed local authentication attempts before the user's account is locked. A value of 0 indicates that user accounts will never be locked. ")
agentPasswordManagementPasswordStrengthCheck = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementPasswordStrengthCheck.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementPasswordStrengthCheck.setDescription('Configures Password Strength Check feature.')
agentPasswordManagementStrengthMinUpperCase = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinUpperCase.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinUpperCase.setDescription('The number of minimum allowable uppercase letters in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMinLowerCase = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinLowerCase.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinLowerCase.setDescription('The number of minimum allowable lowercase letters in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMinNumericNumbers = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinNumericNumbers.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinNumericNumbers.setDescription('The number of minimum allowable numeric numbers in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMinSpecialCharacters = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinSpecialCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinSpecialCharacters.setDescription('The number of minimum allowable special characters in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordManagementStrengthMaxConsecutiveCharacters = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxConsecutiveCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxConsecutiveCharacters.setDescription('The number of maximum consecutive characters can be present in a password. Maximum of 0 means disabling the restriction.')
agentPasswordManagementStrengthMaxRepeatedCharacters = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxRepeatedCharacters.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMaxRepeatedCharacters.setDescription('The number of maximum repeated characters can be present in a password. Maximum of 0 means disabling the restriction.')
agentPasswordManagementStrengthMinCharacterClasses = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinCharacterClasses.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthMinCharacterClasses.setDescription('The number of minimum allowable character classes in a password. Minimum of 0 means no restriction on that set of characters.')
agentPasswordMgmtLastPasswordSetResult = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtLastPasswordSetResult.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtLastPasswordSetResult.setDescription('Retrieves the last password set Result.')
agentPasswordManagementStrengthExcludeKeywordTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 15), )
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordTable.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordTable.setDescription('Represents Password strength restricted keywords from the configurable password.')
agentPasswordManagementStrengthExcludeKeywordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 15, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentPasswordMgmtStrengthExcludeKeyword"))
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordEntry.setStatus('current')
if mibBuilder.loadTexts: agentPasswordManagementStrengthExcludeKeywordEntry.setDescription('Represents Password strength restricted keywords from the configurable password.')
agentPasswordMgmtStrengthExcludeKeyword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeyword.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeyword.setDescription('Specifies the given keyword string restricted from the configurable password.')
agentPasswordMgmtStrengthExcludeKeywordStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 6, 15, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeywordStatus.setStatus('current')
if mibBuilder.loadTexts: agentPasswordMgmtStrengthExcludeKeywordStatus.setDescription('Create the Exclude Keyword Index and configure (Create or Destroy) the keyword to it.')
agentIASUserConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7))
agentIASUserConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigCreate.setDescription("Create a new user. When set with a non-empty string, a new user with that name will be created. This object will only return an empty string. This string is limited to alpha-numeric strings (including the '-' and '_' characters).")
agentIASUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7, 2), )
if mibBuilder.loadTexts: agentIASUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigTable.setDescription('A table for dot1x Client details and associated functionality.')
agentIASUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentIASUserIndex"))
if mibBuilder.loadTexts: agentIASUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIASUserConfigEntry.setDescription('Represents entry for port config table.')
agentIASUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99)))
if mibBuilder.loadTexts: agentIASUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentIASUserIndex.setDescription('IAS user config index. ')
agentIASUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserName.setStatus('current')
if mibBuilder.loadTexts: agentIASUserName.setDescription("IAS user name. This string is limited to alpha-numeric strings (including '-' and '_' characters). ")
agentIASUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserPassword.setStatus('current')
if mibBuilder.loadTexts: agentIASUserPassword.setDescription('IAS user password.')
agentIASUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 1, 7, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIASUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentIASUserStatus.setDescription('IAS User Status. active(1) - This user account is active. destroy(6) - Set to this value to remove this user account.')
agentLagConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2))
agentLagConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigCreate.setDescription('Agent LAG Create. When this object is set with a LAG index value, a new LAG will be created if possible. Get operation on this MIB object returns a null-value, as for the purpose of viewing the LAG name, the user should perform the traversal of agentLagSummaryConfigTable. For this reason the get operation on this object agentLagConfigCreate becomes insignificant.')
agentLagSummaryConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2), )
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigTable.setDescription("A summary table of the switch's LAG config entries")
agentLagSummaryConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentLagSummaryLagIndex"))
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryConfigEntry.setDescription("Switch's LAG config entry")
agentLagSummaryLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLagIndex.setDescription('Agent LAG IfIndex. This value corresponds with the LAG interface in the ifTable.')
agentLagSummaryName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryName.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryName.setDescription('Agent LAG Name. The associated name of the LAG used during creation.')
agentLagSummaryFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryFlushTimer.setDescription('Agent LAG FlushTimer.')
agentLagSummaryLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryLinkTrap.setDescription('Agent LAG LinkTrap. Configures sending Link Up/Down traps when the LAG interface goes Up or Down.')
agentLagSummaryAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAdminMode.setDescription('Agent LAG AdminMode. Administratively enables or disables this LAG interface.')
agentLagSummaryStpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3), ("dot1s", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStpMode.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStpMode.setDescription('Agent LAG StpMode If Dot1d is enabled, the valid values are: dot1d(1), fast(2), and off(3) If Dot1s is enabled, the valid values are: off(3) and dot1s(4)')
agentLagSummaryAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryAddPort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryAddPort.setDescription('Agent LAG AddPort. Set to a non 0 value to add a port to the LAG. Values correspond to ifIndex values in the ifTable. Note: agentPortType for the port to be added must be full duplex and the same speed as previously added port(s), if any.')
agentLagSummaryDeletePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryDeletePort.setDescription('Agent LAG DeletePort. Set to a non 0 value to remove a port from the LAG. Values correspond to ifIndex values in the ifTable.')
agentLagSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryStatus.setDescription('Agent LAG Status. active(1) - This LAG is enabled. destroy(6) - Set to this value to remove the LAG.')
agentLagSummaryType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagSummaryType.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryType.setDescription('Agent LAG Type. static(1) - This LAG is staticly maintained. dynamic(2) - This LAG is dynamicly maintained.')
agentLagSummaryPortStaticCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryPortStaticCapability.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryPortStaticCapability.setDescription('Agent LAG Static Capability enable(1) - Static capability is enabled for this LAG interface disable(2) - Static capability is disabled for this LAG interface')
agentLagSummaryHash = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7, 8, 9))).clone(namedValues=NamedValues(("src-mac", 1), ("dst-mac", 2), ("src-dst-mac", 3), ("src-ip-src-ipport", 7), ("dst-ip-dst-ipport", 8), ("src-dst-ip-ipports", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryHash.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagSummaryHash.setDescription('Agent LAG HASH algorithm. Allow the user to specify which hash distribution algorithm want to be applied all LAG groups. src-mac(1) - Source MAC address. dst-mac(2) - Destination MAC address. src-dst-mac(3) - Source and Destination MAC address. src-ip(4) - Source IP address (IPv4 and IPv6). dst-ip(5) - Destination IP address (IPv4 and IPv6). src-dst-ip(6) - Source and Destination IP address (IPv4 and IPv6). src-ip-src-ipport(7) - Source IP address and Source IP L4 Port (IPv4 and IPv6). dst-ip-dst-ipport(8) - Destination IP address and Destination IP L4 Port (IPv4 and IPv6). src-dst-ip-ipports(9) - Source and Destination IP address and Source IP L4 Port and Destination IP L4 Port (IPv4 and IPv6)(default). src-dst-ip-x1(10) - Source and Destination IP address XOR Mode 1. src-dst-ip-x1(11) - Source and Destination IP address XOR Mode 2. src-dst-ip-x1(12) - Source and Destination IP address XOR Mode 4. src-dst-ip-x1(13) - Source and Destination IP address XOR Mode 8.')
agentLagSummaryHashOption = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryHashOption.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryHashOption.setDescription('LAG Hashing Option. Valid values correspond to 1 (=Source MAC, VLAN, EtherType, and incoming port associated with the packet) 2 (=Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 3 (=Source/Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 4 (=Source IP and Source TCP/UDP fields of the packet) 5 (=Destination IP and Destination TCP/UDP Port fields of the packet) 6 (=Source/Destination IP and source/destination TCP/UDP Port fields of the packet) 7 (=Enhanced hashing mode) Support for particular options may vary by device.')
agentLagSummaryRateLoadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagSummaryRateLoadInterval.setStatus('current')
if mibBuilder.loadTexts: agentLagSummaryRateLoadInterval.setDescription('The length of time for which data is used to compute load statistics. The value is given in seconds, and must be a multiple of 30. The allowable range is 30 to 600 seconds.')
agentLagDetailedConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 3), )
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigTable.setDescription("A detailed table of the switch's LAG config entries")
agentLagDetailedConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 3, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentLagDetailedLagIndex"), (0, "SWITCHING-MIB", "agentLagDetailedIfIndex"))
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedConfigEntry.setDescription("Switch's LAG config entry")
agentLagDetailedLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedLagIndex.setDescription('LAG index')
agentLagDetailedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedIfIndex.setDescription('LAG port index')
agentLagDetailedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortSpeed.setDescription('LAG port speed. See agentPortType for a description and list of valid values.')
agentLagDetailedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentLagDetailedPortStatus.setDescription('LAG port status. active(1) - Actively participating in the LAG. inactive(2) - Not participating in the LAG.')
agentLagConfigStaticCapability = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setStatus('obsolete')
if mibBuilder.loadTexts: agentLagConfigStaticCapability.setDescription('Agent LAG Static Capability. Configures whether Static LAGs are supported on this device.')
agentLagConfigGroupHashOption = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLagConfigGroupHashOption.setStatus('current')
if mibBuilder.loadTexts: agentLagConfigGroupHashOption.setDescription('LAG Hashing Option. Valid values correspond to 1 (=Source MAC, VLAN, EtherType, and incoming port associated with the packet) 2 (=Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 3 (=Source/Destination MAC, VLAN, EtherType, and incoming port associated with the packet) 4 (=Source IP and Source TCP/UDP fields of the packet) 5 (=Destination IP and Destination TCP/UDP Port fields of the packet) 6 (=Source/Destination IP and source/destination TCP/UDP Port fields of the packet) 7 (=Enhanced hashing mode) Support for particular options may vary by device. In BCM 53115 device only options 1 to 3 are support and only MAC address associated with the packet is used. ')
agentNetworkConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3))
agentNetworkIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIPAddress.setDescription("The switch's network ip address")
agentNetworkSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentNetworkSubnetMask.setDescription("The switch's network subnet mask")
agentNetworkDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDefaultGateway.setDescription("The switch's network default gateway")
agentNetworkBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentNetworkBurnedInMacAddress.setDescription("The switch's network Burned-In MAC address")
agentNetworkLocalAdminMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setStatus('deprecated')
if mibBuilder.loadTexts: agentNetworkLocalAdminMacAddress.setDescription("The switch's network locally administered MAC address")
agentNetworkMacAddressType = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("burned-in", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkMacAddressType.setStatus('deprecated')
if mibBuilder.loadTexts: agentNetworkMacAddressType.setDescription("The switch's network Mac Address Type")
agentNetworkConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigProtocol.setDescription("The switch's network config protocol")
agentNetworkWebMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkWebMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkWebMode.setDescription("The switch's network config protocol on next bootup This object has been obsoleted by agentHTTPWebMode.")
agentNetworkJavaMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkJavaMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkJavaMode.setDescription('Configures the use of the Java interface through the Web. This object has been obsoleted by agentHTTPJavaMode.')
agentNetworkMgmtVlan = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: agentNetworkMgmtVlan.setDescription('The VLAN ID through which the switch can be managed using the agentNetworkIPAddress')
agentNetworkConfigProtocolDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renew", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigProtocolDhcpRenew.setStatus('deprecated')
if mibBuilder.loadTexts: agentNetworkConfigProtocolDhcpRenew.setDescription("The switch's network config protocol dhcp is renewed.")
agentNetworkConfigIpDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renew", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigIpDhcpRenew.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigIpDhcpRenew.setDescription('Renew serviceport or interface ip address when dhcp is enabled. Equivalent to ip dhcp restart. deprecate agentNetworkConfigProtocolDhcpRenew and agentServicePortProtocolDhcpRenew')
agentNetworkConfigIpv6DhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renew", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkConfigIpv6DhcpRenew.setStatus('current')
if mibBuilder.loadTexts: agentNetworkConfigIpv6DhcpRenew.setDescription('Renew serviceport or interface ipv6 address when dhcp is enabled. Equivalent to ipv6 dhcp restart.')
agentNetworkIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AdminMode.setDescription('The network port IPv6 administrative state')
agentNetworkIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 13), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6Gateway.setDescription('The network port IPv6 Gateway Address If Ipv6 Address is unspecified (all zero), this means network Ipv6 gateway is not set.')
agentNetworkIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 14), )
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrTable.setDescription('The list of IPv6 address prefixes for the network port.')
agentNetworkIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 14, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentNetworkIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEntry.setDescription('An interface entry containing objects of a particular IPv6 address prefix')
agentNetworkIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 14, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentNetworkIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentNetworkIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentNetworkIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddrStatus.setDescription('')
agentNetworkIpv6AddressAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6AddressAutoConfig.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6AddressAutoConfig.setDescription('The ipv6 address autoconfig allows the device to perform IPv6 stateless address auto-configuration to discover prefixes on the link and then to add the eui-64 based addresses to the network interface.')
agentNetworkIpv6ConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkIpv6ConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentNetworkIpv6ConfigProtocol.setDescription("The switch's network IPv6 config protocol")
agentNetworkDhcp6ClientDuid = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ClientDuid.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ClientDuid.setDescription(' The DHCPv6 Client unique DUID. This value cannot be modified')
agentNetworkStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18))
agentNetworkDhcp6ADVERTISEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesReceived.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been received by the DHCPv6 client on the network port.')
agentNetworkDhcp6REPLYMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesReceived.setDescription(' The no. of DHCPv6 messages of type REPLY that have been received by the DHCPv6 client on the network port.')
agentNetworkDhcp6ADVERTISEMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6ADVERTISEMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been discarded by the DHCPv6 client on the network port.')
agentNetworkDhcp6REPLYMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REPLYMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type REPLY that have been discarded by the DHCPv6 client on the network port.')
agentNetworkDhcp6MalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6MalformedMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6MalformedMessagesReceived.setDescription(' The no. of DHCPv6 messages received malformed by the DHCPv6 client on the network port.')
agentNetworkDhcp6SOLICITMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6SOLICITMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6SOLICITMessagesSent.setDescription(' The no. of DHCPv6 messages of type SOLICIT that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6REQUESTMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REQUESTMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REQUESTMessagesSent.setDescription(' The no. of DHCPv6 messages of type REQUEST that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6RENEWMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6RENEWMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6RENEWMessagesSent.setDescription(' The no. of DHCPv6 messages of type RENEW that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6REBINDMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6REBINDMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6REBINDMessagesSent.setDescription(' The no. of DHCPv6 messages of type REBIND that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6RELEASEMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentNetworkDhcp6RELEASEMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6RELEASEMessagesSent.setDescription(' The no. of DHCPv6 messages of type RELEASE that have been sent by the DHCPv6 client on the network port.')
agentNetworkDhcp6StatsReset = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 3, 18, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDhcp6StatsReset.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcp6StatsReset.setDescription('Clear the DHCPv6 Client statistics on the network port. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentServicePortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4))
agentServicePortIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIPAddress.setDescription("The switch's ServicePort ip address")
agentServicePortSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentServicePortSubnetMask.setDescription("The switch's ServicePort subnet mask")
agentServicePortDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDefaultGateway.setDescription("The switch's ServicePort default gateway")
agentServicePortBurnedInMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentServicePortBurnedInMacAddress.setDescription("The switch's ServicePort Burned-In MAC address")
agentServicePortConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortConfigProtocol.setDescription("The switch's ServicePort config protocol")
agentServicePortProtocolDhcpRenew = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("renew", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortProtocolDhcpRenew.setStatus('deprecated')
if mibBuilder.loadTexts: agentServicePortProtocolDhcpRenew.setDescription("The switch's ServicePort protocol dhcp is renewed.")
agentServicePortIpv6AdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AdminMode.setDescription('The service port IPv6 administrative state')
agentServicePortIpv6Gateway = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 8), Ipv6AddressPrefix()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6Gateway.setDescription('The service port IPv6 Gateway Address If Ipv6 Address is unspecified (all zero), this means serviceport Ipv6 gateway is not set.')
agentServicePortIpv6AddrTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 9), )
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrTable.setDescription('The list of IPv6 address prefixes for the service port.')
agentServicePortIpv6AddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 9, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentServicePortIpv6AddrPrefix"))
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEntry.setDescription('An interface entry containing objects of a particular IPv6 address prefix')
agentServicePortIpv6AddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 9, 1, 1), Ipv6AddressPrefix())
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefix.setDescription('The service port IPv6 Address Prefix')
agentServicePortIpv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrPrefixLength.setDescription('The service port IPv6 Address Prefix Length')
agentServicePortIpv6AddrEuiFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrEuiFlag.setDescription('The service port IPv6 Eui Flag')
agentServicePortIpv6AddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddrStatus.setDescription('')
agentServicePortIpv6AddressAutoConfig = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6AddressAutoConfig.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6AddressAutoConfig.setDescription('The ipv6 address autoconfig allows the device to perform IPv6 stateless address auto-configuration to discover prefixes on the link and then to add the eui-64 based addresses to the serviceport interface.')
agentServicePortIpv6ConfigProtocol = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortIpv6ConfigProtocol.setStatus('current')
if mibBuilder.loadTexts: agentServicePortIpv6ConfigProtocol.setDescription('The Service Port.s IPv6 protocol configured on the switch.')
agentServicePortDhcp6ClientDuid = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ClientDuid.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ClientDuid.setDescription(' The DHCPv6 Client unique DUID. This value cannot be modified')
agentServicePortStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13))
agentServicePortDhcp6ADVERTISEMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesReceived.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been received by the DHCPv6 client on the service port.')
agentServicePortDhcp6REPLYMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesReceived.setDescription(' The no. of DHCPv6 messages of type REPLY that have been received by the DHCPv6 client on the service port.')
agentServicePortDhcp6ADVERTISEMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6ADVERTISEMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type ADVERTISE that have been discarded by the DHCPv6 client on the service port.')
agentServicePortDhcp6REPLYMessagesDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesDiscarded.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REPLYMessagesDiscarded.setDescription(' The no. of DHCPv6 messages of type REPLY that have been discarded by the DHCPv6 client on the service port.')
agentServicePortDhcp6MalformedMessagesReceived = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6MalformedMessagesReceived.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6MalformedMessagesReceived.setDescription(' The no. of DHCPv6 messages received malformed by the DHCPv6 client on the service port.')
agentServicePortDhcp6SOLICITMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6SOLICITMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6SOLICITMessagesSent.setDescription(' The no. of DHCPv6 messages of type SOLICIT that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6REQUESTMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REQUESTMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REQUESTMessagesSent.setDescription(' The no. of DHCPv6 messages of type REQUEST that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6RENEWMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RENEWMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6RENEWMessagesSent.setDescription(' The no. of DHCPv6 messages of type RENEW that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6REBINDMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6REBINDMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6REBINDMessagesSent.setDescription(' The no. of DHCPv6 messages of type REBIND that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6RELEASEMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentServicePortDhcp6RELEASEMessagesSent.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6RELEASEMessagesSent.setDescription(' The no. of DHCPv6 messages of type RELEASE that have been sent by the DHCPv6 client on the service port.')
agentServicePortDhcp6StatsReset = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 4, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentServicePortDhcp6StatsReset.setStatus('current')
if mibBuilder.loadTexts: agentServicePortDhcp6StatsReset.setDescription('Clear the DHCPv6 Client statistics on the service port. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentSnmpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6))
agentSnmpCommunityCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityCreate.setDescription('Creates a new SNMP Community entry. Defaults: IPAddress 0.0.0.0 IpMask 0.0.0.0 AccessMode read-only Status config')
agentSnmpCommunityConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigTable.setDescription("A table of the switch's SNMP Config entries")
agentSnmpCommunityConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSnmpCommunityIndex"))
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityConfigEntry.setDescription("Switch's SNMP Config entry")
agentSnmpCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIndex.setDescription("The switch's Snmp Community Index")
agentSnmpCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityName.setDescription("The switch's Snmp Community Name This name identifies each SNMP community; the name can be up to 16 characters, and it is case-sensitive. Community names in the SNMP community must be unique. If you make multiple entries using the same community name, the first entry is kept and processed and all duplicate entries are ignored. ")
agentSnmpCommunityIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPAddress.setDescription("The switch's Snmp Community IP Address Client IP Address - This attribute is an IP address (or portion thereof) from which this device will accept SNMP packets with the associated community. The requesting entity's IP address is logical-ANDed with the Client IP Mask and the result must match the Client IP Address. Note: If the Client IP Mask is set to 0.0.0.0, a Client IP Address of 0.0.0.0 matches all IP addresses. ")
agentSnmpCommunityIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityIPMask.setDescription("The switch's Snmp Community IP Mask Client IP Mask - This attribute is a mask to be logical-ANDed with the requesting entity's IP address before comparison with the Client IP Address. If the result matches with Client IP Address then the address is an authenticated IP address. For example, if the Client IP Address is 9.47.128.0 and the corresponding Client IP Mask is 255.255.255.0, a range of incoming IP addresses would match, that is, the incoming IP addresses could be a value in the following range: 9.47.128.0 to 9.47.128.255. To have a specific IP address be the only authenticated IP address, set the Client IP Address to the required IP address and set the Client IP Mask to 255.255.255.255. ")
agentSnmpCommunityAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityAccessMode.setDescription("The switch's Snmp Community Access Mode Access Mode - This value can be read-only or read/write. A community with a read-only access allows for switch information to be displayed. A community with a read/write access allows for configuration changes to be made and for information to be displayed. ")
agentSnmpCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpCommunityStatus.setDescription("The switch's Snmp Community Status. active(1) - This community is active, allowing SNMP managers associated with this community to manage the switch according to its access right. notInService(2) - This community is not active; no SNMP requests using this community will be accepted. In this case the SNMP manager associated with this community cannot manage the switch until the Status is changed back to active(1). config(3) - The community Status must be set to this value in order to configure it. When creating a new community entry, initial Status will be set to this value. destroy(4) - Set to this value to remove the community from the agent.")
agentSnmpTrapReceiverCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCreate.setDescription('Creates a new trap receiver entry. Defaults: IPAddress 0.0.0.0 status config')
agentSnmpTrapReceiverConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4), )
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigTable.setDescription('Trap messages are sent across a network to an SNMP Network Manager. These messages alert the manager to events occurring within the switch or on the network. Up to six simultaneous trap receivers are supported. ')
agentSnmpTrapReceiverConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSnmpTrapReceiverIndex"))
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverConfigEntry.setDescription("Switch's Snmp Trace Receiver Config entry")
agentSnmpTrapReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIndex.setDescription("The switch's Snmp Trap Receiver Index")
agentSnmpTrapReceiverCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverCommunityName.setDescription("The switch's Snmp Trap Receiver Community Name. This is the SNMP community name of the remote network manager; the name can be up to 16 characters, and is case-sensitive. ")
agentSnmpTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverIPAddress.setDescription('Trap receiver IP or IPv6 address')
agentSnmpTrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverStatus.setDescription("The switch's Snmp Trap Reciever Status. active(1) - This trap receiver is active, allowing SNMP Traps to be sent to this receiver. notInService(2) - This trap reciever is not active; no SNMP Traps will be sent to this reciever until it's set back to active(1). config(3) - The trap reciever Status must be set to this value in order to configure it. When creating a new trap receiver entry, the Status will initially be set to this value. Note: agentSnmpTrapReceiverIPAddress must be set to non-zero before changing to active(1) or notInService(2). destroy(4) - Set to this value to remove the trap receiver entry from the agent.")
agentSnmpTrapReceiverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpv1", 1), ("snmpv2c", 2), ("snmpv3", 3))).clone('snmpv2c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverVersion.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverVersion.setDescription('The version of trap sent to this Reciever. snmpv1(1) - This will send a SNMPv1 trap. snmpv2c(2) - This will send a SNMPv2c trap. snmpv3(3) - This will send a SNMPv3 trap.')
agentSnmpTrapReceiverSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("auth", 2), ("priv", 3), ("notSupport", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverSecurityLevel.setDescription('The security level of SNMPv3 trap reciever. none(1) - SNMPv3 noAuthNoPriv security level. auth(2) - SNMPv3 authNoPriv security level. priv(3) - SNMPv3 authPriv security level notSupport(4) - only support on SNMPv3')
agentSnmpTrapReceiverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapReceiverPort.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapReceiverPort.setDescription('Trap receiver UDP port')
agentSnmpTrapFlagsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 5))
agentSnmpAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpAuthenticationTrapFlag.setDescription('Authentication Flag - Enable/Disable authentication Flag.')
agentSnmpLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpLinkUpDownTrapFlag.setDescription('Link Up/Down Flag - Enable/Disable Link Up/Link Down traps for the entire switch. When set to Enable, the Link Up/Down traps will be sent only if the Link Trap flag setting associated with the port (Port Configuration Menu) is set to Enable. ')
agentSnmpMultipleUsersTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpMultipleUsersTrapFlag.setDescription('Multiple Users Flag - Enable/Disable Multiple User traps. When the value is set to Enable, a Multiple User Trap is sent whenever someone logs in to the terminal interface (EIA 232 or Telnet) and there is already an existing terminal interface session. ')
agentSnmpSpanningTreeTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpSpanningTreeTrapFlag.setDescription('Spanning Tree Flag - This flag enables the sending of new root traps and topology change notification traps.')
agentSnmpACLTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpACLTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpACLTrapFlag.setDescription('Enable/Disable ACL traps.')
agentSnmpTransceiverTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTransceiverTrapFlag.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTransceiverTrapFlag.setDescription('Transceiver Flag - Enable/Disable Transceiver traps.')
agentSnmpInformConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6))
agentSnmpInformAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformAdminMode.setDescription("The switch's Snmp Inform Admin Mode")
agentSnmpInformRetires = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformRetires.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformRetires.setDescription("The switch's Snmp Inform Retires")
agentSnmpInformTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformTimeout.setDescription("The switch's Snmp Inform Timeout")
agentSnmpInformConfigTableCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformConfigTableCreate.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformConfigTableCreate.setDescription('Creates a new trap inform entry. Defaults: IPAddress 0.0.0.0 status config')
agentSnmpInformConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5), )
if mibBuilder.loadTexts: agentSnmpInformConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformConfigTable.setDescription('Trap messages are sent across a network to an SNMP Network Manager. These messages alert the manager to events occurring within the switch or on the network. Up to six simultaneous trap receivers are supported.')
agentSnmpInformConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSnmpInformIndex"))
if mibBuilder.loadTexts: agentSnmpInformConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformConfigEntry.setDescription("Switch's Snmp Inform Config entry")
agentSnmpInformIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpInformIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformIndex.setDescription("The switch's Snmp Inform Index")
agentSnmpInformName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformName.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformName.setDescription("The switch's Snmp Inform Name. This is the SNMP community name of the remote network manager; the name can be up to 16 characters, and is case-sensitive.")
agentSnmpInformIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformIpAddress.setDescription("The switch's Snmp Inform IP or IPv6 address.")
agentSnmpInformVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("snmpv2c", 2), ("snmpv3", 3))).clone('snmpv2c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformVersion.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformVersion.setDescription('The version of inform sent to this Reciever. snmpv2c(2) - This will send a SNMPv2c inform. snmpv3(3) - This will send a SNMPv3 inform.')
agentSnmpInformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("config", 3), ("destroy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformStatus.setDescription("The switch's Snmp Trap Inform Status. active(1) - This trap Inform is active, allowing SNMP Traps to be sent to this receiver. notInService(2) - This trap Inform is not active; no SNMP Traps will be sent to this reciever until it's set back to active(1). config(3) - The trap Inform Status must be set to this value in order to configure it. When creating a new trap receiver entry, the Status will initially be set to this value. Note: agentSnmpTrapReceiverIPAddress must be set to non-zero before changing to active(1) or notInService(2). destroy(4) - Set to this value to remove the trap Inform entry from the agent.")
agentSnmpInformSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("auth", 2), ("priv", 3), ("notSupport", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpInformSecurityLevel.setStatus('current')
if mibBuilder.loadTexts: agentSnmpInformSecurityLevel.setDescription('The security level of SNMPv3 trap inform. none(1) - SNMPv3 noAuthNoPriv security level. auth(2) - SNMPv3 authNoPriv security level. priv(3) - SNMPv3 authPriv security level notSupport(4) - only support on SNMPv3')
agentSnmpUserConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7), )
if mibBuilder.loadTexts: agentSnmpUserConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserConfigTable.setDescription('SNMP user config table')
agentSnmpUserConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSnmpUserIndex"))
if mibBuilder.loadTexts: agentSnmpUserConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserConfigEntry.setDescription("Switch's Snmp User Config entry")
agentSnmpUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpUserIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserIndex.setDescription("The switch's Snmp User Index")
agentSnmpUserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpUserUsername.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserUsername.setDescription("The switch's Snmp User Name.")
agentSnmpUserAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("md5", 2), ("sha", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpUserAuthentication.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserAuthentication.setDescription("The switch's Snmp User Authentication.")
agentSnmpUserAuthenticationPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpUserAuthenticationPassword.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserAuthenticationPassword.setDescription("The switch's Snmp User Authentication Password.")
agentSnmpUserEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("des", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpUserEncryption.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserEncryption.setDescription("The switch's Snmp User Encryption.")
agentSnmpUserEncryptionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpUserEncryptionPassword.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserEncryptionPassword.setDescription("The switch's Snmp User Encryption Password.")
agentSnmpUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("create", 4), ("destory", 6))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpUserStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpUserStatus.setDescription('The status of SNMP user. active(1) - This snmp user is active. create(4) - Create a new SNMP user. destory(6) - Delete a SNMP user.')
agentSnmpEngineIdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 8), )
if mibBuilder.loadTexts: agentSnmpEngineIdConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentSnmpEngineIdConfigTable.setDescription('SNMP EngineID config table')
agentSnmpTrapSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 9), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpTrapSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentSnmpTrapSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based routing interface, port based routing interface, loopback interface, tunnel interface). A non-zero value indicates ifIndex for the corresponding interface entry in the ifTable is selected. A zero value indicates the source-interface un-selection.')
agentSnmpEngineIdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 8, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSnmpEngineIdIndex"))
if mibBuilder.loadTexts: agentSnmpEngineIdConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentSnmpEngineIdConfigEntry.setDescription("Switch's Snmp EngineID Config entry")
agentSnmpEngineIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSnmpEngineIdIndex.setStatus('current')
if mibBuilder.loadTexts: agentSnmpEngineIdIndex.setDescription("The switch's Snmp EngineID Index")
agentSnmpEngineIdIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 8, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpEngineIdIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentSnmpEngineIdIpAddress.setDescription("The switch's Snmp EngineID IP or IPv6 address.")
agentSnmpEngineIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSnmpEngineIdString.setStatus('current')
if mibBuilder.loadTexts: agentSnmpEngineIdString.setDescription("The switch's Snmp EngineID String")
agentSnmpEngineIdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("create", 4), ("destory", 6))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSnmpEngineIdStatus.setStatus('current')
if mibBuilder.loadTexts: agentSnmpEngineIdStatus.setDescription('The status of SNMP EngineID. active(1) - This snmp EngineID is active. create(4) - Create a new SNMP EngineID. destory(6) - Delete a SNMP EngineID.')
agentSpanningTreeConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 7))
agentSpanningTreeMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSpanningTreeMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentSpanningTreeMode.setDescription("The switch's Spanning Tree Switch Status. This functionality is now handled by agentStpAdminMode")
agentSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8))
agentSwitchAddressAgingTimeoutTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 4), )
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutTable.setDescription("The switch's address aging timeout table")
agentSwitchAddressAgingTimeoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 4, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeoutEntry.setDescription('Aging information about a specific Filtering Database.')
agentSwitchAddressAgingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressAgingTimeout.setDescription("The FDB entry's address aging timeout (in seconds)")
agentSwitchStaticMacFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 5), )
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringTable.setDescription("The switch's static Mac filtering table")
agentSwitchStaticMacFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 5, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchStaticMacFilteringVlanId"), (0, "SWITCHING-MIB", "agentSwitchStaticMacFilteringAddress"))
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringEntry.setDescription('Per-port ingress/egress filter configuration based on VLAN Id and MAC address.')
agentSwitchStaticMacFilteringVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringVlanId.setDescription('The Static MAC Filter Vlan Id')
agentSwitchStaticMacFilteringAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringAddress.setDescription('The Static MAC Filter MAC address')
agentSwitchStaticMacFilteringSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 5, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringSourcePortMask.setDescription('The Static MAC Filter source port mask. When setting this value, the system will ignore configuration for ports not between the first and last valid ports. Configuration of any port numbers between this range that are not valid ports return a failure message, but will still apply configuration for valid ports. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchStaticMacFilteringDestPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 5, 1, 4), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setStatus('deprecated')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringDestPortMask.setDescription('The Static MAC Filter destination port mask. When setting this value, the system will ignore configuration for ports not between the first and last valid ports. Configuration of any port numbers between this range that are not valid ports return a failure message, but will still apply configuration for valid ports. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table. Configuring destination port mask for a unicast MAC filter is not supported on some platforms.')
agentSwitchStaticMacFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStaticMacFilteringStatus.setDescription('The Static MAC Filter status. Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentSwitchSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 6))
agentSwitchSnoopingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 6, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgTable.setDescription('A table of the IGMP/MLD Snooping Global configuration entries.')
agentSwitchSnoopingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 6, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingCfgEntry.setDescription('Represents entry for Snooping switch Configuration.')
agentSwitchSnoopingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 6, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingProtocol.setDescription('The protocol type of network protocol in use.')
agentSwitchSnoopingAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingAdminMode.setDescription('This enables or disables Snooping on the system. ')
agentSwitchSnoopingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 6, 1, 1, 3), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingPortMask.setDescription('IGMP/MLD Snooping Port Mask. This allows configuration of IGMP/MLD Snooping on selected ports. IGMP/MLD Snooping cannot be enabled on an interface that has routing enabled, or is a member of a LAG. If a port which has IGMP/MLD Snooping enabled becomes enabled for routing, or is enlisted as a member of a LAG, IGMP/MLD Snooping functionality will be disabled on that port. IGMP/MLD Snooping functionality will be subsequently be reenabled if routing is disabled or LAG membership is removed from an interface that had previously had IGMP/MLD Snooping enabled. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchSnoopingMulticastControlFramesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingMulticastControlFramesProcessed.setDescription('Multicast Control Frames Processed by CPU. The number of multicast control frames that have been processed by the CPU.')
agentSwitchSnoopingIntfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7))
agentSwitchSnoopingIntfTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfTable.setDescription('A table of the IGMP/MLD Snooping Interface configuration entries.')
agentSwitchSnoopingIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfEntry.setDescription('Represents entry for a IGMP/MLD Snooping Interface.')
agentSwitchSnoopingIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfIndex.setDescription('The port number to be selected. Each port maps to an interface.')
agentSwitchSnoopingIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on a selected interface.')
agentSwitchSnoopingIntfGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report from a particular group on the selected interface before deleting the interface from the entry. This value must be greater than agentSwitchSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingIntfMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be received on the selected interface before the interface is removed from the list of interfaces with multicast routers attached.')
agentSwitchSnoopingIntfFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfFastLeaveAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on the selected interface.')
agentSwitchSnoopingIntfMulticastRouterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfMulticastRouterMode.setDescription('This enables or disables Multicast Routing on the selected interface.')
agentSwitchSnoopingIntfVlanIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 7, 1, 1, 8), VlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingIntfVlanIDs.setDescription('This field lists all the VlanIDs which include the selected interface.')
agentSwitchSnoopingVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8))
agentSwitchSnoopingVlanTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanTable.setDescription('A table of the IGMP/MLD Snooping Vlan configuration entries.')
agentSwitchSnoopingVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8, 1, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanEntry.setDescription('Represents entry for a IGMP/MLD Snooping Vlan.')
agentSwitchSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on a selected Vlan interface.')
agentSwitchSnoopingVlanGroupMembershipInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 3600)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanGroupMembershipInterval.setDescription('The amount of time in seconds that a switch will wait for a report from a particular group on the selected vlan before deleting the interface participating in the vlan from the entry. This value must be greater than agentSwitchSnoopingIntfMaxResponseTime.')
agentSwitchSnoopingVlanMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3599)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on the selected vlan because it did not receive a report for a particular group in the interface participating in the vlan. This value must be less than agentSwitchSnoopingIntfGroupMembershipInterval. For IGMP Snooping, this value ranges from 1 to 25 and for MLD Snooping, this value ranges from 1 to 65.')
agentSwitchSnoopingVlanFastLeaveAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanFastLeaveAdminMode.setDescription('This enables or disables IGMP/MLD Snooping on the selected vlan.')
agentSwitchSnoopingVlanMRPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingVlanMRPExpirationTime.setDescription('The amount of time in seconds that a switch will wait for a query to be received on the selected interface participating in the vlan before the interface is removed from the list of interfaces with multicast routers attached. This parameter is configurable only for exisiting Vlans.')
agentSwitchVlanStaticMrouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 9))
agentSwitchVlanStaticMrouterTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 9, 1), )
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterTable.setDescription('A table of the IGMP/MLD Static Mrouter Configuration parameters.')
agentSwitchVlanStaticMrouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterEntry.setDescription('Represents entry for a IGMP/MLD Static Mrouter.')
agentSwitchVlanStaticMrouterAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanStaticMrouterAdminMode.setDescription('This enables or disables IGMP/MLD Mrouter on a per-interface per-vlan basis.')
agentSwitchMFDBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10))
agentSwitchMFDBTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1), )
if mibBuilder.loadTexts: agentSwitchMFDBTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBTable.setDescription('The Multicast Forwarding Database table')
agentSwitchMFDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchMFDBVlanId"), (0, "SWITCHING-MIB", "agentSwitchMFDBMacAddress"), (0, "SWITCHING-MIB", "agentSwitchMFDBProtocolType"), (0, "SWITCHING-MIB", "agentSwitchMFDBType"))
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBEntry.setDescription('Contains Forwarding and Filtering information per Vlan Index, MAC Address, and Component User.')
agentSwitchMFDBVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or filtering information.')
agentSwitchMFDBProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("gmrp", 2), ("igmp", 3), ("mld", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBProtocolType.setDescription('The component that is responsible for this entry in the Multicast Forwarding Database.')
agentSwitchMFDBType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBType.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBType.setDescription('This displays the type of the entry. static(1) - Entries configured by the end user dynamic(2) - Entries added as a result of a learning process or protocol if agentSwitchMFDBForwardingPortMask is all zero means there is no such agentSwitchMFDBType assigned forwarding port.')
agentSwitchMFDBDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBDescription.setDescription('Text description of this multicast table entry.')
agentSwitchMFDBForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1, 6), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBForwardingPortMask.setDescription('BitMask indicating which ports this entry indicates should be forwarded. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBFilteringPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 1, 1, 7), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBFilteringPortMask.setDescription('BitMask indicating which ports this entry indicates should be filtered. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 2), )
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryTable.setDescription('The Multicast Forwarding Database Summary table')
agentSwitchMFDBSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchMFDBSummaryVlanId"), (0, "SWITCHING-MIB", "agentSwitchMFDBSummaryMacAddress"))
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryEntry.setDescription('Summarizes the forwarding ports for all components registered for all MFDB table entries with the same Vlan Index and MAC Address.')
agentSwitchMFDBSummaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 2, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryVlanId.setDescription('Vlan Index for which this entry is associated with.')
agentSwitchMFDBSummaryMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryMacAddress.setDescription('A multicast MAC address for which the switch has forwarding and or filtering information.')
agentSwitchMFDBSummaryForwardingPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 2, 1, 3), AgentPortMask()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBSummaryForwardingPortMask.setDescription('Port Mask indicating which ports this entry indicates should be forwarded. To obtain port numbers from interface numbers, use the objects agentPortDot1dBasePort and agentPortIfIndex in the agentPortConfigTable table.')
agentSwitchMFDBMaxTableEntries = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMaxTableEntries.setDescription('This displays the maximum number of entries that can possibly be in the Multicast Forwarding Database table.')
agentSwitchMFDBMostEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBMostEntriesUsed.setDescription('This displays the largest number of entries that have been present in the Multicast Forwarding Database table. This value is also known as the MFDB high-water mark.')
agentSwitchMFDBCurrentEntries = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMFDBCurrentEntries.setDescription('This displays the current number of entries in the Multicast Forwarding Database table.')
agentSwitchDVlanTagGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11))
agentSwitchDVlanTagEthertype = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDVlanTagEthertype.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchDVlanTagEthertype.setDescription('Configures the Double Vlan Tag Ethertype for the switch. If this object is supported, ethertype cannot be configured per port. Commonly used are the Ethertypes for vman tags (34984, or 0x88A8) and dot1q tags (33024, or 0x8100).')
agentSwitchDVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 2), )
if mibBuilder.loadTexts: agentSwitchDVlanTagTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchDVlanTagTable.setDescription('A table of entries specifying the ethertype (TPID) values. This will let the user specify multiple ethertypes globally.')
agentSwitchDVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchDVlanTagTPid"))
if mibBuilder.loadTexts: agentSwitchDVlanTagEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchDVlanTagEntry.setDescription('A table entry specifying the ethertype (TPID) values. Commonly used are the Ethertypes for vman tags (34984, or 0x88A8) and dot1q tags (33024, or 0x8100).')
agentSwitchDVlanTagTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentSwitchDVlanTagTPid.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchDVlanTagTPid.setDescription('Ethertype value to identify incoming double tagged frames')
agentSwitchDVlanTagPrimaryTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchDVlanTagPrimaryTPid.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchDVlanTagPrimaryTPid.setDescription('Specifies if this TPID is primary TPID for the switch or not')
agentSwitchDVlanTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchDVlanTagRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchDVlanTagRowStatus.setDescription('Row status')
agentSwitchPortDVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 3), )
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTable.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTable.setDescription('A table entries specifying the ethertype (TPID) values per port.')
agentSwitchPortDVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 3, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchPortDVlanTagInterfaceIfIndex"), (0, "SWITCHING-MIB", "agentSwitchPortDVlanTagTPid"))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagEntry.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagEntry.setDescription('A table entry specifying the ethertype (TPID) value for a port.')
agentSwitchPortDVlanTagInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagInterfaceIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagInterfaceIfIndex.setDescription('Port Id on to which the Ethertype value is mapped')
agentSwitchPortDVlanTagTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTPid.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagTPid.setDescription('Ethertype value to identify incoming double tagged frames')
agentSwitchPortDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagMode.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagMode.setDescription('Controls the Double Vlan Tag mode on this port.')
agentSwitchPortDVlanTagCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagCustomerId.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagCustomerId.setDescription('Configures the Customer ID for the Double Vlan Tag for this port.')
agentSwitchPortDVlanTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchPortDVlanTagRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: agentSwitchPortDVlanTagRowStatus.setDescription('Row status')
agentSwitchIfDVlanTagTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 4), )
if mibBuilder.loadTexts: agentSwitchIfDVlanTagTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIfDVlanTagTable.setDescription('A table entries specifying the ethertype (TPID) values per interface.')
agentSwitchIfDVlanTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 4, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchIfDVlanTagIfIndex"))
if mibBuilder.loadTexts: agentSwitchIfDVlanTagEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIfDVlanTagEntry.setDescription('A table entry specifying the ethertype (TPID) value for a interface.')
agentSwitchIfDVlanTagIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchIfDVlanTagIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIfDVlanTagIfIndex.setDescription('Interface Id on to which the Ethertype value is mapped')
agentSwitchIfDVlanTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIfDVlanTagMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIfDVlanTagMode.setDescription('Controls the Double Vlan Tag mode on this interface.')
agentSwitchIfDVlanTagTPid = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchIfDVlanTagTPid.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIfDVlanTagTPid.setDescription('Ethertype value to identify incoming double tagged frames. Commonly used are the Ethertypes for vman tags (34984, or 0x88A8) and dot1q tags (33024, or 0x8100).')
agentSwitchVlanMacAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 17))
agentSwitchVlanMacAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 17, 1), )
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationTable.setDescription("The switch's MAC To VLAN association table")
agentSwitchVlanMacAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 17, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchVlanMacAssociationMacAddress"), (0, "SWITCHING-MIB", "agentSwitchVlanMacAssociationVlanId"), (0, "SWITCHING-MIB", "agentSwitchVlanMacAssociationPriority"))
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationEntry.setDescription('VLAN to be assigned to untagged or priority tagged packets based on MAC address.')
agentSwitchVlanMacAssociationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 17, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationMacAddress.setDescription('The Mac address')
agentSwitchVlanMacAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 17, 1, 1, 2), VlanIndex())
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationVlanId.setDescription('The VLAN the Mac address assigned to')
agentSwitchVlanMacAssociationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 17, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationPriority.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationPriority.setDescription('The Priority of mac base vlan')
agentSwitchVlanMacAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 17, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanMacAssociationRowStatus.setDescription('The Mac to VLAN association row status. Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentSwitchProtectedPortConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 18))
agentSwitchProtectedPortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 18, 1), )
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortTable.setDescription("The switch's protected port mapping table")
agentSwitchProtectedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 18, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchProtectedPortGroupId"))
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortEntry.setDescription('Protected ports assigned to groups.')
agentSwitchProtectedPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupId.setDescription('The group that this port belongs to')
agentSwitchProtectedPortGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 18, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortGroupName.setDescription('The name of the group')
agentSwitchProtectedPortPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 18, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setStatus('current')
if mibBuilder.loadTexts: agentSwitchProtectedPortPortList.setDescription('The set of ports that are protected in this group')
agentSwitchVlanSubnetAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19))
agentSwitchVlanSubnetAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19, 1), )
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationTable.setDescription("The switch's Subnet To VLAN association table")
agentSwitchVlanSubnetAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchVlanSubnetAssociationIPAddress"), (0, "SWITCHING-MIB", "agentSwitchVlanSubnetAssociationSubnetMask"), (0, "SWITCHING-MIB", "agentSwitchVlanSubnetAssociationVlanId"), (0, "SWITCHING-MIB", "agentSwitchVlanSubnetAssociationPriority"))
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationEntry.setDescription('VLAN to be assigned to untagged or priority tagged packets based on IP address and Subnet Mask.')
agentSwitchVlanSubnetAssociationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationIPAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationIPAddress.setDescription('The ip address')
agentSwitchVlanSubnetAssociationSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationSubnetMask.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationSubnetMask.setDescription('The subnet mask')
agentSwitchVlanSubnetAssociationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19, 1, 1, 3), VlanIndex())
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationVlanId.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationVlanId.setDescription('The VLAN that the IP address and subnet mask assigned to')
agentSwitchVlanSubnetAssociationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationPriority.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationPriority.setDescription('The Priority that the IP address and subnet mask assigned to')
agentSwitchVlanSubnetAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 19, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVlanSubnetAssociationRowStatus.setDescription('The Subnet to VLAN association row status. Supported values: active(1) - valid entry createAndGo(4) - used to create a new entry destroy(6) - removes the entry')
agentSwitchSnoopingQuerierGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20))
agentSwitchSnoopingQuerierCfgTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 1), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgTable.setDescription('A table of the IGMP/MLD Snooping Querier Global configuration entries.')
agentSwitchSnoopingQuerierCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierCfgEntry.setDescription('Represents entry for Snooping Querier Configuration.')
agentSwitchSnoopingQuerierAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAdminMode.setDescription('This enables or disables Snooping Querier on the system. ')
agentSwitchSnoopingQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVersion.setDescription('This specifies the multicast protocol versions that are supported by the system.')
agentSwitchSnoopingQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 1, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierAddress.setDescription('This specifies the default source ip address to be used while generating general queries.')
agentSwitchSnoopingQuerierQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierQueryInterval.setDescription('This specified the timer interval after which the system generates general queries.')
agentSwitchSnoopingQuerierExpiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierExpiryInterval.setDescription('This specified the timer interval after which the detected other querier information is no longer valid.')
agentSwitchSnoopingQuerierVlanTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2), )
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanTable.setDescription('A table of the Snooping Querier Vlan configuration entries.')
agentSwitchSnoopingQuerierVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "SWITCHING-MIB", "agentSwitchSnoopingProtocol"))
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanEntry.setDescription('Represents entry for a Snooping Querier configurable Vlan.')
agentSwitchSnoopingQuerierVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAdminMode.setDescription('This enables or disables Snooping Querier on a selected Vlan interface.')
agentSwitchSnoopingQuerierVlanOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("querier", 1), ("non-querier", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanOperMode.setDescription('This specifies the current state of the Snooping Querier on a selected vlan interface')
agentSwitchSnoopingQuerierElectionParticipateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierElectionParticipateMode.setDescription('This enables or disables the Snooping Querier Election Participation mode. When enabled snooping querier switch will participate in querier election up on discovering another querier in the specified vlan. When disabled, up on discovering another querier, snooping querier moves to non-querier state.')
agentSwitchSnoopingQuerierVlanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierVlanAddress.setDescription('This specifies the default source ip address to be used while generating general queries on the specified vlan.')
agentSwitchSnoopingQuerierOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperVersion.setDescription('This specifies the multicast protocol version that is currently being used by the snooping switch for the specified vlan while generating query messages.')
agentSwitchSnoopingQuerierOperMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierOperMaxResponseTime.setDescription('The amount of time in seconds a switch will wait after sending a query on the selected vlan because it did not receive a report for a particular group in the interface participating in the vlan. This object is valid only when agentSwitchSnoopingQuerierOperVersion object is valid. (-1) - indicates that parameter is not available; ( 0) - indicates that response time is less then 1 second.')
agentSwitchSnoopingQuerierLastQuerierAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierAddress.setDescription("This specifies the last querier's ip address for the specified vlan. It represents the detected other multicast querier in the vlan. ")
agentSwitchSnoopingQuerierLastQuerierVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setStatus('current')
if mibBuilder.loadTexts: agentSwitchSnoopingQuerierLastQuerierVersion.setDescription('This specifies the multicast protocol version that is currently being used by the detected other multicast querier for the specified vlan. (-1) - indicates that parameter is not available.')
agentTransferConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9))
agentTransferUploadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1))
agentTransferUploadMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7))).clone(namedValues=NamedValues(("tftp", 1), ("sftp", 5), ("scp", 6), ("ftp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadMode.setDescription('Transfer upload mode configures the mode to use when uploading from the switch. The mode is either TFTP, FTP, SFTP or SCP. SFTP and SCP are only allowed if the SSH feature is present. ')
agentTransferUploadPath = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPath.setDescription('Transfer upload path configures the directory path where the file is to be uploaded to. The switch remembers the last file path used. ')
agentTransferUploadFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadFilename.setDescription('Transfer upload filename configures the file name for the file being uploaded from the switch. It can be up to 30 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 17 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, FTP, SFTP or SCP.')
agentTransferUploadScriptFromSwitchSrcFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadScriptFromSwitchSrcFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadScriptFromSwitchSrcFilename.setDescription("Transfer upload filename configures the file name for the file being uploaded from the switch. It can be up to 30 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 17 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, FTP, SFTP or SCP. The file extension of transfer upload script filename must be '.scr'.")
agentTransferUploadStartupConfigFromSwitchSrcFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStartupConfigFromSwitchSrcFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStartupConfigFromSwitchSrcFilename.setDescription('Transfer upload filename configures the file name for the file being uploaded from the switch. It can be up to 30 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 17 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, FTP, SFTP or SCP.')
agentTransferUploadOpCodeFromSwitchSrcFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadOpCodeFromSwitchSrcFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadOpCodeFromSwitchSrcFilename.setDescription('Transfer upload filename configures the file name for the file being uploaded from the switch. It can be up to 30 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 17 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, FTP, SFTP or SCP.')
agentTransferUploadDataType = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("script", 1), ("code", 2), ("config", 3), ("errorlog", 4), ("messagelog", 5), ("traplog", 6), ("clibanner", 7), ("vmtracer", 8), ("runningConfig", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadDataType.setDescription('Transfer upload datatype configures the type of file to upload from the switch. The types for upload are: - Script - Code - Configuration File - Error log - Message log - Trap log - Banner File - VMTracer Image File - Running Configuration ')
agentTransferUploadStart = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStart.setDescription('Transfer upload start will start an upload transfer.')
agentTransferUploadStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13), ("fileNotExist", 14), ("runByOtherUsers", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferUploadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadStatus.setDescription('Indicates the current status of an upload transfer.')
agentTransferUploadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 12), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadServerAddress.setDescription('Transfer upload serverip configures the IP address of the server where the file is to be uploaded to.It is valid only when the Transfer Mode is TFTP, FTP, SFTP or SCP. The type of this address is determined by the value of the agentTransferUploadServerAddressType object. The values for agentTransferUploadServerAddressType and agentTransferUploadServerAddress must be consistent.')
agentTransferUploadUsername = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadUsername.setDescription('Username applicable only to secure upload types. Note: User Account is applicable only if the Transfer Mode is FTP, SFTP or SCP.')
agentTransferUploadPassword = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferUploadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferUploadPassword.setDescription('Password applicable only to secure upload types. Note: User Password is applicable only if the Transfer Mode is FTP, SFTP or SCP.')
agentTransferDownloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2))
agentTransferDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7))).clone(namedValues=NamedValues(("tftp", 1), ("sftp", 5), ("scp", 6), ("ftp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadMode.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadMode.setDescription('Transfer download mode configures the mode to use when downloading to the switch. The mode is either TFTP, FTP, SFTP or SCP. SFTP and SCP are only allowed if the SSH feature is present. ')
agentTransferDownloadPath = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPath.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPath.setDescription('Transfer download path configures the directory path where the file is located. The switch remembers the last file path used. ')
agentTransferDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadFilename.setDescription('Transfer download filename configures the file name for the file being downloaded to the switch. It can be up to 30 alphanumeric characters. The switch remembers the last file name used. File path can be appended to the file name if the string is less than 33 characters. Otherwise, the File Path field will need to be used and the File Name will be appended to the File Path as is. An example would be File Path set to c:\\tftp\\code\\ and File Name set to e1r1v1.opr. Note: File Name, File Path, and Server IP Address are applicable only if the Transfer Mode is TFTP, FTP, SFTP or SCP.')
agentTransferDownloadScriptToSwitchDestFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadScriptToSwitchDestFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadScriptToSwitchDestFilename.setDescription("The filename used to store current Script in the switch. It can be up to 30 alphanumeric characters. The file extension of transfer download script filename must be '.scr'")
agentTransferDownloadOPCodeToSwitchDestFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadOPCodeToSwitchDestFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadOPCodeToSwitchDestFilename.setDescription('Transfer download tftpfilename configures the file name for the file stored in the switch. It can be up to 30 alphanumeric characters.')
agentTransferDownloadStartupConfigToSwitchDestFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStartupConfigToSwitchDestFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStartupConfigToSwitchDestFilename.setDescription('The filename used to store current Startup config in the switch. It can be up to 30 alphanumeric characters.')
agentTransferDownloadDataType = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("script", 1), ("code", 2), ("config", 3), ("sshkey-rsa1", 4), ("sshkey-rsa2", 5), ("sshkey-dsa", 6), ("sslpem-root", 7), ("sslpem-server", 8), ("sslpem-dhweak", 9), ("sslpem-dhstrong", 10), ("clibanner", 11), ("vmtracer", 12), ("license", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadDataType.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadDataType.setDescription('Transfer download datatype configures the type of file to download to the switch. The types for download are: script - Script File code - Code File config - Configuration File sshkey-rsa1 - SSH-1 RSA Key File sshkey-rsa2 - SSH-2 RSA Key PEM File sshkey-dsa - SSH-2 DSA Key PEM File sslpem-root - SSL Trusted Root Certificate PEM File sslpem-server - SSL Server Certificate PEM File sslpem-dhweak - SSL DH Weak Encryption Parameter PEM File sslpem-dhstrong - SSL DH Strong Encryption Parameter PEM File cli-banner - CLI Banner File vmtracer - VMTracer Image File license - License Key File Note: SSH Key files can only be downloaded if SSH Server is administratively disabled, and there are no active SSH sessions. ')
agentTransferDownloadStart = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStart.setDescription('Transfer download start will start an download transfer.')
agentTransferDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notInitiated", 1), ("transferStarting", 2), ("errorStarting", 3), ("wrongFileType", 4), ("updatingConfig", 5), ("invalidConfigFile", 6), ("writingToFlash", 7), ("failureWritingToFlash", 8), ("checkingCRC", 9), ("failedCRC", 10), ("unknownDirection", 11), ("transferSuccessful", 12), ("transferFailed", 13), ("fileExist", 14), ("noPartitionTableEntry", 15), ("runByOtherUsers", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDownloadStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadStatus.setDescription('Indicates the current status of an download transfer.')
agentTransferDownloadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 12), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setReference('RFC 3291')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadServerAddress.setDescription('Transfer download serverip configures the IP address of the server where the file is to be downloaded from.It is valid only when the Transfer Mode is TFTP, FTP, SFTP or SCP. The type of this address is determined by the value of the agentTransferDownloadServerAddressType object. The values for agentTransferDownloadServerAddressType and agentTransferDownloadServerAddress must be consistent.')
agentTransferDownloadUsername = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadUsername.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadUsername.setDescription('Username applicable only to secure download types. Note: User Account is applicable only if the Transfer Mode is FTP, SFTP or SCP.')
agentTransferDownloadPassword = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDownloadPassword.setStatus('current')
if mibBuilder.loadTexts: agentTransferDownloadPassword.setDescription('Password applicable only to secure download types. Note: User Password is applicable only if the Transfer Mode is FTP, SFTP or SCP.')
agentImageConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 3))
agentImage1 = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage1.setStatus('current')
if mibBuilder.loadTexts: agentImage1.setDescription('The image1 filename and software version.')
agentImage2 = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentImage2.setStatus('current')
if mibBuilder.loadTexts: agentImage2.setDescription('The image2 filename and software version.')
agentActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentActiveImage.setStatus('current')
if mibBuilder.loadTexts: agentActiveImage.setDescription('The active image name. image1 or image2.')
agentNextActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 9, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNextActiveImage.setStatus('current')
if mibBuilder.loadTexts: agentNextActiveImage.setDescription('The next active image name. user assigns either image1 or image2. ')
agentPortMirroringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10))
agentPortMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 4), )
if mibBuilder.loadTexts: agentPortMirrorTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTable.setDescription('This table includes entries for each Port Mirroring session.')
agentPortMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 4, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentPortMirrorSessionNum"))
if mibBuilder.loadTexts: agentPortMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorEntry.setDescription('Provides configuration of a Port Mirroring session specifying the destination port, and the source Port Mask, providing a many-to-one mapping.')
agentPortMirrorSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSessionNum.setDescription('The Session number of this mirroring entry. The number of sessions is fixed, and is platform dependant.')
agentPortMirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 4, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorDestinationPort.setDescription('The port which traffic from the mirrored ports will be sent to.')
agentPortMirrorSourcePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 4, 1, 3), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorSourcePortMask.setDescription('The ports from which traffic will be sent to the destination port. The destination port can not be included in this list of ports.')
agentPortMirrorAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorAdminMode.setDescription('The status of this port mirroring session. enable(1) - This session is active and all traffic from the source ports will be mirrored to the destination port. disable(2) - This session is not active. delete(3) - Remove the configuration for this Session')
agentPortMirrorTypeTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 5), )
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeTable.setDescription("This table includes entries for each source port's direction of port mirroring.")
agentPortMirrorTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 5, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentPortMirrorSessionNum"), (0, "SWITCHING-MIB", "agentPortMirrorTypeSourcePort"))
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeEntry.setDescription('Provides configuration of a Port Mirroring direction specifying the session of the port mirroring and source port')
agentPortMirrorTypeSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeSourcePort.setDescription('The port from which traffic will be sent to the destination port. This port should be a source port in the corresponding session')
agentPortMirrorTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2), ("txrx", 3))).clone('txrx')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMirrorTypeType.setStatus('current')
if mibBuilder.loadTexts: agentPortMirrorTypeType.setDescription('The direction of the data to be mirrored on this source port. tx(1) - The data that is transmitted from the source port. rx(2) - The data that is received on the source port. txrx(3) - The data that is transmitted/received from/on the source port')
agentDot3adAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 12), )
if mibBuilder.loadTexts: agentDot3adAggPortTable.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortTable.setDescription('This table provides 802.3ad link aggregation information for each physical port that is not available through the standard MIB.')
agentDot3adAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 12, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDot3adAggPort"))
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortEntry.setDescription('Information about a table entry. The agentDot3adAggPort identifies the external interface number of the port.')
agentDot3adAggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDot3adAggPort.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPort.setDescription('ifIndex of this physical port')
agentDot3adAggPortLACPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setStatus('current')
if mibBuilder.loadTexts: agentDot3adAggPortLACPMode.setDescription('Enable/disable 802.3ad LACP on this port')
agentPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13), )
if mibBuilder.loadTexts: agentPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigTable.setDescription("A table of the switch's physical port config entries")
agentPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentPortDot1dBasePort"))
if mibBuilder.loadTexts: agentPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigEntry.setDescription("Switch's physical port config entry")
agentPortDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot1dBasePort.setStatus('current')
if mibBuilder.loadTexts: agentPortDot1dBasePort.setDescription('The port number of this port.')
agentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortIfIndex.setDescription("The switch's Port IfIndex")
agentPortIanaType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortIanaType.setStatus('current')
if mibBuilder.loadTexts: agentPortIanaType.setDescription("The switch's Port Type")
agentPortSTPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("fast", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortSTPMode.setStatus('deprecated')
if mibBuilder.loadTexts: agentPortSTPMode.setDescription("The switch's Port Spanning Tree Protocol Mode STP mode values are: dot1d (the default) fast, indicates you want to use the fast spanning tree mode off, indicates the STP mode is turned off for a particular port This object is only supported when the Dot1d Protocol is enabled.")
agentPortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortSTPState.setStatus('deprecated')
if mibBuilder.loadTexts: agentPortSTPState.setDescription("The switch's Port Spanning Tree Protocol State. This object is only supported when the Dot1d Protocol is enabled.")
agentPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortAdminMode.setDescription("The switch's Port Admin Mode")
agentPortLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLinkTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortLinkTrapMode.setDescription('If enabled, link up and link down traps will be sent for this port.')
agentPortClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortClearStats.setStatus('current')
if mibBuilder.loadTexts: agentPortClearStats.setDescription('clear stats for this port only')
agentPortDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 11), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortDefaultType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortDefaultType.setStatus('current')
if mibBuilder.loadTexts: agentPortDefaultType.setDescription('This object identifies the default administrative port type, to be used in conjunction with the operational port type denoted by agentPortType. The set of possible values for this object is the same as the set defined for the agentPortType object. This object represents the administratively-configured type of the MAU. If auto-negotiation is not enabled or is not implemented for this MAU, the value of this object determines the operational type of the MAU. In this case, a set to this object will force the MAU into the specified operating mode. If auto-negotiation is implemented and enabled for this MAU, the operational type of the MAU is determined by auto-negotiation, and the value of this object denotes the type to which the MAU will automatically revert if/when auto-negotiation is later disabled. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD dot3MauType10GBaseLW dot3MauType1000BaseXFD dot3MauType10GigBaseX')
agentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortType.setReference('RFC 2668')
if mibBuilder.loadTexts: agentPortType.setStatus('current')
if mibBuilder.loadTexts: agentPortType.setDescription('This object identifies the port type. An initial set of MAU types are defined in RFC 2668. The assignment of OBJECT IDENTIFIERs to new types of MAUs is managed by the IANA. If the MAU type is unknown, the object identifier unknownMauType OBJECT IDENTIFIER ::= { 0 0 } is returned. Note that unknownMauType is a syntactically valid object identifier, and any conformant implementation of ASN.1 and the BER must be able to generate and recognize this value. This object represents the operational type of the MAU, as determined by either (1) the result of the auto-negotiation function or (2) if auto-negotiation is not enabled or is not implemented for this MAU, by the value of the object agentPortDefaultType, or (3) for the GigE card a value determined by the GBIC connected to the card. In case (2), a set to the object agentPortDefaultType will force the MAU into the new operating mode. The valid values for this object are: dot3MauType10BaseTHD dot3MauType10BaseTFD dot3MauType100BaseTXHD dot3MauType100BaseTXFD dot3MauType100BaseFXFD dot3MauType1000BaseSXFD dot3MauType1000BaseTFD dot3MauType10GBaseLW dot3MauType1000BaseXFD dot3MauType10GigBaseX')
agentPortAutoNegAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortAutoNegAdminStatus.setDescription('This object identifies the administration status of auto negotiation for this port. Note: Fiber port is read-only')
agentPortMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSizeLimit.setDescription('This object identifies the largest value that can be configured for agentPortMaxFrameSize')
agentPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 12288))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: agentPortMaxFrameSize.setDescription('This object identifies the currently configured maximum frame size value for this port. The maximmum value that this object can be set to is the value of agentPortMaxFrameSizeLimit. For Ethernet ports which support 802.1Q vlan tagging, the minimum value that this object can be set to is 1518')
agentPortCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortCapability.setStatus('current')
if mibBuilder.loadTexts: agentPortCapability.setDescription("port capability which means(2^bit) are: don't care(0), 10half(2), 10full(4), 100half(8), 100full(16), 1000half(32), 1000full(64), 10Gfull(128), sfp(256), internal(4096), 40Gfull(524288), reserved(1024-2147483648). To enable 10full and 100full, for example, users could set the value to 4(10full)+ 16(100full)= 20. Note: Fiber port is read-only")
agentPortBroadcastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBroadcastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortBroadcastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentPortMulticastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortMulticastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortMulticastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentPortUnicastControlThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("percent", 1), ("pps", 2))).clone('percent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortUnicastControlThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: agentPortUnicastControlThresholdUnit.setDescription('Configures the units of the threshold value to percentage of port speed or absolute packets per second.')
agentPortVoiceVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vlanid", 2), ("dot1p", 3), ("untagged", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanMode.setDescription('Describes and Configures the Port Voice VLAN Mode. This object can only be set to disable(5).')
agentPortVoiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanID.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanID.setDescription('Describes and Configures the Port Voice VLAN ID if the Voice Vlan Mode is Vlan ID.')
agentPortVoiceVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanPriority.setDescription('Describes and Configures the Port Voice VLAN Priority if the Voice Vlan Mode is dot1p. A value of 255 indicates that the priority is not configured.')
agentPortVoiceVlanDataPriorityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trust", 1), ("untrust", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanDataPriorityMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanDataPriorityMode.setDescription('Describes and Configures the Port Voice VLAN Data Priority Mode.')
agentPortVoiceVlanOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortVoiceVlanOperationalStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanOperationalStatus.setDescription('Describes the Port Voice VLAN Operational Status.')
agentPortVoiceVlanUntagged = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanUntagged.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanUntagged.setDescription('Describes and Configures the Port Voice VLAN tagging mode.')
agentPortVoiceVlanNoneMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanNoneMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanNoneMode.setDescription('Describes and Configures the Port Voice VLAN None mode.')
agentPortVoiceVlanAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortVoiceVlanAuthMode.setStatus('current')
if mibBuilder.loadTexts: agentPortVoiceVlanAuthMode.setDescription('Describes and Configures the Port Voice VLAN Authentication mode. Disable means authentication not required for voice devices when dot1x is enabled.')
agentPortDot3FlowControlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortDot3FlowControlOperStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortDot3FlowControlOperStatus.setDescription('This object identifies operational status of the flow control per port.')
agentPortLoadStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 13, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortLoadStatsInterval.setStatus('current')
if mibBuilder.loadTexts: agentPortLoadStatsInterval.setDescription('The length of time for which data is used to compute load statistics. The value is given in seconds, and must be a multiple of 30. The allowable range is 30 to 600 seconds.')
agentProtocolConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14))
agentProtocolGroupCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupCreate.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupCreate.setDescription('Set to non-empty string to create a Protocol-Based VLAN group.')
agentProtocolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2), )
if mibBuilder.loadTexts: agentProtocolGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupTable.setDescription("A table of the switch's Protocol-based VLAN entries")
agentProtocolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentProtocolGroupId"))
if mibBuilder.loadTexts: agentProtocolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupEntry.setDescription("Switch's Protocol-based VLAN entry")
agentProtocolGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentProtocolGroupId.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupId.setDescription('Group identifier of the Protocol-based VLAN entry.')
agentProtocolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupName.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupName.setDescription('Group name of the Protocol-based VLAN entry.')
agentProtocolGroupVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupVlanId.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupVlanId.setDescription('VLAN associated with the Protocol-based VLAN entry. Set to 0 to remove.')
agentProtocolGroupProtocolIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIP.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupProtocolIP.setDescription('The status of the IP protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupProtocolARP = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolARP.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupProtocolARP.setDescription('The status of the ARP protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupProtocolIPX = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentProtocolGroupProtocolIPX.setStatus('obsolete')
if mibBuilder.loadTexts: agentProtocolGroupProtocolIPX.setDescription('The status of the IPX protocol association with the Protocol-based VLAN entry.')
agentProtocolGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupStatus.setDescription('The status of the Protocol-based VLAN entry. active(1) - this entry is active createAndGo(4) - used to create a new entry destroy(6) - remove this entry')
agentProtocolGroupPortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 3), )
if mibBuilder.loadTexts: agentProtocolGroupPortTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortTable.setDescription("A table of the switch's physical port config entries")
agentProtocolGroupPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 3, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentProtocolGroupId"), (0, "SWITCHING-MIB", "agentProtocolGroupPortIfIndex"))
if mibBuilder.loadTexts: agentProtocolGroupPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortEntry.setDescription("Switch's physical port config entry")
agentProtocolGroupPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentProtocolGroupPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortIfIndex.setDescription('The interface number of this instance.')
agentProtocolGroupPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupPortStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupPortStatus.setDescription('The status of this entry. active(1) - the port is associated with this group createAndGo(4) - add the port to this group createAndWait(5) - add the port to this group destroy(6) - remove the port from this group')
agentProtocolGroupProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 4), )
if mibBuilder.loadTexts: agentProtocolGroupProtocolTable.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolTable.setDescription("A table of the switch's physical port config entries")
agentProtocolGroupProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 4, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentProtocolGroupId"), (0, "SWITCHING-MIB", "agentProtocolGroupProtocolID"))
if mibBuilder.loadTexts: agentProtocolGroupProtocolEntry.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolEntry.setDescription("Switch's physical port config entry")
agentProtocolGroupProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)))
if mibBuilder.loadTexts: agentProtocolGroupProtocolID.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolID.setDescription('The protocol ID of this instance. The value for IP is 2048 (0x0800), ARP is 2054 (0x0806) and IPX is 33079 (0x8137). Other protocol Ids in the range 1536 to 65535 can also be configured.')
agentProtocolGroupProtocolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 14, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentProtocolGroupProtocolStatus.setStatus('current')
if mibBuilder.loadTexts: agentProtocolGroupProtocolStatus.setDescription('The status of this entry. active(1) - the port is associated with this group createAndGo(4) - add the port to this group createAndWait(5) - add the port to this group destroy(6) - remove the port from this group')
agentStpSwitchConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15))
agentStpConfigDigestKey = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigDigestKey.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigDigestKey.setDescription('The MST configuration digest key.')
agentStpConfigFormatSelector = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigFormatSelector.setDescription('The MST configuration format selector. A value other than 0 (zero) indicates non-support for the IEEE 802.1s standard.')
agentStpConfigName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigName.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigName.setDescription('The MST configuration name of at most 32 characters.')
agentStpConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpConfigRevision.setStatus('current')
if mibBuilder.loadTexts: agentStpConfigRevision.setDescription('The MST configuration revision. The default value is 0.')
agentStpForceVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1w", 2), ("dot1s", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpForceVersion.setStatus('current')
if mibBuilder.loadTexts: agentStpForceVersion.setDescription('The MST configuration force protocol version. The default version is dot1s.')
agentStpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentStpAdminMode.setDescription('The spanning tree operational status. enable(1) - enables spanning tree operational status on the switch. disable(2) - disables spanning tree operational status on the switch. The default status is disabled.')
agentStpPortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7), )
if mibBuilder.loadTexts: agentStpPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpPortTable.setDescription('STP port table.')
agentStpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpPortEntry.setDescription('STP port entry.')
agentStpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortState.setStatus('current')
if mibBuilder.loadTexts: agentStpPortState.setDescription('The administrative STP state for the port. enable(1) - enables STP on the port. disable(2) - disables STP on the port. The default port STP state is enabled for the first 4095 ports and disabled for any ports beyond.')
agentStpPortStatsMstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduRx.setDescription('The MSTP BPDUs received on a specific port.')
agentStpPortStatsMstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsMstpBpduTx.setDescription('The MSTP BPDUs sent from a specific port.')
agentStpPortStatsRstpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduRx.setDescription('The RSTP BPDUs received on a specific port.')
agentStpPortStatsRstpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsRstpBpduTx.setDescription('The RSTP BPDUs sent from a specific port.')
agentStpPortStatsStpBpduRx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduRx.setDescription('The STP BPDUs received on a specific port.')
agentStpPortStatsStpBpduTx = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setStatus('current')
if mibBuilder.loadTexts: agentStpPortStatsStpBpduTx.setDescription('The STP BPDUs sent from a specific port.')
agentStpPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortUpTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortUpTime.setDescription('Time since port was reset. It is displayed in days, hours, minutes, and seconds.')
agentStpPortMigrationCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setStatus('current')
if mibBuilder.loadTexts: agentStpPortMigrationCheck.setDescription("Force the specified port to transmit RSTP or MSTP BPDU's. Supported values: false(0) - BPDUs are not to be transmitted. true(1) - BPDUs are to be transmitted A non-zero value indicates that BPDUs are to be sent on the specified port.")
agentStpPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpPortHelloTime.setDescription('Hello time for the STP port. The default value is 2.')
agentStpPortBPDUGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpPortBPDUGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpPortBPDUGuard.setDescription("Don't accept BPDUs on this interface")
agentStpCstConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8))
agentStpCstHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstHelloTime.setDescription('The MSTP root port hello time for the CIST.')
agentStpCstMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstMaxAge.setDescription('The MSTP root port max age for the CIST.')
agentStpCstRegionalRootId = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootId.setDescription('The MSTP regional root identifier for the CIST.')
agentStpCstRegionalRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRegionalRootPathCost.setDescription('The MSTP regional root path cost for the CIST.')
agentStpCstRootFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstRootFwdDelay.setDescription('The MSTP root port forward delay for the CIST.')
agentStpCstBridgeFwdDelay = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeFwdDelay.setDescription('The MSTP bridge forward delay for the CIST. The default value is 15.')
agentStpCstBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHelloTime.setDescription('The MSTP bridge hello time for the CIST. The default value is 2. According to IEEE 802.1Q-REV 2005 updating hello time is disallowed')
agentStpCstBridgeHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldTime.setDescription('The MSTP bridge hold time for the CIST.')
agentStpCstBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxAge.setDescription('The MSTP bridge max age for the CIST. The default value is 20.')
agentStpCstBridgeMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeMaxHops.setDescription('The MSTP bridge max hops for the CIST. The default value is 20.')
agentStpCstBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgePriority.setDescription('The MSTP bridge priority for the CIST. The default value is 32768.')
agentStpCstBridgeHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 8, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setStatus('current')
if mibBuilder.loadTexts: agentStpCstBridgeHoldCount.setDescription('The MSTP bridge hold count for the CIST. This command sets the value of maximum bpdus that a bridge is allowed to send within a hello time window. The default value is 6.')
agentStpCstPortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9), )
if mibBuilder.loadTexts: agentStpCstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTable.setDescription('CIST port table.')
agentStpCstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpCstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEntry.setDescription('CIST port entry.')
agentStpCstPortOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperEdge.setDescription('The MSTP operational status of a specific port for the CIST.')
agentStpCstPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortOperPointToPoint.setDescription('The MSTP operational point to point mac of a specific port for the CIST.')
agentStpCstPortTopologyChangeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTopologyChangeAck.setDescription('The MSTP topology change acknowledge for a specific port in the CIST.')
agentStpCstPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortEdge.setDescription('The administrative state of a specific port in CIST. enable(1) - enables the port. disable(2) - disables the port. The default port state is disabled.')
agentStpCstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in CIST.')
agentStpCstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortId.setDescription('The MSTP port identifier of a specific port in CIST.')
agentStpCstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPathCost.setDescription('The MSTP port path cost in CIST. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed.')
agentStpCstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortPriority.setDescription('The MSTP port priority in CIST. The priority is in the increments of 16. The default value is 128.')
agentStpCstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in CIST.')
agentStpCstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedCost.setDescription('The MSTP designated cost of a specific port in CIST.')
agentStpCstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpCstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in CIST.')
agentStpCstExtPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpCstExtPortPathCost.setDescription('The MSTP external port path cost in CIST. The default value varies depending upon the link speed.')
agentStpCstPortBpduGuardEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduGuardEffect.setDescription('BPDU Guard Mode effect on the port. enable(1) - BPDU Guard Mode is enabled on the port. disable(2) - BPDU Guard Mode is disabled on the port.')
agentStpCstPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFilter.setDescription('This command sets BPDU Filter mode on the port. enable(1) - BPDU Filter Mode is enabled on the port. disable(2) - BPDU Filter Mode is disabled on the port.')
agentStpCstPortBpduFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortBpduFlood.setDescription('This command sets BPDU Flood mode on the port. enable(1) - BPDU Flood Mode is enabled on the port. disable(2) - BPDU Flood Mode is disabled on the port.')
agentStpCstPortAutoEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortAutoEdge.setDescription('This command sets the auto-edge mode of the port which enables it to become an edge port if it does not see BPDUs for some duration. enable(1) - enables the auto-edge mode for the port. disable(2) - disables the auto-edge mode for the port. The default auto-edge mode is enabled.')
agentStpCstPortRootGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortRootGuard.setDescription('This command sets a port to discard any superior information received by the port and thus protect against root of the device from changing.The port gets put into discarding state and does not forward any packets. enable(1) - enables the root-guard mode for the port. disable(2) - disables the root-guard mode for the port. The default root-guard mode is disabled.')
agentStpCstPortTCNGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortTCNGuard.setDescription('This command restricts the port from propagating any topology change information received through that port. enable(1) - enables the tcn-guard mode for the port. disable(2) - disables the tcn-guard mode for the port. The default tcn-guard mode is disabled.')
agentStpCstPortLoopGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpCstPortLoopGuard.setStatus('current')
if mibBuilder.loadTexts: agentStpCstPortLoopGuard.setDescription('This command enables loop guard on this port. This setting applies to all Spanning Tree instances of which this port is a member. enable(1) - enables the loop guard mode for the port. disable(2) - disables the loop guard mode for the port. The default loop-guard mode is disabled.')
agentStpMstTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10), )
if mibBuilder.loadTexts: agentStpMstTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTable.setDescription('MST table.')
agentStpMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: agentStpMstEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstEntry.setDescription('MST entry.')
agentStpMstId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstId.setDescription('The MSTP instance ID.')
agentStpMstBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstBridgePriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgePriority.setDescription('The MSTP bridge priority in a specific instance. The priority is in the increments of 4096. The recommended default value is 32768.')
agentStpMstBridgeIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setStatus('current')
if mibBuilder.loadTexts: agentStpMstBridgeIdentifier.setDescription('The MSTP bridge identifier in a specific instance.')
agentStpMstDesignatedRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedRootId.setDescription('The MSTP designated root bridge identifier in a specific instance.')
agentStpMstRootPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPathCost.setDescription('The MSTP root path cost in a specific instance.')
agentStpMstRootPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstRootPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRootPortId.setDescription('The MSTP root port ID in a specific instance.')
agentStpMstTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTimeSinceTopologyChange.setDescription('The MSTP time since the last topology change in a specific instance.')
agentStpMstTopologyChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeCount.setDescription('The MSTP count of topology changes in a specific instance.')
agentStpMstTopologyChangeParm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setStatus('current')
if mibBuilder.loadTexts: agentStpMstTopologyChangeParm.setDescription('The MSTP topology change parameter in a specific instance.')
agentStpMstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 10, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstRowStatus.setDescription('The MSTP instance status. Supported values: active(1) - valid instance. createAndGo(4) - used to create a new instance. destroy(6) - removes an instance.')
agentStpMstPortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11), )
if mibBuilder.loadTexts: agentStpMstPortTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTable.setDescription('MST port table.')
agentStpMstPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentStpMstId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentStpMstPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortEntry.setDescription('MST port entry.')
agentStpMstPortForwardingState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3), ("disabled", 4), ("manualFwd", 5), ("notParticipate", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortForwardingState.setDescription('The MSTP forwarding state of a specific port in a specific instance.')
agentStpMstPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortId.setDescription('The MSTP port identifier of a specific port in a specific instance.')
agentStpMstPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPathCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPathCost.setDescription('The MSTP port path cost in a specific instance. The default value will correspond to the recommendation specified in IEEE 802.1s Table 13-2 which varies depending upon link speed.')
agentStpMstPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpMstPortPriority.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortPriority.setDescription('The MSTP port priority in a specific instance. The priority is in the increments of 16. The default value is 128.')
agentStpMstDesignatedBridgeId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedBridgeId.setDescription('The MSTP designated bridge ID of a specific port in a specific instance.')
agentStpMstDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedCost.setDescription('The MSTP designated cost of a specific port in a specific instance.')
agentStpMstDesignatedPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setStatus('current')
if mibBuilder.loadTexts: agentStpMstDesignatedPortId.setDescription('The MSTP designated port ID of a specific port in a specific instance.')
agentStpMstPortLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortLoopInconsistentState.setDescription('The loop inconsistent state of a specific port in a specific instance. This value can only report as true(1) when loop guard is enabled on the port and the port has transitioned from blocking state in this MST instance.')
agentStpMstPortTransitionsIntoLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsIntoLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTransitionsIntoLoopInconsistentState.setDescription('The number of times this interface has transitioned into loop inconsistent state.')
agentStpMstPortTransitionsOutOfLoopInconsistentState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStpMstPortTransitionsOutOfLoopInconsistentState.setStatus('current')
if mibBuilder.loadTexts: agentStpMstPortTransitionsOutOfLoopInconsistentState.setDescription('The number of times this interface has transitioned out of loop inconsistent state.')
agentStpMstVlanTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 12), )
if mibBuilder.loadTexts: agentStpMstVlanTable.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanTable.setDescription('MST VLAN table.')
agentStpMstVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 12, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentStpMstId"), (0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: agentStpMstVlanEntry.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanEntry.setDescription('MST VLAN entry.')
agentStpMstVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStpMstVlanRowStatus.setDescription('The association status of an MSTP instance and a VLAN. Supported values: active(1) - valid association between an MSTP instance and a VLAN. createAndGo(4) - used to create a new association between an MSTP instance and a VLAN. destroy(6) - removes the association between an MSTP instance and a VLAN.')
agentStpBpduGuardMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduGuardMode.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduGuardMode.setDescription('The spanning tree BPDU Guard Mode. enable(1) - enables BPDU Guard Mode on the switch. disable(2) - disables BPDU Guard Mode on the switch. The default status is disabled.')
agentStpBpduFilterDefault = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setStatus('current')
if mibBuilder.loadTexts: agentStpBpduFilterDefault.setDescription('The spanning tree BPDU Filter Mode, it enables BPDU Filter on all edge ports. enable(1) - enables BPDU Filter Mode on the switch. disable(2) - disables BPDU Filter Mode on the switch. The default status is disabled.')
agentStpUplinkFast = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 15, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStpUplinkFast.setStatus('current')
if mibBuilder.loadTexts: agentStpUplinkFast.setDescription('Enable UplinkFast Feature.')
agentAuthenticationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16))
agentAuthenticationListCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListCreate.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListCreate.setDescription('Authentication List Create If set to a non empty string, creates a new Authentication Login List for configuration.')
agentAuthenticationEnableListCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 7), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationEnableListCreate.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationEnableListCreate.setDescription('Authentication Enable List Create If set to a non empty string, creates a new Authentication Enable List for configuration.')
agentAuthenticationListTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2), )
if mibBuilder.loadTexts: agentAuthenticationListTable.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListTable.setDescription('MST VLAN table.')
agentAuthenticationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentAuthenticationListIndex"))
if mibBuilder.loadTexts: agentAuthenticationListEntry.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListEntry.setDescription('MST VLAN entry.')
agentAuthenticationListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentAuthenticationListIndex.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListIndex.setDescription('Authenticaiton List Index Unique number used for indexing into this table.')
agentAuthenticationListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListName.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListName.setDescription('Authenticaiton List Name Unique name used to identify the Authentication List from other tables.')
agentAuthenticationListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7), ("reject", 8), ("ldap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod1.setDescription('Authenticion List Method 1 Configures the first authentication method to use when this list is specified.')
agentAuthenticationListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7), ("reject", 8), ("ldap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod2.setDescription('Authenticion List Method 2 Configures the second authentication method to use when this list is specified.')
agentAuthenticationListMethod3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7), ("reject", 8), ("ldap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod3.setDescription('Authenticion List Method 3 Configures the third authentication method to use when this list is specified.')
agentAuthenticationListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListStatus.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListStatus.setDescription('The status of the Authentication List. Supported values: active(1) - indicates a valid Authenticaiton List destroy(6) - removes the Authentication List.')
agentAuthenticationListMethod4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7), ("reject", 8), ("ldap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod4.setDescription('Authenticion List Method 4 Configures the fourth authentication method to use when this list is specified.')
agentAuthenticationListMethod5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7), ("reject", 8), ("ldap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod5.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod5.setDescription('Authenticion List Method 5 Configures the fifth authentication method to use when this list is specified.')
agentAuthenticationListMethod6 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("undefined", 0), ("enable", 1), ("line", 2), ("local", 3), ("none", 4), ("radius", 5), ("tacacs", 6), ("ias", 7), ("reject", 8), ("ldap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAuthenticationListMethod6.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListMethod6.setDescription('Authenticion List Method 6 Configures the sixth authentication method to use when this list is specified.')
agentAuthenticationListAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("console", 1), ("telnet", 2), ("ssh", 3), ("https", 4), ("http", 5), ("dot1x", 6), ("cts", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthenticationListAccessType.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListAccessType.setDescription('Authenticion List Access Type Shows the authentication list access type. cts is the authentication list type for console, telnet, and ssh.')
agentAuthenticationListAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("login", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAuthenticationListAccessLevel.setStatus('current')
if mibBuilder.loadTexts: agentAuthenticationListAccessLevel.setDescription('Authenticion List Access Level Shows the authentication list access level.')
agentUserConfigDefaultAuthenticationList = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationList.setDescription('Default Authentication List This object configures which authentication list to use for users which do not have an Authentication List configured. The list must be configured before setting.')
agentUserConfigDefaultAuthenticationDot1xList = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationDot1xList.setStatus('current')
if mibBuilder.loadTexts: agentUserConfigDefaultAuthenticationDot1xList.setDescription('Default Authentication List 802.1x This object configures which authentication list to use for users which do not have an Authentication List configured. The list must be configured before setting.')
agentUserAuthenticationConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 4), )
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigTable.setDescription('User Authentication Config Table')
agentUserAuthenticationConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 4, 1), )
agentUserConfigEntry.registerAugmentions(("SWITCHING-MIB", "agentUserAuthenticationConfigEntry"))
agentUserAuthenticationConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationConfigEntry.setDescription('User Authentication Config Entry')
agentUserAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationList.setDescription('User Authentication List This object configures which authentication list to use for this user. The list must be configured before setting.')
agentUserAuthenticationDot1xList = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserAuthenticationDot1xList.setStatus('current')
if mibBuilder.loadTexts: agentUserAuthenticationDot1xList.setDescription('User Authentication List 802.1x This object configures which authentication list to use for this user. The list must be configured before setting.')
agentUserPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 5), )
if mibBuilder.loadTexts: agentUserPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigTable.setDescription('User Port Config Table')
agentUserPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 5, 1), )
agentUserConfigEntry.registerAugmentions(("SWITCHING-MIB", "agentUserPortConfigEntry"))
agentUserPortConfigEntry.setIndexNames(*agentUserConfigEntry.getIndexNames())
if mibBuilder.loadTexts: agentUserPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUserPortConfigEntry.setDescription('User Port Config Entry')
agentUserPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 16, 5, 1, 1), AgentPortMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUserPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentUserPortSecurity.setDescription('User Port Port Security This object configures which ports the user has access to. Ports are indexed based on dot1dBasePort entries in dot1dBasePortTable.')
agentClassOfServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 17))
agentClassOfServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 17, 1), )
if mibBuilder.loadTexts: agentClassOfServicePortTable.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortTable.setDescription('A table that contains information about the 802.1p priority mapping to traffic class priority queue for every physical port.')
agentClassOfServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 17, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "SWITCHING-MIB", "agentClassOfServicePortPriority"))
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortEntry.setDescription('A 802.1p priority mapped to a traffic class priority queue.')
agentClassOfServicePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortPriority.setDescription('The Priority value determined for the received frame. This value is equivalent to the priority indicated in the tagged frame received, or one of the evaluated priorities, determined according to the media-type. For untagged frames received from Ethernet media, this value is equal to the dot1dPortDefaultUserPriority value for the ingress port.')
agentClassOfServicePortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClassOfServicePortClass.setStatus('current')
if mibBuilder.loadTexts: agentClassOfServicePortClass.setDescription('Traffic class priority queue the received frame is mapped to.')
agentHTTPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 19))
agentHTTPMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPMaxSessions.setStatus('current')
if mibBuilder.loadTexts: agentHTTPMaxSessions.setDescription('Configures the maximum number of allowable HTTP sessions. The default value is 16.')
agentHTTPHardTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 19, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 168))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPHardTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPHardTimeout.setDescription('Configures the hard timeout for HTTP sessions in hours. The default value is 24 hours. A value of zero means http will not timeout.')
agentHTTPSoftTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 19, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setStatus('current')
if mibBuilder.loadTexts: agentHTTPSoftTimeout.setDescription('Configures the soft (activity) timeout for HTTP sessions in minutes. The default value is 5 minutes. A value of zero means http will not timeout.')
agentAutoInstallConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20))
agentAutoinstallPersistentMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallPersistentMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallPersistentMode.setDescription('Enable/Disable Autoinstall on device.')
agentAutoinstallAutosaveMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutosaveMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallAutosaveMode.setDescription('Enable/Disable Auto Save of downloaded configuration on device.')
agentAutoinstallUnicastRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallUnicastRetryCount.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallUnicastRetryCount.setDescription('Sets number of unicast TFTP attempts for configuration file.')
agentAutoinstallStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentAutoinstallStatus.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallStatus.setDescription('Display current Autoinstall status on device.')
agentAutoinstallAutoRebootMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutoRebootMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallAutoRebootMode.setDescription('Enable/Disable Auto Reboot after succesfull image update on device.')
agentAutoinstallOperationalMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallOperationalMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallOperationalMode.setDescription('Enable/Disable Autoinstall operational mode on device.')
agentAutoinstallAutoUpgradeMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentAutoinstallAutoUpgradeMode.setStatus('current')
if mibBuilder.loadTexts: agentAutoinstallAutoUpgradeMode.setDescription('Enable/Disable Autoinstall auto upgrade mode on device.')
agentLDAPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 25))
agentLDAPServerIP = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 25, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLDAPServerIP.setStatus('current')
if mibBuilder.loadTexts: agentLDAPServerIP.setDescription("The ldap's server ip")
agentLDAPServerPort = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLDAPServerPort.setStatus('current')
if mibBuilder.loadTexts: agentLDAPServerPort.setDescription("The ldap's server port")
agentLDAPBaseDn = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 25, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLDAPBaseDn.setStatus('current')
if mibBuilder.loadTexts: agentLDAPBaseDn.setDescription("The ldap's base domain")
agentLDAPRacName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 25, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLDAPRacName.setStatus('current')
if mibBuilder.loadTexts: agentLDAPRacName.setDescription("The ldap's rac name")
agentLDAPRacDomain = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 25, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLDAPRacDomain.setStatus('current')
if mibBuilder.loadTexts: agentLDAPRacDomain.setDescription("The ldap's rac domain")
agentDDnsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26))
agentDDnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1), )
if mibBuilder.loadTexts: agentDDnsConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDDnsConfigTable.setDescription("A table of the switch's DDNS Config entries")
agentDDnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDDnsIndex"))
if mibBuilder.loadTexts: agentDDnsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDDnsConfigEntry.setDescription("Switch's DDNS Config entry")
agentDDnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentDDnsIndex.setStatus('current')
if mibBuilder.loadTexts: agentDDnsIndex.setDescription('This object uniquely identifies the entry in the table.')
agentDDnsServName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("easydns", 0), ("dyndns", 1), ("dhs", 2), ("ods", 3), ("dyns", 4), ("zoneedit", 5), ("tzo", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDDnsServName.setStatus('current')
if mibBuilder.loadTexts: agentDDnsServName.setDescription('The DDNS server name of the DDNS service provider.')
agentDDnsUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDDnsUserName.setStatus('current')
if mibBuilder.loadTexts: agentDDnsUserName.setDescription('The user name of DDNS account. It can be up to 32 alphanumeric characters.')
agentDDnsPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDDnsPassword.setStatus('current')
if mibBuilder.loadTexts: agentDDnsPassword.setDescription('The password of DDNS account. It can be up to 32 alphanumeric characters.')
agentDDnsHost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDDnsHost.setStatus('current')
if mibBuilder.loadTexts: agentDDnsHost.setDescription('The host name of DDNS client. It can be up to 40 alphanumeric characters.')
agentDDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)).clone('0.0.0.0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDDnsAddress.setStatus('current')
if mibBuilder.loadTexts: agentDDnsAddress.setDescription("The switch's network ip address")
agentDDnsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 26, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDDnsStatus.setStatus('current')
if mibBuilder.loadTexts: agentDDnsStatus.setDescription('Agent DDNS Status. active(1) - This DDNS setting is active. createAndGo(4) - used to create a new entry. destroy(6) - Set to this value to remove this DDNS setting.')
agentUdldConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 28))
agentUdldMessageTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 28, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(7, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUdldMessageTime.setStatus('current')
if mibBuilder.loadTexts: agentUdldMessageTime.setDescription('UDLD Message Time.')
agentUdldConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 28, 2), )
if mibBuilder.loadTexts: agentUdldConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentUdldConfigTable.setDescription("A table of the switch's SNTP dynamic server entries")
agentUdldConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 28, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentUdldIndex"))
if mibBuilder.loadTexts: agentUdldConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentUdldConfigEntry.setDescription("Switch's SNTP dynamic server entry")
agentUdldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 28, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentUdldIndex.setStatus('current')
if mibBuilder.loadTexts: agentUdldIndex.setDescription('Indicate UDLD interface.')
agentUdldIntfAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 28, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUdldIntfAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentUdldIntfAdminMode.setDescription('The interface UDLD admin mode.')
agentUdldIntfAggressiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentUdldIntfAggressiveMode.setStatus('current')
if mibBuilder.loadTexts: agentUdldIntfAggressiveMode.setDescription('The interface UDLD aggressive mode.')
agentSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3))
agentSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveConfig.setStatus('current')
if mibBuilder.loadTexts: agentSaveConfig.setDescription('enable(1) will initiate an configuration save to nvram. Status is returned by the object agentSaveConfigStatus.')
agentClearConfig = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearConfig.setStatus('current')
if mibBuilder.loadTexts: agentClearConfig.setDescription('clear config to factory defaults')
agentClearLags = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLags.setStatus('current')
if mibBuilder.loadTexts: agentClearLags.setDescription('clear lag configuration')
agentClearLoginSessions = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearLoginSessions.setStatus('current')
if mibBuilder.loadTexts: agentClearLoginSessions.setDescription('close all telnet sessions')
agentClearPasswords = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPasswords.setStatus('current')
if mibBuilder.loadTexts: agentClearPasswords.setDescription('reset passwords')
agentClearPortStats = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearPortStats.setStatus('current')
if mibBuilder.loadTexts: agentClearPortStats.setDescription('clear all port statistics')
agentClearSwitchStats = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearSwitchStats.setStatus('current')
if mibBuilder.loadTexts: agentClearSwitchStats.setDescription('clear all switch statistics')
agentClearBufferedLog = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearBufferedLog.setStatus('current')
if mibBuilder.loadTexts: agentClearBufferedLog.setDescription('Clear Buffered Log')
agentClearTrapLog = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearTrapLog.setStatus('current')
if mibBuilder.loadTexts: agentClearTrapLog.setDescription('clear trap log')
agentClearVlan = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentClearVlan.setStatus('current')
if mibBuilder.loadTexts: agentClearVlan.setDescription('clear vlan entries')
agentResetSystem = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentResetSystem.setStatus('current')
if mibBuilder.loadTexts: agentResetSystem.setDescription('Resets the switch. This object is not valid for stacking platforms.')
agentConfigCurrentSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConfigCurrentSystemTime.setStatus('current')
if mibBuilder.loadTexts: agentConfigCurrentSystemTime.setDescription('Current System Time in hh:mm:ss D M Y format, e.g., 13:45:50 25 9 2004. Users have to disable agentSntpClientMode in SNTP-CLIENT-MIB before configuring agentConfigCurrentSystemTime.')
agentCpuLoad = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCpuLoad.setStatus('current')
if mibBuilder.loadTexts: agentCpuLoad.setDescription('The CPU load.')
agentCpuLoadOneMin = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCpuLoadOneMin.setStatus('current')
if mibBuilder.loadTexts: agentCpuLoadOneMin.setDescription('The CPU load average in 1 minute.')
agentCpuLoadFiveMin = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCpuLoadFiveMin.setStatus('current')
if mibBuilder.loadTexts: agentCpuLoadFiveMin.setDescription('The CPU load average in 5 minutes.')
agentStartupConfigErase = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("erase", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentStartupConfigErase.setStatus('obsolete')
if mibBuilder.loadTexts: agentStartupConfigErase.setDescription('Erase the text-based configuration file stored in non-volatile memory.On read returns 0.')
agentDaiConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21))
agentDaiSrcMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiSrcMacValidate.setStatus('current')
if mibBuilder.loadTexts: agentDaiSrcMacValidate.setDescription("This object indicates whether Sender MAC validation in the ARP packets is enabled. If this object is set to 'true', validation is enabled. If this object is set to 'false', validation is disabled.")
agentDaiDstMacValidate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiDstMacValidate.setStatus('current')
if mibBuilder.loadTexts: agentDaiDstMacValidate.setDescription("This object indicates whether Target MAC validation in the ARP Response packets is enabled. If this object is set to 'true', validation is enabled. If this object is set to 'false', validation is disabled.")
agentDaiIPValidate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIPValidate.setStatus('current')
if mibBuilder.loadTexts: agentDaiIPValidate.setDescription("This object indicates whether IP address validation in the ARP packets is enabled. If this object is set to 'true', validation is enabled. If this object is set to 'false', validation is disabled.")
agentDaiVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 4), )
if mibBuilder.loadTexts: agentDaiVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanConfigTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
agentDaiVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 4, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDaiVlanIndex"))
if mibBuilder.loadTexts: agentDaiVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanConfigEntry.setDescription('A row instance contains the configuration for Dynamic ARP Inspection at each existing VLAN.')
agentDaiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDaiVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanIndex.setDescription('This object indicates the VLAN number on which Dynamic ARP Inspection feature is configured.')
agentDaiVlanDynArpInspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanDynArpInspEnable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDynArpInspEnable.setDescription("This object indicates whether Dynamic ARP Inspection is enabled in this VLAN. If this object is set to 'true', Dynamic ARP Inspection is enabled. If this object is set to 'false', Dynamic ARP Inspection is disabled.")
agentDaiVlanLoggingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanLoggingEnable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanLoggingEnable.setDescription("This object indicates whether the Dynamic ARP Inspection logging is enabled on this VlAN. If this object is set to 'true', Dynamic ARP Inspection logging is enabled. If this object is set to 'false', Dynamic ARP Inspection loging is disabled.")
agentDaiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanArpAclName.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanArpAclName.setDescription('This object indicates the ARP ACL name set for this VLAN.')
agentDaiVlanArpAclStaticFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiVlanArpAclStaticFlag.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanArpAclStaticFlag.setDescription("This object indicates whether the ARP ACL set for this VLAN has static flag set. If this object is set to 'true', static flag is enabled. If this object is set to 'false', static flag is disabled.")
agentDaiStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDaiStatsReset.setDescription('Clear the DAI statistics on all vlans. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentDaiVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6), )
if mibBuilder.loadTexts: agentDaiVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanStatsTable.setDescription('A table provides the mechanism to control Dynamic ARP Inspection per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
agentDaiVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDaiVlanStatsIndex"))
if mibBuilder.loadTexts: agentDaiVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanStatsEntry.setDescription('A row instance contains the Dynamic ARP Inspection statistics per VLAN.')
agentDaiVlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDaiVlanStatsIndex.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanStatsIndex.setDescription('This object indicates the VLAN number on which Dynamic ARP Inspection statistics are retrieved.')
agentDaiVlanPktsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanPktsForwarded.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanPktsForwarded.setDescription('Number of valid ARP packets forwarded by DAI.')
agentDaiVlanPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanPktsDropped.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanPktsDropped.setDescription('Number of invalid ARP packets dropped by DAI.')
agentDaiVlanDhcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDhcpDrops.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDhcpDrops.setDescription('Number of ARP packets that were dropped by DAI as there is no matching DHCP Snooping binding entry found.')
agentDaiVlanDhcpPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDhcpPermits.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDhcpPermits.setDescription('Number of ARP packets that were forwarded by DAI as there is a matching DHCP Snooping binding entry found.')
agentDaiVlanAclDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanAclDrops.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanAclDrops.setDescription('Number of ARP packets that were dropped by DAI as there is no matching ARP ACL rule found for this Vlan and the static flag is set on this vlan.')
agentDaiVlanAclPermits = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanAclPermits.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanAclPermits.setDescription('Number of ARP packets that were permitted by DAI as there is a matching ARP ACL rule found for this Vlan.')
agentDaiVlanSrcMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanSrcMacFailures.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanSrcMacFailures.setDescription("Number of ARP packets that were dropped by DAI as the sender mac address in ARP packet didn't match the source mac in ethernet header.")
agentDaiVlanDstMacFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanDstMacFailures.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanDstMacFailures.setDescription("Number of ARP packets that were dropped by DAI as the target mac address in ARP reply packet didn't match the destination mac in ethernet header.")
agentDaiVlanIpValidFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDaiVlanIpValidFailures.setStatus('current')
if mibBuilder.loadTexts: agentDaiVlanIpValidFailures.setDescription('Number of ARP packets that were dropped by DAI as the sender IP address in ARP packet or target IP address in ARP reply packet is invalid. Invalid addresses include 0.0.0.0, 255.255.255.255, IP multicast addresses, class E addresses (240.0.0.0/4), loopback addresses (127.0.0.0/8).')
agentDaiIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 7), )
if mibBuilder.loadTexts: agentDaiIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for Dynamic ARP Inspection purpose at each physical interface capable of this feature.')
agentDaiIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDaiIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfConfigEntry.setDescription('A row instance contains the configuration for Dynamic ARP Inspection at each physical interface capable of this feature.')
agentDaiIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfTrustEnable.setDescription("This object indicates whether the interface is trusted for Dynamic ARP Inspection purpose. If this object is set to 'true', the interface is trusted. ARP packets coming to this interface will be forwarded without checking. If this object is set to 'false', the interface is not trusted. ARP packets coming to this interface will be subjected to ARP inspection.")
agentDaiIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(15)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfRateLimit.setDescription('This object indicates rate limit value for Dynamic ARP Inspection purpose. If the incoming rate of ARP packets exceeds the value of this object for consecutively burst interval seconds, ARP packets will be dropped. Value of -1 indicates that there is no rate limit.')
agentDaiIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 21, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDaiIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: agentDaiIfBurstInterval.setDescription('This object indicates the burst interval value for rate limiting purpose on this interface.')
agentArpAclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22))
agentArpAclTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 1), )
if mibBuilder.loadTexts: agentArpAclTable.setStatus('current')
if mibBuilder.loadTexts: agentArpAclTable.setDescription('A table of the ARP ACL entries')
agentArpAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentArpAclName"))
if mibBuilder.loadTexts: agentArpAclEntry.setStatus('current')
if mibBuilder.loadTexts: agentArpAclEntry.setDescription('Represents entry for an ARP ACL')
agentArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclName.setStatus('current')
if mibBuilder.loadTexts: agentArpAclName.setDescription('Name of the ARP ACL, which must consist of 1 to 31 alphanumeric characters and uniquely identify this ARP ACL. This object must be set to complete a new ARP ACL row instance.')
agentArpAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRowStatus.setDescription('The status of this conceptual row. Entries can not be deleted until all rows in arpAclRuleTable with corresponding values of arpAclIndex have been deleted. active(1) - this ACL instance is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentArpAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 2), )
if mibBuilder.loadTexts: agentArpAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleTable.setDescription('A table of the ARP ACL Rule entries')
agentArpAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentArpAclName"), (0, "SWITCHING-MIB", "agentArpAclRuleMatchSenderIpAddr"), (0, "SWITCHING-MIB", "agentArpAclRuleMatchSenderMacAddr"))
if mibBuilder.loadTexts: agentArpAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleEntry.setDescription('Represents entry for a set of ARP ACL-match rules')
agentArpAclRuleMatchSenderIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderIpAddr.setDescription('Sender IP address match value for the ARP ACL.')
agentArpAclRuleMatchSenderMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 2, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleMatchSenderMacAddr.setDescription('Sender MAC address match value for the ARP ACL.')
agentArpAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 22, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentArpAclRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentArpAclRuleRowStatus.setDescription('The status of this conceptual row. active(1) - this ACL Rule is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDhcpSnoopingConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23))
agentDhcpSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingAdminMode.setDescription("This object indicates whether DHCP Snooping is enabled globally. If this object is set to 'true',admin mode is enabled globally. If this object is set to 'false',admin mode is disabled globally.")
agentDhcpSnoopingVerifyMac = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVerifyMac.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVerifyMac.setDescription("This object indicates whether source Mac address in the received DHCP Message needs to be verified or not. If this object is set to 'true',verifyMac is enabled globally. If this object is set to 'false',verifyMac is disabled globally.")
agentDhcpSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 3), )
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigTable.setDescription('A table provides the mechanism to control DHCP SNOOPING per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
agentDhcpSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 3, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDhcpSnoopingVlanIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanConfigEntry.setDescription('A row instance contains the configuration for DHCP SNOOPING at each existing VLAN.')
agentDhcpSnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpSnoopingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanIndex.setDescription('This object indicates the VLAN number on which DHCP SNOOPING Inspection feature is configured.')
agentDhcpSnoopingVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingVlanEnable.setDescription("This object indicates whether DHCP SNOOPING is enabled in this VLAN. If this object is set to 'true', DHCP SNOOPING is enabled. If this object is set to 'false', DHCP SNOOPING is disabled.")
agentDhcpSnoopingIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 4), )
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigTable.setDescription('A table provides the mechanism to configure the trust state for DHCP snooping purpose at each physical interface capable of this feature.')
agentDhcpSnoopingIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfConfigEntry.setDescription('A row instance contains the configuration for DHCP snooping at each physical interface capable of this feature.')
agentDhcpSnoopingIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfTrustEnable.setDescription('This object indicates whether the interface is trusted for DHCP snooping purpose.')
agentDhcpSnoopingIfLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfLogEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfLogEnable.setDescription('This object indicates whether the Logging needs on DHCP snooping validations or not')
agentDhcpSnoopingIfRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 300), )).clone(-1)).setUnits('packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfRateLimit.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfRateLimit.setDescription('This object indicates rate limit value for DHCP Snooping purpose. If the incoming rate of DHCP packets exceeds the value of this object for consecutively burst interval seconds, DHCP packets will be dropped. Value of -1 indicates that there is no rate limit.')
agentDhcpSnoopingIfBurstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 15), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingIfBurstInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingIfBurstInterval.setDescription('This object indicates the burst interval value for rate limiting purpose on this interface. Value of -1 indicates that there is no burst interval.')
agentIpsgIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 5), )
if mibBuilder.loadTexts: agentIpsgIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfConfigTable.setDescription('A table provides the mechanism to configure the IPSG at each physical interface capable of this feature.')
agentIpsgIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentIpsgIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfConfigEntry.setDescription('A row instance contains the configuration for IPSG at each physical interface capable of this feature.')
agentIpsgIfVerifySource = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfVerifySource.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfVerifySource.setDescription('This object indicates whether IP packets received on this interface are filtered based on whether IP Source Guard considers the source IP address to be a valid client address. Setting this variable to false automatically sets agentIpsgIfPortSecurity to false.')
agentIpsgIfPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpsgIfPortSecurity.setStatus('current')
if mibBuilder.loadTexts: agentIpsgIfPortSecurity.setDescription('This object indicates whether IP packets received on this interface are filtered based on whether IP Source Guard considers the source MAC address to be a valid client address. The port security option cannot be enabled unless agentIpsgIfVerifySource is also enabled. That is, MAC address filtering cannot be done without also doing IP address filtering. But IP address filtering can be done without MAC address filtering. Once the port security option is enabled, it can only be disabled by disabling agentIpsgIfVerifySource.')
agentDhcpSnoopingStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsReset.setDescription('Clear the DHCP snooping statistics on all ports. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentDhcpSnoopingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 7), )
if mibBuilder.loadTexts: agentDhcpSnoopingStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsTable.setDescription('A table provides the mechanism for statics of DHCP snooping.')
agentDhcpSnoopingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpSnoopingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStatsEntry.setDescription('A row instance contains the DHCP snooping statistics per VLAN.')
agentDhcpSnoopingMacVerifyFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingMacVerifyFailures.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingMacVerifyFailures.setDescription('This object indicates the number of failure verifications of client mac address with source mac address')
agentDhcpSnoopingInvalidClientMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidClientMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidClientMessages.setDescription('This object indicates the number of invalid DHCP releases and denay messages')
agentDhcpSnoopingInvalidServerMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidServerMessages.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingInvalidServerMessages.setDescription('This object indicates the number of invalid DHCP server mesaages')
agentStaticIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 8), )
if mibBuilder.loadTexts: agentStaticIpsgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingTable.setDescription('A table of the IPSG static entries')
agentStaticIpsgBinding = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 8, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentStaticIpsgBindingIfIndex"), (0, "SWITCHING-MIB", "agentStaticIpsgBindingVlanId"), (0, "SWITCHING-MIB", "agentStaticIpsgBindingMacAddr"), (0, "SWITCHING-MIB", "agentStaticIpsgBindingIpAddr"))
if mibBuilder.loadTexts: agentStaticIpsgBinding.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBinding.setDescription('Represents a binding in IPSG table')
agentStaticIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 8, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingIfIndex.setDescription('Interface on which this IPSG binding is going to be added.')
agentStaticIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 8, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingVlanId.setDescription(' VLAN to whcig this IPSG binding is going to be added.')
agentStaticIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 8, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingMacAddr.setDescription('MAC address match value for the IPSG Binding.')
agentStaticIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 8, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingIpAddr.setDescription('IP address match value for the IPSG Binding.')
agentStaticIpsgBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticIpsgBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticIpsgBindingRowStatus.setDescription('The status of this conceptual row. active(1) - this IPSG Binding is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDynamicIpsgBindingTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 9), )
if mibBuilder.loadTexts: agentDynamicIpsgBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingTable.setDescription('A table of the IPSG dynamic entries')
agentDynamicIpsgBinding = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 9, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDynamicIpsgBindingIfIndex"), (0, "SWITCHING-MIB", "agentDynamicIpsgBindingVlanId"), (0, "SWITCHING-MIB", "agentDynamicIpsgBindingMacAddr"), (0, "SWITCHING-MIB", "agentDynamicIpsgBindingIpAddr"))
if mibBuilder.loadTexts: agentDynamicIpsgBinding.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBinding.setDescription('Represents a binding in IPSG table')
agentDynamicIpsgBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingIfIndex.setDescription('Interface on which this IPSG binding is added.')
agentDynamicIpsgBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 9, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingVlanId.setDescription(' VLAN to whcig this IPSG binding is going to be added.')
agentDynamicIpsgBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 9, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingMacAddr.setDescription('MAC address match value for the IPSG Binding.')
agentDynamicIpsgBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicIpsgBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicIpsgBindingIpAddr.setDescription('Sender IP address match value for the IPSG Binding.')
agentStaticDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 10), )
if mibBuilder.loadTexts: agentStaticDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingTable.setDescription('A table of the DHCP SNOOPING static entries')
agentStaticDsBinding = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 10, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentStaticDsBindingMacAddr"))
if mibBuilder.loadTexts: agentStaticDsBinding.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBinding.setDescription('Represents a binding in DHCP SNOOPING table')
agentStaticDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 10, 1, 1), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
agentStaticDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 10, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingVlanId.setDescription('VLAN to which this DHCP SNOOPING binding is going to be added.')
agentStaticDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
agentStaticDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 10, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
agentStaticDsBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentStaticDsBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: agentStaticDsBindingRowStatus.setDescription('The status of this conceptual row. active(1) - this DHCP SNOOPING Binding is active createAndGo(4) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
agentDynamicDsBindingTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 11), )
if mibBuilder.loadTexts: agentDynamicDsBindingTable.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingTable.setDescription('A table of the DHCP SNOOPING Dynamic entries')
agentDynamicDsBinding = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 11, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDynamicDsBindingMacAddr"))
if mibBuilder.loadTexts: agentDynamicDsBinding.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBinding.setDescription('Represents a binding in DHCP SNOOPING table')
agentDynamicDsBindingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingIfIndex.setDescription('Interface on which this DHCP SNOOPING binding is going to be added.')
agentDynamicDsBindingVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 11, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingVlanId.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingVlanId.setDescription(' VLAN to whcig this DHCP SNOOPING binding is going to be added.')
agentDynamicDsBindingMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 11, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingMacAddr.setDescription('MAC address match value for the DHCP SNOOPING Binding.')
agentDynamicDsBindingIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingIpAddr.setDescription('IP address match value for the DHCP SNOOPING Binding.')
agentDynamicDsBindingLeaseRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 11, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDynamicDsBindingLeaseRemainingTime.setStatus('current')
if mibBuilder.loadTexts: agentDynamicDsBindingLeaseRemainingTime.setDescription('This specifies the period for which the DHCP SNOOPING Binding is valid.')
agentDhcpSnoopingRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteFileName.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteFileName.setDescription('This object indicates the file name on the remote machine to save the DHCP Snooping bindings. This will be set only when we have a valid remote IP.')
agentDhcpSnoopingRemoteIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingRemoteIpAddr.setDescription('This object indicates the IP address of the remote machine to save the DHCP Snooping bindings. This will be set only when we have a valid file name.')
agentDhcpSnoopingStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStoreInterval.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStoreInterval.setDescription('This object indicates the perodic time interval to save the DHCP Snooping bindings.')
agentDhcpSnoopingStoreTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 23, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpSnoopingStoreTimeout.setStatus('current')
if mibBuilder.loadTexts: agentDhcpSnoopingStoreTimeout.setDescription('This object indicates the perodic timeout to delete from DHCP Snooping bindings.')
agentDNSConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18))
agentDNSConfigDomainLookupStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigDomainLookupStatus.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigDomainLookupStatus.setDescription('Enables/Disable DNS-based host name-to-address translation.')
agentDNSConfigDefaultDomainName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigDefaultDomainName.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigDefaultDomainName.setDescription('Defines a default domain name for incomplete host names at most 64 characters.')
agentDNSConfigDefaultDomainNameRemove = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigDefaultDomainNameRemove.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigDefaultDomainNameRemove.setDescription('Remove the default domain name for incomplete host name.')
agentDNSConfigDomainNameListTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 4), )
if mibBuilder.loadTexts: agentDNSConfigDomainNameListTable.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigDomainNameListTable.setDescription('Defines a Table of domain names for incomplete host names')
agentDNSConfigDomainNameListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 4, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDNSConfigDomainNameListIndex"))
if mibBuilder.loadTexts: agentDNSConfigDomainNameListEntry.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigDomainNameListEntry.setDescription('Defines a Entry of domain names for incomplete host names ')
agentDNSConfigDomainNameListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigDomainNameListIndex.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigDomainNameListIndex.setDescription('Agent Domain Name List Index of the switch')
agentDNSDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDNSDomainName.setStatus('current')
if mibBuilder.loadTexts: agentDNSDomainName.setDescription('Define a domain name for incomplete host name.')
agentDNSDomainNameRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSDomainNameRemove.setStatus('current')
if mibBuilder.loadTexts: agentDNSDomainNameRemove.setDescription('Remove a domain name for incomplete host name.')
agentDNSConfigNameServerListTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 5), )
if mibBuilder.loadTexts: agentDNSConfigNameServerListTable.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigNameServerListTable.setDescription('Specifie the address of one or more name servers ')
agentDNSConfigNameServerListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 5, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDNSConfigNameServerListIndex"))
if mibBuilder.loadTexts: agentDNSConfigNameServerListEntry.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigNameServerListEntry.setDescription('Defines a Entry of the address of one or more name servers ')
agentDNSConfigNameServerListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigNameServerListIndex.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigNameServerListIndex.setDescription('Agent name servers List Index of the switch')
agentDNSConfigNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDNSConfigNameServer.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigNameServer.setDescription('Specifies the address of one or more name servers.')
agentDNSConfigRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigRequest.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigRequest.setDescription('Agent Request of name server')
agentDNSConfigResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigResponse.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigResponse.setDescription('Agent Response of name server')
agentDNSConfigNameServerRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigNameServerRemove.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigNameServerRemove.setDescription('Remove a address of name server.')
agentIPv6DNSConfigNameServerListTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 13), )
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerListTable.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerListTable.setDescription('Specifie the ipv6 address of one or more name servers ')
agentIPv6DNSConfigNameServerListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 13, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentIPv6DNSConfigNameServerListIndex"))
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerListEntry.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerListEntry.setDescription('Defines a Entry of the ipv6 address of one or more name servers ')
agentIPv6DNSConfigNameServerListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerListIndex.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerListIndex.setDescription('Agent name servers List Index of the switch')
agentIPv6DNSConfigNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 13, 1, 2), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServer.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServer.setDescription('Specifies the ipv6 address of one or more name servers.')
agentIPv6DNSConfigRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigRequest.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigRequest.setDescription('Agent Request of name server')
agentIPv6DNSConfigResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigResponse.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigResponse.setDescription('Agent Response of name server')
agentIPv6DNSConfigNameServerRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerRemove.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigNameServerRemove.setDescription('Remove a ipv6 address of name server.')
agentDNSConfigCacheTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 6), )
if mibBuilder.loadTexts: agentDNSConfigCacheTable.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigCacheTable.setDescription('Displays entries in the DNS cache ')
agentDNSConfigCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 6, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDNSConfigCacheIndex"))
if mibBuilder.loadTexts: agentDNSConfigCacheEntry.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigCacheEntry.setDescription('Displays entries in the DNS cache ')
agentDNSConfigCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigCacheIndex.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigCacheIndex.setDescription('Agent DNS cache Index of the switch')
agentDNSConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigDomainName.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigDomainName.setDescription('Displays one or more Domain name servers.')
agentDNSConfigIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigIpAddress.setDescription('Displays the address of one or more name servers.')
agentDNSConfigTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigTTL.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigTTL.setDescription('Displays the TTL of one or more name servers.')
agentDNSConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigFlag.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigFlag.setDescription('Displays the Flag of one or more name servers.')
agentIPv6DNSConfigCacheTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 14), )
if mibBuilder.loadTexts: agentIPv6DNSConfigCacheTable.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigCacheTable.setDescription('Displays entries in the DNS cache ')
agentIPv6DNSConfigCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 14, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentIPv6DNSConfigCacheIndex"))
if mibBuilder.loadTexts: agentIPv6DNSConfigCacheEntry.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigCacheEntry.setDescription('Displays entries in the DNS cache ')
agentIPv6DNSConfigCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigCacheIndex.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigCacheIndex.setDescription('Agent DNS cache Index of the switch')
agentIPv6DNSConfigDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigDomainName.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigDomainName.setDescription('Displays one or more Domain name servers.')
agentIPv6DNSConfigIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 14, 1, 3), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigIpAddress.setDescription('Displays the ipv6 address of one or more name servers.')
agentIPv6DNSConfigTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigTTL.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigTTL.setDescription('Displays the TTL of one or more name servers.')
agentIPv6DNSConfigFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigFlag.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigFlag.setDescription('Displays the Flag of one or more name servers.')
agentDNSConfigHostTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 7), )
if mibBuilder.loadTexts: agentDNSConfigHostTable.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigHostTable.setDescription('Displays the static host name-to-address mapping table')
agentDNSConfigHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 7, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDNSConfigHostIndex"))
if mibBuilder.loadTexts: agentDNSConfigHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigHostEntry.setDescription('Displays the static host name-to-address mapping table')
agentDNSConfigHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDNSConfigHostIndex.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigHostIndex.setDescription('Agent Host Index of the switch')
agentDNSConfigHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 7, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDNSConfigHostName.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigHostName.setDescription('Display the static host name.')
agentDNSConfigHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 7, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentDNSConfigHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigHostIpAddress.setDescription('Display the static host IP/IPv6 address.')
agentDNSConfigHostNameRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigHostNameRemove.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigHostNameRemove.setDescription('Remove static host name.')
agentIPv6DNSConfigHostTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 15), )
if mibBuilder.loadTexts: agentIPv6DNSConfigHostTable.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigHostTable.setDescription('Displays the static host name-to-address mapping table')
agentDNSConfigSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 16), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigSourceInterface.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigSourceInterface.setDescription('A source-interface selection on an Interface Index (like vlan based routing interface, port based routing interface, loopback interface, tunnel interface). A non-zero value indicates ifIndex for the corresponding interface entry in the ifTable is selected. A zero value indicates the source-interface un-selection.')
agentIPv6DNSConfigHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 15, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentIPv6DNSConfigHostIndex"))
if mibBuilder.loadTexts: agentIPv6DNSConfigHostEntry.setStatus('current')
if mibBuilder.loadTexts: agentIPv6DNSConfigHostEntry.setDescription('Displays the static host name-to-address mapping table Obsolete, move to agentDNSConfigHostTable')
agentIPv6DNSConfigHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6DNSConfigHostIndex.setStatus('obsolete')
if mibBuilder.loadTexts: agentIPv6DNSConfigHostIndex.setDescription('Agent Host Index of the switch')
agentIPv6DNSConfigHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 15, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIPv6DNSConfigHostName.setStatus('obsolete')
if mibBuilder.loadTexts: agentIPv6DNSConfigHostName.setDescription('Display the static host name.')
agentIPv6DNSConfigHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 15, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIPv6DNSConfigHostIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: agentIPv6DNSConfigHostIpAddress.setDescription('Display the static host IPv6 address.')
agentIPv6DNSConfigHostNameRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIPv6DNSConfigHostNameRemove.setStatus('obsolete')
if mibBuilder.loadTexts: agentIPv6DNSConfigHostNameRemove.setDescription('Remove static host name.')
agentDNSConfigClearDomainNameList = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigClearDomainNameList.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigClearDomainNameList.setDescription('Enables/Disable Clear all entries domain names for incomplete host names.')
agentDNSConfigClearCache = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigClearCache.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigClearCache.setDescription('Enables/Disable Clear all entries from the DNS cache.')
agentDNSConfigClearHosts = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigClearHosts.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigClearHosts.setDescription('Enables/Disable Clear all static host name-to-address mapping.')
agentDNSConfigClearDNS = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigClearDNS.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigClearDNS.setDescription('Enables/Disable set the DNS configuration to default value.')
agentDNSConfigClearDNSCounters = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 18, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDNSConfigClearDNSCounters.setStatus('current')
if mibBuilder.loadTexts: agentDNSConfigClearDNSCounters.setDescription('Enables/Disable Clear Request and Response of all DNS .')
agentDhcpL2RelayConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24))
agentDhcpL2RelayAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayAdminMode.setDescription("This object indicates whether DHCP L2 Relay is enabled globally. If this object is set to 'true',admin mode is enabled globally. If this object is set to 'false',admin mode is disabled globally.")
agentDhcpL2RelayIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 2), )
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigTable.setDescription('A table provides the mechanism to enable/disable and configure the trust state for DHCP L2Relay purpose at each physical interface capable of this feature.')
agentDhcpL2RelayIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfConfigEntry.setDescription('A row instance contains the configuration for DHCP L2 Relay at each physical interface capable of this feature.')
agentDhcpL2RelayIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfEnable.setDescription('This object indicates whether the DHCP L2Relay is enabled or not')
agentDhcpL2RelayIfTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayIfTrustEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayIfTrustEnable.setDescription('This object indicates whether the interface is trusted for DHCP L2 Relay purpose.')
agentDhcpL2RelayVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 3), )
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigTable.setDescription('A table provides the mechanism to control DHCP L2 Relay per VLAN. When a VLAN is created in a device supporting this table, a corresponding entry of this table will be added.')
agentDhcpL2RelayVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 3, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentDhcpL2RelayVlanIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanConfigEntry.setDescription('A row instance contains the configuration for DHCP L2 Relay at each existing VLAN.')
agentDhcpL2RelayVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 3, 1, 1), VlanIndex())
if mibBuilder.loadTexts: agentDhcpL2RelayVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanIndex.setDescription('This object indicates the VLAN number on which DHCP L2 Relay feature is configured.')
agentDhcpL2RelayVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayVlanEnable.setDescription("This object indicates whether DHCP L2 Relay is enabled in this VLAN. If this object is set to 'true', DHCP L2 Relay is enabled. If this object is set to 'false', DHCP L2 Relay is disabled.")
agentDhcpL2RelayCircuitIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayCircuitIdVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayCircuitIdVlanEnable.setDescription("This object indicates whether DHCP CircuitId is enabled for L2 relaying in this VLAN. If this object is set to 'true', DHCP CircuitId is enabled. If this object is set to 'false', DHCP CircuitId is disabled.")
agentDhcpL2RelayRemoteIdVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayRemoteIdVlanEnable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayRemoteIdVlanEnable.setDescription('When this object is set with a non-empty string, DHCP RemoteId is enabled for L2 relaying in this VLAN.')
agentDhcpL2RelayStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpL2RelayStatsReset.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsReset.setDescription('Clear the DHCP L2Relay statistics on all ports. A value of reset(1) is used to reset the statistics. A read on this object will always return the value none(0). The value none(0) cannot be forcibly set by the administrator.')
agentDhcpL2RelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 7), )
if mibBuilder.loadTexts: agentDhcpL2RelayStatsTable.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsTable.setDescription('A table provides the mechanism for statics of DHCP L2 Relay.')
agentDhcpL2RelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: agentDhcpL2RelayStatsEntry.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayStatsEntry.setDescription('A row instance contains the DHCP L2Relay statistics per interface.')
agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82.setDescription('This object indicates the number of DHCP server messages received with Option-82 field on the untrusted interface.')
agentDhcpL2RelayUntrustedClntMsgsWithOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedClntMsgsWithOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayUntrustedClntMsgsWithOptn82.setDescription('This object indicates the number of DHCP client messages received with Option-82 field on the untrusted interface.')
agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82.setDescription('This object indicates the number of DHCP server messages received without Option-82 field on the trusted interface.')
agentDhcpL2RelayTrustedClntMsgsWithoutOptn82 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 24, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setStatus('current')
if mibBuilder.loadTexts: agentDhcpL2RelayTrustedClntMsgsWithoutOptn82.setDescription('This object indicates the number of DHCP client messages received without Option-82 field on the trusted interface.')
agentSwitchVoiceVLANGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 25))
agentSwitchVoiceVlanDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 25, 2), )
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceTable.setDescription('A table of the Voice Vlan device entries.')
agentSwitchVoiceVlanDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 25, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSwitchVoiceVlanInterfaceNum"), (0, "SWITCHING-MIB", "agentSwitchVoiceVlanDeviceMacAddress"))
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceEntry.setDescription('Represents entry for a Voice Device on the interface.')
agentSwitchVoiceVlanInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanInterfaceNum.setDescription('The interface number of this interface.')
agentSwitchVoiceVlanDeviceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 25, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentSwitchVoiceVlanDeviceMacAddress.setDescription('The Voice Device Mac address')
agentSwitchAddressConflictGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26))
agentSwitchAddressConflictDetectionStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatus.setDescription("Displays if an address conflict was detected on the switch since the last reset of the status. Set to 'true' if detected, 'false' otherwise.")
agentSwitchAddressConflictDetectionStatusReset = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatusReset.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionStatusReset.setDescription('Clear the last address conflict detection status in the switch. A value of reset(1) is used to reset the status. A read on this object always returns the value none (0). The value none (0) cannot be forcibly set by the administrator.')
agentSwitchLastConflictingIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictingIPAddr.setDescription('The reported conflicting IP address on the switch since the last reset of the conflict detection status.')
agentSwitchLastConflictingMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictingMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictingMacAddr.setDescription('The MAC address of the host corresponding to the reported conflicting IP address on the switch since the last reset of the conflict detection status.')
agentSwitchLastConflictReportedTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchLastConflictReportedTime.setStatus('current')
if mibBuilder.loadTexts: agentSwitchLastConflictReportedTime.setDescription("Time since the last address conflict was detected. It is displayed in days, hours, minutes and seconds. It is set to a valid value only when the conflict detection status is 'true'.")
agentSwitchConflictIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 6), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictIPAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchConflictIPAddr.setDescription("The IP address on the switch reported to have a conflict with another host's IP address.")
agentSwitchConflictMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentSwitchConflictMacAddr.setStatus('current')
if mibBuilder.loadTexts: agentSwitchConflictMacAddr.setDescription('The MAC address of the host that has an IP address conflicting with the IP address on the switch.')
agentSwitchAddressConflictDetectionRun = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 26, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("run", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionRun.setStatus('current')
if mibBuilder.loadTexts: agentSwitchAddressConflictDetectionRun.setDescription('Trigger the action to run the active address conflict detection. A value of run(1) is used to issue the action command. A read on this object always returns the value none(0). The value none (0) cannot be forcibly set by the administrator.')
switchingTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50))
multipleUsersTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 1))
if mibBuilder.loadTexts: multipleUsersTrap.setStatus('current')
if mibBuilder.loadTexts: multipleUsersTrap.setDescription('This trap is sent when more than one user is logged in with administrative access. Only applies to CLI interface.')
broadcastStormStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 2))
if mibBuilder.loadTexts: broadcastStormStartTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormStartTrap.setDescription('This trap is sent when a broadcast storm is detected.')
broadcastStormEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 3))
if mibBuilder.loadTexts: broadcastStormEndTrap.setStatus('obsolete')
if mibBuilder.loadTexts: broadcastStormEndTrap.setDescription('This trap is sent when a broadcast storm is no longer detected.')
linkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 4))
if mibBuilder.loadTexts: linkFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: linkFailureTrap.setDescription('')
vlanRequestFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 5)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRequestFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRequestFailureTrap.setDescription('')
vlanDeleteLastTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 6)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDeleteLastTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDeleteLastTrap.setDescription('Trap is sent when attempting to delete the last configured VLAN or the Default VLAN.')
vlanDefaultCfgFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 7)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultCfgFailureTrap.setDescription('Trap is sent if there are failures in resetting VLAN configuration to defaults.')
vlanRestoreFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 8)).setObjects(("Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: vlanRestoreFailureTrap.setDescription('')
fanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 9))
if mibBuilder.loadTexts: fanFailureTrap.setStatus('obsolete')
if mibBuilder.loadTexts: fanFailureTrap.setDescription('')
stpInstanceNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 10)).setObjects(("SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceNewRootTrap.setDescription('Trap is sent when this machine is a new STP Root when there is more than one STP instance.')
stpInstanceTopologyChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 11)).setObjects(("SWITCHING-MIB", "agentStpMstId"))
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceTopologyChangeTrap.setDescription('Trap is sent when there is a STP topology change when there is more than one STP instance.')
powerSupplyStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 12))
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setStatus('obsolete')
if mibBuilder.loadTexts: powerSupplyStatusChangeTrap.setDescription('')
failedUserLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 13))
if mibBuilder.loadTexts: failedUserLoginTrap.setStatus('current')
if mibBuilder.loadTexts: failedUserLoginTrap.setDescription('Trap is sent when a user fails to authenticate via the CLI or Web interfaces.')
temperatureTooHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 14))
if mibBuilder.loadTexts: temperatureTooHighTrap.setStatus('current')
if mibBuilder.loadTexts: temperatureTooHighTrap.setDescription('temperatureTooHighTrap')
stormControlDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 15))
if mibBuilder.loadTexts: stormControlDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: stormControlDetectedTrap.setDescription('stormControlDetectedTrap')
stormControlStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 16))
if mibBuilder.loadTexts: stormControlStopTrap.setStatus('current')
if mibBuilder.loadTexts: stormControlStopTrap.setDescription('stormControlStopTrap')
userLockoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 17))
if mibBuilder.loadTexts: userLockoutTrap.setStatus('current')
if mibBuilder.loadTexts: userLockoutTrap.setDescription('Trap is sent when a user account is locked due to consecutive failed login attempts via the CLI or Web interfaces beyond the allowed limit.')
daiIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 18)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: daiIntfErrorDisabledTrap.setStatus('current')
if mibBuilder.loadTexts: daiIntfErrorDisabledTrap.setDescription('Trap is sent once an interface is error disabled by DAI when the incoming packet rate exceeded configured rate limit during a burst-interval.')
stpInstanceLoopInconsistentStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 19)).setObjects(("SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentStartTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceLoopInconsistentStartTrap.setDescription('Trap is sent when this port in this STP instance enters loop inconsistent state upon failure to receive a BPDU.')
stpInstanceLoopInconsistentEndTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 20)).setObjects(("SWITCHING-MIB", "agentStpMstId"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpInstanceLoopInconsistentEndTrap.setStatus('current')
if mibBuilder.loadTexts: stpInstanceLoopInconsistentEndTrap.setDescription('Trap is sent when this port in this STP instance exits loop inconsistent state upon reception of a BPDU.')
dhcpSnoopingIntfErrorDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 21)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dhcpSnoopingIntfErrorDisabledTrap.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopingIntfErrorDisabledTrap.setDescription('Trap is sent once an interface is error disabled by DHCP Snooping when the incoming packet rate exceeded configured rate limit during a burst-interval.')
noStartupConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 22))
if mibBuilder.loadTexts: noStartupConfigTrap.setStatus('current')
if mibBuilder.loadTexts: noStartupConfigTrap.setDescription('Trap is sent when startup-config file exists and SSH is enabled.')
agentSwitchIpAddressConflictTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 23)).setObjects(("SWITCHING-MIB", "agentSwitchConflictIPAddr"), ("SWITCHING-MIB", "agentSwitchConflictMacAddr"))
if mibBuilder.loadTexts: agentSwitchIpAddressConflictTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchIpAddressConflictTrap.setDescription('IP address conflict trap signifies the reception of an ARP from another host in the LAN that has conflicting IP address.')
agentSwitchCpuRisingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 24)).setObjects(("SWITCHING-MIB", "agentSwitchCpuProcessRisingThreshold"), ("SWITCHING-MIB", "agentSwitchCpuProcessName"))
if mibBuilder.loadTexts: agentSwitchCpuRisingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuRisingThresholdTrap.setDescription('Trap is sent when the total CPU utilization exceeds CPU Rising utilization threshold over the configured Rising threshold interval.')
agentSwitchCpuFallingThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 25)).setObjects(("SWITCHING-MIB", "agentSwitchCpuProcessFallingThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFallingThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFallingThresholdTrap.setDescription('Trap is sent when the total CPU utilization falls below CPU Falling utilization threshold over the configured falling threshold interval.')
agentSwitchCpuFreeMemBelowThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 26)).setObjects(("SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemBelowThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFreeMemBelowThresholdTrap.setDescription('Trap is sent when CPU Free Memory falls below the configured threshold.')
agentSwitchCpuFreeMemAboveThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 27)).setObjects(("SWITCHING-MIB", "agentSwitchCpuProcessFreeMemoryThreshold"))
if mibBuilder.loadTexts: agentSwitchCpuFreeMemAboveThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuFreeMemAboveThresholdTrap.setDescription('Trap is sent when CPU Free Memory rises to 10% above the configured threshold.')
configChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 28))
if mibBuilder.loadTexts: configChangedTrap.setStatus('current')
if mibBuilder.loadTexts: configChangedTrap.setDescription('Trap is sent when system config changed.')
agentSwitchCpuMemInvalidTrap = NotificationType((1, 3, 6, 1, 4, 1, 7244, 2, 1, 50, 29))
if mibBuilder.loadTexts: agentSwitchCpuMemInvalidTrap.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCpuMemInvalidTrap.setDescription('Trap is sent when Memory is invalid.')
agentSdmPreferConfigEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 27))
agentSdmPreferCurrentTemplate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSdmPreferCurrentTemplate.setStatus('current')
if mibBuilder.loadTexts: agentSdmPreferCurrentTemplate.setDescription(' Displays the current active SDM Template.')
agentSdmPreferNextTemplate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSdmPreferNextTemplate.setStatus('current')
if mibBuilder.loadTexts: agentSdmPreferNextTemplate.setDescription(' Configures the next active template. It will be active only after the next reboot. To revert to the default template after the next reboot, use the option default(0).')
agentSdmTemplateSummaryTable = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28))
agentSdmTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1), )
if mibBuilder.loadTexts: agentSdmTemplateTable.setStatus('current')
if mibBuilder.loadTexts: agentSdmTemplateTable.setDescription('Displays Switch Database Management Template Information.')
agentSdmTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentSdmTemplateId"))
if mibBuilder.loadTexts: agentSdmTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: agentSdmTemplateEntry.setDescription('Information about a SDM Template table entry.')
agentSdmTemplateId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dualIPv4andIPv6", 1), ("ipv4RoutingDefault", 2), ("ipv4DataCenter", 3))))
if mibBuilder.loadTexts: agentSdmTemplateId.setStatus('current')
if mibBuilder.loadTexts: agentSdmTemplateId.setDescription('The SDM Template type this instance is associated with.')
agentArpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentArpEntries.setStatus('current')
if mibBuilder.loadTexts: agentArpEntries.setDescription('The maximum number of entries in the IPv4 Address Resolution Protocol (ARP) cache for routing interfaces.')
agentIPv4UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv4UnicastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv4UnicastRoutes.setDescription('The maximum number of IPv4 unicast forwarding table entries.')
agentIPv6NdpEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6NdpEntries.setStatus('current')
if mibBuilder.loadTexts: agentIPv6NdpEntries.setDescription('The maximum number of IPv6 Neighbor Discovery Protocol (NDP) cache entries.')
agentIPv6UnicastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6UnicastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv6UnicastRoutes.setDescription('The maximum number of IPv6 unicast forwarding table entries.')
agentEcmpNextHops = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEcmpNextHops.setStatus('current')
if mibBuilder.loadTexts: agentEcmpNextHops.setDescription('The maximum number of Equal cost next hops that can be installed in the IPv4 and IPv6 unicast forwarding tables.')
agentIPv4MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv4MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv4MulticastRoutes.setDescription('The maximum number of IPv4 multicast forwarding table entries.')
agentIPv6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 8, 28, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIPv6MulticastRoutes.setStatus('current')
if mibBuilder.loadTexts: agentIPv6MulticastRoutes.setDescription('The maximum number of IPv6 multicast forwarding table entries.')
agentDhcpClientOptionsConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 21))
agentVendorClassOptionConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 21, 1))
agentDhcpClientVendorClassIdMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 21, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdMode.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdMode.setDescription("This object indicates whether DHCP Vendor Classifier Id Option (60) is enabled for DHCP Network Client. If this object is set to 'true', DHCP Vendor Classifier Id mode is enabled globally. If this object is set to 'false', DHCP Vendor Classifier Id mode is disabled globally.")
agentDhcpClientVendorClassIdString = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 21, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdString.setStatus('current')
if mibBuilder.loadTexts: agentDhcpClientVendorClassIdString.setDescription('When this object is set with a non-empty string, the DHCP Vendor Classifier Id Option (60) string is enabled for DHCP Network Client.')
agentExecAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29))
agentExecAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListCreate.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListCreate.setDescription('ExecAccounting List Create if set to a non empty string, creates a new ExecAccounting List for configuration.')
agentExecAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2), )
if mibBuilder.loadTexts: agentExecAccountingListTable.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListTable.setDescription('ExecAccounting Method List table.')
agentExecAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentExecAccountingListIndex"))
if mibBuilder.loadTexts: agentExecAccountingListEntry.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListEntry.setDescription('ExecAccounting Method List Entry.')
agentExecAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentExecAccountingListIndex.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListIndex.setDescription('ExecAccounting List Index Unique number used for indexing into this table.')
agentExecAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExecAccountingListName.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListName.setDescription(' Unique name used to identify the ExecAccounting List from other tables.')
agentExecAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingMethodType.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingMethodType.setDescription('ExecAccounting Method Type Configures the method type to use when this ExecAccounting list is specified.')
agentExecAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListMethod1.setDescription('ExecAccounting List Method 1 Configures the authentication method to use when this list is specified.')
agentExecAccountingListMethod2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListMethod2.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListMethod2.setDescription('ExecAccounting List Method 2 Configures the authentication method to use when this list is specified.')
agentExecAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 29, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentExecAccountingListStatus.setStatus('current')
if mibBuilder.loadTexts: agentExecAccountingListStatus.setDescription('The status of the ExecAccounting List. Supported values: active(1) - indicates a valid ExecAccounting List destroy(6) - removes the ExecAccounting List.')
agentCmdsAccountingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30))
agentCmdsAccountingListCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListCreate.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListCreate.setDescription('CmdsAccounting List Create if set to a non empty string, creates a new CmdsAccounting List for configuration.')
agentCmdsAccountingListTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 2), )
if mibBuilder.loadTexts: agentCmdsAccountingListTable.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListTable.setDescription('CmdsAccounting Method List table.')
agentCmdsAccountingListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 2, 1), ).setIndexNames((0, "SWITCHING-MIB", "agentCmdsAccountingListIndex"))
if mibBuilder.loadTexts: agentCmdsAccountingListEntry.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListEntry.setDescription('CmdsAccounting Method List Entry.')
agentCmdsAccountingListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentCmdsAccountingListIndex.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListIndex.setDescription('CmdsAccounting List Index Unique number used for indexing into this table.')
agentCmdsAccountingListName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCmdsAccountingListName.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListName.setDescription(' Unique name used to identify the CmdsAccounting List from other tables.')
agentCmdsAccountingMethodType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("start-stop", 1), ("stop-only", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingMethodType.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingMethodType.setDescription('CmdsAccounting Method Type Configures the method type to use when this CmdsAccounting list is specified.')
agentCmdsAccountingListMethod1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("undefined", 0), ("tacacs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListMethod1.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListMethod1.setDescription('CmdsAccounting List Method 1 Configures the authentication method to use when this list is specified.')
agentCmdsAccountingListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 1, 2, 30, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCmdsAccountingListStatus.setStatus('current')
if mibBuilder.loadTexts: agentCmdsAccountingListStatus.setDescription('The status of the CmdsAccounting List. Supported values: active(1) - indicates a valid CmdsAccounting List destroy(6) - removes the CmdsAccounting List.')
mibBuilder.exportSymbols("SWITCHING-MIB", agentSwitchStaticMacFilteringSourcePortMask=agentSwitchStaticMacFilteringSourcePortMask, agentSdmPreferConfigEntry=agentSdmPreferConfigEntry, agentDynamicIpsgBindingMacAddr=agentDynamicIpsgBindingMacAddr, agentPasswordManagementAging=agentPasswordManagementAging, agentLagSummaryDeletePort=agentLagSummaryDeletePort, agentSwitchSnoopingIntfMulticastRouterMode=agentSwitchSnoopingIntfMulticastRouterMode, agentPasswordManagementHistory=agentPasswordManagementHistory, agentIASUserIndex=agentIASUserIndex, agentSnmpUserAuthenticationPassword=agentSnmpUserAuthenticationPassword, agentArpAclRuleMatchSenderIpAddr=agentArpAclRuleMatchSenderIpAddr, agentPortStatsRateHCBitsPerSecondRx=agentPortStatsRateHCBitsPerSecondRx, agentPortCapability=agentPortCapability, agentInventoryAdditionalPackages=agentInventoryAdditionalPackages, agentServicePortDhcp6RELEASEMessagesSent=agentServicePortDhcp6RELEASEMessagesSent, agentLagConfigCreate=agentLagConfigCreate, agentInventoryMachineType=agentInventoryMachineType, agentDaiVlanDynArpInspEnable=agentDaiVlanDynArpInspEnable, agentDaiIfConfigTable=agentDaiIfConfigTable, agentSwitchSnoopingVlanGroupMembershipInterval=agentSwitchSnoopingVlanGroupMembershipInterval, agentSwitchMFDBForwardingPortMask=agentSwitchMFDBForwardingPortMask, agentSerialTimeout=agentSerialTimeout, agentSwitchDVlanTagTable=agentSwitchDVlanTagTable, agentDhcpL2RelayIfEnable=agentDhcpL2RelayIfEnable, agentSnmpEngineIdIndex=agentSnmpEngineIdIndex, vlanDeleteLastTrap=vlanDeleteLastTrap, agentNetworkDhcp6ADVERTISEMessagesDiscarded=agentNetworkDhcp6ADVERTISEMessagesDiscarded, agentStaticIpsgBindingRowStatus=agentStaticIpsgBindingRowStatus, agentNetworkDefaultGateway=agentNetworkDefaultGateway, agentSwitchStaticMacFilteringAddress=agentSwitchStaticMacFilteringAddress, agentStpCstPortPriority=agentStpCstPortPriority, agentSnmpTrapReceiverConfigTable=agentSnmpTrapReceiverConfigTable, switchingTraps=switchingTraps, agentStpMstRowStatus=agentStpMstRowStatus, agentProtocolGroupProtocolTable=agentProtocolGroupProtocolTable, agentPortUnicastControlThresholdUnit=agentPortUnicastControlThresholdUnit, agentLagSummaryPortStaticCapability=agentLagSummaryPortStaticCapability, agentProtocolGroupProtocolEntry=agentProtocolGroupProtocolEntry, agentAuthenticationGroup=agentAuthenticationGroup, agentPortVoiceVlanNoneMode=agentPortVoiceVlanNoneMode, agentSnmpInformConfigTableCreate=agentSnmpInformConfigTableCreate, agentDynamicIpsgBindingVlanId=agentDynamicIpsgBindingVlanId, agentSwitchMFDBSummaryEntry=agentSwitchMFDBSummaryEntry, stormControlStopTrap=stormControlStopTrap, agentConfigGroup=agentConfigGroup, agentTransferDownloadGroup=agentTransferDownloadGroup, agentServicePortDefaultGateway=agentServicePortDefaultGateway, agentSnmpCommunityConfigEntry=agentSnmpCommunityConfigEntry, agentSnmpInformAdminMode=agentSnmpInformAdminMode, agentAuthenticationListName=agentAuthenticationListName, agentPortMirrorTypeEntry=agentPortMirrorTypeEntry, agentPortMirrorTypeSourcePort=agentPortMirrorTypeSourcePort, agentUserConfigDefaultAuthenticationDot1xList=agentUserConfigDefaultAuthenticationDot1xList, agentSwitchSnoopingQuerierCfgTable=agentSwitchSnoopingQuerierCfgTable, agentDhcpSnoopingIfBurstInterval=agentDhcpSnoopingIfBurstInterval, agentSwitchCpuProcessTotalUtilization=agentSwitchCpuProcessTotalUtilization, agentSerialStopBits=agentSerialStopBits, agentSwitchVlanStaticMrouterAdminMode=agentSwitchVlanStaticMrouterAdminMode, agentPortMirroringGroup=agentPortMirroringGroup, agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82=agentDhcpL2RelayTrustedSrvrMsgsWithoutOptn82, agentServicePortBurnedInMacAddress=agentServicePortBurnedInMacAddress, agentStpMstPortForwardingState=agentStpMstPortForwardingState, agentServicePortIpv6AddressAutoConfig=agentServicePortIpv6AddressAutoConfig, agentDhcpL2RelayRemoteIdVlanEnable=agentDhcpL2RelayRemoteIdVlanEnable, agentSwitchSnoopingQuerierVlanOperMode=agentSwitchSnoopingQuerierVlanOperMode, agentSwitchCpuRisingThresholdTrap=agentSwitchCpuRisingThresholdTrap, agentSwitchPortDVlanTagCustomerId=agentSwitchPortDVlanTagCustomerId, agentServicePortDhcp6ADVERTISEMessagesReceived=agentServicePortDhcp6ADVERTISEMessagesReceived, agentSnmpInformConfigTable=agentSnmpInformConfigTable, agentTransferUploadScriptFromSwitchSrcFilename=agentTransferUploadScriptFromSwitchSrcFilename, agentStpCstConfigGroup=agentStpCstConfigGroup, agentDhcpL2RelayStatsReset=agentDhcpL2RelayStatsReset, agentCpuLoad=agentCpuLoad, agentStartupConfigErase=agentStartupConfigErase, agentCpuLoadOneMin=agentCpuLoadOneMin, agentPortStatsRateEntry=agentPortStatsRateEntry, agentSwitchCpuFreeMemBelowThresholdTrap=agentSwitchCpuFreeMemBelowThresholdTrap, agentArpAclRuleTable=agentArpAclRuleTable, agentServicePortDhcp6REPLYMessagesReceived=agentServicePortDhcp6REPLYMessagesReceived, agentSwitchSnoopingQuerierVlanTable=agentSwitchSnoopingQuerierVlanTable, agentProtocolGroupProtocolIP=agentProtocolGroupProtocolIP, agentClassOfServiceGroup=agentClassOfServiceGroup, agentLDAPRacName=agentLDAPRacName, agentStpCstPortLoopGuard=agentStpCstPortLoopGuard, agentPasswordManagementStrengthMaxConsecutiveCharacters=agentPasswordManagementStrengthMaxConsecutiveCharacters, agentStpPortStatsStpBpduRx=agentStpPortStatsStpBpduRx, agentPortMulticastControlThresholdUnit=agentPortMulticastControlThresholdUnit, agentSnmpMultipleUsersTrapFlag=agentSnmpMultipleUsersTrapFlag, agentExecAccountingListCreate=agentExecAccountingListCreate, agentDaiVlanStatsTable=agentDaiVlanStatsTable, agentLagConfigStaticCapability=agentLagConfigStaticCapability, agentLagSummaryFlushTimer=agentLagSummaryFlushTimer, agentDNSConfigCacheEntry=agentDNSConfigCacheEntry, agentSwitchSnoopingQuerierElectionParticipateMode=agentSwitchSnoopingQuerierElectionParticipateMode, agentDynamicDsBindingLeaseRemainingTime=agentDynamicDsBindingLeaseRemainingTime, agentIPv6DNSConfigCacheIndex=agentIPv6DNSConfigCacheIndex, agentDhcpSnoopingIfLogEnable=agentDhcpSnoopingIfLogEnable, agentDhcpSnoopingInvalidClientMessages=agentDhcpSnoopingInvalidClientMessages, agentAutoinstallStatus=agentAutoinstallStatus, agentSwitchSnoopingAdminMode=agentSwitchSnoopingAdminMode, agentSnmpCommunityIPAddress=agentSnmpCommunityIPAddress, agentNetworkDhcp6REPLYMessagesReceived=agentNetworkDhcp6REPLYMessagesReceived, agentSwitchDVlanTagTPid=agentSwitchDVlanTagTPid, agentDaiVlanSrcMacFailures=agentDaiVlanSrcMacFailures, agentSwitchProtectedPortGroupId=agentSwitchProtectedPortGroupId, agentSnmpInformIndex=agentSnmpInformIndex, agentDDnsServName=agentDDnsServName, agentDynamicDsBindingTable=agentDynamicDsBindingTable, agentEcmpNextHops=agentEcmpNextHops, agentPortVoiceVlanMode=agentPortVoiceVlanMode, agentSnmpLinkUpDownTrapFlag=agentSnmpLinkUpDownTrapFlag, agentLagSummaryRateLoadInterval=agentLagSummaryRateLoadInterval, agentSwitchSnoopingVlanEntry=agentSwitchSnoopingVlanEntry, agentSerialBaudrate=agentSerialBaudrate, agentStpMstTopologyChangeCount=agentStpMstTopologyChangeCount, agentNetworkIpv6AddrEuiFlag=agentNetworkIpv6AddrEuiFlag, agentTrapLogTrap=agentTrapLogTrap, agentSwitchSnoopingVlanGroup=agentSwitchSnoopingVlanGroup, agentStpCstExtPortPathCost=agentStpCstExtPortPathCost, agentIPv6DNSConfigIpAddress=agentIPv6DNSConfigIpAddress, agentDaiIfRateLimit=agentDaiIfRateLimit, agentProtocolGroupCreate=agentProtocolGroupCreate, stpInstanceLoopInconsistentEndTrap=stpInstanceLoopInconsistentEndTrap, agentIPv6DNSConfigHostEntry=agentIPv6DNSConfigHostEntry, agentTransferUploadGroup=agentTransferUploadGroup, agentAuthenticationListMethod4=agentAuthenticationListMethod4, agentDhcpSnoopingRemoteFileName=agentDhcpSnoopingRemoteFileName, agentTrapLogGroup=agentTrapLogGroup, agentUdldIntfAggressiveMode=agentUdldIntfAggressiveMode, agentServicePortDhcp6RENEWMessagesSent=agentServicePortDhcp6RENEWMessagesSent, agentTransferUploadMode=agentTransferUploadMode, agentSwitchSnoopingVlanAdminMode=agentSwitchSnoopingVlanAdminMode, agentTransferUploadPath=agentTransferUploadPath, agentUserSnmpv3AccessMode=agentUserSnmpv3AccessMode, agentSwitchSnoopingQuerierVlanAddress=agentSwitchSnoopingQuerierVlanAddress, agentPortConfigEntry=agentPortConfigEntry, agentStpCstPortBpduFilter=agentStpCstPortBpduFilter, agentPortStatsRateTable=agentPortStatsRateTable, agentStpMstDesignatedPortId=agentStpMstDesignatedPortId, agentDaiVlanDhcpDrops=agentDaiVlanDhcpDrops, agentExecAccountingListTable=agentExecAccountingListTable, agentCmdsAccountingGroup=agentCmdsAccountingGroup, agentDhcpSnoopingVlanIndex=agentDhcpSnoopingVlanIndex, agentDhcpSnoopingAdminMode=agentDhcpSnoopingAdminMode, agentSwitchSnoopingCfgTable=agentSwitchSnoopingCfgTable, agentSwitchPortDVlanTagTPid=agentSwitchPortDVlanTagTPid, agentSwitchLastConflictingIPAddr=agentSwitchLastConflictingIPAddr, agentSwitchSnoopingIntfVlanIDs=agentSwitchSnoopingIntfVlanIDs, agentDaiIfTrustEnable=agentDaiIfTrustEnable, agentStpCstRegionalRootId=agentStpCstRegionalRootId, agentSnmpConfigGroup=agentSnmpConfigGroup, agentSwitchMFDBVlanId=agentSwitchMFDBVlanId, agentSwitchPortDVlanTagMode=agentSwitchPortDVlanTagMode, agentSwitchSnoopingQuerierLastQuerierVersion=agentSwitchSnoopingQuerierLastQuerierVersion, agentClearVlan=agentClearVlan, agentArpAclName=agentArpAclName, agentSwitchSnoopingVlanFastLeaveAdminMode=agentSwitchSnoopingVlanFastLeaveAdminMode, agentTransferUploadUsername=agentTransferUploadUsername, agentLagSummaryAdminMode=agentLagSummaryAdminMode, agentSwitchCpuFreeMemAboveThresholdTrap=agentSwitchCpuFreeMemAboveThresholdTrap, agentLoginSessionIndex=agentLoginSessionIndex, agentLagSummaryConfigTable=agentLagSummaryConfigTable, agentPasswordManagementConfigGroup=agentPasswordManagementConfigGroup, agentLagSummaryAddPort=agentLagSummaryAddPort, agentStpMstTimeSinceTopologyChange=agentStpMstTimeSinceTopologyChange, agentClearLags=agentClearLags, agentClearBufferedLog=agentClearBufferedLog, agentStpPortStatsMstpBpduTx=agentStpPortStatsMstpBpduTx, agentStpMstTable=agentStpMstTable, agentTransferDownloadStart=agentTransferDownloadStart, agentStpCstPortRootGuard=agentStpCstPortRootGuard, agentStpCstDesignatedPortId=agentStpCstDesignatedPortId, agentHTTPConfigGroup=agentHTTPConfigGroup, agentCLIConfigGroup=agentCLIConfigGroup, agentUserAuthenticationConfigTable=agentUserAuthenticationConfigTable, agentAuthenticationListAccessLevel=agentAuthenticationListAccessLevel, agentStpMstDesignatedRootId=agentStpMstDesignatedRootId, agentInventoryNetworkProcessingDevice=agentInventoryNetworkProcessingDevice, agentUserStatus=agentUserStatus, agentSwitchSnoopingIntfMRPExpirationTime=agentSwitchSnoopingIntfMRPExpirationTime, stpInstanceLoopInconsistentStartTrap=stpInstanceLoopInconsistentStartTrap, agentSwitchCpuFallingThresholdTrap=agentSwitchCpuFallingThresholdTrap, agentServicePortConfigProtocol=agentServicePortConfigProtocol, agentUserAuthenticationDot1xList=agentUserAuthenticationDot1xList, agentArpAclRowStatus=agentArpAclRowStatus, agentStpCstPortForwardingState=agentStpCstPortForwardingState, agentStpCstDesignatedCost=agentStpCstDesignatedCost, agentServicePortIpv6AddrTable=agentServicePortIpv6AddrTable, agentClearLoginSessions=agentClearLoginSessions, agentStpCstBridgeHelloTime=agentStpCstBridgeHelloTime, agentIPv6DNSConfigTTL=agentIPv6DNSConfigTTL, agentAuthenticationListCreate=agentAuthenticationListCreate, agentSwitchPortDVlanTagTable=agentSwitchPortDVlanTagTable, agentSdmPreferNextTemplate=agentSdmPreferNextTemplate, agentTelnetConfigGroup=agentTelnetConfigGroup, agentSwitchMFDBGroup=agentSwitchMFDBGroup, agentSwitchSnoopingQuerierQueryInterval=agentSwitchSnoopingQuerierQueryInterval, agentStpCstPortOperEdge=agentStpCstPortOperEdge, agentStpMstId=agentStpMstId, agentStpUplinkFast=agentStpUplinkFast, agentLagSummaryConfigEntry=agentLagSummaryConfigEntry, agentIASUserConfigEntry=agentIASUserConfigEntry, agentServicePortIpv6Gateway=agentServicePortIpv6Gateway, agentDDnsConfigEntry=agentDDnsConfigEntry, agentSwitchDVlanTagRowStatus=agentSwitchDVlanTagRowStatus, agentDynamicIpsgBindingIfIndex=agentDynamicIpsgBindingIfIndex, agentDNSConfigIpAddress=agentDNSConfigIpAddress, agentProtocolGroupProtocolID=agentProtocolGroupProtocolID, agentDDnsUserName=agentDDnsUserName, agentCmdsAccountingListStatus=agentCmdsAccountingListStatus, agentInventorySoftwareVersion=agentInventorySoftwareVersion, agentLagSummaryName=agentLagSummaryName, agentUserIndex=agentUserIndex, agentLoginSessionStatus=agentLoginSessionStatus, agentDhcpL2RelayIfConfigTable=agentDhcpL2RelayIfConfigTable, agentStpPortTable=agentStpPortTable, agentNetworkDhcp6REPLYMessagesDiscarded=agentNetworkDhcp6REPLYMessagesDiscarded, agentLagDetailedConfigTable=agentLagDetailedConfigTable, agentSwitchMFDBType=agentSwitchMFDBType, agentStpMstTopologyChangeParm=agentStpMstTopologyChangeParm, agentSwitchVlanSubnetAssociationPriority=agentSwitchVlanSubnetAssociationPriority, agentStpMstDesignatedCost=agentStpMstDesignatedCost, agentIPv6DNSConfigHostIndex=agentIPv6DNSConfigHostIndex, agentSwitchSnoopingQuerierVersion=agentSwitchSnoopingQuerierVersion, agentNextActiveImage=agentNextActiveImage, agentDhcpSnoopingStoreTimeout=agentDhcpSnoopingStoreTimeout, agentSwitchProtectedPortTable=agentSwitchProtectedPortTable, agentStpPortEntry=agentStpPortEntry, agentClearPasswords=agentClearPasswords, agentSwitchVoiceVLANGroup=agentSwitchVoiceVLANGroup, agentLagConfigGroupHashOption=agentLagConfigGroupHashOption, agentStpPortStatsRstpBpduTx=agentStpPortStatsRstpBpduTx, agentDDnsHost=agentDDnsHost, agentSnmpInformName=agentSnmpInformName, agentDaiVlanPktsDropped=agentDaiVlanPktsDropped, agentStaticDsBindingIpAddr=agentStaticDsBindingIpAddr, agentPortMirrorDestinationPort=agentPortMirrorDestinationPort, agentSnmpInformRetires=agentSnmpInformRetires, agentUserConfigDefaultAuthenticationList=agentUserConfigDefaultAuthenticationList, agentSwitchStaticMacFilteringDestPortMask=agentSwitchStaticMacFilteringDestPortMask, agentImage1=agentImage1, agentDNSConfigCacheTable=agentDNSConfigCacheTable, agentIPv6DNSConfigDomainName=agentIPv6DNSConfigDomainName, agentDNSConfigHostNameRemove=agentDNSConfigHostNameRemove, failedUserLoginTrap=failedUserLoginTrap, agentDhcpClientVendorClassIdString=agentDhcpClientVendorClassIdString, agentCmdsAccountingListCreate=agentCmdsAccountingListCreate, agentSwitchMFDBCurrentEntries=agentSwitchMFDBCurrentEntries, agentDNSConfigNameServer=agentDNSConfigNameServer, agentStpCstDesignatedBridgeId=agentStpCstDesignatedBridgeId, agentDhcpL2RelayIfTrustEnable=agentDhcpL2RelayIfTrustEnable, agentDynamicDsBindingVlanId=agentDynamicDsBindingVlanId, agentStpCstPortId=agentStpCstPortId, agentIPv6DNSConfigNameServer=agentIPv6DNSConfigNameServer, agentTrapLogEntry=agentTrapLogEntry)
mibBuilder.exportSymbols("SWITCHING-MIB", agentDot3adAggPortLACPMode=agentDot3adAggPortLACPMode, agentLagSummaryStatus=agentLagSummaryStatus, agentPasswordManagementStrengthMinSpecialCharacters=agentPasswordManagementStrengthMinSpecialCharacters, agentLoginSessionSessionTime=agentLoginSessionSessionTime, agentProtocolGroupVlanId=agentProtocolGroupVlanId, agentDaiConfigGroup=agentDaiConfigGroup, agentDhcpL2RelayVlanEnable=agentDhcpL2RelayVlanEnable, agentSdmTemplateEntry=agentSdmTemplateEntry, agentStaticIpsgBindingIfIndex=agentStaticIpsgBindingIfIndex, agentDhcpSnoopingIfConfigTable=agentDhcpSnoopingIfConfigTable, agentPasswordManagementStrengthExcludeKeywordEntry=agentPasswordManagementStrengthExcludeKeywordEntry, agentStpCstPortOperPointToPoint=agentStpCstPortOperPointToPoint, agentDDnsStatus=agentDDnsStatus, agentDNSConfigCacheIndex=agentDNSConfigCacheIndex, agentStpMstRootPortId=agentStpMstRootPortId, agentClassOfServicePortEntry=agentClassOfServicePortEntry, agentSnmpTrapFlagsConfigGroup=agentSnmpTrapFlagsConfigGroup, agentSwitchSnoopingQuerierGroup=agentSwitchSnoopingQuerierGroup, agentNetworkIpv6AddrTable=agentNetworkIpv6AddrTable, agentIpsgIfVerifySource=agentIpsgIfVerifySource, agentServicePortDhcp6MalformedMessagesReceived=agentServicePortDhcp6MalformedMessagesReceived, agentDaiVlanAclPermits=agentDaiVlanAclPermits, agentDaiVlanDhcpPermits=agentDaiVlanDhcpPermits, agentLoginSessionInetAddress=agentLoginSessionInetAddress, agentSwitchAddressConflictDetectionStatus=agentSwitchAddressConflictDetectionStatus, agentPasswordManagementStrengthMinCharacterClasses=agentPasswordManagementStrengthMinCharacterClasses, PortList=PortList, agentDNSConfigDefaultDomainNameRemove=agentDNSConfigDefaultDomainNameRemove, dhcpSnoopingIntfErrorDisabledTrap=dhcpSnoopingIntfErrorDisabledTrap, agentStpMstPortPriority=agentStpMstPortPriority, agentPasswordManagementPasswordStrengthCheck=agentPasswordManagementPasswordStrengthCheck, agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82=agentDhcpL2RelayUntrustedSrvrMsgsWithOptn82, agentPortVoiceVlanID=agentPortVoiceVlanID, agentSwitchVlanMacAssociationMacAddress=agentSwitchVlanMacAssociationMacAddress, agentDhcpSnoopingStatsTable=agentDhcpSnoopingStatsTable, agentPortMaxFrameSizeLimit=agentPortMaxFrameSizeLimit, agentSupportedMibIndex=agentSupportedMibIndex, agentSwitchMFDBMacAddress=agentSwitchMFDBMacAddress, agentDaiVlanDstMacFailures=agentDaiVlanDstMacFailures, agentPortDot1dBasePort=agentPortDot1dBasePort, agentStpPortStatsStpBpduTx=agentStpPortStatsStpBpduTx, agentIPv6DNSConfigHostTable=agentIPv6DNSConfigHostTable, agentArpAclGroup=agentArpAclGroup, agentIPv6DNSConfigCacheTable=agentIPv6DNSConfigCacheTable, agentSystemGroup=agentSystemGroup, agentDNSConfigHostEntry=agentDNSConfigHostEntry, agentSwitchCpuProcessMemFree=agentSwitchCpuProcessMemFree, agentSwitchVlanMacAssociationVlanId=agentSwitchVlanMacAssociationVlanId, agentLagDetailedConfigEntry=agentLagDetailedConfigEntry, agentInventoryBurnedInMacAddress=agentInventoryBurnedInMacAddress, agentSwitchSnoopingQuerierOperMaxResponseTime=agentSwitchSnoopingQuerierOperMaxResponseTime, agentCpuLoadFiveMin=agentCpuLoadFiveMin, agentSwitchCpuProcessRisingThreshold=agentSwitchCpuProcessRisingThreshold, agentActiveImage=agentActiveImage, agentDhcpSnoopingIfRateLimit=agentDhcpSnoopingIfRateLimit, agentDhcpL2RelayVlanIndex=agentDhcpL2RelayVlanIndex, agentSwitchMFDBTable=agentSwitchMFDBTable, agentNetworkStatsGroup=agentNetworkStatsGroup, agentTransferUploadStart=agentTransferUploadStart, agentSupportedMibTable=agentSupportedMibTable, agentSnmpUserUsername=agentSnmpUserUsername, agentIPv6NdpEntries=agentIPv6NdpEntries, agentIPv6DNSConfigNameServerRemove=agentIPv6DNSConfigNameServerRemove, agentSwitchSnoopingIntfTable=agentSwitchSnoopingIntfTable, agentSwitchIfDVlanTagMode=agentSwitchIfDVlanTagMode, agentDynamicDsBindingIpAddr=agentDynamicDsBindingIpAddr, agentAuthenticationListMethod2=agentAuthenticationListMethod2, agentSwitchProtectedPortPortList=agentSwitchProtectedPortPortList, agentSnmpTrapReceiverStatus=agentSnmpTrapReceiverStatus, agentPortVoiceVlanPriority=agentPortVoiceVlanPriority, agentPortBroadcastControlThresholdUnit=agentPortBroadcastControlThresholdUnit, agentSwitchPortDVlanTagEntry=agentSwitchPortDVlanTagEntry, agentCmdsAccountingListIndex=agentCmdsAccountingListIndex, agentDhcpSnoopingVerifyMac=agentDhcpSnoopingVerifyMac, agentSnmpCommunityCreate=agentSnmpCommunityCreate, agentProtocolGroupStatus=agentProtocolGroupStatus, agentArpAclEntry=agentArpAclEntry, agentSpanningTreeConfigGroup=agentSpanningTreeConfigGroup, agentPortMirrorSessionNum=agentPortMirrorSessionNum, agentPortMirrorSourcePortMask=agentPortMirrorSourcePortMask, agentConfigCurrentSystemTime=agentConfigCurrentSystemTime, agentSwitchMFDBMostEntriesUsed=agentSwitchMFDBMostEntriesUsed, agentPortStatsRateHCBitsPerSecondTx=agentPortStatsRateHCBitsPerSecondTx, agentUdldIndex=agentUdldIndex, agentSwitchProtectedPortGroupName=agentSwitchProtectedPortGroupName, agentSnmpInformSecurityLevel=agentSnmpInformSecurityLevel, agentInventoryFRUNumber=agentInventoryFRUNumber, agentIASUserConfigTable=agentIASUserConfigTable, agentSnmpTrapReceiverIndex=agentSnmpTrapReceiverIndex, agentSwitchVoiceVlanDeviceTable=agentSwitchVoiceVlanDeviceTable, agentStpBpduFilterDefault=agentStpBpduFilterDefault, agentDaiVlanPktsForwarded=agentDaiVlanPktsForwarded, agentStpMstVlanRowStatus=agentStpMstVlanRowStatus, agentSwitchAddressAgingTimeoutEntry=agentSwitchAddressAgingTimeoutEntry, agentSnmpCommunityIndex=agentSnmpCommunityIndex, agentDynamicIpsgBindingTable=agentDynamicIpsgBindingTable, agentSerialTerminalLength=agentSerialTerminalLength, agentStpCstPortPathCost=agentStpCstPortPathCost, agentNetworkIpv6AddrPrefix=agentNetworkIpv6AddrPrefix, agentIPv6DNSConfigNameServerListEntry=agentIPv6DNSConfigNameServerListEntry, powerSupplyStatusChangeTrap=powerSupplyStatusChangeTrap, agentUserEncryptionPassword=agentUserEncryptionPassword, agentDhcpSnoopingVlanConfigTable=agentDhcpSnoopingVlanConfigTable, agentServicePortDhcp6StatsReset=agentServicePortDhcp6StatsReset, agentStaticIpsgBindingVlanId=agentStaticIpsgBindingVlanId, agentProtocolGroupProtocolARP=agentProtocolGroupProtocolARP, agentNetworkConfigIpDhcpRenew=agentNetworkConfigIpDhcpRenew, agentSwitchVlanStaticMrouterTable=agentSwitchVlanStaticMrouterTable, agentDaiVlanStatsEntry=agentDaiVlanStatsEntry, agentDNSConfigDomainNameListIndex=agentDNSConfigDomainNameListIndex, agentSwitchStaticMacFilteringVlanId=agentSwitchStaticMacFilteringVlanId, agentSwitchMFDBSummaryForwardingPortMask=agentSwitchMFDBSummaryForwardingPortMask, agentStpCstBridgeHoldTime=agentStpCstBridgeHoldTime, agentSwitchIfDVlanTagTable=agentSwitchIfDVlanTagTable, agentDNSConfigDomainNameListEntry=agentDNSConfigDomainNameListEntry, agentPasswordManagementStrengthMinLowerCase=agentPasswordManagementStrengthMinLowerCase, agentDNSConfigDefaultDomainName=agentDNSConfigDefaultDomainName, agentExecAccountingGroup=agentExecAccountingGroup, agentPortVoiceVlanAuthMode=agentPortVoiceVlanAuthMode, agentSwitchVlanSubnetAssociationTable=agentSwitchVlanSubnetAssociationTable, agentStaticDsBindingTable=agentStaticDsBindingTable, agentServicePortDhcp6REBINDMessagesSent=agentServicePortDhcp6REBINDMessagesSent, agentLDAPServerIP=agentLDAPServerIP, agentResetSystem=agentResetSystem, agentAuthenticationListStatus=agentAuthenticationListStatus, agentSwitchDVlanTagEntry=agentSwitchDVlanTagEntry, agentDNSConfigDomainLookupStatus=agentDNSConfigDomainLookupStatus, agentTransferDownloadMode=agentTransferDownloadMode, agentExecAccountingListMethod2=agentExecAccountingListMethod2, agentSwitchMFDBEntry=agentSwitchMFDBEntry, agentStaticDsBindingIfIndex=agentStaticDsBindingIfIndex, agentSwitchPortDVlanTagInterfaceIfIndex=agentSwitchPortDVlanTagInterfaceIfIndex, agentDNSConfigClearCache=agentDNSConfigClearCache, agentSnmpUserConfigEntry=agentSnmpUserConfigEntry, agentTransferUploadPassword=agentTransferUploadPassword, agentTrapLogTotalSinceLastViewed=agentTrapLogTotalSinceLastViewed, agentUserPortConfigEntry=agentUserPortConfigEntry, agentSwitchMFDBSummaryVlanId=agentSwitchMFDBSummaryVlanId, agentClearSwitchStats=agentClearSwitchStats, agentSnmpEngineIdConfigEntry=agentSnmpEngineIdConfigEntry, agentInventoryManufacturer=agentInventoryManufacturer, agentUserPrivilegeLevel=agentUserPrivilegeLevel, agentSwitchMFDBProtocolType=agentSwitchMFDBProtocolType, agentDDnsIndex=agentDDnsIndex, agentStpPortUpTime=agentStpPortUpTime, agentUserLockoutStatus=agentUserLockoutStatus, agentSnmpInformTimeout=agentSnmpInformTimeout, agentSwitchPortDVlanTagRowStatus=agentSwitchPortDVlanTagRowStatus, agentLoginSessionConnectionType=agentLoginSessionConnectionType, agentProtocolGroupTable=agentProtocolGroupTable, agentDhcpSnoopingConfigGroup=agentDhcpSnoopingConfigGroup, agentDynamicIpsgBindingIpAddr=agentDynamicIpsgBindingIpAddr, agentDNSConfigSourceInterface=agentDNSConfigSourceInterface, agentDhcpL2RelayAdminMode=agentDhcpL2RelayAdminMode, agentStpPortBPDUGuard=agentStpPortBPDUGuard, agentStaticIpsgBinding=agentStaticIpsgBinding, agentNetworkConfigGroup=agentNetworkConfigGroup, agentUdldConfigGroup=agentUdldConfigGroup, agentStpPortState=agentStpPortState, agentServicePortStatsGroup=agentServicePortStatsGroup, agentServicePortIPAddress=agentServicePortIPAddress, agentSwitchSnoopingVlanTable=agentSwitchSnoopingVlanTable, agentLagSummaryLinkTrap=agentLagSummaryLinkTrap, agentNetworkIpv6Gateway=agentNetworkIpv6Gateway, agentNetworkDhcp6SOLICITMessagesSent=agentNetworkDhcp6SOLICITMessagesSent, noStartupConfigTrap=noStartupConfigTrap, agentSnmpUserEncryptionPassword=agentSnmpUserEncryptionPassword, agentDhcpSnoopingStoreInterval=agentDhcpSnoopingStoreInterval, agentPortType=agentPortType, agentStpForceVersion=agentStpForceVersion, agentStpConfigName=agentStpConfigName, agentDNSDomainName=agentDNSDomainName, agentProtocolGroupPortEntry=agentProtocolGroupPortEntry, agentSwitchVlanMacAssociationTable=agentSwitchVlanMacAssociationTable, agentDhcpL2RelayIfConfigEntry=agentDhcpL2RelayIfConfigEntry, agentSerialGroup=agentSerialGroup, agentSwitchAddressConflictDetectionRun=agentSwitchAddressConflictDetectionRun, agentSwitchSnoopingGroup=agentSwitchSnoopingGroup, agentImage2=agentImage2, agentPortClearStats=agentPortClearStats, agentNetworkDhcp6ClientDuid=agentNetworkDhcp6ClientDuid, agentDaiVlanConfigTable=agentDaiVlanConfigTable, agentDaiIfBurstInterval=agentDaiIfBurstInterval, agentStpCstPortTable=agentStpCstPortTable, agentExecAccountingMethodType=agentExecAccountingMethodType, agentDhcpSnoopingRemoteIpAddr=agentDhcpSnoopingRemoteIpAddr, agentServicePortIpv6AddrEuiFlag=agentServicePortIpv6AddrEuiFlag, agentSwitchLastConflictReportedTime=agentSwitchLastConflictReportedTime, agentInfoGroup=agentInfoGroup, agentStpCstPortBpduGuardEffect=agentStpCstPortBpduGuardEffect, agentSwitchMFDBSummaryTable=agentSwitchMFDBSummaryTable, agentServicePortDhcp6REPLYMessagesDiscarded=agentServicePortDhcp6REPLYMessagesDiscarded, agentUserAccessMode=agentUserAccessMode, agentPasswordMgmtLastPasswordSetResult=agentPasswordMgmtLastPasswordSetResult, agentPortConfigTable=agentPortConfigTable, agentServicePortIpv6AddrStatus=agentServicePortIpv6AddrStatus, agentSwitchVlanMacAssociationRowStatus=agentSwitchVlanMacAssociationRowStatus, agentSnmpInformConfigEntry=agentSnmpInformConfigEntry, agentHTTPSoftTimeout=agentHTTPSoftTimeout, agentDhcpSnoopingInvalidServerMessages=agentDhcpSnoopingInvalidServerMessages, agentDNSConfigHostIndex=agentDNSConfigHostIndex, agentInventoryMaintenanceLevel=agentInventoryMaintenanceLevel, agentSwitchVlanMacAssociationPriority=agentSwitchVlanMacAssociationPriority, agentLoginSessionUserName=agentLoginSessionUserName, agentStaticDsBindingMacAddr=agentStaticDsBindingMacAddr, agentSwitchConflictMacAddr=agentSwitchConflictMacAddr, vlanRequestFailureTrap=vlanRequestFailureTrap, agentInventoryOperatingSystem=agentInventoryOperatingSystem, agentServicePortIpv6AddrPrefixLength=agentServicePortIpv6AddrPrefixLength, agentCmdsAccountingListTable=agentCmdsAccountingListTable, agentSnmpTrapReceiverVersion=agentSnmpTrapReceiverVersion, agentTransferDownloadServerAddress=agentTransferDownloadServerAddress, agentPasswordMgmtStrengthExcludeKeyword=agentPasswordMgmtStrengthExcludeKeyword, agentLagDetailedPortStatus=agentLagDetailedPortStatus, agentSwitchCpuProcessPercentageUtilization=agentSwitchCpuProcessPercentageUtilization, agentServicePortIpv6AddrPrefix=agentServicePortIpv6AddrPrefix, agentSwitchVlanSubnetAssociationVlanId=agentSwitchVlanSubnetAssociationVlanId, agentDDnsAddress=agentDDnsAddress, agentServicePortIpv6AdminMode=agentServicePortIpv6AdminMode, agentDNSConfigClearDomainNameList=agentDNSConfigClearDomainNameList, agentDhcpL2RelayStatsEntry=agentDhcpL2RelayStatsEntry, agentDNSDomainNameRemove=agentDNSDomainNameRemove, agentSwitchIfDVlanTagIfIndex=agentSwitchIfDVlanTagIfIndex, agentStpCstPortTopologyChangeAck=agentStpCstPortTopologyChangeAck, agentDaiVlanIndex=agentDaiVlanIndex, agentUserConfigGroup=agentUserConfigGroup, agentArpAclRuleRowStatus=agentArpAclRuleRowStatus, agentSnmpCommunityConfigTable=agentSnmpCommunityConfigTable, agentSwitchDVlanTagEthertype=agentSwitchDVlanTagEthertype, agentStaticIpsgBindingTable=agentStaticIpsgBindingTable, agentTrapLogTotal=agentTrapLogTotal, agentDhcpL2RelayTrustedClntMsgsWithoutOptn82=agentDhcpL2RelayTrustedClntMsgsWithoutOptn82, agentInventorySysDescription=agentInventorySysDescription, agentSupportedMibName=agentSupportedMibName, agentNetworkLocalAdminMacAddress=agentNetworkLocalAdminMacAddress, agentPasswordManagementStrengthMinNumericNumbers=agentPasswordManagementStrengthMinNumericNumbers, agentSaveConfig=agentSaveConfig, agentDDnsPassword=agentDDnsPassword, agentSdmTemplateSummaryTable=agentSdmTemplateSummaryTable, agentStaticIpsgBindingIpAddr=agentStaticIpsgBindingIpAddr, agentLagConfigGroup=agentLagConfigGroup, agentTrapLogIndex=agentTrapLogIndex, agentInventoryPartNumber=agentInventoryPartNumber, agentNetworkConfigProtocolDhcpRenew=agentNetworkConfigProtocolDhcpRenew, agentDot3adAggPortEntry=agentDot3adAggPortEntry, agentSnmpUserIndex=agentSnmpUserIndex, agentSwitchSnoopingIntfGroupMembershipInterval=agentSwitchSnoopingIntfGroupMembershipInterval, agentDNSConfigGroup=agentDNSConfigGroup, agentTransferDownloadStatus=agentTransferDownloadStatus, agentSwitchCpuProcessEntry=agentSwitchCpuProcessEntry, agentIpsgIfPortSecurity=agentIpsgIfPortSecurity, agentSwitchSnoopingQuerierAdminMode=agentSwitchSnoopingQuerierAdminMode, agentStpCstMaxAge=agentStpCstMaxAge, vlanRestoreFailureTrap=vlanRestoreFailureTrap)
mibBuilder.exportSymbols("SWITCHING-MIB", agentLDAPBaseDn=agentLDAPBaseDn, agentAuthenticationListMethod1=agentAuthenticationListMethod1, agentSwitchSnoopingIntfFastLeaveAdminMode=agentSwitchSnoopingIntfFastLeaveAdminMode, agentDhcpSnoopingStatsReset=agentDhcpSnoopingStatsReset, agentIPv4UnicastRoutes=agentIPv4UnicastRoutes, agentStpMstPortEntry=agentStpMstPortEntry, agentAuthenticationListMethod5=agentAuthenticationListMethod5, agentClearTrapLog=agentClearTrapLog, agentDhcpL2RelayVlanConfigTable=agentDhcpL2RelayVlanConfigTable, agentVendorClassOptionConfigGroup=agentVendorClassOptionConfigGroup, agentStpCstBridgeMaxHops=agentStpCstBridgeMaxHops, agentUdldMessageTime=agentUdldMessageTime, agentSnmpCommunityStatus=agentSnmpCommunityStatus, agentDaiDstMacValidate=agentDaiDstMacValidate, agentUserPortConfigTable=agentUserPortConfigTable, agentSwitchCpuProcessGroup=agentSwitchCpuProcessGroup, agentAutoinstallPersistentMode=agentAutoinstallPersistentMode, agentLagSummaryHashOption=agentLagSummaryHashOption, agentStpMstPortTransitionsIntoLoopInconsistentState=agentStpMstPortTransitionsIntoLoopInconsistentState, agentDaiSrcMacValidate=agentDaiSrcMacValidate, agentPortMirrorTable=agentPortMirrorTable, agentSwitchSnoopingIntfIndex=agentSwitchSnoopingIntfIndex, agentStpCstBridgeMaxAge=agentStpCstBridgeMaxAge, agentPasswordManagementStrengthMaxRepeatedCharacters=agentPasswordManagementStrengthMaxRepeatedCharacters, agentSwitchVlanSubnetAssociationSubnetMask=agentSwitchVlanSubnetAssociationSubnetMask, agentDaiIfConfigEntry=agentDaiIfConfigEntry, agentUdldConfigTable=agentUdldConfigTable, agentDhcpL2RelayConfigGroup=agentDhcpL2RelayConfigGroup, agentSwitchVoiceVlanInterfaceNum=agentSwitchVoiceVlanInterfaceNum, agentSwitchStaticMacFilteringEntry=agentSwitchStaticMacFilteringEntry, agentClassOfServicePortClass=agentClassOfServicePortClass, agentInventorySerialNumber=agentInventorySerialNumber, agentDhcpSnoopingVlanEnable=agentDhcpSnoopingVlanEnable, agentTransferDownloadScriptToSwitchDestFilename=agentTransferDownloadScriptToSwitchDestFilename, agentDNSConfigFlag=agentDNSConfigFlag, agentSwitchCpuProcessId=agentSwitchCpuProcessId, agentSwitchSnoopingVlanMaxResponseTime=agentSwitchSnoopingVlanMaxResponseTime, agentDNSConfigNameServerListIndex=agentDNSConfigNameServerListIndex, agentStpMstPortTransitionsOutOfLoopInconsistentState=agentStpMstPortTransitionsOutOfLoopInconsistentState, agentDhcpClientVendorClassIdMode=agentDhcpClientVendorClassIdMode, agentIPv4MulticastRoutes=agentIPv4MulticastRoutes, agentProtocolGroupPortStatus=agentProtocolGroupPortStatus, agentIpsgIfConfigTable=agentIpsgIfConfigTable, agentTransferDownloadUsername=agentTransferDownloadUsername, agentSnmpSpanningTreeTrapFlag=agentSnmpSpanningTreeTrapFlag, agentDynamicDsBindingMacAddr=agentDynamicDsBindingMacAddr, agentIpsgIfConfigEntry=agentIpsgIfConfigEntry, agentStpBpduGuardMode=agentStpBpduGuardMode, agentServicePortConfigGroup=agentServicePortConfigGroup, agentStpPortStatsMstpBpduRx=agentStpPortStatsMstpBpduRx, agentDhcpL2RelayUntrustedClntMsgsWithOptn82=agentDhcpL2RelayUntrustedClntMsgsWithOptn82, agentPortVoiceVlanDataPriorityMode=agentPortVoiceVlanDataPriorityMode, agentSwitchSnoopingIntfEntry=agentSwitchSnoopingIntfEntry, agentStaticDsBindingVlanId=agentStaticDsBindingVlanId, agentStpPortHelloTime=agentStpPortHelloTime, agentAuthenticationListAccessType=agentAuthenticationListAccessType, agentDNSConfigRequest=agentDNSConfigRequest, agentServicePortSubnetMask=agentServicePortSubnetMask, agentSwitchAddressAgingTimeoutTable=agentSwitchAddressAgingTimeoutTable, agentNetworkBurnedInMacAddress=agentNetworkBurnedInMacAddress, agentDhcpSnoopingVlanConfigEntry=agentDhcpSnoopingVlanConfigEntry, agentSwitchIfDVlanTagTPid=agentSwitchIfDVlanTagTPid, agentSwitchVlanSubnetAssociationIPAddress=agentSwitchVlanSubnetAssociationIPAddress, agentPortLinkTrapMode=agentPortLinkTrapMode, userLockoutTrap=userLockoutTrap, agentSnmpCommunityAccessMode=agentSnmpCommunityAccessMode, agentSnmpEngineIdIpAddress=agentSnmpEngineIdIpAddress, agentProtocolGroupPortTable=agentProtocolGroupPortTable, agentSwitchSnoopingIntfGroup=agentSwitchSnoopingIntfGroup, agentIPv6MulticastRoutes=agentIPv6MulticastRoutes, agentAutoInstallConfigGroup=agentAutoInstallConfigGroup, agentDNSConfigNameServerListEntry=agentDNSConfigNameServerListEntry, agentDNSConfigNameServerRemove=agentDNSConfigNameServerRemove, agentLoginSessionEntry=agentLoginSessionEntry, agentSerialParityType=agentSerialParityType, agentTransferDownloadOPCodeToSwitchDestFilename=agentTransferDownloadOPCodeToSwitchDestFilename, agentHTTPHardTimeout=agentHTTPHardTimeout, agentNetworkDhcp6REQUESTMessagesSent=agentNetworkDhcp6REQUESTMessagesSent, agentStpMstPortTable=agentStpMstPortTable, agentIPv6DNSConfigFlag=agentIPv6DNSConfigFlag, agentSwitchCpuProcessFallingThresholdInterval=agentSwitchCpuProcessFallingThresholdInterval, agentSwitchSnoopingQuerierVlanAdminMode=agentSwitchSnoopingQuerierVlanAdminMode, agentExecAccountingListIndex=agentExecAccountingListIndex, agentStpConfigDigestKey=agentStpConfigDigestKey, agentTransferConfigGroup=agentTransferConfigGroup, agentDynamicIpsgBinding=agentDynamicIpsgBinding, agentDNSConfigDomainNameListTable=agentDNSConfigDomainNameListTable, fanFailureTrap=fanFailureTrap, agentCmdsAccountingListName=agentCmdsAccountingListName, agentTelnetAllowNewMode=agentTelnetAllowNewMode, agentClassOfServicePortTable=agentClassOfServicePortTable, agentStpCstPortEntry=agentStpCstPortEntry, agentPortMaxFrameSize=agentPortMaxFrameSize, agentUserConfigCreate=agentUserConfigCreate, agentDDnsConfigGroup=agentDDnsConfigGroup, agentServicePortDhcp6ClientDuid=agentServicePortDhcp6ClientDuid, agentPortDefaultType=agentPortDefaultType, agentLagSummaryHash=agentLagSummaryHash, agentSnmpInformStatus=agentSnmpInformStatus, switching=switching, agentStpCstRootFwdDelay=agentStpCstRootFwdDelay, agentStpMstPortLoopInconsistentState=agentStpMstPortLoopInconsistentState, agentCmdsAccountingMethodType=agentCmdsAccountingMethodType, agentUserPasswordExpireTime=agentUserPasswordExpireTime, agentSnmpTrapReceiverSecurityLevel=agentSnmpTrapReceiverSecurityLevel, agentDaiVlanConfigEntry=agentDaiVlanConfigEntry, agentSwitchSnoopingQuerierCfgEntry=agentSwitchSnoopingQuerierCfgEntry, agentSwitchVoiceVlanDeviceMacAddress=agentSwitchVoiceVlanDeviceMacAddress, agentTransferUploadFilename=agentTransferUploadFilename, agentUserAuthenticationConfigEntry=agentUserAuthenticationConfigEntry, agentNetworkIPAddress=agentNetworkIPAddress, VlanList=VlanList, agentPortAutoNegAdminStatus=agentPortAutoNegAdminStatus, agentUserAuthenticationList=agentUserAuthenticationList, agentProtocolGroupPortIfIndex=agentProtocolGroupPortIfIndex, agentCmdsAccountingListMethod1=agentCmdsAccountingListMethod1, agentLagDetailedPortSpeed=agentLagDetailedPortSpeed, agentStpCstBridgeHoldCount=agentStpCstBridgeHoldCount, agentClearPortStats=agentClearPortStats, agentSwitchSnoopingVlanMRPExpirationTime=agentSwitchSnoopingVlanMRPExpirationTime, agentLagDetailedIfIndex=agentLagDetailedIfIndex, agentNetworkWebMode=agentNetworkWebMode, agentPasswordManagementLockAttempts=agentPasswordManagementLockAttempts, agentSnmpTransceiverTrapFlag=agentSnmpTransceiverTrapFlag, agentPortAdminMode=agentPortAdminMode, agentProtocolConfigGroup=agentProtocolConfigGroup, broadcastStormStartTrap=broadcastStormStartTrap, agentProtocolGroupProtocolStatus=agentProtocolGroupProtocolStatus, agentSwitchSnoopingCfgEntry=agentSwitchSnoopingCfgEntry, broadcastStormEndTrap=broadcastStormEndTrap, configChangedTrap=configChangedTrap, agentNetworkIpv6AddrEntry=agentNetworkIpv6AddrEntry, agentSnmpInformIpAddress=agentSnmpInformIpAddress, agentDhcpL2RelayStatsTable=agentDhcpL2RelayStatsTable, agentTelnetLoginTimeout=agentTelnetLoginTimeout, agentSwitchDVlanTagGroup=agentSwitchDVlanTagGroup, agentUdldConfigEntry=agentUdldConfigEntry, agentDhcpSnoopingIfTrustEnable=agentDhcpSnoopingIfTrustEnable, agentSnmpTrapReceiverCreate=agentSnmpTrapReceiverCreate, agentSwitchSnoopingProtocol=agentSwitchSnoopingProtocol, agentTrapLogSystemTime=agentTrapLogSystemTime, agentSwitchIpAddressConflictTrap=agentSwitchIpAddressConflictTrap, agentNetworkIpv6AddrPrefixLength=agentNetworkIpv6AddrPrefixLength, agentStpAdminMode=agentStpAdminMode, agentNetworkIpv6AddressAutoConfig=agentNetworkIpv6AddressAutoConfig, agentExecAccountingListStatus=agentExecAccountingListStatus, agentIASUserConfigCreate=agentIASUserConfigCreate, agentNetworkIpv6ConfigProtocol=agentNetworkIpv6ConfigProtocol, agentPortSTPState=agentPortSTPState, agentDhcpSnoopingIfConfigEntry=agentDhcpSnoopingIfConfigEntry, agentDynamicDsBindingIfIndex=agentDynamicDsBindingIfIndex, agentSwitchMFDBMaxTableEntries=agentSwitchMFDBMaxTableEntries, agentNetworkDhcp6RELEASEMessagesSent=agentNetworkDhcp6RELEASEMessagesSent, agentSwitchStaticMacFilteringTable=agentSwitchStaticMacFilteringTable, agentStpCstPortAutoEdge=agentStpCstPortAutoEdge, agentArpEntries=agentArpEntries, agentExecAccountingListMethod1=agentExecAccountingListMethod1, stpInstanceTopologyChangeTrap=stpInstanceTopologyChangeTrap, agentInventoryMachineModel=agentInventoryMachineModel, agentUserConfigEntry=agentUserConfigEntry, agentSwitchConfigGroup=agentSwitchConfigGroup, agentSwitchConflictIPAddr=agentSwitchConflictIPAddr, agentSnmpUserEncryption=agentSnmpUserEncryption, agentAutoinstallAutoUpgradeMode=agentAutoinstallAutoUpgradeMode, agentServicePortIpv6AddrEntry=agentServicePortIpv6AddrEntry, agentUserPortSecurity=agentUserPortSecurity, agentPortVoiceVlanUntagged=agentPortVoiceVlanUntagged, agentSwitchSnoopingMulticastControlFramesProcessed=agentSwitchSnoopingMulticastControlFramesProcessed, agentDaiVlanArpAclName=agentDaiVlanArpAclName, multipleUsersTrap=multipleUsersTrap, agentSwitchSnoopingQuerierOperVersion=agentSwitchSnoopingQuerierOperVersion, agentLDAPRacDomain=agentLDAPRacDomain, agentPortDot3FlowControlOperStatus=agentPortDot3FlowControlOperStatus, agentTransferDownloadPath=agentTransferDownloadPath, agentStpMstVlanTable=agentStpMstVlanTable, agentInventoryGroup=agentInventoryGroup, agentPortStatsRateHCPacketsPerSecondRx=agentPortStatsRateHCPacketsPerSecondRx, agentExecAccountingListEntry=agentExecAccountingListEntry, agentSnmpAuthenticationTrapFlag=agentSnmpAuthenticationTrapFlag, agentUserEncryptionType=agentUserEncryptionType, agentLagSummaryType=agentLagSummaryType, agentSnmpACLTrapFlag=agentSnmpACLTrapFlag, agentSwitchVlanMacAssociationGroup=agentSwitchVlanMacAssociationGroup, agentStpMstDesignatedBridgeId=agentStpMstDesignatedBridgeId, agentSwitchMFDBFilteringPortMask=agentSwitchMFDBFilteringPortMask, agentStpMstVlanEntry=agentStpMstVlanEntry, agentSnmpUserStatus=agentSnmpUserStatus, agentLagSummaryLagIndex=agentLagSummaryLagIndex, agentAutoinstallAutoRebootMode=agentAutoinstallAutoRebootMode, agentUserConfigTable=agentUserConfigTable, agentPasswordManagementStrengthExcludeKeywordTable=agentPasswordManagementStrengthExcludeKeywordTable, agentPortVoiceVlanOperationalStatus=agentPortVoiceVlanOperationalStatus, agentSnmpEngineIdString=agentSnmpEngineIdString, agentLDAPServerPort=agentLDAPServerPort, agentServicePortDhcp6SOLICITMessagesSent=agentServicePortDhcp6SOLICITMessagesSent, agentSwitchCpuProcessFreeMemoryThreshold=agentSwitchCpuProcessFreeMemoryThreshold, agentIPv6DNSConfigHostNameRemove=agentIPv6DNSConfigHostNameRemove, agentSwitchVlanSubnetAssociationEntry=agentSwitchVlanSubnetAssociationEntry, agentPortIanaType=agentPortIanaType, agentSwitchMFDBSummaryMacAddress=agentSwitchMFDBSummaryMacAddress, agentStpMstRootPathCost=agentStpMstRootPathCost, agentAutoinstallAutosaveMode=agentAutoinstallAutosaveMode, agentImageConfigGroup=agentImageConfigGroup, agentStpSwitchConfigGroup=agentStpSwitchConfigGroup, agentSpanningTreeMode=agentSpanningTreeMode, agentDNSConfigDomainName=agentDNSConfigDomainName, agentSwitchStaticMacFilteringStatus=agentSwitchStaticMacFilteringStatus, agentStpCstRegionalRootPathCost=agentStpCstRegionalRootPathCost, agentSwitchVlanSubnetAssociationGroup=agentSwitchVlanSubnetAssociationGroup, agentServicePortDhcp6REQUESTMessagesSent=agentServicePortDhcp6REQUESTMessagesSent, agentSwitchSnoopingQuerierVlanEntry=agentSwitchSnoopingQuerierVlanEntry, agentStpMstBridgePriority=agentStpMstBridgePriority, agentSupportedMibEntry=agentSupportedMibEntry, agentNetworkDhcp6RENEWMessagesSent=agentNetworkDhcp6RENEWMessagesSent, agentDDnsConfigTable=agentDDnsConfigTable, agentDhcpL2RelayVlanConfigEntry=agentDhcpL2RelayVlanConfigEntry, agentIASUserConfigGroup=agentIASUserConfigGroup, agentServicePortProtocolDhcpRenew=agentServicePortProtocolDhcpRenew, agentSwitchVlanMacAssociationEntry=agentSwitchVlanMacAssociationEntry, agentSwitchLastConflictingMacAddr=agentSwitchLastConflictingMacAddr, agentStaticDsBinding=agentStaticDsBinding, agentDaiVlanLoggingEnable=agentDaiVlanLoggingEnable, agentIASUserStatus=agentIASUserStatus, agentIPv6DNSConfigHostName=agentIPv6DNSConfigHostName, agentDNSConfigClearDNSCounters=agentDNSConfigClearDNSCounters, agentProtocolGroupName=agentProtocolGroupName, agentPasswordManagementMinLength=agentPasswordManagementMinLength, agentServicePortIpv6ConfigProtocol=agentServicePortIpv6ConfigProtocol, agentArpAclRuleMatchSenderMacAddr=agentArpAclRuleMatchSenderMacAddr, agentNetworkDhcp6MalformedMessagesReceived=agentNetworkDhcp6MalformedMessagesReceived, agentSwitchIfDVlanTagEntry=agentSwitchIfDVlanTagEntry, agentSwitchSnoopingQuerierLastQuerierAddress=agentSwitchSnoopingQuerierLastQuerierAddress, agentPortMirrorEntry=agentPortMirrorEntry, agentPortSTPMode=agentPortSTPMode, agentSwitchCpuProcessTable=agentSwitchCpuProcessTable, agentSwitchDVlanTagPrimaryTPid=agentSwitchDVlanTagPrimaryTPid, agentSnmpEngineIdConfigTable=agentSnmpEngineIdConfigTable, agentDot3adAggPortTable=agentDot3adAggPortTable, agentSnmpTrapReceiverIPAddress=agentSnmpTrapReceiverIPAddress, agentClearConfig=agentClearConfig, agentStpMstPortPathCost=agentStpMstPortPathCost, agentSupportedMibDescription=agentSupportedMibDescription, agentTransferUploadDataType=agentTransferUploadDataType, agentNetworkSubnetMask=agentNetworkSubnetMask, agentDhcpSnoopingMacVerifyFailures=agentDhcpSnoopingMacVerifyFailures, agentSdmTemplateTable=agentSdmTemplateTable, agentSnmpInformVersion=agentSnmpInformVersion, agentTransferUploadOpCodeFromSwitchSrcFilename=agentTransferUploadOpCodeFromSwitchSrcFilename, agentDNSConfigClearHosts=agentDNSConfigClearHosts, agentIASUserPassword=agentIASUserPassword, agentNetworkDhcp6ADVERTISEMessagesReceived=agentNetworkDhcp6ADVERTISEMessagesReceived, agentTransferUploadServerAddress=agentTransferUploadServerAddress, agentTransferDownloadFilename=agentTransferDownloadFilename, agentIASUserName=agentIASUserName)
mibBuilder.exportSymbols("SWITCHING-MIB", agentLagDetailedLagIndex=agentLagDetailedLagIndex, agentNetworkIpv6AdminMode=agentNetworkIpv6AdminMode, agentSwitchCpuMemInvalidTrap=agentSwitchCpuMemInvalidTrap, agentNetworkConfigProtocol=agentNetworkConfigProtocol, agentDaiStatsReset=agentDaiStatsReset, agentSwitchCpuProcessFallingThreshold=agentSwitchCpuProcessFallingThreshold, agentSwitchVoiceVlanDeviceEntry=agentSwitchVoiceVlanDeviceEntry, stormControlDetectedTrap=stormControlDetectedTrap, agentDaiVlanAclDrops=agentDaiVlanAclDrops, agentTransferUploadStatus=agentTransferUploadStatus, agentSerialCharacterSize=agentSerialCharacterSize, agentDaiIPValidate=agentDaiIPValidate, agentIPv6DNSConfigRequest=agentIPv6DNSConfigRequest, agentAuthenticationEnableListCreate=agentAuthenticationEnableListCreate, agentStpCstHelloTime=agentStpCstHelloTime, agentDaiVlanStatsIndex=agentDaiVlanStatsIndex, agentExecAccountingListName=agentExecAccountingListName, agentStpPortMigrationCheck=agentStpPortMigrationCheck, agentLDAPConfigGroup=agentLDAPConfigGroup, agentSwitchProtectedPortEntry=agentSwitchProtectedPortEntry, agentStpMstPortId=agentStpMstPortId, agentTransferDownloadPassword=agentTransferDownloadPassword, agentDNSConfigResponse=agentDNSConfigResponse, agentSdmTemplateId=agentSdmTemplateId, agentSwitchAddressConflictGroup=agentSwitchAddressConflictGroup, agentPortStatsRateHCPacketsPerSecondTx=agentPortStatsRateHCPacketsPerSecondTx, agentDNSConfigHostTable=agentDNSConfigHostTable, agentNetworkIpv6AddrStatus=agentNetworkIpv6AddrStatus, agentSwitchAddressAgingTimeout=agentSwitchAddressAgingTimeout, agentSwitchCpuProcessName=agentSwitchCpuProcessName, agentNetworkConfigIpv6DhcpRenew=agentNetworkConfigIpv6DhcpRenew, agentClassOfServicePortPriority=agentClassOfServicePortPriority, agentPortMirrorAdminMode=agentPortMirrorAdminMode, agentTelnetMaxSessions=agentTelnetMaxSessions, agentTransferUploadStartupConfigFromSwitchSrcFilename=agentTransferUploadStartupConfigFromSwitchSrcFilename, agentPasswordMgmtStrengthExcludeKeywordStatus=agentPasswordMgmtStrengthExcludeKeywordStatus, agentAutoinstallOperationalMode=agentAutoinstallOperationalMode, agentLagSummaryStpMode=agentLagSummaryStpMode, agentIPv6DNSConfigHostIpAddress=agentIPv6DNSConfigHostIpAddress, agentAuthenticationListMethod3=agentAuthenticationListMethod3, agentDot3adAggPort=agentDot3adAggPort, agentLoginSessionTable=agentLoginSessionTable, agentDhcpSnoopingStatsEntry=agentDhcpSnoopingStatsEntry, agentProtocolGroupProtocolIPX=agentProtocolGroupProtocolIPX, agentIPv6UnicastRoutes=agentIPv6UnicastRoutes, agentDhcpClientOptionsConfigGroup=agentDhcpClientOptionsConfigGroup, agentLoginSessionIdleTime=agentLoginSessionIdleTime, agentDaiVlanIpValidFailures=agentDaiVlanIpValidFailures, agentStpCstPortTCNGuard=agentStpCstPortTCNGuard, agentDNSConfigHostName=agentDNSConfigHostName, agentSnmpTrapReceiverConfigEntry=agentSnmpTrapReceiverConfigEntry, agentAuthenticationListTable=agentAuthenticationListTable, vlanDefaultCfgFailureTrap=vlanDefaultCfgFailureTrap, agentStpMstEntry=agentStpMstEntry, agentUserName=agentUserName, linkFailureTrap=linkFailureTrap, agentIPv6DNSConfigNameServerListTable=agentIPv6DNSConfigNameServerListTable, agentStpCstPortEdge=agentStpCstPortEdge, agentPortStatsRateGroup=agentPortStatsRateGroup, agentProtocolGroupEntry=agentProtocolGroupEntry, agentSwitchCpuProcessMemAvailable=agentSwitchCpuProcessMemAvailable, agentSwitchCpuProcessRisingThresholdInterval=agentSwitchCpuProcessRisingThresholdInterval, agentSnmpInformConfigGroup=agentSnmpInformConfigGroup, agentDNSConfigHostIpAddress=agentDNSConfigHostIpAddress, daiIntfErrorDisabledTrap=daiIntfErrorDisabledTrap, agentTrapLogTable=agentTrapLogTable, agentPasswordManagementStrengthMinUpperCase=agentPasswordManagementStrengthMinUpperCase, agentStpCstBridgePriority=agentStpCstBridgePriority, agentSwitchVlanStaticMrouterGroup=agentSwitchVlanStaticMrouterGroup, agentSwitchVlanStaticMrouterEntry=agentSwitchVlanStaticMrouterEntry, agentIPv6DNSConfigResponse=agentIPv6DNSConfigResponse, agentSwitchSnoopingPortMask=agentSwitchSnoopingPortMask, agentSwitchVlanSubnetAssociationRowStatus=agentSwitchVlanSubnetAssociationRowStatus, agentPortMirrorTypeType=agentPortMirrorTypeType, agentStaticIpsgBindingMacAddr=agentStaticIpsgBindingMacAddr, agentStaticDsBindingRowStatus=agentStaticDsBindingRowStatus, agentSnmpCommunityIPMask=agentSnmpCommunityIPMask, agentStpMstBridgeIdentifier=agentStpMstBridgeIdentifier, agentUserPassword=agentUserPassword, agentServicePortDhcp6ADVERTISEMessagesDiscarded=agentServicePortDhcp6ADVERTISEMessagesDiscarded, agentDNSConfigTTL=agentDNSConfigTTL, agentUdldIntfAdminMode=agentUdldIntfAdminMode, PYSNMP_MODULE_ID=switching, agentSwitchSnoopingQuerierAddress=agentSwitchSnoopingQuerierAddress, temperatureTooHighTrap=temperatureTooHighTrap, agentNetworkDhcp6StatsReset=agentNetworkDhcp6StatsReset, agentProtocolGroupId=agentProtocolGroupId, agentIPv6DNSConfigNameServerListIndex=agentIPv6DNSConfigNameServerListIndex, agentArpAclRuleEntry=agentArpAclRuleEntry, agentSwitchCpuProcessIndex=agentSwitchCpuProcessIndex, agentSnmpEngineIdStatus=agentSnmpEngineIdStatus, agentDNSConfigClearDNS=agentDNSConfigClearDNS, agentDNSConfigNameServerListTable=agentDNSConfigNameServerListTable, agentAutoinstallUnicastRetryCount=agentAutoinstallUnicastRetryCount, agentTransferDownloadDataType=agentTransferDownloadDataType, agentSnmpTrapSourceInterface=agentSnmpTrapSourceInterface, agentNetworkDhcp6REBINDMessagesSent=agentNetworkDhcp6REBINDMessagesSent, agentSnmpUserAuthentication=agentSnmpUserAuthentication, agentStpConfigRevision=agentStpConfigRevision, agentDhcpL2RelayCircuitIdVlanEnable=agentDhcpL2RelayCircuitIdVlanEnable, agentSnmpCommunityName=agentSnmpCommunityName, agentStpCstPortBpduFlood=agentStpCstPortBpduFlood, agentSwitchProtectedPortConfigGroup=agentSwitchProtectedPortConfigGroup, agentDynamicDsBinding=agentDynamicDsBinding, agentCmdsAccountingListEntry=agentCmdsAccountingListEntry, agentAuthenticationListMethod6=agentAuthenticationListMethod6, agentUserAuthenticationType=agentUserAuthenticationType, agentHTTPMaxSessions=agentHTTPMaxSessions, agentInventoryHardwareVersion=agentInventoryHardwareVersion, agentSnmpUserConfigTable=agentSnmpUserConfigTable, agentIPv6DNSConfigCacheEntry=agentIPv6DNSConfigCacheEntry, agentStpPortStatsRstpBpduRx=agentStpPortStatsRstpBpduRx, agentNetworkMgmtVlan=agentNetworkMgmtVlan, agentArpAclTable=agentArpAclTable, agentSnmpTrapReceiverPort=agentSnmpTrapReceiverPort, agentStpConfigFormatSelector=agentStpConfigFormatSelector, agentPortLoadStatsInterval=agentPortLoadStatsInterval, agentAuthenticationListEntry=agentAuthenticationListEntry, agentNetworkJavaMode=agentNetworkJavaMode, agentSwitchSnoopingQuerierExpiryInterval=agentSwitchSnoopingQuerierExpiryInterval, agentSwitchSnoopingIntfAdminMode=agentSwitchSnoopingIntfAdminMode, agentDaiVlanArpAclStaticFlag=agentDaiVlanArpAclStaticFlag, agentPortMirrorTypeTable=agentPortMirrorTypeTable, agentSnmpTrapReceiverCommunityName=agentSnmpTrapReceiverCommunityName, agentTransferDownloadStartupConfigToSwitchDestFilename=agentTransferDownloadStartupConfigToSwitchDestFilename, agentSdmPreferCurrentTemplate=agentSdmPreferCurrentTemplate, agentSwitchAddressConflictDetectionStatusReset=agentSwitchAddressConflictDetectionStatusReset, agentNetworkMacAddressType=agentNetworkMacAddressType, agentAuthenticationListIndex=agentAuthenticationListIndex, agentSerialHWFlowControlMode=agentSerialHWFlowControlMode, stpInstanceNewRootTrap=stpInstanceNewRootTrap, agentStpCstBridgeFwdDelay=agentStpCstBridgeFwdDelay, agentPortIfIndex=agentPortIfIndex, agentLoginSessionInetAddressType=agentLoginSessionInetAddressType, agentSwitchMFDBDescription=agentSwitchMFDBDescription)
