#
# PySNMP MIB module CISCO-WAN-FR-X21-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-FR-X21-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
x21, frPortCnfX21PortGrp = mibBuilder.importSymbols("BASIS-MIB", "x21", "frPortCnfX21PortGrp")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, ObjectIdentity, Bits, MibIdentifier, TimeTicks, Gauge32, IpAddress, Counter32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "ObjectIdentity", "Bits", "MibIdentifier", "TimeTicks", "Gauge32", "IpAddress", "Counter32", "Unsigned32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanFrX21MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 49))
ciscoWanFrX21MIB.setRevisions(('2002-09-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanFrX21MIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB.',))
if mibBuilder.loadTexts: ciscoWanFrX21MIB.setLastUpdated('200209190000Z')
if mibBuilder.loadTexts: ciscoWanFrX21MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanFrX21MIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanFrX21MIB.setDescription('The MIB module to configure X.21/HSSI physical and logical interfaces. This MIB module also contains alarm configuration of X.21 interfaces. Terminologies Used: HSSI : High Speed Serial Interface. The HSSI defines both electrical and physical interfaces on DTE and DCE devices. It operates at the physical layer of the OSI reference model. This provides high-speed data communication over WAN and LAN links.')
x21CnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1))
x21AlmCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2))
x21AlmGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3))
x21CnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1), )
if mibBuilder.loadTexts: x21CnfGrpTable.setStatus('current')
if mibBuilder.loadTexts: x21CnfGrpTable.setDescription('The X21 Configuration table. The table size is given by the value of x21LineNumofValidEntries.')
x21CnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-X21-MIB", "x21LineNum"))
if mibBuilder.loadTexts: x21CnfGrpEntry.setStatus('current')
if mibBuilder.loadTexts: x21CnfGrpEntry.setDescription('An entry in the X21 Configuration table.')
x21LineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineNum.setStatus('current')
if mibBuilder.loadTexts: x21LineNum.setDescription('This object is the identifier of a X.21 interface. FRSM-HS2/HS2B-HSSI supports a range from 1 to 2. FRSM-HS2B-12IN1 supports a range from 1 to 8.')
x21LineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("modify", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineEnable.setStatus('current')
if mibBuilder.loadTexts: x21LineEnable.setDescription('This variable disables, enables or modifies a line 1 - disable 2 - enable 3 - modify Default is enable. ')
x21LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("dteST", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineType.setStatus('current')
if mibBuilder.loadTexts: x21LineType.setDescription('This variable indicates the type X21 line type. The line-type affects the clock -- the DCE device always provides the clock and DTE accepts it. dteST is only applicable to V.35 interfaces Default is DTE. ')
x21LineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108))).clone(namedValues=NamedValues(("r48Kbps", 1), ("r56Kbps", 2), ("r64Kbps", 3), ("r112Kbps", 4), ("r128Kbps", 5), ("r168Kbps", 6), ("r192Kbps", 7), ("r224Kbps", 8), ("r256Kbps", 9), ("r280Kbps", 10), ("r320Kbps", 11), ("r336Kbps", 12), ("r384Kbps", 13), ("r392Kbps", 14), ("r448Kbps", 15), ("r512Kbps", 16), ("r768Kbps", 17), ("r1024Kbps", 18), ("r1536Kbps", 19), ("r1544Kbps", 20), ("r1792Kbps", 21), ("r1920Kbps", 22), ("r1984Kbps", 23), ("r2048Kbps", 24), ("r3097Kbps", 25), ("r3157Kbps", 26), ("r4096Kbps", 27), ("r4645Kbps", 28), ("r4736Kbps", 29), ("r6195Kbps", 30), ("r6315Kbps", 31), ("r7744Kbps", 32), ("r7899Kbps", 33), ("r8192Kbps", 34), ("r9289Kbps", 35), ("r9472Kbps", 36), ("r10240Kbps", 37), ("r10890Kbps", 38), ("r11060Kbps", 39), ("r12390Kbps", 40), ("r12630Kbps", 41), ("r13900Kbps", 42), ("r14220Kbps", 43), ("r14340Kbps", 44), ("r15490Kbps", 45), ("r15800Kbps", 46), ("r16380Kbps", 47), ("r20030Kbps", 48), ("r24990Kbps", 49), ("r52Mbps", 50), ("r17370Kbps", 51), ("r18950Kbps", 52), ("r20530Kbps", 53), ("r22100Kbps", 54), ("r23680Kbps", 55), ("r3088Kbps", 56), ("r4632Kbps", 57), ("r6176Kbps", 58), ("r7720Kbps", 59), ("r9264Kbps", 60), ("r10808Kbps", 61), ("r12352Kbps", 62), ("r13896Kbps", 63), ("r15440Kbps", 64), ("r16984Kbps", 65), ("r18528Kbps", 66), ("r20072Kbps", 67), ("r21616Kbps", 68), ("r23160Kbps", 69), ("r24704Kbps", 70), ("r26248Kbps", 71), ("r27792Kbps", 72), ("r29336Kbps", 73), ("r30880Kbps", 74), ("r32424Kbps", 75), ("r33968Kbps", 76), ("r35512Kbps", 77), ("r37056Kbps", 78), ("r38600Kbps", 79), ("r40144Kbps", 80), ("r41688Kbps", 81), ("r43232Kbps", 82), ("r44776Kbps", 83), ("r46320Kbps", 84), ("r47864Kbps", 85), ("r49408Kbps", 86), ("r50952Kbps", 87), ("r6144Kbps", 88), ("r12288Kbps", 89), ("r14336Kbps", 90), ("r16384Kbps", 91), ("r18432Kbps", 92), ("r20480Kbps", 93), ("r22528Kbps", 94), ("r24576Kbps", 95), ("r26624Kbps", 96), ("r28672Kbps", 97), ("r30720Kbps", 98), ("r32768Kbps", 99), ("r34816Kbps", 100), ("r36864Kbps", 101), ("r38912Kbps", 102), ("r40960Kbps", 103), ("r43008Kbps", 104), ("r45056Kbps", 105), ("r47104Kbps", 106), ("r49152Kbps", 107), ("r51200Kbps", 108)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineRate.setStatus('current')
if mibBuilder.loadTexts: x21LineRate.setDescription('This variable configures the X.21/HSSI/V.35 line-rate. Note that enumerations 51 through 108 are supported only by FRSM-HS2/HS2B card. default is r48Kbps on FRSM-HS2B-12IN1 default is r52Mbps on FRSM-HS2/HS2B-HSSI ')
x21LineLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("x21NoLoop", 1), ("x21DiagnosticMetallicLoop", 2), ("x21DiagnosticFrontcardLoop", 3), ("x21RemoteLoop", 4), ("v35MetallicLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineLoopbackCommand.setStatus('current')
if mibBuilder.loadTexts: x21LineLoopbackCommand.setDescription('This variable represents the loopback state x21NoLoop Not in the loopback state. Normal traffic can be sent x21DiagnosticMetallicLoop Loopbacks the line on the back-card towards the Network. x21DiagnosticFrontcardLoop Loopbacks the line on the frontcard toward the Network. x21RemoteLoop The remote NTU is in the loop back mode. In this state, the FRSM-HS1 is sending the loopback code to remote NTU. Default is x21NoLoop. Note: Before going into one of the loopbacks the state should be x21NoLoop. ')
x21LineSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("x21NoCode", 1), ("x21SendLoopACode", 2), ("x21SendLoopBCode", 3), ("x21SendLocalLoopCode", 4), ("x21SendRemoteLoopCode", 5), ("x21SendUnLoopCode", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineSendCode.setStatus('current')
if mibBuilder.loadTexts: x21LineSendCode.setDescription('This variable indicates what type of code is being sent across the X.21/HSSI interface by the device. The values mean: x21NoCode: No loopback. x21SendLoopACode: Start sending Loop A code. Valid only if the backcard is HSSI and the line-type is DTE. This command loops the line module of the remote device. x21SendLoopBCode: Start sending Loop B code. Valid only if the backcard is HSSI and the line-type is DTE. This command loops the digital section of the remote device. x21SendLocalLoopCode: Start sending CCITT X.21 Loopback Type 3 code. This is valid only if the backcard is X.21 type. x21SendRemoteLoopCode: Start sending CCITT X.21 Loopback Type 2 code. This is valid only if the backcard is X.21 type. x21SendUnLoopCode: Sending a loopback termination request. Valid for both HSSI and X.21 lines. To execute any of the loop-codes the x21LineLoopbackCommand should be set to x21RemoteLoop. Once the x21SendUnLoopCode succeeds the x21LineLoopbackCommand would transition back to x21NoLoop state. Default is x21NoCode.')
x21LineLoopbackCodeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("codeDetectDisabled", 1), ("codeDetectEnabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineLoopbackCodeDetection.setStatus('current')
if mibBuilder.loadTexts: x21LineLoopbackCodeDetection.setDescription('Enable detection of line Loopback Codes. The loopback detection is implemented only in HSSI DCE mode. Default is codeDetectDisabled.')
x21ConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x21Backcard", 1), ("hssiBackcard", 2), ("v35Backcard", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21ConnectorType.setStatus('current')
if mibBuilder.loadTexts: x21ConnectorType.setDescription('back card type This object is not used by FRSM-HS2/HS2B ')
x21InvertClock = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nonInvertedAndNotLooped", 1), ("invertedAndNotLooped", 2), ("nonInvertedAndLooped", 3), ("invertedAndLooped", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21InvertClock.setStatus('current')
if mibBuilder.loadTexts: x21InvertClock.setDescription('This object configures two options: a) To invert the clock sent by HS1/HS2B with the TX data or not. b) If DCE,to expect the receive clock looped back from DTE or not. If DTE,to loop back the receive clock from DCE or not. nonInvertedAndNotLooped(1)- a)=dont invert, b)=dont expect rcv clock/ dont loop rcv clock invertedAndNotLooped(2) - a)=invert, b)=dont expect rcv clock/ dont loop rcv clock nonInvertedAndLooped(3) - a)=dont invert, b)=expect rcv clock/ loop rcv clock invertedAndLooped(4) - a)=invert, b)=expect rcv clock/ loop rcv clock Enums 1 and 2 are applicable for X.21/HSSI/V.35 interfaces. Enums 3 and 4 are applicable only for V.35. Default for X.21/HSSI is nonInvertedAndNotLooped(1) Default for V.35 is nonInvertedAndLooped(3) This object is not used by FRSM-HS2/FRSM-HS2B-HSSI This object is used by FRSM-HS2B-12IN1 and default values are nonInvertedAndNotLooped(1) for X.21, nonInvertedAndLooped(3) for V.35.')
x21LineInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hssi", 1), ("x21", 2), ("v35", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21LineInterfaceType.setStatus('current')
if mibBuilder.loadTexts: x21LineInterfaceType.setDescription('This object indicates serial interface type. Default is hssi(1). This object is not is configurable in FRSM-HS2 and FRSM-HS2B-HSSI. It will be set to hssi(1) by default for these cards This object is configurable in FRSM-H2B-12IN1. Default is v35(3).')
x21ClkFrequencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21ClkFrequencyThreshold.setStatus('current')
if mibBuilder.loadTexts: x21ClkFrequencyThreshold.setDescription('This object indicates user configurable percentage of clock frequency, which is used by DTE clock monitoring to declare clock rate out of bound alarm. This object is valid only for X.21/v.35/HSSI DTE interfaces. This object is supported by FRSM-HS2 and FRSM-HS2/B')
serialLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(48000, 51840000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialLineRate.setStatus('current')
if mibBuilder.loadTexts: serialLineRate.setDescription('Line rate for X.21/HSSI/V.35 interfaces in bps. This object is supported only by FRSM-HS2/B card, only multiples of 1000 are accepted. Default is 48Kbps for X.21/V.35 interfaces and 51840Kbps for HSSI interface.')
serialLineRateVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialLineRateVariation.setStatus('current')
if mibBuilder.loadTexts: serialLineRateVariation.setDescription('This object indicates line rate variation of HSSI/X.21/V.35 DCE interfaces in ppm (parts per million). i.e. clock generated from DCE hardware interface = (serialLineRate +/- (serialLineRateVariation * 10^6)/ serialLineRate) This object is supported only by FRSM-HS2/B card ')
x21LineNumofValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineNumofValidEntries.setStatus('current')
if mibBuilder.loadTexts: x21LineNumofValidEntries.setDescription('The number of X.21/HSSI configuration entries (regardless of their current configuration) in the x21ConfigTable table.')
frPortCnfX21PortGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1), )
if mibBuilder.loadTexts: frPortCnfX21PortGrpTable.setStatus('current')
if mibBuilder.loadTexts: frPortCnfX21PortGrpTable.setDescription('The config table is for X.21/HSSI logical port interface ')
frPortCnfX21PortGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-X21-MIB", "x21portNum"))
if mibBuilder.loadTexts: frPortCnfX21PortGrpEntry.setStatus('current')
if mibBuilder.loadTexts: frPortCnfX21PortGrpEntry.setDescription(' An entry for logical port.')
x21portNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portNum.setStatus('current')
if mibBuilder.loadTexts: x21portNum.setDescription('This is logical port number. The HSSI backcard can support upto 3 ports. The X.21 back card can support 4 logical ports.')
x21portLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portLineNum.setStatus('current')
if mibBuilder.loadTexts: x21portLineNum.setDescription('This represents the line number. On FRSM-HS1 the HSSI can support 3 lines and X.21 4 lines.')
x21portRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portRowStatus.setStatus('current')
if mibBuilder.loadTexts: x21portRowStatus.setDescription('This variable adds, deletes, or modifies the port 1- add 2 - delete 3 - modify Default is add.')
x21portFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portFlagsBetweenFrames.setStatus('current')
if mibBuilder.loadTexts: x21portFlagsBetweenFrames.setDescription('Number of flags transmitted between two consecutive HDLC frames. Default is 1 flag.')
x21portEqueueServiceRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portEqueueServiceRatio.setStatus('current')
if mibBuilder.loadTexts: x21portEqueueServiceRatio.setDescription('Number of times queue 1 is serviced for every time queue 2 is serviced. Default is 1.')
x21portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSpeed.setStatus('current')
if mibBuilder.loadTexts: x21portSpeed.setDescription('Port speed in kbps. At present it is same as line speed.')
x21portAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("write-Only", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portAdmin.setStatus('current')
if mibBuilder.loadTexts: x21portAdmin.setDescription('This object is used for administratively changing the status of the port. Up/down used to up and down the port. Default is the up state.')
x21portType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frame-relay", 1), ("frFUNI", 2), ("frame-forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portType.setStatus('current')
if mibBuilder.loadTexts: x21portType.setDescription('This represents port type. The processing of the frames depends on the type of the port.')
x21portSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portSvcStatus.setStatus('current')
if mibBuilder.loadTexts: x21portSvcStatus.setDescription('This represents SVC status.')
x21portSvcInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-use", 1), ("in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portSvcInUse.setStatus('current')
if mibBuilder.loadTexts: x21portSvcInUse.setDescription('This represents port SVC in use.')
x21portSvcShareLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("card-based", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcShareLcn.setStatus('current')
if mibBuilder.loadTexts: x21portSvcShareLcn.setDescription('This represents port type.')
x21portSvcLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 271))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcLcnLow.setStatus('current')
if mibBuilder.loadTexts: x21portSvcLcnLow.setDescription('This represents low end of reserved LCN for SVC.')
x21portSvcLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 271))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcLcnHigh.setStatus('current')
if mibBuilder.loadTexts: x21portSvcLcnHigh.setDescription('This represents high end of reserved LCN for SVC.')
x21portSvcDlciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcDlciLow.setStatus('current')
if mibBuilder.loadTexts: x21portSvcDlciLow.setDescription('This represents low end of reserved DLCI for SVC.')
x21portSvcDlciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portSvcDlciHigh.setStatus('current')
if mibBuilder.loadTexts: x21portSvcDlciHigh.setDescription('This represents high end of reserved DLCI for SVC.')
x21portDeleteSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21portDeleteSvcs.setStatus('current')
if mibBuilder.loadTexts: x21portDeleteSvcs.setDescription('Setting this object to 1 indicates that all the SVC connections on the given port has to be deleted.')
x21portIngrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portIngrSvcBandW.setStatus('current')
if mibBuilder.loadTexts: x21portIngrSvcBandW.setDescription('This represents Ingress Bandwidth reserve for SVC.')
x21portEgrSvcBandW = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21portEgrSvcBandW.setStatus('current')
if mibBuilder.loadTexts: x21portEgrSvcBandW.setDescription('This represents Egress Bandwidth reserve for SVC.')
x21AlmCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1), )
if mibBuilder.loadTexts: x21AlmCnfGrpTable.setStatus('current')
if mibBuilder.loadTexts: x21AlmCnfGrpTable.setDescription('The FRSM-HS1/HS2 interface alarm configuration table.')
x21AlmCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-X21-MIB", "x21AlmCnfLineNum"))
if mibBuilder.loadTexts: x21AlmCnfGrpEntry.setStatus('current')
if mibBuilder.loadTexts: x21AlmCnfGrpEntry.setDescription('An entry in the X.21/HSSI Alarm Configuration table.')
x21AlmCnfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21AlmCnfLineNum.setStatus('current')
if mibBuilder.loadTexts: x21AlmCnfLineNum.setDescription('X.21/HSSI line number. FRSM-HS2/HS2B-HSSI supports a range from 1 to 2. FRSM-HS2B-12IN1 supports a range from 1 to 8.')
x21Severity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("dontcare", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21Severity.setStatus('current')
if mibBuilder.loadTexts: x21Severity.setDescription('This variable is used to setup the severity of LOS(Loss of Signal) or clock mismatch alarm. Whenever the above condition arises, the FRSM-HS1/HS2/HS2B will send the alarm with appropriate status.')
x21AlmGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1), )
if mibBuilder.loadTexts: x21AlmGrpTable.setStatus('current')
if mibBuilder.loadTexts: x21AlmGrpTable.setDescription('The X.21/HSSI interface alarm configuration table.')
x21AlmGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-X21-MIB", "x21AlmLineNum"))
if mibBuilder.loadTexts: x21AlmGrpEntry.setStatus('current')
if mibBuilder.loadTexts: x21AlmGrpEntry.setDescription('An entry in the X21 Alarm table')
x21AlmLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21AlmLineNum.setStatus('current')
if mibBuilder.loadTexts: x21AlmLineNum.setDescription('This object is the identifier (line number) of a X.21/HSSI interface. The value for this object must be same as the value of x21LineNum.')
x21LineAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineAlarmState.setStatus('current')
if mibBuilder.loadTexts: x21LineAlarmState.setDescription('This variable is a bitmap of the X21 Line ALarms on the FRSM-HS1. A value of zero indicates no alarms. Itemized below are the individual bits: BitPosition Alarm ----------- ----- 0 C/I signal is OFF (also used to indicate LOS) 1 Clock rate mismatch (used in DTE mode) 2 Internal Loopback (diagnostic loopback) 3 HSSI Local LoopA (line is in loopback) 4 HSSI Local LoopB (line is in loopback) 5 Remote Loopback (line is transmitting loopcodes) 6 For V35 DTE mode, DCD and CTS both are inactive 7 For V35 DCE mode, RTS is inactive 8 No cable attached to V35 backcard 9 Wrong cable attached to V35 backcard If all the bit-states are 0s: - line is not in alarm, or - line not in loopback, or - line is transmitting any loopback codes. ')
x21LineEIAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x21LineEIAStatus.setStatus('current')
if mibBuilder.loadTexts: x21LineEIAStatus.setDescription('Indicates the status of X.21/HSSI lines: 0x01 -- c-lead high 0x02 -- i-lead high 0x04 -- LC-lead high (valid only for HSSI DCE mode).')
x21AlarmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x21AlarmClrButton.setStatus('current')
if mibBuilder.loadTexts: x21AlarmClrButton.setDescription('This variable is used to clear all the alarms for the line. 1 = No action 2 = Clear alarm.')
cwfX21MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 49, 2))
cwfX21MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 49, 2, 1))
cwfX21MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 49, 2, 2))
cwfX21Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 49, 2, 2, 1)).setObjects(("CISCO-WAN-FR-X21-MIB", "ciscoWanFrX21LineGroup"), ("CISCO-WAN-FR-X21-MIB", "ciscoWanFrX21PortGroup"), ("CISCO-WAN-FR-X21-MIB", "ciscoWanFrX21AlarmConfGroup"), ("CISCO-WAN-FR-X21-MIB", "ciscoWanFrX21AlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwfX21Compliance = cwfX21Compliance.setStatus('current')
if mibBuilder.loadTexts: cwfX21Compliance.setDescription('The compliance statement for objects related to Frame Relay Ports.')
ciscoWanFrX21PortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 49, 2, 1, 1)).setObjects(("CISCO-WAN-FR-X21-MIB", "x21portNum"), ("CISCO-WAN-FR-X21-MIB", "x21portLineNum"), ("CISCO-WAN-FR-X21-MIB", "x21portRowStatus"), ("CISCO-WAN-FR-X21-MIB", "x21portFlagsBetweenFrames"), ("CISCO-WAN-FR-X21-MIB", "x21portEqueueServiceRatio"), ("CISCO-WAN-FR-X21-MIB", "x21portSpeed"), ("CISCO-WAN-FR-X21-MIB", "x21portAdmin"), ("CISCO-WAN-FR-X21-MIB", "x21portType"), ("CISCO-WAN-FR-X21-MIB", "x21portSvcStatus"), ("CISCO-WAN-FR-X21-MIB", "x21portSvcInUse"), ("CISCO-WAN-FR-X21-MIB", "x21portSvcShareLcn"), ("CISCO-WAN-FR-X21-MIB", "x21portSvcLcnLow"), ("CISCO-WAN-FR-X21-MIB", "x21portSvcLcnHigh"), ("CISCO-WAN-FR-X21-MIB", "x21portSvcDlciLow"), ("CISCO-WAN-FR-X21-MIB", "x21portSvcDlciHigh"), ("CISCO-WAN-FR-X21-MIB", "x21portDeleteSvcs"), ("CISCO-WAN-FR-X21-MIB", "x21portIngrSvcBandW"), ("CISCO-WAN-FR-X21-MIB", "x21portEgrSvcBandW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrX21PortGroup = ciscoWanFrX21PortGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrX21PortGroup.setDescription('The collection of objects which are applicable for X21 ports in frame relay.')
ciscoWanFrX21LineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 49, 2, 1, 2)).setObjects(("CISCO-WAN-FR-X21-MIB", "x21LineNum"), ("CISCO-WAN-FR-X21-MIB", "x21LineEnable"), ("CISCO-WAN-FR-X21-MIB", "x21LineType"), ("CISCO-WAN-FR-X21-MIB", "x21LineRate"), ("CISCO-WAN-FR-X21-MIB", "x21LineLoopbackCommand"), ("CISCO-WAN-FR-X21-MIB", "x21LineSendCode"), ("CISCO-WAN-FR-X21-MIB", "x21LineLoopbackCodeDetection"), ("CISCO-WAN-FR-X21-MIB", "x21ConnectorType"), ("CISCO-WAN-FR-X21-MIB", "x21InvertClock"), ("CISCO-WAN-FR-X21-MIB", "x21LineInterfaceType"), ("CISCO-WAN-FR-X21-MIB", "x21ClkFrequencyThreshold"), ("CISCO-WAN-FR-X21-MIB", "serialLineRate"), ("CISCO-WAN-FR-X21-MIB", "serialLineRateVariation"), ("CISCO-WAN-FR-X21-MIB", "x21LineNumofValidEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrX21LineGroup = ciscoWanFrX21LineGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrX21LineGroup.setDescription('The collection of objects which are related to x21 lines.')
ciscoWanFrX21AlarmConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 49, 2, 1, 3)).setObjects(("CISCO-WAN-FR-X21-MIB", "x21AlmCnfLineNum"), ("CISCO-WAN-FR-X21-MIB", "x21Severity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrX21AlarmConfGroup = ciscoWanFrX21AlarmConfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrX21AlarmConfGroup.setDescription('The collection of objects which are related to x21 lines.')
ciscoWanFrX21AlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 49, 2, 1, 4)).setObjects(("CISCO-WAN-FR-X21-MIB", "x21AlmLineNum"), ("CISCO-WAN-FR-X21-MIB", "x21LineAlarmState"), ("CISCO-WAN-FR-X21-MIB", "x21LineEIAStatus"), ("CISCO-WAN-FR-X21-MIB", "x21AlarmClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrX21AlarmGroup = ciscoWanFrX21AlarmGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrX21AlarmGroup.setDescription('The collection of objects which are related to x21 lines.')
mibBuilder.exportSymbols("CISCO-WAN-FR-X21-MIB", PYSNMP_MODULE_ID=ciscoWanFrX21MIB, x21Severity=x21Severity, x21LineRate=x21LineRate, frPortCnfX21PortGrpEntry=frPortCnfX21PortGrpEntry, x21portIngrSvcBandW=x21portIngrSvcBandW, x21AlmCnfLineNum=x21AlmCnfLineNum, ciscoWanFrX21AlarmGroup=ciscoWanFrX21AlarmGroup, x21portAdmin=x21portAdmin, ciscoWanFrX21AlarmConfGroup=ciscoWanFrX21AlarmConfGroup, x21LineEnable=x21LineEnable, x21portType=x21portType, x21LineNum=x21LineNum, ciscoWanFrX21PortGroup=ciscoWanFrX21PortGroup, x21AlmGrp=x21AlmGrp, cwfX21Compliance=cwfX21Compliance, x21portLineNum=x21portLineNum, x21portSpeed=x21portSpeed, x21portRowStatus=x21portRowStatus, x21portDeleteSvcs=x21portDeleteSvcs, cwfX21MIBCompliances=cwfX21MIBCompliances, x21AlmLineNum=x21AlmLineNum, serialLineRate=serialLineRate, x21InvertClock=x21InvertClock, x21portEqueueServiceRatio=x21portEqueueServiceRatio, x21ConnectorType=x21ConnectorType, x21portSvcLcnLow=x21portSvcLcnLow, x21CnfGrp=x21CnfGrp, x21LineLoopbackCodeDetection=x21LineLoopbackCodeDetection, x21LineNumofValidEntries=x21LineNumofValidEntries, x21portSvcDlciHigh=x21portSvcDlciHigh, x21portEgrSvcBandW=x21portEgrSvcBandW, x21AlmGrpEntry=x21AlmGrpEntry, x21AlarmClrButton=x21AlarmClrButton, x21AlmGrpTable=x21AlmGrpTable, x21CnfGrpEntry=x21CnfGrpEntry, x21LineEIAStatus=x21LineEIAStatus, x21portSvcLcnHigh=x21portSvcLcnHigh, ciscoWanFrX21MIB=ciscoWanFrX21MIB, serialLineRateVariation=serialLineRateVariation, x21AlmCnfGrp=x21AlmCnfGrp, x21portSvcStatus=x21portSvcStatus, x21LineInterfaceType=x21LineInterfaceType, frPortCnfX21PortGrpTable=frPortCnfX21PortGrpTable, x21portSvcInUse=x21portSvcInUse, x21LineSendCode=x21LineSendCode, x21portSvcDlciLow=x21portSvcDlciLow, x21AlmCnfGrpTable=x21AlmCnfGrpTable, x21portFlagsBetweenFrames=x21portFlagsBetweenFrames, cwfX21MIBConformance=cwfX21MIBConformance, cwfX21MIBGroups=cwfX21MIBGroups, x21portSvcShareLcn=x21portSvcShareLcn, ciscoWanFrX21LineGroup=ciscoWanFrX21LineGroup, x21CnfGrpTable=x21CnfGrpTable, x21LineLoopbackCommand=x21LineLoopbackCommand, x21portNum=x21portNum, x21AlmCnfGrpEntry=x21AlmCnfGrpEntry, x21LineType=x21LineType, x21ClkFrequencyThreshold=x21ClkFrequencyThreshold, x21LineAlarmState=x21LineAlarmState)
