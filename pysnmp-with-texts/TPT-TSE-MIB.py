#
# PySNMP MIB module TPT-TSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-TSE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, Bits, Unsigned32, Integer32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "Bits", "Unsigned32", "Integer32", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tpt_tpa_objs, = mibBuilder.importSymbols("TPT-TPAMIBS-MIB", "tpt-tpa-objs")
tpt_tse = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7)).setLabel("tpt-tse")
tpt_tse.setRevisions(('2016-05-25 18:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tpt_tse.setRevisionsDescriptions(('Updated copyright information. Minor MIB syntax fixes.',))
if mibBuilder.loadTexts: tpt_tse.setLastUpdated('201605251854Z')
if mibBuilder.loadTexts: tpt_tse.setOrganization('Trend Micro, Inc.')
if mibBuilder.loadTexts: tpt_tse.setContactInfo('www.trendmicro.com')
if mibBuilder.loadTexts: tpt_tse.setDescription("Threat Suppression Engine information. Copyright (C) 2016 Trend Micro Incorporated. All Rights Reserved. Trend Micro makes no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. Trend Micro shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material. This document contains proprietary information, which is protected by copyright. No part of this document may be photocopied, reproduced, or translated into another language without the prior written consent of Trend Micro. The information is provided 'as is' without warranty of any kind and is subject to change without notice. The only warranties for Trend Micro products and services are set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Trend Micro shall not be liable for technical or editorial errors or omissions contained herein. TippingPoint(R), the TippingPoint logo, and Digital Vaccine(R) are registered trademarks of Trend Micro. All other company and product names may be trademarks of their respective holders. All rights reserved. This document contains confidential information, trade secrets or both, which are the property of Trend Micro. No part of this documentation may be reproduced in any form or by any means or used to make any derivative work (such as translation, transformation, or adaptation) without written permission from Trend Micro or one of its subsidiaries. All other company and product names may be trademarks of their respective holders. ")
class PolicyState(TextualConvention, Integer32):
    description = 'A selection from a set of networking protocols detected by a policy.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 3, 4))
    namedValues = NamedValues(("invalid", 0), ("normal", 3), ("system-disabled", 4))

topTenAdaptFilterTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1), )
if mibBuilder.loadTexts: topTenAdaptFilterTable.setStatus('current')
if mibBuilder.loadTexts: topTenAdaptFilterTable.setDescription('Adaptive filter configuration top ten list.')
topTenAdaptFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1), ).setIndexNames((0, "TPT-TSE-MIB", "topTenAdaptFilterRank"))
if mibBuilder.loadTexts: topTenAdaptFilterEntry.setStatus('current')
if mibBuilder.loadTexts: topTenAdaptFilterEntry.setDescription('An entry in the adaptive filter configuration top ten list. Rows cannot be created or deleted. ')
topTenAdaptFilterRank = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topTenAdaptFilterRank.setStatus('current')
if mibBuilder.loadTexts: topTenAdaptFilterRank.setDescription('The numerical ranking 1 through 10 in the adaptive filter top ten list.')
adaptFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptFilterName.setStatus('current')
if mibBuilder.loadTexts: adaptFilterName.setDescription('The human-readable name of a filter in the adaptive filter top ten list.')
adaptFilterUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptFilterUUID.setStatus('current')
if mibBuilder.loadTexts: adaptFilterUUID.setDescription('The global identifier of a filter in the adaptive filter top ten list.')
adaptFilterSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptFilterSegment.setStatus('deprecated')
if mibBuilder.loadTexts: adaptFilterSegment.setDescription('The applicable segment of a filter in the adaptive filter top ten list.')
adaptFilterEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1, 5), PolicyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptFilterEnabledState.setStatus('current')
if mibBuilder.loadTexts: adaptFilterEnabledState.setDescription('The state of a filter in the adaptive filter top ten list.')
adaptFilterSigID = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptFilterSigID.setStatus('current')
if mibBuilder.loadTexts: adaptFilterSigID.setDescription('The global identifier of a signature in the adaptive filter top ten list.')
adaptFilterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adaptFilterProfile.setStatus('current')
if mibBuilder.loadTexts: adaptFilterProfile.setDescription('The profile name of a filter in the adaptive filter top ten list.')
connectionBlockTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2), )
if mibBuilder.loadTexts: connectionBlockTable.setStatus('current')
if mibBuilder.loadTexts: connectionBlockTable.setDescription('Table of connections corresponding to blocked streams.')
connectionBlockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1), ).setIndexNames((0, "TPT-TSE-MIB", "connectionBlockIndex"))
if mibBuilder.loadTexts: connectionBlockEntry.setStatus('current')
if mibBuilder.loadTexts: connectionBlockEntry.setDescription('An entry in the connection block table. Rows cannot be created or deleted. ')
connectionBlockIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: connectionBlockIndex.setStatus('current')
if mibBuilder.loadTexts: connectionBlockIndex.setDescription('An index into the table of connections corresponding to blocked streams.')
connectionBlockSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockSrcAddr.setStatus('current')
if mibBuilder.loadTexts: connectionBlockSrcAddr.setDescription('The source IP address of a connection.')
connectionBlockSrcAddrV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockSrcAddrV6.setStatus('current')
if mibBuilder.loadTexts: connectionBlockSrcAddrV6.setDescription('The source IPv6 address of a connection.')
connectionBlockSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockSrcPort.setStatus('current')
if mibBuilder.loadTexts: connectionBlockSrcPort.setDescription('The source port of a connection.')
connectionBlockDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockDestAddr.setStatus('current')
if mibBuilder.loadTexts: connectionBlockDestAddr.setDescription('The destination IP address of a connection.')
connectionBlockDestAddrV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockDestAddrV6.setStatus('current')
if mibBuilder.loadTexts: connectionBlockDestAddrV6.setDescription('The destination IPv6 address of a connection.')
connectionBlockDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockDestPort.setStatus('current')
if mibBuilder.loadTexts: connectionBlockDestPort.setDescription('The destination port of a connection.')
connectionBlockProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockProtocol.setStatus('current')
if mibBuilder.loadTexts: connectionBlockProtocol.setDescription('The transmission protocol of a connection.')
connectionBlockPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockPort.setStatus('current')
if mibBuilder.loadTexts: connectionBlockPort.setDescription('The name of the security zone pair whose incoming data caused the block.')
connectionBlockReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockReason.setStatus('current')
if mibBuilder.loadTexts: connectionBlockReason.setDescription('The UUID of the signature that caused the block.')
connectionBlockTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionBlockTotalCount.setStatus('current')
if mibBuilder.loadTexts: connectionBlockTotalCount.setDescription('The total number of connections corresponding to blocked streams. Only the first 50 are contained in the connection block table.')
rateLimitStreamTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4), )
if mibBuilder.loadTexts: rateLimitStreamTable.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamTable.setDescription('Table of rate limit streams.')
rateLimitStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1), ).setIndexNames((0, "TPT-TSE-MIB", "rateLimitStreamIndex"))
if mibBuilder.loadTexts: rateLimitStreamEntry.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamEntry.setDescription('An entry in the rate limit stream table. Rows cannot be created or deleted. ')
rateLimitStreamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: rateLimitStreamIndex.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamIndex.setDescription('An index into the rate limit stream table.')
rateLimitStreamSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamSrcAddr.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamSrcAddr.setDescription('The source IP address of a rate limit.')
rateLimitStreamSrcAddrV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamSrcAddrV6.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamSrcAddrV6.setDescription('The source IPv6 address of a rate limit.')
rateLimitStreamSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamSrcPort.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamSrcPort.setDescription('The source port of a rate limit.')
rateLimitStreamDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamDestAddr.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamDestAddr.setDescription('The destination IP address of a rate limit.')
rateLimitStreamDestAddrV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamDestAddrV6.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamDestAddrV6.setDescription('The destination IPv6 address of a rate limit.')
rateLimitStreamDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamDestPort.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamDestPort.setDescription('The destination port of a rate limit.')
rateLimitStreamProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamProtocol.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamProtocol.setDescription('The transmission protocol of a rate limit.')
rateLimitStreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamPort.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamPort.setDescription('The port on which the stream originated.')
rateLimitStreamReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamReason.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamReason.setDescription('The UUID of the rate limiter.')
rateLimitStreamTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateLimitStreamTotalCount.setStatus('current')
if mibBuilder.loadTexts: rateLimitStreamTotalCount.setDescription('The total number of rate limit streams. Only the first 50 are contained in the rate limit stream table.')
connectionTrustTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6), )
if mibBuilder.loadTexts: connectionTrustTable.setStatus('current')
if mibBuilder.loadTexts: connectionTrustTable.setDescription('Table of connections corresponding to trusted streams.')
connectionTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1), ).setIndexNames((0, "TPT-TSE-MIB", "connectionTrustIndex"))
if mibBuilder.loadTexts: connectionTrustEntry.setStatus('current')
if mibBuilder.loadTexts: connectionTrustEntry.setDescription('An entry in the connection trust table. Rows cannot be created or deleted. ')
connectionTrustIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: connectionTrustIndex.setStatus('current')
if mibBuilder.loadTexts: connectionTrustIndex.setDescription('An index into the table of connections corresponding to trusted streams.')
connectionTrustSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustSrcAddr.setStatus('current')
if mibBuilder.loadTexts: connectionTrustSrcAddr.setDescription('The source IP address of a trusted connection.')
connectionTrustSrcAddrV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustSrcAddrV6.setStatus('current')
if mibBuilder.loadTexts: connectionTrustSrcAddrV6.setDescription('The source IPv6 address of a trusted connection.')
connectionTrustSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustSrcPort.setStatus('current')
if mibBuilder.loadTexts: connectionTrustSrcPort.setDescription('The source port of a trusted connection.')
connectionTrustDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustDestAddr.setStatus('current')
if mibBuilder.loadTexts: connectionTrustDestAddr.setDescription('The destination IP address of a trusted connection.')
connectionTrustDestAddrV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustDestAddrV6.setStatus('current')
if mibBuilder.loadTexts: connectionTrustDestAddrV6.setDescription('The destination IPv6 address of a trusted connection.')
connectionTrustDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustDestPort.setStatus('current')
if mibBuilder.loadTexts: connectionTrustDestPort.setDescription('The destination port of a trusted connection.')
connectionTrustProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustProtocol.setStatus('current')
if mibBuilder.loadTexts: connectionTrustProtocol.setDescription('The transmission protocol of a trusted connection.')
connectionTrustPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustPort.setStatus('current')
if mibBuilder.loadTexts: connectionTrustPort.setDescription('The name of the security zone pair whose incoming data caused the trust.')
connectionTrustReason = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustReason.setStatus('current')
if mibBuilder.loadTexts: connectionTrustReason.setDescription('The UUID of the signature that caused the trust.')
connectionTrustTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 7, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTrustTotalCount.setStatus('current')
if mibBuilder.loadTexts: connectionTrustTotalCount.setDescription('The total number of connections corresponding to trusted streams. Only the first 50 are contained in the connection trust table.')
mibBuilder.exportSymbols("TPT-TSE-MIB", connectionBlockDestAddr=connectionBlockDestAddr, rateLimitStreamDestPort=rateLimitStreamDestPort, connectionTrustSrcAddrV6=connectionTrustSrcAddrV6, adaptFilterSegment=adaptFilterSegment, rateLimitStreamDestAddr=rateLimitStreamDestAddr, connectionBlockSrcAddr=connectionBlockSrcAddr, adaptFilterUUID=adaptFilterUUID, connectionBlockProtocol=connectionBlockProtocol, PYSNMP_MODULE_ID=tpt_tse, connectionTrustDestAddrV6=connectionTrustDestAddrV6, connectionTrustSrcAddr=connectionTrustSrcAddr, adaptFilterSigID=adaptFilterSigID, connectionBlockDestAddrV6=connectionBlockDestAddrV6, connectionTrustIndex=connectionTrustIndex, connectionBlockTable=connectionBlockTable, connectionBlockReason=connectionBlockReason, rateLimitStreamTable=rateLimitStreamTable, connectionBlockDestPort=connectionBlockDestPort, topTenAdaptFilterRank=topTenAdaptFilterRank, rateLimitStreamSrcPort=rateLimitStreamSrcPort, connectionTrustReason=connectionTrustReason, topTenAdaptFilterTable=topTenAdaptFilterTable, connectionBlockSrcPort=connectionBlockSrcPort, connectionBlockIndex=connectionBlockIndex, connectionTrustSrcPort=connectionTrustSrcPort, rateLimitStreamIndex=rateLimitStreamIndex, connectionBlockTotalCount=connectionBlockTotalCount, rateLimitStreamReason=rateLimitStreamReason, connectionTrustPort=connectionTrustPort, rateLimitStreamProtocol=rateLimitStreamProtocol, connectionBlockPort=connectionBlockPort, rateLimitStreamSrcAddr=rateLimitStreamSrcAddr, PolicyState=PolicyState, connectionTrustTable=connectionTrustTable, connectionTrustDestAddr=connectionTrustDestAddr, connectionTrustProtocol=connectionTrustProtocol, connectionTrustTotalCount=connectionTrustTotalCount, rateLimitStreamTotalCount=rateLimitStreamTotalCount, connectionTrustDestPort=connectionTrustDestPort, adaptFilterEnabledState=adaptFilterEnabledState, rateLimitStreamSrcAddrV6=rateLimitStreamSrcAddrV6, tpt_tse=tpt_tse, connectionTrustEntry=connectionTrustEntry, rateLimitStreamDestAddrV6=rateLimitStreamDestAddrV6, adaptFilterName=adaptFilterName, connectionBlockSrcAddrV6=connectionBlockSrcAddrV6, connectionBlockEntry=connectionBlockEntry, rateLimitStreamPort=rateLimitStreamPort, adaptFilterProfile=adaptFilterProfile, rateLimitStreamEntry=rateLimitStreamEntry, topTenAdaptFilterEntry=topTenAdaptFilterEntry)
