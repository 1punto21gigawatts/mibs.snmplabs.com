#
# PySNMP MIB module SONUS-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-DS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Integer32, Counter32, Counter64, IpAddress, ObjectIdentity, TimeTicks, Unsigned32, ModuleIdentity, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "Counter32", "Counter64", "IpAddress", "ObjectIdentity", "TimeTicks", "Unsigned32", "ModuleIdentity", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
sonusShelfIndex, sonusDs3Index, sonusDs1Index, sonusEventLevel, sonusEventClass, sonusSlotIndex, sonusEventDescription, sonusPortIndex = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusShelfIndex", "sonusDs3Index", "sonusDs1Index", "sonusEventLevel", "sonusEventClass", "sonusSlotIndex", "sonusEventDescription", "sonusPortIndex")
sonusCircuitMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusCircuitMIBs")
SonusAdminState, SonusName, SonusServiceState, SonusAdminAction = mibBuilder.importSymbols("SONUS-TC", "SonusAdminState", "SonusName", "SonusServiceState", "SonusAdminAction")
sonusDsx1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1))
if mibBuilder.loadTexts: sonusDsx1MIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusDsx1MIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusDsx1MIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 Carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusDsx1MIB.setDescription('The MIB Module for DS1 Management.')
sonusDsx1MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1))
sonusDsx1Admn = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1))
sonusDsx1AdmnNextIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 1))
sonusDsx1AdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2), )
if mibBuilder.loadTexts: sonusDsx1AdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnTable.setDescription('Table of Sonus Enterprise Configurations for all DS1s')
sonusDsx1AdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-DS1-MIB", "sonusDsx1AdmnShelfIndex"), (0, "SONUS-DS1-MIB", "sonusDsx1AdmnSlotIndex"), (0, "SONUS-DS1-MIB", "sonusDsx1AdmnPortIndex"), (0, "SONUS-DS1-MIB", "sonusDsx1AdmnDs3Index"), (0, "SONUS-DS1-MIB", "sonusDsx1AdmnDs1Index"))
if mibBuilder.loadTexts: sonusDsx1AdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEntry.setDescription('Entry in Table consisting of the all the Sonus Enterprise DS1 Configurations')
sonusDsx1AdmnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnRowStatus.setDescription('DS1, Needed for SNMP')
sonusDsx1AdmnName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnName.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnName.setDescription('Name of this T1/E1 Span')
sonusDsx1AdmnProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnProfileName.setDescription('The name of the profile applied to this T1/E1 Table')
sonusDsx1AdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnShelfIndex.setDescription('Shelf index for this table')
sonusDsx1AdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnSlotIndex.setDescription('Slot index for this table')
sonusDsx1AdmnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnPortIndex.setDescription('Port Index into this table')
sonusDsx1AdmnDs3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnDs3Index.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDs3Index.setDescription('Ds3 Index into this table')
sonusDsx1AdmnDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnDs1Index.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDs1Index.setDescription('Ds1 Index into this table')
sonusDsx1AdmnIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnIfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnIfIndex.setDescription('If Index for the corresponding standard MIB table')
sonusDsx1AdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 10), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnState.setDescription('State of T1/E1, Enabled/Disabled')
sonusDsx1AdmnLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("buildOut0to110", 1), ("buildOut110to220", 2), ("buildOut220to330", 3), ("buildOut330to440", 4), ("buildOut440to550", 5), ("buildOut550to660", 6), ("buildOut120Ohms", 7), ("buildOut75Ohms", 8))).clone('buildOut110to220')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnLineBuildOut.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnLineBuildOut.setDescription('Line build out of T1/E1')
sonusDsx1AdmnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnTimeout.setDescription('Max time in minutes before dryup takes place')
sonusDsx1AdmnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 13), SonusServiceState().clone('outOfService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnMode.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnMode.setDescription('T1/E1 span is in service or out of service.')
sonusDsx1AdmnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 14), SonusAdminAction().clone('dryUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnAction.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnAction.setDescription('Force out of service or wait for dryup')
sonusDsx1AdmnIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnIdleCode.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnIdleCode.setDescription('Idle code to be applied to the channels')
sonusDsx1AdmnAvailChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 16), Bits().clone(namedValues=NamedValues(("channel1", 0), ("channel2", 1), ("channel3", 2), ("channel4", 3), ("channel5", 4), ("channel6", 5), ("channel7", 6), ("channel8", 7), ("channel9", 8), ("channel10", 9), ("channel11", 10), ("channel12", 11), ("channel13", 12), ("channel14", 13), ("channel15", 14), ("channel16", 15), ("channel17", 16), ("channel18", 17), ("channel19", 18), ("channel20", 19), ("channel21", 20), ("channel22", 21), ("channel23", 22), ("channel24", 23), ("channel25", 24), ("channel26", 25), ("channel27", 26), ("channel28", 27), ("channel29", 28), ("channel30", 29), ("channel31", 30), ("channel32", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnAvailChannels.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnAvailChannels.setDescription('Bitstring map of channels that are available on this T1/E1 span.')
sonusDsx1AdmnType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2))).clone('t1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnType.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnType.setDescription('Type of DSx1. Indicates whether this span is a T1 span or E1 span.')
sonusDsx1AdmnESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnESThreshold.setDescription('Errored Seconds threshold value for 15 minute interval. This is for near end.')
sonusDsx1AdmnSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnSESThreshold.setDescription('Severely Errored Seconds threshold value for 15 minute interval. This is for near end.')
sonusDsx1AdmnCSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnCSSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnCSSThreshold.setDescription('Severely Errored Seconds threshold value for 15 minute interval. This is for near end.')
sonusDsx1AdmnDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDayESThreshold.setDescription('Errored Seconds threshold value for a day. This is for near end.')
sonusDsx1AdmnDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDaySESThreshold.setDescription('Severely Errored Seconds threshold value for a day. This is for near end.')
sonusDsx1AdmnDayCSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnDayCSSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDayCSSThreshold.setDescription('Severely Errored Seconds threshold value for a day. This is for near end.')
sonusDsx1AdmnFarESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarESThreshold.setDescription('Errored Seconds threshold value for 15 minute interval. This is for far end.')
sonusDsx1AdmnFarSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarSESThreshold.setDescription('Severely Errored Seconds threshold value for 15 minute interval. This is for far end.')
sonusDsx1AdmnFarDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayESThreshold.setDescription('Errored Seconds threshold value for a day. This is for far end.')
sonusDsx1AdmnFarDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarDaySESThreshold.setDescription('Severely Errored Seconds threshold value for a day. This is for far end.')
sonusDsx1AdmnPCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(13296)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnPCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnPCVThreshold.setDescription('Path Code Violations threshold value for 15 minute interval. This is for near end.')
sonusDsx1AdmnLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(13340)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnLCVThreshold.setDescription('Line Code Violations threshold value for 15 minute interval. This is for near end.')
sonusDsx1AdmnUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnUASThreshold.setDescription('Unavailable Seconds threshold value for 15 minute interval. This is for near end.')
sonusDsx1AdmnFarPCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(72)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarPCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarPCVThreshold.setDescription('Path Code Violations threshold value for 15 minute interval. This is for far end.')
sonusDsx1AdmnFarLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(72)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarLCVThreshold.setDescription('Line Code Violations threshold value for 15 minute interval. This is for far end.')
sonusDsx1AdmnFarUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarUASThreshold.setDescription('Unavailable Seconds threshold value for 15 minute interval. This is for far end.')
sonusDsx1AdmnDayPCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(132960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnDayPCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDayPCVThreshold.setDescription('Path Code Violations threshold value for a day. This is for near end.')
sonusDsx1AdmnDayLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(133400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnDayLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDayLCVThreshold.setDescription('Line Code Violations threshold value for a day. This is for near end.')
sonusDsx1AdmnDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnDayUASThreshold.setDescription('Unavailable Seconds threshold value for a day. This is for near end.')
sonusDsx1AdmnFarDayPCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(691)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayPCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayPCVThreshold.setDescription('Path Code Violations threshold value for a day. This is for far end.')
sonusDsx1AdmnFarDayLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(691)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayLCVThreshold.setDescription('Line Code Violations threshold value for a day. This is for far end.')
sonusDsx1AdmnFarDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnFarDayUASThreshold.setDescription('Unavailable Seconds threshold value for a day. This is for far end.')
sonusDsx1AdmnInitCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 40), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnInitCounters.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnInitCounters.setDescription('Used to initialize all counters. Once enabled clears all T1/E1 counters.')
sonusDsx1AdmnEchoProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoProfileName.setDescription('The name of the Echo Canceller profile applied to this T1/E1 Table')
sonusDsx1AdmnEchoCancellorMaxTail = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("millisec24", 1), ("millisec32", 2), ("millisec48", 3), ("millisec64", 4))).clone('millisec64')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorMaxTail.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorMaxTail.setDescription('Maximum Echo canceller tail length')
sonusDsx1AdmnEchoCancellorAudioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uLaw", 1), ("aLaw", 2))).clone('uLaw')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorAudioType.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorAudioType.setDescription('Echo Canceller Audio encoding type A-law or U-law')
sonusDsx1AdmnEchoCancellorSignallingTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("c5", 2))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorSignallingTone.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorSignallingTone.setDescription('Echo Cancellation: None, 2400, 2600 or 2101 Hz')
sonusDsx1AdmnEchoCancellorNlpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorNlpDisable.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorNlpDisable.setDescription('Echo Canceller Non-linear processing control, Disable')
sonusDsx1AdmnEchoCancellorNlpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)).clone(75)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorNlpEnable.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorNlpEnable.setDescription('Echo canceller Non-linear processing control, Enable')
sonusDsx1AdmnEchoCancellorReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dB6", 1), ("dB3", 2), ("dB0", 3))).clone('dB6')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorReturnLoss.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorReturnLoss.setDescription("For Network Echo Cancellation, specifies the echo return loss in dB's. Default value is 6dB.")
sonusDsx1AdmnEchoCancellorResidualEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("cancelOnly", 1), ("suppressResidual", 2), ("comfortNoise", 4))).clone('comfortNoise')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorResidualEcho.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorResidualEcho.setDescription('For Network Echo Cancellation, specifies the residual echo cancellation.')
sonusDsx1AdmnEchoCancellorHiLevelComp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dB6", 2))).clone('dB6')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorHiLevelComp.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorHiLevelComp.setDescription('For Network Echo Cancellation, the high level compensation value. Default value is to attenuate by 6dB.')
sonusDsx1AdmnEchoCancellorModemDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("ignore2100Hz", 1), ("g164", 2), ("g165", 4))).clone('g165')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorModemDisable.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorModemDisable.setDescription('For Network Echo Cancellation, specifies whether to disable echo cancellation when a modem tone is detected.')
sonusDsx1AdmnZeroSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("jamBit8", 2), ("signalFrameOnlyJamBit8", 3), ("gteZeroSuppression", 4), ("bellZeroSuppression", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnZeroSuppression.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnZeroSuppression.setDescription('T1 span zero suppression control.')
sonusDsx1AdmnCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDsx1AdmnCircuitId.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnCircuitId.setDescription('The Circuit Id.')
sonusDsx1AdmnEchoCancellorNarrowbandDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorNarrowbandDetection.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdmnEchoCancellorNarrowbandDetection.setDescription('For Network Echo Cancellation, narrow band detection is OFF or ON. If set ON it narrows the G.164 detection bandwidth in G.165 mode to the G.165 band.')
sonusDsx1StatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2), )
if mibBuilder.loadTexts: sonusDsx1StatTable.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatTable.setDescription('Table of Sonus Enterprise Status for all DS1s')
sonusDsx1StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-DS1-MIB", "sonusDsx1StatShelfIndex"), (0, "SONUS-DS1-MIB", "sonusDsx1StatSlotIndex"), (0, "SONUS-DS1-MIB", "sonusDsx1StatPortIndex"), (0, "SONUS-DS1-MIB", "sonusDsx1StatDs3Index"), (0, "SONUS-DS1-MIB", "sonusDsx1StatDs1Index"))
if mibBuilder.loadTexts: sonusDsx1StatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatEntry.setDescription('Entry in Table consisting of the all the Sonus Enterprise DS1 Status')
sonusDsx1StatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatShelfIndex.setDescription('Shelf index into this table')
sonusDsx1StatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatSlotIndex.setDescription('Slot index into this table')
sonusDsx1StatPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatPortIndex.setDescription('Port Index into this table')
sonusDsx1StatDs3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatDs3Index.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatDs3Index.setDescription('Ds3 Index into this table')
sonusDsx1StatDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatDs1Index.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatDs1Index.setDescription('Ds1 Index into this table')
sonusDsx1StatValidInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatValidInt.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatValidInt.setDescription('Number of valid intervals of Performance Monitoring')
sonusDsx1StatRxSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatRxSlips.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatRxSlips.setDescription('Number of frame slips in the receive direction.')
sonusDsx1StatTxSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatTxSlips.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatTxSlips.setDescription('Number of frame slips in the transmit direction.')
sonusDsx1StatLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatLOF.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatLOF.setDescription('Number of Loss of Frame defects that have occured.')
sonusDsx1StatAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatAIS.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatAIS.setDescription('Number of AIS alarms that have occured.')
sonusDsx1StatRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatRAI.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatRAI.setDescription('Number of RAI alarms that have occured.')
sonusDsx1StatRED = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatRED.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatRED.setDescription('Number of RED alarms that have occured.')
sonusDsx1StatCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatCRC.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatCRC.setDescription('Number T1 CRC framing errors that have occured.')
sonusDsx1StatCOFA = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatCOFA.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatCOFA.setDescription('Number of Change of Frame Alignments that have occured.')
sonusDsx1StatFBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatFBE.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatFBE.setDescription('Number framing bit errors that have occured.')
sonusDsx1StatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatStatus.setStatus('deprecated')
if mibBuilder.loadTexts: sonusDsx1StatStatus.setDescription('T1/E1 span status. Indicates if port in alarm state, loopback state etc.')
sonusDsx1StatAllocChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatAllocChannels.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatAllocChannels.setDescription('String display showing bitmap of channels that are currently allocated. A 1 indicates that the channel is allocated.')
sonusDsx1StatEnabChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatEnabChannels.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatEnabChannels.setDescription('String display showing bitmap of channels that are currently enabled A 1 indicates that the channel is allocated.')
sonusE1StatLOMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatLOMF.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatLOMF.setDescription('Number of Loss of Multiframe alignments that have occured.')
sonusE1StatMFError = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatMFError.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatMFError.setDescription('Number of Multiframe CRC errors that have occured.')
sonusE1StatFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatFEBE.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatFEBE.setDescription('Number of Far End Block errors that have occured.')
sonusE1StatOOOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatOOOF.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatOOOF.setDescription('Number of Out of ofline framer errors that have occured.')
sonusE1StatC2NCIWCK = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatC2NCIWCK.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatC2NCIWCK.setDescription('Number of CRC 2 Non CRC framing events that have occured.')
sonusE1StatRAIContCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatRAIContCRC.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatRAIContCRC.setDescription('Number of RAI and Continuous CRC errors that have occured.')
sonusE1StatContFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatContFEBE.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatContFEBE.setDescription('Number of Continuous FEBE errors that have occured.')
sonusE1StatExcessCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatExcessCRC.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatExcessCRC.setDescription('Number of Excessive CRC errors that have occured.')
sonusE1StatFASErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusE1StatFASErr.setStatus('current')
if mibBuilder.loadTexts: sonusE1StatFASErr.setDescription('Number of Frame Alignment Sequence Errors.')
sonusDsx1StatSendPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("dsx1SendNoCode", 1), ("dsx1SendLineCode", 2), ("dsx1SendPayloadCode", 3), ("dsx1SendResetCode", 4), ("dsx1SendQRS", 5), ("dsx1Send511Pattern", 6), ("dsx1Send3in24Pattern", 7), ("dsx1SendOtherTestPattern", 8))).clone('dsx1SendNoCode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatSendPattern.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatSendPattern.setDescription('Indicates status of SendCode variable for PATTERNS ONLY - does not include SendCodes that require loopback.')
sonusDsx1StatStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx1StatStatusCodeNoAlarm", 1), ("dsx1StatStatusCodeRedAlarm", 2), ("dsx1StatStatusCodeYellowAlarm", 3), ("dsx1StatStatusCodeAisAlarm", 4), ("dsx1StatStatusCodeDspFailure", 5), ("dsx1StatStatusCodeLoopback", 6))).clone('dsx1StatStatusCodeNoAlarm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatStatusCode.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatStatusCode.setDescription('T1/E1 span status. Indicates if port in alarm state, loopback state etc. Integer version of sonusDsx1StatStatus variable.')
sonusDsx1StatLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("dsx1StatLoopbackStatusNoLoopback", 1), ("dsx1StatLoopbackStatusNeLineLoopback", 2), ("dsx1StatLoopbackStatusNePayloadLoopback", 3), ("dsx1StatLoopbackStatusNeInwardLoopback", 4), ("dsx1StatLoopbackStatusNeDualLoopback", 5), ("dsx1StatLoopbackStatusFeLineLoopback", 6), ("dsx1StatLoopbackStatusFePayloadLoopback", 7))).clone('dsx1StatLoopbackStatusNoLoopback')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatLoopbackStatus.setDescription('T1 loopback status display. Indicates loopback STATUS of T1 port.')
sonusDsx1StatOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("dryingUp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDsx1StatOperStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1StatOperStatus.setDescription('The actual status of the DS1 interface. Interface is Up if it is administratively in service and there are no line failures or hardware failures. Interface is Down if it is administratively in service and there are line failures or hardware failures, or if it is administratively out of service. Interface is DryingUp if it is administratively out of service and is drying up (no new calls, still carrying in-progress calls).')
sonusDs0AdmnTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3), )
if mibBuilder.loadTexts: sonusDs0AdmnTable.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnTable.setDescription('Table of Sonus Enterprise Configuration for DS0s')
sonusDs0AdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1), ).setIndexNames((0, "SONUS-DS1-MIB", "sonusDs0AdmnShelfIndex"), (0, "SONUS-DS1-MIB", "sonusDs0AdmnSlotIndex"), (0, "SONUS-DS1-MIB", "sonusDs0AdmnPortIndex"), (0, "SONUS-DS1-MIB", "sonusDs0AdmnDs3Index"), (0, "SONUS-DS1-MIB", "sonusDs0AdmnDs1Index"), (0, "SONUS-DS1-MIB", "sonusDs0AdmnDs0Index"))
if mibBuilder.loadTexts: sonusDs0AdmnEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnEntry.setDescription('Entry in Table consisting of the all the Sonus Enterprise Ds0 Configuration')
sonusDs0AdmnShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs0AdmnShelfIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnShelfIndex.setDescription('Shelf Index for this table')
sonusDs0AdmnSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs0AdmnSlotIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnSlotIndex.setDescription('Slot index for this table')
sonusDs0AdmnPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs0AdmnPortIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnPortIndex.setDescription('Port Index into this table')
sonusDs0AdmnDs3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs0AdmnDs3Index.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnDs3Index.setDescription('Ds3 Index into this table')
sonusDs0AdmnDs1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs0AdmnDs1Index.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnDs1Index.setDescription('DS1 index for this table')
sonusDs0AdmnDs0Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs0AdmnDs0Index.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnDs0Index.setDescription('DS0 index for this table')
sonusDs0AdmnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs0AdmnTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnTimeout.setDescription('Max time in minutes before channel dryup takes place')
sonusDs0AdmnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 8), SonusServiceState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs0AdmnMode.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnMode.setDescription('Channel is in service or out of service.')
sonusDs0AdmnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 9), SonusAdminAction().clone('dryUp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs0AdmnAction.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnAction.setDescription('Force out of service or wait for dryup')
sonusDs0AdmnState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unavailable", 1), ("available", 2))).clone('available')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs0AdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnState.setDescription('Channel state, available/unavailable')
sonusDs0AdmnIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs0AdmnIdleCode.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnIdleCode.setDescription('Channel Idle Code pattern')
sonusDs0AdmnTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("dmw", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs0AdmnTone.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnTone.setDescription('Insert different tones into channel. Digital milliwatt')
sonusDs0AdmnLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs0AdmnLoopback.setStatus('current')
if mibBuilder.loadTexts: sonusDs0AdmnLoopback.setDescription('Put channel in loopback')
sonusDs1Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4))
sonusDs1ProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs1ProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileNextIndex.setDescription('The next valid index to use when creating an entry in the sonusDs1ProfileTable.')
sonusDs1ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2), )
if mibBuilder.loadTexts: sonusDs1ProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileTable.setDescription('Table for T1/E1 profile')
sonusDs1ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1), ).setIndexNames((0, "SONUS-DS1-MIB", "sonusDs1ProfileIndex"))
if mibBuilder.loadTexts: sonusDs1ProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileEntry.setDescription('Entry in Table consisting of T1/E1 profile. The T1/E1 profiles have to be created by users and then configured. These profiles can then be applied onto any T1/E1 span.')
sonusDs1ProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileRowStatus.setDescription('Profile: Row Status Needed for SNMP')
sonusDs1ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileName.setDescription('Name of this Profile')
sonusDs1ProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs1ProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileIndex.setDescription('Index into the profile table')
sonusDs1ProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 4), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileState.setDescription('Profile: State')
sonusDs1ProfileDs1LineBO = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("buildOut0to110", 1), ("buildOut110to220", 2), ("buildOut220to330", 3), ("buildOut330to440", 4), ("buildOut440to550", 5), ("buildOut550to660", 6), ("buildOut120Ohms", 7), ("buildOut75Ohms", 8))).clone('buildOut110to220')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineBO.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineBO.setDescription('Profile: DS1 Line build out')
sonusDs1ProfileDs1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("esf", 2), ("d4", 3), ("e1", 4), ("e1crc", 5))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineType.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineType.setDescription('Profile: T1/E1 Line type')
sonusDs1ProfileDs1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("b8zs", 2), ("hdb3", 3), ("ami", 5))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineCoding.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineCoding.setDescription('Profile: T1/E1 Line Coding, B8ZS, AMI, HDB3')
sonusDs1ProfileDs1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("none", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1SignalMode.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1SignalMode.setDescription('Profile: T1/E1 Signalling, Robbed Bit or None')
sonusDs1ProfileDs1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8))).clone(namedValues=NamedValues(("ansi", 2), ("none", 8))).clone('ansi')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1Fdl.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1Fdl.setDescription('Profile: T1 Facilities Data Link type')
sonusDs1ProfileDs0IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs0IdleCode.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs0IdleCode.setDescription('Profile: Idle code to be used on all channels in this T1/E1 span')
sonusDs1ProfileAvailChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 11), Bits().clone(namedValues=NamedValues(("channel1", 0), ("channel2", 1), ("channel3", 2), ("channel4", 3), ("channel5", 4), ("channel6", 5), ("channel7", 6), ("channel8", 7), ("channel9", 8), ("channel10", 9), ("channel11", 10), ("channel12", 11), ("channel13", 12), ("channel14", 13), ("channel15", 14), ("channel16", 15), ("channel17", 16), ("channel18", 17), ("channel19", 18), ("channel20", 19), ("channel21", 20), ("channel22", 21), ("channel23", 22), ("channel24", 23), ("channel25", 24), ("channel26", 25), ("channel27", 26), ("channel28", 27), ("channel29", 28), ("channel30", 29), ("channel31", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileAvailChannels.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileAvailChannels.setDescription('Bitstring map of channels that are available on this T1/E1.')
sonusDs1ProfileDs1LineBOState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 12), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineBOState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineBOState.setDescription('Profile: Line Build Out State, used by profile code')
sonusDs1ProfileDs1LineTypeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 13), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineTypeState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineTypeState.setDescription('Profile: T1/E1 Line type State, used by profile code')
sonusDs1ProfileDs1LineCodingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 14), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineCodingState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1LineCodingState.setDescription('Profile: T1/E1 Line coding State, used by profile code')
sonusDs1ProfileDs1SignalModeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 15), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1SignalModeState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1SignalModeState.setDescription('Profile: T1/E1 Signal Mode state, used by profile code')
sonusDs1ProfileDs1FdlState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 16), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs1FdlState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs1FdlState.setDescription('Profile: T1/E1 FDL State, used by profile code')
sonusDs1ProfileDs0IdleCodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 17), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDs0IdleCodeState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDs0IdleCodeState.setDescription('Profile: Channel Idle Code State, used by profile')
sonusDs1ProfileAvailChannelsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 18), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileAvailChannelsState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileAvailChannelsState.setDescription('Profile: Available channel state, disabled/enabled')
sonusDs1ProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2))).clone('t1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileType.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileType.setDescription('Type of DSx1. Indicates whether this span is a T1 span or E1 span.')
sonusDs1ProfileESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileESThreshold.setDescription('Errored Seconds threshold value for 15 minute interval. This is for near end.')
sonusDs1ProfileSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileSESThreshold.setDescription('Severely Errored Seconds threshold value for 15 minute interval. This is for near end.')
sonusDs1ProfileCSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileCSSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileCSSThreshold.setDescription('Severely Errored Seconds threshold value for 15 minute interval. This is for near end.')
sonusDs1ProfileDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayESThreshold.setDescription('Errored Seconds threshold value for a day. This is for near end.')
sonusDs1ProfileDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDaySESThreshold.setDescription('Severely Errored Seconds threshold value for a day. This is for near end.')
sonusDs1ProfileDayCSSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayCSSThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayCSSThreshold.setDescription('Severely Errored Seconds threshold value for a day. This is for near end.')
sonusDs1ProfileFarESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(65)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarESThreshold.setDescription('Errored Seconds threshold value for 15 minute interval. This is for far end.')
sonusDs1ProfileFarSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarSESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarSESThreshold.setDescription('Severely Errored Seconds threshold value for 15 minute interval. This is for far end.')
sonusDs1ProfileFarDayESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(648)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayESThreshold.setDescription('Errored Seconds threshold value for a day. This is for far end.')
sonusDs1ProfileFarDaySESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDaySESThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDaySESThreshold.setDescription('Severely Errored Seconds threshold value for a day. This is for far end.')
sonusDs1ProfilePCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(13296)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfilePCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfilePCVThreshold.setDescription('Path Code Violations threshold value for 15 minute interval. This is for near end.')
sonusDs1ProfileLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(13340)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileLCVThreshold.setDescription('Line Code Violations threshold value for 15 minute interval. This is for near end.')
sonusDs1ProfileUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileUASThreshold.setDescription('Unavailable Seconds threshold value for 15 minute interval. This is for near end.')
sonusDs1ProfileFarPCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(72)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarPCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarPCVThreshold.setDescription('Path Code Violations threshold value for 15 minute interval. This is for far end.')
sonusDs1ProfileFarLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(72)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarLCVThreshold.setDescription('Line Code Violations threshold value for 15 minute interval. This is for far end.')
sonusDs1ProfileFarUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarUASThreshold.setDescription('Unavailable Seconds threshold value for 15 minute interval. This is for far end.')
sonusDs1ProfileDayPCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(132960)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayPCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayPCVThreshold.setDescription('Path Code Violations threshold value for a day. This is for near end.')
sonusDs1ProfileDayLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(133400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayLCVThreshold.setDescription('Line Code Violations threshold value for a day. This is for near end.')
sonusDs1ProfileDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayUASThreshold.setDescription('Unavailable Seconds threshold value for a day. This is for near end.')
sonusDs1ProfileFarDayPCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(691)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayPCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayPCVThreshold.setDescription('Path Code Violations threshold value for a day. This is for far end.')
sonusDs1ProfileFarDayLCVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575)).clone(691)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayLCVThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayLCVThreshold.setDescription('Line Code Violations threshold value for a day. This is for far end.')
sonusDs1ProfileFarDayUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayUASThreshold.setDescription('Unavailable Seconds threshold value for a day. This is for far end.')
sonusDs1ProfileESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 42), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileESThresholdState.setDescription('Errored Seconds threshold profile state.')
sonusDs1ProfileSESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 43), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileSESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileSESThresholdState.setDescription('Severely Errored Seconds profile state.')
sonusDs1ProfileCSSThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 44), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileCSSThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileCSSThresholdState.setDescription('Severely Errored Seconds profile state.')
sonusDs1ProfileDayESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 45), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayESThresholdState.setDescription('Errored Seconds threshold profile state.')
sonusDs1ProfileDaySESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 46), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDaySESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDaySESThresholdState.setDescription('Severely Errored Seconds threshold profile state.')
sonusDs1ProfileDayCSSThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 47), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayCSSThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayCSSThresholdState.setDescription('Severely Errored Seconds threshold profile state.')
sonusDs1ProfileFarESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 48), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarESThresholdState.setDescription('Errored Seconds threshold profile state.')
sonusDs1ProfileFarSESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 49), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarSESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarSESThresholdState.setDescription('Severely Errored Seconds threshold profile state.')
sonusDs1ProfileFarDayESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 50), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayESThresholdState.setDescription('Errored Seconds threshold profile state.')
sonusDs1ProfileFarDaySESThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 51), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDaySESThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDaySESThresholdState.setDescription('Severely Errored Seconds threshold profile state.')
sonusDs1ProfilePCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 52), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfilePCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfilePCVThresholdState.setDescription('Path Code Violations threshold profile state.')
sonusDs1ProfileLCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 53), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileLCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileLCVThresholdState.setDescription('Line Code Violations threshold profile state.')
sonusDs1ProfileUASThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 54), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileUASThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileUASThresholdState.setDescription('Unavailable Seconds threshold profile state.')
sonusDs1ProfileFarPCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 55), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarPCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarPCVThresholdState.setDescription('Path Code Violations threshold profile state.')
sonusDs1ProfileFarLCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 56), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarLCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarLCVThresholdState.setDescription('Line Code Violations threshold profile state.')
sonusDs1ProfileFarUASThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 57), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarUASThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarUASThresholdState.setDescription('Unavailable Seconds threshold profile state.')
sonusDs1ProfileDayPCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 58), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayPCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayPCVThresholdState.setDescription('Path Code Violations threshold profile state.')
sonusDs1ProfileDayLCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 59), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayLCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayLCVThresholdState.setDescription('Line Code Violations threshold profile state.')
sonusDs1ProfileDayUASThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 60), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileDayUASThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileDayUASThresholdState.setDescription('Unavailable Seconds threshold profile state.')
sonusDs1ProfileFarDayPCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 61), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayPCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayPCVThresholdState.setDescription('Path Code Violations threshold profile state.')
sonusDs1ProfileFarDayLCVThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 62), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayLCVThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayLCVThresholdState.setDescription('Line Code Violations threshold state.')
sonusDs1ProfileFarDayUASThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 1, 4, 2, 1, 63), SonusAdminState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusDs1ProfileFarDayUASThresholdState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ProfileFarDayUASThresholdState.setDescription('Unavailable Seconds threshold profile state.')
sonusDsx1MIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2))
sonusDsx1MIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 0))
sonusDsx1MIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 1))
sonusDs1OutOfServiceReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("maintenance", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs1OutOfServiceReason.setStatus('current')
if mibBuilder.loadTexts: sonusDs1OutOfServiceReason.setDescription('The reason for T1/E1 span going out of service')
sonusDs1OutOfServiceType = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("admin", 1), ("hwFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs1OutOfServiceType.setStatus('current')
if mibBuilder.loadTexts: sonusDs1OutOfServiceType.setDescription('The type of operation which caused T1/E1 span to go out of service')
sonusDs1ThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("currentLineCodeViolation", 1), ("currentPathCodeViolation", 2), ("currentPathCodeViolationFarEnd", 3), ("currentControlledSlips", 4), ("currentErroredSeconds", 5), ("currentSeverelyErrSeconds", 6), ("currentUnavailableSeconds", 7), ("totalLineCodeViolation", 8), ("totalPathCodeViolation", 9), ("totalPathCodeViolationFarEnd", 10), ("totalControlledSlips", 11), ("totalErroredSeconds", 12), ("totalSeverelyErrSeconds", 13), ("totalUnavailableSeconds", 14), ("currentFarEndErroredSeconds", 15), ("currentFarEndSeverelyErrSeconds", 16), ("totalFarEndErroredSeconds", 17), ("totalFarEndCurrentSeverelyErrSeconds", 18), ("currentFarEndUnavailableSeconds", 19), ("totalFarEndUnavailableSeconds", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs1ThresholdType.setStatus('current')
if mibBuilder.loadTexts: sonusDs1ThresholdType.setDescription('Type of threshold that was crossed which caused a threshold crossing trap')
sonusDs1LineState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("green", 1), ("red", 2), ("yellow", 3), ("ais", 4), ("hwfailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs1LineState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1LineState.setDescription('The type of Alarm or failure which caused T1/E1 span to go out of service')
sonusDs1AdmnState = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("deleted", 3), ("inservice", 4), ("dryingUp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusDs1AdmnState.setStatus('current')
if mibBuilder.loadTexts: sonusDs1AdmnState.setDescription('The administrative state of the T1/E1 span.')
sonusDsx1AdminChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 0, 1)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-COMMON-MIB", "sonusDs1Index"), ("SONUS-DS1-MIB", "sonusDs1AdmnState"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx1AdminChangeNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1AdminChangeNotification.setDescription('A sonusDsx1AdminChangeNotification trap indicates the DS1 admin changes. It is used to notify out-of-service, in-service, enabled and disabled')
sonusDsx1OutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 0, 2)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-COMMON-MIB", "sonusDs1Index"), ("SONUS-DS1-MIB", "sonusDs1OutOfServiceReason"), ("SONUS-DS1-MIB", "sonusDs1OutOfServiceType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx1OutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1OutOfServiceNotification.setDescription('A sonusDsx1OutOfServiceNotification trap indicates that a T1/E1 span went out of service. The reason indicates the reason why and type indicates the type of failure or alarm.')
sonusDsx1ThresholdCrossingNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 0, 3)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-COMMON-MIB", "sonusDs1Index"), ("SONUS-DS1-MIB", "sonusDs1ThresholdType"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx1ThresholdCrossingNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1ThresholdCrossingNotification.setDescription('A sonusDsx1ThresholdCrossingNotification trap indicates that a T1/E1 span threshold has been crossed. The type indicates the type of threshold.')
sonusDsx1LineStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 4, 1, 2, 0, 4)).setObjects(("SONUS-COMMON-MIB", "sonusShelfIndex"), ("SONUS-COMMON-MIB", "sonusSlotIndex"), ("SONUS-COMMON-MIB", "sonusPortIndex"), ("SONUS-COMMON-MIB", "sonusDs3Index"), ("SONUS-COMMON-MIB", "sonusDs1Index"), ("SONUS-DS1-MIB", "sonusDs1LineState"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusDsx1LineStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: sonusDsx1LineStatusChangeNotification.setDescription('A sonusDsx1LineStatusChangeNotification trap indicates the T1/E1 span state changes. It is used to notify T1/E1 span Alarms states')
mibBuilder.exportSymbols("SONUS-DS1-MIB", sonusDs1ProfileDayESThresholdState=sonusDs1ProfileDayESThresholdState, sonusDsx1MIBNotificationsPrefix=sonusDsx1MIBNotificationsPrefix, sonusDsx1AdmnTable=sonusDsx1AdmnTable, sonusE1StatContFEBE=sonusE1StatContFEBE, sonusDsx1StatOperStatus=sonusDsx1StatOperStatus, sonusE1StatFEBE=sonusE1StatFEBE, sonusDsx1AdmnFarUASThreshold=sonusDsx1AdmnFarUASThreshold, sonusDsx1LineStatusChangeNotification=sonusDsx1LineStatusChangeNotification, sonusDsx1StatAllocChannels=sonusDsx1StatAllocChannels, sonusDsx1AdmnEchoCancellorSignallingTone=sonusDsx1AdmnEchoCancellorSignallingTone, sonusDs1ProfileLCVThresholdState=sonusDs1ProfileLCVThresholdState, sonusDs1OutOfServiceReason=sonusDs1OutOfServiceReason, sonusDsx1AdmnCircuitId=sonusDsx1AdmnCircuitId, sonusDsx1AdmnMode=sonusDsx1AdmnMode, sonusDsx1AdmnDayESThreshold=sonusDsx1AdmnDayESThreshold, sonusDs1Profile=sonusDs1Profile, sonusDs1ProfileName=sonusDs1ProfileName, sonusDsx1StatLOF=sonusDsx1StatLOF, sonusDs1ProfileDs1FdlState=sonusDs1ProfileDs1FdlState, sonusDsx1AdmnShelfIndex=sonusDsx1AdmnShelfIndex, sonusDsx1AdmnSESThreshold=sonusDsx1AdmnSESThreshold, sonusDsx1StatDs1Index=sonusDsx1StatDs1Index, sonusDs1ProfileDs1SignalModeState=sonusDs1ProfileDs1SignalModeState, sonusDs1ProfileUASThresholdState=sonusDs1ProfileUASThresholdState, sonusDs1ProfileDs1LineBOState=sonusDs1ProfileDs1LineBOState, sonusDs0AdmnMode=sonusDs0AdmnMode, sonusDs0AdmnSlotIndex=sonusDs0AdmnSlotIndex, sonusDs1ProfileDayLCVThresholdState=sonusDs1ProfileDayLCVThresholdState, sonusDsx1AdmnPortIndex=sonusDsx1AdmnPortIndex, sonusE1StatFASErr=sonusE1StatFASErr, sonusDs1ProfileType=sonusDs1ProfileType, sonusE1StatExcessCRC=sonusE1StatExcessCRC, sonusDsx1AdmnFarDayESThreshold=sonusDsx1AdmnFarDayESThreshold, sonusDsx1StatFBE=sonusDsx1StatFBE, sonusDs1ProfileDayLCVThreshold=sonusDs1ProfileDayLCVThreshold, sonusDsx1AdmnDayCSSThreshold=sonusDsx1AdmnDayCSSThreshold, sonusDs1ProfileRowStatus=sonusDs1ProfileRowStatus, sonusDsx1StatAIS=sonusDsx1StatAIS, sonusDsx1StatValidInt=sonusDsx1StatValidInt, sonusDs1ProfileCSSThreshold=sonusDs1ProfileCSSThreshold, sonusDsx1AdmnEchoCancellorMaxTail=sonusDsx1AdmnEchoCancellorMaxTail, sonusDs0AdmnAction=sonusDs0AdmnAction, sonusDs1ProfileDs0IdleCode=sonusDs1ProfileDs0IdleCode, sonusDs0AdmnTone=sonusDs0AdmnTone, sonusDs1ProfileFarDayUASThresholdState=sonusDs1ProfileFarDayUASThresholdState, sonusDs1ProfileTable=sonusDs1ProfileTable, sonusDsx1AdmnTimeout=sonusDsx1AdmnTimeout, sonusDs1ProfileDayUASThresholdState=sonusDs1ProfileDayUASThresholdState, sonusDsx1AdmnSlotIndex=sonusDsx1AdmnSlotIndex, sonusDs1ProfileSESThreshold=sonusDs1ProfileSESThreshold, sonusDs0AdmnDs3Index=sonusDs0AdmnDs3Index, sonusDs1ProfileDs1Fdl=sonusDs1ProfileDs1Fdl, sonusDs1ProfileDayCSSThresholdState=sonusDs1ProfileDayCSSThresholdState, sonusDs0AdmnDs0Index=sonusDs0AdmnDs0Index, sonusDsx1ThresholdCrossingNotification=sonusDsx1ThresholdCrossingNotification, sonusDs1ProfileFarLCVThreshold=sonusDs1ProfileFarLCVThreshold, sonusDsx1AdmnEchoCancellorNlpDisable=sonusDsx1AdmnEchoCancellorNlpDisable, sonusDs1ProfileESThresholdState=sonusDs1ProfileESThresholdState, sonusDsx1AdmnEchoCancellorReturnLoss=sonusDsx1AdmnEchoCancellorReturnLoss, sonusDsx1AdmnFarDaySESThreshold=sonusDsx1AdmnFarDaySESThreshold, sonusDsx1StatDs3Index=sonusDsx1StatDs3Index, sonusDsx1AdmnAction=sonusDsx1AdmnAction, sonusDsx1StatTxSlips=sonusDsx1StatTxSlips, sonusDs1ProfileFarUASThreshold=sonusDs1ProfileFarUASThreshold, sonusDs1ProfileFarDayPCVThresholdState=sonusDs1ProfileFarDayPCVThresholdState, sonusDsx1AdmnEchoCancellorNlpEnable=sonusDsx1AdmnEchoCancellorNlpEnable, sonusDs1ProfilePCVThresholdState=sonusDs1ProfilePCVThresholdState, sonusDsx1AdmnNextIndex=sonusDsx1AdmnNextIndex, sonusDsx1AdmnFarDayPCVThreshold=sonusDsx1AdmnFarDayPCVThreshold, sonusDsx1AdmnFarDayUASThreshold=sonusDsx1AdmnFarDayUASThreshold, sonusDs1ProfileFarPCVThresholdState=sonusDs1ProfileFarPCVThresholdState, sonusDs1ThresholdType=sonusDs1ThresholdType, sonusDs1OutOfServiceType=sonusDs1OutOfServiceType, sonusDsx1StatStatus=sonusDsx1StatStatus, sonusDs1ProfileDs1SignalMode=sonusDs1ProfileDs1SignalMode, sonusDs1ProfileFarDaySESThreshold=sonusDs1ProfileFarDaySESThreshold, sonusDs0AdmnEntry=sonusDs0AdmnEntry, sonusDs1ProfileDaySESThreshold=sonusDs1ProfileDaySESThreshold, sonusDs1ProfileDayPCVThresholdState=sonusDs1ProfileDayPCVThresholdState, sonusDs0AdmnLoopback=sonusDs0AdmnLoopback, sonusDs1ProfileESThreshold=sonusDs1ProfileESThreshold, sonusDsx1AdmnFarESThreshold=sonusDsx1AdmnFarESThreshold, sonusDs1ProfileFarDaySESThresholdState=sonusDs1ProfileFarDaySESThresholdState, sonusDs1ProfileFarDayLCVThreshold=sonusDs1ProfileFarDayLCVThreshold, sonusDsx1MIB=sonusDsx1MIB, sonusDs1ProfileDs1LineCodingState=sonusDs1ProfileDs1LineCodingState, sonusDs1ProfileFarESThresholdState=sonusDs1ProfileFarESThresholdState, sonusDs1ProfileEntry=sonusDs1ProfileEntry, sonusDsx1StatRxSlips=sonusDsx1StatRxSlips, sonusDs0AdmnState=sonusDs0AdmnState, sonusDs1ProfileFarDayPCVThreshold=sonusDs1ProfileFarDayPCVThreshold, sonusDs1ProfileFarLCVThresholdState=sonusDs1ProfileFarLCVThresholdState, sonusDsx1AdmnFarLCVThreshold=sonusDsx1AdmnFarLCVThreshold, sonusDsx1Admn=sonusDsx1Admn, sonusE1StatC2NCIWCK=sonusE1StatC2NCIWCK, sonusDsx1AdmnAvailChannels=sonusDsx1AdmnAvailChannels, sonusDs1ProfileDs1LineBO=sonusDs1ProfileDs1LineBO, sonusDs1ProfileSESThresholdState=sonusDs1ProfileSESThresholdState, sonusDsx1StatRAI=sonusDsx1StatRAI, sonusDsx1AdmnEntry=sonusDsx1AdmnEntry, sonusDs0AdmnDs1Index=sonusDs0AdmnDs1Index, sonusDsx1AdmnUASThreshold=sonusDsx1AdmnUASThreshold, sonusDsx1StatEnabChannels=sonusDsx1StatEnabChannels, sonusDs1ProfileLCVThreshold=sonusDs1ProfileLCVThreshold, sonusDs0AdmnShelfIndex=sonusDs0AdmnShelfIndex, sonusDs1ProfileDs1LineType=sonusDs1ProfileDs1LineType, sonusDs1ProfileFarSESThresholdState=sonusDs1ProfileFarSESThresholdState, sonusDs0AdmnIdleCode=sonusDs0AdmnIdleCode, sonusDsx1AdmnFarPCVThreshold=sonusDsx1AdmnFarPCVThreshold, sonusDsx1AdmnType=sonusDsx1AdmnType, sonusDsx1StatSendPattern=sonusDsx1StatSendPattern, sonusDsx1AdmnDayLCVThreshold=sonusDsx1AdmnDayLCVThreshold, sonusE1StatMFError=sonusE1StatMFError, sonusDs1ProfileDayESThreshold=sonusDs1ProfileDayESThreshold, sonusDsx1AdmnEchoCancellorAudioType=sonusDsx1AdmnEchoCancellorAudioType, sonusDs1ProfileFarPCVThreshold=sonusDs1ProfileFarPCVThreshold, sonusDsx1AdmnFarSESThreshold=sonusDsx1AdmnFarSESThreshold, sonusDsx1MIBNotifications=sonusDsx1MIBNotifications, sonusDs1LineState=sonusDs1LineState, sonusDs1ProfileFarSESThreshold=sonusDs1ProfileFarSESThreshold, sonusDs1AdmnState=sonusDs1AdmnState, sonusDsx1AdmnLCVThreshold=sonusDsx1AdmnLCVThreshold, sonusDsx1StatTable=sonusDsx1StatTable, sonusDs1ProfileNextIndex=sonusDs1ProfileNextIndex, sonusDs1ProfileUASThreshold=sonusDs1ProfileUASThreshold, sonusDsx1AdmnEchoCancellorNarrowbandDetection=sonusDsx1AdmnEchoCancellorNarrowbandDetection, sonusDsx1AdmnDaySESThreshold=sonusDsx1AdmnDaySESThreshold, sonusDsx1AdmnInitCounters=sonusDsx1AdmnInitCounters, sonusDsx1StatCOFA=sonusDsx1StatCOFA, sonusDsx1AdmnZeroSuppression=sonusDsx1AdmnZeroSuppression, sonusDsx1StatSlotIndex=sonusDsx1StatSlotIndex, sonusDsx1AdmnDs3Index=sonusDsx1AdmnDs3Index, sonusE1StatLOMF=sonusE1StatLOMF, sonusDs1ProfileAvailChannels=sonusDs1ProfileAvailChannels, sonusDsx1AdmnIdleCode=sonusDsx1AdmnIdleCode, sonusDsx1StatShelfIndex=sonusDsx1StatShelfIndex, sonusDs0AdmnPortIndex=sonusDs0AdmnPortIndex, sonusDs1ProfileIndex=sonusDs1ProfileIndex, sonusDs1ProfileDs0IdleCodeState=sonusDs1ProfileDs0IdleCodeState, sonusDsx1AdmnDayUASThreshold=sonusDsx1AdmnDayUASThreshold, sonusDsx1AdmnPCVThreshold=sonusDsx1AdmnPCVThreshold, sonusDsx1OutOfServiceNotification=sonusDsx1OutOfServiceNotification, sonusDs1ProfileFarDayESThresholdState=sonusDs1ProfileFarDayESThresholdState, sonusDsx1AdmnDs1Index=sonusDsx1AdmnDs1Index, sonusDsx1AdmnRowStatus=sonusDsx1AdmnRowStatus, sonusDsx1AdmnEchoCancellorResidualEcho=sonusDsx1AdmnEchoCancellorResidualEcho, sonusDsx1AdmnProfileName=sonusDsx1AdmnProfileName, sonusE1StatRAIContCRC=sonusE1StatRAIContCRC, sonusE1StatOOOF=sonusE1StatOOOF, sonusDsx1StatCRC=sonusDsx1StatCRC, sonusDs1ProfileDs1LineTypeState=sonusDs1ProfileDs1LineTypeState, sonusDs1ProfileFarESThreshold=sonusDs1ProfileFarESThreshold, sonusDs1ProfileFarUASThresholdState=sonusDs1ProfileFarUASThresholdState, sonusDsx1AdminChangeNotification=sonusDsx1AdminChangeNotification, sonusDsx1AdmnState=sonusDsx1AdmnState, sonusDsx1AdmnEchoProfileName=sonusDsx1AdmnEchoProfileName, sonusDsx1StatLoopbackStatus=sonusDsx1StatLoopbackStatus, sonusDsx1MIBNotificationsObjects=sonusDsx1MIBNotificationsObjects, sonusDs0AdmnTimeout=sonusDs0AdmnTimeout, sonusDs1ProfileDayCSSThreshold=sonusDs1ProfileDayCSSThreshold, sonusDsx1AdmnFarDayLCVThreshold=sonusDsx1AdmnFarDayLCVThreshold, sonusDsx1AdmnEchoCancellorHiLevelComp=sonusDsx1AdmnEchoCancellorHiLevelComp, sonusDsx1AdmnLineBuildOut=sonusDsx1AdmnLineBuildOut, sonusDsx1MIBObjects=sonusDsx1MIBObjects, sonusDs1ProfileFarDayLCVThresholdState=sonusDs1ProfileFarDayLCVThresholdState, sonusDs1ProfileFarDayESThreshold=sonusDs1ProfileFarDayESThreshold, sonusDsx1StatPortIndex=sonusDsx1StatPortIndex, PYSNMP_MODULE_ID=sonusDsx1MIB, sonusDs1ProfileDs1LineCoding=sonusDs1ProfileDs1LineCoding, sonusDs1ProfileAvailChannelsState=sonusDs1ProfileAvailChannelsState, sonusDs1ProfileDaySESThresholdState=sonusDs1ProfileDaySESThresholdState, sonusDsx1AdmnIfIndex=sonusDsx1AdmnIfIndex, sonusDsx1AdmnESThreshold=sonusDsx1AdmnESThreshold, sonusDs0AdmnTable=sonusDs0AdmnTable, sonusDs1ProfileFarDayUASThreshold=sonusDs1ProfileFarDayUASThreshold, sonusDsx1StatRED=sonusDsx1StatRED, sonusDsx1AdmnDayPCVThreshold=sonusDsx1AdmnDayPCVThreshold, sonusDsx1AdmnEchoCancellorModemDisable=sonusDsx1AdmnEchoCancellorModemDisable, sonusDs1ProfileDayUASThreshold=sonusDs1ProfileDayUASThreshold, sonusDsx1StatEntry=sonusDsx1StatEntry, sonusDs1ProfileCSSThresholdState=sonusDs1ProfileCSSThresholdState, sonusDs1ProfilePCVThreshold=sonusDs1ProfilePCVThreshold, sonusDsx1AdmnCSSThreshold=sonusDsx1AdmnCSSThreshold, sonusDsx1StatStatusCode=sonusDsx1StatStatusCode, sonusDs1ProfileDayPCVThreshold=sonusDs1ProfileDayPCVThreshold, sonusDsx1AdmnName=sonusDsx1AdmnName, sonusDs1ProfileState=sonusDs1ProfileState)
