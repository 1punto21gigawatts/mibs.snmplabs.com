#
# PySNMP MIB module CIENA-CES-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cienaCesConfig, = mibBuilder.importSymbols("CIENA-SMI", "cienaCesConfig")
CienaGlobalState, = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, iso, NotificationType, Unsigned32, MibIdentifier, TimeTicks, Integer32, Bits, ModuleIdentity, Counter64, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "iso", "NotificationType", "Unsigned32", "MibIdentifier", "TimeTicks", "Integer32", "Bits", "ModuleIdentity", "Counter64", "Gauge32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cienaCesAclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25))
cienaCesAclMIB.setRevisions(('2012-11-21 00:00', '2012-05-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesAclMIB.setRevisionsDescriptions(('Created new Extended table for the ACL rules which is indexed by both source and destination IP. Deprecated the cienaCesAclTable. Added new global counter for bad protocol.', 'Initial creation.',))
if mibBuilder.loadTexts: cienaCesAclMIB.setLastUpdated('201211210000Z')
if mibBuilder.loadTexts: cienaCesAclMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesAclMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesAclMIB.setDescription('This module defines the ACL details and the associated notifications.')
cienaCesAclMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1))
cienaCesAclGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1))
cienaCesAclRules = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2))
cienaCesAclMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 3))
cienaCesAclMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 3, 1))
cienaCesAclMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 3, 2))
cienaCesAclAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 1), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclAdminState.setDescription('This object indicates the global IP ACL state.')
cienaCesAclCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclCacheHit.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclCacheHit.setDescription('This object indicates the number of lookups satisfied by a cache hit.')
cienaCesAclNoHit = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclNoHit.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclNoHit.setDescription('This object indicates the number of lookups that failed because the source ip address did not match a table entry.')
cienaCesAclBadPort = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclBadPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclBadPort.setDescription('This object indicates the number of lookups that failed because the ingress port was disallowed by a table entry.')
cienaCesAclBadDscp = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclBadDscp.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclBadDscp.setDescription('This object indicates the number of lookups that failed because the ingress DSCP value was disallowed by a table entry.')
cienaCesAclOperState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 6), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclOperState.setDescription('This object indicates the current operational state of the IP ACL system.')
cienaCesAclInUseEntries = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclInUseEntries.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclInUseEntries.setDescription('This object indicates the number of IP ACL rules that are currently configured.')
cienaCesAclMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclMaxEntries.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclMaxEntries.setDescription('This object indicates the maximum number of IP ACL rules that can be configured.')
cienaCesAclBadProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclBadProtocol.setStatus('current')
if mibBuilder.loadTexts: cienaCesAclBadProtocol.setDescription("This object indicates the number of lookups that failed because protocol didn't match protocol allowed for matching src/dst subnet")
cienaCesAclTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesAclTable.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclTable.setDescription('The (conceptual) table listing the parameters for the IP ACL table.')
cienaCesAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-ACL-MIB", "cienaCesAclEntryInetAddrType"), (0, "CIENA-CES-ACL-MIB", "cienaCesAclEntryInetAddr"), (0, "CIENA-CES-ACL-MIB", "cienaCesAclEntryInetPrefixLength"))
if mibBuilder.loadTexts: cienaCesAclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntry.setDescription('An entry (conceptual row) in the cienaCesAclTable.')
cienaCesAclEntryInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cienaCesAclEntryInetAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryInetAddrType.setDescription('This object indicates the IP network type which will be authorized. This OID specifies the Inet address type of the OIDs cienaCesAclEntryInetAddr and cienaCesAclEntryInetPrefixLength. When representing: ipv4 : cienaCesAclEntryInetAddr should be compliant with InetAddressIPv4 from RFC 4001 ipv6 : cienaCesAclEntryInetAddr should be compliant with InetAddressIPv6 from RFC 4001')
cienaCesAclEntryInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryInetAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryInetAddr.setDescription('This object indicates the source IP network address that will be authorized. This OID should be used in conjunction with cienaCesAclEntryInetAddrType and should be compliant with RFC 4001 InetAddressType.')
cienaCesAclEntryInetPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cienaCesAclEntryInetPrefixLength.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryInetPrefixLength.setDescription('This object indicates the prefix length for the source IP network that will be authorized. This OID should be used in conjunction with cienaCesAclEntryInetAddrType.')
cienaCesAclEntryHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryHits.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryHits.setDescription('This object indicates the number of lookups that matched the table entry.')
cienaCesAclEntryBadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryBadPort.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryBadPort.setDescription('This object indicates the number of lookups that failed because the ingress port was disallowed by the table entry.')
cienaCesAclEntryDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryDscpMask.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryDscpMask.setDescription('This object indicates the DSCP values for which IP packets are allowed to ingress. The mask is big endian and each bit, numbered from 0 to 63, represents a DSCP value numbered from 0 to 63. A value of 0xFFFFFFFFFFFFFFFF may be used to specify all.')
cienaCesAclEntryBadDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryBadDscp.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryBadDscp.setDescription('This object indicates the number of lookups that failed because the ingress DSCP value was disallowed by the table entry.')
cienaCesAclEntryPortBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryPortBitMask.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryPortBitMask.setDescription('This object indicates the physical ports on which frames will be allowed to ingress from. The mask is big endian and each bit, numbered from 0 to 63, represents a physical port numbered from 1 to 64. A value of 0xFFFFFFFFFFFFFFFF may be used to specify all ports.')
cienaCesAclEntryNotifInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryNotifInetAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryNotifInetAddrType.setDescription('This object indicates the IP network type which will be authorized. This OID specifies the Inet address type of the OIDs cienaCesAclEntryNotifInetAddr and cienaCesAclEntryNotifInetPrefixLength. When representing: ipv4 : cienaCesAclEntryInetAddr should be compliant with InetAddressIPv4 from RFC 4001 ipv6 : cienaCesAclEntryInetAddr should be compliant with InetAddressIPv6 from RFC 4001')
cienaCesAclEntryNotifInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryNotifInetAddr.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryNotifInetAddr.setDescription('This object indicates the IP network address that will be authorized. This OID should be used in conjunction with cienaCesAclEntryNotifInetAddrType and should be compliant with RFC 4001 InetAddressType.')
cienaCesAclEntryNotifInetPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 1, 1, 11), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesAclEntryNotifInetPrefixLength.setStatus('deprecated')
if mibBuilder.loadTexts: cienaCesAclEntryNotifInetPrefixLength.setDescription('This object indicates the prefix length for the IP network that will be authorized. This OID should be used in conjunction with cienaCesAclEntryNotifInetAddrType.')
cienaCesExtAclTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesExtAclTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclTable.setDescription('The (conceptual) table listing the parameters for the extended IP ACL table.')
cienaCesExtAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-ACL-MIB", "cienaCesExtAclEntrySrcInetAddrType"), (0, "CIENA-CES-ACL-MIB", "cienaCesExtAclEntrySrcInetAddr"), (0, "CIENA-CES-ACL-MIB", "cienaCesExtAclEntrySrcInetPrefixLen"), (0, "CIENA-CES-ACL-MIB", "cienaCesExtAclEntryDstInetAddrType"), (0, "CIENA-CES-ACL-MIB", "cienaCesExtAclEntryDstInetAddr"), (0, "CIENA-CES-ACL-MIB", "cienaCesExtAclEntryDstInetPrefixLen"))
if mibBuilder.loadTexts: cienaCesExtAclEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntry.setDescription('An entry (conceptual row) in the cienaCesExtAclTable.')
cienaCesExtAclEntrySrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cienaCesExtAclEntrySrcInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntrySrcInetAddrType.setDescription('This object indicates the IP network type which will be authorized. This OID specifies the Inet address type of the OIDs cienaCesExtAclEntrySrcInetAddr and cienaCesExtAclEntrySrcInetPrefixLen. When representing: ipv4 : cienaCesExtAclEntrySrcInetAddr should be compliant with InetAddressIPv4 from RFC 4001 ipv6 : cienaCesExtAclEntrySrcInetAddr should be compliant with InetAddressIPv6 from RFC 4001')
cienaCesExtAclEntrySrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: cienaCesExtAclEntrySrcInetAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntrySrcInetAddr.setDescription('This object indicates the source IP network address that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntrySrcInetAddrType and should be compliant with RFC 4001 InetAddressType.')
cienaCesExtAclEntrySrcInetPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cienaCesExtAclEntrySrcInetPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntrySrcInetPrefixLen.setDescription('This object indicates the prefix length for the source IP network that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntrySrcInetAddrType.')
cienaCesExtAclEntryDstInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 4), InetAddressType())
if mibBuilder.loadTexts: cienaCesExtAclEntryDstInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryDstInetAddrType.setDescription('This object indicates the IP network type which will be authorized. This OID specifies the Inet address type of the OIDs cienaCesExtAclEntryDstInetAddr and cienaCesExtAclEntryDstInetPrefixLen. When representing: ipv4 : cienaCesExtAclEntryDstInetAddr should be compliant with InetAddressIPv4 from RFC 4001 ipv6 : cienaCesExtAclEntryDstInetAddr should be compliant with InetAddressIPv6 from RFC 4001')
cienaCesExtAclEntryDstInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: cienaCesExtAclEntryDstInetAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryDstInetAddr.setDescription('This object indicates the destination IP network address that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntryDstInetAddrType and should be compliant with RFC 4001 InetAddressType.')
cienaCesExtAclEntryDstInetPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 6), InetAddressPrefixLength())
if mibBuilder.loadTexts: cienaCesExtAclEntryDstInetPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryDstInetPrefixLen.setDescription('This object indicates the prefix length for the destination IP network that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntryDstInetAddrType.')
cienaCesExtAclEntryNotifSrcInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifSrcInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifSrcInetAddrType.setDescription('Duplicate of cienaCesExtAclEntrySrcInetAddrType for display purposes. This object indicates the IP network type which will be authorized. This OID specifies the Inet address type of the OIDs cienaCesExtAclEntrySrcInetAddr and cienaCesExtAclEntrySrcInetPrefixLen. When representing: ipv4 : cienaCesExtAclEntrySrcInetAddr should be compliant with InetAddressIPv4 from RFC 4001 ipv6 : cienaCesExtAclEntrySrcInetAddr should be compliant with InetAddressIPv6 from RFC 4001')
cienaCesExtAclEntryNotifSrcInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifSrcInetAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifSrcInetAddr.setDescription('Duplicate of cienaCesExtAclEntrySrcInetAddr for display purposes. This object indicates the source IP network address that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntryNotifSrcInetAddrType and should be compliant with RFC 4001 InetAddressType.')
cienaCesExtAclEntryNotifSrcInetPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 9), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifSrcInetPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifSrcInetPrefixLen.setDescription('Duplicate of cienaCesExtAclEntrySrcInetPrefixLen for display purposes. This object indicates the prefix length for the source IP network that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntryNotifSrcInetAddrType.')
cienaCesExtAclEntryNotifDstInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifDstInetAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifDstInetAddrType.setDescription('Duplicate of cienaCesExtAclEntryDstInetAddrType for display purposes. This object indicates the IP network type which will be authorized. This OID specifies the Inet address type of the OIDs cienaCesExtAclEntryNotifDstInetAddr and cienaCesExtAclEntryNotifDstInetPrefixLen. When representing: ipv4 : cienaCesExtAclEntryNotifDstInetAddr should be compliant with InetAddressIPv4 from RFC 4001 ipv6 : cienaCesExtAclEntryNotifDstInetAddr should be compliant with InetAddressIPv6 from RFC 4001')
cienaCesExtAclEntryNotifDstInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifDstInetAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifDstInetAddr.setDescription('Duplicate of cienaCesExtAclEntryDstInetAddr for display purposes. This object indicates the destination IP network address that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntryNotifDstInetAddrType and should be compliant with RFC 4001 InetAddressType.')
cienaCesExtAclEntryNotifDstInetPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 12), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifDstInetPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryNotifDstInetPrefixLen.setDescription('Duplicate of cienaCesExtAclEntryDstInetPrefixLen for display purposes. This object indicates the prefix length for the destination IP network that will be authorized. This OID should be used in conjunction with cienaCesExtAclEntryNotifDstInetAddrType.')
cienaCesExtAclEntryHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryHits.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryHits.setDescription('This object indicates the number of lookups that matched the table entry.')
cienaCesExtAclEntryBadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryBadPort.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryBadPort.setDescription('This object indicates the number of lookups that failed because the ingress port was disallowed by the table entry.')
cienaCesExtAclEntryDscpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryDscpMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryDscpMask.setDescription('This object indicates the DSCP values for which IP packets are allowed to ingress. The mask is big endian and each bit, numbered from 0 to 63, represents a DSCP value numbered from 0 to 63. A value of 0xFFFFFFFFFFFFFFFF may be used to specify all.')
cienaCesExtAclEntryBadDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryBadDscp.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryBadDscp.setDescription('This object indicates the number of lookups that failed because the ingress DSCP value was disallowed by the table entry.')
cienaCesExtAclEntryPortBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryPortBitMask.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryPortBitMask.setDescription('This object indicates the physical ports on which frames will be allowed to ingress from. The mask is big endian and each bit, numbered from 0 to 63, represents a physical port numbered from 1 to 64. A value of 0xFFFFFFFFFFFFFFFF may be used to specify all ports.')
cienaCesExtAclEntryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 18), Bits().clone(namedValues=NamedValues(("icmp", 0), ("tcp", 1), ("udp", 2), ("all", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryProtocol.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryProtocol.setDescription('List of protocols allowed for the ACL entry.')
cienaCesExtAclEntryBadProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 25, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesExtAclEntryBadProtocol.setStatus('current')
if mibBuilder.loadTexts: cienaCesExtAclEntryBadProtocol.setDescription("This object indicates the number of lookups that failed because the protocol value did't match what was in the ACL entry with IP address(es) matching")
mibBuilder.exportSymbols("CIENA-CES-ACL-MIB", cienaCesAclMIBObjects=cienaCesAclMIBObjects, cienaCesAclMIBGroups=cienaCesAclMIBGroups, cienaCesAclInUseEntries=cienaCesAclInUseEntries, cienaCesExtAclEntry=cienaCesExtAclEntry, cienaCesExtAclEntryBadDscp=cienaCesExtAclEntryBadDscp, cienaCesAclEntryNotifInetAddrType=cienaCesAclEntryNotifInetAddrType, cienaCesAclMIB=cienaCesAclMIB, cienaCesAclOperState=cienaCesAclOperState, cienaCesExtAclEntryNotifSrcInetPrefixLen=cienaCesExtAclEntryNotifSrcInetPrefixLen, cienaCesAclGlobal=cienaCesAclGlobal, cienaCesExtAclEntryHits=cienaCesExtAclEntryHits, cienaCesAclEntryNotifInetPrefixLength=cienaCesAclEntryNotifInetPrefixLength, cienaCesExtAclEntryNotifSrcInetAddr=cienaCesExtAclEntryNotifSrcInetAddr, cienaCesAclEntryHits=cienaCesAclEntryHits, cienaCesExtAclEntryProtocol=cienaCesExtAclEntryProtocol, cienaCesExtAclEntryNotifSrcInetAddrType=cienaCesExtAclEntryNotifSrcInetAddrType, cienaCesAclMaxEntries=cienaCesAclMaxEntries, cienaCesExtAclEntryNotifDstInetAddr=cienaCesExtAclEntryNotifDstInetAddr, cienaCesAclMIBConformance=cienaCesAclMIBConformance, cienaCesAclEntryPortBitMask=cienaCesAclEntryPortBitMask, cienaCesAclBadPort=cienaCesAclBadPort, cienaCesExtAclEntryDstInetAddrType=cienaCesExtAclEntryDstInetAddrType, PYSNMP_MODULE_ID=cienaCesAclMIB, cienaCesAclCacheHit=cienaCesAclCacheHit, cienaCesAclBadProtocol=cienaCesAclBadProtocol, cienaCesAclEntry=cienaCesAclEntry, cienaCesAclEntryInetAddr=cienaCesAclEntryInetAddr, cienaCesExtAclEntryNotifDstInetPrefixLen=cienaCesExtAclEntryNotifDstInetPrefixLen, cienaCesExtAclEntryBadPort=cienaCesExtAclEntryBadPort, cienaCesAclNoHit=cienaCesAclNoHit, cienaCesExtAclTable=cienaCesExtAclTable, cienaCesExtAclEntryDscpMask=cienaCesExtAclEntryDscpMask, cienaCesAclEntryNotifInetAddr=cienaCesAclEntryNotifInetAddr, cienaCesAclBadDscp=cienaCesAclBadDscp, cienaCesExtAclEntryDstInetAddr=cienaCesExtAclEntryDstInetAddr, cienaCesExtAclEntrySrcInetAddr=cienaCesExtAclEntrySrcInetAddr, cienaCesAclEntryBadDscp=cienaCesAclEntryBadDscp, cienaCesExtAclEntryPortBitMask=cienaCesExtAclEntryPortBitMask, cienaCesExtAclEntryBadProtocol=cienaCesExtAclEntryBadProtocol, cienaCesAclEntryInetPrefixLength=cienaCesAclEntryInetPrefixLength, cienaCesAclEntryBadPort=cienaCesAclEntryBadPort, cienaCesAclEntryInetAddrType=cienaCesAclEntryInetAddrType, cienaCesAclAdminState=cienaCesAclAdminState, cienaCesExtAclEntrySrcInetAddrType=cienaCesExtAclEntrySrcInetAddrType, cienaCesExtAclEntryDstInetPrefixLen=cienaCesExtAclEntryDstInetPrefixLen, cienaCesExtAclEntryNotifDstInetAddrType=cienaCesExtAclEntryNotifDstInetAddrType, cienaCesExtAclEntrySrcInetPrefixLen=cienaCesExtAclEntrySrcInetPrefixLen, cienaCesAclMIBCompliances=cienaCesAclMIBCompliances, cienaCesAclEntryDscpMask=cienaCesAclEntryDscpMask, cienaCesAclRules=cienaCesAclRules, cienaCesAclTable=cienaCesAclTable)
