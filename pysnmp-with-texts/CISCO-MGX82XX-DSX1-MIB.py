#
# PySNMP MIB module CISCO-MGX82XX-DSX1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-DSX1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
dsx1Line, = mibBuilder.importSymbols("BASIS-MIB", "dsx1Line")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, ModuleIdentity, Unsigned32, Counter32, Integer32, TimeTicks, Counter64, iso, Gauge32, ObjectIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Unsigned32", "Counter32", "Integer32", "TimeTicks", "Counter64", "iso", "Gauge32", "ObjectIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoMgx82xxDsx1MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 58))
ciscoMgx82xxDsx1MIB.setRevisions(('2003-03-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMgx82xxDsx1MIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in SMIv1 version. The MIB has been converted to SMIv2 version and descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoMgx82xxDsx1MIB.setLastUpdated('200303310000Z')
if mibBuilder.loadTexts: ciscoMgx82xxDsx1MIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMgx82xxDsx1MIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoMgx82xxDsx1MIB.setDescription('The MIB module to configure DS1/E1 interface objects. This mib also contains the alarm configuration of DS1/E1 interfaces. This mib is supported in T1/E1 service modules.')
dsx1CnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1))
dsx1AlmCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2))
dsx1AlmGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3))
dsx1CntGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4))
dsx1CnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: dsx1CnfGrpTable.setStatus('current')
if mibBuilder.loadTexts: dsx1CnfGrpTable.setDescription('The DS1/E1 Configuration table. The table size is given by the value of lineNumofValidEntries ')
dsx1CnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "lineNum"))
if mibBuilder.loadTexts: dsx1CnfGrpEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1CnfGrpEntry.setDescription('An entry in the DS1 Configuration table.')
lineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineNum.setStatus('current')
if mibBuilder.loadTexts: lineNum.setDescription('This object is the identifier of a DS1/E1 Interface on a managed device. If there is an ifEntry that is directly associated with this and only this DS1/E1 interface, it should have the same value as ifIndex. Otherwise, number the ds1LineIndices with an unique identifier following the rules of choosing a number that is greater than ifNumber and numbering the inside interfaces (e.g., equipment side) with even numbers and outside interfaces (e.g, network side) with odd numbers. The supported ranges depend upon the type of the card(4 port/8 port etc): For 4 port card : 1 - 4 For 8 port card : 1 - 8 For 2 Port Channelized card : 56 (28*2).')
lineConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("db15", 1), ("bnc", 2), ("rj48", 3), ("unused", 4), ("smb", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineConnectorType.setStatus('current')
if mibBuilder.loadTexts: lineConnectorType.setDescription('This variable indicates the connector as well as the backcard type. 1 = T1; 2 = E1. This field is set to unused(4) for FRSM-VHS cards.')
lineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("modify", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineEnable.setStatus('current')
if mibBuilder.loadTexts: lineEnable.setDescription('This variable disables, enables or modifies a line 1 - disable 2 - enable 3 - modify In FRSM-2CT3, if the DS3 line is enabled, then the DS1 channels for that line will all be automatically enabled. No independent enable/disable is allowed for each of the 28 DS1 lines in FRSM-2CT3.')
lineType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("dsx1ESF", 1), ("dsx1D4", 2), ("dsx1E1", 3), ("dsx1E1CRC", 4), ("dsx1E1MF", 5), ("dsx1E1CRC-MF", 6), ("dsx1E1clearchannel", 7), ("dsx1E1Q50", 8), ("dsx1E1Q50CRC", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineType.setStatus('current')
if mibBuilder.loadTexts: lineType.setDescription("This variable indicates the variety of DS1 Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: dsx1ESF Extended SuperFrame DS1 dsx1D4 AT&T D4 format DS1 dsx1E1 CCITT Recommendation G.704 (Table 4a) dsx1E1-CRC CCITT Recommendation G.704 (Table 4b) dsxE1-MF G.704 (Table 4a) with TS16 multiframing enabled dsx1E1-CRC-MF G.704 (Table 4b) with TS16 multiframing enabled dsx1E1clearchannel E1 clear channel, all DS0s can be used dsx1E1Q50 G.704 (table 14) In TS16 bits 5,7,8 will be set to 100 for all other cases bits 5,7,8 will have a value of 111. dsx1E1Q50CRC same as dsx1E1Q50 but with CRC. NOTE: All E1, E1-CRC, E1-MF or E1-CRC-MF are using DS0 on slot 1 for signaling and E1-MF or E1-CRC-MF use DS0 on slot 17 for synchronization. (Slot 1 and 16 is based on index 1 to 32 DS0) All DS0s can be used for any port when lineType is dsx1E1clearchannel. On a CESM card, only 'dsx1E1clearchannel' option is supported. When the lineType is dsx1E1Q50 the bits 5,7,8 of TS16 of frame zero will be forced to 100 else it will be 111. The default value for T1 is 'dsx1ESF' and for E1 is 'dsx1E1CCS'.")
lineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dsx1JBZS", 1), ("dsx1B8ZS", 2), ("dsx1HDB3", 3), ("dsx1AMI", 4), ("unused", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineCoding.setStatus('current')
if mibBuilder.loadTexts: lineCoding.setDescription("This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. dsx1JBZS(1): refers the Jammed Bit Zero suppression in which the AT&T specification of at least one pulse every 8 bit periods is literally implemented by forcing a pulse in bit 8 of each channel. Thus, only seven bits per chan- nel, or 1.344 Mbps, is available for data. dsx1B8ZS(2): refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. E1 links, with or without CRC, use dsx1HDB3 or dsx1AMI. dsx1AMI(4): refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density requirements, such as inverting HDLC data. The default value for T1 is 'dsx1JBZS' and for E1 is 'dsx1HDB3'. This field is not applicable for FRSM-VHS cards and is set to notUsed(5).")
lineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("lineLength0To110Feet", 1), ("lineLength110To220Feet", 2), ("lineLength220To330Feet", 3), ("lineLength330To440Feet", 4), ("lineLength440To550Feet", 5), ("lineLength550To660Feet", 6), ("lineLength660FeetPlus", 7), ("lineLength-75-Ohm", 8), ("lineLength-120-Ohm", 9), ("lineLength0To131Feet", 10), ("lineLength131To262Feet", 11), ("lineLength262To393Feet", 12), ("lineLength393To524Feet", 13), ("lineLength524To655Feet", 14), ("lineLength655FeetPlus", 15), ("notRequired", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineLength.setStatus('current')
if mibBuilder.loadTexts: lineLength.setDescription("This is not a standard RFC 1407 DS1 variable, it is specific to BASIS implementation. It specifies the line length: 1 - 0 to 110 ft (T1 line only) 2 - 110 to 220 ft (T1 line only) 3 - 220 to 330 ft (T1 line only) 4 - 330 to 440 ft (T1 line only) 5 - 440 to 550 ft (T1 line only) 6 - 550 to 660 ft (T1 line only) 7 - greater than 660 ft (T1 line only) 8 - 75 ohms (E1 line only (BNC)) 9 - 120 ohms (E1 line only (DB-15)) The default value for T1 is 1, for E1, if the connector type is DB15 then the default is 9, if BNC, it's 8. For FRSM-2CT3, the line length of DS1 has no meaning as there are no physical DS1 lines. So, for this card, the value is set to notRequired (16). ")
lineXmtClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2))).clone('loopTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineXmtClockSource.setStatus('current')
if mibBuilder.loadTexts: lineXmtClockSource.setDescription('The source of Transmit Clock. loopTiming(1): indicates that the recovered receive clock is used as the transmit clock. localTiming(2): indicates that a local clock source is used.')
lineLoopbackCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1NoLoop", 1), ("dsx1RemoteLoop", 2), ("dsx1LocalLoop", 3), ("dsx1PayloadLoop", 4))).clone('dsx1NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineLoopbackCommand.setStatus('current')
if mibBuilder.loadTexts: lineLoopbackCommand.setDescription("This variable represents the loopback confi- guration of the DS1 interface. Agents support- ing read/write access should return badValue in response to a requested loopback state that the interface does not support. The values mean: dsx1NoLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as it's value. dsx1RemoteLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. dsx1LocalLoop The local data is looped back dsx1PayloadLoop This will loop only the payload and not framing/sync bit. ")
lineSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dsx1SendNoCode", 1), ("dsx1SendLineCode", 2), ("dsx1SendPayloadCode", 3), ("dsx1SendResetCode", 4))).clone('dsx1SendNoCode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineSendCode.setStatus('current')
if mibBuilder.loadTexts: lineSendCode.setDescription('This variable indicates what type of code is being sent across the DS1 interface by the dev- ice. The values mean: dsx1SendNoCode sending looped or normal data dsx1SendLineCode sending a request for a line loopback dsx1SendPayloadCode sending a request for a payload loopback dsx1SendResetCode sending a loopback termination request ')
lineUsedTimeslotsBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineUsedTimeslotsBitMap.setStatus('current')
if mibBuilder.loadTexts: lineUsedTimeslotsBitMap.setDescription('Bit map of used DS0 for this line.')
lineLoopbackCodeDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("codeDetectDisabled", 1), ("codeDetectEnabled", 2))).clone('codeDetectDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineLoopbackCodeDetection.setStatus('current')
if mibBuilder.loadTexts: lineLoopbackCodeDetection.setDescription('Enable detection of line Loopback Codes ')
lineBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBERTEnable.setStatus('current')
if mibBuilder.loadTexts: lineBERTEnable.setDescription('This variable enables Bit Error Rate Testing(BERT).')
lineBERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("allZeros", 1), ("allOnes", 2), ("alternateONeZero", 3), ("doubleOneZero", 4), ("userOneWords", 5), ("userTwoWords", 6), ("userThreeWords", 7), ("userFourWords", 8), ("fifteenBit", 9), ("twentyBit", 10), ("twentyBitQRSS", 11), ("twentythreeBit", 12))).clone('allZeros')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBERTPattern.setStatus('current')
if mibBuilder.loadTexts: lineBERTPattern.setDescription('This variable determines BERT pattern to transmit ')
lineBERTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("passed", 2))).clone('failed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lineBERTResult.setStatus('current')
if mibBuilder.loadTexts: lineBERTResult.setDescription('This shows the result of the BERT.')
bERTResultClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2))).clone('noaction')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bERTResultClrButton.setStatus('current')
if mibBuilder.loadTexts: bERTResultClrButton.setDescription('This clears the result of the BERT.')
lineNumofValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineNumofValidEntries.setStatus('current')
if mibBuilder.loadTexts: lineNumofValidEntries.setDescription('The number of DS1 configuration entries (regardless of their current configuration) in the dsx1CnfGrpTable.')
dsx1CntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1), )
if mibBuilder.loadTexts: dsx1CntGrpTable.setStatus('current')
if mibBuilder.loadTexts: dsx1CntGrpTable.setDescription('The DS1 Counter table. This table contains statistics since the system was up or last re-initialization.')
dsx1CntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "cntLineNum"))
if mibBuilder.loadTexts: dsx1CntGrpEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1CntGrpEntry.setDescription('An entry in the DS1 counter table.')
cntLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cntLineNum.setStatus('current')
if mibBuilder.loadTexts: cntLineNum.setDescription('This object identifies the DS1/E1 interface. The value for this object must be same as the value of lineNum from dsx1CnfGrpTable.')
rcvLOSCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvLOSCount.setStatus('current')
if mibBuilder.loadTexts: rcvLOSCount.setDescription('The number of times the Loss of Signal was detected with or without integrating to LOS alarm.')
rcvOOFCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvOOFCount.setStatus('current')
if mibBuilder.loadTexts: rcvOOFCount.setDescription('The number of times the Out of Frame was detected with or without integrating to OOF alarm.')
rcvRAICount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvRAICount.setStatus('current')
if mibBuilder.loadTexts: rcvRAICount.setDescription('The number of times Yellow Alarms was detected with or without integrating to RAI alarm.')
rcvFECount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFECount.setStatus('current')
if mibBuilder.loadTexts: rcvFECount.setDescription('The number of Framing Pattern Errors encountered by a DS1 interface.')
counterClearButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: counterClearButton.setStatus('current')
if mibBuilder.loadTexts: counterClearButton.setDescription('This variable is used to clear all the counters.')
dsx1AlmCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1), )
if mibBuilder.loadTexts: dsx1AlmCnfGrpTable.setStatus('current')
if mibBuilder.loadTexts: dsx1AlmCnfGrpTable.setDescription('The DS1 interface alarm configuration table. ')
dsx1AlmCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "almCnfLineNum"))
if mibBuilder.loadTexts: dsx1AlmCnfGrpEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1AlmCnfGrpEntry.setDescription('An entry in the DS1 Alarm Configuration table.')
almCnfLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almCnfLineNum.setStatus('current')
if mibBuilder.loadTexts: almCnfLineNum.setDescription('This object identifies the DS1/E1 interface. The value for this object must be same as the value of lineNum from dsx1CnfGrpTable.')
redSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2))).clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redSeverity.setStatus('current')
if mibBuilder.loadTexts: redSeverity.setDescription('This variable is used to setup the severity of RED alarm. So when RED alarm is detected by the card, an alarm with appropriate severity status will be sent.')
rAISeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2))).clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rAISeverity.setStatus('current')
if mibBuilder.loadTexts: rAISeverity.setDescription('This variable is used to setup the severity of RAI alarm. So when LOS alarm is detected the card, an alarm with appropriate severity status will be sent.')
nEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nEAlarmUpCount.setStatus('current')
if mibBuilder.loadTexts: nEAlarmUpCount.setDescription('This parameter specifies the integration counter, the local alarms are LOS and LOF. Default value is 6 and update counter every 10 ms to reach the threshold set in threshold object. This is the up counter.')
nEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nEAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: nEAlarmDownCount.setDescription('This parameter specifies the integration counter, the Near-End alarms are LOS and LOF. Default value is 1 and update counter every 10 ms to reach 0. This is the down counter.')
nEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nEAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: nEAlarmThreshold.setDescription('The value set in this object determines the value to declare Near-End alarm. A count of 1500 gives 2.5 sec to declare LOS with an up count value of 6.')
fEAlarmUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEAlarmUpCount.setStatus('current')
if mibBuilder.loadTexts: fEAlarmUpCount.setDescription('This parameter specifies the integration counter, the Far-End alarms are AIS and YEL. Default value is 6 and update counter 10 ms to reach the threshold set in threshold object. This is the up counter.')
fEAlarmDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEAlarmDownCount.setStatus('current')
if mibBuilder.loadTexts: fEAlarmDownCount.setDescription('This parameter specifies the integration counter, the Far-End alarms are AIS and YEL. Default value is 1 and update counter every 10 ms to reach 0. This is the down counter.')
fEAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: fEAlarmThreshold.setDescription('The value set in this object determines the value to declare Far-End alarm. A count of 1500 gives 2.5 secs to declare LOS with an up count value of 6.')
statisticalAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("inhibit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statisticalAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: statisticalAlarmSeverity.setDescription('This variable is used to setup the severity of Statistical alarm. So when any statistical alarm is detected by the card, an alarm with appropriate severity status will be sent.')
lCV15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lCV15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: lCV15MinThreshold.setDescription('Code Violation - is the occurrence of a received CRC-6 code that is not identical to the corresponding locally. calculated code. The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
lCV24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(134)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lCV24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: lCV24HrThreshold.setDescription('Code Violation - is the occurence of a received CRC-6 code that is not identical to the corresponding locally. The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
lES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: lES15MinThreshold.setDescription('Errored Second - is any second with at least one code violation. The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
lES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(121)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: lES24HrThreshold.setDescription('Errored Second - is any second with at least one code violation. The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
lSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: lSES15MinThreshold.setDescription('Severely Errored Second - is any second with 15 or more code violations. The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
lSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: lSES24HrThreshold.setDescription('Severely Errored Second - is any second with 15 or more code violations. The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
cRC15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRC15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cRC15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cRC24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(134)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRC24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cRC24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
cRCES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cRCES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cRCES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(121)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cRCES24HrThreshold.setDescription('The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
cRCSES15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCSES15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: cRCSES15MinThreshold.setDescription('The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
cRCSES24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cRCSES24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: cRCSES24HrThreshold.setDescription('The value set in this object determines the value when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
sEFS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sEFS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: sEFS15MinThreshold.setDescription('Severely Errored Framing Second - is a count of one-second intervals containing one or more SEF events. The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
sEFS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sEFS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: sEFS24HrThreshold.setDescription('Severely Errored Framing Second - is a count of one-second intervals containing one or more SEF events. The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
aISS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aISS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: aISS15MinThreshold.setDescription('Alarm Indication Signal Second - is a count of one-second intervals containing one or more incoming AIS. The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
aISS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aISS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: aISS24HrThreshold.setDescription('Alarm Indication Signal Second - is a count of one-second intervals containing one or more incoming AIS. The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
uAS15MinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uAS15MinThreshold.setStatus('current')
if mibBuilder.loadTexts: uAS15MinThreshold.setDescription('Unavailable Second - is a count of seconds during which the DS1 Layer service is unavailable. The value set in this object determines the value which when exceeded in a 15 minute window causes a statistical alarm to be declared.')
uAS24HrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uAS24HrThreshold.setStatus('current')
if mibBuilder.loadTexts: uAS24HrThreshold.setDescription('Unavailable Second - is a count of seconds during which the DS1 Layer service is unavailable. The value set in this object determines the value which when exceeded in a sliding 24 hour window causes a statistical alarm to be declared. The threshold is checked every 15 minutes for the preceding 24 hour interval')
dsx1AlmGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dsx1AlmGrpTable.setStatus('current')
if mibBuilder.loadTexts: dsx1AlmGrpTable.setDescription('The DS1 interface alarm configuration table.')
dsx1AlmGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-DSX1-MIB", "almLineNum"))
if mibBuilder.loadTexts: dsx1AlmGrpEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1AlmGrpEntry.setDescription('An entry in the DS1 Alarm table. Each entry represents the current, 15 minute and 24 Hour bucket intervals for different performance parameters.')
almLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: almLineNum.setStatus('current')
if mibBuilder.loadTexts: almLineNum.setDescription('This object identifies the DS1/E1 interface. The value for this object must be same as the value of lineNum from dsx1CnfGrpTable.')
lineAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineAlarmState.setStatus('current')
if mibBuilder.loadTexts: lineAlarmState.setDescription('This variable is a bitmap of the DSX1 Line Alarms. A value of zero indicates no alarms. Itemized below are the individual bits: BitPosition Alarm ----------- ----- 0 Receiving RAI 1 Transmitting RAI 2 Receiving AIS 3 Transmitting AIS 4 Receiving OOF 5 Receiving LOS 6 Near End Local Loopback in effect 7 Near End Remote Loopback in effect 8 Near End Remote Payload Loopback 9 Receiving CRC MF OOF (E1) 10 Receiving Sig MF OOF (E1) 11 Receiving MF RAI (E1) 12 Receiving MF AIS (E1) 13 BERT in effect 14 Far End Remote Loopback in effect 15 Detected Near End Remote Loopback in effect')
lineStatisticalAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineStatisticalAlarmState.setStatus('current')
if mibBuilder.loadTexts: lineStatisticalAlarmState.setDescription('This variable is a bitmap of the DSX1 Line Statistical Alarms. A value of zero indicates no alarms. Itemized below are the individual alarm bits: BitPosition Alarm ----------- ----- 0 LCV 15 minute threshold exceeded 1 LCV 24 hour threshold exceeded 2 LES 15 minute threshold exceeded 3 LES 24 hour threshold exceeded 4 LSES 15 minute threshold exceeded 5 LSES 24 hour threshold exceeded 6 CRC 15 minute threshold exceeded 7 CRC 24 hour threshold exceeded 8 CRCES 15 minute threshold exceeded 9 CRCES 24 hour threshold exceeded 10 CRCSES 15 minute threshold exceeded 11 CRCSES 24 hour threshold exceeded 12 SEFS 15 minute threshold exceeded 13 SEFS 24 hour threshold exceeded 14 AISS 15 minute threshold exceeded 15 AISS 24 hour threshold exceeded 16 UAS 15 minute threshold exceeded 17 UAS 24 hour threshold exceeded.')
lCVCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCVCurrent.setStatus('current')
if mibBuilder.loadTexts: lCVCurrent.setDescription('This counter counts the number of Line code violations encountered by the interface.')
lCV15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCV15MinBucket.setStatus('current')
if mibBuilder.loadTexts: lCV15MinBucket.setDescription('The counter associated with the number of Line code violations in the last 15 minute period encountered by the interface.')
lCV24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lCV24HrBucket.setStatus('current')
if mibBuilder.loadTexts: lCV24HrBucket.setDescription('The counter associated with the number of Line code violations in the last 24 hour period encountered by the interface.')
lESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lESCurrent.setStatus('current')
if mibBuilder.loadTexts: lESCurrent.setDescription('This counter counts the number of Line code violations Errored Seconds encountered by the interface.')
lES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: lES15MinBucket.setDescription('This counter counts the number of Line code violations Errored Seconds in the last 15 minutes encountered by the interface.')
lES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: lES24HrBucket.setDescription('This counter counts the number of Line code violations Errored Seconds in the last 24 hours encountered by the interface.')
lSESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSESCurrent.setStatus('current')
if mibBuilder.loadTexts: lSESCurrent.setDescription('This counter counts the number of Line code violations Severely Errored Seconds encountered by the interface.')
lSES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: lSES15MinBucket.setDescription('This counter counts the number of LCV Severely Errored Seconds in the last 15 minutes encountered by the interface.')
lSES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lSES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: lSES24HrBucket.setDescription('This counter counts the number of LCV Severely Errored Seconds in the last 24 hours encountered by the interface.')
cRCCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCCurrent.setStatus('current')
if mibBuilder.loadTexts: cRCCurrent.setDescription('This counter counts the number of P Bit code violations encountered by the interface.')
cRC15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRC15MinBucket.setStatus('current')
if mibBuilder.loadTexts: cRC15MinBucket.setDescription('This counter counts the number of P Bit code violations in the last 15 minutes encountered by the interface.')
cRC24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRC24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cRC24HrBucket.setDescription('This counter counts the number of P Bit code violations in the last 24 hours encountered by the interface.')
cRCESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCESCurrent.setStatus('current')
if mibBuilder.loadTexts: cRCESCurrent.setDescription('This counter counts the number of PCV Errored Seconds encountered by the interface.')
cRCES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: cRCES15MinBucket.setDescription('This counter counts the number of PCV Errored Seconds in the last 15 minutes encountered by the interface.')
cRCES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cRCES24HrBucket.setDescription('This counter counts the number of PCV Errored Seconds in the last 24 hours encountered by the interface.')
cRCSESCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCSESCurrent.setStatus('current')
if mibBuilder.loadTexts: cRCSESCurrent.setDescription('This counter counts the number of P Bit code violations Severely Errored Seconds encountered by the interface.')
cRCSES15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCSES15MinBucket.setStatus('current')
if mibBuilder.loadTexts: cRCSES15MinBucket.setDescription('This counter counts the number of PCV Severely Errored Seconds in the last 15 minutes encountered by the interface.')
cRCSES24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cRCSES24HrBucket.setStatus('current')
if mibBuilder.loadTexts: cRCSES24HrBucket.setDescription('This counter counts the number of PCV Severely Errored Seconds in the last 24 hours encountered by the interface.')
sEFSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEFSCurrent.setStatus('current')
if mibBuilder.loadTexts: sEFSCurrent.setDescription('This counter counts the number of Severely Errored Framing Seconds encountered by the interface.')
sEFS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEFS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: sEFS15MinBucket.setDescription('This counter counts the number of Severely Errored Framing Seconds in the last 15 minutes encountered by the interface.')
sEFS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sEFS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: sEFS24HrBucket.setDescription('This counter counts the number of Severely Errored Framing Seconds in the last 24 hours encountered by the interface.')
aISSCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aISSCurrent.setStatus('current')
if mibBuilder.loadTexts: aISSCurrent.setDescription('This counter counts the number of AIS Severely Errored Seconds encountered by the interface.')
aISS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aISS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: aISS15MinBucket.setDescription('This counter counts the number of AIS Severely Errored Seconds in the last 15 minutes encountered by the interface.')
aISS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aISS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: aISS24HrBucket.setDescription('This counter counts the number of AIS Severely Errored Seconds in the last 24 hours encountered by the interface.')
uASCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uASCurrent.setStatus('current')
if mibBuilder.loadTexts: uASCurrent.setDescription('This counter counts the number of Unavailable Seconds encountered by the interface.')
uAS15MinBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uAS15MinBucket.setStatus('current')
if mibBuilder.loadTexts: uAS15MinBucket.setDescription('This counter counts the number of Unavailable Seconds in the last 15 minutes encountered by the interface.')
uAS24HrBucket = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uAS24HrBucket.setStatus('current')
if mibBuilder.loadTexts: uAS24HrBucket.setDescription('This counter counts the number of Unavailable Seconds in the last 24 hours encountered by the interface.')
percentEFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: percentEFS.setStatus('current')
if mibBuilder.loadTexts: percentEFS.setDescription('This counter counts the %LCV Error Free Seconds.')
alarmClrButton = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 4, 3, 1, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noaction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmClrButton.setStatus('current')
if mibBuilder.loadTexts: alarmClrButton.setDescription('This variable is used to clear all the alarms for the line. 1 = No action 2 = Clear alarm ')
cmDsx1MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 58, 2))
cmDsx1MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1))
cmDsx1MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 2))
cmDsx1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 2, 1)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "cmDsx1GeneralGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1ConfGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1CountGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1AlarmConfGroup"), ("CISCO-MGX82XX-DSX1-MIB", "cmDsx1AlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1Compliance = cmDsx1Compliance.setStatus('current')
if mibBuilder.loadTexts: cmDsx1Compliance.setDescription('The compliance statement for objects related to DS1/E1 mib.')
cmDsx1GeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 1)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "lineNumofValidEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1GeneralGroup = cmDsx1GeneralGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx1GeneralGroup.setDescription('The collection of objects used for DS1/E1 interfaces.')
cmDsx1ConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 2)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "lineNum"), ("CISCO-MGX82XX-DSX1-MIB", "lineConnectorType"), ("CISCO-MGX82XX-DSX1-MIB", "lineEnable"), ("CISCO-MGX82XX-DSX1-MIB", "lineType"), ("CISCO-MGX82XX-DSX1-MIB", "lineCoding"), ("CISCO-MGX82XX-DSX1-MIB", "lineLength"), ("CISCO-MGX82XX-DSX1-MIB", "lineXmtClockSource"), ("CISCO-MGX82XX-DSX1-MIB", "lineLoopbackCommand"), ("CISCO-MGX82XX-DSX1-MIB", "lineSendCode"), ("CISCO-MGX82XX-DSX1-MIB", "lineLoopbackCodeDetection"), ("CISCO-MGX82XX-DSX1-MIB", "lineUsedTimeslotsBitMap"), ("CISCO-MGX82XX-DSX1-MIB", "lineBERTEnable"), ("CISCO-MGX82XX-DSX1-MIB", "lineBERTPattern"), ("CISCO-MGX82XX-DSX1-MIB", "lineBERTResult"), ("CISCO-MGX82XX-DSX1-MIB", "bERTResultClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1ConfGroup = cmDsx1ConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx1ConfGroup.setDescription('The collection of objects used for DS1/E1 interface configuration.')
cmDsx1CountGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 3)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "cntLineNum"), ("CISCO-MGX82XX-DSX1-MIB", "rcvLOSCount"), ("CISCO-MGX82XX-DSX1-MIB", "rcvOOFCount"), ("CISCO-MGX82XX-DSX1-MIB", "rcvRAICount"), ("CISCO-MGX82XX-DSX1-MIB", "rcvFECount"), ("CISCO-MGX82XX-DSX1-MIB", "counterClearButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1CountGroup = cmDsx1CountGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx1CountGroup.setDescription('The collection of objects related to DS1/E1 statistics.')
cmDsx1AlarmConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 4)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "almCnfLineNum"), ("CISCO-MGX82XX-DSX1-MIB", "redSeverity"), ("CISCO-MGX82XX-DSX1-MIB", "rAISeverity"), ("CISCO-MGX82XX-DSX1-MIB", "nEAlarmUpCount"), ("CISCO-MGX82XX-DSX1-MIB", "nEAlarmDownCount"), ("CISCO-MGX82XX-DSX1-MIB", "nEAlarmThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "fEAlarmUpCount"), ("CISCO-MGX82XX-DSX1-MIB", "fEAlarmDownCount"), ("CISCO-MGX82XX-DSX1-MIB", "fEAlarmThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "statisticalAlarmSeverity"), ("CISCO-MGX82XX-DSX1-MIB", "lCV15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lCV24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lSES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "lSES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRC15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRC24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "aISS15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "aISS24HrThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "uAS15MinThreshold"), ("CISCO-MGX82XX-DSX1-MIB", "uAS24HrThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1AlarmConfGroup = cmDsx1AlarmConfGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx1AlarmConfGroup.setDescription('The collection of objects used for DS1/E1 Alarm threshold configuration.')
cmDsx1AlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 58, 2, 1, 5)).setObjects(("CISCO-MGX82XX-DSX1-MIB", "almLineNum"), ("CISCO-MGX82XX-DSX1-MIB", "lineAlarmState"), ("CISCO-MGX82XX-DSX1-MIB", "lineStatisticalAlarmState"), ("CISCO-MGX82XX-DSX1-MIB", "lCVCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "lCV15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lCV24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "lES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lSESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "lSES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "lSES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "cRC15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRC24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSESCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "cRCSES24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "sEFSCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "sEFS24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "aISSCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "aISS15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "aISS24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "uASCurrent"), ("CISCO-MGX82XX-DSX1-MIB", "uAS15MinBucket"), ("CISCO-MGX82XX-DSX1-MIB", "uAS24HrBucket"), ("CISCO-MGX82XX-DSX1-MIB", "percentEFS"), ("CISCO-MGX82XX-DSX1-MIB", "alarmClrButton"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmDsx1AlarmGroup = cmDsx1AlarmGroup.setStatus('current')
if mibBuilder.loadTexts: cmDsx1AlarmGroup.setDescription('The collection of objects used for DS1/E1 Alarm configuration.')
mibBuilder.exportSymbols("CISCO-MGX82XX-DSX1-MIB", aISS15MinThreshold=aISS15MinThreshold, lSESCurrent=lSESCurrent, uAS24HrBucket=uAS24HrBucket, percentEFS=percentEFS, dsx1CnfGrp=dsx1CnfGrp, cmDsx1CountGroup=cmDsx1CountGroup, cRC24HrThreshold=cRC24HrThreshold, aISSCurrent=aISSCurrent, lineLength=lineLength, dsx1AlmGrpTable=dsx1AlmGrpTable, lES15MinBucket=lES15MinBucket, lSES15MinBucket=lSES15MinBucket, cRCSESCurrent=cRCSESCurrent, cmDsx1MIBConformance=cmDsx1MIBConformance, counterClearButton=counterClearButton, cRCES15MinThreshold=cRCES15MinThreshold, rcvLOSCount=rcvLOSCount, lineUsedTimeslotsBitMap=lineUsedTimeslotsBitMap, dsx1AlmCnfGrp=dsx1AlmCnfGrp, alarmClrButton=alarmClrButton, uAS15MinBucket=uAS15MinBucket, lESCurrent=lESCurrent, cRCCurrent=cRCCurrent, lSES15MinThreshold=lSES15MinThreshold, nEAlarmDownCount=nEAlarmDownCount, sEFSCurrent=sEFSCurrent, lSES24HrBucket=lSES24HrBucket, cmDsx1AlarmConfGroup=cmDsx1AlarmConfGroup, dsx1CntGrpEntry=dsx1CntGrpEntry, lCV15MinThreshold=lCV15MinThreshold, lCV24HrThreshold=lCV24HrThreshold, lineBERTResult=lineBERTResult, lES24HrBucket=lES24HrBucket, cRCSES15MinThreshold=cRCSES15MinThreshold, fEAlarmUpCount=fEAlarmUpCount, dsx1AlmGrp=dsx1AlmGrp, almCnfLineNum=almCnfLineNum, aISS24HrBucket=aISS24HrBucket, fEAlarmDownCount=fEAlarmDownCount, lineLoopbackCodeDetection=lineLoopbackCodeDetection, nEAlarmUpCount=nEAlarmUpCount, nEAlarmThreshold=nEAlarmThreshold, lineSendCode=lineSendCode, statisticalAlarmSeverity=statisticalAlarmSeverity, fEAlarmThreshold=fEAlarmThreshold, lSES24HrThreshold=lSES24HrThreshold, cmDsx1GeneralGroup=cmDsx1GeneralGroup, aISS15MinBucket=aISS15MinBucket, rcvFECount=rcvFECount, dsx1CnfGrpTable=dsx1CnfGrpTable, lineConnectorType=lineConnectorType, dsx1AlmCnfGrpEntry=dsx1AlmCnfGrpEntry, sEFS24HrBucket=sEFS24HrBucket, cRCES15MinBucket=cRCES15MinBucket, dsx1CntGrp=dsx1CntGrp, lES24HrThreshold=lES24HrThreshold, cRCES24HrThreshold=cRCES24HrThreshold, sEFS15MinThreshold=sEFS15MinThreshold, lineBERTPattern=lineBERTPattern, redSeverity=redSeverity, lineNumofValidEntries=lineNumofValidEntries, lCV15MinBucket=lCV15MinBucket, uAS15MinThreshold=uAS15MinThreshold, lineXmtClockSource=lineXmtClockSource, sEFS24HrThreshold=sEFS24HrThreshold, cRC15MinBucket=cRC15MinBucket, lineAlarmState=lineAlarmState, cntLineNum=cntLineNum, cRCSES24HrThreshold=cRCSES24HrThreshold, dsx1AlmCnfGrpTable=dsx1AlmCnfGrpTable, cRCES24HrBucket=cRCES24HrBucket, rAISeverity=rAISeverity, rcvRAICount=rcvRAICount, bERTResultClrButton=bERTResultClrButton, cmDsx1ConfGroup=cmDsx1ConfGroup, ciscoMgx82xxDsx1MIB=ciscoMgx82xxDsx1MIB, lineLoopbackCommand=lineLoopbackCommand, cmDsx1Compliance=cmDsx1Compliance, almLineNum=almLineNum, cRC24HrBucket=cRC24HrBucket, lES15MinThreshold=lES15MinThreshold, PYSNMP_MODULE_ID=ciscoMgx82xxDsx1MIB, dsx1AlmGrpEntry=dsx1AlmGrpEntry, cRCSES15MinBucket=cRCSES15MinBucket, cmDsx1MIBCompliances=cmDsx1MIBCompliances, cRCESCurrent=cRCESCurrent, lineType=lineType, lineNum=lineNum, lCV24HrBucket=lCV24HrBucket, uASCurrent=uASCurrent, lineStatisticalAlarmState=lineStatisticalAlarmState, lineBERTEnable=lineBERTEnable, uAS24HrThreshold=uAS24HrThreshold, dsx1CntGrpTable=dsx1CntGrpTable, lCVCurrent=lCVCurrent, cmDsx1AlarmGroup=cmDsx1AlarmGroup, aISS24HrThreshold=aISS24HrThreshold, cmDsx1MIBGroups=cmDsx1MIBGroups, cRC15MinThreshold=cRC15MinThreshold, dsx1CnfGrpEntry=dsx1CnfGrpEntry, lineEnable=lineEnable, rcvOOFCount=rcvOOFCount, sEFS15MinBucket=sEFS15MinBucket, lineCoding=lineCoding, cRCSES24HrBucket=cRCSES24HrBucket)
