#
# PySNMP MIB module NLS-BBNSTATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NLS-BBNSTATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:21:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
bbnState, = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "bbnState")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, Gauge32, Counter64, ModuleIdentity, ObjectIdentity, Integer32, Unsigned32, NotificationType, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Gauge32", "Counter64", "ModuleIdentity", "ObjectIdentity", "Integer32", "Unsigned32", "NotificationType", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
unitAdministrativeState = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2), ("shuttingDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitAdministrativeState.setReference(' -- ')
if mibBuilder.loadTexts: unitAdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: unitAdministrativeState.setDescription('This state should be always supported. The current Adminsitrative state of the unit is defined in ISO/IEC 10164-2.')
unitOperationalState = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOperationalState.setReference(' -- ')
if mibBuilder.loadTexts: unitOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: unitOperationalState.setDescription('The current Operational state of the unit as defined in ISO/IEC 10164-2')
unitUsageState = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("active", 2), ("busy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitUsageState.setReference(' -- ')
if mibBuilder.loadTexts: unitUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: unitUsageState.setDescription('The current Usage state of the unit as defined in ISO/IEC 10164-2')
unitProceduralStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("initializationRequired", 1), ("notInitialized", 2), ("initializing", 3), ("reporting", 4), ("terminating", 5), ("ready", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitProceduralStatus.setReference(' -- ')
if mibBuilder.loadTexts: unitProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unitProceduralStatus.setDescription('This state should be always supported. This object controls the Procedural status as defined in ISO/IEC 10164-2 and state-machine')
unitAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6), ("underRepair", 7), ("alarmOutstanding", 8), ("idle", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitAlarmStatus.setReference(' -- ')
if mibBuilder.loadTexts: unitAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unitAlarmStatus.setDescription('This state should be always supported. This object defines the Alarm status as defined in ISO/IEC 10164-2 and state-machine')
unitAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inTest", 1), ("failed", 2), ("powerOff", 3), ("offLine", 4), ("offDuty", 5), ("dependency", 6), ("degraded", 7), ("notInstalled", 8), ("logFull", 9), ("available", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitAvailabilityStatus.setReference(' -- ')
if mibBuilder.loadTexts: unitAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unitAvailabilityStatus.setDescription('This object controls the Availability status as defined in ISO/IEC 10164-2 and state-machine')
unitControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32767, 1, 2, 3, 4))).clone(namedValues=NamedValues(("subjectToTest", 32767), ("partLocked", 1), ("reservedToTest", 2), ("suspended", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitControlStatus.setReference(' -- ')
if mibBuilder.loadTexts: unitControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unitControlStatus.setDescription('This object controls the Control status as defined in ISO/IEC 10164-2 and state-machine')
unitStandbyStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hotStandby", 1), ("coldStandby", 2), ("providingService", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitStandbyStatus.setReference(' -- ')
if mibBuilder.loadTexts: unitStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unitStandbyStatus.setDescription('This object controls the Standby status as defined in ISO/IEC 10164-2 and state-machine')
unitUnknownStatus = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitUnknownStatus.setReference(' -- ')
if mibBuilder.loadTexts: unitUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: unitUnknownStatus.setDescription('This object defines the unknown status as defined in ISO/IEC 10164-2 and state-machine')
mibBuilder.exportSymbols("NLS-BBNSTATE-MIB", unitAdministrativeState=unitAdministrativeState, unitStandbyStatus=unitStandbyStatus, unitProceduralStatus=unitProceduralStatus, unitUnknownStatus=unitUnknownStatus, unitOperationalState=unitOperationalState, unitAlarmStatus=unitAlarmStatus, unitAvailabilityStatus=unitAvailabilityStatus, unitUsageState=unitUsageState, unitControlStatus=unitControlStatus)
