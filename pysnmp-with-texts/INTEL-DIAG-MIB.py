#
# PySNMP MIB module INTEL-DIAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-DIAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, MibIdentifier, ModuleIdentity, IpAddress, iso, NotificationType, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "MibIdentifier", "ModuleIdentity", "IpAddress", "iso", "NotificationType", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
diag = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 4))
diagList = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 4, 1))
diagTest = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 4, 2))
diagAutodetect = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 4, 3))
diagListNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagListNumberOfEntries.setStatus('mandatory')
if mibBuilder.loadTexts: diagListNumberOfEntries.setDescription('Number of entries in Diagnostics Table (Set value to 0 to delete all entries)')
diagListNumberOfErrorEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListNumberOfErrorEntries.setStatus('mandatory')
if mibBuilder.loadTexts: diagListNumberOfErrorEntries.setDescription('Number of errors in Diagnostics Table')
diagListLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListLastUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: diagListLastUpdateTime.setDescription('Time of last insertion in Diagnostics Table in timeticks since boot (reinserting an existing entry is not considered an update).')
diagListTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4), )
if mibBuilder.loadTexts: diagListTable.setStatus('mandatory')
if mibBuilder.loadTexts: diagListTable.setDescription('Diagnostics Table')
diagListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1), ).setIndexNames((0, "INTEL-DIAG-MIB", "diagListIndex"))
if mibBuilder.loadTexts: diagListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diagListEntry.setDescription('')
diagListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: diagListIndex.setDescription('Position in table.')
diagListLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 96))).clone(namedValues=NamedValues(("warning", 32), ("error", 64), ("fatalError", 96)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListLevel.setStatus('mandatory')
if mibBuilder.loadTexts: diagListLevel.setDescription('Error level.')
diagListCode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListCode.setStatus('mandatory')
if mibBuilder.loadTexts: diagListCode.setDescription('Number that uniquely identifies a specific situation. Set code to zero to delete the entry.')
diagListIfindex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListIfindex.setStatus('mandatory')
if mibBuilder.loadTexts: diagListIfindex.setDescription('Interface index.')
diagListTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: diagListTimeStamp.setDescription('Time of (re)insertion in timeticks since boot.')
diagListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(240, 240)).setFixedLength(240)).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListDescription.setStatus('mandatory')
if mibBuilder.loadTexts: diagListDescription.setDescription('Description of the problem.')
diagListAdvice = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(240, 240)).setFixedLength(240)).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListAdvice.setStatus('mandatory')
if mibBuilder.loadTexts: diagListAdvice.setDescription('Advice')
diagListAutoFixAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagListAutoFixAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: diagListAutoFixAvailable.setDescription('no: This entry cannot be automatically fixed. yes: This entry can be automatically fixed.')
diagListAutoFixState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagListAutoFixState.setStatus('mandatory')
if mibBuilder.loadTexts: diagListAutoFixState.setDescription('When reading 0: State = idle(1), autoFixInProgress(3) When writing 0: State = startAutoFix(2) 1: Action 2-5: diagListCode (bigendian) 6-9: diagListIfindex (bigendian) diagListCode and diagListIfindex are used to verify that the correct entry is being fixed.')
diagTestTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 4, 2, 1), )
if mibBuilder.loadTexts: diagTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: diagTestTable.setDescription('')
diagTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 4, 2, 1, 1), ).setIndexNames((0, "INTEL-DIAG-MIB", "diagTestType"))
if mibBuilder.loadTexts: diagTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diagTestEntry.setDescription('')
diagTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagTestType.setStatus('mandatory')
if mibBuilder.loadTexts: diagTestType.setDescription('Test type')
diagTestDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagTestDescription.setStatus('mandatory')
if mibBuilder.loadTexts: diagTestDescription.setDescription('Test description')
diagTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("test", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: diagTestStatus.setDescription('Test status. Begin a test by setting the value to test(2) and then wait for it to go from testing(3) to ready(1).')
diagAutodetectTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1), )
if mibBuilder.loadTexts: diagAutodetectTable.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectTable.setDescription('Autodetection table')
diagAutodetectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1), ).setIndexNames((0, "INTEL-DIAG-MIB", "diagAutodetectType"), (0, "INTEL-DIAG-MIB", "diagAutodetectIndex1"), (0, "INTEL-DIAG-MIB", "diagAutodetectIndex2"), (0, "INTEL-DIAG-MIB", "diagAutodetectIndex3"))
if mibBuilder.loadTexts: diagAutodetectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectEntry.setDescription('')
diagAutodetectType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectType.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectType.setDescription('A number that identifies the group of parameters being autodetected. Res2 is the concatenation of Res2a and Res2b. Possible value are 1: IPX net numbers and frame types on LAN. index = 1.plugno.0.0 result is in res2 with 5 bytes for each frame type in the form 0: protocol (1=TYPE, 2=802.2, 4=SNAP and 5=8023) 1-4: network number So the length of res2 is 5, 10, 15 or 20 depending on the number of frame types on the LAN. The best candidate is the first. 2: ISDN Switch connection. index = 2.plugno.0.0 result is in res1 res1 is 1: connection to switch res1 is 0: no connection to switch plugno=plug number 3: ISDN Local Number Test 4: ISDN Remote Number Test 5: ISDN Switch Type Test 6: ISDN SPID Detect 7: ISDN SPID Test 8: Frame Relay DLCMI and DLCI detection')
diagAutodetectIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectIndex1.setDescription('First index for autodetect situation (typically interface index).')
diagAutodetectIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectIndex2.setDescription('Second index for autodetect situation.')
diagAutodetectIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectIndex3.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectIndex3.setDescription('Third index for autodetect situation.')
diagAutodetectState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("startTest", 2), ("stopTest", 3), ("testSucceeded", 4), ("testFailed", 5), ("testInProgress", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagAutodetectState.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectState.setDescription('Autodetect state ready(1): Test has not been perfomed. startTest(2): Start test stopTest(3): Stop test (only supported for some types) testSucceeded(4): Test succeeded and the result can be found in Res1 and Res2. testFailed(5): Test failed testInProgress(6):Test is in progress. diagAutodetectDuration contains the approximate duration in seconds Typical state sequences after setting state to startTest(1) ->testInProgress(5)->testFailed(4) ->testInProgress(5)->testSucceeded(3)')
diagAutodetectDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectDuration.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectDuration.setDescription('Average duration for autodetection (s). 0 means unknown.')
diagAutodetectRes1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectRes1.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectRes1.setDescription('Result of autodetection. Res1 contains valid information if the value of diagAutodetectState is testSucceeded(3).')
diagAutodetectRes2a = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectRes2a.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectRes2a.setDescription('Result of autodetection. Res2 contains valid information if the value of diagAutodetectState is testSucceeded(3).')
diagAutodetectRes2b = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagAutodetectRes2b.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectRes2b.setDescription('If the result takes up more than 255 bytes of information the rest is put in this Res2b.')
diagAutodetectPreInput = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 4, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagAutodetectPreInput.setStatus('mandatory')
if mibBuilder.loadTexts: diagAutodetectPreInput.setDescription('Input for test which is set immediately before settting diagAutodetectState to startTest(1).')
mibBuilder.exportSymbols("INTEL-DIAG-MIB", diagTestTable=diagTestTable, diagAutodetectRes1=diagAutodetectRes1, diagList=diagList, diagListEntry=diagListEntry, diagAutodetectIndex1=diagAutodetectIndex1, diagAutodetectEntry=diagAutodetectEntry, diagAutodetectPreInput=diagAutodetectPreInput, diagTestEntry=diagTestEntry, diagListTable=diagListTable, diagListLevel=diagListLevel, diagListAdvice=diagListAdvice, diagAutodetectTable=diagAutodetectTable, diagAutodetectType=diagAutodetectType, diagAutodetectIndex3=diagAutodetectIndex3, diagListNumberOfEntries=diagListNumberOfEntries, diagListAutoFixState=diagListAutoFixState, diagAutodetectRes2a=diagAutodetectRes2a, diagListIndex=diagListIndex, diagListIfindex=diagListIfindex, diagListLastUpdateTime=diagListLastUpdateTime, diagAutodetectState=diagAutodetectState, diagTest=diagTest, diag=diag, diagTestDescription=diagTestDescription, diagListAutoFixAvailable=diagListAutoFixAvailable, diagTestStatus=diagTestStatus, diagListNumberOfErrorEntries=diagListNumberOfErrorEntries, diagListCode=diagListCode, diagAutodetectDuration=diagAutodetectDuration, diagAutodetect=diagAutodetect, diagTestType=diagTestType, diagAutodetectIndex2=diagAutodetectIndex2, diagListDescription=diagListDescription, diagListTimeStamp=diagListTimeStamp, diagAutodetectRes2b=diagAutodetectRes2b)
