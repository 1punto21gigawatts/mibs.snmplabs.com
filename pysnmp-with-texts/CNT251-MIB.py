#
# PySNMP MIB module CNT251-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CNT251-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:25:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
cnt2CfgSystemProbe, = mibBuilder.importSymbols("CNT25-MIB", "cnt2CfgSystemProbe")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Counter32, Gauge32, ObjectIdentity, IpAddress, TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, Counter64, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Counter32", "Gauge32", "ObjectIdentity", "IpAddress", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "Counter64", "Integer32", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cnt2SysChassisType = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("slot-2", 2), ("slot-6", 6), ("slot-12", 12), ("osg", 13), ("usg", 14), ("usd6", 15), ("usd12", 16), ("tm", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysChassisType.setDescription('The chassis type for this network node.')
cnt2SysZachCardType = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-present", 1), ("rs232", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysZachCardType.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysZachCardType.setDescription('TBD.')
cnt2SysHmbFirmwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysHmbFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysHmbFirmwareRevision.setDescription('The Hardware Monitor Board (HMB) firmware revision level.')
cnt2SysScnrcVersion = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysScnrcVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysScnrcVersion.setDescription('The version of the Lattice chip set on the HMB.')
cnt2SysDatPresent = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysDatPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysDatPresent.setDescription('Indicates whether this node contains a tape drive.')
cnt2SysCdRomPresent = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCdRomPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCdRomPresent.setDescription('Indicates whether this node contains a CD-ROM drive.')
cnt2SysProbeDateTime = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysProbeDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysProbeDateTime.setDescription('The date and time the system probe file was built/modified. It is a string in the form mm/dd/yy hh:mm:ss local time. hh is expressed as 00-23.')
cnt2SysSlotCount = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysSlotCount.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysSlotCount.setDescription('The number of available slots on this network node of which application processors or i/o processors can occupy.')
cnt2SysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 9), )
if mibBuilder.loadTexts: cnt2SysPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysPowerSupplyTable.setDescription('A list of entries ...')
cnt2SysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 9, 1), ).setIndexNames((0, "CNT251-MIB", "cnt2SysPowerSupplyIndex"))
if mibBuilder.loadTexts: cnt2SysPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysPowerSupplyEntry.setDescription('An individual power supply entry.')
cnt2SysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysPowerSupplyIndex.setDescription('The relative index for this power supply.')
cnt2SysPowerSupplyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysPowerSupplyPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysPowerSupplyPresent.setDescription('An indication if a power supply is in this network node.')
cnt2SysFanTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 10), )
if mibBuilder.loadTexts: cnt2SysFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysFanTable.setDescription('A list of entries ...')
cnt2SysFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 10, 1), ).setIndexNames((0, "CNT251-MIB", "cnt2SysFanIndex"))
if mibBuilder.loadTexts: cnt2SysFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysFanEntry.setDescription('An individual power supply fan entry.')
cnt2SysFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysFanIndex.setDescription('The relative index for this power supply fan.')
cnt2SysFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysFanPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysFanPresent.setDescription('An indication if a power supply fan is operational in this network node.')
cnt2SysAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11), )
if mibBuilder.loadTexts: cnt2SysAdapterTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterTable.setDescription('A list of entries ...')
cnt2SysAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1), ).setIndexNames((0, "CNT251-MIB", "cnt2SysAdapterIndex"))
if mibBuilder.loadTexts: cnt2SysAdapterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterEntry.setDescription('An individual adapter entry.')
cnt2SysAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterIndex.setDescription('The relative index for this adapter.')
cnt2SysAdapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("absent", 2), ("sparc", 3), ("escon", 4), ("ppc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterType.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterType.setDescription('the type of adapter in this slot.')
cnt2SysAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("absent", 1), ("unknown", 2), ("zsp1", 3), ("zen1", 4), ("zap1", 5), ("zsp2", 6), ("zen2", 7), ("zap2", 8), ("zen3", 9), ("usg1", 10), ("usg2", 11), ("zap3", 12), ("zap4", 13), ("zen4", 14), ("o1x1", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterName.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterName.setDescription('the name of the adapter in this slot.')
cnt2SysAdapterPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterPartNumber.setDescription('The part number of the adapter in this slot.')
cnt2SysAdapterSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterSerialNumber.setDescription('The serial number of the adapter in this slot.')
cnt2SysAdapterHostId = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterHostId.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterHostId.setDescription('Any host identifier assigned by the operating system vendor. For example, Solaris uses a host identifier.')
cnt2SysAdapterBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterBoardRevision.setDescription('The board revision of the adapter in this slot.')
cnt2SysAdapterFirmwareMajorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterFirmwareMajorRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterFirmwareMajorRevision.setDescription('The major revision of the firmware on the adapter in this slot.')
cnt2SysAdapterFirmwareMinorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterFirmwareMinorRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterFirmwareMinorRevision.setDescription('The minor revision of the firmware on the adapter in this slot.')
cnt2SysAdapterHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterHostName.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterHostName.setDescription('The node name of the adapter in this slot.')
cnt2SysAdapterOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterOsName.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterOsName.setDescription('The operating system name running on the adapter in this slot.')
cnt2SysAdapterOsMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterOsMajorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterOsMajorVersion.setDescription('The operating system major version running on the adapter in this slot.')
cnt2SysAdapterOsMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterOsMinorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterOsMinorVersion.setDescription('The operating system minor version running on the adapter in this slot.')
cnt2SysAdapterServiceMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysAdapterServiceMonitorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysAdapterServiceMonitorStatus.setDescription('Indicates the status of the Service Monitor software for the adapter in this slot.')
cnt2SysBusTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 12), )
if mibBuilder.loadTexts: cnt2SysBusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysBusTable.setDescription('A list of entries ...')
cnt2SysBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 12, 1), ).setIndexNames((0, "CNT251-MIB", "cnt2SysBusAdapterIndex"), (0, "CNT251-MIB", "cnt2SysBusIndex"))
if mibBuilder.loadTexts: cnt2SysBusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysBusEntry.setDescription('An individual bus entry.')
cnt2SysBusAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysBusAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysBusAdapterIndex.setDescription('The same as cnt2SysAdapterIndex: the relative index for this adapter.')
cnt2SysBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysBusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysBusIndex.setDescription('The relative index for a bus on the adapter in this slot.')
cnt2SysBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("sbus", 2), ("pci", 3), ("vme", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysBusType.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysBusType.setDescription('A type of bus on the adapter in this slot.')
cnt2SysCardTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13), )
if mibBuilder.loadTexts: cnt2SysCardTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardTable.setDescription('A list of entries ...')
cnt2SysCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1), ).setIndexNames((0, "CNT251-MIB", "cnt2SysCardAdapterIndex"), (0, "CNT251-MIB", "cnt2SysCardBusIndex"), (0, "CNT251-MIB", "cnt2SysCardIndex"))
if mibBuilder.loadTexts: cnt2SysCardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardEntry.setDescription('An individual card entry.')
cnt2SysCardAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardAdapterIndex.setDescription('The same as cnt2SysAdapterIndex: the relative index for this adapter.')
cnt2SysCardBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardBusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardBusIndex.setDescription('The same as cnt2SysBusIndex: the relative index for a bus on this adapter.')
cnt2SysCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardIndex.setDescription('The relative index for this card on the adapter in this slot.')
cnt2SysCardFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("interface", 2), ("compression", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardFunction.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardFunction.setDescription('The function of this card for the adapter in this slot.')
cnt2SysCardFirmwareMajorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardFirmwareMajorRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardFirmwareMajorRevision.setDescription('The major revision of the firmware on the card in this slot.')
cnt2SysCardFirmwareMinorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardFirmwareMinorRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardFirmwareMinorRevision.setDescription('The minor revision of the firmware on the card in this slot.')
cnt2SysCardVendorOctetString = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardVendorOctetString.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardVendorOctetString.setDescription('Any octet string used for identification or other purposes that may be readable from the card in this slot.')
cnt2SysCardVendorDisplayString = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 13, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysCardVendorDisplayString.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysCardVendorDisplayString.setDescription('Any display string used for identification or other purposes that may be readable from the card in this slot.')
cnt2SysIfTable = MibTable((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14), )
if mibBuilder.loadTexts: cnt2SysIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfTable.setDescription('A list of entries ...')
cnt2SysIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1), ).setIndexNames((0, "CNT251-MIB", "cnt2SysIfAdapterIndex"), (0, "CNT251-MIB", "cnt2SysIfBusIndex"), (0, "CNT251-MIB", "cnt2SysIfIndex"))
if mibBuilder.loadTexts: cnt2SysIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfEntry.setDescription('An individual card entry.')
cnt2SysIfAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfAdapterIndex.setDescription('The same as cnt2SysAdapterIndex: the relative index for this adapter.')
cnt2SysIfBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfBusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfBusIndex.setDescription('The same as cnt2SysBusIndex: the relative index for a bus on this adapter.')
cnt2SysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfIndex.setDescription('The relative index for this interface on the adapter in this slot.')
cnt2SysIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("ethernetCsmacd", 2), ("async", 3), ("escon", 4), ("atm", 5), ("fibreChannel", 6), ("scsi-2", 7), ("scsi-3", 8), ("ds3", 9), ("fddi", 10), ("fastEther", 11), ("isdn", 12), ("gigabitEthernet", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfType.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfType.setDescription('The type of interface on the adapter in this slot.')
cnt2SysIfCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfCardIndex.setDescription('The card index on which this interface resides. The card index is relative to the bus. If the interface is native to the adapter, this value is 0.')
cnt2SysIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfName.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfName.setDescription('The adapter-unique name of this interface. It may be the name assigned by the operating system, the name of the device driver, or a description assigned by configuration.')
cnt2SysIfConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("absent", 1), ("unknown", 2), ("micro-d15", 3), ("scsi-2", 4), ("scsi-3", 5), ("sc-duplex", 6), ("rj45", 7), ("bnc", 8), ("hssdc", 9), ("rsd-duplex", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfConnector.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfConnector.setDescription('The connector type used for this interface.')
cnt2SysIfSnmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysIfSnmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysIfSnmpIndex.setDescription('The SNMP MIB-2 interface index assigned to this interface.')
cnt2SysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysSerialNumber.setDescription('The chassis serial number shown on the tag on the outside of this system.')
cnt2SysOsVersion = MibScalar((1, 3, 6, 1, 4, 1, 333, 2, 5, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cnt2SysOsVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cnt2SysOsVersion.setDescription('The Software Nucleus OS version of this system.')
mibBuilder.exportSymbols("CNT251-MIB", cnt2SysCardVendorOctetString=cnt2SysCardVendorOctetString, cnt2SysProbeDateTime=cnt2SysProbeDateTime, cnt2SysAdapterPartNumber=cnt2SysAdapterPartNumber, cnt2SysAdapterServiceMonitorStatus=cnt2SysAdapterServiceMonitorStatus, cnt2SysAdapterTable=cnt2SysAdapterTable, cnt2SysAdapterBoardRevision=cnt2SysAdapterBoardRevision, cnt2SysBusAdapterIndex=cnt2SysBusAdapterIndex, cnt2SysCdRomPresent=cnt2SysCdRomPresent, cnt2SysHmbFirmwareRevision=cnt2SysHmbFirmwareRevision, cnt2SysCardTable=cnt2SysCardTable, cnt2SysCardBusIndex=cnt2SysCardBusIndex, cnt2SysDatPresent=cnt2SysDatPresent, cnt2SysAdapterHostId=cnt2SysAdapterHostId, cnt2SysAdapterFirmwareMajorRevision=cnt2SysAdapterFirmwareMajorRevision, cnt2SysCardVendorDisplayString=cnt2SysCardVendorDisplayString, cnt2SysFanEntry=cnt2SysFanEntry, cnt2SysCardAdapterIndex=cnt2SysCardAdapterIndex, cnt2SysCardFirmwareMajorRevision=cnt2SysCardFirmwareMajorRevision, cnt2SysIfEntry=cnt2SysIfEntry, cnt2SysIfName=cnt2SysIfName, cnt2SysCardFunction=cnt2SysCardFunction, cnt2SysAdapterHostName=cnt2SysAdapterHostName, cnt2SysScnrcVersion=cnt2SysScnrcVersion, cnt2SysPowerSupplyPresent=cnt2SysPowerSupplyPresent, cnt2SysCardEntry=cnt2SysCardEntry, cnt2SysAdapterIndex=cnt2SysAdapterIndex, cnt2SysPowerSupplyEntry=cnt2SysPowerSupplyEntry, cnt2SysIfSnmpIndex=cnt2SysIfSnmpIndex, cnt2SysZachCardType=cnt2SysZachCardType, cnt2SysPowerSupplyIndex=cnt2SysPowerSupplyIndex, cnt2SysAdapterType=cnt2SysAdapterType, cnt2SysIfAdapterIndex=cnt2SysIfAdapterIndex, cnt2SysAdapterOsName=cnt2SysAdapterOsName, cnt2SysBusTable=cnt2SysBusTable, cnt2SysBusEntry=cnt2SysBusEntry, cnt2SysBusType=cnt2SysBusType, cnt2SysIfBusIndex=cnt2SysIfBusIndex, cnt2SysAdapterEntry=cnt2SysAdapterEntry, cnt2SysSerialNumber=cnt2SysSerialNumber, cnt2SysFanIndex=cnt2SysFanIndex, cnt2SysBusIndex=cnt2SysBusIndex, cnt2SysIfType=cnt2SysIfType, cnt2SysAdapterFirmwareMinorRevision=cnt2SysAdapterFirmwareMinorRevision, cnt2SysCardFirmwareMinorRevision=cnt2SysCardFirmwareMinorRevision, cnt2SysPowerSupplyTable=cnt2SysPowerSupplyTable, cnt2SysAdapterSerialNumber=cnt2SysAdapterSerialNumber, cnt2SysAdapterOsMinorVersion=cnt2SysAdapterOsMinorVersion, cnt2SysIfTable=cnt2SysIfTable, cnt2SysIfIndex=cnt2SysIfIndex, cnt2SysIfConnector=cnt2SysIfConnector, cnt2SysChassisType=cnt2SysChassisType, cnt2SysFanTable=cnt2SysFanTable, cnt2SysFanPresent=cnt2SysFanPresent, cnt2SysOsVersion=cnt2SysOsVersion, cnt2SysCardIndex=cnt2SysCardIndex, cnt2SysSlotCount=cnt2SysSlotCount, cnt2SysIfCardIndex=cnt2SysIfCardIndex, cnt2SysAdapterOsMajorVersion=cnt2SysAdapterOsMajorVersion, cnt2SysAdapterName=cnt2SysAdapterName)
