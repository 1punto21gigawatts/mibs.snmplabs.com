#
# PySNMP MIB module Nortel-Magellan-Passport-PppMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-PppMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
Gauge32, Counter32, DisplayString, InterfaceIndex, Unsigned32, StorageType, Integer32, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Gauge32", "Counter32", "DisplayString", "InterfaceIndex", "Unsigned32", "StorageType", "Integer32", "RowStatus")
Link, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "Link", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Gauge32, ModuleIdentity, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Bits, TimeTicks, Unsigned32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Gauge32", "ModuleIdentity", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Bits", "TimeTicks", "Unsigned32", "Integer32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pppMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33))
ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102))
pppRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 1), )
if mibBuilder.loadTexts: pppRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppRowStatusTable.setDescription('This entry controls the addition and deletion of ppp components.')
pppRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"))
if mibBuilder.loadTexts: pppRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppRowStatusEntry.setDescription('A single entry in the table represents a single ppp component.')
pppRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppRowStatus.setDescription('This variable is used as the basis for SNMP naming of ppp components. These components can be added and deleted.')
pppComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppStorageType.setDescription('This variable represents the storage type value for the ppp tables.')
pppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: pppIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppIndex.setDescription('This variable represents the index for the ppp tables.')
pppCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 20), )
if mibBuilder.loadTexts: pppCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
pppCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"))
if mibBuilder.loadTexts: pppCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppCidDataEntry.setDescription('An entry in the pppCidDataTable.')
pppCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: pppCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
pppIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 21), )
if mibBuilder.loadTexts: pppIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
pppIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 21, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"))
if mibBuilder.loadTexts: pppIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppIfEntryEntry.setDescription('An entry in the pppIfEntryTable.')
pppIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
pppIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 21, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
pppMpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 22), )
if mibBuilder.loadTexts: pppMpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppMpTable.setDescription('This group contains the base provisioning data for the Media Application component.')
pppMpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 22, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"))
if mibBuilder.loadTexts: pppMpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppMpEntry.setDescription('An entry in the pppMpTable.')
pppLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 22, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLinkToProtocolPort.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkToProtocolPort.setDescription('This attribute contains a protocol port component name. The attribute associates the application with a protocol port.')
pppStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 23), )
if mibBuilder.loadTexts: pppStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
pppStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 23, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"))
if mibBuilder.loadTexts: pppStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppStateEntry.setDescription('An entry in the pppStateTable.')
pppAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: pppAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
pppOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: pppOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
pppUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: pppUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
pppOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 24), )
if mibBuilder.loadTexts: pppOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
pppOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 24, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"))
if mibBuilder.loadTexts: pppOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppOperStatusEntry.setDescription('An entry in the pppOperStatusTable.')
pppSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
pppLnk = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2))
pppLnkRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 1), )
if mibBuilder.loadTexts: pppLnkRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkRowStatusTable.setDescription('This entry controls the addition and deletion of pppLnk components.')
pppLnkRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLnkIndex"))
if mibBuilder.loadTexts: pppLnkRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkRowStatusEntry.setDescription('A single entry in the table represents a single pppLnk component.')
pppLnkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkRowStatus.setDescription('This variable is used as the basis for SNMP naming of pppLnk components. These components cannot be added nor deleted.')
pppLnkComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppLnkStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkStorageType.setDescription('This variable represents the storage type value for the pppLnk tables.')
pppLnkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: pppLnkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkIndex.setDescription('This variable represents the index for the pppLnk tables.')
pppLnkProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10), )
if mibBuilder.loadTexts: pppLnkProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkProvTable.setDescription('This group contains the provisioned attributes for the Ppp Link component.')
pppLnkProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLnkIndex"))
if mibBuilder.loadTexts: pppLnkProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkProvEntry.setDescription('An entry in the pppLnkProvTable.')
pppLnkConfigInitialMru = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(68, 18000)).clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkConfigInitialMru.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkConfigInitialMru.setDescription('This is the initial Maximum Receive Unit (Mru) that the local Ppp entity will advertise to the remote entity. A change to this attribute will not take effect until Ppp is restarted (lock/unlock).')
pppLnkConfigMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkConfigMagicNumber.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkConfigMagicNumber.setDescription('If enabled then the local node will attempt to perform Magic Number negotiation with the remote node. If disabled then this negotiation is not performed. In any event, the local node will comply with any magic number negotiations attempted by the remote node, per the Ppp specification. A change to this attribute will not take effect until Ppp is restarted (lock/unlock).')
pppLnkRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkRestartTimer.setDescription('This is the time, in milliseconds, that Ppp will wait for a response to a configure request or a terminate request before retrying.')
pppLnkContinuityMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkContinuityMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkContinuityMonitor.setDescription('This attribute turns on/off (enabled/disabled) the Link Continuity Monitor. If set to enabled, periodic keep alive echo packet will be sent over the Ppp link. If set to disabled, no keep alive packets will be sent. A change to this attribute will not take effect until Ppp is restarted (lock/ unlock).')
pppLnkNegativeAckTries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkNegativeAckTries.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkNegativeAckTries.setDescription("This attribute specifies the maximum negative acknowledgments sent to the remote Ppp entity during negotiation before defaulting it's configuration parameters.")
pppLnkQualityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 99)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkQualityThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkQualityThreshold.setDescription('This attribute specifies the minimum allowed line quality before the line is considered too poor to continue operation. The value for this attribute is a percentage measure of the line quality given in integers (10 to 99). The higher the value, the more stringent the line requirements.')
pppLnkQualityWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 400)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkQualityWindow.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkQualityWindow.setDescription('This attribute specifies the number of seconds used for sampling line quality. If line quality drops below the level set with the qualityThreshold attribute during this window, this instance of Ppp will be marked down until line quality recovers.')
pppLnkTerminateRequestTries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkTerminateRequestTries.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkTerminateRequestTries.setDescription('This attribute specifies the maximum terminate requests to be sent, when closing the connection, and not answered before this instance of Ppp enters a closing state.')
pppLnkConfigureRequestTries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1000000000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLnkConfigureRequestTries.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkConfigureRequestTries.setDescription('This attribute specifies the number of configuration requests that will be sent out and not answered before this instance of Ppp enters a listening state. If both sides enter the listening state then the link will not come up. To eliminate this possibility, this attribute should be set to 1000000000. This will ensure that this end of the Ppp link will continue to try until the link is good.')
pppLnkOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11), )
if mibBuilder.loadTexts: pppLnkOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkOperTable.setDescription('This group contains the Ppp Link Operational attributes.')
pppLnkOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLnkIndex"))
if mibBuilder.loadTexts: pppLnkOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkOperEntry.setDescription('An entry in the pppLnkOperTable.')
pppLnkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9))).clone('initial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkOperState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkOperState.setDescription('This is the operational state of the Link Control Protocol. For more information as to the definition of each state see RFC1331 section 5.3.')
pppLnkLineCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("ok", 0), ("looped", 1), ("noClock", 3), ("badLineCondition", 4))).clone('ok')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkLineCondition.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkLineCondition.setDescription('This attribute describes the condition of the physical line that Ppp is running over. ok: The condition of the line is good. looped: The line is looped back on itself, probably at the remote end. noClock: There is a hardware problem with the line. The cable may not be plugged in correctly. badLineCondition: The quality of the line is below the qualityThreshold.')
pppLnkBadAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkBadAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkBadAddresses.setDescription('This attribute counts the number of packets received with an incorrect Address Field. If this count is going up quickly, it could indicate that there is a line quality problem or that the remote end is transmitting a protocol other than Ppp. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLnkBadControls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkBadControls.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkBadControls.setDescription('This attribute counts the number of packets received on this link with an incorrect Control Field. If this count is going up quickly, it could indicate that there is a line quality problem or that the remote end is transmitting a protocol other than Ppp. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLnkPacketTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkPacketTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkPacketTooLongs.setDescription('This attribute counts the number of packets received that have been discarded because their length exceeded the Maximum Receive Unit (Mru). This counter will wrap around to 0 when it exceeds its maximum count.')
pppLnkBadFcss = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkBadFcss.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkBadFcss.setDescription('This attribute counts the number of packets received that have been discarded due to having an incorrect Frame Check Sequence (Fcs). This counter will wrap around to 0 when it exceeds its maximum count.')
pppLnkLocalMru = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkLocalMru.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkLocalMru.setDescription('This is the current value of the Maximum Receive Unit (Mru) for the local Ppp Entity. This value is the Mru that the remote entity is using when sending packets to the local Ppp entity.')
pppLnkRemoteMru = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483648))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkRemoteMru.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkRemoteMru.setDescription('This is the current value of the Maximum Receive Unit (Mru) for the remote Ppp entity. This value is the Mru that the local entity is using when sending packets to the remote Ppp entity.')
pppLnkTransmitFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkTransmitFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkTransmitFcsSize.setDescription('This is the size of the Frame Check Sequence (Fcs) in bits that the local node will generate when sending packets to the remote node.')
pppLnkReceiveFcsSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 2, 11, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLnkReceiveFcsSize.setStatus('mandatory')
if mibBuilder.loadTexts: pppLnkReceiveFcsSize.setDescription('This is the size of the Frame Check Sequence (Fcs) in bits that the remote node will generate when sending packets to the local node.')
pppLqm = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3))
pppLqmRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 1), )
if mibBuilder.loadTexts: pppLqmRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmRowStatusTable.setDescription('This entry controls the addition and deletion of pppLqm components.')
pppLqmRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLqmIndex"))
if mibBuilder.loadTexts: pppLqmRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmRowStatusEntry.setDescription('A single entry in the table represents a single pppLqm component.')
pppLqmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmRowStatus.setDescription('This variable is used as the basis for SNMP naming of pppLqm components. These components cannot be added nor deleted.')
pppLqmComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppLqmStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmStorageType.setDescription('This variable represents the storage type value for the pppLqm tables.')
pppLqmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: pppLqmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmIndex.setDescription('This variable represents the index for the pppLqm tables.')
pppLqmProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 10), )
if mibBuilder.loadTexts: pppLqmProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmProvTable.setDescription('This group contains the provisioned attributes for the Ppp Link Quality Monitor component.')
pppLqmProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLqmIndex"))
if mibBuilder.loadTexts: pppLqmProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmProvEntry.setDescription('An entry in the pppLqmProvTable.')
pppLqmConfigPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLqmConfigPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmConfigPeriod.setDescription("This is the Lqm reporting period that the local Ppp entity will attempt to negotiate with the remote entity, in units of hundredths of a second. A value of '0' will allow the remote Ppp entity to determine the reporting period. A value greater than 180,000 (1/2 hour) will allow the period to be determined dynamically as a function of the transmit data rate. A value from 1-9 will be rounded up to 10 during negotiation. A change to this attribute will not take effect until Ppp is restarted (lock/unlock).")
pppLqmConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLqmConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmConfigStatus.setDescription('If this attribute is enabled, the local node will attempt to perform Lqm negotiation with the remote node. If it is disabled then this negotiation is not performed. A change to this attribute will not take effect until Ppp is restarted (lock/unlock).')
pppLqmOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11), )
if mibBuilder.loadTexts: pppLqmOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmOperTable.setDescription('This group contains the operational attributes for the Ppp Link Quality Monitor component.')
pppLqmOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLqmIndex"))
if mibBuilder.loadTexts: pppLqmOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmOperEntry.setDescription('An entry in the pppLqmOperTable.')
pppLqmQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("good", 1), ("bad", 2), ("notDetermined", 3))).clone('notDetermined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmQuality.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmQuality.setDescription("This is the current quality of the link as declared by the local Ppp entity's Link-Quality Management modules. A value of good indicates that LinkQualityMonitor configStatus is enabled and Link quality is above Link qualityThreshold. A value of bad indicates that LinkQualityMonitor configStatus is enabled and Link quality is not above Link qualityThreshold. A value of notDetermined indicates that LinkQualityMonitor configStatus is enabled and the quality of the link has not been calculated yet or LinkQualityMonitor configStatus is disabled.")
pppLqmInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmInGoodOctets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmInGoodOctets.setDescription('This attribute counts the number of good octets received. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLqmLocalPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmLocalPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmLocalPeriod.setDescription('This is the Lqm reporting period, in hundredths of a second that is in effect for the local Ppp entity.')
pppLqmRemotePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmRemotePeriod.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmRemotePeriod.setDescription('This is the Lqm reporting period, in hundredths of a second, that is in effect for the remote Ppp entity.')
pppLqmOutLqrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmOutLqrs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmOutLqrs.setDescription('This attribute counts the number of link quality reports sent out. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLqmInLqrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLqmInLqrs.setStatus('mandatory')
if mibBuilder.loadTexts: pppLqmInLqrs.setDescription('This attribute counts the number of link quality reports received. This counter will wrap around to 0 when it exceeds its maximum count.')
pppNcp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4))
pppNcpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 1), )
if mibBuilder.loadTexts: pppNcpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpRowStatusTable.setDescription('This entry controls the addition and deletion of pppNcp components.')
pppNcpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"))
if mibBuilder.loadTexts: pppNcpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpRowStatusEntry.setDescription('A single entry in the table represents a single pppNcp component.')
pppNcpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpRowStatus.setDescription('This variable is used as the basis for SNMP naming of pppNcp components. These components cannot be added nor deleted.')
pppNcpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppNcpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpStorageType.setDescription('This variable represents the storage type value for the pppNcp tables.')
pppNcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: pppNcpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpIndex.setDescription('This variable represents the index for the pppNcp tables.')
pppNcpBprovTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 11), )
if mibBuilder.loadTexts: pppNcpBprovTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBprovTable.setDescription('This group contains the provisioned attributes for the Bridge Network Control Protocol.')
pppNcpBprovEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"))
if mibBuilder.loadTexts: pppNcpBprovEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBprovEntry.setDescription('An entry in the pppNcpBprovTable.')
pppNcpBConfigTinygram = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppNcpBConfigTinygram.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBConfigTinygram.setDescription('If this attribute is set to disabled then the local Bridge Network Control Protocol (Bncp) entity will not initiate the tinygram compression option negotiation. If it is enabled then the local Bncp entity will initiate negotiation of this option. A change to this attribute will not take effect until Ppp is restarted (lock/unlock).')
pppNcpBConfigLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppNcpBConfigLanId.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBConfigLanId.setDescription('If this attribute is set to disabled then the local Bncp entity will not initiate the lan identification option negotiation. If it is enabled then the local Bncp entity will initiate negotiation of the option. A change to this attribute will not take effect until Ppp is restarted (lock/unlock).')
pppNcpIpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 12), )
if mibBuilder.loadTexts: pppNcpIpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpIpOperTable.setDescription('This group contains the Ip Network Control Protocol operational attributes.')
pppNcpIpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"))
if mibBuilder.loadTexts: pppNcpIpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpIpOperEntry.setDescription('An entry in the pppNcpIpOperTable.')
pppNcpIpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9))).clone('initial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpIpOperState.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpIpOperState.setDescription('This is the operational state of the Ip network protocol. For more information as to the definition of each state see RFC1331 section 5.3.')
pppNcpBoperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 14), )
if mibBuilder.loadTexts: pppNcpBoperTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBoperTable.setDescription('This group contains the Bridge Network Control Protocol operational attributes.')
pppNcpBoperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"))
if mibBuilder.loadTexts: pppNcpBoperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBoperEntry.setDescription('An entry in the pppNcpBoperTable.')
pppNcpBOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9))).clone('initial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBOperState.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBOperState.setDescription('This is the operational status of the bridge network protocol. For more information as to the definition of each state see RFC1331 section 5.3.')
pppNcpBLocalToRemoteTinygramComp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBLocalToRemoteTinygramComp.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBLocalToRemoteTinygramComp.setDescription('This attribute indicates whether the local node will perform tinygram compression when sending packets to the remote entity. If it is disabled then the local entity will not perform tinygram compression. If it is enabled then the local entity will perform tinygram compression.')
pppNcpBRemoteToLocalTinygramComp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBRemoteToLocalTinygramComp.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBRemoteToLocalTinygramComp.setDescription('If this attribute is disabled then the remote entity is not expected to perform tinygram compression. If it is enabled then the remote entity is expected to perform tinygram compression.')
pppNcpBLocalToRemoteLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBLocalToRemoteLanId.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBLocalToRemoteLanId.setDescription('This attribute indicates whether the local node will include the lan identification field in transmitted packets or not. If it is disabled then the local node will not transmit this field, enabled means that the field will be transmitted.')
pppNcpBRemoteToLocalLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBRemoteToLocalLanId.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBRemoteToLocalLanId.setDescription('This attribute indicates whether the remote node has indicated that it will include the lan identification field in transmitted packets or not. If it is disabled then the field will not be transmitted, if enabled then the field will be transmitted.')
pppNcpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 16), )
if mibBuilder.loadTexts: pppNcpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpOperTable.setDescription('This group contains the operational attributes for any Network Control Protocols other than Ip and Bridge.')
pppNcpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"))
if mibBuilder.loadTexts: pppNcpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpOperEntry.setDescription('An entry in the pppNcpOperTable.')
pppNcpAppletalkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9))).clone('initial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpAppletalkOperState.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpAppletalkOperState.setDescription('This is the operational state of the AppleTalk network protocol. For more information as to the definition of each state see RFC1331 section 5.3.')
pppNcpIpxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9))).clone('initial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpIpxOperState.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpIpxOperState.setDescription('This is the operational state of the Ipx network protocol. For more information as to the definition of each state see RFC1331 section 5.3.')
pppNcpXnsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9))).clone('initial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpXnsOperState.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpXnsOperState.setDescription('This is the operational state of the Xns network protocol. For more information as to the definition of each state see RFC1331 section 5.3.')
pppNcpDecnetOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initial", 0), ("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9))).clone('initial')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpDecnetOperState.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpDecnetOperState.setDescription('This is the operational state of the DecNet network protocol. For more information as to the definition of each state see RFC1331 section 5.3.')
pppNcpBmcEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2))
pppNcpBmcEntryRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 1), )
if mibBuilder.loadTexts: pppNcpBmcEntryRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryRowStatusTable.setDescription('This entry controls the addition and deletion of pppNcpBmcEntry components.')
pppNcpBmcEntryRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpBmcEntryMacTypeIndex"))
if mibBuilder.loadTexts: pppNcpBmcEntryRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryRowStatusEntry.setDescription('A single entry in the table represents a single pppNcpBmcEntry component.')
pppNcpBmcEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppNcpBmcEntryRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryRowStatus.setDescription('This variable is used as the basis for SNMP naming of pppNcpBmcEntry components. These components can be added.')
pppNcpBmcEntryComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBmcEntryComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppNcpBmcEntryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBmcEntryStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryStorageType.setDescription('This variable represents the storage type value for the pppNcpBmcEntry tables.')
pppNcpBmcEntryMacTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenBus", 2), ("tokenRing", 3), ("fddi", 4))))
if mibBuilder.loadTexts: pppNcpBmcEntryMacTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryMacTypeIndex.setDescription('This variable represents the index for the pppNcpBmcEntry tables.')
pppNcpBmcEntryProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 10), )
if mibBuilder.loadTexts: pppNcpBmcEntryProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryProvTable.setDescription('This group contains the attributes for one entry in the BridgeMediaConfigEntry table.')
pppNcpBmcEntryProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpBmcEntryMacTypeIndex"))
if mibBuilder.loadTexts: pppNcpBmcEntryProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryProvEntry.setDescription('An entry in the pppNcpBmcEntryProvTable.')
pppNcpBmcEntryLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("accept", 1))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppNcpBmcEntryLocalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmcEntryLocalStatus.setDescription('This attribute indicates whether the local Ppp bridging entity should accept packets of the protocol type identified by the instance value of this component. Setting this attribute to accept allows packets of this protocol type to be accepted. A change to this attribute will not take effect until Ppp is restarted (lock/unlock).')
pppNcpBmEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3))
pppNcpBmEntryRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 1), )
if mibBuilder.loadTexts: pppNcpBmEntryRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of pppNcpBmEntry components.')
pppNcpBmEntryRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpBmEntryMacTypeIndex"))
if mibBuilder.loadTexts: pppNcpBmEntryRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryRowStatusEntry.setDescription('A single entry in the table represents a single pppNcpBmEntry component.')
pppNcpBmEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBmEntryRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryRowStatus.setDescription('This variable is used as the basis for SNMP naming of pppNcpBmEntry components. These components cannot be added nor deleted.')
pppNcpBmEntryComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBmEntryComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppNcpBmEntryStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBmEntryStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryStorageType.setDescription('This variable represents the storage type value for the pppNcpBmEntry tables.')
pppNcpBmEntryMacTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenBus", 2), ("tokenRing", 3), ("fddi", 4))))
if mibBuilder.loadTexts: pppNcpBmEntryMacTypeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryMacTypeIndex.setDescription('This variable represents the index for the pppNcpBmEntry tables.')
pppNcpBmEntryOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 10), )
if mibBuilder.loadTexts: pppNcpBmEntryOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group contains the attributes for one entry in the BridgeMediaEntry table.')
pppNcpBmEntryOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppNcpBmEntryMacTypeIndex"))
if mibBuilder.loadTexts: pppNcpBmEntryOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryOperEntry.setDescription('An entry in the pppNcpBmEntryOperTable.')
pppNcpBmEntryLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("dontAccept", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBmEntryLocalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryLocalStatus.setDescription('This attribute indicates whether the local Ppp bridging entity will accept packets of the protocol type identified by the instance value of this component. A value of accept indicates that packets of this protocol type will be accepted. A value of dontAccept indicates that packets of this type will not be accepted.')
pppNcpBmEntryRemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("dontAccept", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppNcpBmEntryRemoteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppNcpBmEntryRemoteStatus.setDescription('This attribute indicates whether the remote Ppp bridging entity will accept packets of the protocol type identified by the instance value of this component. A value of accept indicates that packets of this protocol type will be accepted. A value of dontAccept indicates that packets of this type will not be accepted.')
pppFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5))
pppFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 1), )
if mibBuilder.loadTexts: pppFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerRowStatusTable.setDescription('This entry controls the addition and deletion of pppFramer components.')
pppFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppFramerIndex"))
if mibBuilder.loadTexts: pppFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerRowStatusEntry.setDescription('A single entry in the table represents a single pppFramer component.')
pppFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of pppFramer components. These components cannot be added nor deleted.')
pppFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerStorageType.setDescription('This variable represents the storage type value for the pppFramer tables.')
pppFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: pppFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerIndex.setDescription('This variable represents the index for the pppFramer tables.')
pppFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 10), )
if mibBuilder.loadTexts: pppFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
pppFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppFramerIndex"))
if mibBuilder.loadTexts: pppFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerProvEntry.setDescription('An entry in the pppFramerProvTable.')
pppFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the logical processor on which Framer's parent component (as well as Framer itself) will run.")
pppFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 12), )
if mibBuilder.loadTexts: pppFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
pppFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppFramerIndex"))
if mibBuilder.loadTexts: pppFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerStateEntry.setDescription('An entry in the pppFramerStateTable.')
pppFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
pppFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
pppFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
pppFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13), )
if mibBuilder.loadTexts: pppFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
pppFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppFramerIndex"))
if mibBuilder.loadTexts: pppFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerStatsEntry.setDescription('An entry in the pppFramerStatsTable.')
pppFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerFrmToIf.setDescription('This attribute counts the number of frames transmitted to the link interface by Framer. Note: This does not include the number of frames transmitted directly to the hardware queue, thus bypassing the Framer component.')
pppFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerFrmFromIf.setDescription('This attribute counts the number of frames received from the link interface by Framer.')
pppFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerAborts.setDescription('This attribute counts the total number of aborts received.')
pppFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerCrcErrors.setDescription('This attribute counts the total number of frames with CRC errors.')
pppFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerLrcErrors.setDescription('This attribute counts the total number of frames with LRC errors.')
pppFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerNonOctetErrors.setDescription('This attribute counts the total number of frames that were non octet aligned.')
pppFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerOverruns.setDescription('This attribute counts the total number of frames received from the link for which overruns occurred.')
pppFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerUnderruns.setDescription('This attribute counts the total number of frames transmitted to the link for which underruns occurred.')
pppFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerLargeFrmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerLargeFrmErrors.setDescription('This attribute counts the total number of frames received which were too large. The frame execeeded the maximumFrameLengthLimit provisioned attribute or it contained more than the 255 block hardware limit.')
pppFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 14), )
if mibBuilder.loadTexts: pppFramerUtilTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerUtilTable.setDescription('This group contains the link utilizaiton operational data for a Framer component.')
pppFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppFramerIndex"))
if mibBuilder.loadTexts: pppFramerUtilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerUtilEntry.setDescription('An entry in the pppFramerUtilTable.')
pppFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerNormPrioLinkUtilToIf.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerNormPrioLinkUtilToIf.setDescription('This attribute is the utilization of the normal priority data sent to the link as a percentage of the available bandwidth on the link. The utilization is the average for the last minute.')
pppFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 5, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: pppFramerNormPrioLinkUtilFromIf.setDescription('This attribute is the utilization of the normal priority data received from the link as a percentage of the available bandwidth on the link. The utilization is the average for the last minute.')
pppLeq = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6))
pppLeqRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 1), )
if mibBuilder.loadTexts: pppLeqRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqRowStatusTable.setDescription('This entry controls the addition and deletion of pppLeq components.')
pppLeqRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLeqIndex"))
if mibBuilder.loadTexts: pppLeqRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqRowStatusEntry.setDescription('A single entry in the table represents a single pppLeq component.')
pppLeqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLeqRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqRowStatus.setDescription('This variable is used as the basis for SNMP naming of pppLeq components. These components can be added and deleted.')
pppLeqComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
pppLeqStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqStorageType.setDescription('This variable represents the storage type value for the pppLeq tables.')
pppLeqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: pppLeqIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqIndex.setDescription('This variable represents the index for the pppLeq tables.')
pppLeqProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 10), )
if mibBuilder.loadTexts: pppLeqProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqProvTable.setDescription('This group contains the provisioned attributes for the LinkEmissionQueue component.')
pppLeqProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLeqIndex"))
if mibBuilder.loadTexts: pppLeqProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqProvEntry.setDescription('An entry in the pppLeqProvTable.')
pppLeqMaxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLeqMaxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqMaxPackets.setDescription('This attribute specifies the maximum number of packets allowed in the Leq before being discarded. If this attribute is set to zero then the maximum number of packets is calculated from the transmit data rate. This calculated value is placed in queuePktThreshold.')
pppLeqMaxMsecData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLeqMaxMsecData.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqMaxMsecData.setDescription("This attribute specifies the maximum number of 'Milliseconds worth of data' allowed in the Leq before packets are discarded. The queueByteThreshold will be calculated from this attribute, based on the transmit data rate.")
pppLeqMaxPercentMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLeqMaxPercentMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqMaxPercentMulticast.setDescription('This attribute specifies the maximum percentage of multicast packets allowed in the Leq, based on queuePktThreshold, before being discarded. The calculated value will be placed in queueMulticastThreshold.')
pppLeqTimeToLive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 60000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppLeqTimeToLive.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTimeToLive.setDescription("This attribute specifies the 'Milliseconds Time To Live' of packets in the Leq. If the timeToLive of a packet expires, it will be discarded.")
pppLeqStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 11), )
if mibBuilder.loadTexts: pppLeqStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqStatsTable.setDescription('This group contains Link Emission Queue general statistics.')
pppLeqStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLeqIndex"))
if mibBuilder.loadTexts: pppLeqStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqStatsEntry.setDescription('An entry in the pppLeqStatsTable.')
pppLeqTimedOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqTimedOutPkt.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTimedOutPkt.setDescription('This attribute counts the number of packets that have been discarded due to exceeding the timeToLive. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqHardwareForcedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqHardwareForcedPkt.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqHardwareForcedPkt.setDescription('This attribute counts the number of hardware forced packets on this instance of Ppp. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqForcedPktDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqForcedPktDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqForcedPktDiscards.setDescription('This attribute counts the total number of hardware forced packets that had to be discarded due to link failure. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqQueuePurgeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqQueuePurgeDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqQueuePurgeDiscards.setDescription('This attribute counts the total number of packets discarded by a queue purge (i.e. a discarding of all packets on the queue). This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqTStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 12), )
if mibBuilder.loadTexts: pppLeqTStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTStatsTable.setDescription('This group contains Link Emission Queue total statistics.')
pppLeqTStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLeqIndex"))
if mibBuilder.loadTexts: pppLeqTStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTStatsEntry.setDescription('An entry in the pppLeqTStatsTable.')
pppLeqTotalPktHandled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqTotalPktHandled.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTotalPktHandled.setDescription('This attribute counts the total number of packets handled by the Leq. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqTotalPktForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqTotalPktForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTotalPktForwarded.setDescription('This attribute counts the total number of packets forwarded by the Leq. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqTotalPktQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqTotalPktQueued.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTotalPktQueued.setDescription('This attribute counts the total number of packets that required queuing by the Leq due to transmit congestion. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqTotalMulticastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqTotalMulticastPkt.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTotalMulticastPkt.setDescription('This attribute counts the total number of multicast packets handled by this instance of Ppp. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqTotalPktDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqTotalPktDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqTotalPktDiscards.setDescription('This attribute counts the total number of packets that were discarded for this instance of Ppp. This is the sum of timedOutPkt, forcedPktDiscards, queuePurgeDiscards, pktThresholdExceeded, byteThresholdExceeded, mulThresholdExceeded, and memThresholdExceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 13), )
if mibBuilder.loadTexts: pppLeqCStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqCStatsTable.setDescription('This group contains Link Emission Queue current statistics.')
pppLeqCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLeqIndex"))
if mibBuilder.loadTexts: pppLeqCStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqCStatsEntry.setDescription('An entry in the pppLeqCStatsTable.')
pppLeqCurrentPktQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 13, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqCurrentPktQueued.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqCurrentPktQueued.setDescription('This attribute counts the current number of packets queued.')
pppLeqCurrentBytesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqCurrentBytesQueued.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqCurrentBytesQueued.setDescription('This attribute counts the current number of bytes queued.')
pppLeqCurrentMulticastQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 13, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqCurrentMulticastQueued.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqCurrentMulticastQueued.setDescription('This attribute counts the current number of multicast packets in the queue.')
pppLeqThrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14), )
if mibBuilder.loadTexts: pppLeqThrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqThrStatsTable.setDescription('This group contains Link Emission Queue threshold statistics.')
pppLeqThrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-PppMIB", "pppIndex"), (0, "Nortel-Magellan-Passport-PppMIB", "pppLeqIndex"))
if mibBuilder.loadTexts: pppLeqThrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqThrStatsEntry.setDescription('An entry in the pppLeqThrStatsTable.')
pppLeqQueuePktThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqQueuePktThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqQueuePktThreshold.setDescription('This attribute is the maximum number of packets that can be contained in the queue before being discarded. If maxPackets was set to 0 then this attribute will contain the value that has been calculated based on the transmit data rate. If maxPackets was set to one or more than this attribute will contain that number.')
pppLeqPktThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqPktThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqPktThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queuePktThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqQueueByteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqQueueByteThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqQueueByteThreshold.setDescription('This attribute is the maximum number of bytes allowed in the queue based on maxMsecData and the transmit data rate.')
pppLeqByteThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqByteThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqByteThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queueByteThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqQueueMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqQueueMulticastThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqQueueMulticastThreshold.setDescription('This attribute is the number of multicast packets allowed in the queue based on maxPercentMulticast and maxPackets.')
pppLeqMulThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqMulThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqMulThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to the queueMulticastThreshold being exceeded. This counter will wrap around to 0 when it exceeds its maximum count.')
pppLeqMemThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 102, 6, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLeqMemThresholdExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLeqMemThresholdExceeded.setDescription('This attribute counts the number of packets discarded due to exceeding the memory usage threshold for Leq. The memory usage threshold is determined by the Leq software, guaranteeing that the Leq does not consume all of the memory. This counter will wrap around to 0 when it exceeds its maximum count.')
pppGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 1))
pppGroupBC = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 1, 3))
pppGroupBC02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 1, 3, 3))
pppGroupBC02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 1, 3, 3, 2))
pppCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 3))
pppCapabilitiesBC = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 3, 3))
pppCapabilitiesBC02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 3, 3, 3))
pppCapabilitiesBC02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 33, 3, 3, 3, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-PppMIB", pppNcpBmEntry=pppNcpBmEntry, pppLnkRemoteMru=pppLnkRemoteMru, pppLnkProvTable=pppLnkProvTable, pppNcpRowStatus=pppNcpRowStatus, pppFramerStorageType=pppFramerStorageType, pppNcpBmcEntryStorageType=pppNcpBmcEntryStorageType, pppFramerNormPrioLinkUtilFromIf=pppFramerNormPrioLinkUtilFromIf, pppNcpXnsOperState=pppNcpXnsOperState, pppIfAdminStatus=pppIfAdminStatus, pppLnkRowStatus=pppLnkRowStatus, pppLqmConfigStatus=pppLqmConfigStatus, pppOperStatusEntry=pppOperStatusEntry, pppLnkComponentName=pppLnkComponentName, pppLqmLocalPeriod=pppLqmLocalPeriod, pppLqmInLqrs=pppLqmInLqrs, pppLqmOperTable=pppLqmOperTable, pppNcpBLocalToRemoteLanId=pppNcpBLocalToRemoteLanId, pppFramerStateTable=pppFramerStateTable, pppNcpBmEntryComponentName=pppNcpBmEntryComponentName, pppLqmRowStatusTable=pppLqmRowStatusTable, pppLeqMemThresholdExceeded=pppLeqMemThresholdExceeded, pppLeqTimeToLive=pppLeqTimeToLive, pppCidDataTable=pppCidDataTable, pppCapabilitiesBC02=pppCapabilitiesBC02, pppNcpRowStatusTable=pppNcpRowStatusTable, pppLnkConfigMagicNumber=pppLnkConfigMagicNumber, pppFramerUsageState=pppFramerUsageState, pppCustomerIdentifier=pppCustomerIdentifier, pppLqmRowStatus=pppLqmRowStatus, pppLnkProvEntry=pppLnkProvEntry, pppNcpBmEntryRowStatusTable=pppNcpBmEntryRowStatusTable, pppNcpBprovTable=pppNcpBprovTable, pppLqmOutLqrs=pppLqmOutLqrs, pppCapabilitiesBC=pppCapabilitiesBC, pppFramerStateEntry=pppFramerStateEntry, pppNcpIpOperState=pppNcpIpOperState, pppNcpBmcEntryComponentName=pppNcpBmcEntryComponentName, pppNcpBmEntryOperEntry=pppNcpBmEntryOperEntry, pppNcpBOperState=pppNcpBOperState, pppGroupBC02=pppGroupBC02, pppMIB=pppMIB, pppCapabilities=pppCapabilities, pppFramerUtilTable=pppFramerUtilTable, pppLqmQuality=pppLqmQuality, pppNcpDecnetOperState=pppNcpDecnetOperState, pppFramer=pppFramer, pppLeqByteThresholdExceeded=pppLeqByteThresholdExceeded, pppLeqRowStatus=pppLeqRowStatus, pppLeqCStatsTable=pppLeqCStatsTable, pppFramerStatsEntry=pppFramerStatsEntry, pppLeqMaxPackets=pppLeqMaxPackets, pppNcpStorageType=pppNcpStorageType, pppNcpBmEntryOperTable=pppNcpBmEntryOperTable, pppLeqMulThresholdExceeded=pppLeqMulThresholdExceeded, pppLnkConfigureRequestTries=pppLnkConfigureRequestTries, pppComponentName=pppComponentName, pppRowStatusEntry=pppRowStatusEntry, pppFramerAdminState=pppFramerAdminState, pppLeqProvEntry=pppLeqProvEntry, pppFramerLargeFrmErrors=pppFramerLargeFrmErrors, pppCapabilitiesBC02A=pppCapabilitiesBC02A, pppLeqTStatsEntry=pppLeqTStatsEntry, pppFramerOverruns=pppFramerOverruns, pppLeqMaxMsecData=pppLeqMaxMsecData, pppFramerRowStatusEntry=pppFramerRowStatusEntry, pppGroup=pppGroup, pppSnmpOperStatus=pppSnmpOperStatus, pppLnkQualityThreshold=pppLnkQualityThreshold, pppLeqQueuePurgeDiscards=pppLeqQueuePurgeDiscards, pppFramerLrcErrors=pppFramerLrcErrors, pppNcpComponentName=pppNcpComponentName, pppLnkRestartTimer=pppLnkRestartTimer, pppLqmRowStatusEntry=pppLqmRowStatusEntry, pppNcpBmcEntryProvEntry=pppNcpBmcEntryProvEntry, pppIndex=pppIndex, pppLeqComponentName=pppLeqComponentName, pppFramerUnderruns=pppFramerUnderruns, pppFramerAborts=pppFramerAborts, pppLeqQueueMulticastThreshold=pppLeqQueueMulticastThreshold, pppNcpBmcEntryLocalStatus=pppNcpBmcEntryLocalStatus, pppLnkLocalMru=pppLnkLocalMru, pppLnkOperEntry=pppLnkOperEntry, pppLqm=pppLqm, pppFramerFrmToIf=pppFramerFrmToIf, pppFramerOperationalState=pppFramerOperationalState, pppNcpBoperEntry=pppNcpBoperEntry, pppLeqTotalPktHandled=pppLeqTotalPktHandled, pppNcpBmEntryLocalStatus=pppNcpBmEntryLocalStatus, pppLnkReceiveFcsSize=pppLnkReceiveFcsSize, pppLnkTerminateRequestTries=pppLnkTerminateRequestTries, pppFramerRowStatus=pppFramerRowStatus, pppNcpOperEntry=pppNcpOperEntry, pppLeqTotalPktQueued=pppLeqTotalPktQueued, pppLqmOperEntry=pppLqmOperEntry, pppNcpBmEntryRowStatus=pppNcpBmEntryRowStatus, pppNcpBmEntryStorageType=pppNcpBmEntryStorageType, pppGroupBC=pppGroupBC, pppLnkLineCondition=pppLnkLineCondition, pppNcpIndex=pppNcpIndex, pppMpEntry=pppMpEntry, pppOperStatusTable=pppOperStatusTable, pppLqmProvEntry=pppLqmProvEntry, pppLeqStatsTable=pppLeqStatsTable, pppNcpBConfigTinygram=pppNcpBConfigTinygram, pppLnkQualityWindow=pppLnkQualityWindow, pppOperationalState=pppOperationalState, pppFramerUtilEntry=pppFramerUtilEntry, pppLqmIndex=pppLqmIndex, ppp=ppp, pppLnkPacketTooLongs=pppLnkPacketTooLongs, pppNcpBRemoteToLocalTinygramComp=pppNcpBRemoteToLocalTinygramComp, pppLeqRowStatusTable=pppLeqRowStatusTable, pppUsageState=pppUsageState, pppNcpOperTable=pppNcpOperTable, pppLqmProvTable=pppLqmProvTable, pppLeqPktThresholdExceeded=pppLeqPktThresholdExceeded, pppIfIndex=pppIfIndex, pppLeqThrStatsTable=pppLeqThrStatsTable, pppFramerNormPrioLinkUtilToIf=pppFramerNormPrioLinkUtilToIf, pppLeqThrStatsEntry=pppLeqThrStatsEntry, pppLnkConfigInitialMru=pppLnkConfigInitialMru, pppLnkOperState=pppLnkOperState, pppLeqTotalPktForwarded=pppLeqTotalPktForwarded, pppFramerIndex=pppFramerIndex, pppLeqCurrentMulticastQueued=pppLeqCurrentMulticastQueued, pppLeq=pppLeq, pppFramerInterfaceName=pppFramerInterfaceName, pppFramerRowStatusTable=pppFramerRowStatusTable, pppMpTable=pppMpTable, pppLeqCurrentPktQueued=pppLeqCurrentPktQueued, pppStorageType=pppStorageType, pppNcpAppletalkOperState=pppNcpAppletalkOperState, pppLnkTransmitFcsSize=pppLnkTransmitFcsSize, pppFramerProvEntry=pppFramerProvEntry, pppFramerComponentName=pppFramerComponentName, pppLqmStorageType=pppLqmStorageType, pppLeqTimedOutPkt=pppLeqTimedOutPkt, pppLnkOperTable=pppLnkOperTable, pppNcpBmEntryRowStatusEntry=pppNcpBmEntryRowStatusEntry, pppLinkToProtocolPort=pppLinkToProtocolPort, pppNcp=pppNcp, pppNcpBmEntryMacTypeIndex=pppNcpBmEntryMacTypeIndex, pppLeqMaxPercentMulticast=pppLeqMaxPercentMulticast, pppLnkNegativeAckTries=pppLnkNegativeAckTries, pppGroupBC02A=pppGroupBC02A, pppLeqQueuePktThreshold=pppLeqQueuePktThreshold, pppLnkRowStatusEntry=pppLnkRowStatusEntry, pppFramerStatsTable=pppFramerStatsTable, pppLnkIndex=pppLnkIndex, pppLeqQueueByteThreshold=pppLeqQueueByteThreshold, pppLeqRowStatusEntry=pppLeqRowStatusEntry, pppFramerFrmFromIf=pppFramerFrmFromIf, pppFramerCrcErrors=pppFramerCrcErrors, pppNcpBmcEntryProvTable=pppNcpBmcEntryProvTable, pppLeqTotalPktDiscards=pppLeqTotalPktDiscards, pppNcpBmcEntryRowStatusTable=pppNcpBmcEntryRowStatusTable, pppNcpBmcEntryMacTypeIndex=pppNcpBmcEntryMacTypeIndex, pppFramerNonOctetErrors=pppFramerNonOctetErrors, pppNcpIpOperTable=pppNcpIpOperTable, pppLeqTStatsTable=pppLeqTStatsTable, pppLqmRemotePeriod=pppLqmRemotePeriod, pppLeqForcedPktDiscards=pppLeqForcedPktDiscards, pppLeqHardwareForcedPkt=pppLeqHardwareForcedPkt, pppNcpBRemoteToLocalLanId=pppNcpBRemoteToLocalLanId, pppLnkStorageType=pppLnkStorageType, pppCidDataEntry=pppCidDataEntry, pppLeqCurrentBytesQueued=pppLeqCurrentBytesQueued, pppIfEntryTable=pppIfEntryTable, pppNcpBConfigLanId=pppNcpBConfigLanId, pppLqmComponentName=pppLqmComponentName, pppRowStatus=pppRowStatus, pppLnk=pppLnk, pppNcpBprovEntry=pppNcpBprovEntry, pppLeqProvTable=pppLeqProvTable, pppNcpBmcEntryRowStatus=pppNcpBmcEntryRowStatus, pppLnkBadFcss=pppLnkBadFcss, pppAdminState=pppAdminState, pppLeqCStatsEntry=pppLeqCStatsEntry, pppStateEntry=pppStateEntry, pppNcpIpOperEntry=pppNcpIpOperEntry, pppNcpBmcEntry=pppNcpBmcEntry, pppRowStatusTable=pppRowStatusTable, pppLnkBadAddresses=pppLnkBadAddresses, pppLeqIndex=pppLeqIndex, pppNcpBoperTable=pppNcpBoperTable, pppLqmInGoodOctets=pppLqmInGoodOctets, pppLnkRowStatusTable=pppLnkRowStatusTable, pppNcpBLocalToRemoteTinygramComp=pppNcpBLocalToRemoteTinygramComp, pppLeqTotalMulticastPkt=pppLeqTotalMulticastPkt, pppLqmConfigPeriod=pppLqmConfigPeriod, pppLeqStorageType=pppLeqStorageType, pppNcpBmcEntryRowStatusEntry=pppNcpBmcEntryRowStatusEntry, pppNcpBmEntryRemoteStatus=pppNcpBmEntryRemoteStatus, pppLnkBadControls=pppLnkBadControls, pppLnkContinuityMonitor=pppLnkContinuityMonitor, pppLeqStatsEntry=pppLeqStatsEntry, pppNcpRowStatusEntry=pppNcpRowStatusEntry, pppStateTable=pppStateTable, pppNcpIpxOperState=pppNcpIpxOperState, pppFramerProvTable=pppFramerProvTable, pppIfEntryEntry=pppIfEntryEntry)
