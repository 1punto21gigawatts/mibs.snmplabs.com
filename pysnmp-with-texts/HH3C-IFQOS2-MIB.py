#
# PySNMP MIB module HH3C-IFQOS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-IFQOS2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, ObjectIdentity, MibIdentifier, IpAddress, Counter64, ModuleIdentity, Integer32, Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter64", "ModuleIdentity", "Integer32", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "NotificationType")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
hh3cIfQos2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1))
if mibBuilder.loadTexts: hh3cIfQos2.setLastUpdated('200812020000Z')
if mibBuilder.loadTexts: hh3cIfQos2.setOrganization('H3C Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hh3cIfQos2.setContactInfo('Platform Team H3C Technologies Co.,Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cIfQos2.setDescription('Interface QoS management information base.')
hh3cQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65))
class CarAction(TextualConvention, Integer32):
    description = 'The actions taken when packets conforming or exceeding the configured CIR.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("invalid", 0), ("pass", 1), ("continue", 2), ("discard", 3), ("remark", 4), ("remark-ip-continue", 5), ("remark-ip-pass", 6), ("remark-mplsexp-continue", 7), ("remark-mplsexp-pass", 8), ("remark-dscp-continue", 9), ("remark-dscp-pass", 10), ("remark-dot1p-continue", 11), ("remark-dot1p-pass", 12), ("remark-atm-clp-continue", 13), ("remark-atm-clp-pass", 14), ("remark-fr-de-continue", 15), ("remark-fr-de-pass", 16))

class PriorityQueue(TextualConvention, Integer32):
    description = 'The type of priority queue.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("top", 1), ("middle", 2), ("normal", 3), ("bottom", 4))

class Direction(TextualConvention, Integer32):
    description = 'Inbound or outbound.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

hh3cIfQoSHardwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1))
hh3cIfQoSHardwareQueueConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1))
hh3cIfQoSQSModeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSQSModeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSModeTable.setDescription('A table of queue schedule mode information.')
hh3cIfQoSQSModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSQSModeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSModeEntry.setDescription('Queue schedule mode information entry.')
hh3cIfQoSQSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sp", 1), ("sp0", 2), ("sp1", 3), ("sp2", 4), ("wrr", 5), ("hh3cfq", 6), ("wrr-sp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSMode.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSMode.setDescription('The mode of schedule.')
hh3cIfQoSQSWeightTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSQSWeightTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSWeightTable.setDescription('A table of queue schedule weight configuration information.')
hh3cIfQoSQSWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSQSWeightEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSWeightEntry.setDescription('Queue schedule weight configuration information entry.')
hh3cIfQoSQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSQueueID.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQueueID.setDescription('Queue ID')
hh3cIfQoSQueueGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group0", 1), ("group1", 2), ("group2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQueueGroupType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQueueGroupType.setDescription('Group type of WRR and WFQ.')
hh3cIfQoSQSType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weight", 1), ("byte-count", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSType.setDescription('Schedule type.')
hh3cIfQoSQSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSValue.setDescription('Schedule value.')
hh3cIfQoSQSMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 1, 2, 1, 5), Integer32().clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSQSMaxDelay.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQSMaxDelay.setDescription('Max delay.')
hh3cIfQoSHardwareQueueRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2))
hh3cIfQoSHardwareQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSHardwareQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSHardwareQueueRunInfoTable.setDescription('A table of queue statistic information.')
hh3cIfQoSHardwareQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSHardwareQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSHardwareQueueRunInfoEntry.setDescription('Queue statistic information entry.')
hh3cIfQoSPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPassPackets.setDescription('The number of forwarded packets.')
hh3cIfQoSDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSDropPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSDropPackets.setDescription('The number of dropped packets.')
hh3cIfQoSPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPassBytes.setDescription('The bytes of forwarded packets.')
hh3cIfQoSPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPassPPS.setDescription('The PPS of forwarded packets. PPS: packets per second.')
hh3cIfQoSPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPassBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPassBPS.setDescription('The BPS of forwarded packets. BPS: bytes per second.')
hh3cIfQoSDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSDropBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSDropBytes.setDescription('The bytes of dropped packets.')
hh3cIfQoSQueueLengthInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSQueueLengthInPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQueueLengthInPkts.setDescription('The max number of packets which the queue can hold.')
hh3cIfQoSQueueLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSQueueLengthInBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQueueLengthInBytes.setDescription('The max bytes of packets which the queue can hold.')
hh3cIfQoSCurQueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueuePkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCurQueuePkts.setDescription('The number of packets in the current queue.')
hh3cIfQoSCurQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueueBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCurQueueBytes.setDescription('The bytes of packets in the current queue.')
hh3cIfQoSCurQueuePPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueuePPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCurQueuePPS.setDescription('The PPS of packets in the current queue.')
hh3cIfQoSCurQueueBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCurQueueBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCurQueueBPS.setDescription('The BPS of packets in the current queue.')
hh3cIfQoSTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTailDropPkts.setDescription('The number of packets dropped by tail dropping.')
hh3cIfQoSTailDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTailDropBytes.setDescription('The bytes of packets dropped by tail dropping.')
hh3cIfQoSTailDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTailDropPPS.setDescription('The PPS of packets dropped by tail dropping.')
hh3cIfQoSTailDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTailDropBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTailDropBPS.setDescription('The BPS of packets dropped by tail dropping.')
hh3cIfQoSWredDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropPkts.setDescription('The number of packets dropped by WRED.')
hh3cIfQoSWredDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropBytes.setDescription('The bytes of packets dropped by WRED.')
hh3cIfQoSWredDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropPPS.setDescription('The PPS of packets dropped by WRED.')
hh3cIfQoSWredDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropBPS.setDescription('The BPS of packets dropped by WRED.')
hh3cIfQoSHQueueTcpRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cIfQoSHQueueTcpRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSHQueueTcpRunInfoTable.setDescription('A table of queue statistic information about TCP and non-TCP packets.')
hh3cIfQoSHQueueTcpRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSHQueueTcpRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSHQueueTcpRunInfoEntry.setDescription('Queue statistic information entry about TCP and non-TCP packets.')
hh3cIfQoSWredDropLPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpPkts.setDescription('The number of low-precedence non-TCP packets dropped by WRED.')
hh3cIfQoSWredDropLPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpBytes.setDescription('The bytes of low-precedence non-TCP packets dropped by WRED.')
hh3cIfQoSWredDropLPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpPPS.setDescription('The PPS of low-precedence non-TCP packets dropped by WRED. PPS: packets per second.')
hh3cIfQoSWredDropLPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreNTcpBPS.setDescription('The BPS of low-precedence non-TCP packets dropped by WRED. BPS: bytes per second.')
hh3cIfQoSWredDropLPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpPkts.setDescription('The number of low-precedence TCP packets dropped by WRED.')
hh3cIfQoSWredDropLPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpBytes.setDescription('The bytes of low-precedence TCP packets dropped by WRED.')
hh3cIfQoSWredDropLPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpPPS.setDescription('The PPS of low-precedence TCP packets dropped by WRED.')
hh3cIfQoSWredDropLPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropLPreTcpBPS.setDescription('The BPS of low-precedence TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpPkts.setDescription('The number of high-precedence non-TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpBytes.setDescription('The bytes of high-precedence non-TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpPPS.setDescription('The PPS of high-precedence non-TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreNTcpBPS.setDescription('The BPS of high-precedence non-TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpPkts.setDescription('The number of high-precedence TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpBytes.setDescription('The bytes of high-precedence TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpPPS.setDescription('The PPS of high-precedence TCP packets dropped by WRED.')
hh3cIfQoSWredDropHPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 1, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDropHPreTcpBPS.setDescription('The BPS of high-precedence TCP packets dropped by WRED.')
hh3cIfQoSSoftwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2))
hh3cIfQoSFIFOObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1))
hh3cIfQoSFIFOConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSFIFOConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSFIFOConfigTable.setDescription('A table of FIFO queue information.')
hh3cIfQoSFIFOConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSFIFOConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSFIFOConfigEntry.setDescription('FIFO queue information entry.')
hh3cIfQoSFIFOMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSFIFOMaxQueueLen.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSFIFOMaxQueueLen.setDescription('The maximum length of FIFO queue.')
hh3cIfQoSFIFORunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSFIFORunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSFIFORunInfoTable.setDescription('A table of FIFO queue statistic information.')
hh3cIfQoSFIFORunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSFIFORunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSFIFORunInfoEntry.setDescription('FIFO queue statistic information entry.')
hh3cIfQoSFIFOSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSFIFOSize.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSFIFOSize.setDescription('The number of packet in FIFO queue.')
hh3cIfQoSFIFODiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSFIFODiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSFIFODiscardPackets.setDescription('The number of discard packet.')
hh3cIfQoSPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2))
hh3cIfQoSPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1))
hh3cIfQoSPQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultTable.setDescription('A table of priority queue default configuration information.')
hh3cIfQoSPQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQListNumber"))
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultEntry.setDescription('Priority queue default configuration information entry.')
hh3cIfQoSPQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cIfQoSPQListNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQListNumber.setDescription('Priority queue list number.')
hh3cIfQoSPQDefaultQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 1, 1, 2), PriorityQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultQueueType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQDefaultQueueType.setDescription('Specify priority queue that packets put into by default.')
hh3cIfQoSPQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthTable.setDescription('A table of queue length of priority queue configuration information.')
hh3cIfQoSPQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQQueueLengthType"))
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthEntry.setDescription('Queue length of priority queue configuration information entry.')
hh3cIfQoSPQQueueLengthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthType.setDescription('Type of priority queue.')
hh3cIfQoSPQQueueLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQQueueLengthValue.setDescription('The size of priority queue.')
hh3cIfQoSPQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleTable.setDescription('A table of class rule of priority queue information.')
hh3cIfQoSPQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleEntry.setDescription('A table of class rule of priority queue information.')
hh3cIfQoSPQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleType.setDescription("Type of class rule. 'ipall' means all ip packets.")
hh3cIfQoSPQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleValue.setDescription('Value of class rule. interface : ifIndex ipv4acl : 2000..3999 ipv6acl : 2000..3999, 10000..42767 greater-than : 0..65535 less-than : 0..65535 tcp : 0..65535 udp : 0..65535 mpls(exp-mask) : 1..255 other types: 0 ')
hh3cIfQoSPQClassRuleQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 3), PriorityQueue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleQueueType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQClassRuleQueueType.setDescription('Specify the queue for matched packets.')
hh3cIfQoSPQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQClassRowStatus.setDescription('RowStatus.')
hh3cIfQoSPQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSPQApplyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQApplyTable.setDescription('A table of priority queue instance.')
hh3cIfQoSPQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPQApplyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQApplyEntry.setDescription('Priority queue instance information.')
hh3cIfQoSPQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQApplyListNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQApplyListNumber.setDescription('Priority queue list number.')
hh3cIfQoSPQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPQApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQApplyRowStatus.setDescription('RowStatus.')
hh3cIfQoSPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2))
hh3cIfQoSPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPQRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQRunInfoTable.setDescription('A table of priority queue statistic information.')
hh3cIfQoSPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPQType"))
if mibBuilder.loadTexts: hh3cIfQoSPQRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQRunInfoEntry.setDescription('Priority queue statistic information entry.')
hh3cIfQoSPQType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: hh3cIfQoSPQType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQType.setDescription('The type of priority queue.')
hh3cIfQoSPQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPQSize.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQSize.setDescription('The number of packets in the priority queue.')
hh3cIfQoSPQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPQLength.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQLength.setDescription('The maximum length of priority queue.')
hh3cIfQoSPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPQDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPQDiscardPackets.setDescription('The packet number of priority queue discard.')
hh3cIfQoSCQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3))
hh3cIfQoSCQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1))
hh3cIfQoSCQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultTable.setDescription('A table of custom queue default configuration information.')
hh3cIfQoSCQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQListNumber"))
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultEntry.setDescription('Custom queue default configuration information entry.')
hh3cIfQoSCQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cIfQoSCQListNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQListNumber.setDescription('Custom queue list number.')
hh3cIfQoSCQDefaultQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultQueueID.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQDefaultQueueID.setDescription('Default queue ID.')
hh3cIfQoSCQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLengthTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLengthTable.setDescription('A table of queue length of custom queue configuration information.')
hh3cIfQoSCQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLengthEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLengthEntry.setDescription('Queue length of custom queue configuration information entry.')
hh3cIfQoSCQQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hh3cIfQoSCQQueueID.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQQueueID.setDescription('Custom queue index.')
hh3cIfQoSCQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLength.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQQueueLength.setDescription('The size of custom queue.')
hh3cIfQoSCQQueueServing = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 2, 1, 3), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSCQQueueServing.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQQueueServing.setDescription('The maximum bytes that the specified queue can transmit in each turn.')
hh3cIfQoSCQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleTable.setDescription('A table of class rule of custom queue information.')
hh3cIfQoSCQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQListNumber"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleEntry.setDescription('A table of class rule of custom queue information.')
hh3cIfQoSCQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleType.setDescription("Type of class rule. 'ipall' means all ip packets.")
hh3cIfQoSCQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleValue.setDescription('Value of class rule. interface : ifIndex ipv4acl : 2000..3999 ipv6acl : 2000..42767 greater-than : 0..65535 less-than : 0..65535 tcp : 0..65535 udp : 0..65535 mpls(exp-mask) : 1..255 other types: 0. ')
hh3cIfQoSCQClassRuleQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleQueueID.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQClassRuleQueueID.setDescription('Specify the queue for matched packets.')
hh3cIfQoSCQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQClassRowStatus.setDescription('RowStatus.')
hh3cIfQoSCQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSCQApplyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQApplyTable.setDescription('A table of custom queue instance.')
hh3cIfQoSCQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSCQApplyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQApplyEntry.setDescription('Custom queue instance information.')
hh3cIfQoSCQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQApplyListNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQApplyListNumber.setDescription('Custom queue list number.')
hh3cIfQoSCQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCQApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQApplyRowStatus.setDescription('RowStatus.')
hh3cIfQoSCQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2))
hh3cIfQoSCQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoTable.setDescription('A table of custom queue statistic information.')
hh3cIfQoSCQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCQQueueID"))
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoEntry.setDescription('Custom queue statistic information entry.')
hh3cIfQoSCQRunInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoSize.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoSize.setDescription('The number of packets in the custom queue.')
hh3cIfQoSCQRunInfoLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoLength.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoLength.setDescription('The maximum length of custom queue.')
hh3cIfQoSCQRunInfoDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCQRunInfoDiscardPackets.setDescription('The packet number of custom queue discard.')
hh3cIfQoSWFQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4))
hh3cIfQoSWFQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1))
hh3cIfQoSWFQTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSWFQTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQTable.setDescription('A table of weighted fair queue information.')
hh3cIfQoSWFQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWFQEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQEntry.setDescription('Weighted fair queue information entry.')
hh3cIfQoSWFQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQQueueLength.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQQueueLength.setDescription('The length of weighted fair queue.')
hh3cIfQoSWFQQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size16", 1), ("size32", 2), ("size64", 3), ("size128", 4), ("size256", 5), ("size512", 6), ("size1024", 7), ("size2048", 8), ("size4096", 9))).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQQueueNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQQueueNumber.setDescription('The number of weighted fair queue.')
hh3cIfQoSWFQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQRowStatus.setDescription('RowStatus.')
hh3cIfQoSWFQType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-precedence", 1), ("dscp", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWFQType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQType.setDescription('The type of weighted fair queue.')
hh3cIfQoSWFQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2))
hh3cIfQoSWFQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSWFQRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQRunInfoTable.setDescription('A table of weighted fair queue statistic information.')
hh3cIfQoSWFQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWFQRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQRunInfoEntry.setDescription('Weighted fair queue statistic information entry.')
hh3cIfQoSWFQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQSize.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQSize.setDescription('The number of packets in all the queues')
hh3cIfQoSWFQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQLength.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQLength.setDescription('The length of weighted fair queue.')
hh3cIfQoSWFQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQDiscardPackets.setDescription('The number of discarded packets in all the queues.')
hh3cIfQoSWFQHashedActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQHashedActiveQueues.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQHashedActiveQueues.setDescription('The number of active queues.')
hh3cIfQoSWFQHashedMaxActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWFQHashedMaxActiveQueues.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWFQHashedMaxActiveQueues.setDescription('The number of maximum active queues.')
hh3cIfQosWFQhashedTotalQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQosWFQhashedTotalQueues.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQosWFQhashedTotalQueues.setDescription('The number of queues.')
hh3cIfQoSBandwidthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5))
hh3cIfQoSBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1), )
if mibBuilder.loadTexts: hh3cIfQoSBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSBandwidthTable.setDescription('A table of bandwidth of interface information.')
hh3cIfQoSBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSBandwidthEntry.setDescription('Bandwidth information entry.')
hh3cIfQoSMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSMaxBandwidth.setDescription('The maximum bandwidth of interface. Unit : Kbps')
hh3cIfQoSReservedBandwidthPct = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSReservedBandwidthPct.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSReservedBandwidthPct.setDescription('Max reserved bandwidth of the interface for QoS.')
hh3cIfQoSBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSBandwidthRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSBandwidthRowStatus.setDescription('RowStatus.')
hh3cIfQoSQmtokenGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6))
hh3cIfQoSQmtokenTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1), )
if mibBuilder.loadTexts: hh3cIfQoSQmtokenTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQmtokenTable.setDescription('A table of qmtoken information.')
hh3cIfQoSQmtokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSQmtokenEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQmtokenEntry.setDescription('Qmtoken information entry.')
hh3cIfQoSQmtokenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSQmtokenNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQmtokenNumber.setDescription('The number of tokens.')
hh3cIfQoSQmtokenRosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSQmtokenRosStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSQmtokenRosStatus.setDescription('RowStatus')
hh3cIfQoSRTPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7))
hh3cIfQoSRTPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1))
hh3cIfQoSRTPQConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSRTPQConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQConfigTable.setDescription('A table of Real-time protocol queue information.')
hh3cIfQoSRTPQConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSRTPQConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQConfigEntry.setDescription('The information of Real-time protocol queue entry.')
hh3cIfQoSRTPQStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQStartPort.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQStartPort.setDescription('Minimum threshold of UDP destination port.')
hh3cIfQoSRTPQEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQEndPort.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQEndPort.setDescription('Maximum threshold of UDP destination port.')
hh3cIfQoSRTPQReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQReservedBandwidth.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQReservedBandwidth.setDescription('Maximum bandwidth. unit : kbps')
hh3cIfQoSRTPQCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQCbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQCbs.setDescription('Committed Burst Size. Unit: byte')
hh3cIfQoSRTPQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRTPQRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQRowStatus.setDescription('RowStatus.')
hh3cIfQoSRTPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2))
hh3cIfQoSRTPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSRTPQRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQRunInfoTable.setDescription('A table of statistic information of Real-time protocol information.')
hh3cIfQoSRTPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSRTPQRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQRunInfoEntry.setDescription('Statistic information of Real-time protocol information entry.')
hh3cIfQoSRTPQPacketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQPacketNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQPacketNumber.setDescription('The number of packets in the Real-time protocol queue.')
hh3cIfQoSRTPQPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQPacketSize.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQPacketSize.setDescription('The size of Real-time protocol queue.')
hh3cIfQoSRTPQOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQOutputPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQOutputPackets.setDescription('The number of output packets.')
hh3cIfQoSRTPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 7, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSRTPQDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRTPQDiscardPackets.setDescription('The number of discard packets.')
hh3cIfQoSCarListObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8))
hh3cIfQoCarListGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1))
hh3cIfQoSCarlTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSCarlTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCarlTable.setDescription('Committed Access Rate List(CARL) table.')
hh3cIfQoSCarlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSCarlListNum"))
if mibBuilder.loadTexts: hh3cIfQoSCarlEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCarlEntry.setDescription('CARL configuration infomation.')
hh3cIfQoSCarlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSCarlListNum.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCarlListNum.setDescription('The index of the table, which is the CARL number.')
hh3cIfQoSCarlParaType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macAddress", 1), ("precMask", 2), ("dscpMask", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCarlParaType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCarlParaType.setDescription('Parameter type of the CARL number.')
hh3cIfQoSCarlParaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCarlParaValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCarlParaValue.setDescription('Parameter value of the CARL table.')
hh3cIfQoSCarlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 2, 8, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSCarlRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSCarlRowStatus.setDescription('RowStatus.')
hh3cIfQoSLineRateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3))
hh3cIfQoSLRConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1), )
if mibBuilder.loadTexts: hh3cIfQoSLRConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRConfigTable.setDescription('A table of line rate configuration information.')
hh3cIfQoSLRConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSLRDirection"))
if mibBuilder.loadTexts: hh3cIfQoSLRConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRConfigEntry.setDescription('Line rate configuration information entry.')
hh3cIfQoSLRDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cIfQoSLRDirection.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRDirection.setDescription('Line rate on the inbound or outbound of data stream.')
hh3cIfQoSLRCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSLRCir.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRCir.setDescription('Committed Information Rate. Unit: kbps.')
hh3cIfQoSLRCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSLRCbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRCbs.setDescription('Committed Burst Size. Unit: byte')
hh3cIfQoSLREbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSLREbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLREbs.setDescription('Excess Burst Size. Unit: byte.')
hh3cIfQoSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSRowStatus.setDescription('RowStatus.')
hh3cIfQoSLRRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2), )
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoTable.setDescription('A table of line rate run info information.')
hh3cIfQoSLRRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSLRDirection"))
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoEntry.setDescription('Line rate run info information entry.')
hh3cIfQoSLRRunInfoPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoPassedPackets.setDescription('The number of passed packets.')
hh3cIfQoSLRRunInfoPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoPassedBytes.setDescription('The number of passed bytes.')
hh3cIfQoSLRRunInfoDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoDelayedPackets.setDescription('The number of delayed packets.')
hh3cIfQoSLRRunInfoDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoDelayedBytes.setDescription('The number of delayed bytes.')
hh3cIfQoSLRRunInfoActiveShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoActiveShaping.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSLRRunInfoActiveShaping.setDescription('The flag of shaping.')
hh3cIfQoSCARObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4))
hh3cIfQoSAggregativeCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1))
hh3cIfQoSAggregativeCarNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarNextIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarNextIndex.setDescription('This object contains an appropriate value to be used for hh3cIfQoSAggregativeCarIndex when creating rows in the hh3cIfQoSAggregativeCarConfigTable. Begin with 1. ')
hh3cIfQoSAggregativeCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarConfigTable.setDescription('A table of aggregative car information.')
hh3cIfQoSAggregativeCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarConfigEntry.setDescription('Aggregative car information.')
hh3cIfQoSAggregativeCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarIndex.setDescription('The index of aggregative car.')
hh3cIfQoSAggregativeCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarName.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarName.setDescription('The name of aggregative car.')
hh3cIfQoSAggregativeCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarCir.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarCir.setDescription('Committed-information-rate. Unit : kbps')
hh3cIfQoSAggregativeCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarCbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarCbs.setDescription('Committed-burst-size. Unit : byte')
hh3cIfQoSAggregativeCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarEbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarEbs.setDescription('Excess-burst-size. Unit : byte')
hh3cIfQoSAggregativeCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarPir.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarPir.setDescription('Peak-information-rate. Unit : kbps')
hh3cIfQoSAggregativeCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 7), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenActionType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenActionType.setDescription("Supported green action: invalid(0), pass(1), discard(3), remark(4), remark-ip-pass(6), remark-mplsexp-pass(8), remark-dscp-pass(10), Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark-ip-pass(6), remark-mplsexp-pass(8), remark-dscp-pass(10). 'invalid' is returned only when getting value from software QoS. ")
hh3cIfQoSAggregativeCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenActionValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenActionValue.setDescription("The value is to remark When green action is remarking. For remark-dscp-pass, the range is 0~63; For remark-ip-pass and remark-mplsexp-pass, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set. ")
hh3cIfQoSAggregativeCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 9), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowActionType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowActionType.setDescription("Supported yellow action: invalid(0), pass(1), discard(3), remark(4), remark-ip-pass(6), remark-mplsexp-pass(8), remark-dscp-pass(10), Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark-ip-pass(6), remark-mplsexp-pass(8), remark-dscp-pass(10). 'invalid' is returned only when getting value from software QoS. ")
hh3cIfQoSAggregativeCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowActionValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowActionValue.setDescription("The value is to remark When yellow action is remarking. For remark-dscp-pass, the range is 0~63; For remark-ip-pass and remark-mplsexp-pass, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set. ")
hh3cIfQoSAggregativeCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 11), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedActionType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedActionType.setDescription("Supported red action: invalid(0), pass(1), discard(3), remark(4), remark-ip-pass(6), remark-mplsexp-pass(8), remark-dscp-pass(10), Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark-ip-pass(6), remark-mplsexp-pass(8), remark-dscp-pass(10). 'invalid' is returned only when getting value from software QoS. ")
hh3cIfQoSAggregativeCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedActionValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedActionValue.setDescription("The value is to remark When red action is remarking. For remark-dscp-pass, the range is 0~63; For remark-ip-pass and remark-mplsexp-pass, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set. ")
hh3cIfQoSAggregativeCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggregative", 1), ("notAggregative", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarType.setDescription("The type of aggregative CAR. The enumeration 'aggregative' indicates that the ports with a same aggregative CAR use one token bulk. The enumeration 'notAggregative' indicates that each port uses one token bulk. ")
hh3cIfQoSAggregativeCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRowStatus.setDescription('RowStatus.')
hh3cIfQoSAggregativeCarApplyTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyTable.setDescription('A table of aggregative car instance.')
hh3cIfQoSAggregativeCarApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarApplyDirection"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarApplyRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarApplyRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyEntry.setDescription('Aggregative car instance information.')
hh3cIfQoSAggregativeCarApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyDirection.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyDirection.setDescription('Direction.')
hh3cIfQoSAggregativeCarApplyRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRuleType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRuleType.setDescription('The type of class rule.')
hh3cIfQoSAggregativeCarApplyRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRuleValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRuleValue.setDescription('The number of class rule. ipv4acl : 2000..5999 ipv6acl : 2000..42767 carl : 1..16 other types: 0. ')
hh3cIfQoSAggregativeCarApplyCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyCarIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyCarIndex.setDescription('The index of aggregative car.')
hh3cIfQoSAggregativeCarApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarApplyRowStatus.setDescription('RowStatus.')
hh3cIfQoSAggregativeCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRunInfoTable.setDescription('A table of aggregative car statistic information.')
hh3cIfQoSAggregativeCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRunInfoEntry.setDescription('Aggregative car statistic information.')
hh3cIfQoSAggregativeCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenPackets.setDescription('Number of packets conforming CIR.')
hh3cIfQoSAggregativeCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarGreenBytes.setDescription('Number of bytes conforming CIR')
hh3cIfQoSAggregativeCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowPackets.setDescription('Number of yellow packets.')
hh3cIfQoSAggregativeCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarYellowBytes.setDescription('Number of yellow bytes.')
hh3cIfQoSAggregativeCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedPackets.setDescription('Number of packets exceeding CIR.')
hh3cIfQoSAggregativeCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSAggregativeCarRedBytes.setDescription('Number of bytes exceeding CIR.')
hh3cIfQoSTricolorCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2))
hh3cIfQoSTricolorCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarConfigTable.setDescription('A table of tricolor car configuration information.')
hh3cIfQoSTricolorCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarDirection"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarConfigEntry.setDescription('Tricolor car configuration information entry.')
hh3cIfQoSTricolorCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarDirection.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarDirection.setDescription('Direction.')
hh3cIfQoSTricolorCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarType.setDescription('The index of the table, which is the matching type for the packets on interface: ipv4acl, ipv6acl, carl, any.')
hh3cIfQoSTricolorCarValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarValue.setDescription('The index of the table. ipv4acl: the number is ipv4 acl number; ipv6acl: the number is ipv6 acl number; carl: the number is CARL number; any: the number is 0; ')
hh3cIfQoSTricolorCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarCir.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarCir.setDescription('Committed Information Rate. Unit: kbps.')
hh3cIfQoSTricolorCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarCbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarCbs.setDescription('Committed Burst Size. Unit: byte.')
hh3cIfQoSTricolorCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarEbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarEbs.setDescription('Excess Burst Size. Unit: byte.')
hh3cIfQoSTricolorCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarPir.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarPir.setDescription('Peak Information Rate. Unit: kbps.')
hh3cIfQoSTricolorCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 8), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenActionType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenActionType.setDescription('Green Action.')
hh3cIfQoSTricolorCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenActionValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenActionValue.setDescription("The value is to remark when green action is remarking. For remark-dscp-continue and remark-dscp-pass, the range is 0~63; For remark-ip-continue and remark-ip-pass and remark-mplsexp-continue and remark-mplsexp-pass and remark-dot1p-continue and remark-dot1p-pass, the range is 0~7; For remark-fr-de-continue and remark-fr-de-pass and remark-atm-clp-continue and remark-atm-clp-pass, the range is 0~1. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set. ")
hh3cIfQoSTricolorCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 10), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowActionType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowActionType.setDescription('Yellow Action.')
hh3cIfQoSTricolorCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowActionValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowActionValue.setDescription("The value is to remark when yellow action is remarking. For remark-dscp-continue and remark-dscp-pass, the range is 0~63; For remark-ip-continue and remark-ip-pass and remark-mplsexp-continue and remark-mplsexp-pass and remark-dot1p-continue and remark-dot1p-pass, the range is 0~7; For remark-fr-de-continue and remark-fr-de-pass and remark-atm-clp-continue and remark-atm-clp-pass, the range is 0~1. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set. ")
hh3cIfQoSTricolorCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 12), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedActionType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedActionType.setDescription('Red Action')
hh3cIfQoSTricolorCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedActionValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedActionValue.setDescription("The value is to remark when red action is remarking. For remark-dscp-continue and remark-dscp-pass, the range is 0~63; For remark-ip-continue and remark-ip-pass and remark-mplsexp-continue and remark-mplsexp-pass and remark-dot1p-continue and remark-dot1p-pass, the range is 0~7; For remark-fr-de-continue and remark-fr-de-pass and remark-atm-clp-continue and remark-atm-clp-pass, the range is 0~1. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set. ")
hh3cIfQoSTricolorCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRowStatus.setDescription('RowStatus.')
hh3cIfQoSTricolorCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2), )
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRunInfoTable.setDescription('A table of tricolor car statistic information.')
hh3cIfQoSTricolorCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarDirection"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRunInfoEntry.setDescription('Tricolor car statistic information entry.')
hh3cIfQoSTricolorCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenPackets.setDescription('The number of green packets.')
hh3cIfQoSTricolorCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarGreenBytes.setDescription('The number of green bytes.')
hh3cIfQoSTricolorCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowPackets.setDescription('The number of yellow packets.')
hh3cIfQoSTricolorCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarYellowBytes.setDescription('The number of yellow bytes.')
hh3cIfQoSTricolorCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedPackets.setDescription('The number of red packets.')
hh3cIfQoSTricolorCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 4, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSTricolorCarRedBytes.setDescription('The number of red bytes.')
hh3cIfQoSGTSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5))
hh3cIfQoSGTSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1), )
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigTable.setDescription('A table of generic traffic shaping information.')
hh3cIfQoSGTSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigEntry.setDescription('Generic traffic shaping information entry.')
hh3cIfQoSGTSClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("queue", 4))))
if mibBuilder.loadTexts: hh3cIfQoSGTSClassRuleType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSClassRuleType.setDescription('The index of the table, which is the matching type for the packets on interface: ipv4acl, ipv6acl, any, queue. ')
hh3cIfQoSGTSClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSGTSClassRuleValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSClassRuleValue.setDescription('Value of type. ipv4acl : 2000..4999 ipv6acl : 2000..42767 any : 0 queue : 0..7 ')
hh3cIfQoSGTSCir = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSCir.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSCir.setDescription('Committed Information Rate. Unit: kbps.')
hh3cIfQoSGTSCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSCbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSCbs.setDescription('Committed Burst Size. Unit: byte.')
hh3cIfQoSGTSEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSEbs.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSEbs.setDescription('Excess Burst Size. Unit: byte.')
hh3cIfQoSGTSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSQueueLength.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSQueueLength.setDescription('The length of queue.')
hh3cIfQoSGTSConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSConfigRowStatus.setDescription('RowStatus.')
hh3cIfQoSGTSRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2), )
if mibBuilder.loadTexts: hh3cIfQoSGTSRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSRunInfoTable.setDescription("A table of generic traffic shaping's statistic information.")
hh3cIfQoSGTSRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleType"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: hh3cIfQoSGTSRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSRunInfoEntry.setDescription("Generic traffic shaping's statistic information entry.")
hh3cIfQoSGTSQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSQueueSize.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSQueueSize.setDescription('The number of packets in the queue.')
hh3cIfQoSGTSPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSPassedPackets.setDescription('The number of passed packets.')
hh3cIfQoSGTSPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSPassedBytes.setDescription('The number of passed bytes.')
hh3cIfQoSGTSDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDiscardPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSDiscardPackets.setDescription('The number of discard packets.')
hh3cIfQoSGTSDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDiscardBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSDiscardBytes.setDescription('The number of discard bytes.')
hh3cIfQoSGTSDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSDelayedPackets.setDescription('The number of delayed packets.')
hh3cIfQoSGTSDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 5, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSGTSDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSGTSDelayedBytes.setDescription('The number of delayed bytes.')
hh3cIfQoSWREDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6))
hh3cIfQoSWredGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1))
hh3cIfQoSWredGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupNextIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupNextIndex.setDescription('This object contains an appropriate value to be used for hh3cIfQoSWredGroupIndex when creating rows in the hh3cIfQoSWredGroupTable. Begin with 0. ')
hh3cIfQoSWredGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSWredGroupTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupTable.setDescription('A table of WRED group information.')
hh3cIfQoSWredGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupEntry.setDescription('WRED group information.')
hh3cIfQoSWredGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSWredGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupIndex.setDescription('WRED group index.')
hh3cIfQoSWredGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupName.setDescription('WRED group name.')
hh3cIfQoSWredGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("userdefined", 0), ("dot1p", 1), ("ippre", 2), ("dscp", 3), ("localpre", 4), ("atmclp", 5), ("frde", 6), ("exp", 7), ("queue", 8), ("dropLevel", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupType.setDescription('Type of WRED group.')
hh3cIfQoSWredGroupWeightingConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupWeightingConstant.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupWeightingConstant.setDescription("Exponent for WRED calculates the average length of queue. If 'hh3cIfQoSWredGroupType' is 'queue', the object is ineffective. So, it must use the object, which is 'hh3cIfQoSWredGroupExponent' of hh3cIfQoSWredGroupContentTable, to indicate the exponent of each queue of the queue WRED group.")
hh3cIfQoSWredGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupRowStatus.setDescription('RowStatus.')
hh3cIfQoSWredGroupContentTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentTable.setDescription('A table of priority WRED information.')
hh3cIfQoSWredGroupContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentEntry.setDescription('Priority WRED information entry.')
hh3cIfQoSWredGroupContentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentIndex.setDescription('The priority of a packet. Different type of packet has different priority. Type of priority Range of priority dot1p 0..7 ippre 0..7 dscp 0..63 atmclp 0..1 frde 0..1 exp 0..7 queue 0..7 ( defined by product ) dropLevel 0..2 ')
hh3cIfQoSWredGroupContentSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentSubIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupContentSubIndex.setDescription('The sub index. Different type of packet has different value. Type of priority Range of value queue 0..2 other types : 0 ')
hh3cIfQoSWredLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredLowLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredLowLimit.setDescription('Discard low limit.')
hh3cIfQoSWredHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredHighLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredHighLimit.setDescription('Discard high limit.')
hh3cIfQoSWredDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredDiscardProb.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredDiscardProb.setDescription('Discard probability.')
hh3cIfQoSWredGroupExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupExponent.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupExponent.setDescription("Exponent for WRED calculates the average length of queue. Only 'hh3cIfQoSWredGroupType' is 'queue', the object is effective. This object is designed to indicate the exponent of each queue of the queue WRED group. ")
hh3cIfQoSWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredRowStatus.setDescription('RowStatus.')
hh3cIfQoSWredGroupApplyIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4), )
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIfTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIfTable.setDescription('A table of WRED group applied interface information.')
hh3cIfQoSWredGroupApplyIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIfEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIfEntry.setDescription('WRED group applied interface information.')
hh3cIfQoSWredGroupApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyIndex.setDescription('WRED group index.')
hh3cIfQoSWredGroupApplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyName.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupApplyName.setDescription('WRED group name.')
hh3cIfQoSWredGroupIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSWredGroupIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredGroupIfRowStatus.setDescription('RowStatus.')
hh3cIfQoSWredApplyIfRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5), )
if mibBuilder.loadTexts: hh3cIfQoSWredApplyIfRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredApplyIfRunInfoTable.setDescription('A table of WRED statistic information.')
hh3cIfQoSWredApplyIfRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: hh3cIfQoSWredApplyIfRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredApplyIfRunInfoEntry.setDescription('WRED statistic information.')
hh3cIfQoSWredPreRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredPreRandomDropNum.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredPreRandomDropNum.setDescription('The number of random drop.')
hh3cIfQoSWredPreTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWredPreTailDropNum.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWredPreTailDropNum.setDescription('The number of tail drop.')
hh3cIfQoSPortWredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2))
hh3cIfQoSPortWredWeightConstantTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantTable.setDescription('A table of port WRED configuration information.')
hh3cIfQoSPortWredWeightConstantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantEntry.setDescription('Port WRED configuration information entry.')
hh3cIfQoSPortWredEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredEnable.setDescription('The object is used to enable or disable WRED function of the port. true: Enable WRED function of a port. false: Disable WRED function of a port. ')
hh3cIfQoSPortWredWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstant.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstant.setDescription('Weight constant.')
hh3cIfQoSPortWredWeightConstantRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredWeightConstantRowStatus.setDescription('RowStatus.')
hh3cIfQoSPortWredPreConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreConfigTable.setDescription('A table of weighted random early detect precedence configuration information.')
hh3cIfQoSPortWredPreConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPortWredPreID"))
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreConfigEntry.setDescription('Weighted random early detect precedence configuration information entry.')
hh3cIfQoSPortWredPreID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreID.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreID.setDescription('IP precedence, from 0 to 7.')
hh3cIfQoSPortWredPreLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreLowLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreLowLimit.setDescription('Low Limit(number of packets)')
hh3cIfQoSPortWredPreHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreHighLimit.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreHighLimit.setDescription('High limit(number of packets)')
hh3cIfQoSPortWredPreDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreDiscardProbability.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreDiscardProbability.setDescription('Discard probability denominator')
hh3cIfQoSPortWredPreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredPreRowStatus.setDescription('RowStatus.')
hh3cIfQoSPortWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3), )
if mibBuilder.loadTexts: hh3cIfQoSPortWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredRunInfoTable.setDescription('A table of WRED statistic information.')
hh3cIfQoSPortWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPortWredPreID"))
if mibBuilder.loadTexts: hh3cIfQoSPortWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortWredRunInfoEntry.setDescription('WRED statistic information entry.')
hh3cIfQoSWREDTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWREDTailDropNum.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWREDTailDropNum.setDescription('The number of tail drop.')
hh3cIfQoSWREDRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSWREDRandomDropNum.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSWREDRandomDropNum.setDescription('The number of random drop.')
hh3cIfQoSPortPriorityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7))
hh3cIfQoSPortPriorityConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1))
hh3cIfQoSPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTable.setDescription('A table of priority of port information.')
hh3cIfQoSPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityEntry.setDescription('The priority of port information entry.')
hh3cIfQoSPortPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityValue.setDescription('The priority of port.')
hh3cIfQoSPortPirorityTrustTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPortPirorityTrustTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortPirorityTrustTable.setDescription('A table of the trust-priority of port information.')
hh3cIfQoSPortPirorityTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortPirorityTrustEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortPirorityTrustEntry.setDescription('Trust-priority of port information entry.')
hh3cIfQoSPortPriorityTrustTrustType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("untrust", 1), ("dot1p", 2), ("dscp", 3), ("exp", 4))).clone('untrust')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTrustTrustType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTrustTrustType.setDescription('The trust type of port.')
hh3cIfQoSPortPriorityTrustOvercastType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOvercast", 1), ("overcastDSCP", 2), ("overcastCOS", 3))).clone('noOvercast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTrustOvercastType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortPriorityTrustOvercastType.setDescription('The overcast type.')
hh3cIfQoSMapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9))
hh3cIfQoSPriMapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1))
hh3cIfQoSPriMapGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupNextIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupNextIndex.setDescription('This object contains an appropriate value to be used for hh3cIfQoSPriMapGroupIndex when creating rows in the hh3cIfQoSPriMapGroupTable. Begin with 64. ')
hh3cIfQoSPriMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2), )
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupTable.setDescription('A table of map group information.')
hh3cIfQoSPriMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPriMapGroupIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupEntry.setDescription('Map group information entry.')
hh3cIfQoSPriMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupIndex.setDescription('The index of map, which are defined by system and user. The index of system defined map is 1 to 9. System defined map-name/map-index pairs like this: Map-index Map-name 1 dot1p-dp 2 dot1p-dscp 3 dot1p-lp 4 dscp-dot1p 5 dscp-dp 6 dscp-dscp 7 dscp-lp 8 exp-dp 9 exp-lp ')
hh3cIfQoSPriMapGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("userdefined", 1), ("dot1p-dp", 2), ("dot1p-dscp", 3), ("dot1p-lp", 4), ("dscp-dot1p", 5), ("dscp-dp", 6), ("dscp-dscp", 7), ("dscp-lp", 8), ("exp-dp", 9), ("exp-lp", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupType.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupType.setDescription('The type of map group.')
hh3cIfQoSPriMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupName.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupName.setDescription('The name of map group.')
hh3cIfQoSPriMapGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupRowStatus.setDescription('RowStatus.')
hh3cIfQoSPriMapContentTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3), )
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentTable.setDescription('A table of priority map configuration information.')
hh3cIfQoSPriMapContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1), ).setIndexNames((0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPriMapGroupIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cIfQoSPriMapGroupImportValue"))
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentEntry.setDescription('Priority map configuration information entry.')
hh3cIfQoSPriMapGroupImportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupImportValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupImportValue.setDescription('Priority map table import value list. Different map has different hh3cIfQoSPriMapConfigImportValue. Map-name Range of hh3cIfQoSPriMapConfigImportValue dot1p-dp (0..7) dot1p-dscp (0..7) dot1p-lp (0..7) dscp-dot1p (0..63) dscp-dp (0..63) dscp-dscp (0..63) dscp-lp(7) (0..63) exp-dp(8) (0..7) exp-lp (0..7) ')
hh3cIfQoSPriMapGroupExportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupExportValue.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapGroupExportValue.setDescription('Priority map table output. Different map has different hh3cIfQoSPriMapGroupExportValue. dot1p-dp: 0..7 dot1p-dscp: 0..63 dot1p-lp: 0..7 dscp-dot1p: 0..7 dscp-dp: 0..7 dscp-dscp: 0..63 dscp-lp: 0..7 exp-dp: 0..7 exp-lp: 0..7 ')
hh3cIfQoSPriMapContentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 9, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPriMapContentRowStatus.setDescription('RowStatus.')
hh3cIfQoSL3PlusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10))
hh3cIfQoSPortBindingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1))
hh3cIfQoSPortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1), )
if mibBuilder.loadTexts: hh3cIfQoSPortBindingTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortBindingTable.setDescription('A table of EACL sub-interface binding information for L3+ board .')
hh3cIfQoSPortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cIfQoSPortBindingEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSPortBindingEntry.setDescription('Binding information entry.')
hh3cIfQoSBindingIf = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSBindingIf.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSBindingIf.setDescription('The binding interface.')
hh3cIfQoSBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 10, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIfQoSBindingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIfQoSBindingRowStatus.setDescription('RowStatus')
hh3cQoSTraStaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11))
hh3cQoSTraStaConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1))
hh3cQoSIfTraStaConfigInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1), )
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigInfoTable.setDescription('A table of traffic statistics configuration information.')
hh3cQoSIfTraStaConfigInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaConfigDirection"))
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigInfoEntry.setDescription('An entry of interface traffic statistics configuration information.')
hh3cQoSIfTraStaConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDirection.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDirection.setDescription('The direction of the traffic statistics.')
hh3cQoSIfTraStaConfigQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigQueue.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigQueue.setDescription("The bitmap of Queue ID. The octet specifies queues 0 through 7. If a bit has a value of '1', the corresponding queue is configured in the set of Queues; if a bit has a value of '0', the corresponding queue is not configured.")
hh3cQoSIfTraStaConfigDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDot1p.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDot1p.setDescription("The bitmap of Dot1p value. The octet specifies Dot1p values 0 through 7. If a bit has a value of '1', the corresponding Dot1p value is configured in the set of Dot1p values; if a bit has a value of '0', the corresponding Dot1p value is not configured.")
hh3cQoSIfTraStaConfigDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDscp.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigDscp.setDescription("The bitmap of Dscp value. Each octet within this value specifies a set of eight Dscp values, with the first octet specifying Dscp values 0 through 7, the second octet specifying Dscp values 8 through 15, etc. If a bit has a value of '1', the corresponding Dscp value is configured in the set of Dscp values; if a bit has a value of '0', the corresponding Dscp value is not configured.")
hh3cQoSIfTraStaConfigVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigVlan.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigVlan.setDescription("The bitmap of VLAN ID. Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 0 through 7, the second octet specifying VLANs 8 through 15, etc. If a bit has a value of '1', the corresponding VLAN is configured in the set of VLANs; if a bit has a value of '0', the corresponding VLAN is not configured.")
hh3cQoSIfTraStaConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaConfigStatus.setDescription('The row status of this table entry.')
hh3cQoSTraStaRunGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2))
hh3cQoSIfTraStaRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1), )
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunInfoTable.setDescription('A table of traffic statistics running information.')
hh3cQoSIfTraStaRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaRunObjectType"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaRunObjectValue"), (0, "HH3C-IFQOS2-MIB", "hh3cQoSIfTraStaRunDirection"))
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunInfoEntry.setDescription('An entry of interface traffic statistics running information.')
hh3cQoSIfTraStaRunObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("queue", 1), ("dot1p", 2), ("dscp", 3), ("vlanID", 4))))
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunObjectType.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunObjectType.setDescription('Type of statistics object.')
hh3cQoSIfTraStaRunObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunObjectValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunObjectValue.setDescription('Value range for the object type: for Queue: 0~7 for Dot1p: 0~7 for Dscp: 0~63 for VlanID: 1~4094 ')
hh3cQoSIfTraStaRunDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 3), Direction())
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDirection.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDirection.setDescription('The direction of the traffic statistics.')
hh3cQoSIfTraStaRunPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassPackets.setDescription('Number of passed packets.')
hh3cQoSIfTraStaRunDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDropPackets.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDropPackets.setDescription('Number of dropped packets.')
hh3cQoSIfTraStaRunPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassBytes.setDescription('Number of passed bytes.')
hh3cQoSIfTraStaRunDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDropBytes.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunDropBytes.setDescription('Number of dropped bytes.')
hh3cQoSIfTraStaRunPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassPPS.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassPPS.setDescription('PPS (packets per second) of passed packets.')
hh3cQoSIfTraStaRunPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 65, 1, 11, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassBPS.setStatus('current')
if mibBuilder.loadTexts: hh3cQoSIfTraStaRunPassBPS.setDescription('BPS (bytes per second) of passed packets.')
mibBuilder.exportSymbols("HH3C-IFQOS2-MIB", hh3cIfQoSWredDropLPreNTcpBPS=hh3cIfQoSWredDropLPreNTcpBPS, hh3cQoSIfTraStaRunPassBytes=hh3cQoSIfTraStaRunPassBytes, hh3cIfQoSWredDropHPreNTcpBytes=hh3cIfQoSWredDropHPreNTcpBytes, hh3cIfQoSQSModeTable=hh3cIfQoSQSModeTable, hh3cIfQoSWredGroupTable=hh3cIfQoSWredGroupTable, hh3cIfQoSAggregativeCarApplyTable=hh3cIfQoSAggregativeCarApplyTable, hh3cIfQoSWredPreTailDropNum=hh3cIfQoSWredPreTailDropNum, hh3cIfQoSWredDropBPS=hh3cIfQoSWredDropBPS, hh3cIfQoSPortWredPreDiscardProbability=hh3cIfQoSPortWredPreDiscardProbability, hh3cIfQoSCQQueueLengthEntry=hh3cIfQoSCQQueueLengthEntry, hh3cIfQoSWFQRunInfoGroup=hh3cIfQoSWFQRunInfoGroup, hh3cIfQoSWredGroupContentTable=hh3cIfQoSWredGroupContentTable, hh3cIfQoSPortWredPreHighLimit=hh3cIfQoSPortWredPreHighLimit, hh3cIfQoSGTSRunInfoTable=hh3cIfQoSGTSRunInfoTable, hh3cIfQoSTricolorCarConfigEntry=hh3cIfQoSTricolorCarConfigEntry, hh3cIfQoSGTSPassedPackets=hh3cIfQoSGTSPassedPackets, hh3cIfQoSPQQueueLengthValue=hh3cIfQoSPQQueueLengthValue, hh3cIfQoSPriMapGroupName=hh3cIfQoSPriMapGroupName, hh3cIfQoSPortBindingTable=hh3cIfQoSPortBindingTable, hh3cIfQoSWredGroupContentEntry=hh3cIfQoSWredGroupContentEntry, hh3cIfQoSTricolorCarRunInfoTable=hh3cIfQoSTricolorCarRunInfoTable, hh3cIfQoSFIFOConfigTable=hh3cIfQoSFIFOConfigTable, hh3cIfQoSCQQueueLengthTable=hh3cIfQoSCQQueueLengthTable, hh3cIfQoSWFQType=hh3cIfQoSWFQType, hh3cIfQoSPQClassRuleEntry=hh3cIfQoSPQClassRuleEntry, hh3cIfQoSWredLowLimit=hh3cIfQoSWredLowLimit, hh3cIfQoSTailDropBPS=hh3cIfQoSTailDropBPS, hh3cIfQoSLRRunInfoPassedPackets=hh3cIfQoSLRRunInfoPassedPackets, hh3cIfQoSGTSRunInfoEntry=hh3cIfQoSGTSRunInfoEntry, hh3cIfQoSCarlRowStatus=hh3cIfQoSCarlRowStatus, hh3cIfQoSTricolorCarCbs=hh3cIfQoSTricolorCarCbs, hh3cIfQoSRTPQRunInfoTable=hh3cIfQoSRTPQRunInfoTable, hh3cIfQoSCurQueuePkts=hh3cIfQoSCurQueuePkts, hh3cIfQoSQSWeightEntry=hh3cIfQoSQSWeightEntry, hh3cIfQoSWFQHashedActiveQueues=hh3cIfQoSWFQHashedActiveQueues, hh3cIfQoSLRConfigEntry=hh3cIfQoSLRConfigEntry, hh3cIfQoSRTPQPacketSize=hh3cIfQoSRTPQPacketSize, hh3cIfQoSCarlTable=hh3cIfQoSCarlTable, hh3cIfQoSWredGroupApplyIndex=hh3cIfQoSWredGroupApplyIndex, hh3cIfQoCarListGroup=hh3cIfQoCarListGroup, hh3cIfQoSCQQueueLength=hh3cIfQoSCQQueueLength, hh3cIfQoSAggregativeCarConfigEntry=hh3cIfQoSAggregativeCarConfigEntry, hh3cIfQoSCQRunInfoSize=hh3cIfQoSCQRunInfoSize, hh3cIfQoSPassBPS=hh3cIfQoSPassBPS, hh3cIfQoSCQRunInfoGroup=hh3cIfQoSCQRunInfoGroup, hh3cIfQoSRTPQCbs=hh3cIfQoSRTPQCbs, hh3cIfQoSQueueGroupType=hh3cIfQoSQueueGroupType, hh3cIfQoSPortBindingGroup=hh3cIfQoSPortBindingGroup, hh3cIfQoSAggregativeCarCbs=hh3cIfQoSAggregativeCarCbs, hh3cQoSIfTraStaConfigQueue=hh3cQoSIfTraStaConfigQueue, hh3cIfQoSPriMapGroupRowStatus=hh3cIfQoSPriMapGroupRowStatus, hh3cIfQoSWredDropHPreTcpPPS=hh3cIfQoSWredDropHPreTcpPPS, hh3cIfQoSWredDropHPreTcpBPS=hh3cIfQoSWredDropHPreTcpBPS, hh3cIfQosWFQhashedTotalQueues=hh3cIfQosWFQhashedTotalQueues, hh3cIfQoSGTSClassRuleType=hh3cIfQoSGTSClassRuleType, hh3cIfQoSLRRunInfoPassedBytes=hh3cIfQoSLRRunInfoPassedBytes, hh3cIfQoSFIFOObject=hh3cIfQoSFIFOObject, hh3cIfQoSPQClassRuleTable=hh3cIfQoSPQClassRuleTable, hh3cIfQoSGTSDelayedBytes=hh3cIfQoSGTSDelayedBytes, hh3cIfQoSAggregativeCarPir=hh3cIfQoSAggregativeCarPir, hh3cQoSIfTraStaRunDropPackets=hh3cQoSIfTraStaRunDropPackets, hh3cIfQoSPQConfigGroup=hh3cIfQoSPQConfigGroup, hh3cIfQoSTricolorCarRedActionValue=hh3cIfQoSTricolorCarRedActionValue, hh3cIfQoSSoftwareQueueObjects=hh3cIfQoSSoftwareQueueObjects, hh3cIfQoSPQApplyListNumber=hh3cIfQoSPQApplyListNumber, hh3cIfQoSLineRateObjects=hh3cIfQoSLineRateObjects, hh3cIfQoSHardwareQueueRunInfoEntry=hh3cIfQoSHardwareQueueRunInfoEntry, hh3cQoSIfTraStaConfigDot1p=hh3cQoSIfTraStaConfigDot1p, hh3cIfQoSPortWredRunInfoTable=hh3cIfQoSPortWredRunInfoTable, hh3cIfQoSPQListNumber=hh3cIfQoSPQListNumber, hh3cIfQoSAggregativeCarConfigTable=hh3cIfQoSAggregativeCarConfigTable, hh3cIfQoSRowStatus=hh3cIfQoSRowStatus, hh3cIfQoSTricolorCarDirection=hh3cIfQoSTricolorCarDirection, hh3cIfQoSWredDropLPreTcpPPS=hh3cIfQoSWredDropLPreTcpPPS, hh3cIfQoSPQApplyEntry=hh3cIfQoSPQApplyEntry, hh3cIfQoSRTPQRowStatus=hh3cIfQoSRTPQRowStatus, hh3cIfQoSCurQueuePPS=hh3cIfQoSCurQueuePPS, hh3cIfQoSCARObjects=hh3cIfQoSCARObjects, hh3cIfQoSPortWredPreConfigEntry=hh3cIfQoSPortWredPreConfigEntry, hh3cQoSIfTraStaConfigDirection=hh3cQoSIfTraStaConfigDirection, hh3cIfQoSAggregativeCarGroup=hh3cIfQoSAggregativeCarGroup, hh3cIfQoSTricolorCarRedActionType=hh3cIfQoSTricolorCarRedActionType, hh3cIfQoSAggregativeCarApplyEntry=hh3cIfQoSAggregativeCarApplyEntry, hh3cIfQoSCQClassRowStatus=hh3cIfQoSCQClassRowStatus, hh3cIfQoSGTSObjects=hh3cIfQoSGTSObjects, hh3cIfQoSAggregativeCarRowStatus=hh3cIfQoSAggregativeCarRowStatus, hh3cIfQoSRTPQReservedBandwidth=hh3cIfQoSRTPQReservedBandwidth, hh3cIfQoSGTSQueueLength=hh3cIfQoSGTSQueueLength, hh3cIfQoSGTSDiscardBytes=hh3cIfQoSGTSDiscardBytes, hh3cIfQoSTailDropBytes=hh3cIfQoSTailDropBytes, hh3cIfQoSMapObjects=hh3cIfQoSMapObjects, hh3cQoSIfTraStaRunPassPackets=hh3cQoSIfTraStaRunPassPackets, hh3cIfQoSWredDropHPreNTcpPkts=hh3cIfQoSWredDropHPreNTcpPkts, hh3cIfQoSAggregativeCarName=hh3cIfQoSAggregativeCarName, hh3cIfQoSWREDTailDropNum=hh3cIfQoSWREDTailDropNum, hh3cIfQoSPortPriorityTrustTrustType=hh3cIfQoSPortPriorityTrustTrustType, hh3cIfQoSPortWredEnable=hh3cIfQoSPortWredEnable, hh3cIfQoSWredRowStatus=hh3cIfQoSWredRowStatus, hh3cIfQoSWredGroupGroup=hh3cIfQoSWredGroupGroup, hh3cQoSTraStaConfigGroup=hh3cQoSTraStaConfigGroup, hh3cIfQoSPQClassRuleQueueType=hh3cIfQoSPQClassRuleQueueType, hh3cIfQoSHQueueTcpRunInfoEntry=hh3cIfQoSHQueueTcpRunInfoEntry, hh3cIfQoSAggregativeCarYellowBytes=hh3cIfQoSAggregativeCarYellowBytes, hh3cIfQoSQmtokenEntry=hh3cIfQoSQmtokenEntry, hh3cIfQoSFIFOMaxQueueLen=hh3cIfQoSFIFOMaxQueueLen, hh3cIfQoSCarlParaValue=hh3cIfQoSCarlParaValue, hh3cIfQoSPQSize=hh3cIfQoSPQSize, hh3cIfQoSQueueLengthInBytes=hh3cIfQoSQueueLengthInBytes, hh3cQoSTraStaObjects=hh3cQoSTraStaObjects, hh3cIfQoSAggregativeCarGreenBytes=hh3cIfQoSAggregativeCarGreenBytes, hh3cIfQoSPriMapGroupNextIndex=hh3cIfQoSPriMapGroupNextIndex, hh3cIfQoSPQApplyTable=hh3cIfQoSPQApplyTable, hh3cIfQoSAggregativeCarGreenPackets=hh3cIfQoSAggregativeCarGreenPackets, hh3cIfQoSFIFORunInfoTable=hh3cIfQoSFIFORunInfoTable, hh3cIfQoSGTSCir=hh3cIfQoSGTSCir, hh3cQoSIfTraStaConfigInfoEntry=hh3cQoSIfTraStaConfigInfoEntry, hh3cIfQoSPQClassRuleValue=hh3cIfQoSPQClassRuleValue, hh3cIfQoSTricolorCarGreenActionType=hh3cIfQoSTricolorCarGreenActionType, hh3cIfQoSWredGroupApplyIfTable=hh3cIfQoSWredGroupApplyIfTable, hh3cIfQoSCQQueueID=hh3cIfQoSCQQueueID, hh3cIfQoSWredDropPkts=hh3cIfQoSWredDropPkts, hh3cIfQoSAggregativeCarYellowPackets=hh3cIfQoSAggregativeCarYellowPackets, hh3cIfQos2=hh3cIfQos2, hh3cIfQoSHardwareQueueConfigGroup=hh3cIfQoSHardwareQueueConfigGroup, hh3cIfQoSHardwareQueueRunInfoGroup=hh3cIfQoSHardwareQueueRunInfoGroup, hh3cIfQoSTricolorCarYellowActionType=hh3cIfQoSTricolorCarYellowActionType, hh3cIfQoSWredGroupRowStatus=hh3cIfQoSWredGroupRowStatus, hh3cIfQoSWredApplyIfRunInfoTable=hh3cIfQoSWredApplyIfRunInfoTable, hh3cIfQoSRTPQDiscardPackets=hh3cIfQoSRTPQDiscardPackets, hh3cIfQoSWFQQueueLength=hh3cIfQoSWFQQueueLength, hh3cIfQoSPortWredWeightConstantRowStatus=hh3cIfQoSPortWredWeightConstantRowStatus, hh3cIfQoSPortWredPreLowLimit=hh3cIfQoSPortWredPreLowLimit, hh3cIfQoSPassBytes=hh3cIfQoSPassBytes, hh3cQoSTraStaRunGroup=hh3cQoSTraStaRunGroup, hh3cIfQoSCQApplyRowStatus=hh3cIfQoSCQApplyRowStatus, hh3cIfQoSCarlParaType=hh3cIfQoSCarlParaType, hh3cIfQoSWFQQueueNumber=hh3cIfQoSWFQQueueNumber, hh3cIfQoSWFQLength=hh3cIfQoSWFQLength, hh3cIfQoSPortWredWeightConstant=hh3cIfQoSPortWredWeightConstant, hh3cIfQoSLRCbs=hh3cIfQoSLRCbs, hh3cIfQoSWREDObjects=hh3cIfQoSWREDObjects, hh3cIfQoSAggregativeCarRunInfoTable=hh3cIfQoSAggregativeCarRunInfoTable, hh3cIfQoSLRRunInfoTable=hh3cIfQoSLRRunInfoTable, hh3cIfQoSPQQueueLengthEntry=hh3cIfQoSPQQueueLengthEntry, hh3cIfQoSRTPQOutputPackets=hh3cIfQoSRTPQOutputPackets, hh3cIfQoSWREDRandomDropNum=hh3cIfQoSWREDRandomDropNum, hh3cIfQoSQSType=hh3cIfQoSQSType, hh3cIfQoSLRCir=hh3cIfQoSLRCir, hh3cIfQoSLRRunInfoDelayedPackets=hh3cIfQoSLRRunInfoDelayedPackets, hh3cIfQoSPortWredRunInfoEntry=hh3cIfQoSPortWredRunInfoEntry, hh3cIfQoSCQDefaultQueueID=hh3cIfQoSCQDefaultQueueID, hh3cIfQoSHardwareQueueRunInfoTable=hh3cIfQoSHardwareQueueRunInfoTable, hh3cIfQoSCQQueueServing=hh3cIfQoSCQQueueServing, hh3cIfQoSWFQTable=hh3cIfQoSWFQTable, hh3cIfQoSReservedBandwidthPct=hh3cIfQoSReservedBandwidthPct, hh3cIfQoSAggregativeCarCir=hh3cIfQoSAggregativeCarCir, hh3cIfQoSPQRunInfoGroup=hh3cIfQoSPQRunInfoGroup, hh3cIfQoSFIFODiscardPackets=hh3cIfQoSFIFODiscardPackets, hh3cIfQoSTricolorCarGreenBytes=hh3cIfQoSTricolorCarGreenBytes, hh3cIfQoSCQRunInfoDiscardPackets=hh3cIfQoSCQRunInfoDiscardPackets, hh3cIfQoSMaxBandwidth=hh3cIfQoSMaxBandwidth, hh3cIfQoSAggregativeCarType=hh3cIfQoSAggregativeCarType, hh3cIfQoSWFQDiscardPackets=hh3cIfQoSWFQDiscardPackets, hh3cIfQoSRTPQPacketNumber=hh3cIfQoSRTPQPacketNumber, hh3cIfQoSTricolorCarRunInfoEntry=hh3cIfQoSTricolorCarRunInfoEntry, hh3cIfQoSWredGroupApplyName=hh3cIfQoSWredGroupApplyName, hh3cIfQoSTricolorCarEbs=hh3cIfQoSTricolorCarEbs, hh3cIfQoSGTSDelayedPackets=hh3cIfQoSGTSDelayedPackets, hh3cIfQoSWredDropLPreTcpPkts=hh3cIfQoSWredDropLPreTcpPkts, hh3cIfQoSCQApplyEntry=hh3cIfQoSCQApplyEntry, hh3cIfQoSPortWredPreRowStatus=hh3cIfQoSPortWredPreRowStatus, hh3cIfQoSCQDefaultEntry=hh3cIfQoSCQDefaultEntry, hh3cIfQoSQSMaxDelay=hh3cIfQoSQSMaxDelay, hh3cIfQoSPortWredWeightConstantEntry=hh3cIfQoSPortWredWeightConstantEntry, hh3cIfQoSCQClassRuleType=hh3cIfQoSCQClassRuleType, hh3cIfQoSTricolorCarGreenPackets=hh3cIfQoSTricolorCarGreenPackets, hh3cIfQoSCQObject=hh3cIfQoSCQObject, hh3cIfQoSPQApplyRowStatus=hh3cIfQoSPQApplyRowStatus, hh3cIfQoSWredDropHPreTcpBytes=hh3cIfQoSWredDropHPreTcpBytes, hh3cIfQoSCarlEntry=hh3cIfQoSCarlEntry, hh3cIfQoSWredGroupContentSubIndex=hh3cIfQoSWredGroupContentSubIndex, hh3cIfQoSTricolorCarRedPackets=hh3cIfQoSTricolorCarRedPackets, hh3cIfQoSQSWeightTable=hh3cIfQoSQSWeightTable, hh3cQoSIfTraStaRunPassBPS=hh3cQoSIfTraStaRunPassBPS, hh3cIfQoSWredGroupApplyIfEntry=hh3cIfQoSWredGroupApplyIfEntry, hh3cIfQoSRTPQStartPort=hh3cIfQoSRTPQStartPort, hh3cIfQoSPQQueueLengthType=hh3cIfQoSPQQueueLengthType, hh3cIfQoSLRDirection=hh3cIfQoSLRDirection, hh3cIfQoSDropPackets=hh3cIfQoSDropPackets, hh3cIfQoSAggregativeCarIndex=hh3cIfQoSAggregativeCarIndex, hh3cIfQoSTricolorCarYellowActionValue=hh3cIfQoSTricolorCarYellowActionValue, hh3cIfQoSAggregativeCarYellowActionType=hh3cIfQoSAggregativeCarYellowActionType, hh3cIfQoSTricolorCarYellowPackets=hh3cIfQoSTricolorCarYellowPackets, hh3cIfQoSPortPriorityObjects=hh3cIfQoSPortPriorityObjects, hh3cIfQoSPriMapGroupExportValue=hh3cIfQoSPriMapGroupExportValue, hh3cIfQoSQSModeEntry=hh3cIfQoSQSModeEntry, hh3cIfQoSPQDefaultQueueType=hh3cIfQoSPQDefaultQueueType, hh3cIfQoSCQClassRuleValue=hh3cIfQoSCQClassRuleValue, hh3cIfQoSAggregativeCarRunInfoEntry=hh3cIfQoSAggregativeCarRunInfoEntry, hh3cIfQoSAggregativeCarApplyRowStatus=hh3cIfQoSAggregativeCarApplyRowStatus, hh3cIfQoSPriMapContentRowStatus=hh3cIfQoSPriMapContentRowStatus, hh3cIfQoSPQDefaultTable=hh3cIfQoSPQDefaultTable, hh3cIfQoSGTSConfigTable=hh3cIfQoSGTSConfigTable, hh3cIfQoSPortPirorityTrustEntry=hh3cIfQoSPortPirorityTrustEntry, hh3cIfQoSCarListObject=hh3cIfQoSCarListObject, hh3cIfQoSAggregativeCarRedActionValue=hh3cIfQoSAggregativeCarRedActionValue, hh3cIfQoSGTSConfigEntry=hh3cIfQoSGTSConfigEntry, hh3cIfQoSLRRunInfoDelayedBytes=hh3cIfQoSLRRunInfoDelayedBytes, hh3cIfQoSWFQObject=hh3cIfQoSWFQObject, hh3cIfQoSWredApplyIfRunInfoEntry=hh3cIfQoSWredApplyIfRunInfoEntry, hh3cIfQoSGTSPassedBytes=hh3cIfQoSGTSPassedBytes, hh3cIfQoSWFQRowStatus=hh3cIfQoSWFQRowStatus, hh3cIfQoSPriMapContentEntry=hh3cIfQoSPriMapContentEntry, hh3cQoSIfTraStaConfigInfoTable=hh3cQoSIfTraStaConfigInfoTable, hh3cIfQoSAggregativeCarRedBytes=hh3cIfQoSAggregativeCarRedBytes, hh3cIfQoSWredGroupWeightingConstant=hh3cIfQoSWredGroupWeightingConstant, hh3cIfQoSWredDropLPreTcpBytes=hh3cIfQoSWredDropLPreTcpBytes, hh3cIfQoSBandwidthTable=hh3cIfQoSBandwidthTable, hh3cIfQoSRTPQEndPort=hh3cIfQoSRTPQEndPort, hh3cIfQoSCurQueueBytes=hh3cIfQoSCurQueueBytes, hh3cIfQoSWFQSize=hh3cIfQoSWFQSize, hh3cIfQoSAggregativeCarRedActionType=hh3cIfQoSAggregativeCarRedActionType, hh3cIfQoSTricolorCarGroup=hh3cIfQoSTricolorCarGroup, hh3cIfQoSAggregativeCarEbs=hh3cIfQoSAggregativeCarEbs, hh3cIfQoSWredDropLPreNTcpPkts=hh3cIfQoSWredDropLPreNTcpPkts, hh3cIfQoSPortWredPreConfigTable=hh3cIfQoSPortWredPreConfigTable, hh3cIfQoSPQClassRuleType=hh3cIfQoSPQClassRuleType, hh3cIfQoSQSMode=hh3cIfQoSQSMode, hh3cIfQoSQmtokenTable=hh3cIfQoSQmtokenTable, hh3cIfQoSPriMapGroupIndex=hh3cIfQoSPriMapGroupIndex, hh3cIfQoSWredGroupType=hh3cIfQoSWredGroupType, hh3cQoSIfTraStaRunPassPPS=hh3cQoSIfTraStaRunPassPPS, hh3cIfQoSCQDefaultTable=hh3cIfQoSCQDefaultTable, hh3cIfQoSPortPriorityConfigGroup=hh3cIfQoSPortPriorityConfigGroup, Direction=Direction, hh3cIfQoSPQLength=hh3cIfQoSPQLength, hh3cIfQoSLRRunInfoActiveShaping=hh3cIfQoSLRRunInfoActiveShaping, hh3cIfQoSTricolorCarCir=hh3cIfQoSTricolorCarCir, hh3cIfQoSQueueLengthInPkts=hh3cIfQoSQueueLengthInPkts, hh3cIfQoSPQDiscardPackets=hh3cIfQoSPQDiscardPackets, hh3cIfQoSBandwidthRowStatus=hh3cIfQoSBandwidthRowStatus, hh3cIfQoSWFQHashedMaxActiveQueues=hh3cIfQoSWFQHashedMaxActiveQueues, hh3cIfQoSCarlListNum=hh3cIfQoSCarlListNum, hh3cIfQoSWredGroupNextIndex=hh3cIfQoSWredGroupNextIndex, hh3cIfQoSTricolorCarRowStatus=hh3cIfQoSTricolorCarRowStatus, hh3cIfQoSQmtokenNumber=hh3cIfQoSQmtokenNumber, hh3cIfQoSCQClassRuleEntry=hh3cIfQoSCQClassRuleEntry, hh3cIfQoSPQDefaultEntry=hh3cIfQoSPQDefaultEntry, hh3cQoSIfTraStaConfigDscp=hh3cQoSIfTraStaConfigDscp, hh3cIfQoSTricolorCarValue=hh3cIfQoSTricolorCarValue, hh3cIfQoSPQType=hh3cIfQoSPQType, hh3cQoSIfTraStaRunDirection=hh3cQoSIfTraStaRunDirection, hh3cIfQoSCQListNumber=hh3cIfQoSCQListNumber, hh3cIfQoSBandwidthEntry=hh3cIfQoSBandwidthEntry)
mibBuilder.exportSymbols("HH3C-IFQOS2-MIB", hh3cIfQoSBindingRowStatus=hh3cIfQoSBindingRowStatus, hh3cIfQoSCQRunInfoEntry=hh3cIfQoSCQRunInfoEntry, hh3cIfQoSPriMapContentTable=hh3cIfQoSPriMapContentTable, hh3cQos2=hh3cQos2, hh3cIfQoSGTSClassRuleValue=hh3cIfQoSGTSClassRuleValue, hh3cQoSIfTraStaRunObjectType=hh3cQoSIfTraStaRunObjectType, hh3cQoSIfTraStaRunObjectValue=hh3cQoSIfTraStaRunObjectValue, hh3cIfQoSQmtokenGroup=hh3cIfQoSQmtokenGroup, hh3cIfQoSAggregativeCarApplyRuleType=hh3cIfQoSAggregativeCarApplyRuleType, hh3cIfQoSWredGroupIfRowStatus=hh3cIfQoSWredGroupIfRowStatus, hh3cIfQoSAggregativeCarYellowActionValue=hh3cIfQoSAggregativeCarYellowActionValue, hh3cIfQoSCQConfigGroup=hh3cIfQoSCQConfigGroup, hh3cIfQoSPassPackets=hh3cIfQoSPassPackets, hh3cIfQoSPortPirorityTrustTable=hh3cIfQoSPortPirorityTrustTable, hh3cIfQoSBandwidthGroup=hh3cIfQoSBandwidthGroup, hh3cIfQoSAggregativeCarApplyRuleValue=hh3cIfQoSAggregativeCarApplyRuleValue, hh3cIfQoSWredDropBytes=hh3cIfQoSWredDropBytes, hh3cIfQoSGTSDiscardPackets=hh3cIfQoSGTSDiscardPackets, hh3cIfQoSWredDropLPreNTcpPPS=hh3cIfQoSWredDropLPreNTcpPPS, hh3cIfQoSWFQConfigGroup=hh3cIfQoSWFQConfigGroup, hh3cIfQoSAggregativeCarGreenActionValue=hh3cIfQoSAggregativeCarGreenActionValue, hh3cIfQoSWFQRunInfoTable=hh3cIfQoSWFQRunInfoTable, hh3cIfQoSPortWredGroup=hh3cIfQoSPortWredGroup, hh3cIfQoSTailDropPPS=hh3cIfQoSTailDropPPS, hh3cIfQoSWredGroupIndex=hh3cIfQoSWredGroupIndex, hh3cIfQoSWredGroupExponent=hh3cIfQoSWredGroupExponent, hh3cIfQoSRTPQRunInfoGroup=hh3cIfQoSRTPQRunInfoGroup, hh3cIfQoSWredPreRandomDropNum=hh3cIfQoSWredPreRandomDropNum, hh3cIfQoSPriMapConfigGroup=hh3cIfQoSPriMapConfigGroup, hh3cIfQoSWredDropLPreNTcpBytes=hh3cIfQoSWredDropLPreNTcpBytes, hh3cIfQoSAggregativeCarApplyCarIndex=hh3cIfQoSAggregativeCarApplyCarIndex, CarAction=CarAction, hh3cIfQoSWredGroupContentIndex=hh3cIfQoSWredGroupContentIndex, hh3cIfQoSDropBytes=hh3cIfQoSDropBytes, hh3cIfQoSPQRunInfoTable=hh3cIfQoSPQRunInfoTable, hh3cIfQoSWredDropLPreTcpBPS=hh3cIfQoSWredDropLPreTcpBPS, hh3cIfQoSFIFOSize=hh3cIfQoSFIFOSize, hh3cIfQoSLREbs=hh3cIfQoSLREbs, hh3cIfQoSRTPQConfigGroup=hh3cIfQoSRTPQConfigGroup, hh3cIfQoSCurQueueBPS=hh3cIfQoSCurQueueBPS, hh3cIfQoSPortWredWeightConstantTable=hh3cIfQoSPortWredWeightConstantTable, hh3cIfQoSPriMapGroupImportValue=hh3cIfQoSPriMapGroupImportValue, hh3cIfQoSGTSCbs=hh3cIfQoSGTSCbs, hh3cIfQoSPassPPS=hh3cIfQoSPassPPS, hh3cIfQoSTricolorCarPir=hh3cIfQoSTricolorCarPir, hh3cIfQoSQueueID=hh3cIfQoSQueueID, hh3cIfQoSTricolorCarConfigTable=hh3cIfQoSTricolorCarConfigTable, hh3cIfQoSWredDiscardProb=hh3cIfQoSWredDiscardProb, hh3cIfQoSCQClassRuleQueueID=hh3cIfQoSCQClassRuleQueueID, hh3cIfQoSPQQueueLengthTable=hh3cIfQoSPQQueueLengthTable, hh3cIfQoSAggregativeCarApplyDirection=hh3cIfQoSAggregativeCarApplyDirection, hh3cIfQoSPQRunInfoEntry=hh3cIfQoSPQRunInfoEntry, hh3cIfQoSRTPQConfigTable=hh3cIfQoSRTPQConfigTable, hh3cQoSIfTraStaRunDropBytes=hh3cQoSIfTraStaRunDropBytes, hh3cIfQoSGTSEbs=hh3cIfQoSGTSEbs, hh3cIfQoSTailDropPkts=hh3cIfQoSTailDropPkts, hh3cIfQoSWredGroupEntry=hh3cIfQoSWredGroupEntry, hh3cIfQoSWredGroupName=hh3cIfQoSWredGroupName, hh3cIfQoSPriMapGroupEntry=hh3cIfQoSPriMapGroupEntry, hh3cIfQoSLRConfigTable=hh3cIfQoSLRConfigTable, hh3cIfQoSPriMapGroupType=hh3cIfQoSPriMapGroupType, hh3cIfQoSWredHighLimit=hh3cIfQoSWredHighLimit, hh3cIfQoSPortWredPreID=hh3cIfQoSPortWredPreID, hh3cIfQoSLRRunInfoEntry=hh3cIfQoSLRRunInfoEntry, hh3cIfQoSPQClassRowStatus=hh3cIfQoSPQClassRowStatus, hh3cIfQoSCQApplyTable=hh3cIfQoSCQApplyTable, hh3cIfQoSRTPQRunInfoEntry=hh3cIfQoSRTPQRunInfoEntry, hh3cIfQoSRTPQObject=hh3cIfQoSRTPQObject, hh3cQoSIfTraStaConfigVlan=hh3cQoSIfTraStaConfigVlan, hh3cIfQoSGTSConfigRowStatus=hh3cIfQoSGTSConfigRowStatus, PYSNMP_MODULE_ID=hh3cIfQos2, hh3cIfQoSRTPQConfigEntry=hh3cIfQoSRTPQConfigEntry, hh3cIfQoSCQApplyListNumber=hh3cIfQoSCQApplyListNumber, hh3cIfQoSWredDropHPreTcpPkts=hh3cIfQoSWredDropHPreTcpPkts, PriorityQueue=PriorityQueue, hh3cIfQoSPortPriorityEntry=hh3cIfQoSPortPriorityEntry, hh3cIfQoSPortPriorityTable=hh3cIfQoSPortPriorityTable, hh3cQoSIfTraStaRunInfoTable=hh3cQoSIfTraStaRunInfoTable, hh3cQoSIfTraStaConfigStatus=hh3cQoSIfTraStaConfigStatus, hh3cIfQoSTricolorCarType=hh3cIfQoSTricolorCarType, hh3cQoSIfTraStaRunInfoEntry=hh3cQoSIfTraStaRunInfoEntry, hh3cIfQoSFIFOConfigEntry=hh3cIfQoSFIFOConfigEntry, hh3cIfQoSAggregativeCarGreenActionType=hh3cIfQoSAggregativeCarGreenActionType, hh3cIfQoSPriMapGroupTable=hh3cIfQoSPriMapGroupTable, hh3cIfQoSCQClassRuleTable=hh3cIfQoSCQClassRuleTable, hh3cIfQoSPortBindingEntry=hh3cIfQoSPortBindingEntry, hh3cIfQoSL3PlusObjects=hh3cIfQoSL3PlusObjects, hh3cIfQoSBindingIf=hh3cIfQoSBindingIf, hh3cIfQoSFIFORunInfoEntry=hh3cIfQoSFIFORunInfoEntry, hh3cIfQoSAggregativeCarRedPackets=hh3cIfQoSAggregativeCarRedPackets, hh3cIfQoSGTSQueueSize=hh3cIfQoSGTSQueueSize, hh3cIfQoSWredDropHPreNTcpPPS=hh3cIfQoSWredDropHPreNTcpPPS, hh3cIfQoSPQObject=hh3cIfQoSPQObject, hh3cIfQoSQmtokenRosStatus=hh3cIfQoSQmtokenRosStatus, hh3cIfQoSTricolorCarGreenActionValue=hh3cIfQoSTricolorCarGreenActionValue, hh3cIfQoSHQueueTcpRunInfoTable=hh3cIfQoSHQueueTcpRunInfoTable, hh3cIfQoSHardwareQueueObjects=hh3cIfQoSHardwareQueueObjects, hh3cIfQoSPortPriorityValue=hh3cIfQoSPortPriorityValue, hh3cIfQoSWredDropPPS=hh3cIfQoSWredDropPPS, hh3cIfQoSTricolorCarRedBytes=hh3cIfQoSTricolorCarRedBytes, hh3cIfQoSWredDropHPreNTcpBPS=hh3cIfQoSWredDropHPreNTcpBPS, hh3cIfQoSQSValue=hh3cIfQoSQSValue, hh3cIfQoSTricolorCarYellowBytes=hh3cIfQoSTricolorCarYellowBytes, hh3cIfQoSAggregativeCarNextIndex=hh3cIfQoSAggregativeCarNextIndex, hh3cIfQoSPortPriorityTrustOvercastType=hh3cIfQoSPortPriorityTrustOvercastType, hh3cIfQoSWFQRunInfoEntry=hh3cIfQoSWFQRunInfoEntry, hh3cIfQoSWFQEntry=hh3cIfQoSWFQEntry, hh3cIfQoSCQRunInfoLength=hh3cIfQoSCQRunInfoLength, hh3cIfQoSCQRunInfoTable=hh3cIfQoSCQRunInfoTable)
