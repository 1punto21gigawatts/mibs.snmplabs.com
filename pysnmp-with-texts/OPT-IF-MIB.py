#
# PySNMP MIB module OPT-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPT-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, Gauge32, Unsigned32, iso, Counter32, ModuleIdentity, transmission, TimeTicks, NotificationType, IpAddress, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Unsigned32", "iso", "Counter32", "ModuleIdentity", "transmission", "TimeTicks", "NotificationType", "IpAddress", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits")
RowStatus, RowPointer, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "RowPointer", "DisplayString", "TruthValue", "TextualConvention")
optIfMibModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 133))
optIfMibModule.setRevisions(('2003-08-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: optIfMibModule.setRevisionsDescriptions(('Initial version, published as RFC 3591.',))
if mibBuilder.loadTexts: optIfMibModule.setLastUpdated('200308130000Z')
if mibBuilder.loadTexts: optIfMibModule.setOrganization('IETF AToM MIB Working Group')
if mibBuilder.loadTexts: optIfMibModule.setContactInfo('WG charter: http://www.ietf.org/html.charters/atommib-charter.html Mailing Lists: General Discussion: atommib@research.telcordia.com To Subscribe: atommib-request@research.telcordia.com Editor: Hing-Kam Lam Postal: Lucent Technologies, Room 4C-616 101 Crawfords Corner Road Holmdel, NJ 07733 Tel: +1 732 949 8338 Email: hklam@lucent.com')
if mibBuilder.loadTexts: optIfMibModule.setDescription('The MIB module to describe pre-OTN and OTN interfaces. Copyright (C) The Internet Society (2003). This version of this MIB module is part of RFC 3591; see the RFC itself for full legal notices.')
class OptIfAcTI(TextualConvention, OctetString):
    description = 'The trace identifier (TI) accepted at the receiver.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

class OptIfBitRateK(TextualConvention, Integer32):
    description = "Indicates the index 'k' that is used to represent a supported bit rate and the different versions of OPUk, ODUk and OTUk. Allowed values of k are defined in ITU-T G.709. Currently allowed values in G.709 are: k=1 represents an approximate bit rate of 2.5 Gbit/s, k=2 represents an approximate bit rate of 10 Gbit/s, k=3 represents an approximate bit rate of 40 Gbit/s."
    status = 'current'

class OptIfDEGM(TextualConvention, Unsigned32):
    description = 'Indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if OptIfDEGM consecutive bad PM Seconds are detected.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(2, 10)

class OptIfDEGThr(TextualConvention, Unsigned32):
    description = 'Indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. A PM Second is declared bad if the percentage of detected errored blocks in that second is greater than or equal to OptIfDEGThr.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 100)

class OptIfDirectionality(TextualConvention, Integer32):
    description = 'Indicates the directionality of an entity.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("sink", 1), ("source", 2), ("bidirectional", 3))

class OptIfSinkOrSource(TextualConvention, Integer32):
    description = 'Indicates the directionality of an entity that is allowed only to be a source or sink.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sink", 1), ("source", 2))

class OptIfExDAPI(TextualConvention, OctetString):
    description = 'The Destination Access Point Identifier (DAPI) expected by the receiver.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class OptIfExSAPI(TextualConvention, OctetString):
    description = 'The Source Access Point Identifier (SAPI) expected by the receiver.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

class OptIfIntervalNumber(TextualConvention, Unsigned32):
    description = 'Uniquely identifies a 15-minute interval. The interval identified by 1 is the most recently completed interval, and the interval identified by n is the interval immediately preceding the one identified by n-1.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 96)

class OptIfTIMDetMode(TextualConvention, Integer32):
    description = 'Indicates the mode of the Trace Identifier Mismatch (TIM) Detection function.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("off", 1), ("dapi", 2), ("sapi", 3), ("both", 4))

class OptIfTxTI(TextualConvention, OctetString):
    description = 'The trace identifier (TI) transmitted.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(64, 64)
    fixedLength = 64

optIfObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1))
optIfConfs = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2))
optIfOTMn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 1))
optIfPerfMon = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 2))
optIfOTSn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 3))
optIfOMSn = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 4))
optIfOChGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 5))
optIfOCh = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 6))
optIfOTUk = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 7))
optIfODUk = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 8))
optIfODUkT = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 1, 9))
optIfGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2, 1))
optIfCompl = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 133, 2, 2))
optIfOTMnTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1), )
if mibBuilder.loadTexts: optIfOTMnTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnTable.setDescription('A table of OTMn structure information.')
optIfOTMnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTMnEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnEntry.setDescription('A conceptual row that contains the OTMn structure information of an optical interface.')
optIfOTMnOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnOrder.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnOrder.setDescription('This object indicates the order of the OTM, which represents the maximum number of wavelengths that can be supported at the bit rate(s) supported on the interface.')
optIfOTMnReduced = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnReduced.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnReduced.setDescription('This object indicates whether a reduced or full functionality is supported at the interface. A value of true means reduced. A value of false means full.')
optIfOTMnBitRates = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("bitRateK1", 0), ("bitRateK2", 1), ("bitRateK3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnBitRates.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnBitRates.setDescription('This attribute is a bit map representing the bit rate or set of bit rates supported on the interface. The meaning of each bit position is as follows: bitRateK1(0) is set if the 2.5 Gbit/s rate is supported bitRateK2(1) is set if the 10 Gbit/s rate is supported bitRateK3(2) is set if the 40 Gbit/s rate is supported Note that each bit position corresponds to one possible value of the type OptIfBitRateK. The default value of this attribute is system specific.')
optIfOTMnInterfaceType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnInterfaceType.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnInterfaceType.setDescription("This object identifies the type of interface. The value of this attribute will affect the behavior of the OTM with respect to presence/absence of OTM Overhead Signal (OOS) processing and TCM activation. For an IrDI interface, there is no OOS processing and TCM activation is limited to n levels as specified by a TCM level threshold. This object contains two fields that are separated by whitespace. The possible values are: field 1: one of the 4-character ASCII strings 'IrDI' or 'IaDI' field 2: free-form text consisting of printable UTF-8 encoded characters Note that field 2 is optional. If it is not present then there is no requirement for trailing whitespace after field 1. The default values are as follows: field 1: 'IaDI' field 2: an empty string.")
optIfOTMnTcmMax = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTMnTcmMax.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnTcmMax.setDescription("This object identifies the maximum number of TCM levels allowed for any Optical Channel contained in this OTM. A new TCM activation will be rejected if the requested level is greater than the threshold. If InterfaceType object specifies a type of 'IaDI' for this OTM, then this attribute is irrelevant. Possible values: unsigned integers in the range from 0 to 6 inclusive. Default value: 3.")
optIfOTMnOpticalReach = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("intraOffice", 1), ("shortHaul", 2), ("longHaul", 3), ("veryLongHaul", 4), ("ultraLongHaul", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTMnOpticalReach.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnOpticalReach.setDescription('This object indicates the length the optical signal may travel before requiring termination or regeneration. The meaning of the enumeration are: intraOffice(1) - intra-office (as defined in ITU-T G.957) shortHaul(2) - short haul (as defined in ITU-T G.957) longHaul(3) - long haul (as defined in ITU-T G.957) veryLongHaul(4) - very long haul (as defined in ITU-T G.691) ultraLongHaul(5)- ultra long haul (as defined in ITU-T G.691)')
optIfPerfMonIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1), )
if mibBuilder.loadTexts: optIfPerfMonIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfPerfMonIntervalTable.setDescription('A table of 15-minute performance monitoring interval information.')
optIfPerfMonIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfPerfMonIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfPerfMonIntervalEntry.setDescription('A conceptual row that contains 15-minute performance monitoring interval information of an interface.')
optIfPerfMonCurrentTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonCurrentTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: optIfPerfMonCurrentTimeElapsed.setDescription("Number of seconds elapsed in the current 15-minute performance monitoring interval. If, for some reason, such as an adjustment in the NE's time-of-day clock, the number of seconds elapsed exceeds the maximum value, then the maximum value will be returned.")
optIfPerfMonCurDayTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonCurDayTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: optIfPerfMonCurDayTimeElapsed.setDescription("Number of seconds elapsed in the current 24-hour interval performance monitoring period. If, for some reason, such as an adjustment in the NE's time-of-day clock, the number of seconds elapsed exceeds the maximum value, then the maximum value will be returned.")
optIfPerfMonIntervalNumIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonIntervalNumIntervals.setStatus('current')
if mibBuilder.loadTexts: optIfPerfMonIntervalNumIntervals.setDescription('The number of 15-minute intervals for which performance monitoring data is available. The number is the same for all the associated sub layers of the interface. An optical interface must be capable of supporting at least n intervals, where n is defined as follows: The minimum value of n is 4. The default of n is 32. The maximum value of n is 96. The value of this object will be n unless performance monitoring was (re-)started for the interface within the last (n*15) minutes, in which case the value will be the number of complete 15-minute intervals since measurement was (re-)started.')
optIfPerfMonIntervalNumInvalidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfPerfMonIntervalNumInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: optIfPerfMonIntervalNumInvalidIntervals.setDescription('The number of intervals in the range from 0 to optIfPerfMonIntervalNumIntervals for which no performance monitoring data is available and/or the data is invalid.')
optIfOTSnConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1), )
if mibBuilder.loadTexts: optIfOTSnConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnConfigTable.setDescription('A table of OTSn configuration information.')
optIfOTSnConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnConfigEntry.setDescription('A conceptual row that contains OTSn configuration information of an interface.')
optIfOTSnDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnDirectionality.setDescription('Indicates the directionality of the entity.')
optIfOTSnAprStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnAprStatus.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnAprStatus.setDescription("This attribute indicates the status of the Automatic Power Reduction (APR) function of the entity. Valid values are 'on' and 'off'.")
optIfOTSnAprControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnAprControl.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnAprControl.setDescription('This object is a UTF-8 encoded string that specifies Automatic Power Reduction (APR) control actions requested of this entity (when written) and that returns the current APR control state of this entity (when read). The values are implementation-defined. Any implementation that instantiates this object must document the set of values that it allows to be written, the set of values that it will return, and what each of those values means.')
optIfOTSnTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 4), OptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnTraceIdentifierTransmitted.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnTraceIdentifierTransmitted.setDescription("The trace identifier transmitted. This object is applicable when optIfOTSnDirectionality has the value source(2) or bidirectional(3). This object does not apply to reduced-capability systems (i.e., those for which optIfOTMnReduced has the value true(1)) or at IrDI interfaces (i.e., when optIfOTMnInterfaceType field 1 has the value 'IrDI'). If no value is ever set by a management entity for the object optIfOTSnTraceIdentifierTransmitted, system-specific default value will be used. Any implementation that instantiates this object must document the system-specific default value or how it is derived.")
optIfOTSnDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 5), OptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnDAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnDAPIExpected.setDescription("The DAPI expected by the receiver. This object is applicable when optIfOTSnDirectionality has the value sink(1) or bidirectional(3). It has no effect if optIfOTSnTIMDetMode has the value off(1) or sapi(3). This object does not apply to reduced-capability systems (i.e., those for which optIfOTMnReduced has the value true(1)) or at IrDI interfaces (i.e., when optIfOTMnInterfaceType field 1 has the value 'IrDI').")
optIfOTSnSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 6), OptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSAPIExpected.setDescription("The SAPI expected by the receiver. This object is applicable when optIfOTSnDirectionality has the value sink(1) or bidirectional(3). It has no effect if optIfOTSnTIMDetMode has the value off(1) or dapi(2). This object does not apply to reduced-capability systems (i.e., those for which optIfOTMnReduced has the value true(1)) or at IrDI interfaces (i.e., when optIfOTMnInterfaceType field 1 has the value 'IrDI').")
optIfOTSnTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 7), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnTraceIdentifierAccepted.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnTraceIdentifierAccepted.setDescription("The actual trace identifier received. This object is applicable when optIfOTSnDirectionality has the value sink(1) or bidirectional(3). Its value is unspecified if optIfOTSnCurrentStatus has either or both of the losO(5) and los(6) bits set. This object does not apply to reduced-capability systems (i.e., those for which optIfOTMnReduced has the value true(1)) or at IrDI interfaces (i.e., when optIfOTMnInterfaceType field 1 has the value 'IrDI').")
optIfOTSnTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 8), OptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnTIMDetMode.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnTIMDetMode.setDescription("Indicates the mode of the Trace Identifier Mismatch (TIM) Detection function. This object is applicable when optIfOTSnDirectionality has the value sink(1) or bidirectional(3). The default value is off(1). This object does not apply to reduced-capability systems (i.e., those for which optIfOTMnReduced has the value true(1)) or at IrDI interfaces (i.e., when optIfOTMnInterfaceType field 1 has the value 'IrDI'). The default value of this object is off(1).")
optIfOTSnTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnTIMActEnabled.setDescription("Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. This object is applicable when optIfOTSnDirectionality has the value sink(1) or bidirectional(3). It has no effect when the value of optIfOTSnTIMDetMode is off(1). This object does not apply to reduced-capability systems (i.e., those for which optIfOTMnReduced has the value true(1)) or at IrDI interfaces (i.e., when optIfOTMnInterfaceType field 1 has the value 'IrDI'). The default value of this object is false(2).")
optIfOTSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 1, 1, 10), Bits().clone(namedValues=NamedValues(("bdiP", 0), ("bdiO", 1), ("bdi", 2), ("tim", 3), ("losP", 4), ("losO", 5), ("los", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. This object is applicable when optIfOTSnDirectionality has the value sink(1) or bidirectional(3). In reduced-capability systems or at IrDI interfaces the only bit position that may be set is los(6).')
optIfOTSnSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2), )
if mibBuilder.loadTexts: optIfOTSnSinkCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentTable.setDescription('A table of OTSn sink performance monitoring information for the current 15-minute interval.')
optIfOTSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSinkCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentEntry.setDescription('A conceptual row that contains OTSn sink performance monitoring information of an interface for the current 15-minute interval.')
optIfOTSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentInputPower.setDescription('The optical power monitored at the input.')
optIfOTSnSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowInputPower.setDescription('The lowest optical power monitored at the input during the current 15-minute interval.')
optIfOTSnSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentHighInputPower.setDescription('The highest optical power monitored at the input during the current 15-minute interval.')
optIfOTSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowerInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowerInputPowerThreshold.setDescription('The lower limit threshold on input power. If optIfOTSnSinkCurrentInputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentUpperInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentUpperInputPowerThreshold.setDescription('The upper limit threshold on input power. If optIfOTSnSinkCurrentInputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentOutputPower.setDescription('The optical power monitored at the output.')
optIfOTSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 15-minute interval.')
optIfOTSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentHighOutputPower.setDescription('The highest optical power monitored at the output during the current 15-minute interval.')
optIfOTSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowerOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentLowerOutputPowerThreshold.setDescription('The lower limit threshold on output power. If optIfOTSnSinkCurrentOutputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSinkCurrentUpperOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurrentUpperOutputPowerThreshold.setDescription('The upper limit threshold on output power. If optIfOTSnSinkCurrentOutputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3), )
if mibBuilder.loadTexts: optIfOTSnSinkIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalTable.setDescription('A table of historical OTSn sink performance monitoring information.')
optIfOTSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOTSnSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOTSnSinkIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalEntry.setDescription('A conceptual row that contains OTSn sink performance monitoring information of an interface during a particular historical interval.')
optIfOTSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOTSnSinkIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOTSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLastInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLastInputPower.setDescription('The last optical power monitored at the input during the interval.')
optIfOTSnSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLowInputPower.setDescription('The lowest optical power monitored at the input during the interval.')
optIfOTSnSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalHighInputPower.setDescription('The highest optical power monitored at the input during the interval.')
optIfOTSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLastOutputPower.setDescription('The last optical power monitored at the output during the interval.')
optIfOTSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalLowOutputPower.setDescription('The lowest optical power monitored at the output during the interval.')
optIfOTSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkIntervalHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkIntervalHighOutputPower.setDescription('The highest optical power monitored at the output during the interval.')
optIfOTSnSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4), )
if mibBuilder.loadTexts: optIfOTSnSinkCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurDayTable.setDescription('A table of OTSn sink performance monitoring information for the current 24-hour interval.')
optIfOTSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSinkCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurDayEntry.setDescription('A conceptual row that contains OTSn sink performance monitoring information of an interface for the current 24-hour interval.')
optIfOTSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurDayLowInputPower.setDescription('The lowest optical power monitored at the input during the current 24-hour interval.')
optIfOTSnSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurDayHighInputPower.setDescription('The highest optical power monitored at the input during the current 24-hour interval.')
optIfOTSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 24-hour interval.')
optIfOTSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkCurDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkCurDayHighOutputPower.setDescription('The highest optical power monitored at the output during the current 24-hour interval.')
optIfOTSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5), )
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayTable.setDescription('A table of OTSn sink performance monitoring information for the previous 24-hour interval.')
optIfOTSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayEntry.setDescription('A conceptual row that contains OTSn sink performance monitoring information of an interface for the previous 24-hour interval.')
optIfOTSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLastInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLastInputPower.setDescription('The last optical power monitored at the input during the previous 24-hour interval.')
optIfOTSnSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLowInputPower.setDescription('The lowest optical power monitored at the input during the previous 24-hour interval.')
optIfOTSnSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayHighInputPower.setDescription('The highest optical power monitored at the input during the previous 24-hour interval.')
optIfOTSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLastOutputPower.setDescription('The last optical power monitored at the output during the previous 24-hour interval.')
optIfOTSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the previous 24-hour interval.')
optIfOTSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPrevDayHighOutputPower.setDescription('The highest optical power monitored at the output during the previous 24-hour interval.')
optIfOTSnSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6), )
if mibBuilder.loadTexts: optIfOTSnSrcCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentTable.setDescription('A table of OTSn source performance monitoring information for the current 15-minute interval.')
optIfOTSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSrcCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentEntry.setDescription('A conceptual row that contains OTSn source performance monitoring information of an interface for the current 15-minute interval.')
optIfOTSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentOutputPower.setDescription('The optical power monitored at the output.')
optIfOTSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 15-minute interval.')
optIfOTSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentHighOutputPower.setDescription('The highest optical power monitored at the output during the current 15-minute interval.')
optIfOTSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowerOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowerOutputPowerThreshold.setDescription('The lower limit threshold on output power. If optIfOTSnSrcCurrentOutputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentUpperOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentUpperOutputPowerThreshold.setDescription('The upper limit threshold on output power. If optIfOTSnSrcCurrentOutputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSrcCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentInputPower.setDescription('The optical power monitored at the input.')
optIfOTSnSrcCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowInputPower.setDescription('The lowest optical power monitored at the input during the current 15-minute interval.')
optIfOTSnSrcCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentHighInputPower.setDescription('The highest optical power monitored at the input during the current 15-minute interval.')
optIfOTSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowerInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentLowerInputPowerThreshold.setDescription('The lower limit threshold on input power. If optIfOTSnSrcCurrentInputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTSnSrcCurrentUpperInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurrentUpperInputPowerThreshold.setDescription('The upper limit threshold on input power. If optIfOTSnSrcCurrentInputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOTSnSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7), )
if mibBuilder.loadTexts: optIfOTSnSrcIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalTable.setDescription('A table of historical OTSn source performance monitoring information.')
optIfOTSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOTSnSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOTSnSrcIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalEntry.setDescription('A conceptual row that contains OTSn source performance monitoring information of an interface during a particular historical interval.')
optIfOTSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOTSnSrcIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOTSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLastOutputPower.setDescription('The last optical power monitored at the output during the interval.')
optIfOTSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLowOutputPower.setDescription('The lowest optical power monitored at the output during the interval.')
optIfOTSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalHighOutputPower.setDescription('The highest optical power monitored at the output during the interval.')
optIfOTSnSrcIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLastInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLastInputPower.setDescription('The last optical power monitored at the input during the interval.')
optIfOTSnSrcIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalLowInputPower.setDescription('The lowest optical power monitored at the input during the interval.')
optIfOTSnSrcIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcIntervalHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcIntervalHighInputPower.setDescription('The highest optical power monitored at the input during the interval.')
optIfOTSnSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8), )
if mibBuilder.loadTexts: optIfOTSnSrcCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurDayTable.setDescription('A table of OTSn source performance monitoring information for the current 24-hour interval.')
optIfOTSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSrcCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurDayEntry.setDescription('A conceptual row that contains OTSn source performance monitoring information of an interface for the current 24-hour interval.')
optIfOTSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 24-hour interval.')
optIfOTSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurDayHighOutputPower.setDescription('The highest optical power monitored at the output during the current 24-hour interval.')
optIfOTSnSrcCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurDayLowInputPower.setDescription('The lowest optical power monitored at the input during the current 24-hour interval.')
optIfOTSnSrcCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcCurDayHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcCurDayHighInputPower.setDescription('The highest optical power monitored at the input during the current 24-hour interval.')
optIfOTSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9), )
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayTable.setDescription('A table of OTSn source performance monitoring information for the previous 24-hour interval.')
optIfOTSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayEntry.setDescription('A conceptual row that contains OTSn source performance monitoring information of an interface for the previous 24-hour interval.')
optIfOTSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOTSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLastOutputPower.setDescription('The last optical power monitored at the output during the previous 24-hour interval.')
optIfOTSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the previous 24-hour interval.')
optIfOTSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayHighOutputPower.setDescription('The highest optical power monitored at the output during the previous 24-hour interval.')
optIfOTSnSrcPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLastInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLastInputPower.setDescription('The last optical power monitored at the input during the previous 24-hour interval.')
optIfOTSnSrcPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayLowInputPower.setDescription('The lowest optical power monitored at the input during the previous 24-hour interval.')
optIfOTSnSrcPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 3, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSrcPrevDayHighInputPower.setDescription('The highest optical power monitored at the input during the previous 24-hour interval.')
optIfOMSnConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1), )
if mibBuilder.loadTexts: optIfOMSnConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnConfigTable.setDescription('A table of OMSn configuration information.')
optIfOMSnConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnConfigEntry.setDescription('A conceptual row that contains OMSn configuration information of an interface.')
optIfOMSnDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnDirectionality.setDescription('Indicates the directionality of the entity.')
optIfOMSnCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 1, 1, 2), Bits().clone(namedValues=NamedValues(("ssfP", 0), ("ssfO", 1), ("ssf", 2), ("bdiP", 3), ("bdiO", 4), ("bdi", 5), ("losP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. This object is applicable only to full capability systems whose interface type is IaDI and for which optIfOMSnDirectionality has the value sink(1) or bidirectional(3).')
optIfOMSnSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2), )
if mibBuilder.loadTexts: optIfOMSnSinkCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentTable.setDescription('A table of OMSn sink performance monitoring information for the current 15-minute interval.')
optIfOMSnSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSinkCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentEntry.setDescription('A conceptual row that contains OMSn sink performance monitoring information of an interface for the current 15-minute interval.')
optIfOMSnSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentAggregatedInputPower.setDescription('The aggregated optical power of all the DWDM input channels.')
optIfOMSnSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels during the current 15-minute interval.')
optIfOMSnSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels during the current 15-minute interval.')
optIfOMSnSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowerInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowerInputPowerThreshold.setDescription('The lower limit threshold on aggregated input power. If optIfOMSnSinkCurrentAggregatedInputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentUpperInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentUpperInputPowerThreshold.setDescription('The upper limit threshold on aggregated input power. If optIfOMSnSinkCurrentAggregatedInputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentOutputPower.setDescription('The optical power monitored at the output.')
optIfOMSnSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 15-minute interval.')
optIfOMSnSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentHighOutputPower.setDescription('The highest optical power monitored at the output during the current 15-minute interval.')
optIfOMSnSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowerOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentLowerOutputPowerThreshold.setDescription('The lower limit threshold on output power. If optIfOMSnSinkCurrentOutputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSinkCurrentUpperOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurrentUpperOutputPowerThreshold.setDescription('The upper limit threshold on output power. If optIfOMSnSinkCurrentOutputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3), )
if mibBuilder.loadTexts: optIfOMSnSinkIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalTable.setDescription('A table of historical OMSn sink performance monitoring information.')
optIfOMSnSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOMSnSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOMSnSinkIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalEntry.setDescription('A conceptual row that contains OMSn sink performance monitoring information of an interface during a particular historical interval.')
optIfOMSnSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOMSnSinkIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOMSnSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLastAggregatedInputPower.setDescription('The last aggregated optical power of all the DWDM input channels during the interval.')
optIfOMSnSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels during the interval.')
optIfOMSnSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels during the interval.')
optIfOMSnSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLastOutputPower.setDescription('The last optical power at the output during the interval.')
optIfOMSnSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalLowOutputPower.setDescription('The lowest optical power at the output during the interval.')
optIfOMSnSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkIntervalHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkIntervalHighOutputPower.setDescription('The highest optical power at the output during the interval.')
optIfOMSnSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4), )
if mibBuilder.loadTexts: optIfOMSnSinkCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurDayTable.setDescription('A table of OMSn sink performance monitoring information for the current 24-hour interval.')
optIfOMSnSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSinkCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurDayEntry.setDescription('A conceptual row that contains OMSn sink performance monitoring information of an interface for the current 24-hour interval.')
optIfOMSnSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels during the current 24-hour interval.')
optIfOMSnSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurDayHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels during the current 24-hour interval.')
optIfOMSnSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurDayLowOutputPower.setDescription('The lowest optical power at the output during the current 24-hour interval.')
optIfOMSnSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkCurDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkCurDayHighOutputPower.setDescription('The highest optical power at the output during the current 24-hour interval.')
optIfOMSnSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5), )
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayTable.setDescription('A table of OMSn sink performance monitoring information for the previous 24-hour interval.')
optIfOMSnSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayEntry.setDescription('A conceptual row that contains OMSn sink performance monitoring information of an interface for the previous 24-hour interval.')
optIfOMSnSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLastAggregatedInputPower.setDescription('The last aggregated optical power of all the DWDM input channels during the previous 24-hour interval.')
optIfOMSnSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels during the previous 24-hour interval.')
optIfOMSnSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels during the previous 24-hour interval.')
optIfOMSnSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLastOutputPower.setDescription('The last optical power at the output during the previous 24-hour interval.')
optIfOMSnSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayLowOutputPower.setDescription('The lowest optical power at the output during the previous 24-hour interval.')
optIfOMSnSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPrevDayHighOutputPower.setDescription('The highest optical power at the output during the previous 24-hour interval.')
optIfOMSnSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6), )
if mibBuilder.loadTexts: optIfOMSnSrcCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentTable.setDescription('A table of OMSn source performance monitoring information for the current 15-minute interval.')
optIfOMSnSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSrcCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentEntry.setDescription('A conceptual row that contains OMSn source performance monitoring information of an interface for the current 15-minute interval.')
optIfOMSnSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentOutputPower.setDescription('The optical power monitored at the output.')
optIfOMSnSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 15-minute interval.')
optIfOMSnSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentHighOutputPower.setDescription('The highest optical power monitored at the output during the current 15-minute interval.')
optIfOMSnSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowerOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowerOutputPowerThreshold.setDescription('The lower limit threshold on output power. If optIfOMSnSrcCurrentOutputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentUpperOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentUpperOutputPowerThreshold.setDescription('The upper limit threshold on output power. If optIfOMSnSrcCurrentOutputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentAggregatedInputPower.setDescription('The aggregated optical power at the input.')
optIfOMSnSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowAggregatedInputPower.setDescription('The lowest aggregated optical power at the input during the current 15-minute interval.')
optIfOMSnSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentHighAggregatedInputPower.setDescription('The highest aggregated optical power at the input during the current 15-minute interval.')
optIfOMSnSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowerInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentLowerInputPowerThreshold.setDescription('The lower limit threshold on aggregated input power. If optIfOMSnSrcCurrentAggregatedInputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOMSnSrcCurrentUpperInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurrentUpperInputPowerThreshold.setDescription('The upper limit threshold on aggregated input power. If optIfOMSnSrcCurrentAggregatedInputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOMSnSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7), )
if mibBuilder.loadTexts: optIfOMSnSrcIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalTable.setDescription('A table of historical OMSn source performance monitoring information.')
optIfOMSnSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOMSnSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOMSnSrcIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalEntry.setDescription('A conceptual row that contains OMSn source performance monitoring information of an interface during a particular historical interval.')
optIfOMSnSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOMSnSrcIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOMSnSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLastOutputPower.setDescription('The last optical power monitored at the output during the interval.')
optIfOMSnSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLowOutputPower.setDescription('The lowest optical power monitored at the output during the interval.')
optIfOMSnSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalHighOutputPower.setDescription('The highest optical power monitored at the output during the interval.')
optIfOMSnSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLastAggregatedInputPower.setDescription('The last aggregated optical power at the input during the interval.')
optIfOMSnSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalLowAggregatedInputPower.setDescription('The lowest aggregated optical power at the input during the interval.')
optIfOMSnSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcIntervalHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcIntervalHighAggregatedInputPower.setDescription('The highest aggregated optical power at the input during the interval.')
optIfOMSnSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8), )
if mibBuilder.loadTexts: optIfOMSnSrcCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurDayTable.setDescription('A table of OMSn source performance monitoring information for the current 24-hour interval.')
optIfOMSnSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSrcCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurDayEntry.setDescription('A conceptual row that contains OMSn source performance monitoring information of an interface for the current 24-hour interval.')
optIfOMSnSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 24-hour interval.')
optIfOMSnSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurDayHighOutputPower.setDescription('The highest optical power monitored at the output during the current 24-hour interval.')
optIfOMSnSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power at the input during the current 24-hour interval.')
optIfOMSnSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcCurDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcCurDayHighAggregatedInputPower.setDescription('The highest aggregated optical power at the input during the current 24-hour interval.')
optIfOMSnSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9), )
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayTable.setDescription('A table of OMSn source performance monitoring information for the previous 24-hour interval.')
optIfOMSnSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayEntry.setDescription('A conceptual row that contains OMSn source performance monitoring information of an interface for the previous 24-hour interval.')
optIfOMSnSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOMSnSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLastOutputPower.setDescription('The last optical power monitored at the output during the previous 24-hour interval.')
optIfOMSnSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the previous 24-hour interval.')
optIfOMSnSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayHighOutputPower.setDescription('The highest optical power monitored at the output during the previous 24-hour interval.')
optIfOMSnSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLastAggregatedInputPower.setDescription('The last aggregated optical power at the input during the previous 24-hour interval.')
optIfOMSnSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power at the input during the previous 24-hour interval.')
optIfOMSnSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 4, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSrcPrevDayHighAggregatedInputPower.setDescription('The highest aggregated optical power at the input during the previous 24-hour interval.')
optIfOChGroupConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1), )
if mibBuilder.loadTexts: optIfOChGroupConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupConfigTable.setDescription('A table of OChGroup configuration information.')
optIfOChGroupConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupConfigEntry.setDescription('A conceptual row that contains OChGroup configuration information of an interface.')
optIfOChGroupDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupDirectionality.setDescription('Indicates the directionality of the entity.')
optIfOChGroupSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2), )
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentTable.setDescription('A table of OChGroup sink performance monitoring information for the current 15-minute interval.')
optIfOChGroupSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentEntry.setDescription('A conceptual row that contains OChGroup sink performance monitoring information of an interface for the current 15-minute interval.')
optIfOChGroupSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSinkCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentAggregatedInputPower.setDescription('The aggregated optical power of all the DWDM input channels in the OChGroup.')
optIfOChGroupSinkCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels in the OChGroup during the current 15-minute interval.')
optIfOChGroupSinkCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels in the OChGroup during the current 15-minute interval.')
optIfOChGroupSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowerInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowerInputPowerThreshold.setDescription('The lower limit threshold on aggregated input power. If optIfOChGroupSinkCurrentAggregatedInputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentUpperInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentUpperInputPowerThreshold.setDescription('The upper limit threshold on aggregated input power. If optIfOChGroupSinkCurrentAggregatedInputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSinkCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentOutputPower.setDescription('The optical power monitored at the output in the OChGroup.')
optIfOChGroupSinkCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowOutputPower.setDescription('The lowest optical power monitored at the output in the OChGroup during the current 15-minute interval.')
optIfOChGroupSinkCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentHighOutputPower.setDescription('The highest optical power monitored at the output in the OChGroup during the current 15-minute interval.')
optIfOChGroupSinkCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowerOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentLowerOutputPowerThreshold.setDescription('The lower limit threshold on the output power. If optIfOChGroupSinkCurrentOutputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSinkCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 2, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentUpperOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurrentUpperOutputPowerThreshold.setDescription('The upper limit threshold on the output power. If optIfOChGroupSinkCurrentOutputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3), )
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalTable.setDescription('A table of historical OChGroup sink performance monitoring information.')
optIfOChGroupSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChGroupSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalEntry.setDescription('A conceptual row that contains OChGroup sink performance monitoring information of an interface during a particular historical interval.')
optIfOChGroupSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOChGroupSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSinkIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLastAggregatedInputPower.setDescription('The last aggregated optical power of all the DWDM input channels in the OChGroup during the interval.')
optIfOChGroupSinkIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels in the OChGroup during the interval.')
optIfOChGroupSinkIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels in the OChGroup during the interval.')
optIfOChGroupSinkIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLastOutputPower.setDescription('The last optical power monitored at the output in the OChGroup during the interval.')
optIfOChGroupSinkIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalLowOutputPower.setDescription('The lowest optical power monitored at the output in the OChGroup during the interval.')
optIfOChGroupSinkIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 3, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkIntervalHighOutputPower.setDescription('The highest optical power monitored at the output in the OChGroup during the interval.')
optIfOChGroupSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4), )
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayTable.setDescription('A table of OChGroup sink performance monitoring information for the current 24-hour interval.')
optIfOChGroupSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayEntry.setDescription('A conceptual row that contains OChGroup sink performance monitoring information of an interface for the current 24-hour interval.')
optIfOChGroupSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSinkCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels in the OChGroup during the current 24-hour interval.')
optIfOChGroupSinkCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels in the OChGroup during the current 24-hour interval.')
optIfOChGroupSinkCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayLowOutputPower.setDescription('The lowest optical power monitored at the output in the OChGroup during the current 24-hour interval.')
optIfOChGroupSinkCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 4, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkCurDayHighOutputPower.setDescription('The highest optical power monitored at the output in the OChGroup during the current 24-hour interval.')
optIfOChGroupSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5), )
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayTable.setDescription('A table of OChGroup sink performance monitoring information for the previous 24-hour interval.')
optIfOChGroupSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayEntry.setDescription('A conceptual row that contains OChGroup sink performance monitoring information of an interface for the previous 24-hour interval.')
optIfOChGroupSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSinkPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLastAggregatedInputPower.setDescription('The last aggregated optical power of all the DWDM input channels in the OChGroup during the previous 24-hour interval.')
optIfOChGroupSinkPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power of all the DWDM input channels in the OChGroup during the previous 24-hour interval.')
optIfOChGroupSinkPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayHighAggregatedInputPower.setDescription('The highest aggregated optical power of all the DWDM input channels in the OChGroup during the previous 24-hour interval.')
optIfOChGroupSinkPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLastOutputPower.setDescription('The last optical power monitored at the output in the OChGroup during the previous 24-hour interval.')
optIfOChGroupSinkPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayLowOutputPower.setDescription('The lowest optical power monitored at the output in the OChGroup during the previous 24-hour interval.')
optIfOChGroupSinkPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 5, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPrevDayHighOutputPower.setDescription('The highest optical power monitored at the output in the OChGroup during the previous 24-hour interval.')
optIfOChGroupSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6), )
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentTable.setDescription('A table of OChGroup source performance monitoring information for the current 15-minute interval.')
optIfOChGroupSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentEntry.setDescription('A conceptual row that contains OChGroup source performance monitoring information of an interface for the current 15-minute interval.')
optIfOChGroupSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentOutputPower.setDescription('The optical power monitored at the output.')
optIfOChGroupSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 15-minute interval.')
optIfOChGroupSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentHighOutputPower.setDescription('The highest optical power monitored at the output during the current 15-minute interval.')
optIfOChGroupSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowerOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowerOutputPowerThreshold.setDescription('The lower limit threshold on output power. If optIfOChGroupSrcCurrentOutputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentUpperOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentUpperOutputPowerThreshold.setDescription('The upper limit threshold on output power. If optIfOChGroupSrcCurrentOutputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSrcCurrentAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentAggregatedInputPower.setDescription('The aggregated optical power monitored at the input.')
optIfOChGroupSrcCurrentLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowAggregatedInputPower.setDescription('The lowest aggregated optical power monitored at the input during the current 15-minute interval.')
optIfOChGroupSrcCurrentHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 9), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentHighAggregatedInputPower.setDescription('The highest aggregated optical power monitored at the input during the current 15-minute interval.')
optIfOChGroupSrcCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 10), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowerInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentLowerInputPowerThreshold.setDescription('The lower limit threshold on input power. If optIfOChGroupSrcCurrentAggregatedInputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSrcCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 6, 1, 11), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentUpperInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurrentUpperInputPowerThreshold.setDescription('The upper limit threshold on input power. If optIfOChGroupSrcCurrentAggregatedInputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChGroupSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7), )
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalTable.setDescription('A table of historical OChGroup source performance monitoring information.')
optIfOChGroupSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChGroupSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalEntry.setDescription('A conceptual row that contains OChGroup source performance monitoring information of an interface during a particular historical interval.')
optIfOChGroupSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOChGroupSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLastOutputPower.setDescription('The last optical power monitored at the output during the interval.')
optIfOChGroupSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLowOutputPower.setDescription('The lowest optical power monitored at the output during the interval.')
optIfOChGroupSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalHighOutputPower.setDescription('The highest optical power monitored at the output during the interval.')
optIfOChGroupSrcIntervalLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLastAggregatedInputPower.setDescription('The last aggregated optical power monitored at the input during the interval.')
optIfOChGroupSrcIntervalLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalLowAggregatedInputPower.setDescription('The lowest aggregated optical power monitored at the input during the interval.')
optIfOChGroupSrcIntervalHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 7, 1, 8), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcIntervalHighAggregatedInputPower.setDescription('The highest aggregated optical power monitored at the input during the interval.')
optIfOChGroupSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8), )
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayTable.setDescription('A table of OChGroup source performance monitoring information for the current 24-hour interval.')
optIfOChGroupSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayEntry.setDescription('A conceptual row that contains OChGroup source performance monitoring information of an interface for the current 24-hour interval.')
optIfOChGroupSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 24-hour interval.')
optIfOChGroupSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayHighOutputPower.setDescription('The highest optical power monitored at the output during the current 24-hour interval.')
optIfOChGroupSrcCurDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power monitored at the input during the current 24-hour interval.')
optIfOChGroupSrcCurDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 8, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcCurDayHighAggregatedInputPower.setDescription('The highest aggregated optical power monitored at the input during the current 24-hour interval.')
optIfOChGroupSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9), )
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayTable.setDescription('A table of OChGroup source performance monitoring information for the previous 24-hour interval.')
optIfOChGroupSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayEntry.setDescription('A conceptual row that contains OChGroup source performance monitoring information of an interface for the previous 24-hour interval.')
optIfOChGroupSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChGroupSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLastOutputPower.setDescription('The last optical power monitored at the output during the previous 24-hour interval.')
optIfOChGroupSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the previous 24-hour interval.')
optIfOChGroupSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayHighOutputPower.setDescription('The highest optical power monitored at the output during the previous 24-hour interval.')
optIfOChGroupSrcPrevDayLastAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLastAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLastAggregatedInputPower.setDescription('The last aggregated optical power monitored at the input during the previous 24-hour interval.')
optIfOChGroupSrcPrevDayLowAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLowAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayLowAggregatedInputPower.setDescription('The lowest aggregated optical power monitored at the input during the previous 24-hour interval.')
optIfOChGroupSrcPrevDayHighAggregatedInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 5, 9, 1, 7), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayHighAggregatedInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSrcPrevDayHighAggregatedInputPower.setDescription('The highest aggregated optical power monitored at the input during the previous 24-hour interval.')
optIfOChConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1), )
if mibBuilder.loadTexts: optIfOChConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChConfigTable.setDescription('A table of OCh configuration information.')
optIfOChConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChConfigEntry.setDescription('A conceptual row that contains OCh configuration information of an interface.')
optIfOChDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfOChDirectionality.setDescription('Indicates the directionality of the entity.')
optIfOChCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 1, 1, 2), Bits().clone(namedValues=NamedValues(("losP", 0), ("los", 1), ("oci", 2), ("ssfP", 3), ("ssfO", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfOChCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. This object is applicable when optIfOChDirectionality has the value sink(1) or bidirectional(3). In full-capability systems the bit position los(1) is not used. In reduced-capability systems or at IrDI interfaces only the bit positions los(1) and ssfP(3) are used.')
optIfOChSinkCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2), )
if mibBuilder.loadTexts: optIfOChSinkCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentTable.setDescription('A table of OCh sink performance monitoring information for the current 15-minute interval.')
optIfOChSinkCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSinkCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentEntry.setDescription('A conceptual row that contains OCh sink performance monitoring information for an interface for the current 15-minute interval.')
optIfOChSinkCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSinkCurrentInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentInputPower.setDescription('The optical power monitored at the input.')
optIfOChSinkCurrentLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentLowInputPower.setDescription('The lowest optical power monitored at the input during the current 15-minute interval.')
optIfOChSinkCurrentHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurrentHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentHighInputPower.setDescription('The highest optical power monitored at the input during the current 15-minute interval.')
optIfOChSinkCurrentLowerInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSinkCurrentLowerInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentLowerInputPowerThreshold.setDescription('The lower limit threshold on input power. If optIfOChSinkCurrentInputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChSinkCurrentUpperInputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 2, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSinkCurrentUpperInputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurrentUpperInputPowerThreshold.setDescription('The upper limit threshold on input power. If optIfOChSinkCurrentInputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChSinkIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3), )
if mibBuilder.loadTexts: optIfOChSinkIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkIntervalTable.setDescription('A table of historical OCh sink performance monitoring information.')
optIfOChSinkIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChSinkIntervalNumber"))
if mibBuilder.loadTexts: optIfOChSinkIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkIntervalEntry.setDescription('A conceptual row that contains OCh sink performance monitoring information of an interface during a particular historical interval.')
optIfOChSinkIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChSinkIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOChSinkIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSinkIntervalLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalLastInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkIntervalLastInputPower.setDescription('The last optical power monitored at the input during the interval.')
optIfOChSinkIntervalLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkIntervalLowInputPower.setDescription('The lowest optical power monitored at the input during the interval.')
optIfOChSinkIntervalHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 3, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkIntervalHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkIntervalHighInputPower.setDescription('The highest optical power monitored at the input during the interval.')
optIfOChSinkCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4), )
if mibBuilder.loadTexts: optIfOChSinkCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurDayTable.setDescription('A table of OCh sink performance monitoring information for the current 24-hour interval.')
optIfOChSinkCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSinkCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurDayEntry.setDescription('A conceptual row that contains OCh sink performance monitoring information of an interface for the current 24-hour interval.')
optIfOChSinkCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSinkCurDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurDayLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurDayLowInputPower.setDescription('The lowest optical power monitored at the input during the current 24-hour interval.')
optIfOChSinkCurDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 4, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkCurDayHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkCurDayHighInputPower.setDescription('The highest optical power monitored at the input during the current 24-hour interval.')
optIfOChSinkPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5), )
if mibBuilder.loadTexts: optIfOChSinkPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPrevDayTable.setDescription('A table of OCh sink performance monitoring information for the previous 24-hour interval.')
optIfOChSinkPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSinkPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPrevDayEntry.setDescription('A conceptual row that contains OCh sink performance monitoring information of an interface for the previous 24-hour interval.')
optIfOChSinkPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSinkPrevDayLastInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDayLastInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPrevDayLastInputPower.setDescription('The last optical power monitored at the input during the previous 24-hour interval.')
optIfOChSinkPrevDayLowInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDayLowInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPrevDayLowInputPower.setDescription('The lowest optical power monitored at the input during the previous 24-hour interval.')
optIfOChSinkPrevDayHighInputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 5, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSinkPrevDayHighInputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPrevDayHighInputPower.setDescription('The highest optical power monitored at the input during the previous 24-hour interval.')
optIfOChSrcCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6), )
if mibBuilder.loadTexts: optIfOChSrcCurrentTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentTable.setDescription('A table of OCh source performance monitoring information for the current 15-minute interval.')
optIfOChSrcCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSrcCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentEntry.setDescription('A conceptual row that contains OCh source performance monitoring information of an interface for the current 15-minute interval.')
optIfOChSrcCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSrcCurrentOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentOutputPower.setDescription('The optical power monitored at the output.')
optIfOChSrcCurrentLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 15-minute interval.')
optIfOChSrcCurrentHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurrentHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentHighOutputPower.setDescription('The highest optical power monitored at the output during the current 15-minute interval.')
optIfOChSrcCurrentLowerOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSrcCurrentLowerOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentLowerOutputPowerThreshold.setDescription('The lower limit threshold on output power. If optIfOChSrcCurrentOutputPower drops to this value or below, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChSrcCurrentUpperOutputPowerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 6, 1, 6), Integer32()).setUnits('0.1 dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOChSrcCurrentUpperOutputPowerThreshold.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurrentUpperOutputPowerThreshold.setDescription('The upper limit threshold on output power. If optIfOChSrcCurrentOutputPower reaches or exceeds this value, a Threshold Crossing Alert (TCA) should be sent.')
optIfOChSrcIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7), )
if mibBuilder.loadTexts: optIfOChSrcIntervalTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcIntervalTable.setDescription('A table of historical OCh source performance monitoring information.')
optIfOChSrcIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfOChSrcIntervalNumber"))
if mibBuilder.loadTexts: optIfOChSrcIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcIntervalEntry.setDescription('A conceptual row that contains OCh source performance monitoring information of an interface during a particular historical interval.')
optIfOChSrcIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 1), OptIfIntervalNumber())
if mibBuilder.loadTexts: optIfOChSrcIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcIntervalNumber.setDescription('Uniquely identifies the interval.')
optIfOChSrcIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSrcIntervalLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcIntervalLastOutputPower.setDescription('The last optical power monitored at the output during the interval.')
optIfOChSrcIntervalLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcIntervalLowOutputPower.setDescription('The lowest optical power monitored at the output during the interval.')
optIfOChSrcIntervalHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 7, 1, 5), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcIntervalHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcIntervalHighOutputPower.setDescription('The highest optical power monitored at the output during the interval.')
optIfOChSrcCurDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8), )
if mibBuilder.loadTexts: optIfOChSrcCurDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurDayTable.setDescription('A table of OCh source performance monitoring information for the current 24-hour interval.')
optIfOChSrcCurDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSrcCurDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurDayEntry.setDescription('A conceptual row that contains OCh source performance monitoring information of an interface for the current 24-hour interval.')
optIfOChSrcCurDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSrcCurDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the current 24-hour interval.')
optIfOChSrcCurDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 8, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcCurDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcCurDayHighOutputPower.setDescription('The highest optical power monitored at the output during the current 24-hour interval.')
optIfOChSrcPrevDayTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9), )
if mibBuilder.loadTexts: optIfOChSrcPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcPrevDayTable.setDescription('A table of OCh source performance monitoring information for the previous 24-hour interval.')
optIfOChSrcPrevDayEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOChSrcPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcPrevDayEntry.setDescription('A conceptual row that contains OCh source performance monitoring information of an interface for the previous 24-hour interval.')
optIfOChSrcPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
optIfOChSrcPrevDayLastOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 2), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDayLastOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcPrevDayLastOutputPower.setDescription('The last optical power monitored at the output during the previous 24-hour interval.')
optIfOChSrcPrevDayLowOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 3), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDayLowOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcPrevDayLowOutputPower.setDescription('The lowest optical power monitored at the output during the previous 24-hour interval.')
optIfOChSrcPrevDayHighOutputPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 6, 9, 1, 4), Integer32()).setUnits('0.1 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOChSrcPrevDayHighOutputPower.setStatus('current')
if mibBuilder.loadTexts: optIfOChSrcPrevDayHighOutputPower.setDescription('The highest optical power monitored at the output during the previous 24-hour interval.')
optIfOTUkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1), )
if mibBuilder.loadTexts: optIfOTUkConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkConfigTable.setDescription('A table of OTUk configuration information.')
optIfOTUkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfOTUkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkConfigEntry.setDescription('A conceptual row that contains OTUk configuration information of an interface.')
optIfOTUkDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkDirectionality.setDescription('Indicates the directionality of the entity.')
optIfOTUkBitRateK = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 2), OptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkBitRateK.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkBitRateK.setDescription('Indicates the bit rate of the entity.')
optIfOTUkTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 3), OptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkTraceIdentifierTransmitted.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkTraceIdentifierTransmitted.setDescription('The trace identifier transmitted. This object is applicable when optIfOTUkDirectionality has the value source(2) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value sink(1). If no value is ever set by a management entity for this object, system-specific default value will be used. Any implementation that instantiates this object must document the system-specific default value or how it is derived.')
optIfOTUkDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 4), OptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkDAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkDAPIExpected.setDescription('The DAPI expected by the receiver. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). This object has no effect when optIfOTUkTIMDetMode has the value off(1).')
optIfOTUkSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 5), OptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkSAPIExpected.setDescription('The SAPI expected by the receiver. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). This object has no effect when optIfOTUkTIMDetMode has the value off(1).')
optIfOTUkTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 6), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkTraceIdentifierAccepted.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkTraceIdentifierAccepted.setDescription('The actual trace identifier accepted. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). The value of this object is unspecified when optIfOTUkCurrentStatus indicates a near-end defect (i.e., ssf(3), lof(4), ais(5), lom(6)) that prevents extraction of the trace message.')
optIfOTUkTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 7), OptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkTIMDetMode.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkTIMDetMode.setDescription('Indicates the mode of the Trace Identifier Mismatch (TIM) Detection function. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). The default value of this object is off(1).')
optIfOTUkTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkTIMActEnabled.setDescription('Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). This object has no effect when optIfOTUkTIMDetMode has the value off(1). The default value of this object is false(2).')
optIfOTUkDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 9), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkDEGThr.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkDEGThr.setDescription('Indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. A PM Second is declared bad if the percentage of detected errored blocks in that second is greater than or equal to optIfOTUkDEGThr. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). The default value of this object is Severely Errored Second (SES) Estimator (See ITU-T G.7710).')
optIfOTUkDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 10), OptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkDEGM.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkDEGM.setDescription('Indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if optIfOTUkDEGM consecutive bad PM Seconds are detected. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). The default value of this object is 7 (See ITU-T G.7710).')
optIfOTUkSinkAdaptActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSinkAdaptActive.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkSinkAdaptActive.setDescription('Indicates whether the sink adaptation function is activated or not. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). The default value of this object is false(2).')
optIfOTUkSourceAdaptActive = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSourceAdaptActive.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkSourceAdaptActive.setDescription('Indicates whether the source adaptation function is activated or not. This object is only applicable to the source function, i.e., only when optIfOTUkDirectionality has the value source(2) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value sink(1). The default value of this object is false(2).')
optIfOTUkSinkFECEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfOTUkSinkFECEnabled.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkSinkFECEnabled.setDescription('If Forward Error Correction (FEC) is supported, this object indicates whether FEC at the OTUk sink adaptation function is enabled or not. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2). The default value of this object is true(1).')
optIfOTUkCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 1, 1, 14), Bits().clone(namedValues=NamedValues(("tim", 0), ("deg", 1), ("bdi", 2), ("ssf", 3), ("lof", 4), ("ais", 5), ("lom", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfOTUkCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. This object is only applicable to the sink function, i.e., only when optIfOTUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfOTUkDirectionality has the value source(2).')
optIfGCC0ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2), )
if mibBuilder.loadTexts: optIfGCC0ConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfGCC0ConfigTable.setDescription('A table of GCC0 configuration information.')
optIfGCC0ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfGCC0Directionality"))
if mibBuilder.loadTexts: optIfGCC0ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfGCC0ConfigEntry.setDescription('A conceptual row that contains GCC0 configuration information of an interface. Each instance must correspond to an instance of optIfOTUkConfigEntry. Separate source and/or sink instances may exist for a given ifIndex value, or a single bidirectional instance may exist, but a bidirectional instance may not coexist with a source or sink instance. Instances of this conceptual row persist across agent restarts.')
optIfGCC0Directionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 1), OptIfDirectionality())
if mibBuilder.loadTexts: optIfGCC0Directionality.setStatus('current')
if mibBuilder.loadTexts: optIfGCC0Directionality.setDescription('Indicates the directionality of the entity. The values source(2) and bidirectional(3) are not allowed if the corresponding instance of optIfOTUkDirectionality has the value sink(1). The values sink(1) and bidirectional(3) are not allowed if the corresponding instance of optIfOTUkDirectionality has the value source(2).')
optIfGCC0Application = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC0Application.setStatus('current')
if mibBuilder.loadTexts: optIfGCC0Application.setDescription('Indicates the application transported by the GCC0 entity. Example applications are ECC, User data channel. The value of this object may not be changed when optIfGCC0RowStatus has the value active(1).')
optIfGCC0RowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC0RowStatus.setStatus('current')
if mibBuilder.loadTexts: optIfGCC0RowStatus.setDescription('This columnar object is used for creating and deleting a conceptual row of the optIfGCC0 config table. It is used to model the addGCC0Access and removeGCC0Access operations of an OTUk_TTP for GCC0 access control as defined in G.874.1. Setting RowStatus to createAndGo or createAndWait implies addGCC0Access. Setting RowStatus to destroy implies removeGCC0Access.')
optIfODUkConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1), )
if mibBuilder.loadTexts: optIfODUkConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfODUkConfigTable.setDescription('A table of ODUk configuration information.')
optIfODUkConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfODUkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfODUkConfigEntry.setDescription('A conceptual row that contains ODUk configuration information of an interface.')
optIfODUkDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 1), OptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfODUkDirectionality.setDescription('Indicates the directionality of the entity.')
optIfODUkBitRateK = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 2), OptIfBitRateK()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkBitRateK.setStatus('current')
if mibBuilder.loadTexts: optIfODUkBitRateK.setDescription('Indicates the bit rate of the entity.')
optIfODUkTcmFieldsInUse = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 3), Bits().clone(namedValues=NamedValues(("tcmField1", 0), ("tcmField2", 1), ("tcmField3", 2), ("tcmField4", 3), ("tcmField5", 4), ("tcmField6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTcmFieldsInUse.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTcmFieldsInUse.setDescription('Indicates the TCM field(s) that are currently in use. The positions of the bits correspond to the TCM fields. A bit that is set to 1 means that the corresponding TCM field is used. This object will be updated when rows are created in or deleted from the optIfODUkTConfigTable, or the optIfODUkTNimConfigTable.')
optIfODUkPositionSeqCurrentSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkPositionSeqCurrentSize.setStatus('current')
if mibBuilder.loadTexts: optIfODUkPositionSeqCurrentSize.setDescription('This variable indicates the current size of the position sequence (i.e., number of TCM function and/or GCC12 access that have been created in the ODUk interface). When the value of this variable is greater than zero, it means that one or more TCM function and/or GCC12 access have been created in the ODUk interface. In this case, there will be as many rows in the optIfODUkPositionSeqTable as the value of optIfODUkPositionSeqCurrentSize corresponding to this ODUk interface, one row for each TCM function or GCC12 access. The position of the TCM function and/or GCC12 access within the sequence is indicated by the optIfODUkPositionSeqPosition variable in optIfODUkPositionSeqTable. The optIfODUkPositionSeqTable also provides pointers to the corresponding TCM function (optIfODUkT) and GCC12 access (optIfGCC12) entities.')
optIfODUkTtpPresent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTtpPresent.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpPresent.setDescription('This object has the value true(1) if the ifEntry under which it is instantiated contains an ODUk Trail Termination Point, i.e., is the endpoint of an ODUk path. In that case there will be a corresponding row in the ODUk TTP config table and it will not be possible to create corresponding rows in the ODUk NIM config table. This object has the value false(2) if the ifEntry under which it is instantiated contains an intermediate ODUk Connection Termination Point. In that case there is no corresponding row in the ODUk TTP config table, but it will be possible to create corresponding rows in the ODUk NIM config table. This object also affects the allowable options in rows created in the GCC12 config table and in the ODUkT config table, as specified in the DESCRIPTION clauses of the columns in those tables.')
optIfODUkTtpConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2), )
if mibBuilder.loadTexts: optIfODUkTtpConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpConfigTable.setDescription('A table of ODUk TTP configuration information.')
optIfODUkTtpConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: optIfODUkTtpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpConfigEntry.setDescription('A conceptual row that contains ODUk TTP configuration information of an interface.')
optIfODUkTtpTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 1), OptIfTxTI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpTraceIdentifierTransmitted.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpTraceIdentifierTransmitted.setDescription('The trace identifier transmitted. This object is applicable when optIfODUkDirectionality has the value source(2) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value sink(1). If no value is ever set by a management entity for this object, system-specific default value will be used. Any implementation that instantiates this object must document the system-specific default value or how it is derived.')
optIfODUkTtpDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 2), OptIfExDAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpDAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpDAPIExpected.setDescription('The DAPI expected by the receiver. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2). This object has no effect when optIfODUkTtpTIMDetMode has the value off(1).')
optIfODUkTtpSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 3), OptIfExSAPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpSAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpSAPIExpected.setDescription('The SAPI expected by the receiver. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2). This object has no effect when optIfODUkTtpTIMDetMode has the value off(1).')
optIfODUkTtpTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 4), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTtpTraceIdentifierAccepted.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpTraceIdentifierAccepted.setDescription('The actual trace identifier accepted. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2). The value of this object is unspecified when optIfODUkTtpCurrentStatus indicates a near-end defect (i.e., oci(0), lck(1), ssf(5)) that prevents extraction of the trace message.')
optIfODUkTtpTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 5), OptIfTIMDetMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpTIMDetMode.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpTIMDetMode.setDescription('Indicates the mode of the Trace Identifier Mismatch (TIM) Detection function. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2). The default value of this object is off(1).')
optIfODUkTtpTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpTIMActEnabled.setDescription('Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2). This object has no effect when optIfODUkTtpTIMDetMode has the value off(1). The default value of this object is false(2).')
optIfODUkTtpDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 7), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpDEGThr.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpDEGThr.setDescription('Indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. A PM Second is declared bad if the percentage of detected errored blocks in that second is greater than or equal to optIfODUkDEGThr. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2). The default value of this object is Severely Errored Second (SES) Estimator (See ITU-T G.7710).')
optIfODUkTtpDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 8), OptIfDEGM()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: optIfODUkTtpDEGM.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpDEGM.setDescription('Indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if optIfODUkDEGM consecutive bad PM Seconds are detected. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2). The default value of this object is 7 (See ITU-T G.7710).')
optIfODUkTtpCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 2, 1, 9), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTtpCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. This object is only applicable to the sink function, i.e., only when optIfODUkDirectionality has the value sink(1) or bidirectional(3). It must not be instantiated in rows where optIfODUkDirectionality has the value source(2).')
optIfODUkPositionSeqTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3), )
if mibBuilder.loadTexts: optIfODUkPositionSeqTable.setStatus('current')
if mibBuilder.loadTexts: optIfODUkPositionSeqTable.setDescription('A table of ODUk Position Sequence information.')
optIfODUkPositionSeqEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkPositionSeqIndex"))
if mibBuilder.loadTexts: optIfODUkPositionSeqEntry.setStatus('current')
if mibBuilder.loadTexts: optIfODUkPositionSeqEntry.setDescription('A conceptual row that contains ODUk position sequence information of an ODUk interface. The ODUk interface is identified by the ifIndex. Associated with each ODUk interface there may be one of more conceptual rows in the optIfODUkPositionSeqTable. Each row represents a TCM or GCC12 access function within the associated ODUk interface. Rows of the optIfODUkPositionSeqTable table are created/deleted as the result of the creation/deletion of the optIfODUkT or optIfGCC12 entities.')
optIfODUkPositionSeqIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: optIfODUkPositionSeqIndex.setStatus('current')
if mibBuilder.loadTexts: optIfODUkPositionSeqIndex.setDescription('This variable identifies a row in the optIfODUkPositionSeqTable Table. Each row of the optIfODUkPositionSeqTable Table represents a TCM or GCC12 access function within the associated ODUk interface.')
optIfODUkPositionSeqPosition = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkPositionSeqPosition.setStatus('current')
if mibBuilder.loadTexts: optIfODUkPositionSeqPosition.setDescription('This variable indicates the position of the TCM or GCC12 access function within the sequence of TCMs & GCC12 access functions of the associated ODUk interface. The TCM or GCC12 presented by this row is referenced by the optIfODUkPositionSeqPointer variable.')
optIfODUkPositionSeqPointer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 3, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkPositionSeqPointer.setStatus('current')
if mibBuilder.loadTexts: optIfODUkPositionSeqPointer.setDescription('This variable identifies the TCM or GCC12 access function by pointing to the corresponding optIfODUkT or optIfGCC12 entity.')
optIfODUkNimConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4), )
if mibBuilder.loadTexts: optIfODUkNimConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimConfigTable.setDescription('A table of ODUkNim configuration information.')
optIfODUkNimConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkNimDirectionality"))
if mibBuilder.loadTexts: optIfODUkNimConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimConfigEntry.setDescription('A conceptual row that contains ODUkNim configuration information of an interface. Each instance must correspond to an instance of optIfODUkConfigEntry for which optIfODUkTtpPresent has the value false(2). Instances of this conceptual row persist across agent restarts, and read-create columns other than the status column may be modified while the row is active.')
optIfODUkNimDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 1), OptIfSinkOrSource())
if mibBuilder.loadTexts: optIfODUkNimDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimDirectionality.setDescription('Specifies the monitor point for the ODUk Path non-intrusive monitoring function. The value source(2) is not allowed if the corresponding instance of optIfODUkDirectionality has the value sink(1), and the value sink(1) is not allowed if the corresponding instance of optIfODUkDirectionality has the value source(2). Either the value sink(1) or source(2) is allowed if the corresponding instance of optIfODUkDirectionality has the value bidirectional(3). The value sink(1) means monitoring at the sink direction path signal of the ODUk CTP. The value source(2) means monitoring at the source direction path signal of the ODUk CTP. Monitoring the source direction of an ODUk CTP is necessary in those cases where the ODUk CTP is at an SNCP (Subnetwork Connection Protection) end (e.g., see Figure I.1.2/G.874.1). If one would like to get the performance of the protected connection, one cannot use the NIM function at both ODUk CTP sinks (before the matrix), instead one should monitor the signal at the source ODUk CTP after the matrix.')
optIfODUkNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 2), OptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimDAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimDAPIExpected.setDescription('The DAPI expected by the receiver. This object has no effect if optIfODUkNimTIMDetMode has the value off(1) or sapi(3).')
optIfODUkNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 3), OptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimSAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimSAPIExpected.setDescription('The SAPI expected by the receiver. This object has no effect if optIfODUkNimTIMDetMode has the value off(1) or dapi(2).')
optIfODUkNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 4), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkNimTraceIdentifierAccepted.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimTraceIdentifierAccepted.setDescription('The actual trace identifier accepted. The value of this object is unspecified if optIfODUkNimCurrentStatus has any of the bit positions oci(0), lck(1), or ssf(5) set or if optIfODUkNimRowStatus has any value other than active(1).')
optIfODUkNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 5), OptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimTIMDetMode.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimTIMDetMode.setDescription('Indicates the mode of the Trace Identifier Mismatch (TIM) Detection function.')
optIfODUkNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimTIMActEnabled.setDescription('Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled.')
optIfODUkNimDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 7), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimDEGThr.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimDEGThr.setDescription('Indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. A PM Second is declared bad if the percentage of detected errored blocks in that second is greater than or equal to optIfODUkNimDEGThr.')
optIfODUkNimDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 8), OptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimDEGM.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimDEGM.setDescription('Indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if optIfODUkNimDEGM consecutive bad PM Seconds are detected.')
optIfODUkNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 9), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkNimCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. The value of this object is unspecified if optIfODUkNimRowStatus has any value other than active(1).')
optIfODUkNimRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 4, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkNimRowStatus.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimRowStatus.setDescription('This columnar object is used for creating and deleting a conceptual row of the optIfODUkNim config table. It is used to model the activateNim and deactivateNim operations of an OTUk_CTP for non-intrusive monitoring control as defined in G.874.1. Setting RowStatus to createAndGo or createAndWait implies activateNim. Setting RowStatus to destroy implies deactivateNim.')
optIfGCC12ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5), )
if mibBuilder.loadTexts: optIfGCC12ConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12ConfigTable.setDescription('A table of GCC12 configuration information. The GCC function processes the GCC overhead bytes passing through them but leave the remainder of the ODUk overhead and payload data alone.')
optIfGCC12ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfGCC12Codirectional"), (0, "OPT-IF-MIB", "optIfGCC12GCCAccess"))
if mibBuilder.loadTexts: optIfGCC12ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12ConfigEntry.setDescription('A conceptual row that contains GCC12 configuration information of an interface. Each instance must correspond to an instance of optIfODUkConfigEntry. Separate instances providing GCC1-only access and GCC2-only access may exist for a given ifIndex value, or a single instance providing GCC1 + GCC2 may exist, but a GCC1 + GCC2 instance may not coexist with a GCC1-only or GCC2-only instance. Instances of this conceptual row persist across agent restarts.')
optIfGCC12Codirectional = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 1), TruthValue())
if mibBuilder.loadTexts: optIfGCC12Codirectional.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12Codirectional.setDescription('Indicates the directionality of the GCC12 termination with respect to the associated ODUk CTP. The value true(1) means that the sink part of the GCC12 extracts COMMS data from the signal at the input to the ODUk CTP sink and the source part of the GCC12 inserts COMMS data into the signal at the output of the ODUk CTP source. The value false(2) means that the sink part of the GCC12 extracts COMMS data from the signal at the output of the ODUk CTP source and the source part of the GCC12 inserts COMMS data into the signal at the input of the ODUk CTP sink. This attribute may assume either value when the corresponding instance of optIfODUkTtpPresent has the value false(2). When the value of the corresponding instance of optIfODUkTtpPresent is true(1) then the only value allowed for this attribute is true(1).')
optIfGCC12GCCAccess = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gcc1", 1), ("gcc2", 2), ("gcc1and2", 3))))
if mibBuilder.loadTexts: optIfGCC12GCCAccess.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12GCCAccess.setDescription('Indicates the GCC access represented by the entity.')
optIfGCC12GCCPassThrough = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC12GCCPassThrough.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12GCCPassThrough.setDescription('Controls whether the selected GCC overhead bytes are passed through or modified. The value true(1) means that the selected GCC overhead bytes are passed through unmodified from the ODUk CTP input to the ODUk CTP output. The value false(2) means that the selected GCC overhead bytes are set to zero at the ODUk CTP output after the extraction of the COMMS data. This object has no effect if the corresponding instance of optIfODUkTtpPresent has the value true(1). The value of this object may not be changed when optIfGCC12RowStatus has the value active(1).')
optIfGCC12Application = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC12Application.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12Application.setDescription('Indicates the application transported by the GCC12 entity. Example applications are ECC, User data channel. The value of this object may not be changed when optIfGCC12RowStatus has the value active(1).')
optIfGCC12RowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 8, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfGCC12RowStatus.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12RowStatus.setDescription('This columnar object is used for creating and deleting a conceptual row of the optIfGCC12 config table. It is used to model the addGCC12Access and removeGCC12Access operations of an ODUk_CTP or ODUk_TTP for GCC12 access control as defined in G.874.1. Setting RowStatus to createAndGo or createAndWait implies addGCC12Access. Setting RowStatus to destroy implies removeGCC12Access. Successful addition/removal of the GCC12 access function will result in updating the optIfODUkPositionSeqCurrentSize variable and the optIfODUkPositionSeqTable table of the associated ODUk entry in the optIfODUkConfigTable.')
optIfODUkTConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1), )
if mibBuilder.loadTexts: optIfODUkTConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTConfigTable.setDescription('A table of ODUkT configuration information.')
optIfODUkTConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkTTcmField"), (0, "OPT-IF-MIB", "optIfODUkTCodirectional"))
if mibBuilder.loadTexts: optIfODUkTConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTConfigEntry.setDescription('A conceptual row that contains ODUkT configuration information of an interface. Each instance must correspond to an instance of optIfODUkConfigEntry. Rows in this table are mutually exclusive with rows in the ODUkT NIM config table -- in other words, this row object may not be instantiated for a given pair of ifIndex and TCM field values if a corresponding instance of optIfODUkTNimConfigEntry already exists. Instances of this conceptual row persist across agent restarts. Except where noted otherwise, read-create columns other than the status column may be modified while the row is active.')
optIfODUkTTcmField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: optIfODUkTTcmField.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTTcmField.setDescription('Indicates the tandem connection monitoring field of the ODUk OH. Valid values are integers from 1 to 6.')
optIfODUkTCodirectional = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 2), TruthValue())
if mibBuilder.loadTexts: optIfODUkTCodirectional.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTCodirectional.setDescription('Indicates the directionality of the ODUkT termination point with respect to the associated ODUk CTP. The value true(1) means that the sink part of the ODUkT TP extracts TCM data from the signal at the input to the ODUk CTP sink and the source part of the ODUkT TP inserts TCM data into the signal at the output of the ODUk CTP source. The value false(2) means that the sink part of the ODUkT TP extracts TCM data from the signal at the output of the ODUk CTP source and the source part of the ODUkT TP inserts TCM data into the signal at the input of the ODUk CTP sink. This attribute may assume either value when the corresponding instance of optIfODUkTtpPresent has the value false(2). When the value of the corresponding instance of optIfODUkTtpPresent is true(1) then the only value allowed for this attribute is true(1).')
optIfODUkTTraceIdentifierTransmitted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 3), OptIfTxTI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTTraceIdentifierTransmitted.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTTraceIdentifierTransmitted.setDescription('The trace identifier transmitted. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value false(2), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value true(1). It must not be instantiated in rows for all other cases.')
optIfODUkTDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 4), OptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTDAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTDAPIExpected.setDescription('The DAPI expected by the receiver. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases. This object has no effect when optIfODUkTTIMDetMode has the value off(1).')
optIfODUkTSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 5), OptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTSAPIExpected.setDescription('The SAPI expected by the receiver. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases. This object has no effect when optIfODUkTTIMDetMode has the value off(1).')
optIfODUkTTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 6), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTTraceIdentifierAccepted.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTTraceIdentifierAccepted.setDescription('The actual trace identifier accepted. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases. The value of this object is unspecified when optIfODUkTCurrentStatus indicates a near-end defect (i.e., oci(0), lck(1), ssf(5)) that prevents extraction of the trace message.')
optIfODUkTTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 7), OptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTTIMDetMode.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTTIMDetMode.setDescription('Indicates the mode of the Trace Identifier Mismatch (TIM) Detection function. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases. The default value of this object is off(1).')
optIfODUkTTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTTIMActEnabled.setDescription('Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases. This object has no effect when optIfODUkTTIMDetMode has the value off(1). The default value of this object is false(2).')
optIfODUkTDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 9), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTDEGThr.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTDEGThr.setDescription('Indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. A PM Second is declared bad if the percentage of detected errored blocks in that second is greater than or equal to optIfODUkTDEGThr. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases. The default value of this object is Severely Errored Second (SES) Estimator (See ITU-T G.7710).')
optIfODUkTDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 10), OptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTDEGM.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTDEGM.setDescription('Indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if optIfODUkTDEGM consecutive bad PM Seconds are detected. This object is applicable only to the following three cases. (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases. The default value of this object is 7 (See ITU-T G.7710).')
optIfODUkTSinkMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("monitor", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSinkMode.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTSinkMode.setDescription('This variable specifies the TCM mode at the entity. The value operational(1) means that TCM Overhead (TCMOH) processes (see ITU-T G.798) shall be performed and consequent actions for AIS, Trail Signal Fail (TSF), Trail Signal Degraded (TSD) shall be initiated in case of defects. The value monitor(2) means that TCMOH processes shall be performed but consequent actions for AIS, Trail Server Failure (TSF), Trail Server Degraded (TSD) shall _not_ be initiated in case of defects. This object is applicable only when the value of optIfODUkTtpPresent is false(2) and also either one of the following three cases holds: (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases.')
optIfODUkTSinkLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSinkLockSignalAdminState.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTSinkLockSignalAdminState.setDescription('Provides the capability to provision the LOCK signal, which is one of the ODUk maintenance signals, at the ODUKT sink. When a Tandem Connection endpoint is set to admin state locked, it inserts the ODUk-LCK signal in the sink direction. This object is applicable only when the value of optIfODUkTtpPresent is false(2) and also either one of the following three cases holds: (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases.')
optIfODUkTSourceLockSignalAdminState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("normal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTSourceLockSignalAdminState.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTSourceLockSignalAdminState.setDescription('Provides the capability to provision the LOCK signal, which is one of the ODUk maintenance signals, at the source. When a Tandem Connection endpoint is set to admin state locked, it inserts the ODUk-LCK signal in the source direction. This object is applicable only when either one of the following three cases holds: (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value false(2), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value true(1). It must not be instantiated in rows for all other cases.')
optIfODUkTCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 14), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. This object is applicable only when either one of the following three cases holds: (i) optIfODUkDirectionality has the value bidirectional(3), or (ii) optIfODUkDirectionality has the value sink(1) and optIfODUkTCodirectional has the value true(1), or (iii) optIfODUkDirectionality has the value source(3) and optIfODUkTCodirectional has the value false(2). It must not be instantiated in rows for all other cases.')
optIfODUkTRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTRowStatus.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTRowStatus.setDescription('This columnar object is used for creating and deleting a conceptual row of the optIfODUkT config table. It is used to model the addTCM and removeTCM operations of an ODUk_CTP or ODUk_TTP for Tandem connection monitoring as defined in ITU-T G.874.1. Setting RowStatus to createAndGo or createAndWait implies addTCM. Setting RowStatus to destroy implies removeTCM. Successful addition/removal of TCM will result in updating the optIfODUkTcmFieldsInUse and optIfODUkPositionSeqCurrentSize variables and the optIfODUkPositionSeqTable table of the associated ODUk entry in the optIfODUkConfigTable.')
optIfODUkTNimConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2), )
if mibBuilder.loadTexts: optIfODUkTNimConfigTable.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimConfigTable.setDescription('A table of ODUkTNim configuration information.')
optIfODUkTNimConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OPT-IF-MIB", "optIfODUkTNimTcmField"), (0, "OPT-IF-MIB", "optIfODUkTNimDirectionality"))
if mibBuilder.loadTexts: optIfODUkTNimConfigEntry.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimConfigEntry.setDescription('A conceptual row that contains ODUkTNim configuration information of an interface. Each instance must correspond to an instance of optIfODUkConfigEntry. Rows in this table are mutually exclusive with rows in the ODUkT config table -- in other words, this row object may not be instantiated for a given pair of ifIndex and TCM field values if a corresponding instance of optIfODUkTConfigEntry already exists. Instances of this conceptual row persist across agent restarts, and read-create columns other than the status column may be modified while the row is active.')
optIfODUkTNimTcmField = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: optIfODUkTNimTcmField.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimTcmField.setDescription('Indicates the tandem connection monitoring field of the ODUk OH on which non-intrusive monitoring is performed. Valid values are integers from 1 to 6.')
optIfODUkTNimDirectionality = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 2), OptIfSinkOrSource())
if mibBuilder.loadTexts: optIfODUkTNimDirectionality.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimDirectionality.setDescription('Specifies the monitor point for the ODUk TCM non-intrusive monitoring function. The value source(2) is not allowed if the corresponding instance of optIfODUkDirectionality has the value sink(1), and the value sink(1) is not allowed if the corresponding instance of optIfODUkDirectionality has the value source(2). Either the value sink(1) or source(2) is allowed if the corresponding instance of optIfODUkDirectionality has the value bidirectional(3). The value sink(1) means monitoring at the sink direction TCM signal of the ODUk CTP. The value source(2) means monitoring at the source direction path signal of the ODUk CTP.')
optIfODUkTNimDAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 3), OptIfExDAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimDAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimDAPIExpected.setDescription('The DAPI expected by the receiver. This object has no effect if optIfODUkTNimTIMDetMode has the value off(1) or sapi(3).')
optIfODUkTNimSAPIExpected = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 4), OptIfExSAPI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimSAPIExpected.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimSAPIExpected.setDescription('The SAPI expected by the receiver. This object has no effect if optIfODUkTNimTIMDetMode has the value off(1) or dapi(2).')
optIfODUkTNimTraceIdentifierAccepted = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 5), OptIfAcTI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTNimTraceIdentifierAccepted.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimTraceIdentifierAccepted.setDescription('The actual trace identifier accepted. The value of this object is unspecified if optIfODUkTNimCurrentStatus has any of the bit positions oci(0), lck(1), or ssf(5) set or if optIfODUkTNimRowStatus has any value other than active(1).')
optIfODUkTNimTIMDetMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 6), OptIfTIMDetMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimTIMDetMode.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimTIMDetMode.setDescription('Indicates the mode of the Trace Identifier Mismatch (TIM) Detection function.')
optIfODUkTNimTIMActEnabled = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimTIMActEnabled.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimTIMActEnabled.setDescription('Indicates whether the Trace Identifier Mismatch (TIM) Consequent Action function is enabled.')
optIfODUkTNimDEGThr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 8), OptIfDEGThr()).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimDEGThr.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimDEGThr.setDescription('Indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. A PM Second is declared bad if the percentage of detected errored blocks in that second is greater than or equal to optIfODUkTNimDEGThr.')
optIfODUkTNimDEGM = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 9), OptIfDEGM()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimDEGM.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimDEGM.setDescription('Indicates the threshold level for declaring a Degraded Signal defect (dDEG). A dDEG shall be declared if optIfODUkTNimDEGM consecutive bad PM Seconds are detected.')
optIfODUkTNimCurrentStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 10), Bits().clone(namedValues=NamedValues(("oci", 0), ("lck", 1), ("tim", 2), ("deg", 3), ("bdi", 4), ("ssf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: optIfODUkTNimCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimCurrentStatus.setDescription('Indicates the defect condition of the entity, if any. The value of this object is unspecified if optIfODUkTNimRowStatus has any value other than active(1).')
optIfODUkTNimRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 133, 1, 9, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: optIfODUkTNimRowStatus.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimRowStatus.setDescription('This columnar object is used for creating and deleting a conceptual row of the optIfODUkTNim config table. It is used to model the addTCM and removeTCM operations of an ODUk_CTP or ODUk_TTP for non-intrusive Tandem connection monitoring as defined in ITU-T G.874.1. Setting RowStatus to createAndGo or createAndWait implies addTCM. Setting RowStatus to destroy implies removeTCM. Successful addition/removal of Nim TCM will result in updating the optIfODUkPositionSeqCurrentSize variable and the optIfODUkPositionSeqTable table of the associated ODUk entry in the optIfODUkConfigTable.')
optIfOTMnGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 1)).setObjects(("OPT-IF-MIB", "optIfOTMnOrder"), ("OPT-IF-MIB", "optIfOTMnReduced"), ("OPT-IF-MIB", "optIfOTMnBitRates"), ("OPT-IF-MIB", "optIfOTMnInterfaceType"), ("OPT-IF-MIB", "optIfOTMnTcmMax"), ("OPT-IF-MIB", "optIfOTMnOpticalReach"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTMnGroup = optIfOTMnGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTMnGroup.setDescription('A collection of OTMn structure information objects.')
optIfPerfMonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 2)).setObjects(("OPT-IF-MIB", "optIfPerfMonCurrentTimeElapsed"), ("OPT-IF-MIB", "optIfPerfMonCurDayTimeElapsed"), ("OPT-IF-MIB", "optIfPerfMonIntervalNumIntervals"), ("OPT-IF-MIB", "optIfPerfMonIntervalNumInvalidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfPerfMonGroup = optIfPerfMonGroup.setStatus('current')
if mibBuilder.loadTexts: optIfPerfMonGroup.setDescription('A collection of performance monitoring interval objects.')
optIfOTSnCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 3)).setObjects(("OPT-IF-MIB", "optIfOTSnDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnCommonGroup = optIfOTSnCommonGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnCommonGroup.setDescription('A collection of configuration objects applicable to all OTSn interfaces.')
optIfOTSnSourceGroupFull = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 4)).setObjects(("OPT-IF-MIB", "optIfOTSnTraceIdentifierTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSourceGroupFull = optIfOTSnSourceGroupFull.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSourceGroupFull.setDescription('A collection of configuration objects applicable to full-functionality/IaDI OTSn interfaces that support source functions.')
optIfOTSnAPRStatusGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 5)).setObjects(("OPT-IF-MIB", "optIfOTSnAprStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnAPRStatusGroup = optIfOTSnAPRStatusGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnAPRStatusGroup.setDescription('A collection of objects applicable to OTSn interfaces that support Automatic Power Reduction functions.')
optIfOTSnAPRControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 6)).setObjects(("OPT-IF-MIB", "optIfOTSnAprControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnAPRControlGroup = optIfOTSnAPRControlGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnAPRControlGroup.setDescription('A collection of objects applicable to OTSn interfaces that provide Automatic Power Reduction control functions.')
optIfOTSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 7)).setObjects(("OPT-IF-MIB", "optIfOTSnCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkGroupBasic = optIfOTSnSinkGroupBasic.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkGroupBasic.setDescription('A collection of configuration objects applicable to all OTSn interfaces that support sink functions.')
optIfOTSnSinkGroupFull = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 8)).setObjects(("OPT-IF-MIB", "optIfOTSnDAPIExpected"), ("OPT-IF-MIB", "optIfOTSnSAPIExpected"), ("OPT-IF-MIB", "optIfOTSnTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfOTSnTIMDetMode"), ("OPT-IF-MIB", "optIfOTSnTIMActEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkGroupFull = optIfOTSnSinkGroupFull.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkGroupFull.setDescription('A collection of configuration objects applicable to full-functionality/IaDI OTSn interfaces that support sink functions.')
optIfOTSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 9)).setObjects(("OPT-IF-MIB", "optIfOTSnSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkPreOtnPMGroup = optIfOTSnSinkPreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OTSn interfaces that support sink functions.')
optIfOTSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 10)).setObjects(("OPT-IF-MIB", "optIfOTSnSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSinkPreOtnPMThresholdGroup = optIfOTSnSinkPreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSinkPreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OTSn interfaces that support sink functions.')
optIfOTSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 11)).setObjects(("OPT-IF-MIB", "optIfOTSnSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOTSnSrcPrevDayHighInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSourcePreOtnPMGroup = optIfOTSnSourcePreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSourcePreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OTSn interfaces that support source functions.')
optIfOTSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 12)).setObjects(("OPT-IF-MIB", "optIfOTSnSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOTSnSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTSnSourcePreOtnPMThresholdGroup = optIfOTSnSourcePreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTSnSourcePreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OTSn interfaces that support source functions.')
optIfOMSnCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 13)).setObjects(("OPT-IF-MIB", "optIfOMSnDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnCommonGroup = optIfOMSnCommonGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnCommonGroup.setDescription('A collection of configuration objects applicable to all OMSn interfaces.')
optIfOMSnSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 14)).setObjects(("OPT-IF-MIB", "optIfOMSnCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSinkGroupBasic = optIfOMSnSinkGroupBasic.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkGroupBasic.setDescription('A collection of configuration objects applicable to all OMSn interfaces that support sink functions.')
optIfOMSnSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 15)).setObjects(("OPT-IF-MIB", "optIfOMSnSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSinkPreOtnPMGroup = optIfOMSnSinkPreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OMSn interfaces that support sink functions.')
optIfOMSnSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 16)).setObjects(("OPT-IF-MIB", "optIfOMSnSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSinkPreOtnPMThresholdGroup = optIfOMSnSinkPreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSinkPreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OMSn interfaces that support sink functions.')
optIfOMSnSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 17)).setObjects(("OPT-IF-MIB", "optIfOMSnSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOMSnSrcPrevDayHighAggregatedInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSourcePreOtnPMGroup = optIfOMSnSourcePreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSourcePreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OMSn interfaces that support source functions.')
optIfOMSnSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 18)).setObjects(("OPT-IF-MIB", "optIfOMSnSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOMSnSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOMSnSourcePreOtnPMThresholdGroup = optIfOMSnSourcePreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOMSnSourcePreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OMSn interfaces that that support source functions.')
optIfOChGroupCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 19)).setObjects(("OPT-IF-MIB", "optIfOChGroupDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupCommonGroup = optIfOChGroupCommonGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupCommonGroup.setDescription('A collection of configuration objects applicable to all OChGroup interfaces.')
optIfOChGroupSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 20)).setObjects(("OPT-IF-MIB", "optIfOChGroupSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSinkPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSinkPreOtnPMGroup = optIfOChGroupSinkPreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OChGroup interfaces that support sink functions.')
optIfOChGroupSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 21)).setObjects(("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentUpperInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSinkCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSinkPreOtnPMThresholdGroup = optIfOChGroupSinkPreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSinkPreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OChGroup interfaces that support sink functions.')
optIfOChGroupSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 22)).setObjects(("OPT-IF-MIB", "optIfOChGroupSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcIntervalHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcCurDayHighAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLastAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayLowAggregatedInputPower"), ("OPT-IF-MIB", "optIfOChGroupSrcPrevDayHighAggregatedInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSourcePreOtnPMGroup = optIfOChGroupSourcePreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSourcePreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OChGroup interfaces that support source functions.')
optIfOChGroupSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 23)).setObjects(("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentUpperOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChGroupSrcCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChGroupSourcePreOtnPMThresholdGroup = optIfOChGroupSourcePreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChGroupSourcePreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OChGroup interfaces that that support source functions.')
optIfOChCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 24)).setObjects(("OPT-IF-MIB", "optIfOChDirectionality"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChCommonGroup = optIfOChCommonGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChCommonGroup.setDescription('A collection of configuration objects applicable to all OCh interfaces.')
optIfOChSinkGroupBasic = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 25)).setObjects(("OPT-IF-MIB", "optIfOChCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSinkGroupBasic = optIfOChSinkGroupBasic.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkGroupBasic.setDescription('A collection of configuration objects applicable to all OCh interfaces that support sink functions.')
optIfOChSinkPreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 26)).setObjects(("OPT-IF-MIB", "optIfOChSinkCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkCurrentInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurrentLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurrentHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkIntervalLastInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkIntervalHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkCurDayLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkCurDayHighInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSinkPrevDayLastInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDayLowInputPower"), ("OPT-IF-MIB", "optIfOChSinkPrevDayHighInputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSinkPreOtnPMGroup = optIfOChSinkPreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OCh interfaces that support sink functions.')
optIfOChSinkPreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 27)).setObjects(("OPT-IF-MIB", "optIfOChSinkCurrentLowerInputPowerThreshold"), ("OPT-IF-MIB", "optIfOChSinkCurrentUpperInputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSinkPreOtnPMThresholdGroup = optIfOChSinkPreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChSinkPreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OCh interfaces that support sink functions.')
optIfOChSourcePreOtnPMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 28)).setObjects(("OPT-IF-MIB", "optIfOChSrcCurrentSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcCurrentOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurrentLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurrentHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalSuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcIntervalLastOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcIntervalHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcCurDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcCurDayHighOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDaySuspectedFlag"), ("OPT-IF-MIB", "optIfOChSrcPrevDayLastOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDayLowOutputPower"), ("OPT-IF-MIB", "optIfOChSrcPrevDayHighOutputPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSourcePreOtnPMGroup = optIfOChSourcePreOtnPMGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChSourcePreOtnPMGroup.setDescription('A collection of pre-OTN performance monitoring objects applicable to OCh interfaces that support source functions.')
optIfOChSourcePreOtnPMThresholdGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 29)).setObjects(("OPT-IF-MIB", "optIfOChSrcCurrentLowerOutputPowerThreshold"), ("OPT-IF-MIB", "optIfOChSrcCurrentUpperOutputPowerThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOChSourcePreOtnPMThresholdGroup = optIfOChSourcePreOtnPMThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOChSourcePreOtnPMThresholdGroup.setDescription('A collection of pre-OTN performance monitoring threshold objects applicable to OCh interfaces that support source functions.')
optIfOTUkCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 30)).setObjects(("OPT-IF-MIB", "optIfOTUkDirectionality"), ("OPT-IF-MIB", "optIfOTUkBitRateK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTUkCommonGroup = optIfOTUkCommonGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkCommonGroup.setDescription('A collection of configuration objects applicable to all OTUk interfaces.')
optIfOTUkSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 31)).setObjects(("OPT-IF-MIB", "optIfOTUkTraceIdentifierTransmitted"), ("OPT-IF-MIB", "optIfOTUkSourceAdaptActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTUkSourceGroup = optIfOTUkSourceGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkSourceGroup.setDescription('A collection of configuration objects applicable to OTUk interfaces that support source functions.')
optIfOTUkSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 32)).setObjects(("OPT-IF-MIB", "optIfOTUkDAPIExpected"), ("OPT-IF-MIB", "optIfOTUkSAPIExpected"), ("OPT-IF-MIB", "optIfOTUkTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfOTUkTIMDetMode"), ("OPT-IF-MIB", "optIfOTUkTIMActEnabled"), ("OPT-IF-MIB", "optIfOTUkDEGThr"), ("OPT-IF-MIB", "optIfOTUkDEGM"), ("OPT-IF-MIB", "optIfOTUkSinkAdaptActive"), ("OPT-IF-MIB", "optIfOTUkSinkFECEnabled"), ("OPT-IF-MIB", "optIfOTUkCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOTUkSinkGroup = optIfOTUkSinkGroup.setStatus('current')
if mibBuilder.loadTexts: optIfOTUkSinkGroup.setDescription('A collection of configuration objects applicable to OTUk interfaces that support sink functions.')
optIfGCC0Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 33)).setObjects(("OPT-IF-MIB", "optIfGCC0Application"), ("OPT-IF-MIB", "optIfGCC0RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfGCC0Group = optIfGCC0Group.setStatus('current')
if mibBuilder.loadTexts: optIfGCC0Group.setDescription('A collection of GCC0 configuration objects.')
optIfODUkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 34)).setObjects(("OPT-IF-MIB", "optIfODUkDirectionality"), ("OPT-IF-MIB", "optIfODUkBitRateK"), ("OPT-IF-MIB", "optIfODUkTcmFieldsInUse"), ("OPT-IF-MIB", "optIfODUkPositionSeqCurrentSize"), ("OPT-IF-MIB", "optIfODUkPositionSeqPosition"), ("OPT-IF-MIB", "optIfODUkPositionSeqPointer"), ("OPT-IF-MIB", "optIfODUkTtpPresent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkGroup = optIfODUkGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkGroup.setDescription('A collection of configuration objects applicable to all ODUk interfaces.')
optIfODUkTtpSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 35)).setObjects(("OPT-IF-MIB", "optIfODUkTtpTraceIdentifierTransmitted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTtpSourceGroup = optIfODUkTtpSourceGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpSourceGroup.setDescription('A collection of configuration objects applicable to all interfaces that support ODUk trail termination source functions.')
optIfODUkTtpSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 36)).setObjects(("OPT-IF-MIB", "optIfODUkTtpDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTtpSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTtpTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTtpTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTtpTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTtpDEGThr"), ("OPT-IF-MIB", "optIfODUkTtpDEGM"), ("OPT-IF-MIB", "optIfODUkTtpCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTtpSinkGroup = optIfODUkTtpSinkGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTtpSinkGroup.setDescription('A collection of ODUk configuration objects applicable to all interfaces that support ODUk trail termination sink functions.')
optIfODUkNimGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 37)).setObjects(("OPT-IF-MIB", "optIfODUkNimDAPIExpected"), ("OPT-IF-MIB", "optIfODUkNimSAPIExpected"), ("OPT-IF-MIB", "optIfODUkNimTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkNimTIMDetMode"), ("OPT-IF-MIB", "optIfODUkNimTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkNimDEGThr"), ("OPT-IF-MIB", "optIfODUkNimDEGM"), ("OPT-IF-MIB", "optIfODUkNimCurrentStatus"), ("OPT-IF-MIB", "optIfODUkNimRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkNimGroup = optIfODUkNimGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkNimGroup.setDescription('A collection of ODUk Nim configuration objects.')
optIfGCC12Group = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 38)).setObjects(("OPT-IF-MIB", "optIfGCC12GCCPassThrough"), ("OPT-IF-MIB", "optIfGCC12Application"), ("OPT-IF-MIB", "optIfGCC12RowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfGCC12Group = optIfGCC12Group.setStatus('current')
if mibBuilder.loadTexts: optIfGCC12Group.setDescription('A collection of GCC12 configuration objects.')
optIfODUkTCommonGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 39)).setObjects(("OPT-IF-MIB", "optIfODUkTRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTCommonGroup = optIfODUkTCommonGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTCommonGroup.setDescription('A collection of configuration objects applicable to all ODUkT instances.')
optIfODUkTSourceGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 40)).setObjects(("OPT-IF-MIB", "optIfODUkTTraceIdentifierTransmitted"), ("OPT-IF-MIB", "optIfODUkTSourceLockSignalAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTSourceGroup = optIfODUkTSourceGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTSourceGroup.setDescription('A collection of configuration objects applicable to all ODUkT instances that provide source functions.')
optIfODUkTSinkGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 41)).setObjects(("OPT-IF-MIB", "optIfODUkTDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTDEGThr"), ("OPT-IF-MIB", "optIfODUkTDEGM"), ("OPT-IF-MIB", "optIfODUkTCurrentStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTSinkGroup = optIfODUkTSinkGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTSinkGroup.setDescription('A collection of configuration objects applicable to all ODUkT instances that provide sink functions.')
optIfODUkTSinkGroupCtp = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 42)).setObjects(("OPT-IF-MIB", "optIfODUkTSinkMode"), ("OPT-IF-MIB", "optIfODUkTSinkLockSignalAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTSinkGroupCtp = optIfODUkTSinkGroupCtp.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTSinkGroupCtp.setDescription('A collection of configuration objects applicable to ODUkT instances not colocated with an ODUk TTP that provide sink functions.')
optIfODUkTNimGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 133, 2, 1, 43)).setObjects(("OPT-IF-MIB", "optIfODUkTNimDAPIExpected"), ("OPT-IF-MIB", "optIfODUkTNimSAPIExpected"), ("OPT-IF-MIB", "optIfODUkTNimTraceIdentifierAccepted"), ("OPT-IF-MIB", "optIfODUkTNimTIMDetMode"), ("OPT-IF-MIB", "optIfODUkTNimTIMActEnabled"), ("OPT-IF-MIB", "optIfODUkTNimDEGThr"), ("OPT-IF-MIB", "optIfODUkTNimDEGM"), ("OPT-IF-MIB", "optIfODUkTNimCurrentStatus"), ("OPT-IF-MIB", "optIfODUkTNimRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfODUkTNimGroup = optIfODUkTNimGroup.setStatus('current')
if mibBuilder.loadTexts: optIfODUkTNimGroup.setDescription('A collection of ODUkT Nim configuration objects.')
optIfOtnConfigCompl = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 133, 2, 2, 1)).setObjects(("OPT-IF-MIB", "optIfOTMnGroup"), ("OPT-IF-MIB", "optIfOTSnCommonGroup"), ("OPT-IF-MIB", "optIfOTSnSourceGroupFull"), ("OPT-IF-MIB", "optIfOTSnAPRStatusGroup"), ("OPT-IF-MIB", "optIfOTSnAPRControlGroup"), ("OPT-IF-MIB", "optIfOTSnSinkGroupBasic"), ("OPT-IF-MIB", "optIfOTSnSinkGroupFull"), ("OPT-IF-MIB", "optIfOMSnCommonGroup"), ("OPT-IF-MIB", "optIfOMSnSinkGroupBasic"), ("OPT-IF-MIB", "optIfOChGroupCommonGroup"), ("OPT-IF-MIB", "optIfOChCommonGroup"), ("OPT-IF-MIB", "optIfOChSinkGroupBasic"), ("OPT-IF-MIB", "optIfOTUkCommonGroup"), ("OPT-IF-MIB", "optIfOTUkSourceGroup"), ("OPT-IF-MIB", "optIfOTUkSinkGroup"), ("OPT-IF-MIB", "optIfGCC0Group"), ("OPT-IF-MIB", "optIfODUkGroup"), ("OPT-IF-MIB", "optIfODUkTtpSourceGroup"), ("OPT-IF-MIB", "optIfODUkTtpSinkGroup"), ("OPT-IF-MIB", "optIfODUkNimGroup"), ("OPT-IF-MIB", "optIfGCC12Group"), ("OPT-IF-MIB", "optIfODUkTCommonGroup"), ("OPT-IF-MIB", "optIfODUkTSourceGroup"), ("OPT-IF-MIB", "optIfODUkTSinkGroup"), ("OPT-IF-MIB", "optIfODUkTSinkGroupCtp"), ("OPT-IF-MIB", "optIfODUkTNimGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfOtnConfigCompl = optIfOtnConfigCompl.setStatus('current')
if mibBuilder.loadTexts: optIfOtnConfigCompl.setDescription('Implementation requirements for the OTN configuration functions defined in this MIB module.')
optIfPreOtnPMCompl = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 133, 2, 2, 2)).setObjects(("OPT-IF-MIB", "optIfPerfMonGroup"), ("OPT-IF-MIB", "optIfOTSnSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOTSnSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOTSnSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOTSnSourcePreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOMSnSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOMSnSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOMSnSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOMSnSourcePreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChGroupSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChGroupSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChGroupSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChGroupSourcePreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChSinkPreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChSinkPreOtnPMThresholdGroup"), ("OPT-IF-MIB", "optIfOChSourcePreOtnPMGroup"), ("OPT-IF-MIB", "optIfOChSourcePreOtnPMThresholdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    optIfPreOtnPMCompl = optIfPreOtnPMCompl.setStatus('current')
if mibBuilder.loadTexts: optIfPreOtnPMCompl.setDescription('Implementation requirements for Pre-OTN performance monitoring functions defined in this MIB module.')
mibBuilder.exportSymbols("OPT-IF-MIB", optIfOTSnSrcIntervalLastOutputPower=optIfOTSnSrcIntervalLastOutputPower, optIfOChSinkCurDayEntry=optIfOChSinkCurDayEntry, optIfOTSnSrcIntervalLowInputPower=optIfOTSnSrcIntervalLowInputPower, optIfODUkTNimTraceIdentifierAccepted=optIfODUkTNimTraceIdentifierAccepted, optIfOChGroupSinkPreOtnPMThresholdGroup=optIfOChGroupSinkPreOtnPMThresholdGroup, optIfOChSrcIntervalLastOutputPower=optIfOChSrcIntervalLastOutputPower, optIfOMSnSinkCurDayLowAggregatedInputPower=optIfOMSnSinkCurDayLowAggregatedInputPower, optIfOMSnSinkCurDayEntry=optIfOMSnSinkCurDayEntry, optIfOChGroupSinkCurDayLowOutputPower=optIfOChGroupSinkCurDayLowOutputPower, optIfODUkTNimConfigTable=optIfODUkTNimConfigTable, optIfOTMnOrder=optIfOTMnOrder, optIfOChGroupSinkPrevDayTable=optIfOChGroupSinkPrevDayTable, optIfOChSinkCurrentSuspectedFlag=optIfOChSinkCurrentSuspectedFlag, optIfOMSnCommonGroup=optIfOMSnCommonGroup, optIfOChSrcCurDaySuspectedFlag=optIfOChSrcCurDaySuspectedFlag, optIfOTSnSrcCurDayTable=optIfOTSnSrcCurDayTable, optIfOMSnSinkPrevDayLastAggregatedInputPower=optIfOMSnSinkPrevDayLastAggregatedInputPower, optIfOTSnSinkCurrentUpperOutputPowerThreshold=optIfOTSnSinkCurrentUpperOutputPowerThreshold, optIfOChSinkPreOtnPMGroup=optIfOChSinkPreOtnPMGroup, optIfOTMn=optIfOTMn, optIfOMSnSrcPrevDayEntry=optIfOMSnSrcPrevDayEntry, optIfOTSnSrcCurrentLowerOutputPowerThreshold=optIfOTSnSrcCurrentLowerOutputPowerThreshold, optIfOTSnSrcCurDayLowInputPower=optIfOTSnSrcCurDayLowInputPower, optIfOChGroupSrcIntervalLowOutputPower=optIfOChGroupSrcIntervalLowOutputPower, optIfODUkTNimTcmField=optIfODUkTNimTcmField, optIfODUkTCommonGroup=optIfODUkTCommonGroup, optIfConfs=optIfConfs, optIfPerfMonIntervalEntry=optIfPerfMonIntervalEntry, optIfOMSnSrcCurrentUpperInputPowerThreshold=optIfOMSnSrcCurrentUpperInputPowerThreshold, optIfOTSnSAPIExpected=optIfOTSnSAPIExpected, optIfOChGroupSrcPrevDayLowAggregatedInputPower=optIfOChGroupSrcPrevDayLowAggregatedInputPower, optIfOMSnSrcCurrentEntry=optIfOMSnSrcCurrentEntry, optIfOMSnSrcCurrentLowerInputPowerThreshold=optIfOMSnSrcCurrentLowerInputPowerThreshold, optIfOTSnSinkIntervalLowInputPower=optIfOTSnSinkIntervalLowInputPower, optIfOTSnSrcPrevDayLastInputPower=optIfOTSnSrcPrevDayLastInputPower, optIfOChGroupSrcCurrentUpperOutputPowerThreshold=optIfOChGroupSrcCurrentUpperOutputPowerThreshold, optIfOChGroupSinkCurDayTable=optIfOChGroupSinkCurDayTable, optIfOTSnDirectionality=optIfOTSnDirectionality, optIfOMSnConfigTable=optIfOMSnConfigTable, optIfOTSnSrcCurrentLowerInputPowerThreshold=optIfOTSnSrcCurrentLowerInputPowerThreshold, optIfOMSnSrcCurrentSuspectedFlag=optIfOMSnSrcCurrentSuspectedFlag, optIfOMSnSrcCurrentLowOutputPower=optIfOMSnSrcCurrentLowOutputPower, optIfOChGroupSinkIntervalHighAggregatedInputPower=optIfOChGroupSinkIntervalHighAggregatedInputPower, optIfOChGroupSinkPrevDayEntry=optIfOChGroupSinkPrevDayEntry, optIfOChGroupSrcCurrentHighOutputPower=optIfOChGroupSrcCurrentHighOutputPower, optIfOTMnGroup=optIfOTMnGroup, optIfOMSnSrcPrevDayTable=optIfOMSnSrcPrevDayTable, optIfOChSinkPreOtnPMThresholdGroup=optIfOChSinkPreOtnPMThresholdGroup, optIfPerfMon=optIfPerfMon, optIfOChSrcCurrentUpperOutputPowerThreshold=optIfOChSrcCurrentUpperOutputPowerThreshold, optIfOTSnSrcPrevDayEntry=optIfOTSnSrcPrevDayEntry, optIfOChGroupSinkPrevDayLowAggregatedInputPower=optIfOChGroupSinkPrevDayLowAggregatedInputPower, optIfOChGroupSinkIntervalTable=optIfOChGroupSinkIntervalTable, optIfOTSnAPRStatusGroup=optIfOTSnAPRStatusGroup, optIfOTSnSrcPrevDayHighOutputPower=optIfOTSnSrcPrevDayHighOutputPower, optIfOMSnSrcPrevDayLastAggregatedInputPower=optIfOMSnSrcPrevDayLastAggregatedInputPower, optIfODUkTConfigEntry=optIfODUkTConfigEntry, optIfODUkTtpSourceGroup=optIfODUkTtpSourceGroup, optIfODUkTtpCurrentStatus=optIfODUkTtpCurrentStatus, optIfOChSrcPrevDayLowOutputPower=optIfOChSrcPrevDayLowOutputPower, optIfODUkTNimDirectionality=optIfODUkTNimDirectionality, optIfOChGroupSrcCurrentHighAggregatedInputPower=optIfOChGroupSrcCurrentHighAggregatedInputPower, optIfOMSnSrcCurDayLowAggregatedInputPower=optIfOMSnSrcCurDayLowAggregatedInputPower, optIfODUkTtpConfigEntry=optIfODUkTtpConfigEntry, optIfODUkTTraceIdentifierTransmitted=optIfODUkTTraceIdentifierTransmitted, optIfOChSinkIntervalLowInputPower=optIfOChSinkIntervalLowInputPower, optIfODUkTtpSAPIExpected=optIfODUkTtpSAPIExpected, optIfOTMnTcmMax=optIfOTMnTcmMax, optIfOChGroupSrcCurrentLowerInputPowerThreshold=optIfOChGroupSrcCurrentLowerInputPowerThreshold, optIfODUkPositionSeqEntry=optIfODUkPositionSeqEntry, optIfOTSnSinkPrevDayTable=optIfOTSnSinkPrevDayTable, optIfOChSrcIntervalHighOutputPower=optIfOChSrcIntervalHighOutputPower, optIfOMSnSinkPrevDayLowAggregatedInputPower=optIfOMSnSinkPrevDayLowAggregatedInputPower, optIfOTSnTraceIdentifierTransmitted=optIfOTSnTraceIdentifierTransmitted, optIfOChGroupSinkCurrentLowOutputPower=optIfOChGroupSinkCurrentLowOutputPower, optIfOChGroupSrcIntervalEntry=optIfOChGroupSrcIntervalEntry, optIfOChGroupSinkCurrentOutputPower=optIfOChGroupSinkCurrentOutputPower, OptIfTxTI=OptIfTxTI, optIfODUkTCurrentStatus=optIfODUkTCurrentStatus, optIfOtnConfigCompl=optIfOtnConfigCompl, optIfOTUkConfigTable=optIfOTUkConfigTable, optIfOTSnSinkIntervalLowOutputPower=optIfOTSnSinkIntervalLowOutputPower, optIfPerfMonCurDayTimeElapsed=optIfPerfMonCurDayTimeElapsed, optIfOTUkDAPIExpected=optIfOTUkDAPIExpected, optIfOTSnSinkCurrentInputPower=optIfOTSnSinkCurrentInputPower, optIfOChGroupSinkCurDayEntry=optIfOChGroupSinkCurDayEntry, optIfOChSrcCurrentLowerOutputPowerThreshold=optIfOChSrcCurrentLowerOutputPowerThreshold, optIfOMSnSinkIntervalHighOutputPower=optIfOMSnSinkIntervalHighOutputPower, optIfOChGroupSrcCurrentOutputPower=optIfOChGroupSrcCurrentOutputPower, optIfOChConfigEntry=optIfOChConfigEntry, optIfOMSnSrcIntervalEntry=optIfOMSnSrcIntervalEntry, optIfOChSinkCurrentUpperInputPowerThreshold=optIfOChSinkCurrentUpperInputPowerThreshold, optIfOChGroupSinkCurrentHighOutputPower=optIfOChGroupSinkCurrentHighOutputPower, optIfODUkTtpSinkGroup=optIfODUkTtpSinkGroup, optIfOChSinkIntervalNumber=optIfOChSinkIntervalNumber, optIfOTSnSrcIntervalNumber=optIfOTSnSrcIntervalNumber, optIfOMSnSrcPrevDayLowAggregatedInputPower=optIfOMSnSrcPrevDayLowAggregatedInputPower, optIfOChSrcCurDayEntry=optIfOChSrcCurDayEntry, optIfOChGroupSinkPrevDayLowOutputPower=optIfOChGroupSinkPrevDayLowOutputPower, optIfGCC12Group=optIfGCC12Group, optIfOTUkCommonGroup=optIfOTUkCommonGroup, optIfOChSinkCurrentLowInputPower=optIfOChSinkCurrentLowInputPower, optIfODUkTTIMActEnabled=optIfODUkTTIMActEnabled, optIfOTSnSrcIntervalTable=optIfOTSnSrcIntervalTable, optIfGCC12ConfigEntry=optIfGCC12ConfigEntry, optIfOMSnConfigEntry=optIfOMSnConfigEntry, optIfODUkTDEGThr=optIfODUkTDEGThr, optIfOMSnSinkIntervalLowAggregatedInputPower=optIfOMSnSinkIntervalLowAggregatedInputPower, optIfOChSinkCurrentTable=optIfOChSinkCurrentTable, optIfOTSnSinkGroupFull=optIfOTSnSinkGroupFull, optIfOTSnSinkPrevDaySuspectedFlag=optIfOTSnSinkPrevDaySuspectedFlag, optIfOChSrcPrevDayEntry=optIfOChSrcPrevDayEntry, optIfODUkTSourceLockSignalAdminState=optIfODUkTSourceLockSignalAdminState, optIfOChGroupSrcCurrentLowAggregatedInputPower=optIfOChGroupSrcCurrentLowAggregatedInputPower, optIfOChSrcIntervalSuspectedFlag=optIfOChSrcIntervalSuspectedFlag, optIfGCC12Application=optIfGCC12Application, optIfOChGroupSrcCurDayTable=optIfOChGroupSrcCurDayTable, optIfOTSnSrcCurrentOutputPower=optIfOTSnSrcCurrentOutputPower, optIfOTSnSinkCurDayHighOutputPower=optIfOTSnSinkCurDayHighOutputPower, optIfOTSnSinkPrevDayHighInputPower=optIfOTSnSinkPrevDayHighInputPower, optIfODUkNimCurrentStatus=optIfODUkNimCurrentStatus, optIfOTSnSinkCurrentLowInputPower=optIfOTSnSinkCurrentLowInputPower, optIfODUkTTcmField=optIfODUkTTcmField, optIfOChSinkIntervalEntry=optIfOChSinkIntervalEntry, optIfOChGroupSrcIntervalLastAggregatedInputPower=optIfOChGroupSrcIntervalLastAggregatedInputPower, optIfOTSnSinkCurrentEntry=optIfOTSnSinkCurrentEntry, optIfOChDirectionality=optIfOChDirectionality, optIfODUkNimDirectionality=optIfODUkNimDirectionality, optIfOChGroupSinkIntervalLowAggregatedInputPower=optIfOChGroupSinkIntervalLowAggregatedInputPower, optIfOChGroup=optIfOChGroup, optIfOMSnSinkPreOtnPMThresholdGroup=optIfOMSnSinkPreOtnPMThresholdGroup, optIfOChSrcPrevDayTable=optIfOChSrcPrevDayTable, optIfOTUkSinkGroup=optIfOTUkSinkGroup, optIfGCC0Application=optIfGCC0Application, optIfOMSnSinkCurrentEntry=optIfOMSnSinkCurrentEntry, optIfOChSrcCurDayTable=optIfOChSrcCurDayTable, optIfOChGroupConfigEntry=optIfOChGroupConfigEntry, optIfOChGroupSrcCurDayEntry=optIfOChGroupSrcCurDayEntry, optIfODUkT=optIfODUkT, optIfOChSinkPrevDayTable=optIfOChSinkPrevDayTable, optIfOTSnSinkCurrentTable=optIfOTSnSinkCurrentTable, optIfOChGroupSinkIntervalHighOutputPower=optIfOChGroupSinkIntervalHighOutputPower, optIfOChGroupSinkIntervalLastOutputPower=optIfOChGroupSinkIntervalLastOutputPower, optIfGCC12ConfigTable=optIfGCC12ConfigTable, optIfOChGroupSrcCurrentAggregatedInputPower=optIfOChGroupSrcCurrentAggregatedInputPower, optIfODUkTNimSAPIExpected=optIfODUkTNimSAPIExpected, optIfOTSnSrcCurDayHighOutputPower=optIfOTSnSrcCurDayHighOutputPower, optIfGCC0ConfigEntry=optIfGCC0ConfigEntry, optIfOChCurrentStatus=optIfOChCurrentStatus, optIfOTSnSinkCurrentLowerOutputPowerThreshold=optIfOTSnSinkCurrentLowerOutputPowerThreshold, optIfOChGroupSinkCurrentUpperInputPowerThreshold=optIfOChGroupSinkCurrentUpperInputPowerThreshold, optIfOMSnSinkPrevDayLowOutputPower=optIfOMSnSinkPrevDayLowOutputPower, OptIfSinkOrSource=OptIfSinkOrSource, optIfOMSnSrcCurDayTable=optIfOMSnSrcCurDayTable, OptIfDirectionality=OptIfDirectionality, optIfOTSnSinkPrevDayLowInputPower=optIfOTSnSinkPrevDayLowInputPower, optIfOTSnSrcPrevDayLastOutputPower=optIfOTSnSrcPrevDayLastOutputPower, optIfOMSnSrcCurDayLowOutputPower=optIfOMSnSrcCurDayLowOutputPower, optIfOChGroupSrcCurrentLowerOutputPowerThreshold=optIfOChGroupSrcCurrentLowerOutputPowerThreshold, optIfOMSnSinkCurrentHighOutputPower=optIfOMSnSinkCurrentHighOutputPower, optIfOMSnSinkCurrentTable=optIfOMSnSinkCurrentTable, optIfOChSrcIntervalEntry=optIfOChSrcIntervalEntry, optIfOTSnSinkCurrentUpperInputPowerThreshold=optIfOTSnSinkCurrentUpperInputPowerThreshold, OptIfBitRateK=OptIfBitRateK, optIfPerfMonIntervalNumIntervals=optIfPerfMonIntervalNumIntervals, optIfOChGroupSinkCurrentTable=optIfOChGroupSinkCurrentTable, optIfOTMnReduced=optIfOTMnReduced, optIfOChSinkCurrentHighInputPower=optIfOChSinkCurrentHighInputPower, optIfOTMnTable=optIfOTMnTable, optIfOMSnSinkCurrentLowOutputPower=optIfOMSnSinkCurrentLowOutputPower, optIfPerfMonCurrentTimeElapsed=optIfPerfMonCurrentTimeElapsed, optIfOTSnSrcCurrentHighOutputPower=optIfOTSnSrcCurrentHighOutputPower, optIfOChSinkCurrentInputPower=optIfOChSinkCurrentInputPower, optIfOMSnSinkCurrentLowerOutputPowerThreshold=optIfOMSnSinkCurrentLowerOutputPowerThreshold, optIfODUkTcmFieldsInUse=optIfODUkTcmFieldsInUse, optIfOChGroupSrcCurrentUpperInputPowerThreshold=optIfOChGroupSrcCurrentUpperInputPowerThreshold, optIfOTSnSinkIntervalTable=optIfOTSnSinkIntervalTable, optIfOChGroupSinkPrevDayLastAggregatedInputPower=optIfOChGroupSinkPrevDayLastAggregatedInputPower, optIfOChSrcCurrentEntry=optIfOChSrcCurrentEntry, optIfOMSnSinkCurDayHighAggregatedInputPower=optIfOMSnSinkCurDayHighAggregatedInputPower, optIfOTSnSrcCurrentEntry=optIfOTSnSrcCurrentEntry, optIfODUkConfigEntry=optIfODUkConfigEntry, optIfOChGroupSrcCurDayHighAggregatedInputPower=optIfOChGroupSrcCurDayHighAggregatedInputPower, optIfODUk=optIfODUk, optIfODUkTSourceGroup=optIfODUkTSourceGroup, optIfOChGroupSrcPrevDayLastOutputPower=optIfOChGroupSrcPrevDayLastOutputPower, optIfOChSinkPrevDaySuspectedFlag=optIfOChSinkPrevDaySuspectedFlag, optIfOChSrcCurrentHighOutputPower=optIfOChSrcCurrentHighOutputPower, optIfOChGroupSinkIntervalSuspectedFlag=optIfOChGroupSinkIntervalSuspectedFlag, optIfOChGroupSrcCurDayHighOutputPower=optIfOChGroupSrcCurDayHighOutputPower, optIfOTSnSourceGroupFull=optIfOTSnSourceGroupFull, optIfODUkNimTIMDetMode=optIfODUkNimTIMDetMode, optIfOChGroupSinkCurrentHighAggregatedInputPower=optIfOChGroupSinkCurrentHighAggregatedInputPower, optIfOChSinkIntervalTable=optIfOChSinkIntervalTable, optIfOChGroupSinkPrevDayHighOutputPower=optIfOChGroupSinkPrevDayHighOutputPower, optIfOTSnAprStatus=optIfOTSnAprStatus, optIfODUkPositionSeqCurrentSize=optIfODUkPositionSeqCurrentSize, optIfPerfMonGroup=optIfPerfMonGroup, optIfOChSrcPrevDayLastOutputPower=optIfOChSrcPrevDayLastOutputPower, optIfOChGroupSrcIntervalHighAggregatedInputPower=optIfOChGroupSrcIntervalHighAggregatedInputPower, optIfOMSnDirectionality=optIfOMSnDirectionality, optIfGCC0ConfigTable=optIfGCC0ConfigTable, optIfOTSnSrcCurDayHighInputPower=optIfOTSnSrcCurDayHighInputPower, optIfOChCommonGroup=optIfOChCommonGroup, optIfOTSnConfigTable=optIfOTSnConfigTable, optIfOMSnSinkPrevDayHighAggregatedInputPower=optIfOMSnSinkPrevDayHighAggregatedInputPower, OptIfDEGM=OptIfDEGM, optIfODUkTtpTraceIdentifierTransmitted=optIfODUkTtpTraceIdentifierTransmitted, optIfODUkPositionSeqIndex=optIfODUkPositionSeqIndex, optIfODUkPositionSeqPosition=optIfODUkPositionSeqPosition, optIfOTSnSrcCurrentTable=optIfOTSnSrcCurrentTable, optIfOMSnSrcPrevDayHighAggregatedInputPower=optIfOMSnSrcPrevDayHighAggregatedInputPower, optIfOMSnSinkCurDayTable=optIfOMSnSinkCurDayTable, optIfOMSnSourcePreOtnPMGroup=optIfOMSnSourcePreOtnPMGroup, optIfOChGroupSourcePreOtnPMThresholdGroup=optIfOChGroupSourcePreOtnPMThresholdGroup, optIfOMSn=optIfOMSn, optIfOTSnSrcCurDaySuspectedFlag=optIfOTSnSrcCurDaySuspectedFlag, optIfOMSnSrcCurDayHighOutputPower=optIfOMSnSrcCurDayHighOutputPower, optIfOTSnTIMActEnabled=optIfOTSnTIMActEnabled, optIfOChGroupSrcIntervalNumber=optIfOChGroupSrcIntervalNumber, optIfODUkNimDEGThr=optIfODUkNimDEGThr, optIfODUkNimDEGM=optIfODUkNimDEGM, optIfOChSinkCurDayTable=optIfOChSinkCurDayTable, optIfOTSnSinkPreOtnPMThresholdGroup=optIfOTSnSinkPreOtnPMThresholdGroup, optIfOTUkTraceIdentifierAccepted=optIfOTUkTraceIdentifierAccepted, optIfOMSnSrcIntervalLastAggregatedInputPower=optIfOMSnSrcIntervalLastAggregatedInputPower, optIfODUkNimTIMActEnabled=optIfODUkNimTIMActEnabled, optIfOMSnSinkIntervalLastAggregatedInputPower=optIfOMSnSinkIntervalLastAggregatedInputPower, optIfOMSnSrcPrevDayLastOutputPower=optIfOMSnSrcPrevDayLastOutputPower, optIfOChGroupSrcPrevDayLastAggregatedInputPower=optIfOChGroupSrcPrevDayLastAggregatedInputPower, optIfCompl=optIfCompl, optIfOTSnSinkIntervalNumber=optIfOTSnSinkIntervalNumber, optIfOTSnSrcCurrentHighInputPower=optIfOTSnSrcCurrentHighInputPower, optIfOChSinkCurDayLowInputPower=optIfOChSinkCurDayLowInputPower, optIfOMSnSinkIntervalHighAggregatedInputPower=optIfOMSnSinkIntervalHighAggregatedInputPower, optIfOChGroupSinkIntervalEntry=optIfOChGroupSinkIntervalEntry, optIfOMSnSinkPrevDaySuspectedFlag=optIfOMSnSinkPrevDaySuspectedFlag, optIfODUkNimConfigEntry=optIfODUkNimConfigEntry, optIfOMSnSrcCurrentHighOutputPower=optIfOMSnSrcCurrentHighOutputPower, optIfOMSnSrcCurDayEntry=optIfOMSnSrcCurDayEntry, optIfODUkTTraceIdentifierAccepted=optIfODUkTTraceIdentifierAccepted, optIfODUkTRowStatus=optIfODUkTRowStatus, optIfODUkTDAPIExpected=optIfODUkTDAPIExpected, optIfOTSnSinkCurrentLowerInputPowerThreshold=optIfOTSnSinkCurrentLowerInputPowerThreshold, optIfGCC12Codirectional=optIfGCC12Codirectional, optIfOTUkTIMActEnabled=optIfOTUkTIMActEnabled, optIfODUkPositionSeqPointer=optIfODUkPositionSeqPointer, optIfODUkTNimRowStatus=optIfODUkTNimRowStatus, optIfOMSnSrcCurDaySuspectedFlag=optIfOMSnSrcCurDaySuspectedFlag, optIfODUkTNimDEGThr=optIfODUkTNimDEGThr, optIfOChGroupSrcIntervalLowAggregatedInputPower=optIfOChGroupSrcIntervalLowAggregatedInputPower, optIfMibModule=optIfMibModule, optIfOTSnSinkIntervalHighOutputPower=optIfOTSnSinkIntervalHighOutputPower, OptIfExDAPI=OptIfExDAPI)
mibBuilder.exportSymbols("OPT-IF-MIB", optIfOChSrcPrevDaySuspectedFlag=optIfOChSrcPrevDaySuspectedFlag, optIfOMSnSinkIntervalLastOutputPower=optIfOMSnSinkIntervalLastOutputPower, optIfOTSnTraceIdentifierAccepted=optIfOTSnTraceIdentifierAccepted, optIfOTSnSrcPrevDayLowOutputPower=optIfOTSnSrcPrevDayLowOutputPower, optIfODUkTSinkLockSignalAdminState=optIfODUkTSinkLockSignalAdminState, optIfOTSnSrcCurrentSuspectedFlag=optIfOTSnSrcCurrentSuspectedFlag, optIfOChGroupSrcCurrentEntry=optIfOChGroupSrcCurrentEntry, optIfOTUkTIMDetMode=optIfOTUkTIMDetMode, optIfOMSnSrcCurrentOutputPower=optIfOMSnSrcCurrentOutputPower, optIfODUkTtpPresent=optIfODUkTtpPresent, optIfOChSrcIntervalTable=optIfOChSrcIntervalTable, optIfOTSnSrcPrevDayHighInputPower=optIfOTSnSrcPrevDayHighInputPower, optIfOChGroupSrcCurrentTable=optIfOChGroupSrcCurrentTable, optIfOTMnBitRates=optIfOTMnBitRates, optIfOTUkDirectionality=optIfOTUkDirectionality, optIfOChSinkCurrentEntry=optIfOChSinkCurrentEntry, optIfOChGroupSinkCurrentEntry=optIfOChGroupSinkCurrentEntry, optIfODUkTSAPIExpected=optIfODUkTSAPIExpected, optIfOTUkCurrentStatus=optIfOTUkCurrentStatus, optIfOTSnCommonGroup=optIfOTSnCommonGroup, optIfOTSnSinkCurDayEntry=optIfOTSnSinkCurDayEntry, optIfOMSnSrcPrevDayLowOutputPower=optIfOMSnSrcPrevDayLowOutputPower, optIfOChGroupSinkCurrentUpperOutputPowerThreshold=optIfOChGroupSinkCurrentUpperOutputPowerThreshold, optIfOChGroupCommonGroup=optIfOChGroupCommonGroup, optIfOChGroupSrcPrevDaySuspectedFlag=optIfOChGroupSrcPrevDaySuspectedFlag, optIfOChSinkIntervalLastInputPower=optIfOChSinkIntervalLastInputPower, optIfGCC0Directionality=optIfGCC0Directionality, OptIfAcTI=OptIfAcTI, optIfOTSnSrcCurrentInputPower=optIfOTSnSrcCurrentInputPower, optIfODUkNimTraceIdentifierAccepted=optIfODUkNimTraceIdentifierAccepted, optIfODUkNimDAPIExpected=optIfODUkNimDAPIExpected, optIfOTSnSinkPreOtnPMGroup=optIfOTSnSinkPreOtnPMGroup, optIfOTSnSinkCurDayHighInputPower=optIfOTSnSinkCurDayHighInputPower, optIfOChGroupSourcePreOtnPMGroup=optIfOChGroupSourcePreOtnPMGroup, optIfOTSnSinkCurDaySuspectedFlag=optIfOTSnSinkCurDaySuspectedFlag, optIfOMSnSinkPrevDayLastOutputPower=optIfOMSnSinkPrevDayLastOutputPower, optIfOChGroupSinkCurDaySuspectedFlag=optIfOChGroupSinkCurDaySuspectedFlag, optIfOChSinkCurDayHighInputPower=optIfOChSinkCurDayHighInputPower, optIfOChGroupSinkCurrentLowerOutputPowerThreshold=optIfOChGroupSinkCurrentLowerOutputPowerThreshold, optIfOChGroupSinkIntervalLastAggregatedInputPower=optIfOChGroupSinkIntervalLastAggregatedInputPower, optIfOChGroupSinkCurDayLowAggregatedInputPower=optIfOChGroupSinkCurDayLowAggregatedInputPower, optIfOMSnSrcIntervalTable=optIfOMSnSrcIntervalTable, optIfOMSnSinkCurDayLowOutputPower=optIfOMSnSinkCurDayLowOutputPower, optIfOMSnSinkIntervalEntry=optIfOMSnSinkIntervalEntry, optIfOMSnSinkCurrentLowerInputPowerThreshold=optIfOMSnSinkCurrentLowerInputPowerThreshold, optIfODUkTtpConfigTable=optIfODUkTtpConfigTable, optIfOTMnEntry=optIfOTMnEntry, optIfODUkTtpTIMDetMode=optIfODUkTtpTIMDetMode, optIfOChGroupSinkPreOtnPMGroup=optIfOChGroupSinkPreOtnPMGroup, optIfOMSnSinkCurrentSuspectedFlag=optIfOMSnSinkCurrentSuspectedFlag, optIfOTSnSrcPrevDayTable=optIfOTSnSrcPrevDayTable, optIfOMSnSrcCurrentAggregatedInputPower=optIfOMSnSrcCurrentAggregatedInputPower, optIfOTSnSrcIntervalSuspectedFlag=optIfOTSnSrcIntervalSuspectedFlag, optIfOTSnSinkPrevDayEntry=optIfOTSnSinkPrevDayEntry, optIfOMSnSinkPrevDayHighOutputPower=optIfOMSnSinkPrevDayHighOutputPower, optIfOTSnSourcePreOtnPMThresholdGroup=optIfOTSnSourcePreOtnPMThresholdGroup, optIfOTSnSrcIntervalEntry=optIfOTSnSrcIntervalEntry, optIfOChGroupSrcCurrentLowOutputPower=optIfOChGroupSrcCurrentLowOutputPower, optIfOMSnSinkCurrentUpperInputPowerThreshold=optIfOMSnSinkCurrentUpperInputPowerThreshold, optIfOTSnSinkGroupBasic=optIfOTSnSinkGroupBasic, optIfOChSinkIntervalSuspectedFlag=optIfOChSinkIntervalSuspectedFlag, optIfOMSnSrcCurDayHighAggregatedInputPower=optIfOMSnSrcCurDayHighAggregatedInputPower, OptIfExSAPI=OptIfExSAPI, optIfODUkPositionSeqTable=optIfODUkPositionSeqTable, optIfOTSnSrcCurrentLowOutputPower=optIfOTSnSrcCurrentLowOutputPower, optIfOMSnSinkIntervalLowOutputPower=optIfOMSnSinkIntervalLowOutputPower, optIfOTSnSinkIntervalLastInputPower=optIfOTSnSinkIntervalLastInputPower, optIfODUkNimConfigTable=optIfODUkNimConfigTable, optIfOChSrcCurDayHighOutputPower=optIfOChSrcCurDayHighOutputPower, optIfODUkNimRowStatus=optIfODUkNimRowStatus, optIfODUkTSinkGroup=optIfODUkTSinkGroup, optIfOChSrcCurDayLowOutputPower=optIfOChSrcCurDayLowOutputPower, optIfODUkTtpTraceIdentifierAccepted=optIfODUkTtpTraceIdentifierAccepted, optIfODUkConfigTable=optIfODUkConfigTable, optIfOTSnConfigEntry=optIfOTSnConfigEntry, optIfOChSinkPrevDayLastInputPower=optIfOChSinkPrevDayLastInputPower, optIfOMSnSrcIntervalHighAggregatedInputPower=optIfOMSnSrcIntervalHighAggregatedInputPower, optIfOMSnSinkGroupBasic=optIfOMSnSinkGroupBasic, optIfOTSnSrcCurDayEntry=optIfOTSnSrcCurDayEntry, optIfODUkTCodirectional=optIfODUkTCodirectional, optIfODUkTNimDAPIExpected=optIfODUkTNimDAPIExpected, optIfOChGroupSrcIntervalSuspectedFlag=optIfOChGroupSrcIntervalSuspectedFlag, optIfOMSnSinkCurrentHighAggregatedInputPower=optIfOMSnSinkCurrentHighAggregatedInputPower, optIfODUkTSinkMode=optIfODUkTSinkMode, optIfGCC0RowStatus=optIfGCC0RowStatus, optIfODUkTNimGroup=optIfODUkTNimGroup, optIfOChGroupSrcPrevDayTable=optIfOChGroupSrcPrevDayTable, optIfOTSnSrcIntervalHighInputPower=optIfOTSnSrcIntervalHighInputPower, optIfOMSnSrcCurrentLowerOutputPowerThreshold=optIfOMSnSrcCurrentLowerOutputPowerThreshold, optIfOChSinkCurDaySuspectedFlag=optIfOChSinkCurDaySuspectedFlag, optIfOChSourcePreOtnPMThresholdGroup=optIfOChSourcePreOtnPMThresholdGroup, optIfOMSnSrcIntervalNumber=optIfOMSnSrcIntervalNumber, optIfOTSnSinkCurDayLowOutputPower=optIfOTSnSinkCurDayLowOutputPower, optIfOChGroupDirectionality=optIfOChGroupDirectionality, optIfGCC0Group=optIfGCC0Group, optIfOTSnSinkPrevDayHighOutputPower=optIfOTSnSinkPrevDayHighOutputPower, optIfOMSnSinkIntervalSuspectedFlag=optIfOMSnSinkIntervalSuspectedFlag, optIfOTSnSrcIntervalHighOutputPower=optIfOTSnSrcIntervalHighOutputPower, OptIfDEGThr=OptIfDEGThr, optIfOTSnSinkCurrentLowOutputPower=optIfOTSnSinkCurrentLowOutputPower, optIfOTSnSinkCurrentHighInputPower=optIfOTSnSinkCurrentHighInputPower, optIfOTSnSinkCurDayLowInputPower=optIfOTSnSinkCurDayLowInputPower, optIfODUkTNimConfigEntry=optIfODUkTNimConfigEntry, optIfOChSinkPrevDayEntry=optIfOChSinkPrevDayEntry, optIfGroups=optIfGroups, optIfOMSnSinkIntervalTable=optIfOMSnSinkIntervalTable, optIfOTSnSinkCurDayTable=optIfOTSnSinkCurDayTable, optIfOMSnSinkCurDaySuspectedFlag=optIfOMSnSinkCurDaySuspectedFlag, optIfOTSnSrcIntervalLastInputPower=optIfOTSnSrcIntervalLastInputPower, optIfOChSrcIntervalNumber=optIfOChSrcIntervalNumber, optIfOMSnSinkIntervalNumber=optIfOMSnSinkIntervalNumber, optIfOMSnSrcPrevDayHighOutputPower=optIfOMSnSrcPrevDayHighOutputPower, optIfOMSnSourcePreOtnPMThresholdGroup=optIfOMSnSourcePreOtnPMThresholdGroup, optIfODUkTtpDEGThr=optIfODUkTtpDEGThr, optIfODUkTNimDEGM=optIfODUkTNimDEGM, optIfOChSrcCurrentOutputPower=optIfOChSrcCurrentOutputPower, optIfOChGroupSinkPrevDayHighAggregatedInputPower=optIfOChGroupSinkPrevDayHighAggregatedInputPower, optIfOChGroupSinkIntervalLowOutputPower=optIfOChGroupSinkIntervalLowOutputPower, optIfODUkBitRateK=optIfODUkBitRateK, optIfObjects=optIfObjects, optIfOChGroupSinkCurrentSuspectedFlag=optIfOChGroupSinkCurrentSuspectedFlag, optIfOChSinkCurrentLowerInputPowerThreshold=optIfOChSinkCurrentLowerInputPowerThreshold, optIfOMSnSinkCurrentOutputPower=optIfOMSnSinkCurrentOutputPower, optIfOTUkSourceAdaptActive=optIfOTUkSourceAdaptActive, optIfOTUkDEGM=optIfOTUkDEGM, optIfOTSnSourcePreOtnPMGroup=optIfOTSnSourcePreOtnPMGroup, optIfOChGroupSinkPrevDayLastOutputPower=optIfOChGroupSinkPrevDayLastOutputPower, optIfOChGroupSrcCurDayLowOutputPower=optIfOChGroupSrcCurDayLowOutputPower, optIfOTSnCurrentStatus=optIfOTSnCurrentStatus, optIfODUkTtpDEGM=optIfODUkTtpDEGM, optIfODUkTTIMDetMode=optIfODUkTTIMDetMode, optIfOTSnSinkIntervalHighInputPower=optIfOTSnSinkIntervalHighInputPower, optIfOChGroupSinkCurrentLowAggregatedInputPower=optIfOChGroupSinkCurrentLowAggregatedInputPower, optIfODUkTConfigTable=optIfODUkTConfigTable, optIfOTSnSinkIntervalEntry=optIfOTSnSinkIntervalEntry, optIfOChSinkPrevDayLowInputPower=optIfOChSinkPrevDayLowInputPower, optIfOTUkSinkFECEnabled=optIfOTUkSinkFECEnabled, optIfOMSnSrcCurrentTable=optIfOMSnSrcCurrentTable, optIfOTUkBitRateK=optIfOTUkBitRateK, optIfOMSnSinkPreOtnPMGroup=optIfOMSnSinkPreOtnPMGroup, optIfOChSinkGroupBasic=optIfOChSinkGroupBasic, optIfOMSnSrcIntervalLowAggregatedInputPower=optIfOMSnSrcIntervalLowAggregatedInputPower, optIfOChGroupSrcCurDayLowAggregatedInputPower=optIfOChGroupSrcCurDayLowAggregatedInputPower, optIfOChGroupSinkCurDayHighAggregatedInputPower=optIfOChGroupSinkCurDayHighAggregatedInputPower, optIfOMSnSinkCurDayHighOutputPower=optIfOMSnSinkCurDayHighOutputPower, optIfOMSnSinkPrevDayEntry=optIfOMSnSinkPrevDayEntry, optIfGCC12GCCAccess=optIfGCC12GCCAccess, optIfPerfMonIntervalNumInvalidIntervals=optIfPerfMonIntervalNumInvalidIntervals, optIfOTSnSinkIntervalLastOutputPower=optIfOTSnSinkIntervalLastOutputPower, optIfOChGroupSrcIntervalHighOutputPower=optIfOChGroupSrcIntervalHighOutputPower, optIfPerfMonIntervalTable=optIfPerfMonIntervalTable, optIfOTSnSinkCurrentSuspectedFlag=optIfOTSnSinkCurrentSuspectedFlag, optIfOTSnSinkPrevDayLastOutputPower=optIfOTSnSinkPrevDayLastOutputPower, optIfOTSnSinkPrevDayLowOutputPower=optIfOTSnSinkPrevDayLowOutputPower, optIfOTSnSrcCurrentUpperOutputPowerThreshold=optIfOTSnSrcCurrentUpperOutputPowerThreshold, optIfODUkDirectionality=optIfODUkDirectionality, optIfOTUk=optIfOTUk, optIfOChGroupSrcPrevDayEntry=optIfOChGroupSrcPrevDayEntry, optIfOTSnSrcCurrentLowInputPower=optIfOTSnSrcCurrentLowInputPower, optIfOTSnSrcIntervalLowOutputPower=optIfOTSnSrcIntervalLowOutputPower, optIfOMSnSrcIntervalHighOutputPower=optIfOMSnSrcIntervalHighOutputPower, optIfOChSrcCurrentTable=optIfOChSrcCurrentTable, PYSNMP_MODULE_ID=optIfMibModule, optIfODUkTNimTIMActEnabled=optIfODUkTNimTIMActEnabled, optIfOChGroupSrcPrevDayHighOutputPower=optIfOChGroupSrcPrevDayHighOutputPower, optIfOTUkSAPIExpected=optIfOTUkSAPIExpected, optIfOChGroupSrcCurDaySuspectedFlag=optIfOChGroupSrcCurDaySuspectedFlag, optIfOMSnSrcCurrentHighAggregatedInputPower=optIfOMSnSrcCurrentHighAggregatedInputPower, optIfOTUkSinkAdaptActive=optIfOTUkSinkAdaptActive, OptIfIntervalNumber=OptIfIntervalNumber, optIfOTMnInterfaceType=optIfOTMnInterfaceType, optIfOMSnSinkCurrentUpperOutputPowerThreshold=optIfOMSnSinkCurrentUpperOutputPowerThreshold, optIfOTSnSinkPrevDayLastInputPower=optIfOTSnSinkPrevDayLastInputPower, optIfOMSnSrcCurrentLowAggregatedInputPower=optIfOMSnSrcCurrentLowAggregatedInputPower, optIfOMSnSinkCurrentAggregatedInputPower=optIfOMSnSinkCurrentAggregatedInputPower, optIfOChGroupSrcIntervalTable=optIfOChGroupSrcIntervalTable, optIfOChGroupSinkIntervalNumber=optIfOChGroupSinkIntervalNumber, optIfOChGroupSinkCurrentAggregatedInputPower=optIfOChGroupSinkCurrentAggregatedInputPower, optIfOTSnSinkCurrentHighOutputPower=optIfOTSnSinkCurrentHighOutputPower, optIfODUkTtpDAPIExpected=optIfODUkTtpDAPIExpected, optIfOMSnCurrentStatus=optIfOMSnCurrentStatus, optIfOChGroupSinkCurrentLowerInputPowerThreshold=optIfOChGroupSinkCurrentLowerInputPowerThreshold, optIfOTSnAPRControlGroup=optIfOTSnAPRControlGroup, optIfOChSinkPrevDayHighInputPower=optIfOChSinkPrevDayHighInputPower, optIfOTSnSrcPrevDaySuspectedFlag=optIfOTSnSrcPrevDaySuspectedFlag, optIfODUkNimGroup=optIfODUkNimGroup, optIfOCh=optIfOCh, optIfOMSnSrcIntervalLastOutputPower=optIfOMSnSrcIntervalLastOutputPower, optIfOChGroupConfigTable=optIfOChGroupConfigTable, optIfOChGroupSrcPrevDayHighAggregatedInputPower=optIfOChGroupSrcPrevDayHighAggregatedInputPower, optIfOChSinkIntervalHighInputPower=optIfOChSinkIntervalHighInputPower, optIfOTUkTraceIdentifierTransmitted=optIfOTUkTraceIdentifierTransmitted, optIfOTSnSinkCurrentOutputPower=optIfOTSnSinkCurrentOutputPower, optIfOChSrcIntervalLowOutputPower=optIfOChSrcIntervalLowOutputPower, optIfOTUkSourceGroup=optIfOTUkSourceGroup, optIfPreOtnPMCompl=optIfPreOtnPMCompl, optIfOTUkDEGThr=optIfOTUkDEGThr, optIfOMSnSrcPrevDaySuspectedFlag=optIfOMSnSrcPrevDaySuspectedFlag, optIfODUkGroup=optIfODUkGroup, optIfOTSnSinkIntervalSuspectedFlag=optIfOTSnSinkIntervalSuspectedFlag, optIfODUkTNimCurrentStatus=optIfODUkTNimCurrentStatus, optIfOMSnSrcIntervalLowOutputPower=optIfOMSnSrcIntervalLowOutputPower, optIfODUkTtpTIMActEnabled=optIfODUkTtpTIMActEnabled, optIfODUkTDEGM=optIfODUkTDEGM, optIfODUkTSinkGroupCtp=optIfODUkTSinkGroupCtp, optIfOTSnSrcCurDayLowOutputPower=optIfOTSnSrcCurDayLowOutputPower, optIfOChSourcePreOtnPMGroup=optIfOChSourcePreOtnPMGroup, optIfOTSnAprControl=optIfOTSnAprControl, optIfOChGroupSinkCurDayHighOutputPower=optIfOChGroupSinkCurDayHighOutputPower, optIfODUkNimSAPIExpected=optIfODUkNimSAPIExpected, optIfGCC12RowStatus=optIfGCC12RowStatus, optIfOMSnSrcIntervalSuspectedFlag=optIfOMSnSrcIntervalSuspectedFlag, optIfOMSnSrcCurrentUpperOutputPowerThreshold=optIfOMSnSrcCurrentUpperOutputPowerThreshold, optIfOTUkConfigEntry=optIfOTUkConfigEntry, optIfGCC12GCCPassThrough=optIfGCC12GCCPassThrough, optIfOTSnDAPIExpected=optIfOTSnDAPIExpected, optIfOMSnSinkPrevDayTable=optIfOMSnSinkPrevDayTable, optIfOChGroupSrcIntervalLastOutputPower=optIfOChGroupSrcIntervalLastOutputPower, optIfOChSrcCurrentLowOutputPower=optIfOChSrcCurrentLowOutputPower, optIfOTSnSrcPrevDayLowInputPower=optIfOTSnSrcPrevDayLowInputPower, optIfODUkTNimTIMDetMode=optIfODUkTNimTIMDetMode, OptIfTIMDetMode=OptIfTIMDetMode, optIfOTMnOpticalReach=optIfOTMnOpticalReach, optIfOTSnTIMDetMode=optIfOTSnTIMDetMode, optIfOTSn=optIfOTSn, optIfOMSnSinkCurrentLowAggregatedInputPower=optIfOMSnSinkCurrentLowAggregatedInputPower, optIfOChGroupSinkPrevDaySuspectedFlag=optIfOChGroupSinkPrevDaySuspectedFlag, optIfOChSrcCurrentSuspectedFlag=optIfOChSrcCurrentSuspectedFlag, optIfOChConfigTable=optIfOChConfigTable, optIfOTSnSrcCurrentUpperInputPowerThreshold=optIfOTSnSrcCurrentUpperInputPowerThreshold, optIfOChSrcPrevDayHighOutputPower=optIfOChSrcPrevDayHighOutputPower, optIfOChGroupSrcPrevDayLowOutputPower=optIfOChGroupSrcPrevDayLowOutputPower, optIfOChGroupSrcCurrentSuspectedFlag=optIfOChGroupSrcCurrentSuspectedFlag)
