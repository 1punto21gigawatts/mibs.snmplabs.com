#
# PySNMP MIB module ALCATEL-IND1-IPMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-IPMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Ipms, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Ipms")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, Unsigned32, Gauge32, Integer32, Counter64, Counter32, ObjectIdentity, IpAddress, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "Unsigned32", "Gauge32", "Integer32", "Counter64", "Counter32", "ObjectIdentity", "IpAddress", "MibIdentifier", "iso")
DisplayString, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention", "RowStatus")
alcatelIND1IPMSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1))
alcatelIND1IPMSMIB.setRevisions(('2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1IPMSMIB.setRevisionsDescriptions(('The latest version of this MIB Module.',))
if mibBuilder.loadTexts: alcatelIND1IPMSMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1IPMSMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1IPMSMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1IPMSMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): Propietary IPMS MIB definitions The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1IPMSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1))
alaIpmsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1))
alaIpmsStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStatus.setDescription('Administratively enables/disables IPMS on this switch.')
alaIpmsLeaveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 2), Unsigned32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsLeaveTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIpmsLeaveTimeout.setDescription('The IGMP Leave Timeout Interval in seconds.')
alaIpmsQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 3), Unsigned32().clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsQueryInterval.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQueryInterval.setDescription('The IGMP Query interval in seconds.')
alaIpmsNeighborTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 4), Unsigned32().clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsNeighborTimer.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborTimer.setDescription('The IPMS neighboring multicast router timeout interval in seconds.')
alaIpmsQuerierTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 5), Unsigned32().clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsQuerierTimer.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierTimer.setDescription('The IPMS neighboring querier timeout interval in seconds.')
alaIpmsMembershipTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 6), Unsigned32().clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsMembershipTimer.setStatus('current')
if mibBuilder.loadTexts: alaIpmsMembershipTimer.setDescription('The IGMP Group Membership timeout in seconds.')
alaIpmsPriority = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 3, 2, 1, 0))).clone(namedValues=NamedValues(("unsupported", 4), ("urgent", 3), ("high", 2), ("medium", 1), ("low", 0))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsPriority.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPriority.setDescription('The traffic priority applied to all IP multicast flows.')
alaIpmsMaxBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 8), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: alaIpmsMaxBandwidth.setDescription('The maximum ingress IP multicast traffic forwarded for each Coronado of the switch. This value should be specified in megabits. Hardware platforms lacking support for this command will read 0.')
alaIpmsHardwareRoute = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unsupported", 0), ("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsHardwareRoute.setStatus('current')
if mibBuilder.loadTexts: alaIpmsHardwareRoute.setDescription('Enable or disable hardware based routing for IPMS')
alaIpmsIGMPMembershipProxyVersion = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2), ("igmpv3", 3))).clone('igmpv2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsIGMPMembershipProxyVersion.setStatus('current')
if mibBuilder.loadTexts: alaIpmsIGMPMembershipProxyVersion.setDescription('Set the default IGMP version for membership reports being proxied to external neighbors and queriers.')
alaIpmsOtherQuerierTimer = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 1, 11), Unsigned32().clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsOtherQuerierTimer.setStatus('current')
if mibBuilder.loadTexts: alaIpmsOtherQuerierTimer.setDescription('The IGMP Other Querier timeout in seconds.')
alaIpmsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2))
alaIpmsGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaIpmsGroupTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupTable.setDescription('The Group table contains information about all ports that have requested membership in a multicast group.')
alaIpmsGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupDestIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupClientIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupClientVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupClientIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupClientVci"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupIGMPVersion"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupIGMPv3SrcIP"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupIGMPv3SrcType"))
if mibBuilder.loadTexts: alaIpmsGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupEntry.setDescription('An entry corresponds to a membership request.')
alaIpmsGroupDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpmsGroupDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupDestIpAddr.setDescription('The destination IP address of the membership request.')
alaIpmsGroupClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaIpmsGroupClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupClientIpAddr.setDescription('The IP address of the last client requesting membership.')
alaIpmsGroupClientMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsGroupClientMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupClientMacAddr.setDescription('The source MAC address of the membership request.')
alaIpmsGroupClientVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsGroupClientVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupClientVlan.setDescription('The source VLAN of the membership request.')
alaIpmsGroupClientIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 5), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsGroupClientIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupClientIfIndex.setDescription('The source ifIndex value of the membership request.')
alaIpmsGroupClientVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 6), Unsigned32())
if mibBuilder.loadTexts: alaIpmsGroupClientVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupClientVci.setDescription('The source vci of the membership request.')
alaIpmsGroupIGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igmpv1", 1), ("igmpv2", 2), ("igmpv3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsGroupIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupIGMPVersion.setDescription('The IGMP version of the client.')
alaIpmsGroupIGMPv3SrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 8), IpAddress())
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3SrcIP.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3SrcIP.setDescription('The IP address of the IGMPv3 requested source. The value 0.0.0.0 will be used for IGMPv3 exclude none, or IGMPv2 membership requests.')
alaIpmsGroupIGMPv3SrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3SrcType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3SrcType.setDescription('The type of the IGMPv3 required for this source.')
alaIpmsGroupIGMPv3SrcTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3SrcTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3SrcTimeout.setDescription('The timeout of the requested IGMPv3 source. This value is only applicable to include type sources, all others will be zero.')
alaIpmsGroupIGMPv3GroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("include", 1), ("exclude", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3GroupType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupIGMPv3GroupType.setDescription('The IGMPv3 group membership type.')
alaIpmsGroupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsGroupTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupTimeout.setDescription('The timeout of the membership request. This field will always contain a valid timeout for IGMPv2 and IGMPv3 exclude clients. This value will be zero for IGMPv3 include clients.')
alaIpmsNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3))
alaIpmsNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaIpmsNeighborTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborTable.setDescription('The Neighbor table contains information about all ports that link to multicast routers.')
alaIpmsNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighborIpAddr"))
if mibBuilder.loadTexts: alaIpmsNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborEntry.setDescription('An entry corresponds to a multicast router.')
alaIpmsNeighborIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpmsNeighborIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborIpAddr.setDescription('The IP address of the neighbor.')
alaIpmsNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsNeighborVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborVlan.setDescription('The VLAN of the neighbor.')
alaIpmsNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborIfIndex.setDescription('The ifIndex value of the neighbor.')
alaIpmsNeighborVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsNeighborVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborVci.setDescription('The vci of the neighbor.')
alaIpmsNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("native", 0), ("ipip", 1), ("pim", 2), ("cmm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsNeighborType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborType.setDescription('The type of the neighbor.')
alaIpmsNeighborTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsNeighborTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborTimeout.setDescription('The timeout of the neighbor.')
alaIpmsStaticNeighbor = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4))
alaIpmsStaticNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4, 1), )
if mibBuilder.loadTexts: alaIpmsStaticNeighborTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborTable.setDescription('The Neighbor table contains information about all manually configured multicast neighbor ports.')
alaIpmsStaticNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticNeighborVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticNeighborIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticNeighborVci"))
if mibBuilder.loadTexts: alaIpmsStaticNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborEntry.setDescription('An entry corresponds to a manually configured multicast neighbor.')
alaIpmsStaticNeighborVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsStaticNeighborVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborVlan.setDescription('The VLAN of the neighbor.')
alaIpmsStaticNeighborIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsStaticNeighborIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborIfIndex.setDescription('The ifIndex value of the neighbor.')
alaIpmsStaticNeighborVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alaIpmsStaticNeighborVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborVci.setDescription('The vci of the neighbor.')
alaIpmsStaticNeighborIGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("igmpv2", 2), ("igmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsStaticNeighborIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborIGMPVersion.setDescription('The version used for proxy IGMP membership reports to this static neighbor.')
alaIpmsStaticNeighborRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsStaticNeighborRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborRowStatus.setDescription('Used in accordance to installation and removal conventions for conceptual rows. The RowStatus values that are supported are the following: active - The row is active and valid. createAndGo - The row will be created and activated. destroy - The row will be destroyed.')
alaIpmsQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5))
alaIpmsQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1), )
if mibBuilder.loadTexts: alaIpmsQuerierTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierTable.setDescription('The Querier table contains information about all ports that link to multicast queriers.')
alaIpmsQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerierIpAddr"))
if mibBuilder.loadTexts: alaIpmsQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierEntry.setDescription('An entry corresponds to a multicast querier.')
alaIpmsQuerierIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpmsQuerierIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierIpAddr.setDescription('The IP address of the querier.')
alaIpmsQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsQuerierVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierVlan.setDescription('The VLAN of the querier.')
alaIpmsQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsQuerierIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierIfIndex.setDescription('The ifIndex value of the querier.')
alaIpmsQuerierVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsQuerierVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierVci.setDescription('The vci of the querier.')
alaIpmsQuerierType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("native", 0), ("ipip", 1), ("pim", 2), ("cmm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsQuerierType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierType.setDescription('The type of the querier.')
alaIpmsQuerierTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsQuerierTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierTimeout.setDescription('The timeout of the querier.')
alaIpmsStaticQuerier = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6))
alaIpmsStaticQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6, 1), )
if mibBuilder.loadTexts: alaIpmsStaticQuerierTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierTable.setDescription('The Querier table contains information about all manually configured ports that link to multicast queriers.')
alaIpmsStaticQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticQuerierVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticQuerierIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticQuerierVci"))
if mibBuilder.loadTexts: alaIpmsStaticQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierEntry.setDescription('An entry corresponds to a multicast querier.')
alaIpmsStaticQuerierVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsStaticQuerierVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierVlan.setDescription('The VLAN of the querier.')
alaIpmsStaticQuerierIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsStaticQuerierIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierIfIndex.setDescription('The ifIndex value of the querier.')
alaIpmsStaticQuerierVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: alaIpmsStaticQuerierVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierVci.setDescription('The vci of the querier.')
alaIpmsStaticQuerierIGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("igmpv2", 2), ("igmpv3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsStaticQuerierIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierIGMPVersion.setDescription('The version used for proxy IGMP membership reports sent to this querier.')
alaIpmsStaticQuerierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 6, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaIpmsStaticQuerierRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierRowStatus.setDescription('Used in accordance to installation and removal conventions for conceptual rows. The RowStatus values that are supported are the following: active - The row is active and valid. createAndGo - The row will be created and activated. destroy - The row will be destroyed.')
alaIpmsSource = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7))
alaIpmsSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1), )
if mibBuilder.loadTexts: alaIpmsSourceTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceTable.setDescription('The Source table contains information about all the multicast streams.')
alaIpmsSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceDestIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceSrcIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceSrcVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceSrcIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceUniIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceSrcVci"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceSrcType"))
if mibBuilder.loadTexts: alaIpmsSourceEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceEntry.setDescription('An entry corresponds to a multicast stream.')
alaIpmsSourceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpmsSourceDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceDestIpAddr.setDescription('The destination IP address of the multicast stream.')
alaIpmsSourceSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaIpmsSourceSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceSrcIpAddr.setDescription('The source IP address of the multicast stream.')
alaIpmsSourceSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsSourceSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceSrcMacAddr.setDescription('The source MAC address of the multicast stream.')
alaIpmsSourceSrcVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsSourceSrcVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceSrcVlan.setDescription('The source VLAN of the multicast stream.')
alaIpmsSourceSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 5), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsSourceSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceSrcIfIndex.setDescription('The source ifIndex value of the multicast stream.')
alaIpmsSourceUniIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 6), IpAddress())
if mibBuilder.loadTexts: alaIpmsSourceUniIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceUniIpAddr.setDescription('The tunneled source IP address of the multicast stream.')
alaIpmsSourceSrcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 7), Unsigned32())
if mibBuilder.loadTexts: alaIpmsSourceSrcVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceSrcVci.setDescription('The source vci of the multicast stream.')
alaIpmsSourceSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("native", 0), ("ipip", 1), ("pim", 2), ("cmm", 3))))
if mibBuilder.loadTexts: alaIpmsSourceSrcType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceSrcType.setDescription('The source type of the multicast stream.')
alaIpmsSourceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsSourceTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceTimeout.setDescription('The timeout of the multicast stream.')
alaIpmsForward = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8))
alaIpmsForwardTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1), )
if mibBuilder.loadTexts: alaIpmsForwardTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardTable.setDescription('The Forward table contains information for forwarding multicast streams.')
alaIpmsForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardDestIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardSrcIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardDestVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardSrcVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardSrcIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardUniIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardSrcVci"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardDestType"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardSrcType"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardDestIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardDestTunIpAddr"))
if mibBuilder.loadTexts: alaIpmsForwardEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardEntry.setDescription('An entry corresponds to a multicast stream.')
alaIpmsForwardDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpmsForwardDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardDestIpAddr.setDescription('The destination IP address of the multicast stream.')
alaIpmsForwardSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaIpmsForwardSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardSrcIpAddr.setDescription('The source IP address of the multicast stream.')
alaIpmsForwardDestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsForwardDestVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardDestVlan.setDescription('The destination VLAN of the multicast stream.')
alaIpmsForwardSrcVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsForwardSrcVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardSrcVlan.setDescription('The source VLAN of the multicast stream.')
alaIpmsForwardSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 5), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsForwardSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardSrcIfIndex.setDescription('The source ifIndex value of the multicast stream.')
alaIpmsForwardUniIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 6), IpAddress())
if mibBuilder.loadTexts: alaIpmsForwardUniIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardUniIpAddr.setDescription('The tunneled source IP address of the multicast stream.')
alaIpmsForwardSrcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 7), Unsigned32())
if mibBuilder.loadTexts: alaIpmsForwardSrcVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardSrcVci.setDescription('The source vci of the multicast stream.')
alaIpmsForwardDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("native", 0), ("ipip", 1), ("pim", 2), ("cmm", 3))))
if mibBuilder.loadTexts: alaIpmsForwardDestType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardDestType.setDescription('The destination type of the multicast stream.')
alaIpmsForwardSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("native", 0), ("ipip", 1), ("pim", 2), ("cmm", 3))))
if mibBuilder.loadTexts: alaIpmsForwardSrcType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardSrcType.setDescription('The source type of the multicast stream.')
alaIpmsForwardDestTunIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: alaIpmsForwardDestTunIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardDestTunIpAddr.setDescription('The tunneled destination IP address of the multicast stream.')
alaIpmsForwardSrcTunIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsForwardSrcTunIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardSrcTunIpAddr.setDescription('The tunneled source IP address of the multicast stream.')
alaIpmsForwardRtrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsForwardRtrMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardRtrMacAddr.setDescription('The source MAC address of the router port.')
alaIpmsForwardRtrTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsForwardRtrTtl.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardRtrTtl.setDescription('The time-to-live of the router port.')
alaIpmsForwardDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 8, 1, 1, 14), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsForwardDestIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardDestIfIndex.setDescription('The destination ifIndex value of the multicast stream.')
alaIpmsPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9))
alaIpmsPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1), )
if mibBuilder.loadTexts: alaIpmsPolicyTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyTable.setDescription('The Policy table contains information about all policies concerning multicast streams.')
alaIpmsPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicyDestIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicySrcIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicySrcVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicySrcIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicyUniIpAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicySrcVci"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicySrcType"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicyPolicy"))
if mibBuilder.loadTexts: alaIpmsPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyEntry.setDescription('An entry corresponds to a membership request.')
alaIpmsPolicyDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpmsPolicyDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyDestIpAddr.setDescription('The destination IP address of the policy stream.')
alaIpmsPolicySrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alaIpmsPolicySrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicySrcIpAddr.setDescription('The source IP address of the policy stream.')
alaIpmsPolicySrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsPolicySrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicySrcMacAddr.setDescription('The source MAC address of the policy stream.')
alaIpmsPolicySrcVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsPolicySrcVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicySrcVlan.setDescription('The source VLAN of the policy stream.')
alaIpmsPolicySrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 5), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsPolicySrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicySrcIfIndex.setDescription('The source ifIndex value of the policy stream.')
alaIpmsPolicyUniIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 6), IpAddress())
if mibBuilder.loadTexts: alaIpmsPolicyUniIpAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyUniIpAddr.setDescription('The tunneled source IP address of the policy stream.')
alaIpmsPolicySrcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 7), Unsigned32())
if mibBuilder.loadTexts: alaIpmsPolicySrcVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicySrcVci.setDescription('The source vci of the policy stream.')
alaIpmsPolicySrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("native", 0), ("ipip", 1), ("pim", 2), ("cmm", 3))))
if mibBuilder.loadTexts: alaIpmsPolicySrcType.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicySrcType.setDescription('The source type of the policy stream.')
alaIpmsPolicyPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("membership", 1))))
if mibBuilder.loadTexts: alaIpmsPolicyPolicy.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyPolicy.setDescription('The type of policy of the stream.')
alaIpmsPolicyDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("accept", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsPolicyDisposition.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyDisposition.setDescription('The applied disposition of the policy stream.')
alaIpmsPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 9, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaIpmsPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyTimeout.setDescription('The timeout of the policy stream.')
alaIpmsStaticMember = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10))
alaIpmsStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1), )
if mibBuilder.loadTexts: alaIpmsStaticMemberTable.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberTable.setDescription('The Member table contains information about all manually configured multicast Member ports.')
alaIpmsStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticMemberGroupAddr"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticMemberVlan"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticMemberIfIndex"), (0, "ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticMemberVci"))
if mibBuilder.loadTexts: alaIpmsStaticMemberEntry.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberEntry.setDescription('An entry corresponds to a manually configured multicast Member.')
alaIpmsStaticMemberGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: alaIpmsStaticMemberGroupAddr.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberGroupAddr.setDescription('The Multicast Group IP address this static client subscribes to.')
alaIpmsStaticMemberIGMPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("igmpv2", 2), ("igmpv3", 3))))
if mibBuilder.loadTexts: alaIpmsStaticMemberIGMPVersion.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberIGMPVersion.setDescription('The version used for proxy IGMP membership reports to this static Member.')
alaIpmsStaticMemberVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: alaIpmsStaticMemberVlan.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberVlan.setDescription('The VLAN of the Member.')
alaIpmsStaticMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: alaIpmsStaticMemberIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberIfIndex.setDescription('The ifIndex value of the Member.')
alaIpmsStaticMemberVci = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1, 1, 5), Unsigned32())
if mibBuilder.loadTexts: alaIpmsStaticMemberVci.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberVci.setDescription('The vci of the Member.')
alaIpmsStaticMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 1, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaIpmsStaticMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticMemberRowStatus.setDescription('Used in accordance to installation and removal conventions for conceptual rows. The RowStatus values that are supported are the following: active - The row is active and valid. createAndGo - The row will be created and activated. destroy - The row will be destroyed.')
alcatelIND1IPMSMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2))
alcatelIND1IPMSMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 1))
alcatelIND1IPMSMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2))
alaIpmsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsConfig"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsGroup"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighbor"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticNeighbor"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerier"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticQuerier"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsSource"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsForward"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicy"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsCompliance = alaIpmsCompliance.setStatus('current')
if mibBuilder.loadTexts: alaIpmsCompliance.setDescription('The compliance statement for switches running IPMS and implementing ALCATEL-IND1-IPMS-MIB.')
alaIpmsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsStatus"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsLeaveTimeout"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsQueryInterval"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighborTimer"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerierTimer"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsMembershipTimer"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsOtherQuerierTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsConfigGroup = alaIpmsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsConfigGroup.setDescription('A collection of objects to support management of configuration parameters of IPMS switches.')
alaIpmsGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 2)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupClientMacAddr"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupTimeout"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupIGMPv3GroupType"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsGroupIGMPv3SrcTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsGroupGroup = alaIpmsGroupGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsGroupGroup.setDescription('A collection of objects to support IPMS group tables.')
alaIpmsNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 3)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighborVlan"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighborIfIndex"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighborVci"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighborType"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsNeighborTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsNeighborGroup = alaIpmsNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsNeighborGroup.setDescription('A collection of objects to support IPMS neighbor tables.')
alaIpmsStaticNeighborGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 4)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticNeighborRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsStaticNeighborGroup = alaIpmsStaticNeighborGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticNeighborGroup.setDescription('A collection of objects to support IPMS static neighbor tables.')
alaIpmsQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 5)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerierVlan"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerierIfIndex"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerierVci"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerierType"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsQuerierTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsQuerierGroup = alaIpmsQuerierGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsQuerierGroup.setDescription('A collection of objects to support IPMS querier tables.')
alaIpmsStaticQuerierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 6)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsStaticQuerierRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsStaticQuerierGroup = alaIpmsStaticQuerierGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsStaticQuerierGroup.setDescription('A collection of objects to support IPMS static querier tables.')
alaIpmsSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 7)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceSrcMacAddr"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsSourceTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsSourceGroup = alaIpmsSourceGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsSourceGroup.setDescription('A collection of objects to support IPMS source tables.')
alaIpmsForwardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 8)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardSrcTunIpAddr"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardRtrMacAddr"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsForwardRtrTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsForwardGroup = alaIpmsForwardGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsForwardGroup.setDescription('A collection of objects to support IPMS forward tables.')
alaIpmsPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 18, 1, 2, 2, 9)).setObjects(("ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicySrcMacAddr"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicyDisposition"), ("ALCATEL-IND1-IPMS-MIB", "alaIpmsPolicyTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIpmsPolicyGroup = alaIpmsPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: alaIpmsPolicyGroup.setDescription('A collection of objects to support IPMS policy tables.')
mibBuilder.exportSymbols("ALCATEL-IND1-IPMS-MIB", alaIpmsCompliance=alaIpmsCompliance, alaIpmsSourceDestIpAddr=alaIpmsSourceDestIpAddr, alcatelIND1IPMSMIBObjects=alcatelIND1IPMSMIBObjects, alaIpmsGroupClientIpAddr=alaIpmsGroupClientIpAddr, alaIpmsForwardDestVlan=alaIpmsForwardDestVlan, alaIpmsStatus=alaIpmsStatus, alaIpmsStaticNeighborRowStatus=alaIpmsStaticNeighborRowStatus, alaIpmsPolicySrcVci=alaIpmsPolicySrcVci, alaIpmsStaticQuerierTable=alaIpmsStaticQuerierTable, alaIpmsStaticQuerierIGMPVersion=alaIpmsStaticQuerierIGMPVersion, alaIpmsStaticNeighborIfIndex=alaIpmsStaticNeighborIfIndex, alaIpmsConfigGroup=alaIpmsConfigGroup, alaIpmsStaticMemberGroupAddr=alaIpmsStaticMemberGroupAddr, alaIpmsForwardSrcIfIndex=alaIpmsForwardSrcIfIndex, alaIpmsStaticQuerierGroup=alaIpmsStaticQuerierGroup, alaIpmsStaticQuerierEntry=alaIpmsStaticQuerierEntry, alaIpmsForwardEntry=alaIpmsForwardEntry, alaIpmsStaticQuerier=alaIpmsStaticQuerier, alaIpmsSourceUniIpAddr=alaIpmsSourceUniIpAddr, alaIpmsForward=alaIpmsForward, alaIpmsPolicyDestIpAddr=alaIpmsPolicyDestIpAddr, alaIpmsForwardDestIfIndex=alaIpmsForwardDestIfIndex, alaIpmsNeighbor=alaIpmsNeighbor, alaIpmsPolicySrcIpAddr=alaIpmsPolicySrcIpAddr, alaIpmsQueryInterval=alaIpmsQueryInterval, alaIpmsGroupDestIpAddr=alaIpmsGroupDestIpAddr, alaIpmsNeighborGroup=alaIpmsNeighborGroup, alaIpmsQuerierVlan=alaIpmsQuerierVlan, alaIpmsStaticNeighborTable=alaIpmsStaticNeighborTable, alaIpmsPriority=alaIpmsPriority, alaIpmsSourceEntry=alaIpmsSourceEntry, alaIpmsPolicyEntry=alaIpmsPolicyEntry, alaIpmsQuerierTimeout=alaIpmsQuerierTimeout, alaIpmsGroupClientVlan=alaIpmsGroupClientVlan, alaIpmsIGMPMembershipProxyVersion=alaIpmsIGMPMembershipProxyVersion, alaIpmsStaticNeighborEntry=alaIpmsStaticNeighborEntry, alaIpmsPolicySrcMacAddr=alaIpmsPolicySrcMacAddr, alaIpmsGroupClientVci=alaIpmsGroupClientVci, alaIpmsForwardDestType=alaIpmsForwardDestType, alaIpmsNeighborTimeout=alaIpmsNeighborTimeout, alcatelIND1IPMSMIBGroups=alcatelIND1IPMSMIBGroups, alaIpmsQuerierTimer=alaIpmsQuerierTimer, alaIpmsStaticQuerierIfIndex=alaIpmsStaticQuerierIfIndex, alaIpmsStaticMemberEntry=alaIpmsStaticMemberEntry, alaIpmsSourceGroup=alaIpmsSourceGroup, alaIpmsMaxBandwidth=alaIpmsMaxBandwidth, alaIpmsSourceTable=alaIpmsSourceTable, alaIpmsQuerierEntry=alaIpmsQuerierEntry, alaIpmsStaticMemberRowStatus=alaIpmsStaticMemberRowStatus, alaIpmsStaticQuerierVlan=alaIpmsStaticQuerierVlan, alaIpmsGroupGroup=alaIpmsGroupGroup, alaIpmsSourceSrcMacAddr=alaIpmsSourceSrcMacAddr, alaIpmsPolicy=alaIpmsPolicy, alcatelIND1IPMSMIB=alcatelIND1IPMSMIB, alaIpmsStaticMemberIGMPVersion=alaIpmsStaticMemberIGMPVersion, alaIpmsSourceSrcVci=alaIpmsSourceSrcVci, alaIpmsGroup=alaIpmsGroup, alaIpmsStaticNeighborVlan=alaIpmsStaticNeighborVlan, alaIpmsQuerierIfIndex=alaIpmsQuerierIfIndex, alaIpmsGroupIGMPVersion=alaIpmsGroupIGMPVersion, alaIpmsQuerierIpAddr=alaIpmsQuerierIpAddr, alaIpmsStaticMemberVlan=alaIpmsStaticMemberVlan, PYSNMP_MODULE_ID=alcatelIND1IPMSMIB, alaIpmsStaticMemberIfIndex=alaIpmsStaticMemberIfIndex, alaIpmsForwardUniIpAddr=alaIpmsForwardUniIpAddr, alaIpmsQuerierTable=alaIpmsQuerierTable, alaIpmsSourceSrcIpAddr=alaIpmsSourceSrcIpAddr, alaIpmsGroupIGMPv3SrcType=alaIpmsGroupIGMPv3SrcType, alaIpmsForwardSrcVci=alaIpmsForwardSrcVci, alaIpmsSourceSrcType=alaIpmsSourceSrcType, alaIpmsForwardRtrMacAddr=alaIpmsForwardRtrMacAddr, alaIpmsPolicyTable=alaIpmsPolicyTable, alaIpmsForwardSrcTunIpAddr=alaIpmsForwardSrcTunIpAddr, alaIpmsStaticMember=alaIpmsStaticMember, alaIpmsPolicySrcType=alaIpmsPolicySrcType, alaIpmsGroupClientMacAddr=alaIpmsGroupClientMacAddr, alaIpmsForwardSrcIpAddr=alaIpmsForwardSrcIpAddr, alaIpmsGroupIGMPv3GroupType=alaIpmsGroupIGMPv3GroupType, alaIpmsSourceSrcIfIndex=alaIpmsSourceSrcIfIndex, alaIpmsPolicyGroup=alaIpmsPolicyGroup, alaIpmsNeighborTable=alaIpmsNeighborTable, alaIpmsStaticQuerierRowStatus=alaIpmsStaticQuerierRowStatus, alaIpmsGroupEntry=alaIpmsGroupEntry, alaIpmsForwardSrcType=alaIpmsForwardSrcType, alaIpmsPolicyUniIpAddr=alaIpmsPolicyUniIpAddr, alaIpmsStaticMemberTable=alaIpmsStaticMemberTable, alaIpmsGroupTable=alaIpmsGroupTable, alaIpmsPolicyDisposition=alaIpmsPolicyDisposition, alaIpmsPolicyTimeout=alaIpmsPolicyTimeout, alaIpmsSourceSrcVlan=alaIpmsSourceSrcVlan, alaIpmsStaticNeighbor=alaIpmsStaticNeighbor, alaIpmsLeaveTimeout=alaIpmsLeaveTimeout, alaIpmsPolicyPolicy=alaIpmsPolicyPolicy, alcatelIND1IPMSMIBCompliances=alcatelIND1IPMSMIBCompliances, alaIpmsQuerier=alaIpmsQuerier, alaIpmsQuerierGroup=alaIpmsQuerierGroup, alaIpmsSource=alaIpmsSource, alaIpmsStaticNeighborIGMPVersion=alaIpmsStaticNeighborIGMPVersion, alaIpmsForwardDestIpAddr=alaIpmsForwardDestIpAddr, alaIpmsGroupIGMPv3SrcIP=alaIpmsGroupIGMPv3SrcIP, alaIpmsForwardTable=alaIpmsForwardTable, alaIpmsQuerierVci=alaIpmsQuerierVci, alaIpmsForwardDestTunIpAddr=alaIpmsForwardDestTunIpAddr, alaIpmsQuerierType=alaIpmsQuerierType, alaIpmsPolicySrcIfIndex=alaIpmsPolicySrcIfIndex, alaIpmsNeighborEntry=alaIpmsNeighborEntry, alaIpmsNeighborIfIndex=alaIpmsNeighborIfIndex, alaIpmsPolicySrcVlan=alaIpmsPolicySrcVlan, alaIpmsOtherQuerierTimer=alaIpmsOtherQuerierTimer, alaIpmsForwardSrcVlan=alaIpmsForwardSrcVlan, alcatelIND1IPMSMIBConformance=alcatelIND1IPMSMIBConformance, alaIpmsMembershipTimer=alaIpmsMembershipTimer, alaIpmsNeighborIpAddr=alaIpmsNeighborIpAddr, alaIpmsSourceTimeout=alaIpmsSourceTimeout, alaIpmsForwardRtrTtl=alaIpmsForwardRtrTtl, alaIpmsNeighborTimer=alaIpmsNeighborTimer, alaIpmsNeighborVlan=alaIpmsNeighborVlan, alaIpmsStaticNeighborVci=alaIpmsStaticNeighborVci, alaIpmsConfig=alaIpmsConfig, alaIpmsHardwareRoute=alaIpmsHardwareRoute, alaIpmsGroupTimeout=alaIpmsGroupTimeout, alaIpmsGroupClientIfIndex=alaIpmsGroupClientIfIndex, alaIpmsStaticMemberVci=alaIpmsStaticMemberVci, alaIpmsNeighborType=alaIpmsNeighborType, alaIpmsStaticNeighborGroup=alaIpmsStaticNeighborGroup, alaIpmsForwardGroup=alaIpmsForwardGroup, alaIpmsNeighborVci=alaIpmsNeighborVci, alaIpmsStaticQuerierVci=alaIpmsStaticQuerierVci, alaIpmsGroupIGMPv3SrcTimeout=alaIpmsGroupIGMPv3SrcTimeout)
