#
# PySNMP MIB module CISCO-RTTMON-ICMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-RTTMON-ICMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
rttMonStats, rttMonCtrlAdminIndex, rttMonLatestOper = mibBuilder.importSymbols("CISCO-RTTMON-MIB", "rttMonStats", "rttMonCtrlAdminIndex", "rttMonLatestOper")
RttResponseSense, = mibBuilder.importSymbols("CISCO-RTTMON-TC-MIB", "RttResponseSense")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, TimeTicks, Counter32, Bits, Integer32, Counter64, NotificationType, Unsigned32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Counter32", "Bits", "Integer32", "Counter64", "NotificationType", "Unsigned32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "iso")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
ciscoRttMonIcmpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 486))
ciscoRttMonIcmpMIB.setRevisions(('2005-08-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setLastUpdated('200508090000Z')
if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553 NETS Email: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoRttMonIcmpMIB.setDescription('An extension to the CISCO-RTTMON-MIB for ICMP operations. The ICMP Jitter operation provides capability to measure metrics such as RTT (Round Trip Time), Jitter, packet loss, one-way latency by sending ICMP TIMESTAMP stream to the destination devices.')
ciscoRttMonIcmpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 0))
ciscoRttMonIcmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 1))
rttMonLatestIcmpJitterOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4), )
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOperTable.setReference('rttMonCtrlAdminTable from CISCO-RTTMON-MIB rttMonEchoAdminProtocol from CISCO-RTTMON-MIB rttMonCtrlAdminRttType from CISCO-RTTMON-MIB rttMonEchoAdminTargetAddress from CISCO-RTTMON-MIB')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOperTable.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOperTable.setDescription("A table which contains the status of latest ICMP Jitter operation. Each conceptual row corresponds to a ICMP jitter probe defined in rttMonCtrlAdminTable and has same index as rttMonCtrlAdminTable. An entry in this table is created only if the rttMonCtrlAdminRttType is 'icmpJitter', the rttMonEchoAdminProtocol is 'icmpJitterAppl' and valid rttMonEchoAdminTargetAddress is configured. The entry will start to collect data when rttMonCtrlAdminStatus from rttMonCtrlAdminStatus is in 'active' state. The entry will be removed when the rttMonCtrlAdminStatus is in 'destroy' state.")
rttMonLatestIcmpJitterOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1), ).setIndexNames((0, "CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex"))
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOperEntry.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOperEntry.setDescription('A list of objects that record the latest ICMP jitter operation.')
rttMonLatestIcmpJitterNumRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 1), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumRTT.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumRTT.setDescription("The number of RTT's that were successfully measured.")
rttMonLatestIcmpJitterRTTSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 2), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTSum.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTSum.setDescription("The sum of RTT's that are successfully measured. The number of successfully measured RTT is stored in rttMonLatestIcmpJitterNumRTT.")
rttMonLatestIcmpJitterRTTSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 3), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTSum2.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTSum2.setDescription("The sum of squares of RTT's that are successfully measured.")
rttMonLatestIcmpJitterRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTMin.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTMin.setDescription("The minimum of RTT's that were successfully measured.")
rttMonLatestIcmpJitterRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTMax.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterRTTMax.setDescription("The maximum of RTT's that were successfully measured.")
rttMonLatestIcmpJitterMinPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinPosSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinPosSD.setDescription('The minimum of all positive jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxPosSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxPosSD.setDescription('The maximum of all positive jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterNumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 8), Gauge32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumPosSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumPosSD.setDescription('The number of all positive jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterSumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumPosSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumPosSD.setDescription('The sum of all positive jitter values for packets sent source to destination. The number of such values is stored in rttMonLatestIcmpJitterNumPosSD.')
rttMonLatestIcmpJitterSum2PosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2PosSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2PosSD.setDescription('The sum of square of all positive jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterMinNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinNegSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinNegSD.setDescription('The minimum of absolute values of all negative jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 12), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxNegSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxNegSD.setDescription('The maximum of absolute values of all negative jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterNumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 13), Gauge32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumNegSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumNegSD.setDescription('The number of all negative jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterSumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 14), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumNegSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumNegSD.setDescription('The sum of all negative jitter values for packets sent from source to destination. The number of such values is stored in rttMonLatestIcmpJitterNumNegSD.')
rttMonLatestIcmpJitterSum2NegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 15), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2NegSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2NegSD.setDescription('The sum of square of all negative jitter values for packets sent from source to destination.')
rttMonLatestIcmpJitterMinPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 16), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinPosDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinPosDS.setDescription('The minimum of all positive jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterMaxPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 17), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxPosDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxPosDS.setDescription('The maximum of all positive jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterNumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 18), Gauge32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumPosDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumPosDS.setDescription('The number of all positive jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterSumPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 19), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumPosDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumPosDS.setDescription('The sum of all positive jitter values for packets sent from destination to source. The number of such values is stored in rttMonLatestIcmpJitterNumPosDS.')
rttMonLatestIcmpJitterSum2PosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 20), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2PosDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2PosDS.setDescription('The sum of squares of all positive jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterMinNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 21), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinNegDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinNegDS.setDescription('The minimum of all negative jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterMaxNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 22), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxNegDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxNegDS.setDescription('The maximum of all negative jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterNumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 23), Gauge32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumNegDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumNegDS.setDescription('The number of all negative jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterSumNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 24), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumNegDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSumNegDS.setDescription('The sum of all negative jitter values for packets sent from destination to source. The number of such values is stored in rttMonLatestIcmpJitterNumNegDS.')
rttMonLatestIcmpJitterSum2NegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 25), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2NegDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSum2NegDS.setDescription('The sum of squares of all negative jitter values for packets sent from destination to source.')
rttMonLatestIcmpJitterPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 26), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktLoss.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktLoss.setDescription('The number of packets lost.')
rttMonLatestIcmpJPktOutSeqBoth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 27), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqBoth.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqBoth.setDescription('The number of packets arrived out of sequence in both source-to-destination and destination-to-source direction.')
rttMonLatestIcmpJPktOutSeqSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 28), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqSD.setDescription('The number of packets arrived out of sequence in the direction of source-to-destination.')
rttMonLatestIcmpJPktOutSeqDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 29), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJPktOutSeqDS.setDescription('The number of packets arrived out of sequence in the direction of destination-to-source.')
rttMonLatestIcmpJitterPktSkipped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 30), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktSkipped.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktSkipped.setDescription('The number of packets in the operation that could not be initiated due to an internal error.')
rttMonLatestIcmpJitterSense = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 31), RttResponseSense()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSense.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterSense.setDescription('An application specific sense code for the completion status.')
rttMonLatestIcmpJitterPktLateA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 32), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktLateA.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterPktLateA.setDescription('The number of packets that arrived after the timeout.')
rttMonLatestIcmpJitterMinSucPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 33), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinSucPktL.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMinSucPktL.setDescription('The minimum number of packets that are dropped successively.')
rttMonLatestIcmpJitterMaxSucPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 34), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxSucPktL.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterMaxSucPktL.setDescription('The maximum number of packets that are dropped successively.')
rttMonLatestIcmpJitterOWSumSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 35), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSumSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSumSD.setDescription('The sum of one way trip time from source to destination.')
rttMonLatestIcmpJitterOWSum2SD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 36), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSum2SD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSum2SD.setDescription('The sum of squares of one way trip time from source to destination.')
rttMonLatestIcmpJitterOWMinSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 37), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMinSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMinSD.setDescription('The minimum of all one way trip time from source to destination.')
rttMonLatestIcmpJitterOWMaxSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 38), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMaxSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMaxSD.setDescription('The maximum of all one way trip time from source to destination.')
rttMonLatestIcmpJitterOWSumDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 39), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSumDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSumDS.setDescription('The sum of one way trip time from destination to source.')
rttMonLatestIcmpJitterOWSum2DS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 40), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSum2DS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWSum2DS.setDescription('The sum of squares of one way trip time from destination to source.')
rttMonLatestIcmpJitterOWMinDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 41), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMinDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMinDS.setDescription('The minimum of all one way trip time from destination to source.')
rttMonLatestIcmpJitterOWMaxDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 42), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMaxDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWMaxDS.setDescription('The maximum of all one way trip time from destination to source.')
rttMonLatestIcmpJitterNumOW = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 43), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumOW.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterNumOW.setDescription('The number of successful one way trip time measurements.')
rttMonLatestIcmpJitterAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 44), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgJitter.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgJitter.setDescription('The average of positive and negative jitter values in Source-to-Destionation and Destination-to-Source direction.')
rttMonLatestIcmpJitterAvgSDJ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 45), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgSDJ.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgSDJ.setDescription('The average of positive and negative jitter values from source to destination.')
rttMonLatestIcmpJitterAvgDSJ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 46), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgDSJ.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterAvgDSJ.setDescription('The average of positive and negative jitter values from destination to source.')
rttMonLatestIcmpJitterOWAvgSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 47), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWAvgSD.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWAvgSD.setDescription('The average one way trip time from source to destination.')
rttMonLatestIcmpJitterOWAvgDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 48), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWAvgDS.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterOWAvgDS.setDescription('The average one way trip time from destination to source.')
rttMonLatestIcmpJitterIAJOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 49), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJOut.setReference('Refer to the following documents for the definition: RFC 1889, Section 6.3.1')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJOut.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJOut.setDescription('Inter-arrival jitter (RFC 1889) at responder.')
rttMonLatestIcmpJitterIAJIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 5, 4, 1, 50), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJIn.setReference('Refer to the following documents for the definition: RFC 1889, Section 6.3.1')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJIn.setStatus('current')
if mibBuilder.loadTexts: rttMonLatestIcmpJitterIAJIn.setDescription('Inter-arrival jitter (RFC 1889) at source.')
rttMonIcmpJitterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8), )
if mibBuilder.loadTexts: rttMonIcmpJitterStatsTable.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsTable.setDescription("The ICMP Jitter statistics table contains summarized information of the results for a conceptual RTT control row. A rolling accumulated history of this information is maintained in a series of hourly 'group(s)'. When rttMonIcmpJitterStatsStartTimeId groups exceeds the rttMonStatisticsAdminNumHourGroups value, the oldest corresponding hourly group will be deleted and will be replaced with the new rttMonIcmpJitterStatsStartTimeId hourly group. The table is created only if the rttMonCtrlAdminRttType is 'icmpJitter' and the rttMonEchoAdminProtocol is 'icmpJitterAppl'. It will be removed when the corresponding conceptual RTT control row is destroyed.")
rttMonIcmpJitterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1), ).setIndexNames((0, "CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex"), (0, "CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsStartTimeId"))
if mibBuilder.loadTexts: rttMonIcmpJitterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsEntry.setDescription('An entry in ICMP jitter stats table. Each entry contains the objects which accumulate the results of a series of RTT operations over a 60 minute time period or a time period stored in rttMonScheduleAdminRttLife, whichever is smaller.')
rttMonIcmpJitterStatsStartTimeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 1), TimeStamp())
if mibBuilder.loadTexts: rttMonIcmpJitterStatsStartTimeId.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsStartTimeId.setDescription('The value of sysUpTime at the time when this row was created.')
rttMonIcmpJitterStatsCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 2), Counter32()).setUnits('completions').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsCompletions.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsCompletions.setDescription('The number of ICMP jitter operation that have completed successfully.')
rttMonIcmpJStatsOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 3), Counter32()).setUnits('operations').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOverThresholds.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsOverThresholds.setDescription('The number of ICMP jitter operations that violate jitterAvg threshold which is defined in RttMonReactVar.')
rttMonIcmpJitterStatsNumRTTs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumRTTs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumRTTs.setDescription("The number of RTT's that are successfully measured.")
rttMonIcmpJitterStatsRTTSums = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 5), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTSums.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTSums.setDescription("The sum of RTT's that are successfully measured for this rttMonIcmpJitterStatsStartTimeId hourly group. The number of the successfully measured RTT is stored in the rttMonIcmpJitterStatsNumRTT.")
rttMonIcmpJStatsRTTSum2Lows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 6), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsRTTSum2Lows.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsRTTSum2Lows.setDescription("The sum of squares of RTT's that are successfully measured (low order 32 bits).")
rttMonIcmpJStatsRTTSum2Highs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 7), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsRTTSum2Highs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsRTTSum2Highs.setDescription("The sum of squares of RTT's that are successfully measured (high order 32 bits).")
rttMonIcmpJitterStatsRTTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTMin.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTMin.setDescription("The minimum of RTT's that were successfully measured.")
rttMonIcmpJitterStatsRTTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTMax.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsRTTMax.setDescription("The maximum of RTT's that were successfully measured.")
rttMonIcmpJitterStatsMinPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinPosSD.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinPosSD.setDescription('The minimum of absolute values of all positive jitter values for packets sent from source to destination.')
rttMonIcmpJitterStatsMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxPosSD.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxPosSD.setDescription('The maximum of absolute values of all positive jitter values for packets sent from source to destination.')
rttMonIcmpJitterStatsNumPosSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 12), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumPosSDs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumPosSDs.setDescription('The number of all positive jitter values for packets sent from source to destination.')
rttMonIcmpJitterStatsSumPosSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 13), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumPosSDs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumPosSDs.setDescription('The sum of all positive jitter values for packets sent from source to destination. The number of such values is stored in rttMonIcmpJitterStatsNumPosSD.')
rttMonIcmpJStatsSum2PosSDLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 14), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosSDLows.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosSDLows.setDescription('The sum of square of all positive jitter values for packets sent from source to destination (low order 32 bits).')
rttMonIcmpJStatsSum2PosSDHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 15), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosSDHighs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosSDHighs.setDescription('The sum of square of all positive jitter values for packets sent from source to destination (high order 32 bits).')
rttMonIcmpJitterStatsMinNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 16), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinNegSD.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinNegSD.setDescription('The minimum of all negative jitter values for packets sent from source to destination.')
rttMonIcmpJitterStatsMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 17), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxNegSD.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxNegSD.setDescription('The maximum of all negative jitter values for packets sent from source to destination.')
rttMonIcmpJitterStatsNumNegSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 18), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumNegSDs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumNegSDs.setDescription('The number of all negative jitter values for packets sent from source to destination.')
rttMonIcmpJitterStatsSumNegSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 19), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumNegSDs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumNegSDs.setDescription('The sum of all negative jitter values for packets sent from source to destination. The number of such values is stored in rttMonIcmpJitterStatsNumNegSD.')
rttMonIcmpJStatsSum2NegSDLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 20), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegSDLows.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegSDLows.setDescription('The sum of square of all negative jitter values for packets sent from source to destination (low order 32 bits).')
rttMonIcmpJStatsSum2NegSDHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 21), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegSDHighs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegSDHighs.setDescription('The sum of square of all negative jitter values for packets sent from source to destination (high order 32 bits).')
rttMonIcmpJitterStatsMinPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 22), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinPosDS.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinPosDS.setDescription('The minimum of all positive jitter values for packets sent from destination to source.')
rttMonIcmpJitterStatsMaxPosDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 23), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxPosDS.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxPosDS.setDescription('The maximum of all positive jitter values for packets sent from destination to source.')
rttMonIcmpJitterStatsNumPosDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 24), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumPosDSes.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumPosDSes.setDescription('The number of all positive jitter values for packets sent from destination to source.')
rttMonIcmpJitterStatsSumPosDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 25), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumPosDSes.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumPosDSes.setDescription('The sum of all positive jitter values for packets sent from destination to source. The number of such values is stored in rttMonIcmpJitterStatsNumPosDS.')
rttMonIcmpJStatsSum2PosDSLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 26), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosDSLows.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosDSLows.setDescription('The sum of squares of all positive jitter values for packets sent from destination to source (low order 32 bits).')
rttMonIcmpJStatsSum2PosDSHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 27), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosDSHighs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2PosDSHighs.setDescription('The sum of squares of all positive jitter values for packets sent from destination to source (high order 32 bits).')
rttMonIcmpJitterStatsMinNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 28), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinNegDS.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMinNegDS.setDescription('The minimum of all negative jitter values for packets sent from destination to source.')
rttMonIcmpJitterStatsMaxNegDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 29), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxNegDS.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsMaxNegDS.setDescription('The maximum of all negative jitter values for packets sent from destination to source.')
rttMonIcmpJitterStatsNumNegDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 30), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumNegDSes.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumNegDSes.setDescription('The number of all negative jitter values for packets sent from destination to source.')
rttMonIcmpJitterStatsSumNegDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 31), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumNegDSes.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsSumNegDSes.setDescription('The sum of all negative jitter values for packets sent from destination to source. The number of such values is stored in rttMonIcmpJitterStatsNumNegDS.')
rttMonIcmpJStatsSum2NegDSLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 32), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegDSLows.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegDSLows.setDescription('The sum of squares of all negative jitter values for packets sent from destination to source (low order 32 bits).')
rttMonIcmpJStatsSum2NegDSHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 33), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegDSHighs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsSum2NegDSHighs.setDescription('The sum of squares of all negative jitter values for packets sent from destination to source (high order 32 bits).')
rttMonIcmpJitterStatsPktLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 34), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktLosses.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktLosses.setDescription('The number of lost packets')
rttMonIcmpJStatsPktOutSeqBoth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 35), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqBoth.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqBoth.setDescription('The number of packets arrived out of sequence in both source-to-destination and destination-to-source direction.')
rttMonIcmpJStatsPktOutSeqSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 36), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqSDs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqSDs.setDescription('The number of packets arrived out of sequence in the direction of source-to-destination.')
rttMonIcmpJStatsPktOutSeqDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 37), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqDSes.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsPktOutSeqDSes.setDescription('The number of packets arrived out of sequence in the direction of destination-to-source.')
rttMonIcmpJitterStatsPktSkippeds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 38), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktSkippeds.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktSkippeds.setDescription('The number of packets that are skipped per operation because the router could not send the packet out.')
rttMonIcmpJitterStatsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 39), Counter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsErrors.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsErrors.setDescription('The number of occasions when a ICMP jitter operation could not be initiated because of an internal error')
rttMonIcmpJitterStatsBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 40), Counter32()).setUnits('busies').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsBusies.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsBusies.setDescription('The number of occasions when a ICMP jitter operation could not be initiated because a previous ICMP jitter operation has not been completed.')
rttMonIcmpJitterStatsOWSumSDs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 41), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWSumSDs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWSumSDs.setDescription('The sum of one way trip time from source to destination.')
rttMonIcmpJStatsOWSum2SDLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 42), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2SDLows.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2SDLows.setDescription('The sum of squares of one way trip time from source to destination (low order 32 bits).')
rttMonIcmpJStatsOWSum2SDHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 43), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2SDHighs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2SDHighs.setDescription('The sum of squares of one way trip time from source to destination (high order 32 bits).')
rttMonIcmpJitterStatsOWMinSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 44), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMinSD.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMinSD.setDescription('The minimum of all one way trip time from source to destination.')
rttMonIcmpJitterStatsOWMaxSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 45), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMaxSD.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMaxSD.setDescription('The maximum of all one way trip time from source to destination.')
rttMonIcmpJitterStatsOWSumDSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 46), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWSumDSes.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWSumDSes.setDescription('The sum of one way trip time from destination to source.')
rttMonIcmpJStatsOWSum2DSLows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 47), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2DSLows.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2DSLows.setDescription('The sum of squares of one way trip time from destination to source (low order 32 bits).')
rttMonIcmpJStatsOWSum2DSHighs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 48), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2DSHighs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJStatsOWSum2DSHighs.setDescription('The sum of squares of one way trip time from destination to source (high order 32 bits).')
rttMonIcmpJitterStatsOWMinDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 49), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMinDS.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMinDS.setDescription('The minimum of all one way trip time from destination to source.')
rttMonIcmpJitterStatsOWMaxDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 50), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMaxDS.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsOWMaxDS.setDescription('The maximum of all one way trip time from destination to source.')
rttMonIcmpJitterStatsNumOWs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 51), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumOWs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsNumOWs.setDescription('The number of one way trip time that are successfully measured.')
rttMonIcmpJitterStatsAvgJ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 52), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJ.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJ.setDescription('The average of positive and negative jitter values for source-to-destination and destination-to-source direction.')
rttMonIcmpJitterStatsAvgJSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 53), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJSD.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJSD.setDescription('The average of positive and negative jitter values in source-to-destination direction.')
rttMonIcmpJitterStatsAvgJDS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 54), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJDS.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsAvgJDS.setDescription('The average of positive and negative jitter values in destination-to-source direction.')
rttMonIcmpJitterMinSucPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 55), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterMinSucPktLoss.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterMinSucPktLoss.setDescription('The minimum number of packets that are dropped successively.')
rttMonIcmpJitterMaxSucPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 56), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterMaxSucPktLoss.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterMaxSucPktLoss.setDescription('The maximum number of packets that are dropped successively.')
rttMonIcmpJitterStatsIAJOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 57), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJOut.setReference('Refer to the following documents for the definition: RFC 1889, Section 6.3.1')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJOut.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJOut.setDescription('Inter-arrival jitter (RFC 1889) at responder')
rttMonIcmpJitterStatsIAJIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 58), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJIn.setReference('Refer to the following documents for the definition: RFC 1889, Section 6.3.1')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJIn.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsIAJIn.setDescription('Inter-arrival jitter (RFC 1889) at sender')
rttMonIcmpJitterStatsPktLateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 42, 1, 3, 8, 1, 59), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktLateAs.setStatus('current')
if mibBuilder.loadTexts: rttMonIcmpJitterStatsPktLateAs.setDescription('The number of packets that arrived after the timeout.')
ciscoRttMonIcmpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 2))
ciscoRttMonIcmpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 1))
ciscoRttMonIcmpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 2))
ciscoRttMonIcmpJitterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 1, 1)).setObjects(("CISCO-RTTMON-ICMP-MIB", "ciscoRttMonIcmpJitterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRttMonIcmpJitterCompliance = ciscoRttMonIcmpJitterCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoRttMonIcmpJitterCompliance.setDescription('The compliance statement for (1) ICMP Jitter operation and statistics')
ciscoRttMonIcmpJitterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 486, 2, 2, 1)).setObjects(("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumRTT"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTSum"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTSum2"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTMin"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterRTTMax"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2PosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2NegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2PosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSumNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSum2NegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterPktLoss"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJPktOutSeqBoth"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJPktOutSeqSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJPktOutSeqDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterPktSkipped"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterSense"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterPktLateA"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMinSucPktL"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterMaxSucPktL"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSumSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSum2SD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMinSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMaxSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSumDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWSum2DS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMinDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWMaxDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterNumOW"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterAvgJitter"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterAvgSDJ"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterAvgDSJ"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWAvgSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterOWAvgDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterIAJOut"), ("CISCO-RTTMON-ICMP-MIB", "rttMonLatestIcmpJitterIAJIn"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsCompletions"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOverThresholds"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumRTTs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsRTTSums"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsRTTSum2Lows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsRTTSum2Highs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsRTTMin"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsRTTMax"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxPosSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumPosSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumPosSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosSDLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosSDHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxNegSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumNegSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumNegSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegSDLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegSDHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxPosDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumPosDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumPosDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosDSLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2PosDSHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMinNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsMaxNegDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumNegDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsSumNegDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegDSLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsSum2NegDSHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsPktLosses"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsPktOutSeqBoth"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsPktOutSeqSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsPktOutSeqDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsPktSkippeds"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsErrors"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsBusies"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWSumSDs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2SDLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2SDHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMinSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMaxSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWSumDSes"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2DSLows"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJStatsOWSum2DSHighs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMinDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsOWMaxDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsNumOWs"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsAvgJ"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsAvgJSD"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsAvgJDS"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterMinSucPktLoss"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterMaxSucPktLoss"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsIAJOut"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsIAJIn"), ("CISCO-RTTMON-ICMP-MIB", "rttMonIcmpJitterStatsPktLateAs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoRttMonIcmpJitterGroup = ciscoRttMonIcmpJitterGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoRttMonIcmpJitterGroup.setDescription('A collection of statistics objects related to ICMP Jitter Probe.')
mibBuilder.exportSymbols("CISCO-RTTMON-ICMP-MIB", rttMonLatestIcmpJitterMaxPosSD=rttMonLatestIcmpJitterMaxPosSD, rttMonIcmpJStatsSum2NegDSHighs=rttMonIcmpJStatsSum2NegDSHighs, rttMonIcmpJitterStatsSumNegSDs=rttMonIcmpJitterStatsSumNegSDs, rttMonIcmpJitterStatsSumNegDSes=rttMonIcmpJitterStatsSumNegDSes, ciscoRttMonIcmpMIBConform=ciscoRttMonIcmpMIBConform, rttMonLatestIcmpJitterSum2NegSD=rttMonLatestIcmpJitterSum2NegSD, rttMonLatestIcmpJitterPktSkipped=rttMonLatestIcmpJitterPktSkipped, rttMonLatestIcmpJitterNumNegDS=rttMonLatestIcmpJitterNumNegDS, rttMonIcmpJitterStatsCompletions=rttMonIcmpJitterStatsCompletions, rttMonIcmpJitterStatsMaxNegSD=rttMonIcmpJitterStatsMaxNegSD, rttMonIcmpJitterStatsOWSumSDs=rttMonIcmpJitterStatsOWSumSDs, rttMonIcmpJitterStatsMaxPosDS=rttMonIcmpJitterStatsMaxPosDS, rttMonLatestIcmpJitterAvgDSJ=rttMonLatestIcmpJitterAvgDSJ, rttMonIcmpJitterStatsAvgJSD=rttMonIcmpJitterStatsAvgJSD, rttMonIcmpJitterStatsNumPosDSes=rttMonIcmpJitterStatsNumPosDSes, rttMonIcmpJitterStatsAvgJ=rttMonIcmpJitterStatsAvgJ, ciscoRttMonIcmpCompliances=ciscoRttMonIcmpCompliances, rttMonLatestIcmpJitterSum2PosSD=rttMonLatestIcmpJitterSum2PosSD, rttMonIcmpJitterStatsMinPosDS=rttMonIcmpJitterStatsMinPosDS, rttMonIcmpJitterStatsNumOWs=rttMonIcmpJitterStatsNumOWs, rttMonIcmpJStatsRTTSum2Highs=rttMonIcmpJStatsRTTSum2Highs, rttMonIcmpJStatsSum2NegSDHighs=rttMonIcmpJStatsSum2NegSDHighs, rttMonLatestIcmpJitterOWMaxSD=rttMonLatestIcmpJitterOWMaxSD, rttMonIcmpJitterStatsRTTSums=rttMonIcmpJitterStatsRTTSums, rttMonIcmpJStatsSum2PosSDLows=rttMonIcmpJStatsSum2PosSDLows, rttMonLatestIcmpJitterSense=rttMonLatestIcmpJitterSense, rttMonLatestIcmpJitterMinNegDS=rttMonLatestIcmpJitterMinNegDS, rttMonIcmpJitterStatsRTTMax=rttMonIcmpJitterStatsRTTMax, rttMonLatestIcmpJitterPktLateA=rttMonLatestIcmpJitterPktLateA, rttMonIcmpJStatsSum2PosSDHighs=rttMonIcmpJStatsSum2PosSDHighs, rttMonLatestIcmpJitterSumPosSD=rttMonLatestIcmpJitterSumPosSD, rttMonLatestIcmpJitterRTTSum=rttMonLatestIcmpJitterRTTSum, rttMonIcmpJitterStatsIAJOut=rttMonIcmpJitterStatsIAJOut, rttMonLatestIcmpJitterOperTable=rttMonLatestIcmpJitterOperTable, rttMonLatestIcmpJitterMinPosSD=rttMonLatestIcmpJitterMinPosSD, rttMonIcmpJitterStatsEntry=rttMonIcmpJitterStatsEntry, rttMonIcmpJStatsOWSum2SDHighs=rttMonIcmpJStatsOWSum2SDHighs, rttMonLatestIcmpJitterOWSumDS=rttMonLatestIcmpJitterOWSumDS, rttMonIcmpJitterStatsNumNegDSes=rttMonIcmpJitterStatsNumNegDSes, rttMonLatestIcmpJitterOWSum2DS=rttMonLatestIcmpJitterOWSum2DS, rttMonLatestIcmpJitterOWMinSD=rttMonLatestIcmpJitterOWMinSD, rttMonIcmpJitterStatsOWMinDS=rttMonIcmpJitterStatsOWMinDS, rttMonIcmpJStatsPktOutSeqSDs=rttMonIcmpJStatsPktOutSeqSDs, rttMonLatestIcmpJitterSumNegSD=rttMonLatestIcmpJitterSumNegSD, rttMonIcmpJStatsSum2PosDSLows=rttMonIcmpJStatsSum2PosDSLows, rttMonLatestIcmpJitterMaxSucPktL=rttMonLatestIcmpJitterMaxSucPktL, rttMonLatestIcmpJitterOWMaxDS=rttMonLatestIcmpJitterOWMaxDS, ciscoRttMonIcmpJitterGroup=ciscoRttMonIcmpJitterGroup, rttMonLatestIcmpJitterSumPosDS=rttMonLatestIcmpJitterSumPosDS, rttMonLatestIcmpJitterSumNegDS=rttMonLatestIcmpJitterSumNegDS, rttMonLatestIcmpJitterIAJOut=rttMonLatestIcmpJitterIAJOut, rttMonIcmpJitterStatsNumPosSDs=rttMonIcmpJitterStatsNumPosSDs, ciscoRttMonIcmpMIBObjects=ciscoRttMonIcmpMIBObjects, rttMonLatestIcmpJitterOWAvgDS=rttMonLatestIcmpJitterOWAvgDS, ciscoRttMonIcmpJitterCompliance=ciscoRttMonIcmpJitterCompliance, rttMonLatestIcmpJitterNumRTT=rttMonLatestIcmpJitterNumRTT, rttMonLatestIcmpJitterMaxNegSD=rttMonLatestIcmpJitterMaxNegSD, ciscoRttMonIcmpMIB=ciscoRttMonIcmpMIB, rttMonLatestIcmpJitterMinNegSD=rttMonLatestIcmpJitterMinNegSD, rttMonIcmpJStatsRTTSum2Lows=rttMonIcmpJStatsRTTSum2Lows, rttMonIcmpJitterStatsRTTMin=rttMonIcmpJitterStatsRTTMin, rttMonLatestIcmpJitterOperEntry=rttMonLatestIcmpJitterOperEntry, rttMonLatestIcmpJitterRTTSum2=rttMonLatestIcmpJitterRTTSum2, rttMonIcmpJStatsSum2NegDSLows=rttMonIcmpJStatsSum2NegDSLows, rttMonLatestIcmpJitterOWSumSD=rttMonLatestIcmpJitterOWSumSD, rttMonIcmpJitterStatsOWSumDSes=rttMonIcmpJitterStatsOWSumDSes, rttMonLatestIcmpJitterAvgJitter=rttMonLatestIcmpJitterAvgJitter, rttMonLatestIcmpJitterMaxNegDS=rttMonLatestIcmpJitterMaxNegDS, rttMonIcmpJitterStatsOWMinSD=rttMonIcmpJitterStatsOWMinSD, rttMonIcmpJitterStatsAvgJDS=rttMonIcmpJitterStatsAvgJDS, rttMonIcmpJitterStatsNumRTTs=rttMonIcmpJitterStatsNumRTTs, rttMonIcmpJitterStatsMaxNegDS=rttMonIcmpJitterStatsMaxNegDS, rttMonIcmpJitterStatsOWMaxDS=rttMonIcmpJitterStatsOWMaxDS, rttMonIcmpJitterStatsMinNegSD=rttMonIcmpJitterStatsMinNegSD, rttMonLatestIcmpJPktOutSeqDS=rttMonLatestIcmpJPktOutSeqDS, ciscoRttMonIcmpMIBNotifs=ciscoRttMonIcmpMIBNotifs, rttMonLatestIcmpJitterOWSum2SD=rttMonLatestIcmpJitterOWSum2SD, rttMonLatestIcmpJitterMaxPosDS=rttMonLatestIcmpJitterMaxPosDS, rttMonLatestIcmpJitterNumPosSD=rttMonLatestIcmpJitterNumPosSD, rttMonLatestIcmpJitterSum2NegDS=rttMonLatestIcmpJitterSum2NegDS, rttMonLatestIcmpJitterRTTMax=rttMonLatestIcmpJitterRTTMax, PYSNMP_MODULE_ID=ciscoRttMonIcmpMIB, rttMonLatestIcmpJitterSum2PosDS=rttMonLatestIcmpJitterSum2PosDS, rttMonIcmpJStatsOWSum2DSHighs=rttMonIcmpJStatsOWSum2DSHighs, rttMonLatestIcmpJitterOWMinDS=rttMonLatestIcmpJitterOWMinDS, rttMonIcmpJitterStatsOWMaxSD=rttMonIcmpJitterStatsOWMaxSD, rttMonLatestIcmpJitterAvgSDJ=rttMonLatestIcmpJitterAvgSDJ, rttMonLatestIcmpJitterMinPosDS=rttMonLatestIcmpJitterMinPosDS, rttMonIcmpJitterMinSucPktLoss=rttMonIcmpJitterMinSucPktLoss, rttMonIcmpJitterStatsStartTimeId=rttMonIcmpJitterStatsStartTimeId, rttMonIcmpJStatsSum2NegSDLows=rttMonIcmpJStatsSum2NegSDLows, rttMonIcmpJitterStatsBusies=rttMonIcmpJitterStatsBusies, rttMonLatestIcmpJitterIAJIn=rttMonLatestIcmpJitterIAJIn, rttMonIcmpJStatsOWSum2DSLows=rttMonIcmpJStatsOWSum2DSLows, rttMonIcmpJitterStatsPktLateAs=rttMonIcmpJitterStatsPktLateAs, rttMonLatestIcmpJPktOutSeqBoth=rttMonLatestIcmpJPktOutSeqBoth, rttMonIcmpJitterStatsSumPosSDs=rttMonIcmpJitterStatsSumPosSDs, rttMonLatestIcmpJitterOWAvgSD=rttMonLatestIcmpJitterOWAvgSD, rttMonIcmpJStatsPktOutSeqDSes=rttMonIcmpJStatsPktOutSeqDSes, rttMonIcmpJitterStatsErrors=rttMonIcmpJitterStatsErrors, rttMonIcmpJStatsOverThresholds=rttMonIcmpJStatsOverThresholds, rttMonLatestIcmpJitterNumPosDS=rttMonLatestIcmpJitterNumPosDS, rttMonLatestIcmpJPktOutSeqSD=rttMonLatestIcmpJPktOutSeqSD, rttMonIcmpJitterStatsPktLosses=rttMonIcmpJitterStatsPktLosses, rttMonIcmpJitterStatsMinPosSD=rttMonIcmpJitterStatsMinPosSD, rttMonIcmpJitterStatsPktSkippeds=rttMonIcmpJitterStatsPktSkippeds, rttMonLatestIcmpJitterNumNegSD=rttMonLatestIcmpJitterNumNegSD, rttMonIcmpJStatsPktOutSeqBoth=rttMonIcmpJStatsPktOutSeqBoth, rttMonIcmpJitterStatsIAJIn=rttMonIcmpJitterStatsIAJIn, rttMonLatestIcmpJitterMinSucPktL=rttMonLatestIcmpJitterMinSucPktL, rttMonIcmpJitterStatsSumPosDSes=rttMonIcmpJitterStatsSumPosDSes, rttMonIcmpJitterStatsTable=rttMonIcmpJitterStatsTable, rttMonIcmpJStatsSum2PosDSHighs=rttMonIcmpJStatsSum2PosDSHighs, rttMonLatestIcmpJitterNumOW=rttMonLatestIcmpJitterNumOW, rttMonIcmpJitterStatsMinNegDS=rttMonIcmpJitterStatsMinNegDS, ciscoRttMonIcmpMIBGroups=ciscoRttMonIcmpMIBGroups, rttMonIcmpJStatsOWSum2SDLows=rttMonIcmpJStatsOWSum2SDLows, rttMonIcmpJitterStatsMaxPosSD=rttMonIcmpJitterStatsMaxPosSD, rttMonIcmpJitterMaxSucPktLoss=rttMonIcmpJitterMaxSucPktLoss, rttMonLatestIcmpJitterRTTMin=rttMonLatestIcmpJitterRTTMin, rttMonLatestIcmpJitterPktLoss=rttMonLatestIcmpJitterPktLoss, rttMonIcmpJitterStatsNumNegSDs=rttMonIcmpJitterStatsNumNegSDs)
