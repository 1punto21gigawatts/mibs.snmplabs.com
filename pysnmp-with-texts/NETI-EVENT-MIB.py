#
# PySNMP MIB module NETI-EVENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETI-EVENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:19:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
netiGeneric, = mibBuilder.importSymbols("NETI-COMMON-MIB", "netiGeneric")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, Bits, TimeTicks, ObjectIdentity, iso, Counter32, Counter64, ModuleIdentity, Integer32, NotificationType, MibIdentifier, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "TimeTicks", "ObjectIdentity", "iso", "Counter32", "Counter64", "ModuleIdentity", "Integer32", "NotificationType", "MibIdentifier", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TruthValue, RowPointer, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "RowPointer", "DateAndTime", "TextualConvention")
netiEventMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2928, 2, 1))
netiEventMIB.setRevisions(('2011-05-03 10:00', '2009-07-09 16:00', '2007-03-06 00:00', '2004-09-10 00:00', '2003-11-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netiEventMIB.setRevisionsDescriptions(('Added eventTrapPurpose.', '- Added eventActiveAlarmTable. - In AlarmCause, dTEDCEInterfaceError relabled to dTEDCEInterfaceError to conform to SMIv2.', 'Added the following entries in the AlarmCause: replaceableUnitMissing(68), replaceableUnitProblem(69).', 'Added the following entries in the AlarmCause: alarmIndicationSignal(66), remoteDefectIndication(67).', 'Added the group eventAlarmCountersGroup with counters for the number of active alarms per serverity. Added eventConformanceGroups to comply with RFC2580.',))
if mibBuilder.loadTexts: netiEventMIB.setLastUpdated('201105031000Z')
if mibBuilder.loadTexts: netiEventMIB.setOrganization('Net Insight AB')
if mibBuilder.loadTexts: netiEventMIB.setContactInfo('Net Insight AB Box 42093 SE-126 14 Stockholm Sweden Tel +46-8-685 0400 info@netinsight.se')
if mibBuilder.loadTexts: netiEventMIB.setDescription('Mib containing event and alarm information. The mib implements two tables and some notifications. One table is holding events and one is holding alarms. The event table contains the events that are sent as SNMP notifications. These events indicate change of alarms, or change in other tables defined in other mibs, that uses the mechanism in this mib to notify a table change. If a notification receiver misses notifications, it can retrieve the lost notifications from this table. The alarm table holds all active alarms, and possibly also a number of the last cleared alarms. The active alarm table holds only the active alarms.')
eventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1))
eventNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2))
eventConformanceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 3))
class EventType(TextualConvention, Integer32):
    description = "The type of event. 'created', 'modified'and 'deleted' indicates status of a conceptual row in a table. If the event represents an alarm, the type is 'none'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("created", 1), ("modified", 2), ("deleted", 3))

class AlarmType(TextualConvention, Integer32):
    description = "The alarm type as specified in CCITT Rec. X.733(1992 E)|ISO/EIC 10164-4:1992 (E). Alarm type 'unknown' may be set if the alarm type can not be determined, or when an event is not caused by an alarm."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("communication", 1), ("qualityOfService", 2), ("processingError", 3), ("equipment", 4), ("environmental", 5))

class AlarmSeverity(TextualConvention, Integer32):
    description = "The alarm severity as specified in CCITT Rec. X.733(1992 E)|ISO/EIC 10164-4:1992 (E). Alarm severity 'unknown' may be set if the alarm type can not be determined, or when the event is not caused by an alarm."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("indeterminate", 1), ("critical", 2), ("major", 3), ("minor", 4), ("warning", 5), ("cleared", 6))

class AlarmCause(TextualConvention, Integer32):
    description = "The alarm cause 1-57 as specified in CCITT Rec. X.733(1992 E)|ISO/EIC 10164-4:1992 (E). Alarm casue 'unknown' may be set if the cause can not be determined, or if the event was not casued by an alarm. (0 and 58- are proprietary)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69))
    namedValues = NamedValues(("unknown", 0), ("adapterError", 1), ("applicationSubsystemFailure", 2), ("bandwidthReduced", 3), ("callEstablishmentError", 4), ("communicationsProtocolError", 5), ("communicationsSubsystemFailure", 6), ("configurationOrCustomizationError", 7), ("congestion", 8), ("corruptData", 9), ("cpuCyclesLimitExceeded", 10), ("datasetOrModemError", 11), ("degradedSignal", 12), ("dTEDCEInterfaceError", 13), ("enclosureDoorOpen", 14), ("equipmentMalfunction", 15), ("excessiveVibration", 16), ("fileError", 17), ("fireDetected", 18), ("floodDetected", 19), ("framingError", 20), ("heatingOrVentilationOrCoolingSystemProblem", 21), ("humidityUnacceptable", 22), ("inputOutputDeviceError", 23), ("inputDeviceError", 24), ("lANError", 25), ("leakDetected", 26), ("localNodeTransmissionError", 27), ("lossOfFrame", 28), ("lossOfSignal", 29), ("materialSupplyExhausted", 30), ("multiplexerProblem", 31), ("outOfMemory", 32), ("outputDeviceError", 33), ("performanceDegraded", 34), ("powerProblem", 35), ("pressureUnacceptable", 36), ("processorProblem", 37), ("pumpFailure", 38), ("queueSizeExceeded", 39), ("receiveFailure", 40), ("receiverFailure", 41), ("remoteNodeTransmissionError", 42), ("resourceAtOrNearingCapacity", 43), ("responseTimeExcessive", 44), ("retransmissionRateExcessive", 45), ("softwareError", 46), ("softwareProgramAbnormallyTerminated", 47), ("softwareProgramError", 48), ("storageCapacityProblem", 49), ("temperatureUnacceptable", 50), ("thresholdCrossed", 51), ("timingProblem", 52), ("toxicLeakDetected", 53), ("transmitFailure", 54), ("transmitterFailure", 55), ("underlyingResourceUnavailable", 56), ("versionMismatch", 57), ("phyLossOfSignal", 58), ("phyLossOfFrame", 59), ("phyAlarmIndicationSignal", 60), ("phyRemoteDefectIndication", 61), ("phySignalFailure", 62), ("phySignalDegraded", 63), ("testmodeEntered", 64), ("serviceUnavailable", 65), ("alarmIndicationSignal", 66), ("remoteDefectIndication", 67), ("replaceableUnitMissing", 68), ("replaceableUnitProblem", 69))

eventSequenceCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSequenceCounter.setStatus('current')
if mibBuilder.loadTexts: eventSequenceCounter.setDescription("The index of the latest sent event defined as notifications in this mib. By examine his object, the notification receiver can determine wheter it has missed any notifications. The counter resets to zero at cold start, indicating that no events has been sent, and that the event table is empty. The counter will wrap and restart at value '1' when it passes its maximum value")
eventLogLastChangedTime = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLogLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: eventLogLastChangedTime.setDescription('The time when an event was last changed, and a notification was sent.')
eventTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3), )
if mibBuilder.loadTexts: eventTable.setStatus('current')
if mibBuilder.loadTexts: eventTable.setDescription('Table containing the most recent events. The maximum size of the table depends on the implementation')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1), ).setIndexNames((0, "NETI-EVENT-MIB", "eventIndex"))
if mibBuilder.loadTexts: eventEntry.setStatus('current')
if mibBuilder.loadTexts: eventEntry.setDescription('One entry in the table holds one event. Events are either created by the agent when a conceptual row has been changed in a table defined in another mib, or when an alarm status is changed in the alarm table defined in this mib.')
eventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventIndex.setStatus('current')
if mibBuilder.loadTexts: eventIndex.setDescription('Arbitrary index for an entry in the event table. The eventIndex follows the eventSequenceCounter as such that the eventSequenceCounter refers to the last event in the table')
eventObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventObject.setStatus('current')
if mibBuilder.loadTexts: eventObject.setDescription('A pointer to the conceptual row of the object that caused this event. The value is the name of the instance of the first accessible columnar object in the conceptual row. For example, dtmIfIndex.3 would point to the 3rd row in the dtmIfTable. If the object is unavailable, the value is { 0 0 }.')
eventObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventObjectName.setStatus('current')
if mibBuilder.loadTexts: eventObjectName.setDescription('A text describing the object that caused the event in a for humans more readable form. If not set then this object contains a zero-length string.')
eventAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 4), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmType.setStatus('current')
if mibBuilder.loadTexts: eventAlarmType.setDescription('This is the event type as specified in AlarmType.')
eventType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 5), EventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventType.setStatus('current')
if mibBuilder.loadTexts: eventType.setDescription('This is the event type as specified in EventType.')
eventCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 6), AlarmCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCause.setStatus('current')
if mibBuilder.loadTexts: eventCause.setDescription('The alarm cause as specified in AlarmCause.')
eventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 7), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSeverity.setStatus('current')
if mibBuilder.loadTexts: eventSeverity.setDescription('The alarm severity as specified in AlarmSeverity.')
eventText = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventText.setStatus('current')
if mibBuilder.loadTexts: eventText.setDescription('A text describing the event in a for humans more readable form.')
eventCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCreatedTime.setStatus('current')
if mibBuilder.loadTexts: eventCreatedTime.setDescription('The time when the event was created.')
eventAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4), )
if mibBuilder.loadTexts: eventAlarmTable.setStatus('current')
if mibBuilder.loadTexts: eventAlarmTable.setDescription('Table containing alarms and their status. The maximum size of the table depends on the implementaion.')
eventAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1), ).setIndexNames((0, "NETI-EVENT-MIB", "eventAlarmIndex"))
if mibBuilder.loadTexts: eventAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: eventAlarmEntry.setDescription('One entry in the table holds one alarm. The table contains all active alarms, and depending on the implementation, it may contian none, some or all cleared alarms.')
eventAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: eventAlarmIndex.setDescription('Arbitrary index for an entry in the alarm table.')
eventAlarmObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmObject.setStatus('current')
if mibBuilder.loadTexts: eventAlarmObject.setDescription('A pointer to the conceptual row of the object that caused this alarm. The value is the name of the instance of the first accessible columnar object in the conceptual row. For example, dtmIfIndex.3 would point to the 3rd row in the dtmIfTable. If the object is unavailable, the value is { 0 0 }.')
eventAlarmObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmObjectName.setStatus('current')
if mibBuilder.loadTexts: eventAlarmObjectName.setDescription('A text describing the object in a more readable form. If not set then this object contains a zero-length string.')
eventAlarmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 4), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmAlarmType.setStatus('current')
if mibBuilder.loadTexts: eventAlarmAlarmType.setDescription('The alarm type as specified in AlarmType.')
eventAlarmCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 5), AlarmCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmCause.setStatus('current')
if mibBuilder.loadTexts: eventAlarmCause.setDescription('The alarm cause as specified in AlarmCause.')
eventAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 6), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: eventAlarmSeverity.setDescription('The alarm severity as specified in AlarmSeverity.')
eventAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmText.setStatus('current')
if mibBuilder.loadTexts: eventAlarmText.setDescription('A text describing the alarm in a more readable form.')
eventAlarmLastChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: eventAlarmLastChangedTime.setDescription("The time when the alarm was changed, i.e. when the alarm was created, or 'eventAlarmSeverity' or 'eventAlarmAcknowledged' was changed.")
eventAlarmAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventAlarmAcknowledged.setStatus('current')
if mibBuilder.loadTexts: eventAlarmAcknowledged.setDescription("The acknowledgement status of the alarm. This is set to 'true' to indicate that the alarm is is acknowledged, and set to 'false' to clear the acknowledge.")
eventAlarmCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 4, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmCreatedTime.setStatus('current')
if mibBuilder.loadTexts: eventAlarmCreatedTime.setDescription('The time when the alarm was created.')
eventActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6), )
if mibBuilder.loadTexts: eventActiveAlarmTable.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmTable.setDescription('Table containing alarms and their status. The maximum size of the table depends on the implementaion.')
eventActiveAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1), ).setIndexNames((0, "NETI-EVENT-MIB", "eventActiveAlarmIndex"))
if mibBuilder.loadTexts: eventActiveAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmEntry.setDescription('One entry in the table holds one alarm. The table contains only active alarms.')
eventActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmIndex.setDescription('Arbitrary index for an entry in the alarm table.')
eventActiveAlarmObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmObject.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmObject.setDescription('A pointer to the conceptual row of the object that caused this alarm. The value is the name of the instance of the first accessible columnar object in the conceptual row. For example, dtmIfIndex.3 would point to the 3rd row in the dtmIfTable. If the object is unavailable, the value is { 0 0 }.')
eventActiveAlarmObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmObjectName.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmObjectName.setDescription('A text describing the object in a more readable form. If not set then this object contains a zero-length string.')
eventActiveAlarmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 4), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmAlarmType.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmAlarmType.setDescription('The alarm type as specified in AlarmType.')
eventActiveAlarmCause = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 5), AlarmCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmCause.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmCause.setDescription('The alarm cause as specified in AlarmCause.')
eventActiveAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 6), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmSeverity.setDescription('The alarm severity as specified in AlarmSeverity.')
eventActiveAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmText.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmText.setDescription('A text describing the alarm in a more readable form.')
eventActiveAlarmLastChangedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmLastChangedTime.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmLastChangedTime.setDescription("The time when the alarm was changed, i.e. when the alarm was created, or 'eventActiveAlarmSeverity' or 'eventActiveAlarmAcknowledged' was changed.")
eventActiveAlarmAcknowledged = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventActiveAlarmAcknowledged.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmAcknowledged.setDescription("The acknowledgement status of the alarm. This is set to 'true' to indicate that the alarm is is acknowledged, and set to 'false' to clear the acknowledge.")
eventActiveAlarmCreatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 6, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventActiveAlarmCreatedTime.setStatus('current')
if mibBuilder.loadTexts: eventActiveAlarmCreatedTime.setDescription('The time when the alarm was created.')
eventAlarmCountersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5))
eventCriticalCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCriticalCounter.setStatus('current')
if mibBuilder.loadTexts: eventCriticalCounter.setDescription("The number of active alarms with the serverity 'critical'.")
eventMajorCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventMajorCounter.setStatus('current')
if mibBuilder.loadTexts: eventMajorCounter.setDescription("The number of active alarms with the serverity 'major'.")
eventMinorCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventMinorCounter.setStatus('current')
if mibBuilder.loadTexts: eventMinorCounter.setDescription("The number of active alarms with the serverity 'minor'.")
eventWarningCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventWarningCounter.setStatus('current')
if mibBuilder.loadTexts: eventWarningCounter.setDescription("The number of active alarms with the serverity 'warning'.")
eventIndeterminateCounter = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 5, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventIndeterminateCounter.setStatus('current')
if mibBuilder.loadTexts: eventIndeterminateCounter.setDescription("The number of active alarms with the serverity 'indeterminate'.")
eventNotificationObjectsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 7))
eventTrapPurpose = MibScalar((1, 3, 6, 1, 4, 1, 2928, 2, 1, 1, 7, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eventTrapPurpose.setStatus('current')
if mibBuilder.loadTexts: eventTrapPurpose.setDescription('Indicates the purpose of a managed object to where a trap belongs. This OID may be appended to traps in the eventNotifications group at the discretion of the SNMP agent.')
eventAlarmCritical = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 1)).setObjects(("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: eventAlarmCritical.setStatus('current')
if mibBuilder.loadTexts: eventAlarmCritical.setDescription("Notification for an alarm with severity 'critical'.")
eventAlarmMajor = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 2)).setObjects(("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: eventAlarmMajor.setStatus('current')
if mibBuilder.loadTexts: eventAlarmMajor.setDescription("Notification for an alarm with severity 'major'.")
eventAlarmMinor = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 3)).setObjects(("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: eventAlarmMinor.setStatus('current')
if mibBuilder.loadTexts: eventAlarmMinor.setDescription("Notification for an alarm with severity 'minor'.")
eventAlarmWarning = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 4)).setObjects(("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: eventAlarmWarning.setStatus('current')
if mibBuilder.loadTexts: eventAlarmWarning.setDescription("Notification for an alarm with severity 'warning'.")
eventAlarmIndeterminate = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 5)).setObjects(("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: eventAlarmIndeterminate.setStatus('current')
if mibBuilder.loadTexts: eventAlarmIndeterminate.setDescription("Notification for an alarm with severity 'indeterminate'.")
eventAlarmUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 6)).setObjects(("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: eventAlarmUnknown.setStatus('current')
if mibBuilder.loadTexts: eventAlarmUnknown.setDescription('Notification for an alarm with unknown severity.')
eventAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 7)).setObjects(("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: eventAlarmClear.setStatus('current')
if mibBuilder.loadTexts: eventAlarmClear.setDescription('Notification for a cleared alarm.')
netiGenericEvent = NotificationType((1, 3, 6, 1, 4, 1, 2928, 2, 1, 2, 8)).setObjects(("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventType"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventSequenceCounter"))
if mibBuilder.loadTexts: netiGenericEvent.setStatus('current')
if mibBuilder.loadTexts: netiGenericEvent.setDescription('Notification for a generic event.')
eventConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2928, 2, 1, 3, 1)).setObjects(("NETI-EVENT-MIB", "eventSequenceCounter"), ("NETI-EVENT-MIB", "eventLogLastChangedTime"), ("NETI-EVENT-MIB", "eventIndex"), ("NETI-EVENT-MIB", "eventObject"), ("NETI-EVENT-MIB", "eventObjectName"), ("NETI-EVENT-MIB", "eventAlarmType"), ("NETI-EVENT-MIB", "eventType"), ("NETI-EVENT-MIB", "eventCause"), ("NETI-EVENT-MIB", "eventSeverity"), ("NETI-EVENT-MIB", "eventText"), ("NETI-EVENT-MIB", "eventCreatedTime"), ("NETI-EVENT-MIB", "eventAlarmIndex"), ("NETI-EVENT-MIB", "eventAlarmObject"), ("NETI-EVENT-MIB", "eventAlarmObjectName"), ("NETI-EVENT-MIB", "eventAlarmAlarmType"), ("NETI-EVENT-MIB", "eventAlarmCause"), ("NETI-EVENT-MIB", "eventAlarmSeverity"), ("NETI-EVENT-MIB", "eventAlarmText"), ("NETI-EVENT-MIB", "eventAlarmLastChangedTime"), ("NETI-EVENT-MIB", "eventAlarmAcknowledged"), ("NETI-EVENT-MIB", "eventAlarmCreatedTime"), ("NETI-EVENT-MIB", "eventActiveAlarmIndex"), ("NETI-EVENT-MIB", "eventActiveAlarmObject"), ("NETI-EVENT-MIB", "eventActiveAlarmObjectName"), ("NETI-EVENT-MIB", "eventActiveAlarmAlarmType"), ("NETI-EVENT-MIB", "eventActiveAlarmCause"), ("NETI-EVENT-MIB", "eventActiveAlarmSeverity"), ("NETI-EVENT-MIB", "eventActiveAlarmText"), ("NETI-EVENT-MIB", "eventActiveAlarmLastChangedTime"), ("NETI-EVENT-MIB", "eventActiveAlarmAcknowledged"), ("NETI-EVENT-MIB", "eventActiveAlarmCreatedTime"), ("NETI-EVENT-MIB", "eventCriticalCounter"), ("NETI-EVENT-MIB", "eventMajorCounter"), ("NETI-EVENT-MIB", "eventMinorCounter"), ("NETI-EVENT-MIB", "eventWarningCounter"), ("NETI-EVENT-MIB", "eventIndeterminateCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventConformanceGroup = eventConformanceGroup.setStatus('current')
if mibBuilder.loadTexts: eventConformanceGroup.setDescription('A collection of objects providing event and alarm functionality.')
eventNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2928, 2, 1, 3, 2)).setObjects(("NETI-EVENT-MIB", "eventAlarmCritical"), ("NETI-EVENT-MIB", "eventAlarmMajor"), ("NETI-EVENT-MIB", "eventAlarmMinor"), ("NETI-EVENT-MIB", "eventAlarmWarning"), ("NETI-EVENT-MIB", "eventAlarmIndeterminate"), ("NETI-EVENT-MIB", "eventAlarmUnknown"), ("NETI-EVENT-MIB", "eventAlarmClear"), ("NETI-EVENT-MIB", "netiGenericEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventNotificationsGroup = eventNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: eventNotificationsGroup.setDescription('A collection of notifications for alarms and events.')
mibBuilder.exportSymbols("NETI-EVENT-MIB", eventAlarmIndex=eventAlarmIndex, eventActiveAlarmCause=eventActiveAlarmCause, eventMajorCounter=eventMajorCounter, eventActiveAlarmAcknowledged=eventActiveAlarmAcknowledged, eventTrapPurpose=eventTrapPurpose, eventActiveAlarmIndex=eventActiveAlarmIndex, eventAlarmMajor=eventAlarmMajor, eventAlarmEntry=eventAlarmEntry, eventActiveAlarmText=eventActiveAlarmText, eventType=eventType, eventConformanceGroups=eventConformanceGroups, eventConformanceGroup=eventConformanceGroup, eventActiveAlarmAlarmType=eventActiveAlarmAlarmType, eventAlarmObjectName=eventAlarmObjectName, eventObjectName=eventObjectName, eventAlarmText=eventAlarmText, eventActiveAlarmObjectName=eventActiveAlarmObjectName, eventAlarmCause=eventAlarmCause, eventAlarmUnknown=eventAlarmUnknown, eventText=eventText, eventActiveAlarmTable=eventActiveAlarmTable, EventType=EventType, eventAlarmLastChangedTime=eventAlarmLastChangedTime, eventAlarmType=eventAlarmType, eventActiveAlarmCreatedTime=eventActiveAlarmCreatedTime, eventObjects=eventObjects, eventAlarmAcknowledged=eventAlarmAcknowledged, eventActiveAlarmEntry=eventActiveAlarmEntry, eventAlarmTable=eventAlarmTable, eventAlarmCreatedTime=eventAlarmCreatedTime, eventAlarmWarning=eventAlarmWarning, eventIndeterminateCounter=eventIndeterminateCounter, eventEntry=eventEntry, AlarmSeverity=AlarmSeverity, eventObject=eventObject, eventSeverity=eventSeverity, eventAlarmAlarmType=eventAlarmAlarmType, eventAlarmIndeterminate=eventAlarmIndeterminate, eventAlarmClear=eventAlarmClear, eventNotificationsGroup=eventNotificationsGroup, PYSNMP_MODULE_ID=netiEventMIB, eventNotificationObjectsGroup=eventNotificationObjectsGroup, eventActiveAlarmObject=eventActiveAlarmObject, eventWarningCounter=eventWarningCounter, eventCriticalCounter=eventCriticalCounter, eventCreatedTime=eventCreatedTime, netiGenericEvent=netiGenericEvent, eventSequenceCounter=eventSequenceCounter, eventIndex=eventIndex, eventCause=eventCause, eventTable=eventTable, AlarmCause=AlarmCause, eventAlarmSeverity=eventAlarmSeverity, AlarmType=AlarmType, eventActiveAlarmLastChangedTime=eventActiveAlarmLastChangedTime, netiEventMIB=netiEventMIB, eventAlarmCritical=eventAlarmCritical, eventMinorCounter=eventMinorCounter, eventNotifications=eventNotifications, eventAlarmMinor=eventAlarmMinor, eventAlarmCountersGroup=eventAlarmCountersGroup, eventAlarmObject=eventAlarmObject, eventActiveAlarmSeverity=eventActiveAlarmSeverity, eventLogLastChangedTime=eventLogLastChangedTime)
