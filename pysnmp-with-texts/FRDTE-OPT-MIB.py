#
# PySNMP MIB module FRDTE-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRDTE-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, MibIdentifier, Bits, ModuleIdentity, Gauge32, Integer32, enterprises, Counter64, Counter32, ObjectIdentity, Unsigned32, iso, mgmt, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "Gauge32", "Integer32", "enterprises", "Counter64", "Counter32", "ObjectIdentity", "Unsigned32", "iso", "mgmt", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PCTFRDTEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5), )
if mibBuilder.loadTexts: cdx6500PCTFRDTEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PCTFRDTEPortTable.setDescription('All of the configuration parameters relevant to the Frame Relay DTE Port table.')
cdx6500PCTFRDTEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtepCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PCTFRDTEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PCTFRDTEPortEntry.setDescription('A row of FRI Port configuration parameters.')
cdx6500frdtepCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepCfgPortNum.setDescription('Specifies the Port number for the Frame Relay Interface port you are selecting.')
cdx6500frdtepConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 21, 100))).clone(namedValues=NamedValues(("simp", 1), ("dtr", 2), ("simpb", 21), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepConnectionType.setDescription('Specify the control signal handshake and clocking required for a connection to be made to this port: simp - simple, no control signals required dtr - dedicated, require the data terminal ready signal (DTR) simpb - simple, no control signals required for data transmission and reception. By default output leads will be low. nc - Skipped during configuration.')
cdx6500frdtepClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("int", 1), ("ext", 2), ("extint", 3), ("extlp", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepClockSource.setDescription('int - internal clock source ext - external clock source extint - Internal receive and external transmit clock source (DCE only). extlp - external receive and loopback transmit clock source (DTE only). EXTLP must be configured in conjunction with EXTINT. nc - Skipped during configuration.')
cdx6500frdtepClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking. The highest available speed is dependent on the card type,and on the interface type.')
cdx6500frdtepMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepMaxStations.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdtepMaxStations.setDescription('This is the highest station number to be configured on this FRI port. It is used to limit the configuration of stations.')
cdx6500frdtepFrameSeqCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("extended", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFrameSeqCounting.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepFrameSeqCounting.setDescription('Port uses normal or extended frame sequence numbering: normal - normal sequencing (modulo 8) ext - extended sequencing (modulo 128) nc - Skipped during configuration. All stations on this port will be set to this value.')
cdx6500frdtepPktSeqCounting = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("extended", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepPktSeqCounting.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepPktSeqCounting.setDescription('Port uses normal or extended packet level sequence numbers normal - normal sequencing (Modulo 8) ext - extended sequencing (Modulo 128) nc - Skipped during configuration. This parameter must be set to the same value at both this FRI port and the remote FRI port. All stations on this port will be set to this value.')
cdx6500frdtepCtrlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("annexD", 1), ("none", 2), ("lmi", 3), ("annexA", 4), ("auto", 5), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepCtrlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepCtrlProtocol.setDescription('Whether ANSI T1.617 Annex D or LMI Support is enabled none - None is enabled. annexD - Annex D is enabled lmi - LMI is enabled. annexA - Annex A is enabled. auto - Auto-learn the Network control protocol type nc - Skipped during configuration.')
cdx6500frdtepT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepT391.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepT391.setDescription('This parameter is the Link Integrity Verification Timer polling period. The FRI port sends status enquiry messages to network every T391/nT1 seconds.')
cdx6500frdtepT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepT392.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepT392.setDescription('This parameter is the polling Cycle Verification Timer period. The FRI port expects status enquiry messages every T392/nT2 seconds. This parameter must be set to a value greater than N391/nT1, and applies only in bi-directional mode.')
cdx6500frdtepN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepN391.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepN391.setDescription('Full Status polling cycle. FRI port sends Full status enquiry messages to network every nN1 polls.')
cdx6500frdtepN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepN392.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepN392.setDescription('Error inactivity threshold. Number of errors during NN3 events that cause the station to be declared inactive. Should be less than or equal to nN3.')
cdx6500frdtepN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepN393.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepN393.setDescription('Monitored events count for measuring nN3. nN2 errors during nN3 events will cause the station to be declared inactive. Should be greater than nN3.')
cdx6500frdtepNT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepNT1.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepNT1.setDescription('This parameter is the Link Integrity Verification Timer polling period. The FRI port sends status enquiry messages to network every T391/nT1 seconds.')
cdx6500frdtepNT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepNT2.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepNT2.setDescription('This parameter is the polling Cycle Verification Timer period. The FRI port expects status enquiry messages every T392/nT2 seconds. This parameter must be set to a value greater than N391/nT1, and applies only in bi-directional mode.')
cdx6500frdtepNN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepNN1.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepNN1.setDescription('Full Status polling cycle. FRI port sends Full status enquiry messages to network every nN1 polls.')
cdx6500frdtepNN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepNN2.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepNN2.setDescription('Error inactivity threshold. Number of errors during NN3 events that cause the station to be declared inactive. Should be less than or equal to nN3.')
cdx6500frdtepNN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepNN3.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepNN3.setDescription('Monitored events count for measuring nN3. nN2 errors during nN3 events will cause the station to be declared inactive. Should be greater than nN3.')
cdx6500frdtepHighPriorityStn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepHighPriorityStn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepHighPriorityStn.setDescription("This parameter specifies a station who's PVC status has priority over all other stations when FRI same port back up is enabled. When the network reports this DLCI inactive, an alternate connection over a backup link is attempted.")
cdx6500frdtepMaxVoiceBWBitsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepMaxVoiceBWBitsPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepMaxVoiceBWBitsPerSec.setDescription('This parameter limits the bandwidth, in bits per sec (including overhead), for voice traffic passing through this frame relay port. A zero value disables any voice passing through this port.')
cdx6500frdtepSegSizeVoicePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257, 513, 1025, 100))).clone(namedValues=NamedValues(("segSize32", 33), ("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepSegSizeVoicePresent.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepSegSizeVoicePresent.setDescription('Data packets to be segmented into this maximum frame size when voice is active on this port. segSize32 - 32 byte segments segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments nc - Skipped during configuration.')
cdx6500frdtepSegSizeVoiceNotPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(33, 65, 129, 257, 513, 1025, 2049, 4097, 32000, 100))).clone(namedValues=NamedValues(("segSize32", 33), ("segSize64", 65), ("segSize128", 129), ("segSize256", 257), ("segSize512", 513), ("segSize1024", 1025), ("segSize2048", 2049), ("segSize4096", 4097), ("disable", 32000), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepSegSizeVoiceNotPresent.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepSegSizeVoiceNotPresent.setDescription('Data packets to be segmented into this maximum frame size when voice is not active on this port. segSize32 - 32 byte segments segSize64 - 64 byte segments segSize128 - 128 byte segments segSize256 - 256 byte segments segSize512 - 512 byte segments segSize1024 - 1024 byte segments segSize2048 - 2048 byte segments segSize4096 - 4096 byte segments disable - segment size is 32768 bytes nc - Skipped during configuration.')
cdx6500frdtepInvertTXClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepInvertTXClock.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepInvertTXClock.setDescription("This parameter specifies whether the phase of the transmit clock should be inverted. Note: This parameter is primarily for X.21 electrical interfaces. no - Don't invert. yes - Invert.")
cdx6500frdtepControlProtocolOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepControlProtocolOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepControlProtocolOptions.setDescription('These options control the PVC management protocol none - No option selected async - The port will send/receive asynchronous A-bit if it is performing Network side protocol functionality nbit - The port will send and accept N-bit messages dbit - The port will send and accept D-bit messages This forces ASYNC to be specified (dbit+async)')
cdx6500frdtepDiscardControlOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("debit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepDiscardControlOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepDiscardControlOptions.setDescription('This parameter controls the discard frame options none - No option selected debit - DE marked frames are discarded before non-DE frames')
cdx6500frdtepElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500frdtepV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500frdtepHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtepHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPSTFRDTEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5), )
if mibBuilder.loadTexts: cdx6500PPSTFRDTEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRDTEPortTable.setDescription('All of the statistics parameters relevant to the Frame Relay DTE Port table.')
cdx6500PPSTFRDTEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtepStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTFRDTEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRDTEPortEntry.setDescription('A row of Frame Relay DTE Port statistics parameters.')
cdx6500frdtepStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepStatsPortNum.setDescription('Specifies a specific port in the network diagram.')
cdx6500frdtepPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("busyOut", 3), ("up", 4), ("down", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepPortStatus.setDescription('Specifies the current port status. disabled - Port has been disabled. enabled - Port is operational. busyOut - Port has been busied out. up - Port is operational. down - Port is down. na - Value not Available.')
cdx6500frdtepPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepPortSpeed.setDescription('Message transmition speed in bps.')
cdx6500frdtepUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepUtilizationIn.setDescription('Factor determined by comparison of volume (characters per second) of data and clock rate for a specific port.')
cdx6500frdtepUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepUtilizationOut.setDescription('Factor determined by comparison of volume (characters per second) of data and clock rate for a specific port.')
cdx6500frdtepCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepCharInTotal.setDescription('Number of characters received since last boot or statistics reset.')
cdx6500frdtepCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepCharOutTotal.setDescription('Number of characters transmitted since last boot or statistics reset.')
cdx6500frdtepCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepCharsInPerSec.setDescription('Average number of characters received per second.')
cdx6500frdtepCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepCharsOutPerSec.setDescription('Average number of characters transmitted per second.')
cdx6500frdtepFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepFrameInTotal.setDescription('Number of frames received since last boot or statistics reset.')
cdx6500frdtepFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepFrameOutTotal.setDescription('Number of frames transmitted since last boot or statistics reset.')
cdx6500frdtepFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepFramesInPerSec.setDescription('Average number of frames received per second.')
cdx6500frdtepFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepFramesOutPerSec.setDescription('Average number of frames transmitted per second.')
cdx6500frdtepOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepOverrunErrors.setDescription('An input buffer overflowed and characters were discarded.')
cdx6500frdtepUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 15), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepUnderrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepUnderrunErrors.setDescription('Number of errors detected since last node boot or reset of statistics.')
cdx6500frdtepCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 5, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtepCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtepCRCErrors.setDescription('Number of errors detected by Cyclic Redundancy Check since last node boot reset of statistics.')
cdx6500SPCTFRDTEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: cdx6500SPCTFRDTEStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTFRDTEStationTable.setDescription('All of the configuration parameters relevant to the Frame Relay DTE Station table.')
cdx6500SPCTFRDTEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtesCfgPortNum"), (0, "FRDTE-OPT-MIB", "cdx6500frdtesCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTFRDTEStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTFRDTEStationEntry.setDescription('A row of Frame Realy DTE station configuration parameters.')
cdx6500frdtesCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCfgPortNum.setDescription('FR DTE Port number.')
cdx6500frdtesCfgDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCfgDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCfgDLCI.setDescription('The Data Link Connection Identifier (dlci) is the unique identifier for the station on the FRI Port. Its valid range is 16 - 1007. It must match the DLCI configured on the FR Networking Node.')
cdx6500frdtesStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("annexG", 1), ("bypass", 2), ("voiceRelay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStationType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStationType.setDescription("Identifies the type of station being configured. annexG - This station uses X.25 signaling for layer 3 bypass - This station type bypasses layer 3. There is no signaling for SVC's on this station. voiceRelay - Not used in the current version.")
cdx6500frdtesCommInfoRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCommInfoRate.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCommInfoRate.setDescription('This parameter (CIR) specifies the rate (in bits-per-second) that the Frame Relay network agrees to transfer information under congested conditions for the FRI Station. This value is used to throttle data on the FRI station for congestion control purposes. The CIR cannot be greater than the link speed.')
cdx6500frdtesCommBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCommBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCommBurstSize.setDescription('This parameter (BC) specifies the maximum amount of data (in bits) that the Frame Relay network agrees to transfer over a time interval T = Committed Burst Size / Committed Information Rate. Must be > 1/20th of the Committed Information Rate. This is used for congestion control purposes.')
cdx6500frdtesTransDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesTransDelay.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesTransDelay.setDescription('This parameter is the expected one-way delay through the network. This is specified in milliseconds.')
cdx6500frdtesControlledMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 100))).clone(namedValues=NamedValues(("normal", 1), ("disable", 2), ("congested", 3), ("limit", 4), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesControlledMode.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesControlledMode.setDescription('This parameter controls the method of congestion control: normal - congestion control is normal disable - never enter Congested State (CTRL) congested - never enter a Non-Congested State (UCTRL) limit - congestion control is normal but limits the data rate to no lower than CIR. nc - Skipped during configuration')
cdx6500frdtesLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesLinkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesLinkAddress.setDescription('The logical link address must be set to complementary values in this FRI station and its corresponding remote FRI station: dte - station to have logical DTE address (A) dce - station to have logical DCE address (B) nc - Skipped during configuration.')
cdx6500frdtesPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesPVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPVCChannels.setDescription('Number of logical channels used for Permanent Virtual Circuits. The total number of PVC and SVC channels on a station (logical link) should be kept as small as possible and consistent with needs. PVC connections must be configured in the PVC Table.')
cdx6500frdtesStartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStartingPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStartingPVC.setDescription('This is the starting logical channel number for the Permanent Virtual Circuits on this FRI station. Not used if the number of PVCs = 0.')
cdx6500frdtesSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesSVCChannels.setDescription('Number of logical channels used in Switched Virtual Circuits. The total number of PVC and SVC channels on a station (logical link) should be kept as small as possible and consistent with needs.')
cdx6500frdtesStartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStartingSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStartingSVC.setDescription('This is the starting logical channel number for the Switched Virtual Circuits on this station (logical link). Not used if the number of SVCs = 0.')
cdx6500frdtesInitialFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("sabm", 1), ("disc", 2), ("none", 3), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesInitialFrame.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesInitialFrame.setDescription('Specify the initial frame required by other end for (logical) link startup: none - do nothing (other end initiates link-up) sabm - send SABM disc - send DISC, then SABM nc - Skipped during configuration')
cdx6500frdtesRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesRetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesRetryTimer.setDescription('T1 link retry timer value in tenths of a second (e.g. 30 = 3.0 seconds).')
cdx6500frdtesPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPollTimer.setDescription('This sets the time an idle link is probed for assurance of connection to the remote FRI station. 0 - disable the timer X - X is in tenths of a second (e.g. 40 = 4.0 seconds) and must be set greater than T1.')
cdx6500frdtesTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesTries.setDescription('The maximum number of attempts allowed to complete a transmission.')
cdx6500frdtesFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesFrameWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesFrameWinSize.setDescription('Frame level window size must be set to the same value at both this FRI station and the remote FRI station.')
cdx6500frdtesPacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesPacketWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPacketWinSize.setDescription('Packet level window size must be set to the same value at both this FRI station and the remote FRI station.')
cdx6500frdtesMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9, 10, 11, 100))).clone(namedValues=NamedValues(("psize32", 6), ("psize64", 7), ("psize128", 8), ("psize256", 9), ("psize512", 10), ("psize1024", 11), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesMaxPacketSize.setDescription('This is the maximum X.25 packet size used on the station (logical link). For proper operation, this must be set to the same value at both this FRI station and the remote FRI station. nc - Skipped during configuration. ')
cdx6500frdtesUpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesUpperQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesUpperQueue.setDescription('This is the maximum number of data packets a channel on this station (logical link) will queue for transmission before invoking flow control to the attached channel')
cdx6500frdtesLowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesLowerQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesLowerQueue.setDescription('This is the number of data packets a channel on this FRI station will have queued for transmission when it releases flow control to the attached channel')
cdx6500frdtesRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesRestartTimer.setDescription('Restart-Request timeout timer in seconds. If timer expires on this FRI station, the Restart request is sent again.')
cdx6500frdtesResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesResetTimer.setDescription('Reset-Request timeout timer in seconds. If timer expires on this FRI station, the Reset request is sent again.')
cdx6500frdtesCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCallTimer.setDescription('Call-Request timeout timer in seconds. If timer expires on this FRI station, the call is cleared.')
cdx6500frdtesClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesClearTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesClearTimer.setDescription('Clear-Request timeout timer in seconds. If timer expires on this FRI station, the Clear request is sent again.')
cdx6500frdtesX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesX25Options.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdtesX25Options.setDescription('Select X.25 options on this station (logical link) as follows: NONE - no option specified CUG - check closed user group; otherwise, CUG passes transparently CAUSE - pass cause, diagnostic, code in outbound packets HOLD - hold calls over link restart INL - inter-node link. Link goes to another 6500 device DELAY - Enable Delay and Path Trace on this link (link must be connected to Rel. 4.xx node) Any combination of above specified by summing (e.g. CUG+CAUSE+. . .). NOTE: Please use cdx6500frdtesStnX25Options, which has been added to replace this object.')
cdx6500frdtesRCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesRCDestination.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesRCDestination.setDescription('All calls entering this station will be routed to the destination specified in this parameter, irrespective of route selection table entries. For example, to route all calls to X.25 port 3, use X25-3. To route calls to FRI port 2, station 4, use FRI-2S4. Blank this field to disable this function.')
cdx6500frdtesCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesCUG.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCUG.setDescription('The station may be a member of up to 8 different Closed User Groups (CUGs). Each CUG membership must be a two digit number and separated by a comma. (e.g. 12,34,56,09,02,03 ). Two hyphens following each oher indicates no CUG Membership 00-99 - CUG Membership')
cdx6500frdtesBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesBillingRecords.setDescription('This controls whether billing (accounting) records will be created for calls on this FRI station. off - Billing records will not be created. on - Billing records will be created. nc - Skipped during configuration.')
cdx6500frdtesCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCfgStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCfgStationNum.setDescription('The number of the logical link on the line. This is the value of Sxx for routing purposes.')
cdx6500frdtesStnX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnX25Options.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStnX25Options.setDescription('Select X.25 options on this station (logical link) as follows: NONE - no option specified CUG - check closed user group; otherwise, CUG passes transparently CAUSE - pass cause, diagnostic, code in outbound packets HOLD - hold calls over link restart INL - inter-node link. Link goes to another 6500 device DELAY - Enable Delay and Path Trace on this link (link must be connected to Rel. 4.xx node) Any combination of above specified by summing (e.g. CUG+CAUSE+. . .). NOTE: This object has been added to replace cdx6500frdtesX25Options.')
cdx6500frdtesStnFrameSegmenter = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnFrameSegmenter.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStnFrameSegmenter.setDescription('Determine if this station will support the Frame Segmenter Header.The Frame Segmenter should be enabled if the frame relay port is configured to pass voice traffic. disabled - Frame Segmenter disabled. enabled - Frame Segmenter enabled. nc - Skipped during configuration.')
cdx6500frdtesStnVoiceSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnVoiceSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStnVoiceSVCChannels.setDescription('Number of logical voice channels used in Switched Virtual Circuits.The total number of voice and data channels on a station (logical link) should be kept as small as possible and consistent with needs.')
cdx6500frdtesStnVoiceCongCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnVoiceCongCtrlMode.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStnVoiceCongCtrlMode.setDescription('This parameter controls the method of voice congestion control: enabled - Station is forced into congestion when voice calls are detected. disabled - Station operates normally Use this parameter in voice applications, when the frame relay network can have more than 140ms of data buffered. One typical application is asymmetrical speeds. When this parameter is enabled, and voice is detected, delta T is forced to 50 ms and the BC is forced to 1/20 CIR.')
cdx6500frdtesStnPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnPeakUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStnPeakUtilization.setDescription('The monitoring interval size specifies the time period to use when monitoring peak data link/CIR (Committed Information Rate) utilization. 0 - Disables this monitoring feature. 1 to 240 - The number of 64 second increments to use for the monitoring interval time period. For example: a value of 30 specifies a time duration equal to 30 * 64 seconds = 1920 seconds or 32 minutes.')
cdx6500frdtesStnMaxInboundQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnMaxInboundQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStnMaxInboundQueue.setDescription('This specifies the maximum number of frames from the network which may be queued in a BYPASS station. A smaller value may ve choosen for applications which experience objectable delays, if due to excessive growth of the BYPASS inbound queue.')
cdx6500frdtesStnAnnexGRateReduction = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("nc", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdx6500frdtesStnAnnexGRateReduction.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStnAnnexGRateReduction.setDescription('This parameter determines whether Annex G stations will invoke implicit congestion control when a link error is detected, reducing their transmitted information rate to 1/4 CIR. The rate will be gradually increased in the normal way as non-BECN frames are received.')
cdx6500SPSTFRDTEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2), )
if mibBuilder.loadTexts: cdx6500SPSTFRDTEStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTFRDTEStationTable.setDescription('All of the statistics parameters relevant to the Frame Relay DTE Station (DLCI) table.')
cdx6500SPSTFRDTEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1), ).setIndexNames((0, "FRDTE-OPT-MIB", "cdx6500frdtesStatsPortNum"), (0, "FRDTE-OPT-MIB", "cdx6500frdtesStatsStationNumber"))
if mibBuilder.loadTexts: cdx6500SPSTFRDTEStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTFRDTEStationEntry.setDescription('A row of Frame Relay DTE station (DLCI) Statistics parameters.')
cdx6500frdtesStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStatsPortNum.setDescription('Specifies a specific port in the network diagram.')
cdx6500frdtesStatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesStatsDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStatsDLCI.setDescription('Data Link Connection Identifier is the unique identifier for the station on the FRI port and must match the DLCI configured on the Frame Relay networking node.')
cdx6500frdtesUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesUtilizationIn.setDescription('Indicates the quantity of user bytes sent down the link expressed as a percentage of the maximum number of bytes that could have been sent.')
cdx6500frdtesUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesUtilizationOut.setDescription('Indicates the quantity of user bytes sent down the link expressed as a percentage of the maximum number of bytes that could have been sent.')
cdx6500frdtesMaxSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesMaxSVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesMaxSVCCount.setDescription('Maximum number of SVCs available in the network.')
cdx6500frdtesCurrentSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCurrentSVCCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCurrentSVCCount.setDescription('Current number of SVCs currently in use.')
cdx6500frdtesCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCharInTotal.setDescription('Number of characters received since last node boot or statistics reset.')
cdx6500frdtesCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCharOutTotal.setDescription('Number of characters transmitted since last node boot or statistics reset.')
cdx6500frdtesCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCharsInPerSec.setDescription('Average number of characters received per second.')
cdx6500frdtesCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesCharsOutPerSec.setDescription('Average number of characters transmitted per second.')
cdx6500frdtesPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPktInTotal.setDescription('Number of packets received since last node boot or statistics reset.')
cdx6500frdtesPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPktOutTotal.setDescription('Number of packets transmitted since last node boot or statistics reset.')
cdx6500frdtesPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPktsInPerSec.setDescription('Average number of packets received per second.')
cdx6500frdtesPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPktsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPktsOutPerSec.setDescription('Average number of packets transmitted per second.')
cdx6500frdtesPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesPacketsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesPacketsQueued.setDescription('Current number of packets buffered since last node boot or statistics reset.')
cdx6500frdtesFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesFrameInTotal.setDescription('Number of frames received since last node boot or statistics reset.')
cdx6500frdtesFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesFrameOutTotal.setDescription('Number of frames transmitted since last node boot or statistics reset.')
cdx6500frdtesFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesFramesInPerSec.setDescription('Average number of frames received per second.')
cdx6500frdtesFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesFramesOutPerSec.setDescription('Average number of frames transmitted per second.')
cdx6500frdtesInfoFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesInfoFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesInfoFramesIn.setDescription('Data received since last node boot or statistics reset.')
cdx6500frdtesInfoFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesInfoFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesInfoFramesOut.setDescription('Data transmitted since last node boot or statistics reset.')
cdx6500frdtesRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRNRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesRNRFramesIn.setDescription('Used by the DTE or the network to request that the data flow be stopped on a particular virtual circuit.')
cdx6500frdtesRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRNRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesRNRFramesOut.setDescription('Used by the DTE or the network to request that the data flow be stopped on a particular virtual circuit.')
cdx6500frdtesRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesRRFramesIn.setDescription('Used to clear the RNR request.')
cdx6500frdtesRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesRRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesRRFramesOut.setDescription('Used to clear the RNR request.')
cdx6500frdtesREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesREJFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesREJFramesIn.setDescription('A REJ transmitted by a receiver requests retransmission of a frame, due to detection of a transmission or frame sequence error.')
cdx6500frdtesREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesREJFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesREJFramesOut.setDescription('A REJ transmitted by a receiver requests retransmission of a frame, due to detection of a transmission or frame sequence error.')
cdx6500frdtesDataPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesDataPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesDataPktsIn.setDescription('A packet containing user information.')
cdx6500frdtesDataPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesDataPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesDataPktsOut.setDescription('A packet containing user information.')
cdx6500frdtesResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesResetStats.setDescription('Resets the specified Frame Relay station statistics. reset - Reset station statistics. noReset - Do not reset station statistics.')
cdx6500frdtesBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesBoot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesBoot.setDescription('Boots the specified Frame Relay station. boot - Boot station. noBoot - Do not boot station.')
cdx6500frdtesDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesDisable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesDisable.setDescription('Disables the specified Frame Relay station. disable - Disable station. noDisable - Do not disable station.')
cdx6500frdtesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdtesEnable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesEnable.setDescription('Enables the specified Frame Relay station. enable - Enable station. noEnable - Do not enable station.')
cdx6500frdtesStatsStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdtesStatsStationNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdtesStatsStationNumber.setDescription('The number of the FRI Station.')
mibBuilder.exportSymbols("FRDTE-OPT-MIB", cdx6500frdtesStnVoiceCongCtrlMode=cdx6500frdtesStnVoiceCongCtrlMode, cdx6500frdtesClearTimer=cdx6500frdtesClearTimer, cdx6500frdtesStatsStationNumber=cdx6500frdtesStatsStationNumber, cdx6500frdtesUpperQueue=cdx6500frdtesUpperQueue, cdx6500frdtepInvertTXClock=cdx6500frdtepInvertTXClock, cdx6500frdtepHighPriorityStn=cdx6500frdtepHighPriorityStn, cdx6500frdtepPortSpeed=cdx6500frdtepPortSpeed, cdx6500frdtepNN2=cdx6500frdtepNN2, cdx6500frdtesFrameOutTotal=cdx6500frdtesFrameOutTotal, cdx6500frdtesPVCChannels=cdx6500frdtesPVCChannels, cdx6500frdtesCUG=cdx6500frdtesCUG, cdx6500frdtepCRCErrors=cdx6500frdtepCRCErrors, cdx6500frdtepConnectionType=cdx6500frdtepConnectionType, cdx6500frdtepCtrlProtocol=cdx6500frdtepCtrlProtocol, cdx6500frdtepDiscardControlOptions=cdx6500frdtepDiscardControlOptions, cdx6500frdtepMaxVoiceBWBitsPerSec=cdx6500frdtepMaxVoiceBWBitsPerSec, cdx6500frdtesCommInfoRate=cdx6500frdtesCommInfoRate, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500frdtesCharInTotal=cdx6500frdtesCharInTotal, cdx6500frdtesBillingRecords=cdx6500frdtesBillingRecords, cdx6500frdtesFramesInPerSec=cdx6500frdtesFramesInPerSec, cdx6500frdtesResetStats=cdx6500frdtesResetStats, cdx6500Statistics=cdx6500Statistics, cdx6500frdtesFrameInTotal=cdx6500frdtesFrameInTotal, cdx6500frdtepCfgPortNum=cdx6500frdtepCfgPortNum, cdx6500frdtepFrameInTotal=cdx6500frdtepFrameInTotal, cdx6500frdtepSegSizeVoicePresent=cdx6500frdtepSegSizeVoicePresent, cdx6500frdtesInfoFramesOut=cdx6500frdtesInfoFramesOut, cdx6500PCTFRDTEPortEntry=cdx6500PCTFRDTEPortEntry, cdx6500frdtesFrameWinSize=cdx6500frdtesFrameWinSize, cdx6500frdtesPktOutTotal=cdx6500frdtesPktOutTotal, cdx6500PPSTFRDTEPortTable=cdx6500PPSTFRDTEPortTable, cdx6500frdtesPktInTotal=cdx6500frdtesPktInTotal, cdx6500frdtepFramesOutPerSec=cdx6500frdtepFramesOutPerSec, cdx6500frdtepFrameOutTotal=cdx6500frdtepFrameOutTotal, cdx6500frdtepFramesInPerSec=cdx6500frdtepFramesInPerSec, cdx6500frdtesInitialFrame=cdx6500frdtesInitialFrame, cdx6500frdtesCommBurstSize=cdx6500frdtesCommBurstSize, cdx6500frdtepN392=cdx6500frdtepN392, cdx6500PCTFRDTEPortTable=cdx6500PCTFRDTEPortTable, cdx6500frdtepElectricalInterfaceType=cdx6500frdtepElectricalInterfaceType, cdx6500frdtesStartingPVC=cdx6500frdtesStartingPVC, cdx6500frdtesMaxPacketSize=cdx6500frdtesMaxPacketSize, cdx6500frdtesCharsOutPerSec=cdx6500frdtesCharsOutPerSec, cdx6500frdtepClockSource=cdx6500frdtepClockSource, cdx6500frdtesStnAnnexGRateReduction=cdx6500frdtesStnAnnexGRateReduction, Counter16=Counter16, cdx6500frdtesStartingSVC=cdx6500frdtesStartingSVC, cdx6500frdtesPktsOutPerSec=cdx6500frdtesPktsOutPerSec, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500frdtepNT2=cdx6500frdtepNT2, cdx6500frdtepSegSizeVoiceNotPresent=cdx6500frdtepSegSizeVoiceNotPresent, cdx6500frdtesDataPktsIn=cdx6500frdtesDataPktsIn, cdx6500SPSTFRDTEStationEntry=cdx6500SPSTFRDTEStationEntry, cdx6500frdtesFramesOutPerSec=cdx6500frdtesFramesOutPerSec, cdx6500frdtesRRFramesOut=cdx6500frdtesRRFramesOut, cdx6500frdtepNN1=cdx6500frdtepNN1, cdx6500frdtesStnMaxInboundQueue=cdx6500frdtesStnMaxInboundQueue, cdx6500frdtepStatsPortNum=cdx6500frdtepStatsPortNum, DisplayString=DisplayString, cdx6500frdtesRetryTimer=cdx6500frdtesRetryTimer, cdx6500frdtesCallTimer=cdx6500frdtesCallTimer, cdx6500frdtepPktSeqCounting=cdx6500frdtepPktSeqCounting, cdx6500frdtesControlledMode=cdx6500frdtesControlledMode, cdx6500frdtepClockSpeed=cdx6500frdtepClockSpeed, cdx6500frdtesStnFrameSegmenter=cdx6500frdtesStnFrameSegmenter, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500SPSTFRDTEStationTable=cdx6500SPSTFRDTEStationTable, cdx6500frdtesStnX25Options=cdx6500frdtesStnX25Options, cdx6500frdtepNT1=cdx6500frdtepNT1, cdx6500frdtepNN3=cdx6500frdtepNN3, cdx6500frdtesCharsInPerSec=cdx6500frdtesCharsInPerSec, cdx6500frdtesPacketWinSize=cdx6500frdtesPacketWinSize, cdx6500frdtepHighSpeedElectricalInterfaceOption=cdx6500frdtepHighSpeedElectricalInterfaceOption, cdx6500frdtepMaxStations=cdx6500frdtepMaxStations, cdx6500frdtesEnable=cdx6500frdtesEnable, cdx6500frdtesRNRFramesIn=cdx6500frdtesRNRFramesIn, cdx6500=cdx6500, cdx6500frdtepControlProtocolOptions=cdx6500frdtepControlProtocolOptions, cdx6500frdtesREJFramesIn=cdx6500frdtesREJFramesIn, cdx6500frdtepV24ElectricalInterfaceOption=cdx6500frdtepV24ElectricalInterfaceOption, cdx6500frdtepFrameSeqCounting=cdx6500frdtepFrameSeqCounting, cdx6500frdtesTries=cdx6500frdtesTries, cdx6500Controls=cdx6500Controls, cdx6500frdtesREJFramesOut=cdx6500frdtesREJFramesOut, cdx6500frdtesBoot=cdx6500frdtesBoot, cdx6500frdtepCharsInPerSec=cdx6500frdtepCharsInPerSec, cdx6500frdtesStnVoiceSVCChannels=cdx6500frdtesStnVoiceSVCChannels, cdx6500frdtesUtilizationOut=cdx6500frdtesUtilizationOut, cdx6500frdtesRNRFramesOut=cdx6500frdtesRNRFramesOut, cdx6500SPCTFRDTEStationTable=cdx6500SPCTFRDTEStationTable, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500frdtepT392=cdx6500frdtepT392, cdx6500frdtesTransDelay=cdx6500frdtesTransDelay, cdx6500frdtesInfoFramesIn=cdx6500frdtesInfoFramesIn, cdx6500Configuration=cdx6500Configuration, cdx6500frdtesLinkAddress=cdx6500frdtesLinkAddress, cdx6500frdtesX25Options=cdx6500frdtesX25Options, cdx6500frdtepUnderrunErrors=cdx6500frdtepUnderrunErrors, cdx6500frdtesSVCChannels=cdx6500frdtesSVCChannels, cdx6500frdtesRestartTimer=cdx6500frdtesRestartTimer, cdx6500frdtepT391=cdx6500frdtepT391, cdx6500frdtepPortStatus=cdx6500frdtepPortStatus, cdx6500frdtepCharOutTotal=cdx6500frdtepCharOutTotal, cdx6500frdtesCfgStationNum=cdx6500frdtesCfgStationNum, cdx6500frdtepN393=cdx6500frdtepN393, cdx6500frdtesPktsInPerSec=cdx6500frdtesPktsInPerSec, cdx6500frdtepUtilizationOut=cdx6500frdtepUtilizationOut, cdx6500frdtepCharInTotal=cdx6500frdtepCharInTotal, cdx6500frdtesMaxSVCCount=cdx6500frdtesMaxSVCCount, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500frdtepOverrunErrors=cdx6500frdtepOverrunErrors, cdx6500frdtesUtilizationIn=cdx6500frdtesUtilizationIn, codex=codex, cdx6500frdtepCharsOutPerSec=cdx6500frdtepCharsOutPerSec, cdx6500frdtesStatsDLCI=cdx6500frdtesStatsDLCI, cdx6500SPCTFRDTEStationEntry=cdx6500SPCTFRDTEStationEntry, cdx6500frdtesStnPeakUtilization=cdx6500frdtesStnPeakUtilization, cdx6500frdtesDisable=cdx6500frdtesDisable, cdx6500frdtesPollTimer=cdx6500frdtesPollTimer, cdx6500frdtesCfgDLCI=cdx6500frdtesCfgDLCI, cdx6500frdtesRRFramesIn=cdx6500frdtesRRFramesIn, cdx6500frdtesStationType=cdx6500frdtesStationType, cdx6500frdtepUtilizationIn=cdx6500frdtepUtilizationIn, cdx6500frdtesRCDestination=cdx6500frdtesRCDestination, cdx6500frdtesResetTimer=cdx6500frdtesResetTimer, cdx6500frdtesCharOutTotal=cdx6500frdtesCharOutTotal, cdx6500frdtesDataPktsOut=cdx6500frdtesDataPktsOut, cdx6500frdtesStatsPortNum=cdx6500frdtesStatsPortNum, cdxProductSpecific=cdxProductSpecific, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500frdtesCurrentSVCCount=cdx6500frdtesCurrentSVCCount, cdx6500PPSTFRDTEPortEntry=cdx6500PPSTFRDTEPortEntry, cdx6500frdtesLowerQueue=cdx6500frdtesLowerQueue, cdx6500frdtepN391=cdx6500frdtepN391, cdx6500frdtesPacketsQueued=cdx6500frdtesPacketsQueued, cdx6500frdtesCfgPortNum=cdx6500frdtesCfgPortNum)
