#
# PySNMP MIB module CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
EntPhysicalIndexOrZero, = mibBuilder.importSymbols("CISCO-TC", "EntPhysicalIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ModuleIdentity, Counter32, Unsigned32, iso, Bits, Gauge32, ObjectIdentity, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Unsigned32", "iso", "Bits", "Gauge32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoSbcCallStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 657))
ciscoSbcCallStatsMIB.setRevisions(('2010-09-03 00:00', '2008-08-27 00:00', '2008-05-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSbcCallStatsMIB.setRevisionsDescriptions(('Updated existing tables by adding new fields. Below is the description of changes for each table- 1. The statistics fields introduced in csbCallStatsTable are - csbCallStatsAvailableTranscodeFlows csbCallStatsActiveTranscodeFlows csbCallStatsPeakTranscodeFlows csbCallStatsTotalTranscodeFlows 2. The statistics fields introduced in csbCurrPeriodicStatsTable are - csbCurrPeriodicStatsTranscodedCalls csbCurrPeriodicStatsTransratedCalls csbCurrPeriodicStatsTotalCallUpdateFailure csbCurrPeriodicStatsActiveIpv6Calls csbCurrPeriodicStatsActiveE2EmergencyCalls csbCurrPeriodicStatsImsRxActiveCalls csbCurrPeriodicStatsImsRxCallSetupFaiures csbCurrPeriodicStatsImsRxCallRenagotiationAttempts csbCurrPeriodicStatsImsRxCallRenagotiationFailures csbCurrPeriodicStatsAudioTranscodedCalls csbCurrPeriodicStatsFaxTranscodedCalls csbCurrPeriodicStatsRtpDisallowedFailures csbCurrPeriodicStatsSrtpDisallowedFailures csbCurrPeriodicStatsNonSrtpCalls csbCurrPeriodicStatsSrtpNonIwCalls csbCurrPeriodicStatsSrtpIwCalls csbCurrPeriodicStatsDtmfIw2833Calls csbCurrPeriodicStatsDtmfIwInbandCalls csbCurrPeriodicStatsDtmfIw2833InbandCalls csbCurrPeriodicStatsTotalTapsRequested csbCurrPeriodicStatsTotalTapsSucceeded csbCurrPeriodicStatsCurrentTaps 3. The statistics fields introduced in csbHistoryStatsTable are- csbHistoryStatsTranscodedCalls csbHistoryStatsTransratedCalls csbHistoryStatsTotalCallUpdateFailure csbHistoryStatsActiveIpv6Calls csbHistoryStatsActiveE2EmergencyCalls csbHistoryStatsImsRxActiveCalls csbHistoryStatsImsRxCallSetupFaiures csbHistoryStatsImsRxCallRenagotiationAttempts csbHistoryStatsImsRxCallRenagotiationFailures csbHistoryStatsAudioTranscodedCalls csbHistoryStatsFaxTranscodedCalls csbHistoryStatsRtpDisallowedFailures csbHistoryStatsSrtpDisallowedFailures csbHistoryStatsNonSrtpCalls csbHistoryStatsSrtpNonIwCalls csbHistoryStatsSrtpIwCalls csbHistoryStatsDtmfIw2833Calls csbHistoryStatsDtmfIwInbandCalls csbHistoryStatsDtmfIw2833InbandCalls csbHistoryStatsTotalTapsRequested csbHistoryStatsTotalTapsSucceeded csbHistoryStatsCurrentTaps 4. The statistics field introduced in csbPerFlowStatsTable is- csbPerFlowStatsRTPPktsLost', 'Updated description for following objects csbPerFlowStatsRTCPPktsSent csbPerFlowStatsRTCPPktsRcvd csbPerFlowStatsRTCPPktsLost Deprecated the csbH248StatsTable and replaced it with csbH248StatsRev1Table to correct problem with index.', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: ciscoSbcCallStatsMIB.setLastUpdated('201009030000Z')
if mibBuilder.loadTexts: ciscoSbcCallStatsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSbcCallStatsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: sbc-dev@cisco.com')
if mibBuilder.loadTexts: ciscoSbcCallStatsMIB.setDescription('The main purpose of this MIB is to define the statistics information for Session Border Controller application. The statistics are mainly of two types - Call statistics and Media statistics. The calls can further be categorized as SIP calls and H.248 calls. This MIB categorizes the statistics information into following four types: 1. Global call statistics - Represents the global call related statistics like call rates, media flows, signaling flows etc. 2. Periodic statistics - Represents the SBC call statistics information for a particular time interval like current 5 minutes, previous 5 minutes, current 15 minutes, previous 15 minutes, current hour and previous hour. 3. Per flow statistics - Represents the SBC media flow statistics. These are media statistics for each of the current ongoing call flow. 4. H.248 statistics - Represents the H.248 call related statistics information when H.248 controller is associated with SBC. The Session Border Controller (SBC) enables direct IP-to-IP interconnect between multiple administrative domains for session-based services providing protocol inter-working, security, and admission control and management. The SBC is a voice over IP (VoIP) device that sits on the border of a network and controls call admission to that network. The primary purpose of an SBC is to protect the interior of the network from excessive call load and malicious traffic. Additional functions provided by the SBC include media bridging and billing services. GLOSSARY SBC: Session Border Controller CSB: CISCO Session Border Controller CAC: Call Admission Control - protects voice traffic from the negative effects of other voice traffic and to keep excess voice traffic off the network. It is used to prevent congestion in Voice traffic. It is used in the Call Setup phase. RTP: Real Time Transport Protocol - defines a standardized packet format for delivering audio and video over the Internet. RTCP: Real Time Control Protocol - It is a sister protocol of the Real-time Transport Protocol (RTP). RTCP provides out-of-band control information for an RTP flow. It partners RTP in the delivery and packaging of multimedia data, but does not transport any data itself. It is used periodically to transmit control packets to participants in a streaming multimedia session. VMG: Virtual Media Gateway - introduced to bridge between different transmission technologies and to add service to end-user connections. Its architecture separates control and connectivity functions into physically separate network layers. VPN: Virtual Private Network - It is a communications network tunneled through another network, and dedicated for a specific network. Gate Id - Context Identifiers assigned uniquely to a SIP/H.248 call flows. Flow Pair Id: Stream Identifiers assigned uniquely to a SIP/H.248 call flows. Adjacency: An adjacency contains the system information to be transmitted to next HOP. REFERENCES 1. CISCO Session Border Controller Documents and FAQ http://zed.cisco.com/confluence/display/SBC/SBC')
class CiscoSbcPeriodicStatsInterval(TextualConvention, Integer32):
    description = 'This textual convention represents the interval values for which the periodic stats and history stats are to be displayed. fiveMinute - Interval to display current/previous 5 minutes statistics information. fifteenMinute - Interval to display current/previous 15 minutes statistics information. oneHour - Interval to display current/previous one hour statistics information. oneDay - Interval to display current/previous one day statistics information.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fiveMinute", 1), ("fifteenMinute", 2), ("oneHour", 3), ("oneDay", 4))

ciscoSbcCallStatsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 657, 0))
ciscoSbcCallStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 657, 1))
ciscoSbcCallStatsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 657, 2))
csbCallStatsInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 1), )
if mibBuilder.loadTexts: csbCallStatsInstanceTable.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsInstanceTable.setDescription('The call stats instance table contains the physical index for each of the physical entity (line card, primary, secondary cards). The index of the table is instance index which uniquely identifies the physical entity present on the box.')
csbCallStatsInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 1, 1), ).setIndexNames((0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstanceIndex"))
if mibBuilder.loadTexts: csbCallStatsInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsInstanceEntry.setDescription('A conceptual row in csbCallStatsInstanceTable. There is an entry in this table for each SBC instance, as identified by a value of csbCallStatsInstanceIndex.')
csbCallStatsInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csbCallStatsInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsInstanceIndex.setDescription('This object uniquely identifies the sequence number of an entity or slot that is configured per device. This index is assigned arbitrarily by the engine and is not saved over reboots.')
csbCallStatsInstancePhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 1, 1, 2), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsInstancePhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsInstancePhysicalIndex.setDescription('This object indicates the physical entity for which all the measurements are maintained. The exact type of this entity is described by its entPhysicalVendorType value.')
csbCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2), )
if mibBuilder.loadTexts: csbCallStatsTable.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsTable.setDescription('This table describes the global statistics information in the form of a table which contains call specific information like call rates, media flows, signaling flows etc. The index of the table is service index which corresponds to a particular service configured on the SBC and all the rows of the table represents the global information regarding all the call flows related to that particular service. The other index of this table is csbCallStatsInstanceIndex which is defined in csbCallStatsInstanceTable.')
csbCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1), ).setIndexNames((0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstanceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsServiceIndex"))
if mibBuilder.loadTexts: csbCallStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsEntry.setDescription('An conceptual row in the csbCallStatsGlobalStatsTable. There is an entry in this table for the particular service configured on SBC identified by a value of csbCallStatsInstanceIndex. The other index of this table is csbCallStatsInstanceIndex which is defined in csbCallStatsInstanceTable.')
csbCallStatsServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csbCallStatsServiceIndex.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsServiceIndex.setDescription('This object identifies the index of the name of the SBC service configured. This object also acts as an index for the table.')
csbCallStatsSbcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsSbcName.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsSbcName.setDescription('This object indicates the configured name of the SBC service. The length of this object is zero when value is not assigned to it.')
csbCallStatsCallsHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 3), Unsigned32()).setUnits('calls per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsCallsHigh.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsCallsHigh.setDescription('This object indicates the maximum number of calls per second processed by the Session Border Controller in past 24 hours.')
csbCallStatsRate1Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 4), Gauge32()).setUnits('calls per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRate1Sec.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRate1Sec.setDescription('This object indicates the average calls per second processed by the Session Border Controller.')
csbCallStatsCallsLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 5), Unsigned32()).setUnits('calls per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsCallsLow.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsCallsLow.setDescription('This object indicates the minimum calls per second in past 24 hours.')
csbCallStatsAvailableFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 6), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsAvailableFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsAvailableFlows.setDescription('This object indicates the number of media flows which are available.')
csbCallStatsUsedFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 7), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsUsedFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsUsedFlows.setDescription('This object indicates the number of media flows which are used. This is for the flow allocated and connected. The flow allocated but not connected is not counted.')
csbCallStatsPeakFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 8), Unsigned32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsPeakFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsPeakFlows.setDescription('This object indicates the number of peak flows in SBC. This is the highest recorded value for the active flows since the box was booted/reseted.')
csbCallStatsTotalFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 9), Unsigned32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsTotalFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsTotalFlows.setDescription('This object indicates the total number of media support by this instance of SBC. The total number of flows include the available flows and the active flows. This value is since box was booted/reseted. Total flows include the active flows and the flows allocated but not connected.')
csbCallStatsUsedSigFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 10), Gauge32()).setUnits('signal flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsUsedSigFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsUsedSigFlows.setDescription('This object indicates the number of active signaling flows for signaling pinholes.')
csbCallStatsPeakSigFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 11), Unsigned32()).setUnits('signal flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsPeakSigFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsPeakSigFlows.setDescription('This object indicates the peak signaling flow in SBC. This is the highest recorded value for the active signaling flows. This object is calculated using csbCallStatsUsedFlows.')
csbCallStatsTotalSigFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 12), Unsigned32()).setUnits('signal flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsTotalSigFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsTotalSigFlows.setDescription('This object indicates the maximum number of Signalling Flows that can be supported by this instance of SBC.')
csbCallStatsAvailablePktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 13), Gauge32()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsAvailablePktRate.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsAvailablePktRate.setDescription('This object indicates the remaining capacity that can be supported by SBC.')
csbCallStatsUnclassifiedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 14), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsUnclassifiedPkts.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsUnclassifiedPkts.setDescription('This object indicates the number of unclassified packets processed by SBC.')
csbCallStatsRTPPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRTPPktsSent.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRTPPktsSent.setDescription('This object indicates the total number of RTP packets sent.')
csbCallStatsRTPPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRTPPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRTPPktsRcvd.setDescription('This object indicates the total number of RTP packets received.')
csbCallStatsRTPPktsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 17), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRTPPktsDiscard.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRTPPktsDiscard.setDescription('This object indicates the total number of RTP packets discarded.')
csbCallStatsRTPOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 18), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRTPOctetsSent.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRTPOctetsSent.setDescription('This object indicates the number of RTP octets sent by the SBC.')
csbCallStatsRTPOctetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 19), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRTPOctetsRcvd.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRTPOctetsRcvd.setDescription('This object indicates the number of RTP octets received by the SBC.')
csbCallStatsRTPOctetsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 20), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRTPOctetsDiscard.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRTPOctetsDiscard.setDescription('This object indicates the number of RTP octets discarded by the SBC.')
csbCallStatsNoMediaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 21), Counter32()).setUnits('no media events').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsNoMediaCount.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsNoMediaCount.setDescription('This object indicates the accumulated No media event count.')
csbCallStatsRouteErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 22), Counter32()).setUnits('route error events').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsRouteErrors.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsRouteErrors.setDescription('This object indicates the accumulated route error event count. This counter is for the route error of media stream.')
csbCallStatsAvailableTranscodeFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 23), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsAvailableTranscodeFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsAvailableTranscodeFlows.setDescription('This object indicates the number of additional transcoded flows that this media gateway manager (MGM) entity is currently able to configure.')
csbCallStatsActiveTranscodeFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 24), Gauge32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsActiveTranscodeFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsActiveTranscodeFlows.setDescription('This object indicates the current number of transcoded flows that are actively forwarding media traffic. In this context, a flow is a media stream passing through the device. So a single voice call will be counted only once.')
csbCallStatsPeakTranscodeFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 25), Unsigned32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsPeakTranscodeFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsPeakTranscodeFlows.setDescription('This object indicates the peak number of active transcoded flows since the statistics were last reset. In this context, a flow is a media stream passing through the device, so a single voice call will be counted once.')
csbCallStatsTotalTranscodeFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 2, 1, 26), Unsigned32()).setUnits('flows').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCallStatsTotalTranscodeFlows.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsTotalTranscodeFlows.setDescription('This object indicates the accumulated total number of transcoded flows. This count contains both active flows and flows that were allocated but never connected. In this context, a flow is a media stream passing through the device, so a single voice call will be counted once.')
csbCurrPeriodicStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3), )
if mibBuilder.loadTexts: csbCurrPeriodicStatsTable.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTable.setDescription('This table is used to collect measurement over several different intervals as defined by the csbCurrPeriodicStatsInterval object. When a new interval starts the objects associated with the interval are reset and count up throughout the interval. The index of the table is the interval for which the stats information is to be displayed. The interval values can be 5 min, 15 mins, 1 hour and one day. The other indices of this table are csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable and csbCallStatsServiceIndex defined in csbCallStatsTable. The gauge values are reported as :- 1.If the period being queried is current5mins, this is the value at the instant that the query is issued. 2.Otherwise, for the other intevals, this is an average value during the summary period sampled at 5 minute intervals.')
csbCurrPeriodicStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1), ).setIndexNames((0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstanceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsServiceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsInterval"))
if mibBuilder.loadTexts: csbCurrPeriodicStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsEntry.setDescription('An conceptual row in the csbCurrPeriodicStatsTable. There is an entry in this table for the particular controller by a value of csbH248StatsCtrlrIndex. The other indices of this table are csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable and csbCallStatsServiceIndex defined in csbCallStatsTable.')
csbCurrPeriodicStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 1), CiscoSbcPeriodicStatsInterval())
if mibBuilder.loadTexts: csbCurrPeriodicStatsInterval.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsInterval.setDescription('This object identifies the interval for which the periodic statistics information is to be displayed. The interval values can be 5 min, 15 mins, 1 hour , 1 Day. This object acts as index for the table.')
csbCurrPeriodicStatsActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 2), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveCalls.setDescription('This object indicates the number of calls that have become active during this interval.')
csbCurrPeriodicStatsActivatingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 3), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsActivatingCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsActivatingCalls.setDescription('This object indicates the number of calls that have become activing during this interval.')
csbCurrPeriodicStatsDeactivatingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 4), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsDeactivatingCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsDeactivatingCalls.setDescription('This object indicates the number of calls that have become deactiving during this interval.')
csbCurrPeriodicStatsTotalCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalCallAttempts.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalCallAttempts.setDescription('This object indicates the number of total call attempts during this interval.')
csbCurrPeriodicStatsFailedCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsFailedCallAttempts.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsFailedCallAttempts.setDescription('This object indicates the number of failed call attempts during this interval.')
csbCurrPeriodicStatsCallRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallRoutingFailure.setDescription('This object indicates the number of call setup failures due to routing failures during this interval.')
csbCurrPeriodicStatsCallResourceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallResourceFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallResourceFailure.setDescription('This object indicates the number of call setup failures due to resource failures during this interval.')
csbCurrPeriodicStatsCallMediaFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallMediaFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallMediaFailure.setDescription('This object indicates the number of call setup failures due to media failure during this interval.')
csbCurrPeriodicStatsCallSigFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSigFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSigFailure.setDescription('This object indicates the number of call setup failures due to signaling failure during this interval.')
csbCurrPeriodicStatsActiveCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveCallFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveCallFailure.setDescription('This object indicates the number of active call failures during this interval.')
csbCurrPeriodicStatsCongestionFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCongestionFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCongestionFailure.setDescription('This object indicates the number of call setup failures due to congestion during this interval.')
csbCurrPeriodicStatsCallSetupPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupPolicyFailure.setDescription('This object indicates the number of call setup failures due to policy failure during this interval.')
csbCurrPeriodicStatsCallSetupNAPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupNAPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupNAPolicyFailure.setDescription('This object indicates the number of call setup failures due to NA policy failure during this interval.')
csbCurrPeriodicStatsCallSetupRoutingPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupRoutingPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupRoutingPolicyFailure.setDescription('This object indicates the number of call setup failures due to routing policy failure during this interval.')
csbCurrPeriodicStatsCallSetupCACPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACPolicyFailure.setDescription('This object indicates the number of call setup failures due to CAC policy failure during this interval.')
csbCurrPeriodicStatsCallSetupCACCallLimitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACCallLimitFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACCallLimitFailure.setDescription('This object indicates the number of call setup failures due to CAC call limit during this interval.')
csbCurrPeriodicStatsCallSetupCACRateLimitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACRateLimitFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACRateLimitFailure.setDescription('This object indicates the number of call setup failures due to CAC call rate limit during this interval.')
csbCurrPeriodicStatsCallSetupCACBandwidthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACBandwidthFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACBandwidthFailure.setDescription('This object indicates the number of call setup failures due to CAC bandwidth limit during this interval.')
csbCurrPeriodicStatsCallSetupCACMediaLimitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACMediaLimitFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACMediaLimitFailure.setDescription('This object indicates the number of call setup failures due to CAC media limit during this interval.')
csbCurrPeriodicStatsCallSetupCACMediaUpdateFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACMediaUpdateFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCallSetupCACMediaUpdateFailure.setDescription('This object indicates the number of call update failure due to policy failure during this interval.')
csbCurrPeriodicStatsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsTimestamp.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTimestamp.setDescription('This object indicates the current time at the start of each interval.')
csbCurrPeriodicStatsTranscodedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 23), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsTranscodedCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTranscodedCalls.setDescription('The object indicates the number of transcoded calls that are active during this interval.')
csbCurrPeriodicStatsTransratedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 24), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsTransratedCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTransratedCalls.setDescription('The object indicates the number of transrated calls that are active during this interval.')
csbCurrPeriodicStatsTotalCallUpdateFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 25), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalCallUpdateFailure.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalCallUpdateFailure.setDescription('This object indicates the total number of call update failures during this interval.')
csbCurrPeriodicStatsActiveIpv6Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 26), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveIpv6Calls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveIpv6Calls.setDescription('This Object indicates the number of calls through SBC that use IPv6 signaling. This statistic totals all calls that traverse an IPv6 adjacency on either or both sides of SBC during this interval.')
csbCurrPeriodicStatsActiveEmergencyCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 27), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveEmergencyCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveEmergencyCalls.setDescription('This object indicates the number of calls through SBC that have been identified as emergency calls (by Number Analysis) during this interval.')
csbCurrPeriodicStatsActiveE2EmergencyCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 28), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveE2EmergencyCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsActiveE2EmergencyCalls.setDescription('This object indicates the number of calls through SBC that have been identified as emergency calls (by Number Analysis) and have used the e2 interface to obtain location information for the caller during this interval.')
csbCurrPeriodicStatsImsRxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 29), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxActiveCalls.setDescription('This object indicates the total number of active calls which use IMS Rx, during this interval.')
csbCurrPeriodicStatsImsRxCallSetupFaiures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 30), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxCallSetupFaiures.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxCallSetupFaiures.setDescription('This object indicates the total call Setup failures owing to IMS Rx failure during this interval.')
csbCurrPeriodicStatsImsRxCallRenegotiationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 31), Gauge32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxCallRenegotiationAttempts.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxCallRenegotiationAttempts.setDescription('This object indicates the total call renegotiation attempts using IMS Rx during this interval.')
csbCurrPeriodicStatsImsRxCallRenegotiationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 32), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxCallRenegotiationFailures.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsImsRxCallRenegotiationFailures.setDescription('This object indicates the total call renegotiation failures owing to IMS Rx failure during this interval.')
csbCurrPeriodicStatsAudioTranscodedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 33), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsAudioTranscodedCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsAudioTranscodedCalls.setDescription('The number of active audio transcoded calls through this adjacency or account during this interval.')
csbCurrPeriodicStatsFaxTranscodedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 34), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsFaxTranscodedCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsFaxTranscodedCalls.setDescription('This object indicates the the number of active fax transcoded calls through this adjacency or account during this interval.')
csbCurrPeriodicStatsRtpDisallowedFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 35), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsRtpDisallowedFailures.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsRtpDisallowedFailures.setDescription('This object indicates the total call setup failures due to RTP being proposed when not permitted during this interval.')
csbCurrPeriodicStatsSrtpDisallowedFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 36), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsSrtpDisallowedFailures.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsSrtpDisallowedFailures.setDescription('This object indicates the total call setup failures due to SRTP being proposed when not permitted during this interval.')
csbCurrPeriodicStatsNonSrtpCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 37), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsNonSrtpCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsNonSrtpCalls.setDescription('This object indicates the number of active calls through this adjacency or account which do not use SRTP on any media channels during this interval.')
csbCurrPeriodicStatsSrtpNonIwCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 38), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsSrtpNonIwCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsSrtpNonIwCalls.setDescription('This object indicates the number of active calls through this adjacency or account that have one or more media channels which use SRTP. This count does not include media channels that provide interworking between RTP and SRTP during this interval.')
csbCurrPeriodicStatsSrtpIwCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 39), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsSrtpIwCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsSrtpIwCalls.setDescription('This object indicates the number of active calls through this adjacency or account that have one or more media channels that provide interworking between RTP and SRTP during this interval.')
csbCurrPeriodicStatsDtmfIw2833Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 40), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsDtmfIw2833Calls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsDtmfIw2833Calls.setDescription('This object indicates the number of active calls through this adjacency or account for which DTMF interworking is enabled between DTMF in signaling and DTMF in media via RFC 2833 during this interval.')
csbCurrPeriodicStatsDtmfIwInbandCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 41), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsDtmfIwInbandCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsDtmfIwInbandCalls.setDescription('This object indicates the number of active calls through this adjacency or account for which DTMF interworking is enabled between DTMF in signaling and DTMF in media via inband DTMF tones during this interval.')
csbCurrPeriodicStatsDtmfIw2833InbandCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 42), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsDtmfIw2833InbandCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsDtmfIw2833InbandCalls.setDescription('This object indicates the number of active calls through this adjacency or account for which DTMF interworking is enabled between DTMF in media via RFC 2833 and DTMF in media via inband DTMF tones during this interval.')
csbCurrPeriodicStatsTotalTapsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 43), Gauge32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalTapsRequested.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalTapsRequested.setDescription('This object indicates the lawful intercept tap attempts requested within the scope of this query during this interval.')
csbCurrPeriodicStatsTotalTapsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 44), Gauge32()).setUnits('success').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalTapsSucceeded.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsTotalTapsSucceeded.setDescription('This object indicates the lawful intercept tap attempts that have been successfully implemented within the scope of this query during this interval.')
csbCurrPeriodicStatsCurrentTaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 45), Gauge32()).setUnits('taps').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicStatsCurrentTaps.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsCurrentTaps.setDescription('This object indicates the Lawful intercept taps currently in place on calls within the scope of this query during this interval.')
csbCurrPeriodicIpsecCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 3, 1, 46), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbCurrPeriodicIpsecCalls.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicIpsecCalls.setDescription('The number of active calls on this adjacency or account which are to or from registered subscribers using IPSEC during this interval.')
csbHistoryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4), )
if mibBuilder.loadTexts: csbHistoryStatsTable.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsTable.setDescription('This table provide historical measurement in various interval length defined by the csbHistoryStatsInterval object. Each interval may contain one or more entries to allow for detailed measurment to be collected. It is up to the platform to determine the number of intervals to be supported like 5 minutes, 15 minutes, 1 hour and 1 day. In addition, the number of historical entries is also determined by the platform resources. The gauge values are reported as: If the period being queried is previous5mins, this is the number of calls that were active at the end of the previous 5 minute period. Otherwise for the other intevals, this is an average value during the summary period, sampled at 5 minute intervals.')
csbHistoryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1), ).setIndexNames((0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstanceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsServiceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsInterval"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsElements"))
if mibBuilder.loadTexts: csbHistoryStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsEntry.setDescription('A conceptual row in the csbHistoryStatsTable. The entries in this table are updated as interval completes in the csbCurrPeriodicStatsTable table and the data is moved from that table to this one.')
csbHistoryStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 1), CiscoSbcPeriodicStatsInterval())
if mibBuilder.loadTexts: csbHistoryStatsInterval.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsInterval.setDescription('This object identifies the interval for which the history statistics information is to be displayed. The interval values can be 5 min, 15 mins, 1 hour , 1 day. This object acts as index for the table.')
csbHistoryStatsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csbHistoryStatsElements.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsElements.setDescription('The platform assigns a number starting with one and increments it each for each new row. When the maximum number of row is reached the oldest rows are deleted. It is up to the platform to determine the number of entries for each interval. It is recommended that each platform support at least one entry for 5 min, 15 mins, 1 hour and 1 day intervals.')
csbHistoryStatsActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 3), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsActiveCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsActiveCalls.setDescription('This object indicates the number of active calls history during this interval.')
csbHistoryStatsTotalCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsTotalCallAttempts.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsTotalCallAttempts.setDescription('This object indicates the number of total call attempts history during this interval.')
csbHistoryStatsFailedCallAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsFailedCallAttempts.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsFailedCallAttempts.setDescription('This object indicates the number of failed call attempts during this interval.')
csbHistoryStatsCallRoutingFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallRoutingFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallRoutingFailure.setDescription('This object indicates the number of call setup failures due to routing failures during this interval.')
csbHistoryStatsCallResourceFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallResourceFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallResourceFailure.setDescription('This object indicates the number of call setup failures due to resource failures during this interval.')
csbHistoryStatsCallMediaFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallMediaFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallMediaFailure.setDescription('This object indicates the number of call setup failures due to media failure during this interval.')
csbHistoryStatsFailSigFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsFailSigFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsFailSigFailure.setDescription('This object indicates the number of call setup failures due to signaling failure during this interval.')
csbHistoryStatsActiveCallFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsActiveCallFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsActiveCallFailure.setDescription('This object indicates the number of active call failures during this interval.')
csbHistoryStatsCongestionFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCongestionFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCongestionFailure.setDescription('This object indicates the number of call setup failures due to congestion during this interval.')
csbHistoryStatsCallSetupPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupPolicyFailure.setDescription('This object indicates the number of call setup failures due to some policy violations during this interval.')
csbHistoryStatsCallSetupNAPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupNAPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupNAPolicyFailure.setDescription('This object indicates the number of call setup failures due to NA policy failure during this interval.')
csbHistoryStatsCallSetupRoutingPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupRoutingPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupRoutingPolicyFailure.setDescription('This object indicates the number of call setup failures due to routing policy failure during this interval.')
csbHistoryStatsCallSetupCACPolicyFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACPolicyFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACPolicyFailure.setDescription('This object indicates the number of call setup failures due to CAC policy failure during this interval.')
csbHistoryStatsCallSetupCACCallLimitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACCallLimitFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACCallLimitFailure.setDescription('This object indicates the number of call setup failures due to CAC call limit during this interval.')
csbHistoryStatsCallSetupCACRateLimitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACRateLimitFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACRateLimitFailure.setDescription('This object indicates the number of call setup failures due to CAC call rate limit during this interval.')
csbHistoryStatsCallSetupCACBandwidthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACBandwidthFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACBandwidthFailure.setDescription('This object indicates the number of call setup failures due to CAC bandwidth limit during this interval.')
csbHistoryStatsCallSetupCACMediaLimitFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACMediaLimitFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACMediaLimitFailure.setDescription('This object indicates the number of call setup failures due to CAC media limit during this interval.')
csbHistoryStatsCallSetupCACMediaUpdateFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACMediaUpdateFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCallSetupCACMediaUpdateFailure.setDescription('This object indicates the number of call update failure due to policy failure during this interval.')
csbHistoryStatsTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsTimestamp.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsTimestamp.setDescription('This object indicates the time at the start of the interval when measurements were first collected for this interval in the csbCurrPeriodicStatsTable.')
csbHistroyStatsTranscodedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 22), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistroyStatsTranscodedCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistroyStatsTranscodedCalls.setDescription('The object indicates the number of active transcoded calls during this interval.')
csbHistroyStatsTransratedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 23), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistroyStatsTransratedCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistroyStatsTransratedCalls.setDescription('The object indicates the number of active transrated calls during this interval.')
csbHistoryStatsTotalCallUpdateFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 24), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsTotalCallUpdateFailure.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsTotalCallUpdateFailure.setDescription('This object indicates the total call update failures during this interval.')
csbHistoryStatsActiveIpv6Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 25), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsActiveIpv6Calls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsActiveIpv6Calls.setDescription('This Object indicates the number of calls through SBC that use IPv6 signaling. This statistic totals all calls that traverse an IPv6 adjacency on either or both sides of SBC during this interval.')
csbHistoryStatsActiveEmergencyCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 26), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsActiveEmergencyCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsActiveEmergencyCalls.setDescription('This object indicates the number of calls through SBC that have been identified as emergency calls (by Number Analysis) during this interval.')
csbHistoryStatsActiveE2EmergencyCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 27), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsActiveE2EmergencyCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsActiveE2EmergencyCalls.setDescription('This object indicates the number of calls through SBC that have been identified as emergency calls (by Number Analysis) and have used the e2 interface to obtain location information for the caller.')
csbHistoryStatsImsRxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 28), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsImsRxActiveCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsImsRxActiveCalls.setDescription('This object indicates the total number of active calls which use IMS Rx, during this interval.')
csbHistoryStatsImsRxCallSetupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 29), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsImsRxCallSetupFailures.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsImsRxCallSetupFailures.setDescription('This object indicates the total call setup failures owing to IMS Rx failure during this interval.')
csbHistoryStatsImsRxCallRenegotiationAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 30), Gauge32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsImsRxCallRenegotiationAttempts.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsImsRxCallRenegotiationAttempts.setDescription('This object indicates the total call renegotiation attempts using IMS Rx during this interval.')
csbHistoryStatsImsRxCallRenegotiationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 31), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsImsRxCallRenegotiationFailures.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsImsRxCallRenegotiationFailures.setDescription('This object indicates the total call renegotiation failures owing to IMS Rx failure during this interval.')
csbHistoryStatsAudioTranscodedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 32), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsAudioTranscodedCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsAudioTranscodedCalls.setDescription('The number of active audio transcoded calls through this adjacency or account during this interval.')
csbHistoryStatsFaxTranscodedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 33), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsFaxTranscodedCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsFaxTranscodedCalls.setDescription('This object indicates the the number of active fax transcoded calls through this adjacency or account during this interval.')
csbHistoryStatsRtpDisallowedFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 34), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsRtpDisallowedFailures.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsRtpDisallowedFailures.setDescription('This object indicates the total call setup failures due to RTP being proposed when not permitted during this interval.')
csbHistoryStatsSrtpDisallowedFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 35), Gauge32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsSrtpDisallowedFailures.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsSrtpDisallowedFailures.setDescription('This object indicates the total call setup failures due to SRTP being proposed when not permitted during this interval.')
csbHistoryStatsNonSrtpCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 36), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsNonSrtpCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsNonSrtpCalls.setDescription('This object indicates the number of active calls through this adjacency or account which do not use SRTP on any media channels during this interval.')
csbHistoryStatsSrtpNonIwCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 37), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsSrtpNonIwCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsSrtpNonIwCalls.setDescription('This object indicates the number of active calls through this adjacency or account that have one or more media channels that use SRTP but no media channels that provide interworking between RTP and SRTP during this interval.')
csbHistoryStatsSrtpIwCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 38), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsSrtpIwCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsSrtpIwCalls.setDescription('This object indicates the number of active calls through this adjacency or account that have one or more media channels that provide interworking between RTP and SRTP during this interval.')
csbHistoryStatsDtmfIw2833Calls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 39), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsDtmfIw2833Calls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsDtmfIw2833Calls.setDescription('This object indicates the number of active calls through this adjacency or account for which DTMF interworking is enabled between DTMF in signaling and DTMF in media via RFC 2833 during this interval.')
csbHistoryStatsDtmfIwInbandCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 40), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsDtmfIwInbandCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsDtmfIwInbandCalls.setDescription('This object indicates the number of active calls through this adjacency or account for which DTMF interworking is enabled between DTMF in signaling and DTMF in media via inband DTMF tones during this interval.')
csbHistoryStatsDtmfIw2833InbandCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 41), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsDtmfIw2833InbandCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsDtmfIw2833InbandCalls.setDescription('This object indicates the number of active calls through this adjacency or account for which DTMF interworking is enabled between DTMF in media via RFC 2833 and DTMF in media via inband DTMF tones during this interval.')
csbHistoryStatsTotalTapsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 42), Gauge32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsTotalTapsRequested.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsTotalTapsRequested.setDescription('This object indicates the lawful intercept tap attempts requested within the scope of this query during this interval.')
csbHistoryStatsTotalTapsSucceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 43), Gauge32()).setUnits('success').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsTotalTapsSucceeded.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsTotalTapsSucceeded.setDescription('This object indicates the lawful intercept tap attempts that have been successfully implemented within the scope of this query during this interval.')
csbHistoryStatsCurrentTaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 44), Gauge32()).setUnits('taps').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsCurrentTaps.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsCurrentTaps.setDescription('This object indicates the Lawful intercept taps currently in place on calls within the scope of this query during this interval.')
csbHistoryStatsIpsecCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 4, 1, 45), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbHistoryStatsIpsecCalls.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsIpsecCalls.setDescription('The number of active calls on this adjacency or account which are to or from registered subscribers using IPSEC during this interval.')
csbPerFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5), )
if mibBuilder.loadTexts: csbPerFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsTable.setDescription('This table describes statistics table for each call flow. The indices of the table are virtual media gateway id, gate id, falow pair id and side id (indices for side A or side B). The other indices of this table are csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable and csbCallStatsServiceIndex defined in csbCallStatsTable.')
csbPerFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1), ).setIndexNames((0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstanceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsServiceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsVdbeId"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsGateId"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsFlowPairId"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsSideId"))
if mibBuilder.loadTexts: csbPerFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsEntry.setDescription('An conceptual row in the csbPerFlowStatsTable. There is an entry in this table for vdbe Id, gate id, flow pair id and side id. The other indices of this table are csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable and csbCallStatsServiceIndex defined in csbCallStatsTable.')
csbPerFlowStatsVdbeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: csbPerFlowStatsVdbeId.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsVdbeId.setDescription('This object identifies the virtual media gateway id. This object also acts as an index for the table.')
csbPerFlowStatsGateId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csbPerFlowStatsGateId.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsGateId.setDescription('This object identifies the gate id. This object also acts as an index for the table.')
csbPerFlowStatsFlowPairId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csbPerFlowStatsFlowPairId.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsFlowPairId.setDescription('This object identifies the flow pair id. This object also acts as an index for the table.')
csbPerFlowStatsSideId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sideA", 1), ("sideB", 2))))
if mibBuilder.loadTexts: csbPerFlowStatsSideId.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsSideId.setDescription('This object identifies the index corresponding to side of flow pair either side A or side B. This object also acts as an index for the table.')
csbPerFlowStatsFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("media", 1), ("signalling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsFlowType.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsFlowType.setDescription('This object indicates the type of the flow, like media flow, signaling flow etc.')
csbPerFlowStatsRTPPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsSent.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsSent.setDescription('This object indicates the number of RTP packets sent per flow by the SBC.')
csbPerFlowStatsRTPPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsRcvd.setDescription('This object indicates the number of RTP packets received per flow by the SBC.')
csbPerFlowStatsRTPPktsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsDiscard.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsDiscard.setDescription('This object indicates the number of RTP packets discarded per flow by the SBC.')
csbPerFlowStatsRTPOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 9), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTPOctetsSent.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTPOctetsSent.setDescription('This object indicates the number of RTP octets sent per flow by the SBC.')
csbPerFlowStatsRTPOctetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 10), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTPOctetsRcvd.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTPOctetsRcvd.setDescription('This object indicates the number of RTP octets received per flow by the SBC.')
csbPerFlowStatsRTPOctetsDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 11), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTPOctetsDiscard.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTPOctetsDiscard.setDescription('This object indicates the number of RTP octets discarded per flow by the SBC.')
csbPerFlowStatsRTCPPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTCPPktsSent.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTCPPktsSent.setDescription('The number of RTP packets sent by the remote end point to this MG on this flow. Comparing this with the local number of RTP packets received from the remote end point gives an indication of how many incoming packets were dropped on this leg of the call. This information is from RTCP packet. Not all endpoints report this statistic, if it is not available it will be set to zero. This statistic will not be available for signaling flows.')
csbPerFlowStatsRTCPPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTCPPktsRcvd.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTCPPktsRcvd.setDescription('The number of RTP packets received by the remote end point from this MG on this flow. Comparing this with the local number of RTP packets sent from this MG to the remote endpoint gives an indication of how many outgoing packets were dropped on this leg of the call. This information is from RTCP packet. Not all endpoints report this statistic, if it is not available it will be set to zero. This statistic will not be available for signaling flows.')
csbPerFlowStatsRTCPPktsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 14), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTCPPktsLost.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTCPPktsLost.setDescription('The number of RTP packets reported as lost by the remote end point on this flow. This information is from RTCP packet. Not all endpoints report this statistic, if it is not available it will be set to zero. This statistic will not be available for signaling flows.')
csbPerFlowStatsEPJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 15), Counter64()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsEPJitter.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsEPJitter.setDescription('This object indicates the End Point jitter per flow in the SBC.')
csbPerFlowStatsTmanPerMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 16), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsTmanPerMbs.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsTmanPerMbs.setDescription('This object indicates the maximum burst size for the current FlowPair.')
csbPerFlowStatsTmanPerSdr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 17), Gauge32()).setUnits('kilobytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsTmanPerSdr.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsTmanPerSdr.setDescription('This object indicates the bandwidth reserved for flow in kilobytes/second.')
csbPerFlowStatsDscpSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 18), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsDscpSettings.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsDscpSettings.setDescription('This object indicates the mark packets sent for the current FlowPair with, or zero if none set. The DSCP is a 6-bit value, which will be present in the top 6 bits of the lowest byte of this field.')
csbPerFlowStatsAdrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsAdrStatus.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsAdrStatus.setDescription('This object indicates whether the flow on the current FlowPair has subscribed for the NAT latch event.')
csbPerFlowStatsQASettings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsQASettings.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsQASettings.setDescription('This object indicates the flow on the current FlowPair has subscribed for the media loss event.')
csbPerFlowStatsRTPPktsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 5, 1, 21), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsLost.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsRTPPktsLost.setDescription('This object indicates the number of RTP packets lost per flow by the SBC.')
csbH248StatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6), )
if mibBuilder.loadTexts: csbH248StatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsTable.setDescription('This table describes the H.248 statistics for SBC. The index of the table is service index which corresponds to a particular service configured on the SBC and the index assigned to a particular H.248 controller. The other index of this table is csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable. This table is replaced by the csbH248StatsRev1Table.')
csbH248StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1), ).setIndexNames((0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstanceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsServiceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsCtrlrIndex"))
if mibBuilder.loadTexts: csbH248StatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsEntry.setDescription('An conceptual row in the csbCallStath248Table. There is an entry in this table for the particular controller by a value of csbH248StatsCtrlrIndex. The other indices of this table are csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable and csbCallStatsServiceIndex defined in csbCallStatsTable.')
csbH248StatsCtrlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: csbH248StatsCtrlrIndex.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsCtrlrIndex.setDescription('This object identifies the controller index of the H.248 server. This is also the index for the table.')
csbH248StatsRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsSent.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRequestsSent.setDescription('This object indicates the requests sent through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRequestsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRequestsRcvd.setDescription('This object indicates the requests received through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRequestsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsFailed.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRequestsFailed.setDescription('This object indicates the requests failed on session Controller Interface to an SBE or DBE.')
csbH248StatsRequestsRetried = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsRetried.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRequestsRetried.setDescription('This object indicates the requests retried through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRepliesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRepliesSent.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRepliesSent.setDescription('This object indicates the number of replies sent through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRepliesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRepliesRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRepliesRcvd.setDescription('This object indicates the number of replies received from the Session Controller Interface to an SBE or DBE.')
csbH248StatsRepliesRetried = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRepliesRetried.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRepliesRetried.setDescription('This object indicates the number of replies retried through the Session Controller Interface to an SBE or DBE.')
csbH248StatsSegPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsSegPktsSent.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsSegPktsSent.setDescription('This object indicates the number of packets sent through the Session Controller Interface to an SBE or DBE.')
csbH248StatsSegPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsSegPktsRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsSegPktsRcvd.setDescription('This object indicates the number of packets received from the Session Controller Interface to an SBE or DBE.')
csbH248StatsEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsEstablishedTime.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsEstablishedTime.setDescription('This object indicates the H.248 Controller established time (the time at which the association became established).')
csbH248StatsTMaxTimeoutVal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 12), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsTMaxTimeoutVal.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsTMaxTimeoutVal.setDescription('This object indicates the T-Max timeout value. This field specifies the maximum delay (in milliseconds) for a response from an MGC before deciding that the request has failed.')
csbH248StatsRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 13), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRTT.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsRTT.setDescription('This object indicates the calculated RTT value. This field specifies the maximum round trip propagation delay in the network (in milliseconds).')
csbH248StatsLT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 6, 1, 14), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsLT.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsLT.setDescription('This object indicates the LT value calculated from RTT value and Max timeout value. This field specifies the maximum delay (in milliseconds) for a response from an MGC plus the maximum round trip propagation delay in the network (in milliseconds).')
csbH248StatsRev1Table = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7), )
if mibBuilder.loadTexts: csbH248StatsRev1Table.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRev1Table.setDescription('This table describes the H.248 statistics for SBC. The index of the table is service index which corresponds to a particular service configured on the SBC and the index assigned to a particular H.248 controller. The other index of this table is csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable.')
csbH248StatsRev1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1), ).setIndexNames((0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstanceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsServiceIndex"), (0, "CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsVdbeId"))
if mibBuilder.loadTexts: csbH248StatsRev1Entry.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRev1Entry.setDescription('An conceptual row in the csbCallStath248Table. There is an entry in this table for the particular Vdbe by a value of csbH248StatsVdbeId. The other indices of this table are csbCallStatsInstanceIndex defined in csbCallStatsInstanceTable and csbCallStatsServiceIndex defined in csbCallStatsTable.')
csbH248StatsVdbeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: csbH248StatsVdbeId.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsVdbeId.setDescription('This object identifies the virtual media gateway id. This is also the index for the table.')
csbH248StatsRequestsSentRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsSentRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRequestsSentRev1.setDescription('This object indicates the requests sent through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRequestsRcvdRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsRcvdRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRequestsRcvdRev1.setDescription('This object indicates the requests received through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRequestsFailedRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsFailedRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRequestsFailedRev1.setDescription('This object indicates the requests failed on session Controller Interface to an SBE or DBE.')
csbH248StatsRequestsRetriedRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRequestsRetriedRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRequestsRetriedRev1.setDescription('This object indicates the requests retried through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRepliesSentRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRepliesSentRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRepliesSentRev1.setDescription('This object indicates the number of replies sent through the Session Controller Interface to an SBE or DBE.')
csbH248StatsRepliesRcvdRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRepliesRcvdRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRepliesRcvdRev1.setDescription('This object indicates the number of replies received from the Session Controller Interface to an SBE or DBE.')
csbH248StatsRepliesRetriedRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRepliesRetriedRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRepliesRetriedRev1.setDescription('This object indicates the number of replies retried through the Session Controller Interface to an SBE or DBE.')
csbH248StatsSegPktsSentRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsSegPktsSentRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsSegPktsSentRev1.setDescription('This object indicates the number of response segments sent by DBE. This field will only be present if segmentation is enabled on this association.')
csbH248StatsSegPktsRcvdRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsSegPktsRcvdRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsSegPktsRcvdRev1.setDescription('This object indicates the number of response segments received by DBE. This field will only be present if segmentation is enabled on this association.')
csbH248StatsEstablishedTimeRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsEstablishedTimeRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsEstablishedTimeRev1.setDescription('This object indicates the H.248 Controller established time (the time at which the association became established).')
csbH248StatsTMaxTimeoutValRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 12), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsTMaxTimeoutValRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsTMaxTimeoutValRev1.setDescription('This object indicates the T-Max timeout value. This field specifies the maximum delay (in milliseconds) for a response from an MGC before deciding that the request has failed.')
csbH248StatsRTTRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 13), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsRTTRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsRTTRev1.setDescription('This object indicates the calculated RTT value. This field specifies the maximum round trip propagation delay in the network (in milliseconds).')
csbH248StatsLTRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 657, 1, 7, 1, 14), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: csbH248StatsLTRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsLTRev1.setDescription('This object indicates the LT value calculated from RTT value and Max timeout value. This field specifies the maximum delay (in milliseconds) for a response from an MGC plus the maximum round trip propagation delay in the network (in milliseconds).')
csbCallStatsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 1))
csbCallStatsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2))
csbCallStatsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 1, 1)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbGlobalStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbStatsInstanceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbCallStatsMIBCompliance = csbCallStatsMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: csbCallStatsMIBCompliance.setDescription('This is a default module-compliance containing csbCallStatsMIBGroups.')
csbCallStatsMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 1, 2)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbGlobalStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsGroupRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbStatsInstanceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbCallStatsMIBComplianceRev1 = csbCallStatsMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: csbCallStatsMIBComplianceRev1.setDescription('This is a default module-compliance containing csbCallStatsMIBGroups.')
csbCallStatsMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 1, 3)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbGlobalStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsGroupRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbStatsInstanceGroup"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbGlobalStatsGroupSup1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsGroupSup1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsGroupSup1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbCallStatsMIBComplianceRev2 = csbCallStatsMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: csbCallStatsMIBComplianceRev2.setDescription('This is a default module-compliance containing csbCallStatsMIBGroups.')
csbStatsInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 1)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsInstancePhysicalIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbStatsInstanceGroup = csbStatsInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: csbStatsInstanceGroup.setDescription('A collection of objects providing physical entity index for cisco Session border Controller (SBC).')
csbGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 2)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsCallsHigh"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRate1Sec"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsCallsLow"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsAvailableFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsUsedFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsTotalFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRTPPktsRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRTPPktsDiscard"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsUsedSigFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsTotalSigFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsAvailablePktRate"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsPeakFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsUnclassifiedPkts"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRTPOctetsSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRTPOctetsRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRTPOctetsDiscard"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsPeakSigFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsSbcName"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRTPPktsSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsNoMediaCount"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsRouteErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbGlobalStatsGroup = csbGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csbGlobalStatsGroup.setDescription('A collection of objects providing global statistics for cisco Session border Controller (SBC).')
csbCurrPeriodicStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 3)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsActiveCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsActivatingCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsDeactivatingCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsTotalCallAttempts"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsFailedCallAttempts"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallRoutingFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallResourceFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallMediaFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSigFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsActiveCallFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCongestionFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupNAPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupRoutingPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupCACPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupCACCallLimitFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupCACRateLimitFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupCACBandwidthFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupCACMediaLimitFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCallSetupCACMediaUpdateFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbCurrPeriodicStatsGroup = csbCurrPeriodicStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsGroup.setDescription('A collection of objects providing current 5 minute statistics for Cisco Session border Controller (SBC).')
csbHistoryStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 4)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsActiveCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsTotalCallAttempts"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsFailedCallAttempts"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallRoutingFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallResourceFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallMediaFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsFailSigFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsActiveCallFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCongestionFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupNAPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupRoutingPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupCACPolicyFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupCACCallLimitFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupCACRateLimitFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupCACBandwidthFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupCACMediaLimitFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCallSetupCACMediaUpdateFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbHistoryStatsGroup = csbHistoryStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsGroup.setDescription('A collection of objects providing previous 5 minute statistics for Cisco Session border Controller (SBC).')
csbPerFlowStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 5)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTPPktsRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTPPktsSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTPPktsDiscard"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTCPPktsSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTPOctetsRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTPOctetsSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTPOctetsDiscard"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTCPPktsRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTCPPktsLost"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsFlowType"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsTmanPerMbs"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsTmanPerSdr"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsDscpSettings"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsAdrStatus"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsQASettings"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsEPJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbPerFlowStatsGroup = csbPerFlowStatsGroup.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsGroup.setDescription('A collection of objects providing per flow statistics for Cisco Session border Controller (SBC).')
csbH248StatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 6)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsFailed"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsRetried"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRepliesSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRepliesRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRepliesRetried"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsSegPktsSent"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsSegPktsRcvd"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsTMaxTimeoutVal"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRTT"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsLT"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsEstablishedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbH248StatsGroup = csbH248StatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: csbH248StatsGroup.setDescription('A collection of objects providing H.248 statistics for Cisco Session border Controller (SBC).')
csbH248StatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 7)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsSentRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsRcvdRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsFailedRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRequestsRetriedRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRepliesSentRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRepliesRcvdRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRepliesRetriedRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsSegPktsSentRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsSegPktsRcvdRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsEstablishedTimeRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsTMaxTimeoutValRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsRTTRev1"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbH248StatsLTRev1"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbH248StatsGroupRev1 = csbH248StatsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: csbH248StatsGroupRev1.setDescription('A collection of objects providing H.248 statistics for Cisco Session border Controller (SBC).')
csbGlobalStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 8)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsAvailableTranscodeFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsActiveTranscodeFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsPeakTranscodeFlows"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCallStatsTotalTranscodeFlows"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbGlobalStatsGroupSup1 = csbGlobalStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: csbGlobalStatsGroupSup1.setDescription('A collection of objects providing global statistics for cisco Session border Controller (SBC).')
csbCurrPeriodicStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 9)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsTranscodedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsTransratedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsTotalCallUpdateFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsActiveIpv6Calls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsActiveEmergencyCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsActiveE2EmergencyCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsImsRxActiveCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsImsRxCallSetupFaiures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsImsRxCallRenegotiationAttempts"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsImsRxCallRenegotiationFailures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsAudioTranscodedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsFaxTranscodedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsRtpDisallowedFailures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsSrtpDisallowedFailures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsNonSrtpCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsSrtpNonIwCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsSrtpIwCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsDtmfIw2833Calls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsDtmfIwInbandCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsDtmfIw2833InbandCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsTotalTapsRequested"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsTotalTapsSucceeded"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicStatsCurrentTaps"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbCurrPeriodicIpsecCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbCurrPeriodicStatsGroupSup1 = csbCurrPeriodicStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: csbCurrPeriodicStatsGroupSup1.setDescription('A collection of objects providing current 5 min, 15 min, 1 hour and 1 day statistics for Cisco Session border Controller (SBC).')
csbHistoryStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 10)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistroyStatsTranscodedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistroyStatsTransratedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsTotalCallUpdateFailure"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsActiveIpv6Calls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsActiveEmergencyCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsActiveE2EmergencyCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsImsRxActiveCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsImsRxCallSetupFailures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsImsRxCallRenegotiationAttempts"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsImsRxCallRenegotiationFailures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsAudioTranscodedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsFaxTranscodedCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsRtpDisallowedFailures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsSrtpDisallowedFailures"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsNonSrtpCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsSrtpNonIwCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsSrtpIwCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsDtmfIw2833Calls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsDtmfIwInbandCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsDtmfIw2833InbandCalls"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsTotalTapsRequested"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsTotalTapsSucceeded"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsCurrentTaps"), ("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbHistoryStatsIpsecCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbHistoryStatsGroupSup1 = csbHistoryStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: csbHistoryStatsGroupSup1.setDescription('A collection of objects providing current 5 min, 15 min, 1 hour and 1 day statistics for Cisco Session border Controller (SBC).')
csbPerFlowStatsGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 657, 2, 2, 11)).setObjects(("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", "csbPerFlowStatsRTPPktsLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csbPerFlowStatsGroupSup1 = csbPerFlowStatsGroupSup1.setStatus('current')
if mibBuilder.loadTexts: csbPerFlowStatsGroupSup1.setDescription('A collection of objects providing per flow statistics for Cisco Session border Controller (SBC).')
mibBuilder.exportSymbols("CISCO-SESS-BORDER-CTRLR-CALL-STATS-MIB", csbHistoryStatsActiveE2EmergencyCalls=csbHistoryStatsActiveE2EmergencyCalls, csbH248StatsRepliesRetriedRev1=csbH248StatsRepliesRetriedRev1, PYSNMP_MODULE_ID=ciscoSbcCallStatsMIB, csbH248StatsTable=csbH248StatsTable, csbPerFlowStatsGateId=csbPerFlowStatsGateId, csbHistoryStatsCallSetupCACPolicyFailure=csbHistoryStatsCallSetupCACPolicyFailure, csbCurrPeriodicStatsEntry=csbCurrPeriodicStatsEntry, csbH248StatsEstablishedTime=csbH248StatsEstablishedTime, csbCurrPeriodicStatsCurrentTaps=csbCurrPeriodicStatsCurrentTaps, csbH248StatsGroup=csbH248StatsGroup, csbCallStatsUsedFlows=csbCallStatsUsedFlows, csbCurrPeriodicStatsCongestionFailure=csbCurrPeriodicStatsCongestionFailure, csbHistoryStatsTotalCallAttempts=csbHistoryStatsTotalCallAttempts, csbHistoryStatsCallMediaFailure=csbHistoryStatsCallMediaFailure, csbStatsInstanceGroup=csbStatsInstanceGroup, csbCallStatsRTPOctetsSent=csbCallStatsRTPOctetsSent, csbPerFlowStatsRTPOctetsSent=csbPerFlowStatsRTPOctetsSent, csbCallStatsRouteErrors=csbCallStatsRouteErrors, csbCurrPeriodicStatsSrtpNonIwCalls=csbCurrPeriodicStatsSrtpNonIwCalls, csbHistoryStatsInterval=csbHistoryStatsInterval, csbHistoryStatsImsRxCallSetupFailures=csbHistoryStatsImsRxCallSetupFailures, csbH248StatsCtrlrIndex=csbH248StatsCtrlrIndex, csbCallStatsPeakFlows=csbCallStatsPeakFlows, csbHistoryStatsElements=csbHistoryStatsElements, csbCallStatsTotalFlows=csbCallStatsTotalFlows, csbCurrPeriodicStatsCallSetupCACRateLimitFailure=csbCurrPeriodicStatsCallSetupCACRateLimitFailure, csbH248StatsRepliesSent=csbH248StatsRepliesSent, csbHistoryStatsActiveCalls=csbHistoryStatsActiveCalls, csbCurrPeriodicStatsTotalCallUpdateFailure=csbCurrPeriodicStatsTotalCallUpdateFailure, csbCurrPeriodicStatsRtpDisallowedFailures=csbCurrPeriodicStatsRtpDisallowedFailures, csbHistoryStatsActiveCallFailure=csbHistoryStatsActiveCallFailure, csbHistoryStatsTable=csbHistoryStatsTable, csbHistoryStatsCallRoutingFailure=csbHistoryStatsCallRoutingFailure, csbHistoryStatsDtmfIw2833InbandCalls=csbHistoryStatsDtmfIw2833InbandCalls, csbHistoryStatsActiveEmergencyCalls=csbHistoryStatsActiveEmergencyCalls, csbCallStatsInstanceEntry=csbCallStatsInstanceEntry, csbCallStatsCallsLow=csbCallStatsCallsLow, csbHistoryStatsCallSetupNAPolicyFailure=csbHistoryStatsCallSetupNAPolicyFailure, csbCallStatsRTPPktsSent=csbCallStatsRTPPktsSent, csbCallStatsInstanceIndex=csbCallStatsInstanceIndex, csbHistoryStatsNonSrtpCalls=csbHistoryStatsNonSrtpCalls, csbHistoryStatsDtmfIw2833Calls=csbHistoryStatsDtmfIw2833Calls, csbHistoryStatsDtmfIwInbandCalls=csbHistoryStatsDtmfIwInbandCalls, csbHistroyStatsTranscodedCalls=csbHistroyStatsTranscodedCalls, csbPerFlowStatsEPJitter=csbPerFlowStatsEPJitter, csbH248StatsRTT=csbH248StatsRTT, csbCallStatsUsedSigFlows=csbCallStatsUsedSigFlows, csbPerFlowStatsRTCPPktsLost=csbPerFlowStatsRTCPPktsLost, csbPerFlowStatsDscpSettings=csbPerFlowStatsDscpSettings, csbPerFlowStatsTmanPerSdr=csbPerFlowStatsTmanPerSdr, csbHistoryStatsIpsecCalls=csbHistoryStatsIpsecCalls, csbH248StatsRequestsSentRev1=csbH248StatsRequestsSentRev1, csbCallStatsSbcName=csbCallStatsSbcName, csbHistoryStatsCallSetupCACMediaLimitFailure=csbHistoryStatsCallSetupCACMediaLimitFailure, csbPerFlowStatsTable=csbPerFlowStatsTable, csbCallStatsRate1Sec=csbCallStatsRate1Sec, csbCurrPeriodicStatsTable=csbCurrPeriodicStatsTable, csbPerFlowStatsFlowType=csbPerFlowStatsFlowType, csbCurrPeriodicStatsImsRxActiveCalls=csbCurrPeriodicStatsImsRxActiveCalls, csbHistoryStatsFailedCallAttempts=csbHistoryStatsFailedCallAttempts, csbCallStatsTotalTranscodeFlows=csbCallStatsTotalTranscodeFlows, csbHistoryStatsCallSetupCACBandwidthFailure=csbHistoryStatsCallSetupCACBandwidthFailure, csbPerFlowStatsSideId=csbPerFlowStatsSideId, csbPerFlowStatsRTCPPktsSent=csbPerFlowStatsRTCPPktsSent, csbCurrPeriodicStatsTotalTapsSucceeded=csbCurrPeriodicStatsTotalTapsSucceeded, csbCurrPeriodicStatsInterval=csbCurrPeriodicStatsInterval, csbHistoryStatsGroup=csbHistoryStatsGroup, csbPerFlowStatsGroupSup1=csbPerFlowStatsGroupSup1, csbHistoryStatsTotalTapsSucceeded=csbHistoryStatsTotalTapsSucceeded, csbCurrPeriodicStatsGroupSup1=csbCurrPeriodicStatsGroupSup1, csbPerFlowStatsEntry=csbPerFlowStatsEntry, csbCallStatsEntry=csbCallStatsEntry, csbPerFlowStatsFlowPairId=csbPerFlowStatsFlowPairId, ciscoSbcCallStatsMIBConform=ciscoSbcCallStatsMIBConform, csbPerFlowStatsRTCPPktsRcvd=csbPerFlowStatsRTCPPktsRcvd, csbCurrPeriodicStatsSrtpDisallowedFailures=csbCurrPeriodicStatsSrtpDisallowedFailures, csbH248StatsRequestsFailedRev1=csbH248StatsRequestsFailedRev1, csbH248StatsLT=csbH248StatsLT, ciscoSbcCallStatsMIBNotifs=ciscoSbcCallStatsMIBNotifs, csbCallStatsTable=csbCallStatsTable, csbCurrPeriodicStatsActiveCalls=csbCurrPeriodicStatsActiveCalls, csbCurrPeriodicStatsCallSetupCACMediaLimitFailure=csbCurrPeriodicStatsCallSetupCACMediaLimitFailure, csbHistoryStatsTotalCallUpdateFailure=csbHistoryStatsTotalCallUpdateFailure, csbCurrPeriodicStatsCallSetupCACMediaUpdateFailure=csbCurrPeriodicStatsCallSetupCACMediaUpdateFailure, csbHistoryStatsEntry=csbHistoryStatsEntry, csbHistoryStatsAudioTranscodedCalls=csbHistoryStatsAudioTranscodedCalls, csbCallStatsMIBComplianceRev2=csbCallStatsMIBComplianceRev2, csbCallStatsRTPOctetsDiscard=csbCallStatsRTPOctetsDiscard, csbHistoryStatsImsRxCallRenegotiationAttempts=csbHistoryStatsImsRxCallRenegotiationAttempts, csbCallStatsInstancePhysicalIndex=csbCallStatsInstancePhysicalIndex, csbCurrPeriodicStatsCallMediaFailure=csbCurrPeriodicStatsCallMediaFailure, csbPerFlowStatsRTPPktsLost=csbPerFlowStatsRTPPktsLost, csbCallStatsRTPPktsDiscard=csbCallStatsRTPPktsDiscard, csbHistoryStatsSrtpNonIwCalls=csbHistoryStatsSrtpNonIwCalls, csbCurrPeriodicStatsDtmfIw2833Calls=csbCurrPeriodicStatsDtmfIw2833Calls, csbCurrPeriodicStatsTimestamp=csbCurrPeriodicStatsTimestamp, csbHistoryStatsImsRxActiveCalls=csbHistoryStatsImsRxActiveCalls, csbCallStatsRTPOctetsRcvd=csbCallStatsRTPOctetsRcvd, csbCallStatsMIBGroups=csbCallStatsMIBGroups, csbH248StatsGroupRev1=csbH248StatsGroupRev1, csbCallStatsUnclassifiedPkts=csbCallStatsUnclassifiedPkts, csbCurrPeriodicStatsActiveEmergencyCalls=csbCurrPeriodicStatsActiveEmergencyCalls, csbCurrPeriodicStatsCallSigFailure=csbCurrPeriodicStatsCallSigFailure, csbH248StatsEntry=csbH248StatsEntry, csbH248StatsRequestsRetried=csbH248StatsRequestsRetried, csbCallStatsMIBComplianceRev1=csbCallStatsMIBComplianceRev1, csbCurrPeriodicStatsCallResourceFailure=csbCurrPeriodicStatsCallResourceFailure, csbHistoryStatsTotalTapsRequested=csbHistoryStatsTotalTapsRequested, csbH248StatsRev1Table=csbH248StatsRev1Table, csbPerFlowStatsRTPOctetsRcvd=csbPerFlowStatsRTPOctetsRcvd, csbH248StatsRepliesSentRev1=csbH248StatsRepliesSentRev1, csbCurrPeriodicStatsFailedCallAttempts=csbCurrPeriodicStatsFailedCallAttempts, csbHistoryStatsFailSigFailure=csbHistoryStatsFailSigFailure, csbCurrPeriodicStatsCallSetupPolicyFailure=csbCurrPeriodicStatsCallSetupPolicyFailure, csbPerFlowStatsRTPPktsDiscard=csbPerFlowStatsRTPPktsDiscard, csbCallStatsAvailableTranscodeFlows=csbCallStatsAvailableTranscodeFlows, csbCurrPeriodicStatsCallSetupCACBandwidthFailure=csbCurrPeriodicStatsCallSetupCACBandwidthFailure, csbHistoryStatsRtpDisallowedFailures=csbHistoryStatsRtpDisallowedFailures, csbH248StatsSegPktsRcvdRev1=csbH248StatsSegPktsRcvdRev1, csbHistoryStatsCallSetupPolicyFailure=csbHistoryStatsCallSetupPolicyFailure, csbCurrPeriodicStatsImsRxCallRenegotiationFailures=csbCurrPeriodicStatsImsRxCallRenegotiationFailures, csbCurrPeriodicStatsImsRxCallRenegotiationAttempts=csbCurrPeriodicStatsImsRxCallRenegotiationAttempts, csbCurrPeriodicStatsGroup=csbCurrPeriodicStatsGroup, csbCurrPeriodicStatsTotalCallAttempts=csbCurrPeriodicStatsTotalCallAttempts, csbPerFlowStatsQASettings=csbPerFlowStatsQASettings, csbCallStatsMIBCompliances=csbCallStatsMIBCompliances, csbCurrPeriodicStatsAudioTranscodedCalls=csbCurrPeriodicStatsAudioTranscodedCalls, csbH248StatsRequestsFailed=csbH248StatsRequestsFailed, csbPerFlowStatsGroup=csbPerFlowStatsGroup, csbHistroyStatsTransratedCalls=csbHistroyStatsTransratedCalls, csbH248StatsRepliesRcvdRev1=csbH248StatsRepliesRcvdRev1, csbCurrPeriodicStatsActiveIpv6Calls=csbCurrPeriodicStatsActiveIpv6Calls, csbH248StatsRequestsSent=csbH248StatsRequestsSent, csbH248StatsEstablishedTimeRev1=csbH248StatsEstablishedTimeRev1, csbHistoryStatsCallSetupCACMediaUpdateFailure=csbHistoryStatsCallSetupCACMediaUpdateFailure, csbCurrPeriodicStatsTotalTapsRequested=csbCurrPeriodicStatsTotalTapsRequested, csbPerFlowStatsAdrStatus=csbPerFlowStatsAdrStatus, csbHistoryStatsCallSetupCACRateLimitFailure=csbHistoryStatsCallSetupCACRateLimitFailure, csbH248StatsSegPktsSent=csbH248StatsSegPktsSent, csbHistoryStatsCurrentTaps=csbHistoryStatsCurrentTaps, csbCallStatsRTPPktsRcvd=csbCallStatsRTPPktsRcvd, csbCurrPeriodicStatsDtmfIw2833InbandCalls=csbCurrPeriodicStatsDtmfIw2833InbandCalls, csbHistoryStatsSrtpIwCalls=csbHistoryStatsSrtpIwCalls, csbCallStatsInstanceTable=csbCallStatsInstanceTable, csbH248StatsTMaxTimeoutValRev1=csbH248StatsTMaxTimeoutValRev1, csbH248StatsSegPktsRcvd=csbH248StatsSegPktsRcvd, csbGlobalStatsGroupSup1=csbGlobalStatsGroupSup1, csbH248StatsRTTRev1=csbH248StatsRTTRev1, csbCurrPeriodicStatsCallSetupCACPolicyFailure=csbCurrPeriodicStatsCallSetupCACPolicyFailure, csbH248StatsVdbeId=csbH248StatsVdbeId, csbCurrPeriodicStatsFaxTranscodedCalls=csbCurrPeriodicStatsFaxTranscodedCalls, ciscoSbcCallStatsMIB=ciscoSbcCallStatsMIB, csbCallStatsActiveTranscodeFlows=csbCallStatsActiveTranscodeFlows, csbCurrPeriodicStatsNonSrtpCalls=csbCurrPeriodicStatsNonSrtpCalls, csbH248StatsRequestsRcvdRev1=csbH248StatsRequestsRcvdRev1, csbH248StatsLTRev1=csbH248StatsLTRev1, csbCurrPeriodicStatsTransratedCalls=csbCurrPeriodicStatsTransratedCalls, csbHistoryStatsCallSetupCACCallLimitFailure=csbHistoryStatsCallSetupCACCallLimitFailure, csbH248StatsRequestsRetriedRev1=csbH248StatsRequestsRetriedRev1, csbHistoryStatsImsRxCallRenegotiationFailures=csbHistoryStatsImsRxCallRenegotiationFailures, ciscoSbcCallStatsMIBObjects=ciscoSbcCallStatsMIBObjects, csbH248StatsTMaxTimeoutVal=csbH248StatsTMaxTimeoutVal, csbHistoryStatsTimestamp=csbHistoryStatsTimestamp, csbH248StatsRev1Entry=csbH248StatsRev1Entry, csbCurrPeriodicIpsecCalls=csbCurrPeriodicIpsecCalls, csbCurrPeriodicStatsCallSetupCACCallLimitFailure=csbCurrPeriodicStatsCallSetupCACCallLimitFailure, csbH248StatsRepliesRetried=csbH248StatsRepliesRetried, csbCallStatsPeakTranscodeFlows=csbCallStatsPeakTranscodeFlows, csbCurrPeriodicStatsDtmfIwInbandCalls=csbCurrPeriodicStatsDtmfIwInbandCalls, csbHistoryStatsFaxTranscodedCalls=csbHistoryStatsFaxTranscodedCalls, csbCurrPeriodicStatsTranscodedCalls=csbCurrPeriodicStatsTranscodedCalls, csbHistoryStatsSrtpDisallowedFailures=csbHistoryStatsSrtpDisallowedFailures, csbCallStatsMIBCompliance=csbCallStatsMIBCompliance, csbCallStatsCallsHigh=csbCallStatsCallsHigh, csbCallStatsAvailablePktRate=csbCallStatsAvailablePktRate, csbCallStatsPeakSigFlows=csbCallStatsPeakSigFlows, csbCurrPeriodicStatsActiveE2EmergencyCalls=csbCurrPeriodicStatsActiveE2EmergencyCalls, csbCurrPeriodicStatsSrtpIwCalls=csbCurrPeriodicStatsSrtpIwCalls, csbCallStatsServiceIndex=csbCallStatsServiceIndex, csbCallStatsTotalSigFlows=csbCallStatsTotalSigFlows, csbHistoryStatsGroupSup1=csbHistoryStatsGroupSup1, csbCurrPeriodicStatsDeactivatingCalls=csbCurrPeriodicStatsDeactivatingCalls, csbPerFlowStatsTmanPerMbs=csbPerFlowStatsTmanPerMbs, csbCurrPeriodicStatsCallRoutingFailure=csbCurrPeriodicStatsCallRoutingFailure, csbPerFlowStatsRTPOctetsDiscard=csbPerFlowStatsRTPOctetsDiscard, csbHistoryStatsCallSetupRoutingPolicyFailure=csbHistoryStatsCallSetupRoutingPolicyFailure, csbHistoryStatsCongestionFailure=csbHistoryStatsCongestionFailure, csbPerFlowStatsRTPPktsRcvd=csbPerFlowStatsRTPPktsRcvd, csbHistoryStatsActiveIpv6Calls=csbHistoryStatsActiveIpv6Calls, csbCallStatsNoMediaCount=csbCallStatsNoMediaCount, csbH248StatsSegPktsSentRev1=csbH248StatsSegPktsSentRev1, csbHistoryStatsCallResourceFailure=csbHistoryStatsCallResourceFailure, csbCurrPeriodicStatsImsRxCallSetupFaiures=csbCurrPeriodicStatsImsRxCallSetupFaiures, csbCurrPeriodicStatsCallSetupNAPolicyFailure=csbCurrPeriodicStatsCallSetupNAPolicyFailure, csbCurrPeriodicStatsActiveCallFailure=csbCurrPeriodicStatsActiveCallFailure, csbCurrPeriodicStatsCallSetupRoutingPolicyFailure=csbCurrPeriodicStatsCallSetupRoutingPolicyFailure, csbH248StatsRepliesRcvd=csbH248StatsRepliesRcvd, csbPerFlowStatsVdbeId=csbPerFlowStatsVdbeId, CiscoSbcPeriodicStatsInterval=CiscoSbcPeriodicStatsInterval, csbCallStatsAvailableFlows=csbCallStatsAvailableFlows, csbH248StatsRequestsRcvd=csbH248StatsRequestsRcvd, csbPerFlowStatsRTPPktsSent=csbPerFlowStatsRTPPktsSent, csbGlobalStatsGroup=csbGlobalStatsGroup, csbCurrPeriodicStatsActivatingCalls=csbCurrPeriodicStatsActivatingCalls)
