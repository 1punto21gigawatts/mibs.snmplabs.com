#
# PySNMP MIB module Nortel-Magellan-Passport-IpVrrpMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-IpVrrpMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:27:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
vrIp, vrIpIndex, vrPpIpPort, vrPpIpPortIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-IpMIB", "vrIp", "vrIpIndex", "vrPpIpPort", "vrPpIpPortIndex")
RowStatus, StorageType, DisplayString, MacAddress, Unsigned32, Integer32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "RowStatus", "StorageType", "DisplayString", "MacAddress", "Unsigned32", "Integer32")
NonReplicated, Link = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "Link")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
vrIndex, vrPpIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex", "vrPpIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Counter32, Unsigned32, Integer32, ObjectIdentity, Bits, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Counter32", "Unsigned32", "Integer32", "ObjectIdentity", "Bits", "MibIdentifier", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ipVrrpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161))
vrPpIpPortVrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17))
vrPpIpPortVrrpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 1), )
if mibBuilder.loadTexts: vrPpIpPortVrrpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpRowStatusTable.setDescription('This entry controls the addition and deletion of vrPpIpPortVrrp components.')
vrPpIpPortVrrpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIndex"))
if mibBuilder.loadTexts: vrPpIpPortVrrpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpRowStatusEntry.setDescription('A single entry in the table represents a single vrPpIpPortVrrp component.')
vrPpIpPortVrrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortVrrpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrPpIpPortVrrp components. These components can be added and deleted.')
vrPpIpPortVrrpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrPpIpPortVrrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpStorageType.setDescription('This variable represents the storage type value for the vrPpIpPortVrrp tables.')
vrPpIpPortVrrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vrPpIpPortVrrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpIndex.setDescription('This variable represents the index for the vrPpIpPortVrrp tables.')
vrPpIpPortVrrpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 2), )
if mibBuilder.loadTexts: vrPpIpPortVrrpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpProvTable.setDescription('This group contains the provisionable attributes for the IpVrrpPort component.')
vrPpIpPortVrrpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 2, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIndex"))
if mibBuilder.loadTexts: vrPpIpPortVrrpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpProvEntry.setDescription('An entry in the vrPpIpPortVrrpProvTable.')
vrPpIpPortVrrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortVrrpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpPriority.setDescription('This attribute specifies the priority of the IpVrrpPort in Master election. Value of 0 (zero) is reserved for Master router to indicate it is releasing responsibility for the virtual router. The value of 255 (decimal) is reserved fro the router that owns the IP addresses associated with the IpVrrpPort.')
vrPpIpPortVrrpAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortVrrpAdvertInterval.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpAdvertInterval.setDescription('This attribute specifies the time interval between ADVERTIMSEMENTS (seconds). Default is 1 second.')
vrPpIpPortVrrpLinkToCriticalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 2, 1, 5), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortVrrpLinkToCriticalIp.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpLinkToCriticalIp.setDescription('This attribute specifies the ip interface this IpVrrpPort is linked to. When the ip interface it is linked to is down, the vrrp component should go down.')
vrPpIpPortVrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 13), )
if mibBuilder.loadTexts: vrPpIpPortVrrpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpOperTable.setDescription('This group contains operational attributes for an IpVrrpPort component.')
vrPpIpPortVrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIndex"))
if mibBuilder.loadTexts: vrPpIpPortVrrpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpOperEntry.setDescription('An entry in the vrPpIpPortVrrpOperTable.')
vrPpIpPortVrrpVirtualRouterState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("initialize", 0), ("backup", 1), ("master", 2))).clone('initialize')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpVirtualRouterState.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpVirtualRouterState.setDescription('This attribute indicates the state of this IpVrrpPort. It will be one the three states: initialize, backup and master.')
vrPpIpPortVrrpVirtualRouterPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 13, 1, 2), MacAddress().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpVirtualRouterPhysicalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpVirtualRouterPhysicalAddress.setDescription('This attributes indicates the Mac address of the IpVrrpPort. The address is 00 00 5e 00 01 vrrpId')
vrPpIpPortVrrpAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 30), )
if mibBuilder.loadTexts: vrPpIpPortVrrpAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
vrPpIpPortVrrpAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 30, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIndex"))
if mibBuilder.loadTexts: vrPpIpPortVrrpAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpAdminControlEntry.setDescription('An entry in the vrPpIpPortVrrpAdminControlTable.')
vrPpIpPortVrrpSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortVrrpSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
vrPpIpPortVrrpOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 31), )
if mibBuilder.loadTexts: vrPpIpPortVrrpOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vrPpIpPortVrrpOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 31, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIndex"))
if mibBuilder.loadTexts: vrPpIpPortVrrpOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpOperStatusEntry.setDescription('An entry in the vrPpIpPortVrrpOperStatusTable.')
vrPpIpPortVrrpSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vrPpIpPortVrrpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 32), )
if mibBuilder.loadTexts: vrPpIpPortVrrpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vrPpIpPortVrrpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 32, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIndex"))
if mibBuilder.loadTexts: vrPpIpPortVrrpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpStateEntry.setDescription('An entry in the vrPpIpPortVrrpStateTable.')
vrPpIpPortVrrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vrPpIpPortVrrpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vrPpIpPortVrrpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
vrPpIpPortVrrpIpAddressesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 700), )
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesTable.setDescription('This attribute specifies one or more IP addresses associated with this IpVrrpPort.')
vrPpIpPortVrrpIpAddressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 700, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortVrrpIpAddressesValue"))
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesEntry.setDescription('An entry in the vrPpIpPortVrrpIpAddressesTable.')
vrPpIpPortVrrpIpAddressesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 700, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesValue.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesValue.setDescription('This variable represents both the value and the index for the vrPpIpPortVrrpIpAddressesTable.')
vrPpIpPortVrrpIpAddressesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 17, 700, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortVrrpIpAddressesRowStatus.setDescription('This variable is used to control the addition and deletion of individual values of the vrPpIpPortVrrpIpAddressesTable.')
vrPpIpPortCriticalIp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18))
vrPpIpPortCriticalIpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 1), )
if mibBuilder.loadTexts: vrPpIpPortCriticalIpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpRowStatusTable.setDescription('This entry controls the addition and deletion of vrPpIpPortCriticalIp components.')
vrPpIpPortCriticalIpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortCriticalIpIndex"))
if mibBuilder.loadTexts: vrPpIpPortCriticalIpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpRowStatusEntry.setDescription('A single entry in the table represents a single vrPpIpPortCriticalIp component.')
vrPpIpPortCriticalIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortCriticalIpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrPpIpPortCriticalIp components. These components can be added and deleted.')
vrPpIpPortCriticalIpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortCriticalIpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrPpIpPortCriticalIpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrPpIpPortCriticalIpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpStorageType.setDescription('This variable represents the storage type value for the vrPpIpPortCriticalIp tables.')
vrPpIpPortCriticalIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vrPpIpPortCriticalIpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpIndex.setDescription('This variable represents the index for the vrPpIpPortCriticalIp tables.')
vrPpIpPortCriticalIpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 24), )
if mibBuilder.loadTexts: vrPpIpPortCriticalIpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpProvTable.setDescription('This group contains the provisionable attributes for the CriticalIp component.')
vrPpIpPortCriticalIpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 24, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrPpIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrPpIpPortIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrPpIpPortCriticalIpIndex"))
if mibBuilder.loadTexts: vrPpIpPortCriticalIpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpProvEntry.setDescription('An entry in the vrPpIpPortCriticalIpProvTable.')
vrPpIpPortCriticalIpLinkToVrrp = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 3, 5, 18, 24, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrPpIpPortCriticalIpLinkToVrrp.setStatus('mandatory')
if mibBuilder.loadTexts: vrPpIpPortCriticalIpLinkToVrrp.setDescription('This attribute defines which IpVrrpPort this CriticalIp interface belongs to. When this interface goes down, the IpVrrpPort that this Critical Ip interface is associated with is inactive and can not be elected as master.')
vrIpIpVrrp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25))
vrIpIpVrrpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 1), )
if mibBuilder.loadTexts: vrIpIpVrrpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpRowStatusTable.setDescription('This entry controls the addition and deletion of vrIpIpVrrp components.')
vrIpIpVrrpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrIpIpVrrpIndex"))
if mibBuilder.loadTexts: vrIpIpVrrpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpRowStatusEntry.setDescription('A single entry in the table represents a single vrIpIpVrrp component.')
vrIpIpVrrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpIpVrrpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrIpIpVrrp components. These components can be added and deleted.')
vrIpIpVrrpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpIpVrrpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrIpIpVrrpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpIpVrrpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpStorageType.setDescription('This variable represents the storage type value for the vrIpIpVrrp tables.')
vrIpIpVrrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrIpIpVrrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpIndex.setDescription('This variable represents the index for the vrIpIpVrrp tables.')
vrIpIpVrrpAdminControlTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 30), )
if mibBuilder.loadTexts: vrIpIpVrrpAdminControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpAdminControlTable.setDescription('This group includes the Administrative Control attribute. This attribute defines the current administrative state of this component.')
vrIpIpVrrpAdminControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 30, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrIpIpVrrpIndex"))
if mibBuilder.loadTexts: vrIpIpVrrpAdminControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpAdminControlEntry.setDescription('An entry in the vrIpIpVrrpAdminControlTable.')
vrIpIpVrrpSnmpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrIpIpVrrpSnmpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpSnmpAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational and packet forwarding is allowed. The down state indicates the interface is not operational and packet forwarding is unavailable. The testing state indicates that no operational packets can be passed.')
vrIpIpVrrpOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 31), )
if mibBuilder.loadTexts: vrIpIpVrrpOperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpOperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
vrIpIpVrrpOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 31, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrIpIpVrrpIndex"))
if mibBuilder.loadTexts: vrIpIpVrrpOperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpOperStatusEntry.setDescription('An entry in the vrIpIpVrrpOperStatusTable.')
vrIpIpVrrpSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 31, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpIpVrrpSnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpSnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
vrIpIpVrrpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 32), )
if mibBuilder.loadTexts: vrIpIpVrrpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
vrIpIpVrrpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 32, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-IpMIB", "vrIpIndex"), (0, "Nortel-Magellan-Passport-IpVrrpMIB", "vrIpIpVrrpIndex"))
if mibBuilder.loadTexts: vrIpIpVrrpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpStateEntry.setDescription('An entry in the vrIpIpVrrpStateTable.')
vrIpIpVrrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpIpVrrpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
vrIpIpVrrpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpIpVrrpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
vrIpIpVrrpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 6, 25, 32, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrIpIpVrrpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vrIpIpVrrpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
ipVrrpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 1))
ipVrrpGroupBG = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 1, 7))
ipVrrpGroupBG00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 1, 7, 1))
ipVrrpGroupBG00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 1, 7, 1, 2))
ipVrrpCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 3))
ipVrrpCapabilitiesBG = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 3, 7))
ipVrrpCapabilitiesBG00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 3, 7, 1))
ipVrrpCapabilitiesBG00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 161, 3, 7, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-IpVrrpMIB", vrPpIpPortVrrpAdminState=vrPpIpPortVrrpAdminState, vrIpIpVrrpAdminState=vrIpIpVrrpAdminState, vrPpIpPortVrrpIndex=vrPpIpPortVrrpIndex, vrPpIpPortVrrpIpAddressesValue=vrPpIpPortVrrpIpAddressesValue, vrPpIpPortVrrpStateEntry=vrPpIpPortVrrpStateEntry, vrPpIpPortVrrpAdminControlTable=vrPpIpPortVrrpAdminControlTable, vrPpIpPortVrrpSnmpOperStatus=vrPpIpPortVrrpSnmpOperStatus, vrPpIpPortVrrpRowStatusTable=vrPpIpPortVrrpRowStatusTable, vrPpIpPortVrrpStorageType=vrPpIpPortVrrpStorageType, vrPpIpPortCriticalIpRowStatus=vrPpIpPortCriticalIpRowStatus, vrPpIpPortVrrpSnmpAdminStatus=vrPpIpPortVrrpSnmpAdminStatus, vrIpIpVrrpStateEntry=vrIpIpVrrpStateEntry, vrIpIpVrrpRowStatusTable=vrIpIpVrrpRowStatusTable, vrIpIpVrrp=vrIpIpVrrp, vrPpIpPortVrrpOperTable=vrPpIpPortVrrpOperTable, ipVrrpCapabilitiesBG00=ipVrrpCapabilitiesBG00, vrPpIpPortCriticalIpStorageType=vrPpIpPortCriticalIpStorageType, vrPpIpPortVrrpOperStatusTable=vrPpIpPortVrrpOperStatusTable, vrPpIpPortVrrpStateTable=vrPpIpPortVrrpStateTable, vrPpIpPortVrrpIpAddressesEntry=vrPpIpPortVrrpIpAddressesEntry, vrPpIpPortVrrpProvTable=vrPpIpPortVrrpProvTable, vrPpIpPortCriticalIpLinkToVrrp=vrPpIpPortCriticalIpLinkToVrrp, vrIpIpVrrpOperationalState=vrIpIpVrrpOperationalState, vrPpIpPortVrrpLinkToCriticalIp=vrPpIpPortVrrpLinkToCriticalIp, vrIpIpVrrpOperStatusEntry=vrIpIpVrrpOperStatusEntry, vrPpIpPortCriticalIpRowStatusEntry=vrPpIpPortCriticalIpRowStatusEntry, vrPpIpPortVrrpVirtualRouterPhysicalAddress=vrPpIpPortVrrpVirtualRouterPhysicalAddress, vrPpIpPortCriticalIpComponentName=vrPpIpPortCriticalIpComponentName, vrIpIpVrrpComponentName=vrIpIpVrrpComponentName, ipVrrpGroupBG=ipVrrpGroupBG, vrPpIpPortVrrpPriority=vrPpIpPortVrrpPriority, vrIpIpVrrpOperStatusTable=vrIpIpVrrpOperStatusTable, vrPpIpPortCriticalIpRowStatusTable=vrPpIpPortCriticalIpRowStatusTable, vrPpIpPortCriticalIpProvTable=vrPpIpPortCriticalIpProvTable, vrPpIpPortVrrpAdvertInterval=vrPpIpPortVrrpAdvertInterval, vrIpIpVrrpRowStatusEntry=vrIpIpVrrpRowStatusEntry, vrPpIpPortVrrpIpAddressesRowStatus=vrPpIpPortVrrpIpAddressesRowStatus, vrIpIpVrrpAdminControlTable=vrIpIpVrrpAdminControlTable, vrPpIpPortCriticalIpProvEntry=vrPpIpPortCriticalIpProvEntry, vrIpIpVrrpUsageState=vrIpIpVrrpUsageState, vrPpIpPortVrrpUsageState=vrPpIpPortVrrpUsageState, vrPpIpPortCriticalIp=vrPpIpPortCriticalIp, ipVrrpGroup=ipVrrpGroup, vrIpIpVrrpIndex=vrIpIpVrrpIndex, ipVrrpCapabilitiesBG00A=ipVrrpCapabilitiesBG00A, vrPpIpPortVrrpOperStatusEntry=vrPpIpPortVrrpOperStatusEntry, ipVrrpCapabilities=ipVrrpCapabilities, vrIpIpVrrpSnmpOperStatus=vrIpIpVrrpSnmpOperStatus, vrPpIpPortVrrpComponentName=vrPpIpPortVrrpComponentName, vrPpIpPortVrrpRowStatusEntry=vrPpIpPortVrrpRowStatusEntry, vrPpIpPortVrrpAdminControlEntry=vrPpIpPortVrrpAdminControlEntry, vrIpIpVrrpRowStatus=vrIpIpVrrpRowStatus, vrIpIpVrrpAdminControlEntry=vrIpIpVrrpAdminControlEntry, vrPpIpPortVrrpRowStatus=vrPpIpPortVrrpRowStatus, vrPpIpPortVrrpVirtualRouterState=vrPpIpPortVrrpVirtualRouterState, ipVrrpMIB=ipVrrpMIB, vrPpIpPortCriticalIpIndex=vrPpIpPortCriticalIpIndex, ipVrrpCapabilitiesBG=ipVrrpCapabilitiesBG, vrPpIpPortVrrp=vrPpIpPortVrrp, vrPpIpPortVrrpOperationalState=vrPpIpPortVrrpOperationalState, vrIpIpVrrpStorageType=vrIpIpVrrpStorageType, ipVrrpGroupBG00A=ipVrrpGroupBG00A, vrPpIpPortVrrpIpAddressesTable=vrPpIpPortVrrpIpAddressesTable, vrIpIpVrrpStateTable=vrIpIpVrrpStateTable, vrIpIpVrrpSnmpAdminStatus=vrIpIpVrrpSnmpAdminStatus, ipVrrpGroupBG00=ipVrrpGroupBG00, vrPpIpPortVrrpProvEntry=vrPpIpPortVrrpProvEntry, vrPpIpPortVrrpOperEntry=vrPpIpPortVrrpOperEntry)
