#
# PySNMP MIB module NEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Opaque, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, Unsigned32, iso, MibIdentifier, Integer32, Counter32, IpAddress, enterprises, TimeTicks, ModuleIdentity, Gauge32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Opaque", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "Unsigned32", "iso", "MibIdentifier", "Integer32", "Counter32", "IpAddress", "enterprises", "TimeTicks", "ModuleIdentity", "Gauge32", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC-v1", "TruthValue", "DateAndTime")
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
necProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1))
atomis = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 14))
m7_phase2 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 14, 9)).setLabel("m7-phase2")
m7_corporate = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 14, 12)).setLabel("m7-corporate")
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
atomis_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14)).setLabel("atomis-mib")
m7_phase2_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9)).setLabel("m7-phase2-mib")
node = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1))
slot = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2))
linf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3))
conn = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4))
perf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5))
scale = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6))
card = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7))
clock = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8))
diag = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9))
pnni = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10))
matCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11))
m7_corporate_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 12)).setLabel("m7-corporate-mib")
nodeStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1))
nodeStatusOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("installing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusOperStatus.setDescription('Indicate operational status of the equipment.')
nodeStatusStartTime = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusStartTime.setDescription('Date and Time when the equipment was last restarted')
nodeStatusNodeId = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusNodeId.setDescription('Node ID of the equipment')
nodeStatusSelfSystem = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system-0", 1), ("system-1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSelfSystem.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusSelfSystem.setDescription('Indicate which system of the SW-Engine the NMS is connected with.')
nodeStatusSwitchType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sw-Engine-5G", 1), ("sw-Engine-10G", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusSwitchType.setDescription('Indicate the type of SW-Engine.')
nodeStatusFan = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusFan.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusFan.setDescription('Indicate operational status of the FAN of the equipment.')
nodeStatusEnvironment = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("noGood", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusEnvironment.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusEnvironment.setDescription('Peripheral temperature environment of the equipment. If the peripheral temperature exceeds 50 C, this object enters noGood(2).')
nodeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2), )
if mibBuilder.loadTexts: nodeStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusTable.setDescription('Table which indicates the status of each part of the equipment.')
nodeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1), ).setIndexNames((0, "NEC-MIB", "nodeStatusIndex"))
if mibBuilder.loadTexts: nodeStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusEntry.setDescription('Entry of the configuration of the table. ')
nodeStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: nodeStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusIndex.setDescription('Index of the system configuration of the equipment ')
nodeStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusPower.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusPower.setDescription('Indicate the status of the Power Unit of the equipment.')
nodeStatusSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("act", 1), ("sby", 2), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSwitchMode.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusSwitchMode.setDescription('Indicate operational mode of SW-Engine of the equipment.')
nodeStatusSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2), ("diagnostics", 3), ("diagnosis-status-NG", 4), ("initializing", 5), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatusSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: nodeStatusSwitch.setDescription('Indicate the status of the SW-Engine of the equipment.')
nodePCMCIATable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3), )
if mibBuilder.loadTexts: nodePCMCIATable.setStatus('mandatory')
if mibBuilder.loadTexts: nodePCMCIATable.setDescription('Table which indicates the status of the PCMCIA card. Every PCMCIA slot is provided with an entry.')
nodePCMCIAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1), ).setIndexNames((0, "NEC-MIB", "nodeStatusIndex"), (0, "NEC-MIB", "nodePCMCIAIndex"))
if mibBuilder.loadTexts: nodePCMCIAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nodePCMCIAEntry.setDescription('Entry of nodePCMCIATable')
nodePCMCIAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: nodePCMCIAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodePCMCIAIndex.setDescription('PCMCIA slot number per SW-Engine')
nodePCMCIAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("normal", 1), ("failure", 2), ("initializing", 3), ("busy", 4), ("unknown", 5), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePCMCIAStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nodePCMCIAStatus.setDescription('Status of PCMCIA card')
nodePCMCIAType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("lan-card", 1), ("ata-card", 2), ("unknown", 3), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePCMCIAType.setStatus('mandatory')
if mibBuilder.loadTexts: nodePCMCIAType.setDescription('Type of installed PCMCIA card')
nodeOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4))
nodeOpeSave = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeOpeSave.setStatus('mandatory')
if mibBuilder.loadTexts: nodeOpeSave.setDescription('Save processing. Save System Configuration information in FROM. The result is indicated in nodeOpeSaveResult. The value at read is always noOperation (1).')
nodeOpeSaveResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("succeed", 1), ("succeed-0", 2), ("succeed-1", 3), ("temporaryFailure", 4), ("nearend", 5), ("nearend-0", 6), ("nearend-0-failure-1", 7), ("nearend-1", 8), ("nearend-1-failure-0", 9), ("notReady", 10), ("ready", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOpeSaveResult.setStatus('mandatory')
if mibBuilder.loadTexts: nodeOpeSaveResult.setDescription('The result of SAVE processing OK/NG indicate that SAVE processing completed/failed, respectively. (NearEND) indicates that the number of write counts approaches to the limit.')
nodeOpeCopy = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOperation", 1), ("copy-all-from-act", 2), ("copy-all-from-sby", 3), ("copy-config-from-act", 4), ("copy-config-from-sby", 5), ("copy-system-from-act", 6), ("copy-system-from-sby", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeOpeCopy.setStatus('mandatory')
if mibBuilder.loadTexts: nodeOpeCopy.setDescription('Copy the system configuration information/LM to the FROM of other system. The result is indicated in nodeOpeCopyResult. The value at read is always noOperation(1).')
nodeOpeCopyResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("succeed", 1), ("temporaryFailure", 2), ("nearend", 3), ("notReady", 4), ("ready", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOpeCopyResult.setStatus('mandatory')
if mibBuilder.loadTexts: nodeOpeCopyResult.setDescription('Result of the copy processing.')
nodeOpeReset = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 1), ("reset-act", 2), ("reset-sby", 3), ("ach", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeOpeReset.setStatus('mandatory')
if mibBuilder.loadTexts: nodeOpeReset.setDescription('System Reset processing The value at read is always noOperation(1).')
slotIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1), )
if mibBuilder.loadTexts: slotIfConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfTable.setDescription('Table which indicates the line card configuration of the equipment')
slotIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: slotIfConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfEntry.setDescription('Entry of the line card configuration')
slotIfConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfIndex.setDescription('Index of line card configuration')
slotIfConfPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 99))).clone(namedValues=NamedValues(("other", 1), ("taxi-100M", 2), ("oc3c-SMF-Long", 3), ("oc3c-SMF-Short", 4), ("oc3c-MMF", 5), ("relay-6Mcel", 6), ("j2-6M-4M-3M", 7), ("utp-5", 8), ("oc12c-SMF-Type-A", 9), ("oc12c-SMF-Type-B", 10), ("ds3", 11), ("e3", 12), ("bts-1", 13), ("bts-4", 14), ("primary-1536K-1152K-768K-512K-384K-256K-192K", 15), ("ds1", 16), ("e1", 17), ("oc3c-POF", 18), ("sts3c-COAXIAL", 19), ("vod-RxHFC4M", 50), ("vod-TxHFC27M", 51), ("svr", 52), ("fr-ds1", 53), ("fr-e1", 54), ("dcs", 55), ("ce-ds3", 56), ("ce-ds1", 57), ("ce-e1", 58), ("ce-J2", 59), ("svr2", 60), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfPhysType.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfPhysType.setDescription('PMD layer/physical layer format of the line card. Above stated [oc3c], [oc12c] are ATM Form conformed names. They are corresponding to the ITU-T conformed names as follows: oc3c - STM1 oc12 - STM4 sts3c - STM1')
slotIfConfRev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfRev.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfRev.setDescription('The revision of the line cards. JpnToEng[ѥå̤,0 length.]')
slotIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("other", 1), ("inService", 2), ("outOfService", 3), ("testing", 4), ("initializing", 5), ("installing", 6), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfStatus.setDescription('Operational status of the line cards.')
slotIfConfBufferType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("ph1-buffer", 2), ("ph2-buffer", 3), ("fr-buffer", 4), ("fr-buffer2", 5), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfBufferType.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfBufferType.setDescription('The Buffer ID of the line cards.')
slotIfConfBufferRev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfBufferRev.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfBufferRev.setDescription("The revision of the line card's buffers. JpnToEng[ѥå̤,0 length.]")
slotIfConfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("notInstalled", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotIfConfReset.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfReset.setDescription('Line card reset. The result of the reset order is indicated in slotIfConfResetResult. JpnToEng[PKG̤ʳɤ߹\u07fbͤ,Ĥ noOperation(1)Ǥ.]')
slotIfConfResetResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("succeed", 1), ("other", 2), ("diagnostics", 3), ("unchangeableSlaveLine", 4), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIfConfResetResult.setStatus('mandatory')
if mibBuilder.loadTexts: slotIfConfResetResult.setDescription('The current result of the reset order by slotIfConfReset.')
class LinfFilterMaskVpi(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 12), )
class LinfFilterMaskVci(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 14), )
class LinfCellMappingMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("direct", 1), ("plcp", 2))

class LinfScramble(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class LinfLBO(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("low", 1), ("hi", 2), ("length-0-110", 3), ("length-110-220", 4), ("length-220-330", 5), ("length-330-440", 6), ("length-440-550", 7), ("length-550-660", 8), ("length-over660", 9))

class LinfFrameMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("c-bit", 1), ("m23", 2), ("g832-g804", 3), ("g751", 4), ("m13", 5), ("esf", 6), ("sf", 7))

class LinfMinVci(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16383)

class LinfMaxVci(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16383)

class LinfService(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unstructured", 1), ("structured", 2))

class LinfInterWorking(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("network", 1), ("service", 2))

class LinfVendor(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 1), ("stratacom", 2), ("digital-equipment", 3), ("northan-telecom", 4), ("cisco-systems", 5))

class LinfFractionalType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unstructured", 1), ("fractional", 2))

class LinfFractionalSet(Integer32):
    pass

class LinfCasMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notApplicable", 1), ("basic", 2), ("cas", 3))

class LinfCodingMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hdb3", 1), ("ami", 2))

class LinfUnUsedParam(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1))
    namedValues = NamedValues(("unused", -1))

linfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1), )
if mibBuilder.loadTexts: linfStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: linfStatusTable.setDescription('Table related to the ATM specific lines which could not be defined by MIB-II. The table includes the configuration information, operational status and error types of lines.')
linfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1), ).setIndexNames((0, "NEC-MIB", "linfIndex"))
if mibBuilder.loadTexts: linfStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linfStatusEntry.setDescription('Entry of the line interface status indication.')
linfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: linfIndex.setDescription('Index of the line interface status indication')
linfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 80, 81, 82, 97, 98, 99))).clone(namedValues=NamedValues(("normal", 1), ("los", 2), ("lof", 3), ("loc", 4), ("ais-path", 5), ("ais-section", 6), ("yellow-section", 7), ("yellow-path", 8), ("lop", 9), ("ais", 10), ("payload-all-one", 11), ("rai", 12), ("oof", 13), ("idle", 14), ("rdi", 15), ("plcp-oof", 16), ("plcp-lof", 17), ("plcp-yellow", 18), ("red", 19), ("loss-of-64K-clock", 80), ("loss-of-8K-clock", 81), ("frequency-out-of-range", 82), ("failure", 97), ("administratively-down", 98), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: linfStatus.setDescription('Status of the line interface or the receive clock')
linfLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("others", 1), ("normal", 2), ("localLoopBack", 3), ("remoteLoopBack", 4), ("notInstalled", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linfLoopBack.setStatus('mandatory')
if mibBuilder.loadTexts: linfLoopBack.setDescription('Loop back status')
linfConf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 99))).clone(namedValues=NamedValues(("others", 1), ("private-UNI", 2), ("private-NNI", 3), ("public-UNI", 4), ("uni", 6), ("nni", 7), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfConf.setStatus('mandatory')
if mibBuilder.loadTexts: linfConf.setDescription('Line card type.')
linfFwdAvailableBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfFwdAvailableBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: linfFwdAvailableBandWidth.setDescription('Forward Available BandWidth(Mbps). JpnToEng[PKG̤,0]')
linfBkwdAvailableBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfBkwdAvailableBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: linfBkwdAvailableBandWidth.setDescription('Backward Available BandWidth(Mbps). JpnToEng[PKG̤,0]')
linfJ2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("not-leased-line", 1), ("type-3-Mbps", 2), ("type-4point5-Mbps", 3), ("type-6point3-Mbps", 4), ("notInstalled", 99))))
if mibBuilder.loadTexts: linfJ2Rate.setStatus('mandatory')
if mibBuilder.loadTexts: linfJ2Rate.setDescription('Indicate the line rate of the J2-dedicated line service.')
linfCacFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 1000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linfCacFactor.setStatus('mandatory')
if mibBuilder.loadTexts: linfCacFactor.setDescription('JpnToEng(Ԥ7ʬ)')
linfLoopBackCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("succeed", 1), ("diagnosis", 2), ("failure", 3), ("notSupportedByPkg", 4), ("alreadyRegistered", 5), ("adminDown", 6), ("initializing", 7), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfLoopBackCause.setStatus('mandatory')
if mibBuilder.loadTexts: linfLoopBackCause.setDescription('JpnToEng[ʪ롼ץХå.]')
linfBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfBandWidth.setStatus('mandatory')
if mibBuilder.loadTexts: linfBandWidth.setDescription('BandWidth[cell/s].JpnToEng[̵ޤPKG̤ 0.]')
linfRecommendation = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("other", 1), ("atmForum", 2), ("itu", 3), ("ttc", 4), ("frameRelayForum", 5), ("itu-t", 6), ("ansi", 7), ("fourVendor", 8), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfRecommendation.setStatus('mandatory')
if mibBuilder.loadTexts: linfRecommendation.setDescription('JpnToEng[б]')
linfUnassignedIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("notApplicable", 1), ("unAssigned", 2), ("idle", 3), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfUnassignedIdle.setStatus('mandatory')
if mibBuilder.loadTexts: linfUnassignedIdle.setDescription('Unassigned/Idle')
linfMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfMaxActiveVpiBits.setStatus('mandatory')
if mibBuilder.loadTexts: linfMaxActiveVpiBits.setDescription('The length of valid VPI bits.JpnToEng[PKG̤0.]')
linfMaxActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfMaxActiveVciBits.setStatus('mandatory')
if mibBuilder.loadTexts: linfMaxActiveVciBits.setDescription('The length of valid VCI bits.JpnToEng[PKG̤0.]')
linfPhysType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfPhysType.setStatus('mandatory')
if mibBuilder.loadTexts: linfPhysType.setDescription('JpnToEng[β°륹åȤ slotIfConfPhysType ]')
linfParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam1.setStatus('mandatory')
if mibBuilder.loadTexts: linfParam1.setDescription('JpnToEng(Σʬ)')
linfParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam2.setStatus('mandatory')
if mibBuilder.loadTexts: linfParam2.setDescription('JpnToEng(Σʬ)')
linfParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam3.setStatus('mandatory')
if mibBuilder.loadTexts: linfParam3.setDescription('JpnToEng(Σʬ)')
linfParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam4.setStatus('mandatory')
if mibBuilder.loadTexts: linfParam4.setDescription('JpnToEng(Σʬ)')
linfParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam5.setStatus('mandatory')
if mibBuilder.loadTexts: linfParam5.setDescription('JpnToEng(Σʬ)')
linfParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam6.setStatus('mandatory')
if mibBuilder.loadTexts: linfParam6.setDescription('JpnToEng(Σʬ)')
linfParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linfParam7.setStatus('mandatory')
if mibBuilder.loadTexts: linfParam7.setDescription('JpnToEng(Σʬ)')
linfFifoConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2), )
if mibBuilder.loadTexts: linfFifoConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfTable.setDescription('Indicate status of FIFO on the shaper-line card. * JpnToEng[SCR, MBSάȤCBRȤߤʤ, PCR\U000b8d64˥ԥ\U000e5c25졼ȤԤʤ.] * Relationship between PCR, SCR and MBS value. PCR >= SCR PCR >= MBS ')
linfFifoConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1), ).setIndexNames((0, "NEC-MIB", "linfFifoConfifIndex"), (0, "NEC-MIB", "linfFifoConfIndex"))
if mibBuilder.loadTexts: linfFifoConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfEntry.setDescription('Entry of FIFO status indication ')
linfFifoConfifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: linfFifoConfifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfifIndex.setDescription(' Line Interface Index ')
linfFifoConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: linfFifoConfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfIndex.setDescription(' Index of FIFO ')
linfFifoConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("overflow", 2))))
if mibBuilder.loadTexts: linfFifoConfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfStatus.setDescription(' Status of FIFO ')
linfFifoConfPeekRate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412830)))
if mibBuilder.loadTexts: linfFifoConfPeekRate.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfPeekRate.setDescription('Peak Cell rate (PCR) for shaper-line card.')
linfFifoConfSustainRate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412830)))
if mibBuilder.loadTexts: linfFifoConfSustainRate.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfSustainRate.setDescription(' Sustainable Cell Rate ( SCR) for shaper-line card.')
linfFifoConfMaxBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1412830)))
if mibBuilder.loadTexts: linfFifoConfMaxBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfMaxBurstSize.setDescription('Maximum Burst Size (MBS) for the shaper-line card.')
linfFifoConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))))
if mibBuilder.loadTexts: linfFifoConfRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: linfFifoConfRowStatus.setDescription(" This object is used to designate the setting method for the shaping rate from the manager. Also, this object returns the reply to the shaping rate setting request from the agent side. - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device; - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row but not to have it available for use by the managed device; and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. ")
connPvc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1))
connPvcOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1))
connPvcOpeLowPort = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowPort.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeLowPort.setDescription('Low-side line port number. ')
connPvcOpeLowVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowVpi.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeLowVpi.setDescription(' Low-side VPI number.')
connPvcOpeLowVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowVci.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeLowVci.setDescription(' Low-side VCI number.')
connPvcOpeHighPort = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 65), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighPort.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeHighPort.setDescription(' High-side line port number.')
connPvcOpeHighVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighVpi.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeHighVpi.setDescription(' High-side VPI number.')
connPvcOpeHighVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighVci.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeHighVci.setDescription(' High-side VCI number.')
connPvcOpeTopology = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uni-directional-VCC", 1), ("bi-directional-VCC", 2), ("uni-directional-VPC", 3), ("bi-directional-VPC", 4), ("broadcast-VPC", 5), ("broadcast-VCC", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeTopology.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeTopology.setDescription('Topology of the Connection.')
connPvcOpeTrafficType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeTrafficType.setDescription('Traffic Type.')
connPvcOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("allocate", 1), ("establish", 2), ("add", 3), ("delete", 4), ("remove", 5), ("free", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeStatus.setDescription('JpnToEng[PVC/Ԥʤ.]')
connPvcOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("rowExisting", 1), ("allocateSucceed", 2), ("vpivciLowBusy", 3), ("vpivciHighBusy", 4), ("vpivciOutOfRange", 5), ("rateLowOverFlow", 6), ("rateHighOverFlow", 7), ("broadcastTableFull", 8), ("inconsistentVPVC", 9), ("lineDiagnosis", 10), ("missMatchTrfType", 11), ("illegalLowFileName", 12), ("illegalHighFileName", 13), ("illegalLowShaper", 14), ("illegalHighShaper", 15), ("illegalOperation", 16), ("parameterIsNotEnough", 17), ("diagnostics", 18), ("otherFailure", 19), ("illegalLowRateForUPC", 20), ("illegalHighRateForUPC", 21), ("noSpecifiedConnection", 22), ("noCevc", 23), ("noDlci", 24), ("illegalTopology", 25), ("noLowShaperForGateway", 26), ("noHighShaperForGateway", 27), ("noPvcLowShaperForGateway", 28), ("noPvcHighShaperForGateway", 29), ("missMatchTrfTypeLowShaperForGateway", 30), ("missMatchTrfTypeHighShaperForGateway", 31), ("leafSetAnotherLine", 32), ("insusfficientPCRofProfile", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcOpeCause.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeCause.setDescription('The result of the connection operation.')
connPvcOpeLowFifoIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowFifoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeLowFifoIndex.setDescription('Shaper number of Forward. If shaping is not performed, designate 0.')
connPvcOpeHighFifoIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighFifoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeHighFifoIndex.setDescription('Shaper number of Backward. If shaping is not performed, designate 0.')
connPvcOpeLowParam1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowParam1.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeLowParam1.setDescription('UPC mode of Forward.')
connPvcOpeHighParam1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighParam1.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeHighParam1.setDescription('UPC mode of Backward.')
connPvcOpeLowParam2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 15), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeLowParam2.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeLowParam2.setDescription('Profile name of Forward. If nothing is designated, the string of size(0) is designated.')
connPvcOpeHighParam2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 1, 16), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcOpeHighParam2.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcOpeHighParam2.setDescription('Profile name of Backward. If nothing is designated, the string of size(0) is designated.')
connPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2), )
if mibBuilder.loadTexts: connPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTable.setDescription('JpnToEng(Σʬ)')
connPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1), ).setIndexNames((0, "NEC-MIB", "connPvcPort"), (0, "NEC-MIB", "connPvcVpi"), (0, "NEC-MIB", "connPvcVci"), (0, "NEC-MIB", "connPvcDirection"), (0, "NEC-MIB", "connPvcIndex"))
if mibBuilder.loadTexts: connPvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcEntry.setDescription('Entry of connPvcTable. e.g. receive +----------------------------------+transmit =======>| ---- uni-directional-VCC ---- |=======> (1/0/32)| |(2/0/32) =======>| ---- bi-directional-VCC ---- |=======> (1/0/33)| |(2/0/33) =======>| ---- broadcast - VCC ---+---- |=======> (1/0/34)| | |(2/0/34) | +---- |=======> | |(3/0/34) +----------------------------------+ (line/vpi/vci) connPvcContrastPort.1.0.32.1.1=2 connPvcContrastPort.2.0.32.2.1=1 connPvcContrastPort.1.0.33.3.1=2 connPvcContrastPort.2.0.33.3.1=1 connPvcContrastPort.1.0.34.5.1=2 connPvcContrastPort.1.0.34.5.2=3 connPvcContrastPort.2.0.34.4.1=1 connPvcContrastPort.3.0.34.4.1=1')
connPvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: connPvcPort.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcPort.setDescription('Line port number')
connPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: connPvcVpi.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcVpi.setDescription('VPI number')
connPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: connPvcVci.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcVci.setDescription('VCI number')
connPvcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("in-out", 3), ("multi-out", 4), ("multi-in", 5))))
if mibBuilder.loadTexts: connPvcDirection.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcDirection.setDescription('Indicate cell flow.')
connPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: connPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcIndex.setDescription('JpnToEng[å\U000e5c24륨ɥݥȤ ̤륤ǥå.]')
connPvcContrastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastPort.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastPort.setDescription('JpnToEng[å\U000e5c24륨ɥݥȤβֹ.]')
connPvcContrastVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastVpi.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastVpi.setDescription('JpnToEng[å\U000e5c24륨ɥݥȤVPIֹ.]')
connPvcContrastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastVci.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastVci.setDescription('JpnToEng[å\U000e5c24륨ɥݥȤVCIֹ.]')
connPvcTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("uni-directional-VCC", 1), ("bi-directional-VCC", 2), ("uni-directional-VPC", 3), ("bi-directional-VPC", 4), ("broadcast-VPC", 5), ("broadcast-VCC", 6), ("gateway", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTopology.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTopology.setDescription('Topology of the Connection.')
connPvcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrafficType.setDescription('Traffic Type.')
connPvcFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcFifoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcFifoIndex.setDescription('The Shaper numbers of the direction from this endpoint to the endpoint to be switched. Value 0 means that Shaping will not be performed.')
connPvcContrastFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastFifoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastFifoIndex.setDescription('The Shaper number of the direction from the endpoint to be switched to this end point. Value 0 means that Shaping will not be performed.')
connPvcTrfConf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("entry", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPvcTrfConf.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfConf.setDescription(" Indicate Traffic control/status. If a path does not exist, noSuchName. 1. Indicate Traffic status 1) entry...registered 2) remove...not registered(initial status) 2. Register Traffic 1) Set connPvcTrfConf to 'entry', to perform the registration process. 2) Then, get connPvcTrfResult. For normal end, it contains entrySucceed, for abnormal end, it contains other value. 3. Delete Traffic 1) Set connPvcTrfConf to 'remove', to perform the deletion process. 2) Then, get connPvTrfResult. For normal end, it contains entrySucceed, for abnormal end, it contains other value. ")
connPvcTrfResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("entrySucceed", 2), ("alreadyEntry", 3), ("tableOverflow", 4), ("removeSucceed", 5), ("notEntry", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfResult.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfResult.setDescription('Indicate the processing result after Traffic control. If the path does not exist, noSuchName. The result of the registration EntrySucceed (2) --- Normal end of the registration AlreadyEntry (3) --- Double registration tableOverflow (4) --- The number of registration is over the limit. The result of the deletion RemoveSucceed (5) --- Normal end of the deletion notEntry (6) --- Non-registration Normally, other (1) is indicated. It is the current status just after the traffic control. Once, the traffic control is got, then it returns to other (1). ')
connPvcParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam1.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcParam1.setDescription('UPC mode of the direction from this endpoint to the endpoint to be switched. If nothing is designated, or the designation is invalid, off (1) is indicated.')
connPvcContrastParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam1.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastParam1.setDescription('UPC mode of the direction from the endpoint to be switched to this end point. If nothing is designated, or the designation is invalid, off (1) is indicated.')
connPvcParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 17), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam2.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcParam2.setDescription('Profile name of the direction from this endpoint to the endpoint to be switched. If nothing is designated, or the designation is invalid, the string of size(0) is indicated.')
connPvcContrastParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 18), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam2.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastParam2.setDescription('Profile name of the direction from the endpoint to be switched to this end point. If nothing is designated, or the designation is invalid, the string of size(0) is indicated.')
connPvcParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam3.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcParam3.setDescription('PCR[cell/s] of the direction from this endpoint to the endpoint to be switched. If the value is invalid, -1 is indicated.')
connPvcContrastParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam3.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastParam3.setDescription('PCR[cell/s] of the direction from the endpoint to be switched to this end point. If the value is invalid, -1 is indicated.')
connPvcParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam4.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcParam4.setDescription('SCR[cell/s] of the direction from this endpoint to the endpoint to be switched. If the value is invalid, -1 is indicated.')
connPvcContrastParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam4.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastParam4.setDescription('SCR[cell/s] of the direction from the endpoint to be switched to this end point. If the value is invalid, -1 is indicated.')
connPvcParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam5.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcParam5.setDescription('MBS[cell] of the direction from this endpoint to the endpoint to be switched. If the value is invalid, -1 is indicated.')
connPvcContrastParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam5.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastParam5.setDescription('MBS[cell] of the direction from the endpoint to be switched to this end point. If the value is invalid, -1 is indicated.')
connPvcParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcParam6.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcParam6.setDescription('EPD(Early Packet Discard) of the direction from this endpoint to the endpoint to be switched. Indicate if the discard processing in the unit of AAL5 packet should be performed or not when the threshold is exceeded. If the value is invalid, off(1) is indicated.')
connPvcContrastParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcContrastParam6.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastParam6.setDescription('EPD(Early Packet Discard) of the direction from the endpoint to be switched to this end point. Indicate if the discard processing in the unit of AAL5 packet should be performed or not when the threshold is exceeded. If the value is invalid, off(1) is indicated.')
connPvcParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 27), Integer32())
if mibBuilder.loadTexts: connPvcParam7.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcParam7.setDescription('MCR[cell/s]. Not supported here.')
connPvcContrastParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 2, 1, 28), Integer32())
if mibBuilder.loadTexts: connPvcContrastParam7.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcContrastParam7.setDescription('MCR[cell/s]. Not supported here.')
connPvcTrfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3), )
if mibBuilder.loadTexts: connPvcTrfTable.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfTable.setDescription(' Indicate traffic counter information per connection.')
connPvcTrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1), ).setIndexNames((0, "NEC-MIB", "connPvcPort"), (0, "NEC-MIB", "connPvcVpi"), (0, "NEC-MIB", "connPvcVci"), (0, "NEC-MIB", "connPvcDirection"), (0, "NEC-MIB", "connPvcIndex"))
if mibBuilder.loadTexts: connPvcTrfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfEntry.setDescription(' Entry of traffic per connection. Every INDEX is equivalent to the one defined in connPvcEntry.')
connPvcTrfInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInCells.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfInCells.setDescription(' The number of receive cells 64 bit counter')
connPvcTrfInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfInCellsCounters.setDescription(' The number of receive cells 32 bit counter')
connPvcTrfOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfOutCells.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfOutCells.setDescription(' The number of transmit cells 64 bit counter')
connPvcTrfOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfOutCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfOutCellsCounters.setDescription(' The number of transmit cells 32 bit counter')
connPvcTrfInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInDropCells.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfInDropCells.setDescription(' The number of receive drop cells 64 bit counter ')
connPvcTrfInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPvcTrfInDropCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: connPvcTrfInDropCellsCounters.setDescription(' The number of receive drop cells 32 bit counter')
connConf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2))
connConfNode = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1))
connConfNodePvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodePvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfNodePvcs.setDescription('The number of current established PVCs in this switch.')
connConfNodeSvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfNodeSvcs.setDescription('The number of current established SVCs in this switch.')
connConfNodeSoftPvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeSoftPvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfNodeSoftPvcs.setDescription('The number of current established Soft PVPCs/PVCCs in this switch.')
connConfNodeTrafClear = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allClear", 1), ("noOperation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connConfNodeTrafClear.setStatus('mandatory')
if mibBuilder.loadTexts: connConfNodeTrafClear.setDescription('Set allClear (1) to clear all traffic registration information. If noOperation (2) is written, nothing will be performed. The value at read is always noOperation (2).')
connConfNodeTrafs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeTrafs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfNodeTrafs.setDescription(' The number of traffic registrations which are being set in the switch. ')
connConfNodeCompleteSvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeCompleteSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfNodeCompleteSvcs.setDescription(' The number of SVC complete calls ')
connConfNodeUnCompleteSvcs = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfNodeUnCompleteSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfNodeUnCompleteSvcs.setDescription(' The number of SVC incomplete calls ')
connConfIfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2), )
if mibBuilder.loadTexts: connConfIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: connConfIfTable.setDescription(' The table is used to show the information of current established connections on the interface.')
connConfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: connConfIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connConfIfEntry.setDescription('Entry of connConfIfTable.')
connConfIfPvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfIfPvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfIfPvcs.setDescription(' The number of current established PVCs on the interface.')
connConfIfSvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfIfSvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfIfSvcs.setDescription(' The number of current established SVCs on the interface.')
connConfIfSoftPvcs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConfIfSoftPvcs.setStatus('mandatory')
if mibBuilder.loadTexts: connConfIfSoftPvcs.setDescription(' The number of current established Soft PVPCs/PVCCs on the interface.')
connRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3))
class DstAtmAddressFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("noWriting", -1), ("e-164", 1), ("nsap", 2))

class DstAtmAddressLength(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(4, 160), ValueRangeConstraint(-1, -1), )
class DstAtmAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class DstPrimaryIfIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), )
class DstPrimaryVPI(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(-1, -1), )
class DstSecondaryIfIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), )
class DstSecondaryVPI(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(-1, -1), )
connRouteOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1))
connRouteOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("add", 2), ("delete", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connRouteOpeStatus.setDescription(' allocate : allocate the right to operate the routing information to a manager. add : add the routing information to static routing table. delete : delete the routing information from static routing table. free : free the right to operate the routing information from a manager. +-------------+ | | +---+----+<---+ ----------->|free|<----------------- | +----+ | | | | +--------+ +----------+ | ---->|allocate| -----> |add/delete|- +--------+ +----------+ ')
class ConnRouteOpeFailureCause(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("noWriting", -1), ("other", 1), ("allocateSucceed", 2), ("tableIsFull", 3), ("parameterIsNotEnough", 4), ("specifiedAddressIsIllegal", 5), ("specifiedAddressIsAlreadyExisting", 6), ("specifiedAddressIsNotExisting", 7))

connRouteOpeFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 2), ConnRouteOpeFailureCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteOpeFailureCause.setStatus('mandatory')
if mibBuilder.loadTexts: connRouteOpeFailureCause.setDescription('The result of the operation.')
connRouteOpeAddressFormat = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 3), DstAtmAddressFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeAddressFormat.setStatus('mandatory')
connRouteOpeAddressLength = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 4), DstAtmAddressLength()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeAddressLength.setStatus('mandatory')
connRouteOpeAddress = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 5), DstAtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeAddress.setStatus('mandatory')
connRouteOpePrimaryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 6), DstPrimaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpePrimaryIfIndex.setStatus('mandatory')
connRouteOpePrimaryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 7), DstPrimaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpePrimaryVPI.setStatus('mandatory')
connRouteOpeSecondaryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 8), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSecondaryIfIndex.setStatus('mandatory')
connRouteOpeSecondaryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 9), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSecondaryVPI.setStatus('mandatory')
connRouteOpeTertiaryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 10), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeTertiaryIfIndex.setStatus('mandatory')
connRouteOpeTertiaryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 11), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeTertiaryVPI.setStatus('mandatory')
connRouteOpeFourthryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 12), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFourthryIfIndex.setStatus('mandatory')
connRouteOpeFourthryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 13), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFourthryVPI.setStatus('mandatory')
connRouteOpeFifthryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 14), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFifthryIfIndex.setStatus('mandatory')
connRouteOpeFifthryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 15), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeFifthryVPI.setStatus('mandatory')
connRouteOpeSixthryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 16), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSixthryIfIndex.setStatus('mandatory')
connRouteOpeSixthryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 17), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSixthryVPI.setStatus('mandatory')
connRouteOpeSeventhryIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 18), DstSecondaryIfIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSeventhryIfIndex.setStatus('mandatory')
connRouteOpeSeventhryVPI = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 1, 19), DstSecondaryVPI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRouteOpeSeventhryVPI.setStatus('mandatory')
connRouteTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2), )
if mibBuilder.loadTexts: connRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: connRouteTable.setDescription('This table is used to show the static routing table for SVC.')
connRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1), ).setIndexNames((0, "NEC-MIB", "connRouteAtmAddressFormat"), (0, "NEC-MIB", "connRouteAtmAddressLength"), (0, "NEC-MIB", "connRouteAtmAddress"))
if mibBuilder.loadTexts: connRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connRouteEntry.setDescription('Entry of connRouteTable.')
connRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: connRouteType.setDescription('The value of this object shows the routing type.')
connRoutePrimaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 2), DstPrimaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryIfIndex.setStatus('mandatory')
connRoutePrimaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 3), DstPrimaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryVPI.setStatus('mandatory')
connRouteSecondaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 4), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSecondaryIfIndex.setStatus('mandatory')
connRouteSecondaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 5), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSecondaryVPI.setStatus('mandatory')
connRouteTertiaryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 6), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteTertiaryIfIndex.setStatus('mandatory')
connRouteTertiaryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 7), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteTertiaryVPI.setStatus('mandatory')
connRouteFourthryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 8), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFourthryIfIndex.setStatus('mandatory')
connRouteFourthryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 9), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFourthryVPI.setStatus('mandatory')
connRouteFifthryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 10), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFifthryIfIndex.setStatus('mandatory')
connRouteFifthryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 11), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteFifthryVPI.setStatus('mandatory')
connRouteSixthryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 12), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSixthryIfIndex.setStatus('mandatory')
connRouteSixthryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 13), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSixthryVPI.setStatus('mandatory')
connRouteSeventhryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 14), DstSecondaryIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSeventhryIfIndex.setStatus('mandatory')
connRouteSeventhryVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 15), DstSecondaryVPI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteSeventhryVPI.setStatus('mandatory')
connRoutePrimaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connRoutePrimaryStatus.setDescription('Operational status of the primary routing. If the primary route of the routing table of the equipment is valid, enable(2), if not valid, disable(1).')
connRoutePrimaryCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 99))).clone(namedValues=NamedValues(("normal", 0), ("other", 1), ("outOfService", 2), ("testing", 3), ("lineInterface-Down", 4), ("lineInterface-Failure", 5), ("sw-Engine-Failure", 6), ("sw-Engine-SwapOUT", 7), ("notInstalled", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRoutePrimaryCause.setStatus('mandatory')
if mibBuilder.loadTexts: connRoutePrimaryCause.setDescription('Cause of the switching from the primary route.')
connRouteAtmAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 18), DstAtmAddressFormat())
if mibBuilder.loadTexts: connRouteAtmAddressFormat.setStatus('mandatory')
connRouteAtmAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 19), DstAtmAddressLength())
if mibBuilder.loadTexts: connRouteAtmAddressLength.setStatus('mandatory')
connRouteAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 3, 2, 1, 20), DstAtmAddress())
if mibBuilder.loadTexts: connRouteAtmAddress.setStatus('mandatory')
connSoftPvcIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcIndexNext.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcIndexNext.setDescription('This object returns the empty index of the call management table, required to access to connSoftPvcTable. ')
connSoftPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5), )
if mibBuilder.loadTexts: connSoftPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcTable.setDescription(" This table include all entries to Soft-PVPC/PVCC currently available between the lines or the line and CPU port of the switch. Also, this table is used to set or delete Soft-PVPC/PVCC. The operable connection form between Soft-PVPC/PVCC is bi- directional point-to-point only. The procedure to set the connection is as follows: 1. Acquire connSoftPvcIndex To set the connection, read connSoftPvcIndexNext and obtain an index of the Soft-PVPC/PVCC table. The index must be managed by NMS. (The index is required to take an action to the connection.) 2. Set createAndWait Set connSoftPvcRowStatus to CreateAndWait, using the obtained connSoftPvcIndex as index. If the agent will set the parameter for the Soft-PVPC/PVCC setting to the default value and make connSoftRowStatus to notReady. However, the same manager cannot create another row while creating a row (the status of the row is notRedy or notInService). 3. Get the default value Get the default value of the object which serves as parameter for the connection setting. (The agent shall return -1 if it does not have a default value.) Default values are as follows: connSoftPvcTopology bi-directional-VCC(2) connSoftPvcTrafficType traffic-UBR(5) connSoftPvcEndpointType calling(1) connSoftPvcRetry 2 connSoftPvcSrcAtmAddressFormat nsap(2) connSoftPvcSrcAtmAddressLength None connSoftPvcSrcAtmAddress 0 length string connSoftPvcSrcIfIndex None connSoftPvcSrcVPI None connSoftPvcSrcVCI None connSoftPvcDstAtmAddressFormat nsap(2) connSoftPvcDstAtmAddressLength None connSoftPvcDstAtmAddress 0 length string connSoftPvcDstIfIndex None connSoftPvcDstVPI None connSoftPvcDstVCI None connSoftPvcSrcFifoIndex 0 connSoftPvcDstFifoIndex 0 connSoftPvcNodeKind model5(1) connSoftPvcSrcParam1 off(1) connSoftPvcDstParam1 off(1) connSoftPvcSrcParam2 0 length string connSoftPvcDstParam2 0 length string connSoftPvcSrcParam3 -1 connSoftPvcDstParam3 -1 connSoftPvcSrcParam4 -1 connSoftPvcDstParam4 -1 connSoftPvcSrcParam5 -1 connSoftPvcDstParam5 -1 connSoftPvcSrcParam6 off(2) connSoftPvcDstParam6 off(2) connSoftPvcSrcParam7 None (not installed) connSoftPvcDstParam7 None (not installed) 4. Set parameter If a parameter does not have a default value, or the default value should not be used, set the parameter to a value. If all parameters are set, the agent shall make connSoftPvcRowStatus to notInService. 5. Set active By doing so, the agent checks parameters, resources and establishes the connection. 6. Get connSoftPvcRowStatus If connSoftPvcRowStatus is active, the connection setting completed successfully, if notInService,the connection setting failed. For the cause, refer to connSoftPvcCause. (Note) When the connection setting has failed, if the connection is not released, the row will remain. 7. Get connSoftPvcRestRetry Remaining counts of retry are contained. If it is positive value, the retry is in progress. If connSoftPvcRestRetry is 0, the retry completed. The result of the connection setting should be seen, when this object is 0. -1 means that infinite retry is in progress. ***Special pattern*** (1) If connSoftPvcTopology is bi-directional-VPC, set connSoftPvcSrcVCI, connSoftPvcDstVCI to 0. The procedure to release the connection is as follows: 1. Set 'destroy' Set connSoftPvcRowStatus to 'destroy', using connSoftPvcIndex of the connection to be deleted as index. The agent will delete the connection, referring to it. (Note) 'destroy' can also be set during the bypass processing. 2. Get the result If the connection is deleted, 'get' of connSoftPvcTable of the designated index becomes NoSuchName. The bypass processing of connection 1. Set notInService When the agent executes the bypass processing of connection, set connSoftPvcRowStatus to notInService, and then establish the connection. 2. Get connSoftPvcRowStatus If connSoftPvcRowStatus is 'active', the bypass connection setting has completed successfully. If connSoftPvcRowStatus remains 'notInService', the connection setting has failed. Others 1. The cut and recovery processing of connection is performed, following the delete and set procedures of the concerned connection. Each procedure is as stated before.")
connSoftPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1), ).setIndexNames((0, "NEC-MIB", "connSoftPvcIndex"))
if mibBuilder.loadTexts: connSoftPvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcEntry.setDescription(' Entry of ATMSoft-PVPC/PVCC connection ')
connSoftPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcIndex.setDescription('The value of this object is equal to the connSoftPvcIndexNext. 1 - 128 : Soft PVPCs/PVCCs')
connSoftPvcTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("bi-directional-VCC", 2), ("bi-directional-VPC", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcTopology.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcTopology.setDescription('Topology of the Connection.')
connSoftPvcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcTrafficType.setDescription('Traffic Type.')
connSoftPvcEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calling", 1), ("called", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcEndpointType.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcEndpointType.setDescription('Type of Endpoint.')
connSoftPvcRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcRetry.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcRetry.setDescription('Number of retry. 0 - 15 : Number of retry -1 : Infinite retry')
class ConnSoftPvcSrcAtmAddressFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("noWriting", -1), ("e-164", 1), ("nsap", 2))

connSoftPvcSrcAtmAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 6), ConnSoftPvcSrcAtmAddressFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddressFormat.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddressFormat.setDescription('AtmAdress format. ')
connSoftPvcSrcAtmAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 160), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddressLength.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddressLength.setDescription('The valid bit length of connSoftPvcSrcAtmAddress. The value(-1) is read-only. The value(4..160) must be a multiple of 4.')
connSoftPvcSrcAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcAtmAddress.setDescription('NodeId of source node. Its maximum length is 13 bytes. This object length is 20 bytes in case AtmAddress is setting. If the last semi OCTET is invalid, it is padded with 0xf. The value of size(0) is read-only.')
connSoftPvcSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcIfIndex.setDescription('The number of the calling line. (ifIndex of ifEntry)')
connSoftPvcSrcVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcVPI.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcVPI.setDescription('VPI value of the calling line.')
connSoftPvcSrcVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcVCI.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcVCI.setDescription('VCI value of the calling line.')
class ConnSoftPvcDstAtmAddressFormat(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("noWriting", -1), ("e-164", 1), ("nsap", 2))

connSoftPvcDstAtmAddressFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 12), ConnSoftPvcDstAtmAddressFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstAtmAddressFormat.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstAtmAddressFormat.setDescription('AtmAdress format. ')
connSoftPvcDstAtmAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(4, 160), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstAtmAddressLength.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstAtmAddressLength.setDescription('The valid bit length of connSoftPvcDstAtmAddress. The value(-1) is read-only. The value(4..160) must be a multiple of 4.')
connSoftPvcDstAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstAtmAddress.setDescription('NodeId of destination node. Its maximum length is 13 bytes. This object length is 20 bytes in case AtmAddress is setting. If the last semi OCTET is invalid, it is padded with 0xf. The value of size(0) is read-only.')
connSoftPvcDstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 99), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstIfIndex.setDescription('The number of the called line. (ifIndex of ifEntry)65 is GateWay.')
connSoftPvcDstVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstVPI.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstVPI.setDescription('VPI value of the called line.')
connSoftPvcDstVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstVCI.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstVCI.setDescription('VCI value of the called line.')
connSoftPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcRowStatus.setDescription("It is used from the manager to order the setting method of the Soft PVC connection. It is used from the agent side to return the result of the connection setting request. - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device; - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row but not to have it available for use by the managed device; and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. ")
connSoftPvcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("rowExisting", 1), ("vpivciSrcBusy", 2), ("vpivciDstBusy", 3), ("vpivciOutOfRange", 4), ("rateSrcOverFlow", 5), ("rateDstOverFlow", 6), ("dataTableFull", 7), ("inconsistentVPVC", 8), ("lineDiagnosis", 9), ("missMatchTrfType", 10), ("illegalSrcFileName", 11), ("illegalDstFileName", 12), ("lineOutOfOrder", 13), ("illegalSrcShaper", 14), ("illegalOperation", 15), ("parameterIsNotEnough", 16), ("diagnostics", 17), ("otherFailure", 18), ("illegalSrcRateForUPC", 19), ("noCevc", 20), ("noDlci", 21), ("noSrcShaperForGateway", 22), ("noPvcSrcShaperForGateway", 23), ("missMatchTrfTypeSrcShaperForGateway", 24), ("insusfficientPCRofProfile", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcCause.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcCause.setDescription('Object to indicate the result of the connection setting.')
connSoftPvcRestRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcRestRetry.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcRestRetry.setDescription('Remaining number of retry 0 - 15 : Remaining number of retry -1 : Infinite retry in progress')
connSoftPvcSrcFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcFifoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcFifoIndex.setDescription(' Designate the Shaper number of the calling line. If the Shaping is not performed, designate 0. ')
connSoftPvcDstFifoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstFifoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstFifoIndex.setDescription(" Designate the Shaper number of the called line. If the Shaping is not performed, designate 0. However, if the called sw is not furnished with the shaping function, this value has no meaning. Since it cannot be recognized if this value is set on the called side, the value is regarded as 'the value set by the calling side'.")
connSoftPvcNodeKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("model5", 1), ("model7", 2), ("model5E", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcNodeKind.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcNodeKind.setDescription('Designate/indicate the machine type on the called side. ')
connSoftPvcSrcParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcParam1.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcParam1.setDescription('UPC mode of the calling line.')
connSoftPvcDstParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("mode1", 2), ("mode2", 3), ("mode3", 4), ("mode4", 5), ("mode5", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstParam1.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstParam1.setDescription('UPC mode of the called line.')
connSoftPvcSrcParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 26), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcSrcParam2.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcParam2.setDescription('Profile name of Forward. If nothing is designated, the string of size(0) is designated.')
connSoftPvcDstParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 27), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(1, 10), ValueSizeConstraint(0, 0), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connSoftPvcDstParam2.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstParam2.setDescription('Profile name of Backward. If nothing is designated, the string of size(0) is designated.')
connSoftPvcSrcParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam3.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcParam3.setDescription('PCR[cell/s] of Forward. If the value is invalid, -1 is indicated.')
connSoftPvcDstParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam3.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstParam3.setDescription('PCR[cell/s] of Backward. If the value is invalid, -1 is indicated.')
connSoftPvcSrcParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam4.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcParam4.setDescription('SCR[cell/s] of Forward. If the value is invalid, -1 is indicated.')
connSoftPvcDstParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam4.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstParam4.setDescription('SCR[cell/s] of Backward. If the value is invalid, -1 is indicated.')
connSoftPvcSrcParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam5.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcParam5.setDescription('MBS[cell] of Forward. If the value is invalid, -1 is indicated.')
connSoftPvcDstParam5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam5.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstParam5.setDescription('MBS[cell] of Backward. If the value is invalid, -1 is indicated.')
connSoftPvcSrcParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcSrcParam6.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcParam6.setDescription('EPD(Early Packet Discard) of Forward. Indicate if the discard processing in the unit of AAL5 packet should be performed or not when the threshold is exceeded. If the value is invalid, off(2) is indicated.')
connSoftPvcDstParam6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcDstParam6.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstParam6.setDescription('EPD(Early Packet Discard) of Backward. Indicate if the discard processing in the unit of AAL5 packet should be performed or not when the threshold is exceeded. If the value is invalid, off(2) is indicated.')
connSoftPvcSrcParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 36), Integer32())
if mibBuilder.loadTexts: connSoftPvcSrcParam7.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcSrcParam7.setDescription('MCR[cell/s]. Not supported here.')
connSoftPvcDstParam7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 5, 1, 37), Integer32())
if mibBuilder.loadTexts: connSoftPvcDstParam7.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcDstParam7.setDescription('MCR[cell/s]. Not supported here.')
class ConnSoftPvcEstSrcInfIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

connSoftPvcEstablishedSrcInfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6), )
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInfTable.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInfTable.setDescription(' The table regarding the calling node of the Soft PVPC/PVCC established as called side office by the local node')
connSoftPvcEstablishedSrcInfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6, 1), ).setIndexNames((0, "NEC-MIB", "connSoftPvcEstSrcInfIndex"))
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInfEntry.setDescription(' The entry of the calling side node information of the Soft PVPC/PVCC established as the called side office by the local node')
connSoftPvcEstablishedSrcInf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInf.setStatus('mandatory')
if mibBuilder.loadTexts: connSoftPvcEstablishedSrcInf.setDescription(" The calling node information of the Soft PVPC/PVCC established as called side office by the node. The structure of the entry is as follows struct { long SrcAtmAddressFormat; long SrcAtmAddressLength; char SrcAtmAddress[20]; }; (*1) 'long' data should be stored with 'big endian'. (*2) For SrcAtmAddress data, if it is less than 20 byte, the data padded by '0xf' shall be stored. This information is divided into up to 32 pieces, and each piece is put into the head 4 bytes (count) of an entry. The data which contains the number of the entries is described below. +-----------------+ | count | (= n) +-----------------+ | EstSrcInf 1 | |.................| | EstSrcInf 2 | |.................| | . | | . | | . | |.................| | EstSrcInf n | ( 1 <= n <= 32 ) +-----------------+ ")
connSoftPvcEstSrcInfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 6, 1, 2), ConnSoftPvcEstSrcInfIndex())
if mibBuilder.loadTexts: connSoftPvcEstSrcInfIndex.setStatus('mandatory')
connOam = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7))
connOamOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1))
connOamOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("add", 2), ("delete", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeStatus.setDescription(' Used to set/delete OAM End-point, Connecting-point.')
connOamOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("succeed", 2), ("parameterIsNotEnough", 3), ("tableIsFull", 4), ("illegalPoint", 5), ("illegalMode", 6), ("illegalSection", 7), ("illegalPort", 8), ("illegalVpiVci", 9), ("invalidBufferType", 10), ("noSuchConnection", 11), ("alreadyRegistered", 12), ("notExisting", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamOpeCause.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeCause.setDescription(' The result of the processing to set/delete OAM End-point, Connecting-point.')
connOamOpePoint = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("end-point", 1), ("connecting-point", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpePoint.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpePoint.setDescription('End-point / Connecting-point.')
connOamOpeMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeMode.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeMode.setDescription(' Mode. F4 (VP level)/f5 (VC level) ')
connOamOpeSection = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end-to-end", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeSection.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeSection.setDescription(' Point between segments/End-to-End point.')
connOamOpePort1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpePort1.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpePort1.setDescription(' Line number')
connOamOpePort2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpePort2.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpePort2.setDescription(" Line number. Upon setting/deleting end-point, don't care about it.")
connOamOpeVpi1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVpi1.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeVpi1.setDescription('VPI.')
connOamOpeVpi2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVpi2.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeVpi2.setDescription(" VPI. Upon setting/deleting end-point, don't care about it. ")
connOamOpeVci1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVci1.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeVci1.setDescription(" VCI. JpnToEng[f4 ٥ / Don't care.]")
connOamOpeVci2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connOamOpeVci2.setStatus('mandatory')
if mibBuilder.loadTexts: connOamOpeVci2.setDescription(" VCI. JpnToEng[End-point ޤ f4 ٥ / Don't care.]")
connOamTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2), )
if mibBuilder.loadTexts: connOamTable.setStatus('mandatory')
if mibBuilder.loadTexts: connOamTable.setDescription(' OAM End-point, Connecting-point indication table ')
connOamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1), ).setIndexNames((0, "NEC-MIB", "connOamPort"), (0, "NEC-MIB", "connOamIndex"))
if mibBuilder.loadTexts: connOamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connOamEntry.setDescription(' OAM End-point, Connecting-point indication entry ')
connOamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: connOamPort.setStatus('mandatory')
if mibBuilder.loadTexts: connOamPort.setDescription(' Line number')
connOamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 144)))
if mibBuilder.loadTexts: connOamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connOamIndex.setDescription('OAM End-point / Connecting-point Index.')
connOamContrastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamContrastPort.setStatus('mandatory')
if mibBuilder.loadTexts: connOamContrastPort.setDescription(' Line number of the opposite line. For End-point, -1.')
connOamVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamVpi.setStatus('mandatory')
if mibBuilder.loadTexts: connOamVpi.setDescription('VPI.')
connOamContrastVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamContrastVpi.setStatus('mandatory')
if mibBuilder.loadTexts: connOamContrastVpi.setDescription(' Opposite VPI. For End-point, -1. ')
connOamVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamVci.setStatus('mandatory')
if mibBuilder.loadTexts: connOamVci.setDescription(' VCI. For the f4 level, -1.')
connOamContrastVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamContrastVci.setStatus('mandatory')
if mibBuilder.loadTexts: connOamContrastVci.setDescription(' Opposite VCI. JpnToEng[End-point ޤ f4٥ξ -1.]')
connOamPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("end-point", 1), ("connecting-point", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamPoint.setStatus('mandatory')
if mibBuilder.loadTexts: connOamPoint.setDescription('End-point / Connecting-point.')
connOamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamMode.setStatus('mandatory')
if mibBuilder.loadTexts: connOamMode.setDescription(' Mode. F4 (VP level)/f5 (VC level). ')
connOamSection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end-to-end", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamSection.setStatus('mandatory')
if mibBuilder.loadTexts: connOamSection.setDescription(' Point between segments/End-to-End point.')
connOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("receive-AIS", 3), ("receive-RDI", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connOamStatus.setDescription(' Receive status of end-point.')
connOamDefectType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("normal", 1), ("los", 2), ("lof", 3), ("loc", 4), ("ais-path", 5), ("ais-section", 6), ("yellow-section", 7), ("yellow-path", 8), ("lop", 9), ("ais", 10), ("payload-all-one", 11), ("rai", 12), ("oof", 13), ("idle", 14), ("rdi", 15), ("plcp-oof", 16), ("plcp-lof", 17), ("plcp-yellow", 18), ("red", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamDefectType.setStatus('mandatory')
if mibBuilder.loadTexts: connOamDefectType.setDescription(" Fault cause in the receive cell. For Connecting-point, return 'normal (1)'.")
connOamDefectNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOamDefectNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: connOamDefectNodeID.setDescription(" Node ID of the Switch which sends alarm transfer cells. For connecting-point, return '0 length string'.")
connLoop = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8))
connLoopOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1))
connLoopOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("action", 2), ("endtest", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeStatus.setDescription('JpnToEng[롼ץХå\uee33.]')
connLoopOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("succeed", 1), ("abort", 2), ("other", 3), ("vpivciOutOfRange", 4), ("parameterFailed", 5), ("admindown", 6), ("nonePkg", 7), ("noneBuffer2", 8), ("lineLoopback", 9), ("resetSlot", 10), ("noneLoopBackId", 11), ("execute", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeCause.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeCause.setDescription('JpnToEng[롼ץХå\uee33η.]')
connLoopOpeMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f4", 1), ("f5", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeMode.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeMode.setDescription('F4 (VP level)/f5 (VC level).')
connLoopOpeBase = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("segment", 1), ("end-end", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeBase.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeBase.setDescription('JpnToEng[ƥȥ١Υե.]')
connLoopOpeLoopBackPointNodeId = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeLoopBackPointNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeLoopBackPointNodeId.setDescription('JpnToEng[롼ץХåޤ֤ Switch LoopBackID.]')
connLoopOpeCorrelationTag = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeCorrelationTag.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeCorrelationTag.setDescription('JpnToEng[ȼ бդ뤿ξ.]')
connLoopOpeCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeCount.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeCount.setDescription('JpnToEng[롼ץХå\uee33μ»ܲ.]')
connLoopOpePort = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpePort.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpePort.setDescription('JpnToEng[иβֹ.]')
connLoopOpeVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeVpi.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeVpi.setDescription('JpnToEng[и VPI.]')
connLoopOpeVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeVci.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeVci.setDescription("JpnToEng[и VCI. f4 (VP٥) Ǥν Don't care Ȥ.]")
connLoopOpeNormalEndCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeNormalEndCount.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeNormalEndCount.setDescription('JpnToEng[롼ץХå\uee33ｪλ.]')
connLoopOpeAbnormalEndCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeAbnormalEndCount.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeAbnormalEndCount.setDescription('JpnToEng[롼ץХå\uee33۾ｪλ.]')
connLoopOpeAbortCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLoopOpeAbortCount.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeAbortCount.setDescription('JpnToEng[롼ץХå\uee33ǲ.]')
connLoopOpeLoopBackPointIdLength = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 8, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLoopOpeLoopBackPointIdLength.setStatus('mandatory')
if mibBuilder.loadTexts: connLoopOpeLoopBackPointIdLength.setDescription('JpnToEng[롼ץХåޤ֤ Switch LoopBack Location ID ϥ(bitĹ).,4ӥåñ̤Ǥꤢ.]')
connProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9))
class ConnProfileIndex(Integer32):
    pass

connProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 1), ConnProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connProfileIndexNext.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileIndexNext.setDescription('Shows the empty index value of connProfileTable(including row of notReady, notInService). If the number of profiles reaches the registration limit, 0. ')
connProfileTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2), )
if mibBuilder.loadTexts: connProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileTable.setDescription(' Table to set/indicate the profile. ')
connProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1), ).setIndexNames((0, "NEC-MIB", "connProfileIndex"))
if mibBuilder.loadTexts: connProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileEntry.setDescription(' Entry of connProfileTable.')
connProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 1), ConnProfileIndex())
if mibBuilder.loadTexts: connProfileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileIndex.setDescription(' Index value of connProfileTable.')
connProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileRowStatus.setDescription(' Used to control rows of the table.')
connProfileCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("inconsistentEpd", 3), ("parameterNotEnough", 4), ("alreadyExist", 5), ("duplicateName", 6), ("inconsistentRate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connProfileCause.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileCause.setDescription(' The result of Profile setting processing.')
connProfileTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("traffic-CBR", 1), ("traffic-rt-VBR", 2), ("traffic-nrt-VBR", 3), ("traffic-ABR", 4), ("traffic-UBR", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileTrafficType.setDescription('Traffic Type.')
connProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileName.setDescription(' Profile name. Available characters: alphanumeric characters 0 length string is only read.')
connProfileParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1412830), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam1.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileParam1.setDescription(' For ph1/2-buffer, peek cell rate [cell/sec]. If it is invalid, -1. JpnToEng[ABR -1 ξ, Ӱ/UPC\U000a4de4ʤȤ\U000bca24.]')
connProfileParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1412830), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam2.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileParam2.setDescription(' For ph1/2-buffer, Sustainable cell rate [cell/sec]. Only nrt-VBR, and rt-VBR are valid. If it is invalid, -1. ')
connProfileParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1412830), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam3.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileParam3.setDescription(' For ph1/2-buffer, Maximum burst size [cell]. Only nrt-VBR, and rt-VBR are valid. If it is invalid, -1. ')
connProfileParam4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileParam4.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileParam4.setDescription(' For ph1/2-buffer, EPD function flag. If it is other than ABR, UBR, off, only. ')
connProfileName2Index = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connProfileName2Index.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileName2Index.setDescription(' Equivalent to connProfileName ')
connProfileName2IndexResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 9, 4), ConnProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connProfileName2IndexResult.setStatus('mandatory')
if mibBuilder.loadTexts: connProfileName2IndexResult.setDescription(' Shows the index of the row whose connProfileRowStatus in connProfileTable, corresponding to connProfileName2Index, is active. If the corresponding row does not exist, 0. ')
connSvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10), )
if mibBuilder.loadTexts: connSvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: connSvcTable.setDescription('JpnToEng[֤ꤵ SVC Υơ֥.]')
connSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "NEC-MIB", "connSvcIndex"))
if mibBuilder.loadTexts: connSvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connSvcEntry.setDescription('JpnToEng[֤ꤵ SVC Υȥ.]')
connSvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: connSvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connSvcIndex.setDescription('JpnToEng[SVC Index.]')
connSvcInf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 10, 1, 2), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSvcInf.setStatus('mandatory')
if mibBuilder.loadTexts: connSvcInf.setDescription('JpnToEng(Σʬ) -- SVC ξ. -- ȥι¤ϰʲ̤. -- Bits -- 8 7 6 5 4 3 2 1 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ǼƤ SVC | 1 - 4 Octets -- +===============================================+ -- | ¦ֹ | 1 - 2 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ VPI ֹ | 3 - 4 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ VCI ֹ | 5 - 6 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ֹ | 7 - 8 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ VPI ֹ | 9 - 10 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ VCI ֹ | 11 - 12 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | | | Traffic Type | 13 -- | (1) | (2) | (3) | -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Calling Party | Called Party | 14 -- | Address Format | Address Format | -- | (4) | (4) | -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Calling Party Address Length [bits] | 15 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Called Party Address Length [bits] | 16 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Calling Party Address | 17 - 36 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Called Party Address | 37 - 56 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ Shaper ֹ (5) | 57 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ Shaper ֹ (5) | 58 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ UPC Mode | ¦ UPC Mode | Tag-| Tag-| 59 -- | (6) | (6) | ging| ging| -- | | | Fwd | Bwd | -- | | |(7)|(7)| -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Fwd | Bwd | | 60 -- | EPD | EPD | Dummy1 | -- |(8)|(8)| | -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Forward PCR [cell/s] | 61 - 64 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Backward PCR [cell/s] | 65 - 68 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Forward SCR [cell/s] | 69 - 72 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Backward SCR [cell/s] | 73 - 76 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Forward MBS [cells] | 77 - 80 -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Backward MBS [cells] | 81 - 84 -- +===============================================+ -- | ¦ֹ | -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ VPI ֹ | -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | ¦ VCI ֹ | -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- : : -- : : -- +-----+-----+-----+-----+-----+-----+-----+-----+ -- | Backward MBS | -- +-----------------------------------------------+ -- -- (1) -- 1: PtoP, 2: PtoMP-out, 3: PtoMP-in -- (2) -- 0: PtoP, 1: PtoMP -- (3) Traffic Type -- 1: CBR, 2: rt-VBR, 3: nrt-VBR, 4: ABR, 5: UBR -- (4) Calling/Called Party Address Format -- 1: E.164, 2: NSAP -- (5) /¦ Shaper ֹ -- 0: Shaping OFF, 1-16: Shaper ֹ -- (6) /¦ UPC Mode -- 0: UPC OFF, 1-5: mode1-mode5 -- (7) Tagging Forward/Backward -- 0: OFF, 1: ON -- (8) EPD -- 0: OFF, 1: ON -- -- struct atmSvc { -- unsigned short AtmSvcIncomingPort ; -- unsigned short AtmSvcIncomingVpi ; -- unsigned short AtmSvcIncomingVci ; -- unsigned short AtmSvcOutgoingPort ; -- unsigned short AtmSvcOutgoingVpi ; -- unsigned short AtmSvcOutgoingVci ; -- unsigned char AtmSvcDirection : 2 ; -- unsigned char AtmSvcTopology : 2 ; -- unsigned char AtmSvcTrafficType : 4 ; -- unsigned char AtmSvcCallingAddressFormat : 4 ; -- unsigned char AtmSvcCalledAddressFormat : 4 ; -- unsigned char AtmSvcCallingAddressLength ; -- unsigned char AtmSvcCalledAddressLength ; -- unsigned char AtmSvcCallingAddress[ 20 ] ; -- unsigned char AtmSvcCalledAddress[ 20 ] ; -- unsigned char AtmSvcIncomingShaper ; -- unsigned char AtmSvcOutgoingShaper ; -- unsigned char AtmSvcIncomingUpcMode : 3 ; -- unsigned char AtmSvcOutgoingUpcMode : 3 ; -- unsigned char AtmSvcForwardTagging : 1 ; -- unsigned char AtmSvcBackwardTagging : 1 ; -- unsigned char AtmSvcForwardEpd : 1 ; -- unsigned char AtmSvcBackwardEpd : 1 ; -- unsigned char Dummy1 : 6 ; -- long AtmSvcForwardPcr ; -- long AtmSvcBackwardPcr ; -- long AtmSvcForwardScr ; -- long AtmSvcBackwardScr ; -- long AtmSvcForwardMbs ; -- long AtmSvcBackwardMbs ; -- } ; -- -- struct opaqueSvc { -- long count ; -- struct atmSvc atmSvc[ 16 ] ; -- } ; -- -- ƥǡ Big Endian ǳǼ. -- AtmSvcCallingAddress/CalledAddress 20 byte ʤ, -- \xadʬ 0 padding . -- -- SVC , 16 ĤĤޤȤ, Ƭ˳Ǽǡ -- ɽ 4 byte ΥǡͿ. -- -- SVC ưŪʥǡǤ뤿, \U000bbcbeȤȤ -- Ϣ³Ū˺ǽ餫黲ȤʤȾݾڤǤʤ. ')
connCe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11))
connCeVc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1))
connCeVcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1), )
if mibBuilder.loadTexts: connCeVcTable.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcTable.setDescription('JpnToEng[CESɤꤵ줿CEVCξɽԤʤ.]')
connCeVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1), ).setIndexNames((0, "NEC-MIB", "connCeVcPort"), (0, "NEC-MIB", "connCeVcVci"))
if mibBuilder.loadTexts: connCeVcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcEntry.setDescription('JpnToEng[֤ꤵƤCEVCΥȥ\ua87c.]')
connCeVcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: connCeVcPort.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcPort.setDescription('Line number.')
connCeVcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 383)))
if mibBuilder.loadTexts: connCeVcVci.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcVci.setDescription('VCI value. JpnToEng[Ѳǽϰ̤linfStatusTable .]')
connCeVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcRowStatus.setDescription(' Used to control rows of the table.')
connCeVcCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("parameterNotEnough", 3), ("illegalpkg", 4), ("vcsOverFllow", 5), ("tssOverFllow", 6), ("alreadyAssignedTs", 7), ("inconsistentTss", 8), ("illegalTimeslot", 9), ("illegalPort", 10), ("illegalVci", 11), ("illegalUpPartialFillSize", 12), ("illegalDownPartialFillSize", 13), ("illegalCdvt", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCeVcCause.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcCause.setDescription(' The result of CEVC setting processing.')
connCeVcDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bi", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDirection.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcDirection.setDescription('JpnToEng[]')
connCeVcUpPartialFillSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 47), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpPartialFillSize.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcUpPartialFillSize.setDescription('JpnToEng[UPΥ줿ʿѥ桼ƥåȿ 0 ξ full (structure λ46.875ˤʤ) 0 ʳκǾͤ,TS+1.]')
connCeVcDownPartialFillSize = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 47), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownPartialFillSize.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcDownPartialFillSize.setDescription('JpnToEng[DOWNΥ줿ʿѥ桼ƥåȿ 0 ξ full (structure λ46.875ˤʤ) 0 ʳκǾͤ,TS+1.]')
connCeVcCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcCondition.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcCondition.setDescription('Condtion date.')
connCeVcCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 7218), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcCDVT.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcCDVT.setDescription('CDVT value. JpnToEng[pkg̤ˤCDVTϰ] +----------------------+----------+------------+ |pkg type| str mode |CDVT range| unit of | | | | | setting | ================================================ | CE-J2 | unstructure | 1..73 | 125sec | | +-------------+----------+------------+ | | structure | 1..7218 | 125sec | +--------+-------------+----------+------------+ | CE-DS1 | unstructure | 1..255 | 165.8sec | | +-------------+----------+------------+ | | structure | 1..191 | 125sec | +--------+-------------+----------+------------+ | CE-E1 | unstructure | 1..255 | 124.5sec | | +-------------+----------+------------+ | | structure | 1..255 | 125sec | +--------+-------------+----------+------------+ | CE-DS3 | unstructure | 1..255 | 5.7sec | +--------+-------------+----------+------------+ ')
connCeVcUpPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 118979), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCeVcUpPCR.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcUpPCR.setDescription('JpnToEng[CEVCUPPCR.]')
connCeVcDownPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 118979), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCeVcDownPCR.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcDownPCR.setDescription('JpnToEng[CEVCDOWNPCR.]')
connCeVcUpTimeSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpTimeSlot1.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcUpTimeSlot1.setDescription('JpnToEng(Σʬ)')
connCeVcDownTimeSlot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownTimeSlot1.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcDownTimeSlot1.setDescription('JpnToEng(2ʬ)')
connCeVcUpTimeSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpTimeSlot2.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcUpTimeSlot2.setDescription('JpnToEng(2ʬ)')
connCeVcDownTimeSlot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownTimeSlot2.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcDownTimeSlot2.setDescription('JpnToEng(2ʬ)')
connCeVcUpTimeSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcUpTimeSlot3.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcUpTimeSlot3.setDescription('JpnToEng(2ʬ)')
connCeVcDownTimeSlot3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 11, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connCeVcDownTimeSlot3.setStatus('mandatory')
if mibBuilder.loadTexts: connCeVcDownTimeSlot3.setDescription('JpnToEng(2ʬ)')
connFr = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12))
connFrDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1))
connFrDlciTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1), )
if mibBuilder.loadTexts: connFrDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciTable.setDescription('JpnToEng(2ʬ)')
connFrDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1), ).setIndexNames((0, "NEC-MIB", "connFrDlciPort"), (0, "NEC-MIB", "connFrDlciIndex"))
if mibBuilder.loadTexts: connFrDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciEntry.setDescription('Entry of connFrDlciTable.')
connFrDlciPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: connFrDlciPort.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciPort.setDescription('Line number.')
connFrDlciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: connFrDlciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciIndex.setDescription('DLCI number.')
connFrDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrDlciRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciRowStatus.setDescription(' Used to control rows of the table.')
connFrDlciCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("noFrProfile", 3), ("inconsistentInterWorking", 4), ("totalCIROverFlow", 5), ("lineDiagnosticsFailure", 6), ("illegalPort", 7), ("illegalDlci", 8), ("pvcsOverFlow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciCause.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciCause.setDescription('JpnToEng[ͥ(DLCI) ǡ η.]')
connFrDlciFrProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrDlciFrProfile.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciFrProfile.setDescription('JpnToEng(2ʬ)')
connFrDlciPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciPCR.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciPCR.setDescription('Peak Cell Rate[cell/sec]. JpnToEng[rowactiveǤʤͤ -1(ǥե).]')
connFrDlciSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciSCR.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciSCR.setDescription('Sustainable Cell Rate[cell/sec]. JpnToEng[rowactiveǤʤͤ -1(ǥե).]')
connFrDlciMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrDlciMBS.setStatus('mandatory')
if mibBuilder.loadTexts: connFrDlciMBS.setDescription('Maximum Burst Size[cell]. JpnToEng[rowactiveǤʤͤ -1(ǥե).]')
connFrProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2))
class ConnFrProfileIndex(Integer32):
    pass

connFrProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 1), ConnFrProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrProfileIndexNext.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileIndexNext.setDescription('JpnToEng(2ʬ)')
connFrProfileTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2), )
if mibBuilder.loadTexts: connFrProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileTable.setDescription('JpnToEng[Frprofile / ɽԤʤΥơ֥.]')
connFrProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1), ).setIndexNames((0, "NEC-MIB", "connFrProfileIndex"))
if mibBuilder.loadTexts: connFrProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileEntry.setDescription('Entry of connFrProfileTable.')
connFrProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 1), ConnFrProfileIndex())
if mibBuilder.loadTexts: connFrProfileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileIndex.setDescription('Index of connFrProfileTable.')
connFrProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileRowStatus.setDescription(' Used to control rows of the table.')
connFrProfileCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("rowExisting", 1), ("otherFailure", 2), ("parameterNotEnough", 3), ("alreadyExist", 4), ("duplicateName", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrProfileCause.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileCause.setDescription(' The result of Frprofile setting processing.')
connFrProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileName.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileName.setDescription('Frprofile name. Available characters: alphanumeric characters 0 length string is only read.')
connFrProfileInterworkingType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileInterworkingType.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileInterworkingType.setDescription('Interworking Type')
connFrProfileCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 1984), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCIR.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileCIR.setDescription('CIR value.')
connFrProfileDEtoCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileDEtoCLP.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileDEtoCLP.setDescription('DE to CLP mapping mode')
connFrProfileCLPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCLPValue.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileCLPValue.setDescription("CLP Value. It's valid when connFrProfileDEtoCLP is mode2.")
connFrProfileCLPtoDE = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode1", 1), ("mode2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCLPtoDE.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileCLPtoDE.setDescription('CLP to DE mapping mode.')
connFrProfileDEValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileDEValue.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileDEValue.setDescription("DE Value. It's valid when connFrProfileInterworkingType is service and connFrProfileCLPtoDE is mode2.")
connFrProfileCapsulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("transparent", 2), ("translation", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCapsulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileCapsulationMode.setDescription("Protocol encapsulation mode. It's valid when connFrProfileInterworkingType is service.")
connFrProfileCongestionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("mode1", 2), ("mode2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileCongestionMode.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileCongestionMode.setDescription("Congestion indication(Forward) mode. It's valid when connFrProfileInterworkingType is service.")
connFrProfileName2Index = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 10), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connFrProfileName2Index.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileName2Index.setDescription('Equivalent to connProfileName.')
connFrProfileName2IndexResult = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 4, 12, 2, 4), ConnFrProfileIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFrProfileName2IndexResult.setStatus('mandatory')
if mibBuilder.loadTexts: connFrProfileName2IndexResult.setDescription(' Shows the index of the row whose connFrProfileRowStatus in connFrProfileTable, corresponding to connFrProfileName2Index, is active. If the corresponding row does not exist, 0. ')
perfTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perfTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: perfTrapEnable.setDescription('This object is used for disabling/enabling trap messages regarding the enterprise specific traps.')
perfIfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2), )
if mibBuilder.loadTexts: perfIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfTable.setDescription('Table for showing the result of the performance monitoring per line of the equipment. Up to 64 tables are available for entry. Every line whose traffic is managed per line is provided with an entry. ')
perfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1), ).setIndexNames((0, "NEC-MIB", "perfIfIndex"))
if mibBuilder.loadTexts: perfIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfEntry.setDescription('Entry of the line performance monitoring.')
perfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: perfIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfIndex.setDescription('Line number.')
perfIfReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfReceivedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfReceivedCells.setDescription('The Number of the receive cells of line port. (64 bit applicable)')
perfIfReceivedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfReceivedCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfReceivedCellsCounters.setDescription('The Number of the receive cells of line port. (32 bit applicable).')
perfIfTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfTransmittedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfTransmittedCells.setDescription('The Number of the transmit cells of line port. (64 bit applicable).')
perfIfTransmittedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfTransmittedCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfTransmittedCellsCounters.setDescription('The Number of the transmit cells of line port. (32 bit applicable).')
perfIfMisDelivdCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfMisDelivdCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfMisDelivdCells.setDescription('The Number of the undefined cells of line port. (64 bit applicable).')
perfIfMisDelivdCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfMisDelivdCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfMisDelivdCellsCounters.setDescription('The Number of the undefined cells of line port. (32 bit applicable).')
perfIfThresholdExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfThresholdExcessCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfThresholdExcessCells.setDescription('Number of the threshold excess cells (64 bit applicable).')
perfIfThresholdExcessCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfThresholdExcessCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfThresholdExcessCellsCounters.setDescription('Number of the threshold excess cells (32 bit applicable).')
perfIfUpcErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfUpcErrorCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfUpcErrorCells.setDescription('Number of the UPC error cells (64 bit applicable).')
perfIfUpcErrorCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfUpcErrorCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfUpcErrorCellsCounters.setDescription('Number of the UPC error cells (32 bit applicable).')
perfIfSlotTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3), )
if mibBuilder.loadTexts: perfIfSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotTable.setDescription('Table for showing the number of cells of the traffic and performance per line card of the equipment. Up to 16 tables are available for entry. Every line whose traffic is managed per slot is provided with an entry. The object which becomes invalid by the line card is always 0.')
perfIfSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: perfIfSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotEntry.setDescription('Entry of traffic/performance per line card.')
perfIfSlotReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotReceivedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotReceivedCells.setDescription('The number of receive cells.')
perfIfSlotTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotTransmittedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotTransmittedCells.setDescription('The number of transmit cells.')
perfIfSlotInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotInDropCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotInDropCells.setDescription('The number of receive drop cells.')
perfIfSlotReceivedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotReceivedCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotReceivedCellsCounters.setDescription('The number of receive cells.')
perfIfSlotTransmittedCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotTransmittedCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotTransmittedCellsCounters.setDescription('The number of transmit cells.')
perfIfSlotInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotInDropCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotInDropCellsCounters.setDescription('The number of receive drop cells.')
perfIfSlotHCThresholdExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotHCThresholdExcessCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotHCThresholdExcessCells.setDescription('The number of threshold excess cells')
perfIfSlotThresholdExcessCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotThresholdExcessCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotThresholdExcessCells.setDescription('The number of threshold excess cells')
perfIfSlotHCUpcErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotHCUpcErrorCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotHCUpcErrorCells.setDescription('Number of UPC error cells.')
perfIfSlotUpcErrorCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfSlotUpcErrorCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfSlotUpcErrorCells.setDescription('Number of UPC error cells.')
perfIfPhysTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4), )
if mibBuilder.loadTexts: perfIfPhysTable.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysTable.setDescription('JpnToEng[ʪإѥեޥ\U000e5e65˥\U000bca24ơ֥.]')
perfIfPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1), ).setIndexNames((0, "NEC-MIB", "perfIfPhysPort"))
if mibBuilder.loadTexts: perfIfPhysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysEntry.setDescription('JpnToEng[ʪإѥեޥ\U000e5e65˥Υȥ.]')
perfIfPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: perfIfPhysPort.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysPort.setDescription('Line number.')
perfIfPhysHCHecErorrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCHecErorrs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCHecErorrs.setDescription('Number of HEC error cells(64 bit applicable). On the line card other than OC12, J2 and PR-1.5M, the value of this object is 0.')
perfIfPhysHecErorrs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHecErorrs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHecErorrs.setDescription('Number of HEC error cells(32 bit applicable). On the line card other than OC12, J2 and PR-1.5M, the value of this object is 0.')
perfIfPhysHCHecDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCHecDropCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCHecDropCells.setDescription('Number of uncorrectable HEC error cells(64 bit applicable). On the line card other than OC3, OC12, OC12PMC, J2, PR-1.5, DS3, E3, DS1 and E1, the value of this object is 0.')
perfIfPhysHecDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHecDropCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHecDropCells.setDescription('Number of uncorrectable HEC error cells(32 bit applicable). On the line card other than OC3, OC12, OC12PMC, J2, PR-1.5, DS3, E3, DS1 and E1, the value of this object is 0.')
perfIfPhysHCB1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCB1Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCB1Errors.setDescription('Number of B1 errors(64 bit applicable). On the line card other than OC3, OC12, OC12PMC, DS3, E3, DS1 and E1, the value of this object is 0.')
perfIfPhysB1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysB1Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysB1Errors.setDescription('Number of B1 errors(32 bit applicable). On the line card other than OC3, OC12, OC12PMC, DS3, E3, DS1 and E1, the value of this object is 0.')
perfIfPhysHCB2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCB2Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCB2Errors.setDescription('Number of B2 errors(64 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysB2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysB2Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysB2Errors.setDescription('Number of B2 errors(32 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysHCB3Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCB3Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCB3Errors.setDescription('Number of B3 errors(64 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysB3Errors = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysB3Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysB3Errors.setDescription('Number of B3 errors(32 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysHCPathFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCPathFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCPathFEBEs.setDescription('Number of Path FEBEs(64 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysPathFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysPathFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysPathFEBEs.setDescription('Number of Path FEBEs(32 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysHCLineFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCLineFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCLineFEBEs.setDescription('Number of Line (Section) FEBEs(64 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysLineFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysLineFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysLineFEBEs.setDescription('Number of Line (Section) FEBEs(32 bit applicable). On the line card other than OC3, OC12 and OC12PMC, the value of this object is 0.')
perfIfPhysHCFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCFramingErrors.setDescription('Number of Framing errors(64 bit applicable). On the line card other than DS1, E1, DS3 and E3, the value of this object is 0.')
perfIfPhysFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysFramingErrors.setDescription('Number of Framing errors(32 bit applicable). On the line card other than DS1, E1, DS3 and E3, the value of this object is 0.')
perfIfPhysHCReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCReceivedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCReceivedCells.setDescription('The Number of the receive cells(64 bit applicable). On the line card other than DS3, E3 and OC12PMC, the value of this object is 0.')
perfIfPhysReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysReceivedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysReceivedCells.setDescription('The Number of the receive cells(32 bit applicable). On the line card other than DS3, E3 and OC12PMC, the value of this object is 0.')
perfIfPhysHCTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCTransmittedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCTransmittedCells.setDescription('The Number of the transmit cells(64 bit applicable). On the line card other than DS3, E3 and OC12PMC, the value of this object is 0.')
perfIfPhysTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysTransmittedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysTransmittedCells.setDescription('The Number of the transmit cells(32 bit applicable). On the line card other than DS3, E3 and OC12PMC, the value of this object is 0.')
perfIfPhysHCIdelUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCIdelUnassignedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCIdelUnassignedCells.setDescription('The Number of Idle/Unassigned cells(64 bit applicable). On the line card other than DS3 and E3, the value of this object is 0.')
perfIfPhysIdelUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysIdelUnassignedCells.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysIdelUnassignedCells.setDescription('The Number of Idle/Unassigned cells(32 bit applicable). On the line card other than DS3 and E3, the value of this object is 0.')
perfIfPhysHCFEBEErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFEBEErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCFEBEErrors.setDescription('Number of FEBE errors(64 bit applicable). On the line card other than DS3, E3, DS1 and E1, the value of this object is 0.')
perfIfPhysFEBEErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFEBEErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysFEBEErrors.setDescription('Number of FEBEs errors(32 bit applicable). On the line card other than DS3, E3, DS1 and E1, the value of this object is 0.')
perfIfPhysHCFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCFEBEs.setDescription('Number of FEBEs(64 bit applicable). On the line card other than DS3, E3, E1 and CE-E1, the value of this object is 0.')
perfIfPhysFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysFEBEs.setDescription('Number of FEBEs(32 bit applicable). On the line card other than DS3, E3, E1 and CE-E1, the value of this object is 0.')
perfIfPhysHCPathParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCPathParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCPathParityErrors.setDescription('Number of path parity errors(64 bit applicable). On the line card other than DS3, the value of this object is 0.')
perfIfPhysPathParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysPathParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysPathParityErrors.setDescription('Number of path parity errors(32 bit applicable). On the line card other than DS3, the value of this object is 0.')
perfIfPhysHCParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCParityErrors.setDescription('Number of parity errors(64 bit applicable). On the line card other than DS3, the value of this object is 0.')
perfIfPhysParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysParityErrors.setDescription('Number of parity errors(32 bit applicable). On the line card other than DS3, the value of this object is 0.')
perfIfPhysHCSEZs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCSEZs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCSEZs.setDescription('Number of detections of Summed excessive Zero (64 bit applicable). On the line card other than DS3, the value of this object is 0.')
perfIfPhysSEZs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysSEZs.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysSEZs.setDescription('Number of detections of Summed excessive Zero (32 bit applicable). On the line card other than DS3, the value of this object is 0.')
perfIfPhysHCBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCBitErrors.setDescription('Number of Bit errors(64 bit applicable). On the line card other than DS3 and CE-DS1(SF mode), the value of this object is 0.')
perfIfPhysBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysBitErrors.setDescription('Number of Bit errors(32 bit applicable). On the line card other than DS3 and CE-DS1(SF mode), the value of this object is 0.')
perfIfPhysHCLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCLcvErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCLcvErrors.setDescription('Number of LCV errors(64 bit applicable). On the line card other than DS3, E3, DS1, E1, FR-E1, CE-DS1, FR-DS1 and CE-E1, the value of this object is 0.')
perfIfPhysLcvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysLcvErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysLcvErrors.setDescription('Number of LCV errors(32 bit applicable). On the line card other than DS3, E3, DS1, E1, FR-E1, CE-DS1, FR-DS1 and CE-E1, the value of this object is 0.')
perfIfPhysHCBip8Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCBip8Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCBip8Errors.setDescription('Number of BIP-8 errors(64 bit applicable). On the line card other than E3, the value of this object is 0.')
perfIfPhysBip8Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysBip8Errors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysBip8Errors.setDescription('Number of BIP-8 errors(32 bit applicable). On the line card other than E3, the value of this object is 0.')
perfIfPhysHCIecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCIecErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCIecErrors.setDescription('Number of IEC errors(64 bit applicable). On the line card other than E3, the value of this object is 0.')
perfIfPhysIecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysIecErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysIecErrors.setDescription('Number of IEC errors(32 bit applicable). On the line card other than E3, the value of this object is 0.')
perfIfPhysHCFramingPatternErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 42), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFramingPatternErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCFramingPatternErrors.setDescription('Number of Framing pattern errors(64 bit applicable). On the line card other than E3, the value of this object is 0.')
perfIfPhysFramingPatternErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFramingPatternErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysFramingPatternErrors.setDescription('Number of Framing pattern errors(32 bit applicable). On the line card other than E3, the value of this object is 0.')
perfIfPhysHCFramingBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 44), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCFramingBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCFramingBitErrors.setDescription('Number of Framing bit errors(64 bit applicable). On the line card other than DS1, E1, FR-E1, CE-DS1, FR-DS1 and CE-E1, the value of this object is 0.')
perfIfPhysFramingBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysFramingBitErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysFramingBitErrors.setDescription('Number of Framing bit errors(32 bit applicable). On the line card other than DS1, E1, FR-E1, CE-DS1, FR-DS1 and CE-E1, the value of this object is 0.')
perfIfPhysHCCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 46), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysHCCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysHCCrcErrors.setDescription('Number of CRC errors(64 bit applicable). On the line card other than DS1, E1, FR-E1, FR-DS1, CE-DS1(ESF mode) and CE-E1, the value of this object is 0.')
perfIfPhysCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 5, 4, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perfIfPhysCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: perfIfPhysCrcErrors.setDescription('Number of CRC errors(32 bit applicable). On the line card other than DS1, E1, FR-E1, FR-DS1, CE-DS1(ESF mode) and CE-E1, the value of this object is 0.')
scaleStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("install", 2), ("backup", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scaleStatus.setDescription('Order to execute and state.')
scaleCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("succeed", 3), ("nearend", 4), ("timeOut", 5), ("fileNotFound", 6), ("accessViolate", 7), ("checksumError", 8), ("noData", 9), ("sbyAccessError", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scaleCause.setStatus('mandatory')
if mibBuilder.loadTexts: scaleCause.setDescription('The result of execution.')
scaleDataType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("config", 2), ("bill-cdr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleDataType.setStatus('mandatory')
if mibBuilder.loadTexts: scaleDataType.setDescription('Data type.')
scaleTarget = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleTarget.setStatus('mandatory')
if mibBuilder.loadTexts: scaleTarget.setDescription('IP address of the target.')
scaleFileName = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleFileName.setStatus('mandatory')
if mibBuilder.loadTexts: scaleFileName.setDescription('File name(up to 127 characters).')
scaleSwSide = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("act", 1), ("sby", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scaleSwSide.setStatus('mandatory')
if mibBuilder.loadTexts: scaleSwSide.setDescription('Indicate which system of the SW-Engine.')
cardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1), )
if mibBuilder.loadTexts: cardStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusTable.setDescription('Table showing the configuration information of the line card with CPU.')
cardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: cardStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusEntry.setDescription('Entry of the configuration nformation of the line card with CPU.')
cardStatusServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusServerType.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusServerType.setDescription('Indicate the types of the server installed in the line card with CPU: other (1) ...other than the below stated types LANE (2) ARP (4) NHRP (8) MPOA (16) If more than one server type is installed, return the sum of their values. e.g. Only NHRP is installed ---> 8 ARP and NHRP are installed ---> 4 + 8 = 12 LANE, ARP and NHRP are installed ---> 2 + 4 + 8 = 14')
cardStatusRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusRevision.setDescription('The revision of the software installed in the line card with CPU. e.g., ...X means the number of revision. Software Version X.X(X) Boot ROM Version KXX')
cardStatusMateSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusMateSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusMateSlotNumber.setDescription('The slot number of the card with double configuration (including itself). If it is single configuration/although it is of double configuration, SBY system is not implemented, return zero.')
cardStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("act", 1), ("sby", 2), ("single", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusMode.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusMode.setDescription('Operational mode of the card.')
cardStatusPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("remotePrimary", 2), ("remoteSecoundary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusPriority.setDescription('JpnToEng(1ʬ)')
cardStatusAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusAtmAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusAtmAddr.setDescription('JpnToEng(2ʬ)')
cardStatusMateAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 1, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardStatusMateAtmAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cardStatusMateAtmAddr.setDescription('JpnToEng(2ʬ)')
cardOpeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2), )
if mibBuilder.loadTexts: cardOpeTable.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeTable.setDescription('The table showing the command operations to the line card with CPU. If the card configured on SBY system is indicated, return noSuchName.')
cardOpeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1), ).setIndexNames((0, "NEC-MIB", "slotIfConfIndex"))
if mibBuilder.loadTexts: cardOpeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeEntry.setDescription('Entry of command operation to the line card with CPU.')
cardOpeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("reset", 2), ("ach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardOpeReset.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeReset.setDescription('Card Reset processing. Return noOperation(1) at read. JpnToEng[⡼ŲԲĤȤ, genErrorֵѤ.]')
cardOpeDiagnosis = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("diagnosis", 2))))
if mibBuilder.loadTexts: cardOpeDiagnosis.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeDiagnosis.setDescription('Card diagnostic processing. Diagnose the SBY system card of double configuration with (the ACT system card). Return noOperation (1) at read. JpnToEng[⡼ŲԲĤȤ, genErrorֵѤ.]')
cardOpeSave = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardOpeSave.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeSave.setDescription('Card Save processing. Save the system configuration information in FROM. If it is of double configuration, save it in SBY system FROM as well. Return noOperation (1) at read.')
cardOpeSaveResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("succeed", 1), ("succeed-act", 2), ("succeed-sby", 3), ("temporaryFailure", 4), ("nearend", 5), ("nearend-act", 6), ("nearend-act-failure-sby", 7), ("nearend-sby", 8), ("nearend-sby-failure-act", 9), ("notReady", 10), ("ready", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOpeSaveResult.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeSaveResult.setDescription('The result of card save processing. OK /NG indicate that SAVE processing completed/failed, respectively. (NearEND) indicates that the number of writes into FROM approaches to the limit.')
cardOpeCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOperation", 1), ("copy-all-from-act", 2), ("copy-all-from-sby", 3), ("copy-config-from-act", 4), ("copy-config-from-sby", 5), ("copy-system-from-act", 6), ("copy-system-from-sby", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardOpeCopy.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeCopy.setDescription('Card Copy processing. Return noOperation (1) at read.')
cardOpeCopyResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("succeed", 1), ("temporaryFailure", 2), ("nearend", 3), ("notReady", 4), ("ready", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardOpeCopyResult.setStatus('mandatory')
if mibBuilder.loadTexts: cardOpeCopyResult.setDescription('Result of Card Copy processing.')
clockOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1))
clockOpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allocate", 1), ("set", 2), ("free", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeStatus.setDescription('Used to control Clock setting processing.')
clockOpeCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noWriting", 1), ("other", 2), ("succeed", 3), ("setWarning", 4), ("parameterNotEnough", 5), ("portNotExist", 6), ("portOutOfRange", 7), ("allPortFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockOpeCause.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeCause.setDescription('Result of Clock setting processing.')
clockOpeMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeMode.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeMode.setDescription('Clock Mode.')
clockOpeAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeAccuracy.setDescription('Accuracy[ppm] of clock. JpnToEng[(SLAVE⡼Τͭ)] If no set, value is -1.')
clockOpeSlaveLine1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine1.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeSlaveLine1.setDescription('Slave line number 1. JpnToEng[(SLAVE⡼Τͭ)] If no set, value is -1.')
clockOpeSlaveLine2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine2.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeSlaveLine2.setDescription('Slave line number 2. JpnToEng[(SLAVE⡼Τͭ)] Slave line number 1 shall be set already. If no set, value is -1.')
clockOpeSlaveLine3 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine3.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeSlaveLine3.setDescription('Slave line number 3. JpnToEng[(SLAVE⡼Τͭ)] Slave line number 1~2 shall be set already. If no set, value is -1.')
clockOpeSlaveLine4 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clockOpeSlaveLine4.setStatus('mandatory')
if mibBuilder.loadTexts: clockOpeSlaveLine4.setDescription('Slave line number 4. JpnToEng[(SLAVE⡼Τͭ)] Slave line number 1~3 shall be set already. If no set, value is -1.')
class ClockSlaveLineStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("notApplicable", 1), ("active", 2), ("standby", 3), ("hardError", 4), ("adminDown", 5), ("notExist", 6), ("linfDown", 7), ("testing", 8), ("notSupported", 9), ("syncronizedFailure", 10), ("lossOf64kClock", 11), ("lossOf8kClock", 12), ("frequencyOutOfRange", 13))

clockMode = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("slave", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockMode.setStatus('mandatory')
if mibBuilder.loadTexts: clockMode.setDescription('Clock Mode.')
clockAccuracy = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockAccuracy.setStatus('mandatory')
if mibBuilder.loadTexts: clockAccuracy.setDescription('Accuracy[ppm] of clock.')
clockSlaveLine = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine.setDescription('The number of the actually slaved line. If mode is master (1), it is -1. ')
clockSlaveLine1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine1.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine1.setDescription('Slave line number 1. If no set, value is -1.')
clockSlaveLine1Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 6), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine1Status.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine1Status.setDescription('State of slave line 1.')
clockSlaveLine2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine2.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine2.setDescription('Slave line number 2. If no set, value is -1.')
clockSlaveLine2Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 8), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine2Status.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine2Status.setDescription('State of slave line 2.')
clockSlaveLine3 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine3.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine3.setDescription('Slave line number 3. If no set, value is -1.')
clockSlaveLine3Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 10), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine3Status.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine3Status.setDescription('State of slave line 3.')
clockSlaveLine4 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine4.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine4.setDescription('Slave line number 4. If no set, value is -1.')
clockSlaveLine4Status = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 8, 12), ClockSlaveLineStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clockSlaveLine4Status.setStatus('mandatory')
if mibBuilder.loadTexts: clockSlaveLine4Status.setDescription('State of slave line 4.')
diagActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("allocate", 1), ("start", 2), ("execute", 3), ("end", 4), ("free", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagActionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: diagActionStatus.setDescription('Used to control diagnostics test processing.')
diagActionKind = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switch", 1), ("cpu", 2), ("slot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagActionKind.setStatus('mandatory')
if mibBuilder.loadTexts: diagActionKind.setDescription('JpnToEng(Σʬ)')
diagPreCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("succeed", 2), ("parameterNotEnough", 3), ("notInstalled", 4), ("notSupport", 5), ("diagnostics", 6), ("clkChgError", 7), ("initializing", 8), ("sbyAccessError", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagPreCause.setStatus('mandatory')
if mibBuilder.loadTexts: diagPreCause.setDescription('JpnToEng[ǽ¹Υѥ\u187cåη.]')
diagCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 1020004, 1030004, 1040007, 1040107, 1050005, 1060010, 1070002, 1600201, 1600202, 1600203, 1600204, 1600205, 1600206, 1600207, 1600208, 1600301, 1600302, 1600303, 1600304, 1600401, 1600402, 1600403, 1600501, 1600502, 1600503, 1600504, 1600505, 1600601, 1600602, 1600603, 1600604, 1600605, 1600606, 1600607, 1600608, 1600609, 1600701, 1600702, 1600703, 1600704, 1600705, 1600706, 1601101, 2010002, 2020003, 2030003, 2040008, 2040009, 2040010, 2040011, 2040012, 2040013, 2040014, 2040015, 2090006, 3010002, 3010102, 3010202, 3010302, 3020012, 3030002, 3040003, 3050003, 3060003, 3070004, 3080004, 3080104, 3120004, 3130001, 3130101, 3130201, 3130301, 3150001, 3150002, 3160001, 3140005, 3140105, 3140205, 3140305, 3170001, 3170101, 3170201, 3170301, 3180001, 3180101, 3180201, 3180301, 3230003, 3190001, 3190002, 3190003, 3190004, 3200001, 3210003, 3220004, 3240001, 3250001, 3250002))).clone(namedValues=NamedValues(("normal", 1), ("diagNG-SC", 1020004), ("diagNG-BF", 1030004), ("diagNG-ES0", 1040007), ("diagNG-ES1", 1040107), ("diagNG-SAR", 1050005), ("diagNG-DI", 1060010), ("diagNG-CPU", 1070002), ("diagNG-CPU-Register", 1600201), ("diagNG-CPU-Timer-Test", 1600202), ("diagNG-CPU-MM-Test", 1600203), ("diagNG-CPU-DRAM-Partial-Write", 1600204), ("diagNG-CPU-Memory-Machining", 1600205), ("diagNG-CPU-Cash-Test", 1600206), ("diagNG-CPU-BSN-Parity", 1600207), ("diagNG-CPU-LANCE-LoopBack", 1600208), ("diagNG-Local-Memory", 1600301), ("diagNG-DMAC-Register", 1600302), ("diagNG-MISCEMA-Register", 1600303), ("diagNG-XACK-Interrupt", 1600304), ("diagNG-ASW-Register", 1600401), ("diagNG-BMT", 1600402), ("diagNG-Failer-Detect", 1600403), ("diagNG-SAR-Register", 1600501), ("diagNG-SAR-Control-Memory", 1600502), ("diagNG-SAR-Packet-Memory", 1600503), ("diagNG-DI-Register", 1600504), ("diagNG-DI-Memory", 1600505), ("diagNG-ES-LoopBack", 1600601), ("diagNG-ES-Own-LoopBack", 1600602), ("diagNG-ES-Other-LoopBack", 1600603), ("diagNG-ES-Own-Broadcast-LoopBack", 1600604), ("diagNG-ES-Other-Broadcast-LoopBack", 1600605), ("diagNG-ES-Nto1-Test", 1600606), ("diagNG-ATOM-Buffer-OVF", 1600607), ("diagNG-BackPressure", 1600608), ("diagNG-RICEtoCell-Compete", 1600609), ("diagNG-SAR-LoopBack", 1600701), ("diagNG-DI-LoopBack", 1600702), ("diagNG-SW-Own-LoopBack", 1600703), ("diagNG-SW-Other-LoopBack", 1600704), ("diagNG-Illegal-Cell-Detect", 1600705), ("diagNG-SARtoPacket-Compete", 1600706), ("diagNG-PCMCIA-Register", 1601101), ("diagNG-IXB-Register", 2010002), ("diagNG-OXB-Register", 2020003), ("diagNG-UHT-Register", 2030003), ("diagNG-IBC-Register", 2040008), ("diagNG-IBC-RIRO-SGRAM", 2040009), ("diagNG-IBC-HT-i-SGRAM", 2040010), ("diagNG-IBC-RIRO-SRAM", 2040011), ("diagNG-OBC-Register", 2040012), ("diagNG-OBC-CellBuffer", 2040013), ("diagNG-OBC-HT-o", 2040014), ("diagNG-OBC-BCI-BMT", 2040015), ("diagNG-FR-SDRAM", 2090006), ("diagNG-PHY0", 3010002), ("diagNG-PHY1", 3010102), ("diagNG-PHY2", 3010202), ("diagNG-PHY3", 3010302), ("diagNG-MUX", 3020012), ("diagNG-CU2INF", 3030002), ("diagNG-UNIC", 3040003), ("diagNG-CFAD", 3050003), ("diagNG-PLD", 3060003), ("diagNG-FPGA", 3070004), ("diagNG-FRM0", 3080004), ("diagNG-FRM1", 3080104), ("diagNG-S-UNI622", 3120004), ("diagNG-TAC0", 3130001), ("diagNG-TAC1", 3130101), ("diagNG-TAC2", 3130201), ("diagNG-TAC3", 3130301), ("diagNG-LCA-Common", 3150001), ("diagNG-LCA-Separate", 3150002), ("diagNG-UCFAD2", 3160001), ("diagNG-PM7345-0", 3140005), ("diagNG-PM7345-1", 3140105), ("diagNG-PM7345-2", 3140205), ("diagNG-PM7345-3", 3140305), ("diagNG-PM4341A-0", 3170001), ("diagNG-PM4341A-1", 3170101), ("diagNG-PM4341A-2", 3170201), ("diagNG-PM4341A-3", 3170301), ("diagNG-PM6341-0", 3180001), ("diagNG-PM6341-1", 3180101), ("diagNG-PM6341-2", 3180201), ("diagNG-PM6341-3", 3180301), ("diagNG-DCS-LCA", 3230003), ("diagNG-ALARM", 3190001), ("diagNG-FRAME", 3190002), ("diagNG-TS-CTL", 3190003), ("diagNG-FIFO-CTL", 3190004), ("diagNG-AAL1-SAR", 3200001), ("diagNG-FPGA-CE-DS1", 3210003), ("diagNG-FPGA-CE-E1", 3220004), ("diagNG-WAC-021", 3240001), ("diagNG-CPU-DRAM", 3250001), ("diagNG-CPU-Tout", 3250002)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagCause.setStatus('mandatory')
if mibBuilder.loadTexts: diagCause.setDescription('Result of diagnostics test processing.')
diagParam1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagParam1.setStatus('mandatory')
if mibBuilder.loadTexts: diagParam1.setDescription('JpnToEng[Σʬ]')
class PnniAtmAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

class PnniNodeId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(22, 22)
    fixedLength = 22

class PnniPeerGroupId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(14, 14)
    fixedLength = 14

class PnniLevel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 104)

pnniNode = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1))
pnniNodeOpe = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 1))
pnniNodeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2), )
if mibBuilder.loadTexts: pnniNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeTable.setDescription('Table of PNNI Logical node attributes. A row exist every PNNI peer group which the managed system belongs to.')
pnniNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1), ).setIndexNames((0, "NEC-MIB", "pnniNodeLevel"))
if mibBuilder.loadTexts: pnniNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeEntry.setDescription('Entry of pnniNodeTable.')
pnniNodeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 1), PnniLevel())
if mibBuilder.loadTexts: pnniNodeLevel.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeLevel.setDescription('PNNI hierarchy level where node(s) reside.')
pnniNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 2), PnniNodeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeId.setDescription('Node ID.')
pnniNodeAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 3), PnniAtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeAtmAddress.setDescription('ATM End System Address of node.')
pnniNodePeerGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 4), PnniPeerGroupId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodePeerGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodePeerGroupId.setDescription('Peer Group Identifier of the peer group which a node belongs to.')
pnniNodeRestrictedTransit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeRestrictedTransit.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeRestrictedTransit.setDescription('Restrict a node to be used as a transit route.')
pnniNodeRestrictedBranching = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeRestrictedBranching.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeRestrictedBranching.setDescription('Restrict a node to be used as a branch point of point-to-multipoint.')
pnniNodeLeadershipPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 10, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pnniNodeLeadershipPriority.setStatus('mandatory')
if mibBuilder.loadTexts: pnniNodeLeadershipPriority.setDescription('Leadership priority which a node notifies of.')
matCmdStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocate", 1), ("inActive", 2), ("active", 3), ("free", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: matCmdStatus.setDescription('JpnToEng(5ʬ)')
matCmdInput = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdInput.setStatus('mandatory')
if mibBuilder.loadTexts: matCmdInput.setDescription('JpnToEng(1ʬ)')
matCmdOutput = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: matCmdOutput.setStatus('mandatory')
if mibBuilder.loadTexts: matCmdOutput.setDescription('JpnToEng(1ʬ)')
matCmdOutputType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("continued", 2), ("interactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: matCmdOutputType.setStatus('mandatory')
if mibBuilder.loadTexts: matCmdOutputType.setDescription('JpnToEng(4ʬ)')
matCmdStop = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperation", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdStop.setStatus('mandatory')
if mibBuilder.loadTexts: matCmdStop.setDescription("When the value is set to 'stop', the MAT command is stopped. When the value is set to 'noOperation', no operation is performed. When read, the value 'noOperation' is returned.")
matCmdTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 14, 9, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: matCmdTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: matCmdTimeOut.setDescription('JpnToEng(1ʬ)')
mibBuilder.exportSymbols("NEC-MIB", perfIfPhysIecErrors=perfIfPhysIecErrors, connSoftPvcEstSrcInfIndex=connSoftPvcEstSrcInfIndex, connSvcEntry=connSvcEntry, perfIfPhysIdelUnassignedCells=perfIfPhysIdelUnassignedCells, LinfVendor=LinfVendor, scale=scale, pnniNodeId=pnniNodeId, connProfileTrafficType=connProfileTrafficType, perfIfPhysHCFEBEs=perfIfPhysHCFEBEs, connLoop=connLoop, connLoopOpeCorrelationTag=connLoopOpeCorrelationTag, matCmdInput=matCmdInput, perfIfPhysFEBEErrors=perfIfPhysFEBEErrors, card=card, connSoftPvcSrcParam3=connSoftPvcSrcParam3, connSoftPvcDstParam4=connSoftPvcDstParam4, LinfFrameMode=LinfFrameMode, connRouteAtmAddressLength=connRouteAtmAddressLength, clockSlaveLine3=clockSlaveLine3, connPvcContrastParam6=connPvcContrastParam6, connOamContrastPort=connOamContrastPort, connRouteOpeTertiaryVPI=connRouteOpeTertiaryVPI, nodeStatusSwitch=nodeStatusSwitch, perfIfSlotTransmittedCellsCounters=perfIfSlotTransmittedCellsCounters, perfIfSlotInDropCellsCounters=perfIfSlotInDropCellsCounters, linfCacFactor=linfCacFactor, connSvcTable=connSvcTable, connSoftPvcEndpointType=connSoftPvcEndpointType, connConfIfEntry=connConfIfEntry, connPvcParam2=connPvcParam2, connOamOpe=connOamOpe, connPvcOpeLowVci=connPvcOpeLowVci, nodeOpeCopyResult=nodeOpeCopyResult, perfIfPhysHCB2Errors=perfIfPhysHCB2Errors, connPvcTable=connPvcTable, connRouteOpeSixthryVPI=connRouteOpeSixthryVPI, m7_corporate_mib=m7_corporate_mib, PnniLevel=PnniLevel, perfIfSlotEntry=perfIfSlotEntry, slotIfConfPhysType=slotIfConfPhysType, linfBkwdAvailableBandWidth=linfBkwdAvailableBandWidth, connPvcOpeHighVci=connPvcOpeHighVci, connFrProfileName=connFrProfileName, perfIfPhysHCLcvErrors=perfIfPhysHCLcvErrors, cardOpeEntry=cardOpeEntry, connRouteOpeFourthryVPI=connRouteOpeFourthryVPI, nodeStatusSwitchMode=nodeStatusSwitchMode, LinfUnUsedParam=LinfUnUsedParam, connLoopOpeMode=connLoopOpeMode, pnniNodeEntry=pnniNodeEntry, connSoftPvcDstParam5=connSoftPvcDstParam5, connOamIndex=connOamIndex, connConfIfSvcs=connConfIfSvcs, perfTrapEnable=perfTrapEnable, clockOpe=clockOpe, linfMaxActiveVciBits=linfMaxActiveVciBits, connCeVcDownTimeSlot2=connCeVcDownTimeSlot2, perfIfPhysHCIdelUnassignedCells=perfIfPhysHCIdelUnassignedCells, connProfileCause=connProfileCause, connSoftPvcDstParam2=connSoftPvcDstParam2, connRouteFifthryVPI=connRouteFifthryVPI, connFrProfileIndexNext=connFrProfileIndexNext, connSoftPvcDstParam3=connSoftPvcDstParam3, connPvcContrastPort=connPvcContrastPort, connSoftPvcTable=connSoftPvcTable, perfIfPhysSEZs=perfIfPhysSEZs, connRouteOpeAddress=connRouteOpeAddress, perfIfPhysHCIecErrors=perfIfPhysHCIecErrors, nodeStatus=nodeStatus, connSoftPvcEntry=connSoftPvcEntry, connPvc=connPvc, connSoftPvcSrcVPI=connSoftPvcSrcVPI, perfIfReceivedCells=perfIfReceivedCells, connCeVcDownPartialFillSize=connCeVcDownPartialFillSize, perfIfPhysHCParityErrors=perfIfPhysHCParityErrors, connPvcTrfInDropCellsCounters=connPvcTrfInDropCellsCounters, connPvcTrfResult=connPvcTrfResult, connCeVcUpTimeSlot1=connCeVcUpTimeSlot1, connPvcOpeLowFifoIndex=connPvcOpeLowFifoIndex, nodeStatusNodeId=nodeStatusNodeId, LinfLBO=LinfLBO, connRoutePrimaryIfIndex=connRoutePrimaryIfIndex, nodeStatusStartTime=nodeStatusStartTime, connRouteOpeAddressLength=connRouteOpeAddressLength, connFrDlciRowStatus=connFrDlciRowStatus, slotIfConfStatus=slotIfConfStatus, connOamOpeCause=connOamOpeCause, LinfInterWorking=LinfInterWorking, connCe=connCe, conn=conn, LinfCodingMode=LinfCodingMode, connSoftPvcCause=connSoftPvcCause, connRoute=connRoute, cardStatusMode=cardStatusMode, ConnProfileIndex=ConnProfileIndex, perfIfTransmittedCells=perfIfTransmittedCells, linfRecommendation=linfRecommendation, linfIndex=linfIndex, connRouteFifthryIfIndex=connRouteFifthryIfIndex, perfIfPhysEntry=perfIfPhysEntry, diagActionStatus=diagActionStatus, connFrProfileRowStatus=connFrProfileRowStatus, perfIfPhysB1Errors=perfIfPhysB1Errors, connOamTable=connOamTable, diagActionKind=diagActionKind, connSoftPvcSrcAtmAddressLength=connSoftPvcSrcAtmAddressLength, connSoftPvcDstVCI=connSoftPvcDstVCI, matCmdOutputType=matCmdOutputType, connSoftPvcSrcParam2=connSoftPvcSrcParam2, scaleSwSide=scaleSwSide, matCmd=matCmd, slotIfConfBufferRev=slotIfConfBufferRev, pnniNodeLevel=pnniNodeLevel, connCeVcDownTimeSlot3=connCeVcDownTimeSlot3, linfFifoConfPeekRate=linfFifoConfPeekRate, perfIfMisDelivdCellsCounters=perfIfMisDelivdCellsCounters, connPvcIndex=connPvcIndex, perfIfPhysFramingBitErrors=perfIfPhysFramingBitErrors, nodeOpeReset=nodeOpeReset, connOamOpeStatus=connOamOpeStatus, connSoftPvcEstablishedSrcInf=connSoftPvcEstablishedSrcInf, connCeVcEntry=connCeVcEntry, DstSecondaryVPI=DstSecondaryVPI, connLoopOpeVci=connLoopOpeVci, LinfCellMappingMode=LinfCellMappingMode, linfParam5=linfParam5, connRouteTertiaryVPI=connRouteTertiaryVPI, connOamMode=connOamMode, connProfileName2Index=connProfileName2Index, connProfileParam1=connProfileParam1, linfPhysType=linfPhysType, diagParam1=diagParam1, connPvcTrfOutCells=connPvcTrfOutCells, pnniNodeLeadershipPriority=pnniNodeLeadershipPriority, linfConf=linfConf, nec=nec, linfFwdAvailableBandWidth=linfFwdAvailableBandWidth, connSoftPvcDstAtmAddressFormat=connSoftPvcDstAtmAddressFormat, connCeVcCause=connCeVcCause, perfIfPhysHCHecErorrs=perfIfPhysHCHecErorrs, diagCause=diagCause, matCmdOutput=matCmdOutput, connRouteTertiaryIfIndex=connRouteTertiaryIfIndex, connLoopOpe=connLoopOpe, connConfNodeSoftPvcs=connConfNodeSoftPvcs, slot=slot, connPvcOpeTopology=connPvcOpeTopology, connSoftPvcIndexNext=connSoftPvcIndexNext, ConnRouteOpeFailureCause=ConnRouteOpeFailureCause, matCmdStatus=matCmdStatus, connPvcContrastVpi=connPvcContrastVpi, linfParam3=linfParam3, connCeVcVci=connCeVcVci, connOamDefectNodeID=connOamDefectNodeID, connRouteOpeFifthryVPI=connRouteOpeFifthryVPI, cardStatusPriority=cardStatusPriority, connOamOpeSection=connOamOpeSection, connRouteSecondaryVPI=connRouteSecondaryVPI, connPvcTrfConf=connPvcTrfConf, connOamEntry=connOamEntry, connRouteOpePrimaryVPI=connRouteOpePrimaryVPI, connSoftPvcNodeKind=connSoftPvcNodeKind, connFrProfileCongestionMode=connFrProfileCongestionMode, cardStatusServerType=cardStatusServerType, connFrDlciTable=connFrDlciTable, DstPrimaryVPI=DstPrimaryVPI, connOamVpi=connOamVpi, connLoopOpeLoopBackPointNodeId=connLoopOpeLoopBackPointNodeId, connLoopOpeBase=connLoopOpeBase, connOamOpeVpi2=connOamOpeVpi2, diag=diag, scaleStatus=scaleStatus, linfStatusEntry=linfStatusEntry, connPvcContrastVci=connPvcContrastVci, connRouteOpeAddressFormat=connRouteOpeAddressFormat, connSoftPvcDstIfIndex=connSoftPvcDstIfIndex, connSoftPvcEstablishedSrcInfEntry=connSoftPvcEstablishedSrcInfEntry, LinfFilterMaskVpi=LinfFilterMaskVpi, connFrDlciPCR=connFrDlciPCR, linfBandWidth=linfBandWidth, connSoftPvcDstParam7=connSoftPvcDstParam7, connPvcTrfTable=connPvcTrfTable, clockMode=clockMode, nodeStatusIndex=nodeStatusIndex, cardOpeSave=cardOpeSave, perfIfUpcErrorCells=perfIfUpcErrorCells, perfIfPhysPort=perfIfPhysPort, connPvcTrfEntry=connPvcTrfEntry, connConfIfPvcs=connConfIfPvcs, connRouteOpeSixthryIfIndex=connRouteOpeSixthryIfIndex, nodeStatusTable=nodeStatusTable, clock=clock, perfIfSlotUpcErrorCells=perfIfSlotUpcErrorCells, connSoftPvcTrafficType=connSoftPvcTrafficType, connLoopOpeLoopBackPointIdLength=connLoopOpeLoopBackPointIdLength, clockSlaveLine1Status=clockSlaveLine1Status, perfIfEntry=perfIfEntry, linfParam6=linfParam6, connLoopOpeNormalEndCount=connLoopOpeNormalEndCount, connCeVcCondition=connCeVcCondition, PnniNodeId=PnniNodeId, perfIfPhysPathParityErrors=perfIfPhysPathParityErrors, connPvcTrfInDropCells=connPvcTrfInDropCells, nodeStatusPower=nodeStatusPower, DstAtmAddress=DstAtmAddress, clockSlaveLine=clockSlaveLine, connPvcParam6=connPvcParam6, connCeVcUpTimeSlot3=connCeVcUpTimeSlot3, perfIfPhysCrcErrors=perfIfPhysCrcErrors, connLoopOpePort=connLoopOpePort, clockOpeCause=clockOpeCause, nodeStatusFan=nodeStatusFan, perfIfPhysFramingErrors=perfIfPhysFramingErrors, pnniNodeRestrictedBranching=pnniNodeRestrictedBranching, nodeStatusOperStatus=nodeStatusOperStatus, connPvcContrastParam7=connPvcContrastParam7, connRouteOpeTertiaryIfIndex=connRouteOpeTertiaryIfIndex, LinfFractionalType=LinfFractionalType, clockAccuracy=clockAccuracy, linfParam4=linfParam4, linfFifoConfTable=linfFifoConfTable, nodePCMCIATable=nodePCMCIATable, connOamPort=connOamPort, perfIfPhysHCTransmittedCells=perfIfPhysHCTransmittedCells, perfIfPhysHCBitErrors=perfIfPhysHCBitErrors, slotIfConfEntry=slotIfConfEntry, connRouteEntry=connRouteEntry, connCeVcUpPartialFillSize=connCeVcUpPartialFillSize, connSoftPvcDstParam1=connSoftPvcDstParam1, connOamVci=connOamVci, slotIfConfResetResult=slotIfConfResetResult, matCmdStop=matCmdStop, linfFifoConfEntry=linfFifoConfEntry, connRouteFourthryIfIndex=connRouteFourthryIfIndex, connCeVcDownPCR=connCeVcDownPCR, connFrDlci=connFrDlci, connSoftPvcDstAtmAddressLength=connSoftPvcDstAtmAddressLength, perfIfPhysPathFEBEs=perfIfPhysPathFEBEs, perfIfPhysTransmittedCells=perfIfPhysTransmittedCells, perfIfPhysHCB1Errors=perfIfPhysHCB1Errors, connPvcContrastParam2=connPvcContrastParam2, connSvcInf=connSvcInf, perfIfPhysReceivedCells=perfIfPhysReceivedCells, connFrDlciCause=connFrDlciCause, nodeOpe=nodeOpe, connPvcOpeLowParam1=connPvcOpeLowParam1, connPvcContrastParam4=connPvcContrastParam4, clockSlaveLine2Status=clockSlaveLine2Status, pnniNodeRestrictedTransit=pnniNodeRestrictedTransit, connPvcEntry=connPvcEntry, pnniNodeOpe=pnniNodeOpe, connFrProfileCapsulationMode=connFrProfileCapsulationMode, perfIfSlotTable=perfIfSlotTable, connOamOpeVci1=connOamOpeVci1)
mibBuilder.exportSymbols("NEC-MIB", perfIfPhysHCFEBEErrors=perfIfPhysHCFEBEErrors, connRouteOpeFailureCause=connRouteOpeFailureCause, connConfIfSoftPvcs=connConfIfSoftPvcs, connProfileIndexNext=connProfileIndexNext, cardStatusRevision=cardStatusRevision, connPvcTopology=connPvcTopology, connPvcOpeTrafficType=connPvcOpeTrafficType, connFrProfileName2IndexResult=connFrProfileName2IndexResult, clockSlaveLine4Status=clockSlaveLine4Status, perfIfMisDelivdCells=perfIfMisDelivdCells, connSoftPvcTopology=connSoftPvcTopology, connRouteSecondaryIfIndex=connRouteSecondaryIfIndex, connConfIfTable=connConfIfTable, cardStatusTable=cardStatusTable, perfIfTable=perfIfTable, connOamOpePort2=connOamOpePort2, connRouteOpeStatus=connRouteOpeStatus, connSoftPvcSrcParam4=connSoftPvcSrcParam4, connPvcVci=connPvcVci, connRoutePrimaryCause=connRoutePrimaryCause, connSoftPvcDstVPI=connSoftPvcDstVPI, ClockSlaveLineStatus=ClockSlaveLineStatus, connPvcParam4=connPvcParam4, connRouteSeventhryVPI=connRouteSeventhryVPI, connPvcOpeHighFifoIndex=connPvcOpeHighFifoIndex, connPvcContrastFifoIndex=connPvcContrastFifoIndex, connSoftPvcDstAtmAddress=connSoftPvcDstAtmAddress, linfParam7=linfParam7, connCeVcPort=connCeVcPort, connFrProfileCause=connFrProfileCause, connRouteSeventhryIfIndex=connRouteSeventhryIfIndex, connSoftPvcSrcParam1=connSoftPvcSrcParam1, LinfService=LinfService, perfIfPhysHecErorrs=perfIfPhysHecErorrs, connSoftPvcRestRetry=connSoftPvcRestRetry, nodeOpeSaveResult=nodeOpeSaveResult, perfIfPhysTable=perfIfPhysTable, cardOpeSaveResult=cardOpeSaveResult, perfIfPhysHCLineFEBEs=perfIfPhysHCLineFEBEs, cardStatusEntry=cardStatusEntry, linfLoopBackCause=linfLoopBackCause, linfStatusTable=linfStatusTable, ConnSoftPvcSrcAtmAddressFormat=ConnSoftPvcSrcAtmAddressFormat, linf=linf, connSoftPvcDstParam6=connSoftPvcDstParam6, connProfileTable=connProfileTable, clockSlaveLine3Status=clockSlaveLine3Status, perfIfPhysHCFramingErrors=perfIfPhysHCFramingErrors, connPvcPort=connPvcPort, perfIfPhysHCFramingPatternErrors=perfIfPhysHCFramingPatternErrors, connSoftPvcRetry=connSoftPvcRetry, cardStatusMateSlotNumber=cardStatusMateSlotNumber, pnni=pnni, perfIfPhysHCFramingBitErrors=perfIfPhysHCFramingBitErrors, connCeVc=connCeVc, linfFifoConfRowStatus=linfFifoConfRowStatus, DstPrimaryIfIndex=DstPrimaryIfIndex, connRouteFourthryVPI=connRouteFourthryVPI, connSvcIndex=connSvcIndex, m7_corporate=m7_corporate, connRouteOpeFourthryIfIndex=connRouteOpeFourthryIfIndex, perfIfPhysLcvErrors=perfIfPhysLcvErrors, connConf=connConf, connProfileName=connProfileName, PnniPeerGroupId=PnniPeerGroupId, LinfFilterMaskVci=LinfFilterMaskVci, connConfNode=connConfNode, connOamOpePoint=connOamOpePoint, connOamContrastVci=connOamContrastVci, connCeVcTable=connCeVcTable, perfIfPhysHCHecDropCells=perfIfPhysHCHecDropCells, connFrProfileDEtoCLP=connFrProfileDEtoCLP, perfIfTransmittedCellsCounters=perfIfTransmittedCellsCounters, connPvcFifoIndex=connPvcFifoIndex, slotIfConfIndex=slotIfConfIndex, connSoftPvcSrcAtmAddress=connSoftPvcSrcAtmAddress, cardOpeReset=cardOpeReset, linfFifoConfifIndex=linfFifoConfifIndex, connRouteOpeSecondaryIfIndex=connRouteOpeSecondaryIfIndex, necProductDepend=necProductDepend, linfStatus=linfStatus, DstAtmAddressFormat=DstAtmAddressFormat, clockOpeStatus=clockOpeStatus, linfFifoConfMaxBurstSize=linfFifoConfMaxBurstSize, nec_mib=nec_mib, connPvcTrafficType=connPvcTrafficType, clockOpeSlaveLine1=clockOpeSlaveLine1, connPvcOpeHighParam2=connPvcOpeHighParam2, connCeVcDirection=connCeVcDirection, connLoopOpeCause=connLoopOpeCause, connPvcParam3=connPvcParam3, ConnSoftPvcEstSrcInfIndex=ConnSoftPvcEstSrcInfIndex, perfIfPhysB2Errors=perfIfPhysB2Errors, perfIfSlotReceivedCellsCounters=perfIfSlotReceivedCellsCounters, connConfNodeUnCompleteSvcs=connConfNodeUnCompleteSvcs, connOamPoint=connOamPoint, connPvcDirection=connPvcDirection, LinfScramble=LinfScramble, clockSlaveLine1=clockSlaveLine1, connLoopOpeStatus=connLoopOpeStatus, m7_phase2_mib=m7_phase2_mib, connOamContrastVpi=connOamContrastVpi, connFrProfileCLPValue=connFrProfileCLPValue, pnniNodeAtmAddress=pnniNodeAtmAddress, connFrDlciFrProfile=connFrDlciFrProfile, connPvcParam7=connPvcParam7, LinfCasMode=LinfCasMode, connSoftPvcDstFifoIndex=connSoftPvcDstFifoIndex, linfParam1=linfParam1, LinfFractionalSet=LinfFractionalSet, connSoftPvcSrcParam7=connSoftPvcSrcParam7, connLoopOpeVpi=connLoopOpeVpi, connFrProfile=connFrProfile, connRouteOpeFifthryIfIndex=connRouteOpeFifthryIfIndex, connPvcVpi=connPvcVpi, connFrDlciIndex=connFrDlciIndex, cardOpeDiagnosis=cardOpeDiagnosis, perfIfPhysHecDropCells=perfIfPhysHecDropCells, connConfNodeSvcs=connConfNodeSvcs, connRouteOpeSeventhryIfIndex=connRouteOpeSeventhryIfIndex, connFrDlciPort=connFrDlciPort, connProfile=connProfile, perfIfPhysHCPathFEBEs=perfIfPhysHCPathFEBEs, connPvcContrastParam3=connPvcContrastParam3, connConfNodePvcs=connConfNodePvcs, PnniAtmAddr=PnniAtmAddr, connSoftPvcIndex=connSoftPvcIndex, connOamOpePort1=connOamOpePort1, ConnFrProfileIndex=ConnFrProfileIndex, connProfileParam4=connProfileParam4, nodePCMCIAEntry=nodePCMCIAEntry, perfIfPhysHCSEZs=perfIfPhysHCSEZs, clockSlaveLine4=clockSlaveLine4, connFrDlciEntry=connFrDlciEntry, slotIfConfBufferType=slotIfConfBufferType, LinfMinVci=LinfMinVci, connSoftPvcSrcFifoIndex=connSoftPvcSrcFifoIndex, connPvcOpe=connPvcOpe, linfParam2=linfParam2, connSoftPvcEstablishedSrcInfTable=connSoftPvcEstablishedSrcInfTable, connSoftPvcSrcVCI=connSoftPvcSrcVCI, connFrProfileName2Index=connFrProfileName2Index, scaleFileName=scaleFileName, perfIfPhysHCBip8Errors=perfIfPhysHCBip8Errors, connRouteSixthryIfIndex=connRouteSixthryIfIndex, connPvcTrfInCells=connPvcTrfInCells, linfJ2Rate=linfJ2Rate, connPvcOpeLowPort=connPvcOpeLowPort, connSoftPvcRowStatus=connSoftPvcRowStatus, connPvcTrfOutCellsCounters=connPvcTrfOutCellsCounters, connPvcContrastParam1=connPvcContrastParam1, perfIfPhysParityErrors=perfIfPhysParityErrors, connSoftPvcSrcAtmAddressFormat=connSoftPvcSrcAtmAddressFormat, perfIfSlotTransmittedCells=perfIfSlotTransmittedCells, connLoopOpeAbortCount=connLoopOpeAbortCount, perfIfSlotHCThresholdExcessCells=perfIfSlotHCThresholdExcessCells, connFr=connFr, perfIfIndex=perfIfIndex, connPvcParam5=connPvcParam5, slotIfConfReset=slotIfConfReset, linfFifoConfIndex=linfFifoConfIndex, connPvcOpeLowVpi=connPvcOpeLowVpi, perfIfPhysFramingPatternErrors=perfIfPhysFramingPatternErrors, slotIfConfTable=slotIfConfTable, connLoopOpeCount=connLoopOpeCount, nodeOpeSave=nodeOpeSave, connOamOpeVpi1=connOamOpeVpi1, connCeVcUpTimeSlot2=connCeVcUpTimeSlot2, connPvcOpeStatus=connPvcOpeStatus, clockOpeSlaveLine4=clockOpeSlaveLine4, perfIfSlotInDropCells=perfIfSlotInDropCells, linfMaxActiveVpiBits=linfMaxActiveVpiBits, connFrProfileIndex=connFrProfileIndex, connProfileEntry=connProfileEntry, connFrDlciMBS=connFrDlciMBS, nodeStatusSelfSystem=nodeStatusSelfSystem, nodePCMCIAIndex=nodePCMCIAIndex, connRouteOpe=connRouteOpe, connOamOpeVci2=connOamOpeVci2, perfIfUpcErrorCellsCounters=perfIfUpcErrorCellsCounters, clockOpeMode=clockOpeMode, connCeVcUpPCR=connCeVcUpPCR, perfIfSlotThresholdExcessCells=perfIfSlotThresholdExcessCells, perfIfPhysHCB3Errors=perfIfPhysHCB3Errors, perfIfPhysHCCrcErrors=perfIfPhysHCCrcErrors, cardStatusMateAtmAddr=cardStatusMateAtmAddr, linfFifoConfSustainRate=linfFifoConfSustainRate, perfIfThresholdExcessCells=perfIfThresholdExcessCells, connLoopOpeAbnormalEndCount=connLoopOpeAbnormalEndCount, m7_phase2=m7_phase2, atomis=atomis, connProfileRowStatus=connProfileRowStatus, perfIfReceivedCellsCounters=perfIfReceivedCellsCounters, connPvcOpeHighVpi=connPvcOpeHighVpi, connFrProfileEntry=connFrProfileEntry, connRouteOpeSecondaryVPI=connRouteOpeSecondaryVPI, connOamStatus=connOamStatus, connCeVcCDVT=connCeVcCDVT, perfIfSlotReceivedCells=perfIfSlotReceivedCells, connRouteOpeSeventhryVPI=connRouteOpeSeventhryVPI, connRoutePrimaryVPI=connRoutePrimaryVPI, connOam=connOam, connPvcOpeHighPort=connPvcOpeHighPort, DstSecondaryIfIndex=DstSecondaryIfIndex, nodeStatusEnvironment=nodeStatusEnvironment, nodeOpeCopy=nodeOpeCopy, connOamOpeMode=connOamOpeMode, connSoftPvcSrcParam5=connSoftPvcSrcParam5, perfIfPhysLineFEBEs=perfIfPhysLineFEBEs, linfFifoConfStatus=linfFifoConfStatus, connPvcParam1=connPvcParam1, clockSlaveLine2=clockSlaveLine2, matCmdTimeOut=matCmdTimeOut, connFrDlciSCR=connFrDlciSCR, clockOpeSlaveLine3=clockOpeSlaveLine3, scaleDataType=scaleDataType, connRouteType=connRouteType, connSoftPvcSrcParam6=connSoftPvcSrcParam6, connPvcContrastParam5=connPvcContrastParam5, perfIfPhysHCReceivedCells=perfIfPhysHCReceivedCells, cardStatusAtmAddr=cardStatusAtmAddr, perfIfSlotHCUpcErrorCells=perfIfSlotHCUpcErrorCells, clockOpeSlaveLine2=clockOpeSlaveLine2, connProfileParam2=connProfileParam2, nodeStatusEntry=nodeStatusEntry, perf=perf, connRouteAtmAddress=connRouteAtmAddress, connPvcOpeHighParam1=connPvcOpeHighParam1, connProfileIndex=connProfileIndex, diagPreCause=diagPreCause, connCeVcDownTimeSlot1=connCeVcDownTimeSlot1, connRoutePrimaryStatus=connRoutePrimaryStatus, scaleCause=scaleCause, perfIfPhysBip8Errors=perfIfPhysBip8Errors, connPvcTrfInCellsCounters=connPvcTrfInCellsCounters, perfIfPhysB3Errors=perfIfPhysB3Errors, connRouteSixthryVPI=connRouteSixthryVPI, connRouteOpePrimaryIfIndex=connRouteOpePrimaryIfIndex, nodeStatusSwitchType=nodeStatusSwitchType, LinfMaxVci=LinfMaxVci, cardOpeCopyResult=cardOpeCopyResult, DstAtmAddressLength=DstAtmAddressLength, connOamSection=connOamSection, connFrProfileCIR=connFrProfileCIR, linfUnassignedIdle=linfUnassignedIdle, pnniNodePeerGroupId=pnniNodePeerGroupId, linfLoopBack=linfLoopBack, clockOpeAccuracy=clockOpeAccuracy, connConfNodeTrafs=connConfNodeTrafs, ConnSoftPvcDstAtmAddressFormat=ConnSoftPvcDstAtmAddressFormat, cardOpeCopy=cardOpeCopy, connProfileName2IndexResult=connProfileName2IndexResult, connConfNodeTrafClear=connConfNodeTrafClear, perfIfPhysBitErrors=perfIfPhysBitErrors)
mibBuilder.exportSymbols("NEC-MIB", connConfNodeCompleteSvcs=connConfNodeCompleteSvcs, necProduct=necProduct, connFrProfileTable=connFrProfileTable, connOamDefectType=connOamDefectType, cardOpeTable=cardOpeTable, perfIfPhysHCPathParityErrors=perfIfPhysHCPathParityErrors, perfIfThresholdExcessCellsCounters=perfIfThresholdExcessCellsCounters, atomis_mib=atomis_mib, pnniNodeTable=pnniNodeTable, nodePCMCIAType=nodePCMCIAType, connPvcOpeCause=connPvcOpeCause, connCeVcRowStatus=connCeVcRowStatus, connRouteTable=connRouteTable, connSoftPvcSrcIfIndex=connSoftPvcSrcIfIndex, perfIfPhysFEBEs=perfIfPhysFEBEs, connFrProfileCLPtoDE=connFrProfileCLPtoDE, pnniNode=pnniNode, connRouteAtmAddressFormat=connRouteAtmAddressFormat, slotIfConfRev=slotIfConfRev, connProfileParam3=connProfileParam3, connFrProfileDEValue=connFrProfileDEValue, connPvcOpeLowParam2=connPvcOpeLowParam2, nodePCMCIAStatus=nodePCMCIAStatus, node=node, scaleTarget=scaleTarget, connFrProfileInterworkingType=connFrProfileInterworkingType)
