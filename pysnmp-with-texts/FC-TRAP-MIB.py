#
# PySNMP MIB module FC-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FC-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:12:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
sbProducerPort, pepName, sbProducerHost, devName = mibBuilder.importSymbols("AGGREGATED-EXT-MIB", "sbProducerPort", "pepName", "sbProducerHost", "devName")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
fCServer, fCDescText, fCApp = mibBuilder.importSymbols("FC-DS1-MIB", "fCServer", "fCDescText", "fCApp")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Counter64, ObjectName, Counter32, snmpModules, Integer32, TimeTicks, Gauge32, NotificationType, enterprises, MibIdentifier, iso, ModuleIdentity, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Counter64", "ObjectName", "Counter32", "snmpModules", "Integer32", "TimeTicks", "Gauge32", "NotificationType", "enterprises", "MibIdentifier", "iso", "ModuleIdentity", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TestAndIncr, TextualConvention, TimeStamp, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TestAndIncr", "TextualConvention", "TimeStamp", "DisplayString", "TruthValue", "RowStatus")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
softSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
fcDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9))
fcTraps = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0))
if mibBuilder.loadTexts: fcTraps.setLastUpdated('240701')
if mibBuilder.loadTexts: fcTraps.setOrganization('Lucent Technologies')
if mibBuilder.loadTexts: fcTraps.setContactInfo('')
if mibBuilder.loadTexts: fcTraps.setDescription('The MIB module for entities implementing the xxxx protocol.')
fcSwitchRegnError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 1)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fcSwitchRegnError.setStatus('current')
if mibBuilder.loadTexts: fcSwitchRegnError.setDescription('Registration of FC Server with the switch for FC API services has failed. VARIABLE DEFINITIONS: 1. FCServer - FC server in the alarm origin field Severity: CRITICAL')
fCSwitchRegnSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 2)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fCSwitchRegnSucc.setStatus('current')
if mibBuilder.loadTexts: fCSwitchRegnSucc.setDescription('Registration of FC Server with the switch for FC API services is successful. VARIABLE DEFINITIONS: 1. FCServer - FC Server in the alarm origin field Severity: INFO')
fcAddLLCNodeError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 3)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fcAddLLCNodeError.setStatus('current')
if mibBuilder.loadTexts: fcAddLLCNodeError.setDescription('The second step of registration with the switch (add_LLC_Node) has failed. VARIABLE DEFINITIONS: 1. FCServer - FC Server in the alarm origin field Severity: CRITICAL')
fcAddLLCNodeSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 4)).setObjects(("FC-DS1-MIB", "fCServer"))
if mibBuilder.loadTexts: fcAddLLCNodeSucc.setStatus('current')
if mibBuilder.loadTexts: fcAddLLCNodeSucc.setDescription('The second step of registration with the switch (add_LLC_Node) is successful. VARIABLE DEFINITIONS: 1. fCServer - FC Server in the alarm origin field Severity: INFO')
fcAppStartSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 5)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"))
if mibBuilder.loadTexts: fcAppStartSucc.setStatus('current')
if mibBuilder.loadTexts: fcAppStartSucc.setDescription('fC Application has been started successfully by the FC Server. VARIBLE DEFINITIONS: 1. fCServer - FC Server in the alarm origin field 2. fCApp - FC Application ID to identify the application Severity: INFO')
fcAppEndSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 6)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"))
if mibBuilder.loadTexts: fcAppEndSucc.setStatus('current')
if mibBuilder.loadTexts: fcAppEndSucc.setDescription('FC Application has ended successfully by the FC Server. VARIBLE DEFINITIONS: 1. fCServer - FC Server in the alarm origin field 2. fCApp - FC Application ID to identify the application Severity: INFO')
fcAppStartError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 7)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"))
if mibBuilder.loadTexts: fcAppStartError.setStatus('current')
if mibBuilder.loadTexts: fcAppStartError.setDescription('FC Application has failed to started by the FC Server. VARIBLE DEFINITIONS: 1. fCServer - FC Server in the alarm origin field 2. fCApp - FC Application ID to identify the application Severity: MAJOR')
fcAppInfoError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 8)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"), ("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcAppInfoError.setStatus('current')
if mibBuilder.loadTexts: fcAppInfoError.setDescription('The FC Application has sent an Informational alarm to the FC Server. VARIBLE DEFINITIONS: 1. fCServer - FC Server in the alarm origin field 2. fCApp - FC Application ID to identify the application 3. fCDescText - Application Alarm description text Severity: INFO')
fcAppMajorError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 9)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"), ("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcAppMajorError.setStatus('current')
if mibBuilder.loadTexts: fcAppMajorError.setDescription('The FC Application has sent a Major alarm to the FC Server. VARIBLE DEFINITIONS: 1. fCServer - FC Server in the alarm origin field 2. fCApp - FC Application ID to identify the application 3. fCDescText - Application Alarm description text Severity: MAJOR')
fcAppCritError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 10)).setObjects(("FC-DS1-MIB", "fCServer"), ("FC-DS1-MIB", "fCApp"), ("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcAppCritError.setStatus('current')
if mibBuilder.loadTexts: fcAppCritError.setDescription('The FC Application has sent a Critical alarm to the FC Server. VARIBLE DEFINITIONS: 1. FCServer - FC Server in the alarm origin field 2. FCApp - FC Application ID to identify the application 3. FCDescText - Application Alarm description text Severity: CRITICAL')
fcUnparsedEvent = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 9, 0, 11)).setObjects(("FC-DS1-MIB", "fCDescText"))
if mibBuilder.loadTexts: fcUnparsedEvent.setStatus('current')
if mibBuilder.loadTexts: fcUnparsedEvent.setDescription('The FC Application has sent a Critical alarm to the FC Server. VARIBLE DEFINITIONS: 1. FCDescText - Application Alarm description text Severity: CRITICAL')
mibBuilder.exportSymbols("FC-TRAP-MIB", fcAppStartSucc=fcAppStartSucc, fcAppMajorError=fcAppMajorError, fcAppCritError=fcAppCritError, fcSwitchRegnError=fcSwitchRegnError, fcAppStartError=fcAppStartError, fcAppEndSucc=fcAppEndSucc, fcAppInfoError=fcAppInfoError, PYSNMP_MODULE_ID=fcTraps, fCSwitchRegnSucc=fCSwitchRegnSucc, fcUnparsedEvent=fcUnparsedEvent, lucent=lucent, products=products, fcDeviceServer=fcDeviceServer, softSwitch=softSwitch, fcAddLLCNodeSucc=fcAddLLCNodeSucc, fcAddLLCNodeError=fcAddLLCNodeError, fcTraps=fcTraps)
