#
# PySNMP MIB module NE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ne, = mibBuilder.importSymbols("CORIOLIS-MIB", "ne")
logRingVPortNo, phyRingPortNo, phyRingSlotNo = mibBuilder.importSymbols("RING-MIB", "logRingVPortNo", "phyRingPortNo", "phyRingSlotNo")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Counter32, Gauge32, ModuleIdentity, Counter64, TimeTicks, iso, MibIdentifier, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "TimeTicks", "iso", "MibIdentifier", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
neMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 5, 2))
if mibBuilder.loadTexts: neMIB.setLastUpdated('0007270000Z')
if mibBuilder.loadTexts: neMIB.setOrganization('Coriolis Networks')
if mibBuilder.loadTexts: neMIB.setContactInfo(' Shubhra Garg Postal: 330 Codman Hill Road, Boxboro MA, 01719. Tel: +1 978 264 1904 Fax: +1 978 264 1929 E-mail: shubhra@coriolisnet.com')
if mibBuilder.loadTexts: neMIB.setDescription('The MIB module for network elements as configured by Gateway Network Element')
cfgNeTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 5, 1), )
if mibBuilder.loadTexts: cfgNeTable.setStatus('current')
if mibBuilder.loadTexts: cfgNeTable.setDescription('A table that contains information about the network elements configuration as configured by Gateway network element.')
cfgNeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1), ).setIndexNames((0, "NE-MIB", "cfgNeIPAddr"))
if mibBuilder.loadTexts: cfgNeEntry.setStatus('current')
if mibBuilder.loadTexts: cfgNeEntry.setDescription('Configuration information about a network element as configured by gateway network element')
cfgNeIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: cfgNeIPAddr.setStatus('current')
if mibBuilder.loadTexts: cfgNeIPAddr.setDescription('The IP address of NE as configured by GNE')
cfgNePriMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNePriMacAddr.setStatus('current')
if mibBuilder.loadTexts: cfgNePriMacAddr.setDescription('The MAC address of primary management module on network element')
cfgNeSecMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNeSecMacAddr.setStatus('current')
if mibBuilder.loadTexts: cfgNeSecMacAddr.setDescription('The MAC address of secondary management module on network element')
cfgNeSpareMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfgNeSpareMacAddr.setStatus('current')
if mibBuilder.loadTexts: cfgNeSpareMacAddr.setDescription('The MAC address of spare management module on network element. It is useful when swapping management modules on network element.')
neReachTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 5, 3), )
if mibBuilder.loadTexts: neReachTable.setStatus('current')
if mibBuilder.loadTexts: neReachTable.setDescription('A table that lists rings to the reachable network elements.')
neReachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 5, 3, 1), ).setIndexNames((0, "NE-MIB", "neReachIpAddr"), (0, "RING-MIB", "phyRingSlotNo"), (0, "RING-MIB", "phyRingPortNo"), (0, "RING-MIB", "logRingVPortNo"))
if mibBuilder.loadTexts: neReachEntry.setStatus('current')
if mibBuilder.loadTexts: neReachEntry.setDescription('Lists a ring to reachable network element.')
neReachIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 5, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neReachIpAddr.setStatus('current')
if mibBuilder.loadTexts: neReachIpAddr.setDescription('The IP address of a reachable NE.')
mibBuilder.exportSymbols("NE-MIB", cfgNeSpareMacAddr=cfgNeSpareMacAddr, neReachTable=neReachTable, cfgNeEntry=cfgNeEntry, cfgNeTable=cfgNeTable, neReachEntry=neReachEntry, neReachIpAddr=neReachIpAddr, cfgNeIPAddr=cfgNeIPAddr, cfgNePriMacAddr=cfgNePriMacAddr, cfgNeSecMacAddr=cfgNeSecMacAddr, neMIB=neMIB, PYSNMP_MODULE_ID=neMIB)
