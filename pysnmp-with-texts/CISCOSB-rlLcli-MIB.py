#
# PySNMP MIB module CISCOSB-rlLcli-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-rlLcli-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
switch001, = mibBuilder.importSymbols("CISCOSB-MIB", "switch001")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, iso, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, ModuleIdentity, Counter64, Integer32, Counter32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "iso", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Counter64", "Integer32", "Counter32", "IpAddress", "TimeTicks")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
rlLCli = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74))
rlLCli.setRevisions(('2007-07-26 00:00', '2005-04-11 00:00', '2005-03-28 00:00', '2004-03-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlLCli.setRevisionsDescriptions(('Removed ranges of rlLCliTimeout, rlLCliSshTimeout, rlLCliTelnetTimeout since the range is dynamic according to device capabilities. ', "Changed lower range of rlLCliTimeout, rlLCliSshTimeout, rlLCliTelnetTimeout to 0 to support 0 as 'no timeout' ", '1) Added Module-identity range. 2) Changed description of rlLCliMibVersion 3) Added ranges to rlLCliTimeout, rlLCliSshTimeout, rlLCliTelnetTimeout ', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: rlLCli.setLastUpdated('200503280000Z')
if mibBuilder.loadTexts: rlLCli.setOrganization('Cisco Small Business')
if mibBuilder.loadTexts: rlLCli.setContactInfo('Postal: 170 West Tasman Drive San Jose , CA 95134-1706 USA Website: Cisco Small Business Home http://www.cisco.com/smb>;, Cisco Small Business Support Community <http://www.cisco.com/go/smallbizsupport>')
if mibBuilder.loadTexts: rlLCli.setDescription('The private MIB module definition for CISCOSB CLI MIB.')
rlLCliMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlLCliMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlLCliMibVersion.setDescription("MIB's version, the current version is 3.")
rlLCliTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3932159)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliTimeout.setStatus('current')
if mibBuilder.loadTexts: rlLCliTimeout.setDescription('LCLI Timeout indicates the interval in seconds, that the system waits until user input is detected.')
rlLCliHistoryEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliHistoryEnable.setStatus('current')
if mibBuilder.loadTexts: rlLCliHistoryEnable.setDescription('Indicates if command history function is supported.')
rlLCliHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 4), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliHistorySize.setStatus('current')
if mibBuilder.loadTexts: rlLCliHistorySize.setDescription('Indicates number of commands that the system will record in its history buffer.')
rlLcliCommandLevelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5), )
if mibBuilder.loadTexts: rlLcliCommandLevelTable.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelTable.setDescription('This Table maps a CLI command to its level. ')
rlLcliCommandLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5, 1), ).setIndexNames((0, "CISCOSB-rlLcli-MIB", "rlLcliCommandLevelCommandName"), (0, "CISCOSB-rlLcli-MIB", "rlLcliCommandLevelContextName"))
if mibBuilder.loadTexts: rlLcliCommandLevelEntry.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelEntry.setDescription('The row definition for this table.')
rlLcliCommandLevelCommandName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLcliCommandLevelCommandName.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelCommandName.setDescription(' The CLI command name ')
rlLcliCommandLevelContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLcliCommandLevelContextName.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelContextName.setDescription(' The CLI context ID which the command name is associated with ')
rlLcliCommandLevelInsertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5, 1, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLcliCommandLevelInsertTime.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelInsertTime.setDescription('The time elapsed until this entry was created.')
rlLcliCommandLevelCommandLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLcliCommandLevelCommandLevel.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelCommandLevel.setDescription(' The level which is associated with the command name ')
rlLcliCommandLevelActionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("set", 1), ("reset", 2), ("setAll", 3), ("resetAll", 4))).clone('set')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLcliCommandLevelActionMode.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelActionMode.setDescription(' The level action which is associated with the command name ')
rlLcliCommandLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 5, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLcliCommandLevelStatus.setStatus('current')
if mibBuilder.loadTexts: rlLcliCommandLevelStatus.setDescription(' The status of the commandLevel table entry. ')
rlLCliSshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3932159)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliSshTimeout.setStatus('current')
if mibBuilder.loadTexts: rlLCliSshTimeout.setDescription('LCLI Timeout indicates the interval in seconds, that the system waits until user input is detected on SSH LCLI.')
rlLCliTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3932159)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliTelnetTimeout.setStatus('current')
if mibBuilder.loadTexts: rlLCliTelnetTimeout.setDescription('LCLI Timeout indicates the interval in seconds, that the system waits until user input is detected on telnet LCLI.')
rlLCliTelnetHistoryEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliTelnetHistoryEnable.setStatus('current')
if mibBuilder.loadTexts: rlLCliTelnetHistoryEnable.setDescription('Indicates if command history function is supported for Telnet.')
rlLCliTelnetHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 9), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliTelnetHistorySize.setStatus('current')
if mibBuilder.loadTexts: rlLCliTelnetHistorySize.setDescription('Indicates number of commands that the system will record in its history buffer for Telnet.')
rlLCliSshHistoryEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliSshHistoryEnable.setStatus('current')
if mibBuilder.loadTexts: rlLCliSshHistoryEnable.setDescription('Indicates if command history function is supported for Ssh.')
rlLCliSshHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 74, 11), Unsigned32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLCliSshHistorySize.setStatus('current')
if mibBuilder.loadTexts: rlLCliSshHistorySize.setDescription('Indicates number of commands that the system will record in its history buffer for Ssh.')
mibBuilder.exportSymbols("CISCOSB-rlLcli-MIB", rlLCliSshHistoryEnable=rlLCliSshHistoryEnable, rlLCliTelnetHistorySize=rlLCliTelnetHistorySize, rlLcliCommandLevelEntry=rlLcliCommandLevelEntry, rlLcliCommandLevelInsertTime=rlLcliCommandLevelInsertTime, rlLcliCommandLevelActionMode=rlLcliCommandLevelActionMode, rlLCliSshHistorySize=rlLCliSshHistorySize, rlLCliMibVersion=rlLCliMibVersion, rlLCliTimeout=rlLCliTimeout, PYSNMP_MODULE_ID=rlLCli, rlLcliCommandLevelCommandName=rlLcliCommandLevelCommandName, rlLCli=rlLCli, rlLcliCommandLevelTable=rlLcliCommandLevelTable, rlLCliHistorySize=rlLCliHistorySize, rlLcliCommandLevelCommandLevel=rlLcliCommandLevelCommandLevel, rlLCliTelnetTimeout=rlLCliTelnetTimeout, rlLcliCommandLevelContextName=rlLcliCommandLevelContextName, rlLCliTelnetHistoryEnable=rlLCliTelnetHistoryEnable, rlLCliSshTimeout=rlLCliSshTimeout, rlLCliHistoryEnable=rlLCliHistoryEnable, rlLcliCommandLevelStatus=rlLcliCommandLevelStatus)
