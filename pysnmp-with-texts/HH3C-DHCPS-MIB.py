#
# PySNMP MIB module HH3C-DHCPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DHCPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:25:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
hh3cRhw, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cRhw")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, iso, IpAddress, TimeTicks, Unsigned32, ModuleIdentity, ObjectIdentity, MibIdentifier, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "iso", "IpAddress", "TimeTicks", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "Counter64", "Gauge32")
RowStatus, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "DisplayString", "TextualConvention")
hh3cDHCPServerMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 2))
if mibBuilder.loadTexts: hh3cDHCPServerMib.setLastUpdated('200602200000Z')
if mibBuilder.loadTexts: hh3cDHCPServerMib.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cDHCPServerMib.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cDHCPServerMib.setDescription('This MIB describes objects used for managing DHCP server.')
class Hh3cDhcpSEnabledStatus(TextualConvention, Integer32):
    description = 'To descript the status of some function is Enabled or Disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 0))
    namedValues = NamedValues(("enabled", 1), ("disabled", 0))

hh3cDHCPServerMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1))
hh3cDHCPSGlobalPoolTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolTable.setDescription('A table for creating DHCP server global pools.')
hh3cDHCPSGlobalPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolEntry.setDescription('An entry containing objects for creating or deleting a global pool for the DHCP server.')
hh3cDHCPSGlobalPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolName.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolName.setDescription('DHCP server global pool name.')
hh3cDHCPSGlobalPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hh3cDHCPSGlobalPoolConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigTable.setDescription('A table containing the configurations of dhcp server global pools.')
hh3cDHCPSGlobalPoolConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigEntry.setDescription('An entry containing the objects for configuring the network ip or host ip etc. to global pools for DHCP server.')
hh3cDHCPSGlobalPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("null", 0), ("host", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolType.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolType.setDescription('Type of a DHCP global pool. Any operations of this object will be bound with the operations of hh3cDHCPSGlobalPoolNetwork, hh3cDHCPSGlobalPoolHostIPAddr, or hh3cDHCPSGlobalPoolHostHAddr. That means any operation of this object alone will be regarded as invalid operation.')
hh3cDHCPSGlobalPoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNetwork.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNetwork.setDescription('Network ip of a DHCP global pool. To delete a configured network ip, please set hh3cDHCPSGlobalPoolConfigUndoFlag to 1.')
hh3cDHCPSGlobalPoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNetworkMask.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNetworkMask.setDescription('Net mask of a DHCP global pool(network). The SET operation to this object ought to be with the SET of hh3cDHCPSGlobalPoolNetwork together, and any SET operation alone to this object will be regarded as an invalid operation. When a network ip of a DHCP global pool was deleted, the net mask would also be deleted automatically, and no further operation needed.')
hh3cDHCPSGlobalPoolHostIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostIPAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostIPAddr.setDescription('Host ip of a DHCP global pool. To delete a configured network ip, please set hh3cDHCPSGlobalPoolConfigUndoFlag to 2.')
hh3cDHCPSGlobalPoolHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostMask.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostMask.setDescription('Net mask of a DHCP global pool(host) The SET operation to this object ought to be with the SET of hh3cDHCPSGlobalPoolHostIPAddr together, and any SET operation alone to this object will be regarded as an invalid operation. When a host ip of a DHCP global pool was deleted, the net mask would also be deleted automatically, and no further operation needed.')
hh3cDHCPSGlobalPoolHostHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostHAddr.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolHostHAddr.setDescription('Hardware address of a DHCP global pool(host). To delete a configured hardware address, please set hh3cDHCPSGlobalPoolConfigUndoFlag to 3.')
hh3cDHCPSGlobalPoolConfigUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undonetworkip", 1), ("undohostip", 2), ("undohosthaddr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigUndoFlag.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolConfigUndoFlag.setDescription('Flag of undo operation for hh3cDHCPSGlobalPoolConfigTable.')
hh3cDHCPSGlobalPoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaTable.setDescription('A table for configuring parameters to DHCP global pools.')
hh3cDHCPSGlobalPoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaEntry.setDescription('An entry containing the objects for the configurations of parameters of DHCP global pools.')
hh3cDHCPSGlobalPoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseDay.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseDay.setDescription('Number of days of the lease.')
hh3cDHCPSGlobalPoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseHour.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseHour.setDescription('Number of hours of the lease.')
hh3cDHCPSGlobalPoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseMinute.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseMinute.setDescription('Number of minutes of the lease.')
hh3cDHCPSGlobalPoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseUnlimited.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolLeaseUnlimited.setDescription('A flag denoting if the lease of a pool is unlimited.')
hh3cDHCPSGlobalPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolDomainName.setDescription('Domain name for DHCP clients.')
hh3cDHCPSGlobalPoolClientGatewayIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientGatewayIPString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientGatewayIPString.setDescription('String of gateway ip addresses for DHCP clients. Since mostly 8 ip can be configured for a pool totally, a string is defined to get or configure 8 ip ip at a time.')
hh3cDHCPSGlobalPoolClientGatewayIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientGatewayIPUndo.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientGatewayIPUndo.setDescription('A gateway ip address to delete. This object is only for deleting a given ip of gateway router.')
hh3cDHCPSGlobalPoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientDNSIPString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientDNSIPString.setDescription('String of DNS server ip addresses for DHCP clients. Since mostly 8 ip can be configured for a pool totally, a string is defined to get or configure 8 ip at a time.')
hh3cDHCPSGlobalPoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientDNSIPUndo.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientDNSIPUndo.setDescription('A DNS server ip address to delete. This object is only for deleting a given ip of DNS server.')
hh3cDHCPSGlobalPoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNetbiosType.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNetbiosType.setDescription('NetBios node type for DHCP clients.')
hh3cDHCPSGlobalPoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNbnsIPString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNbnsIPString.setDescription('String of NetBios server ip addresses for DHCP clients. Since mostly 8 ip can be configured for a pool totally, so a string is defined to get or configure 8 ip at a time.')
hh3cDHCPSGlobalPoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNbnsIPUndo.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolClientNbnsIPUndo.setDescription('A NetBios server ip address to delete. This object is only for deleting a given ip of NetBios server.')
hh3cDHCPSGlobalPoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoGateway", 3), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaUndoFlag.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolParaUndoFlag.setDescription('Flag of undo-operation for hh3cDHCPSGlobalPoolParaTable.')
hh3cDHCPSGlobalPoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolIPInUseReset.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolIPInUseReset.setDescription('Reset the auto binding ip of the given global pool for DHCP server.')
hh3cDHCPSGlobalPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionTable.setDescription('A table for configuring options to DHCP global pools.')
hh3cDHCPSGlobalPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionCode"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionEntry.setDescription('An entry containing the objects for configuring options to DHCP global pools.')
hh3cDHCPSGlobalPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionCode.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionCode.setDescription('Option code.')
hh3cDHCPSGlobalPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionType.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionType.setDescription('Option type.')
hh3cDHCPSGlobalPoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionAscii.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionAscii.setDescription('Ascii string of an option.')
hh3cDHCPSGlobalPoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 143))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionHexString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionHexString.setDescription("Hex string of an option. 1st to 16th hex strings, which are 2 bytes, 4 bytes, 6 bytes or 8 bytes, can be configured at most simultaneously. That means the format of each string must be '12', '1234', '123456' or '12345678'.")
hh3cDHCPSGlobalPoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionIPString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionIPString.setDescription('Ip string of an option. 1 to 8 ip addresses can be configured at most simultaneously.')
hh3cDHCPSGlobalPoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolOptionRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hh3cDHCPSGlobalTreeTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5), )
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeTable.setDescription('A table containing the information of the tree of DHCP global pools.')
hh3cDHCPSGlobalTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"))
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeEntry.setDescription('An entry of objects containing the information for displaying the tree of DHCP global pools.')
hh3cDHCPSGlobalTreeParentNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeParentNodeName.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeParentNodeName.setDescription('Pool name of the parent node.')
hh3cDHCPSGlobalTreeChildNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeChildNodeName.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeChildNodeName.setDescription('Pool name of the child node.')
hh3cDHCPSGlobalTreePreSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreePreSiblingNodeName.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreePreSiblingNodeName.setDescription('Pool name of the presibling node.')
hh3cDHCPSGlobalTreeSiblingNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeSiblingNodeName.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalTreeSiblingNodeName.setDescription('Pool name of the sibling node.')
hh3cDHCPSInterfacePoolParaTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6), )
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaTable.setDescription('A table for configuring parameters to DHCP interface pools.')
hh3cDHCPSInterfacePoolParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaEntry.setDescription('An entry of objects for configuring parameters to DHCP interface pools. The index of this entry is the ifIndex of ethernet.')
hh3cDHCPSInterfacePoolLeaseDay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 365)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseDay.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseDay.setDescription('Number of days of the lease.')
hh3cDHCPSInterfacePoolLeaseHour = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseHour.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseHour.setDescription('Number of hours of the lease.')
hh3cDHCPSInterfacePoolLeaseMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseMinute.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseMinute.setDescription('Number of minutes of the lease.')
hh3cDHCPSInterfacePoolLeaseUnlimited = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("unlimited", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseUnlimited.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolLeaseUnlimited.setDescription('A flag denoting if the lease of a pool is unlimited.')
hh3cDHCPSInterfacePoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolDomainName.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolDomainName.setDescription('Domain name for DHCP clients.')
hh3cDHCPSInterfacePoolClientDNSIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientDNSIPString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientDNSIPString.setDescription('String of DNS server ip addresses for DHCP clients. Since mostly 8 ip can be configured for a pool totally, a string is defined to get or configure 8 ip at a time.')
hh3cDHCPSInterfacePoolClientDNSIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientDNSIPUndo.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientDNSIPUndo.setDescription('A DNS server ip address to delete. This object is only for deleting a given ip of DNS server.')
hh3cDHCPSInterfacePoolClientNetbiosType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("null", 0), ("bnode", 1), ("pnode", 2), ("mnode", 4), ("hnode", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNetbiosType.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNetbiosType.setDescription('NetBios node type for DHCP clients.')
hh3cDHCPSInterfacePoolClientNbnsIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNbnsIPString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNbnsIPString.setDescription('String of NetBios server ip addresses for DHCP clients. Since mostly 8 ip can be configured for a pool totally, so a string is defined to get or configure 8 ip at a time.')
hh3cDHCPSInterfacePoolClientNbnsIPUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNbnsIPUndo.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolClientNbnsIPUndo.setDescription('A NetBios server ip address to delete. This object is only for deleting a given ip of NetBios server.')
hh3cDHCPSInterfacePoolParaUndoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("undoDomain", 1), ("undoLease", 2), ("undoDns", 4), ("undoNbns", 5), ("undoNbType", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaUndoFlag.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolParaUndoFlag.setDescription('Flag of undo-operation for hh3cDHCPSInterfacePoolParaTable.')
hh3cDHCPSInterfacePoolIPInUseReset = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolIPInUseReset.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolIPInUseReset.setDescription('Reset the auto binding ip of the given interface pool for DHCP server.')
hh3cDHCPSInterfacePoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7), )
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionTable.setDescription('A table for configuring options to DHCP interface pools.')
hh3cDHCPSInterfacePoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionCode"))
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionEntry.setDescription('An entry of objects for configuring options to DHCP interface pools. The index of this entry is the ifIndex of ethernet.')
hh3cDHCPSInterfacePoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionCode.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionCode.setDescription('Option Code.')
hh3cDHCPSInterfacePoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2), ("ip", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionType.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionType.setDescription('Option type.')
hh3cDHCPSInterfacePoolOptionAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionAscii.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionAscii.setDescription('Ascii string of an option.')
hh3cDHCPSInterfacePoolOptionHexString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 143))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionHexString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionHexString.setDescription("Hex string of an option. 1st to 16th hex strings, which are 2 bytes, 4 bytes, 6 bytes or 8 bytes, can be configured at most simultaneously. That means the format of each string must be '12', '1234', '123456' or '12345678'.")
hh3cDHCPSInterfacePoolOptionIPString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionIPString.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionIPString.setDescription('Ip string of an option. 1 to 8 ip addresses can be configured at most simultaneously.')
hh3cDHCPSInterfacePoolOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolOptionRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hh3cDHCPSInterfacePoolStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8), )
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindTable.setDescription('A table for configuring static binding to DHCP interface pools.')
hh3cDHCPSInterfacePoolStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindIP"))
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindEntry.setDescription('An entry of objects for configuring static binding to DHCP interface pools. The index of this entry is the ifIndex of ethernet.')
hh3cDHCPSInterfacePoolStaticBindIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindIP.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindIP.setDescription('Ip address in static binding for DHCP interface pools.')
hh3cDHCPSInterfacePoolStaticBindMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindMac.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindMac.setDescription('Hardware address in static binding for DHCP interface pools.')
hh3cDHCPSInterfacePoolStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolStaticBindRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hh3cDHCPSIPInUseTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9), )
if mibBuilder.loadTexts: hh3cDHCPSIPInUseTable.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseTable.setDescription('A table for displaying the information of ip in use for DHCP server pools.')
hh3cDHCPSIPInUseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddr"))
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEntry.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEntry.setDescription('An entry of objects for displaying information of ip in use for DHCP server pools.')
hh3cDHCPSIPInUseHAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseHAddr.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseHAddr.setDescription('Hardware address.')
hh3cDHCPSIPInUseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIP.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIP.setDescription('Ip address in use.')
hh3cDHCPSIPInUseEndLease = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEndLease.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEndLease.setDescription('End time of lease. The structure of the OCTET STRING is month/day/year hour:munite:second -- MM/DD/YYYY hh:mm:ss. ')
hh3cDHCPSIPInUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("release", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseType.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseType.setDescription('Type of binding.')
hh3cDHCPSIPInUsePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUsePoolName.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUsePoolName.setDescription('Name of the DHCP server pool the ip belongs to.')
hh3cDHCPSIPInUseInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseInterface.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseInterface.setDescription('Interface index information.')
hh3cDHCPSIPInUseVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseVlan.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseVlan.setDescription('Vlan information.')
hh3cDHCPSIPInUseAtmpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseAtmpvc.setStatus('deprecated')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseAtmpvc.setDescription('Pvc information.')
hh3cDHCPSForbiddenIPTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10), )
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPTable.setDescription('A table for configuring forbidden ip to DHCP server.')
hh3cDHCPSForbiddenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPStart"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPEnd"))
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPEntry.setDescription('An entry for configuring forbidden ip to DHCP server.')
hh3cDHCPSForbiddenIPStart = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPStart.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPStart.setDescription('Start ip of forbidden ip.')
hh3cDHCPSForbiddenIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPEnd.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPEnd.setDescription('End ip of forbidden ip.')
hh3cDHCPSForbiddenIPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSForbiddenIPRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy.')
hh3cDHCPSConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11), )
if mibBuilder.loadTexts: hh3cDHCPSConflictIPTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSConflictIPTable.setDescription('A table for displaying the information of conflict ip for DHCP server.')
hh3cDHCPSConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSConflictIP"))
if mibBuilder.loadTexts: hh3cDHCPSConflictIPEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSConflictIPEntry.setDescription('An entry for displaying the information of conflict ip for DHCP server.')
hh3cDHCPSConflictIP = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSConflictIP.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSConflictIP.setDescription('Conflict ip.')
hh3cDHCPSConflictIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("arp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSConflictIPType.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSConflictIPType.setDescription('Type of the detection of conflict ip.')
hh3cDHCPSConflictIPDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSConflictIPDetectTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSConflictIPDetectTime.setDescription('Time when the conflict is detected. The structure of the OCTET STRING is month/day/year hour:munite:second -- MM/DD/YYYY hh:mm:ss.')
hh3cDHCPSServiceStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 12), Hh3cDhcpSEnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSServiceStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSServiceStatus.setDescription('The status of DHCP service.')
hh3cDHCPSDetectingServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 13), Hh3cDhcpSEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSDetectingServerStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSDetectingServerStatus.setDescription('The status of DHCP servers detecting function.')
hh3cDHCPSPingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSPingNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSPingNum.setDescription('The number of ping packets sent out.')
hh3cDHCPSPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSPingTimeout.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSPingTimeout.setDescription('The delay for the reply of a ping packet. Unit: millisecond.')
hh3cDHCPSWriteDataStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 16), Hh3cDhcpSEnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSWriteDataStatus.setDescription('The status of the function writing data to the harddisk.')
hh3cDHCPSWriteDataDirection = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataDirection.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSWriteDataDirection.setDescription('The direction of writing data to a harddisk.')
hh3cDHCPSWriteDataDelay = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataDelay.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSWriteDataDelay.setDescription('The allowable delay of writing data to the harddisk. Unit: second.')
hh3cDHCPSWriteDataRecover = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 19), Hh3cDhcpSEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSWriteDataRecover.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSWriteDataRecover.setDescription('The flag used to recover DHCP data with the data on the harddisk.')
hh3cDHCPSIPInUseResetIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseResetIP.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseResetIP.setDescription('An ip in use that will be cleared. 0 returned for SET operation.')
hh3cDHCPSConflictIPResetIP = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSConflictIPResetIP.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSConflictIPResetIP.setDescription('A conflict ip that will be cleared. 0 returned for SET operation.')
hh3cDHCPSIPResetFlag = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("ipInUse", 1), ("conflictIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSIPResetFlag.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPResetFlag.setDescription('A flag that descript the reset operation.')
hh3cDHCPSGlobalPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolNumber.setDescription('The total number of DHCP server global-pools.')
hh3cDHCPSGlobalPoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolAutoBindingNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolAutoBindingNum.setDescription('The total number of auto binding ip in DHCP server global-pools.')
hh3cDHCPSGlobalPoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolManualBindingNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolManualBindingNum.setDescription('The total number of manual binding ip in DHCP server global-pools.')
hh3cDHCPSGlobalPoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolExpiredBindingNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSGlobalPoolExpiredBindingNum.setDescription('The total number of expired binding ip in DHCP server global-pools.')
hh3cDHCPSInterfacePoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolNumber.setDescription('The total number of DHCP server interface-pools.')
hh3cDHCPSInterfacePoolAutoBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolAutoBindingNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolAutoBindingNum.setDescription('The total number of auto binding ip in DHCP server interface-pools.')
hh3cDHCPSInterfacePoolManualBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolManualBindingNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolManualBindingNum.setDescription('The total number of manual binding ip in DHCP server interface-pools.')
hh3cDHCPSInterfacePoolExpiredBindingNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolExpiredBindingNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInterfacePoolExpiredBindingNum.setDescription('The total number of expired binding ip in DHCP server interface-pools.')
hh3cDHCPSBadPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSBadPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSBadPktNum.setDescription('The total number of the bad packets received.')
hh3cDHCPSBootRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSBootRequestPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSBootRequestPktNum.setDescription('The total number of the packets received by DHCP Server from DHCP clients.')
hh3cDHCPSDiscoverPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSDiscoverPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSDiscoverPktNum.setDescription('The total number of the DHCP Discover packets received from the DHCP clients.')
hh3cDHCPSRequestPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSRequestPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSRequestPktNum.setDescription('The total number of the DHCP Request packets received from the DHCP clients.')
hh3cDHCPSDeclinePktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSDeclinePktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSDeclinePktNum.setDescription('The total number of the DHCP Decline packets received from the DHCP clients.')
hh3cDHCPSReleasePktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSReleasePktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSReleasePktNum.setDescription('The total number of the DHCP Release packets received from the DHCP clients.')
hh3cDHCPSInformPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSInformPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSInformPktNum.setDescription('The total number of the DHCP Inform packets received from the DHCP clients.')
hh3cDHCPSBootReplyPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSBootReplyPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSBootReplyPktNum.setDescription('The total number of the packets sent by DHCP server to DHCP clients.')
hh3cDHCPSOfferPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSOfferPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSOfferPktNum.setDescription('The total number of the DHCP Offer packets sent by the DHCP server.')
hh3cDHCPSAckPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSAckPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSAckPktNum.setDescription('The total number of the DHCP Ack packets sent by the DHCP server.')
hh3cDHCPSNakPktNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSNakPktNum.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSNakPktNum.setDescription('The total number of the DHCP Nak packets sent by the DHCP server.')
hh3cDHCPSStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDHCPSStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSStatisticsReset.setDescription('Reset the above statistic information of packets received and sent by the DHCP server.')
hh3cDHCPSIPInUseExTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43), )
if mibBuilder.loadTexts: hh3cDHCPSIPInUseExTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseExTable.setDescription('A table for displaying the information of ip in use for DHCP Server pools. ')
hh3cDHCPSIPInUseExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1), ).setIndexNames((0, "HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddrEx"), (0, "HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseVlanIdEx"))
if mibBuilder.loadTexts: hh3cDHCPSIPInUseExEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseExEntry.setDescription('An entry of objects for displaying information of ip in use for DHCP server pools.')
hh3cDHCPSIPInUseHAddrEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseHAddrEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseHAddrEx.setDescription('Hardware address.')
hh3cDHCPSIPInUseVlanIdEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(60000, 60000), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseVlanIdEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseVlanIdEx.setDescription("User's vlanID. 60000 means that a client doesn't have vlanID or have an invalid vlanID.")
hh3cDHCPSIPInUseIPEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIPEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIPEx.setDescription('Ip address in use.')
hh3cDHCPSIPInUseEndLeaseEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEndLeaseEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseEndLeaseEx.setDescription('End time of lease. The structure of the OCTET STRING is month/day/year hour:munite:second -- MM/DD/YYYY hh:mm:ss.')
hh3cDHCPSIPInUseTypeEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("auto", 2), ("release", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseTypeEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseTypeEx.setDescription('Type of binding.')
hh3cDHCPSIPInUsePoolNameEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUsePoolNameEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUsePoolNameEx.setDescription('Name of the DHCP server pool the ip belongs to.')
hh3cDHCPSIPInUseIfIndexEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIfIndexEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseIfIndexEx.setDescription('Interface index information.')
hh3cDHCPSIPInUseServerPortVlanIdEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseServerPortVlanIdEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseServerPortVlanIdEx.setDescription('Vlan information of port on server through which the client user accesses server.')
hh3cDHCPSIPInUseAtmpvcEx = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 2, 1, 43, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDHCPSIPInUseAtmpvcEx.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPSIPInUseAtmpvcEx.setDescription('Pvc information.')
hh3cDHCPServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2))
hh3cDHCPServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2, 1))
hh3cDHCPServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2, 2))
hh3cDHCPServerMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 2, 2, 2, 1)).setObjects(("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolNetwork"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolNetworkMask"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolHostIPAddr"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolHostMask"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolHostHAddr"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolConfigUndoFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseDay"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseHour"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseMinute"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolLeaseUnlimited"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolDomainName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientGatewayIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientGatewayIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientDNSIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientDNSIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientNetbiosType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientNbnsIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolClientNbnsIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolParaUndoFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolIPInUseReset"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionCode"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionAscii"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionHexString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolOptionRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreeParentNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreeChildNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreePreSiblingNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalTreeSiblingNodeName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseDay"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseHour"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseMinute"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolLeaseUnlimited"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolDomainName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientDNSIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientDNSIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientNetbiosType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientNbnsIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolClientNbnsIPUndo"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolParaUndoFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolIPInUseReset"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionCode"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionAscii"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionHexString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionIPString"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolOptionRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindMac"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolStaticBindRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddr"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseEndLease"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUsePoolName"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseInterface"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseVlan"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseAtmpvc"), ("HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPStart"), ("HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPEnd"), ("HH3C-DHCPS-MIB", "hh3cDHCPSForbiddenIPRowStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIPType"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIPDetectTime"), ("HH3C-DHCPS-MIB", "hh3cDHCPSServiceStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSDetectingServerStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSPingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSPingTimeout"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataStatus"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataDirection"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataDelay"), ("HH3C-DHCPS-MIB", "hh3cDHCPSWriteDataRecover"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseResetIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSConflictIPResetIP"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPResetFlag"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolNumber"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolAutoBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolManualBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSGlobalPoolExpiredBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolNumber"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolAutoBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolManualBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInterfacePoolExpiredBindingNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSBadPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSBootRequestPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSDiscoverPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSRequestPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSDeclinePktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSReleasePktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSInformPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSBootReplyPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSOfferPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSAckPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSNakPktNum"), ("HH3C-DHCPS-MIB", "hh3cDHCPSStatisticsReset"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseHAddrEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseVlanIdEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseIPEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseEndLeaseEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseTypeEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUsePoolNameEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseIfIndexEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseServerPortVlanIdEx"), ("HH3C-DHCPS-MIB", "hh3cDHCPSIPInUseAtmpvcEx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cDHCPServerMIBGroup = hh3cDHCPServerMIBGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cDHCPServerMIBGroup.setDescription('The basic collection of objects providing management of DHCP server.')
mibBuilder.exportSymbols("HH3C-DHCPS-MIB", hh3cDHCPSInterfacePoolStaticBindTable=hh3cDHCPSInterfacePoolStaticBindTable, hh3cDHCPSIPInUseEndLeaseEx=hh3cDHCPSIPInUseEndLeaseEx, hh3cDHCPSWriteDataDirection=hh3cDHCPSWriteDataDirection, hh3cDHCPSGlobalTreePreSiblingNodeName=hh3cDHCPSGlobalTreePreSiblingNodeName, hh3cDHCPSForbiddenIPTable=hh3cDHCPSForbiddenIPTable, hh3cDHCPSInterfacePoolIPInUseReset=hh3cDHCPSInterfacePoolIPInUseReset, hh3cDHCPSGlobalPoolName=hh3cDHCPSGlobalPoolName, hh3cDHCPSOfferPktNum=hh3cDHCPSOfferPktNum, hh3cDHCPSIPInUseExEntry=hh3cDHCPSIPInUseExEntry, hh3cDHCPSGlobalPoolClientNbnsIPString=hh3cDHCPSGlobalPoolClientNbnsIPString, Hh3cDhcpSEnabledStatus=Hh3cDhcpSEnabledStatus, hh3cDHCPSForbiddenIPEnd=hh3cDHCPSForbiddenIPEnd, hh3cDHCPSIPInUseIfIndexEx=hh3cDHCPSIPInUseIfIndexEx, hh3cDHCPSInterfacePoolClientNbnsIPString=hh3cDHCPSInterfacePoolClientNbnsIPString, hh3cDHCPSGlobalPoolOptionRowStatus=hh3cDHCPSGlobalPoolOptionRowStatus, hh3cDHCPServerMIBCompliances=hh3cDHCPServerMIBCompliances, hh3cDHCPSIPInUseEndLease=hh3cDHCPSIPInUseEndLease, hh3cDHCPServerMIBConformance=hh3cDHCPServerMIBConformance, hh3cDHCPSGlobalPoolLeaseMinute=hh3cDHCPSGlobalPoolLeaseMinute, hh3cDHCPSGlobalPoolType=hh3cDHCPSGlobalPoolType, hh3cDHCPSIPInUseType=hh3cDHCPSIPInUseType, hh3cDHCPServerMIBGroups=hh3cDHCPServerMIBGroups, hh3cDHCPServerMib=hh3cDHCPServerMib, hh3cDHCPSGlobalPoolConfigUndoFlag=hh3cDHCPSGlobalPoolConfigUndoFlag, hh3cDHCPSGlobalPoolLeaseDay=hh3cDHCPSGlobalPoolLeaseDay, hh3cDHCPSForbiddenIPRowStatus=hh3cDHCPSForbiddenIPRowStatus, hh3cDHCPSReleasePktNum=hh3cDHCPSReleasePktNum, hh3cDHCPSGlobalPoolEntry=hh3cDHCPSGlobalPoolEntry, hh3cDHCPSInterfacePoolOptionTable=hh3cDHCPSInterfacePoolOptionTable, hh3cDHCPSIPInUseAtmpvcEx=hh3cDHCPSIPInUseAtmpvcEx, hh3cDHCPSInterfacePoolLeaseUnlimited=hh3cDHCPSInterfacePoolLeaseUnlimited, hh3cDHCPSConflictIPTable=hh3cDHCPSConflictIPTable, hh3cDHCPSGlobalPoolParaTable=hh3cDHCPSGlobalPoolParaTable, hh3cDHCPSInformPktNum=hh3cDHCPSInformPktNum, hh3cDHCPSInterfacePoolStaticBindIP=hh3cDHCPSInterfacePoolStaticBindIP, hh3cDHCPSIPInUseExTable=hh3cDHCPSIPInUseExTable, hh3cDHCPSIPInUseServerPortVlanIdEx=hh3cDHCPSIPInUseServerPortVlanIdEx, hh3cDHCPSInterfacePoolOptionAscii=hh3cDHCPSInterfacePoolOptionAscii, hh3cDHCPSConflictIP=hh3cDHCPSConflictIP, hh3cDHCPSWriteDataStatus=hh3cDHCPSWriteDataStatus, hh3cDHCPSInterfacePoolLeaseDay=hh3cDHCPSInterfacePoolLeaseDay, hh3cDHCPSIPInUseAtmpvc=hh3cDHCPSIPInUseAtmpvc, hh3cDHCPSIPInUseHAddrEx=hh3cDHCPSIPInUseHAddrEx, hh3cDHCPSBootRequestPktNum=hh3cDHCPSBootRequestPktNum, hh3cDHCPSConflictIPType=hh3cDHCPSConflictIPType, hh3cDHCPSForbiddenIPStart=hh3cDHCPSForbiddenIPStart, hh3cDHCPSInterfacePoolParaUndoFlag=hh3cDHCPSInterfacePoolParaUndoFlag, hh3cDHCPSIPResetFlag=hh3cDHCPSIPResetFlag, hh3cDHCPSGlobalPoolOptionCode=hh3cDHCPSGlobalPoolOptionCode, hh3cDHCPSGlobalPoolLeaseUnlimited=hh3cDHCPSGlobalPoolLeaseUnlimited, hh3cDHCPSInterfacePoolNumber=hh3cDHCPSInterfacePoolNumber, hh3cDHCPSAckPktNum=hh3cDHCPSAckPktNum, hh3cDHCPServerMibObject=hh3cDHCPServerMibObject, hh3cDHCPSInterfacePoolParaTable=hh3cDHCPSInterfacePoolParaTable, hh3cDHCPSGlobalPoolLeaseHour=hh3cDHCPSGlobalPoolLeaseHour, hh3cDHCPSGlobalPoolParaEntry=hh3cDHCPSGlobalPoolParaEntry, hh3cDHCPSInterfacePoolAutoBindingNum=hh3cDHCPSInterfacePoolAutoBindingNum, hh3cDHCPSIPInUseVlanIdEx=hh3cDHCPSIPInUseVlanIdEx, hh3cDHCPSIPInUseTable=hh3cDHCPSIPInUseTable, hh3cDHCPSConflictIPEntry=hh3cDHCPSConflictIPEntry, hh3cDHCPSInterfacePoolManualBindingNum=hh3cDHCPSInterfacePoolManualBindingNum, hh3cDHCPSConflictIPResetIP=hh3cDHCPSConflictIPResetIP, hh3cDHCPSGlobalPoolHostHAddr=hh3cDHCPSGlobalPoolHostHAddr, hh3cDHCPSGlobalPoolDomainName=hh3cDHCPSGlobalPoolDomainName, hh3cDHCPSIPInUseIPEx=hh3cDHCPSIPInUseIPEx, hh3cDHCPSGlobalPoolManualBindingNum=hh3cDHCPSGlobalPoolManualBindingNum, hh3cDHCPSInterfacePoolOptionIPString=hh3cDHCPSInterfacePoolOptionIPString, hh3cDHCPSRequestPktNum=hh3cDHCPSRequestPktNum, hh3cDHCPSInterfacePoolStaticBindEntry=hh3cDHCPSInterfacePoolStaticBindEntry, hh3cDHCPSGlobalPoolClientGatewayIPUndo=hh3cDHCPSGlobalPoolClientGatewayIPUndo, hh3cDHCPSGlobalPoolParaUndoFlag=hh3cDHCPSGlobalPoolParaUndoFlag, hh3cDHCPSInterfacePoolOptionHexString=hh3cDHCPSInterfacePoolOptionHexString, hh3cDHCPSDiscoverPktNum=hh3cDHCPSDiscoverPktNum, hh3cDHCPSGlobalPoolOptionTable=hh3cDHCPSGlobalPoolOptionTable, hh3cDHCPSGlobalPoolClientDNSIPUndo=hh3cDHCPSGlobalPoolClientDNSIPUndo, hh3cDHCPSGlobalTreeParentNodeName=hh3cDHCPSGlobalTreeParentNodeName, hh3cDHCPSGlobalPoolTable=hh3cDHCPSGlobalPoolTable, hh3cDHCPSPingTimeout=hh3cDHCPSPingTimeout, hh3cDHCPSForbiddenIPEntry=hh3cDHCPSForbiddenIPEntry, hh3cDHCPSIPInUseInterface=hh3cDHCPSIPInUseInterface, hh3cDHCPSGlobalPoolHostMask=hh3cDHCPSGlobalPoolHostMask, hh3cDHCPSInterfacePoolOptionEntry=hh3cDHCPSInterfacePoolOptionEntry, hh3cDHCPSGlobalPoolClientGatewayIPString=hh3cDHCPSGlobalPoolClientGatewayIPString, hh3cDHCPSGlobalPoolOptionEntry=hh3cDHCPSGlobalPoolOptionEntry, hh3cDHCPSStatisticsReset=hh3cDHCPSStatisticsReset, hh3cDHCPSInterfacePoolParaEntry=hh3cDHCPSInterfacePoolParaEntry, hh3cDHCPSInterfacePoolLeaseMinute=hh3cDHCPSInterfacePoolLeaseMinute, hh3cDHCPSGlobalPoolRowStatus=hh3cDHCPSGlobalPoolRowStatus, hh3cDHCPSInterfacePoolClientNetbiosType=hh3cDHCPSInterfacePoolClientNetbiosType, hh3cDHCPSInterfacePoolOptionType=hh3cDHCPSInterfacePoolOptionType, hh3cDHCPSBadPktNum=hh3cDHCPSBadPktNum, hh3cDHCPSInterfacePoolOptionCode=hh3cDHCPSInterfacePoolOptionCode, hh3cDHCPSGlobalPoolAutoBindingNum=hh3cDHCPSGlobalPoolAutoBindingNum, hh3cDHCPSGlobalPoolIPInUseReset=hh3cDHCPSGlobalPoolIPInUseReset, hh3cDHCPSPingNum=hh3cDHCPSPingNum, hh3cDHCPSGlobalPoolClientNetbiosType=hh3cDHCPSGlobalPoolClientNetbiosType, hh3cDHCPSInterfacePoolClientDNSIPUndo=hh3cDHCPSInterfacePoolClientDNSIPUndo, hh3cDHCPSGlobalPoolClientDNSIPString=hh3cDHCPSGlobalPoolClientDNSIPString, hh3cDHCPSDetectingServerStatus=hh3cDHCPSDetectingServerStatus, hh3cDHCPSGlobalPoolExpiredBindingNum=hh3cDHCPSGlobalPoolExpiredBindingNum, hh3cDHCPSIPInUseResetIP=hh3cDHCPSIPInUseResetIP, hh3cDHCPSInterfacePoolOptionRowStatus=hh3cDHCPSInterfacePoolOptionRowStatus, PYSNMP_MODULE_ID=hh3cDHCPServerMib, hh3cDHCPSGlobalPoolNetworkMask=hh3cDHCPSGlobalPoolNetworkMask, hh3cDHCPSInterfacePoolStaticBindRowStatus=hh3cDHCPSInterfacePoolStaticBindRowStatus, hh3cDHCPSInterfacePoolClientDNSIPString=hh3cDHCPSInterfacePoolClientDNSIPString, hh3cDHCPSInterfacePoolExpiredBindingNum=hh3cDHCPSInterfacePoolExpiredBindingNum, hh3cDHCPSIPInUsePoolName=hh3cDHCPSIPInUsePoolName, hh3cDHCPSBootReplyPktNum=hh3cDHCPSBootReplyPktNum, hh3cDHCPSDeclinePktNum=hh3cDHCPSDeclinePktNum, hh3cDHCPSIPInUseTypeEx=hh3cDHCPSIPInUseTypeEx, hh3cDHCPServerMIBGroup=hh3cDHCPServerMIBGroup, hh3cDHCPSIPInUsePoolNameEx=hh3cDHCPSIPInUsePoolNameEx, hh3cDHCPSInterfacePoolLeaseHour=hh3cDHCPSInterfacePoolLeaseHour, hh3cDHCPSGlobalPoolNetwork=hh3cDHCPSGlobalPoolNetwork, hh3cDHCPSGlobalPoolOptionHexString=hh3cDHCPSGlobalPoolOptionHexString, hh3cDHCPSIPInUseHAddr=hh3cDHCPSIPInUseHAddr, hh3cDHCPSInterfacePoolDomainName=hh3cDHCPSInterfacePoolDomainName, hh3cDHCPSIPInUseEntry=hh3cDHCPSIPInUseEntry, hh3cDHCPSIPInUseVlan=hh3cDHCPSIPInUseVlan, hh3cDHCPSIPInUseIP=hh3cDHCPSIPInUseIP, hh3cDHCPSServiceStatus=hh3cDHCPSServiceStatus, hh3cDHCPSGlobalPoolConfigEntry=hh3cDHCPSGlobalPoolConfigEntry, hh3cDHCPSGlobalPoolNumber=hh3cDHCPSGlobalPoolNumber, hh3cDHCPSGlobalPoolOptionIPString=hh3cDHCPSGlobalPoolOptionIPString, hh3cDHCPSGlobalTreeChildNodeName=hh3cDHCPSGlobalTreeChildNodeName, hh3cDHCPSWriteDataDelay=hh3cDHCPSWriteDataDelay, hh3cDHCPSWriteDataRecover=hh3cDHCPSWriteDataRecover, hh3cDHCPSConflictIPDetectTime=hh3cDHCPSConflictIPDetectTime, hh3cDHCPSGlobalPoolOptionType=hh3cDHCPSGlobalPoolOptionType, hh3cDHCPSGlobalTreeTable=hh3cDHCPSGlobalTreeTable, hh3cDHCPSGlobalTreeEntry=hh3cDHCPSGlobalTreeEntry, hh3cDHCPSGlobalPoolOptionAscii=hh3cDHCPSGlobalPoolOptionAscii, hh3cDHCPSGlobalPoolClientNbnsIPUndo=hh3cDHCPSGlobalPoolClientNbnsIPUndo, hh3cDHCPSGlobalPoolHostIPAddr=hh3cDHCPSGlobalPoolHostIPAddr, hh3cDHCPSInterfacePoolStaticBindMac=hh3cDHCPSInterfacePoolStaticBindMac, hh3cDHCPSGlobalPoolConfigTable=hh3cDHCPSGlobalPoolConfigTable, hh3cDHCPSInterfacePoolClientNbnsIPUndo=hh3cDHCPSInterfacePoolClientNbnsIPUndo, hh3cDHCPSNakPktNum=hh3cDHCPSNakPktNum, hh3cDHCPSGlobalTreeSiblingNodeName=hh3cDHCPSGlobalTreeSiblingNodeName)
