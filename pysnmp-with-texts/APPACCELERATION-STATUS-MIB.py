#
# PySNMP MIB module APPACCELERATION-STATUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPACCELERATION-STATUS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
appAccelerationMgmt, appAccelerationNotifications = mibBuilder.importSymbols("APPACCELERATION-SMI", "appAccelerationMgmt", "appAccelerationNotifications")
AppAccelerationSeqNum, AppAccelerationAlarmSeverity, AppAccelerationDescription, AppAccelerationYesNo = mibBuilder.importSymbols("APPACCELERATION-TC", "AppAccelerationSeqNum", "AppAccelerationAlarmSeverity", "AppAccelerationDescription", "AppAccelerationYesNo")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, iso, Bits, Counter32, NotificationType, ObjectIdentity, Unsigned32, IpAddress, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "iso", "Bits", "Counter32", "NotificationType", "ObjectIdentity", "Unsigned32", "IpAddress", "TimeTicks", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
appAccelerationStatusMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1))
if mibBuilder.loadTexts: appAccelerationStatusMIB.setLastUpdated('201310110000Z')
if mibBuilder.loadTexts: appAccelerationStatusMIB.setOrganization('www.citrix.com')
if mibBuilder.loadTexts: appAccelerationStatusMIB.setContactInfo(' Citrix Systems, Inc. Postal: 851 West Cypress Creek Road Fort Lauderdale, Florida 33309 United States')
if mibBuilder.loadTexts: appAccelerationStatusMIB.setDescription('This module defines the status variables that can be retrieved from a Citrix Application Acceleration unit. ')
wsStatusMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1))
wsStatusMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1))
wsStatusMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2))
wsStatusMIBScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1))
wsOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 100, 101, 102, 103))).clone(namedValues=NamedValues(("active", 1), ("busy", 100), ("down", 101), ("licenseExpired", 102), ("bypassTraffic", 103)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsOperStatus.setStatus('current')
if mibBuilder.loadTexts: wsOperStatus.setDescription('The current operational state of the unit.')
wsLoad1Min = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLoad1Min.setStatus('deprecated')
if mibBuilder.loadTexts: wsLoad1Min.setDescription('The 1 minute load average that is also available in the Unix TOP or UPTIME commands. It reports the average number of processes ready to be run. The value is computed by taking the load average value and multiplying it by 100, then converting the value to an integer.')
wsLoad5Min = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLoad5Min.setStatus('deprecated')
if mibBuilder.loadTexts: wsLoad5Min.setDescription('The 5 minute load average that is also available in the Unix TOP or UPTIME commands. It reports the average number of processes ready to be run. The value is computed by taking the load average value and multiplying it by 100, then converting the value to an integer.')
wsLoad15Min = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLoad15Min.setStatus('deprecated')
if mibBuilder.loadTexts: wsLoad15Min.setDescription('The 15 minute load average that is also available in the Unix TOP or UPTIME commands. It reports the average number of processes ready to be run. The value is computed by taking the load average value and multiplying it by 100, then converting the value to an integer.')
wsBypass = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBypass.setStatus('current')
if mibBuilder.loadTexts: wsBypass.setDescription('Traffic processing status. This is also available in the GUI Features page. ')
wsLastAlarmSeqNum = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 6), AppAccelerationSeqNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLastAlarmSeqNum.setStatus('current')
if mibBuilder.loadTexts: wsLastAlarmSeqNum.setDescription('The value of the alarm sequence number for the last alarm generated as a trap.')
wsBoostStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardboost", 1), ("softboost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBoostStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wsBoostStatus.setDescription('The selected boost mode. This is also available in the GUI Bandwidth Management page. ')
wsBandwidthMode = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("partial", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBandwidthMode.setStatus('current')
if mibBuilder.loadTexts: wsBandwidthMode.setDescription('The selected bandwidth usage. This is also available in the GUI Bandwidth Management page. ')
wsBandwidthLimit = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 9), Integer32()).setUnits('K-Bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsBandwidthLimit.setStatus('current')
if mibBuilder.loadTexts: wsBandwidthLimit.setDescription('Send bandwidth limit. This is also available in the GUI Bandwidth Management page. ')
wsWanOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanOutOctets.setStatus('current')
if mibBuilder.loadTexts: wsWanOutOctets.setDescription('Number of accelerated octets transmitted on the WAN side. This is also available in the GUI Usage Graph page. ')
wsWanInOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 11), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanInOctets.setStatus('current')
if mibBuilder.loadTexts: wsWanInOctets.setDescription('Number of accelerated octets received on the WAN side. This is also available in the GUI Usage Graph page. ')
wsLanOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanOutOctets.setStatus('current')
if mibBuilder.loadTexts: wsLanOutOctets.setDescription('Number of accelerated octets transmitted on the LAN side. This is also available in the GUI Usage Graph page. ')
wsLanInOctets = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanInOctets.setStatus('current')
if mibBuilder.loadTexts: wsLanInOctets.setDescription('Number of accelerated octets received on the LAN side. This is also available in the GUI Usage Graph page. ')
wsCompressionEffectiveBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 14), Integer32()).setUnits('K-Bits/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCompressionEffectiveBandwidth.setStatus('current')
if mibBuilder.loadTexts: wsCompressionEffectiveBandwidth.setDescription('The equivalent throughput before compression. This is also available in the GUI Compression Status page. This variable may be reset from the above web page. ')
wsSendCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSendCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wsSendCompressionRatio.setDescription('Average send compression rate per 1000 octets, e.g. 3500 means 3.5 to 1 compression. This is also available in the GUI Compression Status page. This variable may be reset from the above web page. ')
wsReceiveCompressionRatio = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsReceiveCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wsReceiveCompressionRatio.setDescription('Average receive compression rate per 1000 octets, e.g. 3500 means 3.5 to 1 compression. This is also available in the GUI Compression Status page. This variable may be reset from the above web page. ')
wsCompressionStatsCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCompressionStatsCollectionTime.setStatus('current')
if mibBuilder.loadTexts: wsCompressionStatsCollectionTime.setDescription('The number of centiseconds (0.01 seconds) since the start of the compression statistics collection. This is also available in the GUI Compression Status page. This variable may be reset from the above web page. ')
wsAcceleratedConnections = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAcceleratedConnections.setStatus('current')
if mibBuilder.loadTexts: wsAcceleratedConnections.setDescription('Number of current accelerated (active + inactive) connections. This is also available in the GUI System Status page. ')
wsNonAcceleratedConnections = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNonAcceleratedConnections.setStatus('current')
if mibBuilder.loadTexts: wsNonAcceleratedConnections.setDescription('Number of current non-accelerated connections. This is also available in the GUI System Status page. ')
wsHaState = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("standalone", 0), ("primary", 1), ("secondary", 2), ("restarting", 3), ("starting", 4), ("invalid", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsHaState.setStatus('current')
if mibBuilder.loadTexts: wsHaState.setDescription('High availability state of the unit. This is also available in the GUI High Availability page. ')
wsHaVmIp = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsHaVmIp.setStatus('current')
if mibBuilder.loadTexts: wsHaVmIp.setDescription('Virtual Management IP Address used in HA setup. This is also available in the GUI High Availability page. ')
wsHaSecondaryIp = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsHaSecondaryIp.setStatus('current')
if mibBuilder.loadTexts: wsHaSecondaryIp.setDescription('When retrieved from the primary unit (in HA configuration), this is the IP Address of the secondary unit. When retrieved from a secondary or standalone unit, this is 0.0.0.0. This is also available in the GUI High Availability page. ')
wsPrimaryIp = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsPrimaryIp.setStatus('current')
if mibBuilder.loadTexts: wsPrimaryIp.setDescription('IP Address of the Primary Port, which is for management data. ')
wsCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 24), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsCpuUsage.setStatus('current')
if mibBuilder.loadTexts: wsCpuUsage.setDescription('Averaged percent CPU used by the traffic accelerator in the last minute. ')
wsConnectedPlugIns = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsConnectedPlugIns.setStatus('current')
if mibBuilder.loadTexts: wsConnectedPlugIns.setDescription('Current number of Plug-ins connected to this unit. This is also available in the GUI System Status page. ')
wsMaxPlugIns = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsMaxPlugIns.setStatus('current')
if mibBuilder.loadTexts: wsMaxPlugIns.setDescription('The Maximum number of Plug-ins that are allowed to connect to this unit. This is also available in the GUI System Status page. ')
wsQosStatsCollectionTime = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosStatsCollectionTime.setStatus('current')
if mibBuilder.loadTexts: wsQosStatsCollectionTime.setDescription('The number of centiseconds (0.01 seconds) since the start of the QoS and ICA statistics collection. This is also available in the GUI QoS Statistics page. This variable may be reset from the above web page. ')
wsUpTime = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsUpTime.setStatus('current')
if mibBuilder.loadTexts: wsUpTime.setDescription('The time (in hundredths of a second) since the unit was last re-initialized. ')
wsSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSerialNumber.setStatus('current')
if mibBuilder.loadTexts: wsSerialNumber.setDescription('Appliance serial number. ')
wsNonAcceleratedVolume = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 30), Counter64()).setUnits('1000-Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNonAcceleratedVolume.setStatus('current')
if mibBuilder.loadTexts: wsNonAcceleratedVolume.setDescription('Total non-accelerated k-bytes received by the unit, on all interfaces. ')
wsActiveConnections = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveConnections.setStatus('current')
if mibBuilder.loadTexts: wsActiveConnections.setDescription('Number of active accelerated connections. This is also available in the GUI System Status page. ')
wsAccelerationStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAccelerationStatus.setStatus('current')
if mibBuilder.loadTexts: wsAccelerationStatus.setDescription('Traffic acceleration (flow control and compression) status. This is also available in the GUI Features page. ')
wsTrafficShapingStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsTrafficShapingStatus.setStatus('current')
if mibBuilder.loadTexts: wsTrafficShapingStatus.setDescription('Traffic shaping (QoS) status. This is also available in the GUI Features page. ')
wsSystemLoad = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 34), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsSystemLoad.setStatus('current')
if mibBuilder.loadTexts: wsSystemLoad.setDescription('Load indicator, 100 meant overload. ')
wsWanSendRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 35), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanSendRate.setStatus('current')
if mibBuilder.loadTexts: wsWanSendRate.setDescription('The average WAN side send rate in the last minute. ')
wsWanReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 36), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWanReceiveRate.setStatus('current')
if mibBuilder.loadTexts: wsWanReceiveRate.setDescription('The average WAN side receive rate in the last minute. ')
wsLanSendRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 37), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanSendRate.setStatus('current')
if mibBuilder.loadTexts: wsLanSendRate.setDescription('The average LAN side send rate in the last minute. ')
wsLanReceiveRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 38), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsLanReceiveRate.setStatus('current')
if mibBuilder.loadTexts: wsLanReceiveRate.setDescription('The average LAN side receive rate in the last minute. ')
wsNonAcceleratedRate = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 39), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsNonAcceleratedRate.setStatus('current')
if mibBuilder.loadTexts: wsNonAcceleratedRate.setDescription('The average non-accelerated traffic rate in the last minute. ')
wsModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsModelNumber.setStatus('current')
if mibBuilder.loadTexts: wsModelNumber.setDescription('Appliance model number. ')
wsWccpStatus = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsWccpStatus.setStatus('current')
if mibBuilder.loadTexts: wsWccpStatus.setDescription('WCCP status. This is also available in the GUI Features page. ')
wsStatusMIBTables = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2))
wsActiveAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wsActiveAlarmTable.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmTable.setDescription('A list of the active alarm entries. This represents the fault conditions that are still active in the unit. ')
activeAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsActiveAlarmIndex"))
if mibBuilder.loadTexts: activeAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: activeAlarmEntry.setDescription('The active alarm entries that are still valid system faults. RFC2578 (SMIv2) requires this to be not-accessible. ')
wsActiveAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmIndex.setDescription('An index that uniquely identifies an entry in the active alarm table.')
wsActiveAlarmSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 2), AppAccelerationSeqNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmSeqNum.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmSeqNum.setDescription("The active alarm's sequence number at the time it was generated.")
wsActiveAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmID.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmID.setDescription('The OID identifying the actual trap that was generated.')
wsActiveAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 4), AppAccelerationAlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmSeverity.setDescription('The alarm severity for the active alarm.')
wsActiveAlarmLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmLogTime.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmLogTime.setDescription('The value of sysUpTime when the alarm was generated.')
wsActiveAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 6), AppAccelerationDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmDesc.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmDesc.setDescription('A description for the active alarm.')
wsActiveAlarmAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 7), AppAccelerationYesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wsActiveAlarmAcked.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmAcked.setDescription('Identifies if the user has acknowledged the alarm.')
wsActiveAlarmServiceAffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 1, 1, 8), AppAccelerationYesNo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsActiveAlarmServiceAffect.setStatus('current')
if mibBuilder.loadTexts: wsActiveAlarmServiceAffect.setDescription('Identifies if the alarm is service affecting.')
wsServiceClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2), )
if mibBuilder.loadTexts: wsServiceClassStatsTable.setStatus('current')
if mibBuilder.loadTexts: wsServiceClassStatsTable.setDescription('A list of service class statistics entries. This contains the performance statistics separated by service classes. ')
wsServiceClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsServiceClassIndex"))
if mibBuilder.loadTexts: wsServiceClassStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wsServiceClassStatsEntry.setDescription('Each service class entry contains the performance statistics for one service class. ')
wsServiceClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsServiceClassIndex.setStatus('current')
if mibBuilder.loadTexts: wsServiceClassIndex.setDescription('This is used as an index that uniquely identifies a service class in the service class statistics table. ')
wsServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsServiceClassName.setStatus('current')
if mibBuilder.loadTexts: wsServiceClassName.setDescription('Name of the service class, e.g. HTTP, FTP, SMTP, CIFS, etc. The list of service classes monitored is defined in the GUI Configure Settings: Service Class page. ')
wsScsCurrentAcceleratedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsCurrentAcceleratedConnections.setStatus('current')
if mibBuilder.loadTexts: wsScsCurrentAcceleratedConnections.setDescription('Current number of accelerated connections for the service class. This is also available in the GUI Service Class Statistics Detail page. This counter is reset only on system restart. ')
wsScsTotalAcceleratedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalAcceleratedConnections.setStatus('current')
if mibBuilder.loadTexts: wsScsTotalAcceleratedConnections.setDescription('Total number of accelerated connections for the service class. This is also available in the GUI Service Class Statistics Detail page. This counter is reset only on system restart. ')
wsScsTotalAcceleratedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 5), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalAcceleratedOctets.setStatus('current')
if mibBuilder.loadTexts: wsScsTotalAcceleratedOctets.setDescription('Total number of accelerated octets for the service class. This is also available in the GUI Service Class Statistics Detail page. This counter is reset only on system restart. ')
wsScsTotalNonAcceleratedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalNonAcceleratedConnections.setStatus('current')
if mibBuilder.loadTexts: wsScsTotalNonAcceleratedConnections.setDescription('Total number of non-accelerated connections for the service class. This is also available in the GUI Service Class Statistics Detail page. This counter is reset only on system restart. ')
wsScsTotalNonAcceleratedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 7), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalNonAcceleratedOctets.setStatus('current')
if mibBuilder.loadTexts: wsScsTotalNonAcceleratedOctets.setDescription('Total number of non-accelerated octets for the service class. This is also available in the GUI Service Class Statistics Detail page. This counter is reset only on system restart. ')
wsScsTotalPreCompressionOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsTotalPreCompressionOctets.setStatus('current')
if mibBuilder.loadTexts: wsScsTotalPreCompressionOctets.setDescription('Total number of accelerated octets for the service class before compression. ')
wsScsCompressSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsCompressSentOctets.setStatus('current')
if mibBuilder.loadTexts: wsScsCompressSentOctets.setDescription('Number of accelerated octets sent for the service class after compression. ')
wsScsCompressReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsCompressReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: wsScsCompressReceivedOctets.setDescription('Number of accelerated octets received for the service class after compression. ')
wsScsPreCompressSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 11), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsPreCompressSentOctets.setStatus('current')
if mibBuilder.loadTexts: wsScsPreCompressSentOctets.setDescription('Number of accelerated octets sent for the service class before compression. ')
wsScsPreCompressReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsPreCompressReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: wsScsPreCompressReceivedOctets.setDescription('Number of accelerated octets received for the service class before compression. ')
wsScsSendBWSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 13), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendBWSavings.setStatus('current')
if mibBuilder.loadTexts: wsScsSendBWSavings.setDescription('WAN-side send bandwidth savings. 100% meant very high (above 99.5:1) compression. 0% meant no compression savings. The formula is (Pre-compress-send-bytes - Compressed-send-bytes) / Pre-compress-send-bytes * 100% ')
wsScsRecvBWSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 14), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsRecvBWSavings.setStatus('current')
if mibBuilder.loadTexts: wsScsRecvBWSavings.setDescription('WAN-side receive bandwidth savings. 100% meant very high (above 99.5:1) compression. 0% meant no compression savings. The formula is (Pre-compress-received-bytes - Compressed-received-bytes) / Pre-compress-received-bytes * 100% ')
wsScsSendRecvBWSavings = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 15), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendRecvBWSavings.setStatus('current')
if mibBuilder.loadTexts: wsScsSendRecvBWSavings.setDescription('Combined send and receive bandwidth savings. The formula is (Pre-compress-bytes - Compressed-bytes) / Pre-compress-bytes * 100% ')
wsScsSendCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wsScsSendCompressionRatio.setDescription('WAN-side send compression ratio per 1000 octets, e.g. 3500 means 3.5 to 1 compression. ')
wsScsRecvCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsRecvCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wsScsRecvCompressionRatio.setDescription('WAN-side receive compression ratio per 1000 octets, e.g. 3500 means 3.5 to 1 compression. ')
wsScsSendRecvCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsScsSendRecvCompressionRatio.setStatus('current')
if mibBuilder.loadTexts: wsScsSendRecvCompressionRatio.setDescription('Combined send and receive compression ratio per 1000 octets, e.g. 3500 means 3.5 to 1 compression. ')
wsQosTrafficClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3), )
if mibBuilder.loadTexts: wsQosTrafficClassStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wsQosTrafficClassStatsTable.setDescription('A list of QoS traffic class statistics. ')
wsQosTcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsQosIndex"))
if mibBuilder.loadTexts: wsQosTcStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wsQosTcStatsEntry.setDescription('Each entry contains performance statistics for one QoS traffic class. ')
wsQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wsQosIndex.setDescription('This index uniquely identifies a QoS traffic class in the QoS traffic class statistics table. ')
wsQosName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosName.setStatus('deprecated')
if mibBuilder.loadTexts: wsQosName.setDescription('Name of the QoS traffic class, which is defined in the GUI Configure Settings: QoS page. ')
wsQosConfiguredSendRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 3), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosConfiguredSendRatio.setStatus('deprecated')
if mibBuilder.loadTexts: wsQosConfiguredSendRatio.setDescription('The minimum share of the bandwidth configured for this traffic class. This is also available in the GUI QoS Statistics page. ')
wsQosSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosSentVolume.setStatus('deprecated')
if mibBuilder.loadTexts: wsQosSentVolume.setDescription('The total volume of QoS traffic sent for this queue, measured in 1000-octets. This counter may be reset from the GUI QoS Statistics page. The wsQosStatsCollectionTime variable indicates when the counter was reset. ')
wsQosActualSendRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 3, 1, 5), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsQosActualSendRatio.setStatus('deprecated')
if mibBuilder.loadTexts: wsQosActualSendRatio.setDescription('The bandwidth used by this traffic class. This is calculated using the wsQosSentVolume for the traffic class divided by the sum of wsQosSentVolume of all traffic classes. ')
wsIcaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4), )
if mibBuilder.loadTexts: wsIcaStatsTable.setStatus('current')
if mibBuilder.loadTexts: wsIcaStatsTable.setDescription('A list of ICA Traffic Presentation Layer statistics. ')
wsIcaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsIcaIndex"))
if mibBuilder.loadTexts: wsIcaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wsIcaStatsEntry.setDescription('Each entry contains the performance statistics for one ICA priority. ')
wsIcaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaIndex.setStatus('current')
if mibBuilder.loadTexts: wsIcaIndex.setDescription('This is used as an index that uniquely identifies an ICA service in the ICA Traffic Presentation Layer statistics table. ')
wsIcaServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaServiceName.setStatus('current')
if mibBuilder.loadTexts: wsIcaServiceName.setDescription('Name of the ICA service, which is also in the GUI QoS Statistics page, Citrix ICA Traffic Presentation Layer Statistics section. ')
wsIcaPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 9999))).clone(namedValues=NamedValues(("high", 0), ("medium", 1), ("low", 2), ("background", 3), ("notApplicable", 9999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaPriority.setStatus('deprecated')
if mibBuilder.loadTexts: wsIcaPriority.setDescription('The ICA Priorities: high is for realtime traffic, medium is for interactive traffic, low is for bulk transfer traffic, background is for the lowest priority traffic. This is no longer applicable starting from release 6.0. ')
wsIcaSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaSentVolume.setStatus('current')
if mibBuilder.loadTexts: wsIcaSentVolume.setDescription('The total volume of traffic sent for this ICA applications measured in 1000-octets. This counter may be reset from the GUI QoS Statistics page. ')
wsIcaSentRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 5), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaSentRatio.setStatus('current')
if mibBuilder.loadTexts: wsIcaSentRatio.setDescription('The sent volume as a percent share of the different ICA applications. ')
wsIcaReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 6), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: wsIcaReceivedVolume.setDescription('The total volume of traffic received for this ICA application, measured in 1000-octets. This counter may be reset from the GUI QoS Statistics page. ')
wsIcaReceivedRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 7), Integer32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaReceivedRatio.setStatus('current')
if mibBuilder.loadTexts: wsIcaReceivedRatio.setDescription('The received volume as a percent share of the different priority of the service. This counter may be reset from the GUI QoS Statistics page. ')
wsIcaSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 8), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaSendRate.setStatus('current')
if mibBuilder.loadTexts: wsIcaSendRate.setDescription('The last minute send rate of this ICA application. ')
wsIcaReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 4, 1, 9), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wsIcaReceiveRate.setStatus('current')
if mibBuilder.loadTexts: wsIcaReceiveRate.setDescription('The last minute receive rate of this ICA application. ')
wsAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5), )
if mibBuilder.loadTexts: wsAdapterTable.setStatus('current')
if mibBuilder.loadTexts: wsAdapterTable.setDescription('A list of adapters configured for the unit. It is also in the GUI IP Address page. ')
wsAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "wsAdapterIndex"))
if mibBuilder.loadTexts: wsAdapterEntry.setStatus('current')
if mibBuilder.loadTexts: wsAdapterEntry.setDescription('Each entry contains performance statistics for one ADAPTER. ')
wsAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterIndex.setStatus('current')
if mibBuilder.loadTexts: wsAdapterIndex.setDescription('This is used as an index that uniquely identifies an adapter. ')
wsAdapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterName.setStatus('current')
if mibBuilder.loadTexts: wsAdapterName.setDescription('Adapter name. ')
wsAdapterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterEnabled.setStatus('current')
if mibBuilder.loadTexts: wsAdapterEnabled.setDescription('Adapter state. ')
wsAdapterIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterIp.setStatus('current')
if mibBuilder.loadTexts: wsAdapterIp.setDescription('Adapter IP address. ')
wsAdapterNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterNetmask.setStatus('current')
if mibBuilder.loadTexts: wsAdapterNetmask.setDescription('Adapter network mask. ')
wsAdapterGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterGateway.setStatus('current')
if mibBuilder.loadTexts: wsAdapterGateway.setDescription('Adapter gateway. ')
wsAdapterVirtualIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterVirtualIp.setStatus('current')
if mibBuilder.loadTexts: wsAdapterVirtualIp.setDescription(' HA virtual IP address. ')
wsAdapterVLanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterVLanEnabled.setStatus('current')
if mibBuilder.loadTexts: wsAdapterVLanEnabled.setDescription(' VLAN state. ')
wsAdapterVLanGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAdapterVLanGroup.setStatus('current')
if mibBuilder.loadTexts: wsAdapterVLanGroup.setDescription(' VLAN group ID. ')
wsLinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6), )
if mibBuilder.loadTexts: wsLinkStatsTable.setStatus('current')
if mibBuilder.loadTexts: wsLinkStatsTable.setDescription('A list of link statistics. ')
linkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkStatsEntry.setStatus('current')
if mibBuilder.loadTexts: linkStatsEntry.setDescription('Each entry contains the performance statistics for one link. ')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('current')
if mibBuilder.loadTexts: linkIndex.setDescription('This index uniquely identifies a link in the link statistics table. ')
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
if mibBuilder.loadTexts: linkName.setDescription('Name of the link. ')
linkSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 3), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSentVolume.setStatus('current')
if mibBuilder.loadTexts: linkSentVolume.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
linkReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: linkReceivedVolume.setDescription('The total volume of traffic received on the link, measured in 1000-octets. ')
linkSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSentPackets.setStatus('current')
if mibBuilder.loadTexts: linkSentPackets.setDescription('The total number of packets sent on the link. ')
linkReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: linkReceivedPackets.setDescription('The total number of packets received on the link. in 1000-octets. ')
linkDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 7), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedSentVolume.setStatus('current')
if mibBuilder.loadTexts: linkDroppedSentVolume.setDescription('The total traffic not sent on the link due to QoS threshold, measured in 1000-octets. ')
linkDroppedReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 8), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: linkDroppedReceivedVolume.setDescription('The total received traffic dropped from the link due to QoS threshold, measured in 1000-octets. ')
linkDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedSentPackets.setStatus('current')
if mibBuilder.loadTexts: linkDroppedSentPackets.setDescription('The total number of packets not sent on the link due to QoS threshold. ')
linkDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 6, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDroppedReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: linkDroppedReceivedPackets.setDescription('The total number of received packets dropped from the link due to QoS threshold. ')
wsAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7), )
if mibBuilder.loadTexts: wsAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: wsAppStatsTable.setDescription('A list of link statistics. ')
appStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "appIndex"))
if mibBuilder.loadTexts: appStatsEntry.setStatus('current')
if mibBuilder.loadTexts: appStatsEntry.setDescription('Each entry contains the performance statistics for one application on one link. ')
appIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appIndex.setStatus('current')
if mibBuilder.loadTexts: appIndex.setDescription('This index uniquely identifies one application on a link. ')
appName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appName.setStatus('current')
if mibBuilder.loadTexts: appName.setDescription('Name of the link. ')
appId = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appId.setStatus('current')
if mibBuilder.loadTexts: appId.setDescription('Unique ID for application. ')
appParentId = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appParentId.setStatus('current')
if mibBuilder.loadTexts: appParentId.setDescription('Parent application ID. ')
appGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appGroupId.setStatus('current')
if mibBuilder.loadTexts: appGroupId.setDescription('Bit mask, indicating the group which this application belong to. ')
appSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 6), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appSentVolume.setStatus('current')
if mibBuilder.loadTexts: appSentVolume.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
appReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 7), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: appReceivedVolume.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
appSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appSentPackets.setStatus('current')
if mibBuilder.loadTexts: appSentPackets.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
appReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: appReceivedPackets.setDescription('The total volume of traffic sent on the link, in 1000-octets. ')
appDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 10), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedSentVolume.setStatus('current')
if mibBuilder.loadTexts: appDroppedSentVolume.setDescription('The total traffic not sent on the link due to QoS threshold, in 1000-octets. ')
appDroppedReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 11), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedReceiveVolume.setStatus('current')
if mibBuilder.loadTexts: appDroppedReceiveVolume.setDescription('The total received traffic dropped from the link due to QoS threshold, in 1000-octets. ')
appDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedSentPackets.setStatus('current')
if mibBuilder.loadTexts: appDroppedSentPackets.setDescription('The total number of packets not sent on the link due to QoS threshold. ')
appDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 13), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: appDroppedReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: appDroppedReceivedPackets.setDescription('The total number of received packets dropped from the link due to QoS threshold. ')
appSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 14), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: appSendRate.setStatus('current')
if mibBuilder.loadTexts: appSendRate.setDescription('The last minute send rate of this application. ')
appReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 7, 1, 15), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: appReceiveRate.setStatus('current')
if mibBuilder.loadTexts: appReceiveRate.setDescription('The last minute receive rate of this application. ')
wsQosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8), )
if mibBuilder.loadTexts: wsQosStatsTable.setStatus('current')
if mibBuilder.loadTexts: wsQosStatsTable.setDescription('A list of QoS traffic class statistics. ')
qosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "qosIndex"))
if mibBuilder.loadTexts: qosStatsEntry.setStatus('current')
if mibBuilder.loadTexts: qosStatsEntry.setDescription('Each entry contains the performance statistics for one QoS traffic class. ')
qosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIndex.setStatus('current')
if mibBuilder.loadTexts: qosIndex.setDescription('This index uniquely identifies a QoS traffic class in the QoS traffic class statistics table. ')
qosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPolicyName.setStatus('current')
if mibBuilder.loadTexts: qosPolicyName.setDescription('Name of the QoS Policy. ')
qosLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLink.setStatus('current')
if mibBuilder.loadTexts: qosLink.setDescription('Name of the link. ')
qosSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosSentVolume.setStatus('current')
if mibBuilder.loadTexts: qosSentVolume.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
qosReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 5), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReceiveVolume.setStatus('current')
if mibBuilder.loadTexts: qosReceiveVolume.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
qosSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosSentPackets.setStatus('current')
if mibBuilder.loadTexts: qosSentPackets.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
qosReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: qosReceivedPackets.setDescription('The total volume of traffic sent on the link, in 1000-octets. ')
qosDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 8), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedSentVolume.setStatus('current')
if mibBuilder.loadTexts: qosDroppedSentVolume.setDescription('The total traffic not sent on the link due to QoS threshold, in 1000-octets. ')
qosDroppedReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 9), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedReceiveVolume.setStatus('current')
if mibBuilder.loadTexts: qosDroppedReceiveVolume.setDescription('The total received traffic dropped from the link due to QoS threshold, in 1000-octets. ')
qosDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedSentPackets.setStatus('current')
if mibBuilder.loadTexts: qosDroppedSentPackets.setDescription('The total number of packets not sent on the link due to QoS threshold. ')
qosDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 8, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: qosDroppedReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: qosDroppedReceivedPackets.setDescription('The total number of received packets dropped from the link due to QoS threshold. ')
wsLscStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9), )
if mibBuilder.loadTexts: wsLscStatsTable.setStatus('current')
if mibBuilder.loadTexts: wsLscStatsTable.setDescription('A list of link level service class statistics. ')
lscStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "lscIndex"))
if mibBuilder.loadTexts: lscStatsEntry.setStatus('current')
if mibBuilder.loadTexts: lscStatsEntry.setDescription('Each entry contains the performance statistics for one link level service class. ')
lscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lscIndex.setStatus('current')
if mibBuilder.loadTexts: lscIndex.setDescription('This index is used to identify the link statistics within a service class. ')
lscServiceClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lscServiceClassName.setStatus('current')
if mibBuilder.loadTexts: lscServiceClassName.setDescription('Name of the service class, e.g. HTTP, FTP, SMTP, CIFS, etc. The list of service classes monitored is defined in the GUI Configure Settings: Service Class page. ')
lscLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lscLink.setStatus('current')
if mibBuilder.loadTexts: lscLink.setDescription('Name of the link. ')
lscSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 4), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscSentVolume.setStatus('current')
if mibBuilder.loadTexts: lscSentVolume.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
lscReceivedVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 5), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: lscReceivedVolume.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
lscSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscSentPackets.setStatus('current')
if mibBuilder.loadTexts: lscSentPackets.setDescription('The total volume of traffic sent on the link, measured in 1000-octets. ')
lscReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: lscReceivedPackets.setDescription('The total volume of traffic sent on the link, in 1000-octets. ')
lscDroppedSentVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 8), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedSentVolume.setStatus('current')
if mibBuilder.loadTexts: lscDroppedSentVolume.setDescription('The total traffic not sent on the link due to QoS threshold, in 1000-octets. ')
lscDroppedReceiveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 9), Counter64()).setUnits('K-octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedReceiveVolume.setStatus('current')
if mibBuilder.loadTexts: lscDroppedReceiveVolume.setDescription('The total received traffic dropped from the link due to QoS threshold, in 1000-octets. ')
lscDroppedSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedSentPackets.setStatus('current')
if mibBuilder.loadTexts: lscDroppedSentPackets.setDescription('The total number of packets not sent on the link due to QoS threshold. ')
lscDroppedReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 9, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: lscDroppedReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: lscDroppedReceivedPackets.setDescription('The total number of received packets dropped from the link due to QoS threshold. ')
wsPartnerTable = MibTable((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10), )
if mibBuilder.loadTexts: wsPartnerTable.setStatus('current')
if mibBuilder.loadTexts: wsPartnerTable.setDescription('A list of CloudBridge partners ')
partnerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1), ).setIndexNames((0, "APPACCELERATION-STATUS-MIB", "partnerAddrType"), (0, "APPACCELERATION-STATUS-MIB", "partnerAddr"))
if mibBuilder.loadTexts: partnerEntry.setStatus('current')
if mibBuilder.loadTexts: partnerEntry.setDescription('Each row contains information on one partner unit.')
partnerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerAddrType.setStatus('current')
if mibBuilder.loadTexts: partnerAddrType.setDescription('Format of partnerAddr, IPv4 or IPv6. See RFC4001 for InetAddressType and InetAddress usage. ')
partnerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerAddr.setStatus('current')
if mibBuilder.loadTexts: partnerAddr.setDescription('Partner IP address.')
partnerConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerConnections.setStatus('current')
if mibBuilder.loadTexts: partnerConnections.setDescription('Number of accelerated connections to partner.')
partnerSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 4), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerSendRate.setStatus('current')
if mibBuilder.loadTexts: partnerSendRate.setDescription('The last minute send rate to partner.')
partnerReceiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 5), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerReceiveRate.setStatus('current')
if mibBuilder.loadTexts: partnerReceiveRate.setDescription('The last minute receive rate from partner.')
partnerIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 2, 10, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partnerIdleTime.setStatus('current')
if mibBuilder.loadTexts: partnerIdleTime.setDescription('Time where no traffic flows between this partner.')
wsHAMasterIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 3), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsHAMasterIpAddr.setStatus('current')
if mibBuilder.loadTexts: wsHAMasterIpAddr.setDescription("The master router's real (primary) IP address. This is the IP address listed as the source in VRRP advertisement last received by this virtual router.")
wsSourceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wsSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: wsSourceIpAddr.setDescription(' The IP address of the source of Alert. ')
wsStatusMIBAlertTables = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4))
wsAlertAction = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("oneShot", 0), ("set", 1), ("reset", 2), ("expired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAlertAction.setStatus('current')
if mibBuilder.loadTexts: wsAlertAction.setDescription('Action of the alert.')
wsAlertClass = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75))).clone(namedValues=NamedValues(("slowLossRate", 0), ("fastLossRate", 1), ("connectionStalled", 2), ("connectionTimeout", 3), ("connectionInvalid", 4), ("nicHalfDuplex", 5), ("arpTimeout", 6), ("badLicense", 7), ("limitExceeded", 8), ("asymmetric", 9), ("badPackets", 10), ("lowOnCpu", 11), ("lowOnMemory", 12), ("internal", 13), ("restartRequired", 14), ("vridNotSet", 15), ("haConfigurationChanged", 16), ("haNoSecondary", 17), ("haPairCommError", 18), ("haNotCapable", 19), ("haPeerVersion", 20), ("compressionError", 21), ("bwTypeMismatch", 22), ("cpuPegged", 23), ("lowOnVm", 24), ("numSlowRtosExceeded", 25), ("numFastRtosExceeded", 26), ("numBootoutsExceeded", 27), ("numRewindsExceeded", 28), ("diskDriveFailing", 29), ("diskDriveDegraded", 30), ("diskDriveFailed", 31), ("groupModeError", 32), ("nicBypassEvent", 33), ("haMisMatchVmip", 34), ("diskFragmented", 35), ("redirectorModeSyn", 36), ("unreachable", 37), ("dnsLookup", 38), ("redirectorModeFailure", 39), ("applianceInTheMiddle", 40), ("internalCritical", 41), ("internalMajor", 42), ("internalMinor", 43), ("internalWarning", 44), ("wccpMajor", 45), ("wccpMinor", 46), ("wccpWarning", 47), ("driverHung", 48), ("signalingChannelError", 49), ("scpsError", 50), ("plugInNearLimit", 51), ("sslError", 52), ("haDispositionError", 53), ("haVIPNotSet", 54), ("vlanNotSupported", 55), ("tooManyBadTcpChecksum", 56), ("invalidGateway", 57), ("haPeerKeyStoreLocked", 58), ("sslProxyMajor", 59), ("sslProxyMinor", 60), ("sslProxyWarning", 61), ("sslTunnelMajor", 62), ("sslTunnelMinor", 63), ("sslTunnelWarning", 64), ("excessiveIpFragments", 65), ("userAccountLocked", 66), ("smb2AccelerationFailure", 67), ("invalidBridgeConfig", 68), ("invalidHttpCachingConfigFile", 69), ("qosEngineError", 70), ("mapiNtlmError", 71), ("ethernetCrcError", 72), ("qosLinkConfigError", 73), ("maxUnacceleratedConnectionsExceeded", 74), ("badHardware", 75)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAlertClass.setStatus('current')
if mibBuilder.loadTexts: wsAlertClass.setDescription('Class of the alert.')
wsAlertMsg = MibScalar((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 1, 4, 3), AppAccelerationDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wsAlertMsg.setStatus('current')
if mibBuilder.loadTexts: wsAlertMsg.setDescription('Message of the alert.')
wsNotifyStart = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 1)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyStart.setStatus('current')
if mibBuilder.loadTexts: wsNotifyStart.setDescription('An indication that the agent has started running.')
wsNotifyShutdown = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 2)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyShutdown.setStatus('current')
if mibBuilder.loadTexts: wsNotifyShutdown.setDescription('An indication that the agent is in the process of being shutdown.')
wsNotifyRestart = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 3)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"))
if mibBuilder.loadTexts: wsNotifyRestart.setStatus('deprecated')
if mibBuilder.loadTexts: wsNotifyRestart.setDescription('An indication that the agent has been restarted.')
wsHANotifyNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 4)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsHAMasterIpAddr"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsHANotifyNewMaster.setStatus('current')
if mibBuilder.loadTexts: wsHANotifyNewMaster.setDescription("The newMaster trap indicates that the sending agent has transitioned to 'Master' state.")
wsNotifyAvailBWChange = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 5)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"))
if mibBuilder.loadTexts: wsNotifyAvailBWChange.setStatus('deprecated')
if mibBuilder.loadTexts: wsNotifyAvailBWChange.setDescription('And indication that available BW Has Changed')
wsNotifyUnexpectedRestart = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 6)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyUnexpectedRestart.setStatus('current')
if mibBuilder.loadTexts: wsNotifyUnexpectedRestart.setDescription('An indication that the agent has been unexpectedly restarted.')
wsNotifyPersistentError = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 7)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyPersistentError.setStatus('current')
if mibBuilder.loadTexts: wsNotifyPersistentError.setDescription('The unit is experiencing a persistent internal error.')
wsNotifyAlert = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 8)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsAlertAction"), ("APPACCELERATION-STATUS-MIB", "wsAlertClass"), ("APPACCELERATION-STATUS-MIB", "wsAlertMsg"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyAlert.setStatus('current')
if mibBuilder.loadTexts: wsNotifyAlert.setDescription('An alert is generated from the unit.')
wsNotifyConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 3845, 30, 5, 1, 9)).setObjects(("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"))
if mibBuilder.loadTexts: wsNotifyConfigurationChanged.setStatus('current')
if mibBuilder.loadTexts: wsNotifyConfigurationChanged.setDescription('An indication that the configuration has changed.')
wsStatusMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 1))
wsStatusMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2))
wsStatusCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 1, 1)).setObjects(("APPACCELERATION-STATUS-MIB", "wsStatusGroup"), ("APPACCELERATION-STATUS-MIB", "wsStatusTrapGroup"), ("APPACCELERATION-STATUS-MIB", "wsStatusNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusCompliance = wsStatusCompliance.setStatus('current')
if mibBuilder.loadTexts: wsStatusCompliance.setDescription('The compliance statement for agents which implement appAccelerationStatusMIB. ')
wsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2, 1)).setObjects(("APPACCELERATION-STATUS-MIB", "wsOperStatus"), ("APPACCELERATION-STATUS-MIB", "wsLoad1Min"), ("APPACCELERATION-STATUS-MIB", "wsLoad5Min"), ("APPACCELERATION-STATUS-MIB", "wsLoad15Min"), ("APPACCELERATION-STATUS-MIB", "wsBypass"), ("APPACCELERATION-STATUS-MIB", "wsLastAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsBoostStatus"), ("APPACCELERATION-STATUS-MIB", "wsBandwidthMode"), ("APPACCELERATION-STATUS-MIB", "wsBandwidthLimit"), ("APPACCELERATION-STATUS-MIB", "wsWanOutOctets"), ("APPACCELERATION-STATUS-MIB", "wsWanInOctets"), ("APPACCELERATION-STATUS-MIB", "wsLanOutOctets"), ("APPACCELERATION-STATUS-MIB", "wsLanInOctets"), ("APPACCELERATION-STATUS-MIB", "wsCompressionEffectiveBandwidth"), ("APPACCELERATION-STATUS-MIB", "wsSendCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsReceiveCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsCompressionStatsCollectionTime"), ("APPACCELERATION-STATUS-MIB", "wsAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsNonAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsHaState"), ("APPACCELERATION-STATUS-MIB", "wsHaVmIp"), ("APPACCELERATION-STATUS-MIB", "wsHaSecondaryIp"), ("APPACCELERATION-STATUS-MIB", "wsPrimaryIp"), ("APPACCELERATION-STATUS-MIB", "wsCpuUsage"), ("APPACCELERATION-STATUS-MIB", "wsConnectedPlugIns"), ("APPACCELERATION-STATUS-MIB", "wsMaxPlugIns"), ("APPACCELERATION-STATUS-MIB", "wsQosStatsCollectionTime"), ("APPACCELERATION-STATUS-MIB", "wsUpTime"), ("APPACCELERATION-STATUS-MIB", "wsSerialNumber"), ("APPACCELERATION-STATUS-MIB", "wsNonAcceleratedVolume"), ("APPACCELERATION-STATUS-MIB", "wsActiveConnections"), ("APPACCELERATION-STATUS-MIB", "wsAccelerationStatus"), ("APPACCELERATION-STATUS-MIB", "wsTrafficShapingStatus"), ("APPACCELERATION-STATUS-MIB", "wsSystemLoad"), ("APPACCELERATION-STATUS-MIB", "wsWanSendRate"), ("APPACCELERATION-STATUS-MIB", "wsWanReceiveRate"), ("APPACCELERATION-STATUS-MIB", "wsLanSendRate"), ("APPACCELERATION-STATUS-MIB", "wsLanReceiveRate"), ("APPACCELERATION-STATUS-MIB", "wsNonAcceleratedRate"), ("APPACCELERATION-STATUS-MIB", "wsModelNumber"), ("APPACCELERATION-STATUS-MIB", "wsWccpStatus"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmIndex"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeqNum"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmID"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmSeverity"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmLogTime"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmDesc"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmAcked"), ("APPACCELERATION-STATUS-MIB", "wsActiveAlarmServiceAffect"), ("APPACCELERATION-STATUS-MIB", "wsServiceClassIndex"), ("APPACCELERATION-STATUS-MIB", "wsServiceClassName"), ("APPACCELERATION-STATUS-MIB", "wsScsCurrentAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalAcceleratedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalNonAcceleratedConnections"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalNonAcceleratedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsTotalPreCompressionOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsCompressSentOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsCompressReceivedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsPreCompressSentOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsPreCompressReceivedOctets"), ("APPACCELERATION-STATUS-MIB", "wsScsSendBWSavings"), ("APPACCELERATION-STATUS-MIB", "wsScsRecvBWSavings"), ("APPACCELERATION-STATUS-MIB", "wsScsSendRecvBWSavings"), ("APPACCELERATION-STATUS-MIB", "wsScsSendCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsScsRecvCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsScsSendRecvCompressionRatio"), ("APPACCELERATION-STATUS-MIB", "wsQosIndex"), ("APPACCELERATION-STATUS-MIB", "wsQosName"), ("APPACCELERATION-STATUS-MIB", "wsQosConfiguredSendRatio"), ("APPACCELERATION-STATUS-MIB", "wsQosSentVolume"), ("APPACCELERATION-STATUS-MIB", "wsQosActualSendRatio"), ("APPACCELERATION-STATUS-MIB", "wsIcaIndex"), ("APPACCELERATION-STATUS-MIB", "wsIcaServiceName"), ("APPACCELERATION-STATUS-MIB", "wsIcaPriority"), ("APPACCELERATION-STATUS-MIB", "wsIcaSentVolume"), ("APPACCELERATION-STATUS-MIB", "wsIcaSentRatio"), ("APPACCELERATION-STATUS-MIB", "wsIcaReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "wsIcaReceivedRatio"), ("APPACCELERATION-STATUS-MIB", "wsIcaSendRate"), ("APPACCELERATION-STATUS-MIB", "wsIcaReceiveRate"), ("APPACCELERATION-STATUS-MIB", "wsAdapterIndex"), ("APPACCELERATION-STATUS-MIB", "wsAdapterName"), ("APPACCELERATION-STATUS-MIB", "wsAdapterEnabled"), ("APPACCELERATION-STATUS-MIB", "wsAdapterIp"), ("APPACCELERATION-STATUS-MIB", "wsAdapterNetmask"), ("APPACCELERATION-STATUS-MIB", "wsAdapterGateway"), ("APPACCELERATION-STATUS-MIB", "wsAdapterVirtualIp"), ("APPACCELERATION-STATUS-MIB", "wsAdapterVLanEnabled"), ("APPACCELERATION-STATUS-MIB", "wsAdapterVLanGroup"), ("APPACCELERATION-STATUS-MIB", "linkIndex"), ("APPACCELERATION-STATUS-MIB", "linkName"), ("APPACCELERATION-STATUS-MIB", "linkSentVolume"), ("APPACCELERATION-STATUS-MIB", "linkReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "linkSentPackets"), ("APPACCELERATION-STATUS-MIB", "linkReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "linkDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "linkDroppedReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "linkDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "linkDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "appIndex"), ("APPACCELERATION-STATUS-MIB", "appName"), ("APPACCELERATION-STATUS-MIB", "appId"), ("APPACCELERATION-STATUS-MIB", "appParentId"), ("APPACCELERATION-STATUS-MIB", "appGroupId"), ("APPACCELERATION-STATUS-MIB", "appSentVolume"), ("APPACCELERATION-STATUS-MIB", "appReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "appSentPackets"), ("APPACCELERATION-STATUS-MIB", "appReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "appDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "appDroppedReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "appDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "appDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "appSendRate"), ("APPACCELERATION-STATUS-MIB", "appReceiveRate"), ("APPACCELERATION-STATUS-MIB", "qosIndex"), ("APPACCELERATION-STATUS-MIB", "qosPolicyName"), ("APPACCELERATION-STATUS-MIB", "qosLink"), ("APPACCELERATION-STATUS-MIB", "qosSentVolume"), ("APPACCELERATION-STATUS-MIB", "qosReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "qosSentPackets"), ("APPACCELERATION-STATUS-MIB", "qosReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "qosDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "qosDroppedReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "qosDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "qosDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "lscIndex"), ("APPACCELERATION-STATUS-MIB", "lscServiceClassName"), ("APPACCELERATION-STATUS-MIB", "lscLink"), ("APPACCELERATION-STATUS-MIB", "lscSentVolume"), ("APPACCELERATION-STATUS-MIB", "lscReceivedVolume"), ("APPACCELERATION-STATUS-MIB", "lscSentPackets"), ("APPACCELERATION-STATUS-MIB", "lscReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "lscDroppedSentVolume"), ("APPACCELERATION-STATUS-MIB", "lscDroppedReceiveVolume"), ("APPACCELERATION-STATUS-MIB", "lscDroppedSentPackets"), ("APPACCELERATION-STATUS-MIB", "lscDroppedReceivedPackets"), ("APPACCELERATION-STATUS-MIB", "partnerAddrType"), ("APPACCELERATION-STATUS-MIB", "partnerAddr"), ("APPACCELERATION-STATUS-MIB", "partnerConnections"), ("APPACCELERATION-STATUS-MIB", "partnerSendRate"), ("APPACCELERATION-STATUS-MIB", "partnerReceiveRate"), ("APPACCELERATION-STATUS-MIB", "partnerIdleTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusGroup = wsStatusGroup.setStatus('current')
if mibBuilder.loadTexts: wsStatusGroup.setDescription('A collection of objects used to retrieve status information ')
wsStatusTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2, 2)).setObjects(("APPACCELERATION-STATUS-MIB", "wsHAMasterIpAddr"), ("APPACCELERATION-STATUS-MIB", "wsAlertAction"), ("APPACCELERATION-STATUS-MIB", "wsAlertClass"), ("APPACCELERATION-STATUS-MIB", "wsAlertMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusTrapGroup = wsStatusTrapGroup.setStatus('current')
if mibBuilder.loadTexts: wsStatusTrapGroup.setDescription('Conformance group for objects contained in VRRP notifications.')
wsStatusNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3845, 30, 4, 1, 2, 2, 3)).setObjects(("APPACCELERATION-STATUS-MIB", "wsNotifyStart"), ("APPACCELERATION-STATUS-MIB", "wsNotifyShutdown"), ("APPACCELERATION-STATUS-MIB", "wsNotifyRestart"), ("APPACCELERATION-STATUS-MIB", "wsHANotifyNewMaster"), ("APPACCELERATION-STATUS-MIB", "wsNotifyAvailBWChange"), ("APPACCELERATION-STATUS-MIB", "wsNotifyUnexpectedRestart"), ("APPACCELERATION-STATUS-MIB", "wsNotifyPersistentError"), ("APPACCELERATION-STATUS-MIB", "wsNotifyAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wsStatusNotifyGroup = wsStatusNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: wsStatusNotifyGroup.setDescription('A collection of the Notifications supported in the status MIB.')
mibBuilder.exportSymbols("APPACCELERATION-STATUS-MIB", wsStatusNotifyGroup=wsStatusNotifyGroup, wsServiceClassStatsTable=wsServiceClassStatsTable, appName=appName, lscDroppedSentPackets=lscDroppedSentPackets, qosDroppedReceiveVolume=qosDroppedReceiveVolume, qosReceiveVolume=qosReceiveVolume, wsActiveAlarmID=wsActiveAlarmID, wsSendCompressionRatio=wsSendCompressionRatio, wsMaxPlugIns=wsMaxPlugIns, wsServiceClassStatsEntry=wsServiceClassStatsEntry, lscReceivedVolume=lscReceivedVolume, wsIcaSendRate=wsIcaSendRate, PYSNMP_MODULE_ID=appAccelerationStatusMIB, wsNotifyConfigurationChanged=wsNotifyConfigurationChanged, wsAcceleratedConnections=wsAcceleratedConnections, wsIcaServiceName=wsIcaServiceName, wsBypass=wsBypass, wsAdapterIndex=wsAdapterIndex, partnerSendRate=partnerSendRate, wsNotifyShutdown=wsNotifyShutdown, wsNonAcceleratedConnections=wsNonAcceleratedConnections, appReceivedVolume=appReceivedVolume, appSentVolume=appSentVolume, partnerEntry=partnerEntry, lscReceivedPackets=lscReceivedPackets, qosDroppedSentVolume=qosDroppedSentVolume, lscServiceClassName=lscServiceClassName, wsAppStatsTable=wsAppStatsTable, wsIcaSentRatio=wsIcaSentRatio, wsCompressionStatsCollectionTime=wsCompressionStatsCollectionTime, wsScsRecvBWSavings=wsScsRecvBWSavings, wsScsSendRecvCompressionRatio=wsScsSendRecvCompressionRatio, wsQosTcStatsEntry=wsQosTcStatsEntry, partnerAddr=partnerAddr, wsAdapterVirtualIp=wsAdapterVirtualIp, wsNonAcceleratedRate=wsNonAcceleratedRate, wsPartnerTable=wsPartnerTable, partnerIdleTime=partnerIdleTime, wsBoostStatus=wsBoostStatus, linkName=linkName, wsIcaStatsEntry=wsIcaStatsEntry, wsAdapterTable=wsAdapterTable, wsAccelerationStatus=wsAccelerationStatus, lscDroppedReceiveVolume=lscDroppedReceiveVolume, qosIndex=qosIndex, wsIcaIndex=wsIcaIndex, wsStatusMIBAlertTables=wsStatusMIBAlertTables, wsCpuUsage=wsCpuUsage, appReceivedPackets=appReceivedPackets, wsAdapterIp=wsAdapterIp, wsLoad5Min=wsLoad5Min, wsActiveAlarmAcked=wsActiveAlarmAcked, appParentId=appParentId, lscDroppedSentVolume=lscDroppedSentVolume, linkDroppedSentPackets=linkDroppedSentPackets, wsAlertAction=wsAlertAction, wsAdapterVLanGroup=wsAdapterVLanGroup, qosDroppedSentPackets=qosDroppedSentPackets, wsIcaSentVolume=wsIcaSentVolume, wsHaState=wsHaState, wsAdapterEnabled=wsAdapterEnabled, wsWanSendRate=wsWanSendRate, wsScsSendCompressionRatio=wsScsSendCompressionRatio, wsHaVmIp=wsHaVmIp, wsQosConfiguredSendRatio=wsQosConfiguredSendRatio, linkDroppedReceivedPackets=linkDroppedReceivedPackets, appReceiveRate=appReceiveRate, qosSentPackets=qosSentPackets, wsStatusMIBObjects=wsStatusMIBObjects, wsScsSendRecvBWSavings=wsScsSendRecvBWSavings, wsNonAcceleratedVolume=wsNonAcceleratedVolume, qosReceivedPackets=qosReceivedPackets, wsHANotifyNewMaster=wsHANotifyNewMaster, wsReceiveCompressionRatio=wsReceiveCompressionRatio, qosPolicyName=qosPolicyName, wsQosSentVolume=wsQosSentVolume, qosSentVolume=qosSentVolume, lscDroppedReceivedPackets=lscDroppedReceivedPackets, wsAdapterName=wsAdapterName, lscLink=lscLink, wsScsTotalNonAcceleratedConnections=wsScsTotalNonAcceleratedConnections, wsStatusMIBConformance=wsStatusMIBConformance, wsScsCompressReceivedOctets=wsScsCompressReceivedOctets, wsWccpStatus=wsWccpStatus, wsScsTotalAcceleratedOctets=wsScsTotalAcceleratedOctets, wsActiveAlarmSeqNum=wsActiveAlarmSeqNum, wsNotifyRestart=wsNotifyRestart, wsNotifyPersistentError=wsNotifyPersistentError, wsStatusMIBScalars=wsStatusMIBScalars, wsAdapterVLanEnabled=wsAdapterVLanEnabled, wsActiveAlarmTable=wsActiveAlarmTable, wsConnectedPlugIns=wsConnectedPlugIns, linkIndex=linkIndex, partnerReceiveRate=partnerReceiveRate, activeAlarmEntry=activeAlarmEntry, wsServiceClassName=wsServiceClassName, wsIcaReceiveRate=wsIcaReceiveRate, wsScsTotalNonAcceleratedOctets=wsScsTotalNonAcceleratedOctets, appDroppedReceiveVolume=appDroppedReceiveVolume, wsServiceClassIndex=wsServiceClassIndex, wsLanInOctets=wsLanInOctets, linkReceivedPackets=linkReceivedPackets, wsScsTotalPreCompressionOctets=wsScsTotalPreCompressionOctets, wsLoad1Min=wsLoad1Min, wsQosStatsTable=wsQosStatsTable, wsScsRecvCompressionRatio=wsScsRecvCompressionRatio, wsScsPreCompressReceivedOctets=wsScsPreCompressReceivedOctets, wsLastAlarmSeqNum=wsLastAlarmSeqNum, wsStatusTrapGroup=wsStatusTrapGroup, wsHaSecondaryIp=wsHaSecondaryIp, appAccelerationStatusMIB=appAccelerationStatusMIB, wsSerialNumber=wsSerialNumber, wsStatusMIBTables=wsStatusMIBTables, wsQosName=wsQosName, lscStatsEntry=lscStatsEntry, appId=appId, wsScsCompressSentOctets=wsScsCompressSentOctets, appSendRate=appSendRate, wsStatusMIBNotifications=wsStatusMIBNotifications, appDroppedSentVolume=appDroppedSentVolume, wsBandwidthLimit=wsBandwidthLimit, wsScsSendBWSavings=wsScsSendBWSavings, wsIcaReceivedVolume=wsIcaReceivedVolume, wsAdapterNetmask=wsAdapterNetmask, wsLinkStatsTable=wsLinkStatsTable, wsActiveAlarmSeverity=wsActiveAlarmSeverity, linkSentPackets=linkSentPackets, wsActiveAlarmIndex=wsActiveAlarmIndex, partnerConnections=partnerConnections, wsQosIndex=wsQosIndex, wsWanReceiveRate=wsWanReceiveRate, appSentPackets=appSentPackets, wsIcaPriority=wsIcaPriority, wsAlertMsg=wsAlertMsg, wsLanSendRate=wsLanSendRate, wsActiveAlarmLogTime=wsActiveAlarmLogTime, wsScsPreCompressSentOctets=wsScsPreCompressSentOctets, wsAdapterGateway=wsAdapterGateway, wsOperStatus=wsOperStatus, wsNotifyAlert=wsNotifyAlert, wsPrimaryIp=wsPrimaryIp, wsStatusMIBGroups=wsStatusMIBGroups, wsQosActualSendRatio=wsQosActualSendRatio, linkStatsEntry=linkStatsEntry, wsActiveAlarmServiceAffect=wsActiveAlarmServiceAffect, wsNotifyUnexpectedRestart=wsNotifyUnexpectedRestart, linkDroppedSentVolume=linkDroppedSentVolume, lscSentVolume=lscSentVolume, wsActiveConnections=wsActiveConnections, appStatsEntry=appStatsEntry, wsLoad15Min=wsLoad15Min, linkSentVolume=linkSentVolume, linkDroppedReceivedVolume=linkDroppedReceivedVolume, appDroppedSentPackets=appDroppedSentPackets, lscSentPackets=lscSentPackets, wsQosTrafficClassStatsTable=wsQosTrafficClassStatsTable, qosStatsEntry=qosStatsEntry, linkReceivedVolume=linkReceivedVolume, wsLanOutOctets=wsLanOutOctets, wsWanInOctets=wsWanInOctets, appGroupId=appGroupId, appDroppedReceivedPackets=appDroppedReceivedPackets, wsLanReceiveRate=wsLanReceiveRate, wsCompressionEffectiveBandwidth=wsCompressionEffectiveBandwidth, wsScsTotalAcceleratedConnections=wsScsTotalAcceleratedConnections, wsIcaStatsTable=wsIcaStatsTable, wsNotifyStart=wsNotifyStart, wsStatusCompliance=wsStatusCompliance, wsSystemLoad=wsSystemLoad, wsStatusMIBCompliances=wsStatusMIBCompliances, wsHAMasterIpAddr=wsHAMasterIpAddr, wsAlertClass=wsAlertClass, wsIcaReceivedRatio=wsIcaReceivedRatio, wsNotifyAvailBWChange=wsNotifyAvailBWChange, wsUpTime=wsUpTime, wsLscStatsTable=wsLscStatsTable, wsAdapterEntry=wsAdapterEntry, qosLink=qosLink, wsModelNumber=wsModelNumber, appIndex=appIndex, wsSourceIpAddr=wsSourceIpAddr, wsQosStatsCollectionTime=wsQosStatsCollectionTime, wsStatusGroup=wsStatusGroup, wsActiveAlarmDesc=wsActiveAlarmDesc, wsScsCurrentAcceleratedConnections=wsScsCurrentAcceleratedConnections, wsWanOutOctets=wsWanOutOctets, wsTrafficShapingStatus=wsTrafficShapingStatus, qosDroppedReceivedPackets=qosDroppedReceivedPackets, wsBandwidthMode=wsBandwidthMode, lscIndex=lscIndex, partnerAddrType=partnerAddrType)
