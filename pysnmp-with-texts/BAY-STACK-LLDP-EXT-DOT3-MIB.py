#
# PySNMP MIB module BAY-STACK-LLDP-EXT-DOT3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-LLDP-EXT-DOT3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
lldpXdot3LocPowerEntry, lldpXdot3RemPowerEntry = mibBuilder.importSymbols("LLDP-EXT-DOT3-MIB", "lldpXdot3LocPowerEntry", "lldpXdot3RemPowerEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Counter32, IpAddress, MibIdentifier, iso, NotificationType, Integer32, Bits, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Counter32", "IpAddress", "MibIdentifier", "iso", "NotificationType", "Integer32", "Bits", "ModuleIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackLldpXDot3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 47))
bayStackLldpXDot3Mib.setRevisions(('2014-10-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackLldpXDot3Mib.setRevisionsDescriptions(('Ver 1: Initial version.',))
if mibBuilder.loadTexts: bayStackLldpXDot3Mib.setLastUpdated('201410220000Z')
if mibBuilder.loadTexts: bayStackLldpXDot3Mib.setOrganization('Avaya Inc.')
if mibBuilder.loadTexts: bayStackLldpXDot3Mib.setContactInfo('avaya.com')
if mibBuilder.loadTexts: bayStackLldpXDot3Mib.setDescription('This MIB module is an extension to the standard LLDP-EXT-DOT3 MIB.')
bsLldpXDot3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 47, 0))
bsLldpXDot3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 47, 1))
bsLldpXdot3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 1))
bsLldpXdot3LocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2))
bsLldpXdot3RemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3))
bsLldpXdot3LocPowerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2, 1), )
if mibBuilder.loadTexts: bsLldpXdot3LocPowerTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerTable.setDescription('This table contains one row per port of PSE PoE information on the local system known to this agent.')
bsLldpXdot3LocPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2, 1, 1), )
lldpXdot3LocPowerEntry.registerAugmentions(("BAY-STACK-LLDP-EXT-DOT3-MIB", "bsLldpXdot3LocPowerEntry"))
bsLldpXdot3LocPowerEntry.setIndexNames(*lldpXdot3LocPowerEntry.getIndexNames())
if mibBuilder.loadTexts: bsLldpXdot3LocPowerEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerEntry.setDescription('Information about a particular port PoE information.')
bsLldpXdot3LocPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("type2pse", 1), ("type2pd", 2), ("type1pse", 3), ("type1pd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3LocPowerType.setReference('802.3at, Section 30.12.2')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerType.setDescription('A GET attribute that returns whether the local system is a PSE or a PD and whether it is Type 1 or Type 2.')
bsLldpXdot3LocPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("primaryPs", 2), ("backupPs", 3), ("reserved", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3LocPowerSource.setReference('802.3at, Section 30.12.2')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerSource.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerSource.setDescription('A GET attribute indicating the PSE Power Sources of the local system. A PSE indicates whether it is being powered by a primary power source; a backup power source; or unknown. A value primaryPs(2) indicates that the device advertises its power source as primary. A value backupPs(3) indicates that the device advertises its power source as backup.')
bsLldpXdot3LocPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("critical", 2), ("high", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3LocPowerPriority.setReference('802.3at, Section 30.12.2')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerPriority.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3LocPowerPriority.setDescription('Reflects the PD power priority that is being advertised on this PSE port. If both locally configure priority and ldpXMedRemXPoEPDPowerPriority are available on this port, it is a matter of local policy which one takes precedence. This object reflects the active value on this port. If the priority is not configured or known by the PD, the value unknown(1) will be returned. A value critical(2) indicates that the device advertises its power Priority as critical, as per RFC 3621. A value high(3) indicates that the device advertises its power Priority as high, as per RFC 3621. A value low(4) indicates that the device advertises its power Priority as low, as per RFC 3621.')
bsLldpXdot3LocPDRequestedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3LocPDRequestedPowerValue.setReference('802.3at, Section 30.12.2')
if mibBuilder.loadTexts: bsLldpXdot3LocPDRequestedPowerValue.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3LocPDRequestedPowerValue.setDescription('A GET attribute that returns the PD requested power value. For a PSE, it is the power value that the PSE mirrors back to the remote system. This is the PD requested power value that was used by the PSE to compute the power it has currently allocated to the remote system. It is expressed in units of 0.1 watts.')
bsLldpXdot3LocPSEAllocatedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3LocPSEAllocatedPowerValue.setReference('802.3at, Section 30.12.2')
if mibBuilder.loadTexts: bsLldpXdot3LocPSEAllocatedPowerValue.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3LocPSEAllocatedPowerValue.setDescription('A GET attribute that returns the PSE allocated power value. For a PSE, it is the power value that the PSE has currently allocated to the remote system. The PSE allocated power value is the maximum input average power that the PSE wants the PD to ever draw under this allocation if it is accepted. It is expressed in units of 0.1 watts.')
bsLldpXdot3RemPowerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3, 1), )
if mibBuilder.loadTexts: bsLldpXdot3RemPowerTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerTable.setDescription('This table contains information about the PoE device type as advertised by the remote system.')
bsLldpXdot3RemPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3, 1, 1), )
lldpXdot3RemPowerEntry.registerAugmentions(("BAY-STACK-LLDP-EXT-DOT3-MIB", "bsLldpXdot3RemPowerEntry"))
bsLldpXdot3RemPowerEntry.setIndexNames(*lldpXdot3RemPowerEntry.getIndexNames())
if mibBuilder.loadTexts: bsLldpXdot3RemPowerEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerEntry.setDescription('Information about a particular port component.')
bsLldpXdot3RemPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("type2pse", 1), ("type2pd", 2), ("type1pse", 3), ("type1pd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3RemPowerType.setReference('802.3at, Section 30.12.3')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerType.setDescription('A GET attribute that returns whether the remote system is a PSE or a PD and whether it is Type 1 or Type 2.')
bsLldpXdot3RemPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("pse", 2), ("reserved", 3), ("pseAndLocal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3RemPowerSource.setReference('802.3at, Section 30.12.3')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerSource.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerSource.setDescription('A GET attribute that returns the power sources of the remote system. When the remote system is a PD, it indicates whether it is being powered by: a PSE and locall; locally only; by a PSE only; or unknown.')
bsLldpXdot3RemPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("critical", 2), ("high", 3), ("low", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3RemPowerPriority.setReference('802.3at, Section 30.12.3')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerPriority.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3RemPowerPriority.setDescription('A GET operation returns the priority of the PD system received from the remote system. For a PD, this is the priority that the remote system has assigned to the PD.')
bsLldpXdot3RemPDRequestedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3RemPDRequestedPowerValue.setReference('802.3at, Section 30.12.3')
if mibBuilder.loadTexts: bsLldpXdot3RemPDRequestedPowerValue.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3RemPDRequestedPowerValue.setDescription('A GET attribute that for a PSE returs the the PD requested power value received from the remote system. It is expressed in units of 0.1 watts.')
bsLldpXdot3RemPSEAllocatedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 47, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('tenth of watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXdot3RemPSEAllocatedPowerValue.setReference('802.3at, Section 30.12.3')
if mibBuilder.loadTexts: bsLldpXdot3RemPSEAllocatedPowerValue.setStatus('current')
if mibBuilder.loadTexts: bsLldpXdot3RemPSEAllocatedPowerValue.setDescription('A GET attribute that for a PSE returns the PSE allocated power value that was used by the remote system to compute the power value that it has currently requested from the PSE. It is expressed in units of 0.1 watts.')
mibBuilder.exportSymbols("BAY-STACK-LLDP-EXT-DOT3-MIB", bsLldpXdot3RemoteData=bsLldpXdot3RemoteData, bsLldpXdot3LocPowerSource=bsLldpXdot3LocPowerSource, bsLldpXdot3RemPowerSource=bsLldpXdot3RemPowerSource, bayStackLldpXDot3Mib=bayStackLldpXDot3Mib, bsLldpXDot3Objects=bsLldpXDot3Objects, bsLldpXdot3RemPowerType=bsLldpXdot3RemPowerType, bsLldpXdot3RemPowerPriority=bsLldpXdot3RemPowerPriority, bsLldpXdot3RemPSEAllocatedPowerValue=bsLldpXdot3RemPSEAllocatedPowerValue, PYSNMP_MODULE_ID=bayStackLldpXDot3Mib, bsLldpXdot3LocPowerEntry=bsLldpXdot3LocPowerEntry, bsLldpXdot3LocPDRequestedPowerValue=bsLldpXdot3LocPDRequestedPowerValue, bsLldpXdot3LocalData=bsLldpXdot3LocalData, bsLldpXdot3LocPowerType=bsLldpXdot3LocPowerType, bsLldpXdot3Config=bsLldpXdot3Config, bsLldpXdot3RemPowerEntry=bsLldpXdot3RemPowerEntry, bsLldpXDot3Notifications=bsLldpXDot3Notifications, bsLldpXdot3RemPowerTable=bsLldpXdot3RemPowerTable, bsLldpXdot3LocPowerPriority=bsLldpXdot3LocPowerPriority, bsLldpXdot3LocPowerTable=bsLldpXdot3LocPowerTable, bsLldpXdot3RemPDRequestedPowerValue=bsLldpXdot3RemPDRequestedPowerValue, bsLldpXdot3LocPSEAllocatedPowerValue=bsLldpXdot3LocPSEAllocatedPowerValue)
