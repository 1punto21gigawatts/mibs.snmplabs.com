#
# PySNMP MIB module H323TERMINAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H323TERMINAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, ObjectIdentity, Counter64, Unsigned32, Integer32, Counter32, NotificationType, iso, experimental, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, Gauge32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Counter64", "Unsigned32", "Integer32", "Counter32", "NotificationType", "iso", "experimental", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "Gauge32", "MibIdentifier", "Bits")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
h323TerminalMIB = ModuleIdentity((1, 3, 6, 1, 3, 323, 3))
h323TerminalMIB.setRevisions(('1998-05-25 14:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h323TerminalMIB.setRevisionsDescriptions((' The initial version of the H323 terminal mib',))
if mibBuilder.loadTexts: h323TerminalMIB.setLastUpdated('9805251400Z')
if mibBuilder.loadTexts: h323TerminalMIB.setOrganization('VTEL Corp.')
if mibBuilder.loadTexts: h323TerminalMIB.setContactInfo('Joon Maeng VTEL Corp. Postal: 108 Wild Basin Rd. Austin, TX 78746 USA TEL: (512)437-4567 Email: Joon_Maeng@vtel.com')
if mibBuilder.loadTexts: h323TerminalMIB.setDescription('This MIB module supports the functions of an ITU H.323 terminal')
h323TerminalDescr = MibIdentifier((1, 3, 6, 1, 3, 323, 3, 1))
h323TerminalCaps = MibIdentifier((1, 3, 6, 1, 3, 323, 3, 2))
h323TerminalConfig = MibIdentifier((1, 3, 6, 1, 3, 323, 3, 3))
h323TerminalControl = MibIdentifier((1, 3, 6, 1, 3, 323, 3, 4))
h323t35CountryCode = MibScalar((1, 3, 6, 1, 3, 323, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323t35CountryCode.setStatus('current')
if mibBuilder.loadTexts: h323t35CountryCode.setDescription('Country code, per T.35.')
h323t35CountryCodeExtention = MibScalar((1, 3, 6, 1, 3, 323, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323t35CountryCodeExtention.setStatus('current')
if mibBuilder.loadTexts: h323t35CountryCodeExtention.setDescription('Assigned nationally.')
h323t35ManufacturerCode = MibScalar((1, 3, 6, 1, 3, 323, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323t35ManufacturerCode.setStatus('current')
if mibBuilder.loadTexts: h323t35ManufacturerCode.setDescription('Assigned nationally.')
h323TerminalUptime = MibScalar((1, 3, 6, 1, 3, 323, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalUptime.setStatus('current')
if mibBuilder.loadTexts: h323TerminalUptime.setDescription('The amount of time (in hundredths of a second) since this H323 terminal was last initialized. Note that this is different from sysUpTime in MIB-II [ ] because sysUpTime is the uptime of the network management portion of the system.')
h323TerminalLocalTime = MibScalar((1, 3, 6, 1, 3, 323, 3, 1, 5), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalLocalTime.setStatus('current')
if mibBuilder.loadTexts: h323TerminalLocalTime.setDescription('The local date and time of day.')
h323TerminalDiagnostics = MibScalar((1, 3, 6, 1, 3, 323, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalDiagnostics.setStatus('current')
if mibBuilder.loadTexts: h323TerminalDiagnostics.setDescription('Indicates the results of the last diagnostic routine performed noResults(1) No diagnostic has yet been performed, passed(2) the diagnostic has been passed, hardwareFault(3) Hardware fault was detected, softwareFault(4) Software fault was detected')
h323TerminalStatus = MibScalar((1, 3, 6, 1, 3, 323, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("callSetup", 1), ("callinProgress", 2), ("callHangUp", 3), ("idle", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalStatus.setStatus('current')
if mibBuilder.loadTexts: h323TerminalStatus.setDescription('General status of the terminal')
h323TerminalMaxLineRate = MibScalar((1, 3, 6, 1, 3, 323, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalMaxLineRate.setStatus('current')
if mibBuilder.loadTexts: h323TerminalMaxLineRate.setDescription('This object represents maximum line rate of combined audio/video and data of this terminal.')
h323TerminalVideoCaps = MibScalar((1, 3, 6, 1, 3, 323, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalVideoCaps.setStatus('current')
if mibBuilder.loadTexts: h323TerminalVideoCaps.setDescription('This object represents the video capabilities of this terminal. This includes the various video algorithms that it supports. It is encoded as bits in an octet string, with the following definitions: Capability Bit # h261CIFVideo 0 h261QCIFVideo 1 h263SQCIFVideo 2 h263QCIFVideo 3 h263CIFVideo 4 h263CIF4Video 5 h263CIF16Video 6 h262SPMLSIFVideo 7 h262SPML2SIFVideo 8 h262SPML4SIFVideo 9 h262MPMLSIFVideo 10 h262MPML2SIFVideo 11 h262MPML4SIFVideo 12 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
h323TerminalMaxVideoRate = MibScalar((1, 3, 6, 1, 3, 323, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalMaxVideoRate.setStatus('current')
if mibBuilder.loadTexts: h323TerminalMaxVideoRate.setDescription('The maximum bit rate that the video channel can do.')
h323TerminalAudioCaps = MibScalar((1, 3, 6, 1, 3, 323, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalAudioCaps.setStatus('current')
if mibBuilder.loadTexts: h323TerminalAudioCaps.setDescription('This object represents the audio capabilities of this terminal. This includes the various audio algorithms that it supports. It is encoded as bits in an octet string, with the following definitions: Capability Bit # g711-ALaw64KAudio 0 g711-ALaw56KAudio 1 g711-ULaw64KAudio 2 g711-ULaw56KAudio 3 g722-64KAudio 4 g722-56KAudio 5 g722-48KAudio 6 g728Audio 7 g723.1-5.3KAudio 8 g723.1-6.4KAudio 9 g729Audio 10 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
h323TerminalDataCaps = MibScalar((1, 3, 6, 1, 3, 323, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalDataCaps.setStatus('current')
if mibBuilder.loadTexts: h323TerminalDataCaps.setDescription('This object represents the data application capability of the terminal. It is encoded as bits in an octet string, with the following definitions: Capability Bit # t.120 0 dsm-cc 1 userData 2 t84 3 t434 4 h224 5 nlpid 6 dsvdControl 7 h222DataPartitioning 8 t30fax 9 t140 10 Others 11 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
h323TerminalEncrypCaps = MibScalar((1, 3, 6, 1, 3, 323, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalEncrypCaps.setStatus('current')
if mibBuilder.loadTexts: h323TerminalEncrypCaps.setDescription('This object represents the encryption capability of the terminal. Capability Bit # H.235 0 Others 1 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
h323TerminalRDCCaps = MibScalar((1, 3, 6, 1, 3, 323, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323TerminalRDCCaps.setStatus('current')
if mibBuilder.loadTexts: h323TerminalRDCCaps.setDescription('This object represents the Remote Device Control capability of the terminal. FECC 0 -- Far-end Camera Control Others 1 Bits are numbered starting with the most significant bit of the first byte being bit 0, the least significant bit of the first byte being bit 7, the most significant bit of the second byte being bit 8, and so on. A one bit encodes that the capability is supported, a zero bit encodes that the capability is not supported.')
h323TerminalSiteName = MibScalar((1, 3, 6, 1, 3, 323, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalSiteName.setStatus('current')
if mibBuilder.loadTexts: h323TerminalSiteName.setDescription('Name of the site where the H323 terminal is located. ')
h323TerminalVideoSystem = MibScalar((1, 3, 6, 1, 3, 323, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ntsc", 1), ("pal", 2), ("secam", 3), ("others", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalVideoSystem.setStatus('current')
if mibBuilder.loadTexts: h323TerminalVideoSystem.setDescription('Video format standard')
h323TerminalfType = MibScalar((1, 3, 6, 1, 3, 323, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalfType.setStatus('current')
if mibBuilder.loadTexts: h323TerminalfType.setDescription('The interface type on which this site can be called. The interface type identified by this value is the same type of as the ifType from Interface Table in RFC1213.')
h323TerminalIPAddress = MibScalar((1, 3, 6, 1, 3, 323, 3, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalIPAddress.setStatus('current')
if mibBuilder.loadTexts: h323TerminalIPAddress.setDescription('The IP address of the terminal.')
h323TerminalAdminControl = MibScalar((1, 3, 6, 1, 3, 323, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("run", 1), ("reset", 2), ("diagnose", 3), ("stop", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalAdminControl.setStatus('current')
if mibBuilder.loadTexts: h323TerminalAdminControl.setDescription('The desired state of the H323 terminal. Setting the value if this object to these values will have the following actions: run(1) The H323 terminal will enter the run state, reset(2) The H323 terminal will reset, diagnose(3) Will activate the diagnostic routine stop(4) Will halt the H323 terminal.')
h323TerminalCallSetUp = MibScalar((1, 3, 6, 1, 3, 323, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalCallSetUp.setStatus('current')
if mibBuilder.loadTexts: h323TerminalCallSetUp.setDescription('establish a call to another video conference terminal. Set this value to the index of the site of the video conference site you want to dial in the Site Table and the system will be dialed.')
h323TerminalCallHangup = MibScalar((1, 3, 6, 1, 3, 323, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323TerminalCallHangup.setStatus('current')
if mibBuilder.loadTexts: h323TerminalCallHangup.setDescription('Hang up the video conference call in progess now.')
h323EnableLocalLoopback = MibScalar((1, 3, 6, 1, 3, 323, 3, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323EnableLocalLoopback.setStatus('current')
if mibBuilder.loadTexts: h323EnableLocalLoopback.setDescription('Enable or disable local loop back on a video conference system. Local loopbacks loop back the audio, video and data streams in a call. Once looped back, a new call will show up in the Call Table and the user can observe the audio/video/data rates to assure that these components are working properly.')
h323EnableRemoteLoopback = MibScalar((1, 3, 6, 1, 3, 323, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323EnableRemoteLoopback.setStatus('current')
if mibBuilder.loadTexts: h323EnableRemoteLoopback.setDescription('Enable or disable remote loop back on a video conference system. Remote loopbacks loop back the audio and video streams from the remote system in a call.. When the remote system calls in, a new call will show up in the Call Table and the user can observe the audio/video/data rates to assure that these components are coming in properly from the remote system.')
h323TerminalMIBConfs = MibIdentifier((1, 3, 6, 1, 3, 323, 3, 5))
h323TerminalMIBGroups = MibIdentifier((1, 3, 6, 1, 3, 323, 3, 5, 1))
h323TerminalMIBCompl = MibIdentifier((1, 3, 6, 1, 3, 323, 3, 5, 2))
h323TerminalDesrGroup = ObjectGroup((1, 3, 6, 1, 3, 323, 3, 5, 1, 1)).setObjects(("H323TERMINAL-MIB", "h323t35CountryCode"), ("H323TERMINAL-MIB", "h323t35CountryCodeExtention"), ("H323TERMINAL-MIB", "h323t35ManufacturerCode"), ("H323TERMINAL-MIB", "h323TerminalUptime"), ("H323TERMINAL-MIB", "h323TerminalLocalTime"), ("H323TERMINAL-MIB", "h323TerminalDiagnostics"), ("H323TERMINAL-MIB", "h323TerminalStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323TerminalDesrGroup = h323TerminalDesrGroup.setStatus('current')
if mibBuilder.loadTexts: h323TerminalDesrGroup.setDescription('A collection of objects providing the description of the terminal')
h323TerminalCapsGroup = ObjectGroup((1, 3, 6, 1, 3, 323, 3, 5, 1, 2)).setObjects(("H323TERMINAL-MIB", "h323TerminalMaxLineRate"), ("H323TERMINAL-MIB", "h323TerminalVideoCaps"), ("H323TERMINAL-MIB", "h323TerminalMaxVideoRate"), ("H323TERMINAL-MIB", "h323TerminalAudioCaps"), ("H323TERMINAL-MIB", "h323TerminalDataCaps"), ("H323TERMINAL-MIB", "h323TerminalEncrypCaps"), ("H323TERMINAL-MIB", "h323TerminalRDCCaps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323TerminalCapsGroup = h323TerminalCapsGroup.setStatus('current')
if mibBuilder.loadTexts: h323TerminalCapsGroup.setDescription('A collection of objects providing capabilities of the terminal')
h323TerminalConfigGroup = ObjectGroup((1, 3, 6, 1, 3, 323, 3, 5, 1, 3)).setObjects(("H323TERMINAL-MIB", "h323TerminalSiteName"), ("H323TERMINAL-MIB", "h323TerminalVideoSystem"), ("H323TERMINAL-MIB", "h323TerminalfType"), ("H323TERMINAL-MIB", "h323TerminalIPAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323TerminalConfigGroup = h323TerminalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: h323TerminalConfigGroup.setDescription('A collection of objects providing the ability to configure the terminal')
h323TerminalControlGroup = ObjectGroup((1, 3, 6, 1, 3, 323, 3, 5, 1, 4)).setObjects(("H323TERMINAL-MIB", "h323TerminalAdminControl"), ("H323TERMINAL-MIB", "h323TerminalCallSetUp"), ("H323TERMINAL-MIB", "h323TerminalCallHangup"), ("H323TERMINAL-MIB", "h323EnableLocalLoopback"), ("H323TERMINAL-MIB", "h323EnableRemoteLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323TerminalControlGroup = h323TerminalControlGroup.setStatus('current')
if mibBuilder.loadTexts: h323TerminalControlGroup.setDescription('A collection of objects providing the ability to invoke terminal functions')
h323TerminalCompliance = ModuleCompliance((1, 3, 6, 1, 3, 323, 3, 5, 2, 1)).setObjects(("H323TERMINAL-MIB", "h323TerminalDesrGroup"), ("H323TERMINAL-MIB", "h323TerminalCapsGroup"), ("H323TERMINAL-MIB", "h323TerminalConfigGroup"), ("H323TERMINAL-MIB", "h323TerminalControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323TerminalCompliance = h323TerminalCompliance.setStatus('current')
if mibBuilder.loadTexts: h323TerminalCompliance.setDescription('The set of objects required for compliance')
mibBuilder.exportSymbols("H323TERMINAL-MIB", h323TerminalCallSetUp=h323TerminalCallSetUp, h323t35CountryCodeExtention=h323t35CountryCodeExtention, h323TerminalVideoCaps=h323TerminalVideoCaps, h323TerminalMIBGroups=h323TerminalMIBGroups, h323TerminalConfig=h323TerminalConfig, h323TerminalCaps=h323TerminalCaps, h323TerminalDataCaps=h323TerminalDataCaps, h323TerminalEncrypCaps=h323TerminalEncrypCaps, h323TerminalControlGroup=h323TerminalControlGroup, h323TerminalMIBCompl=h323TerminalMIBCompl, h323t35ManufacturerCode=h323t35ManufacturerCode, h323TerminalControl=h323TerminalControl, PYSNMP_MODULE_ID=h323TerminalMIB, h323TerminalVideoSystem=h323TerminalVideoSystem, h323TerminalIPAddress=h323TerminalIPAddress, h323TerminalCallHangup=h323TerminalCallHangup, h323TerminalConfigGroup=h323TerminalConfigGroup, h323TerminalSiteName=h323TerminalSiteName, h323TerminalCompliance=h323TerminalCompliance, h323TerminalLocalTime=h323TerminalLocalTime, h323TerminalAudioCaps=h323TerminalAudioCaps, h323TerminalDiagnostics=h323TerminalDiagnostics, h323TerminalfType=h323TerminalfType, h323TerminalMaxLineRate=h323TerminalMaxLineRate, h323TerminalMaxVideoRate=h323TerminalMaxVideoRate, h323EnableRemoteLoopback=h323EnableRemoteLoopback, h323TerminalStatus=h323TerminalStatus, h323TerminalDesrGroup=h323TerminalDesrGroup, h323TerminalAdminControl=h323TerminalAdminControl, h323TerminalMIB=h323TerminalMIB, h323TerminalCapsGroup=h323TerminalCapsGroup, h323t35CountryCode=h323t35CountryCode, h323TerminalUptime=h323TerminalUptime, h323TerminalMIBConfs=h323TerminalMIBConfs, h323TerminalRDCCaps=h323TerminalRDCCaps, h323EnableLocalLoopback=h323EnableLocalLoopback, h323TerminalDescr=h323TerminalDescr)
