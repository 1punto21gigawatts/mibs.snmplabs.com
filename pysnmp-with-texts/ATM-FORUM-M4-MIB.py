#
# PySNMP MIB module ATM-FORUM-M4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-FORUM-M4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
atmForum, = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "atmForum")
atmVpCrossConnectLowIfIndex, atmVcCrossConnectHighVpi, atmVplVpi, atmVplEntry, atmVcCrossConnectLowVpi, atmVpCrossConnectHighVpi, atmVclVpi, atmVcCrossConnectLowIfIndex, atmVpCrossConnectEntry, atmVcCrossConnectLowVci, atmVcCrossConnectHighIfIndex, atmVpCrossConnectLowVpi, atmVpCrossConnectHighIfIndex, atmVcCrossConnectIndex, atmVcCrossConnectEntry, atmVcCrossConnectHighVci, atmVclEntry, atmVpCrossConnectIndex, atmVclVci = mibBuilder.importSymbols("ATM-MIB", "atmVpCrossConnectLowIfIndex", "atmVcCrossConnectHighVpi", "atmVplVpi", "atmVplEntry", "atmVcCrossConnectLowVpi", "atmVpCrossConnectHighVpi", "atmVclVpi", "atmVcCrossConnectLowIfIndex", "atmVpCrossConnectEntry", "atmVcCrossConnectLowVci", "atmVcCrossConnectHighIfIndex", "atmVpCrossConnectLowVpi", "atmVpCrossConnectHighIfIndex", "atmVcCrossConnectIndex", "atmVcCrossConnectEntry", "atmVcCrossConnectHighVci", "atmVclEntry", "atmVpCrossConnectIndex", "atmVclVci")
entPhysicalIndex, entPhysicalParentRelPos, entPhysicalClass, entPhysicalContainedIn = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalParentRelPos", "entPhysicalClass", "entPhysicalContainedIn")
hrSWInstalledName, hrSWInstalledIndex = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrSWInstalledName", "hrSWInstalledIndex")
ifIndex, OwnerString = mibBuilder.importSymbols("IF-MIB", "ifIndex", "OwnerString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, Bits, ModuleIdentity, iso, Counter64, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, TimeTicks, NotificationType, IpAddress, ObjectIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "ModuleIdentity", "iso", "Counter64", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "TimeTicks", "NotificationType", "IpAddress", "ObjectIdentity", "MibIdentifier")
AutonomousType, TestAndIncr, DisplayString, TruthValue, RowPointer, RowStatus, TimeInterval, DateAndTime, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TestAndIncr", "DisplayString", "TruthValue", "RowPointer", "RowStatus", "TimeInterval", "DateAndTime", "TimeStamp", "TextualConvention")
atmfM4MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 100))
if mibBuilder.loadTexts: atmfM4MIB.setLastUpdated('9701210000Z')
if mibBuilder.loadTexts: atmfM4MIB.setOrganization('ATM Forum')
if mibBuilder.loadTexts: atmfM4MIB.setContactInfo(' Andrew G. Malis Postal: Ascend Communications, Inc. 5 Carlisle Road Westford MA 01886 USA Tel: +1 508 952 7414 Fax: +1 508 392 9250 E-Mail: malis@ascend.com')
if mibBuilder.loadTexts: atmfM4MIB.setDescription("This MIB module is the SNMP version of the ATM Forum's M4 interface (network element view).")
atmfM4MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 1))
atmfM4MIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 2))
atmfM4MIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 3))
atmfM4NeVendor = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeVendor.setStatus('current')
if mibBuilder.loadTexts: atmfM4NeVendor.setDescription('The vendor of the ATM network element.')
atmfM4NeVersion = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeVersion.setStatus('current')
if mibBuilder.loadTexts: atmfM4NeVersion.setDescription('The version of the ATM network element.')
atmfM4NeStartTime = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4NeStartTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4NeStartTime.setDescription('The time at which the agent was last started; in other words, the time at which sysUpTime was zero.')
atmfM4NeAlarmSeverityIndex = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4NeAlarmSeverityIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4NeAlarmSeverityIndex.setDescription('An index into the alarm severity profile table, specifying the severity assignments for M4 alarms reported for the ATM network element.')
atmfM4NeSuppressZeroStats = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4NeSuppressZeroStats.setStatus('current')
if mibBuilder.loadTexts: atmfM4NeSuppressZeroStats.setDescription('When the value of this object is true, no entry will be created in any of the the historical statistics tables for intervals in which all counts are zero.')
atmfM4PhysPathTpTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 6), )
if mibBuilder.loadTexts: atmfM4PhysPathTpTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4PhysPathTpTable.setDescription('The ATM Forum M4 interface Configuration table extensions for the physical path termination point.')
atmfM4PhysPathTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4PhysPathTpEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4PhysPathTpEntry.setDescription('Columns conceptually added to the interface table entry for an ATM interface to model the physical path termination point. The row of the interface table modeling this object should also include columns for the TC Adaptor object and the ATM interface table defined in RFC 1695. The interface table entry for the physical path TP fields of an ATM interface are set up without management system control (or else that setup is outside the scope of M4).')
atmfM4PhysPathTpHwUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PhysPathTpHwUnitIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4PhysPathTpHwUnitIndex.setDescription('Specifies the index of the entry in the entPhysicalTable that represents the device (i.e., card) on which the physical path terminates.')
atmfM4PhysPathTpPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PhysPathTpPortID.setStatus('current')
if mibBuilder.loadTexts: atmfM4PhysPathTpPortID.setDescription('Identifies the port (within the card identified by the hardware unit index) on which the physical path terminates.')
atmfM4PhysPathTpAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PhysPathTpAlarmSeverityIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4PhysPathTpAlarmSeverityIndex.setDescription('Specifies the index of the entry in the communications alarm severity profile table that should be used.')
atmfM4TcAdaptorTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 7), )
if mibBuilder.loadTexts: atmfM4TcAdaptorTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcAdaptorTable.setDescription('The ATM Forum M4 interface Configuration table extensions for the TC Adaptor.')
atmfM4TcAdaptorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4TcAdaptorEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcAdaptorEntry.setDescription('Columns conceptually added to the interface table entry for an ATM interface to model the TC Adaptor. The row of the interface table modeling this object should also include columns for the physical path TP and the ATM interface table defined in RFC 1695. The interface table entry for the TC Adaptor fields of an ATM interface are set up without management system control (or else that setup is outside the scope of M4).')
atmfM4TcACellScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 7, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4TcACellScrambling.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcACellScrambling.setDescription('This attribute is used by the management system to activate and deactivate the ATM cell scrambling function. When the value of this attribute is TRUE, cell scrambling on the interface is activated. This attribute shall be present only for interfaces that support the deactivation of cell scrambling. The ATM Forum UNI specification requires cell scrambling for ATM/SONET interfaces but allows cell scrambling to be controlled (i.e., turned on and off) for ATM/DS3 interfaces.')
atmfM4TcAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4TcAlarmSeverityIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcAlarmSeverityIndex.setDescription('Specifies the index of the entry in the communications alarm severity profile table that should be used.')
atmfM4AtmLayerTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 8), )
if mibBuilder.loadTexts: atmfM4AtmLayerTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4AtmLayerTable.setDescription('The ATM Forum M4 interface Configuration table extensions for the ATM cell layer.')
atmfM4AtmLayerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4AtmLayerEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4AtmLayerEntry.setDescription('Columns conceptually added to the interface table entry for an ATM interface to model the ATM cell layer. The row of the interface table modeling this object should also include columns for the physical path TP and TC Adaptor object, as well as the ATM interface table defined in RFC 1695. The default configuration of an entry in this table is used whenever the entries for the physical path TP, etc., are created. The management system configures a UNI, B-ICI, or B-ISSI on the interface by first modifying the atmfM4IfType column (this can be done in the same SNMP set-request that sets up the other necessary variables.')
atmfM4IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("uni", 1), ("bici", 2), ("bissi", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfType.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfType.setDescription('Specifies the type of ATM cell-layer interface defined on the physical path termination point modeled by this entry in the interface table.')
atmfM4IfLoopbackLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfLoopbackLocationCode.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfLoopbackLocationCode.setDescription('Specifies the code that shall exist in incoming OAM Loopback cells that are to be looped back at this interface. A value of zero shall indicate that the management system has not set any loopback location code for this interface. Therefore, zero should not be used as the actual loopback location code for any interface. This object shall be present only for table entries that represent an actual ATM cell layer interface (i.e., the atmM4IfType is not none(0)).')
atmfM4IfSubscriberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfSubscriberAddress.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfSubscriberAddress.setDescription('Specifies the address or newline-delimited list of addresses assigned to the UNI. This object shall be present only for table entries that represent an UNI interface.')
atmfM4IfPreferredCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfPreferredCarrier.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfPreferredCarrier.setDescription('Specifies the name of the default carrier to use when one is not explicitly identified in the call set-up message. This object shall be present only for table entries that represent an UNI interface and only when SVC services are supported.')
atmfM4IfFarEndCarrierNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4IfFarEndCarrierNetwork.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfFarEndCarrierNetwork.setDescription('Specifies the adjacent carrier to which the B-ICI transmission path is connected. This object shall be present only for table entries that represent an B-ICI interface and only when SVC services are supported.')
atmfM4VplTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 9), )
if mibBuilder.loadTexts: atmfM4VplTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VplTable.setDescription('The ATM Forum M4 VPL Termination Point Configuration table extensions. This table augments the VPL configuration table in RFC 1695.')
atmfM4VplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 9, 1), )
atmVplEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VplEntry"))
atmfM4VplEntry.setIndexNames(*atmVplEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VplEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VplEntry.setDescription('Additional columns for the VPL configuration table entry.')
atmfM4VplSegEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 9, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VplSegEndPt.setStatus('current')
if mibBuilder.loadTexts: atmfM4VplSegEndPt.setDescription('Specifies whether the VPL termination point is a segment end-point.')
atmfM4VclTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 10), )
if mibBuilder.loadTexts: atmfM4VclTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VclTable.setDescription('The ATM Forum M4 VCL Termination Point Configuration table extensions. This table augments the VCL configuration table in RFC 1695.')
atmfM4VclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 10, 1), )
atmVclEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VclEntry"))
atmfM4VclEntry.setIndexNames(*atmVclEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VclEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VclEntry.setDescription('Additional columns for the VCL configuration table entry.')
atmfM4VclSegEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 10, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VclSegEndPt.setStatus('current')
if mibBuilder.loadTexts: atmfM4VclSegEndPt.setDescription('Specifies whether the VCL termination point is a segment end-point.')
atmfM4VpXConnTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 11), )
if mibBuilder.loadTexts: atmfM4VpXConnTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpXConnTable.setDescription('The ATM Forum M4 VP Cross-Connect Configuration table extensions. This table augments the VP Cross-Connect configuration table in RFC 1695.')
atmfM4VpXConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 11, 1), )
atmVpCrossConnectEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VpXConnEntry"))
atmfM4VpXConnEntry.setIndexNames(*atmVpCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VpXConnEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpXConnEntry.setDescription('Additional columns for the VP Cross-Connect table entry.')
atmfM4VpXConnRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 11, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VpXConnRecover.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpXConnRecover.setDescription('If FALSE, this cross-connection will be removed on failure.')
atmfM4VcXConnTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 12), )
if mibBuilder.loadTexts: atmfM4VcXConnTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcXConnTable.setDescription('The ATM Forum M4 VC Cross-Connect Configuration table extensions. This table augments the VC Cross-Connect configuration table in RFC 1695.')
atmfM4VcXConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 12, 1), )
atmVcCrossConnectEntry.registerAugmentions(("ATM-FORUM-M4-MIB", "atmfM4VcXConnEntry"))
atmfM4VcXConnEntry.setIndexNames(*atmVcCrossConnectEntry.getIndexNames())
if mibBuilder.loadTexts: atmfM4VcXConnEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcXConnEntry.setDescription('Additional columns for the VC Cross-Connect table entry.')
atmfM4VcXConnRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 12, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4VcXConnRecover.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcXConnRecover.setDescription('If FALSE, this cross-connection will be removed on failure.')
atmfM4VpNextVpiTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 13), )
if mibBuilder.loadTexts: atmfM4VpNextVpiTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpNextVpiTable.setDescription('The ATM Forum M4 VP Next-VPI value table. This optional table supplied unused VPI values for use in creating entries in the atmVplTable.')
atmfM4VpNextVpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4VpNextVpiEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpNextVpiEntry.setDescription("Each entry in this table represents the 'next' VPI value available for a given ATM interface. Each ATM interface (UNI, BICI, BISSI) automatically has an entry in this table associated with it.")
atmfM4VpNextVpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpNextVpiValue.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpNextVpiValue.setDescription('This object contains an appropriate value to be used for atmVplVpi when creating entries in the atmVplTable. The value -1 indicates that no unassigned entries are available. To obtain the atmVplVpi value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index (or -1).')
atmfM4VcNextVciTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 14), )
if mibBuilder.loadTexts: atmfM4VcNextVciTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcNextVciTable.setDescription('The ATM Forum M4 VC Next-VCI value table. This optional table supplied unused VCI values for use in creating entries in the atmVclTable.')
atmfM4VcNextVciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 14, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmfM4VcNextVciEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcNextVciEntry.setDescription("Each entry in this table represents the 'next' VCI value available for a given ATM interface. Each VPL Termination Point automatically has an entry in this table associated with it.")
atmfM4VcNextVciValue = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcNextVciValue.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcNextVciValue.setDescription('This object contains an appropriate value to be used for atmVclVci when creating entries in the atmVclTable. The value -1 indicates that no unassigned entries are available. To obtain the atmVclVci value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index (or -1).')
atmfM4CellProtoCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 15), )
if mibBuilder.loadTexts: atmfM4CellProtoCurrTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrTable.setDescription('The ATM Forum M4 Cell Protocol Monitoring Current Data table. This table maintains per-interface statistics for the fifteen-minute interval currently being collected.')
atmfM4CellProtoCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4CellProtoCurrEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrEntry.setDescription('An entry in the ATM Forum M4 Cell Protocol Monitoring Current Data table. Each ATM interface (UNI, BICI, BISSI) automatically has an entry in this table associated with it.')
atmfM4CellProtoCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4CellProtoCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4CellProtoCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing ATM Cell Protocol Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4CellProtoCurrProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrProtoErrors.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrProtoErrors.setDescription('The number of ATM cells dropped on this interface, due to an unrecognized field or set of fields in the ATM cell header, since the start of this interval.')
atmfM4CellProtoCurrInOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoCurrInOAMCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrInOAMCells.setDescription('The number of OAM cells received at this interface since the start of this interval.')
atmfM4CellProtoHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 16), )
if mibBuilder.loadTexts: atmfM4CellProtoHistTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistTable.setDescription('The ATM Forum M4 Cell Protocol Monitoring History Data table. This table maintains per-interface statistics for previous fifteen-minute intervals.')
atmfM4CellProtoHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoHistIndex"))
if mibBuilder.loadTexts: atmfM4CellProtoHistEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistEntry.setDescription('An entry in the ATM Forum M4 Cell Protocol Monitoring History Data table. Each ATM interface (UNI, BICI, BISSI) automatically has an entry in this table associated with it for each fifteen- minute interval in which statistics are collected for it.')
atmfM4CellProtoHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4CellProtoHistIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistIndex.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics in this entry was collected. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
atmfM4CellProtoHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4CellProtoHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4CellProtoHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing ATM Cell Protocol Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4CellProtoHistProtoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistProtoErrors.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistProtoErrors.setDescription('The number of ATM cells dropped on this interface, due to an unrecognized field or set of fields in the ATM cell header, since the start of this interval.')
atmfM4CellProtoHistInOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoHistInOAMCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistInOAMCells.setDescription('The number of OAM cells received at this interface since the start of this interval.')
atmfM4CellProtoErrorTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 17), )
if mibBuilder.loadTexts: atmfM4CellProtoErrorTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorTable.setDescription('The ATM Forum M4 Cell Protocol Monitoring Error Log table. This table maintains a record of the last error of each type encountered on each interface, as a result of ATM Cell Protocol Monitoring.')
atmfM4CellProtoErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorCode"))
if mibBuilder.loadTexts: atmfM4CellProtoErrorEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorEntry.setDescription('An entry in the ATM Forum M4 Cell Protocol Monitoring Error Log table. Each ATM interface (UNI, BICI, BISSI) automatically has an entry in this table associated with it for each error that has occurred since agent start-up.')
atmfM4CellProtoErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4CellProtoErrorCode.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorCode.setDescription('Indicates the type of error for which this entry contains information.')
atmfM4CellProtoErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorTime.setDescription('Value of sysUpTime when the error occurred.')
atmfM4CellProtoErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorReason.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorReason.setDescription('The cell header abnormality type: the reason for discarding the ATM cell (i.e., unassigned VPI/VCI value or VPI/VCI value out of range.')
atmfM4CellProtoErrorVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorVpi.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorVpi.setDescription('The VPI value of the discarded cell.')
atmfM4CellProtoErrorVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4CellProtoErrorVci.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorVci.setDescription('The VCI value of the discarded cell.')
atmfM4TcProtoCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 18), )
if mibBuilder.loadTexts: atmfM4TcProtoCurrTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoCurrTable.setDescription('The ATM Forum M4 TC Adaptor Protocol Monitoring Current Data table. This table maintains per-interface statistics for the fifteen-minute interval currently being collected.')
atmfM4TcProtoCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4TcProtoCurrEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoCurrEntry.setDescription('An entry in the ATM Forum M4 TC Adaptor Protocol Monitoring Current Data table. Each ATM interface (UNI, BICI, BISSI) automatically has an entry in this table associated with it.')
atmfM4TcProtoCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoCurrSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4TcProtoCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoCurrElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4TcProtoCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoCurrSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing ATM TC Adaptor Protocol Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4TcProtoCurrDiscardHECViol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoCurrDiscardHECViol.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoCurrDiscardHECViol.setDescription('The number of ATM cells discarded on this interface, due to an HEC violation, since the start of this interval.')
atmfM4TcProtoHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 19), )
if mibBuilder.loadTexts: atmfM4TcProtoHistTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistTable.setDescription('The ATM Forum M4 TC Adaptor Protocol Monitoring History Data table. This table maintains per-interface statistics for previous fifteen-minute intervals.')
atmfM4TcProtoHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4TcProtoHistIndex"))
if mibBuilder.loadTexts: atmfM4TcProtoHistEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistEntry.setDescription('An entry in the ATM Forum M4 TC Adaptor Protocol Monitoring History Data table. Each ATM interface (UNI, BICI, BISSI) automatically has an entry in this table associated with it for each fifteen- minute interval in which statistics are collected for it.')
atmfM4TcProtoHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4TcProtoHistIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistIndex.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics in this entry was collected. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
atmfM4TcProtoHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4TcProtoHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4TcProtoHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing ATM Cell Protocol Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4TcProtoHistDiscardHECViol = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 19, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TcProtoHistDiscardHECViol.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistDiscardHECViol.setDescription('The number of ATM cells discarded on this interface, due to an HEC violation, since the start of this interval.')
atmfM4VpUpcNpcCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 20), )
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrTable.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring Current Data table for VPL termination points. This table maintains per-TP statistics for the fifteen-minute interval currently being collected.')
atmfM4VpUpcNpcCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"))
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrEntry.setDescription('An entry in the ATM Forum M4 UPC/NPC Disagreement Monitoring Current Data table for VPL termination points. Each VPL Termination Point automatically has an entry in this table associated with it.')
atmfM4VpUpcNpcCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4VpUpcNpcCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4VpUpcNpcCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing UPC/NPC Disagreement Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4VpUpcNpcCurrDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedCells.setDescription('The number of discarded cells due to combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VpUpcNpcCurrDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrDiscardedClp0.setDescription('The number of discarded cells due to CLP=0 only UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4VpUpcNpcCurrPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedCells.setDescription('The number of cells that have been successfully passed by the combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VpUpcNpcCurrPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrPassedClp0.setDescription('The number of cells that have been successfully passed by the CLP=0 UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4VpUpcNpcHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 21), )
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistTable.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring History Data table for VPL termination points. This table maintains per-interface statistics for previous fifteen-minute intervals.')
atmfM4VpUpcNpcHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistIndex"))
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistEntry.setDescription('An entry in the ATM Forum M4 UPC/NPC Disagreement Monitoring History Data table for VPL termination points. Each VPL Termination Point automatically has an entry in this table associated with it.')
atmfM4VpUpcNpcHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistIndex.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics in this entry was collected. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
atmfM4VpUpcNpcHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4VpUpcNpcHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4VpUpcNpcHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing UPC/NPC Disagreement Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4VpUpcNpcHistDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedCells.setDescription('The number of discarded cells due to combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VpUpcNpcHistDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistDiscardedClp0.setDescription('The number of discarded cells due to CLP=0 only UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4VpUpcNpcHistPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedCells.setDescription('The number of cells that have been successfully passed by the combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VpUpcNpcHistPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 21, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistPassedClp0.setDescription('The number of cells that have been successfully passed by the CLP=0 UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4VcUpcNpcCurrTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 22), )
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrTable.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring Current Data table for VCL termination points. This table maintains per-TP statistics for the fifteen-minute interval currently being collected.')
atmfM4VcUpcNpcCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrEntry.setDescription('An entry in the ATM Forum M4 UPC/NPC Disagreement Monitoring Current Data table for VCL termination points. Each VCL Termination Point automatically has an entry in this table associated with it.')
atmfM4VcUpcNpcCurrSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4VcUpcNpcCurrElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4VcUpcNpcCurrSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing UPC/NPC Disagreement Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4VcUpcNpcCurrDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedCells.setDescription('The number of discarded cells due to combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VcUpcNpcCurrDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrDiscardedClp0.setDescription('The number of discarded cells due to CLP=0 only UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4VcUpcNpcCurrPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedCells.setDescription('The number of cells that have been successfully passed by the combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VcUpcNpcCurrPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrPassedClp0.setDescription('The number of cells that have been successfully passed by the CLP=0 UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4VcUpcNpcHistTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 23), )
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistTable.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring History Data table for VCL termination points. This table maintains per-interface statistics for previous fifteen-minute intervals.')
atmfM4VcUpcNpcHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistIndex"))
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistEntry.setDescription('An entry in the ATM Forum M4 UPC/NPC Disagreement Monitoring History Data table for VCL termination points. Each VCL Termination Point automatically has an entry in this table associated with it.')
atmfM4VcUpcNpcHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistIndex.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics in this entry was collected. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
atmfM4VcUpcNpcHistSuspect = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSuspect.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSuspect.setDescription('If true, the statistics in this entry may be unreliable.')
atmfM4VcUpcNpcHistElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistElapsedTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistElapsedTime.setDescription('Amount of time, measured in units of 0.01 second, that statistics for this entry (the current interval) have been counted.')
atmfM4VcUpcNpcHistSupprIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSupprIntvls.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistSupprIntvls.setDescription("This attribute is non-zero only if the ATM NE is suppressing UPC/NPC Disagreement Monitoring History Data entry creation when the current interval terminates with 'all-zeroes' performance measurements.")
atmfM4VcUpcNpcHistDiscardedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedCells.setDescription('The number of discarded cells due to combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VcUpcNpcHistDiscardedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistDiscardedClp0.setDescription('The number of discarded cells due to CLP=0 only UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4VcUpcNpcHistPassedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedCells.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedCells.setDescription('The number of cells that have been successfully passed by the combined CLP=0 and CLP=1 UPC/NPC policing.')
atmfM4VcUpcNpcHistPassedClp0 = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 23, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedClp0.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistPassedClp0.setDescription('The number of cells that have been successfully passed by the CLP=0 UPC/NPC policing. This object shall be present only if CLP=0 traffic is separately policed.')
atmfM4TestTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 1, 24))
atmfM4TestOAMLoopbackSeg = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 100, 1, 24, 1))
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackSeg.setStatus('current')
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackSeg.setDescription('This identifies an OAM Loopback Test on a VPL, VPC, VCL, or VCC termination point, using a segment OAM cell. The test type must have appended to it a code that uniquely identifies an intermediate point responsible for looping back the cell. If this is absent, the loopback is performed at the end of the segment or connection. E.g., the OID { atmfM4TestOAMLoopbackSeg 5 } identifies that the loopback should be performed at the intermediate point labeled 5.')
atmfM4TestOAMLoopbackE2E = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 100, 1, 24, 2))
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackE2E.setStatus('current')
if mibBuilder.loadTexts: atmfM4TestOAMLoopbackE2E.setDescription('This identifies an OAM Loopback Test on a VPL, VPC, VCL, or VCC termination point, using an end-to-end OAM cell.')
atmfM4VpTestTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 25), )
if mibBuilder.loadTexts: atmfM4VpTestTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestTable.setDescription('The ATM Forum M4 VP Termination Point Test table. This table allows tests to be run on VPL and VPC termination points. The operation of this table is entirely analogous to that of the ifTestTable in RFC 1573, except that the indexes into this table are different.')
atmfM4VpTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVplVpi"), (0, "ATM-FORUM-M4-MIB", "atmfM4VpTestObject"))
if mibBuilder.loadTexts: atmfM4VpTestEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestEntry.setDescription('An entry containing objects for invoking tests on a VPL or VPC termination point.')
atmfM4VpTestObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vplTp", 1), ("vpcTp", 2))))
if mibBuilder.loadTexts: atmfM4VpTestObject.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestObject.setDescription('Specifies whether the test applies to the VPL termination point with the specified VPI, or the VPC termination point.')
atmfM4VpTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestId.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestId.setDescription("This object identifies the current invocation of the interface's test.")
atmfM4VpTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInUse", 1), ("inUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestStatus.setDescription("This object indicates whether or not some manager currently has the necessary 'ownership' required to invoke a test on this interface. A write to this object is only successful when it changes its value from 'notInUse(1)' to 'inUse(2)'. After completion of a test, the agent resets the value back to 'notInUse(1)'.")
atmfM4VpTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 4), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestType.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestType.setDescription('A control variable used to start and stop operator- initiated interface tests. Most OBJECT IDENTIFIER values assigned to tests are defined elsewhere, in association with specific types of interface. However, this document assigns a value for a full- duplex loopback test, and defines the special meanings of the subject identifier: noTest OBJECT IDENTIFIER ::= { 0 0 } When the value noTest is written to this object, no action is taken unless a test is in progress, in which case the test is aborted. Writing any other value to this object is only valid when no test is currently in progress, in which case the indicated test is initiated. When read, this object always returns the most recent value that atmfM4VpTestType was set to. If it has not been set since the last initialization of the network management subsystem on the agent, a value of noTest is returned.')
atmfM4VpTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpTestResult.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestResult.setDescription('This object contains the result of the most recently requested test, or the value none(1) if no tests have been requested since the last reset. Note that this facility provides no provision for saving the results of one test when starting another, as could be required if used by multiple managers concurrently.')
atmfM4VpTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VpTestCode.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestCode.setDescription('This object contains a code which contains more specific information on the test result, for example an error-code after a failed test. Error codes and other values this object may take are specific to the type of interface and/or test. The value may have the semantics of either the AutonomousType or RowPointer textual conventions as defined in RFC 1903 [15]. The identifier: testCodeUnknown OBJECT IDENTIFIER ::= { 0 0 } is defined for use if no additional result code is available.')
atmfM4VpTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 25, 1, 7), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VpTestOwner.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestOwner.setDescription("The entity which currently has the 'ownership' required to invoke a test on this interface.")
atmfM4VcTestTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 26), )
if mibBuilder.loadTexts: atmfM4VcTestTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestTable.setDescription('The ATM Forum M4 VC Termination Point Test table. This table allows tests to be run on VCL and VCC termination points. The operation of this table is entirely analogous to that of the ifTestTable in RFC 1573, except that the indexes into this table are different.')
atmfM4VcTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ATM-MIB", "atmVclVpi"), (0, "ATM-MIB", "atmVclVci"), (0, "ATM-FORUM-M4-MIB", "atmfM4VcTestObject"))
if mibBuilder.loadTexts: atmfM4VcTestEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestEntry.setDescription('An entry containing objects for invoking tests on a VCL or VCC termination point.')
atmfM4VcTestObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vclTp", 1), ("vccTp", 2))))
if mibBuilder.loadTexts: atmfM4VcTestObject.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestObject.setDescription('Specifies whether the test applies to the VCL termination point with the specified VPI and VCI values, or to the VCC termination point.')
atmfM4VcTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestId.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestId.setDescription("This object identifies the current invocation of the interface's test.")
atmfM4VcTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInUse", 1), ("inUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestStatus.setDescription("This object indicates whether or not some manager currently has the necessary 'ownership' required to invoke a test on this interface. A write to this object is only successful when it changes its value from 'notInUse(1)' to 'inUse(2)'. After completion of a test, the agent resets the value back to 'notInUse(1)'.")
atmfM4VcTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 4), AutonomousType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestType.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestType.setDescription('A control variable used to start and stop operator- initiated interface tests. Most OBJECT IDENTIFIER values assigned to tests are defined elsewhere, in association with specific types of interface. However, this document assigns a value for a full- duplex loopback test, and defines the special meanings of the subject identifier: noTest OBJECT IDENTIFIER ::= { 0 0 } When the value noTest is written to this object, no action is taken unless a test is in progress, in which case the test is aborted. Writing any other value to this object is only valid when no test is currently in progress, in which case the indicated test is initiated. When read, this object always returns the most recent value that atmfM4VcTestType was set to. If it has not been set since the last initialization of the network management subsystem on the agent, a value of noTest is returned.')
atmfM4VcTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcTestResult.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestResult.setDescription('This object contains the result of the most recently requested test, or the value none(1) if no tests have been requested since the last reset. Note that this facility provides no provision for saving the results of one test when starting another, as could be required if used by multiple managers concurrently.')
atmfM4VcTestCode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4VcTestCode.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestCode.setDescription('This object contains a code which contains more specific information on the test result, for example an error-code after a failed test. Error codes and other values this object may take are specific to the type of interface and/or test. The value may have the semantics of either the AutonomousType or RowPointer textual conventions as defined in RFC 1903 [15]. The identifier: testCodeUnknown OBJECT IDENTIFIER ::= { 0 0 } is defined for use if no additional result code is available.')
atmfM4VcTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 26, 1, 7), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4VcTestOwner.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestOwner.setDescription("The entity which currently has the 'ownership' required to invoke a test on this termination point.")
atmfM4EquipTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 28), )
if mibBuilder.loadTexts: atmfM4EquipTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipTable.setDescription('The ATM Forum M4 Equipment table. This table augments the physical entity table.')
atmfM4EquipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4EquipEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipEntry.setDescription('An entry in the ATM Forum M4 Equipment table. Each entry of this type represents a piece of equipment within the ATM NE that neither is nor accepts a replaceable plug- in unit.')
atmfM4EquipAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipAdminStatus.setDescription('Used by the adminstrator to lock and unlock the object.')
atmfM4EquipLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipLocation.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipLocation.setDescription('The specific or general location of the component.')
atmfM4EquipOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipOperStatus.setDescription('This attributes identifies whether or not the component is capable of performing its normal functions.')
atmfM4EquipVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipVendor.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipVendor.setDescription('The vendor of the component.')
atmfM4EquipVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipVersion.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipVersion.setDescription('The version of the component.')
atmfM4EquipUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipUserLabel.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipUserLabel.setDescription('A user-friendly name for the piece of equipment.')
atmfM4EquipAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 28, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipAlarmSeverityIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipAlarmSeverityIndex.setDescription('An index into the alarm severity profile table, specifying the severity assignments for M4 alarms reported for this component.')
atmfM4EquipHolderTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 29), )
if mibBuilder.loadTexts: atmfM4EquipHolderTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipHolderTable.setDescription('The ATM Forum M4 Equipment Holder table. This table augments the physical table.')
atmfM4EquipHolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4EquipHolderEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipHolderEntry.setDescription('An entry in the ATM Forum M4 Equipment Holder table. Each entry of this type represents a component within the ATM NE that accepts a replaceable plug-in unit.')
atmfM4EquipHolderType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rack", 1), ("shelf", 2), ("drawer", 3), ("slot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderType.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipHolderType.setDescription('The type of the component.')
atmfM4EquipHolderAcceptableTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderAcceptableTypes.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipHolderAcceptableTypes.setDescription('The types of plug-in units that can be supported by the slot, separated by newline characters. This attribute shall be present only when the Equipment Holder represents a slot.')
atmfM4EquipHolderSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("empty", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4EquipHolderSlotStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipHolderSlotStatus.setDescription('This attributes identifies whether or not a plug-in unit is present in the slot. This attribute shall be present only when the Equipment Holder represents a slot.')
atmfM4EquipHolderSwLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 29, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4EquipHolderSwLoad.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipHolderSwLoad.setDescription('An index into the installed software table, specifying the software that is to be loaded into the plug-in unit whenever an automatic reload of software is needed. This attribute shall be present only when the Equipment Holder represents a slot.')
atmfM4PlugInUnitTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 30), )
if mibBuilder.loadTexts: atmfM4PlugInUnitTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitTable.setDescription('The ATM Forum M4 Plug-In Unittable. This table augments the physical entity table.')
atmfM4PlugInUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: atmfM4PlugInUnitEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitEntry.setDescription('An entry in the ATM Forum M4 Plug-In Unit table. Each entry of this type represents a piece of equipment within the ATM NE that is inserted into and removed from an Equipment Holder.')
atmfM4PlugInUnitAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PlugInUnitAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitAdminStatus.setDescription('Used by the adminstrator to lock and unlock the object.')
atmfM4PlugInUnitAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("available", 1), ("inTest", 2), ("failed", 3), ("powerOff", 4), ("notInstalled", 5), ("offLine", 6), ("dependency", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitAvailStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitAvailStatus.setDescription('Provides further information regarding the state of the component.')
atmfM4PlugInUnitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitOperStatus.setDescription('This attributes identifies whether or not the component is capable of performing its normal functions.')
atmfM4PlugInUnitVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitVendor.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitVendor.setDescription('The vendor of the component.')
atmfM4PlugInUnitVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 5), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4PlugInUnitVersion.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitVersion.setDescription('The version of the component.')
atmfM4PlugInUnitAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 30, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4PlugInUnitAlarmSeverityIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitAlarmSeverityIndex.setDescription('An index into the alarm severity profile table, specifying the severity assignments for M4 alarms reported for this component.')
atmfM4HwRunningSwTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 32), )
if mibBuilder.loadTexts: atmfM4HwRunningSwTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwRunningSwTable.setDescription('The ATM Forum M4 Hardware Unit/Running Software relationship. This table describes the software that is running on each hardware unit in the ATM NE.')
atmfM4HwRunningSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4HwRunningSwHwIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4HwRunningSwIndex"))
if mibBuilder.loadTexts: atmfM4HwRunningSwEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwRunningSwEntry.setDescription('An entry in the ATM Forum M4 Hardware Unit/Running Software relationship table. Each entry of this type identifies an entry in the entPhysicalTable and one in the hrRunningSoftwareTable.')
atmfM4HwRunningSwHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwRunningSwHwIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwRunningSwHwIndex.setDescription('The index, in the entPhysicalTable, of the containing hardware unit in this pair.')
atmfM4HwRunningSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwRunningSwIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwRunningSwIndex.setDescription('A unique number within the context of the containing hardware unit.')
atmfM4HwRunningSwSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 32, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwRunningSwSwIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwRunningSwSwIndex.setDescription('The index, in the hrRunningSwTable, of the software product represented by this entry.')
atmfM4HwInstalledSwTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 33), )
if mibBuilder.loadTexts: atmfM4HwInstalledSwTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwInstalledSwTable.setDescription('The ATM Forum M4 Hardware Unit/Installed Software relationship. This table describes the software that is Installed on each hardware unit in the ATM NE.')
atmfM4HwInstalledSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwHwIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwIndex"))
if mibBuilder.loadTexts: atmfM4HwInstalledSwEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwInstalledSwEntry.setDescription('An entry in the ATM Forum M4 Hardware Unit/Installed Software relationship table. Each entry of this type identifies an entry in the physical entity table and one in the hrInstalledSoftwareTable.')
atmfM4HwInstalledSwHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: atmfM4HwInstalledSwHwIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwInstalledSwHwIndex.setDescription('The index, in the entPhysical table, of the containing physical entity in this pair.')
atmfM4HwInstalledSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwInstalledSwIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwInstalledSwIndex.setDescription('A unique number within the context of the containing hardware unit.')
atmfM4HwInstalledSwSwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4HwInstalledSwSwIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwInstalledSwSwIndex.setDescription('The index, in the hrInstalledSwTable, of the software product represented by this entry.')
atmfM4HwSwAlarmSeverityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4HwSwAlarmSeverityIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwSwAlarmSeverityIndex.setDescription('An index into the alarm severity profile table, specifying the severity assignments for M4 alarms reported for this piece of software installed on the hardware unit.')
class AtmfM4AlarmLogSeverity(TextualConvention, Integer32):
    description = "The value of this object identifies the severity of an alarm in the log, including 'cleared'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4))
    namedValues = NamedValues(("cleared", -1), ("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

class AtmfM4AlarmSeverity(TextualConvention, Integer32):
    description = "The value of this object identifies the severity of an alarm that has occurred. (Note that there is no value corresponding to 'cleared'.)"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("indeterminate", 0), ("critical", 1), ("major", 2), ("minor", 3), ("warning", 4))

atmfM4AlarmSevDefault = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 34), AtmfM4AlarmSeverity().clone('minor')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4AlarmSevDefault.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevDefault.setDescription("The default severity value used for new profile index/trap ID pairs that have not yet been modified. This value is also used whenever an object's alarm severity profile index is set to 0.")
atmfM4AlarmSevProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndexNext.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndexNext.setDescription('This object contains an appropriate value to be used for atmfM4AlarmSevProfileIndex when creating entries in the atmfM4AlarmSevProfileTable. The value -1 indicates that no unassigned entries are available. To obtain the index value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index (or -1).')
atmfM4AlarmSevProfileTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 36), )
if mibBuilder.loadTexts: atmfM4AlarmSevProfileTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevProfileTable.setDescription('The ATM Forum M4 alarm severity profile table. This table specifies which profiles exist. Creating or deleting an entry in this table automatically creates or deletes the corresponding entries in the atmfM4AlarmSeverityTable.')
atmfM4AlarmSevProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 36, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileIndex"))
if mibBuilder.loadTexts: atmfM4AlarmSevProfileEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevProfileEntry.setDescription('A group of severities, one for each alarm type in the communications alarm group.')
atmfM4AlarmSevProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 36, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevProfileIndex.setDescription('A number identifying this alarm severity profile.')
atmfM4AlarmSevProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 36, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4AlarmSevProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevProfileRowStatus.setDescription('This object is used to create a new row or to delete an existing row in the table.')
atmfM4AlarmSevTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 37), )
if mibBuilder.loadTexts: atmfM4AlarmSevTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevTable.setDescription('The ATM Forum M4 alarm severity table. This table associates profile index and trap ID pairs with severities to be used for M4 alarm traps that have occurred. (Note that this table does not apply to cleared alarms.)')
atmfM4AlarmSevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 37, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileIndex"), (0, "ATM-FORUM-M4-MIB", "atmfM4AlarmSevTrapId"))
if mibBuilder.loadTexts: atmfM4AlarmSevEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevEntry.setDescription("An entry in this table associates an alarm severity profile index/trap ID pair with a severity. Deleting a particular profile's row in the alarm severity profile table deletes all rows in this table with the same profile index. Conceptually, rows corresponding to all possible trap ID's are created in this table when a new alarm severity profile is created, but the agent will return a default value except for those few traps for which values have been set.")
atmfM4AlarmSevTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4AlarmSevTrapId.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevTrapId.setDescription('The ID of the trap type to which this entry applies.')
atmfM4AlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 37, 1, 2), AtmfM4AlarmSeverity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4AlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSeverity.setDescription('The severity to be used for this trap type when the is selected. If no value for this object has ever been set since the corresponding profile was created, the agent should return the value of the object atmfM4AlarmSevDefault')
atmfM4ForwardAllTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 353, 100, 1, 38))
if mibBuilder.loadTexts: atmfM4ForwardAllTraps.setStatus('current')
if mibBuilder.loadTexts: atmfM4ForwardAllTraps.setDescription('This is used as the value of the object atmfM4ForwardedTrapObject when traps from all objects are to be forwarded, or when there is only one object of the type that forwards the specified trap type.')
atmfM4TrapForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 39), )
if mibBuilder.loadTexts: atmfM4TrapForwardingTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapForwardingTable.setDescription('The ATM Forum M4 Trap forwarding discriminator table. This table specifies which traps will be sent to which management system.')
atmfM4TrapForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapForwardingIndex"))
if mibBuilder.loadTexts: atmfM4TrapForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapForwardingEntry.setDescription('Information about a group of traps to be sent to a particular IP address. A new entry must have values for all attributes that do not have default values before its RowStatus column can be set to active(1).')
atmfM4TrapForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 1), Integer32())
if mibBuilder.loadTexts: atmfM4TrapForwardingIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapForwardingIndex.setDescription('A unique number identifying the table entry.')
atmfM4TrapForwardingDest = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingDest.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapForwardingDest.setDescription('The IP address to which traps identified by this table entry should be sent.')
atmfM4ForwardedTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedTrapId.setStatus('current')
if mibBuilder.loadTexts: atmfM4ForwardedTrapId.setDescription('The ID of the trap type to which this entry applies.')
atmfM4ForwardedTrapObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 4), RowPointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedTrapObject.setStatus('current')
if mibBuilder.loadTexts: atmfM4ForwardedTrapObject.setDescription('The object to which this entry applies. By convention, this is the name of the first object in the row in the table referenced. The special value { 0 0 } indicates that traps of this type from all objects of the type that can generate it. It should also be used when traps from the ATM NE are to be specified.')
atmfM4TrapForwardingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 5), Integer32().clone(161)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingPort.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapForwardingPort.setDescription('The UDP port on the specified management system to which traps identified by this entry should be sent.')
atmfM4LowestForwardedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 6), AtmfM4AlarmSeverity().clone('minor')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4LowestForwardedSeverity.setStatus('current')
if mibBuilder.loadTexts: atmfM4LowestForwardedSeverity.setDescription('The lowest severity of traps of this type from the specified object that should be sent to this address. This object has significance only if the trap type specified has a severity associated with it')
atmfM4ForwardedIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4ForwardedIndeterminate.setStatus('current')
if mibBuilder.loadTexts: atmfM4ForwardedIndeterminate.setDescription('When this object has the value TRUE, traps with indeterminate severity will be forwarded to the specified event. This object has significance only if the trap type specified has a severity associated with it')
atmfM4TrapForwardingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 39, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapForwardingRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapForwardingRowStatus.setDescription('This object is used to create a new row or to delete an existing row in the table.')
atmfM4TrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 40), )
if mibBuilder.loadTexts: atmfM4TrapLogTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogTable.setDescription('The ATM Forum M4 Trap Agent log table. This table defines the trap logs currently maintained by the agent. The management system creates entries in this table to specify which types of traps, from which ATM network elements, should be logged. Deleting an entry in this table deletes all entries in the corresponding log.')
atmfM4TrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogType"))
if mibBuilder.loadTexts: atmfM4TrapLogEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogEntry.setDescription('Information about a single trap log.')
atmfM4TrapLogSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 1), IpAddress())
if mibBuilder.loadTexts: atmfM4TrapLogSrc.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogSrc.setDescription('The IP address of the SNMP agent whose traps are stored in this log.')
atmfM4TrapLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("objectCreated", 1), ("objectDeleted", 2), ("configChange", 3), ("stateChange", 4), ("alarm", 5))))
if mibBuilder.loadTexts: atmfM4TrapLogType.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogType.setDescription('The type of traps stored in this log.')
atmfM4TrapLogAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogAdminStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogAdminStatus.setDescription('The management system uses this object to stop and start the operations of this object.')
atmfM4TrapLogOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("logFull", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4TrapLogOperStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogOperStatus.setDescription('Indicates whether or not the log is capable of performing its normal operations.')
atmfM4TrapLogFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halt", 1), ("wrap", 2))).clone('wrap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogFullAction.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogFullAction.setDescription('Indicates the action that should be performed when no more log entries can be created due to a log-full condition. If the value of this object is wrap(2), each new log entry will cause the deletion of the oldest entry still in the log, for as long as the log is still full.')
atmfM4TrapLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 40, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfM4TrapLogRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogRowStatus.setDescription('This object is used to create a new row or to delete an existing row in the table.')
atmfM4LoggedTrapTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 41), )
if mibBuilder.loadTexts: atmfM4LoggedTrapTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapTable.setDescription('The ATM Forum M4 Trap Agent logged trap table. This table is used to maintain the traps logged.')
atmfM4LoggedTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogType"), (0, "ATM-FORUM-M4-MIB", "atmfM4LoggedTrapIndex"))
if mibBuilder.loadTexts: atmfM4LoggedTrapEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapEntry.setDescription("Information about a single trap in the log. Entries in this table are created automatically but can be deleted by the management system. Entries that represent 'alarm' log types are augmented by the atmfM4LoggedAlarmEntry table.")
atmfM4LoggedTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 1), Unsigned32())
if mibBuilder.loadTexts: atmfM4LoggedTrapIndex.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapIndex.setDescription('A unique number identifying this entry in the log. When the maximum value for this object has been reached, it will wrap around to 0.')
atmfM4LoggedTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapTime.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapTime.setDescription('The time at which this trap was logged.')
atmfM4LoggedTrapID = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapID.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapID.setDescription('The type of trap to which this entry applies. Together with the logged trap ID object, this object specifies the entity to which this logged trap referred.')
atmfM4LoggedTrapObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedTrapObject.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapObject.setDescription('The object to which this entry applies. By convention, this is the name of the first object in the row in the table referenced. Together with the logged trap ID object, this object specifies the entity to which this logged trap referred. The special value { 0 0 } indicates that the trap refers to the ATM NE entity itself.')
atmfM4LoggedTrapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 41, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfM4LoggedTrapRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapRowStatus.setDescription('This object is used to delete an existing row in the table. Note that the only value to which a management system can set this object is destroy(6).')
atmfM4LoggedAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 353, 100, 1, 42), )
if mibBuilder.loadTexts: atmfM4LoggedAlarmTable.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmTable.setDescription('The ATM Forum M4 Trap Agent logged alarm trap table. This table is used to maintain extra information for logged traps that represent alarm types.')
atmfM4LoggedAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1), ).setIndexNames((0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogSrc"), (0, "ATM-FORUM-M4-MIB", "atmfM4TrapLogType"), (0, "ATM-FORUM-M4-MIB", "atmfM4LoggedTrapIndex"))
if mibBuilder.loadTexts: atmfM4LoggedAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmEntry.setDescription('Information about the alarm-specific attributes of a single trap in the log.')
atmfM4LoggedAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 1), AtmfM4AlarmLogSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmSeverity.setDescription('The perceived severity of the alarm, as specified by the agent that generated it.')
atmfM4LoggedAlarmBackedUp = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmBackedUp.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmBackedUp.setDescription('If the value of this object is true, the agent reported in this trap that the failed object had been backed up. This object is only present if it was included in the alarm trap corresponding to this log entry.')
atmfM4LoggedAlarmBUObject = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmBUObject.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmBUObject.setDescription('Indicates the object that provided back-up services to the failed object. This object is only present if it was included in the alarm trap corresponding to this log entry.')
atmfM4LoggedAlarmSpecificProb = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmSpecificProb.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmSpecificProb.setDescription('Indicates further refinements to the problem identified by the alarm type. If more than one specific problem is described in this object, the problem descriptions are separated by newline characters. This object is only present if it was included in the alarm trap corresponding to this log entry.')
atmfM4LoggedAlarmRepairAct = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 100, 1, 42, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfM4LoggedAlarmRepairAct.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmRepairAct.setDescription('Indicates proposed repair actions reported by the agent for the the problem identified by the alarm. If more than one action is described in this object, the problem descriptions are separated by newline characters. This object is only present if it was included in the alarm trap corresponding to this log entry.')
atmfM4TrapAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 43), AtmfM4AlarmLogSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapAlarmSeverity.setDescription('The perceived severity of the alarm, as specified by the agent that generated it.')
atmfM4TrapAlarmBackedUp = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 44), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmBackedUp.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapAlarmBackedUp.setDescription('If the value of this object is true, the failed object has been backed up.')
atmfM4TrapAlarmBUObject = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 45), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmBUObject.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapAlarmBUObject.setDescription('Indicates the object that provided back-up services to the failed object.')
atmfM4TrapAlarmSpecificProb = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 46), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmSpecificProb.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapAlarmSpecificProb.setDescription('Indicates further refinements to the problem identified by the alarm type. If more than one specific problem is described in this object, the problem descriptions are separated by newline characters.')
atmfM4TrapAlarmRepairAct = MibScalar((1, 3, 6, 1, 4, 1, 353, 100, 1, 47), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atmfM4TrapAlarmRepairAct.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapAlarmRepairAct.setDescription('Indicates proposed repair actions reported by the agent for the the problem identified by the alarm. If more than one action is described in this object, the problem descriptions are separated by newline characters.')
atmfM4IfAisAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 1)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfAisAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfAisAlarm.setDescription('Indicates that an AIS alarm condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfLcdAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 2)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLcdAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfLcdAlarm.setDescription('Indicates that an LCD (Loss of Cell Delineation) condition has occurred on the TC Adatpr associated with the specified interface.')
atmfM4IfLofAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 3)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLofAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfLofAlarm.setDescription('Indicates that an LOF (Loss of Frame) condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfLopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 4)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLopAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfLopAlarm.setDescription('Indicates that an LOP (Loss of Pointer) condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfLosAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 5)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfLosAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfLosAlarm.setDescription('Indicates that an LOS (Loss of Signal) condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfPayloadMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 6)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfPayloadMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfPayloadMismatchAlarm.setDescription('Indicates that a payload type mismatch condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfXmissionErrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 7)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfXmissionErrAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfXmissionErrAlarm.setDescription('Indicates that an transmission error condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfPathTraceMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 8)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfPathTraceMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfPathTraceMismatchAlarm.setDescription('Indicates that path trace mismatch condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfRdiAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 9)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfRdiAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfRdiAlarm.setDescription('Indicates that an RDI (Remote Defect Indication) condition has occurred on the physical path TP associated with the specified interface.')
atmfM4IfSignalLabelMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 10)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4IfSignalLabelMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfSignalLabelMismatchAlarm.setDescription('Indicates that a signal label mismatch has occurred on the physical path TP associated with the specified interface.')
atmfM4HwLineCardAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 23)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwLineCardAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwLineCardAlarm.setDescription('Indicates that a line-card problem condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 25)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPowerAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwPowerAlarm.setDescription('Indicates that a power problem alarm condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwPIUnitMissingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 29)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitMissingAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwPIUnitMissingAlarm.setDescription('Indicates that a plug-in unit missing condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwPIUnitProbAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 30)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitProbAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwPIUnitProbAlarm.setDescription('Indicates that a plug-in unit problem condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwPIUnitMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 31)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwPIUnitMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwPIUnitMismatchAlarm.setDescription('Indicates that a plug-in unit type mismatch condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwTimingProbAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 32)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwTimingProbAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwTimingProbAlarm.setDescription('Indicates that a timing problem alarm condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwSwDownloadFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 39)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwSwDownloadFailAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwSwDownloadFailAlarm.setDescription('Indicates that a software download failure has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwVersionMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 40)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwVersionMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwVersionMismatchAlarm.setDescription('Indicates that a version mismatch condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwFanFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 41)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwFanFailAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwFanFailAlarm.setDescription('Indicates that a cooling fan failure condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwHighTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 44)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwHighTempAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwHighTempAlarm.setDescription('Indicates that a high temperature condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4SwVersionMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 45)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4SwVersionMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: atmfM4SwVersionMismatchAlarm.setDescription('Indicates that a version mismatch condition has occurred on the hardware unit associated with the specified index. A hardware index of 0 indicates that the error occurred in the ATM NE but not in any one hardware unit maintained in the MIB table.')
atmfM4HwUnitUp = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 54)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitUp.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwUnitUp.setDescription("Indicates that the operational state of the specified hardware unit has transitioned to 'up'.")
atmfM4HwUnitDown = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 55)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitDown.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwUnitDown.setDescription("Indicates that the operational state of the specified hardware unit has transitioned to 'down'.")
atmfM4AtmCellIfCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 56)).setObjects(("IF-MIB", "ifIndex"), ("ATM-FORUM-M4-MIB", "atmfM4IfType"))
if mibBuilder.loadTexts: atmfM4AtmCellIfCreated.setStatus('current')
if mibBuilder.loadTexts: atmfM4AtmCellIfCreated.setDescription('Indicates that an ATM cell layer interface has just been created on the interface.')
atmfM4AtmCellIfDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 57)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4AtmCellIfDeleted.setStatus('current')
if mibBuilder.loadTexts: atmfM4AtmCellIfDeleted.setDescription('Indicates that the ATM cell layer interface has just been deleted.')
atmfM4HwUnitCreated = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 66)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitCreated.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwUnitCreated.setDescription('Indicates that the specified hardware unit has been installed at the specified location.')
atmfM4HwUnitDeleted = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 67)).setObjects(("ENTITY-MIB", "entPhysicalContainedIn"), ("ENTITY-MIB", "entPhysicalParentRelPos"), ("ENTITY-MIB", "entPhysicalClass"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: atmfM4HwUnitDeleted.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwUnitDeleted.setDescription('Indicates that the specified hardware unit has been removed or de-instaleld from the specified location.')
atmfM4IfChanged = NotificationType((1, 3, 6, 1, 4, 1, 353, 100, 2, 70)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmfM4IfChanged.setStatus('current')
if mibBuilder.loadTexts: atmfM4IfChanged.setDescription('Indicates that the configuration of the interface has been changed.')
atmfM4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 3, 1))
atmfM4Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 100, 3, 2))
atmfM4Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 100, 3, 2, 1)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4General"), ("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TcAdaptorGroup"), ("ATM-FORUM-M4-MIB", "atmfM4AtmLayerGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VplGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VclGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpXConnGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcXConnGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpNextVpiGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcNextVciGroup"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestGroup"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestGroup"), ("ATM-FORUM-M4-MIB", "atmfM4EquipGroup"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderGroup"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitGroup"), ("ATM-FORUM-M4-MIB", "atmfM4HwRunningSwGroup"), ("ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwGroup"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSevGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingGroup"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogGroup"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapGroup"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4Compliance = atmfM4Compliance.setStatus('current')
if mibBuilder.loadTexts: atmfM4Compliance.setDescription('The compliance statements are listed as a set up conformance units that correspond to each table. Support for all tables is mandatory.')
atmfM4General = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 1)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4NeVendor"), ("ATM-FORUM-M4-MIB", "atmfM4NeVersion"), ("ATM-FORUM-M4-MIB", "atmfM4NeStartTime"), ("ATM-FORUM-M4-MIB", "atmfM4NeAlarmSeverityIndex"), ("ATM-FORUM-M4-MIB", "atmfM4NeSuppressZeroStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4General = atmfM4General.setStatus('current')
if mibBuilder.loadTexts: atmfM4General.setDescription('NE high level objects')
atmfM4PhysPathTpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 2)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpHwUnitIndex"), ("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpPortID"), ("ATM-FORUM-M4-MIB", "atmfM4PhysPathTpAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4PhysPathTpGroup = atmfM4PhysPathTpGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4PhysPathTpGroup.setDescription('The ATM Forum M4 interface Configuration table extensions for the physical path termination point')
atmfM4TcAdaptorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 3)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TcACellScrambling"), ("ATM-FORUM-M4-MIB", "atmfM4TcAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcAdaptorGroup = atmfM4TcAdaptorGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcAdaptorGroup.setDescription('The ATM Forum M4 interface Configuration table extensions for the TC Adaptor.')
atmfM4AtmLayerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 4)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4IfType"), ("ATM-FORUM-M4-MIB", "atmfM4IfLoopbackLocationCode"), ("ATM-FORUM-M4-MIB", "atmfM4IfSubscriberAddress"), ("ATM-FORUM-M4-MIB", "atmfM4IfPreferredCarrier"), ("ATM-FORUM-M4-MIB", "atmfM4IfFarEndCarrierNetwork"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4AtmLayerGroup = atmfM4AtmLayerGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4AtmLayerGroup.setDescription('The ATM Forum M4 interface Configuration table extensions for the ATM cell layer.')
atmfM4VplGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 5)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VplSegEndPt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VplGroup = atmfM4VplGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VplGroup.setDescription('The ATM Forum M4 VPL Termination Point Configuration table extensions. ')
atmfM4VclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 6)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VclSegEndPt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VclGroup = atmfM4VclGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VclGroup.setDescription('The ATM Forum M4 VCL Termination Point Configuration table extensions.')
atmfM4VpXConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 7)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpXConnRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpXConnGroup = atmfM4VpXConnGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpXConnGroup.setDescription('The ATM Forum M4 VP Cross-Connect Configuration table extensions.')
atmfM4VcXConnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 8)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcXConnRecover"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcXConnGroup = atmfM4VcXConnGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcXConnGroup.setDescription('The ATM Forum M4 VC Cross-Connect Configuration table extensions.')
atmfM4VpNextVpiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 9)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpNextVpiValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpNextVpiGroup = atmfM4VpNextVpiGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpNextVpiGroup.setDescription('The ATM Forum M4 VP Next-VPI value table.')
atmfM4VcNextVciGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 10)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcNextVciValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcNextVciGroup = atmfM4VcNextVciGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcNextVciGroup.setDescription('The ATM Forum M4 VC Next-VCI value table.')
atmfM4CellProtoCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 11)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrProtoErrors"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoCurrInOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoCurrGroup = atmfM4CellProtoCurrGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoCurrGroup.setDescription('The ATM Forum M4 Cell Protocol Monitoring Current Data table.')
atmfM4CellProtoHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 12)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistProtoErrors"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoHistInOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoHistGroup = atmfM4CellProtoHistGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoHistGroup.setDescription('The ATM Forum M4 Cell Protocol Monitoring History Data table.')
atmfM4CellProtoErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 13)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorTime"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorReason"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorVpi"), ("ATM-FORUM-M4-MIB", "atmfM4CellProtoErrorVci"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4CellProtoErrorGroup = atmfM4CellProtoErrorGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4CellProtoErrorGroup.setDescription('The ATM Forum M4 Cell Protocol Monitoring Error Log table.')
atmfM4TcProtoCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 14)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoCurrDiscardHECViol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcProtoCurrGroup = atmfM4TcProtoCurrGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoCurrGroup.setDescription('The ATM Forum M4 TC Adaptor Protocol Monitoring Current Data table.')
atmfM4TcProtoHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 15)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4TcProtoHistDiscardHECViol"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TcProtoHistGroup = atmfM4TcProtoHistGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4TcProtoHistGroup.setDescription('The ATM Forum M4 TC Adaptor Protocol Monitoring History Data table.')
atmfM4VpUpcNpcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 16)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcCurrPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpUpcNpcCurrGroup = atmfM4VpUpcNpcCurrGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcCurrGroup.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring Current Data table for VPL termination points.')
atmfM4VpUpcNpcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 17)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VpUpcNpcHistPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpUpcNpcHistGroup = atmfM4VpUpcNpcHistGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpUpcNpcHistGroup.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring History Data table for VPL termination points.')
atmfM4VcUpcNpcCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 18)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcCurrPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcUpcNpcCurrGroup = atmfM4VcUpcNpcCurrGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcCurrGroup.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring Current Data table for VCL termination points')
atmfM4VcUpcNpcHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 19)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistSuspect"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistElapsedTime"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistSupprIntvls"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistDiscardedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistDiscardedClp0"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistPassedCells"), ("ATM-FORUM-M4-MIB", "atmfM4VcUpcNpcHistPassedClp0"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcUpcNpcHistGroup = atmfM4VcUpcNpcHistGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcUpcNpcHistGroup.setDescription('The ATM Forum M4 UPC/NPC Disagreement Monitoring History Data table for VCL termination points.')
atmfM4VpTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 20)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VpTestId"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestStatus"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestType"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestResult"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestCode"), ("ATM-FORUM-M4-MIB", "atmfM4VpTestOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VpTestGroup = atmfM4VpTestGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VpTestGroup.setDescription('The ATM Forum M4 VP Termination Point Test table.')
atmfM4VcTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 21)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4VcTestId"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestStatus"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestType"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestResult"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestCode"), ("ATM-FORUM-M4-MIB", "atmfM4VcTestOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4VcTestGroup = atmfM4VcTestGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4VcTestGroup.setDescription('The ATM Forum M4 VC Termination Point Test table.')
atmfM4EquipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 22)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4EquipAdminStatus"), ("ATM-FORUM-M4-MIB", "atmfM4EquipLocation"), ("ATM-FORUM-M4-MIB", "atmfM4EquipOperStatus"), ("ATM-FORUM-M4-MIB", "atmfM4EquipVendor"), ("ATM-FORUM-M4-MIB", "atmfM4EquipVersion"), ("ATM-FORUM-M4-MIB", "atmfM4EquipUserLabel"), ("ATM-FORUM-M4-MIB", "atmfM4EquipAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4EquipGroup = atmfM4EquipGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipGroup.setDescription('The ATM Forum M4 Equipment table.')
atmfM4EquipHolderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 23)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4EquipHolderType"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderAcceptableTypes"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderSlotStatus"), ("ATM-FORUM-M4-MIB", "atmfM4EquipHolderSwLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4EquipHolderGroup = atmfM4EquipHolderGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4EquipHolderGroup.setDescription('The ATM Forum M4 Equipment Holder table.')
atmfM4PlugInUnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 24)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAdminStatus"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAvailStatus"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitOperStatus"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitVendor"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitVersion"), ("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4PlugInUnitGroup = atmfM4PlugInUnitGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4PlugInUnitGroup.setDescription('The ATM Forum M4 Plug-In Unit table.')
atmfM4HwRunningSwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 25)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4HwRunningSwSwIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4HwRunningSwGroup = atmfM4HwRunningSwGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwRunningSwGroup.setDescription('The ATM Forum M4 Hardware Unit/Running Software table.')
atmfM4HwInstalledSwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 26)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4HwInstalledSwSwIndex"), ("ATM-FORUM-M4-MIB", "atmfM4HwSwAlarmSeverityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4HwInstalledSwGroup = atmfM4HwInstalledSwGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4HwInstalledSwGroup.setDescription('The ATM Forum M4 Hardware Unit/Installed Software table')
atmfM4AlarmSevGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 27)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileRowStatus"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSevDefault"), ("ATM-FORUM-M4-MIB", "atmfM4AlarmSevProfileIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4AlarmSevGroup = atmfM4AlarmSevGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4AlarmSevGroup.setDescription('Alarm handling objects')
atmfM4TrapForwardingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 28)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingDest"), ("ATM-FORUM-M4-MIB", "atmfM4ForwardedTrapId"), ("ATM-FORUM-M4-MIB", "atmfM4ForwardedTrapObject"), ("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingPort"), ("ATM-FORUM-M4-MIB", "atmfM4LowestForwardedSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4ForwardedIndeterminate"), ("ATM-FORUM-M4-MIB", "atmfM4TrapForwardingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TrapForwardingGroup = atmfM4TrapForwardingGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapForwardingGroup.setDescription('Trap forwarding table')
atmfM4TrapLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 29)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4TrapLogAdminStatus"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogOperStatus"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogFullAction"), ("ATM-FORUM-M4-MIB", "atmfM4TrapLogRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4TrapLogGroup = atmfM4TrapLogGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4TrapLogGroup.setDescription('The ATM Forum M4 Trap Agent log table.')
atmfM4LoggedTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 30)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapTime"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapID"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapObject"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedTrapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4LoggedTrapGroup = atmfM4LoggedTrapGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedTrapGroup.setDescription('The ATM Forum M4 Trap Agent logged trap table.')
atmfM4LoggedAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 100, 3, 1, 31)).setObjects(("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmBackedUp"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmBUObject"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmSpecificProb"), ("ATM-FORUM-M4-MIB", "atmfM4LoggedAlarmRepairAct"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmBackedUp"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmBUObject"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSpecificProb"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmRepairAct"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfM4LoggedAlarmGroup = atmfM4LoggedAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: atmfM4LoggedAlarmGroup.setDescription('The ATM Forum M4 Trap Agent logged alarm trap table.')
mibBuilder.exportSymbols("ATM-FORUM-M4-MIB", atmfM4TcProtoHistDiscardHECViol=atmfM4TcProtoHistDiscardHECViol, atmfM4VpTestTable=atmfM4VpTestTable, atmfM4VpTestType=atmfM4VpTestType, atmfM4VpXConnRecover=atmfM4VpXConnRecover, atmfM4TrapLogType=atmfM4TrapLogType, atmfM4LoggedTrapRowStatus=atmfM4LoggedTrapRowStatus, atmfM4IfLcdAlarm=atmfM4IfLcdAlarm, atmfM4VcXConnTable=atmfM4VcXConnTable, atmfM4ForwardedTrapObject=atmfM4ForwardedTrapObject, atmfM4CellProtoErrorVpi=atmfM4CellProtoErrorVpi, atmfM4HwInstalledSwTable=atmfM4HwInstalledSwTable, atmfM4TcProtoCurrElapsedTime=atmfM4TcProtoCurrElapsedTime, atmfM4VcTestId=atmfM4VcTestId, atmfM4AlarmSevProfileIndexNext=atmfM4AlarmSevProfileIndexNext, atmfM4TrapAlarmBackedUp=atmfM4TrapAlarmBackedUp, atmfM4Compliances=atmfM4Compliances, atmfM4TcProtoCurrSuspect=atmfM4TcProtoCurrSuspect, atmfM4VcUpcNpcCurrPassedClp0=atmfM4VcUpcNpcCurrPassedClp0, atmfM4VcUpcNpcCurrSuspect=atmfM4VcUpcNpcCurrSuspect, atmfM4TcAdaptorEntry=atmfM4TcAdaptorEntry, atmfM4LoggedTrapID=atmfM4LoggedTrapID, atmfM4HwTimingProbAlarm=atmfM4HwTimingProbAlarm, atmfM4VcUpcNpcCurrGroup=atmfM4VcUpcNpcCurrGroup, atmfM4IfPayloadMismatchAlarm=atmfM4IfPayloadMismatchAlarm, atmfM4VpTestEntry=atmfM4VpTestEntry, atmfM4IfFarEndCarrierNetwork=atmfM4IfFarEndCarrierNetwork, atmfM4VpNextVpiEntry=atmfM4VpNextVpiEntry, atmfM4PlugInUnitAdminStatus=atmfM4PlugInUnitAdminStatus, atmfM4TrapForwardingEntry=atmfM4TrapForwardingEntry, atmfM4CellProtoHistGroup=atmfM4CellProtoHistGroup, atmfM4PlugInUnitVendor=atmfM4PlugInUnitVendor, atmfM4VcUpcNpcHistDiscardedClp0=atmfM4VcUpcNpcHistDiscardedClp0, atmfM4ForwardAllTraps=atmfM4ForwardAllTraps, atmfM4NeSuppressZeroStats=atmfM4NeSuppressZeroStats, atmfM4VpTestOwner=atmfM4VpTestOwner, atmfM4LoggedAlarmSpecificProb=atmfM4LoggedAlarmSpecificProb, atmfM4VpUpcNpcCurrDiscardedCells=atmfM4VpUpcNpcCurrDiscardedCells, atmfM4CellProtoHistSuspect=atmfM4CellProtoHistSuspect, atmfM4LoggedAlarmRepairAct=atmfM4LoggedAlarmRepairAct, atmfM4CellProtoErrorEntry=atmfM4CellProtoErrorEntry, atmfM4VpUpcNpcHistDiscardedCells=atmfM4VpUpcNpcHistDiscardedCells, atmfM4PhysPathTpEntry=atmfM4PhysPathTpEntry, atmfM4IfLosAlarm=atmfM4IfLosAlarm, atmfM4EquipVendor=atmfM4EquipVendor, atmfM4VpUpcNpcHistSuspect=atmfM4VpUpcNpcHistSuspect, atmfM4MIBCompliance=atmfM4MIBCompliance, atmfM4VcXConnGroup=atmfM4VcXConnGroup, atmfM4HwPIUnitMissingAlarm=atmfM4HwPIUnitMissingAlarm, atmfM4AlarmSevGroup=atmfM4AlarmSevGroup, atmfM4SwVersionMismatchAlarm=atmfM4SwVersionMismatchAlarm, atmfM4VpTestResult=atmfM4VpTestResult, atmfM4VcTestObject=atmfM4VcTestObject, atmfM4PlugInUnitAlarmSeverityIndex=atmfM4PlugInUnitAlarmSeverityIndex, atmfM4HwInstalledSwGroup=atmfM4HwInstalledSwGroup, atmfM4VpXConnEntry=atmfM4VpXConnEntry, atmfM4MIBTraps=atmfM4MIBTraps, atmfM4HwRunningSwTable=atmfM4HwRunningSwTable, atmfM4LowestForwardedSeverity=atmfM4LowestForwardedSeverity, atmfM4VcNextVciValue=atmfM4VcNextVciValue, atmfM4TcProtoHistSuspect=atmfM4TcProtoHistSuspect, atmfM4EquipUserLabel=atmfM4EquipUserLabel, atmfM4PlugInUnitGroup=atmfM4PlugInUnitGroup, atmfM4HwRunningSwGroup=atmfM4HwRunningSwGroup, atmfM4EquipTable=atmfM4EquipTable, atmfM4EquipHolderEntry=atmfM4EquipHolderEntry, atmfM4CellProtoHistIndex=atmfM4CellProtoHistIndex, atmfM4VcTestEntry=atmfM4VcTestEntry, atmfM4VclEntry=atmfM4VclEntry, atmfM4AlarmSevProfileIndex=atmfM4AlarmSevProfileIndex, atmfM4MIB=atmfM4MIB, atmfM4PlugInUnitOperStatus=atmfM4PlugInUnitOperStatus, atmfM4HwPowerAlarm=atmfM4HwPowerAlarm, atmfM4VpTestId=atmfM4VpTestId, atmfM4TrapLogGroup=atmfM4TrapLogGroup, atmfM4CellProtoCurrSuspect=atmfM4CellProtoCurrSuspect, atmfM4VplTable=atmfM4VplTable, atmfM4VplSegEndPt=atmfM4VplSegEndPt, atmfM4VcUpcNpcHistElapsedTime=atmfM4VcUpcNpcHistElapsedTime, atmfM4PlugInUnitVersion=atmfM4PlugInUnitVersion, atmfM4TrapLogEntry=atmfM4TrapLogEntry, atmfM4TrapAlarmBUObject=atmfM4TrapAlarmBUObject, atmfM4VpNextVpiTable=atmfM4VpNextVpiTable, atmfM4TrapForwardingRowStatus=atmfM4TrapForwardingRowStatus, atmfM4TcProtoCurrGroup=atmfM4TcProtoCurrGroup, atmfM4AlarmSevProfileEntry=atmfM4AlarmSevProfileEntry, atmfM4LoggedTrapEntry=atmfM4LoggedTrapEntry, atmfM4HwUnitUp=atmfM4HwUnitUp, atmfM4VpUpcNpcCurrEntry=atmfM4VpUpcNpcCurrEntry, atmfM4IfPathTraceMismatchAlarm=atmfM4IfPathTraceMismatchAlarm, atmfM4NeStartTime=atmfM4NeStartTime, atmfM4VpUpcNpcCurrPassedClp0=atmfM4VpUpcNpcCurrPassedClp0, atmfM4IfSignalLabelMismatchAlarm=atmfM4IfSignalLabelMismatchAlarm, atmfM4AtmCellIfDeleted=atmfM4AtmCellIfDeleted, atmfM4VcUpcNpcCurrPassedCells=atmfM4VcUpcNpcCurrPassedCells, atmfM4VcUpcNpcHistSupprIntvls=atmfM4VcUpcNpcHistSupprIntvls, atmfM4EquipHolderTable=atmfM4EquipHolderTable, atmfM4PlugInUnitAvailStatus=atmfM4PlugInUnitAvailStatus, atmfM4HwUnitCreated=atmfM4HwUnitCreated, atmfM4VplGroup=atmfM4VplGroup, AtmfM4AlarmLogSeverity=AtmfM4AlarmLogSeverity, atmfM4AlarmSevDefault=atmfM4AlarmSevDefault, atmfM4VcUpcNpcHistGroup=atmfM4VcUpcNpcHistGroup, atmfM4VpUpcNpcCurrSuspect=atmfM4VpUpcNpcCurrSuspect, atmfM4TestOAMLoopbackSeg=atmfM4TestOAMLoopbackSeg, atmfM4PhysPathTpGroup=atmfM4PhysPathTpGroup, atmfM4HwPIUnitMismatchAlarm=atmfM4HwPIUnitMismatchAlarm, atmfM4EquipHolderAcceptableTypes=atmfM4EquipHolderAcceptableTypes, atmfM4IfPreferredCarrier=atmfM4IfPreferredCarrier, atmfM4VclTable=atmfM4VclTable, atmfM4LoggedTrapTime=atmfM4LoggedTrapTime, atmfM4VcUpcNpcHistEntry=atmfM4VcUpcNpcHistEntry, atmfM4HwRunningSwHwIndex=atmfM4HwRunningSwHwIndex, atmfM4VpTestCode=atmfM4VpTestCode, atmfM4TrapLogSrc=atmfM4TrapLogSrc, atmfM4AtmCellIfCreated=atmfM4AtmCellIfCreated, atmfM4LoggedTrapGroup=atmfM4LoggedTrapGroup, PYSNMP_MODULE_ID=atmfM4MIB, atmfM4IfLoopbackLocationCode=atmfM4IfLoopbackLocationCode, atmfM4VpTestObject=atmfM4VpTestObject, atmfM4VcTestCode=atmfM4VcTestCode, atmfM4HwRunningSwIndex=atmfM4HwRunningSwIndex, atmfM4TcAdaptorGroup=atmfM4TcAdaptorGroup, atmfM4LoggedAlarmBackedUp=atmfM4LoggedAlarmBackedUp, atmfM4VclGroup=atmfM4VclGroup, atmfM4TrapLogTable=atmfM4TrapLogTable, atmfM4VcXConnEntry=atmfM4VcXConnEntry, atmfM4LoggedTrapTable=atmfM4LoggedTrapTable, atmfM4IfAisAlarm=atmfM4IfAisAlarm, atmfM4CellProtoCurrGroup=atmfM4CellProtoCurrGroup, atmfM4EquipHolderType=atmfM4EquipHolderType, atmfM4EquipOperStatus=atmfM4EquipOperStatus, atmfM4TrapForwardingDest=atmfM4TrapForwardingDest, atmfM4IfLopAlarm=atmfM4IfLopAlarm, atmfM4CellProtoHistInOAMCells=atmfM4CellProtoHistInOAMCells, atmfM4HwPIUnitProbAlarm=atmfM4HwPIUnitProbAlarm, atmfM4TcProtoHistEntry=atmfM4TcProtoHistEntry, atmfM4VpUpcNpcHistTable=atmfM4VpUpcNpcHistTable, atmfM4EquipAlarmSeverityIndex=atmfM4EquipAlarmSeverityIndex, atmfM4VpTestGroup=atmfM4VpTestGroup, atmfM4EquipHolderGroup=atmfM4EquipHolderGroup, atmfM4VpUpcNpcCurrSupprIntvls=atmfM4VpUpcNpcCurrSupprIntvls, atmfM4TrapForwardingPort=atmfM4TrapForwardingPort, atmfM4AlarmSevProfileTable=atmfM4AlarmSevProfileTable, atmfM4VcTestType=atmfM4VcTestType, atmfM4AlarmSeverity=atmfM4AlarmSeverity, atmfM4CellProtoCurrSupprIntvls=atmfM4CellProtoCurrSupprIntvls, atmfM4VcUpcNpcCurrEntry=atmfM4VcUpcNpcCurrEntry, atmfM4TcProtoHistGroup=atmfM4TcProtoHistGroup, atmfM4VcUpcNpcHistPassedClp0=atmfM4VcUpcNpcHistPassedClp0, atmfM4AlarmSevTrapId=atmfM4AlarmSevTrapId, atmfM4TrapLogRowStatus=atmfM4TrapLogRowStatus, atmfM4TestOAMLoopbackE2E=atmfM4TestOAMLoopbackE2E, atmfM4TcProtoCurrSupprIntvls=atmfM4TcProtoCurrSupprIntvls, atmfM4VpTestStatus=atmfM4VpTestStatus, atmfM4CellProtoErrorGroup=atmfM4CellProtoErrorGroup, atmfM4VpXConnTable=atmfM4VpXConnTable, atmfM4VcTestGroup=atmfM4VcTestGroup, atmfM4CellProtoErrorTime=atmfM4CellProtoErrorTime, atmfM4PhysPathTpHwUnitIndex=atmfM4PhysPathTpHwUnitIndex, atmfM4LoggedAlarmSeverity=atmfM4LoggedAlarmSeverity, atmfM4CellProtoHistSupprIntvls=atmfM4CellProtoHistSupprIntvls, atmfM4PlugInUnitEntry=atmfM4PlugInUnitEntry, atmfM4HwInstalledSwHwIndex=atmfM4HwInstalledSwHwIndex, atmfM4TrapLogOperStatus=atmfM4TrapLogOperStatus, atmfM4VpUpcNpcHistGroup=atmfM4VpUpcNpcHistGroup, atmfM4CellProtoHistProtoErrors=atmfM4CellProtoHistProtoErrors, atmfM4VpUpcNpcHistDiscardedClp0=atmfM4VpUpcNpcHistDiscardedClp0, atmfM4AlarmSevTable=atmfM4AlarmSevTable, atmfM4VcNextVciTable=atmfM4VcNextVciTable, atmfM4TcAlarmSeverityIndex=atmfM4TcAlarmSeverityIndex, atmfM4CellProtoCurrProtoErrors=atmfM4CellProtoCurrProtoErrors, atmfM4AlarmSevProfileRowStatus=atmfM4AlarmSevProfileRowStatus, atmfM4CellProtoCurrElapsedTime=atmfM4CellProtoCurrElapsedTime, atmfM4VcUpcNpcHistIndex=atmfM4VcUpcNpcHistIndex, atmfM4TrapAlarmRepairAct=atmfM4TrapAlarmRepairAct, atmfM4AtmLayerTable=atmfM4AtmLayerTable, atmfM4VcXConnRecover=atmfM4VcXConnRecover, atmfM4EquipVersion=atmfM4EquipVersion, atmfM4IfXmissionErrAlarm=atmfM4IfXmissionErrAlarm, atmfM4HwUnitDown=atmfM4HwUnitDown, atmfM4PhysPathTpPortID=atmfM4PhysPathTpPortID, atmfM4VcUpcNpcHistSuspect=atmfM4VcUpcNpcHistSuspect, AtmfM4AlarmSeverity=AtmfM4AlarmSeverity, atmfM4General=atmfM4General, atmfM4NeAlarmSeverityIndex=atmfM4NeAlarmSeverityIndex, atmfM4VcUpcNpcCurrElapsedTime=atmfM4VcUpcNpcCurrElapsedTime, atmfM4VpUpcNpcHistElapsedTime=atmfM4VpUpcNpcHistElapsedTime, atmfM4TrapLogAdminStatus=atmfM4TrapLogAdminStatus, atmfM4TcACellScrambling=atmfM4TcACellScrambling, atmfM4VpUpcNpcCurrDiscardedClp0=atmfM4VpUpcNpcCurrDiscardedClp0, atmfM4VcUpcNpcHistTable=atmfM4VcUpcNpcHistTable, atmfM4HwSwDownloadFailAlarm=atmfM4HwSwDownloadFailAlarm, atmfM4EquipHolderSwLoad=atmfM4EquipHolderSwLoad, atmfM4VpUpcNpcHistIndex=atmfM4VpUpcNpcHistIndex, atmfM4TestTypes=atmfM4TestTypes, atmfM4CellProtoCurrInOAMCells=atmfM4CellProtoCurrInOAMCells, atmfM4VpUpcNpcHistEntry=atmfM4VpUpcNpcHistEntry, atmfM4VcTestOwner=atmfM4VcTestOwner, atmfM4VpUpcNpcHistSupprIntvls=atmfM4VpUpcNpcHistSupprIntvls, atmfM4PlugInUnitTable=atmfM4PlugInUnitTable, atmfM4TcProtoCurrTable=atmfM4TcProtoCurrTable, atmfM4TrapForwardingTable=atmfM4TrapForwardingTable, atmfM4VpUpcNpcHistPassedClp0=atmfM4VpUpcNpcHistPassedClp0, atmfM4LoggedTrapObject=atmfM4LoggedTrapObject, atmfM4VpXConnGroup=atmfM4VpXConnGroup, atmfM4HwHighTempAlarm=atmfM4HwHighTempAlarm, atmfM4HwInstalledSwIndex=atmfM4HwInstalledSwIndex, atmfM4IfRdiAlarm=atmfM4IfRdiAlarm, atmfM4LoggedAlarmGroup=atmfM4LoggedAlarmGroup, atmfM4TrapAlarmSeverity=atmfM4TrapAlarmSeverity, atmfM4IfChanged=atmfM4IfChanged, atmfM4VcUpcNpcHistPassedCells=atmfM4VcUpcNpcHistPassedCells, atmfM4TrapForwardingIndex=atmfM4TrapForwardingIndex, atmfM4AlarmSevEntry=atmfM4AlarmSevEntry, atmfM4TcAdaptorTable=atmfM4TcAdaptorTable, atmfM4VpUpcNpcCurrGroup=atmfM4VpUpcNpcCurrGroup, atmfM4TcProtoCurrEntry=atmfM4TcProtoCurrEntry, atmfM4CellProtoErrorReason=atmfM4CellProtoErrorReason, atmfM4VpUpcNpcCurrTable=atmfM4VpUpcNpcCurrTable, atmfM4LoggedAlarmBUObject=atmfM4LoggedAlarmBUObject, atmfM4HwUnitDeleted=atmfM4HwUnitDeleted, atmfM4EquipHolderSlotStatus=atmfM4EquipHolderSlotStatus, atmfM4EquipEntry=atmfM4EquipEntry, atmfM4CellProtoCurrEntry=atmfM4CellProtoCurrEntry, atmfM4TcProtoCurrDiscardHECViol=atmfM4TcProtoCurrDiscardHECViol, atmfM4VpNextVpiValue=atmfM4VpNextVpiValue, atmfM4LoggedAlarmTable=atmfM4LoggedAlarmTable, atmfM4Groups=atmfM4Groups, atmfM4ForwardedIndeterminate=atmfM4ForwardedIndeterminate, atmfM4EquipAdminStatus=atmfM4EquipAdminStatus, atmfM4PhysPathTpTable=atmfM4PhysPathTpTable, atmfM4TcProtoHistElapsedTime=atmfM4TcProtoHistElapsedTime, atmfM4TrapAlarmSpecificProb=atmfM4TrapAlarmSpecificProb, atmfM4MIBObjects=atmfM4MIBObjects, atmfM4TcProtoHistSupprIntvls=atmfM4TcProtoHistSupprIntvls, atmfM4CellProtoErrorTable=atmfM4CellProtoErrorTable, atmfM4VcUpcNpcHistDiscardedCells=atmfM4VcUpcNpcHistDiscardedCells, atmfM4TrapForwardingGroup=atmfM4TrapForwardingGroup, atmfM4CellProtoHistEntry=atmfM4CellProtoHistEntry, atmfM4VpNextVpiGroup=atmfM4VpNextVpiGroup, atmfM4LoggedTrapIndex=atmfM4LoggedTrapIndex, atmfM4CellProtoErrorVci=atmfM4CellProtoErrorVci, atmfM4IfType=atmfM4IfType, atmfM4PhysPathTpAlarmSeverityIndex=atmfM4PhysPathTpAlarmSeverityIndex, atmfM4VcUpcNpcCurrDiscardedCells=atmfM4VcUpcNpcCurrDiscardedCells, atmfM4CellProtoCurrTable=atmfM4CellProtoCurrTable, atmfM4VplEntry=atmfM4VplEntry, atmfM4VcNextVciEntry=atmfM4VcNextVciEntry, atmfM4HwRunningSwSwIndex=atmfM4HwRunningSwSwIndex, atmfM4HwFanFailAlarm=atmfM4HwFanFailAlarm, atmfM4TcProtoHistTable=atmfM4TcProtoHistTable, atmfM4VcUpcNpcCurrSupprIntvls=atmfM4VcUpcNpcCurrSupprIntvls, atmfM4VcTestStatus=atmfM4VcTestStatus, atmfM4HwInstalledSwSwIndex=atmfM4HwInstalledSwSwIndex)
mibBuilder.exportSymbols("ATM-FORUM-M4-MIB", atmfM4HwRunningSwEntry=atmfM4HwRunningSwEntry, atmfM4IfSubscriberAddress=atmfM4IfSubscriberAddress, atmfM4NeVersion=atmfM4NeVersion, atmfM4VpUpcNpcCurrPassedCells=atmfM4VpUpcNpcCurrPassedCells, atmfM4TrapLogFullAction=atmfM4TrapLogFullAction, atmfM4IfLofAlarm=atmfM4IfLofAlarm, atmfM4HwInstalledSwEntry=atmfM4HwInstalledSwEntry, atmfM4VclSegEndPt=atmfM4VclSegEndPt, atmfM4VpUpcNpcCurrElapsedTime=atmfM4VpUpcNpcCurrElapsedTime, atmfM4CellProtoErrorCode=atmfM4CellProtoErrorCode, atmfM4TcProtoHistIndex=atmfM4TcProtoHistIndex, atmfM4VcUpcNpcCurrDiscardedClp0=atmfM4VcUpcNpcCurrDiscardedClp0, atmfM4ForwardedTrapId=atmfM4ForwardedTrapId, atmfM4HwLineCardAlarm=atmfM4HwLineCardAlarm, atmfM4VcTestResult=atmfM4VcTestResult, atmfM4EquipLocation=atmfM4EquipLocation, atmfM4HwSwAlarmSeverityIndex=atmfM4HwSwAlarmSeverityIndex, atmfM4Compliance=atmfM4Compliance, atmfM4VcTestTable=atmfM4VcTestTable, atmfM4AtmLayerEntry=atmfM4AtmLayerEntry, atmfM4HwVersionMismatchAlarm=atmfM4HwVersionMismatchAlarm, atmfM4VcNextVciGroup=atmfM4VcNextVciGroup, atmfM4EquipGroup=atmfM4EquipGroup, atmfM4NeVendor=atmfM4NeVendor, atmfM4VcUpcNpcCurrTable=atmfM4VcUpcNpcCurrTable, atmfM4VpUpcNpcHistPassedCells=atmfM4VpUpcNpcHistPassedCells, atmfM4LoggedAlarmEntry=atmfM4LoggedAlarmEntry, atmfM4CellProtoHistTable=atmfM4CellProtoHistTable, atmfM4AtmLayerGroup=atmfM4AtmLayerGroup, atmfM4CellProtoHistElapsedTime=atmfM4CellProtoHistElapsedTime)
