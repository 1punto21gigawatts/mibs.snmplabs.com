#
# PySNMP MIB module WWP-ENVIRON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-ENVIRON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Unsigned32, IpAddress, MibIdentifier, Gauge32, Integer32, TimeTicks, Bits, ObjectIdentity, NotificationType, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "IpAddress", "MibIdentifier", "Gauge32", "Integer32", "TimeTicks", "Bits", "ObjectIdentity", "NotificationType", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpEnvironMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 13))
wwpEnvironMIB.setRevisions(('2003-04-28 00:00', '2003-03-11 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpEnvironMIB.setRevisionsDescriptions(('Updated the battery status. Added the four notifications for the battery state change. The new added notification wwpEnvPortalPowerSourceNotification replaces the wwpEnvPowerSwitchNotification.', 'Changed the temperature thresholds to be read-write. Added Battery States and updated the notification for the battery states. Added dry contact, door and RF notifications.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpEnvironMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpEnvironMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpEnvironMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpEnvironMIB.setDescription('The MIB module for the WWP Specifc environment. It contains the environment variables for the WWP System.')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

wwpEnvironMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1))
wwpEnviron = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1))
wwpEnvBatteryModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 1))
wwpEnvPowerSupplyModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2))
wwpEnvFanModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3))
wwpEnvTempSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4))
wwpEnvPortPowerMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5))
wwpEnvNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 6))
wwpEnvPortalBatteryModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7))
wwpEnvDoorModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 8))
wwpEnvDryContactModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9))
wwpEnvRFModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 10))
wwpEnvironMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2))
wwpEnvironMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0))
wwpEnvironMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 3))
wwpEnvironMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 3, 1))
wwpEnvironMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 13, 3, 2))
wwpEnvBattStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("presentAndWorking", 1), ("presentButNotWorking", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvBattStatus.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBattStatus.setDescription('Describes the battery hardware the device is configured with. For Portals, the Management station should use the new added object wwpEnvPortalCurrentBattStatus for the batery status.')
wwpEnvPowerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1), )
if mibBuilder.loadTexts: wwpEnvPowerTable.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerTable.setDescription('A list of power supply entries.')
wwpEnvPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvPowerSupplyNum"))
if mibBuilder.loadTexts: wwpEnvPowerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerEntry.setDescription('An entry in the powerTable providing objects for a power supply.')
wwpEnvPowerSupplyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyNum.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerSupplyNum.setDescription('Denotes the power supply.')
wwpEnvPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("infoNotAvailable", 1), ("notInstalled", 2), ("installedAndOperating", 3), ("installedAndNotOperating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyState.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerSupplyState.setDescription("Denotes the power supply's state.")
wwpEnvPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ac-dc", 1), ("dc-dc", 2), ("notSupported", 3), ("highOutput", 4), ("external", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerSupplyType.setDescription('Denotes the power supply type.')
wwpEnvPowerSupplyRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("redundant", 1), ("notRedundant", 2), ("notSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPowerSupplyRedundancy.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerSupplyRedundancy.setDescription('Denotes whether or not the power supply is redundant.')
wwpEnvRedPowerSupplyNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 2, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvRedPowerSupplyNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: wwpEnvRedPowerSupplyNotifEnabled.setDescription('This variable indicates whether the system generates the wwpEnvRedPowerSupplyNotification. A false value prevents this notifications from being generated by this system.')
wwpEnvFanModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wwpEnvFanModuleTable.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanModuleTable.setDescription('A list of fan module entries.')
wwpEnvFanModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvFanModuleNum"))
if mibBuilder.loadTexts: wwpEnvFanModuleEntry.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanModuleEntry.setDescription('An entry in the fan module Table providing objects for a fan module.')
wwpEnvFanModuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanModuleNum.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanModuleNum.setDescription('Denotes the Fan module.')
wwpEnvFanModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("infoNotAvailable", 1), ("notInstalled", 2), ("installedAndOperating", 3), ("installedAndNotOperating", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanModuleState.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanModuleState.setDescription('Denotes the fan modules state.')
wwpEnvFanAvgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanAvgSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanAvgSpeed.setDescription('The fans average speed in RPM. The average is calculated on a continuous basis from system startup.')
wwpEnvFanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanCurrentSpeed.setDescription('The current speed of the fan in RPM.')
wwpEnvFanMinSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvFanMinSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanMinSpeed.setDescription('The minimum speed of the fan in RPM.')
wwpEnvFanModuleNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 3, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvFanModuleNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanModuleNotifEnabled.setDescription('This variable indicates whether the system generates the wwpEnvFanModuleNotification. A false value prevents this notifications from being generated by this system.')
wwpEnvTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1), )
if mibBuilder.loadTexts: wwpEnvTempSensorTable.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempSensorTable.setDescription('A list of Temp Sensors entries.')
wwpEnvTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvTempSensorNum"))
if mibBuilder.loadTexts: wwpEnvTempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempSensorEntry.setDescription('An entry in the Temp Sensor Table providing objects for a Temp Sensor.')
wwpEnvTempSensorNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvTempSensorNum.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempSensorNum.setDescription('Denotes the Temp sensor module.')
wwpEnvTempSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 2), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvTempSensorValue.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempSensorValue.setDescription('The value of temperature measured by the sensor inside the device in degrees C.')
wwpEnvTempSensorHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 3), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvTempSensorHighThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempSensorHighThreshold.setDescription('The highest value that the object wwpEnvTempSensorValue may obtain at which a wwpEnvMIBTempNotification is sent.')
wwpEnvTempSensorLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 4), Integer32()).setUnits('degrees Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvTempSensorLowThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempSensorLowThreshold.setDescription('The Lowest value that the object wwpEnvTempSensorValue may obtain at which a wwpEnvMIBTempNotification is sent.')
wwpEnvTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("higherThanThreshold", 0), ("normal", 1), ("lowerThanThreshold", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvTempSensorState.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempSensorState.setDescription('The state indicates whether the current temp is greater than, equal to or less than the threshold state.')
wwpEnvTempNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 4, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvTempNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempNotifEnabled.setDescription('This variable indicates whether the system generates the wwpEnvTempNotification. A false value prevents this notifications from being generated by this system.')
wwpPortPowerMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wwpPortPowerMgmtTable.setStatus('current')
if mibBuilder.loadTexts: wwpPortPowerMgmtTable.setDescription('A list of Port Power Management entries. This table affects the port power only when the input power supply is Battery.')
wwpPortPowerMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1), ).setIndexNames((0, "WWP-ENVIRON-MIB", "wwpEnvPortBankId"))
if mibBuilder.loadTexts: wwpPortPowerMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: wwpPortPowerMgmtEntry.setDescription('An entry in the Port Power Mgmt Table providing objects for Port Power Management.')
wwpEnvPortBankId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortBankId.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortBankId.setDescription('Denotes the Port Bank module. A Bank is a set of ports for the power management when the source of the input power is switched to battery.')
wwpEnvPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortMap.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortMap.setDescription('The port map associated with this BankId.')
wwpEnvPortBankOn = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvPortBankOn.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortBankOn.setDescription('The object to decide whether the port related to this Bank should be on or not if the input power supply is switched to Battery.')
wwpPowerSwitchingOp = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("acToBattery", 1), ("bateryToAC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpPowerSwitchingOp.setStatus('current')
if mibBuilder.loadTexts: wwpPowerSwitchingOp.setDescription('The object to notify whether the input power supply is switching from ac to Battery or vice versa.')
wwpEnvPortalBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalBatteryStatus.setDescription("Describes the current status of the battery. If battery is connected then the status is indicated as 'present'.")
wwpEnvPortalBatteryVoltageLevel = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalBatteryVoltageLevel.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalBatteryVoltageLevel.setDescription('Describes the current voltage level of the battery.')
wwpEnvPortalBatteryCondition = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalBatteryCondition.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalBatteryCondition.setDescription('Describes the current condition of the battery.')
wwpEnvPortalPowerSource = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primaryPower", 1), ("battery", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvPortalPowerSource.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalPowerSource.setDescription('Describes the current power source for the device.')
wwpEnvBatteryNormalStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryNormalStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryNormalStateName.setDescription('The state name associated with the low state of the battery.')
wwpEnvBatteryLowStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryLowStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryLowStateName.setDescription('The state name associated with the normal state of the battery.')
wwpEnvBatteryGoodStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryGoodStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryGoodStateName.setDescription('The state name associated with the good state of the battery.')
wwpEnvBatteryBadStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryBadStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryBadStateName.setDescription('The state name associated with the bad state of the battery.')
wwpEnvBatteryPresentStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPresentStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryPresentStateName.setDescription("The state name associated with the battery state 'present'.")
wwpEnvBatteryMissingStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryMissingStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryMissingStateName.setDescription("The state name associated with the battery state 'missing'.")
wwpEnvBatteryPowerPrimaryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerPrimaryStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryPowerPrimaryStateName.setDescription('The state name associated with the state when the device is on primary power.')
wwpEnvBatteryPowerBatteryStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerBatteryStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryPowerBatteryStateName.setDescription('The state name associated with the state when the device is on battery power.')
wwpEnvBatteryLowStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 13), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryLowStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryLowStateNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpEnvPortalBatteryStatusNotification in case of battery state changing from normal to low or vice versa. A false value prevents this notifications from being generated by this system.')
wwpEnvBatteryBadStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 14), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryBadStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryBadStateNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpEnvPortalBatteryStatusNotification in case of battery state changing from good to bad or vice versa. A false value prevents this notifications from being generated by this system.')
wwpEnvBatteryMissingStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryMissingStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryMissingStateNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpEnvPortalBatteryStatusNotification in case of battery state changing from present to missing or vice versa. A false value prevents this notifications from being generated by this system.')
wwpEnvBatteryPowerNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 16), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryPowerNotifEnabled.setDescription('This variable indicates whether the system will generate the wwpEnvPortalBatteryStatusNotification in case of input power changing from primary to battery or vice versa. A false value prevents this notifications from being generated by this system.')
wwpEnvBatteryPeriodicTrapsTimer = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8760))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPeriodicTrapsTimer.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryPeriodicTrapsTimer.setDescription('Adjusts the amount of time, in hours, when the current state of the battery is evaluated and status traps are automatically issued. When set to zero (0) no periodic evaluation of the battery is performed.')
wwpEnvBatteryPowerUpTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 7, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvBatteryPowerUpTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpEnvBatteryPowerUpTrapsEnable.setDescription('When set to true, upon portal power-up the state of the battery is evaluated and status traps are issued. When set to false, no portal power-up battery state traps will be issued.')
wwpEnvDoorState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvDoorState.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDoorState.setDescription('The state of the door.')
wwpEnvDoorNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 8, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDoorNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDoorNotifEnabled.setDescription('This variable indicates whether the system generates the wwpEnvDoorStateChgNotification. A false value prevents this notifications from being generated by this system.')
wwpEnvDryContactOpenStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateName.setDescription('The state name associated with the open state of the dry contact.')
wwpEnvDryContactOpenStateChgAccumulate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateChgAccumulate.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateChgAccumulate.setDescription("Setting this object to 'enable' will cause the system to accumulate open state changes.")
wwpEnvDryContactOpenStateCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateCount.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateCount.setDescription('The number of times the dry contact has entered the open state.')
wwpEnvDryContactOpenStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateNotifEnabled.setDescription('This variable indicates whether the system generates the wwpEnvDryContactOpenStateNotification. A false value prevents this notifications from being generated by this system.')
wwpEnvDryContactCloseStateName = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateName.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateName.setDescription('The state name associated with the close state of the dry contact.')
wwpEnvDryContactCloseStateChgAccumulate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateChgAccumulate.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateChgAccumulate.setDescription("Setting this object to 'enable' will cause the system to accumulate close state changes.")
wwpEnvDryContactCloseStateCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateCount.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateCount.setDescription('The number of times the dry contact has entered the close state.')
wwpEnvDryContactCloseStateNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 9, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateNotifEnabled.setDescription('This variable indicates whether the system generates the wwpEnvDryContactCloseStateNotification. A false value prevents this notifications from being generated by this system.')
wwpEnvRFModuleState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpEnvRFModuleState.setStatus('current')
if mibBuilder.loadTexts: wwpEnvRFModuleState.setDescription("Setting this object to 'enable' will set the the RF state to 'enable'.")
wwpEnvRFModuleSignalDetect = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 13, 1, 1, 10, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpEnvRFModuleSignalDetect.setStatus('current')
if mibBuilder.loadTexts: wwpEnvRFModuleSignalDetect.setDescription('The status of signal detect by the RF Module.')
wwpEnvPowerSupplyStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 1)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPowerSupplyNum"), ("WWP-ENVIRON-MIB", "wwpEnvPowerSupplyState"), ("WWP-ENVIRON-MIB", "wwpEnvPowerSupplyType"))
if mibBuilder.loadTexts: wwpEnvPowerSupplyStatusNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerSupplyStatusNotification.setDescription('A wwpEnvPowerSupplyStatusNotification is sent if a power supply state is changed.')
wwpEnvFanModuleNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 2)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvFanModuleNum"), ("WWP-ENVIRON-MIB", "wwpEnvFanModuleState"))
if mibBuilder.loadTexts: wwpEnvFanModuleNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvFanModuleNotification.setDescription('A wwpEnvFanModuleNotification is sent if the fan state changes.')
wwpEnvTempNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 3)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvTempSensorState"), ("WWP-ENVIRON-MIB", "wwpEnvTempSensorValue"), ("WWP-ENVIRON-MIB", "wwpEnvTempSensorHighThreshold"), ("WWP-ENVIRON-MIB", "wwpEnvTempSensorLowThreshold"))
if mibBuilder.loadTexts: wwpEnvTempNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvTempNotification.setDescription('A wwpEnvTempNotification is sent if the wwpEnvTempSensorState is changed.')
wwpEnvPowerSwitchNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 4)).setObjects(("WWP-ENVIRON-MIB", "wwpPowerSwitchingOp"))
if mibBuilder.loadTexts: wwpEnvPowerSwitchNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPowerSwitchNotification.setDescription('A wwpEnvPowerSwitchNotification is sent if the input power supply is switched to Battery from the AC power or switched from the Battery to the AC Power.')
wwpEnvPortalBatteryStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 5)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalBatteryStatus"))
if mibBuilder.loadTexts: wwpEnvPortalBatteryStatusNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalBatteryStatusNotification.setDescription('A wwpEnvPortalBatteryStatusNotification is sent if the Battery status changes. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpEnvPortalBatteryVoltageLevelNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 6)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalBatteryVoltageLevel"))
if mibBuilder.loadTexts: wwpEnvPortalBatteryVoltageLevelNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalBatteryVoltageLevelNotification.setDescription('A wwpEnvPortalBatteryVoltageLevelNotification is sent if the Battery voltage level changes from normal to low or vice versa. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpEnvPortalBatteryConditionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 7)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalBatteryCondition"))
if mibBuilder.loadTexts: wwpEnvPortalBatteryConditionNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalBatteryConditionNotification.setDescription('A wwpEnvPortalBatteryConditionNotification is sent if the Battery condition changes from good to bad or vice versa. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpEnvPortalPowerSourceNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 8)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvPortalPowerSource"))
if mibBuilder.loadTexts: wwpEnvPortalPowerSourceNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvPortalPowerSourceNotification.setDescription('A wwpEnvPortalPowerSourceNotification is sent if the Battery input power source changes from battery to primary power or vice versa. A device which supports wwpEnvPowerSwitchNotification should not support this notification. If the device supports the configurable battery state names, then the corresponding battery state name should also be sent with this notification.')
wwpEnvDoorStateChgNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 9)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvDoorState"))
if mibBuilder.loadTexts: wwpEnvDoorStateChgNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDoorStateChgNotification.setDescription('A wwpEnvDoorStateChgNotification is sent if the door state changes.')
wwpEnvDryContactOpenStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 10)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvDryContactOpenStateName"), ("WWP-ENVIRON-MIB", "wwpEnvDryContactOpenStateCount"))
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactOpenStateNotification.setDescription('A wwpEnvDryContactOpenStateNotification is sent when the dry contact enters in the open state.')
wwpEnvDryContactCloseStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 13, 2, 0, 11)).setObjects(("WWP-ENVIRON-MIB", "wwpEnvDryContactCloseStateName"), ("WWP-ENVIRON-MIB", "wwpEnvDryContactCloseStateCount"))
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateNotification.setStatus('current')
if mibBuilder.loadTexts: wwpEnvDryContactCloseStateNotification.setDescription('A wwpEnvDryContactCloseStateNotification is sent when the dry contact enters in the close state.')
mibBuilder.exportSymbols("WWP-ENVIRON-MIB", wwpEnvDoorNotifEnabled=wwpEnvDoorNotifEnabled, wwpEnvBatteryGoodStateName=wwpEnvBatteryGoodStateName, wwpEnvFanModuleNotifEnabled=wwpEnvFanModuleNotifEnabled, wwpEnvDoorState=wwpEnvDoorState, wwpEnvBatteryLowStateNotifEnabled=wwpEnvBatteryLowStateNotifEnabled, wwpPortPowerMgmtEntry=wwpPortPowerMgmtEntry, wwpEnvBatteryBadStateName=wwpEnvBatteryBadStateName, wwpEnvTempSensor=wwpEnvTempSensor, wwpEnvFanModuleNum=wwpEnvFanModuleNum, wwpEnvDryContactOpenStateNotifEnabled=wwpEnvDryContactOpenStateNotifEnabled, wwpEnvDoorStateChgNotification=wwpEnvDoorStateChgNotification, wwpEnvBatteryNormalStateName=wwpEnvBatteryNormalStateName, wwpEnvPortalBatteryCondition=wwpEnvPortalBatteryCondition, wwpEnvironMIBNotifications=wwpEnvironMIBNotifications, wwpEnvPortalBatteryVoltageLevel=wwpEnvPortalBatteryVoltageLevel, wwpEnvDryContactCloseStateCount=wwpEnvDryContactCloseStateCount, wwpEnvPortalBatteryStatus=wwpEnvPortalBatteryStatus, wwpEnvDryContactCloseStateNotifEnabled=wwpEnvDryContactCloseStateNotifEnabled, wwpEnvBatteryBadStateNotifEnabled=wwpEnvBatteryBadStateNotifEnabled, wwpPortPowerMgmtTable=wwpPortPowerMgmtTable, wwpEnvRedPowerSupplyNotifEnabled=wwpEnvRedPowerSupplyNotifEnabled, wwpEnvTempSensorHighThreshold=wwpEnvTempSensorHighThreshold, wwpEnvDryContactOpenStateChgAccumulate=wwpEnvDryContactOpenStateChgAccumulate, wwpEnvPortalBatteryModule=wwpEnvPortalBatteryModule, wwpEnvFanCurrentSpeed=wwpEnvFanCurrentSpeed, wwpEnvRFModule=wwpEnvRFModule, wwpEnvBatteryMissingStateNotifEnabled=wwpEnvBatteryMissingStateNotifEnabled, wwpEnvPortalPowerSourceNotification=wwpEnvPortalPowerSourceNotification, wwpEnvBatteryPowerPrimaryStateName=wwpEnvBatteryPowerPrimaryStateName, wwpEnvNotif=wwpEnvNotif, wwpEnvDoorModule=wwpEnvDoorModule, wwpEnvDryContactOpenStateNotification=wwpEnvDryContactOpenStateNotification, wwpEnvPowerSupplyState=wwpEnvPowerSupplyState, wwpEnvDryContactCloseStateNotification=wwpEnvDryContactCloseStateNotification, wwpEnvPortalPowerSource=wwpEnvPortalPowerSource, wwpEnvTempNotifEnabled=wwpEnvTempNotifEnabled, wwpEnvFanAvgSpeed=wwpEnvFanAvgSpeed, wwpEnvDryContactOpenStateCount=wwpEnvDryContactOpenStateCount, wwpEnvBatteryPeriodicTrapsTimer=wwpEnvBatteryPeriodicTrapsTimer, wwpEnvFanMinSpeed=wwpEnvFanMinSpeed, wwpEnvPortalBatteryVoltageLevelNotification=wwpEnvPortalBatteryVoltageLevelNotification, wwpEnvBatteryPowerNotifEnabled=wwpEnvBatteryPowerNotifEnabled, wwpEnvPowerSupplyNum=wwpEnvPowerSupplyNum, wwpEnvFanModuleEntry=wwpEnvFanModuleEntry, wwpEnvPortMap=wwpEnvPortMap, wwpEnvironMIB=wwpEnvironMIB, wwpEnvTempSensorValue=wwpEnvTempSensorValue, wwpEnvTempSensorTable=wwpEnvTempSensorTable, wwpEnvBattStatus=wwpEnvBattStatus, wwpEnvPowerSupplyModule=wwpEnvPowerSupplyModule, wwpEnvPowerSupplyStatusNotification=wwpEnvPowerSupplyStatusNotification, wwpEnvFanModuleState=wwpEnvFanModuleState, wwpEnvBatteryPresentStateName=wwpEnvBatteryPresentStateName, wwpEnvPowerSwitchNotification=wwpEnvPowerSwitchNotification, wwpEnviron=wwpEnviron, wwpEnvDryContactModule=wwpEnvDryContactModule, wwpEnvTempSensorLowThreshold=wwpEnvTempSensorLowThreshold, wwpEnvPortBankId=wwpEnvPortBankId, wwpEnvPortalBatteryStatusNotification=wwpEnvPortalBatteryStatusNotification, wwpEnvBatteryMissingStateName=wwpEnvBatteryMissingStateName, PortList=PortList, wwpEnvironMIBCompliances=wwpEnvironMIBCompliances, wwpEnvDryContactCloseStateName=wwpEnvDryContactCloseStateName, wwpEnvPowerTable=wwpEnvPowerTable, wwpEnvPowerSupplyRedundancy=wwpEnvPowerSupplyRedundancy, wwpEnvironMIBGroups=wwpEnvironMIBGroups, wwpEnvFanModuleTable=wwpEnvFanModuleTable, wwpEnvBatteryLowStateName=wwpEnvBatteryLowStateName, wwpEnvPortalBatteryConditionNotification=wwpEnvPortalBatteryConditionNotification, wwpEnvBatteryPowerBatteryStateName=wwpEnvBatteryPowerBatteryStateName, wwpEnvTempSensorState=wwpEnvTempSensorState, wwpEnvFanModule=wwpEnvFanModule, wwpEnvironMIBNotificationPrefix=wwpEnvironMIBNotificationPrefix, wwpEnvTempSensorEntry=wwpEnvTempSensorEntry, wwpEnvironMIBConformance=wwpEnvironMIBConformance, wwpEnvironMIBObjects=wwpEnvironMIBObjects, wwpEnvPowerEntry=wwpEnvPowerEntry, wwpEnvDryContactOpenStateName=wwpEnvDryContactOpenStateName, wwpPowerSwitchingOp=wwpPowerSwitchingOp, wwpEnvTempNotification=wwpEnvTempNotification, wwpEnvBatteryPowerUpTrapsEnable=wwpEnvBatteryPowerUpTrapsEnable, wwpEnvFanModuleNotification=wwpEnvFanModuleNotification, wwpEnvPortPowerMgmt=wwpEnvPortPowerMgmt, wwpEnvRFModuleState=wwpEnvRFModuleState, wwpEnvTempSensorNum=wwpEnvTempSensorNum, wwpEnvBatteryModule=wwpEnvBatteryModule, wwpEnvPowerSupplyType=wwpEnvPowerSupplyType, wwpEnvDryContactCloseStateChgAccumulate=wwpEnvDryContactCloseStateChgAccumulate, PYSNMP_MODULE_ID=wwpEnvironMIB, wwpEnvRFModuleSignalDetect=wwpEnvRFModuleSignalDetect, wwpEnvPortBankOn=wwpEnvPortBankOn)
