#
# PySNMP MIB module CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
rptrPortIndex, rptrPortGroupIndex, rptrGroupIndex = mibBuilder.importSymbols("SNMP-REPEATER-MIB", "rptrPortIndex", "rptrPortGroupIndex", "rptrGroupIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, ModuleIdentity, Counter64, IpAddress, iso, NotificationType, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Counter64", "IpAddress", "iso", "NotificationType", "Counter32", "MibIdentifier")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
ciscoSibuStackableDualSpeedHubMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 44))
ciscoSibuStackableDualSpeedHubMIB.setRevisions(('1998-10-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubMIB.setLastUpdated('9810230000Z')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-sibu@cisco.com')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubMIB.setDescription('The MIB module that extends the REPEATER-MIB to manage CISCO low end stackable repeater products. For the purpose of this mib, a hub is a repeater group and stack is collection of one or more hubs interconnected via stack bus connectors.')
ciscoSibuStackableDualSpeedHubMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 1))
cssSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 1))
cssGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2))
cssRepeaterPort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3))
cssSwitchPort = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4))
class HubNumber(TextualConvention, Integer32):
    description = 'Represents the hub number that the system supports for stacking. The hub number represents the order in which a hub is stacked relative to other members of the stack. Lowest hub number represents the top member of the stack. This is also the number used in the command line interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

cssSystemLinkTraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssSystemLinkTraps.setStatus('current')
if mibBuilder.loadTexts: cssSystemLinkTraps.setDescription("Indicates whether the stack is permitted to generate linkUp/linkDown traps for both repeater port and switch module's port. The stack provides only a single global control of link traps in contrast to per interface control provided by IF-MIB. The value of all instances ifLinkUpDownTrapEnable is set to TRUE (FALSE) if this object is set to enabled (disabled). The object ifLinkUpDownTrapEnable is read-only. A linkUp/linkDown trap is generated whenever a port's link STATUS or administrative status changes.")
cssGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1), )
if mibBuilder.loadTexts: cssGroupTable.setStatus('current')
if mibBuilder.loadTexts: cssGroupTable.setDescription('A list of member hubs in the stack.')
cssGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1), ).setIndexNames((0, "SNMP-REPEATER-MIB", "rptrGroupIndex"))
if mibBuilder.loadTexts: cssGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cssGroupEntry.setDescription('Configuration parameters for an individual hub. An entry is created by default for the master unit in the stack. A entry is created (removed) when a hub is connected to (removed from) the stack.')
cssGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 1), HubNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupID.setStatus('current')
if mibBuilder.loadTexts: cssGroupID.setDescription('The hub identifier of unit in a stack.')
cssGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cisco1538MDS", 1), ("cisco1538UDS", 2), ("wsC412M", 3), ("wsC412", 4), ("wsC424M", 5), ("wsC424", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupType.setStatus('current')
if mibBuilder.loadTexts: cssGroupType.setDescription('The model type of the hub unit')
cssGroupSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupSerialNo.setStatus('current')
if mibBuilder.loadTexts: cssGroupSerialNo.setDescription('Serial number of the hardware.')
cssGroupBoardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupBoardRevision.setStatus('current')
if mibBuilder.loadTexts: cssGroupBoardRevision.setDescription('Hardware version of the repeater board.')
cssGroupAgentBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupAgentBootVersion.setStatus('current')
if mibBuilder.loadTexts: cssGroupAgentBootVersion.setDescription("Returns the version number of the dual-speed hub BOOT software residing in flash. The format is 'V1.2.3'.")
cssGroupAgentFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupAgentFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: cssGroupAgentFirmwareVersion.setDescription("Returns the version number of the dual-speed hub firmware residing in flash. The format is 'V1.2.3'.")
cssGroupAgentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupAgentStatus.setStatus('current')
if mibBuilder.loadTexts: cssGroupAgentStatus.setDescription('Status of this hub agent. Each stack allows only one SNMP primary agent. notPresent(1): The hub does not have an agent. primary(2): The agent of this hub is a primary agent. backup(3) : The agent of this hub is a backup agent.')
cssGroupAgentPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupAgentPhysAddress.setStatus('current')
if mibBuilder.loadTexts: cssGroupAgentPhysAddress.setDescription("MAC address of this hub's agent")
cssGroupInternalPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupInternalPowerState.setStatus('current')
if mibBuilder.loadTexts: cssGroupInternalPowerState.setDescription('Indicates the state of the internal power supply. off : The internal power supply is off. on : The internal power supply is on.')
cssGroupRedundantPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("healthy", 2), ("faulty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssGroupRedundantPowerState.setStatus('current')
if mibBuilder.loadTexts: cssGroupRedundantPowerState.setDescription('Indicates the state of the external/backup power supply. off : the switch is not connected to a redundant power source. healthy : a redundant power source is connected to the switch and the power source is operating correctly. faulty : a redundant power source is connected to the switch but a failure exists in the power system.')
cssGroupReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2))).clone('noReset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssGroupReset.setStatus('current')
if mibBuilder.loadTexts: cssGroupReset.setDescription('Setting this object to reset(2) causes a complete reset of both hardware and software, but does not run the POST (Power On Self Test). Setting this object to noReset(1) has no effect. The switch always returns the value noReset(1) when this object is read.')
cssGroupConfigDefaultReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2))).clone('noReset')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssGroupConfigDefaultReset.setStatus('current')
if mibBuilder.loadTexts: cssGroupConfigDefaultReset.setDescription('Setting this object to reset(2) causes a complete reset of both hardware and software, but does not run the POST (Power On Self Test). All configuration parameters will revert to their factory default settings. Setting this object to noReset(1) has no effect. The switch always returns the value noReset(1) when this object is read.')
cssGroupIsolatedState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("attached", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssGroupIsolatedState.setStatus('current')
if mibBuilder.loadTexts: cssGroupIsolatedState.setDescription('Setting this object to isolated(1) causes this hub to be isolated from the back plane bus. Setting this object to attached(2) causes this hub to be attached to the back plane bus.')
cssRepeaterPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1), )
if mibBuilder.loadTexts: cssRepeaterPortTable.setStatus('current')
if mibBuilder.loadTexts: cssRepeaterPortTable.setDescription('The list of repeater port configurations on each hub unit.')
cssRepeaterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1), ).setIndexNames((0, "SNMP-REPEATER-MIB", "rptrPortGroupIndex"), (0, "SNMP-REPEATER-MIB", "rptrPortIndex"))
if mibBuilder.loadTexts: cssRepeaterPortEntry.setStatus('current')
if mibBuilder.loadTexts: cssRepeaterPortEntry.setDescription('Configuration parameters for an individual repeater port on a hub. The value of rptrPortIndex also indicates the physical port number of the port in the hub. An entry is created for each repeater port in a hub when the hub is connected to the stack. The corresponding entries are removed when the hub is removed from the stack.')
cssRepeaterPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssRepeaterPortName.setStatus('current')
if mibBuilder.loadTexts: cssRepeaterPortName.setDescription('A descriptive string of up to 20 characters used by the network administrator to name a port.')
cssRepeaterPortControllerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssRepeaterPortControllerRevision.setStatus('current')
if mibBuilder.loadTexts: cssRepeaterPortControllerRevision.setDescription('Returns the revision number of the port controller.')
cssRepeaterPortSpeedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenMbps", 1), ("oneHundredMbps", 2), ("autoNegotiate", 3))).clone('autoNegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssRepeaterPortSpeedAdmin.setStatus('current')
if mibBuilder.loadTexts: cssRepeaterPortSpeedAdmin.setDescription('Set to tenMbps(1) to operate in 10Mbps speed mode. Set to oneHundredMbps(2) to operate in 100Mbps speed mode. Set to autoNegotiate(3) to allow the switch to negotiate with the other end of the connection. The actual operating speed of the port is given by cssRepeaterPortSpeedStatus.')
cssRepeaterPortSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenMbps", 1), ("oneHundredMbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssRepeaterPortSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: cssRepeaterPortSpeedStatus.setDescription('The operating speed of the port.')
cssRepeaterPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("noLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssRepeaterPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cssRepeaterPortLinkStatus.setDescription('The current port link status.')
cssSwitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1), )
if mibBuilder.loadTexts: cssSwitchPortTable.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortTable.setDescription('A list of switched ports on extension module on a each hub unit in the stack.')
cssSwitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1), ).setIndexNames((0, "SNMP-REPEATER-MIB", "rptrGroupIndex"), (0, "CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortModuleID"), (0, "CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortPortID"))
if mibBuilder.loadTexts: cssSwitchPortEntry.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortEntry.setDescription('Configuration parameters for an individual switch module port. An entry is created for each switch port on a module is inserted into a hub in the stack. The corresponding entries are removed when the module is removed from the hub in the stack, or if the hub is removed from the stack.')
cssSwitchPortModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSwitchPortModuleID.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortModuleID.setDescription('Unique ID number of a module unit in a hub as used in the command line interface.')
cssSwitchPortPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSwitchPortPortID.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortPortID.setDescription('The unique ID identifying a port on an extension module on a hub as used in the command line interface.')
cssSwitchPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssSwitchPortName.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortName.setDescription('A descriptive string of up to 20 characters used by the network administrator to name a switch port.')
cssSwitchPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wsX4001", 1), ("wsX4002", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSwitchPortType.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortType.setDescription('Type of switch module in this hub.')
cssSwitchPortControllerRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSwitchPortControllerRevision.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortControllerRevision.setDescription('The revision number of the port controller.')
cssSwitchPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssSwitchPortState.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortState.setDescription('Setting this object to enabled(1) enables the port. Setting this object to disabled(2) disables the port.')
cssSwitchPortDuplexAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2), ("autoNegotiate", 3))).clone('autoNegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssSwitchPortDuplexAdmin.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortDuplexAdmin.setDescription('Set to fullDuplex(1) to operate in full duplex mode: port will allow simultaneous transmit and receive which can double its bandwidth. Set to halfDuplex(2) to operate in normal mode. Set to autoNegotiate(3) to allow the switch to negotiate the duplex status with the other end of the connection.')
cssSwitchPortDuplexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSwitchPortDuplexStatus.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortDuplexStatus.setDescription('The operating duplex mode of the switched port.')
cssSwitchPortSpeedAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tenMbps", 1), ("oneHundredMbps", 2), ("autoNegotiate", 3))).clone('autoNegotiate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cssSwitchPortSpeedAdmin.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortSpeedAdmin.setDescription('Set to tenMbps(1) to operate in 10Mbps speed mode. Set to oneHundredMbps(2) to operate in 100Mbps speed mode. Set to autoNegotiate(3) to allow the switch to negotiate the operating speed with the other end of the connection. If the value of object cssSwitchPortType is WS-X4002(2), this object will be read-only, because FX module only supports 100Mbps speed.')
cssSwitchPortSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tenMbps", 1), ("oneHundredMbps", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSwitchPortSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortSpeedStatus.setDescription('The operating speed of the switched port.')
cssSwitchPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 44, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("noLink", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cssSwitchPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: cssSwitchPortLinkStatus.setDescription('Indicates the link STATUS of switch port.')
ciscoSibuStackableDualSpeedHubNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 2))
ciscoSibuStackableDualSpeedHubNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 2, 0))
ciscoSibuStackableDualSpeedHubRptrPortLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 44, 2, 0, 1)).setObjects(("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssRepeaterPortLinkStatus"))
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubRptrPortLinkChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubRptrPortLinkChange.setDescription('This trap is generated whenever the value of cssRepeaterPortLinkStatus changes for a repeater port.')
ciscoSibuStackableDualSpeedHubSwitchPortLinkChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 44, 2, 0, 2)).setObjects(("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortLinkStatus"))
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubSwitchPortLinkChange.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubSwitchPortLinkChange.setDescription('This trap is generated whenever the value of cssSwitchPortLinkStatus changes for a switch port on an extension module.')
ciscoSibuStackableDualSpeedHubMIBComformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 3))
ciscoSibuStackableDualSpeedHubMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 1))
ciscoSibuStackableDualSpeedHubMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2))
ciscoSibuStackableDualSpeedHubCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 1, 1)).setObjects(("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "ciscoSibuStackableDualSpeedHubGroup"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "ciscoSibuStackableDualSpeedHubRepeaterPortGroup"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "ciscoSibuStackableDualSpeedHubSwitchPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuStackableDualSpeedHubCompliance = ciscoSibuStackableDualSpeedHubCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubCompliance.setDescription('The compliance statement for the Cisco Stackable Dual-Speed Hub products.')
ciscoSibuStackableDualSpeedHubGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2, 1)).setObjects(("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSystemLinkTraps"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupID"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupType"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupSerialNo"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupBoardRevision"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupAgentBootVersion"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupAgentFirmwareVersion"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupAgentStatus"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupAgentPhysAddress"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupInternalPowerState"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupRedundantPowerState"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupReset"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupConfigDefaultReset"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssGroupIsolatedState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuStackableDualSpeedHubGroup = ciscoSibuStackableDualSpeedHubGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubGroup.setDescription('A collection of group objects for use with the Cisco Stackable Dual-Speed Hub products.')
ciscoSibuStackableDualSpeedHubRepeaterPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2, 2)).setObjects(("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssRepeaterPortName"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssRepeaterPortControllerRevision"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssRepeaterPortSpeedAdmin"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssRepeaterPortSpeedStatus"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssRepeaterPortLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuStackableDualSpeedHubRepeaterPortGroup = ciscoSibuStackableDualSpeedHubRepeaterPortGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubRepeaterPortGroup.setDescription('A collection of repeater port objects for use with the Cisco Stackable Dual-Speed Hub products.')
ciscoSibuStackableDualSpeedHubSwitchPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 44, 3, 2, 3)).setObjects(("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortModuleID"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortPortID"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortName"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortType"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortControllerRevision"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortState"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortDuplexAdmin"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortDuplexStatus"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortSpeedAdmin"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortSpeedStatus"), ("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", "cssSwitchPortLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSibuStackableDualSpeedHubSwitchPortGroup = ciscoSibuStackableDualSpeedHubSwitchPortGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSibuStackableDualSpeedHubSwitchPortGroup.setDescription('A collection of switch module port objects for use with the Cisco Stackable Dual-Speed Hub products.')
mibBuilder.exportSymbols("CISCO-SIBU-STACKABLE-DUAL-SPEED-HUB-MIB", cssSwitchPortModuleID=cssSwitchPortModuleID, cssGroupConfigDefaultReset=cssGroupConfigDefaultReset, cssSwitchPortLinkStatus=cssSwitchPortLinkStatus, ciscoSibuStackableDualSpeedHubCompliance=ciscoSibuStackableDualSpeedHubCompliance, cssGroupIsolatedState=cssGroupIsolatedState, cssGroup=cssGroup, ciscoSibuStackableDualSpeedHubSwitchPortGroup=ciscoSibuStackableDualSpeedHubSwitchPortGroup, cssSwitchPortTable=cssSwitchPortTable, cssGroupID=cssGroupID, cssGroupEntry=cssGroupEntry, cssRepeaterPortTable=cssRepeaterPortTable, ciscoSibuStackableDualSpeedHubGroup=ciscoSibuStackableDualSpeedHubGroup, cssRepeaterPortControllerRevision=cssRepeaterPortControllerRevision, cssGroupBoardRevision=cssGroupBoardRevision, cssGroupSerialNo=cssGroupSerialNo, ciscoSibuStackableDualSpeedHubSwitchPortLinkChange=ciscoSibuStackableDualSpeedHubSwitchPortLinkChange, cssGroupReset=cssGroupReset, HubNumber=HubNumber, cssRepeaterPortName=cssRepeaterPortName, ciscoSibuStackableDualSpeedHubNotifications=ciscoSibuStackableDualSpeedHubNotifications, cssSystem=cssSystem, cssSystemLinkTraps=cssSystemLinkTraps, cssGroupAgentStatus=cssGroupAgentStatus, ciscoSibuStackableDualSpeedHubNotificationsPrefix=ciscoSibuStackableDualSpeedHubNotificationsPrefix, cssGroupRedundantPowerState=cssGroupRedundantPowerState, cssSwitchPortState=cssSwitchPortState, cssGroupAgentBootVersion=cssGroupAgentBootVersion, cssSwitchPortPortID=cssSwitchPortPortID, cssSwitchPortEntry=cssSwitchPortEntry, cssSwitchPort=cssSwitchPort, cssSwitchPortSpeedStatus=cssSwitchPortSpeedStatus, cssRepeaterPortSpeedAdmin=cssRepeaterPortSpeedAdmin, cssRepeaterPortEntry=cssRepeaterPortEntry, cssSwitchPortDuplexAdmin=cssSwitchPortDuplexAdmin, cssGroupAgentFirmwareVersion=cssGroupAgentFirmwareVersion, cssSwitchPortDuplexStatus=cssSwitchPortDuplexStatus, cssSwitchPortName=cssSwitchPortName, cssSwitchPortSpeedAdmin=cssSwitchPortSpeedAdmin, cssGroupType=cssGroupType, cssRepeaterPortSpeedStatus=cssRepeaterPortSpeedStatus, ciscoSibuStackableDualSpeedHubMIBCompliances=ciscoSibuStackableDualSpeedHubMIBCompliances, cssGroupTable=cssGroupTable, ciscoSibuStackableDualSpeedHubMIB=ciscoSibuStackableDualSpeedHubMIB, cssRepeaterPort=cssRepeaterPort, cssGroupAgentPhysAddress=cssGroupAgentPhysAddress, cssGroupInternalPowerState=cssGroupInternalPowerState, cssSwitchPortType=cssSwitchPortType, PYSNMP_MODULE_ID=ciscoSibuStackableDualSpeedHubMIB, ciscoSibuStackableDualSpeedHubMIBGroups=ciscoSibuStackableDualSpeedHubMIBGroups, ciscoSibuStackableDualSpeedHubRptrPortLinkChange=ciscoSibuStackableDualSpeedHubRptrPortLinkChange, cssSwitchPortControllerRevision=cssSwitchPortControllerRevision, ciscoSibuStackableDualSpeedHubRepeaterPortGroup=ciscoSibuStackableDualSpeedHubRepeaterPortGroup, cssRepeaterPortLinkStatus=cssRepeaterPortLinkStatus, ciscoSibuStackableDualSpeedHubMIBComformance=ciscoSibuStackableDualSpeedHubMIBComformance, ciscoSibuStackableDualSpeedHubMIBObjects=ciscoSibuStackableDualSpeedHubMIBObjects)
