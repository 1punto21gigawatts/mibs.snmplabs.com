#
# PySNMP MIB module RBRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBRIDGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:53:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanId, PortList = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "PortList")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, IpAddress, NotificationType, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, Integer32, ModuleIdentity, MibIdentifier, Unsigned32, iso, mib_2, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "IpAddress", "NotificationType", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "Integer32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "iso", "mib-2", "Counter64")
TruthValue, RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
rbridgeMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 214))
rbridgeMIB.setRevisions(('2013-01-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbridgeMIB.setRevisionsDescriptions(("Initial version, published as RFC 6850. Copyright (c) 2013 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license-info).",))
if mibBuilder.loadTexts: rbridgeMIB.setLastUpdated('201301070000Z')
if mibBuilder.loadTexts: rbridgeMIB.setOrganization('IETF TRILL Working Group')
if mibBuilder.loadTexts: rbridgeMIB.setContactInfo('http://datatracker.ietf.org/wg/trill/charter/ Email: trill@ietf.org Anil Rijhsinghani Hewlett-Packard Tel: +1 508 323 1251 Email: anil@charter.net Kate Zebrose HW Embedded Tel: +1 617 840 9673 Email: zebrose@alum.mit.edu')
if mibBuilder.loadTexts: rbridgeMIB.setDescription('The RBridge MIB module for managing switches that support the TRILL protocol.')
rbridgeNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 0))
rbridgeObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1))
rbridgeConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 2))
rbridgeBase = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 1))
rbridgeFdb = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 2))
rbridgeVlan = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 3))
rbridgeEsadi = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 4))
rbridgeCounter = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 5))
rbridgeSnooping = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 6))
rbridgeDtree = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 7))
rbridgeTrill = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 1, 8))
class RbridgeAddress(TextualConvention, OctetString):
    description = 'The Media Access Control (MAC) address used by an RBridge port. This may match the RBridge IS-IS SystemID.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class RbridgeNickname(TextualConvention, Unsigned32):
    reference = 'RFC 6325, Section 3.7'
    description = "The 16-bit identifier used in TRILL as an abbreviation for the RBridge's 48-bit IS-IS System ID. The value 0 means a nickname is not specified, the values 0xFFC0 through 0xFFFE are reserved for future allocation, and the value 0xFFFF is permanently reserved."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65471)

rbridgeBaseTrillVersion = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBaseTrillVersion.setReference('RFC 6325, Section 3.2')
if mibBuilder.loadTexts: rbridgeBaseTrillVersion.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseTrillVersion.setDescription('The maximum TRILL version number that this RBridge supports.')
rbridgeBaseNumPorts = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 2), Unsigned32()).setUnits('ports').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBaseNumPorts.setReference('RFC 6325, Section 2.6.1')
if mibBuilder.loadTexts: rbridgeBaseNumPorts.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNumPorts.setDescription('The number of ports controlled by this RBridge.')
rbridgeBaseForwardDelay = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseForwardDelay.setReference('RFC 6325, Section 4.8.3')
if mibBuilder.loadTexts: rbridgeBaseForwardDelay.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseForwardDelay.setDescription('Modified aging time for address entries after an appointed forwarder change. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeBaseUniMultipathEnable = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseUniMultipathEnable.setReference('RFC 6325, Appendix C')
if mibBuilder.loadTexts: rbridgeBaseUniMultipathEnable.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseUniMultipathEnable.setDescription('The enabled status of unicast TRILL multipathing. It is enabled when true. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeBaseMultiMultipathEnable = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseMultiMultipathEnable.setReference('RFC 6325, Appendix C')
if mibBuilder.loadTexts: rbridgeBaseMultiMultipathEnable.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseMultiMultipathEnable.setDescription('The enabled status of multi-destination TRILL multipathing. It is enabled when true. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeBaseAcceptEncapNonadj = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseAcceptEncapNonadj.setReference('RFC 6325, Section 4.6.2')
if mibBuilder.loadTexts: rbridgeBaseAcceptEncapNonadj.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseAcceptEncapNonadj.setDescription("Accept TRILL-encapsulated frames from a neighbor with which this RBridge does not have an IS-IS adjacency, when the value of this object is 'true'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeBaseNicknameNumber = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBaseNicknameNumber.setReference('RFC 6325, Section 3.7.3')
if mibBuilder.loadTexts: rbridgeBaseNicknameNumber.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameNumber.setDescription('The number of nicknames this RBridge should acquire. These can be acquired dynamically or configured statically. This value represents the maximum number of entries in rbridgeBaseNicknameTable. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeBaseNicknameTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 1, 8), )
if mibBuilder.loadTexts: rbridgeBaseNicknameTable.setReference('RFC 6325, Section 3.7')
if mibBuilder.loadTexts: rbridgeBaseNicknameTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameTable.setDescription('A table that contains information about nicknames configured by an operator or learned dynamically by this RBridge.')
rbridgeBaseNicknameEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBaseNicknameName"))
if mibBuilder.loadTexts: rbridgeBaseNicknameEntry.setReference('RFC 6325, Section 3.7')
if mibBuilder.loadTexts: rbridgeBaseNicknameEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameEntry.setDescription('A list of information for each nickname of the RBridge.')
rbridgeBaseNicknameName = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 1), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeBaseNicknameName.setReference('RFC 6325, Section 3.7')
if mibBuilder.loadTexts: rbridgeBaseNicknameName.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameName.setDescription("Nicknames are 16-bit quantities that act as abbreviations for RBridge's 48-bit IS-IS System ID to achieve a more compact encoding.")
rbridgeBaseNicknamePriority = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(192)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeBaseNicknamePriority.setReference('RFC 6325, Section 3.7')
if mibBuilder.loadTexts: rbridgeBaseNicknamePriority.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknamePriority.setDescription("This RBridge's priority to hold this nickname. When the nickname is configured, the default value of this object is 192. When the nickname is configured, the most significant bit (0x80) must be set and the bottom 7 bits have the default value of 0x40, so 0x80 + 0x40 == 0xC0, which is 192 decimal. Additionally, the bottom 7 bits could be configured to a value other than 0x40. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeBaseNicknameDtrPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeBaseNicknameDtrPriority.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeBaseNicknameDtrPriority.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameDtrPriority.setDescription('The distribution tree root priority for this nickname. The default value of this object is 32768. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeBaseNicknameType = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone('static')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBaseNicknameType.setReference('RFC 6325, Section 3.7')
if mibBuilder.loadTexts: rbridgeBaseNicknameType.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameType.setDescription('This object indicates the status of the entry. The default value is static(1). static(1) - this entry has been configured and will remain after the next reset of the RBridge. dynamic(2) - this entry has been acquired by the RBridge nickname acquisition protocol.')
rbridgeBaseNicknameRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeBaseNicknameRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameRowStatus.setDescription('This object indicates the status of the entry.')
rbridgeBasePortTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 1, 9), )
if mibBuilder.loadTexts: rbridgeBasePortTable.setReference('RFC 6325, Section 5.3')
if mibBuilder.loadTexts: rbridgeBasePortTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortTable.setDescription('A table that contains generic information about every port that is associated with this RBridge.')
rbridgeBasePortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"))
if mibBuilder.loadTexts: rbridgeBasePortEntry.setReference('RFC 6325, Section 5.3')
if mibBuilder.loadTexts: rbridgeBasePortEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortEntry.setDescription('A list of information for each port of the bridge.')
rbridgeBasePort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: rbridgeBasePort.setReference('RFC 6325, Section 5.3')
if mibBuilder.loadTexts: rbridgeBasePort.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePort.setDescription('The port number of the port for which this entry contains RBridge management information.')
rbridgeBasePortIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortIfIndex.setDescription('The value of the instance of the ifIndex object, defined in the IF-MIB, for the interface corresponding to this port. The RBridge port sits on top of this interface.')
rbridgeBasePortDisable = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortDisable.setReference('RFC 6325, Section 4.9.1')
if mibBuilder.loadTexts: rbridgeBasePortDisable.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortDisable.setDescription("Disable port bit. When this bit is set (true), all frames received or to be transmitted are discarded, with the possible exception of some layer 2 control frames that may be generated and transmitted or received and processed locally. Default value is 'false'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeBasePortTrunkPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortTrunkPort.setReference('RFC 6325, Section 4.9.1')
if mibBuilder.loadTexts: rbridgeBasePortTrunkPort.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortTrunkPort.setDescription("End-station service disable (trunk port) bit. When this bit is set (true), all native frames received on the port and all native frames that would have been sent on the port are discarded. Default value is 'false'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeBasePortAccessPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortAccessPort.setReference('RFC 6325, Section 4.9.1')
if mibBuilder.loadTexts: rbridgeBasePortAccessPort.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortAccessPort.setDescription("TRILL traffic disable (access port) bit. If this bit is set, the goal is to avoid sending any TRILL frames, except TRILL-Hello frames, on the port, since it is intended only for native end-station traffic. This ensures that the link is not on the shortest path for any destination. Default value is 'false'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeBasePortP2pHellos = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortP2pHellos.setReference('RFC 6325, Section 4.9.1')
if mibBuilder.loadTexts: rbridgeBasePortP2pHellos.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortP2pHellos.setDescription("Use point-to-point (P2P) Hellos bit. If this bit is set, Hellos sent on this port are IS-IS P2P Hellos, not the default TRILL-Hellos. In addition, the IS-IS P2P three-way handshake is used on P2P RBridge links. Default value is 'false'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeBasePortState = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uninhibited", 1), ("portInhibited", 2), ("vlanInhibited", 3), ("disabled", 4), ("broken", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortState.setReference('RFC 6325, Section 4.2.4.3')
if mibBuilder.loadTexts: rbridgeBasePortState.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortState.setDescription("The port's current state. If the entire port is inhibited, its state is portInhibited(2). If specific VLANs are inhibited, the state is vlanInhibited(3), and rbridgeVlanPortTable will tell which VLANs are inhibited. For ports that are disabled (see rbridgeBasePortDisable), this object will have a value of disabled(4). If the RBridge has detected a port that is malfunctioning, it will place that port into the broken(5) state.")
rbridgeBasePortInhibitionTime = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 8), Unsigned32().clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortInhibitionTime.setReference('RFC 6325, Section 4.2.4.3')
if mibBuilder.loadTexts: rbridgeBasePortInhibitionTime.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortInhibitionTime.setDescription('Time in seconds that this RBridge will inhibit forwarding on this port after it observes a spanning tree root bridge change on a link or receives conflicting VLAN forwarder information. The default value is 30. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeBasePortDisableLearning = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortDisableLearning.setReference('RFC 6325, Section 4.8')
if mibBuilder.loadTexts: rbridgeBasePortDisableLearning.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortDisableLearning.setDescription("Disable learning of MAC addresses seen on this port. To disable learning, the value of this object must be set to 'true'. The default is 'false'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeBasePortDesiredDesigVlan = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 10), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortDesiredDesigVlan.setReference('RFC 6325, Section 4.4.3')
if mibBuilder.loadTexts: rbridgeBasePortDesiredDesigVlan.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortDesiredDesigVlan.setDescription('The VLAN that a Designated RBridge (DRB) will specify in its TRILL-Hellos as the VLAN to be used by all RBridges on the link for TRILL frames. This VLAN must be enabled on this port. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeBasePortDesigVlan = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 11), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortDesigVlan.setReference('RFC 6325, Section 4.4.3')
if mibBuilder.loadTexts: rbridgeBasePortDesigVlan.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortDesigVlan.setDescription('The VLAN being used on this link for TRILL frames.')
rbridgeBasePortStpRoot = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 12), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortStpRoot.setReference('RFC 6325, Section 4.2.4.3')
if mibBuilder.loadTexts: rbridgeBasePortStpRoot.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortStpRoot.setDescription('The bridge identifier of the root of the spanning tree, as learned from a Bridge PDU (BPDU) received on this port. For the Multiple Spanning Tree Protocol (MSTP), this is the root bridge of the Common and Internal Spanning Tree (CIST). If no BPDU has been heard, the value returned is a string of zeros.')
rbridgeBasePortStpRootChanges = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 13), Counter32()).setUnits('changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeBasePortStpRootChanges.setReference('RFC 6325, Section 4.9.3.2')
if mibBuilder.loadTexts: rbridgeBasePortStpRootChanges.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortStpRootChanges.setDescription('The number of times a change in the root bridge is seen from spanning tree BPDUs received on this port, indicating a change in bridged LAN topology. Each such change may cause the port to be inhibited for a period of time. This counter should be synchronized with ifCounterDiscontinuityTime. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbridgeBasePortStpWiringCloset = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 1, 9, 1, 14), BridgeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeBasePortStpWiringCloset.setReference('RFC 6325, Appendix A.3.3')
if mibBuilder.loadTexts: rbridgeBasePortStpWiringCloset.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortStpWiringCloset.setDescription('The Bridge ID to be used as the spanning tree root in BPDUs sent for the Wiring Closet topology solution described in [RFC6325]. Note that the same value of this object must be set on all RBridge ports participating in this solution. The default value is all 0s. A non-zero value configured into this object indicates that this solution is in use. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeConfidenceNative = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeConfidenceNative.setReference('RFC 6325, Section 4.8.1')
if mibBuilder.loadTexts: rbridgeConfidenceNative.setStatus('current')
if mibBuilder.loadTexts: rbridgeConfidenceNative.setDescription('The confidence level associated with MAC addresses learned from native frames. This is applicable to all RBridge ports. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeConfidenceDecap = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeConfidenceDecap.setReference('RFC 6325, Section 4.8.1')
if mibBuilder.loadTexts: rbridgeConfidenceDecap.setStatus('current')
if mibBuilder.loadTexts: rbridgeConfidenceDecap.setDescription('The confidence level associated with inner MAC addresses learned after decapsulation of a TRILL data frame. This is applicable to all RBridge ports. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeConfidenceStatic = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeConfidenceStatic.setReference('RFC 6325, Section 4.8.2')
if mibBuilder.loadTexts: rbridgeConfidenceStatic.setStatus('current')
if mibBuilder.loadTexts: rbridgeConfidenceStatic.setDescription('The confidence level associated with MAC addresses that are statically configured. The default value is 255. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeUniFdbTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 2, 4), )
if mibBuilder.loadTexts: rbridgeUniFdbTable.setReference('RFC 6325, Section 4.8')
if mibBuilder.loadTexts: rbridgeUniFdbTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFdbTable.setDescription('A table that contains information about unicast entries for which the device has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
rbridgeUniFdbEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeFdbId"), (0, "RBRIDGE-MIB", "rbridgeUniFdbAddr"))
if mibBuilder.loadTexts: rbridgeUniFdbEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFdbEntry.setDescription('Information about a specific unicast MAC address for which the RBridge has some forwarding and/or filtering information.')
rbridgeFdbId = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: rbridgeFdbId.setStatus('current')
if mibBuilder.loadTexts: rbridgeFdbId.setDescription('The identity of this Filtering Database.')
rbridgeUniFdbAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: rbridgeUniFdbAddr.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFdbAddr.setDescription('A unicast MAC address for which the device has forwarding information.')
rbridgeUniFdbPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbPort.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFdbPort.setDescription("Either the value '0', or the RBridge port number of the port on which a frame having a source address equal to the value of the corresponding instance of rbridgeUniFdbAddr has been seen. A value of '0' indicates that the port number has not been learned but that the device does have some information about this MAC address. Implementors are encouraged to assign the port value to this object whenever it is available, even for addresses for which the corresponding value of rbridgeUniFdbStatus is not learned(3).")
rbridgeUniFdbNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 4), RbridgeNickname()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbNickname.setReference('RFC 6325, Section 4.8.1')
if mibBuilder.loadTexts: rbridgeUniFdbNickname.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFdbNickname.setDescription('The RBridge nickname that is placed in the egress nickname field of a TRILL frame sent to this rbridgeFdbAddress in this rbridgeFdbId.')
rbridgeUniFdbConfidence = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbConfidence.setReference('RFC 6325, Section 4.8.1')
if mibBuilder.loadTexts: rbridgeUniFdbConfidence.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFdbConfidence.setDescription('The confidence level associated with this entry.')
rbridgeUniFdbStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5), ("esadi", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFdbStatus.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFdbStatus.setDescription("The status of this entry. The meanings of the values are: other(1) - none of the following. invalid(2) - this entry is no longer valid (e.g., it was learned but has since aged out) but has not yet been flushed from the table. learned(3) - the information in this entry was learned and is being used. self(4) - the value of the corresponding instance of rbridgeFdbAddress represents one of the device's addresses. The corresponding instance of rbridgeFdbPort indicates which of the device's ports has this address. mgmt(5) - the value of the corresponding instance of rbridgeFdbAddress was configured by management. esadi(6) - the value of the corresponding instance of rbridgeFdbAddress was learned from ESADI.")
rbridgeUniFibTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 2, 5), )
if mibBuilder.loadTexts: rbridgeUniFibTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFibTable.setDescription('A table that contains information about nicknames known by the RBridge. If Equal-Cost Multipath (ECMP) is implemented, there are as many entries for a nickname as there are ECMP paths available for it.')
rbridgeUniFibEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeUniFibNickname"), (0, "RBRIDGE-MIB", "rbridgeUniFibPort"), (0, "RBRIDGE-MIB", "rbridgeUniFibNextHop"))
if mibBuilder.loadTexts: rbridgeUniFibEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFibEntry.setDescription('A list of information about nicknames known by the RBridge. If ECMP is implemented, there are as many entries as there are ECMP paths available for a given nickname.')
rbridgeUniFibNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 1), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeUniFibNickname.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFibNickname.setDescription('An RBridge nickname for which this RBridge has forwarding information.')
rbridgeUniFibPort = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbridgeUniFibPort.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFibPort.setDescription('The RBridge port number of the port attached to the next-hop RBridge for the path towards the RBridge whose nickname is specified in this entry.')
rbridgeUniFibNextHop = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 3), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeUniFibNextHop.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFibNextHop.setDescription('The nickname of the next-hop RBridge for the path towards the RBridge whose nickname is specified in this entry.')
rbridgeUniFibHopCount = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeUniFibHopCount.setStatus('current')
if mibBuilder.loadTexts: rbridgeUniFibHopCount.setDescription('The hop count from this ingress RBridge to the egress RBridge whose nickname is specified in rbridgeUniFibNickname.')
rbridgeMultiFibTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 2, 6), )
if mibBuilder.loadTexts: rbridgeMultiFibTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeMultiFibTable.setDescription('A table that contains information about egress nicknames used for multi-destination frame forwarding by this RBridge.')
rbridgeMultiFibEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 2, 6, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeMultiFibNickname"))
if mibBuilder.loadTexts: rbridgeMultiFibEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeMultiFibEntry.setDescription('A list of information about egress nicknames used for multi-destination frame forwarding by this RBridge.')
rbridgeMultiFibNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 6, 1, 1), RbridgeNickname())
if mibBuilder.loadTexts: rbridgeMultiFibNickname.setStatus('current')
if mibBuilder.loadTexts: rbridgeMultiFibNickname.setDescription('The nickname of the multicast distribution tree.')
rbridgeMultiFibPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 2, 6, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeMultiFibPorts.setStatus('current')
if mibBuilder.loadTexts: rbridgeMultiFibPorts.setDescription('The list of ports to which a frame destined to this multicast distribution tree is flooded. This may be pruned further based on other forwarding information.')
rbridgeVlanTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 3, 1), )
if mibBuilder.loadTexts: rbridgeVlanTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanTable.setDescription('A table that contains information about VLANs on the RBridge.')
rbridgeVlanEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeVlanEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanEntry.setDescription('A list of information about VLANs on the RBridge.')
rbridgeVlanIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(4096, 4294967295), )))
if mibBuilder.loadTexts: rbridgeVlanIndex.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanIndex.setDescription('The VLAN-ID referring to this VLAN.')
rbridgeVlanForwarderLosts = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 2), Counter32()).setUnits('times').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanForwarderLosts.setReference('RFC 6325, Section 4.8.3')
if mibBuilder.loadTexts: rbridgeVlanForwarderLosts.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanForwarderLosts.setDescription('The number of times this RBridge has lost appointed forwarder status for this VLAN on any of its ports. Discontinuities in the value of this counter can occur at re-initialization of the management system.')
rbridgeVlanDisableLearning = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeVlanDisableLearning.setReference('RFC 6325, Section 4.8')
if mibBuilder.loadTexts: rbridgeVlanDisableLearning.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanDisableLearning.setDescription("Disable learning of MAC addresses seen in this VLAN. One application of this may be to restrict learning to ESADI. To disable learning, the value of this object should be set to 'true'. The default is 'false'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeVlanSnooping = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notSupported", 1), ("ipv4", 2), ("ipv6", 3), ("ipv4v6", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanSnooping.setReference('RFC 6325, Section 4.7')
if mibBuilder.loadTexts: rbridgeVlanSnooping.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanSnooping.setDescription('IP Multicast Snooping on this VLAN. For RBridges performing both IPv4 and IPv6 IP Multicast Snooping, the value returned is ipv4v6(4).')
rbridgeVlanPortTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 3, 2), )
if mibBuilder.loadTexts: rbridgeVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanPortTable.setDescription('A table that contains information about VLANs on an RBridge port.')
rbridgeVlanPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"), (0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanPortEntry.setDescription('A list of information about VLANs on the RBridge port.')
rbridgeVlanPortInhibited = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanPortInhibited.setReference('RFC 6325, Section 4.2.4.3')
if mibBuilder.loadTexts: rbridgeVlanPortInhibited.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanPortInhibited.setDescription("This VLAN has been inhibited by the RBridge due to conflicting forwarder information received from another RBridge, when the value of this object is 'true'.")
rbridgeVlanPortForwarder = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanPortForwarder.setReference('RFC 6325, Section 4.2.4.3')
if mibBuilder.loadTexts: rbridgeVlanPortForwarder.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanPortForwarder.setDescription("This RBridge is an appointed forwarder for this VLAN on this port, when the value of this object is 'true'.")
rbridgeVlanPortAnnouncing = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeVlanPortAnnouncing.setReference('RFC 6325, Section 4.4.3')
if mibBuilder.loadTexts: rbridgeVlanPortAnnouncing.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanPortAnnouncing.setDescription("TRILL-Hellos tagged with this VLAN can be sent by this RBridge on this port, when the value of this object is 'true'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeVlanPortDetectedVlanMapping = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeVlanPortDetectedVlanMapping.setReference('RFC 6325, Section 4.4.5')
if mibBuilder.loadTexts: rbridgeVlanPortDetectedVlanMapping.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanPortDetectedVlanMapping.setDescription("VLAN mapping has been detected on the link attached to this port, when the value of this object is 'true'.")
rbridgePortCounterTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 5, 1), )
if mibBuilder.loadTexts: rbridgePortCounterTable.setStatus('current')
if mibBuilder.loadTexts: rbridgePortCounterTable.setDescription('A table that contains per-port counters for this RBridge.')
rbridgePortCounterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"))
if mibBuilder.loadTexts: rbridgePortCounterEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgePortCounterEntry.setDescription('Counters for a port on this RBridge.')
rbridgePortRpfCheckFails = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 1), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortRpfCheckFails.setReference('RFC 6325, Section 4.5.2')
if mibBuilder.loadTexts: rbridgePortRpfCheckFails.setStatus('current')
if mibBuilder.loadTexts: rbridgePortRpfCheckFails.setDescription('The number of times a multi-destination frame was dropped on this port because the Reverse Path Forwarding (RPF) check failed. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the ifCounterDiscontinuityTime object of the associated interface.')
rbridgePortHopCountExceeds = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortHopCountExceeds.setReference('RFC 6325, Section 3.6')
if mibBuilder.loadTexts: rbridgePortHopCountExceeds.setStatus('current')
if mibBuilder.loadTexts: rbridgePortHopCountExceeds.setDescription('The number of times a frame was dropped on this port because its hop count was zero. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the ifCounterDiscontinuityTime object of the associated interface.')
rbridgePortOptionDrops = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 3), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortOptionDrops.setReference('RFC 6325, Section 3.5')
if mibBuilder.loadTexts: rbridgePortOptionDrops.setStatus('current')
if mibBuilder.loadTexts: rbridgePortOptionDrops.setDescription('The number of times a frame was dropped on this port because it contained unsupported options. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the ifCounterDiscontinuityTime object of the associated interface.')
rbridgePortTrillInFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 4), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortTrillInFrames.setReference('RFC 6325, Section 2.3')
if mibBuilder.loadTexts: rbridgePortTrillInFrames.setStatus('current')
if mibBuilder.loadTexts: rbridgePortTrillInFrames.setDescription('The number of TRILL-encapsulated frames that have been received by this port from its attached link, including management frames. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the ifCounterDiscontinuityTime object of the associated interface.')
rbridgePortTrillOutFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 5, 1, 1, 5), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgePortTrillOutFrames.setReference('RFC 6325, Section 2.3')
if mibBuilder.loadTexts: rbridgePortTrillOutFrames.setStatus('current')
if mibBuilder.loadTexts: rbridgePortTrillOutFrames.setDescription('The number of TRILL-encapsulated frames that have been transmitted by this port to its attached link, including management frames. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of the ifCounterDiscontinuityTime object of the associated interface.')
rbridgeEsadiTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 4, 1), )
if mibBuilder.loadTexts: rbridgeEsadiTable.setReference('RFC 6325, Section 4.2.5')
if mibBuilder.loadTexts: rbridgeEsadiTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiTable.setDescription('A table that contains information about ESADI instances on VLANs, if available.')
rbridgeEsadiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeEsadiEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiEntry.setDescription('Information about an ESADI instance on a VLAN.')
rbridgeEsadiEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiEnable.setReference('RFC 6325, Section 4.2.5')
if mibBuilder.loadTexts: rbridgeEsadiEnable.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiEnable.setDescription("If the RBridge is participating in an ESADI instance for this VLAN, the value of this object is 'true'. To disable participation, set it to 'false'. The value of this object MUST be retained across re-initializations of the management system.")
rbridgeEsadiConfidence = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiConfidence.setReference('RFC 6325, Section 4.2.5')
if mibBuilder.loadTexts: rbridgeEsadiConfidence.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiConfidence.setDescription('Confidence level of address entries sent by this ESADI instance. The default is 16. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeEsadiDrbPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiDrbPriority.setReference('RFC 6325, Section 4.2.5')
if mibBuilder.loadTexts: rbridgeEsadiDrbPriority.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiDrbPriority.setDescription('The priority of this RBridge for being selected as the DRB for this ESADI instance. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeEsadiDrb = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 4), RbridgeAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeEsadiDrb.setReference('RFC 6325, Section 4.2.5')
if mibBuilder.loadTexts: rbridgeEsadiDrb.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiDrb.setDescription("The DRB on this ESADI instance's virtual link.")
rbridgeEsadiDrbHoldingTime = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiDrbHoldingTime.setReference('RFC 6325, Section 4.2.5')
if mibBuilder.loadTexts: rbridgeEsadiDrbHoldingTime.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiDrbHoldingTime.setDescription('The holding time for this ESADI instance. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeEsadiRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbridgeEsadiRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiRowStatus.setDescription('This object indicates the status of the entry.')
rbridgeSnoopingPortTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 6, 1), )
if mibBuilder.loadTexts: rbridgeSnoopingPortTable.setReference('RFC 6325, Section 4.7')
if mibBuilder.loadTexts: rbridgeSnoopingPortTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingPortTable.setDescription('For RBridges implementing IP Multicast Snooping, information about ports on which the presence of IPv4 or IPv6 multicast routers has been detected.')
rbridgeSnoopingPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 6, 1, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeBasePort"), (0, "RBRIDGE-MIB", "rbridgeVlanIndex"))
if mibBuilder.loadTexts: rbridgeSnoopingPortEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingPortEntry.setDescription('Information about ports on which the presence of IPv4 or IPv6 multicast routers has been detected for a VLAN.')
rbridgeSnoopingPortAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("ipv4v6", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeSnoopingPortAddrType.setReference('RFC 6325, Section 4.7')
if mibBuilder.loadTexts: rbridgeSnoopingPortAddrType.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingPortAddrType.setDescription("The IP address type of an IP multicast router detected on this port and VLAN. If only IPv4 router(s) are detected, the value returned is 'ipv4'. If only IPv6 routers are detected, the value returned is 'ipv6'. If both IPv4 and IPv6 routers are detected on this port and VLAN, the value returned is 'ipv4v6'.")
rbridgeSnoopingAddrTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 6, 2), )
if mibBuilder.loadTexts: rbridgeSnoopingAddrTable.setReference('RFC 6325, Section 4.8')
if mibBuilder.loadTexts: rbridgeSnoopingAddrTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingAddrTable.setDescription('For RBridges implementing IP Multicast Snooping, information about IP multicast addresses being snooped.')
rbridgeSnoopingAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeVlanIndex"), (0, "RBRIDGE-MIB", "rbridgeSnoopingAddrType"), (0, "RBRIDGE-MIB", "rbridgeSnoopingAddr"))
if mibBuilder.loadTexts: rbridgeSnoopingAddrEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingAddrEntry.setDescription('Information about IP multicast addresses being snooped.')
rbridgeSnoopingAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rbridgeSnoopingAddrType.setReference('RFC 6325, Section 4.7')
if mibBuilder.loadTexts: rbridgeSnoopingAddrType.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingAddrType.setDescription('The IP multicast address type for which a listener has been detected by this RBridge. This MIB requires support for only IPv4 and IPv6 address types.')
rbridgeSnoopingAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: rbridgeSnoopingAddr.setReference('RFC 6325, Section 4.7')
if mibBuilder.loadTexts: rbridgeSnoopingAddr.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingAddr.setDescription('The IP multicast address for which a listener has been detected by this RBridge. The address type of this object is specified in rbridgeSnoopingAddrType. This MIB requires support for only global IPv4 and IPv6 addresses, so the length of the object can be either 4 or 16 bytes. Hence, the index will not exceed the OID size limit.')
rbridgeSnoopingAddrPorts = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 6, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeSnoopingAddrPorts.setReference('RFC 6325, Section 4.7')
if mibBuilder.loadTexts: rbridgeSnoopingAddrPorts.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingAddrPorts.setDescription('The set of ports on which a listener has been detected for this IP multicast address.')
rbridgeDtreePriority = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeDtreePriority.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreePriority.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreePriority.setDescription('The distribution tree root priority for this RBridge. The default value of this object is 32768. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeDtreeActiveTrees = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeActiveTrees.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreeActiveTrees.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeActiveTrees.setDescription('The total number of trees being computed by all RBridges in the campus.')
rbridgeDtreeMaxTrees = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeMaxTrees.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreeMaxTrees.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeMaxTrees.setDescription('The maximum number of trees this RBridge can compute.')
rbridgeDtreeDesiredUseTrees = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 7, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeDesiredUseTrees.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreeDesiredUseTrees.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeDesiredUseTrees.setDescription('The maximum number of trees this RBridge would like to use for transmission of ingress multi-destination frames.')
rbridgeDtreeTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 7, 5), )
if mibBuilder.loadTexts: rbridgeDtreeTable.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreeTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeTable.setDescription('Information about distribution trees being computed by this RBridge.')
rbridgeDtreeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeDtreeNumber"))
if mibBuilder.loadTexts: rbridgeDtreeEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeEntry.setDescription('List of information about distribution trees being computed by this RBridge.')
rbridgeDtreeNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbridgeDtreeNumber.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreeNumber.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeNumber.setDescription('The tree number of a distribution tree being computed by this RBridge.')
rbridgeDtreeNickname = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1, 2), RbridgeNickname()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeNickname.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreeNickname.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeNickname.setDescription('The nickname of the distribution tree.')
rbridgeDtreeIngress = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 7, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeDtreeIngress.setReference('RFC 6325, Section 4.5')
if mibBuilder.loadTexts: rbridgeDtreeIngress.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeIngress.setDescription('Indicates whether this RBridge might choose this distribution tree to ingress a multi-destination frame.')
rbridgeTrillMinMtuDesired = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 8, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeTrillMinMtuDesired.setReference('RFC 6325, Section 4.3')
if mibBuilder.loadTexts: rbridgeTrillMinMtuDesired.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillMinMtuDesired.setDescription('The desired minimum acceptable inter-RBridge link MTU for the campus, that is, originatingLSPBufferSize. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeTrillSz = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeTrillSz.setReference('RFC 6325, Section 4.3')
if mibBuilder.loadTexts: rbridgeTrillSz.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillSz.setDescription('The minimum acceptable inter-RBridge link size for the campus for the proper operation of TRILL IS-IS.')
rbridgeTrillMaxMtuProbes = MibScalar((1, 3, 6, 1, 2, 1, 214, 1, 8, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbridgeTrillMaxMtuProbes.setReference('RFC 6325, Section 4.3')
if mibBuilder.loadTexts: rbridgeTrillMaxMtuProbes.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillMaxMtuProbes.setDescription('The number of failed MTU-probes before the RBridge concludes that a particular MTU is not supported by a neighbor. The value of this object MUST be retained across re-initializations of the management system.')
rbridgeTrillNbrTable = MibTable((1, 3, 6, 1, 2, 1, 214, 1, 8, 4), )
if mibBuilder.loadTexts: rbridgeTrillNbrTable.setReference('RFC 6325, Section 4.4.2.1')
if mibBuilder.loadTexts: rbridgeTrillNbrTable.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillNbrTable.setDescription("Information about this RBridge's TRILL neighbors.")
rbridgeTrillNbrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1), ).setIndexNames((0, "RBRIDGE-MIB", "rbridgeTrillNbrMacAddr"))
if mibBuilder.loadTexts: rbridgeTrillNbrEntry.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillNbrEntry.setDescription("List of information about this RBridge's TRILL neighbors.")
rbridgeTrillNbrMacAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: rbridgeTrillNbrMacAddr.setReference('RFC 6325, Section 4.4.2.1')
if mibBuilder.loadTexts: rbridgeTrillNbrMacAddr.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillNbrMacAddr.setDescription('The MAC address of a neighbor of this RBridge.')
rbridgeTrillNbrMtu = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeTrillNbrMtu.setReference('RFC 6325, Section 4.3.2')
if mibBuilder.loadTexts: rbridgeTrillNbrMtu.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillNbrMtu.setDescription('MTU size for this neighbor for IS-IS communication purposes.')
rbridgeTrillNbrFailedMtuTest = MibTableColumn((1, 3, 6, 1, 2, 1, 214, 1, 8, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbridgeTrillNbrFailedMtuTest.setReference('RFC 6325, Section 4.3.1')
if mibBuilder.loadTexts: rbridgeTrillNbrFailedMtuTest.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillNbrFailedMtuTest.setDescription("If true, indicates that the neighbor's tested MTU is less than the minimum acceptable inter-bridge link MTU for the campus (1470).")
rbridgeBaseNewDrb = NotificationType((1, 3, 6, 1, 2, 1, 214, 0, 1))
if mibBuilder.loadTexts: rbridgeBaseNewDrb.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNewDrb.setDescription('The rbridgeBaseNewDrb notification indicates that the sending agent has become the new Designated RBridge; the notification is sent by an RBridge soon after its election as the new DRB root, e.g., upon expiration of the Topology Change Timer, immediately subsequent to its election.')
rbridgeBaseTopologyChange = NotificationType((1, 3, 6, 1, 2, 1, 214, 0, 2))
if mibBuilder.loadTexts: rbridgeBaseTopologyChange.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseTopologyChange.setDescription('The rbridgeBaseTopologyChange notification is sent by an RBridge when any of its configured ports transition to/from the VLAN-x designated forwarder. The notification is not sent if an rbridgeBaseNewDrb notification is sent for the same transition.')
rbridgeCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 2, 1))
rbridgeGroup = MibIdentifier((1, 3, 6, 1, 2, 1, 214, 2, 2))
rbridgeBaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 1)).setObjects(("RBRIDGE-MIB", "rbridgeBaseTrillVersion"), ("RBRIDGE-MIB", "rbridgeBaseNumPorts"), ("RBRIDGE-MIB", "rbridgeBaseForwardDelay"), ("RBRIDGE-MIB", "rbridgeBaseUniMultipathEnable"), ("RBRIDGE-MIB", "rbridgeBaseMultiMultipathEnable"), ("RBRIDGE-MIB", "rbridgeBaseAcceptEncapNonadj"), ("RBRIDGE-MIB", "rbridgeBaseNicknameNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeBaseGroup = rbridgeBaseGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseGroup.setDescription('A collection of objects providing basic control and status information for the RBridge.')
rbridgeBaseNicknameGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 2)).setObjects(("RBRIDGE-MIB", "rbridgeBaseNicknamePriority"), ("RBRIDGE-MIB", "rbridgeBaseNicknameDtrPriority"), ("RBRIDGE-MIB", "rbridgeBaseNicknameType"), ("RBRIDGE-MIB", "rbridgeBaseNicknameRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeBaseNicknameGroup = rbridgeBaseNicknameGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeBaseNicknameGroup.setDescription('A collection of objects providing basic control and status information for RBridge nicknames.')
rbridgeBasePortGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 3)).setObjects(("RBRIDGE-MIB", "rbridgeBasePortIfIndex"), ("RBRIDGE-MIB", "rbridgeBasePortDisable"), ("RBRIDGE-MIB", "rbridgeBasePortTrunkPort"), ("RBRIDGE-MIB", "rbridgeBasePortAccessPort"), ("RBRIDGE-MIB", "rbridgeBasePortP2pHellos"), ("RBRIDGE-MIB", "rbridgeBasePortState"), ("RBRIDGE-MIB", "rbridgeBasePortDesiredDesigVlan"), ("RBRIDGE-MIB", "rbridgeBasePortDesigVlan"), ("RBRIDGE-MIB", "rbridgeBasePortInhibitionTime"), ("RBRIDGE-MIB", "rbridgeBasePortDisableLearning"), ("RBRIDGE-MIB", "rbridgeBasePortStpRoot"), ("RBRIDGE-MIB", "rbridgeBasePortStpRootChanges"), ("RBRIDGE-MIB", "rbridgeBasePortStpWiringCloset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeBasePortGroup = rbridgeBasePortGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeBasePortGroup.setDescription('A collection of objects providing basic control and status information for RBridge ports.')
rbridgeFdbGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 4)).setObjects(("RBRIDGE-MIB", "rbridgeConfidenceNative"), ("RBRIDGE-MIB", "rbridgeConfidenceDecap"), ("RBRIDGE-MIB", "rbridgeConfidenceStatic"), ("RBRIDGE-MIB", "rbridgeUniFdbPort"), ("RBRIDGE-MIB", "rbridgeUniFdbNickname"), ("RBRIDGE-MIB", "rbridgeUniFdbConfidence"), ("RBRIDGE-MIB", "rbridgeUniFdbStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeFdbGroup = rbridgeFdbGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeFdbGroup.setDescription('A collection of objects providing information about the Unicast Address Database.')
rbridgeFibGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 5)).setObjects(("RBRIDGE-MIB", "rbridgeUniFibHopCount"), ("RBRIDGE-MIB", "rbridgeMultiFibPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeFibGroup = rbridgeFibGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeFibGroup.setDescription('A collection of objects providing information about the Unicast and Multicast FIBs.')
rbridgeVlanGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 6)).setObjects(("RBRIDGE-MIB", "rbridgeVlanForwarderLosts"), ("RBRIDGE-MIB", "rbridgeVlanDisableLearning"), ("RBRIDGE-MIB", "rbridgeVlanSnooping"), ("RBRIDGE-MIB", "rbridgeVlanPortInhibited"), ("RBRIDGE-MIB", "rbridgeVlanPortForwarder"), ("RBRIDGE-MIB", "rbridgeVlanPortAnnouncing"), ("RBRIDGE-MIB", "rbridgeVlanPortDetectedVlanMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeVlanGroup = rbridgeVlanGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeVlanGroup.setDescription('A collection of objects providing information about VLANs on the RBridge.')
rbridgePortCounterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 7)).setObjects(("RBRIDGE-MIB", "rbridgePortRpfCheckFails"), ("RBRIDGE-MIB", "rbridgePortHopCountExceeds"), ("RBRIDGE-MIB", "rbridgePortOptionDrops"), ("RBRIDGE-MIB", "rbridgePortTrillInFrames"), ("RBRIDGE-MIB", "rbridgePortTrillOutFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgePortCounterGroup = rbridgePortCounterGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgePortCounterGroup.setDescription('A collection of objects providing per-port counters for the RBridge.')
rbridgeEsadiGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 8)).setObjects(("RBRIDGE-MIB", "rbridgeEsadiEnable"), ("RBRIDGE-MIB", "rbridgeEsadiConfidence"), ("RBRIDGE-MIB", "rbridgeEsadiDrbPriority"), ("RBRIDGE-MIB", "rbridgeEsadiDrb"), ("RBRIDGE-MIB", "rbridgeEsadiDrbHoldingTime"), ("RBRIDGE-MIB", "rbridgeEsadiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeEsadiGroup = rbridgeEsadiGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeEsadiGroup.setDescription('A collection of objects providing information about ESADI instances on the RBridge.')
rbridgeSnoopingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 9)).setObjects(("RBRIDGE-MIB", "rbridgeSnoopingPortAddrType"), ("RBRIDGE-MIB", "rbridgeSnoopingAddrPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeSnoopingGroup = rbridgeSnoopingGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeSnoopingGroup.setDescription('A collection of objects providing information about IP Multicast Snooping. This MIB requires support for only global IPv4 and IPv6 address types in rbridgeSnoopingPortAddrType and rbridgeSnoopingAddrType, so the length of rbridgeSnoopingAddr can be either 4 or 16 bytes.')
rbridgeDtreeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 10)).setObjects(("RBRIDGE-MIB", "rbridgeDtreePriority"), ("RBRIDGE-MIB", "rbridgeDtreeActiveTrees"), ("RBRIDGE-MIB", "rbridgeDtreeMaxTrees"), ("RBRIDGE-MIB", "rbridgeDtreeDesiredUseTrees"), ("RBRIDGE-MIB", "rbridgeDtreeNickname"), ("RBRIDGE-MIB", "rbridgeDtreeIngress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeDtreeGroup = rbridgeDtreeGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeDtreeGroup.setDescription('A collection of objects providing information about distribution trees.')
rbridgeTrillGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 11)).setObjects(("RBRIDGE-MIB", "rbridgeTrillMinMtuDesired"), ("RBRIDGE-MIB", "rbridgeTrillSz"), ("RBRIDGE-MIB", "rbridgeTrillMaxMtuProbes"), ("RBRIDGE-MIB", "rbridgeTrillNbrMtu"), ("RBRIDGE-MIB", "rbridgeTrillNbrFailedMtuTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeTrillGroup = rbridgeTrillGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeTrillGroup.setDescription('A collection of objects providing information about TRILL neighbors.')
rbridgeNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 214, 2, 2, 12)).setObjects(("RBRIDGE-MIB", "rbridgeBaseNewDrb"), ("RBRIDGE-MIB", "rbridgeBaseTopologyChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeNotificationGroup = rbridgeNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: rbridgeNotificationGroup.setDescription('A collection of objects describing notifications (traps).')
rbridgeCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 214, 2, 1, 1)).setObjects(("RBRIDGE-MIB", "rbridgeBaseGroup"), ("RBRIDGE-MIB", "rbridgeBaseNicknameGroup"), ("RBRIDGE-MIB", "rbridgeBasePortGroup"), ("RBRIDGE-MIB", "rbridgeFdbGroup"), ("RBRIDGE-MIB", "rbridgeFibGroup"), ("RBRIDGE-MIB", "rbridgeVlanGroup"), ("RBRIDGE-MIB", "rbridgeDtreeGroup"), ("RBRIDGE-MIB", "rbridgeTrillGroup"), ("RBRIDGE-MIB", "rbridgeNotificationGroup"), ("RBRIDGE-MIB", "rbridgePortCounterGroup"), ("RBRIDGE-MIB", "rbridgeEsadiGroup"), ("RBRIDGE-MIB", "rbridgeSnoopingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeCompliance = rbridgeCompliance.setStatus('current')
if mibBuilder.loadTexts: rbridgeCompliance.setDescription('The compliance statement for support of RBridge services.')
rbridgeReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 214, 2, 1, 2)).setObjects(("RBRIDGE-MIB", "rbridgeBaseGroup"), ("RBRIDGE-MIB", "rbridgeBaseNicknameGroup"), ("RBRIDGE-MIB", "rbridgeBasePortGroup"), ("RBRIDGE-MIB", "rbridgeFdbGroup"), ("RBRIDGE-MIB", "rbridgeFibGroup"), ("RBRIDGE-MIB", "rbridgeVlanGroup"), ("RBRIDGE-MIB", "rbridgeDtreeGroup"), ("RBRIDGE-MIB", "rbridgeTrillGroup"), ("RBRIDGE-MIB", "rbridgeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbridgeReadOnlyCompliance = rbridgeReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: rbridgeReadOnlyCompliance.setDescription('When this MIB is implemented in read-only mode, then the implementation can claim read-only compliance. In that case, RBridge objects can be monitored but cannot be configured with this implementation.')
mibBuilder.exportSymbols("RBRIDGE-MIB", rbridgeBaseGroup=rbridgeBaseGroup, rbridgeSnoopingPortTable=rbridgeSnoopingPortTable, rbridgeBasePortDisable=rbridgeBasePortDisable, rbridgeTrillMaxMtuProbes=rbridgeTrillMaxMtuProbes, rbridgeVlanPortForwarder=rbridgeVlanPortForwarder, rbridgeMultiFibNickname=rbridgeMultiFibNickname, rbridgeSnoopingAddr=rbridgeSnoopingAddr, rbridgeUniFdbConfidence=rbridgeUniFdbConfidence, rbridgeBaseForwardDelay=rbridgeBaseForwardDelay, rbridgeBasePortEntry=rbridgeBasePortEntry, rbridgeSnoopingAddrPorts=rbridgeSnoopingAddrPorts, rbridgeBaseAcceptEncapNonadj=rbridgeBaseAcceptEncapNonadj, rbridgeBaseNicknamePriority=rbridgeBaseNicknamePriority, rbridgeSnoopingPortEntry=rbridgeSnoopingPortEntry, rbridgeEsadiDrb=rbridgeEsadiDrb, rbridgeVlanSnooping=rbridgeVlanSnooping, rbridgeBasePortDesigVlan=rbridgeBasePortDesigVlan, rbridgeDtreeIngress=rbridgeDtreeIngress, rbridgeUniFibNextHop=rbridgeUniFibNextHop, PYSNMP_MODULE_ID=rbridgeMIB, rbridgeUniFdbAddr=rbridgeUniFdbAddr, rbridgeBaseNicknameEntry=rbridgeBaseNicknameEntry, rbridgeDtreeGroup=rbridgeDtreeGroup, rbridgeNotificationGroup=rbridgeNotificationGroup, rbridgeBasePortAccessPort=rbridgeBasePortAccessPort, rbridgePortTrillOutFrames=rbridgePortTrillOutFrames, rbridgeConformance=rbridgeConformance, rbridgeTrillNbrMacAddr=rbridgeTrillNbrMacAddr, rbridgeBaseNicknameDtrPriority=rbridgeBaseNicknameDtrPriority, rbridgeVlanPortDetectedVlanMapping=rbridgeVlanPortDetectedVlanMapping, rbridgeMIB=rbridgeMIB, rbridgeEsadiDrbHoldingTime=rbridgeEsadiDrbHoldingTime, rbridgeTrill=rbridgeTrill, rbridgeDtreeNumber=rbridgeDtreeNumber, rbridgeTrillMinMtuDesired=rbridgeTrillMinMtuDesired, RbridgeNickname=RbridgeNickname, rbridgeEsadiTable=rbridgeEsadiTable, rbridgeVlanForwarderLosts=rbridgeVlanForwarderLosts, rbridgePortOptionDrops=rbridgePortOptionDrops, rbridgePortTrillInFrames=rbridgePortTrillInFrames, rbridgeUniFibTable=rbridgeUniFibTable, rbridgeBasePortDisableLearning=rbridgeBasePortDisableLearning, rbridgeBasePortInhibitionTime=rbridgeBasePortInhibitionTime, rbridgeConfidenceDecap=rbridgeConfidenceDecap, rbridgeUniFdbTable=rbridgeUniFdbTable, rbridgeSnoopingAddrType=rbridgeSnoopingAddrType, rbridgeUniFibPort=rbridgeUniFibPort, rbridgeNotifications=rbridgeNotifications, rbridgeBaseNicknameTable=rbridgeBaseNicknameTable, rbridgeBasePortTrunkPort=rbridgeBasePortTrunkPort, rbridgeObjects=rbridgeObjects, rbridgeBaseUniMultipathEnable=rbridgeBaseUniMultipathEnable, rbridgePortCounterTable=rbridgePortCounterTable, rbridgeEsadiDrbPriority=rbridgeEsadiDrbPriority, rbridgeBasePortP2pHellos=rbridgeBasePortP2pHellos, rbridgeTrillNbrMtu=rbridgeTrillNbrMtu, rbridgeBasePortStpRoot=rbridgeBasePortStpRoot, rbridgeCompliances=rbridgeCompliances, rbridgeReadOnlyCompliance=rbridgeReadOnlyCompliance, rbridgeBasePortIfIndex=rbridgeBasePortIfIndex, rbridgeDtree=rbridgeDtree, rbridgeSnoopingAddrTable=rbridgeSnoopingAddrTable, rbridgeEsadiGroup=rbridgeEsadiGroup, rbridgeEsadiConfidence=rbridgeEsadiConfidence, rbridgeBasePortTable=rbridgeBasePortTable, rbridgeVlanDisableLearning=rbridgeVlanDisableLearning, rbridgeMultiFibEntry=rbridgeMultiFibEntry, rbridgeVlanPortEntry=rbridgeVlanPortEntry, rbridgeDtreeTable=rbridgeDtreeTable, rbridgeDtreeNickname=rbridgeDtreeNickname, rbridgeBaseNicknameRowStatus=rbridgeBaseNicknameRowStatus, rbridgeEsadiEntry=rbridgeEsadiEntry, rbridgeTrillSz=rbridgeTrillSz, rbridgeUniFibHopCount=rbridgeUniFibHopCount, rbridgeBaseTrillVersion=rbridgeBaseTrillVersion, rbridgeFdbGroup=rbridgeFdbGroup, rbridgeBasePortState=rbridgeBasePortState, rbridgeSnoopingPortAddrType=rbridgeSnoopingPortAddrType, rbridgeVlanTable=rbridgeVlanTable, rbridgePortCounterEntry=rbridgePortCounterEntry, rbridgeBaseTopologyChange=rbridgeBaseTopologyChange, rbridgeFdb=rbridgeFdb, rbridgeFibGroup=rbridgeFibGroup, rbridgeEsadiRowStatus=rbridgeEsadiRowStatus, rbridgePortHopCountExceeds=rbridgePortHopCountExceeds, rbridgeFdbId=rbridgeFdbId, rbridgeSnoopingAddrEntry=rbridgeSnoopingAddrEntry, rbridgeUniFibNickname=rbridgeUniFibNickname, rbridgeUniFdbPort=rbridgeUniFdbPort, rbridgeTrillNbrEntry=rbridgeTrillNbrEntry, rbridgeCompliance=rbridgeCompliance, rbridgeEsadi=rbridgeEsadi, rbridgeDtreeMaxTrees=rbridgeDtreeMaxTrees, rbridgeDtreePriority=rbridgeDtreePriority, rbridgeVlanGroup=rbridgeVlanGroup, rbridgePortCounterGroup=rbridgePortCounterGroup, rbridgeUniFdbEntry=rbridgeUniFdbEntry, rbridgeBaseNicknameType=rbridgeBaseNicknameType, rbridgeEsadiEnable=rbridgeEsadiEnable, rbridgeBasePort=rbridgeBasePort, rbridgeVlanPortAnnouncing=rbridgeVlanPortAnnouncing, rbridgeBaseNicknameName=rbridgeBaseNicknameName, rbridgeUniFdbNickname=rbridgeUniFdbNickname, rbridgeDtreeDesiredUseTrees=rbridgeDtreeDesiredUseTrees, rbridgePortRpfCheckFails=rbridgePortRpfCheckFails, rbridgeDtreeActiveTrees=rbridgeDtreeActiveTrees, rbridgeTrillNbrTable=rbridgeTrillNbrTable, rbridgeBasePortGroup=rbridgeBasePortGroup, rbridgeMultiFibPorts=rbridgeMultiFibPorts, rbridgeVlan=rbridgeVlan, rbridgeVlanEntry=rbridgeVlanEntry, rbridgeVlanPortInhibited=rbridgeVlanPortInhibited, rbridgeVlanIndex=rbridgeVlanIndex, rbridgeTrillNbrFailedMtuTest=rbridgeTrillNbrFailedMtuTest, rbridgeBasePortStpWiringCloset=rbridgeBasePortStpWiringCloset, rbridgeBaseNicknameNumber=rbridgeBaseNicknameNumber, rbridgeDtreeEntry=rbridgeDtreeEntry, rbridgeBaseNumPorts=rbridgeBaseNumPorts, rbridgeMultiFibTable=rbridgeMultiFibTable, rbridgeUniFdbStatus=rbridgeUniFdbStatus, rbridgeBaseNicknameGroup=rbridgeBaseNicknameGroup, rbridgeSnoopingGroup=rbridgeSnoopingGroup, rbridgeConfidenceStatic=rbridgeConfidenceStatic, rbridgeBaseNewDrb=rbridgeBaseNewDrb, rbridgeBase=rbridgeBase, rbridgeBasePortDesiredDesigVlan=rbridgeBasePortDesiredDesigVlan, rbridgeConfidenceNative=rbridgeConfidenceNative, rbridgeVlanPortTable=rbridgeVlanPortTable, rbridgeGroup=rbridgeGroup, rbridgeUniFibEntry=rbridgeUniFibEntry, RbridgeAddress=RbridgeAddress, rbridgeBasePortStpRootChanges=rbridgeBasePortStpRootChanges, rbridgeTrillGroup=rbridgeTrillGroup, rbridgeCounter=rbridgeCounter, rbridgeBaseMultiMultipathEnable=rbridgeBaseMultiMultipathEnable, rbridgeSnooping=rbridgeSnooping)
