#
# PySNMP MIB module CISCO-IETF-VRRP-07-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-VRRP-07-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Gauge32, ObjectIdentity, MibIdentifier, NotificationType, ModuleIdentity, Bits, Integer32, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ObjectIdentity", "MibIdentifier", "NotificationType", "ModuleIdentity", "Bits", "Integer32", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Counter64")
StorageType, TimeInterval, TimeStamp, TruthValue, RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TimeInterval", "TimeStamp", "TruthValue", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
ciscoVrrp07MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 143))
ciscoVrrp07MIB.setRevisions(('2010-02-23 00:00', '2009-03-10 00:00', '2000-03-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVrrp07MIB.setRevisionsDescriptions(("Cisco'ized version of draft revision 200903100000Z", 'IP version neutral revision as published in RFCxxxx. Key revisions include : o Deprecating vrrpOperTable, vrrpRouterStatsTable and vrrpAssoIpAddrTable in favor of IP version neutral vrrpOperationsTable, vrrpRouterStatisticsTable and vrrpAssociatedIpAddrTable. o vrrpNodeVersion scalar objects has been deprecated and is replaced by the vrrpOperationsInetAddrType object in the vrrpOperationsTable. o vrrpAuthFailureTrap has been deprecated. o vrrpNewMasterReason object has been added to vrrpTrapNewMaster notification. o A new notification vrrpTrapProtoError has been added. o DEFVAL clause has been added.', 'This MIB describes objects used for managing Virtual Router Redundancy Protocol (VRRP) routers. Initial version as published in RFC 2787.',))
if mibBuilder.loadTexts: ciscoVrrp07MIB.setLastUpdated('201002230000Z')
if mibBuilder.loadTexts: ciscoVrrp07MIB.setOrganization('Cisco Systems, Inc')
if mibBuilder.loadTexts: ciscoVrrp07MIB.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vrrp@cisco.com')
if mibBuilder.loadTexts: ciscoVrrp07MIB.setDescription('This MIB describes objects used for managing Virtual Router Redundancy Protocol version 3 (VRRPv3) for IPv4 and IPv6. This MIB supports VRRP for IPv4 and IPv6 protocols simultaneously running on a given interface of a router. Copyright (C) The Internet Society (2009).')
class C07VrId(TextualConvention, Integer32):
    description = 'A number which, along with IP version and interface index (IfIndex), serves to uniquely identify a virtual router on a given VRRP router. There is no relationship between VrId value used on a IPv4 interface and VrId value used on IPv6 interface. It is legal to use same VrId value on IPv4 and IPv6 interfaces.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

c07vrrpOperations = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 143, 1))
c07vrrpStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 143, 2))
c07vrrpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 143, 3))
c07vrrpNodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpNodeVersion.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpNodeVersion.setDescription('This value identifies the particular version of the VRRP supported by this node. This object is deprecated in the IP Version Independent MIB.')
c07vrrpNotificationCntl = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c07vrrpNotificationCntl.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpNotificationCntl.setDescription("Indicates whether the VRRP-enabled router will generate SNMP notifications for events defined in this MIB. 'Enabled' results in SNMP notifications; 'disabled', no notifications are sent.")
c07vrrpOperationsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7), )
if mibBuilder.loadTexts: c07vrrpOperationsTable.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsTable.setDescription("Unified Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of 'vrrpOperationsEntry' items which describe the operational characteristics of a virtual router.")
c07vrrpOperationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1), ).setIndexNames((0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsInetAddrType"), (0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsVrId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: c07vrrpOperationsEntry.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsEntry.setDescription("An entry in the vrrpOperationsTable containing the operational characteristics of a virtual router. On a VRRP router, a given virtual router is identified by a combination of the IP version, VRID and ifIndex. ifIndex represents a physical interface of the router. Note that rows in this table can be distinguished on a multi-stacked device running VRRP over IPv4 and IPv6 on the same physical interface. Rows in the table cannot be modified unless the value of 'vrrpOperationsState' has transitioned to 'initialize'")
c07vrrpOperationsInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: c07vrrpOperationsInetAddrType.setReference('RFC 4001')
if mibBuilder.loadTexts: c07vrrpOperationsInetAddrType.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsInetAddrType.setDescription('The IP address type of C07VrrpOperationsEntry. This value applies to both vrrpOperationsMasterIpAddr and vrrpOperationsPrimaryIpAddr.')
c07vrrpOperationsVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 2), C07VrId())
if mibBuilder.loadTexts: c07vrrpOperationsVrId.setReference('RFC 4001')
if mibBuilder.loadTexts: c07vrrpOperationsVrId.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsVrId.setDescription('This object contains the Virtual Router Identifier (VRID).')
c07vrrpOperationsVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperationsVirtualMacAddr.setReference('STD 58 RFC 2578')
if mibBuilder.loadTexts: c07vrrpOperationsVirtualMacAddr.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsVirtualMacAddr.setDescription("The virtual MAC address of the virtual router. Although this object can be derived from the 'vrrpOperationsVrId' object, it is defined so that it is easily obtainable by a management application and can be included in VRRP-related SNMP notifications.")
c07vrrpOperationsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperationsState.setReference('RFC xxxx')
if mibBuilder.loadTexts: c07vrrpOperationsState.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsState.setDescription("The current state of the virtual router. This object has three defined values: - `initialize', which indicates that the virtual router is waiting for a startup event. - `backup', which indicates the virtual router is monitoring the availability of the master router. - `master', which indicates that the virtual router is forwarding packets for IP addresses that are associated with this router.")
c07vrrpOperationsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperationsPriority.setReference('RFC xxxx section 6.1')
if mibBuilder.loadTexts: c07vrrpOperationsPriority.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsPriority.setDescription("This object specifies the priority to be used for the virtual router master election process. Higher values imply higher priority. A priority of '0', although not settable, is sent by the master router to indicate that this router has ceased to participate in VRRP and a backup virtual router should transition to become a new master. A priority of 255 is used for the router that owns the associated IP address(es) for VRRP over IPv4 and hence not settable. A 'badValue(3)' should be returned when a user tries to set 0 or 255 for this object.")
c07vrrpOperationsAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperationsAddrCount.setReference('RFC xxxx Section 6.1')
if mibBuilder.loadTexts: c07vrrpOperationsAddrCount.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsAddrCount.setDescription('The number of IP addresses that are associated with this virtual router. This number is equal to the number of rows in the vrrpAssociatedAddrTable that correspond to a given IP version/VRID/ifIndex.')
c07vrrpOperationsMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperationsMasterIpAddr.setReference('RFC xxxx')
if mibBuilder.loadTexts: c07vrrpOperationsMasterIpAddr.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsMasterIpAddr.setDescription("The master router's real IP address. Master router would set this address to vrrpOperationsPrimaryIpAddr while transitioning to master state. For backup routers, this is the IP address listed as the source in VRRP advertisement last received by this virtual router.")
c07vrrpOperationsPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperationsPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsPrimaryIpAddr.setDescription("In the case where there are more than one IP Address (associated IP addresses) for a given `ifIndex', this object is used to specify the IP address that will become the vrrpOperationsMasterIpAddr', should the virtual router transition from backup state to master.")
c07vrrpOperationsAdvInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 9), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(100)).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperationsAdvInterval.setReference('RFC xxxx section 6.1')
if mibBuilder.loadTexts: c07vrrpOperationsAdvInterval.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsAdvInterval.setDescription('The time interval, in centiseconds, between sending advertisement messages. Only the master router sends VRRP advertisements.')
c07vrrpOperationsPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperationsPreemptMode.setReference('RFC xxxx section 6.1')
if mibBuilder.loadTexts: c07vrrpOperationsPreemptMode.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsPreemptMode.setDescription('Controls whether a higher priority virtual router will preempt a lower priority master.')
c07vrrpOperationsAcceptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperationsAcceptMode.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsAcceptMode.setDescription("Controls whether a virtual router in Master state will accept packets addressed to the address owner's IPv6 address as its own if it is not the IPv6 address owner. Default is False. This object is not relevant for rows representing VRRP over IPv4 and should be set to false.")
c07vrrpOperationsUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperationsUpTime.setReference('RFC 3768 section 6.1')
if mibBuilder.loadTexts: c07vrrpOperationsUpTime.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsUpTime.setDescription("This is the value of the `sysUpTime' object when this virtual router (i.e., the `vrrpOperationsState') transitioned out of `initialized'.")
c07vrrpOperationsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 13), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperationsStorageType.setReference('RFC4181 section 4.6.4')
if mibBuilder.loadTexts: c07vrrpOperationsStorageType.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsStorageType.setDescription('The storage type for this conceptual row. Write access is not required. It is optional to support nonVolatile StorageType enumeration.')
c07vrrpOperationsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 7, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperationsRowStatus.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsRowStatus.setDescription("The RowStatus variable should be used in accordance to installation and removal conventions for conceptual rows. When `vrrpOperationsRowStatus' is set to active(1), no other objects in the conceptual row can be modified. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the Corresponding instance of the `vrrpOperationsRowStatus' column will be read as notReady(3). In particular, a newly created row cannot be made active(1) until (minimally) the corresponding instance of vrrpOperationsInetAddrType, vrrpOperationsVrId and vrrpOperationsPrimaryIpAddr has been set and there is at least one active row in the `vrrpAssociatedIpAddrTable' defining an associated IP address. notInService(2) should be used to administratively bring the row down. A typical order of operation to add a row is: 1. Create a row in vrrpOperationsTable with createAndWait(5). 2. Create one or more corresponding rows in vrrpAssociatedIpAddrTable. 3. Populate the vrrpOperationsEntry. 4. set vrrpOperationsRowStatus to active(1). A typical order of operation to delete an entry is: 1. Set vrrpOperationsRowStatus to notInService(2). 2. Set the corresponding rows in vrrpAssociatedIpAddrTable to destroy(6) to delete the entry. 3. set vrrpOperationsRowStatus to destroy(6) to delete the entry.")
c07vrrpAssociatedIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 8), )
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddrTable.setDescription('The table of addresses associated with this virtual router.')
c07vrrpAssociatedIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 8, 1), ).setIndexNames((0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsInetAddrType"), (0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsVrId"), (0, "IF-MIB", "ifIndex"), (0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpAssociatedIpAddr"))
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddrEntry.setDescription("An entry in the table contains an IP address that is associated with a virtual router. The number of rows for a given IP version, VrID and ifIndex will equal the number of IP addresses associated (e.g., backed up) by the virtual router (equivalent to 'vrrpOperationsIpAddrCount'). Rows in the table cannot be modified unless the value of `vrrpOperationsState' has transitioned to `initialize'.")
c07vrrpAssociatedIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 8, 1, 1), InetAddress())
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddr.setReference('RFC 3768 Section 5.3.9')
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddr.setStatus('current')
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddr.setDescription('The assigned IP addresses that a virtual router is responsible for backing up.')
c07vrrpAssociatedStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 8, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpAssociatedStorageType.setReference('RFC4181 section 4.6.4')
if mibBuilder.loadTexts: c07vrrpAssociatedStorageType.setStatus('current')
if mibBuilder.loadTexts: c07vrrpAssociatedStorageType.setDescription('The storage type for this conceptual row. Write access is not required. It is optional to support nonVolatile StorageType enumeration.')
c07vrrpAssociatedIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: c07vrrpAssociatedIpAddrRowStatus.setDescription('The row status variable, used according to installation and removal conventions for conceptual rows. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). Setting this object to active(1) results in the addition of an associated address for a virtual router. Setting this object to notInService(2) results in administratively bringing down the row. Destroying the entry or setting it to destroy(6) removes the associated address from the virtual router. The use of other values is implementation-dependent. Only vrrpAssociatedStorageType can be modified when the row is in active(1) state for Implementations supporting write access to vrrpAssociatedStorageType Implementations should not allow deletion of the last row corresponding to an active row in vrrpOperationsTable. Refer to description of vrrpOperationsRowStatus for a typical row creation and deletion scenarios.')
c07vrrpRouterChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpRouterChecksumErrors.setReference('RFC 3768 Section 5.3.8')
if mibBuilder.loadTexts: c07vrrpRouterChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: c07vrrpRouterChecksumErrors.setDescription('The total number of VRRP packets received with an invalid VRRP checksum value.')
c07vrrpRouterVersionErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpRouterVersionErrors.setReference('RFC 3768 Section 5.3.1')
if mibBuilder.loadTexts: c07vrrpRouterVersionErrors.setStatus('current')
if mibBuilder.loadTexts: c07vrrpRouterVersionErrors.setDescription('The total number of VRRP packets received with an unknown or unsupported version number.')
c07vrrpRouterVrIdErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpRouterVrIdErrors.setReference('RFC 3768 Section 5.3.3')
if mibBuilder.loadTexts: c07vrrpRouterVrIdErrors.setStatus('current')
if mibBuilder.loadTexts: c07vrrpRouterVrIdErrors.setDescription('The total number of VRRP packets received with an invalid VRID for this virtual router.')
c07vrrpRouterStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5), )
if mibBuilder.loadTexts: c07vrrpRouterStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: c07vrrpRouterStatisticsTable.setDescription('Table of virtual router statistics.')
c07vrrpRouterStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1), )
c07vrrpOperationsEntry.registerAugmentions(("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterStatisticsEntry"))
c07vrrpRouterStatisticsEntry.setIndexNames(*c07vrrpOperationsEntry.getIndexNames())
if mibBuilder.loadTexts: c07vrrpRouterStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: c07vrrpRouterStatisticsEntry.setDescription('An entry in the table, containing statistics information about a given virtual router.')
c07vrrpStatisticsMasterTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsMasterTransitions.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsMasterTransitions.setDescription("The total number of times that this virtual router's state has transitioned to MASTER. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.")
c07vrrpStatisticsRcvdAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdAdvertisements.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdAdvertisements.setDescription('The total number of VRRP advertisements received by this virtual router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.')
c07vrrpStatisticsAdvIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsAdvIntervalErrors.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsAdvIntervalErrors.setDescription('The total number of VRRP advertisement packets received for which the advertisement interval is different than the one configured for the local virtual router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.')
c07vrrpStatisticsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsIpTtlErrors.setReference('RFC3768 Section 5.2.3')
if mibBuilder.loadTexts: c07vrrpStatisticsIpTtlErrors.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsIpTtlErrors.setDescription('The total number of VRRP packets received by the Virtual router with IPv4 TTL (for VRRP over IPv4) or IPv6 Hop Limit (for VRRP over IPv6) not equal to 255. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.')
c07vrrpStatisticsRcvdPriZeroPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdPriZeroPackets.setReference('RFC3768 Section 5.3.4')
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdPriZeroPackets.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdPriZeroPackets.setDescription("The total number of VRRP packets received by the virtual router with a priority of '0'. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.")
c07vrrpStatisticsSentPriZeroPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsSentPriZeroPackets.setReference('RFC3768 Section 5.3.4')
if mibBuilder.loadTexts: c07vrrpStatisticsSentPriZeroPackets.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsSentPriZeroPackets.setDescription("The total number of VRRP packets sent by the virtual router with a priority of '0'. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.")
c07vrrpStatisticsRcvdInvalidTypePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdInvalidTypePkts.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdInvalidTypePkts.setDescription("The number of VRRP packets received by the virtual router with an invalid value in the 'type' field. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.")
c07vrrpStatisticsAddressListErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsAddressListErrors.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsAddressListErrors.setDescription('The total number of packets received for which the address list does not match the locally configured list for the virtual router. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.')
c07vrrpStatisticsPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsPacketLengthErrors.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsPacketLengthErrors.setDescription('The total number of packets received with a packet length less than the length of the VRRP header. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of vrrpStatisticsDiscontinuityTime.')
c07vrrpStatisticsRcvdInvalidAuthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdInvalidAuthentications.setReference('RFC3768 Section 5.3.6')
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdInvalidAuthentications.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsRcvdInvalidAuthentications.setDescription('The total number of packets received with an unknown authentication type.')
c07vrrpStatisticsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.")
c07vrrpStatisticsRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 5, 1, 12), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatisticsRefreshRate.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsRefreshRate.setDescription('The minimum reasonable polling interval for this entry. This object provides an indication of the minimum Amount of time required to update the counters in this entry.')
c07vrrpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 143, 0))
c07vrrpNewMasterReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notmaster", 0), ("priority", 1), ("preempted", 2), ("masterNoResponse", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: c07vrrpNewMasterReason.setStatus('current')
if mibBuilder.loadTexts: c07vrrpNewMasterReason.setDescription('This indicates the reason for vrrpNewMaster trap. Used by vrrpTrapNewMaster trap.')
c07vrrpTrapProtoErrReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ipTtlError", 0), ("versionError", 1), ("checksumError", 2), ("vridError", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: c07vrrpTrapProtoErrReason.setStatus('current')
if mibBuilder.loadTexts: c07vrrpTrapProtoErrReason.setDescription('This indicates the reason for protocol error trap. Used by vrrpTrapProtoError trap.')
c07vrrpTrapNewMasterCntl = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c07vrrpTrapNewMasterCntl.setStatus('current')
if mibBuilder.loadTexts: c07vrrpTrapNewMasterCntl.setDescription("Controls whether the VRRP-enabled router should Generate vrrpTrapNewMaster notification. 'Enabled' results in vrrpTrapNewMaster notifications; 'disabled', results in no vrrpTrapNewMaster notifications.")
c07vrrpTrapProtoErrorCntl = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: c07vrrpTrapProtoErrorCntl.setStatus('current')
if mibBuilder.loadTexts: c07vrrpTrapProtoErrorCntl.setDescription("Controls whether the VRRP-enabled router should generate vrrpTrapProtoError notification. 'Enabled' results in vrrpTrapProtoError notifications; 'disabled', results in no vrrpTrapProtoError notifications.")
c07vrrpTrapNewMaster = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 143, 0, 1)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsMasterIpAddr"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpNewMasterReason"))
if mibBuilder.loadTexts: c07vrrpTrapNewMaster.setStatus('current')
if mibBuilder.loadTexts: c07vrrpTrapNewMaster.setDescription("The newMaster trap indicates that the sending agent has transitioned to 'Master' state.")
c07vrrpTrapProtoError = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 143, 0, 3)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapProtoErrReason"))
if mibBuilder.loadTexts: c07vrrpTrapProtoError.setStatus('current')
if mibBuilder.loadTexts: c07vrrpTrapProtoError.setDescription('The error trap indicates that the sending agent has encountered the protocol error indicated by vrrpTrapProtoErrorReason.')
c07vrrpOperTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3), )
if mibBuilder.loadTexts: c07vrrpOperTable.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperTable.setDescription("Operations table for a VRRP router which consists of a sequence (i.e., one or more conceptual rows) of 'vrrpOperEntry' items. This table has been deprecated as a new IP version neutral 'vrrpOperationsTable' has been added.")
c07vrrpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpOperVrId"))
if mibBuilder.loadTexts: c07vrrpOperEntry.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperEntry.setDescription("An entry in the vrrpOperTable containing the operational characteristics of a virtual router. On a VRRP router, a given virtual router is identified by a combination of the IF index and VRID. Rows in the table cannot be modified unless the value of `vrrpOperAdminState' is `disabled' and the `vrrpOperState' has transitioned to `initialize'. This object is deprecated in favor of the IP Version independent object, vrrpOperationsEntry")
c07vrrpOperVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 1), C07VrId())
if mibBuilder.loadTexts: c07vrrpOperVrId.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperVrId.setDescription('This object contains the Virtual Router Identifier (VRID). This object is deprecated in favor of the IP Version independent object, vrrpOperationsVrId')
c07vrrpOperVirtualMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperVirtualMacAddr.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperVirtualMacAddr.setDescription("The virtual MAC address of the virtual router. Although this object can be derived from the 'vrrpOperVrId' object, it is defined so that it is easily obtainable by a management application and can be included in VRRP-related SNMP traps. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsVirtualMacAddr.")
c07vrrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperState.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperState.setDescription("The current state of the virtual router. This object has three defined values: - `initialize', which indicates that all the virtual router is waiting for a startup event. - `backup', which indicates the virtual router is monitoring the availability of the master router. - `master', which indicates that the virtual router is forwarding packets for IP addresses that are associated with this router. Setting the `vrrpOperAdminState' object (below) initiates transitions in the value of this object. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsState.")
c07vrrpOperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperAdminState.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperAdminState.setDescription("This object will enable/disable the virtual router function. Setting the value to `up', will transition the state of the virtual router from `initialize' to `backup' or `master', depending on the value of `vrrpOperPriority'. Setting the value to `down', will transition the router from `master' or `backup' to `initialize'. State transitions may not be immediate; they sometimes depend on other factors, such as the interface (IF) state. The `vrrpOperAdminState' object must be set to `down' prior to modifying the other read-create objects in the conceptual row. The value of the `vrrpOperRowStatus' object (below) must be `active', signifying that the conceptual row is valid (i.e., the objects are correctly set), in order for this object to be set to `up'. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsState.")
c07vrrpOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperPriority.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperPriority.setDescription("This object specifies the priority to be used for the virtual router master election process. Higher values imply higher priority. A priority of '0', although not settable, is sent by the master router to indicate that this router has ceased to participate in VRRP and a backup virtual router should transition to become a new master. A priority of 255 is used for the router that owns the associated IP address(es). This object is deprecated in favor of the IP Version Independent object, vrrpOperationsPriority.")
c07vrrpOperIpAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperIpAddrCount.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperIpAddrCount.setDescription('The number of IP addresses that are associated with this virtual router. This number is equal to the number of rows in the vrrpAssoIpAddrTable that correspond to a given IF index/VRID pair. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsAddrCount.')
c07vrrpOperMasterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperMasterIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperMasterIpAddr.setDescription("The master router's real (primary) IP address. This is the IP address listed as the source in VRRP advertisement last received by this virtual router. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsMasterIpAddr.")
c07vrrpOperPrimaryIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperPrimaryIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperPrimaryIpAddr.setDescription("In the case where there is more than one IP address for a given `ifIndex', this object is used to specify the IP address that will become the `vrrpOperMasterIpAddr', should the virtual router transition from backup to master. If this object is set to 0.0.0.0, the IP address which is numerically lowest (of all the associated IP address for the interface) will be selected. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsPrimaryIpAddr.")
c07vrrpOperAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simpleTextPassword", 2), ("ipAuthenticationHeader", 3))).clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperAuthType.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperAuthType.setDescription('Authentication type used for VRRP protocol exchanges between virtual routers. This value of this object is the same for a given ifIndex. New enumerations to this list can only be added via a new RFC on the standards track. This object is deprecated in the IP Version MIB.')
c07vrrpOperAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperAuthKey.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperAuthKey.setDescription("The Authentication Key. This object is set according to the value of the 'vrrpOperAuthType' object ('simpleTextPassword' or 'ipAuthenticationHeader'). If the length of the value is less than 16 octets, the agent will left adjust and zero fill to 16 octets. The value of this object is the same for a given ifIndex. When read, vrrpOperAuthKey always returns an Octet String of length zero. This object is deprecated in the IP Version MIB.")
c07vrrpOperAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperAdvertisementInterval.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperAdvertisementInterval.setDescription('The time interval, in seconds, between sending advertisement messages. Only the master router sends VRRP advertisements. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsAdvInterval.')
c07vrrpOperPreemptMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperPreemptMode.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperPreemptMode.setDescription('Controls whether a higher priority virtual router will preempt a lower priority master. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsPreemptMode.')
c07vrrpOperVirtualRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpOperVirtualRouterUpTime.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperVirtualRouterUpTime.setDescription("This is the value of the `sysUpTime' object when this virtual router (i.e., the `vrrpOperState') transitioned out of `initialized'. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsUpTime.")
c07vrrpOperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ip", 1), ("bridge", 2), ("decnet", 3), ("other", 4))).clone('ip')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperProtocol.setDescription('The particular protocol being controlled by this Virtual Router. New enumerations to this list can only be added via a new RFC on the standards track. This object is deprecated in the IP Version Independent MIB.')
c07vrrpOperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpOperRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperRowStatus.setDescription("The row status variable, used in accordance to installation and removal conventions for conceptual rows. The rowstatus of a currently active row in the vrrpOperTable is constrained by the operational state of the corresponding virtual router. When `vrrpOperRowStatus' is set to active(1), no other objects in the conceptual row, with the exception of `vrrpOperAdminState', can be modified. Prior to setting the `vrrpOperRowStatus' object from `active' to a different value, the `vrrpOperAdminState' object must be set to `down' and the `vrrpOperState' object be transitioned to `initialize'. To create a row in this table, a manager sets this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the `vrrpOperRowStatus' column will be read as notReady(3). In particular, a newly created row cannot be made active(1) until (minimally) the corresponding instance of `vrrpOperVrId' has been set and there is at least one active row in the `vrrpAssoIpAddrTable' defining an associated IP address for the virtual router. This object is deprecated in favor of the IP Version Independent object, vrrpOperationsRowStatus.")
c07vrrpAssoIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 4), )
if mibBuilder.loadTexts: c07vrrpAssoIpAddrTable.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpAssoIpAddrTable.setDescription('The table of addresses associated with this virtual router. This object is deprecated in favor of the IP Version Independent object, vrrpAssociatedIpAddrTable.')
c07vrrpAssoIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpOperVrId"), (0, "CISCO-IETF-VRRP-07-MIB", "c07vrrpAssoIpAddr"))
if mibBuilder.loadTexts: c07vrrpAssoIpAddrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpAssoIpAddrEntry.setDescription("An entry in the table contains an IP address that is associated with a virtual router. The number of rows for a given ifIndex and VrId will equal the number of IP addresses associated (e.g., backed up) by the virtual router (equivalent to 'vrrpOperIpAddrCount'). Rows in the table cannot be modified unless the value of `vrrpOperAdminState' is `disabled' and the `vrrpOperState' has transitioned to `initialize'. This object is deprecated in favor of the IP Version Independent object, vrrpAssociatedIpAddrEntry.")
c07vrrpAssoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: c07vrrpAssoIpAddr.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpAssoIpAddr.setDescription('The assigned IP addresses that a virtual router is responsible for backing up. This object is deprecated in favor of the IP Version Independent object, vrrpAssociatedIpAddr.')
c07vrrpAssoIpAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: c07vrrpAssoIpAddrRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpAssoIpAddrRowStatus.setDescription('The row status variable, used according to installation and removal conventions for conceptual rows. Setting this object to active(1) or createAndGo(4) results in the addition of an associated address for a virtual router. Destroying the entry or setting it to notInService(2) removes the associated address from the virtual router. The use of other values is implementation-dependent. This object is deprecated in favor of the IP Version Independent object, vrrpAssociatedIpAddrRowStatus.')
c07vrrpRouterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4), )
if mibBuilder.loadTexts: c07vrrpRouterStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpRouterStatsTable.setDescription('Table of virtual router statistics. This object is deprecated in favor of the IP Version Independent object, vrrpRouterStatisticsTable.')
c07vrrpRouterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1), )
c07vrrpOperEntry.registerAugmentions(("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterStatsEntry"))
c07vrrpRouterStatsEntry.setIndexNames(*c07vrrpOperEntry.getIndexNames())
if mibBuilder.loadTexts: c07vrrpRouterStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpRouterStatsEntry.setDescription('An entry in the table, containing statistics information about a given virtual router. This object is deprecated in favor of the IP Version Independent object, vrrpRouterStatisticsEntry.')
c07vrrpStatsBecomeMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsBecomeMaster.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsBecomeMaster.setDescription("The total number of times that this virtual router's state has transitioned to MASTER. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsMasterTransitions.")
c07vrrpStatsAdvertiseRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsAdvertiseRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsAdvertiseRcvd.setDescription('The total number of VRRP advertisements received by this virtual router. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsRcvdAdvertisements.')
c07vrrpStatsAdvertiseIntervalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsAdvertiseIntervalErrors.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsAdvertiseIntervalErrors.setDescription('The total number of VRRP advertisement packets received for which the advertisement interval is different than the one configured for the local virtual router. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsAdvIntervalErrors.')
c07vrrpStatsAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsAuthFailures.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsAuthFailures.setDescription('The total number of VRRP packets received that do not pass the authentication check. This object is deprecated in the IP Version MIB.')
c07vrrpStatsIpTtlErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsIpTtlErrors.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsIpTtlErrors.setDescription('The total number of VRRP packets received by the virtual router with IP TTL (Time-To-Live) not equal to 255. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsIpTtlErrors.')
c07vrrpStatsPriorityZeroPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsPriorityZeroPktsRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsPriorityZeroPktsRcvd.setDescription("The total number of VRRP packets received by the virtual router with a priority of '0'. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsRcvdPriZeroPackets.")
c07vrrpStatsPriorityZeroPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsPriorityZeroPktsSent.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsPriorityZeroPktsSent.setDescription("The total number of VRRP packets sent by the virtual router with a priority of '0'. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsSentPriZeroPackets.")
c07vrrpStatsInvalidTypePktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsInvalidTypePktsRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsInvalidTypePktsRcvd.setDescription("The number of VRRP packets received by the virtual router with an invalid value in the 'type' field. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsRcvdInvalidTypePkts.")
c07vrrpStatsAddressListErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsAddressListErrors.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsAddressListErrors.setDescription('The total number of packets received for which the address list does not match the locally configured list for the virtual router. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsAddressListErrors.')
c07vrrpStatsInvalidAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsInvalidAuthType.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsInvalidAuthType.setDescription('The total number of packets received with an unknown authentication type. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsPacketLengthErrors.')
c07vrrpStatsAuthTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsAuthTypeMismatch.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsAuthTypeMismatch.setDescription("The total number of packets received with 'Auth Type' not equal to the locally configured authentication method (`vrrpOperAuthType'). This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsRcvdInvalidAuthentications.")
c07vrrpStatsPacketLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 143, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: c07vrrpStatsPacketLengthErrors.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsPacketLengthErrors.setDescription('The total number of packets received with a packet length less than the length of the VRRP header. This object is deprecated in favor of the IP Version Independent object, vrrpStatisticsPacketLengthErrors.')
c07vrrpTrapPacketSrc = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 5), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: c07vrrpTrapPacketSrc.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpTrapPacketSrc.setDescription('The IP address of an inbound VRRP packet. Used by vrrpTrapAuthFailure trap. This object is deprecated in the IP Version MIB.')
c07vrrpTrapAuthErrorType = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 143, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalidAuthType", 1), ("authTypeMismatch", 2), ("authFailure", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: c07vrrpTrapAuthErrorType.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpTrapAuthErrorType.setDescription('Potential types of configuration conflicts. Used by vrrpAuthFailure trap. This object is deprecated in the IP Version MIB.')
c07vrrpTrapAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 143, 0, 2)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapPacketSrc"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapAuthErrorType"))
if mibBuilder.loadTexts: c07vrrpTrapAuthFailure.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpTrapAuthFailure.setDescription("A vrrpAuthFailure trap signifies that a packet has been received from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type. Implementation of this trap is optional. This object is has been deprecated.")
c07vrrpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 1))
c07vrrpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2))
c07vrrpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 1, 1)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpMIBCompliance = c07vrrpMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpMIBCompliance.setDescription('This compliance is deprecated in favour of vrrpModuleFullCompliance.')
c07vrrpModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 1, 2)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapInfoGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpModuleFullCompliance = c07vrrpModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: c07vrrpModuleFullCompliance.setDescription('The compliance statement for both VRRP for IPv4 and VRRP for IPv6 implementations.')
c07vrrpModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 1, 3)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapInfoGroup"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpModuleReadOnlyCompliance = c07vrrpModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: c07vrrpModuleReadOnlyCompliance.setDescription('When this MIB is implemented without support for read- create (i.e. in read-only mode), then such an implementation can claim read-only compliance. Such a device can then be monitored but can not be configured with this MIB.')
c07vrrpOperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 1)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpNodeVersion"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpNotificationCntl"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperVirtualMacAddr"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperState"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperAdminState"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperPriority"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperIpAddrCount"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperMasterIpAddr"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperPrimaryIpAddr"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperAuthType"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperAuthKey"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperAdvertisementInterval"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperPreemptMode"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperVirtualRouterUpTime"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperProtocol"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperRowStatus"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpAssoIpAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpOperGroup = c07vrrpOperGroup.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpOperGroup.setDescription('Conformance group for VRRP operations.')
c07vrrpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 2)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterChecksumErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterVersionErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterVrIdErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsBecomeMaster"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsAdvertiseRcvd"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsAdvertiseIntervalErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsAuthFailures"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsIpTtlErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsPriorityZeroPktsRcvd"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsPriorityZeroPktsSent"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsInvalidTypePktsRcvd"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsAddressListErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsInvalidAuthType"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsAuthTypeMismatch"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatsPacketLengthErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpStatsGroup = c07vrrpStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpStatsGroup.setDescription('Conformance group for VRRP statistics.')
c07vrrpTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 3)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapPacketSrc"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapAuthErrorType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpTrapGroup = c07vrrpTrapGroup.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpTrapGroup.setDescription('Conformance group for objects contained in VRRP notifications.')
c07vrrpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 4)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapAuthFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpNotificationGroup = c07vrrpNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: c07vrrpNotificationGroup.setDescription('The VRRP MIB Notification Group.')
c07vrrpOperationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 5)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapNewMasterCntl"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapProtoErrorCntl"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsVirtualMacAddr"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsState"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsPriority"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsMasterIpAddr"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsAdvInterval"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsPreemptMode"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsAcceptMode"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsUpTime"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsStorageType"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsRowStatus"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsAddrCount"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpOperationsPrimaryIpAddr"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpAssociatedStorageType"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpAssociatedIpAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpOperationsGroup = c07vrrpOperationsGroup.setStatus('current')
if mibBuilder.loadTexts: c07vrrpOperationsGroup.setDescription('Conformance group for VRRP over IPv4 and IPv6 operations.')
c07vrrpStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 6)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterChecksumErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterVersionErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpRouterVrIdErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsMasterTransitions"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsRcvdAdvertisements"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsAdvIntervalErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsRcvdPriZeroPackets"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsSentPriZeroPackets"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsRcvdInvalidTypePkts"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsIpTtlErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsAddressListErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsPacketLengthErrors"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsRcvdInvalidAuthentications"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsDiscontinuityTime"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpStatisticsRefreshRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpStatisticsGroup = c07vrrpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: c07vrrpStatisticsGroup.setDescription('Conformance group for VRRP over IPv4 and IPv6 statistics.')
c07vrrpTrapInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 8)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapProtoErrReason"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpNewMasterReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpTrapInfoGroup = c07vrrpTrapInfoGroup.setStatus('current')
if mibBuilder.loadTexts: c07vrrpTrapInfoGroup.setDescription('Conformance group for objects contained in VRRP notifications.')
c07vrrpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 143, 3, 2, 9)).setObjects(("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapNewMaster"), ("CISCO-IETF-VRRP-07-MIB", "c07vrrpTrapProtoError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    c07vrrpNotificationsGroup = c07vrrpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: c07vrrpNotificationsGroup.setDescription('The VRRP MIB Notification Group.')
mibBuilder.exportSymbols("CISCO-IETF-VRRP-07-MIB", c07vrrpStatisticsGroup=c07vrrpStatisticsGroup, c07vrrpStatsPriorityZeroPktsRcvd=c07vrrpStatsPriorityZeroPktsRcvd, c07vrrpNotificationCntl=c07vrrpNotificationCntl, c07vrrpRouterChecksumErrors=c07vrrpRouterChecksumErrors, c07vrrpStatsGroup=c07vrrpStatsGroup, c07vrrpAssociatedIpAddrEntry=c07vrrpAssociatedIpAddrEntry, c07vrrpAssociatedIpAddrRowStatus=c07vrrpAssociatedIpAddrRowStatus, c07vrrpOperPreemptMode=c07vrrpOperPreemptMode, c07vrrpModuleFullCompliance=c07vrrpModuleFullCompliance, PYSNMP_MODULE_ID=ciscoVrrp07MIB, c07vrrpOperAdvertisementInterval=c07vrrpOperAdvertisementInterval, c07vrrpNotifications=c07vrrpNotifications, c07vrrpRouterStatsEntry=c07vrrpRouterStatsEntry, c07vrrpStatisticsRcvdInvalidTypePkts=c07vrrpStatisticsRcvdInvalidTypePkts, c07vrrpOperMasterIpAddr=c07vrrpOperMasterIpAddr, c07vrrpStatisticsRefreshRate=c07vrrpStatisticsRefreshRate, ciscoVrrp07MIB=ciscoVrrp07MIB, c07vrrpStatisticsAddressListErrors=c07vrrpStatisticsAddressListErrors, c07vrrpTrapProtoError=c07vrrpTrapProtoError, c07vrrpOperRowStatus=c07vrrpOperRowStatus, c07vrrpAssociatedIpAddrTable=c07vrrpAssociatedIpAddrTable, c07vrrpStatisticsRcvdAdvertisements=c07vrrpStatisticsRcvdAdvertisements, c07vrrpOperAuthType=c07vrrpOperAuthType, c07vrrpOperationsMasterIpAddr=c07vrrpOperationsMasterIpAddr, c07vrrpStatsAuthTypeMismatch=c07vrrpStatsAuthTypeMismatch, c07vrrpStatsPriorityZeroPktsSent=c07vrrpStatsPriorityZeroPktsSent, c07vrrpStatisticsRcvdInvalidAuthentications=c07vrrpStatisticsRcvdInvalidAuthentications, c07vrrpOperGroup=c07vrrpOperGroup, c07vrrpOperationsEntry=c07vrrpOperationsEntry, c07vrrpNewMasterReason=c07vrrpNewMasterReason, c07vrrpOperVrId=c07vrrpOperVrId, c07vrrpOperPriority=c07vrrpOperPriority, c07vrrpOperPrimaryIpAddr=c07vrrpOperPrimaryIpAddr, c07vrrpOperationsAcceptMode=c07vrrpOperationsAcceptMode, c07vrrpAssoIpAddrEntry=c07vrrpAssoIpAddrEntry, c07vrrpStatsBecomeMaster=c07vrrpStatsBecomeMaster, c07vrrpOperationsTable=c07vrrpOperationsTable, c07vrrpAssociatedIpAddr=c07vrrpAssociatedIpAddr, c07vrrpNodeVersion=c07vrrpNodeVersion, c07vrrpMIBCompliance=c07vrrpMIBCompliance, c07vrrpOperVirtualMacAddr=c07vrrpOperVirtualMacAddr, c07vrrpTrapProtoErrorCntl=c07vrrpTrapProtoErrorCntl, c07vrrpStatistics=c07vrrpStatistics, c07vrrpAssoIpAddr=c07vrrpAssoIpAddr, c07vrrpStatsAddressListErrors=c07vrrpStatsAddressListErrors, c07vrrpMIBGroups=c07vrrpMIBGroups, c07vrrpTrapGroup=c07vrrpTrapGroup, c07vrrpOperationsVrId=c07vrrpOperationsVrId, c07vrrpStatsAdvertiseIntervalErrors=c07vrrpStatsAdvertiseIntervalErrors, c07vrrpTrapInfoGroup=c07vrrpTrapInfoGroup, c07vrrpStatisticsMasterTransitions=c07vrrpStatisticsMasterTransitions, c07vrrpOperationsInetAddrType=c07vrrpOperationsInetAddrType, c07vrrpRouterStatisticsTable=c07vrrpRouterStatisticsTable, C07VrId=C07VrId, c07vrrpOperAdminState=c07vrrpOperAdminState, c07vrrpTrapProtoErrReason=c07vrrpTrapProtoErrReason, c07vrrpOperationsStorageType=c07vrrpOperationsStorageType, c07vrrpModuleReadOnlyCompliance=c07vrrpModuleReadOnlyCompliance, c07vrrpStatsAdvertiseRcvd=c07vrrpStatsAdvertiseRcvd, c07vrrpAssoIpAddrRowStatus=c07vrrpAssoIpAddrRowStatus, c07vrrpOperProtocol=c07vrrpOperProtocol, c07vrrpTrapAuthFailure=c07vrrpTrapAuthFailure, c07vrrpOperEntry=c07vrrpOperEntry, c07vrrpRouterStatsTable=c07vrrpRouterStatsTable, c07vrrpTrapAuthErrorType=c07vrrpTrapAuthErrorType, c07vrrpRouterStatisticsEntry=c07vrrpRouterStatisticsEntry, c07vrrpNotificationsGroup=c07vrrpNotificationsGroup, c07vrrpConformance=c07vrrpConformance, c07vrrpOperAuthKey=c07vrrpOperAuthKey, c07vrrpOperationsVirtualMacAddr=c07vrrpOperationsVirtualMacAddr, c07vrrpStatisticsPacketLengthErrors=c07vrrpStatisticsPacketLengthErrors, c07vrrpTrapPacketSrc=c07vrrpTrapPacketSrc, c07vrrpStatisticsSentPriZeroPackets=c07vrrpStatisticsSentPriZeroPackets, c07vrrpOperState=c07vrrpOperState, c07vrrpTrapNewMasterCntl=c07vrrpTrapNewMasterCntl, c07vrrpStatsInvalidTypePktsRcvd=c07vrrpStatsInvalidTypePktsRcvd, c07vrrpOperationsAddrCount=c07vrrpOperationsAddrCount, c07vrrpTrapNewMaster=c07vrrpTrapNewMaster, c07vrrpOperationsState=c07vrrpOperationsState, c07vrrpStatsIpTtlErrors=c07vrrpStatsIpTtlErrors, c07vrrpMIBCompliances=c07vrrpMIBCompliances, c07vrrpRouterVrIdErrors=c07vrrpRouterVrIdErrors, c07vrrpOperationsPreemptMode=c07vrrpOperationsPreemptMode, c07vrrpAssociatedStorageType=c07vrrpAssociatedStorageType, c07vrrpOperationsAdvInterval=c07vrrpOperationsAdvInterval, c07vrrpRouterVersionErrors=c07vrrpRouterVersionErrors, c07vrrpOperVirtualRouterUpTime=c07vrrpOperVirtualRouterUpTime, c07vrrpAssoIpAddrTable=c07vrrpAssoIpAddrTable, c07vrrpOperationsPriority=c07vrrpOperationsPriority, c07vrrpOperationsRowStatus=c07vrrpOperationsRowStatus, c07vrrpOperTable=c07vrrpOperTable, c07vrrpStatsPacketLengthErrors=c07vrrpStatsPacketLengthErrors, c07vrrpStatsAuthFailures=c07vrrpStatsAuthFailures, c07vrrpStatisticsIpTtlErrors=c07vrrpStatisticsIpTtlErrors, c07vrrpOperIpAddrCount=c07vrrpOperIpAddrCount, c07vrrpOperationsUpTime=c07vrrpOperationsUpTime, c07vrrpNotificationGroup=c07vrrpNotificationGroup, c07vrrpStatisticsDiscontinuityTime=c07vrrpStatisticsDiscontinuityTime, c07vrrpOperations=c07vrrpOperations, c07vrrpOperationsPrimaryIpAddr=c07vrrpOperationsPrimaryIpAddr, c07vrrpStatisticsRcvdPriZeroPackets=c07vrrpStatisticsRcvdPriZeroPackets, c07vrrpStatisticsAdvIntervalErrors=c07vrrpStatisticsAdvIntervalErrors, c07vrrpOperationsGroup=c07vrrpOperationsGroup, c07vrrpStatsInvalidAuthType=c07vrrpStatsInvalidAuthType)
