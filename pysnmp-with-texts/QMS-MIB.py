#
# PySNMP MIB module QMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:43:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
snmp, = mibBuilder.importSymbols("RFC1158-MIB", "snmp")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Gauge32, IpAddress, NotificationType, Bits, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, enterprises, Integer32, MibIdentifier, NotificationType, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "IpAddress", "NotificationType", "Bits", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "enterprises", "Integer32", "MibIdentifier", "NotificationType", "Unsigned32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
qmsInc = MibIdentifier((1, 3, 6, 1, 4, 1, 480))
qmsUIH = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1))
qmsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 1))
qmsMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 5))
qmsIoCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 101))
qmsHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 102))
qmsIoTimeOuts = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 103))
qmsIoPages = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 104))
qmsSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 160))
qmsParallel = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 161))
qmsEngine = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 304))
qmsAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 401))
qmsScanner = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 402))
qmsCostPerPage = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 403))
qmsColorMatch = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 404))
qmsPS = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 520))
qmsHPGL = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 524))
qmsHPPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 525))
qmsDECLN03 = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 532))
qmsQUIC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 534))
qmsCCITT = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 538))
qmsLinePrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 539))
qmsTIFF = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 541))
qmsCALS = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 542))
qmsCGM = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 1, 544))
qmsSYSPageCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSPageCount.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSPageCount.setDescription('Value used to indicate the current number of pages printed to date.')
qmsSYSSheetCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSSheetCount.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSSheetCount.setDescription('Flag used to indicate the current number of sheets printed to date.')
qmsSYSPrinterModel = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1003), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSPrinterModel.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSPrinterModel.setDescription('Printer model name string.')
qmsSYSPrinterVersion = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1004), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSPrinterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSPrinterVersion.setDescription('Value used to hold the current version of the printer software.')
qmsSYSPrinterName = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1005), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSYSPrinterName.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSPrinterName.setDescription('Value used to hold the current printer name.')
qmsSYSA3PageCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1006), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSA3PageCount.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSA3PageCount.setDescription('Value used to indicate the current number of A3 pages/faces printed to date.')
qmsSYSA3SheetCount = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSA3SheetCount.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSA3SheetCount.setDescription('Value used to indicate the current number of A3 sheets printed to date.')
qmsSYSFPA = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1008), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSFPA.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSFPA.setDescription('Is FPA chip set installed in the system.')
qmsSYSSystemImage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1009), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("flashSystem", 2), ("diskSystem", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSSystemImage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSSystemImage.setDescription('What type of boot system is running.')
qmsSYSDiskSwap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1010), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("diskSwapingDisabled", 1), ("diskSwapingEnabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSDiskSwap.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSDiskSwap.setDescription('Flag used to indicate the current state of disk swapping.')
qmsSYSMultiRes = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 1, 1011), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 1), ("notPresent", 2), ("lowMemory", 3), ("disabled", 4), ("optional", 5), ("standard", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSYSMultiRes.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSYSMultiRes.setDescription("Multi-Res is a mechanism which provides either a printing resolution higher than the print engine's native resolution or edge-smoothing at the native resolution. Current state of Multi-Res Option: notSupported(1) -> Feature is not available for this product notPresent(2) -> Not Present in the Unit. Need to purchase this option separately lowMemory(3) -> Feature installed or standard Insufficient memory to apply. disabled(4) -> Feature installed or standard Feature disable by console option setting. optional(5) -> Optional feature is present. System has sufficient memory to apply standard(6) -> Standard feature is present. System has sufficient memory to apply")
qmsMEMPhysical = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsMEMPhysical.setStatus('mandatory')
if mibBuilder.loadTexts: qmsMEMPhysical.setDescription('Size of the physical memory in MB.')
qmsMEMTotal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsMEMTotal.setStatus('mandatory')
if mibBuilder.loadTexts: qmsMEMTotal.setDescription('Size of the total virtual memory in MB. Note: If no hard disk is installed, this will be the size of physical memory.')
qmsClientSystem = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientSystem.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientSystem.setDescription("Also known as System Use, this non-configurable client is the amount of RAM used to run the printer's operating system. It's never increased or decreased. The system memory subtracted from the total amount of RAM identifies the amount of RAM available for all the other memory clients. Size is returned in Kilobytes.")
qmsClientSpool = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientSpool.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientSpool.setDescription('Also known as Host Input and K Mem for Spool, this memory client stores incoming data from all the interfaces until the emulation can process the print job. When enough memory is allocated to this client, the host becomes free more quickly, and the number of jobs that the printer can accept simultaneously is increased. You should consider the amount of data being sent simultaneously when allocating mem- ory to the spool buffer. If available, a hard disk can supplement this client with additional memory needed for spooling. Size is returned in Kilobytes. Note: While increasing this client is beneficial in reducing network traffic, throughput is not necessarily increased. In addition, making this client too large could actually decrease throughput because of the overhead involved with managing a large spool.')
qmsClientEmulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientEmulation.setDescription("Also known as K Mem Emulation, this client is used to store any optional or loadable emulations, such as LN03 Plus or QUIC II. Increasing this client's memory allows you to load more than one optional emulation so that it doesn't have to be reloaded every time the print job is sent. If an emulation is loaded to process a print job and there is not enough memory in the emulation client, another emulation already loaded may be unloaded automatically to obtain enough memory. If you notice a delay in printing between jobs that have different nonres- ident emulations, it's possible that the emulations are having to reload each time they're run. Adding to the emulation client may eliminate the unloading and reloading of these emulations and, consequently, increase throughput. It is recommended that you should add at least 1 MB of physical RAM to your printer and increase this memory client by 1 MB for each additional emulation loaded. If your printer has an optional hard disk and the disk swapping option is turned on then you can increase the emulation memory client using this memory. Size is returned in Kilobytes. Note: You should add at least 1 MB to the emulation memory client for each loadable emulation that your printer uses. Failure to add memory to this client may prevent the printer from loading and using the emulation. You should check the documentation accompanying your loadable emulation for information on additional resource requirements. Also increase the emulation client if you're printing complex non-Post- Script jobs that may require more memory to process correctly.")
qmsClientHeap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientHeap.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientHeap.setDescription('Also known as K Mem PSHeap, Heap, PostScript VM, and Virtual Memory, this client holds downloaded fonts, PostScript operators, and forms. Inefficiently coded PostScript jobs can consume an extremely large amount of virtual memory or leave objects in the PostScript Heap after the print jobs are completed, leading to virtual memory errors. If not enough memory is allocated to the PS Heap, the job cannot print. Increasing the memory allocated to this client allows more complex jobs to print and increases the number of fonts that can be down- loaded to virtual memory. However, this client should be increased only if you receive a virtual memory error when attempting to print a job or download a font, and even then it should be increased only in small increments until the error message goes away. Excess memory in the PS Heap is not used.')
qmsClientFontCache = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientFontCache.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientFontCache.setDescription("Also known as K Mem PS Fonts and Font Cache, this memory client stores bitmapped representations of previously scaled PostScript fonts. This process reduces the number of times a font must be con- verted from outline form to bitmap form. Printing pages that have characters already stored in the font cache is immensely faster than printing characters not yet in the font cache. As the font cache memory fills, the printer makes room for new bit- mapped characters by erasing those that have been in the cache longest without being used. Increasing the memory allocated to this client, allows the printer to store more characters and spend less time erasing and replacing characters in the cache. You should be careful when increasing this client because the printer may spend more time searching the cache than it would scaling the character. This client has a limit to the maximum point size it will store. Normally, you don't need to change this memory client unless you use a large number of fonts at various point sizes. If you do, you may allocate additional memory to this client to improve printer perfor- mance. There's no specific formula to use in figuring the amount of memory required by the font cache, but after a certain point, large font caches cause the printer to take longer to print than smaller font caches because of the search time through the cache. The recom- mended font cache size is in the following ranges: * 128-256 KB for 300x300 dpi printing * 256-512 KB for 600x600 dpi printing * 384-512 KB for 1200x1200 dpi printing You should experiment to see what font cache size works best for you. Size is returned in Kilobytes.")
qmsClientDisplayList = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientDisplayList.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientDisplayList.setDescription("Also known as K Mem Display, this client stores compressed repre- sentations, or blocks, of the pages to be printed. It takes approxi- mately one compressed block for a normal 8.5'' x 11'' (215.9 mm x 279.4 mm) text page, four compressed blocks for an 8.5'' x 11'' (215.9mm x 279.4 mm) page that includes some graphics, and as many as 500 compressed blocks for an extremely complex page. Many pages of compressed blocks belonging to multiple print jobs can be stored at the same time in the display list. If enough memory is allocated to this memory client, a page can always be ready to print as soon as another page has been imaged to the print engine. The amount of memory required for each compressed block is printer specific. See your printer specific manual for the amount of memory that a disply list will require for each compressed block. If a page includes raster image data (for example, TIFF or bitmap data), each compressed block will require much more memory. Increasing the amount of memory in this client may improve printing throughput and minimize slowdowns due to collating or printing com- plex pages. If your Print System has a hard disk and the disk swap option is enabled, the memory added to this client is taken from virtual memory. If your printer does not have a hard disk then, the memory added to this client is taken from the amount of physical memory in your printer. It may be necessary to reduce memory added to another client before adding memory to the Display List. Check that the Frame Buffer still has the minimum amount of memory needed for your printing needs before reallocating this memory. Size is returned in Kilobytes.")
qmsClientFrameBuffer = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientFrameBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientFrameBuffer.setDescription("The Frame Buffer memory client holds rasterized or bitmapped images of page faces which are ready to be sent to the print engine. A frame holds the contents of each single page image. For example, a 600 dpi page printed on letter size paper would consume frame buffer memory space as follows: (600dpi x 600dpi x 8.5 in x 11 in) /8 = 4,207,500 bytes or 4.1 MB. Because the frame buffer memory is so critical to the actual printing of a page, its allocation takes precedence over that of other memory clients. The number of frames needed to print at engine speed is engine specific and depends on the size media and resolution. For example, printing at 600x600 dpi requires four times the amount of memory in the frame buffer than does 300x300 dpi. If you are uncertain about how to configure your printer's memory, use only the Administration/Memory/QuickConfig menu. This menu appears if your printer does not have a hard disk attached or if the disk swap option is disabled. Use this menu as a starting point before trying manually to configure your printer's memory. It provides a simple method of defining how much memory should go to each of the clients for the most complicated printing conditions in your environment. Menu options allow you to specify the largest media size at the resolution you plan to use. Memory is then automat- ically allocated to the clients. Size is returned in Kilobytes. Choices 02200-variable depending on options installed")
qmsClientEmulTemp = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientEmulTemp.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientEmulTemp.setDescription("Also known as K Mem Emul Tmp and Emulation Temporary, this cli- ent sets the amount of system memory to be used by non-PostScript emulations for storing downloaded many different non-Post Script fonts, forms, or macros. By dedicating a portion of memory to this cli- ent, your printer can perform context switching, which is the ability to retain downloaded fonts and forms even after the printer changes from one emulation to another. Context switching prevents unneces- sary repetitive downloading and traffic congestion on networks. Normally, this memory client doesn't need to be changed unless you plan to download many different non-PostScript fonts, forms, or mac- ros. Size is returned in Kilobytes.")
qmsClientDisk = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientDisk.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientDisk.setDescription("This memory client stores frequently used data in system memory instead of continually storing and retrieving it from a hard disk. If a hard disk is used and a lot of disk access is required, adding memory to the disk cache may increase the printer's performance. For example, if many fonts are stored on disk, faster access to these fonts is achieved by increasing the disk cache size. Conversely, if no hard disk is used, the disk cache will automatically be set to 0 KB until a hard disk is installed and formatted. However, when one or more hard disks are installed and formatted, disk cache is automatically allocated 256 KB. The disk cache is a high-speed temporary buffer for data going to and from the hard disk. It can speed up the printer in two ways: * Information such as frequently referenced fonts and logos may still be in the cache and may not have to be pulled off a hard disk each time they're needed. * Information being written to a hard disk can be held in the cache temporarily until a more convenient time to be written to disk. The amount of memory needed for the disk cache client is dependent on the size of the disk, the number of disks, the number of subdirecto- ries on each disk, and the amount of memory dedicated to caching. As long as the disk cache is enabled and there is enough memory in the disk cache, all disks are accessible. If insufficient memory is allo- cated to the disk cache, some disks may be seen while others are not. The recommended amount of memory for the disk cache client for all hard disk is as follows: * 45 KB internal usage * 0.5 KB per MB of disk storage total for all disks * 100 KB of memory dedicated to caching For example, the recommended amount of memory for the disk cache for a single 120 MB hard disk would be 208 KB, and for two 120 MB hard disks it would be 268 KB. Size is returned in Kilobytes.")
qmsClientColorMatching = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientColorMatching.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientColorMatching.setDescription("The Color Matching memory client provides storage space for the control and operation of the Color Matching feature. The available space is used to process the generation and management of printer resident, custom ICC color matching profiles, as-well-as the feature generated device link conversion maps. These device link maps are ultimately used for RGB and CMYK device space color conversion. By retaining the most frequently used profile and device link information in primary storage, performance of the color matching operation is increased. This increase comes from the ellimination of the time required to find and load the desired ICC profiles for a given job, and to then generate the device link map used during color conversion by the printer's page description language. The size of ICC profiles used for color matching device link generation will affect the amount of free space remaining to the memory client for routine color matching operations. The feature will routinely unload unused profiles and device links as necessary to retain sufficient free space for operation. However, if downloaded custom ICC profiles are overly large, excessive memory can be consumed for device link generation, exhausting available client memory needed for other operations. This will result in color matching processing errors being reported to the user. If color matching memory resource errors occur, the problem can be corrected by reducing the quality setting of the generated device link maps via the operator panel, or by increasing the amount of memory available to the color matching client. If you are uncertain about how to configure your printer's memory, use only the Administration/Memory/QuickConfig menu. This menu appears if your printer does not have a hard disk attached or if the disk swap option is disabled. Use this menu as a starting point before attempting to manually configure your printer's memory. It provides a simple method of defining how much memory should go to each of the clients for the most complicated printing conditions in your environment. Menu options allow you to specify the largest media size at the resolution you plan to use. Memory is then automat- ically allocated to the clients. Size is returned in Kilobytes. Choices: 8196KB default, or variable, depending on options installed")
qmsClientHPStoragePool = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsClientHPStoragePool.setStatus('mandatory')
if mibBuilder.loadTexts: qmsClientHPStoragePool.setDescription('Also known as K Mem HP Pool, HP Heap, HP VM, and Virtual Memory, this client holds downloaded fonts, and forms. Inefficiently coded PCL and XL jobs can consume an extremely large amount of virtual memory or leave objects in the HP Heap after the print jobs are completed, leading to virtual memory errors. If not enough memory is allocated to the HP Heap, the job cannot print. Increasing the memory allocated to this client allows more complex jobs to print and increases the number of fonts that can be down- loaded to virtual memory. However, this client should be increased only if you receive a virtual memory error when attempting to print a job or download a font, and even then it should be increased only in small increments until the error message goes away. Excess memory in the HP Heap is not used. Size is returned in Kilobytes.')
qmsFEDoStartPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEDoStartPage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFEDoStartPage.setDescription("By default, the printer prints a start-up page when you turn it on. The start-up page lists basic information about the printer, such as its name, the PostScript version, and various printer settings. However, you can turn the start-up page off to conserve paper and toner. Choices Yes: Print a start-up page each time the printer is turned on. No: Don't print a start-up page each time the printer is turned on. Default Yes")
qmsFEHeaderPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEHeaderPage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFEHeaderPage.setDescription("A header page is a separator page that prints before a print job to help users sort their jobs. The information on the header page can be customized. See the Document Option Commands manual for more information. Choices On: Print a header page before each job. Off: Don't print a header page before each job. Default Off")
qmsFEHeaderInputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEHeaderInputbin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFEHeaderInputbin.setDescription('You can select the input bin (tray or cassette) from which the printer pulls media when printing the header page. Choices Printer specific; see your printer documentation. Notes If you used the Administration/Engine/Inputbin x Name options to change the names of the input bins, these names replace Upper, Lower, and Multipurpose in the message window.')
qmsFETrailerPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 3, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 4), ("errorOnly", 3), ("onError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETrailerPage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFETrailerPage.setDescription("A trailer page is a separator page that prints after a print job to help users sort out their jobs and, if requested, identify print job errors. Choices Off: Don't print a trailer/error page for each print job. On: Print a trailer/error page for each print job. On Error: If any print job errors exist, print a trailer page that lists the errors as well as other trailer page information. Errors Only: If any print job errors exist, print a trailer page that lists the errors but omits other trailer page information. Default Off Notes See the Document Option Commands manual for more information.")
qmsFETrailerInputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETrailerInputbin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFETrailerInputbin.setDescription('You can select the input bin (tray or cassette) from which the printer pulls media when printing the trailer page. Choices Printer specific; see your printer documentation. Notes If you used the Administration/Engine/Inputbin x Name options to change the names of the inputbins, these names replace Multipurpose in the message window.')
qmsFEDoSysStart = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEDoSysStart.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFEDoSysStart.setDescription("If you have a hard disk and Do Sys Start is enabled, when the printer is turned on, the controller checks the hard disk for a PostScript file named SYS\\START and executes this file. Choices Yes: Check the hard disk for and execute the SYS\\START file when the printer is turned on. No: Don't check the hard disk for a SYS/START file. Default Yes Notes This file does not print. Information on creating a SYS\\START file is available in the Technical Reference Manual (shipped on disk with your printer) and also via Q-FAX (see appendix A, 'Minolta-QMS Customer Support,' for information on using Q-FAX).")
qmsFEStatusPageType = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 104, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("advanced", 2), ("standard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEStatusPageType.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFEStatusPageType.setDescription('Status pages list printer hardware and software information. Two types of status pages are available. Choices Standard: Lists printer identification information, paper source, current memory configuration, timeouts, communication settings, input buffer sizes, and all options. Advanced: Contains the same information as the standard status page as well as configuration menu settings, fonts, and downloaded emulations. Default Standard')
qmsFEEspEmul = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 101, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 13, 15, 19, 20, 22, 23, 25))).clone(namedValues=NamedValues(("postscript", 1), ("hpgl", 5), ("hppcl", 6), ("ln03", 13), ("quic2", 15), ("ccitt", 19), ("lineprinter", 20), ("tiff", 22), ("cals", 23), ("cgm", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFEEspEmul.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFEEspEmul.setDescription('The ESP Default Emulation sets the ESP default emulation used when ESP is unable to identify the language of a print job. This allows the system administrator to select alternate default emulations. Default Choices HPGL, Lineprinter, PCL5e, PostScript Default PCL5e Note: Only the default and installed emulations will be available to select from.')
qmsFECopies = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 101, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFECopies.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFECopies.setDescription('While it is preferable to use your application to select the number of copies to print, you can change the default number of copies for all print jobs through the printer control panel. Choices 1-999 Default 1 Notes Sets the default number of copies for all subsequent print jobs. When power is turned off and then back on again, the number of copies is restored to the default setting of 001.')
qmsFETmPSWait = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmPSWait.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFETmPSWait.setDescription("The PostScript emulation timeout is the maximum number of seconds the PostScript emulation waits for incoming data. Choices 0-99999 Default 30 (30 sec.) Notes A value of 0 is the same as infinity (no timeout). The job is closed and the next job in the queue begins if all of the following occur: * No additional data is received during the specified period of time. * The interface didn't time out. * An EOD (end-of-document commands) was not seen. When a print job is sent from a Macintosh, the PS Wait timeout is automatically changed to 300 (5 min.). Large print jobs, such as those generated by graphics or computer-aided design applications, require timeouts of 00300 (5 min.).")
qmsFETmJob = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmJob.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFETmJob.setDescription('The print job timeout is the maximum number of seconds the printer processes a print job before it ends the job. Choices 0-99999 Default 0 (infinity, no timeout) Notes A value of 0 is the same as infinity (no timeout).')
qmsFETmNonPSEmul = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmNonPSEmul.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFETmNonPSEmul.setDescription('The emulation timeout is the maximum number of seconds emula- tions other than PostScript (such as HP-GL, HP PCL5e, and Line- printer) wait for incoming data. Choices 0-99999 Default 5 (5 sec.) Notes A value of 000 is the same as infinity (no timeout).')
qmsFETmEsp = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 103, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsFETmEsp.setStatus('mandatory')
if mibBuilder.loadTexts: qmsFETmEsp.setDescription('The ESP timeout is the maximum number of seconds the printer waits to match an emulation before printing the job in the default emulation. Choices 0-99999 Default 3 (3 sec.) Notes A value of 00000 is the same as infinity (no timeout).')
qmsHTTPContact = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPContact.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHTTPContact.setDescription('Text string that contains the contact person for the printer.')
qmsHTTPHelpURL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPHelpURL.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHTTPHelpURL.setDescription('Text string for the URL of the online help page.')
qmsHTTPContactNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPContactNumber.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHTTPContactNumber.setDescription('Text string of the phone number of the contact person.')
qmsHTTPCorpURL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPCorpURL.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHTTPCorpURL.setDescription('Text string for URL of the Minolta-QMS Corporate home page.')
qmsHTTPSuppliesNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 102, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHTTPSuppliesNumber.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHTTPSuppliesNumber.setDescription('Text string for phone number of the Supplies and Accessories contact.')
qmsSerBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsSerBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerBufferSize.setDescription('Sets the minimum number of kilobytes of system memory allocated to the serial interface. Default 15 Notes This value must be less than K Mem For Spool. A 0 value does not turn off the spooling buffer for the serial interface. If the value is set to 0, the printer calculates the Min K Spool automatically at initialization. The printer must be restarted for changes to the Min K Spool menu to take effect. You can either let the printer restart automatically after you save the change and exit the Configuration menu, or you can wait for the change to take effect the next time you manually turn on the printer.')
qmsSerSpoolTimeout = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 112), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerSpoolTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerSpoolTimeout.setDescription('Sets the number of seconds the interface waits for data from the host before terminating a spooled print job. Choices 0-99999 Default 30')
qmsSerMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("interactive", 3), ("noninteractive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerMode.setDescription('Enables or disables the serial port. Choices Interactive: Establish two-way communication between the host and the printer. Noninteractive: Establish one-way communication from the host to the printer. Disabled: Turn off serial communication with the host. The printer stops accepting print jobs over the serial interface. Default Disabled Notes The printer must be restarted for changes to the Mode menu to take effect. You can either let the printer restart automatically after you save the change and exit the Configuration menu, or you can wait for the change to take effect the next time you manually turn on the printer.')
qmsSerEmulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 13, 15, 19, 20, 22, 23, 25, 201))).clone(namedValues=NamedValues(("postscript", 1), ("hpgl", 5), ("hppcl", 6), ("hexdump", 7), ("ln03", 13), ("quic2", 15), ("ccitt", 19), ("lineprinter", 20), ("tiff", 22), ("cals", 23), ("cgm", 25), ("esp", 201)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerEmulation.setDescription('Sets the serial interface emulation. Choices PostScript, HPGL, HPPCL, HEXDUMP, LN03, QUIC2 CCITT, Line Printer, TIFF, CALS, CGM, ESP Default ESP Note: Only the installed emulations will be available to select from.')
qmsSerEndDocumentMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("qmseod", 2), ("hpeod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerEndDocumentMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerEndDocumentMode.setDescription('Enables (and identifies an end-of-job sequence) or disables data stream sensing for the end-of-document (EOD) command. Choices None-The printer recognizes only the PostScript ^D command. DOC EOD-The printer recognizes only the Minolta-QMS %%EndOfDocument command. HP EOD-The printer recognizes only the HP <ESC>%12345X command. Default None')
qmsSerPriority = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerPriority.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerPriority.setDescription('Allows you to specify which jobs are printed first, according to the interface through which they are received, when jobs are received simultaneously. For example, you can give jobs received via the serial interface priority over jobs received via the parallel and Ethernet inter- faces. Choices 001-100 (lowest-highest priority) Default 001 (lowest priority)')
qmsSerPSProtocol = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("normalfixed", 2), ("binary", 3), ("binaryfixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerPSProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerPSProtocol.setDescription('Sets the binary communications protocol (BCP) for communicating over a serial interface to a PostScript printer. Choices Normal: Enables standard, ASCII (7-bit) hex protocol. Data is sent and received in ASCII format. This mode is recommended if you do not print binary data. It was designed for data in the printable ASCII range. Print jobs can change this setting through PostScript operators. Normal Fixed: Enables standard, ASCII (7-bit) hex protocol. Print jobs cannot change this setting through PostScript operators. Binary: Enables binary communications protocol (BCP). Print jobs can change this setting through PostScript operators. Data in the printable ASCII range also prints. Binary Fixed: Enables binary fixed communications protocol (BCP). Print jobs cannot alter change this setting through PostScript operators. Data in the printable ASCII range also prints. Default Normal')
qmsSerBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 201), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(38401, 19201, 9601, 4801, 2401, 1201, 601, 301))).clone(namedValues=NamedValues(("bps38400", 38401), ("bps19200", 19201), ("bps9600", 9601), ("bps4800", 4801), ("bps2400", 2401), ("bps1200", 1201), ("bps600", 601), ("bps300", 301)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerBaudRate.setDescription('Sets the rate data is transmitted (bits per second) over the serial interface. Choices 300, 600, 1200, 2400, 4800, 9600, 19200, 38400 Default 9600 Notes Baud rates of 19200 and 38400 require hardware flow control.')
qmsSerHwDSRPOL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 213), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reverse", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDSRPOL.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerHwDSRPOL.setDescription('Controls the flow of data between the printer and the host. Choices Reverse, Normal Default Normal Notes If the host uses hardware flow control, set this option to match the type used by the host. However, to download printer system software to flash ROM via the serial port, RTS and CTS must be set to On, and the cable pinouts must be connected as shown in the printer documentation.')
qmsSerHwDSR = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 212), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDSR.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerHwDSR.setDescription('Controls the flow of data between the printer and the host. Choices Off, On Default Off Notes If the host uses hardware flow control, set this option to match the type used by the host. However, to download printer system software to flash ROM via the serial port, RTS and CTS must be set to On, and the cable pinouts must be connected as shown in the printer documentation.')
qmsSerHwDTRPOL = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 211), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reverse", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDTRPOL.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerHwDTRPOL.setDescription('Controls the flow of data between the printer and the host. Choices Reverse, Normal Default Normal Notes If the host uses hardware flow control, set this option to match the type used by the host. However, to download printer system software to flash ROM via the serial port, RTS and CTS must be set to On, and the cable pinouts must be connected as shown in the printer documentation.')
qmsSerHwDTR = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 210), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwDTR.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerHwDTR.setDescription('Controls the flow of data between the printer and the host. Choices Off, On Default On Notes If the host uses hardware flow control, set this option to match the type used by the host. However, to download printer system software to flash ROM via the serial port, RTS and CTS must be set to On, and the cable pinouts must be connected as shown in the printer documentation.')
qmsSerHwRTS = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 209), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwRTS.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerHwRTS.setDescription('Controls the flow of data between the printer and the host. Choices Off, On Default Off Notes If the host uses hardware flow control, set this option to match the type used by the host. However, to download printer system software to flash ROM via the serial port, RTS and CTS must be set to On, and the cable pinouts must be connected as shown in the printer documentation.')
qmsSerHwCTS = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 208), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerHwCTS.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerHwCTS.setDescription('Controls the flow of data between the printer and the host. Choices Off, On Default Off Notes If the host uses hardware flow control, set this option to match the type used by the host. However, to download printer system software to flash ROM via the serial port, RTS and CTS must be set to On, and the cable pinouts must be connected as shown in the printer documentation.')
qmsSerStopBits = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 207), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("onebit", 1), ("twobits", 2), ("oneandhalf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerStopBits.setDescription('Sets the number of stop bits transmitted per character. Choices 1 Bit, 2 Bits, 1 1/2 Bits Default One Bit')
qmsSerDataBits = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 206), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits8", 1), ("bits7", 2), ("bits6", 3), ("bits5", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerDataBits.setDescription('Sets the number of data bits transmitted per character. Choices 5 Bits, 6 Bits, 7 Bits, 8 Bits Default 8 Bits')
qmsSerTxSWFlow = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 205), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("etxack", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerTxSWFlow.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerTxSWFlow.setDescription('Sets the software communication protocol used by the host computer to control communication with the printer. Choices ETX/ACK, None, XON/XOFF Default None')
qmsSerRxSWFlow = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 204), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("xonxoff", 2), ("etxack", 3), ("robustxonxoff", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerRxSWFlow.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerRxSWFlow.setDescription('Sets the software communication protocol used by the printer to control communication from the host computer. Choices ETX/ACK, Robust XON/XOFF, None, XON/XOFF Default XON/XOFF')
qmsSerIgnoreParity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 203), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerIgnoreParity.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerIgnoreParity.setDescription("Specifies how the printer should handle parity errors. Choices Off: Ignore parity errors. The printer prints its best interpretation of the character(s) affected by the error. On: Don't ignore parity errors. The printer replaces the character(s) affected by the error with a question mark. Default Off Notes Use the qmsCOM0Parity to set parity.")
qmsSerParity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 160, 202), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 4), ("even", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSerParity.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSerParity.setDescription("Sets the check bit used to identify data transmission errors. Choices: None, Odd, Even Default: None Note: The printer's parity setting must match that of the host or application. Use the qmsSerIgnoreParity to specify how the printer handles parity errors.")
qmsParBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsParBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParBufferSize.setDescription('Sets the minimum number of kilobytes of system memory allocated to the parallel interface. Default 15 Notes This value must be less than K Mem for Spool in the Administration/Memory submenu. A 0 value does not turn off the spooling buffer for the parallel interface. If the value is set to 0, the printer calculates the Min K Spool automatically at initialization. The printer must be restarted for changes to the Min K Spool menu to take effect. You can either let the printer restart automatically after you save the change and exit the configuration menu, or you can wait for the change to take effect the next time you manually turn on the printer.')
qmsParSpoolTimeout = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParSpoolTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParSpoolTimeout.setDescription('Sets the number of seconds the interface waits for data from the host before terminating a spooled print job. Choices 0-99999 Default 30')
qmsParMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 1))).clone(namedValues=NamedValues(("interactive", 3), ("noninteractive", 4), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParMode.setDescription('The parallel interface supports Centronics parallel communication as well as IEEE 1284 bidirectional parallel communication. Choices Interactive-Establish two-way communication between the host and the printer. Noninteractive-Establish one-way communication from the host to the printer. Disabled-Turn off parallel communication with the host. The printer stops accepting print jobs over the parallel interface. Default Noninteractive Notes The printer must be restarted for changes to the menu to take effect. You can either let the printer restart automatically after you save the change and exit from the Configuration menu, or you can wait for the change to take effect the next time you manually turn on the printer.')
qmsParEmulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 13, 15, 19, 20, 22, 23, 25, 201))).clone(namedValues=NamedValues(("postscript", 1), ("hpgl", 5), ("hppcl", 6), ("hexdump", 7), ("ln03", 13), ("quic2", 15), ("ccitt", 19), ("lineprinter", 20), ("tiff", 22), ("cals", 23), ("cgm", 25), ("esp", 201)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParEmulation.setDescription('Sets the parallel interface emulation. Choices PostScript, HPGL, HPPCL, HEXDUMP, LN03, QUIC2 CCITT, Line Printer, TIFF, CALS, CGM, ESP Default ESP Note: Only the installed emulations will be available to select from.')
qmsParDataBits = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 113), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bits8", 1), ("bits7", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParDataBits.setDescription('Sets the number of data bits transmitted per character. Choices 7 Bits, 8 Bits Default 8 Bits')
qmsParEndDocumentMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 112), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("qmseod", 2), ("hpeod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParEndDocumentMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParEndDocumentMode.setDescription('Enables (and identifies an end-of-job sequence) or disables data stream sensing for the end-of-document (EOD) command. Choices None: The printer recognizes only the PostScript ^D command. DOC EOD: The printer recognizes only the Minolta-QMS %%EndOfDocument command. HP EOD: The printer recognizes only the HP <ESC>%12345X command. Default None')
qmsParPriority = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParPriority.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParPriority.setDescription('Allows you to specify which jobs are printed first, according to the interface through which they are received, when jobs are received simultaneously. Choices 1-100 (lowest-highest priority) Default 1 (lowest priority) Notes For example, you can give jobs received via the parallel interface priority over jobs received via the Ethernet interface.')
qmsParPSProtocol = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 161, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("normalfixed", 2), ("binary", 3), ("binaryfixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsParPSProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: qmsParPSProtocol.setDescription('Sets the binary communications protocol (BCP) for communicating over a parallel interface to a PostScript printer. Choices Normal: Enables standard, ASCII (7-bit) hex protocol. Data is sent and received in ASCII format. This mode is recommended if you do not print binary data. It was designed for data in the printable ASCII range. Print jobs can change this setting through PostScript operators. Normal Fixed: Enables standard, ASCII (7-bit) hex protocol. Print jobs cannot change this setting through PostScript operators. Binary: Enables quoted binary communications protocol (BCP). Print jobs can change this setting through PostScript operators. Data in the printable ASCII range also prints. Binary Fixed: Enables binary communications protocol (BCP). Print jobs cannot alter change this setting through PostScript operators. Data in the printable ASCII range also prints. Default Normal')
qmsENGTopOffset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGTopOffset.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGTopOffset.setDescription("This option allows you to adjust the vertical placement of printed images. To check image alignment, print a standard status page (Print Status key). When the printer is placing images properly, the alignment angle bar in the lower-left corner of the status page is 0.5''/12.7 mm from the left and bottom edges of the page. If the angle bar is off, use the Administration/Engine/Image Alignment option to align the image vertically in pixel increments (1/300'' or 0.08 mm). Note: Engine constraints may limit the accuracy of pixel alignment. Choices 000-300 (0.00''-1.00'') Default 100 (0.33''/.84 mm) Notes Values above 100 move the image right. Values below 100 move the image left.")
qmsENGLeftOffset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGLeftOffset.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGLeftOffset.setDescription("This option allows you to adjust the horizontal placement of printed images. To check image alignment, print a standard status page (Print Status key). When the printer is placing images properly, the alignment angle bar in the lower-left corner of the status page is 0.5''/12.7 mm from the left and bottom edges of the page. If the angle bar is off, use the Administration/Engine/Image Alignment option to align the image hor- izontally in pixel increments (1/300'' or 0.08 mm). Note: Engine constraints may limit the accuracy of pixel alignment. Choices 000-300 (0.00''/0 mm-1.00''/25.4 mm) Default 100 (0.33''/.84 mm) Notes Values above 100 move the image to the right. Values below 100 move the image to the left.")
qmsENGTopOffsetDuplex = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGTopOffsetDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGTopOffsetDuplex.setDescription("This option allows you to adjust the duplex vertical placement of printed images. To check image alignment, print a standard status page (Print Status key). When the printer is placing images properly, the alignment angle bar in the lower-left corner of the status page is 0.5''/12.7 mm from the left and bottom edges of the page. If the angle bar is off, use the Administration/Engine/Image Alignment option to align the image vertically in pixel increments (1/300'' or 0.08 mm). Note: Engine constraints may limit the accuracy of pixel alignment. Choices 000-300 (0.00''-1.00'') Default 100 (0.33''/.84 mm) Notes Values above 100 move the image down. Values below 100 move the image up.")
qmsENGLeftOffsetDuplex = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGLeftOffsetDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGLeftOffsetDuplex.setDescription("This option allows you to adjust the duplex horizontal placement of printed images. To check image alignment, print a standard status page (Print Status key). When the printer is placing images properly, the alignment angle bar in the lower-left corner of the status page is 0.5''/12.7 mm from the left and bottom edges of the page. If the angle bar is off, use the Administration/Engine/Image Alignment option to align the image hor- izontally in pixel increments (1/300'' or 0.08 mm). Note: Engine constraints may limit the accuracy of pixel alignment. Choices 000-300 (0.00''/0 mm-1.00''/25.4 mm) Default 100 (0.33''/.84 mm) Notes Values above 100 move the image to the right. Values below 100 move the image to the left.")
qmsENGResolution = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(301, 601, 1201, 2401))).clone(namedValues=NamedValues(("dpi300", 301), ("dpi600", 601), ("dpi1200", 1201), ("dpi2401", 2401)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGResolution.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGResolution.setDescription("This option sets the print engine's default resolution. Choices 300 dpi-300x300 dpi resolution 600 dpi-600x600 dpi resolution 1200 dpi-1200x1200 dpi resolution 2400 dpi-2400x600 dpi resolution Default 600 dpi Note: The 1200x1200 dpi resolution option is available only when the optional 1200x1200 dpi daughterboard is installed. See your Minolta-QMS product supplier for availability of this option. If your printer is configured for duplex printing and has less than 16 MB RAM, 600x600 dpi isn't available on all media sizes. Duplexing using 600x600 or 1200x1200 resolution requires additional memory. The 1200 dpi option will not show up in this menu until the multires board is installed and the frame buffer has sufficient memory to support 1200 dpi. Restoring defaults or selecting Quick Config should re-configure the frame buffer memory client The 2400 dpi option is specific to certain products only. We do not need multi-res board. Currently only 2400x600 is supported. Duplexing needs additional memory.")
qmsENGDefaultPaper = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("letter", 1), ("a4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGDefaultPaper.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGDefaultPaper.setDescription("Default Paper is used when the default media is requested but the default input bin is missing from the engine. There's no way to sense the media size automatically. This only applies to system that can have all input bin removed. Choices Letter, A4 Default Letter")
qmsENGDuplex = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("longedge", 2), ("shortedge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGDuplex.setDescription('Current duplexing setting on printers for which the feature is supported. Choices Off: Prints simplex pages. Long Edge: Duplexes each page of each job so they can be bound at the long edge of the page. Short Edge: Duplexes each page so they can be bound at the short edge of the page. Default: Off')
qmsENGOrientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGOrientation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGOrientation.setDescription('While you can usually specify the orientation of a print job in your application, if you consistently use a certain media orientation, you can set this option. Choices Portrait: Vertical Landscape: Horizontal Default Portrait')
qmsENGInputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGInputbin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGInputbin.setDescription('Default inputbin number.')
qmsENGOutputbin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGOutputbin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGOutputbin.setDescription('Default outputbin number.')
qmsENGCollation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGCollation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGCollation.setDescription("Collation is one of your printer's features. It is the printing of sets of multiple copies of a document in numeric order. Your printer is capa- ble of delivering multiple copies of your files in collated order to the output tray. The following figure shows the collated and uncollated stacking for two copies of a four-page file. The main advantage of collation is convenience and the time savings derived from not having to separate and sort individual copies of a document. Each copy of the document exists as a whole unless chunk collation has occurred. Choices On: Enable collation. Off: Disable collation. Default Off Working with Chunk Collation For a multiple copy document with collation On, there must be enough display list memory to hold the display list blocks for all pages in the collation range. See the 'Memory' section in Chapter 5, for more information on the Display List compressed blocks. If there is not enough memory, then a chunk collation boundary is forced after the last compiled page of the collation range.")
qmsENGErrorRecovery = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGErrorRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGErrorRecovery.setDescription("When a media jam or other similar error occurs, the printer can reprint the job starting from the page on which the jam occurred. Choices On: Reprints a print job from the page on which the jam or error occurred. Off: Don't reprint a print job when a jam or error occurs. Default Off")
qmsENGManualTrayMedia = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("letter", 1), ("legal", 2), ("executive", 3), ("sz11x17", 4), ("a3", 5), ("a4", 6), ("a5", 7), ("b4", 8), ("b5", 9), ("statement", 10), ("universal", 11), ("com10", 12), ("dl", 13), ("monarch", 14), ("c5", 15), ("envelope", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGManualTrayMedia.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGManualTrayMedia.setDescription('Need description and values.')
qmsENGToneroutAction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("continue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGToneroutAction.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGToneroutAction.setDescription('You can configure the printer to stop or to continue printing when a TONER LOW ACT. error message is displayed in the message window. Choices Continue: Continue printing when a TONER LOW ACT message displays. Stop: Stop printing when a TONER LOW ACT message displays. Default Continue')
qmsENGLetterheadMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("duplexPath", 2), ("rotateSimplex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGLetterheadMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGLetterheadMode.setDescription('This option appears only if the duplexing unit is installed on the printer. The letterhead option allows you to print both simplex and duplex jobs on letterhead paper from the same input bin (cassette) without having to sort the pages manually. Choices Off DuplexPath Rotate the simplex images to match the output produced for duplex jobs. You may notice a decrease in the printing speed depending on the mix of simplex and duplex pages. RotateSimplex When Rotate Simplex is enabled it rotates the simplex impage 180 degrees from normal. This option allows the user to insert 3-hole punched paper backwards permitting it to print. If installed the opposite way the engine sensors cause a error thinking the paper is shorter than full size. Default Off Notes Letterhead paper must be loaded face down in the input bin with the bottom edge inserted first into the printer. You may notice a decrease in the printing speed depending on the mix of simplex and duplex pages. See printer manual for loading 3-hole or letterhead paper.')
qmsENGManualFeedTimeout = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGManualFeedTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGManualFeedTimeout.setDescription('This option allows you to set the amount of time the printer waits for paper to be inserted into the multipurpose tray before it cancels the job. Choices 0 - 300 seconds Default 60 seconds Notes A value of 0 sets the timeout to infinity.')
qmsENGOffsetStacking = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGOffsetStacking.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGOffsetStacking.setDescription('This option appears only if the printer is capable of offset stacking. Choices: Off - Stacking of each output set is aligned with the previous set. On - Stacking of each output set is offset from the previous set. Default: Off')
qmsENGEnergyStar = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 31, 61, 121, 181))).clone(namedValues=NamedValues(("off", 1), ("min15", 16), ("min30", 31), ("hour1", 61), ("hour2", 121), ("hour3", 181)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGEnergyStar.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGEnergyStar.setDescription('The Energy Saver option specifies whether the printer changes to a low-power state (the engine remains on, but the fuser turns off) after the printer is inactive for a user-defined length of time. When a print job is received, the printer returns to normal power within 90 seconds. Choices 15 minutes, 30 minutes, 1 hour, 2 hours, 3 hours - Idle time before activation of low-power state. Off-Use normal power all of the time. Default 1 hour')
qmsENGPageOrder = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reverse", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGPageOrder.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGPageOrder.setDescription('Need input on this....is this new?')
qmsENGEnvelopeTrayMedia = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("com10", 12), ("dl", 13), ("monarch", 14), ("c5", 15), ("envelope", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGEnvelopeTrayMedia.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGEnvelopeTrayMedia.setDescription("The envelope feeder can be adjusted to accept different envelope sizes. See chapter 7, of the Options manual, the 'Selecting Enve- lopes' section, for more information on envelope sizes. Use the Operator Control/Envelope menu to identify and select the size envelope for the envelope feeder (inputbin 4). Your printer sup- ports the following media sizes via the multipurpose tray: Choices C5, Com10, DL Envelope, Monarch Default Envelope")
qmsENGDensity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGDensity.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGDensity.setDescription('The Toner Density option adjusts the density of the toner that is laid down on the paper. Note: See your Minolta-QMS documentation for printer specific values.')
qmsENGColorModel = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("gray", 2), ("cmy", 3), ("rgb", 4), ("cmyk", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGColorModel.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGColorModel.setDescription('Use this option to select between full-color and monochrome printing. Choices Gray, CMY, RGB, CMYK')
qmsENGColorSeparation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGColorSeparation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGColorSeparation.setDescription('Use this option to turn color separation on or off. Choices On, Off Default Off')
qmsENGUnderColor = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGUnderColor.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGUnderColor.setDescription('Need input on this....is this new?')
qmsENGQuality = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("normal", 1), ("conserveToner", 2), ("smooth600dpi", 3), ("fineMode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGQuality.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGQuality.setDescription('The Print Quality option allows the printer to operate at a lower rate of toner consumption and extend the life of your toner cartridges. This option also allows you to enable other installed quality features. Choices Normal: Normal toner use. Conserve Toner: Toner use is lowered. Smooth(600dpi): Requires MultiRes board. Fine Mode: Reduces chassis vibration during image processing. Default Normal Notes When Conserve Toner is selected the Toner Density option can be adjusted for the best acceptable print quality. Toner Density can be set from 1 to 15. Smoothing alters the size and position of dots that lie on the outer edges of an object by reducing the width of the laser pulse to a fraction of the full pulse width. This smooths jagged-edges in text, lines, and graphics and generally improves their print quality. Fine Mode reduces the media feed rate, allowing each sheet to complete the image transfer process before the next sheet is fed to the media path. This reduces chassis vibration that occurs during paper movement to a minimum level during image processing. Note: When printing halftones, smoothing is not recommended because it may introduce artifacts in the halftone or scanned image. For better results if smoothing is required for your documents in text and line art, use the basic option for halftone types.')
qmsENGConsumeNameMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1000), )
if mibBuilder.loadTexts: qmsENGConsumeNameMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeNameMulti.setDescription("A table of the engine's consumable names.")
qmsENGConsumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1000, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeName.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeName.setDescription('Consumable name for engine.')
qmsENGConsumeLevelMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1001), )
if mibBuilder.loadTexts: qmsENGConsumeLevelMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeLevelMulti.setDescription("A table of the engine's consumable levels.")
qmsENGConsumeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1001, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeLevel.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeLevel.setDescription('Specific consumable level.')
qmsENGConsumeMaxMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1002), )
if mibBuilder.loadTexts: qmsENGConsumeMaxMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeMaxMulti.setDescription("A table of the engine's consumable maximum levels.")
qmsENGConsumeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1002, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeMax.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeMax.setDescription('Specific consumable maximum level.')
qmsENGConsumeUnitsMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1003), )
if mibBuilder.loadTexts: qmsENGConsumeUnitsMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeUnitsMulti.setDescription("A table of the engine's consumable units.")
qmsENGConsumeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1003, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeUnits.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeUnits.setDescription('Specific consumable unit type.')
qmsENGConsumeTypeMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1004), )
if mibBuilder.loadTexts: qmsENGConsumeTypeMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeTypeMulti.setDescription("A table of the engine's consumable types.")
qmsENGConsumeType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1004, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("invalid", 1), ("inputBin", 2), ("outputBin", 3), ("toner", 4), ("wasteToner", 5), ("opc", 6), ("fuserUnit", 7), ("fuserCRoller", 8), ("fuserOil", 9), ("pmService", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeType.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeType.setDescription('Specific consumable type.')
qmsENGConsumeNote1Multi = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1005), )
if mibBuilder.loadTexts: qmsENGConsumeNote1Multi.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeNote1Multi.setDescription('A table of the first note applicable to each of the engines consumable.')
qmsENGConsumeNote1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1005, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeNote1.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeNote1.setDescription('Specific consumable note e.g. the kind of paper in an input tray.')
qmsENGConsumeNote2Multi = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1006), )
if mibBuilder.loadTexts: qmsENGConsumeNote2Multi.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeNote2Multi.setDescription("A table of the second note applicable to each of the engine's consumables.")
qmsENGConsumeNote2 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1006, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeNote2.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeNote2.setDescription('Specific consumable note.')
qmsENGConsumeIndexMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1007), )
if mibBuilder.loadTexts: qmsENGConsumeIndexMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeIndexMulti.setDescription('Index into OID table.')
qmsENGConsumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1007, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGConsumeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGConsumeIndex.setDescription('Specific consumable index.')
qmsENGNumConsumables = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1010), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGNumConsumables.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGNumConsumables.setDescription('Number of engine-related consumables that exist within the system.')
qmsENGChainInputBins = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1011), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("onAny", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGChainInputBins.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGChainInputBins.setDescription("An option in the Operator Control menu allows you to 'chain' input- bins (tray and cassettes) so that when the first inputbin empties, the printer will automatically draw media from another inputbin with either the same or any size and type of media (dependent on the choice selected). Choices On: Switch to the next inputbin with the same size and type of media when the default inputbin is empty. Note: Make sure the two trays/cassettes use the same size paper. Off: Don't switch inputbins; use only the default inputbin. On Any: Switch to the next inputbin with any size and type of media when the default inputbin is empty. Default On Notes Use the Operator 'qmsENGInputbin' OID to set the default inputbin. Make sure that the two inputbins use the same size media.")
qmsENGChainOutputbinMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1012), )
if mibBuilder.loadTexts: qmsENGChainOutputbinMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGChainOutputbinMulti.setDescription("A table of the engine's default input chaining setting.")
qmsENGChainOutputbin = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1012, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGChainOutputbin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGChainOutputbin.setDescription('Flag used to indicate if output bin chaining should be active.')
qmsENGInputbinMediatypeMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1013), )
if mibBuilder.loadTexts: qmsENGInputbinMediatypeMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGInputbinMediatypeMulti.setDescription("A table of the engine's default media type setting.")
qmsENGInputbinMediatype = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1013, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("plainPaper", 1), ("transparency", 2), ("thermal", 3), ("prePrinted", 4), ("letterhead", 5), ("prePunched", 6), ("labels", 7), ("bond", 8), ("recycled", 9), ("color", 10), ("cardStock", 11), ("thinStock", 12), ("automatic", 13), ("thickStock", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsENGInputbinMediatype.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGInputbinMediatype.setDescription("A table of the engine's default media type settings.")
qmsENGChainInputbinMulti = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 304, 1014), )
if mibBuilder.loadTexts: qmsENGChainInputbinMulti.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGChainInputbinMulti.setDescription("A table of the engine's default input chaining setting.")
qmsENGChainInputbin = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 304, 1014, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGChainInputbin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGChainInputbin.setDescription("An option in the Operator Control menu allows you to 'chain' input- bins (tray and cassettes) so that when the first inputbin empties, the printer will automatically draw media from another inputbin with either the same or any size and type of media (dependent on the choice selected). Choices On: Switch to the next inputbin with the same size and type of media when the default inputbin is empty. Note: Make sure the two trays/cassettes use the same size paper. Off: Don't switch inputbins; use only the default inputbin. Default On Notes Use the Operator 'qmsENGInputbin' OID to set the default inputbin. Make sure that the two inputbins use the same size media.")
qmsENGStaplePosition = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 304, 1015), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("frontCorner", 2), ("backCorner", 3), ("center", 4), ("offsetStacking", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsENGStaplePosition.setStatus('mandatory')
if mibBuilder.loadTexts: qmsENGStaplePosition.setDescription('This option identifies the location of the staple when stapling is enabled. Choices Off, Front corner, Back corner, Center, Offset Stacking Default Off')
qmsACCMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 401, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsACCMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsACCMode.setDescription('')
qmsACCDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 401, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsACCDiskSpace.setStatus('mandatory')
if mibBuilder.loadTexts: qmsACCDiskSpace.setDescription('Size of the accounting file in KB. The normal limits on this value are 50K to 10240K at the present time.')
qmsACCFileSegment = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 401, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("single", 2), ("multiple", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsACCFileSegment.setStatus('mandatory')
if mibBuilder.loadTexts: qmsACCFileSegment.setDescription('How the accounting information will be created on the disk in a single or in multiple file.')
qmsSCColorAdjust = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCColorAdjust.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCColorAdjust.setDescription('Use this option to adjust brightness in copies. It allows you to adjust the brightness of halftone images. This setting is enabled by the: Copier/Copy Mode/Select Mode/Halftone B/W Choices 15 brightness settings (1-15); each setting makes an incremental brightness change of about 2% D-Moving the setting in this direction decreases brightness. It darkens the overall image making light and dark areas appear darker. L-Moving the setting in this direction increases brightness. It lightens the overall image making light and dark areas appear lighter. Default The middle setting Notes Use the Previous key to move the message-window cursor from the center towards the left to a darker (less bright) setting or use the Next key to move the cursor towards the right to a lighter (brighter) setting. Each increment of change in the brightness setting is significant in output quality. Therefore, we recommend that you change the setting by only one level, print out a test copy, and then determine if further modification is necessary.')
qmsSCScanResolution = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 151, 201, 301))).clone(namedValues=NamedValues(("dpi100", 101), ("dpi150", 151), ("dpi200", 201), ("dpi300", 301)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCScanResolution.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCScanResolution.setDescription('Use this menu to specify what resolution the scanner should use. Choices 100, 150, 200, or 300 dpi Choose a scan resolution that is at least half of the printer resolution being used. The higher the scan resolution, the more detailed the copy output (as long as the printer resolution being used is double the scan resolution). Also, a higher scan resolution increases copying time, because of the increased amount of data that must be scanned and sent to the printer for processing. (Each time scan resolution is doubled, the amount of information that is scanned and printed is quadrupled.) Default 200 dpi Note In order to change the default scan resolution, you must choose the Custom Gray option in the Copier/Copy Mode/Select Mode menu.')
qmsSCSizeHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 850))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCSizeHorizontal.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCSizeHorizontal.setDescription('Use this to scan only part of the scannable area in order to copy only part of an image or to reduce copying time for images smaller than letter or A4.')
qmsSCSizeVertical = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCSizeVertical.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCSizeVertical.setDescription('Use this to scan only part of the scannable area in order to copy only part of an image or to reduce copying time for images smaller than letter or A4.')
qmsSCOffsetHorizontal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 850))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCOffsetHorizontal.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCOffsetHorizontal.setDescription("Use this menu to specify where the copy is to print on the selected media (in 0.01'' increments). Choices 0-850 Default 0 Notes This option assigns the top-left corner of the image, so printing with the defaults places the image at the top-leftmost corner of the page.")
qmsSCOffsetVertical = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCOffsetVertical.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCOffsetVertical.setDescription("Use this menu to specify where the copy is to print on the selected media (in 0.01'' increments). Choices 0-1100 Default 0 Notes This option assigns the top-left corner of the image, so printing with the defaults places the image at the top-leftmost corner of the page.")
qmsSCCopyMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 4, 5, 6, 7))).clone(namedValues=NamedValues(("automaticColor", 8), ("customColor", 9), ("binaryColor", 10), ("halftoneColor", 11), ("automaticGray", 4), ("customGray", 5), ("binaryBandW", 6), ("halftoneBandW", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCCopyMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCCopyMode.setDescription('Use this menu to specify what type of copy is being made so the printer can optimize for this type output. Choices Automatic Gray, Custom Gray, Binary B/W, Halftone B/W Notes Automatic Gray-Sets color depth to 8-bit gray and scan resolution to 200 dpi. Use this option when copying documents that are black and white or shades of gray. Best quality output for images. Custom Gray-Allows you to adjust grayscale values. Binary B/W-Allows you to adjust binary thresholds. Good for text. Halftone B/W-Allows you to adjust the brightness of halftone images. Note In order to change the default grayscale value, you must choose the Custom Gray option in this menu.')
qmsSCRedGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCRedGammaFunction.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCRedGammaFunction.setDescription('')
qmsSCGreenGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCGreenGammaFunction.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCGreenGammaFunction.setDescription('')
qmsSCBlueGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCBlueGammaFunction.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCBlueGammaFunction.setDescription('')
qmsSCGrayGammaFunction = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("photoGraphic", 2), ("reverseImage", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCGrayGammaFunction.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCGrayGammaFunction.setDescription('Need description')
qmsSCBinaryAdjustment = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCBinaryAdjustment.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCBinaryAdjustment.setDescription('')
qmsSCTrans = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCTrans.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCTrans.setDescription("Use this option to specify how you want the Transparency Adapter (an optional accessory) to work. Choices Enabled: Specifies transparency document copying. Enables the transparency adapter's backlighting feature, which optimizes transparency copying. Note: The Transparency Adapter option must be installed before you can enable this option. Disabled: Specifies paper document copying. Turns off the transparency adapter's backlighting feature, which optimizes paper document copying. Default Disabled")
qmsSCContrast = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 402, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsSCContrast.setStatus('mandatory')
if mibBuilder.loadTexts: qmsSCContrast.setDescription("Use this option to adjust contrast in copies. Choices 15 contrast settings (1-15); each makes an incremental contrast change of about 2% d-Moving the setting in this direction increases contrast. It makes light areas appear lighter and dark areas appear darker. l-Moving the setting in this direction decreases contrast by making dark areas appear lighter and light areas appear darker. Default The middle setting Notes Each increment of change in the contrast setting is significant in output quality. Therefore, we recommend that you change the setting by only one level, print out a test copy, and then determine if further modification to the contrast setting is necessary. See chapter 'Copy Quality' for more information on these options.")
qmsCPPSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 403, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCPPSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCPPSerialNumber.setDescription('Cost per page reference serial number')
qmsCMMICCColorMatch = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCColorMatch.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMICCColorMatch.setDescription('ICC Color Matching master control for activation and deactivation of the feature on the printer Choices Disabled: Color conversion is not performed Enabled: Color conversion is performed Default Disabled')
qmsCMMICCRGBSource = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCRGBSource.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMICCRGBSource.setDescription("the RGB color space source profile to be used for the job in progress. Installed source profiles are registered with the color matching feature and are assigned a sequential ID at power-on time. The ID field is used to locate the profile in secondary storage and identify the source profile element of any color matching device link that may be created and ultimately saved in secondary storage. Internal to the color matching component, the ID values range from 1 to 127. The ID value of '0' is reserved, indicating that a default, resident device link will automatically be selected when processing this color space. Any RGB profile files encountered during registration, after the ID has incremented to 127, will not be registered with the system and an error messaage will be displayed. Choices (1, 2, ... 128) Default (1 = None selected)")
qmsCMMICCSimulation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCSimulation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMICCSimulation.setDescription("the ICC CMYK color space simulation profile to be used for the job in progress. Installed simulation profiles are registered with the color matching feature and are assigned a sequential ID at power-on time. The ID field is used to locate the profile in secondary storage and identify the simulation profile element of any color matching device link that may be created and ultimately saved in secondary storage. Internal to the color matching component, the ID values range from 1 to 127. The ID value of '0' is reserved, indicating that a default, resident device link will automatically be selected when processing this color space. Any simulation files encountered during registration after the ID has incremented to 127, will not be registered with the system and an error messaage will be displayed. Choices (1, 2, ... 128) Default (1 = None selected)")
qmsCMMICCDestination = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCDestination.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMICCDestination.setDescription("the ICC destination color profile to be used for the job in progress. Installed destination profiles are registered with the color matching feature and are assigned a sequential ID at power-on time. The ID field is used to locate the profile in secondary storage, and to identify the destination profile element of any color matching device link that may be created and ultimately saved in secondary storage. Internal to the color matching component, the IDs range from 0 to 127. The ID values '0' to 'm' are reserved for factory supplied destination profiles associated with each available print resolution. The number of factory supplied profiles can vary from engine to engine based on the number of supported print resolutions. Any destination profile files encountered during registration, after the ID has incremented to 127, will not be registered with the system and an error message will be displayed. All factory supplied profiles in the range of '0' to 'm' are grouped into a single setting designated 'Automatic.' In the Automatic setting, destination profile selection is determined by the print resolution currently selected, screentype, and mediatype, depending on resident destination profiles. Any settings in the range of 'm+1' to 127 require that the user ensure that the correct resolution is selected before printing occurs. Choices (1, 2, ... 128) Default (1 = Automatic)")
qmsCMMICCHP = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("srgb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMICCHP.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMICCHP.setDescription('default ICC CMY color space profile to be used for the PCL/XL job in progress. The available CMY profiles are registered with the color matching feature, and assigned a sequential ID at power-on time. The ID field is used to locate the profile in primary or secondary storage for when creating ICC device links. The ID values for these profiles range from 1 to 2. The ID value of 1 indicates that color matching is disabled for the PCL/XL job in progress. Choices (1 or 2) Default (1 = PCL/XL color matching is disabled) (2 = sRGB is selected for PCL/XL color matching)')
qmsCMMLinkQuality = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMLinkQuality.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMLinkQuality.setDescription('Color Matching device link quality to be used for any ICC device links created during execution of the current job. Three quality settings are available: low, medium, and high. The higher the quality setting, the greater the amount of client memory consumed when creating the device link. Choices 1 = Low quality 2 = Medium quality 3 = High quality Default 3')
qmsCMMSimInRGBLinks = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 404, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCMMSimInRGBLinks.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMSimInRGBLinks.setDescription('Determines if the Simulation profile selection should be used with the RGB source profile to construct the color matching device links used in RGB color space processing. When set to (No), this has the same effect as setting the Simulation profile value to (None) when RGB color space device links are created. This setting has no effect on device links created for use in CMYK color space processing. RGB color space Device Link construction may be visualized as follows: RGB Profile + Simulation Profile + Destination Profile - Device Link where the Simulation Profile parameter is optional. Choices No: Device links used for RGB color space processing are constructed without any Simulation profiles. Yes: The current Simulation profile selection will be included in the construction of RGB color space device links. Default (No)')
qmsCMMProfileTable = MibTable((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000), )
if mibBuilder.loadTexts: qmsCMMProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMProfileTable.setDescription('A table of color profiles in the printer. The user will query the printer to get all the available profiles. The profiles when read will normally be arranged in contiguous order based on the type')
qmsCMMProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1), ).setIndexNames((0, "QMS-MIB", "qmsCMMProfileIndex"))
if mibBuilder.loadTexts: qmsCMMProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMProfileEntry.setDescription('Information describing ICC color profile entries. The number of entries returned is dynamic, changing based on the addition or deletion of profiles by remote users.')
qmsCMMProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1, 1000), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCMMProfileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMProfileIndex.setDescription('A value used by the printer to identify the color profile. There may be three sequence of index number corresponding to the RGBSource, Simulation and Destination Profiles. These values may change due to user reconfiguration of the device (e.g. the addition and deletion of new profile files to the printer)')
qmsCMMProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1, 1001), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCMMProfileDescription.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMProfileDescription.setDescription("profile description field. This field is loaded from the ICC profile header information contained in each installed profile for the profile type and ID selected. The first 15 characters are reserved for the profile's name. The remaining characters are available for the display of additional information about the profile. The complete description of the ICC profile header is documented in the ICC Profile Specification Version 3.0.1 approved in August, 1995. Refer to the qmsCMMRGBSource, qmsCMMSimulation, and qmsCMMDestination object type descriptions for more information. Example: Trin G1.8 D50 Sony Trinitron D50 where Trin G1.8 D50 - (positions 1 through 15) is used internally as the profile name, and Sony Trinitron D50 - is additional information provided by the profile author.")
qmsCMMProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 1, 404, 1000, 1, 1002), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source", 1), ("destination", 2), ("simulation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsCMMProfileType.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCMMProfileType.setDescription('ICC defined Profile Type. Typically, there will be more than one profile registered for each type')
qmsPSErrorHandler = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSErrorHandler.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSErrorHandler.setDescription("Error Handler is a diagnostic tool that identifies PostScript errors encountered during a print job. Choices Yes: Load the Error Handler at power on. No: Don't load the Error Handler. Default No Notes Refer to the PostScript Language Reference Manual (Adobe Systems Incorporated, Reading, PA: Addison- Wesley, 1990, ISBN 0-201-18127-4) for more information on PostScript errors.")
qmsPSOutputPositioning = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSOutputPositioning.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSOutputPositioning.setDescription('PS Flag to enable or disable output positioning.')
qmsPSDefaultHalftone = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 138), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basic", 1), ("standard", 2), ("advanced", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSDefaultHalftone.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSDefaultHalftone.setDescription('Sets the default PostScript halftone type. Choices Basic Standard Advanced Default Standard Notes Consult your printer documentation for more information. These values are specific to each printer.')
qmsPSDefaultBlackOverPrint = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 139), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSDefaultBlackOverPrint.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSDefaultBlackOverPrint.setDescription('PS value....')
qmsPSDefaultCRD = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 140), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSDefaultCRD.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSDefaultCRD.setDescription('PS value for the default color rendering dictionary.')
qmsPSDefaultDither = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 141), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPSDefaultDither.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSDefaultDither.setDescription('PS value for the default dither.')
qmsPSDefaultGamma = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 152), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSDefaultGamma.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSDefaultGamma.setDescription('PS value for the default gamma correction to use.')
qmsPSIntensity = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 520, 154), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("darkest", 1), ("darker", 2), ("normal", 3), ("lighter", 4), ("lightest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsPSIntensity.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPSIntensity.setDescription("Intensity uses the PostScript settrasfer operator's functionality to make the print lighter or darker while maintaining the linearity of the grayscale. Choices: Darkest, Darker, Normal, Lighter, Lightest Default: Normal")
qmsHPGLPaperType = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("a", 1), ("a4", 2), ("b", 3), ("a3", 4), ("c", 5), ("d", 6), ("e", 7), ("cArch", 8), ("dArch", 9), ("eArch", 10), ("a2", 11), ("a1", 12), ("a0", 13), ("scaleToPaper", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPaperType.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPaperType.setDescription("Identifies the original image's paper size. Choices A-(8.5''x 11''-216 x 279 mm), A0-(33.11'' x 46.81''-841 x 1189 mm) A1-(23.39'' x 3.11''-594 x 1189 mm) A2-(16.54'' x 23.29''-420 x 594 mm) A3-(11.69'' x 16.54''-297 x 420 mm) A4-(8.27'' x 11.69''-210 x 297 mm) B-(11'' x 17''-279 x 432 mm) C-(17'' x 22''-431.80 x 558.80 mm) D-(22'' x 34''-558.80 x 863.60 mm) E-(34'' x 44''-863.60 x 1117.60 mm) C ARCH D ARCH E ARCH Scale to Paper Default Scale to Paper Note: These paper sizes describe a mapping to the physical paper. This mapping is a scaling factor (or a size ratio) between the chosen paper size and the physical paper size in the default inputbin. For example if A3 is selected (size 11.69'' x 16.54'') for paper size and the physical paper size in the default inputbin is A4 (8.27'' x 11.69''), then the plot is scaled by a factor of 2.")
qmsHPGLPlotter = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("plotter7475A", 1), ("plotter7470A", 2), ("colorpro", 3), ("plotter7550A", 4), ("draftmaster", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPlotter.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPlotter.setDescription('Identifies the HP-GL plotter type. Choices 7475A 7470A Colorpro 7550A DraftMaster: Supports architectural and engineering paper sizes (for example, A to E and Arch A to Arch E). Default 7550A')
qmsHPGLScalingPercent = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 150))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLScalingPercent.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLScalingPercent.setDescription('Identifies the percentage to reduce or enlarge an image. Choices 001-150 (1-150%) Default 100 (100%) Note: To scale plots, select the paper size originally used for the plot in the Paper Type menu and then enter the reduction or enlargement needed to fit the plot on the new page in the Scaling Percent menu.')
qmsHPGLEnhancedMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLEnhancedMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLEnhancedMode.setDescription('Increases the resolution of the grid for downloaded characters. The HP-GL UC (User-defined Character) command allows you to down- load and draw characters using an encoding scheme consisting of sequences of pen control movements and coordinate sequences. The characters are drawn on a grid that is superimposed on the character plot cell. Choices On: Standard resolution for fixed- and variable-spaced fonts (4x8 grid). Off: Enhanced resolution for variable-spaced fonts (26x36 grid). Default Off')
qmsHPGLExpandMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLExpandMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLExpandMode.setDescription('Defines a larger imageable area which affects the default placement of the scaling points P1 and P2. Choices On: Turn on expand mode Off: Use default scaling points, plotting range, and plotting area. Default Off Notes The available range of plotter units for a particular media size is only partially determined by setting the Expand Mode to On. When the printer/plotter senses the media size it automatically sets the hard clip limit to 15mm on three sides and 39 mm on the fourth. If Expand Mode is On, then the hard clip limits are set to 5mm on three sides and 29 mm on the fourth side. This is what allows you to define a larger imageable area. The HP-GL emulation senses the media type if the paper type is set to Scale to Paper. It is also possible to have the HP-GL emulation use a particular media size by setting Original Paper Type through the control panel or by using a Document Option Command.')
qmsHPGLPenWidth1 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth1.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth1.setDescription("Sets the width for pen 1. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 1-7 (0.7 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenWidth2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth2.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth2.setDescription("Sets the width for pen 2. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 2-3 (0.3 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenWidth3 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth3.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth3.setDescription("Sets the width for pen 3. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 3-3 (0.3 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenWidth4 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth4.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth4.setDescription("Sets the width for pen 4. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 4-3 (0.3 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenWidth5 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth5.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth5.setDescription("Sets the width for pen 5. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 5-3 (0.3 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenWidth6 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth6.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth6.setDescription("Sets the width for pen 6. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 6-3 (0.3 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenWidth7 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth7.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth7.setDescription("Sets the width for pen 7. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 7-3 (0.3 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenWidth8 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenWidth8.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenWidth8.setDescription("Sets the width for pen 8. Each pen has a width option available. Choices 0-60 (0.0-6.0 mm) Default Pen 8-3 (0.3 mm) Note A choice of 0 defaults to a pixel of '1'.")
qmsHPGLPenColor1 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor1.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor1.setDescription('Sets color for pen 1. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 1-Black (100% black)')
qmsHPGLPenColor2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor2.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor2.setDescription('Sets color for pen 2. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 2-Black (100% black)')
qmsHPGLPenColor3 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor3.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor3.setDescription('Sets color for pen 3. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 3-Red (70% black)')
qmsHPGLPenColor4 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor4.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor4.setDescription('Sets color for pen 4. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 4-Green (41% black)')
qmsHPGLPenColor5 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor5.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor5.setDescription('Sets color for pen 5. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 5-Blue (89% black)')
qmsHPGLPenColor6 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor6.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor6.setDescription('Sets color for pen 6. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 6-Violet (59% black)')
qmsHPGLPenColor7 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor7.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor7.setDescription('Sets color for pen 7. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 7-Orange (25.8% black)')
qmsHPGLPenColor8 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 524, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("red", 2), ("orange", 3), ("yellow", 4), ("green", 5), ("blue", 6), ("cyan", 7), ("magenta", 8), ("black", 9), ("violet", 10), ("brown", 11), ("gray25Percent", 12), ("gray50Percent", 13), ("gray75Percent", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPGLPenColor8.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPGLPenColor8.setDescription('Sets color for pen 8. Each pen has a color option available. Choices Black, Blue, Brown, Cyan, Gray-25%, Gray-50%, Gray- 75%, Green, Magenta, Orange, Red, Violet, Yellow Default Pen 8-Brown (50% black)')
qmsHPPCLLineTermination = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("crEQcr-lfEQlf", 1), ("crEQcrANDlf-lfEQlf", 2), ("crEQcr-lfEQcrANDlf", 3), ("crORlfEQcrANDlf", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLLineTermination.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLLineTermination.setDescription('Indicates the default line termination mode. This setting specifies the treatment of line feeds and carriage returns. Choices CR=CR LF=LF CR=CR+LF LF=LF CR=CR LF=CR+LF CR or LF=CR+LF Default CR=CR LF=LF')
qmsHPPCLFontNumber = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("courier12", 1), ("courier12Bold", 2), ("courier12Italic", 3), ("courier10", 4), ("courier10Bold", 5), ("courier10Italic", 6), ("lineprinter", 7), ("times", 8), ("timesItalic", 9), ("timesBold", 10), ("timesBldItalic", 11), ("univ", 12), ("univItalic", 13), ("univBold", 14), ("univBoldItalic", 15), ("univcond", 16), ("univcondItalic", 17), ("univcondBold", 18), ("univcondBldItlc", 19), ("selectByIndex", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLFontNumber.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLFontNumber.setDescription("Sets the printer's default font. Choices Courier12, Courier12bold, Courier12italic, Courier10, Courier10bold, Courier10italic, Lineprinter, Times*, Times*Italic, Times*Bold, Times*BldItalic, Univ*, Univ*Italic, Univ*Bold, Univ*BldItalic, Univcond*, Univcond*Italic, Univcond*Bold, Univcond*BldItlc, Select By Index Default Courier12 Notes Fonts with an asterisk `*` in their names are scalable. Their default point size is set by the Point Size X100 option. Choosing Selectbyindex as the default font selects the font by the index number printed on the advanced status page and is set through the Default Font Index option. Note: You must used the selectbying value to select an Intellifont. All courier fonts (courier10 and courier12) and lineprinter are bitmap fonts, so they have a fixed point size. Selecting a bound, bitmap font overrides the default settings for symbol set and point size. An unbound font uses the specified default symbol set if possible, and a scalable font uses the default font size.")
qmsHPPCLLinesPerInch = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 4800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLLinesPerInch.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLLinesPerInch.setDescription('Sets the default lines printed per inch in PCL jobs, regardless of page size. Choices 100 to 4800 Default 600 Notes You must enter the number of lines per inch times 100. For example, 6 lines per inch is entered as 600; 6.6 lines per inch is entered as 660.')
qmsHPPCLDefaultSymbolSet = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(278, 15, 79, 175, 342, 374, 406, 566, 309, 630, 294, 181, 235, 331, 427, 459, 203, 270, 174, 206, 502, 54, 38, 22, 20, 10, 84, 40, 5, 39, 310, 395))).clone(namedValues=NamedValues(("roman8", 278), ("isoLatin1", 15), ("isoLatin2", 79), ("isoLatin5", 175), ("pc8US", 342), ("pc8DN", 374), ("pc850", 406), ("pc852Latin2", 566), ("pc8TK", 309), ("win31Latin1", 630), ("win31Latin2", 294), ("win31Latin5", 181), ("desktop", 235), ("psText", 331), ("venturaIntl", 427), ("venturaUS", 459), ("microsoftPub", 203), ("math8", 270), ("psMath", 174), ("ventura-Math", 206), ("piFont", 502), ("legal", 54), ("iso4UK", 38), ("iso6ASCII", 22), ("iso11SWED", 20), ("iso15ITAL", 10), ("iso17SPAN", 84), ("iso21GERM", 40), ("iso60NORW", 5), ("iso69FREN", 39), ("win30Latin1", 310), ("mcText", 395)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLDefaultSymbolSet.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLDefaultSymbolSet.setDescription('Selects the default symbol set for the emulation. Not all symbol sets are available with certain resident fonts. In particular, the Desktop, PS Math, Math 8, Microsoft Pub, Pi Font, PS Text, Ventura Intl, Ventura Math, Ventura US, and Windows symbol sets cannot be used with the resident bitmap fonts: courier10, courier10bold, courier10italic, courier12, courier12bold, courier12italic, and lineprinter. Choices Roman-8, PC-850, PC8-US, PC8-DN, Legal, ISO-4, ISO-6, ISO-11, ISO-15, ISO-17, ISO-21, ISO-60, ISO-69, Desktop, PS Math, Math-8, Microsoft-Pub, Pi - font, PS-Text, Ventura-Intl, Ventura-Math, Ventura-US, Windows , ISO-Latin-1, ISO-Latin-2, ISO-Latin-5, PC-852, PC-8tk, Windows 3.1-1, Windows 3.1-2, Windows 3.1-3, MC-Text Default Roman-8 Notes If a mismatch between symbol set and fonts occurs, the standard PCL font selection mechanism is used to locate a font that matches the selected symbol set. With the standard set of fonts distributed for your printer, this matches the Times* font, but other user-installed fonts could change this result.')
qmsHPPCLPreJobReset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("oncompatibility", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLPreJobReset.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLPreJobReset.setDescription("Allows you to control the PCL 5e print environment across print jobs. Choices Off: Resets PCL to its default state at the end of each PCL print job, executes an implicit <ESC>E at the start and end of the job, and deletes any temporary fonts, macros, and patterns. On: Resets PCL to its default state at the end of each PCL print job. Temporary fonts, macros, and patterns from previous PCL jobs are retained in memory after the print job has completed. You can recall these downloaded fonts, macros, or patterns from within your PCL file without having to download them again. On Compatibility: Retains the entire state of PCL as well as the temporary macros, fonts, and patterns from previous PCL jobs. Default Off Notes A retained state is cleared if you do any of the following: * Explicitly clear the PCL state by sending an <ESC>E or Printer Job Language. * Turn off the printer. (Note that if Retain Temporary is set to On or On Compatibility and power is turned off and back on again, all temporary objects on the disk's standard resource will become permanent. RAM-based temporary objects are lost). * Change any PCL front panel option. * Send any PCL-specific DOC commands (except the DOC emulation command). * Send a PCL job from a different communications port. For example, the state set up by a PCL job using the parallel port is cleared if a subsequent PCL job arrives at the serial port).")
qmsHPPCLPointSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 99975))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLPointSize.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLPointSize.setDescription('Sets the point size for scalable default fonts in units of hundreths of a point. For example, a 24 point default point size is selected by enter- ing 2400. The smallest increment allowed in point size is .25 point (for example, 8.5 point and 8.75 point fonts are allowed, but 8.6 point is not). Choices 00025-99975 (0.25-999.75 points) Default 01200 (12 points) Notes If the font is not scalable or if a bitmap font is specified, the setting is ignored.')
qmsHPPCLDefaultFontID = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLDefaultFontID.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLDefaultFontID.setDescription('Sets the Default Font Index when the Default Font is set to selectbyindex. Choices 0 to 32767 Default 0 Note The index number can be obtained by the listing printed on the advanced status page.')
qmsHPPCLGL2Plotter = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsHPPCLGL2Plotter.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLGL2Plotter.setDescription('Allows your printer to emulate a monochrome or color plotter. Choices On: Sets the printer to monochrome (2 pen). Off: Sets the printer to color (8 pen). Note: Since a monochrome print system has two pen colors only (black and white), grayscale patterns are substituted for other colors. The printer maps each pen to its assigned color, then converts the color to a grayscale using the National Television System Committee (NTSC) color standard for luminosity coefficients (Additive System): Y = .3R + .59G + .11B Examples on How to Use the Color Standard Formula White Y = [(1*0.3) + (1*0.59) + (1*0.11)]-100% gray Black Y = [(0*0.3) + (0*0.59) + (0*0.11)]-0% gray Red Y = [(1*0.3) + (0*0.59) + (0*0.11)]-30% gray Green Y = [(0*0.3) + (1*0.59) + (0*0.11)]-59% gray Yellow Y = [(1*0.3) + (1*0.59) + (0*0.11)]-89% gray Blue Y = [(0*0.3) + (0*0.59) + (1*0.11)]-11% gray Magenta Y = [(1*0.3) + (0*0.59) + (1*0.11)]-41% gray Cyan Y = [(0*0.3) + (1*0.59) + (1*0.11)]-70% gray Default On Pen Color Defaults: Pen 1 = White Pen 2 = Black Pen 3 = Red Pen 4 = Green Pen 5 = Yellow Pen 6 = Blue Pen 7 = Magenta Pen 8 = Cyan')
qmsHPPCLDiskOrRam = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 525, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("memory", 1), ("disk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsHPPCLDiskOrRam.setStatus('mandatory')
if mibBuilder.loadTexts: qmsHPPCLDiskOrRam.setDescription('Controls the default storage location of PCL objects (fonts, macros, and patterns) when it is not otherwise specified through DOC com- mands. Choices Disk: All downloaded PCL objects are stored in the default disk resource, if present. Memory: All downloaded PCL objects are stored in temporary storage in RAM. Default Disk Notes Note: Before downloading any fonts, macros, or patterns ensure that the printer has enough memory to do the download. DOC commands specifying resources override this option on a per-job basis. If this option is set to Disk and no hard disk is installed, memory is used as the default storage location. If the printer has both a hard disk and a large amount of memory, setting this option to Memory enhances printer performance.')
qmsDECLN03ProductID = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ln03", 1), ("lqp02", 2), ("la100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03ProductID.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03ProductID.setDescription('This is the emulation printer model. If your host sends a Device Attributes request to the printer, the printer responds with the Product ID. Choices LN03, LQP02, and LA100 Default LN03')
qmsDECLN03AutowrapMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03AutowrapMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03AutowrapMode.setDescription('Determines whether text that exceeds the right margin wraps to the next line. Choices Off and On Default On')
qmsDECLN03PaperSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("letter", 1), ("a4", 2), ("legal", 3), ("sz11x17", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03PaperSize.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03PaperSize.setDescription('Specifies the paper size used at power-up or when no paper size is specified. Choices Letter, A4, Legal, and 11x17 Default Letter')
qmsDECLN03PaperSizeOverride = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03PaperSizeOverride.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03PaperSizeOverride.setDescription('Controls the paper selection. If Paper Size Override is disabled, the emulation uses the transformation point for the size of paper selected and uses the current paper size (does not change paper trays). If Paper Size Override is enabled, the transformation is the same as above, and the specified paper size is selected. Choices Off and On Default Off')
qmsDECLN03Xorigin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Xorigin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03Xorigin.setDescription('Moves the lower left corner of the image to the right from 0 to 300 dots (1 inch at a resolution of 300 dpi). Use this option to eliminate clipping of the right edge of the image on some systems. Range 0-300 Default 75')
qmsDECLN03Yorigin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Yorigin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03Yorigin.setDescription('Moves the lower left corner of the image downward from 0 to 300 dots (1 inch at a resolution of 300 dpi). Use this option to eliminate clipping of the top edge of the image on some systems. Range 0-300 Default 75')
qmsDECLN03Reset = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Reset.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03Reset.setDescription('Determines whether the printer automatically resets to the initial power-up configuration before every print job or whether it retains the configuration from the previous print job. Choices Off and On Default Off')
qmsDECLN03Orientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 532, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsDECLN03Orientation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsDECLN03Orientation.setDescription('Sets the printing direction of the print media. Choices Portrait: Prints the Y axis parallel to the long edge of the page. Landscape: Prints the Y axis parallel to the short edge of the page. Default Portrait')
qmsQUIC2CommandCharacter = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2CommandCharacter.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2CommandCharacter.setDescription('This option specifies the default command character. Enter the decimal value of the QUIC II command character. The options range from 32 to 255 with the exception of 78 (N) and 110 (n). The default is 94 (^).')
qmsQUIC2TopMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TopMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2TopMargin.setDescription('This option specifies the default top page margin in dots. The available range of options is from 0000 to 9999. The default is 0060.')
qmsQUIC2BottomMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2BottomMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2BottomMargin.setDescription('This option specifies in dots the default bottom page margin. The available range of options is from 0000 to 9999. The default is 0060. The status page displays it as the displacement from the top of the page.')
qmsQUIC2LeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2LeftMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2LeftMargin.setDescription('This option specifies the default left page margin in dots. The available range of options is from 0000 to 9999. The default is 0060.')
qmsQUIC2RightMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2RightMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2RightMargin.setDescription('This option specifies the default right page margin in dots. The available range of options is from 0000 to 9999. The default is 0060. The status page displays it as the displacement from the top of the page.')
qmsQUIC2IfParam = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediateErase", 1), ("immediateEject", 2), ("onPageEject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2IfParam.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2IfParam.setDescription('This option determines when the printer pulls paper from a different input tray when the ^IF Paper Handling command is used. The options are * Immediate/Erase (when the ^IF command is encountered, the input tray is immediately selected, and any images on the current page prior to the ^IF command are not printed) * Immediate/Eject (when the ^IF command is encountered, the current page is immediately ejected using current input tray, and subsequent pages are printed using the newly requested input tray) * On Page Eject (when the ^IF command is encountered, the current page is printed using the current input tray, and when a page ejection is encountered, such as a Form Feed command or exceeding the bottom margin, the subsequent pages print from the newly requested input tray). The default is On Page Eject.')
qmsQUIC2CReqCRLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("crEQcrANDlf", 2), ("crEQcr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2CReqCRLF.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2CReqCRLF.setDescription('This option determines whether a line feed is added to each carriage return received by the printer. The selection affects system carriage return control mode (0D) as well as QUIC II Carriage Return commands (^-). The options are CR and CR+LF. The default is CR.')
qmsQUIC2LFeqLFCR = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("lfEQlfANDcr", 2), ("lfEQlf", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2LFeqLFCR.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2LFeqLFCR.setDescription('This option determines whether or not a carriage return is added to each line feed received by the printer. The selection affects system Line Feed Control commands as well as QUIC II Line Feed Control commands. The options are LF and LF+CR. The default is LF+CR.')
qmsQUIC2Decimal = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("implicitLeft", 1), ("implicitRight", 2), ("explicit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Decimal.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2Decimal.setDescription('This option selects whether implicit decimal values are interpreted as left- or right-justified or whether explicit decimals are inserted in QUIC II commands. Refer to the QUICII documentation for information about left- and right-justified implicit decimal values and inserting explicit decimals in QUIC II commands. The options are Implicit/Left (interpret implicit decimal values as left-justified), Implicit/Right (interpret implicit decimal values as right-justified), and Explicit (use explicit decimals in values). The default is Implicit/Left.')
qmsQUIC2Dimensions = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dots", 1), ("centimeters", 2), ("inches", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Dimensions.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2Dimensions.setDescription('This option determines whether dimensions in QUIC II commands are interpreted as inches, centimeters, or dots. Refer to the QUICII documentation for information. The options are Centimeters, Inches, and Dots. The default is Inches.')
qmsQUIC2EDPMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2EDPMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2EDPMode.setDescription('This option specifies the lines-per-inch setting used in QUIC II Line Printer mode. The default uses the setting of the Lines Per Inch option. The options are On (66 lines/page regardless of page orientation) and Off (use default lines-per-inch setting). The default is Off.')
qmsQUIC2DefaultFont = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2DefaultFont.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2DefaultFont.setDescription('This option specifies a default font to be active when QUIC II is entered. It also is the default font for QUIC II Line Printer mode. Refer the QUICII documentation for additional information about fonts. Enter the font number for default font. The range is from 00000 to 32767. The default font is number 0938 (Q-Format).')
qmsQUIC2LineSpacing = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lpi6", 1), ("lpi8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2LineSpacing.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2LineSpacing.setDescription('This option selects the lines-per-inch setting to be used for printing. Refer to the QUICII documentation for information. The options are 6 (6 lines/inch) and 8 (8 lines/inch). The default is 8.')
qmsQUIC2Orientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Orientation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2Orientation.setDescription('This option controls the direction of printing on the page. Portrait orientation is 0 deg. rotation and landscape orientation is 270 deg. rotation. Refer to the QUICII documentation for information about page orientation. The options are Portrait and Landscape. The default is Portrait.')
qmsQUIC2Scan = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Scan.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2Scan.setDescription('')
qmsQUIC2Spaces = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2Spaces.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2Spaces.setDescription('This option allow you to ignore leading/trailing spaces in numeric values. The options are On (absorb leading/ trailing spaces) and Off (do not absorb leading/trailing spaces). The default is Off.')
qmsQUIC2AllowDataRepeats = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2AllowDataRepeats.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2AllowDataRepeats.setDescription('This option enables or disables the ^DR Data Repeat command. Refer to the QUICII documentation for information about this command. The options are On (allow Data Repeat commands) and Off (ignore Data Repeat commands). The default is On.')
qmsQUIC2AllowOverlays = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2AllowOverlays.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2AllowOverlays.setDescription('This option enables or disables all Overlay commands. Refer to the QUICII documentation for information about overlays. The options are On (allow Overlay commands) and Off (do not allow Overlay commands). The default is On.')
qmsQUIC2AllowPageCopies = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2AllowPageCopies.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2AllowPageCopies.setDescription('This option enables or disables the Multiple Copy command. Refer to the QUICII documentation for additional information. The options are On (allow multiple or continuous copies) and Off (do not allow multiple or continuous copies). The default is On.')
qmsQUIC2SaveDLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2SaveDLF.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2SaveDLF.setDescription('This option allows you to choose whether or not all downloaded fonts are retained on disk. If this option is not enabled and the power is turned off, the fonts are lost. Refer to the QUICII documentation for information about downloaded fonts. The options are On (save downloaded fonts) or Off (do not save downloaded fonts). The default is Off.')
qmsQUIC2SaveOverlays = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2SaveOverlays.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2SaveOverlays.setDescription('This option allows you to choose whether or not all overlays are retained on disk. If this option is not enabled and the power is turned off, the overlays are lost. Refer to the QUICII documentation for information about overlays. The options are On (save overlays) or Off (do not save overlays). The default is Off.')
qmsQUIC2DefaultMode = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linePrinter", 1), ("commandFree", 2), ("commandNoFree", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2DefaultMode.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2DefaultMode.setDescription('This option selects QUIC II Line Printer mode or QUIC II command mode with or without Free Format. Refer to the QUICII documentation for information on the two modes and on Free Format. The options are Line Printer (enter QUIC II Line Printer mode), Command/ Free, (enter QUIC II mode with Free Format on), or Command/No Free (enter QUIC II mode with Free Format off). The default is Line Printer.')
qmsQUIC2RebuildFontTable = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2RebuildFontTable.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2RebuildFontTable.setDescription('This option determines whether or not characters that have been inserted into downloaded fonts with a Font Definition command (^DFA) are erased or retained when QUIC II is entered. Refer to the QUICII documentation for information about inserted characters in downloaded fonts. The options are On (retain inserted characters) or Off (do not retain inserted characters). The default is Off.')
qmsQUIC2TrayMap1 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap1.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2TrayMap1.setDescription('Map Tray 1 To:')
qmsQUIC2TrayMap2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap2.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2TrayMap2.setDescription('Map Tray 2 To:')
qmsQUIC2TrayMap3 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap3.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2TrayMap3.setDescription('Map Tray 3 To:')
qmsQUIC2TrayMap4 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap4.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2TrayMap4.setDescription('Map Tray 4 To:')
qmsQUIC2TrayMap5 = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2TrayMap5.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2TrayMap5.setDescription('Map Tray 5 To:')
qmsQUIC2PatternType = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 534, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opaque", 1), ("transparent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsQUIC2PatternType.setStatus('mandatory')
if mibBuilder.loadTexts: qmsQUIC2PatternType.setDescription('This option allows the patterns to be either opaque or transparent. The default value is opaque.')
qmsLPFont = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPFont.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPFont.setDescription('Sets the printer fonts for the current print job. Any PostScript fonts available on the printer can be used. To see a list of available Post- Script fonts, print an advanced status page through the printer config- uration menu. Choices All printer-resident PostScript fonts. Default Courier')
qmsLPPointSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPPointSize.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPPointSize.setDescription('Sets the five-digit value used to specify the point size of the font for the current print job. Choices 00000-99999 Default 00880 (8.8 points)')
qmsLPAsciiMap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("ascii", 2), ("ebcdic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPAsciiMap.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPAsciiMap.setDescription('Specifies the type of character map to be used. Choices ASCII, EBCDIC, PC ASCII, PC Multilingual Default ASCII Note If you select the PC ASCII or PC Multilingual character map, special PostScript fonts will be substituted for the lineprinter character map.')
qmsLPLineNumbering = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLineNumbering.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPLineNumbering.setDescription("Specifies that a five-digit number is to be prefixed to each line. Choices On: Number all lines. Off: Don't number lines. Default Off")
qmsLPTabStops = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPTabStops.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPTabStops.setDescription('Specifies the number of spaces between tab stops. Choices 0-256 Default 8')
qmsLPLFisCRLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLFisCRLF.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPLFisCRLF.setDescription('Stipulates whether each line feed (LF) in the print job is translated to a carriage return/line feed (CRLF) combination. Choices On: Translate all line feeds to carriage return/line feed combinations. Off: Use line feeds only as line feeds. Default On')
qmsLPCRisCRLF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPCRisCRLF.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPCRisCRLF.setDescription('Stipulates whether each carriage return (CR) in the print job is trans- lated to a carriage return/line feed (CRLF) combination. Choices On: Translate all carriage returns to line feeds. Off: Use carriage returns only as carriage returns. Default Off')
qmsLPFFisCRFF = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPFFisCRFF.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPFFisCRFF.setDescription('Stipulates whether each form feed (FF) in the print job is translated to a carriage return/form feed (CRFF) combination. Choices On: Translate all form feeds to carriage return/form feed combinations. Off: Use form feeds only as form feeds. Default On')
qmsLPOrientation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPOrientation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPOrientation.setDescription('Specifies whether text and graphics are placed on the page in a por- trait or landscape orientation. Choices Landscape Portrait Default Portrait')
qmsLPLineWrap = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLineWrap.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPLineWrap.setDescription('Indicates whether long lines are to be wrapped to the next line instead of being truncated. Choices On: Wrap long lines. Off: Truncate long lines. Default On')
qmsLPLinesPerPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLinesPerPage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPLinesPerPage.setDescription('Specifies the number of lines printed on a page before an automatic page eject. Interline spacing is set to the selected point size. Logical pages consisting of more lines than specified are split into multiple pages. Choices 1-128 Default 87')
qmsLPLeftMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPLeftMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPLeftMargin.setDescription("Defines the left margin in 1/7200'' increments. Choices Left 0-79200 (0''-11.00'') Default Left 0 Note The margins are in 1/7200 increments (79200 is 11.00'' in 1/7200'' increments.")
qmsLPRightMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPRightMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPRightMargin.setDescription("Defines the right margin in 1/7200'' increments. Choices Right 0-79200 (0''-11.00'') Default Right 0 Note The margins are in 1/7200 increments (79200 is 11.00'' in 1/7200'' increments.")
qmsLPTopMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPTopMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPTopMargin.setDescription("Defines the top margin in 1/7200'' increments. Choices Top 0-79200 (0''-11.00'') Default Top 0 Note The margins are in 1/7200 increments (79200 is 11.00'' in 1/7200'' increments.")
qmsLPBottomMargin = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 539, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 79200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsLPBottomMargin.setStatus('mandatory')
if mibBuilder.loadTexts: qmsLPBottomMargin.setDescription("Defines the bottom margin in 1/7200'' increments. Choices Bottom 0-79200 (0''-11.00'') Default Bottom 0 Note The margins are in 1/7200 increments (79200 is 11.00'' in 1/7200'' increments.")
qmsTIFFAutoRotation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("rot90", 2), ("rot270", 3), ("rot180", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAutoRotation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsTIFFAutoRotation.setDescription('Allows you to specify whether the TIFF image should be automatically rotated 90 degrees if this would result in a better fit on the currently selected paper size. Choices Off, 90, 270, 180 Default 90')
qmsTIFFScratchFileSize = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFScratchFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: qmsTIFFScratchFileSize.setDescription("Allows you to define the size of the scratch file (in MB) that is created on the printer's hard disk to contain the image during processing. Choices 0: No scratch file is created, and the data is processed from the host input spool buffer as it is received. 1-255: The data is written to the scratch file if there is not enough room in the host input spool buffer to hold it. Default 0")
qmsTIFFPaperToImage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFPaperToImage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsTIFFPaperToImage.setDescription('Allows you to specify whether the TIFF emulation should automatically select the paper size closest to the image size rather than using the default paper size. Choices Off, On Default On')
qmsTIFFAnnotationState = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAnnotationState.setStatus('mandatory')
if mibBuilder.loadTexts: qmsTIFFAnnotationState.setDescription('Allows you to enable or disable annotation. Choices Enabled, Disabled Default Disabled')
qmsTIFFAnnotationTag = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAnnotationTag.setStatus('mandatory')
if mibBuilder.loadTexts: qmsTIFFAnnotationTag.setDescription('Identifies the annotation tag number. Choices 0-65000 Default 1000')
qmsTIFFReverseImage = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFReverseImage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsTIFFReverseImage.setDescription("Allows you to turn reverse image 'on' or 'off'. Choices on, off Default off")
qmsTIFFAutoScaling = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 541, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("upANDdown", 2), ("upOnly", 3), ("downOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsTIFFAutoScaling.setStatus('mandatory')
if mibBuilder.loadTexts: qmsTIFFAutoScaling.setDescription('Allows you to specify whether the TIFF image should be scaled (up or down) to fit on the currently selected paper size. Choices Off, Down Only, Up Only, Up & Down Default Up & Down')
qmsCALSAutoRotation = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 542, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("rot90", 2), ("rot270", 3), ("rot180", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCALSAutoRotation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCALSAutoRotation.setDescription('Allows you to specify whether the CALS image should be automatically rotated 90 degrees if this would result in a better fit on the currently selected paper size Choices Off, 90, 270, 180 Default 90')
qmsCALSAutoScaling = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 542, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("upANDdown", 2), ("upOnly", 3), ("downOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCALSAutoScaling.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCALSAutoScaling.setDescription('Allows you to specify whether the CALS image should be automatically scaled (up or down) to fit on the currently selected paper size. Choices Off, Up & Down, Up Only, Down Only Default Up & Down')
qmsCGMSuppressScale = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMSuppressScale.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCGMSuppressScale.setDescription('Specifies whether the file should be scaled. Choices No: The file is scaled. Yes: The file is NOT scaled. Default No Notes If yes is Selected and a file with metric scaling is printed, the file will not be scaled.')
qmsCGMMono = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("on", 2), ("off", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMMono.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCGMMono.setDescription('Specifies whether the file should be printed in monochrome or color. Choices On: The file prints in monochrome. Off: The file prints in color. Default Off Notes Off (color printing) is not available on monochrome printers.')
qmsCGMIgnoreBorder = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMIgnoreBorder.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCGMIgnoreBorder.setDescription('Causes the non-printable area of a page to be ignored. Choices Yes, No Default No Notes If the non-printable area is ignored, the image is shifted up and to the right.')
qmsCGMOriginX = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMOriginX.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCGMOriginX.setDescription("The viewport origin, along with the viewport size, determines the paper size selected. The image is scaled to fit within the specified viewport. Specifies the X origin of the CGM viewport in .01'' increments. Choices 0-1700 (0''-17.00'') Default 100 (1'')")
qmsCGMOriginY = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMOriginY.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCGMOriginY.setDescription("The viewport origin, along with the viewport size, determines the paper size selected. The image is scaled to fit within the specified viewport. Specifies the Y origin of the CGM viewport in .01'' increments. Choices 0-1700 (0''-17.00'') Default 100 (1'')")
qmsCGMPrintErrors = MibScalar((1, 3, 6, 1, 4, 1, 480, 1, 544, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsCGMPrintErrors.setStatus('mandatory')
if mibBuilder.loadTexts: qmsCGMPrintErrors.setDescription('Causes an additional page, listing errors encountered, to print if a CGM job contains errors. Choices Yes, No Default No')
qmsRel = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2))
qmsPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1))
qmsIF = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9))
qmsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10))
qmsPtrSys = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1, 1))
qmsPtrEmu = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1, 2))
qmsPtrJobs = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 1, 3))
qmsIFAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 1))
qmsIFSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2))
qmsIFConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1))
qmsIFNetware = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5))
qmsIFApple = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6))
qmsIFSnmpcontrol = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8))
qmsIFLservlmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 9))
qmsCfgUser = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10, 10))
qmsCfgAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10, 20))
qmsCfgSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 480, 2, 10, 30))
qmsPtrSysStatus = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrSysStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrSysStatus.setDescription('A text string indicating the current printer status.')
qmsPtrSysNamePrinter = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrSysNamePrinter.setStatus('optional')
if mibBuilder.loadTexts: qmsPtrSysNamePrinter.setDescription('A text string indicating the current printer name.')
qmsPtrIfTable = MibTable((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3), )
if mibBuilder.loadTexts: qmsPtrIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrIfTable.setDescription('A list of interfaces supported by this printer and their currently selected default emulations.')
qmsPtrIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1), ).setIndexNames((0, "QMS-MIB", "qmsPtrIfIndex"))
if mibBuilder.loadTexts: qmsPtrIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrIfEntry.setDescription('An interface entry containing an interface and it currently selected dafault emulation.')
qmsPtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrIfIndex.setDescription('A unique value for each interface. Its value ranges between 1 and the number of intrfaces, qmsPtrIfNumber. This value must remain the same between successive printer power cycles.')
qmsPtrIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrIfName.setDescription('The name of the interface.')
qmsPtrIfDefEmu = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 201, 65534, 65535))).clone(namedValues=NamedValues(("ultrascript", 1), ("ibm-proprinter", 2), ("diablo-630", 3), ("ti-855", 4), ("hp-gl", 5), ("hp-pcl", 6), ("hex-dump", 7), ("ti-855-dp", 8), ("ti-810", 9), ("epson-fx", 10), ("dec-ansi", 11), ("ibm-ext-ascii", 12), ("ln03", 13), ("tektronix-4014", 14), ("quic-2", 15), ("impress", 16), ("code-v", 17), ("r1", 18), ("ccitt", 19), ("line-printer", 20), ("hp-pcl-5", 21), ("esp", 201), ("not-supported", 65534), ("wild-card", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrIfDefEmu.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrIfDefEmu.setDescription('The name of the currently selected default emulation for this interface.')
qmsPtrBinTable = MibTable((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4), )
if mibBuilder.loadTexts: qmsPtrBinTable.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrBinTable.setDescription('A list of input/output paper trays supported by this printer and their currently selected paper sizes and bin names. Note: paper sizes are not assigned to output paper trays.')
qmsPtrBinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1), ).setIndexNames((0, "QMS-MIB", "qmsPtrBinIndex"))
if mibBuilder.loadTexts: qmsPtrBinEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrBinEntry.setDescription('A paper tray entry containing its currently selected default paper size and paper tray name.')
qmsPtrBinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrBinIndex.setDescription('A unique value for each input/output bin. Its value ranges between 1 and the number of input/output bins, qmsPtrBinNumber. This value must remain the same between successive printer power cycles.')
qmsPtrBinType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("input", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinType.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrBinType.setDescription('The input/output tray designator (input=1, output=0).')
qmsPtrBinId = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinId.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrBinId.setDescription('The input tray designator.')
qmsPtrBinPaper = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinPaper.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrBinPaper.setDescription('The name of the currently selected paper size for this paper tray (applies to input paper trays only).')
qmsPtrBinName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 1, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrBinName.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrBinName.setDescription('The name currently assigned to this paper tray.')
qmsPtrJobsCurStatus = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 32768))).clone(namedValues=NamedValues(("spooling", 1), ("interpreting", 2), ("rasterizing", 4), ("printing", 8), ("terminating", 16), ("waiting", 32), ("spooled", 64), ("printed", 128), ("canceled", 256), ("internal", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsCurStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsCurStatus.setDescription('The current job entries status.')
qmsPtrJobsCurSheet = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsCurSheet.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsCurSheet.setDescription('The sheet being imaged for the current job.')
qmsPtrJobsCurPage = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsCurPage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsCurPage.setDescription('The page being imaged for the current job.')
qmsPtrJobsTable = MibTable((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4), )
if mibBuilder.loadTexts: qmsPtrJobsTable.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsTable.setDescription('A list of the status, byte size, emulation, page number, sheet number, channel number, comment string, job title, and job originator string for all jobs currently being processed by the printer.')
qmsPtrJobsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1), ).setIndexNames((0, "QMS-MIB", "qmsPtrJobsIndex"))
if mibBuilder.loadTexts: qmsPtrJobsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsEntry.setDescription('The current job entry containing its current status, sheet number, and page number.')
qmsPtrJobsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsIndex.setDescription('A unique value for each currently active job. Its value ranges between 1 and the number of currently active jobs, qmsPtrJobsNumber. This value must remain the same between successive printer power cycles.')
qmsPtrJobsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 32768))).clone(namedValues=NamedValues(("spooling", 1), ("interpreting", 2), ("rasterizing", 4), ("printing", 8), ("terminating", 16), ("waiting", 32), ("spooled", 64), ("printed", 128), ("canceled", 256), ("internal", 32768)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsStatus.setDescription('The job status.')
qmsPtrJobsEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 201, 65536))).clone(namedValues=NamedValues(("ultrascript", 1), ("ibm-proprinter", 2), ("diablo-630", 3), ("ti-855", 4), ("hp-gl", 5), ("hp-pcl", 6), ("hex-dump", 7), ("ti-855-dp", 8), ("ti-810", 9), ("epson-fx", 10), ("dec-ansi", 11), ("ibm-ext-ascii", 12), ("ln03", 13), ("tektronix-4014", 14), ("quic-2", 15), ("impress", 16), ("code-v", 17), ("r1", 18), ("ccitt", 19), ("line-printer", 20), ("hp-pcl-5", 21), ("tiff", 22), ("cals", 23), ("cgm", 25), ("hp-pcl-xl", 26), ("esp", 201), ("wild-card", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsEmulation.setDescription('The emulation selected for the processing of this job.')
qmsPtrJobsPage = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsPage.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsPage.setDescription('The number of pages defined for this job. Note: Sheets are defined as the physical sheet of paper as opposed to the number of logical page images appearing on the physical sheet of paper.')
qmsPtrJobsSheet = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsSheet.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsSheet.setDescription('The number of sheets defined for this job. Note: Sheets are defined as the physical sheet of paper as opposed to the number of logical page images appearing on the physical sheet of paper.')
qmsPtrJobsChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 12, 13, 14, 16))).clone(namedValues=NamedValues(("other", 1), ("rs-232", 12), ("parallel", 13), ("appletalk", 14), ("optional-io", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsChannel.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsChannel.setDescription('The interface over which this job was communicated to the printer.')
qmsPtrJobsComment = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsComment.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsComment.setDescription('A user defined text string sent with this job.')
qmsPtrJobsTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsTitle.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsTitle.setDescription('A user defined text string, usually the name of the job.')
qmsPtrJobsOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsOwner.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsOwner.setDescription('A user defined text string, usually the username of the person originating the job.')
qmsPtrJobsStatPages = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsStatPages.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsStatPages.setDescription('The total number of pages printed for all jobs processed by the printer since the last power cycle. Note: Sheets are defined as the physical sheet of paper as opposed to the number of logical page images appearing on the physical sheet of paper.')
qmsPtrJobsStatSheets = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 1, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qmsPtrJobsStatSheets.setStatus('mandatory')
if mibBuilder.loadTexts: qmsPtrJobsStatSheets.setDescription('The total number of sheets printed for all jobs processed by the printer since the last power cycle. Note: Sheets are defined as the physical sheet of paper as opposed to the number of logical page images appearing on the physical sheet of paper.')
qmsIFAdminUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("resetOnNoClient", 2), ("hardReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsIFAdminUnitStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qmsIFAdminUnitStatus.setDescription("The units's operational status. A value other than (1) will reset the unit.")
qmsIFAdminConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("configUnknown1", 1), ("configUnknown2", 2), ("configLoadRequest", 3), ("configSaveRequest", 4), ("configDefaultRequest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsIFAdminConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qmsIFAdminConfigStatus.setDescription("The units's configuration status. read-only values: (1) reserved for future use. (2) reserved for future use. write-only values : (3) will load permanent values . (4) will save current configuration permanently. (5) load default configuration.")
qmsIFAdminOldIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qmsIFAdminOldIntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: qmsIFAdminOldIntAddr.setDescription("The Internet Address at power-on or before change by RARP or 'arp -s'.")
intAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: intAddr.setStatus('mandatory')
if mibBuilder.loadTexts: intAddr.setDescription('The Internet Address.')
ethAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ethAddr.setDescription('The Ethernet Address.')
defRout = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defRout.setStatus('mandatory')
if mibBuilder.loadTexts: defRout.setDescription('The Default Router.')
netMask = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMask.setStatus('mandatory')
if mibBuilder.loadTexts: netMask.setDescription('The Net Mask.')
tcpEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpEnb.setStatus('mandatory')
if mibBuilder.loadTexts: tcpEnb.setDescription('The TCP protocol stack enable switch.')
tftpEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpEnb.setStatus('mandatory')
if mibBuilder.loadTexts: tftpEnb.setDescription('The TFTP protocol enable switch.')
tnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tnPort.setStatus('obsolete')
if mibBuilder.loadTexts: tnPort.setDescription('The Telnet TCP Port. This object is obsolete.')
rtnOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtnOpt.setStatus('obsolete')
if mibBuilder.loadTexts: rtnOpt.setDescription('The Reverse Telnet option handling switch. This object is obsolete.')
trP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trP1.setStatus('mandatory')
if mibBuilder.loadTexts: trP1.setDescription('The Transport 1 Port.')
bootP = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 698), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootP.setStatus('mandatory')
if mibBuilder.loadTexts: bootP.setDescription('Boot Strap protocal enable/disable.')
rarp = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 699), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rarp.setStatus('mandatory')
if mibBuilder.loadTexts: rarp.setDescription('Reverse address resolution enable/disable.')
spooling = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 1, 9000), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("onInputIdle", 2), ("onIdle", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spooling.setStatus('mandatory')
if mibBuilder.loadTexts: spooling.setDescription('Job spooling option.')
netwEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 400), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netwEnb.setStatus('mandatory')
if mibBuilder.loadTexts: netwEnb.setDescription('The NetWare protocol stack enable switch.')
psName = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 401), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psName.setStatus('mandatory')
if mibBuilder.loadTexts: psName.setDescription('The NetWare print server name.')
confServ = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 402), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confServ.setStatus('mandatory')
if mibBuilder.loadTexts: confServ.setDescription('The NetWare configuration file server name.')
msgLog = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 403), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("console", 2), ("netlog", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: msgLog.setStatus('mandatory')
if mibBuilder.loadTexts: msgLog.setDescription('The NetWare message log mode.')
nwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 404), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("pserver", 2), ("rprinter", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwMode.setStatus('mandatory')
if mibBuilder.loadTexts: nwMode.setDescription('The NetWare print mode.')
psPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 405), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psPoll.setStatus('mandatory')
if mibBuilder.loadTexts: psPoll.setDescription('The NetWare print server poll time.')
fr8023 = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 420), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fr8023.setStatus('mandatory')
if mibBuilder.loadTexts: fr8023.setDescription('The 802.3 frame support switch for NetWare.')
freth2 = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 421), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: freth2.setStatus('mandatory')
if mibBuilder.loadTexts: freth2.setDescription('The Ethernet-2 frame support switch for NetWare.')
fr8022 = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 422), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fr8022.setStatus('mandatory')
if mibBuilder.loadTexts: fr8022.setDescription('The 802.2 frame support switch for NetWare.')
frSnap = MibScalar((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 423), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSnap.setStatus('mandatory')
if mibBuilder.loadTexts: frSnap.setDescription('The SNAP frame support switch for NetWare.')
login1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 432), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login1.setStatus('mandatory')
if mibBuilder.loadTexts: login1.setDescription('File server, print queue and logical printer def. .')
login2 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 433), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login2.setStatus('mandatory')
if mibBuilder.loadTexts: login2.setDescription('File server, print queue and logical printer def. .')
login3 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 434), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login3.setStatus('mandatory')
if mibBuilder.loadTexts: login3.setDescription('File server, print queue and logical printer def. .')
login4 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 435), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login4.setStatus('mandatory')
if mibBuilder.loadTexts: login4.setDescription('File server, print queue and logical printer def. .')
login5 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 436), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login5.setStatus('mandatory')
if mibBuilder.loadTexts: login5.setDescription('File server, print queue and logical printer def. .')
login6 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 437), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login6.setStatus('mandatory')
if mibBuilder.loadTexts: login6.setDescription('File server, print queue and logical printer def. .')
login7 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 438), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login7.setStatus('mandatory')
if mibBuilder.loadTexts: login7.setDescription('File server, print queue and logical printer def. .')
login8 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 439), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login8.setStatus('mandatory')
if mibBuilder.loadTexts: login8.setDescription('File server, print queue and logical printer def. .')
login9 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 440), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login9.setStatus('mandatory')
if mibBuilder.loadTexts: login9.setDescription('File server, print queue and logical printer def. .')
login10 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 441), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login10.setStatus('mandatory')
if mibBuilder.loadTexts: login10.setDescription('File server, print queue and logical printer def. .')
login11 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 442), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login11.setStatus('mandatory')
if mibBuilder.loadTexts: login11.setDescription('File server, print queue and logical printer def. .')
login12 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 443), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login12.setStatus('mandatory')
if mibBuilder.loadTexts: login12.setDescription('File server, print queue and logical printer def. .')
login13 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 444), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login13.setStatus('mandatory')
if mibBuilder.loadTexts: login13.setDescription('File server, print queue and logical printer def. .')
login14 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 445), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login14.setStatus('mandatory')
if mibBuilder.loadTexts: login14.setDescription('File server, print queue and logical printer def. .')
login15 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 446), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login15.setStatus('mandatory')
if mibBuilder.loadTexts: login15.setDescription('File server, print queue and logical printer def. .')
login16 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 447), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: login16.setStatus('mandatory')
if mibBuilder.loadTexts: login16.setDescription('File server, print queue and logical printer def. .')
rprinter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 470), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter1.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter1.setDescription('Pserver name and printer number on pserver.')
rprinter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 471), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter2.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter2.setDescription('Pserver name and printer number on pserver.')
rprinter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 472), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter3.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter3.setDescription('Pserver name and printer number on pserver.')
rprinter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 473), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter4.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter4.setDescription('Pserver name and printer number on pserver.')
rprinter5 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 474), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter5.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter5.setDescription('Pserver name and printer number on pserver.')
rprinter6 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 475), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter6.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter6.setDescription('Pserver name and printer number on pserver.')
rprinter7 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 476), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter7.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter7.setDescription('Pserver name and printer number on pserver.')
rprinter8 = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 5, 477), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rprinter8.setStatus('mandatory')
if mibBuilder.loadTexts: rprinter8.setDescription('Pserver name and printer number on pserver.')
atlkEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 500), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkEnb.setStatus('mandatory')
if mibBuilder.loadTexts: atlkEnb.setDescription('The AppleTalk protocol stack enable switch.')
atlkZone = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 502), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkZone.setStatus('mandatory')
if mibBuilder.loadTexts: atlkZone.setDescription('The AppleTalk zone name.')
atlkZonerEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 503), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkZonerEnb.setStatus('mandatory')
if mibBuilder.loadTexts: atlkZonerEnb.setDescription('The AppleTalk HP Zoner support enable switch.')
atlkLWEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 560), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkLWEnb.setStatus('mandatory')
if mibBuilder.loadTexts: atlkLWEnb.setDescription('The AppleTalk LaserWriter support enable switch.')
atlkQMSRemConEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 561), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkQMSRemConEnb.setStatus('mandatory')
if mibBuilder.loadTexts: atlkQMSRemConEnb.setDescription('The AppleTalk QMS Remote Console support enable switch.')
atlkConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 6, 562), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("conventional", 1), ("spooling", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atlkConnType.setStatus('mandatory')
if mibBuilder.loadTexts: atlkConnType.setDescription('The AppleTalk connection type.')
enableAuthenTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 715), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableAuthenTraps.setStatus('mandatory')
if mibBuilder.loadTexts: enableAuthenTraps.setDescription('Same as snmpEnableAuthenTraps in MIB-II.')
enablePrinterTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 716), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablePrinterTraps.setStatus('mandatory')
if mibBuilder.loadTexts: enablePrinterTraps.setDescription("Enables the enterprise specific 'trapPrinter' traps.")
nms1Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 730), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms1Address.setStatus('mandatory')
if mibBuilder.loadTexts: nms1Address.setDescription('The IP address of NMS 1 definition.')
nms1Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 731), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms1Community.setStatus('mandatory')
if mibBuilder.loadTexts: nms1Community.setDescription('The community of NMS 1 definition.')
nms1Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 732), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms1Access.setStatus('mandatory')
if mibBuilder.loadTexts: nms1Access.setDescription('The access priviledge of NMS 1.')
nms2Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 735), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms2Address.setStatus('mandatory')
if mibBuilder.loadTexts: nms2Address.setDescription('The IP address of NMS 2 definition.')
nms2Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 736), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms2Community.setStatus('mandatory')
if mibBuilder.loadTexts: nms2Community.setDescription('The community of NMS 2 definition.')
nms2Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 737), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms2Access.setStatus('mandatory')
if mibBuilder.loadTexts: nms2Access.setDescription('The access priviledge of NMS 2.')
nms3Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 740), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms3Address.setStatus('mandatory')
if mibBuilder.loadTexts: nms3Address.setDescription('The IP address of NMS 3 definition.')
nms3Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 741), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms3Community.setStatus('mandatory')
if mibBuilder.loadTexts: nms3Community.setDescription('The community of NMS 3 definition.')
nms3Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 742), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms3Access.setStatus('mandatory')
if mibBuilder.loadTexts: nms3Access.setDescription('The access priviledge of NMS 3.')
nms4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 745), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms4Address.setStatus('mandatory')
if mibBuilder.loadTexts: nms4Address.setDescription('The IP address of NMS 4 definition.')
nms4Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 746), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms4Community.setStatus('mandatory')
if mibBuilder.loadTexts: nms4Community.setDescription('The community of NMS 4 definition.')
nms4Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 747), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms4Access.setStatus('mandatory')
if mibBuilder.loadTexts: nms4Access.setDescription('The access priviledge of NMS 4.')
nms5Address = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 750), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms5Address.setStatus('mandatory')
if mibBuilder.loadTexts: nms5Address.setDescription('The IP address of NMS 5 definition.')
nms5Community = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 751), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms5Community.setStatus('mandatory')
if mibBuilder.loadTexts: nms5Community.setDescription('The community of NMS 5 definition.')
nms5Access = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 8, 752), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("read", 3), ("readtrap", 4), ("write", 5), ("writetrap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms5Access.setStatus('mandatory')
if mibBuilder.loadTexts: nms5Access.setDescription('The access priviledge of NMS 5.')
lslmEnb = MibTableColumn((1, 3, 6, 1, 4, 1, 480, 2, 9, 2, 9, 800), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lslmEnb.setStatus('mandatory')
if mibBuilder.loadTexts: lslmEnb.setDescription('The Lan Serv/Lan Mgr protocol stack enable switch.')
coldStart = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,0))
if mibBuilder.loadTexts: coldStart.setDescription("A coldStart trap signifies that the sending protocol entity is reinitializing itself such that the agent's configuration or the protocol entity implementation may be altered.")
authenticationFailure = NotificationType((1, 3, 6, 1, 2, 1, 11) + (0,4))
if mibBuilder.loadTexts: authenticationFailure.setDescription('An authenticationFailure trap signifies that the sending protocol entity is the addressee of a protocol message that is not properly authenticated. While implementations of the SNMP must be capable of generating this trap, they must also be capable of suppressing the emission of such traps via an implementation- specific mechanism.')
qmsPtrErrorMsg = NotificationType((1, 3, 6, 1, 4, 1, 480) + (0,1)).setObjects(("QMS-MIB", "qmsPtrSysStatus"))
if mibBuilder.loadTexts: qmsPtrErrorMsg.setDescription('The variable used to relay the current printer error or informaitional message.')
trapNewIPaddr = NotificationType((1, 3, 6, 1, 4, 1, 480) + (0,2)).setObjects(("QMS-MIB", "qmsIFAdminOldIntAddr"))
if mibBuilder.loadTexts: trapNewIPaddr.setDescription("The IP address has been changed by RARP or an 'arp -s'.")
mibBuilder.exportSymbols("QMS-MIB", login8=login8, qmsSCColorAdjust=qmsSCColorAdjust, qmsHTTPSuppliesNumber=qmsHTTPSuppliesNumber, qmsClientDisk=qmsClientDisk, qmsCMMProfileIndex=qmsCMMProfileIndex, qmsFEEspEmul=qmsFEEspEmul, qmsHPGLExpandMode=qmsHPGLExpandMode, qmsHPGLPenColor2=qmsHPGLPenColor2, qmsHPGLPenWidth7=qmsHPGLPenWidth7, qmsFETrailerInputbin=qmsFETrailerInputbin, qmsQUIC2AllowOverlays=qmsQUIC2AllowOverlays, qmsQUIC2DefaultMode=qmsQUIC2DefaultMode, qmsQUIC2Dimensions=qmsQUIC2Dimensions, qmsCMMProfileType=qmsCMMProfileType, qmsDECLN03PaperSize=qmsDECLN03PaperSize, qmsSCContrast=qmsSCContrast, qmsHPGLPenColor4=qmsHPGLPenColor4, atlkConnType=atlkConnType, qmsENGColorSeparation=qmsENGColorSeparation, qmsSerMode=qmsSerMode, qmsPtrBinIndex=qmsPtrBinIndex, qmsPSIntensity=qmsPSIntensity, qmsSerEndDocumentMode=qmsSerEndDocumentMode, qmsCALSAutoScaling=qmsCALSAutoScaling, qmsCostPerPage=qmsCostPerPage, qmsLPAsciiMap=qmsLPAsciiMap, qmsLPPointSize=qmsLPPointSize, qmsENGLeftOffsetDuplex=qmsENGLeftOffsetDuplex, qmsSYSA3SheetCount=qmsSYSA3SheetCount, qmsPrinter=qmsPrinter, qmsPtrBinTable=qmsPtrBinTable, qmsQUIC2SaveOverlays=qmsQUIC2SaveOverlays, qmsQUIC2LFeqLFCR=qmsQUIC2LFeqLFCR, qmsPtrSysNamePrinter=qmsPtrSysNamePrinter, qmsLPLineWrap=qmsLPLineWrap, qmsCMMProfileTable=qmsCMMProfileTable, atlkZonerEnb=atlkZonerEnb, qmsENGUnderColor=qmsENGUnderColor, qmsSerEmulation=qmsSerEmulation, defRout=defRout, qmsHPPCLPreJobReset=qmsHPPCLPreJobReset, qmsAccounting=qmsAccounting, qmsFEHeaderInputbin=qmsFEHeaderInputbin, qmsCGMOriginY=qmsCGMOriginY, qmsENGTopOffsetDuplex=qmsENGTopOffsetDuplex, qmsParallel=qmsParallel, qmsHPGLPlotter=qmsHPGLPlotter, qmsIFLservlmgr=qmsIFLservlmgr, qmsENGTopOffset=qmsENGTopOffset, qmsSerial=qmsSerial, nms4Address=nms4Address, qmsSerIgnoreParity=qmsSerIgnoreParity, qmsLPLeftMargin=qmsLPLeftMargin, login2=login2, nms1Community=nms1Community, qmsENGConsumeType=qmsENGConsumeType, lslmEnb=lslmEnb, qmsClientHPStoragePool=qmsClientHPStoragePool, qmsIFSetup=qmsIFSetup, qmsPtrSysStatus=qmsPtrSysStatus, qmsQUIC2BottomMargin=qmsQUIC2BottomMargin, qmsENGChainInputbin=qmsENGChainInputbin, qmsPtrBinType=qmsPtrBinType, qmsSYSFPA=qmsSYSFPA, qmsCALSAutoRotation=qmsCALSAutoRotation, psPoll=psPoll, qmsENGToneroutAction=qmsENGToneroutAction, qmsSerHwDTRPOL=qmsSerHwDTRPOL, qmsIoPages=qmsIoPages, qmsSYSMultiRes=qmsSYSMultiRes, qmsLPTabStops=qmsLPTabStops, qmsIFConfig=qmsIFConfig, qmsQUIC2Orientation=qmsQUIC2Orientation, qmsSerHwDSRPOL=qmsSerHwDSRPOL, qmsCfgUser=qmsCfgUser, qmsQUIC2TrayMap3=qmsQUIC2TrayMap3, qmsENGErrorRecovery=qmsENGErrorRecovery, qmsPSOutputPositioning=qmsPSOutputPositioning, rprinter2=rprinter2, rprinter6=rprinter6, qmsFETmPSWait=qmsFETmPSWait, qmsENGConsumeTypeMulti=qmsENGConsumeTypeMulti, qmsENGInputbinMediatype=qmsENGInputbinMediatype, qmsPtrIfEntry=qmsPtrIfEntry, nms3Access=nms3Access, qmsPSDefaultCRD=qmsPSDefaultCRD, qmsCMMProfileEntry=qmsCMMProfileEntry, qmsQUIC2RebuildFontTable=qmsQUIC2RebuildFontTable, qmsPtrJobsTitle=qmsPtrJobsTitle, qmsFEDoStartPage=qmsFEDoStartPage, qmsLPOrientation=qmsLPOrientation, qmsLPBottomMargin=qmsLPBottomMargin, qmsENGDefaultPaper=qmsENGDefaultPaper, qmsENGConsumeIndex=qmsENGConsumeIndex, qmsSCScanResolution=qmsSCScanResolution, qmsHPPCLDefaultSymbolSet=qmsHPPCLDefaultSymbolSet, login1=login1, qmsPtrJobsCurSheet=qmsPtrJobsCurSheet, qmsSerRxSWFlow=qmsSerRxSWFlow, qmsHPGLPenColor5=qmsHPGLPenColor5, qmsCMMICCDestination=qmsCMMICCDestination, qmsQUIC2RightMargin=qmsQUIC2RightMargin, login3=login3, qmsFECopies=qmsFECopies, qmsENGOrientation=qmsENGOrientation, nms2Address=nms2Address, qmsQUIC2IfParam=qmsQUIC2IfParam, nms2Access=nms2Access, qmsCGMSuppressScale=qmsCGMSuppressScale, qmsLPLFisCRLF=qmsLPLFisCRLF, qmsEngine=qmsEngine, qmsParDataBits=qmsParDataBits, spooling=spooling, qmsHPGLPenWidth1=qmsHPGLPenWidth1, qmsPtrJobsStatSheets=qmsPtrJobsStatSheets, qmsCGMIgnoreBorder=qmsCGMIgnoreBorder, qmsPtrBinId=qmsPtrBinId, qmsSerTxSWFlow=qmsSerTxSWFlow, qmsPtrBinName=qmsPtrBinName, qmsDECLN03PaperSizeOverride=qmsDECLN03PaperSizeOverride, qmsCMMICCColorMatch=qmsCMMICCColorMatch, qmsFETmEsp=qmsFETmEsp, qmsPtrJobsEntry=qmsPtrJobsEntry, qmsSerHwRTS=qmsSerHwRTS, qmsPtrBinEntry=qmsPtrBinEntry, qmsSerSpoolTimeout=qmsSerSpoolTimeout, qmsSYSPrinterName=qmsSYSPrinterName, qmsPtrErrorMsg=qmsPtrErrorMsg, qmsCCITT=qmsCCITT, qmsQUIC2TrayMap1=qmsQUIC2TrayMap1, qmsHPPCLDefaultFontID=qmsHPPCLDefaultFontID, qmsParPSProtocol=qmsParPSProtocol, qmsQUIC2TopMargin=qmsQUIC2TopMargin, qmsENGResolution=qmsENGResolution, qmsPtrJobsChannel=qmsPtrJobsChannel, qmsTIFFPaperToImage=qmsTIFFPaperToImage, nms2Community=nms2Community, qmsMemory=qmsMemory, nms5Address=nms5Address, qmsTIFFAutoScaling=qmsTIFFAutoScaling, qmsInc=qmsInc, qmsENGConsumeNote1=qmsENGConsumeNote1, nms5Access=nms5Access, qmsHTTPContact=qmsHTTPContact, qmsDECLN03Reset=qmsDECLN03Reset, qmsClientFontCache=qmsClientFontCache, qmsPtrEmu=qmsPtrEmu, qmsSYSDiskSwap=qmsSYSDiskSwap, atlkZone=atlkZone, qmsENGNumConsumables=qmsENGNumConsumables, qmsCMMSimInRGBLinks=qmsCMMSimInRGBLinks, qmsSYSPageCount=qmsSYSPageCount, qmsSCOffsetVertical=qmsSCOffsetVertical, qmsPtrJobsComment=qmsPtrJobsComment, qmsHPPCLLinesPerInch=qmsHPPCLLinesPerInch, qmsHPGLPenWidth3=qmsHPGLPenWidth3, qmsColorMatch=qmsColorMatch, login12=login12, qmsHPGL=qmsHPGL, qmsClientEmulation=qmsClientEmulation, qmsHPGLPenColor7=qmsHPGLPenColor7, bootP=bootP, rprinter1=rprinter1, trP1=trP1, qmsParMode=qmsParMode, qmsClientEmulTemp=qmsClientEmulTemp, qmsCALS=qmsCALS, nms3Address=nms3Address, enableAuthenTraps=enableAuthenTraps, qmsHPPCLFontNumber=qmsHPPCLFontNumber, qmsTIFFScratchFileSize=qmsTIFFScratchFileSize, qmsQUIC2Decimal=qmsQUIC2Decimal, qmsSYSSystemImage=qmsSYSSystemImage, confServ=confServ, qmsCGMPrintErrors=qmsCGMPrintErrors, msgLog=msgLog, tcpEnb=tcpEnb, qmsPtrJobsPage=qmsPtrJobsPage, qmsCfgSecurity=qmsCfgSecurity, atlkLWEnb=atlkLWEnb, qmsIoCtl=qmsIoCtl, qmsENGConsumeLevelMulti=qmsENGConsumeLevelMulti, qmsSYSPrinterModel=qmsSYSPrinterModel, qmsPS=qmsPS, qmsSCBlueGammaFunction=qmsSCBlueGammaFunction, qmsHPPCL=qmsHPPCL, qmsTIFF=qmsTIFF, qmsQUIC2Spaces=qmsQUIC2Spaces, login10=login10, qmsDECLN03ProductID=qmsDECLN03ProductID, qmsENGInputbin=qmsENGInputbin, qmsIFAdminUnitStatus=qmsIFAdminUnitStatus, qmsFETmNonPSEmul=qmsFETmNonPSEmul, qmsSCGreenGammaFunction=qmsSCGreenGammaFunction, qmsSCGrayGammaFunction=qmsSCGrayGammaFunction, qmsENGLeftOffset=qmsENGLeftOffset, login7=login7, qmsENGChainOutputbin=qmsENGChainOutputbin, qmsHPGLEnhancedMode=qmsHPGLEnhancedMode, qmsHPGLPenWidth4=qmsHPGLPenWidth4, qmsSCCopyMode=qmsSCCopyMode, qmsLPLineNumbering=qmsLPLineNumbering, rarp=rarp, netwEnb=netwEnb, qmsFETrailerPage=qmsFETrailerPage, qmsDECLN03=qmsDECLN03, qmsCMMICCSimulation=qmsCMMICCSimulation, atlkQMSRemConEnb=atlkQMSRemConEnb, qmsFEDoSysStart=qmsFEDoSysStart, qmsENGColorModel=qmsENGColorModel, qmsIFApple=qmsIFApple, qmsClientHeap=qmsClientHeap, qmsLPFont=qmsLPFont, qmsSYSPrinterVersion=qmsSYSPrinterVersion, qmsFEHeaderPage=qmsFEHeaderPage, qmsENGInputbinMediatypeMulti=qmsENGInputbinMediatypeMulti, qmsPSDefaultBlackOverPrint=qmsPSDefaultBlackOverPrint, qmsIoTimeOuts=qmsIoTimeOuts, qmsQUIC2=qmsQUIC2, qmsQUIC2CReqCRLF=qmsQUIC2CReqCRLF, qmsQUIC2PatternType=qmsQUIC2PatternType, qmsClientSystem=qmsClientSystem, qmsENGConsumeNote2=qmsENGConsumeNote2, qmsIFSnmpcontrol=qmsIFSnmpcontrol, qmsPtrJobsIndex=qmsPtrJobsIndex, qmsLPLinesPerPage=qmsLPLinesPerPage, qmsPtrIfName=qmsPtrIfName, qmsQUIC2EDPMode=qmsQUIC2EDPMode, qmsSystem=qmsSystem, rtnOpt=rtnOpt, qmsSCBinaryAdjustment=qmsSCBinaryAdjustment, qmsIFNetware=qmsIFNetware, coldStart=coldStart, qmsSerHwDTR=qmsSerHwDTR, qmsACCFileSegment=qmsACCFileSegment, qmsParEndDocumentMode=qmsParEndDocumentMode, intAddr=intAddr, qmsENGConsumeNote2Multi=qmsENGConsumeNote2Multi, login9=login9, qmsTIFFAutoRotation=qmsTIFFAutoRotation, nms3Community=nms3Community, authenticationFailure=authenticationFailure, qmsTIFFAnnotationTag=qmsTIFFAnnotationTag, qmsENGConsumeUnits=qmsENGConsumeUnits, enablePrinterTraps=enablePrinterTraps, qmsPtrJobsSheet=qmsPtrJobsSheet, qmsQUIC2AllowDataRepeats=qmsQUIC2AllowDataRepeats, qmsENGChainInputbinMulti=qmsENGChainInputbinMulti, fr8022=fr8022, nms1Access=nms1Access, qmsHPGLPenColor1=qmsHPGLPenColor1, qmsPtrJobsOwner=qmsPtrJobsOwner, qmsENGCollation=qmsENGCollation, qmsSerParity=qmsSerParity)
mibBuilder.exportSymbols("QMS-MIB", qmsClientSpool=qmsClientSpool, qmsMEMTotal=qmsMEMTotal, qmsClientDisplayList=qmsClientDisplayList, qmsParSpoolTimeout=qmsParSpoolTimeout, qmsLinePrinter=qmsLinePrinter, qmsHPPCLLineTermination=qmsHPPCLLineTermination, qmsENGQuality=qmsENGQuality, qmsENGConsumeNameMulti=qmsENGConsumeNameMulti, fr8023=fr8023, frSnap=frSnap, rprinter3=rprinter3, qmsSCOffsetHorizontal=qmsSCOffsetHorizontal, qmsSerPriority=qmsSerPriority, rprinter5=rprinter5, login4=login4, qmsPtrJobsStatus=qmsPtrJobsStatus, login15=login15, qmsHPGLPenColor6=qmsHPGLPenColor6, qmsParPriority=qmsParPriority, login11=login11, qmsFETmJob=qmsFETmJob, qmsLPCRisCRLF=qmsLPCRisCRLF, qmsENGChainInputBins=qmsENGChainInputBins, qmsLPFFisCRFF=qmsLPFFisCRFF, rprinter8=rprinter8, qmsConfig=qmsConfig, qmsDECLN03Orientation=qmsDECLN03Orientation, psName=psName, qmsENGManualFeedTimeout=qmsENGManualFeedTimeout, qmsHPGLPenColor8=qmsHPGLPenColor8, login16=login16, qmsSerPSProtocol=qmsSerPSProtocol, qmsSCSizeVertical=qmsSCSizeVertical, qmsCGM=qmsCGM, qmsDECLN03Xorigin=qmsDECLN03Xorigin, qmsQUIC2DefaultFont=qmsQUIC2DefaultFont, qmsHPGLPenColor3=qmsHPGLPenColor3, qmsQUIC2AllowPageCopies=qmsQUIC2AllowPageCopies, qmsPtrJobsTable=qmsPtrJobsTable, freth2=freth2, nms1Address=nms1Address, qmsSerStopBits=qmsSerStopBits, qmsCPPSerialNumber=qmsCPPSerialNumber, qmsENGEnergyStar=qmsENGEnergyStar, qmsSerHwCTS=qmsSerHwCTS, qmsIFAdminOldIntAddr=qmsIFAdminOldIntAddr, qmsPSErrorHandler=qmsPSErrorHandler, qmsCGMOriginX=qmsCGMOriginX, qmsIF=qmsIF, login14=login14, qmsENGConsumeName=qmsENGConsumeName, nms4Access=nms4Access, rprinter7=rprinter7, qmsHPPCLGL2Plotter=qmsHPPCLGL2Plotter, login5=login5, qmsIFAdmin=qmsIFAdmin, qmsQUIC2CommandCharacter=qmsQUIC2CommandCharacter, qmsUIH=qmsUIH, qmsHPGLScalingPercent=qmsHPGLScalingPercent, qmsPtrIfIndex=qmsPtrIfIndex, qmsENGLetterheadMode=qmsENGLetterheadMode, qmsQUIC2SaveDLF=qmsQUIC2SaveDLF, trapNewIPaddr=trapNewIPaddr, qmsENGPageOrder=qmsENGPageOrder, qmsHPGLPenWidth2=qmsHPGLPenWidth2, qmsENGConsumeNote1Multi=qmsENGConsumeNote1Multi, qmsPtrJobs=qmsPtrJobs, qmsHPGLPenWidth5=qmsHPGLPenWidth5, qmsClientColorMatching=qmsClientColorMatching, tnPort=tnPort, qmsENGConsumeLevel=qmsENGConsumeLevel, qmsHTTPContactNumber=qmsHTTPContactNumber, qmsSerHwDSR=qmsSerHwDSR, qmsENGManualTrayMedia=qmsENGManualTrayMedia, qmsQUIC2Scan=qmsQUIC2Scan, qmsHTTPCorpURL=qmsHTTPCorpURL, qmsParBufferSize=qmsParBufferSize, qmsLPTopMargin=qmsLPTopMargin, qmsSCRedGammaFunction=qmsSCRedGammaFunction, qmsHTTP=qmsHTTP, qmsCMMICCRGBSource=qmsCMMICCRGBSource, qmsHTTPHelpURL=qmsHTTPHelpURL, qmsHPPCLDiskOrRam=qmsHPPCLDiskOrRam, qmsFEStatusPageType=qmsFEStatusPageType, qmsIFAdminConfigStatus=qmsIFAdminConfigStatus, qmsSYSSheetCount=qmsSYSSheetCount, qmsENGDensity=qmsENGDensity, ethAddr=ethAddr, qmsCMMLinkQuality=qmsCMMLinkQuality, qmsTIFFReverseImage=qmsTIFFReverseImage, qmsParEmulation=qmsParEmulation, tftpEnb=tftpEnb, qmsENGEnvelopeTrayMedia=qmsENGEnvelopeTrayMedia, qmsHPGLPenWidth8=qmsHPGLPenWidth8, qmsPtrIfDefEmu=qmsPtrIfDefEmu, qmsDECLN03Yorigin=qmsDECLN03Yorigin, qmsTIFFAnnotationState=qmsTIFFAnnotationState, qmsSerDataBits=qmsSerDataBits, qmsQUIC2LeftMargin=qmsQUIC2LeftMargin, qmsDECLN03AutowrapMode=qmsDECLN03AutowrapMode, qmsSCTrans=qmsSCTrans, qmsQUIC2TrayMap5=qmsQUIC2TrayMap5, qmsENGChainOutputbinMulti=qmsENGChainOutputbinMulti, qmsPtrIfTable=qmsPtrIfTable, atlkEnb=atlkEnb, qmsSerBaudRate=qmsSerBaudRate, qmsPtrJobsEmulation=qmsPtrJobsEmulation, login13=login13, qmsPtrJobsCurPage=qmsPtrJobsCurPage, qmsENGDuplex=qmsENGDuplex, netMask=netMask, qmsHPPCLPointSize=qmsHPPCLPointSize, nms4Community=nms4Community, qmsQUIC2TrayMap4=qmsQUIC2TrayMap4, qmsACCDiskSpace=qmsACCDiskSpace, qmsPSDefaultHalftone=qmsPSDefaultHalftone, nwMode=nwMode, qmsENGConsumeMax=qmsENGConsumeMax, qmsQUIC2LineSpacing=qmsQUIC2LineSpacing, qmsQUIC2TrayMap2=qmsQUIC2TrayMap2, qmsSYSA3PageCount=qmsSYSA3PageCount, qmsENGStaplePosition=qmsENGStaplePosition, qmsENGOutputbin=qmsENGOutputbin, qmsPtrJobsCurStatus=qmsPtrJobsCurStatus, rprinter4=rprinter4, qmsPtrBinPaper=qmsPtrBinPaper, qmsSerBufferSize=qmsSerBufferSize, qmsENGConsumeIndexMulti=qmsENGConsumeIndexMulti, qmsClientFrameBuffer=qmsClientFrameBuffer, qmsENGOffsetStacking=qmsENGOffsetStacking, qmsCMMProfileDescription=qmsCMMProfileDescription, qmsPSDefaultDither=qmsPSDefaultDither, qmsPtrSys=qmsPtrSys, qmsCMMICCHP=qmsCMMICCHP, qmsHPGLPaperType=qmsHPGLPaperType, qmsENGConsumeUnitsMulti=qmsENGConsumeUnitsMulti, qmsACCMode=qmsACCMode, nms5Community=nms5Community, qmsSCSizeHorizontal=qmsSCSizeHorizontal, qmsMEMPhysical=qmsMEMPhysical, qmsPSDefaultGamma=qmsPSDefaultGamma, qmsPtrJobsStatPages=qmsPtrJobsStatPages, qmsCGMMono=qmsCGMMono, qmsScanner=qmsScanner, login6=login6, qmsRel=qmsRel, qmsCfgAdmin=qmsCfgAdmin, qmsLPRightMargin=qmsLPRightMargin, qmsENGConsumeMaxMulti=qmsENGConsumeMaxMulti, qmsHPGLPenWidth6=qmsHPGLPenWidth6)
