#
# PySNMP MIB module Telematics-Nevada-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Telematics-Nevada-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, enterprises, ObjectIdentity, Integer32, Unsigned32, IpAddress, NotificationType, ModuleIdentity, Gauge32, MibIdentifier, Bits, TimeTicks, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "enterprises", "ObjectIdentity", "Integer32", "Unsigned32", "IpAddress", "NotificationType", "ModuleIdentity", "Gauge32", "MibIdentifier", "Bits", "TimeTicks", "NotificationType", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
telematics = MibIdentifier((1, 3, 6, 1, 4, 1, 230))
tmxNevada = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5))
nevadaSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1))
nevadaModels = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 2))
nevadaFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5))
nevadaIti = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6))
nevadaSync = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7))
nevadaX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10))
nevadaIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11))
nevadaPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12))
nevadaElx = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 15))
nevadaIp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16))
nevadaTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17))
nevadaFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 18))
nevadaTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20))
nevadaRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40))
nevadaSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 45))
nevadaApacs = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50))
nevadaR2 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55))
nevadaRb = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58))
nevadaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 64))
nevadaAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 65))
nevadaPos = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66))
nevadaL2tp = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70))
class NvPortName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class NvPoolName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class NvNetAddress(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 16)

class NvVisaType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 102))
    namedValues = NamedValues(("undef", 1), ("fxd1", 2), ("fxd2", 3), ("fxd3", 4), ("fxd4", 5), ("fxd5", 6), ("fxd6", 7), ("fxd7", 8), ("fxd8", 9), ("fxd9", 10), ("fxd10", 11), ("fxd11", 12), ("fxd12", 13), ("fxd13", 14), ("fxd14", 15), ("fxd15", 16), ("fxd16", 17), ("fxd17", 18), ("fxd18", 19), ("fxd19", 20), ("fxd20", 21), ("fxd21", 22), ("fxd22", 23), ("fxd23", 24), ("fxd24", 25), ("fxd25", 26), ("fxd26", 27), ("fxd27", 28), ("fxd28", 29), ("fxd29", 30), ("fxd30", 31), ("fxd31", 32), ("fxd32", 33), ("varfs", 102))

class NvIsoType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 202, 204, 222, 224))
    namedValues = NamedValues(("unused", 1), ("fxb1", 2), ("fxb2", 3), ("fxb3", 4), ("fxb4", 5), ("fxb5", 6), ("fxb6", 7), ("fxb7", 8), ("fxb8", 9), ("fxb9", 10), ("fxb10", 11), ("fxb11", 12), ("fxb12", 13), ("fxb13", 14), ("fxb14", 15), ("fxb15", 16), ("fxb16", 17), ("fxb17", 18), ("fxb18", 19), ("fxb19", 20), ("fxb20", 21), ("fxb21", 22), ("fxb22", 23), ("fxb23", 24), ("fxb24", 25), ("fxb25", 26), ("fxb26", 27), ("fxb27", 28), ("fxb28", 29), ("fxb29", 30), ("fxb30", 31), ("fxb31", 32), ("fxb32", 33), ("fxb33", 34), ("fxb34", 35), ("fxb35", 36), ("fxb36", 37), ("fxb37", 38), ("fxb38", 39), ("fxb39", 40), ("fxb40", 41), ("fxb41", 42), ("fxb42", 43), ("fxn1", 102), ("fxn2", 103), ("fxn3", 104), ("fxn4", 105), ("fxn5", 106), ("fxn6", 107), ("fxn7", 108), ("fxn8", 109), ("fxn9", 110), ("fxn10", 111), ("fxn11", 112), ("fxn12", 113), ("fxn13", 114), ("fxn14", 115), ("fxn15", 116), ("fxn16", 117), ("fxn17", 118), ("fxn18", 119), ("fxn19", 120), ("fxn20", 121), ("fxn21", 122), ("fxn22", 123), ("fxn23", 124), ("fxn24", 125), ("fxn25", 126), ("fxn26", 127), ("fxn27", 128), ("fxn28", 129), ("fxn29", 130), ("fxn30", 131), ("fxn31", 132), ("fxn32", 133), ("fxn33", 134), ("fxn34", 135), ("fxn35", 136), ("fxn36", 137), ("fxn37", 138), ("fxn38", 139), ("fxn39", 140), ("fxn40", 141), ("fxn41", 142), ("fxn42", 143), ("llbyte", 202), ("lllbyte", 204), ("llnibble", 222), ("lllnibble", 224))

nvNodestat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 1))
nvNodestatTotalbufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatTotalbufs.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatTotalbufs.setDescription('total number of buffers in system - these buffers are freed at startup time to be allocated as needed. Statistic is zeroed at startup time.')
nvNodestatCurminbufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurminbufs.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatCurminbufs.setDescription('minimum number of buffers available in last 15 minute cycle Statistic is zeroed at startup time.')
nvNodestatCurmincpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurmincpu.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatCurmincpu.setDescription('cpu availablity -minimum percentage of CPU available in last 15 minute cycle. Statistic is zeroed at startup time.')
nvNodestatCurtime = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurtime.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatCurtime.setDescription('current time number of minutes into current time - is set to 0 at start of current cycle - is incremented every minute - when incremented to 15 then cycle is over and curminbuf and curmincpu are calculated and curtime is set back to 0 Statistic is zeroed at startup time.')
nvNodestatFreebufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatFreebufs.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatFreebufs.setDescription('number of available buffers at last check - check is done every 3 seconds Statistic is zeroed at startup time.')
nvNodestatFreecpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatFreecpu.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatFreecpu.setDescription('percentage of CPU available at last check - check is done every 3 seconds Statistic is zeroed at startup time.')
nvNodestatMaxcpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatMaxcpu.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatMaxcpu.setDescription('maximum CPU availablity maximum count of idle CPU cycles per 16 milliseconds - percentages of CPU availability are calculated relative to this number (freecpu,curmincpu,mincpu) Statistic is zeroed at startup time.')
nvNodestatMinbufs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatMinbufs.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatMinbufs.setDescription('minimum number of buffers minimum number of available buffers ever recorded Statistic is zeroed at startup time.')
nvNodestatMincpu = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatMincpu.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatMincpu.setDescription('cpu availablity minimum percentage of CPU available ever recorded Statistic is zeroed at startup time.')
nvNodestatRxavgpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatRxavgpps.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatRxavgpps.setDescription('average rx packets per second average packets per second received during last 15 minute cycle Statistic is zeroed at startup time.')
nvNodestatRxcurpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatRxcurpps.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatRxcurpps.setDescription('current rx packets per second packets per second received during last 3 second cycle Statistic is zeroed at startup time')
nvNodestatTxavgpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatTxavgpps.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatTxavgpps.setDescription('average tx packets per second average packets per second transmitted during last 15 minute cycle Statistic is zeroed at startup time.')
nvNodestatTxcurpps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatTxcurpps.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatTxcurpps.setDescription('current tx packets per second packets per second transmitted during last 3 second cycle Statistic is zeroed at startup time.')
nvNodestatX25call = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatX25call.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatX25call.setDescription('Actual number of lcns allocated.')
nvNodestatChgreqid = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatChgreqid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatChgreqid.setDescription('Change Request ID Confirmation management change request ID.')
nvNodestatCurclk = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatCurclk.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatCurclk.setDescription('Indicates the current clock source.')
nvNodestatClkfails = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatClkfails.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatClkfails.setDescription('Number of times clock failure has been detected.')
nvNodestatDtreset = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatDtreset.setDescription('date & time statistics last reset')
nvNodestatNumcalls = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodestatNumcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodestatNumcalls.setDescription('Number of succesful modem calls received by ITI.')
nvNodeconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 2))
nvNodeconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfMaxRec.setDescription('total number of records allowed in database file.')
nvNodeconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfNumRec.setDescription('number of records in use.')
nvNodeconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3), )
if mibBuilder.loadTexts: nvNodeconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfTable.setDescription('nodeconf file.')
nvNodeconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNodeconfIndex"))
if mibBuilder.loadTexts: nvNodeconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfEntry.setDescription('nodeconf record.')
nvNodeconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfIndex.setDescription('Index of nodeconf record')
nvNodeconfPartnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfPartnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfPartnum.setDescription('Part Number -partnum- This is the part number of the software Format: AAAAAA-BBB-C-DDEEFF AAAAAA = Concatenated product code ie. a 4 link,8 channel switching PAD which has the code 2604-8 becomes 260408 BBB = Customer/feature code C = Medium DD = Major version number. A new set of documentation is generated for each major version EE = Database version number FF = Software version number Parameter is set during factory configuration.')
nvNodeconfDbversion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfDbversion.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfDbversion.setDescription('Database Version (dbversion) Major and minor database release numbers Eg 0300 Similar usage as for software revision number Parameter is set during factory configuration.')
nvNodeconfSwdate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfSwdate.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfSwdate.setDescription('Software Creation Date (swdate) Parameter is set during factory configuration.')
nvNodeconfSwversion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNodeconfSwversion.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfSwversion.setDescription('Software Version (swversion) Major and minor software release numbers Eg. 0601 Parameter is set during factory configuration.')
nvNodeconfCalarms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfCalarms.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfCalarms.setDescription('Max Custom Alarm Records (calarms) This field indicates the total num of custom alarm entries per box. DO NOT USE HUB-RESERVE3 OR TAKE ANY SPACE AWAY FROM IT TO USE FOR A NEW FIELD. IT IS THE SECRET HIDING PLACE WHERE THE HARDWARE CONFIGURATION IS STORED FOR USE IN DETECTING HARDWARE CHANGES WHEN REBOOTING. Default value is 0.')
nvNodeconfStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfStartup.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfStartup.setDescription('SD Script to automatically start after aprox. 10 seconds system boot')
nvNodeconfSwtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sview", 1), ("inf", 2), ("inf2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfSwtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfSwtype.setDescription('INF or SmartView Type (swtype) sview for old std billing Default value is sview (0+1).')
nvNodeconfX25call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfX25call.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfX25call.setDescription('X.25 Call (nvX25call) This field indicates the total num of lcn per box Default value is 257.')
nvNodeconfAcctrec = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfAcctrec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfAcctrec.setDescription('Max Accounting Records (acctrec) This indicates the maximum number of accounting records that will be held in memory. When this number is reached, additional records will be discarded. Default value is 100.')
nvNodeconfAlarmrec = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfAlarmrec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfAlarmrec.setDescription('Max Alarm Records (alarmrec) This indicates the maximum number of alarm records buffered Default value is 50.')
nvNodeconfBusyout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfBusyout.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfBusyout.setDescription('used to busy out ITI ports when X25 links go down ')
nvNodeconfRate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate1.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfRate1.setDescription('Rate For Time Zone 1 (rate1) ')
nvNodeconfRate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate2.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfRate2.setDescription('Rate For Time Zone 2 (rate2) ')
nvNodeconfRate3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate3.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfRate3.setDescription('Rate For Time Zone 3 (rate3) ')
nvNodeconfRate4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRate4.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfRate4.setDescription('Rate For Time Zone 4 (rate4) ')
nvNodeconfNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfNodeid.setDescription('Node Identifier (nodeid) This field is used by the Network Bus component to identify this node within a private network,and must be unique within that domain. Default value is 1000.')
nvNodeconfExstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("link", 2), ("x25", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfExstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfExstat.setDescription('enhanced x25 stat (exstat) ')
nvNodeconfRsttimer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfRsttimer.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfRsttimer.setDescription('Restart timer for OMS Default value is 0.')
nvNodeconfChgreqid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfChgreqid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfChgreqid.setDescription('Change Request Id ')
nvNodeconfClksrc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfClksrc1.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfClksrc1.setDescription('Primary clock source to synchronize TDM connects. ')
nvNodeconfClksrc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfClksrc2.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfClksrc2.setDescription('Primary clock source to synchronize TDM connects. ')
nvNodeconfClksrc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfClksrc3.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfClksrc3.setDescription('Primary clock source to synchronize TDM connects. ')
nvNodeconfDsprfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfDsprfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfDsprfail.setDescription('dspr failure threshold ')
nvNodeconfFrmrfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfFrmrfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfFrmrfail.setDescription('frmr failure threshold ')
nvNodeconfQdlifail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 2, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNodeconfQdlifail.setStatus('mandatory')
if mibBuilder.loadTexts: nvNodeconfQdlifail.setDescription('Qdli failure threshold ')
nvAcctstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 3))
nvAcctstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatMaxRec.setDescription('total number of records in file.')
nvAcctstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatNumRec.setDescription('number of records in use.')
nvAcctstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3), )
if mibBuilder.loadTexts: nvAcctstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatTable.setDescription('acctstat file.')
nvAcctstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAcctstatRecord"))
if mibBuilder.loadTexts: nvAcctstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatEntry.setDescription('acctstat record, indexed by record number')
nvAcctstatComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatComponent.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatComponent.setDescription(' name of component This is the name of component accumulating the statistics.')
nvAcctstatRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRecord.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatRecord.setDescription('record ID This is the internal number of the accounting record.')
nvAcctstatCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatCalled.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatCalled.setDescription('Called address (from bcd)')
nvAcctstatCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatCalling.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatCalling.setDescription('Calling address (from bcd).')
nvAcctstatRecorg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iti", 1), ("x25", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRecorg.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatRecorg.setDescription(' call origin: 1=iti/lserv 2=x25 .')
nvAcctstatSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatSegsize.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatSegsize.setDescription('segment size This is the segment size of this port that generates accounting. Statistic is zeroed at startup time.')
nvAcctstatDay = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatDay.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatDay.setDescription(' date of call establishment (internal) Statistic is zeroed at startup time.')
nvAcctstatMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatMinute.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatMinute.setDescription(' time of call establishment Statistic is zeroed at startup time.')
nvAcctstatSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatSecond.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatSecond.setDescription('time of call establishment Statistic is zeroed at startup time.')
nvAcctstatTxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatTxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatTxpaks.setDescription('number transmitted packets Statistic is zeroed at startup time.')
nvAcctstat64ktxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64ktxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstat64ktxpaks.setDescription('1000 transmitted packets Statistic is zeroed at startup time.')
nvAcctstatRxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatRxpaks.setDescription('number received packets Statistic is zeroed at startup time.')
nvAcctstat64krxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64krxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstat64krxpaks.setDescription('1000 received packets Statistic is zeroed at startup time.')
nvAcctstatTxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatTxchars.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatTxchars.setDescription('number transmitted characters Statistic is zeroed at startup time.')
nvAcctstat64ktxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64ktxchars.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstat64ktxchars.setDescription('1000 transmitted characters Statistic is zeroed at startup time.')
nvAcctstatRxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRxchars.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatRxchars.setDescription('number received characters Statistic is zeroed at startup time.')
nvAcctstat64krxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64krxchars.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstat64krxchars.setDescription('1000 received characters Statistic is zeroed at startup time.')
nvAcctstatTxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatTxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatTxsegs.setDescription('number transmitted segments Statistic is zeroed at startup time.')
nvAcctstat64ktxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64ktxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstat64ktxsegs.setDescription('1000 transmitted segments Statistic is zeroed at startup time.')
nvAcctstatRxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatRxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatRxsegs.setDescription(' number received segments Statistic is zeroed at startup time.')
nvAcctstat64krxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstat64krxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstat64krxsegs.setDescription(' 1000 received segments Statistic is zeroed at startup time.')
nvAcctstatAbstime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatAbstime.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatAbstime.setDescription('starting absolute time Statistic is zeroed at startup time.')
nvAcctstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatDtreset.setDescription('date & time statistics last reset')
nvAcctstatCallid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatCallid.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatCallid.setDescription('Ptr to internal structure that starts accounting')
nvAcctstatInfofunc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 3, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctstatInfofunc.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctstatInfofunc.setDescription('Information function ptr provided by accounting entity')
nvAcctoper = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 4))
nvAcctoperMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperMaxRec.setDescription('total number of records allowed in database file.')
nvAcctoperNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperNumRec.setDescription('number of records in use.')
nvAcctoperTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3), )
if mibBuilder.loadTexts: nvAcctoperTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperTable.setDescription('acctoper file.')
nvAcctoperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAcctoperIndex"))
if mibBuilder.loadTexts: nvAcctoperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperEntry.setDescription('acctoper record.')
nvAcctoperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperIndex.setDescription('Index of acctoper record')
nvAcctoperComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAcctoperComponent.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperComponent.setDescription('service component This is the name of the component that uses the accounting service. An example of this is NET1,ITI,etc. Parameter is set during factory configuration.')
nvAcctoperEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAcctoperEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperEnable.setDescription('enable/disable This field is used to enable the accounting function. Default value is true (1+1).')
nvAcctoperSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAcctoperSegsize.setStatus('mandatory')
if mibBuilder.loadTexts: nvAcctoperSegsize.setDescription('segment size This field defines the size of a segment. A segment is usually a portion of a packet (ie. 64 bytes) as is more representative in actual accounting of resource utilization. The possible values range from one to the largest possible packet size. Default value is 64.')
nvModemstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 5))
nvModemstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatMaxRec.setDescription('total number of records allowed in database file.')
nvModemstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatNumRec.setDescription('number of records in use.')
nvModemstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3), )
if mibBuilder.loadTexts: nvModemstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatTable.setDescription('modemstat file.')
nvModemstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvModemstatIndex"))
if mibBuilder.loadTexts: nvModemstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatEntry.setDescription('modemstat record.')
nvModemstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatIndex.setDescription('Index of Modemstat record')
nvModemstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatName.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatName.setDescription('digital modem status name.')
nvModemstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("hshake", 2), ("ecdc", 3), ("connected", 4), ("retraining", 5), ("renegotiating", 6), ("clearDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatState.setDescription('Current state')
nvModemstatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("idle", 1), ("t1200R75", 2), ("t75R1200", 3), ("v300", 4), ("v600", 5), ("v1200", 6), ("v2400", 7), ("v4800", 8), ("v7200", 9), ("v9600NT", 10), ("v9600", 11), ("v12000", 12), ("v14400", 13), ("v16800", 14), ("v19200", 15), ("v21600", 16), ("v24000", 17), ("v26400", 18), ("v28800", 19), ("v31200", 20), ("v33600", 21), ("v32000", 22), ("v34000", 23), ("v36000", 24), ("v38000", 25), ("v40000", 26), ("v42000", 27), ("v44000", 28), ("v46000", 29), ("v48000", 30), ("v50000", 31), ("v52000", 32), ("v54000", 33), ("v56000", 34), ("v58000", 35), ("v60000", 36), ("vv28000", 37), ("v29333", 38), ("v30667", 39), ("vv32000", 40), ("v33333", 41), ("v34667", 42), ("vv36000", 43), ("v37333", 44), ("v38667", 45), ("vv40000", 46), ("v41333", 47), ("v42667", 48), ("vv44000", 49), ("v45333", 50), ("v46667", 51), ("vv48000", 52), ("v49333", 53), ("v50667", 54), ("vv52000", 55), ("v53333", 56), ("v54667", 57), ("vv56000", 58), ("v57333", 59), ("v58667", 60), ("vv60000", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRate.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatRate.setDescription('modem rate in bps.')
nvModemstatType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21))).clone(namedValues=NamedValues(("idle", 1), ("v34", 2), ("v32bis", 3), ("v32", 4), ("v22bis", 5), ("v22", 6), ("v21", 7), ("bell212", 9), ("unknown", 10), ("bell103", 11), ("v23", 12), ("v27", 13), ("v29", 14), ("v33", 15), ("v17", 16), ("v34bis", 17), ("vpcm", 18), ("v110", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatType.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatType.setDescription('modem modulation scheme.')
nvModemstatEctype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("v42ErrorCorrection", 2), ("mnpErrorCorrection", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatEctype.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatEctype.setDescription('modem error correction status')
nvModemstatDctype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatDctype.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatDctype.setDescription(' modem data compression status.')
nvModemstatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("predetection", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatMode.setDescription('synchronous or asynchronous.')
nvModemstatRxparity = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("even", 2), ("odd", 3), ("mark", 4), ("space", 5), ("none", 6), ("clear", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRxparity.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatRxparity.setDescription('receive parity setting.')
nvModemstatTxparity = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("even", 2), ("odd", 3), ("mark", 4), ("space", 5), ("none", 6), ("clear", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatTxparity.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatTxparity.setDescription('transmit parity setting.')
nvModemstatAccms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatAccms.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatAccms.setDescription('for async to sync PPP, shows asy char control maps.')
nvModemstatMse = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatMse.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatMse.setDescription('modem noise level (mean squared err).')
nvModemstatRcvlvl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRcvlvl.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatRcvlvl.setDescription('Modem receive level.')
nvModemstatRetrain = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRetrain.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatRetrain.setDescription('Number retrains this call.')
nvModemstatRenego = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRenego.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatRenego.setDescription('Number renegotiations this call.')
nvModemstatSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("passed", 2), ("dspFailed", 3), ("sramFailed", 4), ("sramAndDspFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatSelftest.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatSelftest.setDescription('soft init selftest result.')
nvModemstatFirmver = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatFirmver.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatFirmver.setDescription('Firmware version number')
nvModemstatModel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatModel.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatModel.setDescription('DSP microcode product code.')
nvModemstatRxpclear = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatRxpclear.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatRxpclear.setDescription('Modem clear rx parity (rxpclear) bit.')
nvModemstatDsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatDsp.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatDsp.setDescription('the name of the DSP allocated.')
nvModemstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 5, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemstatDtreset.setDescription('date & time statistics last reset')
nvModemconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 6))
nvModemconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfMaxRec.setDescription('total number of records allowed in database file.')
nvModemconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfNumRec.setDescription('number of records in use.')
nvModemconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3), )
if mibBuilder.loadTexts: nvModemconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfTable.setDescription('modemconf file.')
nvModemconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvModemconfIndex"))
if mibBuilder.loadTexts: nvModemconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfEntry.setDescription('modemconf record.')
nvModemconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfIndex.setDescription('Index of modemconf record')
nvModemconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemconfName.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfName.setDescription('Digital modem resource config name (name) Parameter is set during factory configuration.')
nvModemconfProfilename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemconfProfilename.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfProfilename.setDescription('Digital modemprof name that it is associated with')
nvModemconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemconfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfEnable.setDescription('Enabled or not.')
nvModemconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvSymuser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 7))
nvSymuserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSymuserMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserMaxRec.setDescription('total number of records allowed in database file.')
nvSymuserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSymuserNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserNumRec.setDescription('number of records in use.')
nvSymuserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3), )
if mibBuilder.loadTexts: nvSymuserTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserTable.setDescription('symuser file.')
nvSymuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSymuserIndex"))
if mibBuilder.loadTexts: nvSymuserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserEntry.setDescription('symuser record.')
nvSymuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSymuserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserIndex.setDescription('Index of symuser record')
nvSymuserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSymuserUsername.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserUsername.setDescription('User Name (username) Name of user allowed to use system management functions. The System Manager Interface attempts to match the call user data field of an incoming call against the entries in this file. If no match is found, the call is cleared. ')
nvSymuserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSymuserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserPassword.setDescription('User Password (password) User password. After a user name is matched,the user is asked to enter their assigned password. If it is not entered correctly,the call is cleared. ')
nvSymuserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSymuserStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvSymuserStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvNmsuser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 8))
nvNmsuserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNmsuserMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserMaxRec.setDescription('total number of records allowed in database file.')
nvNmsuserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNmsuserNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserNumRec.setDescription('number of records in use.')
nvNmsuserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3), )
if mibBuilder.loadTexts: nvNmsuserTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserTable.setDescription('nmsuser file.')
nvNmsuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNmsuserIndex"))
if mibBuilder.loadTexts: nvNmsuserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserEntry.setDescription('nmsuser record.')
nvNmsuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNmsuserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserIndex.setDescription('Index of nmsuser record')
nvNmsuserCalladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserCalladdr.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserCalladdr.setDescription('NMS X.121 Address (calladdr) ')
nvNmsuserCalldata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserCalldata.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserCalldata.setDescription('NMS Userdata (calldata) Default value is 0.')
nvNmsuserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserPassword.setDescription('NMS Component Password (password) Default value is 0.')
nvNmsuserPsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserPsiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserPsiz.setDescription('Packet Size (psiz) Default value is 7+1.')
nvNmsuserWsiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserWsiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserWsiz.setDescription('Window Size (wsiz) Default value is 2.')
nvNmsuserRpoacode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserRpoacode.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserRpoacode.setDescription('RPOA Code (rpoacode) Default value is 0.')
nvNmsuserOchrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("oall", 2), ("onorm", 3), ("orev", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserOchrg.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserOchrg.setDescription('Outgoing Charging Restriction (ochrg) Default value is 1+1.')
nvNmsuserCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserCug.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserCug.setDescription('Closed User Group Id (cug) Default value is 0.')
nvNmsuserTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserTput.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserTput.setDescription('Throughput Class (tput) Default value is 10+1.')
nvNmsuserNmsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserNmsid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserNmsid.setDescription('NMS Identification (nmsid) ')
nvNmsuserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNmsuserStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvNmsuserStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvNetmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 9))
nvNetmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapMaxRec.setDescription('total number of records allowed in database file.')
nvNetmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapNumRec.setDescription('number of records in use.')
nvNetmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3), )
if mibBuilder.loadTexts: nvNetmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapTable.setDescription('netmap file.')
nvNetmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetmapIndex"))
if mibBuilder.loadTexts: nvNetmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapEntry.setDescription('netmap record.')
nvNetmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapIndex.setDescription('Index of netmap record')
nvNetmapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapNetaddr.setDescription("Network X.121 Address (netaddr) This field contains the network address pattern that is matched against the the network address field in a 'call request'. ")
nvNetmapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapUserdata.setDescription("User Data (userdata) This field contains the call user data pattern that is matched against the call user data field in a 'call request'. ")
nvNetmapNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapNodeid.setDescription('Node Identifier (nodeid) This parameter is the identifier of the entity providing the service for a matched network address and user data. ')
nvNetmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetmapStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvNetroute = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 10))
nvNetrouteMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetrouteMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteMaxRec.setDescription('total number of records allowed in database file.')
nvNetrouteNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetrouteNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteNumRec.setDescription('number of records in use.')
nvNetrouteTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3), )
if mibBuilder.loadTexts: nvNetrouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteTable.setDescription('netroute file.')
nvNetrouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetrouteIndex"))
if mibBuilder.loadTexts: nvNetrouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteEntry.setDescription('netroute record.')
nvNetrouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetrouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteIndex.setDescription('Index of netroute record')
nvNetrouteNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetrouteNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteNodeid.setDescription('Node Identifier (nodeid) This parameter is an identifier of destination node. This value was located in NETMAP. ')
nvNetrouteService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetrouteService.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteService.setDescription('Service Component (service) This parameter is an index into component table of component providing the service. ')
nvNetroutePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetroutePrio.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetroutePrio.setDescription('Route Priority (prio) This parameter represents the user-assigned priority of the route. The router searches this file for the highest priority route that will allow more connections. If the highest priority route is unavailable,the next highest is tried until all possibilities are exhausted and the call is cleared. Default value is 100.')
nvNetrouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetrouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetrouteStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvNetpvc = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 11))
nvNetpvcMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcMaxRec.setDescription('total number of records allowed in database file.')
nvNetpvcNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcNumRec.setDescription('number of records in use.')
nvNetpvcTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3), )
if mibBuilder.loadTexts: nvNetpvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcTable.setDescription('netpvc file.')
nvNetpvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetpvcIndex"))
if mibBuilder.loadTexts: nvNetpvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcEntry.setDescription('netpvc record.')
nvNetpvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcIndex.setDescription('Index of netpvc record')
nvNetpvcService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcService.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcService.setDescription("Service Component (service) COMPID and PVCID together uniquely identify one end of a PVC,and make up the key to this file when searching for an 'A' end. ")
nvNetpvcPvcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcPvcid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcPvcid.setDescription('Local PVC Identifier (pvcid) ')
nvNetpvcPvccode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcPvccode.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcPvccode.setDescription("Global PVC Identifier (pvccode) PVCCODE uniquely identifies a PVC,and is used as the key to this file when searching for a 'B' end. ")
nvNetpvcPvcend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("originatingEnd", 2), ("terminatingEnd", 3), ("symmetricEnd", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcPvcend.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcPvcend.setDescription('PVC End (pvcend) Default value is 2+1.')
nvNetpvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvNetpvcmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 12))
nvNetpvcmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapMaxRec.setDescription('total number of records allowed in database file.')
nvNetpvcmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapNumRec.setDescription('number of records in use.')
nvNetpvcmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3), )
if mibBuilder.loadTexts: nvNetpvcmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapTable.setDescription('netpvcmap file.')
nvNetpvcmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetpvcmapIndex"))
if mibBuilder.loadTexts: nvNetpvcmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapEntry.setDescription('netpvcmap record.')
nvNetpvcmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetpvcmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapIndex.setDescription('Index of netpvcmap record')
nvNetpvcmapPvccode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcmapPvccode.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapPvccode.setDescription('Global PVC Identifier (pvccode) ')
nvNetpvcmapNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcmapNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapNodeid.setDescription("Node Identifier (nodeid) This parameter is the identifier of the entity providing 'B' end of a PVC within our network. ")
nvNetpvcmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNetpvcmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetpvcmapStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvNetcon = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 13))
nvNetconMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconMaxRec.setDescription('total number of records allowed in database file.')
nvNetconNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconNumRec.setDescription('number of records in use.')
nvNetconTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3), )
if mibBuilder.loadTexts: nvNetconTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconTable.setDescription('netcon file.')
nvNetconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNetconIndex"))
if mibBuilder.loadTexts: nvNetconEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconEntry.setDescription('netcon record, indexed by record number')
nvNetconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconIndex.setDescription('Index of netcon record')
nvNetconSrccompid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconSrccompid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconSrccompid.setDescription('source component id Originating component of the connection. ')
nvNetconDstcompid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconDstcompid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconDstcompid.setDescription('destination component id Receiving component of the connection. ')
nvNetconCallingad = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconCallingad.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconCallingad.setDescription('calling network address (from bcd) The calling network address.')
nvNetconCalledad = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconCalledad.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconCalledad.setDescription('called network address (from bcd) The called network address.')
nvNetconConstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 9))).clone(namedValues=NamedValues(("initial", 2), ("awaitingResponse", 3), ("dataTransfer", 5), ("disconnected", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconConstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconConstate.setDescription('connection state The actual state of this connection. Initial status is 1.')
nvNetconConid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconConid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconConid.setDescription('Internal Network connection identifier.')
nvNetconSrcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconSrcid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconSrcid.setDescription('Internal Source identifier.')
nvNetconDstid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 13, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNetconDstid.setStatus('mandatory')
if mibBuilder.loadTexts: nvNetconDstid.setDescription('Internal Destination identifier.')
nvRoutemap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 14))
nvRoutemapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRoutemapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapMaxRec.setDescription('total number of records allowed in database file.')
nvRoutemapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRoutemapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapNumRec.setDescription('number of records in use.')
nvRoutemapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3), )
if mibBuilder.loadTexts: nvRoutemapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapTable.setDescription('routemap file.')
nvRoutemapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRoutemapIndex"))
if mibBuilder.loadTexts: nvRoutemapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapEntry.setDescription('routemap record.')
nvRoutemapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRoutemapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapIndex.setDescription('Index of routemap record')
nvRoutemapAddrstr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapAddrstr.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapAddrstr.setDescription('Address string to be translated (addrstr).')
nvRoutemapAddrtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 9))).clone(namedValues=NamedValues(("callednum", 2), ("calledsub", 3), ("any", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapAddrtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapAddrtype.setDescription('How to interpret addrstr (addrtype).')
nvRoutemapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapNetaddr.setDescription('Netaddr yielded by match with addrstr.')
nvRoutemapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapUserdata.setDescription('Userdata yielded by match with addrstr.')
nvRoutemapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRoutemapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvRoutemapStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvMediastat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 15))
nvMediastatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatMaxRec.setDescription('total number of records allowed in database file.')
nvMediastatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatNumRec.setDescription('number of records in use.')
nvMediastatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3), )
if mibBuilder.loadTexts: nvMediastatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatTable.setDescription('Mediastat file.')
nvMediastatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMediastatIndex"))
if mibBuilder.loadTexts: nvMediastatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatEntry.setDescription('Mediastat record.')
nvMediastatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatIndex.setDescription('Index of mediastat record')
nvMediastatOrigimage = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 401))).clone(namedValues=NamedValues(("image1", 1), ("image2", 401)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatOrigimage.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatOrigimage.setDescription('original boot image.')
nvMediastatImage = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 401))).clone(namedValues=NamedValues(("image1", 1), ("image2", 401)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatImage.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatImage.setDescription('current boot image.')
nvMediastatDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatDebug.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatDebug.setDescription('debug flag.')
nvMediastatImagechg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatImagechg.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatImagechg.setDescription('auto image change.')
nvMediastatDump = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMediastatDump.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatDump.setDescription('dump flag.')
nvMediastatImage1db = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage1db.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatImage1db.setDescription('side0 database version.')
nvMediastatImage1sw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage1sw.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatImage1sw.setDescription('side0 software version.')
nvMediastatImage2db = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage2db.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatImage2db.setDescription('side1 database version.')
nvMediastatImage2sw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatImage2sw.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatImage2sw.setDescription('side1 software version.')
nvMediastatMediasize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 15, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 33))).clone(namedValues=NamedValues(("absent", 1), ("v2MB", 3), ("v4MB", 5), ("v6MB", 7), ("v8MB", 9), ("v10MB", 11), ("v12MB", 13), ("v14MB", 15), ("v16MB", 17), ("v18MB", 19), ("v20MB", 21), ("v32MB", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMediastatMediasize.setStatus('mandatory')
if mibBuilder.loadTexts: nvMediastatMediasize.setDescription('storage medium size.')
nvTnnlconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 16))
nvTnnlconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfMaxRec.setDescription('total number of records allowed in database file.')
nvTnnlconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfNumRec.setDescription('number of records in use.')
nvTnnlconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3), )
if mibBuilder.loadTexts: nvTnnlconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfTable.setDescription('Backhaul instance table definition.')
nvTnnlconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnnlconfIndex"))
if mibBuilder.loadTexts: nvTnnlconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfEntry.setDescription('A tunnel table entry containing objects which configure a tunnel protocol.')
nvTnnlconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfIndex.setDescription('Backhaul configuration entry index number.')
nvTnnlconfPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfPortname.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfPortname.setDescription('Port name (portname)')
nvTnnlconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfRsrcpool.setDescription('Resource pool name.')
nvTnnlconfLineprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dontcare", 2), ("rfc1662", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfLineprot.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfLineprot.setDescription('Backhaul line protocol.')
nvTnnlconfProt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("transparent", 2), ("rfc1598", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfProt.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfProt.setDescription('Backhaul line protocol.')
nvTnnlconfRtmethod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("useconfig", 2), ("usecallednm", 3), ("usecalledsb", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfRtmethod.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfRtmethod.setDescription('Backhaul routing protocol.')
nvTnnlconfNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfNetaddr.setDescription('Backhaul network address when rtmethod is useconfig.')
nvTnnlconfUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfUserdata.setDescription('Backhaul configuration user data.')
nvTnnlconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 16, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnnlconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvTnnlstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 17))
nvTnnlstatfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatfMaxRec.setDescription('total number of records allowed in database file.')
nvTnnlstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatNumRec.setDescription('number of records in use.')
nvTnnlstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3), )
if mibBuilder.loadTexts: nvTnnlstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatTable.setDescription('Backhaul instance status table definition.')
nvTnnlstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnnlstatIndex"))
if mibBuilder.loadTexts: nvTnnlstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatEntry.setDescription('A tunnel status table entry containing fields which store tunnel status information.')
nvTnnlstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatIndex.setDescription('Backhaul status entry index number.')
nvTnnlstatPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatPortname.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatPortname.setDescription('Port on which this Backhaul status entry is applied.')
nvTnnlstatRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatRsrcpool.setDescription('Resource pool on which this Backhaul status entry is applied.')
nvTnnlstatConnstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tunnelnocb", 2), ("tunnelnoport", 3), ("tunnelinactive", 4), ("tunnelcalling", 5), ("tunnelactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatConnstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatConnstat.setDescription('Current connection status.')
nvTnnlstatRtstring = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatRtstring.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatRtstring.setDescription('String upon which routing was based.')
nvTnnlstatNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatNetaddr.setDescription('Network address to which call was routed.')
nvTnnlstatUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatUserdata.setDescription('User data to which call was routed.')
nvTnnlstatCallatts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatCallatts.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatCallatts.setDescription('No of attempts to place current call.')
nvTnnlstatCallattfs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatCallattfs.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatCallattfs.setDescription('No of failed attempts to place current call.')
nvTnnlstatInframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatInframes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatInframes.setDescription('No of frames switched from line to tunnel route.')
nvTnnlstatOutframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatOutframes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatOutframes.setDescription('No of frames switched from tunnel route to line.')
nvTnnlstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 17, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnnlstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnnlstatDtreset.setDescription('date & time statistics last reset')
nvCDLITable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 18), )
if mibBuilder.loadTexts: nvCDLITable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLITable.setDescription('DLI configuration table definition.The actual database contains 17 tables, if a DLI card is plugged in one of the slot then the data table matched the slot will become active, otherwise the record is not active. This table combines 17 tables into one MIB table which uses two table instances: slot and port.')
nvCDLIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCDLISlotIndex"), (0, "Telematics-Nevada-MIB", "nvCDLIPortIndex"))
if mibBuilder.loadTexts: nvCDLIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIEntry.setDescription('DLI configuration record.')
nvCDLISlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDLISlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLISlotIndex.setDescription('CDLI slot index number.')
nvCDLIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDLIPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIPortIndex.setDescription('CDLI card port index number.')
nvCDLIName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDLIName.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIName.setDescription('The name of the DLI card port such as CDLI1_I2.')
nvCDLIFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("d4sf", 1), ("d4esf", 2), ("pcm30", 3), ("crc4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIFormat.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIFormat.setDescription('Frame format.')
nvCDLICode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLICode.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLICode.setDescription('Code format.')
nvCDLIFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("att", 2), ("ansi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIFdl.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIFdl.setDescription('Facilities data link format.')
nvCDLISignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ccs", 1), ("rbs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLISignaling.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLISignaling.setDescription('Signal type.')
nvCDLILineimp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ohm-120", 1), ("ohm-75", 2), ("ohm-100", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLILineimp.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLILineimp.setDescription('Line impedance.')
nvCDLIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIEnable.setDescription('Port enable.')
nvCDLICsudsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLICsudsu.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLICsudsu.setDescription('csudsu enabled or not.')
nvCDLIAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("t130", 1), ("t124", 2), ("t118", 3), ("t112", 4), ("t16", 5), ("t10", 6), ("t1neg75", 7), ("t1neg150", 8), ("t1neg225", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIAtten.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIAtten.setDescription('Attenuation of the line .')
nvCDLIGain = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g12db", 1), ("g26db", 2), ("g36db", 3), ("g43db", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIGain.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIGain.setDescription('Gain of the receiver.')
nvCDLIDataInver = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDLIDataInver.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDLIDataInver.setDescription('Data inversion enabled or not.')
nvSDLITable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 19), )
if mibBuilder.loadTexts: nvSDLITable.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLITable.setDescription('DLI statistics table definition.The actual database contains 17 tables, if a DLI card is plugged in one of the slot then the data table matched the slot will become active, otherwise the record is not active. This table combines 17 tables into one MIB table which uses two table instances: slot and port.')
nvSDLIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSDLISlotIndex"), (0, "Telematics-Nevada-MIB", "nvSDLIPortIndex"))
if mibBuilder.loadTexts: nvSDLIEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIEntry.setDescription('DLI statistics record.')
nvSDLISlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLISlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLISlotIndex.setDescription('SDLI slot index number.')
nvSDLIPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIPortIndex.setDescription('SDLI card port index number.')
nvSDLISdlinm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLISdlinm.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLISdlinm.setDescription('SDLI entry name such as SDLI1_I2.')
nvSDLIDlitype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIDlitype.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIDlitype.setDescription('SDLI card port type such as E1 or T1.')
nvSDLICurstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("unknwn", 2), ("down", 3), ("red", 4), ("blue", 5), ("yell", 6), ("mLine", 7), ("mPay", 8), ("busyAIS", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLICurstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLICurstate.setDescription('SDLI card port current device state.')
nvSDLIRedcnts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIRedcnts.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIRedcnts.setDescription('SDLI card port red alarm count.')
nvSDLIYelcnts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIYelcnts.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIYelcnts.setDescription('SDLI card port yellow alarm count.')
nvSDLIBlucnts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIBlucnts.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIBlucnts.setDescription('SDLI card port blue alarm count.')
nvSDLIErrcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIErrcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIErrcnt.setDescription('SDLI card port crc alarm count.')
nvSDLITxundrun = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLITxundrun.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLITxundrun.setDescription('TX underrun count.')
nvSDLIRxfrmslp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIRxfrmslp.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIRxfrmslp.setDescription('RX Slip count.')
nvSDLIDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 19, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDLIDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDLIDtreset.setDescription('date & time statistics last reset')
nvUgconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 20))
nvUgconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfMaxRec.setDescription('total number of records allowed in database file.')
nvUgconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfNumRec.setDescription('number of records in use.')
nvUgconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3), )
if mibBuilder.loadTexts: nvUgconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfTable.setDescription(' Device usage group configuration table.')
nvUgconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvUgconfIndex"))
if mibBuilder.loadTexts: nvUgconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfEntry.setDescription('Device usage group configuration record.')
nvUgconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfIndex.setDescription('Usage group entry index number.')
nvUgconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfName.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfName.setDescription('Usage group entry name.')
nvUgconfPool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfPool.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfPool.setDescription('Usage group entry resource pool name.')
nvUgconfNumrsrvd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfNumrsrvd.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfNumrsrvd.setDescription('Number of devices reserved for this entry.')
nvUgconfThreshld = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfThreshld.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfThreshld.setDescription('Allocation of disallowance thrreshold for this entry.')
nvUgconfMaxbw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfMaxbw.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfMaxbw.setDescription('Maximum bandwidth allocated to this entry.')
nvUgconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 20, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvUgconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvUgstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 21))
nvUgstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatMaxRec.setDescription('total number of records allowed in database file.')
nvUgstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatNumRec.setDescription('number of records in use.')
nvUgstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3), )
if mibBuilder.loadTexts: nvUgstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatTable.setDescription(' Device usage group statistics table.')
nvUgstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvUgstatIndex"))
if mibBuilder.loadTexts: nvUgstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatEntry.setDescription('Device usage group statistics record.')
nvUgstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatIndex.setDescription('Usage group statistics entry index number.')
nvUgstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatName.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatName.setDescription('Usage group statistics entry name.')
nvUgstatPool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatPool.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatPool.setDescription('Usage group statistics entry resource pool name.')
nvUgstatNumused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatNumused.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatNumused.setDescription('Number of devices allocated to this group.')
nvUgstatBwused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatBwused.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatBwused.setDescription('Amount of bandwidth allocated to this group.')
nvUgstatBwrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatBwrejs.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatBwrejs.setDescription('Rejections to this group due to bandwidth restrain.')
nvUgstatUnavrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatUnavrejs.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatUnavrejs.setDescription('Rejections to this group due to device unavailability.')
nvUgstatThresrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatThresrejs.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatThresrejs.setDescription('Rejections to this group due to threshold restriction.')
nvUgstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 21, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvUgstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvUgstatDtreset.setDescription('date & time statistics last reset')
nvDrstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 22))
nvDrstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatMaxRec.setDescription('total number of records allowed in database file.')
nvDrstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatNumRec.setDescription('number of records in use.')
nvDrstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3), )
if mibBuilder.loadTexts: nvDrstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatTable.setDescription(' Device pool registry statistics.')
nvDrstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDrstatIndex"))
if mibBuilder.loadTexts: nvDrstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatEntry.setDescription('Device pool registry statistics record.')
nvDrstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatIndex.setDescription('Device pool registry statistics entry index number.')
nvDrstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatName.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatName.setDescription('Device pool registry statistics entry name.')
nvDrstatClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("dsp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatClass.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatClass.setDescription('Device class of this pool.')
nvDrstatNumdev = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumdev.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatNumdev.setDescription('Number of devices registered to this pool.')
nvDrstatNumrsrvd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumrsrvd.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatNumrsrvd.setDescription('Number of devices reserved to this pool.')
nvDrstatNumavail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumavail.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatNumavail.setDescription('Number of devices available for allocation.')
nvDrstatNumused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatNumused.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatNumused.setDescription('Number of devices presently allocated for use.')
nvDrstatMaxused = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatMaxused.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatMaxused.setDescription('Maximum number of numused since last box reset.')
nvDrstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 22, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDrstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvDrstatDtreset.setDescription('date & time statistics last reset')
nvCFRMRTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 23), )
if mibBuilder.loadTexts: nvCFRMRTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMRTable.setDescription('Framer card configuration table definition. The actual framer card database has 17 tables. Each table uses name convention: CFRMR plus slot number. Each framer card has two static WAN ports and 128 smart ports. This table will combine 17 databases into one table. In order to support the actual framer card configuration, this table requires two instances: slot and port number.')
nvCFRMREntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCFRMRSlotIndex"), (0, "Telematics-Nevada-MIB", "nvCFRMRPortIndex"))
if mibBuilder.loadTexts: nvCFRMREntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMREntry.setDescription('Framer card configuration record definition. The total record number is 17. If there is a framer card plugged in one of the slot, then the corresponding framer record is active. Otherwise the record is not active.')
nvCFRMRSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCFRMRSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMRSlotIndex.setDescription('Framer card slot number.')
nvCFRMRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCFRMRPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMRPortIndex.setDescription('For static port, the index number is from 1 to 2. For smart port type, the index number is from 3 to 130.')
nvCFRMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCFRMRName.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMRName.setDescription('The name of a framer card port.')
nvCFRMRRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("undef", 1), ("v64K", 2), ("v128K", 3), ("v192K", 4), ("v256K", 5), ("v320K", 6), ("v384K", 7), ("v448K", 8), ("v512K", 9), ("v576K", 10), ("v640K", 11), ("v704K", 12), ("v768K", 13), ("v832K", 14), ("v896K", 15), ("v960K", 16), ("v1024K", 17), ("v1088K", 18), ("v1152K", 19), ("v1216K", 20), ("v1280K", 21), ("v1344K", 22), ("v1408K", 23), ("v1472K", 24), ("v1536K", 25), ("v1600K", 26), ("v1664K", 27), ("v1728K", 28), ("v1792K", 29), ("v1856K", 30), ("v1920K", 31), ("v1984K", 32), ("v2048K", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMRRate.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMRRate.setDescription('Framer card port baud rate.')
nvCFRMREIAtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v3wire", 1), ("vx21bis", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMREIAtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMREIAtype.setDescription('Port interface type.')
nvCFRMRClkmode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insync", 1), ("exsync", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMRClkmode.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMRClkmode.setDescription('Port clock mode.')
nvCFRMRDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMRDebounce.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMRDebounce.setDescription('WAN port eia debounce interval.')
nvCFRMREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 23, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCFRMREnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCFRMREnable.setDescription('Enable or disable port.')
nvSFRMRTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 24), )
if mibBuilder.loadTexts: nvSFRMRTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRTable.setDescription('Framer card statistics table definition. The actual framer card database has 17 tables. Each table uses name convention: SFRMR plus slot number. Each framer card has two static WAN ports and 128 smart ports. This table will combine 17 databases into one table. In order to support the actual framer card configuration, this table requires two instances: slot and port number.')
nvSFRMREntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSFRMRSlotIndex"), (0, "Telematics-Nevada-MIB", "nvSFRMRPortIndex"))
if mibBuilder.loadTexts: nvSFRMREntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMREntry.setDescription('Framer card statistics record definition. The total record number is 17. If there is a framer card plugged in one of the slot, then the corresponding framer record is active. Otherwise the record is not active.')
nvSFRMRSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRSlotIndex.setDescription('Framer card slot number.')
nvSFRMRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRPortIndex.setDescription('For static port, the index number is from 1 to 2. For smart port type, the index number is from 3 to 130.')
nvSFRMRName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRName.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRName.setDescription('The name of a framer card port.')
nvSFRMRMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("absent", 1), ("dead", 2), ("broken", 3), ("async", 4), ("sync", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRMode.setDescription('The operation mode.')
nvSFRMRState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("free", 1), ("down", 2), ("setup", 3), ("up", 4), ("test", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRState.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRState.setDescription('The operation state.')
nvSFRMRRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("undef", 1), ("v64K", 2), ("v128K", 3), ("v192K", 4), ("v256K", 5), ("v320K", 6), ("v384K", 7), ("v448K", 8), ("v512K", 9), ("v576K", 10), ("v640K", 11), ("v704K", 12), ("v768K", 13), ("v832K", 14), ("v896K", 15), ("v960K", 16), ("v1024K", 17), ("v1088K", 18), ("v1152K", 19), ("v1216K", 20), ("v1280K", 21), ("v1344K", 22), ("v1408K", 23), ("v1472K", 24), ("v1536K", 25), ("v1600K", 26), ("v1664K", 27), ("v1728K", 28), ("v1792K", 29), ("v1856K", 30), ("v1920K", 31), ("v1984K", 32), ("v2048K", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRate.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRRate.setDescription('Framer card port baud rate.')
nvSFRMRCid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRCid.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRCid.setDescription('Circuit ID of Munich ports.')
nvSFRMRRxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRxoff.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRRxoff.setDescription('RXOFF')
nvSFRMRTxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRTxoff.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRTxoff.setDescription('TXOFF')
nvSFRMRNrxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRNrxoff.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRNrxoff.setDescription('RNRXOFF')
nvSFRMRNtxoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRNtxoff.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRNtxoff.setDescription('RNTXOFF')
nvSFRMRLostfrms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRLostfrms.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRLostfrms.setDescription('Number of lost frames.')
nvSFRMRFerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRFerrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRFerrs.setDescription('FERRS')
nvSFRMRPerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRPerrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRPerrs.setDescription('PERRS')
nvSFRMRRxovrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRxovrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRRxovrs.setDescription('Number of receive overruns frames.')
nvSFRMRCrcerrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRCrcerrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRCrcerrs.setDescription('Number of CRC errors.')
nvSFRMRRxaborts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRRxaborts.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRRxaborts.setDescription('Number of receive aborte frames.')
nvSFRMRDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 24, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSFRMRDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvSFRMRDtreset.setDescription('date & time statistics last reset')
nvSlotstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 25))
nvSlotstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatMaxRec.setDescription('total number of records allowed in database file.')
nvSlotstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatNumRec.setDescription('number of records in use.')
nvSlotstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3), )
if mibBuilder.loadTexts: nvSlotstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatTable.setDescription('Slot statistics table definition.')
nvSlotstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSlotstatIndex"))
if mibBuilder.loadTexts: nvSlotstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatEntry.setDescription('Nevada product is a 17 slot chassis. Each slot can be plugged in a communication card module. The module can be a Host Packet, Framer or DLI card module. The system can have only one Host Module and up to two Framer card module. This table contains statistics information for each slot.')
nvSlotstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatIndex.setDescription('Slot index number.')
nvSlotstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatName.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatName.setDescription('Slot name.')
nvSlotstatCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))).clone(namedValues=NamedValues(("empty", 1), ("dliE1", 2), ("dliT1", 3), ("framer", 4), ("dsp", 5), ("phost", 6), ("qpsPower", 7), ("framer2", 8), ("qDE1", 9), ("qDT1", 10), ("oDLI", 11), ("fRMR", 12), ("ps", 13), ("none", 51), ("pHOSTIO", 52), ("fRMRIO", 53), ("e1IO", 55), ("t1IO", 56), ("pOWERIO", 57), ("v11EXT", 58), ("v11INT", 59), ("v35", 60), ("v24V35", 61), ("v24", 62), ("qDE1IO", 63), ("qDT1IO", 64), ("oDIO", 65), ("pEM", 66), ("pHIOM", 67)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCardType.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatCardType.setDescription('Slot card type.')
nvSlotstatIotype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67))).clone(namedValues=NamedValues(("empty", 1), ("none", 51), ("phostIo", 52), ("frmrIo", 53), ("e1Io", 54), ("t1Io", 56), ("powerIo", 57), ("v11ext", 58), ("v11int", 59), ("v35", 60), ("v24v35", 61), ("v24", 62), ("qDE1IO", 63), ("qDT1IO", 64), ("oDIO", 65), ("pEM", 66), ("pHIOM", 67)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatIotype.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatIotype.setDescription('Slot IO type.')
nvSlotstatCpu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notapp", 1), ("p5-100", 2), ("i960JF", 3), ("adsp2181", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCpu.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatCpu.setDescription('Slot IO type.')
nvSlotstatRam = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatRam.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatRam.setDescription('Amount of RAM on card.')
nvSlotstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("good", 1), ("failure", 2), ("notPowered", 3), ("notapplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatStatus.setDescription('Status of card as given by bats. good(1), -- Card is working failure(2), -- Card is failing notPowered(3), -- Power Supply -48 volts not supplied notapplicable(4) -- not applicable ')
nvSlotstatCardid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCardid.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatCardid.setDescription('Card id from eeprom.')
nvSlotstatHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatHwRevision.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatHwRevision.setDescription('Hardware Revision of the board.')
nvSlotstatCatPartnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatCatPartnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatCatPartnum.setDescription('Catalog part number.')
nvSlotstatSrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatSrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatSrNumber.setDescription('Serial Number.')
nvSlotstatProdChkDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 25, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSlotstatProdChkDate.setStatus('mandatory')
if mibBuilder.loadTexts: nvSlotstatProdChkDate.setDescription('Production Check Date.')
nvCDSPTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 26), )
if mibBuilder.loadTexts: nvCDSPTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPTable.setDescription('DSP configuration table definition.The actual database contains 17 tables, if a DSP card is plugged in one of the slot then the data table matched the slot will become active, otherwise the record is not active. This table combines 17 tables into one MIB table which uses two table instances: slot and port.')
nvCDSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCDSPSlotIndex"), (0, "Telematics-Nevada-MIB", "nvCDSPPortIndex"))
if mibBuilder.loadTexts: nvCDSPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPEntry.setDescription('DLI configuration record.')
nvCDSPSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDSPSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPSlotIndex.setDescription('CDSP slot number.')
nvCDSPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDSPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPPortIndex.setDescription('CDSP port number.')
nvCDSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCDSPName.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPName.setDescription('CDSP port name.')
nvCDSPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("yes", 2), ("slowno", 3), ("fastno", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDSPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPEnable.setDescription('CDSP port enable control.')
nvCDSPNumfaicon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDSPNumfaicon.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPNumfaicon.setDescription('CDSP num of consecutive hand shakes failed.')
nvCDSPNumload = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 26, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCDSPNumload.setStatus('mandatory')
if mibBuilder.loadTexts: nvCDSPNumload.setDescription('CDSP num of times redownload failed.')
nvSDSPTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 27), )
if mibBuilder.loadTexts: nvSDSPTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPTable.setDescription('DSP statistics table definition.The actual database contains 17 tables, if a DSP card is plugged in one of the slot then the data table matched the slot will become active, otherwise the record is not active. This table combines 17 tables into one MIB table which uses two table instances: slot and port.')
nvSDSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSDSPSlotIndex"), (0, "Telematics-Nevada-MIB", "nvSDSPPortIndex"))
if mibBuilder.loadTexts: nvSDSPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEntry.setDescription('DLI configuration record.')
nvSDSPSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPSlotIndex.setDescription('SDSP slot number.')
nvSDSPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPPortIndex.setDescription('SDSP port number.')
nvSDSPName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPName.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPName.setDescription('SDSP port name.')
nvSDSPState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 2), ("busy", 3), ("dead", 4), ("asleep", 5), ("dwld", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPState.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPState.setDescription('CDSP port state.')
nvSDSPNumfaicon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumfaicon.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumfaicon.setDescription('number of consecutive handshake failures.')
nvSDSPNumload = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumload.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumload.setDescription('number of redownload attempts failed.')
nvSDSPFailcaus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("healthy", 2), ("dwldFail", 3), ("portUpFail", 4), ("handshkeAbort", 5), ("handshkeTimeout", 6), ("llHandAbort", 7), ("llHandTimeout", 8), ("llHandHsAbo", 9), ("cmdTimeout", 10), ("monRegTimeout", 11), ("clrDownTimeout", 12), ("chCreErrNoReload", 13), ("chCreErrReload", 14), ("userDown", 15), ("handModify", 16), ("userReset", 17), ("notUsable", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPFailcaus.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPFailcaus.setDescription('SDSP port state.')
nvSDSPNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumcalls.setDescription('Number of calls processed on this DSP.')
nvSDSPNumfnegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumfnegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumfnegs.setDescription('Number of calls faild prior to negotiation start.')
nvSDSPDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPDtreset.setDescription('date & time statistics last reset')
nvSDSPNumIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumIncom.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumIncom.setDescription('Total number of INcoming calls made to this DSP.')
nvSDSPNumOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumOutgo.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumOutgo.setDescription('Total number of OUTgoing calls made to this DSP.')
nvSDSPNumIfailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumIfailneg.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumIfailneg.setDescription('Total number of failed negotiations INcoming.')
nvSDSPNumOfailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPNumOfailneg.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPNumOfailneg.setDescription('Total number of failed negotiations OUTgoing.')
nvSDSPEvent1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent1.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent1.setDescription('DMOD- primary modem hs ended in abort condition.')
nvSDSPEvent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent2.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent2.setDescription('DMOD- primary modem hs ended in timeout condition.')
nvSDSPEvent3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent3.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent3.setDescription('DMOD- Link layer modem hs ended in abort condition.')
nvSDSPEvent4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent4.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent4.setDescription('DMOD- Link layer modem hs ende in timeout condition.')
nvSDSPEvent5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent5.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent5.setDescription('DMOD- Link layer modem hs ended in primary hs aborted condition.')
nvSDSPEvent6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent6.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent6.setDescription('DMOD- Command Response Timeout error.')
nvSDSPEvent7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent7.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent7.setDescription('DMOD- Cleardown procedure ended in timeout condition.')
nvSDSPEvent8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent8.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent8.setDescription('DMOD- Moniter Register timeout error.')
nvSDSPEvent9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent9.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent9.setDescription('DMOD- Port Up failure No SABM from DSP to start the session.')
nvSDSPEvent10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent10.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent10.setDescription('DMOD- CHCRERR - with DSP Fail logic optioned.')
nvSDSPEvent11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent11.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent11.setDescription('DMOD- CHCRERR - with DSP Fail logic not optioned.')
nvSDSPEvent12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 27, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSDSPEvent12.setStatus('mandatory')
if mibBuilder.loadTexts: nvSDSPEvent12.setDescription('DMOD- modify action in SDSPx caused numfaicon threshold to be reached.')
nvCroute = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 28))
nvCrouteMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteMaxRec.setDescription('total number of records allowed in database file.')
nvCrouteNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteNumRec.setDescription('number of records in use.')
nvCrouteTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3), )
if mibBuilder.loadTexts: nvCrouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteTable.setDescription('Circuit routing table.')
nvCrouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCrouteIndex"))
if mibBuilder.loadTexts: nvCrouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteEntry.setDescription('Circuit routing table record.')
nvCrouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteIndex.setDescription('Index of croute record.')
nvCrouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteAddr.setDescription('Address.')
nvCrouteRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noroute", 1), ("callednum", 2), ("callngnum", 3), ("calledsub", 4), ("callngsub", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteRouting.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteRouting.setDescription('routing new var.')
nvCrouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("switched", 2), ("pernament", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteType.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteType.setDescription('circuit type.')
nvCrouteVol1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noprot", 1), ("dcprot", 2), ("g711a", 3), ("g711mu", 4), ("g711", 5), ("v110", 6), ("v120", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteVol1prot.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteVol1prot.setDescription('Protocol Specified.')
nvCrouteVol1mode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomode", 1), ("dcmode", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteVol1mode.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteVol1mode.setDescription('Data mode.')
nvCrouteBw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteBw.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteBw.setDescription('')
nvCrouteRcscp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteRcscp1.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteRcscp1.setDescription('rcscp1.')
nvCrouteRcscp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteRcscp2.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteRcscp2.setDescription('rcscp1.')
nvCrouteDialmapid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteDialmapid.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteDialmapid.setDescription('Record id of dialmap record to use.')
nvCrouteReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrouteReserve1.setStatus('obsolete')
if mibBuilder.loadTexts: nvCrouteReserve1.setDescription('OBSOLETE - removed field.')
nvCrouteDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("unspec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteDirection.setDescription('Direction record is for.')
nvCrouteChoice = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteChoice.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteChoice.setDescription('A priority value. Used to specify which record gets precedence if two records have the same addr.')
nvCrouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 28, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvCrouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrouteStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvCrcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 29))
nvCrcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatMaxRec.setDescription('total number of records allowed in database file.')
nvCrcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatNumRec.setDescription('number of records in use.')
nvCrcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3), )
if mibBuilder.loadTexts: nvCrcstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatTable.setDescription('Circuit connection status table.')
nvCrcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCrcstatIndex"))
if mibBuilder.loadTexts: nvCrcstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatEntry.setDescription('crcstat record indexed by record number.')
nvCrcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatIndex.setDescription('Index of crcstat record.')
nvCrcstatCid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCid.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatCid.setDescription('circuit connection identifier.')
nvCrcstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pending", 1), ("connecting", 2), ("connected", 3), ("clearing", 4), ("hung", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatState.setDescription('circuit connection state.')
nvCrcstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCallednum.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatCallednum.setDescription('called party address.')
nvCrcstatBw = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatBw.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatBw.setDescription('bandwidth of permanent circuit.')
nvCrcstatRcsc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRcsc0.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatRcsc0.setDescription('resource info 0.')
nvCrcstatDevice0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDevice0.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatDevice0.setDescription('device info 0.')
nvCrcstatRcsc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRcsc1.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatRcsc1.setDescription('resource info 1.')
nvCrcstatDevice1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDevice1.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatDevice1.setDescription('device info 1.')
nvCrcstatRcsc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRcsc2.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatRcsc2.setDescription('resource info 2.')
nvCrcstatDevice2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDevice2.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatDevice2.setDescription('device info 2.')
nvCrcstatReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatReserve1.setStatus('obsolete')
if mibBuilder.loadTexts: nvCrcstatReserve1.setDescription('OBSOLETE - removed field.')
nvCrcstatReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatReserve2.setStatus('obsolete')
if mibBuilder.loadTexts: nvCrcstatReserve2.setDescription('OBSOLETE - removed field.')
nvCrcstatCallngnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCallngnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatCallngnum.setDescription('calling party address.')
nvCrcstatCalledsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCalledsub.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatCalledsub.setDescription('called party subaddress.')
nvCrcstatCallngsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCallngsub.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatCallngsub.setDescription('calling party subaddress.')
nvCrcstatL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noprot", 1), ("dcprot", 2), ("g711A", 3), ("g711MU", 4), ("g711", 5), ("v110", 6), ("v120", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatL1prot.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatL1prot.setDescription('L1prot.')
nvCrcstatL1mode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomode", 1), ("dcmode", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatL1mode.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatL1mode.setDescription('Layer 1 data mode.')
nvCrcstatCroute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatCroute.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatCroute.setDescription('Croute record id used.')
nvCrcstatRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noroute", 1), ("callednum", 2), ("callngnum", 3), ("calledsub", 4), ("callngsub", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatRouting.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatRouting.setDescription('Routing method.')
nvCrcstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 29, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("unspec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrcstatDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrcstatDirection.setDescription('Direction call was in.')
nvCrfstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 30))
nvCrfstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatMaxRec.setDescription('total number of records allowed in database file.')
nvCrfstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatNumRec.setDescription('number of records in use.')
nvCrfstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3), )
if mibBuilder.loadTexts: nvCrfstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatTable.setDescription('Circuit failure status table.')
nvCrfstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvCrfstatIndex"))
if mibBuilder.loadTexts: nvCrfstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatEntry.setDescription('crfstat record indexed by record number.')
nvCrfstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatIndex.setDescription('Index of crfstat record.')
nvCrfstatCid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCid.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatCid.setDescription('circuit connection identifier.')
nvCrfstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCallednum.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatCallednum.setDescription('called party address.')
nvCrfstatCallngnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCallngnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatCallngnum.setDescription('calling party address.')
nvCrfstatCalledsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCalledsub.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatCalledsub.setDescription('called party subaddress.')
nvCrfstatCallngsub = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCallngsub.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatCallngsub.setDescription('calling party subaddress.')
nvCrfstatL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noprot", 1), ("dcprot", 2), ("g711A", 3), ("g711MU", 4), ("g711", 5), ("v110", 6), ("v120", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatL1prot.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatL1prot.setDescription('L1prot.')
nvCrfstatL1mode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nomode", 1), ("dcprot", 2), ("sync", 3), ("async", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatL1mode.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatL1mode.setDescription('Layer 1 data mode.')
nvCrfstatCroute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCroute.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatCroute.setDescription('Croute record id used.')
nvCrfstatRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noroute", 1), ("callednum", 2), ("callngnum", 3), ("calledsub", 4), ("callngsub", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRouting.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatRouting.setDescription('Routing method.')
nvCrfstatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatAddr.setDescription(' address.')
nvCrfstatCause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("crfNoRoute", 2), ("crfTsAllocFail", 3), ("crfRcscAllocFail", 4), ("crfConAbort", 5), ("crfConFail", 6), ("dvNoGroup", 7), ("dvBwRej", 8), ("dvThrshRej", 9), ("dvUnavail", 10), ("frBwUnavail", 11), ("portNoConn", 12), ("scsaStuck", 13), ("psReject", 14), ("psChCrErr", 15), ("dvNoPool", 16), ("dvBadClass", 17), ("dspHwUnavail", 18), ("dspBadResrc", 19), ("dspNoSetupI", 20), ("dspRoRoNone", 21), ("dspChCRspTO", 22), ("dspChCRNoHw", 23), ("dspChCrSyEr", 24), ("dspChCrBitF", 25), ("dspChCrDwlF", 26), ("dspMsgNotPS", 27), ("r2NoDspTs", 28), ("r2ChCrErr", 29), ("srcAborted", 30), ("crfRsrcBusy", 31), ("dspmFullLts", 32), ("sigChCrErr", 33), ("busy", 34), ("noAnswer", 35), ("tsUnavail", 36), ("noDialtone", 37), ("causeUnspecified", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatCause.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatCause.setDescription('circuit connection failure cause.')
nvCrfstatRcsc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRcsc0.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatRcsc0.setDescription('resource info 0.')
nvCrfstatRcsc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRcsc1.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatRcsc1.setDescription('resource info 1.')
nvCrfstatRcsc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatRcsc2.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatRcsc2.setDescription('resource info 2.')
nvCrfstatReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatReserve1.setStatus('obsolete')
if mibBuilder.loadTexts: nvCrfstatReserve1.setDescription('OBSOLETE - removed field.')
nvCrfstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 30, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("unspec", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvCrfstatDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nvCrfstatDirection.setDescription('Direction record is for.')
nvRrstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 31))
nvRrstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatMaxRec.setDescription('total number of records allowed in database file.')
nvRrstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatNumRec.setDescription('number of records in use.')
nvRrstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3), )
if mibBuilder.loadTexts: nvRrstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatTable.setDescription('resouce registry (system registry) status table.')
nvRrstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRrstatIndex"))
if mibBuilder.loadTexts: nvRrstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatEntry.setDescription('rrstat record indexed by record number.')
nvRrstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatIndex.setDescription('Index of rrstat record.')
nvRrstatPoolname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatPoolname.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatPoolname.setDescription('resource pool name.')
nvRrstatClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("protocolStack", 2), ("digitalModem", 3), ("priCall", 4), ("priDc", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatClass.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatClass.setDescription('resource pool class.')
nvRrstatNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumbers.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatNumbers.setDescription('number of resources.')
nvRrstatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatConns.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatConns.setDescription('number of connected resources.')
nvRrstatMaxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatMaxcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatMaxcalls.setDescription('Maximum number of connected resources.')
nvRrstatNumIcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumIcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatNumIcalls.setDescription('Total number of incoming calls processed.')
nvRrstatNumOcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumOcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatNumOcalls.setDescription('Total number of outgoing calls processed.')
nvRrstatNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatNumcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatNumcalls.setDescription('Total number of calls processed.')
nvRrstatAvgtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatAvgtime.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatAvgtime.setDescription('Average length of call in seconds.')
nvRrstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 31, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRrstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvRrstatDtreset.setDescription('date & time statistics last reset')
nvModemprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 32))
nvModemprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemprofMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofMaxRec.setDescription('total number of records allowed in database file.')
nvModemprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemprofNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofNumRec.setDescription('number of records in use.')
nvModemprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3), )
if mibBuilder.loadTexts: nvModemprofTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofTable.setDescription('modemconf file.')
nvModemprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvModemprofIndex"))
if mibBuilder.loadTexts: nvModemprofEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofEntry.setDescription('modemconf record.')
nvModemprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvModemprofIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofIndex.setDescription('Index of modemconf record')
nvModemprofName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofName.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofName.setDescription('Modem Prof resource config name (name)')
nvModemprofRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofRsrcpool.setDescription('Resource pool name.')
nvModemprofDspname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofDspname.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofDspname.setDescription('Device usage group name.')
nvModemprofType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("modauto", 1), ("v34", 2), ("v32bis", 3), ("v32", 4), ("v23t75r12", 5), ("v23t12r75", 6), ("v22bis", 7), ("v22", 8), ("v21", 9), ("b212a", 10), ("b103", 11), ("pautob", 12), ("pautoc", 13), ("v34bis", 14), ("vpcm", 15), ("v21rev", 16), ("v110mod", 21), ("v110b600", 22), ("v110b1200", 23), ("v110b2400", 24), ("v110b4800", 25), ("v110b7200", 26), ("v110b9600", 27), ("v110b12000", 28), ("v110b14400", 29), ("v110b19200", 30), ("v110b48000", 31), ("v110b56000", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofType.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofType.setDescription('Modem modulation scheme (type) Default value is 3.')
nvModemprofEc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disable", 1), ("v42ec", 2), ("mNPec", 3), ("eitherec", 4), ("autoec", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofEc.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofEc.setDescription('Modem error correction option.')
nvModemprofDc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofDc.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofDc.setDescription('Modem data compression option.')
nvModemprofMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 8))).clone(namedValues=NamedValues(("sync", 3), ("async", 4), ("auto", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofMode.setDescription('Modem sync / async option.')
nvModemprofCmpdtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("mulaw", 2), ("alaw", 3), ("nocmpdt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofCmpdtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofCmpdtype.setDescription('Modem companding type.')
nvModemprofTxlvl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofTxlvl.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofTxlvl.setDescription('Transmit level (txlvl) Default value is 13.')
nvModemprofRxthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofRxthresh.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofRxthresh.setDescription('Modem receive threshold (rxthresh) Default value is 38.')
nvModemprofAnston = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofAnston.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofAnston.setDescription('Modem generate answer (anston) tone.')
nvModemprofAnstondur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofAnstondur.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofAnstondur.setDescription('Mode answer tone (anstondur) duration.')
nvModemprofBildly = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofBildly.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofBildly.setDescription('Modem wait to send answer (bildly) tone.')
nvModemprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvModemprofFalbckchr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 32, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvModemprofFalbckchr.setStatus('mandatory')
if mibBuilder.loadTexts: nvModemprofFalbckchr.setDescription('modem autorel fallback char.')
nvIfStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 33))
nvIfStackInfoNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIfStackInfoNumRec.setDescription('number of records in use.')
nvIfStackInfoTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2), )
if mibBuilder.loadTexts: nvIfStackInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIfStackInfoTable.setDescription('modemconf file.')
nvIfStackInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIfStackInfoHigherLI"), (0, "Telematics-Nevada-MIB", "nvIfStackInfoLowerLI"))
if mibBuilder.loadTexts: nvIfStackInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIfStackInfoEntry.setDescription('IfStackInfo record.')
nvIfStackInfoHigherLI = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoHigherLI.setStatus('mandatory')
if mibBuilder.loadTexts: nvIfStackInfoHigherLI.setDescription('highre layer interface number.')
nvIfStackInfoLowerLI = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoLowerLI.setStatus('mandatory')
if mibBuilder.loadTexts: nvIfStackInfoLowerLI.setDescription('Lower layer interface number.')
nvIfStackInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIfStackInfoStatus.setDescription('Status of the entry.')
nvIfStackInfoRid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 33, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIfStackInfoRid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIfStackInfoRid.setDescription('Record ID to get info on this')
nvDialmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 34))
nvDialmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapMaxRec.setDescription('total number of records allowed in database file.')
nvDialmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapNumRec.setDescription('number of records in use.')
nvDialmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3), )
if mibBuilder.loadTexts: nvDialmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapTable.setDescription('Dialmap table.')
nvDialmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDialmapIndex"))
if mibBuilder.loadTexts: nvDialmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapEntry.setDescription('Dialmap table record.')
nvDialmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapIndex.setDescription('Index of dialmap record.')
nvDialmapNumdelete = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDialmapNumdelete.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapNumdelete.setDescription('Number of digits to delete.')
nvDialmapAddprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDialmapAddprefix.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapAddprefix.setDescription('Digits to add after digits deleted.')
nvDialmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 34, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDialmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialmapStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvDspmalloc = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 35))
nvDspmallocMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocMaxRec.setDescription('total number of records allowed in database file.')
nvDspmallocNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocNumRec.setDescription('number of records in use.')
nvDspmallocTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3), )
if mibBuilder.loadTexts: nvDspmallocTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocTable.setDescription('Dspmalloc table.')
nvDspmallocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDspmallocIndex"))
if mibBuilder.loadTexts: nvDspmallocEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocEntry.setDescription('Dspmalloc table record.')
nvDspmallocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocIndex.setDescription('Index of dspmalloc record')
nvDspmallocDsptype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("kfModem", 2), ("v90Modem", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDspmallocDsptype.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocDsptype.setDescription('Type of DSP - kflex or V.90.')
nvDspmallocWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDspmallocWeight.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocWeight.setDescription('Allocation proportion.')
nvDspmallocStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 35, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDspmallocStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvDspmallocStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvDialstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 1, 36))
nvDialstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatMaxRec.setDescription('total number of records allowed in database file.')
nvDialstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNumRec.setDescription('number of records in use.')
nvDialstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3), )
if mibBuilder.loadTexts: nvDialstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatTable.setDescription('Dialstat table.')
nvDialstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDialstatIndex"))
if mibBuilder.loadTexts: nvDialstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatEntry.setDescription('Dialstat table record.')
nvDialstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatIndex.setDescription('Index of Dialstat record')
nvDialstatRcscpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatRcscpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatRcscpool.setDescription('Resource Name.')
nvDialstatNcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcurrent.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNcurrent.setDescription('Number of dial-out Sessions currently occuring.')
nvDialstatNcalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcalling.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNcalling.setDescription('Number of call attempts currently occuring.')
nvDialstatTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("busy", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatTrace.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatTrace.setDescription('Is trace enabled?')
nvDialstatLastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatLastAddr.setDescription('Last Called Number.')
nvDialstatLastCause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastCause.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatLastCause.setDescription('Last ISDN cause code.')
nvDialstatLastDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastDiag.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatLastDiag.setDescription('Last X.25 diagnostic.')
nvDialstatLastResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatLastResponse.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatLastResponse.setDescription('Last Response.')
nvDialstatNdialout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNdialout.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNdialout.setDescription('Number of dial-out sessions.')
nvDialstatNattempt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNattempt.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNattempt.setDescription('Number of call attempts. (May be multiple attempts per dialout request).')
nvDialstatNsucceed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNsucceed.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNsucceed.setDescription('Number of successful dial-out attempts.')
nvDialstatNfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNfail.setDescription('Number of failed dial-out attempts.')
nvDialstatNcircfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcircfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNcircfail.setDescription('Number of times circuit creation failed immediately.')
nvDialstatNcmderror = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNcmderror.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNcmderror.setDescription('Number of fails due to error in dialout string command.')
nvDialstatNdialtone = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNdialtone.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNdialtone.setDescription('Number of fails due to no dialtone.')
nvDialstatNbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNbusy.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNbusy.setDescription('Number of fails due to remote busy.')
nvDialstatNnoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoRoute.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNnoRoute.setDescription('Number of fails due to routing error.')
nvDialstatNnoModem = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoModem.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNnoModem.setDescription('Number of Fails because no modem was available.')
nvDialstatNnoInput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoInput.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNnoInput.setDescription('Number of fails because of no user input within time limit.')
nvDialstatNinvnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNinvnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNinvnum.setDescription('Number of fails because invalid user input received.')
nvDialstatNnoAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNnoAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNnoAnswer.setDescription('Number of fails due to no answer.')
nvDialstatNmnegfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNmnegfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNmnegfail.setDescription('Number of failed modem negotiation.')
nvDialstatNconnfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNconnfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNconnfail.setDescription('Number of fails after ISDN connection for reasons other than modem negotiation failure.')
nvDialstatNmiscfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNmiscfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNmiscfail.setDescription('Number of miscellaneous failures not counted elsewhere.')
nvDialstatMaxcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatMaxcall.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatMaxcall.setDescription('Maximum number concurrently calling.')
nvDialstatAdSucctim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatAdSucctim.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatAdSucctim.setDescription('Average time for dial-out for successful dial-out request, in units of tenths of a second.')
nvDialstatAdFailtim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatAdFailtim.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatAdFailtim.setDescription('Average time for dial-out for filaed cases, in units of tenths of a second.')
nvDialstatNabredial = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 36, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDialstatNabredial.setStatus('mandatory')
if mibBuilder.loadTexts: nvDialstatNabredial.setDescription(' number of aborted redials, JATE redial restriction.')
nvFrmrstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 1, 37), )
if mibBuilder.loadTexts: nvFrmrstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatTable.setDescription('Framer card statistics table definition. The actual framer card database has 17 tables. Each table uses name convention: frmrstat plus slot number. This table will combine 17 databases into one table. In order to support the actual framer card configuration, this table requires the slot number')
nvFrmrstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFrmrstatSlotIndex"))
if mibBuilder.loadTexts: nvFrmrstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatEntry.setDescription('Framer card statistics record definition. The total record number is 17. If there is a framer card plugged in one of the slot, then the corresponding framer record is active. Otherwise the record is not active.')
nvFrmrstatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatSlotIndex.setDescription('Framer card slot number.')
nvFrmrstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("free", 1), ("dead", 2), ("dying", 3), ("up", 4), ("download", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatState.setDescription('State of framer card.')
nvFrmrstatFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6))).clone(namedValues=NamedValues(("none", 1), ("softfail", 2), ("hardfail", 3), ("download", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatFailCause.setDescription('Reason for last failure.')
nvFrmrstatResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatResetTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatResetTime.setDescription('Date and Time of last framer card reset.')
nvFrmrstatNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumFailures.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumFailures.setDescription('Number of download attempts.')
nvFrmrstatNumReloads = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumReloads.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumReloads.setDescription('Number of successful reloads.')
nvFrmrstatTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatTotalCalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatTotalCalls.setDescription('number of smartport calls made.')
nvFrmrstatCallsPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatCallsPresent.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatCallsPresent.setDescription('number of calls currently up.')
nvFrmrstatNumPortUp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumPortUp.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumPortUp.setDescription('number of successful port ups.')
nvFrmrstatNumFailUp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumFailUp.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumFailUp.setDescription('number of failed port ups.')
nvFrmrstatNumTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumTxFrames.setDescription('number of frames transmitted.')
nvFrmrstatNumRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumRxFrames.setDescription('number of frames received.')
nvFrmrstatNumTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumTxBytes.setDescription('Number of bytes transmitted.')
nvFrmrstatNumRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 1, 37, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrmrstatNumRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrmrstatNumRxBytes.setDescription('number of bytes received.')
nvNas = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 2, 1))
nvFrstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 1))
nvFrstatCurtime = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatCurtime.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatCurtime.setDescription('Minutes into current 15-minute cycle Statistic is zeroed at startup time.')
nvFrstatTxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatTxcurfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatTxcurfps.setDescription('Current snapshot of Tx Frames/Second Statistic is zeroed at startup time.')
nvFrstatTxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatTxavgfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatTxavgfps.setDescription('Average Tx Frames/Second for 15-minute cycle Statistic is zeroed at startup time.')
nvFrstatRxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatRxcurfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatRxcurfps.setDescription(' Current snapshot of Rx Frames/Second Statistic is zeroed at startup time.')
nvFrstatRxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatRxavgfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatRxavgfps.setDescription('Average Rx Frames/Second for 15-minute cycle Statistic is zeroed at startup time.')
nvFrstatMtxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMtxcurfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatMtxcurfps.setDescription('Current snapshot of mapped Tx Frames/Second Statistic is zeroed at startup time.')
nvFrstatMtxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMtxavgfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatMtxavgfps.setDescription('Average mapped Tx Frames/Second for 15-minute cycle Statistic is zeroed at startup time.')
nvFrstatMrxcurfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMrxcurfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatMrxcurfps.setDescription('Current snapshot of mapped Rx Frames/Second Statistic is zeroed at startup time.')
nvFrstatMrxavgfps = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatMrxavgfps.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatMrxavgfps.setDescription('Average mapped Rx Frames/Second for 15-minute cycle Statistic is zeroed at startup time.')
nvFrstatDtreset = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrstatDtreset.setDescription('date & time statistics last reset')
nvFristat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 2))
nvFristatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatMaxRec.setDescription('total number of records allowed in database file.')
nvFristatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatNumRec.setDescription('number of records in use.')
nvFristatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3), )
if mibBuilder.loadTexts: nvFristatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatTable.setDescription('fristat file.')
nvFristatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFristatIndex"))
if mibBuilder.loadTexts: nvFristatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatEntry.setDescription('fristat record.')
nvFristatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatIndex.setDescription('Index of Fristat record')
nvFristatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatPort.setDescription(' Physical Port')
nvFristatOperstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unconnected", 1), ("badFriConfig", 2), ("idle", 3), ("setup", 4), ("active", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatOperstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatOperstate.setDescription('FRI Operational state Initial status is 0+1.')
nvFristatLmistate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("normal", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatLmistate.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatLmistate.setDescription('LMI Operational state Initial status is 0+1.')
nvFristatCurseq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatCurseq.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatCurseq.setDescription('Transmitted LMI sequence number')
nvFristatRcvseq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatRcvseq.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatRcvseq.setDescription('Received LMI sequence number')
nvFristatErrorcounts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatErrorcounts.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatErrorcounts.setDescription('LMI errors during recorded history Statistic is zeroed at startup time.')
nvFristatRxexceszes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatRxexceszes.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatRxexceszes.setDescription('Too Large Incoming Frames Statistic is zeroed at startup time.')
nvFristatRxbaddlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatRxbaddlcis.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatRxbaddlcis.setDescription('Invalid dlci Incoming Frames Statistic is zeroed at startup time.')
nvFristatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFristatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvFristatDtreset.setDescription('date & time statistics last reset')
nvFrvcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 3))
nvFrvcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatMaxRec.setDescription('total number of records allowed in database file.')
nvFrvcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatNumRec.setDescription('number of records in use.')
nvFrvcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3), )
if mibBuilder.loadTexts: nvFrvcstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatTable.setDescription('frvcstat file.')
nvFrvcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFrvcstatIndex"))
if mibBuilder.loadTexts: nvFrvcstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatEntry.setDescription('frvcstat record.')
nvFrvcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatIndex.setDescription('Index of Frvcstat')
nvFrvcstatService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatService.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatService.setDescription('Connected Component ID ')
nvFrvcstatServiceid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatServiceid.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatServiceid.setDescription('Service Instance.')
nvFrvcstatFri = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatFri.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatFri.setDescription('FRI of this PVC (FRICONF recnum)')
nvFrvcstatDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDlci.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatDlci.setDescription('DLCI of this PVC')
nvFrvcstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("free", 1), ("badPvcConfig", 2), ("disabled", 3), ("badDLCI", 4), ("operDisabled", 5), ("friFull", 6), ("noFri", 7), ("friDown", 8), ("friError", 9), ("pvcInit", 10), ("pvcDown", 11), ("pvcUp", 12), ("pvcInactive", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatStatus.setDescription('PVC Operational State Initial status is 0+1.')
nvFrvcstatTxcongstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatTxcongstatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatTxcongstatus.setDescription('Transmit Congestion Status Initial status is 0+1.')
nvFrvcstatRxbufdepletion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatRxbufdepletion.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatRxbufdepletion.setDescription('Receive Buffer Depletion Statistic is zeroed at startup time.')
nvFrvcstatOutputrate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatOutputrate.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatOutputrate.setDescription('Output during last period (bytes) Statistic is zeroed at startup time.')
nvFrvcstatInputrate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatInputrate.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatInputrate.setDescription('Input during last period (bytes) Statistic is zeroed at startup time.')
nvFrvcstatExcessdatas = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatExcessdatas.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatExcessdatas.setDescription('Data over output limit Statistic is zeroed at startup time.')
nvFrvcstatTxframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatTxframes.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatTxframes.setDescription('Transmitted Frame Counter Statistic is zeroed at startup time.')
nvFrvcstatRxframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatRxframes.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatRxframes.setDescription('Received Frame Counter Statistic is zeroed at startup time.')
nvFrvcstatDrprxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDrprxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatDrprxs.setDescription('Received Frames Dropped Statistic is zeroed at startup time.')
nvFrvcstatDrprxdes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDrprxdes.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatDrprxdes.setDescription('Received DE Frames Dropped Statistic is zeroed at startup time.')
nvFrvcstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcstatDtreset.setDescription('date & time statistics last reset')
nvFriconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 4))
nvFriconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfMaxRec.setDescription('total number of records allowed in database file.')
nvFriconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfNumRec.setDescription('number of records in use.')
nvFriconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3), )
if mibBuilder.loadTexts: nvFriconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfTable.setDescription('friconf file.')
nvFriconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFriconfIndex"))
if mibBuilder.loadTexts: nvFriconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfEntry.setDescription('friconf record.')
nvFriconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfIndex.setDescription('Index of friconf record')
nvFriconfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfPort.setDescription('Physical Port (port) ')
nvFriconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfRsrcpool.setDescription('Resource pool ')
nvFriconfMaxfrmsz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfMaxfrmsz.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfMaxfrmsz.setDescription('Maximum Frame Size (maxfrmsz) Default value is 140.')
nvFriconfLmitype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nolmi", 1), ("go4", 2), ("ansi", 3), ("itu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfLmitype.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfLmitype.setDescription('Style of LMI operation (lmitype) Default value is go4 (1+1).')
nvFriconfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("net", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfMode.setDescription('Mode of FRI Operation (mode) Default value is user (0+1).')
nvFriconfDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfDlci.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfDlci.setDescription("LMI's DLCI (dlci) Default value is 1023.")
nvFriconfnT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnT1.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnT1.setDescription('LMI Polling Interval (nT1) Default value is 10.')
nvFriconfnT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnT2.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnT2.setDescription('Max Time Between Polls (nT2) Default value is 15.')
nvFriconfnT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnT3.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnT3.setDescription('Max Polls per nN4 (nT3) Default value is 20.')
nvFriconfnN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnN1.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnN1.setDescription('LMI Full Status Poll Frequency (nN1) Default value is 6.')
nvFriconfnN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnN2.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnN2.setDescription('LMI Error Threshold (nN2) Default value is 2.')
nvFriconfnN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnN3.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnN3.setDescription('LMI Error History Length (nN3) Default value is 4.')
nvFriconfnN4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFriconfnN4.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnN4.setDescription('Max Polls Within nT3 (nN4). Default value is 5.')
nvFriconfnP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfnP1.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfnP1.setDescription('Max PVCs allowed FRI (nP1) Default value is 1.')
nvFriconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 4, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFriconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvFriconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvFrvcconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 5, 5))
nvFrvcconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfMaxRec.setDescription('total number of records allowed in database file.')
nvFrvcconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfNumRec.setDescription('number of records in use.')
nvFrvcconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3), )
if mibBuilder.loadTexts: nvFrvcconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfTable.setDescription('frvcconf file.')
nvFrvcconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFrvcconfIndex"))
if mibBuilder.loadTexts: nvFrvcconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfEntry.setDescription('frvcconf record.')
nvFrvcconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFrvcconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfIndex.setDescription('Index of frvcconf record')
nvFrvcconfDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfDlci.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfDlci.setDescription('DLCI of this PVC (dlci) ')
nvFrvcconfFri = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfFri.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfFri.setDescription('FRI of this PVC (fri) ')
nvFrvcconfMappedpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfMappedpvc.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfMappedpvc.setDescription('Recnum of Mapped PVC (mappedpvc) ')
nvFrvcconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfEnable.setDescription('Is this PVC enabled? (enable) Default value is yse (1+1).')
nvFrvcconfT = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfT.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfT.setDescription('Rate Monitoring Period (t) ')
nvFrvcconfBc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfBc.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfBc.setDescription('Committed Burst Size (bc) ')
nvFrvcconfBe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfBe.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfBe.setDescription('Excess Burst Size (be) ')
nvFrvcconfN = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfN.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfN.setDescription('Incoming BECN Threshold (n) ')
nvFrvcconfRxbufspac = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfRxbufspac.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfRxbufspac.setDescription('Receive Buffer Space (rxbufspac) Default value is 1.')
nvFrvcconfRxcgthres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfRxcgthres.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfRxcgthres.setDescription('Rcv Congestion Thrshld (rxcgthres) ')
nvFrvcconfRxcgclear = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfRxcgclear.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfRxcgclear.setDescription('Rcv Cong. Clear Thrshld (rxcgclear).')
nvFrvcconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 5, 5, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFrvcconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvFrvcconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvIticstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 1))
nvIticstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatMaxRec.setDescription('total number of records allowed in database file.')
nvIticstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNumRec.setDescription('number of records in use.')
nvIticstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3), )
if mibBuilder.loadTexts: nvIticstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatTable.setDescription('iticstat file.')
nvIticstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticstatIndex"))
if mibBuilder.loadTexts: nvIticstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatEntry.setDescription('iticstat record.')
nvIticstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatIndex.setDescription('Index of iticstat record')
nvIticstatClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatClassname.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatClassname.setDescription('Name of class. This field identifies which class the statistics in this record pertain to.')
nvIticstatNnccs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNnccs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNnccs.setDescription('number of network connection commands. Total number of network originated calls to this class. Statistic is zeroed at startup time.')
nvIticstatNnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNnfails.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNnfails.setDescription('number of network connection failures. Total number of network connection commands that failed. Statistic is zeroed at startup time.')
nvIticstatNpassfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNpassfails.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNpassfails.setDescription('number of password failures. Total number of password failures for this class. Statistic is zeroed at startup time.')
nvIticstatCurcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatCurcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatCurcalls.setDescription('Current number of calls.')
nvIticstatAvgtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatAvgtime.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatAvgtime.setDescription('Average number of seconds per call.')
nvIticstatMaxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatMaxcalls.setDescription('Maximum concurrent calls.')
nvIticstatNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNumcalls.setDescription('Total number of successful modem connctions.')
nvIticstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatDtreset.setDescription('date & time statistics last reset')
nvIticstatTcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatTcalls.setDescription('Total number of hostcalls.')
nvIticstatN300bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN300bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatN300bd.setDescription('300 up to 1200 baud calls received.')
nvIticstatN1200bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN1200bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatN1200bd.setDescription('1200 up to 2400 baud calls received.')
nvIticstatN2400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN2400bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatN2400bd.setDescription('2400 up to 9600 baud calls received.')
nvIticstatN9600bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN9600bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatN9600bd.setDescription('9600 up to 14400 baud calls received.')
nvIticstatN14400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN14400bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatN14400bd.setDescription('14400 up to 28800 baud calls received.')
nvIticstatN28800bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatN28800bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatN28800bd.setDescription('28800 baud calls and above received.')
nvIticstatFailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatFailneg.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatFailneg.setDescription('Calls disconnected during modem negotiation.')
nvIticstatTrmdscdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTrmdscdat.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatTrmdscdat.setDescription('Calls disconnected by terminal during data transfer.')
nvIticstatLoscarsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatLoscarsu.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatLoscarsu.setDescription('Calls disconnected during setup phase.')
nvIticstatLoscarcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatLoscarcip.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatLoscarcip.setDescription('Calls disconnected during connection phase.')
nvIticstatLoscardat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatLoscardat.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatLoscardat.setDescription('Calls disconnected during data transfer.')
nvIticstatTrmdscsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTrmdscsu.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatTrmdscsu.setDescription('Calls disconnected by terminal during setup.')
nvIticstatTrmdsccip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatTrmdsccip.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatTrmdsccip.setDescription('Calls disconnected by terminal during modem negotiation.')
nvIticstatNcurIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNcurIncom.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNcurIncom.setDescription('Number of Current Incoming Calls.')
nvIticstatNcurOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNcurOutgo.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNcurOutgo.setDescription('Number of Current Outgoing Calls.')
nvIticstatMaxIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxIncom.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatMaxIncom.setDescription('Maximum number of Incoming Calls.')
nvIticstatMaxOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatMaxOutgo.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatMaxOutgo.setDescription('Maximum number of Outgoing Calls.')
nvIticstatNumIncom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumIncom.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNumIncom.setDescription('Number of Successful Incoming Calls.')
nvIticstatNumOutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNumOutgo.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNumOutgo.setDescription('Number of Successful Outgoing Calls.')
nvIticstatNncr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticstatNncr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticstatNncr.setDescription('number of network connection commands. Count of virtual circuits initiated from ITI port.')
nvItipstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 2))
nvItipstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatMaxRec.setDescription('total number of records allowed in database file.')
nvItipstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNumRec.setDescription('number of records in use.')
nvItipstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3), )
if mibBuilder.loadTexts: nvItipstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatTable.setDescription('itipstat file.')
nvItipstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItipstatIndex"))
if mibBuilder.loadTexts: nvItipstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatEntry.setDescription('itipstat record.')
nvItipstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatIndex.setDescription('Index of itipstat')
nvItipstatPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPortname.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatPortname.setDescription('Name of port. This field identifies which port the statistics in this record pertain to.')
nvItipstatReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatReserve1.setStatus('obsolete')
if mibBuilder.loadTexts: nvItipstatReserve1.setDescription('OBSOLETE - removed field.')
nvItipstatAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatAcct.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatAcct.setDescription('accounting id.')
nvItipstatClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatClassname.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatClassname.setDescription('iti class: Current user class using this port. NOTE: Order of the following fields corresponds to subset of NSCC structure. The code uses block copies for these fields and assumes the above condition is always true.')
nvItipstatSrcadr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatSrcadr.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatSrcadr.setDescription('source address: Source network address.')
nvItipstatDstadr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatDstadr.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatDstadr.setDescription('destination address: Destination network address.')
nvItipstatTxPsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("pktUndefined", 1), ("pkt16", 5), ("pkt32", 6), ("pkt64", 7), ("pkt128", 8), ("pkt256", 9), ("pkt512", 10), ("pkt1024", 11), ("pkt2048", 12), ("pkt4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatTxPsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatTxPsze.setDescription('packet size: Transmit Packet size used. ')
nvItipstatRxPsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("pktUndefined", 1), ("pkt16", 5), ("pkt32", 6), ("pkt64", 7), ("pkt128", 8), ("pkt256", 9), ("pkt512", 10), ("pkt1024", 11), ("pkt2048", 12), ("pkt4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRxPsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatRxPsze.setDescription('packet size: Receive Packet size used. ')
nvItipstatTxWsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatTxWsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatTxWsze.setDescription('window size: transmit Window size used.')
nvItipstatRxWsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRxWsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatRxWsze.setDescription('window size: receive Window size used.')
nvItipstatTxTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tcUndefined", 1), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatTxTput.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatTxTput.setDescription('throughput class: transmit Throughput class used. ')
nvItipstatRxTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("tcUndefined", 1), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRxTput.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatRxTput.setDescription('throughput class: receive Throughput class used. ')
nvItipstatCugtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCug", 1), ("cug", 2), ("cugWithOutgoingAccess", 3), ("bilateralCug", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatCugtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatCugtype.setDescription('cug type: Type of closed user group call.')
nvItipstatCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatCug.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatCug.setDescription('cug: Closed group identifier. Valid only if previous flag is true.')
nvItipstatRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRpoa.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatRpoa.setDescription('rpoa: DNIC')
nvItipstatRevf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notapp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatRevf.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatRevf.setDescription('reverse charging: Flag indicating if reverse charging is being used.')
nvItipstatPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notapp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPrio.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatPrio.setDescription('priority call: Flag indicating if priority calling is beng used.')
nvItipstatFast = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noFastSelect", 1), ("fastSelect", 2), ("fastSelectRestricted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatFast.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatFast.setDescription('fast select: Type of fast select.')
nvItipstatPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPvc.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatPvc.setDescription('pvc code: Permanent Virtual Circuit Code.')
nvItipstatNdcode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNdcode.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNdcode.setDescription('network disconnect code. Value of the last network disconnnect code.')
nvItipstatNddiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNddiag.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNddiag.setDescription('network diag code: Value of the last network diagnostic code.')
nvItipstatNdorigin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNdorigin.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNdorigin.setDescription('disconnect origin: Whether disconnect was local or remote directive.')
nvItipstatNrcode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrcode.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNrcode.setDescription('network reset code: Value of the last network reset code.')
nvItipstatNrdiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrdiag.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNrdiag.setDescription('network reset diag: Value of the last network reset diagnostic code.')
nvItipstatOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notapp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatOrg.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatOrg.setDescription('call originator. Flag indicating who originated the call in progress.')
nvItipstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("idle", 2), ("awaitingCommand", 3), ("awaitingSelection", 4), ("awaitingUserid", 5), ("awaitingPassword", 6), ("dataTransfer", 8), ("invitationToClear", 9), ("padCommandAfterEscape", 10), ("padCommand", 11), ("awaitingTerminalConnectResponse", 12), ("awaitingFastSelectUserData", 13), ("loopback", 14), ("awaitingDiscBeforeCallBack", 15), ("awaitingCallBack", 16), ("awaitingDialoutUserInput", 17), ("unused2", 18), ("unused3", 19), ("unused4", 20), ("unused5", 21), ("loginServicesControlMode", 22), ("callReselection", 23), ("scanLoginString", 24), ("waitOutputDoneBeforeIdel", 25), ("dlspcWaitCallClearFromDUI", 26), ("escFromConnInProgress", 27), ("waitRadiusResponseToMsg", 28), ("waitUserInputForRadChallenge", 29), ("connectingWaitForModemTrain", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatState.setDescription('iti internal state: Internal state of the ITI interface.')
nvItipstatUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatUserdata.setDescription('user data: User specified user data.')
nvItipstatUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatUsername.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatUsername.setDescription('iti class: Current user using this port.')
nvItipstatX28type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("undefined", 1), ("pci", 2), ("ccitt1976", 3), ("ccitt1980", 4), ("ccitt1984", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatX28type.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatX28type.setDescription('command standard.')
nvItipstatX3type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("undefined", 1), ("pci", 2), ("ccitt1976", 3), ("ccitt1980", 4), ("ccitt1984", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatX3type.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatX3type.setDescription('parameter standard: Current X.3 parameter standard being used.')
nvItipstatReservet = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatReservet.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatReservet.setDescription('OBSOLETE - removed field.')
nvItipstatNtccs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtccs.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNtccs.setDescription('number of term connection commands. Count of service requests received from the terminal. Statistic is zeroed at startup time.')
nvItipstatNnccs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNnccs.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNnccs.setDescription('number of network connection cmds. Count of service requests received from the network. Statistic is zeroed at startup time.')
nvItipstatNnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNnfails.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNnfails.setDescription('number of network connection fails. Count of network call failures. Statistic is zeroed at startup time.')
nvItipstatNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNtxpaks.setDescription('number of transmitted packets (to network). Number of packets sent on the network. Statistic is zeroed at startup time.')
nvItipstatNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNrxpaks.setDescription('number of received packets (from network). Number of packets received from the network. Statistic is zeroed at startup time.')
nvItipstatNtxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtxresets.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNtxresets.setDescription('number of transmitted resets. Number of resets originated. Statistic is zeroed at startup time.')
nvItipstatNrxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNrxresets.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNrxresets.setDescription('number of received resets. Number of resets received from network. Statistic is zeroed at startup time.')
nvItipstatNctxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNctxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNctxpaks.setDescription('number of current transmitted packets (to network). Number of packets send over the network during current terminal session. Statistic is zeroed at startup time.')
nvItipstatNcrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNcrxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNcrxpaks.setDescription('number of current received packets (from network). Number of packets received from the network during current terminal session. Statistic is zeroed at startup time.')
nvItipstatNctxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNctxresets.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNctxresets.setDescription('number of current transmitted resets. Number of resets originated during current terminal session. Statistic is zeroed at startup time.')
nvItipstatNcrxresets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNcrxresets.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNcrxresets.setDescription('number of current received resets. Number of resets received during current terminal session. Statistic is zeroed at startup time.')
nvItipstatNinputs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNinputs.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNinputs.setDescription('number of input characters. Statistic is zeroed at startup time.')
nvItipstatNoutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNoutputs.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNoutputs.setDescription('number of output characters. Statistic is zeroed at startup time.')
nvItipstatParam = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatParam.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatParam.setDescription('Copy of the current settings of the X.3 parameters (EX standard) for this port. This byte array must contain at least P_MAX + 1 bytes. ')
nvItipstatPreparam = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 140))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatPreparam.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatPreparam.setDescription(' Copy of X.3 parameters that were in effect before the current call (if any) was made. These values are restored (back to param) after the call is cleared. ')
nvItipstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatDtreset.setDescription('date & time statistics last reset')
nvItipstatId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatId.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatId.setDescription('Address of ITI control block.')
nvItipstatNtconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtconn.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNtconn.setDescription('Number of terminal connections. Number of times modem successfully trained.')
nvItipstatNtdc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtdc.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNtdc.setDescription('Number of terminal disconnect commands. Number of time terminal disconnected.')
nvItipstatNncr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNncr.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNncr.setDescription('Number of network connection responses. Count of virtual circuits initiated from ITI port.')
nvItipstatNtimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 2, 3, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItipstatNtimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nvItipstatNtimeout.setDescription('Number of disconnects caused by ITI timeout.')
nvItiustat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 5))
nvItiustatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatMaxRec.setDescription('total number of records allowed in database file.')
nvItiustatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatNumRec.setDescription('number of records in use.')
nvItiustatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3), )
if mibBuilder.loadTexts: nvItiustatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatTable.setDescription('itiustat file.')
nvItiustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiustatIndex"))
if mibBuilder.loadTexts: nvItiustatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatEntry.setDescription('itiustat record.')
nvItiustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatIndex.setDescription('Index of itiustat record')
nvItiustatUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatUsername.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatUsername.setDescription('Name of user. This field identifies which user the statistics in this record pertain to.')
nvItiustatNcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatNcalls.setDescription('number of calls made. Total number of calls initiated by user Statistic is zeroed at startup time.')
nvItiustatNpassfails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNpassfails.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatNpassfails.setDescription('number of password failures. Total number of password failures. Statistic is zeroed at startup time.')
nvItiustatNcallbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNcallbacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatNcallbacks.setDescription('number of callbacks. Total number of callbacks to this user. Statistic is zeroed at startup time.')
nvItiustatDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatDuration.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatDuration.setDescription('length of time used by user. Total number of minutes of time (*100*60). Statistic is zeroed at startup time.')
nvItiustatNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNtxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatNtxpaks.setDescription('number of transmitted packets (to network). Total number packets sent by this user over the network. Statistic is zeroed at startup time.')
nvItiustatNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatNrxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatNrxpaks.setDescription('number of received packets (from network). Total number packets received by this user over the network. Statistic is zeroed at startup time.')
nvItiustatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiustatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiustatDtreset.setDescription('date & time statistics last reset')
nvDlspcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 6))
nvDlspcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcstatMaxRec.setDescription('total number of records allowed in database file.')
nvDlspcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcstatNumRec.setDescription('number of records in use.')
nvDlspcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3), )
if mibBuilder.loadTexts: nvDlspcstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcstatTable.setDescription('dlspcstat file.')
nvDlspcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlspcstatIndex"))
if mibBuilder.loadTexts: nvDlspcstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcstatEntry.setDescription('dlspcstat record.')
nvDlspcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcstatIndex.setDescription('Number of dial records.')
nvDlspcstatNports = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatNports.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcstatNports.setDescription('Number of dial ports.')
nvDlspcstatNidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcstatNidle.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcstatNidle.setDescription('Number of idle dial ports.')
nvDuistat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 7))
nvDuistatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatMaxRec.setDescription('total number of records allowed in database file.')
nvDuistatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNumRec.setDescription('number of records in use.')
nvDuistatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3), )
if mibBuilder.loadTexts: nvDuistatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatTable.setDescription('duistat file statistics.')
nvDuistatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDuistatIndex"))
if mibBuilder.loadTexts: nvDuistatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatEntry.setDescription('Duistat record.')
nvDuistatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatIndex.setDescription('index')
nvDuistatType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatType.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatType.setDescription('Type of DUI Circuit.')
nvDuistatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNua.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNua.setDescription('Last address used.')
nvDuistatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("calling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatState.setDescription('State of DUI Circuit.')
nvDuistatLink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLink.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatLink.setDescription('Link carrying virual circuit.')
nvDuistatLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLcn.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatLcn.setDescription('LCN of virual circuit.')
nvDuistatLastcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLastcause.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatLastcause.setDescription('Last clear cause code.')
nvDuistatLastdiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatLastdiag.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatLastdiag.setDescription('Last clear diagnostic.')
nvDuistatNmnxtcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNmnxtcall.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNmnxtcall.setDescription('Number of minutes until next call.')
nvDuistatNretries = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNretries.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNretries.setDescription('Number of retries.')
nvDuistatNrejects = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNrejects.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNrejects.setDescription('Number of rejects.')
nvDuistatNaccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNaccepts.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNaccepts.setDescription('Number of accepts.')
nvDuistatNinvmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNinvmsgs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNinvmsgs.setDescription('Number of invalid DUI messages received.')
nvDuistatNunxmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatNunxmsgs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatNunxmsgs.setDescription('Number of unexpected DUI messages received.')
nvDuistatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 7, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuistatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuistatDtreset.setDescription('date & time statistics last reset')
nvItiport = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 16))
nvItiportMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportMaxRec.setDescription('total number of records allowed in database file.')
nvItiportNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportNumRec.setDescription('number of records in use.')
nvItiportTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3), )
if mibBuilder.loadTexts: nvItiportTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportTable.setDescription('itiport file.')
nvItiportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiportIndex"))
if mibBuilder.loadTexts: nvItiportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportEntry.setDescription('itiport record.')
nvItiportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportIndex.setDescription('Index of itiport file.')
nvItiportName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiportName.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportName.setDescription('Name of ITI instance.')
nvItiportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportEnable.setDescription('ndicates whether port is enabled.')
nvItiportIticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportIticlass.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportIticlass.setDescription('Class of Service associated with ITI port.')
nvItiportRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportRsrcpool.setDescription('Name of Resource Pool.')
nvItiportPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportPortname.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportPortname.setDescription('Name of physical port or Device Usage Group.')
nvItiportTimer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportTimer1.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportTimer1.setDescription('TID timeout.')
nvItiportMinbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 20000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportMinbspace.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportMinbspace.setDescription('Modem Train timer.')
nvItiportMaxbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportMaxbspace.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportMaxbspace.setDescription('Maximum preallocated buffer space.')
nvItiportFclevel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportFclevel.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportFclevel.setDescription('Buffer space left which causes flow control.')
nvItiportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("m8N1", 1), ("m7E1", 2), ("m7O1", 3), ("m7M1", 4), ("m7S1", 5), ("m8G1", 7), ("mAP1", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportMode.setDescription('Port mode')
nvItiportTimer0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportTimer0.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportTimer0.setDescription('TID timeout.')
nvItiportTimer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 16, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiportTimer2.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiportTimer2.setDescription('TID timeout.')
nvDportstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 8))
nvDportstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatMaxRec.setDescription('total number of records allowed in database file.')
nvDportstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatNumRec.setDescription('number of records in use.')
nvDportstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3), )
if mibBuilder.loadTexts: nvDportstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatTable.setDescription('Dportstat file statistics.')
nvDportstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDportstatIndex"))
if mibBuilder.loadTexts: nvDportstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatEntry.setDescription('Dportstat record.')
nvDportstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatIndex.setDescription('a. index')
nvDportstatPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatPortname.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatPortname.setDescription('Port name')
nvDportstatSetstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("online", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatSetstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatSetstate.setDescription('State the port was last set to')
nvDportstatIntfstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("busied", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatIntfstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatIntfstate.setDescription('Physical port state')
nvDportstatChstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("connectedDuiHost", 2), ("connectingUserSelectedHost", 3), ("escapedFromConnectionInProgress", 4), ("connectedUserSelectedHost", 5), ("escapedDataState", 6), ("portDisabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatChstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatChstate.setDescription('Channel state')
nvDportstatDuihost = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDuihost.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatDuihost.setDescription('Type of DUI host')
nvDportstatDuistatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDuistatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatDuistatus.setDescription('Status of DUI port')
nvDportstatPorttype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("publicSwitched", 2), ("directConnect", 3), ("passwordProtectedDirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatPorttype.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatPorttype.setDescription('Type of port')
nvDportstatCli = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatCli.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatCli.setDescription('Calling line identifier')
nvDportstatResetdate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatResetdate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatResetdate.setDescription('Date when statistics were last reset')
nvDportstatUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatUptime.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatUptime.setDescription('Number of minutes port active')
nvDportstatDowntime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDowntime.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatDowntime.setDescription('Number of minutes port idle')
nvDportstatSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatSessions.setDescription('Number of sessions')
nvDportstatIncalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatIncalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatIncalls.setDescription('Number of incoming calls')
nvDportstatOutcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatOutcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatOutcalls.setDescription('Number of outgoing calls')
nvDportstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 8, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDportstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvDportstatDtreset.setDescription('date & time statistics last reset')
nvIticlass = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 9))
nvIticlassMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticlassMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassMaxRec.setDescription('total number of records allowed in database file.')
nvIticlassNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticlassNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassNumRec.setDescription('number of records in use.')
nvIticlassTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3), )
if mibBuilder.loadTexts: nvIticlassTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassTable.setDescription('iticlass file.')
nvIticlassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticlassIndex"))
if mibBuilder.loadTexts: nvIticlassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassEntry.setDescription('iticlass record.')
nvIticlassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticlassIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassIndex.setDescription('Index of iticlass record')
nvIticlassClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClassname.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassClassname.setDescription("Class Name (classname) This field contains a user's name. If a default user id is not specified in the PORT record, ITI will ask the user to enter a User Name. The entered value is matched against the records in this file. ")
nvIticlassAcctsigl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 2), ("demand", 3), ("on", 4), ("dmand1", 5), ("on1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassAcctsigl.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassAcctsigl.setDescription('Accounting Service Signal (acctsigl) Default value is 2+1.')
nvIticlassActonloss = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("ignore", 2), ("clear", 3), ("reset", 4), ("discon", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassActonloss.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassActonloss.setDescription('Action on Data Loss (actonloss) Default value is 1+1.')
nvIticlassBannerid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassBannerid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassBannerid.setDescription('Connect Banner Identification (bannerid) This parameter indicates the herald message that is to be send to the port upon activation. This value is an index into string storage. Default value is 0.')
nvIticlassBreaksgnl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassBreaksgnl.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassBreaksgnl.setDescription('BREAK Character Signal Id (breaksgnl) ')
nvIticlassCalmethod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("norm", 2), ("abrv", 3), ("direct", 4), ("pvc", 5), ("teleneta", 6), ("special", 7), ("telenb", 8), ("telenc", 9), ("login", 10), ("pad", 11), ("telkom", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCalmethod.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassCalmethod.setDescription('Allowed Calling Method (calmethod) Parameter to control the restriction of outgoing call methods. Default value is 1+1.')
nvIticlassClasmsgid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClasmsgid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassClasmsgid.setDescription("Class Info Message Id (clasmsgid) This parameter controls the facility that is used to send a greeting message to users successfully connecting to the PAD. A terminal port will send the message to the terminal while a host port will send it across the virtual call to the user. The value is an index into string storage. If the specified string contains the two consecutive characters '%s' then the first occurance of those two characters will be replaced by a string naming the port. This may be usefull when a user wishes to know exactly what the remote destination port is when the destination port is a member of a hunt group. Default value is 0.")
nvIticlassClaspaswd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClaspaswd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassClaspaswd.setDescription("Class Password (claspaswd) This field contains the password associated with this user. When a userid and password are prompted for then the values supplied by the user must match the USERNAME and PASSWORD fields of one of the records in the nvIticlass file. If no match is made then access is denied. If this field is NULL then only the user's name is required and the supplied password is not checked. ")
nvIticlassCmdtimout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCmdtimout.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassCmdtimout.setDescription('X.28 Command Timeout (cmdtimout) Timeout value (in seconds) when waiting for user to enter a command. If the value is zero,the command timeout facility is disabled. Default value is 60.')
nvIticlassCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCug.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassCug.setDescription('Closed User Group Identifier (cug) Default value is 0.')
nvIticlassDatacmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDatacmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassDatacmd.setDescription('Data Command (datacmd) Default value is 0.')
nvIticlassDefwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDefwsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassDefwsze.setDescription('Default Window Size (defwsze) This field specifies the window size to be used when transmitting packets. It is the maximum number packets that can be transmitted before an acknowledgement is received. Default value is 2.')
nvIticlassDefpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDefpsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassDefpsze.setDescription('Default Packet Size (defpsze) This field specifies which packet size to use when packetizing data to be sent accross a virtual circuit. Default value is 7+1.')
nvIticlassDevtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("term", 2), ("host", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDevtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassDevtype.setDescription('Device Type (devtype) This field is used to control ITI actions depending upon whether the port is connected to a host or terminal. For example,a terminal interface will recognize Break,while a host interface may have to generate one. Default value is 1+1.')
nvIticlassExitcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassExitcmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassExitcmd.setDescription('Exit Command (exitcmd) Default value is 0.')
nvIticlassFastsel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 2), ("inallow", 3), ("outallow", 4), ("allowed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassFastsel.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassFastsel.setDescription('Fast Select Calling (fastsel) This field determines whether fast select calls may be placed or received Default value is 4+1.')
nvIticlassIchrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("iall", 2), ("inorm", 3), ("irev", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassIchrg.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassIchrg.setDescription('Incoming Charging Restriction (ichrg) This field controls the incoming charging options allowed for this session. Normally used on a host interface. Default value is 1+1.')
nvIticlassInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInactivty.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassInactivty.setDescription('Data Mode Inactivity Timeout (inactivty) Timeout value (in minutes) when waiting for data transfer after call has been connected. If set to zero then no timeout occurs. Default value is 0.')
nvIticlassIncbar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("inbar", 2), ("inallow", 3), ("inx28", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassIncbar.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassIncbar.setDescription('Incoming Call Restriction (incbar) This field is used to bar specified incoming calls. Normally used on a host interface. Default value is 2+1.')
nvIticlassInitcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInitcmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassInitcmd.setDescription('Initial Automatic Command Id (initcmd) Default value is 0.')
nvIticlassMaskstrng = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassMaskstrng.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassMaskstrng.setDescription('string containing echo mask sequence Default value is 0. string MUST be defined BEFORE it can be referenced in this field.')
nvIticlassMaxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassMaxpsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassMaxpsze.setDescription('Maximum Packet Size (maxpsze) This field specifies which packet size to use when packetizing data to be sent accross a virtual circuit. Default value is 7+1.')
nvIticlassMaxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassMaxwsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassMaxwsze.setDescription('Maximum Window Size (maxwsze) This field specifies the window size to be used when transmitting packets. It is the maximum number packets that can be transmitted before an acknowledgement is received. Default value is 2.')
nvIticlassOchrg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("oall", 2), ("onorm", 3), ("orev", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassOchrg.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassOchrg.setDescription('Outgoing Charging Restriction (ochrg) This field controls the outgoing charging options permitted during this session. Normally used on a terminal interface. Default value is 1+1.')
nvIticlassOutbar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("outone", 2), ("outbar", 3), ("outallow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassOutbar.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassOutbar.setDescription('Outgoing Call Restriction (outbar) This field is used to bar specified outgoing calls. Normally used on a terminal interface. Default value is 3+1.')
nvIticlassPrefixid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassPrefixid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassPrefixid.setDescription('Service Signal Prefix Id (prefixid) This parameter indicates the prefix string that is prefixed to all replies from ITI. This value is an index into string storage. Default value is 0.')
nvIticlassProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassProfile.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassProfile.setDescription('Initial X.3 Parameter Profile (profile) This field specifies which X.3 parameter profile is to be used for the session. The terminal parameter table is initialized with the specified values. Users are free to change their own parameters. Whenever a session is terminated,via a timeout,a broken connection or a cleared call,the X.3 profile is reloaded for the user when the Network Processor is next accessed. This facility is used by both terminal and host interfaces to set up initial parameters. This field is an index into the ITIPROF file. ')
nvIticlassPromptid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassPromptid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassPromptid.setDescription('X.28 Prompt Identification (promptid) This parameter indicates the prompt to be used to solicit a user response. This value is an index into string storage. Default value is 0.')
nvIticlassPvcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassPvcid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassPvcid.setDescription('PVC Identifier (pvcid) This field is used to select a network provided permanent virtual circuit for the session. ')
nvIticlassRejectid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassRejectid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassRejectid.setDescription('Reject Service Message Id (rejectid) This field controls the facility that is used to send a service refusal message to the user and to disconnect the call. An example of use would be on a host pad when the host is down. A terminal port will send the message to the terminal and clear the physical connection. A host port will send the message across the virtual call to the user, and follow it by an invitation to clear. The value is an index into string storage. Default value is 0.')
nvIticlassRpoacode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassRpoacode.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassRpoacode.setDescription('RPOA Code (rpoacode) Default value is 0.')
nvIticlassRpoatype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("none", 2), ("file", 3), ("restrict", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassRpoatype.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassRpoatype.setDescription('RPOA Type (rpoatype) Default value is 2+1.')
nvIticlassSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 2), ("class", 3), ("user", 4), ("callback", 5), ("nui", 6), ("radius", 7), ("usrnui", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassSecurity.setDescription('Access Method (security) Default value is 1+1.')
nvIticlassTermtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 2), ("apacs", 3), ("cdapacs", 4), ("cdx28", 5), ("epapacs", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassTermtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassTermtype.setDescription('Terminal Type (termtype) Default value is 1+1.')
nvIticlassX28type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("pci", 2), ("c76", 3), ("c80", 4), ("c84", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassX28type.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassX28type.setDescription('X.28 Command Set (x28type) Default value is 1+1.')
nvIticlassX3type = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("pci", 2), ("ccitt1976", 3), ("ccitt1980", 4), ("ccitt1984", 5), ("telenet", 6), ("datapac", 7), ("micom", 8), ("dynapac", 9), ("telepac", 10), ("amdahl", 11), ("telematics", 12), ("hughes", 13), ("otc", 14), ("consat", 15), ("dlspc", 16), ("pos", 17), ("dcall", 18), ("pacnet", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassX3type.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassX3type.setDescription("X.3 Parameter Profile Type (x3type) Many implementations of X.3 may be found in today's public data networks. A parameter on one network may mean something different on another one. Or the allowable values may be different. This field selects which parameter standard is to be used in the X.28 (user interface) and X.29 (remote computer) interfaces. It is important that a user know and conform to the parameter standard being used by a remote PAD. Otherwise commands sent from the remote PAD to set local parameters may not be interpreted properly. Default value is 1+1.")
nvIticlassXoffin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXoffin.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassXoffin.setDescription('Input XOFF Character (xoffin) Second user selectable XOFF charcter. This character functions in an input only capacity and is not output by the PAD as an XOFF chaacter. Default value is 19.')
nvIticlassXoffout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXoffout.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassXoffout.setDescription('Output XOFF Character (xoffout) User selectable XOFF character. Default value is 19.')
nvIticlassXonin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXonin.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassXonin.setDescription('Input XON Character (xonin) Second user selectable XON charcter. This character functions in an input only capacity and is not output by the PAD as an XON character. Default value is 17.')
nvIticlassXonout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassXonout.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassXonout.setDescription('Output XON Character (xonout) User selectable XON character. Default value is 17.')
nvIticlassTidprompt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassTidprompt.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassTidprompt.setDescription('')
nvIticlassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvIticlassEscchar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassEscchar.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassEscchar.setDescription('escape character use default is 0.')
nvIticlassInvclrcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInvclrcmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassInvclrcmd.setDescription('clear Command (initcmd) Default value is 0.')
nvIticlassX29mskstr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassX29mskstr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassX29mskstr.setDescription('')
nvIticlassDroptimer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDroptimer.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassDroptimer.setDescription(' length of time before disconnecting a call default 0')
nvIticlassClasmode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 16))).clone(namedValues=NamedValues(("m8N1", 1), ("m7E1", 2), ("m7O1", 3), ("m7M1", 4), ("m7S1", 5), ("m8G1", 7), ("mAP1", 8), ("unused", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassClasmode.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassClasmode.setDescription('Padding.')
nvIticlassDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassDialout.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassDialout.setDescription(' dial-out string')
nvIticlassCallingid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("none", 2), ("userdata", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassCallingid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassCallingid.setDescription('What to do with call id.')
nvIticlassAcctng = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noacct", 1), ("usage", 2), ("billng", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassAcctng.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassAcctng.setDescription('Accounting')
nvIticlassInvclrtim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassInvclrtim.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassInvclrtim.setDescription('Timeout for Invitation to Clear')
nvIticlassComfac = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 9, 3, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lcfac", 1), ("ucfac", 2), ("lcnofac", 3), ("ucnofac", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticlassComfac.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticlassComfac.setDescription('Lower or Upper case service signals. lcfac = lower case with fac ucfac = upper case with fac lcnofac = lower case with no fac ucnofac = upper case no fac.')
nvIticmd = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 10))
nvIticmdMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticmdMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdMaxRec.setDescription('total number of records allowed in database file.')
nvIticmdNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticmdNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdNumRec.setDescription('number of records in use.')
nvIticmdTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3), )
if mibBuilder.loadTexts: nvIticmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdTable.setDescription('iticmd file.')
nvIticmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticmdIndex"))
if mibBuilder.loadTexts: nvIticmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdEntry.setDescription('iticmd record.')
nvIticmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdIndex.setDescription('Index of iticmd record')
nvIticmdCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdCommand.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdCommand.setDescription('Command Mnemonic (command) Command name,this string is entered by the user and is matched against entries in this file. If successful,the matched string is taken as user input and processed. ')
nvIticmdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdClass.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdClass.setDescription('Class of Service (class) Name of class that owns command. ')
nvIticmdStringid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdStringid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdStringid.setDescription('Full Command Name Id (stringid) Index into string storage for replacement value. ')
nvIticmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticmdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticmdStatus.setDescription(' ')
nvIticonf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 11))
nvIticonfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticonfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfMaxRec.setDescription('total number of records allowed in database file.')
nvIticonfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticonfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfNumRec.setDescription('number of records in use.')
nvIticonfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3), )
if mibBuilder.loadTexts: nvIticonfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfTable.setDescription('iticonf file.')
nvIticonfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIticonfIndex"))
if mibBuilder.loadTexts: nvIticonfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfEntry.setDescription('iticonf record.')
nvIticonfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIticonfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfIndex.setDescription('Index of iticonf record')
nvIticonfNumcopy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfNumcopy.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfNumcopy.setDescription('Number of Simultaneous Copies (numcopy) This field specifies how many ITI ports may be copying network data at one time. Default value is 4.')
nvIticonfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfBroadcast.setDescription('Broadcast Message Id (broadcast) This field identifies a string which is to be broadcast to a port following a service request but before security checking. Replacing the nvIticonf record will cause the message to be broadcast to all active iti ports that have service signals enabled. ')
nvIticonfItiswitch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfItiswitch.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfItiswitch.setDescription('ITI Switch (itiswitch) This field will be used to tell NBUS whether outgoing calls can be looped back (ITI to ITI calls allowed) Default value is ysr (1+1).')
nvIticonfPadaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfPadaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfPadaddr.setDescription('PAD Address Field (padaddr) ')
nvIticonfDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfDnic.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfDnic.setDescription('Data Network Identification Code (dnic) DNIC number when calmethod=special in nvIticlass file. ')
nvIticonfConfigstr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfConfigstr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfConfigstr.setDescription('CONSAT facility mapping string.')
nvIticonfValserver = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfValserver.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfValserver.setDescription('address of validation server Default value is 0.')
nvIticonfV120p11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 11, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("k64k", 1), ("urate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIticonfV120p11.setStatus('mandatory')
if mibBuilder.loadTexts: nvIticonfV120p11.setDescription(' 64k 1, p11 for v.120 set for 64000 urate 2, p11 for v.120 from user rate in ISDN')
nvItimap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 12))
nvItimapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItimapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapMaxRec.setDescription('total number of records allowed in database file.')
nvItimapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItimapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapNumRec.setDescription('number of records in use.')
nvItimapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3), )
if mibBuilder.loadTexts: nvItimapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapTable.setDescription('itimap file.')
nvItimapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItimapIndex"))
if mibBuilder.loadTexts: nvItimapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapEntry.setDescription('itimap record.')
nvItimapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItimapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapIndex.setDescription('Index of itimap record')
nvItimapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapNetaddr.setDescription('Network X.121 Address (netaddr) This field contains the pattern against which the incoming network address is matched. ')
nvItimapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapUserdata.setDescription('User Data (userdata) This field contains the pattern against which the associated call user data is matched. ')
nvItimapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapClass.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapClass.setDescription("Class of Port Assignment (class) This field indicates which ITI 'user' is associated with the network address and call user data. If the PORT field in this record is NULL then the actual port is located by processing the itihunt file. ")
nvItimapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItimapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvItimapStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvItiprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 13))
nvItiprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiprofMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofMaxRec.setDescription('total number of records allowed in database file.')
nvItiprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiprofNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofNumRec.setDescription('number of records in use.')
nvItiprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3), )
if mibBuilder.loadTexts: nvItiprofTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofTable.setDescription('itiprof file.')
nvItiprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiprofIndex"))
if mibBuilder.loadTexts: nvItiprofEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofEntry.setDescription('itiprof record.')
nvItiprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiprofIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofIndex.setDescription('Index of itiprof record')
nvItiprofName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofName.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofName.setDescription("Profile Name (name) Name of profile. Used by ITI 'prof' command to locate specified record. ")
nvItiprofP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP1.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP1.setDescription('PAD Recall Character (p1) This parameter indicates whether or not the transmission of a DLE character (ASCII value of 16.) from the terminal to the PAD is recognized as an escape from the data transfer state. If so,transmission of DLE will cause the virtual call to be suspended, allowing the terminal user to send commands to the PAD. (0) = No escape allowed (1) = Escape allowed Default value is 1.')
nvItiprofP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP2.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP2.setDescription('Echo Enable/Disable (p2) This parameter indicates to the PAD whether or not the terminal input data is to be echoed. If so,characters typed in from the terminal keyboard will be transmitted back to the terminal as well as being interpreted by the PAD. Transmission costs can be reduced by having the PAD echo characters rather than having a remote host doing the echoing. (0) = No echo (1) = Echo Default value is 1.')
nvItiprofP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP3.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP3.setDescription('Packet Forwarding Characters (p3) This parameter indicates to the PAD the set of terminal generated characters that will cause data to be forwarded to the destination. When a data forwarding signal is received then all buffered data is assembled into a packet and sent to the destination. (0) = No signals (2) = CR (6) = CR,ESC,BEL,ENQ,ACK (18) = CR,EOT,ETX (126) = all control characters (ASCII values from 1. to 31.) and DEL Default value is 2.')
nvItiprofP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP4.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP4.setDescription('Forwarding Idle Timer (p4) This parameter indicates to the PAD whether data forwarding is to be based on timeouts. If so,then the value of the parameter specifies the time limit imposed on the buffering of data characters. Each received data character will reset the timer until eventually a pause in the character stream will allow the timer to expire and all buffered data will be forwarded. (0) = No timer (1-255) = Indicates the value of the delay in twentieths of a second. Default value is 0.')
nvItiprofP5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP5.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP5.setDescription('Device Flow Control (p5) This parameter indicates whether the terminal will respond to flow control. If so,then this will allow the PAD to stop (by sending an XOFF character) and start (by sending an XON character) transmission from the terminal so that the PAD can pace the terminal. Flow control using modem signals is not supported. (0) = No auxiliary device control (1) = xon/xoff flow control (data transfer) Default value is 1.')
nvItiprofP6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP6.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP6.setDescription('Service Signal Control (p6) This parameter indicates to the PAD whether or not network generated messages are to be transmitted to the terminal. (0) = No messages sent (1) = Send service messages (4) = Send prompts only Default value is 5.')
nvItiprofP7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP7.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP7.setDescription('Device BREAK Action (p7) This parameter is used to indicate how the PAD should process a BREAK signal that is received from the terminal while the terminal is in data transfer state. (0) = Nothing (1) = Send interrupt (2) = Send reset (8) = Escape from data state (21) = Discard output,send interrupt and indication of break Default value is 21.')
nvItiprofP8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP8.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP8.setDescription('Output Discard (p8) This parameter is used in conjunction with Parameter 7. Depending upon the BREAK procedure selected,this parameter may be set by the PAD when the terminal user requests that terminal data be discarded. This parameter must then be reset by the destination to allow normal delivery. The PAD will discard all packets destined for the terminal from the time the PAD sets this parameter (ie. BREAK) and the time the parameter is reset by the destination. This feature can be used,for example,to allow users to terminate lengthy outputs to terminals by pressing BREAK. (0) = Normal delivery (1) = Discard output Default value is 0.')
nvItiprofP9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP9.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP9.setDescription('Carriage Return Padding (p9) This parameter specifies the number of padding characters to be inserted by the PAD following a carriage return transmitted to the terminal. This would allow mechanical actions (such as type-ball returns) to be completed before more data is to be output. (0) = No padding (1-255) = Number of pads to be inserted Default value is 4.')
nvItiprofP10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP10.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP10.setDescription('Line Length (p10) This parameter indicates the maximum number of printable characters that can be displayed on the terminal before the PAD must be sent a format effector (ie. CR LF). This causes data to be output on the next line on the terminal. (0) = No line folding (1-255) = Number of characters per line Default value is 80.')
nvItiprofP11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP11.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP11.setDescription('Transmission Speed (Read Only) (p11) This parameter is set by the PAD as the result of transmission speed detection if the terminal access is an autobaud port. When a port with fixed speed is used,this parameter is set during PAD configuration,based on the pre-configured value. (0) = 110 bps (1) = 134.5 bps (2) = 300 bps (3) = 1200 bps (4) = 600 bps (5) = 75 bps (6) = 150 bps (7) = 1800 bps (8) = 200 bps (9) = 100 bps (10) = 50 bps (11) = 75/1200 (12) = 2400 (13) = 4800 (14) = 9600 ')
nvItiprofP12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP12.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP12.setDescription('PAD Flow Control (p12) This parameter enables the terminal to indicate to the PAD that the terminal cannot receive any more data. When this parameter is set to 1,the terminal user can request that the PAD stop sending data by transmitting a DC3 character. The PAD then suspends transmission of data until a DC1 character is received. This feature allows a display terminal user to indicate when the PAD should suspend the scrolling of terminal output,so that it can be viewed. Then the output can be restarted. (0) = No flow control (1) = Flow control Default value is 1.')
nvItiprofP13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP13.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP13.setDescription('Line Feed Insertion (p13) This parameter specifies when the PAD should insert Linefeed upon receipt of carriage return from the terminal or destination. As the parameter value is bit-encoded,any combination is permissible. (0) = No linefeed insertion (1) = Insert after carriage return to terminal (2) = Insert in data stream after carriage return from terminal (4) = Insert linefeed after echo of carriage return to terminal Default value is 4.')
nvItiprofP14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP14.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP14.setDescription('Line Feed Padding (p14) This parameter provides for the automatic insertion by the PAD of padding characters or time delays after occurrence of a linefeed character. (0) = No padding (1-255) = Padding after linefeed Default value is 0.')
nvItiprofP15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP15.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP15.setDescription('Editing Enable/Disable (p15) This parameter sets character delete,line delete,and line display actions in the data transfer state. Editing is always available in the command state. (0) = No editing (1) = Editing enabled (data state) Default value is 1.')
nvItiprofP16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP16.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP16.setDescription("Character Delete Character (p16) This parameter specifies the ASCII character to be used as a 'character delete' character for local editing by the PAD. (0) = No delete character Default value is 8.")
nvItiprofP17 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP17.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP17.setDescription("Line Delete Character (p17) This parameter specifies the ASCII character to be used as a 'line delete' character for local editing by the PAD. (0) = No line delete Default value is 24.")
nvItiprofP18 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP18.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP18.setDescription("Line Display Character (p18) This parameter specifies the ASCII character to be used as a 'line redisplay' character for local editing by the PAD. (0) = No line redisplay. Default value is 18.")
nvItiprofP19 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP19.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP19.setDescription('Service Signal Editing (p19) (0) = None (1) = Printing terminal edit (2) = CRT terminal editing Default value is 2.')
nvItiprofP20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP20.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP20.setDescription('Echo Mask (p20) This parameter specifies which characters are not echoed to the device (when p2 is set to 1). (0) = No mask (echo all) (1) = No echo CR (2) = No echo LF (4) = No echo VT,HT,FF (8) = No echo BEL,BS (16) = No echo ESC,ENQ (32) = No echo ACK,NAK,STX,SOH,EOT,ETX,ETB (64) = No echo of parameters 16,17,18 (128) = No echo of control characters not named above Default value is 6.')
nvItiprofP21 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP21.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP21.setDescription('Parity Treatment (p21) This parameter specifies whether or not the PAD should detect,check and generate parity. (0) = No parity detection or generation (1) = Parity checking and PAD handles any parity errors (2) = Parity generation,PAD sets the parity bit for each ASCII character. Default value is 3.')
nvItiprofP22 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP22.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP22.setDescription('Page Wait (p22) This parameter specifies the number of lines (line-feeds) that will be sent to the attached device before output is halted. Output is subsequently resumed after an XON character or any packetizing character is received from the device. (0) = No page wait enabled (1-255) = Number of lines output before page wait condition Default value is 23.')
nvItiprofP23 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP23.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP23.setDescription('First Extra Forwarding Character (p23) This parameter allow the definition of an additional data forwarding signal. This signal is in addition to those specified by parameters 3 and 4. (0) = No extra character (1-127) = ASCII code of character Default value is 0.')
nvItiprofP24 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP24.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP24.setDescription('Second Extra Forwarding Character (p24) This parameter allows the definition of an additional data forwarding signal. This signal is in addition to those characters specified by parameter 3 and 4. (0) = No extra character (1-127) = ASCII code of character Default value is 0.')
nvItiprofP25 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP25.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP25.setDescription('Output Pending Timer (p25) This parameter specifies the length of time,if any,that terminal output will be blocked by terminal input. (0) = No output pending timer. That is,output is not blocked by input (such as in half-duplex transmission). (1-255) = Delay in seconds Default value is 1.')
nvItiprofP26 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP26.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP26.setDescription('Interval Timer (p26) Maximum time,in 1/20 seconds,between transmission of packets. Default value is 0.')
nvItiprofP27 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP27.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP27.setDescription('Horizontal Tab Padding (p27) Number of nulls to output after a TAB. Default value is 0.')
nvItiprofP28 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP28.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP28.setDescription('XON Character to PAD (p28) Default value is 0.')
nvItiprofP29 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP29.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP29.setDescription('XOFF Character to PAD (p29) Default value is 0.')
nvItiprofP30 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP30.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP30.setDescription('XON Character to Device (p30) Default value is 0.')
nvItiprofP31 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP31.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP31.setDescription('XOFF Character to Device (p31) Default value is 0.')
nvItiprofP32 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP32.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP32.setDescription('Packet Forward on Character Count (p32) Default value is 0.')
nvItiprofP33 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP33.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP33.setDescription('CONSAT parameter 101 (TAB echo) Default value is 0.')
nvItiprofP34 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP34.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP34.setDescription('CONSAT parameter 102 (TAB expansion) Default value is 0.')
nvItiprofP35 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofP35.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofP35.setDescription('CONSAT parameter 103 (BREAK key) Default value is 0.')
nvItiprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 13, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiprofStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiprofStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvItirpoa = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 14))
nvItirpoaMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItirpoaMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaMaxRec.setDescription('total number of records allowed in database file.')
nvItirpoaNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItirpoaNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaNumRec.setDescription('number of records in use.')
nvItirpoaTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3), )
if mibBuilder.loadTexts: nvItirpoaTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaTable.setDescription('itirpoa file.')
nvItirpoaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItirpoaIndex"))
if mibBuilder.loadTexts: nvItirpoaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaEntry.setDescription('itirpoa record.')
nvItirpoaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItirpoaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaIndex.setDescription('Index of itirpoa record')
nvItirpoaCode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItirpoaCode.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaCode.setDescription('RPOA Code (code) ')
nvItirpoaCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItirpoaCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaCarrier.setDescription('RPOA Name (carrier) ')
nvItirpoaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItirpoaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvItirpoaStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvItiuser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 15))
nvItiuserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiuserMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserMaxRec.setDescription('total number of records allowed in database file.')
nvItiuserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiuserNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserNumRec.setDescription('number of records in use.')
nvItiuserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3), )
if mibBuilder.loadTexts: nvItiuserTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserTable.setDescription('itiprof file.')
nvItiuserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvItiuserIndex"))
if mibBuilder.loadTexts: nvItiuserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserEntry.setDescription('itiuser record.')
nvItiuserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvItiuserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserIndex.setDescription('Index of itiuser record')
nvItiuserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserUsername.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserUsername.setDescription('User Name (username) ')
nvItiuserCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserCallback.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserCallback.setDescription('User Callback Number Id (callback) Default value is 0.')
nvItiuserClrestrct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("ignore", 2), ("select", 3), ("restrict", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserClrestrct.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserClrestrct.setDescription('Class Restriction (clrestrct) Default value is 1+1.')
nvItiuserInitcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserInitcmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserInitcmd.setDescription('Initial Automatic Command Id (initcmd) Default value is 0.')
nvItiuserUserclass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserUserclass.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserUserclass.setDescription('Class Assignment (userclass) ')
nvItiuserUserpaswd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserUserpaswd.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserUserpaswd.setDescription('User Password (userpaswd) ')
nvItiuserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvItiuserNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 15, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvItiuserNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvItiuserNumber.setDescription('Call back number')
nvDuiconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 17))
nvDuiconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfMaxRec.setDescription('total number of records allowed in database file.')
nvDuiconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfNumRec.setDescription('number of records in use.')
nvDuiconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3), )
if mibBuilder.loadTexts: nvDuiconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfTable.setDescription('duiconf file.')
nvDuiconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDuiconfIndex"))
if mibBuilder.loadTexts: nvDuiconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfEntry.setDescription('duiconf record.')
nvDuiconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfIndex.setDescription('index')
nvDuiconfType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDuiconfType.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfType.setDescription('Type of DUI Circuit.')
nvDuiconfNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfNua.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfNua.setDescription('X.121 address of DUI host.')
nvDuiconfCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfCalling.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfCalling.setDescription('calling address.')
nvDuiconfFirsttry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfFirsttry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfFirsttry.setDescription('num seconds til first try.')
nvDuiconfRetrytime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfRetrytime.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfRetrytime.setDescription('num seconds for retry.')
nvDuiconfRetryinc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfRetryinc.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfRetryinc.setDescription('retry time increment (in seconds).')
nvDuiconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 17, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDuiconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvDuiconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvDlspcconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 6, 18))
nvDlspcconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfMaxRec.setDescription('total number of records allowed in database file.')
nvDlspcconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfNumRec.setDescription('number of records in use.')
nvDlspcconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3), )
if mibBuilder.loadTexts: nvDlspcconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfTable.setDescription('dlspcconf file.')
nvDlspcconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlspcconfIndex"))
if mibBuilder.loadTexts: nvDlspcconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfEntry.setDescription('dlspcconf record.')
nvDlspcconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlspcconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfIndex.setDescription('Dlspcconf file record number.')
nvDlspcconfNodename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfNodename.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfNodename.setDescription('name of node.')
nvDlspcconfSitename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfSitename.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfSitename.setDescription('name of site.')
nvDlspcconfHelpphone = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfHelpphone.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfHelpphone.setDescription('phone number part of help message.')
nvDlspcconfAbortmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfAbortmsg.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfAbortmsg.setDescription('message if session cannot be resumed.')
nvDlspcconfPidtable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfPidtable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfPidtable.setDescription('to map X.3 P11 into protocol id.')
nvDlspcconfPortalarm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfPortalarm.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfPortalarm.setDescription('number of idle ports to cause alarm.')
nvDlspcconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 6, 18, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlspcconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlspcconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvDlstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 1))
nvDlstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatMaxRec.setDescription('total number of records allowed in database file.')
nvDlstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatNumRec.setDescription('number of records in use.')
nvDlstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3), )
if mibBuilder.loadTexts: nvDlstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatTable.setDescription('dlstat file.')
nvDlstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlstatIndex"))
if mibBuilder.loadTexts: nvDlstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatEntry.setDescription('dlstat record.')
nvDlstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatIndex.setDescription('Index of dlstat')
nvDlstatLinkname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429))).clone(namedValues=NamedValues(("nolink", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("link4", 5), ("link5", 6), ("link6", 7), ("link7", 8), ("link8", 9), ("link9", 10), ("link10", 11), ("link11", 12), ("link12", 13), ("link13", 14), ("link14", 15), ("link15", 16), ("link16", 17), ("link17", 18), ("link18", 19), ("link19", 20), ("link20", 21), ("link21", 22), ("link22", 23), ("link23", 24), ("link24", 25), ("link25", 26), ("link26", 27), ("link27", 28), ("link28", 29), ("link29", 30), ("link30", 31), ("link31", 32), ("link32", 33), ("link33", 34), ("link34", 35), ("link35", 36), ("link36", 37), ("link37", 38), ("link38", 39), ("link39", 40), ("link40", 41), ("link41", 42), ("link42", 43), ("link43", 44), ("link44", 45), ("link45", 46), ("link46", 47), ("link47", 48), ("link48", 49), ("link49", 50), ("link50", 51), ("link51", 52), ("link52", 53), ("link53", 54), ("link54", 55), ("link55", 56), ("link56", 57), ("link57", 58), ("link58", 59), ("link59", 60), ("link60", 61), ("link61", 62), ("link62", 63), ("link63", 64), ("link64", 65), ("link65", 66), ("link66", 67), ("link67", 68), ("link68", 69), ("link69", 70), ("link70", 71), ("link71", 72), ("link72", 73), ("link73", 74), ("link74", 75), ("link75", 76), ("link76", 77), ("link77", 78), ("link78", 79), ("link79", 80), ("link80", 81), ("link81", 82), ("link82", 83), ("link83", 84), ("link84", 85), ("link85", 86), ("link86", 87), ("link87", 88), ("link88", 89), ("link89", 90), ("link90", 91), ("link91", 92), ("link92", 93), ("link93", 94), ("link94", 95), ("link95", 96), ("link96", 97), ("link97", 98), ("link98", 99), ("link99", 100), ("link100", 101), ("link101", 102), ("link102", 103), ("link103", 104), ("link104", 105), ("link105", 106), ("link106", 107), ("link107", 108), ("link108", 109), ("link109", 110), ("link110", 111), ("link111", 112), ("link112", 113), ("link113", 114), ("link114", 115), ("link115", 116), ("link116", 117), ("link117", 118), ("link118", 119), ("link119", 120), ("link120", 121), ("link121", 122), ("link122", 123), ("link123", 124), ("link124", 125), ("link125", 126), ("link126", 127), ("link127", 128), ("link128", 129), ("link129", 130), ("link130", 131), ("link131", 132), ("link132", 133), ("link133", 134), ("link134", 135), ("link135", 136), ("link136", 137), ("link137", 138), ("link138", 139), ("link139", 140), ("link140", 141), ("link141", 142), ("link142", 143), ("link143", 144), ("link144", 145), ("link145", 146), ("link146", 147), ("link147", 148), ("link148", 149), ("link149", 150), ("link150", 151), ("link151", 152), ("link152", 153), ("link153", 154), ("link154", 155), ("link155", 156), ("link156", 157), ("link157", 158), ("link158", 159), ("link159", 160), ("link160", 161), ("link161", 162), ("link162", 163), ("link163", 164), ("link164", 165), ("link165", 166), ("link166", 167), ("link167", 168), ("link168", 169), ("link169", 170), ("link170", 171), ("link171", 172), ("link172", 173), ("link173", 174), ("link174", 175), ("link175", 176), ("link176", 177), ("link177", 178), ("link178", 179), ("link179", 180), ("link180", 181), ("link181", 182), ("link182", 183), ("link183", 184), ("link184", 185), ("link185", 186), ("link186", 187), ("link187", 188), ("link188", 189), ("link189", 190), ("link190", 191), ("link191", 192), ("link192", 193), ("link193", 194), ("link194", 195), ("link195", 196), ("link196", 197), ("link197", 198), ("link198", 199), ("link199", 200), ("link200", 201), ("link201", 202), ("link202", 203), ("link203", 204), ("link204", 205), ("link205", 206), ("link206", 207), ("link207", 208), ("link208", 209), ("link209", 210), ("link210", 211), ("link211", 212), ("link212", 213), ("link213", 214), ("link214", 215), ("link215", 216), ("link216", 217), ("link217", 218), ("link218", 219), ("link219", 220), ("link220", 221), ("link221", 222), ("link222", 223), ("link223", 224), ("link224", 225), ("link225", 226), ("link226", 227), ("link227", 228), ("link228", 229), ("link229", 230), ("link230", 231), ("link231", 232), ("link232", 233), ("link233", 234), ("link234", 235), ("link235", 236), ("link236", 237), ("link237", 238), ("link238", 239), ("link239", 240), ("link240", 241), ("link241", 242), ("link242", 243), ("link243", 244), ("link244", 245), ("link245", 246), ("link246", 247), ("link247", 248), ("link248", 249), ("link249", 250), ("link250", 251), ("link251", 252), ("link252", 253), ("link253", 254), ("link254", 255)) + NamedValues(("link255", 256), ("link256", 257), ("link257", 258), ("link258", 259), ("link259", 260), ("link260", 261), ("link261", 262), ("link262", 263), ("link263", 264), ("link264", 265), ("link265", 266), ("link266", 267), ("link267", 268), ("link268", 269), ("link269", 270), ("link270", 271), ("link271", 272), ("link272", 273), ("link273", 274), ("link274", 275), ("link275", 276), ("link276", 277), ("link277", 278), ("link278", 279), ("link279", 280), ("link280", 281), ("link281", 282), ("link282", 283), ("link283", 284), ("link284", 285), ("link285", 286), ("link286", 287), ("link287", 288), ("link288", 289), ("link289", 290), ("link290", 291), ("link291", 292), ("link292", 293), ("link293", 294), ("link294", 295), ("link295", 296), ("link296", 297), ("link297", 298), ("link298", 299), ("link299", 300), ("link300", 301), ("link301", 302), ("link302", 303), ("link303", 304), ("link304", 305), ("link305", 306), ("link306", 307), ("link307", 308), ("link308", 309), ("link309", 310), ("link310", 311), ("link311", 312), ("link312", 313), ("link313", 314), ("link314", 315), ("link315", 316), ("link316", 317), ("link317", 318), ("link318", 319), ("link319", 320), ("link320", 321), ("link321", 322), ("link322", 323), ("link323", 324), ("link324", 325), ("link325", 326), ("link326", 327), ("link327", 328), ("link328", 329), ("link329", 330), ("link330", 331), ("link331", 332), ("link332", 333), ("link333", 334), ("link334", 335), ("link335", 336), ("link336", 337), ("link337", 338), ("link338", 339), ("link339", 340), ("link340", 341), ("link341", 342), ("link342", 343), ("link343", 344), ("link344", 345), ("link345", 346), ("link346", 347), ("link347", 348), ("link348", 349), ("link349", 350), ("link350", 351), ("link351", 352), ("link352", 353), ("link353", 354), ("link354", 355), ("link355", 356), ("link356", 357), ("link357", 358), ("link358", 359), ("link359", 360), ("link360", 361), ("link361", 362), ("link362", 363), ("link363", 364), ("link364", 365), ("link365", 366), ("link366", 367), ("link367", 368), ("link368", 369), ("link369", 370), ("link370", 371), ("link371", 372), ("link372", 373), ("link373", 374), ("link374", 375), ("link375", 376), ("link376", 377), ("link377", 378), ("link378", 379), ("link379", 380), ("link380", 381), ("link381", 382), ("link382", 383), ("link383", 384), ("link384", 385), ("link385", 386), ("link386", 387), ("link387", 388), ("link388", 389), ("link389", 390), ("link390", 391), ("link391", 392), ("link392", 393), ("link393", 394), ("link394", 395), ("link395", 396), ("link396", 397), ("link397", 398), ("link398", 399), ("link399", 400), ("link400", 401), ("link401", 402), ("link402", 403), ("link403", 404), ("link404", 405), ("link405", 406), ("link406", 407), ("link407", 408), ("link408", 409), ("link409", 410), ("link410", 411), ("link411", 412), ("link412", 413), ("link413", 414), ("link414", 415), ("link415", 416), ("link416", 417), ("link417", 418), ("link418", 419), ("link419", 420), ("link420", 421), ("link421", 422), ("link422", 423), ("link423", 424), ("link424", 425), ("link425", 426), ("link426", 427), ("link427", 428), ("link428", 429)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatLinkname.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatLinkname.setDescription('name of link being used Initial status is 0+1.')
nvDlstatApp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("primarySdlcStation", 3), ("secondarySdlcStation", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatApp.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatApp.setDescription('link appearence Initial status is 0+1.')
nvDlstatLfrmr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 33, 122, 193))).clone(namedValues=NamedValues(("none", 1), ("badNR", 17), ("overrun", 33), ("undefinedControlField", 122), ("badSUFrame", 193)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatLfrmr.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatLfrmr.setDescription('reason code from last FRMR received Initial status is 0+1.')
nvDlstatLreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("none", 1), ("badCommandFrame", 2), ("badResponseFrame", 4), ("receiverOverrun", 5), ("badNR", 9), ("networkDisconnect", 10), ("driverDisconnect", 11), ("unsolicitedFinal", 12), ("frmr", 13), ("unexpectedUA", 14), ("remoteTimeout", 15), ("sabm", 16), ("sarm", 17), ("disc", 18), ("dm", 19), ("snrm", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatLreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatLreset.setDescription('reason for last link reset Initial status is 0+1.')
nvDlstatMstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("startingDriver", 3), ("discSent", 4), ("sabmSent", 5), ("sarmSetup", 6), ("frmrSent", 7), ("sabmReset", 8), ("up", 9), ("clearing", 10), ("dm", 11), ("nu", 12), ("sabmAwaitingRrAFterCr", 13), ("badCmdAwaitingRrToSendFrmr", 14), ("frmrAwaitingRrToEnterRs", 15), ("discAwaitingRrToEnterSs", 16), ("awaitingIdleDriverToSendDn", 17), ("awaitingIdleDriverToResend", 18), ("waitingToSendDisc", 19), ("waitingToSendSnrm", 20), ("disconnectMode", 21), ("waitingToSendXid", 22), ("sentXid", 23), ("multipleSnrm", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatMstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatMstate.setDescription('main state of link Initial status is 0+1.')
nvDlstatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12, 16, 17, 49))).clone(namedValues=NamedValues(("unconfigured", 1), ("lap", 2), ("lapb", 4), ("lapbExtended", 8), ("austrianPTT", 12), ("pss", 16), ("sdlc", 17), ("sdlcExtended", 49)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatProtocol.setDescription('link procedure selected Initial status is 3+1.')
nvDlstatPstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("normalReceiveMode", 3), ("remoteBusy", 4), ("remoteTimedOut", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatPstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatPstate.setDescription('a. primary UP state Initial status is 1+1.')
nvDlstatSstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("normalTransmit", 3), ("localBusy", 4), ("rejectFrameSent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatSstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatSstate.setDescription('Secondary UP state . Initial status is 1+1.')
nvDlstatAbtfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatAbtfrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatAbtfrxs.setDescription('a. Number of aborted frames received Statistic is zeroed at startup time.')
nvDlstatAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatAlarms.setDescription('Number of alarms. Statistic is zeroed at startup time.')
nvDlstatFrmrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatFrmrrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatFrmrrxs.setDescription('a. Number of frame-reject frames received Statistic is zeroed at startup time.')
nvDlstatFrmrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatFrmrtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatFrmrtxs.setDescription('Number of frame-reject frames transmitted. Statistic is zeroed at startup time.')
nvDlstatIfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatIfrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatIfrxs.setDescription('Number of I-frames received. Statistic is zeroed at startup time.')
nvDlstatIftxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatIftxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatIftxs.setDescription('Number of I-frames transmitted. Statistic is zeroed at startup time.')
nvDlstatRejrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRejrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatRejrxs.setDescription('Number of REJ-frames received. Statistic is zeroed at startup time.')
nvDlstatRejtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRejtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatRejtxs.setDescription('Number of REJ-frames transmitted. Statistic is zeroed at startup time.')
nvDlstatRnrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRnrrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatRnrrxs.setDescription('Number of RNR-frames received. Statistic is zeroed at startup time.')
nvDlstatRnrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRnrtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatRnrtxs.setDescription('Number of RNR-frames transmitted. Statistic is zeroed at startup time.')
nvDlstatRrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRrrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatRrrxs.setDescription('Number of RR-frames received. Statistic is zeroed at startup time.')
nvDlstatRrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRrtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatRrtxs.setDescription('Number of RR-frames transmitted. Statistic is zeroed at startup time.')
nvDlstatRxdds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatRxdds.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatRxdds.setDescription('Number of receive device-driver errors. Statistic is zeroed at startup time.')
nvDlstatTouts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatTouts.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatTouts.setDescription('Number of link resets due to remote timeouts. Statistic is zeroed at startup time.')
nvDlstatTretrys = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatTretrys.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatTretrys.setDescription('Number of retries due to remote timeouts. Statistic is zeroed at startup time.')
nvDlstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlstatDtreset.setDescription('date & time statistics last reset')
nvLinkstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 2))
nvLinkstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatMaxRec.setDescription('total number of records allowed in database file.')
nvLinkstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatNumRec.setDescription('number of records in use.')
nvLinkstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3), )
if mibBuilder.loadTexts: nvLinkstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatTable.setDescription('linkstat file.')
nvLinkstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvLinkstatIndex"))
if mibBuilder.loadTexts: nvLinkstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatEntry.setDescription('linkstat record.')
nvLinkstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatIndex.setDescription('Index of linkstat record')
nvLinkstatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatPort.setDescription('name of port being used Initial status is 0.')
nvLinkstatApp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("primarySDLCStation", 3), ("secondarySDLCStation", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatApp.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatApp.setDescription('link appearence Initial status is 0+1.')
nvLinkstatFstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("down", 2), ("startingDriver", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatFstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatFstate.setDescription('main state of FLTE FSM Initial status is 0+1.')
nvLinkstatLfrmr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 33, 129, 193))).clone(namedValues=NamedValues(("none", 1), ("badNR", 17), ("overrun", 33), ("undefinedControlField", 129), ("badSUFrame", 193)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatLfrmr.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatLfrmr.setDescription('reason code from last FRMR received Initial status is 0+1.')
nvLinkstatLreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("none", 1), ("illegalCommand", 2), ("illegalResponse", 4), ("receiverOverrun", 5), ("illegalNr", 9), ("networkDisconnect", 10), ("driverDisconnect", 11), ("unsolicitedFinal", 12), ("frmrOrCmdr", 13), ("unexpectedUa", 14), ("remoteTimedOut", 15), ("sabm", 16), ("sarm", 17), ("disconnect", 18), ("dm", 19), ("snrm", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatLreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatLreset.setDescription('reason for last link reset Initial status is 0+1.')
nvLinkstatN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatN1.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatN1.setDescription(' actual n1 used (in bits) Initial status is 0.')
nvLinkstatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 12, 16, 17, 49))).clone(namedValues=NamedValues(("unconfigured", 1), ("lap", 2), ("lapb", 4), ("lapbExtended", 8), ("austrianPTT", 12), ("pss", 16), ("sdlc", 17), ("sdlcExtended", 49)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatProtocol.setDescription('link procedure selected Initial status is 3+1.')
nvLinkstatAbtfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatAbtfrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatAbtfrxs.setDescription('Number of aborted frames received. Statistic is zeroed at startup time.')
nvLinkstatAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatAlarms.setDescription('Number of alarms. Statistic is zeroed at startup time.')
nvLinkstatFrmrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatFrmrrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatFrmrrxs.setDescription('Number of frame-reject frames received. Statistic is zeroed at startup time.')
nvLinkstatFrmrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatFrmrtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatFrmrtxs.setDescription('Number of frame-reject frames transmitted. Statistic is zeroed at startup time.')
nvLinkstatIfrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatIfrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatIfrxs.setDescription('Number of I-frames received. Statistic is zeroed at startup time.')
nvLinkstatIftxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatIftxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatIftxs.setDescription('Number of I-frames transmitted. Statistic is zeroed at startup time.')
nvLinkstatRejrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRejrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatRejrxs.setDescription('Number of REJ-frames received. Statistic is zeroed at startup time.')
nvLinkstatRejtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRejtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatRejtxs.setDescription('Number of REJ-frames transmitted. Statistic is zeroed at startup time.')
nvLinkstatRnrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRnrrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatRnrrxs.setDescription('Number of RNR-frames received. Statistic is zeroed at startup time.')
nvLinkstatRnrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRnrtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatRnrtxs.setDescription('Number of RNR-frames transmitted. Statistic is zeroed at startup time.')
nvLinkstatRrrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRrrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatRrrxs.setDescription('Number of RR-frames received. Statistic is zeroed at startup time.')
nvLinkstatRrtxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRrtxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatRrtxs.setDescription('Number of RR-frames transmitted. Statistic is zeroed at startup time.')
nvLinkstatRxdds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatRxdds.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatRxdds.setDescription('Number of receive device-driver errors. Statistic is zeroed at startup time.')
nvLinkstatTouts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTouts.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatTouts.setDescription('Number of link resets due to remote timeouts. Statistic is zeroed at startup time.')
nvLinkstatTretrys = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTretrys.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatTretrys.setDescription('Number of retries due to remote timeouts. Statistic is zeroed at startup time.')
nvLinkstatTchartxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTchartxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatTchartxs.setDescription('Number of characters sent. Statistic is zeroed at startup time.')
nvLinkstatTcharrxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatTcharrxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatTcharrxs.setDescription('Number of characters received. Statistic is zeroed at startup time.')
nvLinkstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatDtreset.setDescription('date & time statistics last reset')
nvLinkstatNlinkup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkstatNlinkup.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkstatNlinkup.setDescription('Number of times link came up.')
nvDlconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 3))
nvDlconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlconfMaxRec.setDescription('total number of records allowed in database file.')
nvDlconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlconfNumRec.setDescription('number of records in use.')
nvDlconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3), )
if mibBuilder.loadTexts: nvDlconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlconfTable.setDescription('dlconf file.')
nvDlconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvDlconfDlnumber"))
if mibBuilder.loadTexts: nvDlconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlconfEntry.setDescription('dlconf record.')
nvDlconfDlnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 428))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvDlconfDlnumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlconfDlnumber.setDescription('Data Link Record (dlnumber) Number of the DL,ie,record id# in DLCONF file. Parameter is set during factory configuration.')
nvDlconfLinkname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429))).clone(namedValues=NamedValues(("nolink", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("link4", 5), ("link5", 6), ("link6", 7), ("link7", 8), ("link8", 9), ("link9", 10), ("link10", 11), ("link11", 12), ("link12", 13), ("link13", 14), ("link14", 15), ("link15", 16), ("link16", 17), ("link17", 18), ("link18", 19), ("link19", 20), ("link20", 21), ("link21", 22), ("link22", 23), ("link23", 24), ("link24", 25), ("link25", 26), ("link26", 27), ("link27", 28), ("link28", 29), ("link29", 30), ("link30", 31), ("link31", 32), ("link32", 33), ("link33", 34), ("link34", 35), ("link35", 36), ("link36", 37), ("link37", 38), ("link38", 39), ("link39", 40), ("link40", 41), ("link41", 42), ("link42", 43), ("link43", 44), ("link44", 45), ("link45", 46), ("link46", 47), ("link47", 48), ("link48", 49), ("link49", 50), ("link50", 51), ("link51", 52), ("link52", 53), ("link53", 54), ("link54", 55), ("link55", 56), ("link56", 57), ("link57", 58), ("link58", 59), ("link59", 60), ("link60", 61), ("link61", 62), ("link62", 63), ("link63", 64), ("link64", 65), ("link65", 66), ("link66", 67), ("link67", 68), ("link68", 69), ("link69", 70), ("link70", 71), ("link71", 72), ("link72", 73), ("link73", 74), ("link74", 75), ("link75", 76), ("link76", 77), ("link77", 78), ("link78", 79), ("link79", 80), ("link80", 81), ("link81", 82), ("link82", 83), ("link83", 84), ("link84", 85), ("link85", 86), ("link86", 87), ("link87", 88), ("link88", 89), ("link89", 90), ("link90", 91), ("link91", 92), ("link92", 93), ("link93", 94), ("link94", 95), ("link95", 96), ("link96", 97), ("link97", 98), ("link98", 99), ("link99", 100), ("link100", 101), ("link101", 102), ("link102", 103), ("link103", 104), ("link104", 105), ("link105", 106), ("link106", 107), ("link107", 108), ("link108", 109), ("link109", 110), ("link110", 111), ("link111", 112), ("link112", 113), ("link113", 114), ("link114", 115), ("link115", 116), ("link116", 117), ("link117", 118), ("link118", 119), ("link119", 120), ("link120", 121), ("link121", 122), ("link122", 123), ("link123", 124), ("link124", 125), ("link125", 126), ("link126", 127), ("link127", 128), ("link128", 129), ("link129", 130), ("link130", 131), ("link131", 132), ("link132", 133), ("link133", 134), ("link134", 135), ("link135", 136), ("link136", 137), ("link137", 138), ("link138", 139), ("link139", 140), ("link140", 141), ("link141", 142), ("link142", 143), ("link143", 144), ("link144", 145), ("link145", 146), ("link146", 147), ("link147", 148), ("link148", 149), ("link149", 150), ("link150", 151), ("link151", 152), ("link152", 153), ("link153", 154), ("link154", 155), ("link155", 156), ("link156", 157), ("link157", 158), ("link158", 159), ("link159", 160), ("link160", 161), ("link161", 162), ("link162", 163), ("link163", 164), ("link164", 165), ("link165", 166), ("link166", 167), ("link167", 168), ("link168", 169), ("link169", 170), ("link170", 171), ("link171", 172), ("link172", 173), ("link173", 174), ("link174", 175), ("link175", 176), ("link176", 177), ("link177", 178), ("link178", 179), ("link179", 180), ("link180", 181), ("link181", 182), ("link182", 183), ("link183", 184), ("link184", 185), ("link185", 186), ("link186", 187), ("link187", 188), ("link188", 189), ("link189", 190), ("link190", 191), ("link191", 192), ("link192", 193), ("link193", 194), ("link194", 195), ("link195", 196), ("link196", 197), ("link197", 198), ("link198", 199), ("link199", 200), ("link200", 201), ("link201", 202), ("link202", 203), ("link203", 204), ("link204", 205), ("link205", 206), ("link206", 207), ("link207", 208), ("link208", 209), ("link209", 210), ("link210", 211), ("link211", 212), ("link212", 213), ("link213", 214), ("link214", 215), ("link215", 216), ("link216", 217), ("link217", 218), ("link218", 219), ("link219", 220), ("link220", 221), ("link221", 222), ("link222", 223), ("link223", 224), ("link224", 225), ("link225", 226), ("link226", 227), ("link227", 228), ("link228", 229), ("link229", 230), ("link230", 231), ("link231", 232), ("link232", 233), ("link233", 234), ("link234", 235), ("link235", 236), ("link236", 237), ("link237", 238), ("link238", 239), ("link239", 240), ("link240", 241), ("link241", 242), ("link242", 243), ("link243", 244), ("link244", 245), ("link245", 246), ("link246", 247), ("link247", 248), ("link248", 249), ("link249", 250), ("link250", 251), ("link251", 252), ("link252", 253), ("link253", 254), ("link254", 255)) + NamedValues(("link255", 256), ("link256", 257), ("link257", 258), ("link258", 259), ("link259", 260), ("link260", 261), ("link261", 262), ("link262", 263), ("link263", 264), ("link264", 265), ("link265", 266), ("link266", 267), ("link267", 268), ("link268", 269), ("link269", 270), ("link270", 271), ("link271", 272), ("link272", 273), ("link273", 274), ("link274", 275), ("link275", 276), ("link276", 277), ("link277", 278), ("link278", 279), ("link279", 280), ("link280", 281), ("link281", 282), ("link282", 283), ("link283", 284), ("link284", 285), ("link285", 286), ("link286", 287), ("link287", 288), ("link288", 289), ("link289", 290), ("link290", 291), ("link291", 292), ("link292", 293), ("link293", 294), ("link294", 295), ("link295", 296), ("link296", 297), ("link297", 298), ("link298", 299), ("link299", 300), ("link300", 301), ("link301", 302), ("link302", 303), ("link303", 304), ("link304", 305), ("link305", 306), ("link306", 307), ("link307", 308), ("link308", 309), ("link309", 310), ("link310", 311), ("link311", 312), ("link312", 313), ("link313", 314), ("link314", 315), ("link315", 316), ("link316", 317), ("link317", 318), ("link318", 319), ("link319", 320), ("link320", 321), ("link321", 322), ("link322", 323), ("link323", 324), ("link324", 325), ("link325", 326), ("link326", 327), ("link327", 328), ("link328", 329), ("link329", 330), ("link330", 331), ("link331", 332), ("link332", 333), ("link333", 334), ("link334", 335), ("link335", 336), ("link336", 337), ("link337", 338), ("link338", 339), ("link339", 340), ("link340", 341), ("link341", 342), ("link342", 343), ("link343", 344), ("link344", 345), ("link345", 346), ("link346", 347), ("link347", 348), ("link348", 349), ("link349", 350), ("link350", 351), ("link351", 352), ("link352", 353), ("link353", 354), ("link354", 355), ("link355", 356), ("link356", 357), ("link357", 358), ("link358", 359), ("link359", 360), ("link360", 361), ("link361", 362), ("link362", 363), ("link363", 364), ("link364", 365), ("link365", 366), ("link366", 367), ("link367", 368), ("link368", 369), ("link369", 370), ("link370", 371), ("link371", 372), ("link372", 373), ("link373", 374), ("link374", 375), ("link375", 376), ("link376", 377), ("link377", 378), ("link378", 379), ("link379", 380), ("link380", 381), ("link381", 382), ("link382", 383), ("link383", 384), ("link384", 385), ("link385", 386), ("link386", 387), ("link387", 388), ("link388", 389), ("link389", 390), ("link390", 391), ("link391", 392), ("link392", 393), ("link393", 394), ("link394", 395), ("link395", 396), ("link396", 397), ("link397", 398), ("link398", 399), ("link399", 400), ("link400", 401), ("link401", 402), ("link402", 403), ("link403", 404), ("link404", 405), ("link405", 406), ("link406", 407), ("link407", 408), ("link408", 409), ("link409", 410), ("link410", 411), ("link411", 412), ("link412", 413), ("link413", 414), ("link414", 415), ("link415", 416), ("link416", 417), ("link417", 418), ("link418", 419), ("link419", 420), ("link420", 421), ("link421", 422), ("link422", 423), ("link423", 424), ("link424", 425), ("link425", 426), ("link426", 427), ("link427", 428), ("link428", 429)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlconfLinkname.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlconfLinkname.setDescription('Link Name (linkname) ')
nvDlconfPuaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDlconfPuaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvDlconfPuaddr.setDescription('Polling Address (puaddr) Default value is 0.')
nvLinkconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 7, 4))
nvLinkconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfMaxRec.setDescription('total number of records allowed in database file.')
nvLinkconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfNumRec.setDescription('number of records in use.')
nvLinkconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3), )
if mibBuilder.loadTexts: nvLinkconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfTable.setDescription('linkconf file.')
nvLinkconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvLinkconfIndex"))
if mibBuilder.loadTexts: nvLinkconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfEntry.setDescription('linkconf record.')
nvLinkconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfIndex.setDescription('Index of linkconf record')
nvLinkconfLinkname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255), SingleValueConstraint(256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429))).clone(namedValues=NamedValues(("nolink", 1), ("link1", 2), ("link2", 3), ("link3", 4), ("link4", 5), ("link5", 6), ("link6", 7), ("link7", 8), ("link8", 9), ("link9", 10), ("link10", 11), ("link11", 12), ("link12", 13), ("link13", 14), ("link14", 15), ("link15", 16), ("link16", 17), ("link17", 18), ("link18", 19), ("link19", 20), ("link20", 21), ("link21", 22), ("link22", 23), ("link23", 24), ("link24", 25), ("link25", 26), ("link26", 27), ("link27", 28), ("link28", 29), ("link29", 30), ("link30", 31), ("link31", 32), ("link32", 33), ("link33", 34), ("link34", 35), ("link35", 36), ("link36", 37), ("link37", 38), ("link38", 39), ("link39", 40), ("link40", 41), ("link41", 42), ("link42", 43), ("link43", 44), ("link44", 45), ("link45", 46), ("link46", 47), ("link47", 48), ("link48", 49), ("link49", 50), ("link50", 51), ("link51", 52), ("link52", 53), ("link53", 54), ("link54", 55), ("link55", 56), ("link56", 57), ("link57", 58), ("link58", 59), ("link59", 60), ("link60", 61), ("link61", 62), ("link62", 63), ("link63", 64), ("link64", 65), ("link65", 66), ("link66", 67), ("link67", 68), ("link68", 69), ("link69", 70), ("link70", 71), ("link71", 72), ("link72", 73), ("link73", 74), ("link74", 75), ("link75", 76), ("link76", 77), ("link77", 78), ("link78", 79), ("link79", 80), ("link80", 81), ("link81", 82), ("link82", 83), ("link83", 84), ("link84", 85), ("link85", 86), ("link86", 87), ("link87", 88), ("link88", 89), ("link89", 90), ("link90", 91), ("link91", 92), ("link92", 93), ("link93", 94), ("link94", 95), ("link95", 96), ("link96", 97), ("link97", 98), ("link98", 99), ("link99", 100), ("link100", 101), ("link101", 102), ("link102", 103), ("link103", 104), ("link104", 105), ("link105", 106), ("link106", 107), ("link107", 108), ("link108", 109), ("link109", 110), ("link110", 111), ("link111", 112), ("link112", 113), ("link113", 114), ("link114", 115), ("link115", 116), ("link116", 117), ("link117", 118), ("link118", 119), ("link119", 120), ("link120", 121), ("link121", 122), ("link122", 123), ("link123", 124), ("link124", 125), ("link125", 126), ("link126", 127), ("link127", 128), ("link128", 129), ("link129", 130), ("link130", 131), ("link131", 132), ("link132", 133), ("link133", 134), ("link134", 135), ("link135", 136), ("link136", 137), ("link137", 138), ("link138", 139), ("link139", 140), ("link140", 141), ("link141", 142), ("link142", 143), ("link143", 144), ("link144", 145), ("link145", 146), ("link146", 147), ("link147", 148), ("link148", 149), ("link149", 150), ("link150", 151), ("link151", 152), ("link152", 153), ("link153", 154), ("link154", 155), ("link155", 156), ("link156", 157), ("link157", 158), ("link158", 159), ("link159", 160), ("link160", 161), ("link161", 162), ("link162", 163), ("link163", 164), ("link164", 165), ("link165", 166), ("link166", 167), ("link167", 168), ("link168", 169), ("link169", 170), ("link170", 171), ("link171", 172), ("link172", 173), ("link173", 174), ("link174", 175), ("link175", 176), ("link176", 177), ("link177", 178), ("link178", 179), ("link179", 180), ("link180", 181), ("link181", 182), ("link182", 183), ("link183", 184), ("link184", 185), ("link185", 186), ("link186", 187), ("link187", 188), ("link188", 189), ("link189", 190), ("link190", 191), ("link191", 192), ("link192", 193), ("link193", 194), ("link194", 195), ("link195", 196), ("link196", 197), ("link197", 198), ("link198", 199), ("link199", 200), ("link200", 201), ("link201", 202), ("link202", 203), ("link203", 204), ("link204", 205), ("link205", 206), ("link206", 207), ("link207", 208), ("link208", 209), ("link209", 210), ("link210", 211), ("link211", 212), ("link212", 213), ("link213", 214), ("link214", 215), ("link215", 216), ("link216", 217), ("link217", 218), ("link218", 219), ("link219", 220), ("link220", 221), ("link221", 222), ("link222", 223), ("link223", 224), ("link224", 225), ("link225", 226), ("link226", 227), ("link227", 228), ("link228", 229), ("link229", 230), ("link230", 231), ("link231", 232), ("link232", 233), ("link233", 234), ("link234", 235), ("link235", 236), ("link236", 237), ("link237", 238), ("link238", 239), ("link239", 240), ("link240", 241), ("link241", 242), ("link242", 243), ("link243", 244), ("link244", 245), ("link245", 246), ("link246", 247), ("link247", 248), ("link248", 249), ("link249", 250), ("link250", 251), ("link251", 252), ("link252", 253), ("link253", 254), ("link254", 255)) + NamedValues(("link255", 256), ("link256", 257), ("link257", 258), ("link258", 259), ("link259", 260), ("link260", 261), ("link261", 262), ("link262", 263), ("link263", 264), ("link264", 265), ("link265", 266), ("link266", 267), ("link267", 268), ("link268", 269), ("link269", 270), ("link270", 271), ("link271", 272), ("link272", 273), ("link273", 274), ("link274", 275), ("link275", 276), ("link276", 277), ("link277", 278), ("link278", 279), ("link279", 280), ("link280", 281), ("link281", 282), ("link282", 283), ("link283", 284), ("link284", 285), ("link285", 286), ("link286", 287), ("link287", 288), ("link288", 289), ("link289", 290), ("link290", 291), ("link291", 292), ("link292", 293), ("link293", 294), ("link294", 295), ("link295", 296), ("link296", 297), ("link297", 298), ("link298", 299), ("link299", 300), ("link300", 301), ("link301", 302), ("link302", 303), ("link303", 304), ("link304", 305), ("link305", 306), ("link306", 307), ("link307", 308), ("link308", 309), ("link309", 310), ("link310", 311), ("link311", 312), ("link312", 313), ("link313", 314), ("link314", 315), ("link315", 316), ("link316", 317), ("link317", 318), ("link318", 319), ("link319", 320), ("link320", 321), ("link321", 322), ("link322", 323), ("link323", 324), ("link324", 325), ("link325", 326), ("link326", 327), ("link327", 328), ("link328", 329), ("link329", 330), ("link330", 331), ("link331", 332), ("link332", 333), ("link333", 334), ("link334", 335), ("link335", 336), ("link336", 337), ("link337", 338), ("link338", 339), ("link339", 340), ("link340", 341), ("link341", 342), ("link342", 343), ("link343", 344), ("link344", 345), ("link345", 346), ("link346", 347), ("link347", 348), ("link348", 349), ("link349", 350), ("link350", 351), ("link351", 352), ("link352", 353), ("link353", 354), ("link354", 355), ("link355", 356), ("link356", 357), ("link357", 358), ("link358", 359), ("link359", 360), ("link360", 361), ("link361", 362), ("link362", 363), ("link363", 364), ("link364", 365), ("link365", 366), ("link366", 367), ("link367", 368), ("link368", 369), ("link369", 370), ("link370", 371), ("link371", 372), ("link372", 373), ("link373", 374), ("link374", 375), ("link375", 376), ("link376", 377), ("link377", 378), ("link378", 379), ("link379", 380), ("link380", 381), ("link381", 382), ("link382", 383), ("link383", 384), ("link384", 385), ("link385", 386), ("link386", 387), ("link387", 388), ("link388", 389), ("link389", 390), ("link390", 391), ("link391", 392), ("link392", 393), ("link393", 394), ("link394", 395), ("link395", 396), ("link396", 397), ("link397", 398), ("link398", 399), ("link399", 400), ("link400", 401), ("link401", 402), ("link402", 403), ("link403", 404), ("link404", 405), ("link405", 406), ("link406", 407), ("link407", 408), ("link408", 409), ("link409", 410), ("link410", 411), ("link411", 412), ("link412", 413), ("link413", 414), ("link414", 415), ("link415", 416), ("link416", 417), ("link417", 418), ("link418", 419), ("link419", 420), ("link420", 421), ("link421", 422), ("link422", 423), ("link423", 424), ("link424", 425), ("link425", 426), ("link426", 427), ("link427", 428), ("link428", 429)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLinkconfLinkname.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfLinkname.setDescription("Link Name (linkname) Link name and number (ie,'Link1') Parameter is set during factory configuration.")
nvLinkconfPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfPortname.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfPortname.setDescription('Port to serve this link.')
nvLinkconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfRsrcpool.setDescription('Resource Pool Name.')
nvLinkconfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8, 12, 16, 17, 49))).clone(namedValues=NamedValues(("lap", 2), ("lapb", 4), ("lapbe", 8), ("aust", 12), ("pss", 16), ("sdlc", 17), ("sdlce", 49)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfProtocol.setDescription('Link-Level Protocol (protocol) This field defines the Synchronous Link link procedure that is to be followed. Default value is 3+1.')
nvLinkconfWsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfWsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfWsze.setDescription('Link-Level Window Size (wsze) Option to select window size to be used. Between 1 and 7 for modulo 8. Between 1 and 127 for modulo 127. Default value is 7.')
nvLinkconfHostinact = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfHostinact.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfHostinact.setDescription('SDLC Host Inactivity Timer (hostinact) SDLC secondary station maximum wait without host contact. Default value is 600.')
nvLinkconfN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfN2.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfN2.setDescription('Number of Retransmissions (n2) Maximum number of times a data frame will be retransmitted, before resetting the link. Default value is 10.')
nvLinkconfPollthres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfPollthres.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfPollthres.setDescription('SDLC Poll Threshold (pollthres) Default value is 20.')
nvLinkconfT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfT1.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfT1.setDescription('Timer Recovery Timer (t1) Timer for maximum wait for acknowledgment. When timer expires, timeout recovery is attempted. Default value is 5.')
nvLinkconfT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfT2.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfT2.setDescription('Acknowledgement Timer (t2) LAPB maximum amount of time before acknowledgement. Default value is 0.')
nvLinkconfT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfT3.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfT3.setDescription('Link Watchdog Timer (t3) LAPB maximum amount of link idle time before a probe is done. Default value is 15.')
nvLinkconfAckthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfAckthresh.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfAckthresh.setDescription('Acknowledgement Threshold (ackthresh) ')
nvLinkconfDialout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfDialout.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfDialout.setDescription('dialout command string id')
nvLinkconfWaitframe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 7, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLinkconfWaitframe.setStatus('mandatory')
if mibBuilder.loadTexts: nvLinkconfWaitframe.setDescription('Number of T1 periods to wait for frame upon startup.')
nvX25stat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 1))
nvX25statMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statMaxRec.setDescription('total number of records allowed in database file.')
nvX25statNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNumRec.setDescription('number of records in use.')
nvX25statTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3), )
if mibBuilder.loadTexts: nvX25statTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statTable.setDescription('x25stat file.')
nvX25statEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25statIndex"))
if mibBuilder.loadTexts: nvX25statEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statEntry.setDescription('x25stat record.')
nvX25statIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statIndex.setDescription('Index of x25stat record')
nvX25statNetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNetname.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNetname.setDescription('x25stat: network interface name.')
nvX25statCode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("dteOriginated", 2), ("numberBusy", 3), ("outOfOrder", 4), ("remoteDteOperational", 5), ("remoteProcedureError", 6), ("localProcedureError", 7), ("reverseChargeNotSubscribed", 8), ("incompatibleDestination", 9), ("fastSelectNotSubscribed", 10), ("invalidFacilityRequest", 11), ("accessBarred", 12), ("networkCongestion", 13), ("networkOperational", 14), ("notObtainable", 15), ("rpoaOutOfOrder", 16), ("shipAbsent", 17), ("networkOutOfOrder", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statCode.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statCode.setDescription('last clear or reset code. Initial status is 1+1.')
nvX25statDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statDiag.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statDiag.setDescription('last diagnostic code. Initial status is 0.')
nvX25statIfstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("r1Down", 1), ("r2Startup", 2), ("r3Restart", 3), ("r4Up", 4), ("r5Disconnected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statIfstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statIfstate.setDescription('network state. Current state of network interface. Initial status is 0+1.')
nvX25statCallcur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statCallcur.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statCallcur.setDescription('Number of X25 calls currently active.')
nvX25statOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statOpen.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statOpen.setDescription('network open? Initial status is 0+1.')
nvX25statUp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statUp.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statUp.setDescription('network up? Initial status is 0+1.')
nvX25statNtxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxcalls.setDescription('number of call requests sent. Statistic is zeroed at startup time.')
nvX25statNrxcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxcalls.setDescription('number of call requests received. Statistic is zeroed at startup time.')
nvX25statNtxcallcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxcallcs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxcallcs.setDescription('number of call confs sent. Statistic is zeroed at startup time.')
nvX25statNrxcallcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxcallcs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxcallcs.setDescription('number of call confs received. Statistic is zeroed at startup time.')
nvX25statNtxclrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxclrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxclrs.setDescription('number of clear requests sent. Statistic is zeroed at startup time.')
nvX25statNrxclrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxclrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxclrs.setDescription('number of clear requests received. Statistic is zeroed at startup time.')
nvX25statNtxclrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxclrcs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxclrcs.setDescription('number of clear confs sent. Statistic is zeroed at startup time.')
nvX25statNrxclrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxclrcs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxclrcs.setDescription('number of clear confs received. Statistic is zeroed at startup time.')
nvX25statNtxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxres.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxres.setDescription('number of reset requests send. Statistic is zeroed at startup time.')
nvX25statNrxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxres.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxres.setDescription('number of reset requests received. Statistic is zeroed at startup time.')
nvX25statNtxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxints.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxints.setDescription('number of int requests send. Statistic is zeroed at startup time.')
nvX25statNrxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxints.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxints.setDescription('number of int requests received. Statistic is zeroed at startup time.')
nvX25statNtxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxrrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxrrs.setDescription('number of receiver readys send. Statistic is zeroed at startup time.')
nvX25statNrxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxrrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxrrs.setDescription('number of receiver readys received. Statistic is zeroed at startup time.')
nvX25statNtxrnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxrnrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxrnrs.setDescription('number of receiver not readys send. Statistic is zeroed at startup time.')
nvX25statNrxrnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxrnrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxrnrs.setDescription('number of receiver not readys received. Statistic is zeroed at startup time.')
nvX25statNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxpaks.setDescription('number of data packets sent. Statistic is zeroed at startup time.')
nvX25statNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxpaks.setDescription('number of data packets received. Statistic is zeroed at startup time.')
nvX25statNtxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxsegs.setDescription('number of data segments sent. Statistic is zeroed at startup time.')
nvX25statNrxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxsegs.setDescription('number of data segments received. Statistic is zeroed at startup time.')
nvX25statNtxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNtxchars.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNtxchars.setDescription('number of data chars sent. Statistic is zeroed at startup time.')
nvX25statNrxchars = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statNrxchars.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statNrxchars.setDescription('number of data chars received. Statistic is zeroed at startup time.')
nvX25statMaxvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statMaxvc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statMaxvc.setDescription('maximum connections. Statistic is zeroed at startup time.')
nvX25statDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statDtreset.setDescription('date & time statistics last reset')
nvX25statLinkup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 1, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25statLinkup.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25statLinkup.setDescription('Link (level2) uptime in seconds.')
nvX25call = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 2))
nvX25callMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callMaxRec.setDescription('total number of records allowed in database file.')
nvX25callNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNumRec.setDescription('number of records in use.')
nvX25callTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3), )
if mibBuilder.loadTexts: nvX25callTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callTable.setDescription('x25call file.')
nvX25callEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25callIndex"))
if mibBuilder.loadTexts: nvX25callEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callEntry.setDescription('x25call record.')
nvX25callIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callIndex.setDescription('Index of x25call record')
nvX25callNetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNetname.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNetname.setDescription('network interface name (as defined in the X25conf record) ')
nvX25callChanstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("p1", 1), ("p1r", 2), ("p2", 3), ("p3", 4), ("p3r", 5), ("d1i1", 6), ("d1i2", 7), ("d1i3", 8), ("d1i4", 9), ("d2", 10), ("d3", 11), ("d4", 12), ("d5", 13), ("d6", 14), ("d7", 15), ("p5C", 16), ("p5T", 17), ("p6", 18), ("p6r", 19), ("p2r", 20), ("p7r", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callChanstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callChanstate.setDescription('logical channel state Initial status is p1 (0+1).')
nvX25callChantype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("incoming", 2), ("outgoing", 3), ("twoway", 4), ("permanent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callChantype.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callChantype.setDescription('logical channel type Initial status is 3+1.')
nvX25callCode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("c-dte", 2), ("c-bsy", 3), ("c-ooo", 4), ("c-rdo", 5), ("c-rpe", 6), ("c-lpe", 7), ("c-rns", 8), ("c-id", 9), ("c-fns", 10), ("c-ifr", 11), ("c-ab", 12), ("c-nc", 13), ("c-no", 14), ("c-nob", 15), ("c-roo", 16), ("c-sa", 17), ("c-noo", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callCode.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callCode.setDescription('last clear or reset code Initial status is 1+1.')
nvX25callDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callDiag.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callDiag.setDescription('last diagnostic code Initial status is 0.')
nvX25callExpack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callExpack.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callExpack.setDescription('number of ACKs expected This field indicates the number of message acknowlegements that are expected from the Network User and is used for flow control within the node. Initial status is 0.')
nvX25callLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callLcn.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callLcn.setDescription('logical channel number assigned to this call ')
nvX25callRxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callRxpsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callRxpsze.setDescription('receive packet size This field indicates the largest packet that will be received across the interface. If flow-control negotiation is in effect,this is the value that was agreed. Initial status is 7+1.')
nvX25callRxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callRxwsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callRxwsze.setDescription('receive window This field indicates the packet-level receive window size being used. If flow-control negotiation is in effect,this is the value that was agreed. Initial status is 2.')
nvX25callRxtput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callRxtput.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callRxtput.setDescription('receive throughput class This field indicates the receive throughtput class that is being used. If throughput-class negotiation is in effect,this is the value that was agreed. Initial status is 7+1.')
nvX25callNr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNr.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNr.setDescription('N(R) state variable This field indicates the sequence number of the next packet expected to be received on this logical channel. Initial status is 0.')
nvX25callNrunak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrunak.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNrunak.setDescription('next N(R) to acknowlege This field indicates the sequence number of the packet that will next be acknowledged as received on this channel. By delaying acknowledgements of received packets,flow control of the sender is achieved. Initial status is 0.')
nvX25callNs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNs.setDescription('N(S) state variable This field indicates the sequence number of the next data packet to be sent on this logical channel. Initial status is 0.')
nvX25callNsunak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNsunak.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNsunak.setDescription('N(S) to be acknowledged This field indicates the sequence number of the data packet that is to be acknowledged next by the receiver. Initial status is 0.')
nvX25callNunakpac = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNunakpac.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNunakpac.setDescription('number of unacknowledged data packets transmitted This field indicates the number of data packets that have been sent but that are not yet acknowledged by the receiver. Initial status is 0.')
nvX25callTxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callTxpsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callTxpsze.setDescription('transmit packet size This field indicates the largest packet that will be transmitted across the interface. If flow-control negotiation is in effect,this is the value that was agreed. Initial status is 7+1.')
nvX25callTxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callTxwsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callTxwsze.setDescription('transmit window This field indicates the packet-level transmit window size being used. If flow-control negotiation is in effect,this is the value that was agreed. Initial status is 2.')
nvX25callTxtput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callTxtput.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callTxtput.setDescription('transmit throughput class This field indicates the transmit throughtput class that is being used. If throughput-class negotiation is in effect,this is the value that was agreed. Initial status is 7+1.')
nvX25callNrxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxints.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNrxints.setDescription('number of INTERRUPTs received Statistic is zeroed at startup time.')
nvX25callNrxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNrxpaks.setDescription('number of packets received Statistic is zeroed at startup time.')
nvX25callNrxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxres.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNrxres.setDescription('number of RESET REQUESTs received Statistic is zeroed at startup time.')
nvX25callNrxrnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxrnrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNrxrnrs.setDescription('number of RNRs received Statistic is zeroed at startup time.')
nvX25callNrxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxrrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNrxrrs.setDescription('number of RRs received Statistic is zeroed at startup time.')
nvX25callNrxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNrxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNrxsegs.setDescription('number of segments received Statistic is zeroed at startup time.')
nvX25callNtxints = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxints.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNtxints.setDescription('number of INTERRUPTs sent Statistic is zeroed at startup time.')
nvX25callNtxpaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxpaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNtxpaks.setDescription('number of packets sent Statistic is zeroed at startup time.')
nvX25callNtxsegs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxsegs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNtxsegs.setDescription('number of segments sent Statistic is zeroed at startup time.')
nvX25callNtxres = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxres.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNtxres.setDescription('number of RESET REQUESTs sent Statistic is zeroed at startup time.')
nvX25callNtxrrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callNtxrrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callNtxrrs.setDescription('number of RRs sent .note RNRs are not transmitted by the X.25 interface component. .end note Statistic is zeroed at startup time.')
nvX25callDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 2, 3, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25callDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25callDtreset.setDescription('date & time statistics last reset')
nvX25conf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 3))
nvX25confMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confMaxRec.setDescription('total number of records allowed in database file.')
nvX25confNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNumRec.setDescription('number of records in use.')
nvX25confTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3), )
if mibBuilder.loadTexts: nvX25confTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confTable.setDescription('x25conf file.')
nvX25confEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25confIndex"))
if mibBuilder.loadTexts: nvX25confEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confEntry.setDescription('x25conf record.')
nvX25confIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confIndex.setDescription('Index of x25conf record')
nvX25confNetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25confNetname.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNetname.setDescription('Network Interface Name (netname) This field names an instance of the X.25 network interface. The name is used to identify the status records belonging to,and commands destined for,a particular instance of an X.25 network interface. Parameter is set during factory configuration.')
nvX25confApp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 17, 33))).clone(namedValues=NamedValues(("dte", 2), ("dce", 3), ("trunkx", 17), ("trunky", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confApp.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confApp.setDescription('Logical Interface Appearance (app) This field defines whether the component implements an X.25 interface,or an internal network trunk interface. In addition,it specifies the appearance of the interface. Default value is 1+1.')
nvX25confAutostart = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("stndby", 3), ("v32", 4), ("dialin", 5), ("bidir", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confAutostart.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confAutostart.setDescription('Auto X.25 Connection Startup (autostart) Default value is enable (1+1).')
nvX25confDlnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDlnumber.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confDlnumber.setDescription('Data Link Record (dlnumber) This field tells which of the DLCONF records in the SL component should be used by this net. Default value is 0.')
nvX25confLic = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLic.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confLic.setDescription('Lowest Incoming SVC (lic) This field defines the lowest logical channel number (LCN) that is reserved for incoming calls. The range of logical channels from LIC to LIC+NIC-1 is reserved for incoming calls only. Default value is 1.')
nvX25confLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLoc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confLoc.setDescription('Lowest Outgoing SVC (loc) This field defines the lowest logical channel number (LCN) that is reserved for outgoing calls. The range of logical channels from LOC to LOC+NOC-1 is reserved for outgoing calls. Default value is 1.')
nvX25confLpc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLpc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confLpc.setDescription("Lowest PVC (lpc) This field describes the lowest logical channel number (LCN) in the range reserved for permanent virtual circuits (PVCs). Each of the channels should also be described in the X25PVC file,although if they are not they will be treated as PVC 'B' ends. Default value is 1.")
nvX25confLtc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confLtc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confLtc.setDescription('Lowest Two-Way SVC (ltc) This field defines the lowest logical channel number (LCN) that may be used for both incoming calls and outgoing calls. The range of logical channels from LTC to LTC+NTC-1 is available for incoming and outgoing calls. Default value is 1.')
nvX25confNic = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNic.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNic.setDescription('Number of Incoming SVCs (nic) Default value is 0.')
nvX25confNoc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNoc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNoc.setDescription('Number of Outgoing SVCs (noc) Default value is 0.')
nvX25confNpc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNpc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNpc.setDescription('Number of PVCs (npc) Default value is 0.')
nvX25confNtc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNtc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNtc.setDescription('Number of Two-Way SVCs (ntc) .nfl index .nfl capitalize .note The four ranges (LPC to LPC+NPC-1; LIC to LIC+NIC-1; LTC to LTC+NTC-1 ;and LOC to LOC+NOC-1) must not overlap. Futhermore,to avoid channel assignments collisions between DTEs and DCEs,it is recommended that the ranges be assigned thus: .br;For DTEs: LIC to LIC+NIC-1 < LTC to LTC+NTC-1 < LOC to LOC+NOC-1 .br;For DCEs: LIC to LIC+NIC-1 > LTC to LTC+NTC-1 > LOC to LOC+NOC-1 .end note .fl index .fl capitalize Default value is 28.')
nvX25confAcktimer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confAcktimer.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confAcktimer.setDescription('Packet Acknowledgement Timer (acktimer) defines if t2 procedure is going to be used or not,and if it is going to be used what t2 time period will be in one tenths of a second. When t2 is zero,procedure to delay acknowledgement will not be performed. Default value is 0.')
nvX25confAckthresh = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confAckthresh.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confAckthresh.setDescription('Acknowledgement Threshold (ackthresh) acknowledgement threshold is used to acknowledge received data when certain number of data packets received,even if t2 timer has not expired. It is used only if t2 procedure is active,ie acktime is greater than zero. Default value is 0.')
nvX25confNuireq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNuireq.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNuireq.setDescription(' NUI required ')
nvX25confCugformat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("basic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confCugformat.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confCugformat.setDescription('Closed User Group Format (cugformat) This field indicates the format of closed user groups to which this interface subscribes. If the type is basic,the two digit format of the CUG facility request is used. If the type is extend the four digit format is used. Default value is basic (0+1).')
nvX25confDbmod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDbmod.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confDbmod.setDescription('D-Bit Modification (dbmod) This field enables d bit modification,where all data packets received from the link are assumed to have their delivery confirmation bit set,and all data packets transmitted have it reset. This is only present to cater to older network implementations that do not support delivery confirmation. Default value is 0.')
nvX25confDefpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDefpsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confDefpsze.setDescription('Default Packet Size (defpsze) This value sets the maximum packet size that can be transferred across the interface if packet size negotiation is disabled (flowneg = no/wsz) or is not requested. If flow control parameter negotiation is enabled (flowneg = yes/psz), this value is used as a starting point and may be negotiated, with the network, up to the value of maxpsze or down to the minimum value of 16. Values for packet size requested by components (eg ITI) are preferentially used if flow control negotiation is enabled (flowneg = yes/psz) AND if the requested values are between maxpsze and 16; in all other cases defpsze is used. Default value is 7+1.')
nvX25confDefwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDefwsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confDefwsze.setDescription('Default Window Size (defwsze) This field sets the default value for the packet-level window size to be used when transferring packets if flow-control negotiation is disabled (flowneg = no/psz) or is not requested. If flow control parameter negotiation is enabled (flowneg=yes/wsz) then this value is used as a starting point and may be negotiated up to the maximum value set by maxwsze or down to a minimum value of 1. If this field is set to a value greater than 7,the interface must be configured for extended packet numbering (xtend = yes). Values for window size requested by components (eg ITI) are preferentially used if flow control negotiation is enabled (flowneg = yes/wsz) AND if the requested values are between maxwsze and 1; in all other cases defwsze is used. Default value is 2.')
nvX25confDeftput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDeftput.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confDeftput.setDescription('Default Throughput Class (deftput) This field sets the initial value to be used for the throughput class for the virtual call if throughput-class negotiation is disabled (thruneg = no) or is not requested. If throughput-class negotiation is enabled (thruneg = yes), this value is used as a starting point and may be negotiated, with the network,downwards. Values for throughputclass negotiation requested by components (eg ITI) are preferentially used if throughput-class negotiation is enabled (thruneg = yes) AND if the requested values are less than deftput; in all other cases deftput is used. .note;Although CCITT defines throughput classes in terms of a guaranteed data-rate,throughput classes are only implemented to the extent of arranging that packets of a higher throughput-class are serviced before those of a lower class. .end note Default value is 10+1.')
nvX25confDiagsupr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDiagsupr.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confDiagsupr.setDescription('Diagnostic Packet Suppression (diagsupr) This field suppresses or enables the emission of DIAG diagnostic packets on some network protocol violations. Default value is no (0+1).')
nvX25confDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("incoming", 2), ("outgoing", 3), ("twoway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confDirection.setDescription('Call Direction Allowed (direction) This field indicates whether incoming and outgoing calls may be made over this interface. Default value is 3+1.')
nvX25confFlowneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("psn", 3), ("wsn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confFlowneg.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confFlowneg.setDescription('Flow Control Negotiation (flowneg) This field enables or disables negotiation of the flow control parameters,window size and packet size. Default value is no (0+1).')
nvX25confFstacc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confFstacc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confFstacc.setDescription('Fast Select Acceptance (fstacc) This field defines whether fast-select call requests are accepted. Default value is no (0+1).')
nvX25confUpdncmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confUpdncmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confUpdncmd.setDescription('Link Up/Down Command This field is the string id of a script like command that may bring other links up or down when this link goes up or down format: netup-cmds>netdown-cmds netup-cmds: >netx.up/down... netdown-cmds: netx.up/down... example: >netw.up>netx.down>>nety.up>netz.down Default value is 0.')
nvX25confMaxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confMaxpsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confMaxpsze.setDescription('Maximum Packet Size (maxpsze) This value is the maximum acceptable value for the largest packet that can be sent across the interface. It is used as an upper-bound in packet size negotiation. Default value is 7+1.')
nvX25confMaxwsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confMaxwsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confMaxwsze.setDescription('Maximum Window Size (maxwsze) This field sets the maximum acceptable value for the packet-level window size to be used when transferring packets. It is used as a upper-bound in window size negotiation. If this field is set to a value greater than 7,the interface must be configured for extended packet numbering (xtend = yes). Default value is 2.')
nvX25confNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNetaddr.setDescription('Calling Network Address (netaddr) If this field is not empty,the contents will be supplied as the calling network address in all call request packets transmitted,overriding anything supplied by the network user. ')
nvX25confNettype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("ccitt", 1), ("datapac", 2), ("transpac", 3), ("upss", 4), ("transb", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNettype.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNettype.setDescription('X.25 Network Type (nettype) This field indicates the local variety of X.25 network and is primarily used to show how to interpret non-X.25 facilities of the local network.If nettype = unknown,non-X.25 facilities are passed transparently through a switch and ignored by a PAD. Default value is ccitt (0+1).')
nvX25confNetvrsion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 81, 85))).clone(namedValues=NamedValues(("v1976", 77), ("v1980", 81), ("v1984", 85)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNetvrsion.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNetvrsion.setDescription('Network Version (netvrsion) This field indicates which version of the X.25 recommendation to which the network interface should adhere. Default value is 80.')
nvX25confPktbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confPktbuf.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confPktbuf.setDescription('Packet Buffer for Unbalance Window For unbalanced window enhancement,FRR will be generated when the number of unacknowledged transmitted packets reaches the value of the PKTBUF field. Default value is 0.')
nvX25confStndbytim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confStndbytim.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confStndbytim.setDescription('Standby Timer (stndbytim) How many seconds the box will wait before dropping dialout connection when there is no vc connected. Default value is 30.')
nvX25confRevacc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confRevacc.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confRevacc.setDescription('Reverse Charging Acceptance (revacc) In an X.25 DTE configuration,this field defines whether an incoming call indicating reverse charging is passed up to the Network Bus or rejected immediately. In an X.25 DCE configuration,it indicates whether a reverse charging call to the DTE should be passed through or cleared. In X.75 configurations this field has no significance. Default value is yes (1+1).')
nvX25confThruneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confThruneg.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confThruneg.setDescription('Throughput Class Negotiation (thruneg) This field enables or disables negotiation of throughput classes. Default value is (0+1).')
nvX25confTx0 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx0.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confTx0.setDescription('Restart Request Timer (tx0) This field defines the value,in seconds,for restart indication timer#(T10 - DCE appearance) restart request timer####(T20 - DTE appearance) Recommended values are: T10 - 60s T20 - 180s Default value is 180.')
nvX25confTx1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx1.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confTx1.setDescription('Call Request Timer (tx1) This field defines the value,in seconds,for - incoming call timer######(T11 - DCE appearance) - call request timer#######(T21 - DTE appearance) Recommended values are: T11 - 180s T21 - 200s Default value is 200.')
nvX25confTx2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx2.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confTx2.setDescription('Reset Request Timer (tx2) This field defines the value,in seconds,for - reset indication timer###(T12 - DCE appearance) - reset request timer######(T22 - DTE appearance) Recommended values are: T12 - 60s T22 - 180s Default value is 180.')
nvX25confTx3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confTx3.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confTx3.setDescription('Clear Request Timer (tx3) This field defines the value,in seconds,for - clear indication timer###(T13 - DCE appearance) - clear request timer######(T23 - DTE appearance) Recommended values are: T13 - 60s T23 - 180s Default value is 180.')
nvX25confXtend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confXtend.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confXtend.setDescription('Extended Packet Numbering (xtend) This field allows the extended packet sequencing format (modulo 128) to be used. If this option is not selected,packet sequencing is modulo 8. Default value is no (0+1).')
nvX25confNuirtg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confNuirtg.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confNuirtg.setDescription('If this field is set to yes,route is based on NUI using x25nuimap entries. ')
nvX25confIsdnaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 3, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25confIsdnaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25confIsdnaddr.setDescription('Get calling address from ISDN? Default value is no (0+1).')
nvX25nuimap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 4))
nvX25nuimapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25nuimapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapMaxRec.setDescription('total number of records allowed in database file.')
nvX25nuimapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25nuimapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapNumRec.setDescription('number of records in use.')
nvX25nuimapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3), )
if mibBuilder.loadTexts: nvX25nuimapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapTable.setDescription('x25nuimap file.')
nvX25nuimapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvX25nuimapIndex"))
if mibBuilder.loadTexts: nvX25nuimapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapEntry.setDescription('x25nuimap record.')
nvX25nuimapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvX25nuimapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapIndex.setDescription('Index of x25nuimap record')
nvX25nuimapNui = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 58))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25nuimapNui.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapNui.setDescription(' NUI value to match ')
nvX25nuimapCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25nuimapCalled.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapCalled.setDescription(' Called Network Address ')
nvX25nuimapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvX25nuimapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvX25nuimapStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvXbillconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 5))
nvXbillconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfMaxRec.setDescription('total number of records allowed in database file.')
nvXbillconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfNumRec.setDescription('number of records in use.')
nvXbillconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3), )
if mibBuilder.loadTexts: nvXbillconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfTable.setDescription('xbillconf file.')
nvXbillconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvXbillconfIndex"))
if mibBuilder.loadTexts: nvXbillconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfEntry.setDescription('xbillconf record, indexed by record number')
nvXbillconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfIndex.setDescription('Index of xbillconf record.')
nvXbillconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXbillconfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfEnable.setDescription('Enable/Disable xbillstat accounting.')
nvXbillconfSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXbillconfSegsize.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfSegsize.setDescription('Segment size.')
nvXbillconfBilltime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXbillconfBilltime.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillconfBilltime.setDescription('Time xbillstat records will remain open for.')
nvXnuaset = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 6))
nvXnuasetMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXnuasetMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetMaxRec.setDescription('total number of records allowed in database file.')
nvXnuasetNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXnuasetNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetNumRec.setDescription('number of records in use.')
nvXnuasetTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3), )
if mibBuilder.loadTexts: nvXnuasetTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetTable.setDescription('xnuaset file.')
nvXnuasetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvXnuasetIndex"))
if mibBuilder.loadTexts: nvXnuasetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetEntry.setDescription('xnuaset record, indexed by record number')
nvXnuasetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXnuasetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetIndex.setDescription('Index of xnuaset record.')
nvXnuasetSetname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetSetname.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetSetname.setDescription('Nuaset name')
nvXnuasetNua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetNua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetNua1.setDescription('Nua1.')
nvXnuasetNua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetNua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetNua2.setDescription('Nua2.')
nvXnuasetNua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetNua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetNua3.setDescription('Nua3.')
nvXnuasetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvXnuasetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvXnuasetStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvXbillstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 10, 7))
nvXbillstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatMaxRec.setDescription('total number of records allowed in database file.')
nvXbillstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatNumRec.setDescription('number of records in use.')
nvXbillstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3), )
if mibBuilder.loadTexts: nvXbillstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatTable.setDescription('xbillstat file.')
nvXbillstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvXbillstatIndex"))
if mibBuilder.loadTexts: nvXbillstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatEntry.setDescription('xbillstat record, indexed by record number')
nvXbillstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatIndex.setDescription('Index of xbillstat record.')
nvXbillstatNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatNodeid.setDescription('Node Identifier')
nvXbillstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatDate.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatDate.setDescription('Date of Record Generation.')
nvXbillstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatTime.setDescription('Time of Record Generation.')
nvXbillstatNuaset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNuaset.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatNuaset.setDescription('Nuaset used to generate this record.')
nvXbillstatDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatDatarate.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatDatarate.setDescription('ISDN speed')
nvXbillstatTxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatTxseg.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatTxseg.setDescription('Number of transmitted X.25 segments.')
nvXbillstatRxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatRxseg.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatRxseg.setDescription('Number of received X.25 segments.')
nvXbillstatRxcallc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatRxcallc.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatRxcallc.setDescription('Number of X.25 Calls Accepted by the Host.')
nvXbillstatHostclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatHostclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatHostclr.setDescription('Number of X.25 Calls Cleared by the Host.')
nvXbillstatNetclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatNetclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatNetclr.setDescription('Number of X.25 Calls Cleared by the Network.')
nvXbillstatTxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatTxpak.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatTxpak.setDescription('Number of Transmitted X.25 packets.')
nvXbillstatRxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatRxpak.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatRxpak.setDescription('Number of X.25 packets received.')
nvXbillstatLess5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatLess5.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatLess5.setDescription('Number of ISDN calls less that 5 secs.')
nvXbillstat5to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstat5to10.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstat5to10.setDescription('Number of ISDN calls from 5 to 10 secs.')
nvXbillstat10to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstat10to15.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstat10to15.setDescription('Number of ISDN calls from 10 to 15 secs.')
nvXbillstat15to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstat15to20.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstat15to20.setDescription('Number of ISDN calls from 15 to 20 secs.')
nvXbillstatGrtr20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatGrtr20.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatGrtr20.setDescription('Number of ISDN calls greater than 20 secs.')
nvXbillstatClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 10, 7, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvXbillstatClosed.setStatus('mandatory')
if mibBuilder.loadTexts: nvXbillstatClosed.setDescription('Record open or closed.')
nvPriconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 1))
nvPriconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfMaxRec.setDescription('total number of records allowed in database file.')
nvPriconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfNumRec.setDescription('number of records in use.')
nvPriconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3), )
if mibBuilder.loadTexts: nvPriconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfTable.setDescription('priconf file.')
nvPriconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPriconfIndex"))
if mibBuilder.loadTexts: nvPriconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfEntry.setDescription('priconf record, indexed by record number')
nvPriconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfIndex.setDescription('Index of priconf record.')
nvPriconfPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPriconfPriname.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfPriname.setDescription('PRI name.')
nvPriconfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 18, 20, 22, 24, 27, 33))).clone(namedValues=NamedValues(("none", 1), ("att4ess", 17), ("att5ess", 18), ("dms100", 20), ("ntt", 22), ("v1tr6", 24), ("net5", 27), ("vn3", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfSwitch.setDescription('Switch type.')
nvPriconfDsltype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("switched", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDsltype.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfDsltype.setDescription('DSL type.')
nvPriconfRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("caladr", 1), ("subadr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfRouting.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfRouting.setDescription('Routing address.')
nvPriconfDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDliname.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfDliname.setDescription('DLI name.')
nvPriconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfRsrcpool.setDescription('B channel pool name.')
nvPriconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvPriconfBusyout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfBusyout.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfBusyout.setDescription('specifies whether new calls should be rejected.')
nvPriconfEstlink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfEstlink.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfEstlink.setDescription('Added T1/E1 L1/L2 recovery')
nvPriconfDlirst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDlirst.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfDlirst.setDescription('Added T1/E1 L1/L2 recovery')
nvPriconfDchrst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfDchrst.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfDchrst.setDescription('Added T1/E1 L1/L2 recovery')
nvPriconfNfasdch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNfasdch.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfNfasdch.setDescription('NFAS type primary or backup 1- No NFAS interface configured 2- Primary NFAS interface 3- Secondary NFAS interface ')
nvPriconfNfasif = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNfasif.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfNfasif.setDescription('NFAS Interface numbers')
nvPriconfNfasgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNfasgrp.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfNfasgrp.setDescription('NFAS group numbers')
nvPriconfTsshift = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfTsshift.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfTsshift.setDescription(' Run T1 timeslot format on E1 lines')
nvPriconfX25diags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfX25diags.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfX25diags.setDescription('String defining X.25 diagnostic lookup table')
nvPriconfNumbtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("unknown", 2), ("internat", 3), ("national", 4), ("netspec", 5), ("subscrib", 6), ("abbrev", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNumbtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfNumbtype.setDescription('Type of Number.')
nvPriconfNumbplan = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 10, 11))).clone(namedValues=NamedValues(("unknown", 2), ("isdn", 3), ("data", 5), ("telex", 6), ("natstand", 10), ("private", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfNumbplan.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfNumbplan.setDescription('Numbering plan.')
nvPriconfModemcap = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speech", 1), ("audio3k", 2), ("audio7k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfModemcap.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfModemcap.setDescription('Speech or audio(3.1 or 7 kHz).')
nvPriconfL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfL1prot.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfL1prot.setDescription('L1 protocol enabled.')
nvPriconfStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPriconfStandby.setStatus('mandatory')
if mibBuilder.loadTexts: nvPriconfStandby.setDescription('standby enabled.')
nvPristat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 2))
nvPristatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatMaxRec.setDescription('total number of records allowed in database file.')
nvPristatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNumRec.setDescription('number of records in use.')
nvPristatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3), )
if mibBuilder.loadTexts: nvPristatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatTable.setDescription('pristat file.')
nvPristatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPristatIndex"))
if mibBuilder.loadTexts: nvPristatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatEntry.setDescription('pristat record, indexed by record number')
nvPristatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatIndex.setDescription('Index of pristat record.')
nvPristatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatPriname.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatPriname.setDescription('PRI name.')
nvPristatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatStatus.setDescription('interface status.')
nvPristatCallrecvs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallrecvs.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallrecvs.setDescription('number of calls received.')
nvPristatCallaceps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallaceps.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallaceps.setDescription('number of incoming connections.')
nvPristatCallrejs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallrejs.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallrejs.setDescription('number of incoming calls rejected.')
nvPristatCallinrels = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallinrels.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallinrels.setDescription('number of inside released connections.')
nvPristatCalloutrels = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCalloutrels.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCalloutrels.setDescription('number of outside released connections.')
nvPristatEstreq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatEstreq.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatEstreq.setDescription('Number of established requests.')
nvPristatDlirst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDlirst.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatDlirst.setDescription('Number of dli chip resets.')
nvPristatDchrst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDchrst.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatDchrst.setDescription('Number of d-channel resets.')
nvPristatCallcur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallcur.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallcur.setDescription('Number of current calls.')
nvPristatDchanup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDchanup.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatDchanup.setDescription('Number in seconds d channel comes up.')
nvPristatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatDtreset.setDescription('date & time statistics last reset')
nvPristatNcurincom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNcurincom.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNcurincom.setDescription('Current Number of simulataneous incoming calls.')
nvPristatNcuroutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNcuroutgo.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNcuroutgo.setDescription('Current Number of simulataneous outgoing calls.')
nvPristatNrxsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxsetup.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNrxsetup.setDescription('Number of SETUP messages received.')
nvPristatMaxrsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxrsetup.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatMaxrsetup.setDescription('Max number of outstanding SETUP messages for dial-in.')
nvPristatNrxsetupa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxsetupa.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNrxsetupa.setDescription('Number of aborted rx SETUP messages.')
nvPristatNtxconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxconn.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNtxconn.setDescription('Number of CONNECT messages set for dial-in.')
nvPristatNtxbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxbusy.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNtxbusy.setDescription('Number of dial-in fail due to busy.')
nvPristatNtxsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxsetup.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNtxsetup.setDescription('Number of SEUTP messages sent for dial-out.')
nvPristatMaxtsetup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxtsetup.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatMaxtsetup.setDescription('Max number of outstanding tx SETUP messages.')
nvPristatNtxsetupa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNtxsetupa.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNtxsetupa.setDescription('Number of aborted tx SETUP messages.')
nvPristatNrxconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxconn.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNrxconn.setDescription('Number of CONNECT recieved for dial-in.')
nvPristatNrxbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNrxbusy.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNrxbusy.setDescription('Number of dial-out fails due to busy.')
nvPristatNnoanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatNnoanswer.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatNnoanswer.setDescription('Number of fail no answer for dialout.')
nvPristatMaxincom = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxincom.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatMaxincom.setDescription('Maximum number of simultaneous incoming calls.')
nvPristatMaxoutgo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatMaxoutgo.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatMaxoutgo.setDescription('Maximum number of simultaneous outgoing calls.')
nvPristatCallsent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallsent.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallsent.setDescription('Number of outgoing calls sent.')
nvPristatCallconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallconn.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallconn.setDescription('Number of outgoing calls connected.')
nvPristatCallfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPristatCallfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvPristatCallfail.setDescription('Number of outgoing calls failed.')
nvPricstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 3))
nvPricstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatMaxRec.setDescription('total number of records allowed in database file.')
nvPricstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatNumRec.setDescription('number of records in use.')
nvPricstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3), )
if mibBuilder.loadTexts: nvPricstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatTable.setDescription('pricstat file.')
nvPricstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPricstatIndex"))
if mibBuilder.loadTexts: nvPricstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatEntry.setDescription('pricstat record, indexed by record number')
nvPricstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatIndex.setDescription('Index of pricstat record.')
nvPricstatSeqno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatSeqno.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatSeqno.setDescription('sequence number.')
nvPricstatCallid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCallid.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatCallid.setDescription('Call ID number.')
nvPricstatRate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatRate.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatRate.setDescription('data rate used.')
nvPricstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disc", 1), ("idle", 2), ("waiting", 3), ("active", 4), ("clearing", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatState.setDescription('channel state.')
nvPricstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatPriname.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatPriname.setDescription('PRI interface name.')
nvPricstatCalldir = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("out", 2), ("in", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCalldir.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatCalldir.setDescription('call direction.')
nvPricstatContype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 25, 256))).clone(namedValues=NamedValues(("audio", 1), ("data", 9), ("video", 25), ("noType", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatContype.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatContype.setDescription('connectuon type.')
nvPricstatL1prot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 9, 10))).clone(namedValues=NamedValues(("none", 1), ("v110", 2), ("g711-M", 3), ("g711-A", 4), ("g712", 5), ("h221", 6), ("nON-CCITT", 8), ("v120", 9), ("x31", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatL1prot.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatL1prot.setDescription('layer 1 protocol.')
nvPricstatCallingno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCallingno.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatCallingno.setDescription('Calling number.')
nvPricstatCalledno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatCalledno.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatCalledno.setDescription('Called number.')
nvPricstatBchanl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricstatBchanl.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricstatBchanl.setDescription('B channel used.')
nvPridstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 4))
nvPridstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatMaxRec.setDescription('total number of records allowed in database file.')
nvPridstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatNumRec.setDescription('number of records in use.')
nvPridstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3), )
if mibBuilder.loadTexts: nvPridstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatTable.setDescription('pridstat file.')
nvPridstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPridstatIndex"))
if mibBuilder.loadTexts: nvPridstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatEntry.setDescription('pridstat record, indexed by record number')
nvPridstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatIndex.setDescription('Index of pridstat record.')
nvPridstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatPriname.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatPriname.setDescription('PRI interface name.')
nvPridstatEventno = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 255, 253))).clone(namedValues=NamedValues(("channelMissing", 114), ("outcallEstablished", 115), ("noTimeslotInfoRcvd", 116), ("channelNotFound", 117), ("invalidEvent", 118), ("unknownEvent", 119), ("noChannelAvail", 120), ("directoryNumMismatch", 121), ("originatorNumMismatch", 122), ("mandatoryInfoElemMissing", 123), ("calledNumBusy", 124), ("callingNumBusy", 125), ("incallEstablished", 126), ("dchannelConnect", 127), ("channelCollision", 128), ("noTimeslotAvailable", 129), ("reassignTimeslots", 130), ("undefinedString", 255), ("undefinedEvent", 253)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatEventno.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatEventno.setDescription('event number.')
nvPridstatProtlayer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lapd", 1), ("l3err", 2), ("l3caus", 3), ("l3call", 4), ("ckRtr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatProtlayer.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatProtlayer.setDescription('layer where event occurred.')
nvPridstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatTime.setDescription('time when event occurred.')
nvPridstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPridstatDate.setStatus('mandatory')
if mibBuilder.loadTexts: nvPridstatDate.setDescription('date where event occurred.')
nvPricuconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 5))
nvPricuconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricuconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfMaxRec.setDescription('total number of records allowed in database file.')
nvPricuconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricuconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfNumRec.setDescription('number of records in use.')
nvPricuconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3), )
if mibBuilder.loadTexts: nvPricuconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfTable.setDescription('pricuconf file.')
nvPricuconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPricuconfIndex"))
if mibBuilder.loadTexts: nvPricuconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfEntry.setDescription('pricuconf record, indexed by record number')
nvPricuconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricuconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfIndex.setDescription('Index of pricuconf record.')
nvPricuconfThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh1.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfThresh1.setDescription('Threshold.')
nvPricuconfThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(31, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh2.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfThresh2.setDescription('Threshold.')
nvPricuconfThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(61, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh3.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfThresh3.setDescription('Threshold.')
nvPricuconfThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(91, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfThresh4.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfThresh4.setDescription('Threshold.')
nvPricuconfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfInterval.setDescription('Time period.')
nvPricuconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPricuconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricuconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvPricustat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 11, 6))
nvPricustatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatMaxRec.setDescription('total number of records allowed in database file.')
nvPricustatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatNumRec.setDescription('number of records in use.')
nvPricustatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3), )
if mibBuilder.loadTexts: nvPricustatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatTable.setDescription('pricustat file.')
nvPricustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPricustatIndex"))
if mibBuilder.loadTexts: nvPricustatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatEntry.setDescription('pricustat record, indexed by record number')
nvPricustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatIndex.setDescription('Index of pricustat record.')
nvPricustatThresh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh1.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatThresh1.setDescription('Number of calls received.')
nvPricustatCounter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter1.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatCounter1.setDescription('Number of calls received.')
nvPricustatThresh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh2.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatThresh2.setDescription('Number of incoming connections.')
nvPricustatCounter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter2.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatCounter2.setDescription('Number of incoming connections.')
nvPricustatThresh3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh3.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatThresh3.setDescription('Number of incoming calls rejected.')
nvPricustatCounter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter3.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatCounter3.setDescription('Number of incoming calls rejected.')
nvPricustatThresh4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatThresh4.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatThresh4.setDescription('Number of inside released connections.')
nvPricustatCounter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatCounter4.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatCounter4.setDescription('Number of inside released connections.')
nvPricustatResettime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 11, 6, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPricustatResettime.setStatus('mandatory')
if mibBuilder.loadTexts: nvPricustatResettime.setDescription('Calling number.')
nvPppstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 1))
nvPppstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatMaxRec.setDescription('total number of records allowed in database file.')
nvPppstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatNumRec.setDescription('number of records in use.')
nvPppstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3), )
if mibBuilder.loadTexts: nvPppstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatTable.setDescription('pppstat file.')
nvPppstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPppstatIndex"))
if mibBuilder.loadTexts: nvPppstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatEntry.setDescription('pppstat record.')
nvPppstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatIndex.setDescription('Index of pppstat record')
nvPppstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatName.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatName.setDescription("statistics Name (name) statistics name and number (ie,'ps1') ")
nvPppstatPppAdminS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatPppAdminS.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatPppAdminS.setDescription('ppp admin status (pppAdminS) lcp link Admin Status down/up. ')
nvPppstatLcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatLcpOperS.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatLcpOperS.setDescription('lcp operation status (lcpOperS) lcp link Admin Status down/up. ')
nvPppstatIpcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIpcpOperS.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatIpcpOperS.setDescription('ipcp operation status (ipcpOperS) ipcp link status down/up. ')
nvPppstatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInOctets.setDescription('Octets received (InOctets) The number of good data bytes received Statistic is zeroed at startup time.')
nvPppstatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInPkts.setDescription('good packets received (InPkts) The number of good received frames Statistic is zeroed at startup time.')
nvPppstatInDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInDiscard.setDescription('discarded good packets (InDiscard) The total number of good frames dicarded due to lack of buffers Statistic is zeroed at startup time.')
nvPppstatInError = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInError.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInError.setDescription('Bad packets received (InError) The total number of frames received due to crc,format etc. Statistic is zeroed at startup time.')
nvPppstatInEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInEch.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInEch.setDescription('received echo requests (InEch) The number of echo request packets recieved. Statistic is zeroed at startup time.')
nvPppstatInEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInEchRp.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInEchRp.setDescription('echo reply received (InEchRp) The num of packets Rxed due to the echo-req sent (software loopback) Statistic is zeroed at startup time.')
nvPppstatInDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInDiscRq.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInDiscRq.setDescription('discard requests Rxed (InDiscRq) The number of discard request packets received. Statistic is zeroed at startup time.')
nvPppstatUnKnwnPr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatUnKnwnPr.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatUnKnwnPr.setDescription('rxed Unknown protocol (UnKnwnPr) The number of link quality reports received on this PPP link Statistic is zeroed at startup time.')
nvPppstatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutOctets.setDescription('Octets transmitted (OutOctets) The number of bytes transmitted on the ppp link. Statistic is zeroed at startup time.')
nvPppstatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutPkts.setDescription('Packets transmitted (OutPkts) The number of pakets transmitted on the PPP link. Statistic is zeroed at startup time.')
nvPppstatOutDiscrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutDiscrd.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutDiscrd.setDescription('output errors (OutDiscrd) The number of outbound pkts droped due to lack of buffers. Statistic is zeroed at startup time.')
nvPppstatOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutErrors.setDescription('output errors (OutErrors) The number of outbound pkts could not be txed due to errors. Statistic is zeroed at startup time.')
nvPppstatOutEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutEch.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutEch.setDescription('echo request pkts transmitted (OutEch) The number of lcp echo request packets transmitted Statistic is zeroed at startup time.')
nvPppstatOutEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutEchRp.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutEchRp.setDescription('echo reply transmitted (OutEchRp) The num of echo reply packets Txed due to the echo-req Statistic is zeroed at startup time.')
nvPppstatOutDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutDiscRq.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutDiscRq.setDescription('discard requests Txed (OutDiscRq) The number of discard request packets received. Statistic is zeroed at startup time.')
nvPppstatUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatUserName.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatUserName.setDescription('authenticated username of remote user (username).')
nvPppstatIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatIpAddr.setDescription('IP address in use on this PPP link (ipaddr).')
nvPppstatBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatBundleId.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatBundleId.setDescription('Bundle identifier (mpstat record id) of multilink PPP bundle in which this link is being used if nvPppstatMultilink is yes (bundleid).')
nvPppstatIpcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatIpcp.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatIpcp.setDescription('ipcp record number used for this link.')
nvPppstatMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatMultilink.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatMultilink.setDescription('Set to yes if this LCP is in use in a multilink bundle.')
nvPppstatCcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatCcpOperS.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatCcpOperS.setDescription('ccp Operation status.')
nvPppstatComprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPppstatComprot.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatComprot.setDescription('Compression protocol in use.')
nvPppstatTnnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("l2tpwt", 2), ("l2tpcn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatTnnlState.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatTnnlState.setDescription('State of a tunneled session.')
nvPppstatTnnlId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatTnnlId.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatTnnlId.setDescription('Tunnel ID assosiated with the tunneled session.')
nvPppstatCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatCallId.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatCallId.setDescription('Call ID assosiated with the tunneled session.')
nvPppstatOutCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutCmPcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutCmPcnt.setDescription('Percent compression on tx.')
nvPppstatInCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatInCmPcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatInCmPcnt.setDescription('Percent compression on rx.')
nvPppstatOutExpnds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatOutExpnds.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatOutExpnds.setDescription('Number of packets expanded by compression.')
nvPppstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatDtreset.setDescription('date & time statistics last reset')
nvPppstatRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 1, 3, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPppstatRealm.setStatus('mandatory')
if mibBuilder.loadTexts: nvPppstatRealm.setDescription('First 64 characters of the realm if parsing NAI.')
nvLcpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 2))
nvLcpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLcpconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfMaxRec.setDescription('total number of records allowed in database file.')
nvLcpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLcpconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfNumRec.setDescription('number of records in use.')
nvLcpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3), )
if mibBuilder.loadTexts: nvLcpconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfTable.setDescription('lcpconf file.')
nvLcpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvLcpconfIndex"))
if mibBuilder.loadTexts: nvLcpconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfEntry.setDescription('lcpconf record.')
nvLcpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvLcpconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfIndex.setDescription('Index of lcpconf record')
nvLcpconfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfPort.setDescription('Link Name (port). ')
nvLcpconfRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfRsrcpool.setDescription('Resource Poolname. ')
nvLcpconfItiudata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfItiudata.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfItiudata.setDescription('iti user data (itiudata) ')
nvLcpconfAccm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfAccm.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfAccm.setDescription('Async. Control Char Map (accm) ')
nvLcpconfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sync", 1), ("async", 2), ("tpp", 3), ("x25", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfMode.setDescription('interface type (mode) Default value is psync (0+1).')
nvLcpconfPfc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfPfc.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfPfc.setDescription('protocol field compression (pfc) Default value is yes (1+1).')
nvLcpconfAcfc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfAcfc.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfAcfc.setDescription('addr. ctrl fields comp. (acfc) Default value is yes (1+1).')
nvLcpconfRestartim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfRestartim.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfRestartim.setDescription('lcp reqests restart (restartim) Default value is 3.')
nvLcpconfMaxterm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMaxterm.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfMaxterm.setDescription('terminate request count (maxterm) Default value is 2.')
nvLcpconfMaxcfg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMaxcfg.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfMaxcfg.setDescription('configure request count (maxcfg) Default value is 10.')
nvLcpconfMaxnak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMaxnak.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfMaxnak.setDescription('config-Nak send (maxnak) Default value is 10.')
nvLcpconfInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfInactivty.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfInactivty.setDescription('nbus call inact timer (inactivty) Default value is 0.')
nvLcpconfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3), ("either", 4), ("telno", 5), ("prxypap", 6), ("prxychap", 7), ("prxyeith", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfAuth.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfAuth.setDescription('ppp authentication. none, 1, Disable authentication pap, 2, Password Authentication Protocol chap, 3, Challenge Handshake Authentication Protocol either, 4, First use CHAP, then try PAP telno, 5, Telephone Number Authentication prxypap, 6, Proxy PAP partial authentication prxychap, 7, Proxy CHAP partial authentication prxyeith, 8 Proxy PAP or CHAP partial authentication ')
nvLcpconfSecurtmr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfSecurtmr.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfSecurtmr.setDescription('security timer.')
nvLcpconfChalint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfChalint.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfChalint.setDescription('rechallenge interval.')
nvLcpconfMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfMultilink.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfMultilink.setDescription('If yes this LCP is available for use in a multilink bundle.')
nvLcpconfpppTrapEn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfpppTrapEn.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfpppTrapEn.setDescription('If yes then trap generation is enabled for LCP state changes and other PPP events.')
nvLcpconfComprot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfComprot1.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfComprot1.setDescription('First choice for compression.')
nvLcpconfComprot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfComprot2.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfComprot2.setDescription('Second choice for compression.')
nvLcpconfUsrdelim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfUsrdelim.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfUsrdelim.setDescription('Delimiter for NAI parsing')
nvLcpconfNaifwd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useronly", 1), ("fullnai", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfNaifwd.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfNaifwd.setDescription('Forward full NAI or only username')
nvLcpconfTxmaxbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfTxmaxbuf.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfTxmaxbuf.setDescription('transmit buffering')
nvLcpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvLcpconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvLcpconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvMpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 3))
nvMpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfMaxRec.setDescription('total number of records allowed in database file.')
nvMpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfNumRec.setDescription('number of records in use.')
nvMpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3), )
if mibBuilder.loadTexts: nvMpconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfTable.setDescription('mpconf file.')
nvMpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMpconfIndex"))
if mibBuilder.loadTexts: nvMpconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfEntry.setDescription('mpconf record.')
nvMpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfIndex.setDescription('Index of Mpconf record.')
nvMpconfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfProfile.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfProfile.setDescription('Must match lcp record itiudata (async ppp) or rsrcpool (sync ppp) field for multilink to operate on the lcp.')
nvMpconfAdminS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfAdminS.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfAdminS.setDescription('If set to enable no multilink sessions can be started from LCP records which match the nvMpconfProfile of this record.')
nvMpconfTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTrapEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfTrapEnable.setDescription('If set to yes Nevada enterprise traps will be generated for certain events occuring relative to multilink bundles. For example, when a new link joins a multilink bundle. No traps for multilink are generated if set to no.')
nvMpconfLnkLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfLnkLimit.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfLnkLimit.setDescription('The maximum number of links permitted in multilink bundles created from this mpconf record.')
nvMpconfTxFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTxFrag.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfTxFrag.setDescription('When set to yes PPP datagrams larger than nvMpconfTxFragMin bytes will be fragmented before transmission on the links in the bundle.')
nvMpconfTxFragMin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTxFragMin.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfTxFragMin.setDescription('PPP datagrams smaller than mvMpconfTxFragMin bytes will not be fragmented before transmission regardless of the setting of nvMpconfTxFrag.')
nvMpconfTxShortSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfTxShortSeq.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfTxShortSeq.setDescription('When set to yes the Nevada will attempt to negotiate the short sequence number option on multilink bundles created from this record. When set to no the Nevada will reject attempts to negotiate short sequence numbers.')
nvMpconfComprot1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4), ("stacopt0", 5), ("any", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfComprot1.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfComprot1.setDescription('First choice for compression.')
nvMpconfComprot2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("stacopt4", 2), ("stacopt3", 3), ("mppc", 4), ("stacopt0", 5), ("any", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfComprot2.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfComprot2.setDescription('Second choice for compression.')
nvMpconfComptype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bundle", 1), ("lnkbylnk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfComptype.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfComptype.setDescription('Second choice for compression.')
nvMpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvMpconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvMpstatPart1 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 4))
nvMpstatPart1MaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1MaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1MaxRec.setDescription('total number of records allowed in database file.')
nvMpstatPart1NumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1NumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1NumRec.setDescription('number of records in use.')
nvMpstatPart1Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3), )
if mibBuilder.loadTexts: nvMpstatPart1Table.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Table.setDescription('mpstatPart1 file.')
nvMpstatPart1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMpstatPart1Index"))
if mibBuilder.loadTexts: nvMpstatPart1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Entry.setDescription('mpstatPart1 record.')
nvMpstatPart1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Index.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Index.setDescription('Index of MpstatPart1 record')
nvMpstatPart1UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1UserName.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1UserName.setDescription('Authenticated name of remote peer.')
nvMpstatPart1IpcpOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1IpcpOperS.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1IpcpOperS.setDescription('Ipcp operation status (ipcpOperS)- IPCP protocol up or not.')
nvMpstatPart1Ipcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Ipcp.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Ipcp.setDescription('ipcpconf file record number in use for this multilink bundle (ipcp).')
nvMpstatPart1IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1IpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1IpAddress.setDescription('IP address in use on this multilink bundle (ipaddr).')
nvMpstatPart1Profile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Profile.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Profile.setDescription('nvMpconfProfile value of nvMpconfTable entry (mpconf record) used to create this multilink bundle (profile).')
nvMpstatPart1RmtClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 1), ("local", 2), ("ipaddr", 3), ("global", 4), ("magicnum", 5), ("dirnum", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtClass.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1RmtClass.setDescription('Class of endpoint discriminator in use on remote (peer) end of multilink bundle (rmtClass).')
nvMpstatPart1RmtDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtDisc.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1RmtDisc.setDescription('Value of endpoint discriminator in use on remote (peer) end of multilink bundle (rmtDisc).')
nvMpstatPart1LocClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("null", 1), ("local", 2), ("ipaddr", 3), ("global", 4), ("magicnum", 5), ("dirnum", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocClass.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1LocClass.setDescription('Class of endpoint discriminator in use on local (Nevada) end of multilink bundle (locClass).')
nvMpstatPart1LocDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocDisc.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1LocDisc.setDescription('Value of endpoint discriminator in use on local (Nevada) end of multilink bundle (rmtDisc).')
nvMpstatPart1RmtMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtMRRU.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1RmtMRRU.setDescription('Value for the Maximum Reassembled Receive Unit negotiated for remote (peer) end of multilink bundle (rmtMRRU).')
nvMpstatPart1LocMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocMRRU.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1LocMRRU.setDescription('Value for the Maximum Reassembled Receive Unit negotiated for local (Nevada) end of multilink bundle (locMRRU).')
nvMpstatPart1RmtSeqS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1RmtSeqS.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1RmtSeqS.setDescription('Indicates whether short or long sequence numbers are in use for multilink datagrams transmitted to the peer by the Nevada (rmtSeq).')
nvMpstatPart1LocSeqS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1LocSeqS.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1LocSeqS.setDescription('Indicates whether short or long sequence numbers are in use for multilink datagrams received by the Nevada (locSeq).')
nvMpstatPart1Link1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link1.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link1.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link2.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link2.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link3.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link3.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link4.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link4.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link5.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link5.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link6.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link6.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link7.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link7.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link8.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link8.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link9.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link9.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link10.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link10.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link11.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link11.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link12.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link12.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link13.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link13.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link14.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link14.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link15.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link15.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart1Link16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 4, 3, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart1Link16.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart1Link16.setDescription('The LCP record number corresponding to nth link in the multilink bundle (link n).')
nvMpstatPart2 = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 12, 5))
nvMpstatPart2MaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2MaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2MaxRec.setDescription('total number of records allowed in database file.')
nvMpstatPart2NumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2NumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2NumRec.setDescription('number of records in use.')
nvMpstatPart2Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3), )
if mibBuilder.loadTexts: nvMpstatPart2Table.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2Table.setDescription('mpstatPart2 file.')
nvMpstatPart2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvMpstatPart2Index"))
if mibBuilder.loadTexts: nvMpstatPart2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2Entry.setDescription('mpstatPart2 record.')
nvMpstatPart2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2Index.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2Index.setDescription('Index of MpstatPart2 record')
nvMpstatPart2InOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InOctets.setDescription('Octets received (InOctets) The number of good data bytes received Statistic is zeroed at startup time.')
nvMpstatPart2InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InPkts.setDescription('good packets received (InPkts) The number of good received frames Statistic is zeroed at startup time.')
nvMpstatPart2InBfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InBfrags.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InBfrags.setDescription('The number of good received multilink frames with the B bit set in the multilink header (beginning fragment). Statistic is zeroed at startup time.')
nvMpstatPart2InEfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InEfrags.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InEfrags.setDescription('The number of good received multilink frames with the E bit set in the multilink header (ending fragment) . Statistic is zeroed at startup time.')
nvMpstatPart2InMfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InMfrags.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InMfrags.setDescription('The number of good received multilink frames with neither the B nor the E bit set in the multilink header (middle fragment). Statistic is zeroed at startup time.')
nvMpstatPart2InRsmErr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InRsmErr.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InRsmErr.setDescription('number of times the multilink receive algorithm detected one or more lost PPP datagrams (InRsmErr). Statistic is zeroed at startup time.')
nvMpstatPart2InDiscrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InDiscrd.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InDiscrd.setDescription('discarded good packets (InDiscrd) The total number of good frames dicarded due to lack of buffers Statistic is zeroed at startup time.')
nvMpstatPart2InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InErrors.setDescription('Bad packets received (InError) The total number of frames received with errors due to crc,format etc. Statistic is zeroed at startup time.')
nvMpstatPart2InEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InEch.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InEch.setDescription('received echo requests (InEch) The number of echo request packets recieved. Statistic is zeroed at startup time.')
nvMpstatPart2InEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InEchRp.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InEchRp.setDescription('echo reply received (InEchRp) The num of packets Rxed due to the echo-req sent (software loopback) Statistic is zeroed at startup time.')
nvMpstatPart2InDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InDiscRq.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InDiscRq.setDescription('discard requests Rxed (InDiscRq) The number of discard request packets received. Statistic is zeroed at startup time.')
nvMpstatPart2UnKnwnPr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2UnKnwnPr.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2UnKnwnPr.setDescription('rxed Unknown protocol (UnKnwnPr) The number of link quality reports received on this PPP link Statistic is zeroed at startup time.')
nvMpstatPart2OutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutOctets.setDescription('Octets transmitted (OutOctets) The number of bytes transmitted on the ppp link. Statistic is zeroed at startup time.')
nvMpstatPart2OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutPkts.setDescription('Packets transmitted (OutPkts) The number of pakets transmitted on the PPP link. Statistic is zeroed at startup time.')
nvMpstatPart2OutBfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutBfrags.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutBfrags.setDescription('The number of multilink frames transmitted with the B bit set in the multilink header (beginning fragment). Statistic is zeroed at startup time.')
nvMpstatPart2OutEfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutEfrags.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutEfrags.setDescription('The number of multilink frames transmitted with the E bit set in the multilink header (ending fragment) . Statistic is zeroed at startup time.')
nvMpstatPart2OutMfrags = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutMfrags.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutMfrags.setDescription('The number of multilink frames transmitted with neither the B nor the E bit set in the multilink header (middle fragment). Statistic is zeroed at startup time.')
nvMpstatPart2OutDiscrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutDiscrd.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutDiscrd.setDescription('output errors (OutDiscrd) The number of outbound pkts droped due to lack of buffers. Statistic is zeroed at startup time.')
nvMpstatPart2OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutErrors.setDescription('output errors (OutErrors) The number of outbound pkts could not be txed due to errors. Statistic is zeroed at startup time.')
nvMpstatPart2OutEch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutEch.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutEch.setDescription('echo request pkts transmitted (OutEch) The number of lcp echo request packets transmitted Statistic is zeroed at startup time.')
nvMpstatPart2OutEchRp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutEchRp.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutEchRp.setDescription('echo reply transmitted (OutEchRp) The num of echo reply packets Txed due to the echo-req Statistic is zeroed at startup time.')
nvMpstatPart2OutDiscRq = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutDiscRq.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutDiscRq.setDescription('discard requests Txed (OutDiscRq) The number of discard request packets received. Statistic is zeroed at startup time.')
nvMpstatPart2OutCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutCmPcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutCmPcnt.setDescription('Percent compression on tx.')
nvMpstatPart2InCmPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2InCmPcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2InCmPcnt.setDescription('Percent compression on rx.')
nvMpstatPart2OutExpnds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2OutExpnds.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2OutExpnds.setDescription('Number of packets expanded by compression.')
nvMpstatPart2Dtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 12, 5, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvMpstatPart2Dtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvMpstatPart2Dtreset.setDescription('date & time statistics last reset')
nvElxstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 15, 1))
nvElxstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatMaxRec.setDescription('total number of records allowed in database file.')
nvElxstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatNumRec.setDescription('number of records in use.')
nvElxstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3), )
if mibBuilder.loadTexts: nvElxstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatTable.setDescription('elxstat file.')
nvElxstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvElxstatIndex"))
if mibBuilder.loadTexts: nvElxstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatEntry.setDescription('elxstat record.')
nvElxstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatIndex.setDescription('Index of elxstat record')
nvElxstatPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatPhysAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatPhysAddr.setDescription('Ethernet Physical Address (PhysAddr) This field contains the Ethernet address as configured at the factory. ')
nvElxstatAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatAdminStat.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatAdminStat.setDescription('Desired Interface state (AdminStat) The desired state of the interface. This field reflects the desired state of the interface as determined by the enable field of the ELXCONF file,as well as the ELX.UP and ELX.DOWN commands. ')
nvElxstatOperStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOperStat.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatOperStat.setDescription('Current Interface state (OperStat) The current operational state of the Ethernet interface. This is determined by the AdminStat and whether or not any transmit faults were detected. ')
nvElxstatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatInOctets.setDescription('Octets received on the interface (InOctets) The total number of octets received on the interface, including framing characters. Statistic is zeroed at startup time.')
nvElxstatInUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInUcasts.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatInUcasts.setDescription('Unicast packets delivered (InUcast) The number of subnetwork unicast packets delivered to a higher layer protocol. Statistic is zeroed at startup time.')
nvElxstatInNUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInNUcasts.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatInNUcasts.setDescription('Non unicast packets delivered (InNUcast) The number of non unicast,i.e.,subnetwork broadcast or subnetwork multicast,packets delivered to a higher layer protocol. Statistic is zeroed at startup time.')
nvElxstatInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatInDiscards.setDescription('Discarded input packets (InDiscard) The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher layer protocol. One possible reason for discarding such a packet could be to free up buffer space. Statistic is zeroed at startup time.')
nvElxstatInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatInErrors.setDescription('Error input packets (InError) The number of inbound packets that contained errors preventing them from being deliverable to a higher layer protocol. Statistic is zeroed at startup time.')
nvElxstatUnKnwnPrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatUnKnwnPrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatUnKnwnPrs.setDescription('Unknown protocol packets discarded (UnKnwnPr) The number of packets received via the interface which were discarded because of an unknown or unsupported protocol. Statistic is zeroed at startup time.')
nvElxstatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatOutOctets.setDescription('Octets transmitted from the interface (OutOctets) The total number of octets transmitted out the interface,including framing characters. Statistic is zeroed at startup time.')
nvElxstatOutUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutUcasts.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatOutUcasts.setDescription('Unicast packets transmitted (OutUcast) The total number of packets that higher level protocols requested be transmitted to a subnetwork unicast address, including those that were discarded or not sent. Statistic is zeroed at startup time.')
nvElxstatOutNUcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutNUcasts.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatOutNUcasts.setDescription('Non unicast packets transmitted (OutNUcast) The total number of packets that highel level protocols requested be transmitted to a non unicast,i.e.,a subnetwork broadcast or subnetwork multicast,address, including those that were discarded or not sent. Statistic is zeroed at startup time.')
nvElxstatOutDiscrds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutDiscrds.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatOutDiscrds.setDescription('Discarded output packets (OutDiscrd) The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space. Statistic is zeroed at startup time.')
nvElxstatOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatOutErrors.setDescription('Error output packets (OutErrors) The number of outbound packets that could not be transmitted because of errors. Statistic is zeroed at startup time.')
nvElxstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxstatDtreset.setDescription('date & time statistics last reset')
nvElxconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 15, 2))
nvElxconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxconfMaxRec.setDescription('total number of records allowed in database file.')
nvElxconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxconfNumRec.setDescription('number of records in use.')
nvElxconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3), )
if mibBuilder.loadTexts: nvElxconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxconfTable.setDescription('elxconf file.')
nvElxconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvElxconfIndex"))
if mibBuilder.loadTexts: nvElxconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxconfEntry.setDescription('elxconf record.')
nvElxconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvElxconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxconfIndex.setDescription('Index of elxconf record')
nvElxconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvElxconfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxconfEnable.setDescription('Ethernet interface enabled (enable) This field indicates whether or not the Ethernet interface should be enabled. Note that disabling the interface does not disable IP. IP may still route between its other networks,such as X.25 and Frame Relay. Default value is yes (1+1).')
nvElxconfInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 15, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvElxconfInactivty.setStatus('mandatory')
if mibBuilder.loadTexts: nvElxconfInactivty.setDescription('Inactivity test frame timer (inactivty) When this time in minutes has been exceeded with no activity on the Ethernet,a frame will be transmitted in order to check for transmit faults. Default value is 0.')
nvIpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 1))
nvIpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfMaxRec.setDescription('total number of records allowed in database file.')
nvIpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfNumRec.setDescription('number of records in use.')
nvIpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3), )
if mibBuilder.loadTexts: nvIpconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfTable.setDescription('ipconf file.')
nvIpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpconfIndex"))
if mibBuilder.loadTexts: nvIpconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfEntry.setDescription('ipconf record.')
nvIpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfIndex.setDescription('Index of ipconf record')
nvIpconfIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfIpaddr.setDescription('IP address of local LAN (ipaddr) This field is a 15 byte character string in IP dotted address format. ')
nvIpconfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfMask.setDescription('IP network mask (mask) This field is a 15 byte character string in IP dotted address format. ')
nvIpconfBcastaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfBcastaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfBcastaddr.setDescription('Outgoing broadcast IP address (bcastaddr) This field is a 15 byte character string in IP dotted address format. ')
nvIpconfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfMtu.setDescription('Maximum frame length on this interface (mtu) Default value is 1500.')
nvIpconfEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v2", 1), ("snap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfEncap.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfEncap.setDescription('Encapsulation type Default value is v2 (0+1).')
nvIpconfRoutprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9))).clone(namedValues=NamedValues(("none", 1), ("rip", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfRoutprot.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfRoutprot.setDescription('IP routing protocol (routprot).')
nvIpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvIpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 2))
nvIpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatMaxRec.setDescription('total number of records allowed in database file.')
nvIpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatNumRec.setDescription('number of records in use.')
nvIpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3), )
if mibBuilder.loadTexts: nvIpstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatTable.setDescription('ipstat file.')
nvIpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpstatIndex"))
if mibBuilder.loadTexts: nvIpstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatEntry.setDescription('ipstat record.')
nvIpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatIndex.setDescription('Index of ipstat record')
nvIpstatInRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInRxs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatInRxs.setDescription('Input datagrams received (InRx) The total number of input datagrams received from interfaces,including those received in error. Statistic is zeroed at startup time.')
nvIpstatInHdrErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInHdrErrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatInHdrErrs.setDescription('Input datagrams with header errors (InHdrErr) The number of input datagrams discarded due to errors in their IP headers,including bad checksums,version number mismatch,other format errors,time-to-live exceeded,errors discovered in processing their IP options,etc. Statistic is zeroed at startup time.')
nvIpstatInAdrErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInAdrErrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatInAdrErrs.setDescription("Input datagrams with address errors (InAdrErr) The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g.,0.0.0.0) and addresses of unsupported Classes (e.g.,Class E). For entities which are not IP Gateways and therefore do not forward datagrams,this counter includes datagrams discarded because the destination address was not a local address. Statistic is zeroed at startup time.")
nvIpstatForwDatas = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatForwDatas.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatForwDatas.setDescription('Input datagrams forwarded (ForwData) The number of input datagrams for which this entity was not their final IP destination,as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as IP Gateways,this counter will include only those packets which were Source-Routed via this entity,and the Source- Route option processing was successful. Statistic is zeroed at startup time.')
nvIpstatUnKnwnPrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatUnKnwnPrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatUnKnwnPrs.setDescription('Input datagrams with protocol errors (UnKnwnPr) The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol. Statistic is zeroed at startup time.')
nvIpstatInDiscrds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInDiscrds.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatInDiscrds.setDescription('Input datagrams with buffer errors (InDiscrd) The number of input IP datagrams for which no problems were encountered to prevent their continued processing,but which were discarded (e.g.,for lack of buffer space). Note that this counter does not include any datagrams discarded while waiting re-assembly. Statistic is zeroed at startup time.')
nvIpstatInDlvrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatInDlvrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatInDlvrs.setDescription('Input datagrams delivered (InDlvrs) The total number of input datagrams successfully delivered to IP user-protocols (including ICMP). Statistic is zeroed at startup time.')
nvIpstatOutRqsts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatOutRqsts.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatOutRqsts.setDescription('Local datagrams created (OutRqst) The total number of IP datagrams which local IP user protocols (including ICMP) supplied to IP in requests for transmission. Note that this counter does not include any datagrams counted in ForwData. Statistic is zeroed at startup time.')
nvIpstatOutDiscrds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatOutDiscrds.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatOutDiscrds.setDescription('Output datagrams with buffer errors (OutDiscrd) The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination,but which were discarded (e.g.,for lack of buffer space). Note that this counter would include datagrams counted in ForwData if any such packets met this (discretionary) discard criterion. Statistic is zeroed at startup time.')
nvIpstatOutNoRts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatOutNoRts.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatOutNoRts.setDescription("Output datagrams with address errors (OutNoRts) The number of IP datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ForwData which meet this `no-route' criterion. Note that this includes any datagrams which a host cannot route because all of its default gateways are down. Statistic is zeroed at startup time.")
nvIpstatReasmRqds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatReasmRqds.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatReasmRqds.setDescription('Received IP fragments (ReasmRqd) The number of IP fragments received which needed to be reassembled at this entity. Statistic is zeroed at startup time.')
nvIpstatReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatReasmOKs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatReasmOKs.setDescription('Datagrams successfully reassembled (ReasmOK) The number of IP datagrams successfully reassembled. Statistic is zeroed at startup time.')
nvIpstatReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatReasmFails.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatReasmFails.setDescription('Datagram reassembly failures (ReasmFail) The number of errors detected by the IP re-assembly algorithm (for whatever reason: timed out,errors,etc). Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can loose track of the number of fragments by combining them as they are received. Statistic is zeroed at startup time.')
nvIpstatFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatFragOKs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatFragOKs.setDescription('Datagrams successfully fragmented (FragOK) The number of IP datagrams that have been successfully fragmented at this entity. Statistic is zeroed at startup time.')
nvIpstatFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatFragFails.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatFragFails.setDescription("Datagrams with fragmentation errors (FragFail) The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be,e.g.,because their Don't Fragment flag was set. Statistic is zeroed at startup time.")
nvIpstatFragCrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatFragCrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatFragCrs.setDescription('Fragments created (FragCr) The number of IP datagram fragments that have been generated as a result of fragmentation at this entity. Statistic is zeroed at startup time.')
nvIpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 2, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpstatDtreset.setDescription('date & time statistics last reset')
nvIpwanmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 3))
nvIpwanmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpwanmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapMaxRec.setDescription('total number of records allowed in database file.')
nvIpwanmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpwanmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapNumRec.setDescription('number of records in use.')
nvIpwanmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3), )
if mibBuilder.loadTexts: nvIpwanmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapTable.setDescription('ipwanmap file.')
nvIpwanmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpwanmapIndex"))
if mibBuilder.loadTexts: nvIpwanmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapEntry.setDescription('ipwanmap record.')
nvIpwanmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpwanmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapIndex.setDescription('Index of ipwanmap record')
nvIpwanmapIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapIpaddr.setDescription('IP address of local LAN (ipaddr) This field is a 15 byte character string in IP dotted address format. ')
nvIpwanmapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapMask.setDescription('IP network mask (mask) This field is a 15 byte character string in IP dotted address format. ')
nvIpwanmapBcastcntl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapBcastcntl.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapBcastcntl.setDescription('Send internally generated broadcasts (broadcast) This field is a 15 byte character string in IP dotted address format. ')
nvIpwanmapMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapMtu.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapMtu.setDescription('Maximum frame length on this interface (mtu) Default value is 1500.')
nvIpwanmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapMetric.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapMetric.setDescription('Cost of route (metric) Default value is 1.')
nvIpwanmapInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapInactivty.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapInactivty.setDescription('Inactivity timer (inactivty).')
nvIpwanmapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapNetaddr.setDescription('Called address (netaddr).')
nvIpwanmapUserdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapUserdat.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapUserdat.setDescription('User data (userdat) ')
nvIpwanmapRevacc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapRevacc.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapRevacc.setDescription('Reverse charging accepted? (revacc) Default value is no (0+1).')
nvIpwanmapRevcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapRevcall.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapRevcall.setDescription('Reverse charging flag (revacc) Default value is no (0+1).')
nvIpwanmapTput = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("link", 1), ("bps75", 4), ("bps150", 5), ("bps300", 6), ("bps600", 7), ("bps1200", 8), ("bps2400", 9), ("bps4800", 10), ("bps9600", 11), ("bps19200", 12), ("bps48000", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapTput.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapTput.setDescription('Throughput (tput) Default value is link (0+1).')
nvIpwanmapPsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("b16", 5), ("b32", 6), ("b64", 7), ("b128", 8), ("b256", 9), ("b512", 10), ("b1024", 11), ("b2048", 12), ("b4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapPsize.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapPsize.setDescription('Max packet size (psize) Default value is 8+1.')
nvIpwanmapWsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapWsize.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapWsize.setDescription('Max window size (wsize) Default value is 0.')
nvIpwanmapCugtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nocug", 1), ("cug", 2), ("cugog", 3), ("bcug", 4), ("bcugog", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapCugtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapCugtype.setDescription('Closed user group type (cugtype) Default value is nocug (0+1).')
nvIpwanmapCug = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapCug.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapCug.setDescription('Closed user group number (cug) Default value is 0.')
nvIpwanmapRpoa = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapRpoa.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapRpoa.setDescription('RPOA number (rpoa) Default value is 0.')
nvIpwanmapPvcid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapPvcid.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapPvcid.setDescription('PVC ID - zero if SVC (pvcid) Default value is 0.')
nvIpwanmapFrpvc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapFrpvc.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapFrpvc.setDescription('Frame Relay PVC record (frpvc) Default value is 0.')
nvIpwanmapNetprot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("x25", 1), ("slip", 2), ("frelay", 3), ("ppp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapNetprot.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapNetprot.setDescription('Network protocol (netprot) Default value is x25 (0+1).')
nvIpwanmapIpcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapIpcp.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapIpcp.setDescription('IPCPCONF record number (ipcp) Default value is 0.')
nvIpwanmapIdnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapIdnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapIdnum.setDescription('PDS 974 stringid of calling addr Default value is 0.')
nvIpwanmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpwanmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpwanmapStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvIproute = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 4))
nvIprouteMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprouteMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteMaxRec.setDescription('total number of records allowed in database file.')
nvIprouteNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprouteNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteNumRec.setDescription('number of records in use.')
nvIprouteTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3), )
if mibBuilder.loadTexts: nvIprouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteTable.setDescription('iproute file.')
nvIprouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIprouteIndex"))
if mibBuilder.loadTexts: nvIprouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteEntry.setDescription('iproute record.')
nvIprouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteIndex.setDescription('Index of iproute record')
nvIprouteIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteIpaddr.setDescription('IP destination address (ipaddr) This field is a 15 byte character string in IP dotted address format. ')
nvIprouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteMask.setDescription('IP destination mask (ipmask) This field is a 15 byte character string in IP dotted address format. ')
nvIprouteNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteNexthop.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteNexthop.setDescription('Next hop IP address (nexthop) This field is a 15 byte character string in IP dotted address format. ')
nvIprouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteMetric.setDescription('Cost of route (metric) Default value is 1.')
nvIprouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIprouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprouteStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvIprtstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 5))
nvIprtstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatMaxRec.setDescription('total number of records allowed in database file.')
nvIprtstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatNumRec.setDescription('number of records in use.')
nvIprtstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3), )
if mibBuilder.loadTexts: nvIprtstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatTable.setDescription('iprtstat file.')
nvIprtstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIprtstatIndex"))
if mibBuilder.loadTexts: nvIprtstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatEntry.setDescription('iprtstat record.')
nvIprtstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatIndex.setDescription('Index of iprtstat record')
nvIprtstatDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatDest.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatDest.setDescription('Destination address of this route (Dest) ')
nvIprtstatInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("x25", 1), ("slip", 2), ("frelay", 3), ("ppp", 4), ("ether", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatInterface.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatInterface.setDescription('Interface for route (Interface) ')
nvIprtstatMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatMetric.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatMetric.setDescription('The routing metric for this route (Metric) ')
nvIprtstatNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatNextHop.setDescription('The address of the next hop (NextHop) ')
nvIprtstatType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 2), ("invald", 3), ("direct", 4), ("remote", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatType.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatType.setDescription('The type of route (Type) ')
nvIprtstatProto = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 9, 17))).clone(namedValues=NamedValues(("local", 3), ("icmp", 5), ("rip", 9), ("rad", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIprtstatProto.setStatus('mandatory')
if mibBuilder.loadTexts: nvIprtstatProto.setDescription('The mechanism via which this route was learned (Proto) ')
nvIcmpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 6))
nvIcmpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatMaxRec.setDescription('total number of records allowed in database file.')
nvIcmpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatNumRec.setDescription('number of records in use.')
nvIcmpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3), )
if mibBuilder.loadTexts: nvIcmpstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatTable.setDescription('icmpstat file.')
nvIcmpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIcmpstatIndex"))
if mibBuilder.loadTexts: nvIcmpstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatEntry.setDescription('icmpstat record.')
nvIcmpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatIndex.setDescription('Index of icmpstat record')
nvIcmpstatInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInMsgs.setDescription('Input messages received (InMsgs) The total number of ICMP messages which the entity received. Note that this counter includes all those counted by InErrs. Statistic is zeroed at startup time.')
nvIcmpstatInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInErrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInErrs.setDescription('Input errors received (InErrs) The number of ICMP messages which the entity received but determined as having ICMP-specific errors (bad ICMP checksums,bad length,etc.). Statistic is zeroed at startup time.')
nvIcmpstatInDstUnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInDstUnrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInDstUnrs.setDescription('Destination Unreachable messages recieved (InDstUnr) The number of ICMP Destination Unreachable messages received. Statistic is zeroed at startup time.')
nvIcmpstatInTmExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInTmExcds.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInTmExcds.setDescription('Time Exceeded messages received (InTmExcd) The number of ICMP Time Exceeded messages received. Statistic is zeroed at startup time.')
nvIcmpstatInPrmPrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInPrmPrbs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInPrmPrbs.setDescription('Parameter Problem messages received (InPrmPrb) The number of ICMP Parameter Problem messages received. Statistic is zeroed at startup time.')
nvIcmpstatInSrcQus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInSrcQus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInSrcQus.setDescription('Source Quench messages received (InSrcQu) The number of ICMP Source Quench messages received. Statistic is zeroed at startup time.')
nvIcmpstatInRdrcts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInRdrcts.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInRdrcts.setDescription('Redirect messages received (InRdrct) The number of ICMP Redirect messages received. Statistic is zeroed at startup time.')
nvIcmpstatInEchs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInEchs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInEchs.setDescription('Echo Request messages received (InEch) The number of ICMP Echo (request) messages received. Statistic is zeroed at startup time.')
nvIcmpstatInEchRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInEchRps.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInEchRps.setDescription('Echo Reply messages received (InEchRp) The number of ICMP Echo Reply messages received. Statistic is zeroed at startup time.')
nvIcmpstatInTmSts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInTmSts.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInTmSts.setDescription('Timestamp Request messages received (InTmSt) The number of ICMP Timestamp (request) messages received. Statistic is zeroed at startup time.')
nvIcmpstatInTmStRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInTmStRps.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInTmStRps.setDescription('Timestamp Reply messages received (InTmStRp) The number of ICMP Timestamp Reply messages received. Statistic is zeroed at startup time.')
nvIcmpstatInAdMs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInAdMs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInAdMs.setDescription('Address Mask Request messages received (InAdMs) The number of ICMP Address Mask Request messages received. Statistic is zeroed at startup time.')
nvIcmpstatInAdMsRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatInAdMsRps.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatInAdMsRps.setDescription('Address Mask Reply messages received (InAdMsRp) The number of ICMP Address Mask Reply messages received. Statistic is zeroed at startup time.')
nvIcmpstatOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutMsgs.setDescription('Output messages attempted (OutMsgs) The total number of ICMP messages which this entity attempted to send. Note that this counter includes all those counted by OutErrs. Statistic is zeroed at startup time.')
nvIcmpstatOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutErrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutErrs.setDescription("Output messages not sent (OutErrs) The number of ICMP messages which this entity did not send due to problems discovered within ICMP such as lack of buffers. This value should not include errors discovered outside the ICMP layer such as the inability of IP to route the resultant datagram. In some implementations there may be no types of errors which contribute to this counter's value. Statistic is zeroed at startup time.")
nvIcmpstatOutDstUnrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutDstUnrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutDstUnrs.setDescription('Destination Unreachable messages sent (OutDstUnr) The number of ICMP Destination Unreachable messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutTmExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutTmExcds.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutTmExcds.setDescription('Time Exceeded messages sent (OutTmExcd) The number of ICMP Time Exceeded messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutPrmPrbs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutPrmPrbs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutPrmPrbs.setDescription('Parameter Problem messages sent (OutPrmPrb) The number of ICMP Parameter Problem messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutSrcQus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutSrcQus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutSrcQus.setDescription('Source Quench messages sent (OutSrcQu) The number of ICMP Source Quench messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutRdrcts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutRdrcts.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutRdrcts.setDescription('Redirect messages sent (OutRdrct) The number of ICMP Redirect messages sent. For a host,this object will always be zero,since hosts do not send redirects. Statistic is zeroed at startup time.')
nvIcmpstatOutEchs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutEchs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutEchs.setDescription('Echo Request messages sent (OutEch) The number of ICMP Echo (request) messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutEchRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutEchRps.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutEchRps.setDescription('Echo Reply messages sent (OutEchRp) The number of ICMP Echo Reply messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutTmSts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutTmSts.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutTmSts.setDescription('Timestamp Request meessages sent (OutTmSt) The number of ICMP Timestamp (request) messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutTmStRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutTmStRps.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutTmStRps.setDescription('Timestamp Reply messages sent (OutTmStRp) The number of ICMP Timestamp Reply messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutAdMs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutAdMs.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutAdMs.setDescription('Address Mask Request messages sent (OutAdMs) The number of ICMP Address Mask Request messages sent. Statistic is zeroed at startup time.')
nvIcmpstatOutAdMsRps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatOutAdMsRps.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatOutAdMsRps.setDescription('Address Mask Reply messages sent (OutAdMsRp) The number of ICMP Address Mask Reply messages sent. Statistic is zeroed at startup time.')
nvIcmpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 6, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIcmpstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvIcmpstatDtreset.setDescription('date & time statistics last reset')
nvIptrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 7))
nvIptrunkMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIptrunkMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkMaxRec.setDescription('total number of records allowed in database file.')
nvIptrunkNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIptrunkNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkNumRec.setDescription('number of records in use.')
nvIptrunkTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3), )
if mibBuilder.loadTexts: nvIptrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkTable.setDescription('iptrunk file.')
nvIptrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIptrunkIndex"))
if mibBuilder.loadTexts: nvIptrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkEntry.setDescription('iptrunk record.')
nvIptrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIptrunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkIndex.setDescription('Index of iptrunk record')
nvIptrunkIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIptrunkIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkIpaddr.setDescription('IP destination address (ipaddr) This field is a 15 byte character string in IP dotted address format. ')
nvIptrunkDstiptrnk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIptrunkDstiptrnk.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkDstiptrnk.setDescription('destenation lapb link (Dstiptrnk) Default value is 0.')
nvIptrunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIptrunkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIptrunkStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvIpcpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 16, 8))
nvIpcpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpcpconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfMaxRec.setDescription('total number of records allowed in database file.')
nvIpcpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpcpconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfNumRec.setDescription('number of records in use.')
nvIpcpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3), )
if mibBuilder.loadTexts: nvIpcpconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfTable.setDescription('ipcpconf file.')
nvIpcpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvIpcpconfIndex"))
if mibBuilder.loadTexts: nvIpcpconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfEntry.setDescription('ipcpconf record.')
nvIpcpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvIpcpconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfIndex.setDescription('Index of Ipcpconf record.')
nvIpcpconfLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfLcp.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfLcp.setDescription('link control proto rec-num (lcp) ')
nvIpcpconfCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfCompress.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfCompress.setDescription('compress flag.')
nvIpcpconfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfTest.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfTest.setDescription('test mode.')
nvIpcpconfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfProfile.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfProfile.setDescription('Ipcp Profile Name')
nvIpcpconfDnsadd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfDnsadd1.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfDnsadd1.setDescription('IP address of primary DNS server')
nvIpcpconfDnsadd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfDnsadd2.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfDnsadd2.setDescription('IP address of secondary DNS server')
nvIpcpconfNbnsadd1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfNbnsadd1.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfNbnsadd1.setDescription('IP address of primary NBNS server')
nvIpcpconfNbnsadd2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfNbnsadd2.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfNbnsadd2.setDescription('IP address of secondary NBNS server')
nvIpcpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 16, 8, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvIpcpconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvIpcpconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvTcpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 1))
nvTcpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatMaxRec.setDescription('total number of records allowed in database file.')
nvTcpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatNumRec.setDescription('number of records in use.')
nvTcpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3), )
if mibBuilder.loadTexts: nvTcpstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatTable.setDescription('tcpstat file.')
nvTcpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcpstatIndex"))
if mibBuilder.loadTexts: nvTcpstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatEntry.setDescription('tcpstat record, indexed by record number')
nvTcpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatIndex.setDescription('Index of tcpstat record')
nvTcpstatConnattempts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatConnattempts.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatConnattempts.setDescription('connection attempts made.')
nvTcpstatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatAccepts.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatAccepts.setDescription('connections accepted.')
nvTcpstatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatConnects.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatConnects.setDescription('connections established.')
nvTcpstatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatDrops.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatDrops.setDescription('connections dropped.')
nvTcpstatConndrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatConndrops.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatConndrops.setDescription('embryonic conns dropped.')
nvTcpstatCloseds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatCloseds.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatCloseds.setDescription('conn closed inlc drops.')
nvTcpstatSegstimeds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSegstimeds.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSegstimeds.setDescription('segs where tried to get rt.')
nvTcpstatRttupdateds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRttupdateds.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRttupdateds.setDescription('times succeeded.')
nvTcpstatDelacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatDelacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatDelacks.setDescription('delayed acls sent.')
nvTcpstatTimeoutdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatTimeoutdrops.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatTimeoutdrops.setDescription('conn dropped in rxmt timeout.')
nvTcpstatRexmttimeos = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRexmttimeos.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRexmttimeos.setDescription('retransmit timeouts.')
nvTcpstatPersisttimeos = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatPersisttimeos.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatPersisttimeos.setDescription('persist timeouts.')
nvTcpstatKeeptimeos = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatKeeptimeos.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatKeeptimeos.setDescription('keepalive timeouts.')
nvTcpstatKeepprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatKeepprobes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatKeepprobes.setDescription('keepalive probes sent.')
nvTcpstatKeepdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatKeepdrops.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatKeepdrops.setDescription('connections dropped in keep alive.')
nvTcpstatSndtotals = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndtotals.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndtotals.setDescription('total packets sent.')
nvTcpstatSndpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndpacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndpacks.setDescription('data packets sent.')
nvTcpstatSndbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndbytes.setDescription('data bytes sent.')
nvTcpstatSndrexmitpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndrexmitpacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndrexmitpacks.setDescription('data packetes retransmitted.')
nvTcpstatSndrexmitbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndrexmitbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndrexmitbytes.setDescription('data bytes retransmitted.')
nvTcpstatSndacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndacks.setDescription('ack only packets sent.')
nvTcpstatSndprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndprobes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndprobes.setDescription('window probes sent.')
nvTcpstatSndurgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndurgs.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndurgs.setDescription('packets sent with urg only.')
nvTcpstatSndwinups = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndwinups.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndwinups.setDescription('window update only packets.')
nvTcpstatSndctrls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatSndctrls.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatSndctrls.setDescription('control SYN|FIN|RST packets.')
nvTcpstatRcvtotals = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvtotals.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvtotals.setDescription('total packets rcvd.')
nvTcpstatRcvpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvpacks.setDescription('packets rcvd in sequence.')
nvTcpstatRcvbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvbytes.setDescription('bytes rcvd in sequence.')
nvTcpstatRcvbadsums = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbadsums.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvbadsums.setDescription('packets rcvd with cksum errors.')
nvTcpstatRcvbadoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbadoffs.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvbadoffs.setDescription('packets rcvd with bad offset.')
nvTcpstatRcvshorts = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvshorts.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvshorts.setDescription('packets rcvd too short.')
nvTcpstatRcvduppacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvduppacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvduppacks.setDescription('dup only packets rcvd.')
nvTcpstatRcvdupbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvdupbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvdupbytes.setDescription('dup only bytes rcvd.')
nvTcpstatRcvpartduppacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpartduppacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvpartduppacks.setDescription('packets with some dup data.')
nvTcpstatRcvpartdupbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpartdupbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvpartdupbytes.setDescription('dup bytes in part dup packets.')
nvTcpstatRcvoopacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvoopacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvoopacks.setDescription('out of order packets rcvd.')
nvTcpstatRcvoobytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvoobytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvoobytes.setDescription('out of order bytes rcvd.')
nvTcpstatRcvpackafterwins = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvpackafterwins.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvpackafterwins.setDescription('packets rcvd after window.')
nvTcpstatRcvbyteafterwins = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvbyteafterwins.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvbyteafterwins.setDescription('bytes rcvd after window.')
nvTcpstatRcvaftercloses = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvaftercloses.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvaftercloses.setDescription('packets rcvd after close.')
nvTcpstatRcvwinprobes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvwinprobes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvwinprobes.setDescription('rcvd window probe packets.')
nvTcpstatRcvdupacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvdupacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvdupacks.setDescription('rcvd duplicate acks.')
nvTcpstatRcvacktoomuchs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvacktoomuchs.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvacktoomuchs.setDescription('rcvd acks for unsent data.')
nvTcpstatRcvackpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvackpacks.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvackpacks.setDescription('rcvd ack packets.')
nvTcpstatRcvackbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvackbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvackbytes.setDescription('bytes acked by rcvd acks.')
nvTcpstatRcvwinupds = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatRcvwinupds.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatRcvwinupds.setDescription('rcvd window update pkts.')
nvTcpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 1, 3, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpstatDtreset.setDescription('date & time statistics last reset')
nvTcpcnstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 2))
nvTcpcnstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatMaxRec.setDescription('total number of records allowed in database file.')
nvTcpcnstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatNumRec.setDescription('number of records in use.')
nvTcpcnstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3), )
if mibBuilder.loadTexts: nvTcpcnstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatTable.setDescription('tcpcnstat file.')
nvTcpcnstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcpcnstatIndex"))
if mibBuilder.loadTexts: nvTcpcnstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatEntry.setDescription('tcpcnstat record, indexed by record number')
nvTcpcnstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatIndex.setDescription('Index of tcpcnstat record')
nvTcpcnstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("null", 1), ("closed", 2), ("listen", 3), ("syncsent", 4), ("syncrcv", 5), ("established", 6), ("wait1", 7), ("wait2", 8), ("closewait", 9), ("lastack", 10), ("closing", 11), ("timewait", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatState.setDescription('Connection state.')
nvTcpcnstatLocaladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatLocaladdr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatLocaladdr.setDescription('Local host address.')
nvTcpcnstatLocalport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatLocalport.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatLocalport.setDescription('Local port.')
nvTcpcnstatRemaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatRemaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatRemaddr.setDescription('Remote host address.')
nvTcpcnstatRemport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatRemport.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatRemport.setDescription('Remote port.')
nvTcpcnstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpcnstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpcnstatDtreset.setDescription('date & time statistics last reset')
nvTcprstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 3))
nvTcprstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatMaxRec.setDescription('total number of records allowed in database file.')
nvTcprstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatNumRec.setDescription('number of records in use.')
nvTcprstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3), )
if mibBuilder.loadTexts: nvTcprstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatTable.setDescription('tcprstat file.')
nvTcprstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcprstatIndex"))
if mibBuilder.loadTexts: nvTcprstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatEntry.setDescription('tcprstat record, indexed by record number')
nvTcprstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatIndex.setDescription('Index of tcprstat record')
nvTcprstatInport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatInport.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatInport.setDescription('Port number to check for traffic from IP.')
nvTcprstatOutport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatOutport.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatOutport.setDescription('Port number to route call to if inport match.')
nvTcprstatService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatService.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatService.setDescription('component using the port number.')
nvTcprstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcprstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcprstatDtreset.setDescription('date & time statistics last reset')
nvTslotconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 6))
nvTslotconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfMaxRec.setDescription('total number of records allowed in database file.')
nvTslotconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfNumRec.setDescription('number of records in use.')
nvTslotconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3), )
if mibBuilder.loadTexts: nvTslotconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfTable.setDescription('tslotconf file.')
nvTslotconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTslotconfIndex"))
if mibBuilder.loadTexts: nvTslotconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfEntry.setDescription('tslotconf record, indexed by record number')
nvTslotconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfIndex.setDescription('Index of tslotconf record')
nvTslotconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfName.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfName.setDescription('Name of TSLOT instance.')
nvTslotconfOrigans = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("originate", 2), ("answer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfOrigans.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfOrigans.setDescription('Originate or answer.')
nvTslotconfTcpprof = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfTcpprof.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfTcpprof.setDescription('TCP profile name.')
nvTslotconfReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotconfReserve1.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfReserve1.setDescription('OBSOLETE - removed field.')
nvTslotconfReserve2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfReserve2.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfReserve2.setDescription('OBSOLETE - removed field.')
nvTslotconfMaxrxbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfMaxrxbuf.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfMaxrxbuf.setDescription('Maximum receive buffer space.')
nvTslotconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfEnable.setDescription('Is this TSLOT enabled.')
nvTslotconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvTslotconfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("ver0", 2), ("ver1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfVersion.setDescription('TSLOT version number to behave as.')
nvTslotconfPeertsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfPeertsid.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfPeertsid.setDescription('TSLOT ID on destination side. Only used if origans = originate.')
nvTslotconfPeeripadr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 6, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTslotconfPeeripadr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotconfPeeripadr.setDescription('IP address if destination machine. Only used if origans = originate.')
nvTslotstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 7))
nvTslotstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatMaxRec.setDescription('total number of records allowed in database file.')
nvTslotstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatNumRec.setDescription('number of records in use.')
nvTslotstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3), )
if mibBuilder.loadTexts: nvTslotstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatTable.setDescription('tslotstat file.')
nvTslotstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTslotstatIndex"))
if mibBuilder.loadTexts: nvTslotstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatEntry.setDescription('tslotstat record, indexed by record number')
nvTslotstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatIndex.setDescription('Index of tslotconf record')
nvTslotstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatName.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatName.setDescription('Name of TSLOT instance.')
nvTslotstatService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatService.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatService.setDescription('Connected component id.')
nvTslotstatServiceid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatServiceid.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatServiceid.setDescription('Service instance name.')
nvTslotstatOpstate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("idle", 2), ("conreq", 3), ("conwait", 4), ("conn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatOpstate.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatOpstate.setDescription('TSLOT instance operational state.')
nvTslotstatRemipaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatRemipaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatRemipaddr.setDescription('Remote machine IP address. This field is a 15 byte character string in IP dotted address format. ')
nvTslotstatRemtsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatRemtsid.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatRemtsid.setDescription('TSLOT ID on remote machine.')
nvTslotstatTcpcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatTcpcn.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatTcpcn.setDescription('TCPCNSTAT file record number.')
nvTslotstatNumcon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatNumcon.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatNumcon.setDescription('Number of TCP connections.')
nvTslotstatNumfailcn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatNumfailcn.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatNumfailcn.setDescription('Number of failed attempts at TCP connection.')
nvTslotstatTotrxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatTotrxfrm.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatTotrxfrm.setDescription('Total number of received frames.')
nvTslotstatTottxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatTottxfrm.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatTottxfrm.setDescription('Total number of transmitted frames.')
nvTslotstatCurtxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatCurtxfrm.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatCurtxfrm.setDescription('Total number of transmitted frames on current TCP connection.')
nvTslotstatCurrxfrm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatCurrxfrm.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatCurrxfrm.setDescription('Total number of received frames on current TCP connection.')
nvTslotstatCurdrprx = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatCurdrprx.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatCurdrprx.setDescription('Number of dropped frames due to ins buffer space.')
nvTslotstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 7, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTslotstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvTslotstatDtreset.setDescription('date & time statistics last reset')
nvTcpprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 8))
nvTcpprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpprofMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofMaxRec.setDescription('total number of records allowed in database file.')
nvTcpprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpprofNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofNumRec.setDescription('number of records in use.')
nvTcpprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3), )
if mibBuilder.loadTexts: nvTcpprofTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofTable.setDescription('tcpprof file.')
nvTcpprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTcpprofIndex"))
if mibBuilder.loadTexts: nvTcpprofEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofEntry.setDescription('tcpprof record, indexed by record number')
nvTcpprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTcpprofIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofIndex.setDescription('Index of tslotconf record')
nvTcpprofProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofProfname.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofProfname.setDescription('Nmae of TCP profile.')
nvTcpprofKeepidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofKeepidle.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofKeepidle.setDescription('Idle time in seconds before keepalive probe.')
nvTcpprofKeepprbs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofKeepprbs.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofKeepprbs.setDescription('Number of unanswered probes before reset.')
nvTcpprofKeepintvl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofKeepintvl.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofKeepintvl.setDescription('Interval in seconds between keppalive probes.')
nvTcpprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTcpprofStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTcpprofStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvNsockconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 4))
nvNsockconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfMaxRec.setDescription('total number of records allowed in database file.')
nvNsockconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfNumRec.setDescription('number of records in use.')
nvNsockconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3), )
if mibBuilder.loadTexts: nvNsockconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfTable.setDescription('tcpstat file.')
nvNsockconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNsockconfIndex"))
if mibBuilder.loadTexts: nvNsockconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfEntry.setDescription('tcpstat record, indexed by record number')
nvNsockconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfIndex.setDescription('Index of nsockconf record')
nvNsockconfMaxconn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockconfMaxconn.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfMaxconn.setDescription('Maximum number of connections.')
nvNsockconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfStatus.setDescription('nsockconf record')
nvNsockconfDefport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockconfDefport.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockconfDefport.setDescription('default TCP port.')
nvNsockmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 17, 5))
nvNsockmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapMaxRec.setDescription('total number of records allowed in database file.')
nvNsockmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapNumRec.setDescription('number of records in use.')
nvNsockmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3), )
if mibBuilder.loadTexts: nvNsockmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapTable.setDescription('tcpstat file.')
nvNsockmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvNsockmapIndex"))
if mibBuilder.loadTexts: nvNsockmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapEntry.setDescription('tcpstat record, indexed by record number')
nvNsockmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvNsockmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapIndex.setDescription('Index of nsockconf record')
nvNsockmapOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("nbus", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapOrigin.setDescription('nsockconf record')
nvNsockmapService = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("telnet", 2), ("pos", 3), ("x25", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapService.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapService.setDescription('nsockconf record')
nvNsockmapMaxsessn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapMaxsessn.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapMaxsessn.setDescription('nsockconf record')
nvNsockmapNbusport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapNbusport.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapNbusport.setDescription('nsockconf record')
nvNsockmapNetaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapNetaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapNetaddr.setDescription('nsockconf record')
nvNsockmapUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapUserdata.setDescription('nsockconf record')
nvNsockmapTcpport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapTcpport.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapTcpport.setDescription('nsockconf record')
nvNsockmapIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapIpaddr.setDescription('nsockconf record')
nvNsockmapTcpmsglen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vap", 2), ("bin2", 3), ("bin3", 4), ("bin4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapTcpmsglen.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapTcpmsglen.setDescription(' type of header for tcp message ')
nvNsockmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 17, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvNsockmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvNsockmapStatus.setDescription('nsockconf record')
nvFtpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 18, 1))
nvFtpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfMaxRec.setDescription('total number of records allowed in database file.')
nvFtpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfNumRec.setDescription('number of records in use.')
nvFtpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3), )
if mibBuilder.loadTexts: nvFtpconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfTable.setDescription('ftpconf file.')
nvFtpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvFtpconfIndex"))
if mibBuilder.loadTexts: nvFtpconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfEntry.setDescription('ftpconf record, indexed by record number')
nvFtpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfIndex.setDescription('Index of ftpconf record')
nvFtpconfReqaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfReqaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfReqaddr.setDescription('FTPD remote client IP address.')
nvFtpconfUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfUsername.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfUsername.setDescription('FTPD username.')
nvFtpconfPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfPassword.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfPassword.setDescription('FTPD user password.')
nvFtpconfTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfTimeout.setDescription('FTPD user inactivity timer.')
nvFtpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 18, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvFtpconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid). Reqaddr MUST be set to a valid value before adding new record (setting Status to valid).')
nvFtpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 18, 2))
nvFtpstatIndex = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatIndex.setDescription('Index of ftpconf record')
nvFtpstatServaddr = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatServaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatServaddr.setDescription('server FTP host IP address.')
nvFtpstatNumreqs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatNumreqs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatNumreqs.setDescription('number of connection requested.')
nvFtpstatConnects = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatConnects.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatConnects.setDescription('number of successful connections.')
nvFtpstatConnfails = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatConnfails.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatConnfails.setDescription('number of connect request failures.')
nvFtpstatTotalfirvs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalfirvs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatTotalfirvs.setDescription('number of files server received.')
nvFtpstatTotalfisds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalfisds.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatTotalfisds.setDescription('number of files server sent.')
nvFtpstatTotalkbyrvs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalkbyrvs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatTotalkbyrvs.setDescription('number of Kbytes server received.')
nvFtpstatTotalkbysds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalkbysds.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatTotalkbysds.setDescription('number of Kbytes server sent.')
nvFtpstatClientaddr = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatClientaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatClientaddr.setDescription('client FTP host IP address.')
nvFtpstatCurrstat = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closed", 1), ("copen", 2), ("bothopen", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatCurrstat.setDescription('current FTPD status.')
nvFtpstatCommstat = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("cmdok", 2), ("cmdfail", 3), ("cmderr", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCommstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatCommstat.setDescription('last command status.')
nvFtpstatTotalsucs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalsucs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatTotalsucs.setDescription('total number of commands executed successfully.')
nvFtpstatTotalfals = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalfals.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatTotalfals.setDescription('total number of commands executed with failure.')
nvFtpstatTotalerrs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatTotalerrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatTotalerrs.setDescription('total number of unsupported commands.')
nvFtpstatCurrfirecs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrfirecs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatCurrfirecs.setDescription('total number of files current user received.')
nvFtpstatCurrfisnds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrfisnds.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatCurrfisnds.setDescription('total number of files current user sent.')
nvFtpstatCurrkbyrvs = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrkbyrvs.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatCurrkbyrvs.setDescription('total number of Kbytes current user server sent.')
nvFtpstatCurrkbysds = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatCurrkbysds.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatCurrkbysds.setDescription('total number of Kbytes current user server received.')
nvFtpstatDtreset = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 18, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvFtpstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvFtpstatDtreset.setDescription('date & time statistics last reset')
nvTnconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 1))
nvTnconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfMaxRec.setDescription('total number of records allowed in database file.')
nvTnconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfNumRec.setDescription('number of records in use.')
nvTnconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3), )
if mibBuilder.loadTexts: nvTnconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfTable.setDescription('Nevada Telnet config file.')
nvTnconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnconfIndex"))
if mibBuilder.loadTexts: nvTnconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfEntry.setDescription('Nevada node Telnet record.')
nvTnconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfIndex.setDescription('Index of Telenet conf record')
nvTnconfNumSess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnconfNumSess.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfNumSess.setDescription('number of simultaneous sessions')
nvTnconfDeftnclass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDeftnclass.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfDeftnclass.setDescription('Default telnet class')
nvTnconfDefiticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDefiticlass.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfDefiticlass.setDescription('Default iti class')
nvTnconfDefminbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDefminbspace.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfDefminbspace.setDescription('number of simultaneous sessions')
nvTnconfDefmaxbspace = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnconfDefmaxbspace.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnconfDefmaxbspace.setDescription('number of simultaneous sessions')
nvTnclass = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 2))
nvTnclassMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnclassMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassMaxRec.setDescription('total number of records allowed in database file.')
nvTnclassNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnclassNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassNumRec.setDescription('number of records in use.')
nvTnclassTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3), )
if mibBuilder.loadTexts: nvTnclassTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassTable.setDescription('Nevada Telnet class file.')
nvTnclassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnclassIndex"))
if mibBuilder.loadTexts: nvTnclassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassEntry.setDescription('Nevada node Telnet record.')
nvTnclassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnclassIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassIndex.setDescription('Index of Telenet class record')
nvTnclassClassname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassClassname.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassClassname.setDescription('Telnet classname')
nvTnclassAobreak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassAobreak.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassAobreak.setDescription('Telnet abort cmd issues break')
nvTnclassIpcmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassIpcmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassIpcmd.setDescription('Telnet interrupt process cmd')
nvTnclassGoahead = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("suppress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassGoahead.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassGoahead.setDescription('Telnet suppress/send Go Ahead cmd')
nvTnclassStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnclassStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnclassStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvTnmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 3))
nvTnmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapMaxRec.setDescription('total number of records allowed in database file.')
nvTnmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapNumRec.setDescription('number of records in use.')
nvTnmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3), )
if mibBuilder.loadTexts: nvTnmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapTable.setDescription('Nevada Telnet map file.')
nvTnmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnmapIndex"))
if mibBuilder.loadTexts: nvTnmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapEntry.setDescription('Nevada node Telnet map record.')
nvTnmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapIndex.setDescription('Index of Telenet map record')
nvTnmapPortnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapPortnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapPortnum.setDescription('Telnet portnumber')
nvTnmapTnclass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapTnclass.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapTnclass.setDescription('Telnet classname')
nvTnmapIticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapIticlass.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapIticlass.setDescription('Telnet iti classname')
nvTnmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTnmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnmapStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvTnstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 4))
nvTnstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatMaxRec.setDescription('total number of records allowed in database file.')
nvTnstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatNumRec.setDescription('number of records in use.')
nvTnstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3), )
if mibBuilder.loadTexts: nvTnstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatTable.setDescription('Nevada Telnet stat file.')
nvTnstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTnstatIndex"))
if mibBuilder.loadTexts: nvTnstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatEntry.setDescription('Nevada node Telnet stat record.')
nvTnstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatIndex.setDescription('Index of Telenet stat record')
nvTnstatPortnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatPortnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatPortnum.setDescription('Telnet portnumber in use')
nvTnstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disconnected", 1), ("connecting", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatStatus.setDescription('Telnet call status')
nvTnstatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("linemode", 2), ("binary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatMode.setDescription('Telnet mode in use')
nvTnstatLastCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatLastCmd.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatLastCmd.setDescription('Telnet last cmd received')
nvTnstatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatOptions.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatOptions.setDescription('Telnet active options')
nvTnstatClientAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTnstatClientAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTnstatClientAddr.setDescription('Address of the Client.')
nvTncconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 5))
nvTncconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfMaxRec.setDescription('total number of records allowed in database file.')
nvTncconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfNumRec.setDescription('number of records in use.')
nvTncconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3), )
if mibBuilder.loadTexts: nvTncconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfTable.setDescription('Nevada Telnet cconf file.')
nvTncconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTncconfIndex"))
if mibBuilder.loadTexts: nvTncconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfEntry.setDescription('nevada node Tncconf record.')
nvTncconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfIndex.setDescription('Index of Telnet Client record')
nvTncconfNumSess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncconfNumSess.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfNumSess.setDescription('number of simultaneous sessions (numSess)')
nvTncconfX3parms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfX3parms.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfX3parms.setDescription('string of X.3 params to send at start (x3parms)')
nvTncconfSetact = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfSetact.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfSetact.setDescription('allow user to perform set actions (setact)')
nvTncconfIdletim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfIdletim.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfIdletim.setDescription('forwarding timer used in character at a time (idletim)')
nvTncconfEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfEscape.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfEscape.setDescription('decimal number of character to use for escape (escape)')
nvTncconfEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfEcho.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfEcho.setDescription('decimal number of character to use for echo (echo)')
nvTncconfInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfInterrupt.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfInterrupt.setDescription('decimal number of character to use for interrupt (interrupt)')
nvTncconfQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfQuit.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfQuit.setDescription('decimal number of character to use for quit (quit)')
nvTncconfFout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfFout.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfFout.setDescription('decimal number of character to use for flushoutput (fout)')
nvTncconfErase = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfErase.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfErase.setDescription('decimal number of character to use for erase (erase)')
nvTncconfKill = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfKill.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfKill.setDescription('decimal number of character to use for kill (kill)')
nvTncconfAyt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfAyt.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfAyt.setDescription('decimal number of character to use for ayt (ayt)')
nvTncconfSuspend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfSuspend.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfSuspend.setDescription('decimal number of character to use for suspend (suspend)')
nvTncconfDnsaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfDnsaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfDnsaddr.setDescription(' Dnsaddr')
nvTncconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 5, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncconfStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvTncmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 6))
nvTncmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapMaxRec.setDescription('total number of records allowed in database file.')
nvTncmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapNumRec.setDescription('number of records in use.')
nvTncmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3), )
if mibBuilder.loadTexts: nvTncmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapTable.setDescription('Nevada Telnet cstat file.')
nvTncmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTncmapIndex"))
if mibBuilder.loadTexts: nvTncmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapEntry.setDescription('Nevada node Telnet cstat record.')
nvTncmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapIndex.setDescription('Index of Telnet Client map record')
nvTncmapNetad = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapNetad.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapNetad.setDescription(' ')
nvTncmapUsdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapUsdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapUsdata.setDescription(' ')
nvTncmapIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapIpaddr.setDescription(' ')
nvTncmapTcppn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapTcppn.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapTcppn.setDescription(' ')
nvTncmapX3parms = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapX3parms.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapX3parms.setDescription(' ')
nvTncmapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asci", 1), ("binary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapMode.setDescription(' ')
nvTncmapSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapSecure.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapSecure.setDescription(' security opreation enabled')
nvTncmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTncmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncmapStatus.setDescription(' ')
nvTncstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 20, 7))
nvTncstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatMaxRec.setDescription('total number of records allowed in database file.')
nvTncstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatNumRec.setDescription('number of records in use.')
nvTncstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3), )
if mibBuilder.loadTexts: nvTncstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatTable.setDescription('Nevada Telnet cstat file.')
nvTncstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTncstatIndex"))
if mibBuilder.loadTexts: nvTncstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatEntry.setDescription('Nevada node Telnet cstat record.')
nvTncstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatIndex.setDescription('Index of Telnet Client stat record')
nvTncstatSessnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatSessnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatSessnum.setDescription('the number of the session')
nvTncstatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discon", 1), ("cnectg", 2), ("cnetctd", 3), ("cmd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatStatus.setDescription('Call status ')
nvTncstatDnsidx = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatDnsidx.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatDnsidx.setDescription('dnsindex ')
nvTncstatCalladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatCalladdr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatCalladdr.setDescription('x121 address calling TELNET Client')
nvTncstatCalldata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatCalldata.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatCalldata.setDescription('call user data')
nvTncstatIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatIpaddr.setDescription('ip address connected to')
nvTncstatPortnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatPortnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatPortnum.setDescription('Port number connected to')
nvTncstatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("linemode", 2), ("binary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatMode.setDescription('mode in use')
nvTncstatX29err = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 20, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTncstatX29err.setStatus('mandatory')
if mibBuilder.loadTexts: nvTncstatX29err.setDescription('last X29 error rcvd from 3XPAD')
nvRadconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 1))
nvRadconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfMaxRec.setDescription('total number of records allowed in database file.')
nvRadconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfNumRec.setDescription('number of records in use.')
nvRadconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3), )
if mibBuilder.loadTexts: nvRadconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfTable.setDescription('radconf file.')
nvRadconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRadconfIndex"))
if mibBuilder.loadTexts: nvRadconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfEntry.setDescription('radconf record, indexed by record number')
nvRadconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfIndex.setDescription('Index of radconf record')
nvRadconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfName.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfName.setDescription('Nevada name.')
nvRadconfSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfSecret.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfSecret.setDescription('secret for accounting.')
nvRadconfN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfN1.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfN1.setDescription('retry counter.')
nvRadconfT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfT1.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfT1.setDescription('times between attempts.')
nvRadconfAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("adapt", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcct.setDescription('radius accounting.')
nvRadconfNumdigits = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfNumdigits.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfNumdigits.setDescription('trailing port digits.')
nvRadconfAuth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth1.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAuth1.setDescription('IP address primary auth server.')
nvRadconfAuth2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth2.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAuth2.setDescription('IP address secondary auth server.')
nvRadconfAuth3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth3.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAuth3.setDescription('IP address tertiary auth server.')
nvRadconfAcct1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct1.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcct1.setDescription('IP address primary accounting.')
nvRadconfAcct2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct2.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcct2.setDescription('IP address secondary accounting.')
nvRadconfAcct3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct3.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcct3.setDescription('IP address tertiary accounting.')
nvRadconfAcctauth = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secret", 1), ("zero", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcctauth.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcctauth.setDescription('authorizarion encoding.')
nvRadconfAuth1port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth1port.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAuth1port.setDescription('authserver port1 .')
nvRadconfAuth2port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth2port.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAuth2port.setDescription('authserver port2 .')
nvRadconfAuth3port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAuth3port.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAuth3port.setDescription('authserver port3 .')
nvRadconfAcct1port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct1port.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcct1port.setDescription('account server port1 .')
nvRadconfAcct2port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct2port.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcct2port.setDescription('account server port2 .')
nvRadconfAcct3port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAcct3port.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAcct3port.setDescription('account server port3 .')
nvRadconfAttrchk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfAttrchk.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfAttrchk.setDescription('Strict attribute checking.')
nvRadconfDnsatt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfDnsatt1.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfDnsatt1.setDescription(' attribute code for primary DNS server')
nvRadconfDnsatt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfDnsatt2.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfDnsatt2.setDescription(' attribute code for secondary DNS server')
nvRadconfNbnsatt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfNbnsatt1.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfNbnsatt1.setDescription(' attribute code for primary NBNS server')
nvRadconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvRadconfNbnsatt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 1, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRadconfNbnsatt2.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadconfNbnsatt2.setDescription('attribute code for secondary NBNS server ')
nvRaduser = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 2))
nvRaduserMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRaduserMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserMaxRec.setDescription('total number of records allowed in database file.')
nvRaduserNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRaduserNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserNumRec.setDescription('number of records in use.')
nvRaduserTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3), )
if mibBuilder.loadTexts: nvRaduserTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserTable.setDescription('raduser file.')
nvRaduserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRaduserIndex"))
if mibBuilder.loadTexts: nvRaduserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserEntry.setDescription('raduser record, indexed by record number')
nvRaduserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRaduserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserIndex.setDescription('Index of raduser record')
nvRaduserUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserUsername.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserUsername.setDescription('user name.')
nvRaduserPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserPasswd.setDescription('user password.')
nvRaduserRespmsg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserRespmsg.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserRespmsg.setDescription('stringid of response message.')
nvRaduserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRaduserStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvRaduserStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvRadcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 3))
nvRadcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatMaxRec.setDescription('total number of records allowed in database file.')
nvRadcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNumRec.setDescription('number of records in use.')
nvRadcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3), )
if mibBuilder.loadTexts: nvRadcstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatTable.setDescription('radcstat file.')
nvRadcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRadcstatIndex"))
if mibBuilder.loadTexts: nvRadcstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatEntry.setDescription('radcstat record, indexed by record number')
nvRadcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatIndex.setDescription('Index of radcstat record')
nvRadcstatRadAdminS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatRadAdminS.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatRadAdminS.setDescription('radius admin status.')
nvRadcstatRadcOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatRadcOperS.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatRadcOperS.setDescription('radius operation status.')
nvRadcstatNAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuths.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuths.setDescription('number of auth attempts.')
nvRadcstatNAuthLocl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuthLocl.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuthLocl.setDescription('number of local authorizations.')
nvRadcstatNAuthLost = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuthLost.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuthLost.setDescription('number of authorization lost.')
nvRadcstatNAuthRtry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuthRtry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuthRtry.setDescription('number of authentication retr.')
nvRadcstatNAuth1Acc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth1Acc.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuth1Acc.setDescription('number of auth accepts by auth1.')
nvRadcstatNAuth1Rej = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth1Rej.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuth1Rej.setDescription('number of auth rejects by auth1.')
nvRadcstatNAuth2Acc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth2Acc.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuth2Acc.setDescription('number of auth accepts by auth2.')
nvRadcstatNAuth2Rej = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth2Rej.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuth2Rej.setDescription('number of auth rejects by auth2.')
nvRadcstatNAuth3Acc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth3Acc.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuth3Acc.setDescription('number of auth accepts by auth3.')
nvRadcstatNAuth3Rej = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAuth3Rej.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAuth3Rej.setDescription('number of auth rejects by auth3.')
nvRadcstatNAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAcct.setDescription('number of accounting msgs attempts.')
nvRadcstatNAcctLost = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcctLost.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAcctLost.setDescription('number of accounting records lost.')
nvRadcstatNAcctRtry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcctRtry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAcctRtry.setDescription('number of accounting msgs retry.')
nvRadcstatNAcct1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct1.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAcct1.setDescription('number of accounting msgs acct1.')
nvRadcstatNAcct2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct2.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAcct2.setDescription('number of accounting msgs acct2.')
nvRadcstatNAcct3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNAcct3.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNAcct3.setDescription('number of accounting msgs acct3.')
nvRadcstatNSilent = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatNSilent.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatNSilent.setDescription('num of silent discards')
nvRadcstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 3, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadcstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadcstatDtreset.setDescription('date & time statistics last reset')
nvRadustat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 40, 4))
nvRadustatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatMaxRec.setDescription('total number of records allowed in database file.')
nvRadustatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatNumRec.setDescription('number of records in use.')
nvRadustatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3), )
if mibBuilder.loadTexts: nvRadustatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatTable.setDescription('radustat file.')
nvRadustatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRadustatIndex"))
if mibBuilder.loadTexts: nvRadustatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatEntry.setDescription('radustat record, indexed by record number')
nvRadustatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatIndex.setDescription('Index of radustat record')
nvRadustatRaduOperS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("open", 2), ("ready", 3), ("waiting", 4), ("active", 5), ("astart", 6), ("astop", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatRaduOperS.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatRaduOperS.setDescription('User operation/session status.')
nvRadustatSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSessionId.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatSessionId.setDescription('accounting session-id name.')
nvRadustatUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatUserId.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatUserId.setDescription('user/host name of requestor.')
nvRadustatNasPort = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatNasPort.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatNasPort.setDescription('Called address.')
nvRadustatNasIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatNasIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatNasIpAddr.setDescription('NAS IP address.')
nvRadustatFrmIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmIpaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatFrmIpaddr.setDescription('Framed IP address.')
nvRadustatFrmIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatFrmIpMask.setDescription('Framed IP mask.')
nvRadustatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatState.setDescription('state.')
nvRadustatClass = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatClass.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatClass.setDescription('class.')
nvRadustatSType = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("login", 2), ("framed", 3), ("callBackLogin", 4), ("callBackFramed", 5), ("outboundUser", 6), ("adminUser", 7), ("execUser", 8), ("authOnly", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSType.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatSType.setDescription('Service type.')
nvRadustatFrmProto = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSet", 1), ("ppp", 2), ("slip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmProto.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatFrmProto.setDescription('Framed protocol type.')
nvRadustatFrmRting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("sendRtPkt", 2), ("listenRtPkt", 3), ("sendListen", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmRting.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatFrmRting.setDescription('Framed routing attribute type.')
nvRadustatSTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatSTime.setDescription('Seconds the call was active.')
nvRadustatFrmMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmMtu.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatFrmMtu.setDescription('Framed mtu.')
nvRadustatFrmRt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatFrmRt.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatFrmRt.setDescription('Framed route.')
nvRadustatSTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatSTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatSTimeout.setDescription('Session timeout.')
nvRadustatITimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatITimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatITimeout.setDescription('Idle timeout.')
nvRadustatDFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatDFilter.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatDFilter.setDescription('Data filters.')
nvRadustatReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatReqId.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatReqId.setDescription('Request ID of outstanding radius msgs.')
nvRadustatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 40, 4, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRadustatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvRadustatDtreset.setDescription('date & time statistics last reset')
nvSnmpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 45, 1))
nvSnmpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfMaxRec.setDescription('total number of records allowed in database file.')
nvSnmpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfNumRec.setDescription('number of records in use.')
nvSnmpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3), )
if mibBuilder.loadTexts: nvSnmpconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfTable.setDescription('Snmpconf file.')
nvSnmpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSnmpconfIndex"))
if mibBuilder.loadTexts: nvSnmpconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfEntry.setDescription('Snmpconf record.')
nvSnmpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfIndex.setDescription('Index of nvSnmpconf record')
nvSnmpconflocation = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconflocation.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconflocation.setDescription('Location ')
nvSnmpconfcontact = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfcontact.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfcontact.setDescription('contact ')
nvSnmpconfsysname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfsysname.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfsysname.setDescription('sysname ')
nvSnmpconfauthen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfauthen.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfauthen.setDescription('authentication trap yes(1)/no(2) ')
nvSnmpconfstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpconfstatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpconfstatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvSnmpmgr = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 45, 2))
nvSnmpmgrMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpmgrMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrMaxRec.setDescription('total number of records allowed in database file.')
nvSnmpmgrNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpmgrNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrNumRec.setDescription('number of records in use.')
nvSnmpmgrTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3), )
if mibBuilder.loadTexts: nvSnmpmgrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrTable.setDescription('Snmpmgr file.')
nvSnmpmgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvSnmpmgrIndex"))
if mibBuilder.loadTexts: nvSnmpmgrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrEntry.setDescription('Snmpmgr record.')
nvSnmpmgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvSnmpmgrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrIndex.setDescription('Index of nvSnmpmgr record')
nvSnmpmgrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrIp.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrIp.setDescription('IP address ')
nvSnmpmgrComm = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrComm.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrComm.setDescription('community ')
nvSnmpmgrAccPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ro", 1), ("rw", 2), ("wo", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrAccPriv.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrAccPriv.setDescription('Access priv ')
nvSnmpmgrSndTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrSndTrap.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrSndTrap.setDescription('Send trap ')
nvSnmpmgrstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 45, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvSnmpmgrstatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvSnmpmgrstatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvPosprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 1))
nvPosprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosprofMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofMaxRec.setDescription('total number of records allowed in database file.')
nvPosprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosprofNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofNumRec.setDescription('number of records in use.')
nvPosprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3), )
if mibBuilder.loadTexts: nvPosprofTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofTable.setDescription('NEvada node posprof file.')
nvPosprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosprofIndex"))
if mibBuilder.loadTexts: nvPosprofEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofEntry.setDescription('Nevada node posprof record.')
nvPosprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosprofIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofIndex.setDescription('Index of nevada posprof record')
nvPosprofName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofName.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofName.setDescription('Profile Name.')
nvPosprofSize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("b128", 1), ("b256", 2), ("b512", 3), ("b1024", 4), ("b2048", 5), ("b4096", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofSize.setDescription('max bytes per frame Default value is 128 (0+1).')
nvPosprofNumchan = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofNumchan.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofNumchan.setDescription('max number of channels Default value is 1.')
nvPosprofPermchan = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPermchan.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofPermchan.setDescription('min number of channels ')
nvPosprofDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uplink", 1), ("dnlink", 2), ("nmslink", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofDirection.setDescription('up or down? Default value is dnlink (1+1).')
nvPosprofProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sdlc", 1), ("x25", 2), ("visa", 3), ("tcp", 4), ("spdh", 5), ("dfono", 6), ("dtfspc", 7), ("dtfgen", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofProtocol.setDescription('protocol on port Default value is visa.')
nvPosprofAddrtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("tpdu", 2), ("fast3", 3), ("fast6", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofAddrtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofAddrtype.setDescription('address header Default value is tpdu.')
nvPosprofUserdata = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofUserdata.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofUserdata.setDescription('call user data ')
nvPosprofMode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("m8n1", 1), ("m7e1", 2), ("m7o1", 3), ("m7m1", 4), ("m7s1", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofMode.setDescription('Mode of operation. Default is 7E1.')
nvPosprofIdletime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofIdletime.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofIdletime.setDescription('max num secs channel can remain idle ')
nvPosprofRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("datartg", 1), ("tpdurtg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofRouting.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofRouting.setDescription('look at data or tpdu? Default value is tpdurtg (1+1).')
nvPosprofTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ascii", 2), ("ebcdic", 3), ("fastpos", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofTranslate.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofTranslate.setDescription('message translation.')
nvPosprofTpduaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofTpduaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofTpduaddr.setDescription('use this when tpdu not supplied (but required).')
nvPosprofEftrspto = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofEftrspto.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofEftrspto.setDescription('number of seconds before addr table entry cleared Default value is 300.')
nvPosprofRetrytim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofRetrytim.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofRetrytim.setDescription('retry timer Default value is 100.')
nvPosprofNretry = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofNretry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofNretry.setDescription('max retry attempts Default value is 3.')
nvPosprofActsupl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("sndnak", 2), ("reverse", 3), ("muzo", 4), ("closelcn", 5), ("fdr", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofActsupl.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofActsupl.setDescription('Action after responce is sent to terminal.')
nvPosprofResptim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofResptim.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofResptim.setDescription('host response timer Default value is 100.')
nvPosprofPolltim = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPolltim.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofPolltim.setDescription('poll timer Default value is 5.')
nvPosprofPolladdr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPolladdr.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofPolladdr.setDescription('base poll address,hex ')
nvPosprofSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofSkip.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofSkip.setDescription('number of cycles to skip for non-func device Default value is 4.')
nvPosprofTcpmsglen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("vap", 2), ("bin2", 3), ("bin3", 4), ("bin4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofTcpmsglen.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofTcpmsglen.setDescription('TCP msg header format. Default value is bin4.')
nvPosprofPortname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofPortname.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofPortname.setDescription('Name of physical port or Device Usage Group.')
nvPosprofRsrcpool = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofRsrcpool.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofRsrcpool.setDescription('Resource Pool Name.')
nvPosprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosprofStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosprofStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvPosconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 2))
nvPosconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfMaxRec.setDescription('total number of records allowed in database file.')
nvPosconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfNumRec.setDescription('number of records in use.')
nvPosconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3), )
if mibBuilder.loadTexts: nvPosconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfTable.setDescription('NEvada node posconf file.')
nvPosconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosconfIndex"))
if mibBuilder.loadTexts: nvPosconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfEntry.setDescription('Nevada node posprof record.')
nvPosconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfIndex.setDescription('Index of nevada posconf record')
nvPosconfName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfName.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfName.setDescription('either POS# or X.121 Address.')
nvPosconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfEnable.setDescription('Enabled or not.')
nvPosconfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfProfile.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfProfile.setDescription('Name of profile (in posprof) being used.')
nvPosconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosconfStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvPosmsgmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 3))
nvPosmsgmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosmsgmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapMaxRec.setDescription('total number of records allowed in database file.')
nvPosmsgmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosmsgmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapNumRec.setDescription('number of records in use.')
nvPosmsgmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3), )
if mibBuilder.loadTexts: nvPosmsgmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapTable.setDescription('Nevada node posmsgmap file.')
nvPosmsgmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosmsgmapIndex"))
if mibBuilder.loadTexts: nvPosmsgmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapEntry.setDescription('nevada node posmsgmap record.')
nvPosmsgmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosmsgmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapIndex.setDescription('Index of nevada posmsgmap record')
nvPosmsgmapPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosmsgmapPattern.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapPattern.setDescription('pointer to pattern in string storage ')
nvPosmsgmapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosmsgmapDest.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapDest.setDescription('port/link or X.121 address ')
nvPosmsgmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosmsgmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosmsgmapStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvPosniimap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 4))
nvPosniimapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosniimapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapMaxRec.setDescription('total number of records allowed in database file.')
nvPosniimapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosniimapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapNumRec.setDescription('number of records in use.')
nvPosniimapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3), )
if mibBuilder.loadTexts: nvPosniimapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapTable.setDescription('nevada node posniimap file.')
nvPosniimapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosniimapIndex"))
if mibBuilder.loadTexts: nvPosniimapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapEntry.setDescription('Nevada node posniimap record.')
nvPosniimapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosniimapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapIndex.setDescription('Index of nevada posniimap record')
nvPosniimapTpduaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosniimapTpduaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapTpduaddr.setDescription('NII value to match ')
nvPosniimapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosniimapDest.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapDest.setDescription('port/link or X.121 address ')
nvPosniimapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosniimapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosniimapStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvPosnmsmap = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 5))
nvPosnmsmapMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosnmsmapMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapMaxRec.setDescription('total number of records allowed in database file.')
nvPosnmsmapNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosnmsmapNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapNumRec.setDescription('number of records in use.')
nvPosnmsmapTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3), )
if mibBuilder.loadTexts: nvPosnmsmapTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapTable.setDescription('nevada node posnmsmap file.')
nvPosnmsmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosnmsmapIndex"))
if mibBuilder.loadTexts: nvPosnmsmapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapEntry.setDescription('nevada node posnmsmap record.')
nvPosnmsmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosnmsmapIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapIndex.setDescription('Index of nevada posnmsmap record')
nvPosnmsmapNmsid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosnmsmapNmsid.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapNmsid.setDescription('two digit hex NMS ID ')
nvPosnmsmapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosnmsmapDest.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapDest.setDescription('port/link or X.121 address ')
nvPosnmsmapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosnmsmapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosnmsmapStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvPosiso = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 6))
nvPosisoMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosisoMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoMaxRec.setDescription('total number of records allowed in database file.')
nvPosisoNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosisoNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoNumRec.setDescription('number of records in use.')
nvPosisoTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3), )
if mibBuilder.loadTexts: nvPosisoTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoTable.setDescription('nevada node posiso file.')
nvPosisoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosisoIndex"))
if mibBuilder.loadTexts: nvPosisoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoEntry.setDescription('navada node posiso record.')
nvPosisoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosisoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoIndex.setDescription('Index of Nevada posiso record')
nvPosisoName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoName.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoName.setDescription('used to identify record ')
nvPosisoContrec = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoContrec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoContrec.setDescription('pointer to continuation record Default value is 0.')
nvPosisoField2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 4), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField2.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField2.setDescription('same as field1 ')
nvPosisoField3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 5), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField3.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField3.setDescription('same as field1 ')
nvPosisoField4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 6), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField4.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField4.setDescription('same as field1 ')
nvPosisoField5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 7), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField5.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField5.setDescription('same as field1 ')
nvPosisoField6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 8), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField6.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField6.setDescription('same as field1 ')
nvPosisoField7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 9), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField7.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField7.setDescription('same as field1 ')
nvPosisoField8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 10), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField8.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField8.setDescription('same as field1 ')
nvPosisoField9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 11), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField9.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField9.setDescription('same as field1 ')
nvPosisoField10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 12), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField10.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField10.setDescription('same as field1 ')
nvPosisoField11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 13), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField11.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField11.setDescription('same as field1 ')
nvPosisoField12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 14), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField12.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField12.setDescription('same as field1 ')
nvPosisoField13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 15), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField13.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField13.setDescription('same as field1 ')
nvPosisoField14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 16), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField14.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField14.setDescription('same as field1 ')
nvPosisoField15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 17), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField15.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField15.setDescription('same as field1 ')
nvPosisoField16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 18), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField16.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField16.setDescription('same as field1 ')
nvPosisoField17 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 19), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField17.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField17.setDescription('same as field1 ')
nvPosisoField18 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 20), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField18.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField18.setDescription('same as field1 ')
nvPosisoField19 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 21), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField19.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField19.setDescription('same as field1 ')
nvPosisoField20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 22), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField20.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField20.setDescription('same as field1 ')
nvPosisoField21 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 23), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField21.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField21.setDescription('same as field1 ')
nvPosisoField22 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 24), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField22.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField22.setDescription('same as field1 ')
nvPosisoField23 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 25), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField23.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField23.setDescription('same as field1 ')
nvPosisoField24 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 26), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField24.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField24.setDescription('same as field1 ')
nvPosisoField25 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 27), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField25.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField25.setDescription('same as field1 ')
nvPosisoField26 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 28), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField26.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField26.setDescription('same as field1 ')
nvPosisoField27 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 29), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField27.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField27.setDescription('same as field1 ')
nvPosisoField28 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 30), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField28.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField28.setDescription('same as field1 ')
nvPosisoField29 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 31), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField29.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField29.setDescription('same as field1 ')
nvPosisoField30 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 32), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField30.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField30.setDescription('same as field1 ')
nvPosisoField31 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 33), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField31.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField31.setDescription('same as field1 ')
nvPosisoField32 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 34), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField32.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField32.setDescription('same as field1 ')
nvPosisoField33 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 35), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField33.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField33.setDescription('same as field1 ')
nvPosisoField34 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 36), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField34.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField34.setDescription('same as field1 ')
nvPosisoField35 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 37), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField35.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField35.setDescription('same as field1 ')
nvPosisoField36 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 38), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField36.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField36.setDescription('same as field1 ')
nvPosisoField37 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 39), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField37.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField37.setDescription('same as field1 ')
nvPosisoField38 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 40), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField38.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField38.setDescription('same as field1 ')
nvPosisoField39 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 41), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField39.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField39.setDescription('same as field1 ')
nvPosisoField40 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 42), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField40.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField40.setDescription('same as field1 ')
nvPosisoField41 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 43), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField41.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField41.setDescription('same as field1 ')
nvPosisoField42 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 44), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField42.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField42.setDescription('same as field1 ')
nvPosisoField43 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 45), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField43.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField43.setDescription('same as field1 ')
nvPosisoField44 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 46), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField44.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField44.setDescription('same as field1 ')
nvPosisoField45 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 47), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField45.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField45.setDescription('same as field1 ')
nvPosisoField46 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 48), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField46.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField46.setDescription('same as field1 ')
nvPosisoField47 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 49), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField47.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField47.setDescription('same as field1 ')
nvPosisoField48 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 50), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField48.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField48.setDescription('same as field1 ')
nvPosisoField49 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 51), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField49.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField49.setDescription('same as field1 ')
nvPosisoField50 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 52), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField50.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField50.setDescription('same as field1 ')
nvPosisoField51 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 53), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField51.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField51.setDescription('same as field1 ')
nvPosisoField52 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 54), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField52.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField52.setDescription('same as field1 ')
nvPosisoField53 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 55), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField53.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField53.setDescription('same as field1 ')
nvPosisoField54 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 56), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField54.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField54.setDescription('same as field1 ')
nvPosisoField55 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 57), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField55.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField55.setDescription('same as field1 ')
nvPosisoField56 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 58), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField56.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField56.setDescription('same as field1 ')
nvPosisoField57 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 59), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField57.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField57.setDescription('same as field1 ')
nvPosisoField58 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 60), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField58.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField58.setDescription('same as field1 ')
nvPosisoField59 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 61), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField59.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField59.setDescription('same as field1 ')
nvPosisoField60 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 62), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField60.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField60.setDescription('same as field1 ')
nvPosisoField61 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 63), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField61.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField61.setDescription('same as field1 ')
nvPosisoField62 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 64), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField62.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField62.setDescription('same as field1 ')
nvPosisoField63 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 65), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField63.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField63.setDescription('same as field1 ')
nvPosisoField64 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 66), NvIsoType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoField64.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoField64.setDescription('same as field1 ')
nvPosisoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 6, 3, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosisoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosisoStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvPosvisa = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 7))
nvPosvisaMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosvisaMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaMaxRec.setDescription('total number of records allowed in database file.')
nvPosvisaNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosvisaNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaNumRec.setDescription('number of records in use.')
nvPosvisaTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3), )
if mibBuilder.loadTexts: nvPosvisaTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaTable.setDescription('Nevada node posvisa file.')
nvPosvisaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosvisaIndex"))
if mibBuilder.loadTexts: nvPosvisaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaEntry.setDescription('Nevada node posvisa record.')
nvPosvisaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosvisaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaIndex.setDescription('Index of Nevada posvisa record')
nvPosvisaName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaName.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaName.setDescription('used to identify record ')
nvPosvisaField1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 3), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField1.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField1.setDescription('description of a single field ')
nvPosvisaField2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 4), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField2.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField2.setDescription('same as field1 ')
nvPosvisaField3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 5), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField3.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField3.setDescription('same as field1 ')
nvPosvisaField4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 6), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField4.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField4.setDescription('same as field1 ')
nvPosvisaField5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 7), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField5.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField5.setDescription('same as field1 ')
nvPosvisaField6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 8), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField6.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField6.setDescription('same as field1 ')
nvPosvisaField7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 9), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField7.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField7.setDescription('same as field1 ')
nvPosvisaField8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 10), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField8.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField8.setDescription('same as field1 ')
nvPosvisaField9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 11), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField9.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField9.setDescription('same as field1 ')
nvPosvisaField10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 12), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField10.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField10.setDescription('same as field1 ')
nvPosvisaField11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 13), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField11.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField11.setDescription('same as field1 ')
nvPosvisaField12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 14), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField12.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField12.setDescription('same as field1 ')
nvPosvisaField13 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 15), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField13.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField13.setDescription('same as field1 ')
nvPosvisaField14 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 16), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField14.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField14.setDescription('same as field1 ')
nvPosvisaField15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 17), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField15.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField15.setDescription('same as field1 ')
nvPosvisaField16 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 18), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField16.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField16.setDescription('same as field1 ')
nvPosvisaField17 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 19), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField17.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField17.setDescription('same as field1 ')
nvPosvisaField18 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 20), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField18.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField18.setDescription('same as field1 ')
nvPosvisaField19 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 21), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField19.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField19.setDescription('same as field1 ')
nvPosvisaField20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 22), NvVisaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaField20.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaField20.setDescription('same as field1 ')
nvPosvisaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 7, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvPosvisaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosvisaStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvPosstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 66, 8))
nvPosstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatMaxRec.setDescription('total number of records allowed in database file.')
nvPosstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNumRec.setDescription('number of records in use.')
nvPosstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3), )
if mibBuilder.loadTexts: nvPosstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatTable.setDescription('Nevada node posstat file.')
nvPosstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvPosstatIndex"))
if mibBuilder.loadTexts: nvPosstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatEntry.setDescription('Nevada node posstat record.')
nvPosstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatIndex.setDescription('Index of Nevada posstat record')
nvPosstatName = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatName.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatName.setDescription('port/link or X.121 address (matches posconf) ')
nvPosstatNactivchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNactivchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNactivchn.setDescription('number of active channels Initial status is 0.')
nvPosstatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sdlc", 1), ("x25", 2), ("visa", 3), ("tcp", 4), ("spdh", 5), ("dfono", 6), ("dtfspc", 7), ("dtfgen", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatProtocol.setDescription('protocol on port ')
nvPosstatNumcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNumcalls.setDescription('number of calls Statistic is zeroed at startup time.')
nvPosstatNfailcall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNfailcall.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNfailcall.setDescription('number of failed calls Statistic is zeroed at startup time.')
nvPosstatNumimsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumimsgs.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNumimsgs.setDescription('number of messages from device Statistic is zeroed at startup time.')
nvPosstatNumomsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNumomsgs.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNumomsgs.setDescription('number of messages to device Statistic is zeroed at startup time.')
nvPosstatEftreqs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatEftreqs.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatEftreqs.setDescription('number of EFT requests Statistic is zeroed at startup time.')
nvPosstatEftrsps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatEftrsps.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatEftrsps.setDescription('number of EFT responses Statistic is zeroed at startup time.')
nvPosstatNmsreqs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsreqs.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNmsreqs.setDescription('number of NMS requests Statistic is zeroed at startup time.')
nvPosstatNmsrsps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsrsps.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNmsrsps.setDescription('number of NMS responses Statistic is zeroed at startup time.')
nvPosstatNodatart = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNodatart.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNodatart.setDescription('EFT reqs discarded becaues msg switch could find route Statistic is zeroed at startup time.')
nvPosstatNotpdurt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNotpdurt.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNotpdurt.setDescription('EFT reqs discarded because no match to posniimap entry Statistic is zeroed at startup time.')
nvPosstatInvrqtpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatInvrqtpdu.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatInvrqtpdu.setDescription('EFT reqs discarded because of bad TPDUs Statistic is zeroed at startup time.')
nvPosstatNousdest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNousdest.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNousdest.setDescription("EFT reqs discarded because destination couldn't be matched Statistic is zeroed at startup time.")
nvPosstatQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatQueued.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatQueued.setDescription('EFT reqs discarded because all dest channels or TDPU IDs in use Statistic is zeroed at startup time.')
nvPosstatCommfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatCommfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatCommfail.setDescription("EFT reqs that couldn't be delivered due to comm failure Statistic is zeroed at startup time.")
nvPosstatInvrstpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatInvrstpdu.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatInvrstpdu.setDescription('EFT rsps discarded because they did not contain valid TPDUs Statistic is zeroed at startup time.')
nvPosstatDnlnkfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatDnlnkfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatDnlnkfail.setDescription('EFT rsps discarded because they did not match any request Statistic is zeroed at startup time.')
nvPosstatRspnomtch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatRspnomtch.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatRspnomtch.setDescription('EFT rsps discarded because they did not match any request Statistic is zeroed at startup time.')
nvPosstatConnfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatConnfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatConnfail.setDescription('EFT requests lost because of connection failures Statistic is zeroed at startup time.')
nvPosstatRsptimout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatRsptimout.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatRsptimout.setDescription('EFT rsps (map table entries) that were timed out (response lost) Statistic is zeroed at startup time.')
nvPosstatNmsbaddst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsbaddst.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNmsbaddst.setDescription('NMS reqs with bad destination addresses Statistic is zeroed at startup time.')
nvPosstatNmsbadhst = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNmsbadhst.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNmsbadhst.setDescription('NMS reqs with bad source addresses (no matching host ID in posnmsmap file) Statistic is zeroed at startup time.')
nvPosstatNbadframes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNbadframes.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNbadframes.setDescription('NMS reqs with bad source addresses (no matching host ID in posnmsmap file) Statistic is zeroed at startup time.')
nvPosstatNtoolong = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatNtoolong.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatNtoolong.setDescription('NMS reqs with bad source addresses (no matching host ID in posnmsmap file) Statistic is zeroed at startup time.')
nvPosstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 66, 8, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvPosstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvPosstatDtreset.setDescription('date & time statistics last reset')
nvApacsconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 1))
nvApacsconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfMaxRec.setDescription('total number of records allowed in database file.')
nvApacsconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfNumRec.setDescription('number of records in use.')
nvApacsconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3), )
if mibBuilder.loadTexts: nvApacsconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfTable.setDescription('Apacsconf file.')
nvApacsconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApacsconfIndex"))
if mibBuilder.loadTexts: nvApacsconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfEntry.setDescription('Apacsconf record.')
nvApacsconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfIndex.setDescription('Index of Apacsconf record')
nvApacsconfNodename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfNodename.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfNodename.setDescription('For display purpose only Not used by Apacs software ')
nvApacsconfSitename = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfSitename.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfSitename.setDescription('For display purpose only Not used by Apacs software other than in generating alarms ')
nvApacsconfHelpphone = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfHelpphone.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfHelpphone.setDescription('For display purpose in INF help message. Phone number of cardway help desk ')
nvApacsconfReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsconfReserve1.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfReserve1.setDescription('OBSOLETE - removed field.')
nvApacsconfBillingT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT1.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfBillingT1.setDescription(' Call duration timer limit for billing ( in 100th secs ) Default value of 500 ')
nvApacsconfBillingT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT2.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfBillingT2.setDescription(' Call duration timer limit for billing ( in 100th secs ) Default value of 1000 ')
nvApacsconfBillingT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT3.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfBillingT3.setDescription(' Call duration timer limit for billing ( in 100th secs ) Default value of 1500 ')
nvApacsconfBillingT4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT4.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfBillingT4.setDescription(' Call duration timer limit for billing ( in 100th secs ) Default value of 2000 ')
nvApacsconfBillingT5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT5.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfBillingT5.setDescription(' Call duration timer limit for billing ( in 100th secs ) Default value of 3000 ')
nvApacsconfBillingT6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfBillingT6.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfBillingT6.setDescription(' Call duration timer limit for billing ( in 100th secs ) Default value of 6000 ')
nvApacsconfDlrtries = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfDlrtries.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfDlrtries.setDescription(' number of retries to deliver data before disconnecting Default value of 0 -- nevada retries 6 times by default')
nvApacsconfTimerA = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfTimerA.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfTimerA.setDescription(' time in sec,for timer A Default value of 5 ')
nvApacsconfTimerB = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfTimerB.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfTimerB.setDescription(' time in sec,for timer A Default value of 10 ')
nvApacsconfTimerC = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfTimerC.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfTimerC.setDescription(' time in sec,for timer A Default value of 40 ')
nvApacsconfDscdleeot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfDscdleeot.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfDscdleeot.setDescription(' ')
nvApacsconfParerrall = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfParerrall.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfParerrall.setDescription(' ')
nvApacsconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApacsconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvAnuaconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 2))
nvAnuaconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfMaxRec.setDescription('total number of records allowed in database file.')
nvAnuaconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfNumRec.setDescription('number of records in use.')
nvAnuaconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3), )
if mibBuilder.loadTexts: nvAnuaconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfTable.setDescription('Anuaconf file.')
nvAnuaconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAnuaconfIndex"))
if mibBuilder.loadTexts: nvAnuaconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfEntry.setDescription('Anuaconf record.')
nvAnuaconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfIndex.setDescription('Index of Anuaconf record')
nvAnuaconfLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfLabel1.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfLabel1.setDescription('Identifier to match alternate label in case of redirection ')
nvAnuaconfReserve1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAnuaconfReserve1.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfReserve1.setDescription('OBSOLETE - removed field.')
nvAnuaconfNuaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfNuaAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfNuaAddress.setDescription('Null terminated ascii string, used ot match the address string received from the terminal and/or the x.121 address of the x.25 call placed to the host ')
nvAnuaconfAltLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfAltLabel.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfAltLabel.setDescription(' indicates the label1 of the anuaconf record to be used for redirection ')
nvAnuaconfRsvrReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfRsvrReverse.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfRsvrReverse.setDescription(' reverse charging indication default value is no ')
nvAnuaconfRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("immed", 2), ("fail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfRedirect.setDescription(' Condition for redirecting call default value is no ')
nvAnuaconfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfRetries.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfRetries.setDescription(' number of call retries default value is 2 ')
nvAnuaconfPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfPreempt.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfPreempt.setDescription(' Call preemption indication default value is no ')
nvAnuaconfMaxpsze = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("psze-128", 8), ("psze-256", 9), ("psze-512", 10), ("psze-1024", 11), ("psze-2048", 12), ("psze-4096", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfMaxpsze.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfMaxpsze.setDescription(' Maximum message size default value is 256 ')
nvAnuaconfStrippar = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfStrippar.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfStrippar.setDescription(' Strip parity bit ? default value is no ')
nvAnuaconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvAnuaconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvAnuaconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvAbillstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 3))
nvAbillstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatMaxRec.setDescription('total number of records allowed in database file.')
nvAbillstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatNumRec.setDescription('number of records in use.')
nvAbillstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3), )
if mibBuilder.loadTexts: nvAbillstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatTable.setDescription('Abillstat file.')
nvAbillstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvAbillstatIndex"))
if mibBuilder.loadTexts: nvAbillstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatEntry.setDescription('Abillstat record.')
nvAbillstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatIndex.setDescription('Index of Abillstat record')
nvAbillstatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatNua.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatNua.setDescription(' Network User Address ')
nvAbillstatTbcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTbcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatTbcalls.setDescription(' Total number of calls to this nua ')
nvAbillstatTbtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTbtime.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatTbtime.setDescription(' Total time to this nua in 100th of second ')
nvAbillstatTfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatTfail.setDescription(' Number of failed call request ')
nvAbillstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatTxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatTxbytes.setDescription(' Number of bytes of data Transmitted to this nua ')
nvAbillstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatRxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatRxbytes.setDescription(' Number of bytes of data received from this nua ')
nvAbillstatB1call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB1call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB1call.setDescription(' Number of calls greater than call duration timer b1 ')
nvAbillstatB1time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB1time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB1time.setDescription(' Total time for calls greater than timer b1 (100th of sec) ')
nvAbillstatB2call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB2call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB2call.setDescription(' Number of calls greater than call duration timer b2 ')
nvAbillstatB2time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB2time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB2time.setDescription(' Total time for calls greater than timer b2 (100th of sec) ')
nvAbillstatB3call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB3call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB3call.setDescription(' Number of calls greater than call duration timer b3 ')
nvAbillstatB3time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB3time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB3time.setDescription(' Total time for calls greater than timer b3 (100th of sec) ')
nvAbillstatB4call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB4call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB4call.setDescription(' Number of calls greater than call duration timer b4 ')
nvAbillstatB4time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB4time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB4time.setDescription(' Total time for calls greater than timer b4 (100th of sec) ')
nvAbillstatB5call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB5call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB5call.setDescription(' Number of calls greater than call duration timer b5 ')
nvAbillstatB5time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB5time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB5time.setDescription(' Total time for calls greater than timer b5 (100th of sec) ')
nvAbillstatB6call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB6call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB6call.setDescription(' Number of calls greater than call duration timer b7 ')
nvAbillstatB6time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB6time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB6time.setDescription(' Total time for calls greater than timer b6 (100th of sec) ')
nvAbillstatB7call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB7call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB7call.setDescription(' Number of calls greater than call duration timer b7 ')
nvAbillstatB7time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatB7time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatB7time.setDescription(' Total time for calls greater than timer b7 (100th of sec) ')
nvAbillstatPbcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPbcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatPbcalls.setDescription(' ')
nvAbillstatPbtime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPbtime.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatPbtime.setDescription(' ')
nvAbillstatPfail = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPfail.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatPfail.setDescription(' ')
nvAbillstatPtxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPtxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatPtxbytes.setDescription(' ')
nvAbillstatPrxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatPrxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatPrxbytes.setDescription(' ')
nvAbillstatP1call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP1call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP1call.setDescription(' ')
nvAbillstatP1time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP1time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP1time.setDescription(' ')
nvAbillstatP2call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP2call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP2call.setDescription(' ')
nvAbillstatP2time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP2time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP2time.setDescription(' ')
nvAbillstatP3call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP3call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP3call.setDescription(' ')
nvAbillstatP3time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP3time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP3time.setDescription(' ')
nvAbillstatP4call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP4call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP4call.setDescription(' ')
nvAbillstatP4time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP4time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP4time.setDescription(' ')
nvAbillstatP5call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP5call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP5call.setDescription(' ')
nvAbillstatP5time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP5time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP5time.setDescription(' ')
nvAbillstatP6call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP6call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP6call.setDescription(' ')
nvAbillstatP6time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP6time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP6time.setDescription(' ')
nvAbillstatP7call = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP7call.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP7call.setDescription(' ')
nvAbillstatP7time = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatP7time.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatP7time.setDescription(' ')
nvAbillstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 3, 3, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvAbillstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvAbillstatDtreset.setDescription('date & time statistics last reset')
nvApmdmstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 4))
nvApmdmstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatMaxRec.setDescription('total number of records allowed in database file.')
nvApddmstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApddmstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApddmstatNumRec.setDescription('number of records in use.')
nvApmdmstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3), )
if mibBuilder.loadTexts: nvApmdmstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatTable.setDescription('Apmdmstat file.')
nvApmdmstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApmdmstatIndex"))
if mibBuilder.loadTexts: nvApmdmstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatEntry.setDescription('Apmdmstat record.')
nvApmdmstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatIndex.setDescription(' Index -- db record ')
nvApmdmstatSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatSpeed.setDescription(' Modem speed ')
nvApmdmstatTbcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatTbcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatTbcalls.setDescription(' Total Number of calls at this speed ')
nvApmdmstatSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatSuccess.setDescription(' Number of successful connections ')
nvApmdmstatHostclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatHostclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatHostclr.setDescription(' Number of calls cleared by the Host ')
nvApmdmstatNwclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatNwclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatNwclr.setDescription(' Number of calls cleared by the network ')
nvApmdmstatFltrain = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatFltrain.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatFltrain.setDescription(' Number of calls that failed to train ')
nvApmdmstatFlsess = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatFlsess.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatFlsess.setDescription(' Number with no A-block ')
nvApmdmstatTxpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatTxpkt.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatTxpkt.setDescription(' Number of x.25 packet Tx ')
nvApmdmstatRxpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatRxpkt.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatRxpkt.setDescription(' Number of x.25 packet Rx ')
nvApmdmstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatTxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatTxbytes.setDescription(' Number of x.25 bytes of data Tx ')
nvApmdmstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatRxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatRxbytes.setDescription(' Number of x.25 bytes of data rx ')
nvApmdmstatB1calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB1calls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatB1calls.setDescription(' Number of calls greater than call duration timer b1 ')
nvApmdmstatB2calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB2calls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatB2calls.setDescription(' Number of calls greater than call duration timer b2 ')
nvApmdmstatB3calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB3calls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatB3calls.setDescription(' Number of calls greater than call duration timer b3 ')
nvApmdmstatB4calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB4calls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatB4calls.setDescription(' Number of calls greater than call duration timer b4 ')
nvApmdmstatB5calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB5calls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatB5calls.setDescription(' Number of calls greater than call duration timer b5 ')
nvApmdmstatB6calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB6calls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatB6calls.setDescription(' Number of calls greater than call duration timer b6 ')
nvApmdmstatB7calls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatB7calls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatB7calls.setDescription(' Number of calls greater than call duration timer b7 ')
nvApmdmstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 4, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApmdmstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvApmdmstatDtreset.setDescription('date & time statistics last reset')
nvApacsstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 5))
nvApacsstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatMaxRec.setDescription('total number of records allowed in database file.')
nvApacsstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatNumRec.setDescription('number of records in use.')
nvApacsstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3), )
if mibBuilder.loadTexts: nvApacsstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTable.setDescription('Apacsstat file.')
nvApacsstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApacsstatIndex"))
if mibBuilder.loadTexts: nvApacsstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatEntry.setDescription('Apacsstat record.')
nvApacsstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatIndex.setDescription('Index ')
nvApacsstatNidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNidle.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatNidle.setDescription('number of iti ports in idle state ')
nvApacsstatNxidle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNxidle.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatNxidle.setDescription('')
nvApacsstatCursimul = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatCursimul.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatCursimul.setDescription('')
nvApacsstatResetdate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatResetdate.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatResetdate.setDescription('')
nvApacsstatTcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTcalls.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTcalls.setDescription('')
nvApacsstatTxnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTxnaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTxnaks.setDescription('')
nvApacsstatRxnaks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRxnaks.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatRxnaks.setDescription('')
nvApacsstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTxbytes.setDescription('')
nvApacsstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatRxbytes.setDescription('')
nvApacsstatCallrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatCallrcv.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatCallrcv.setDescription('')
nvApacsstatFailneg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatFailneg.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatFailneg.setDescription('')
nvApacsstatNoadrblk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNoadrblk.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatNoadrblk.setDescription('')
nvApacsstatInvadrblk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatInvadrblk.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatInvadrblk.setDescription('')
nvApacsstatNonuamtch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNonuamtch.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatNonuamtch.setDescription('')
nvApacsstatTrmdscsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmdscsu.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTrmdscsu.setDescription('')
nvApacsstatLoscarsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLoscarsu.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatLoscarsu.setDescription('')
nvApacsstatGdadrblks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatGdadrblks.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatGdadrblks.setDescription('')
nvApacsstatX25clrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatX25clrcip.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatX25clrcip.setDescription('')
nvApacsstatActtmocip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatActtmocip.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatActtmocip.setDescription('')
nvApacsstatTrmdsccip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmdsccip.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTrmdsccip.setDescription('')
nvApacsstatLoscarcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLoscarcip.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatLoscarcip.setDescription('')
nvApacsstatLrcerrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLrcerrcip.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatLrcerrcip.setDescription('')
nvApacsstatTmoerrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTmoerrcip.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTmoerrcip.setDescription('')
nvApacsstatX25conns = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatX25conns.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatX25conns.setDescription('')
nvApacsstatX25clrdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatX25clrdat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatX25clrdat.setDescription('')
nvApacsstatActtmodat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatActtmodat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatActtmodat.setDescription('')
nvApacsstatTrmdscdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmdscdat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTrmdscdat.setDescription('')
nvApacsstatLoscardat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLoscardat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatLoscardat.setDescription('')
nvApacsstatDscnoack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDscnoack.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatDscnoack.setDescription('')
nvApacsstatDscexcnak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDscexcnak.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatDscexcnak.setDescription('')
nvApacsstatLrcerrdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatLrcerrdat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatLrcerrdat.setDescription('')
nvApacsstatBdhostblk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatBdhostblk.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatBdhostblk.setDescription('')
nvApacsstatTrmnodat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmnodat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTrmnodat.setDescription('')
nvApacsstatHostnodat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatHostnodat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatHostnodat.setDescription('')
nvApacsstatTrmnoack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTrmnoack.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTrmnoack.setDescription('')
nvApacsstatRetrntmo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRetrntmo.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatRetrntmo.setDescription('')
nvApacsstatRetrnnak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRetrnnak.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatRetrnnak.setDescription('')
nvApacsstatTxenqs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatTxenqs.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatTxenqs.setDescription('')
nvApacsstatDleeotsnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDleeotsnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatDleeotsnt.setDescription('')
nvApacsstatDleeotrcv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDleeotrcv.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatDleeotrcv.setDescription('')
nvApacsstatUnxhstclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatUnxhstclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatUnxhstclr.setDescription('')
nvApacsstatNwadrblks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNwadrblks.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatNwadrblks.setDescription('')
nvApacsstatRjadrblks = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatRjadrblks.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatRjadrblks.setDescription('')
nvApacsstatNonuaentr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatNonuaentr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatNonuaentr.setDescription('')
nvApacsstatMaxsimul = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatMaxsimul.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatMaxsimul.setDescription('')
nvApacsstatN300bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN300bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatN300bd.setDescription('')
nvApacsstatN1200bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN1200bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatN1200bd.setDescription('')
nvApacsstatN2400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN2400bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatN2400bd.setDescription('')
nvApacsstatN9600bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN9600bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatN9600bd.setDescription('')
nvApacsstatN14400bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN14400bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatN14400bd.setDescription('')
nvApacsstatN28800bd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatN28800bd.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatN28800bd.setDescription('')
nvApacsstatSimultime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatSimultime.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatSimultime.setDescription('When maxsimul reached.')
nvApacsstatParerrsu = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatParerrsu.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatParerrsu.setDescription('')
nvApacsstatParerrcip = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatParerrcip.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatParerrcip.setDescription('')
nvApacsstatParerrdat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatParerrdat.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatParerrdat.setDescription('')
nvApacsstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 5, 3, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApacsstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvApacsstatDtreset.setDescription('Date & Time statistics last reset.')
nvBillconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 6))
nvBillconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfMaxRec.setDescription('total number of records allowed in database file.')
nvBillconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfNumRec.setDescription('number of records in use.')
nvBillconf1Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3), )
if mibBuilder.loadTexts: nvBillconf1Table.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconf1Table.setDescription('Billconf file.')
nvBillconf1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvBillconf1Index"))
if mibBuilder.loadTexts: nvBillconf1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconf1Entry.setDescription('Billconf record.')
nvBillconf1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconf1Index.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconf1Index.setDescription('Index of Billconf record')
nvBillconfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfEnable.setDescription('Enable/Disable billstat accounting.')
nvBillconfSegsize = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSegsize.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSegsize.setDescription('Segment size.')
nvBillconfSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet1.setDescription('')
nvBillconfSet1nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet1nua1.setDescription('')
nvBillconfSet1nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet1nua2.setDescription('')
nvBillconfSet1nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet1nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet1nua3.setDescription('')
nvBillconfSet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet2.setDescription('')
nvBillconfSet2nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet2nua1.setDescription('')
nvBillconfSet2nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet2nua2.setDescription('')
nvBillconfSet2nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet2nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet2nua3.setDescription('')
nvBillconfSet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet3.setDescription('')
nvBillconfSet3nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet3nua1.setDescription('')
nvBillconfSet3nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet3nua2.setDescription('')
nvBillconfSet3nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet3nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet3nua3.setDescription('')
nvBillconfSet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet4.setDescription('')
nvBillconfSet4nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet4nua1.setDescription('')
nvBillconfSet4nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet4nua2.setDescription('')
nvBillconfSet4nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet4nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet4nua3.setDescription('')
nvBillconfSet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet5.setDescription('')
nvBillconfSet5nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet5nua1.setDescription('')
nvBillconfSet5nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet5nua2.setDescription('')
nvBillconfSet5nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet5nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet5nua3.setDescription('')
nvBillconfSet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet6.setDescription('')
nvBillconfSet6nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet6nua1.setDescription('')
nvBillconfSet6nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet6nua2.setDescription('')
nvBillconfSet6nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet6nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet6nua3.setDescription('')
nvBillconf2Table = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4), )
if mibBuilder.loadTexts: nvBillconf2Table.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconf2Table.setDescription('Billconf file.')
nvBillconf2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvBillconf2Index"))
if mibBuilder.loadTexts: nvBillconf2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconf2Entry.setDescription('Billconf record.')
nvBillconf2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillconf2Index.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconf2Index.setDescription('Index of Billconf record')
nvBillconfSet7 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet7.setDescription('')
nvBillconfSet7nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet7nua1.setDescription('')
nvBillconfSet7nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet7nua2.setDescription('')
nvBillconfSet7nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet7nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet7nua3.setDescription('')
nvBillconfSet8 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet8.setDescription('')
nvBillconfSet8nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet8nua1.setDescription('')
nvBillconfSet8nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet8nua2.setDescription('')
nvBillconfSet8nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet8nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet8nua3.setDescription('')
nvBillconfSet9 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet9.setDescription('')
nvBillconfSet9nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet9nua1.setDescription('')
nvBillconfSet9nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet9nua2.setDescription('')
nvBillconfSet9nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet9nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet9nua3.setDescription('')
nvBillconfSet10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet10.setDescription('')
nvBillconfSet10nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet10nua1.setDescription('')
nvBillconfSet10nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet10nua2.setDescription('')
nvBillconfSet10nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet10nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet10nua3.setDescription('')
nvBillconfSet11 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet11.setDescription('')
nvBillconfSet11nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet11nua1.setDescription('')
nvBillconfSet11nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet11nua2.setDescription('')
nvBillconfSet11nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet11nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet11nua3.setDescription('')
nvBillconfSet12 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet12.setDescription('')
nvBillconfSet12nua1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12nua1.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet12nua1.setDescription('')
nvBillconfSet12nua2 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12nua2.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet12nua2.setDescription('')
nvBillconfSet12nua3 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 6, 4, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvBillconfSet12nua3.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillconfSet12nua3.setDescription('')
nvBillstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 7))
nvBillstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatMaxRec.setDescription('total number of records allowed in database file.')
nvBillstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatNumRec.setDescription('number of records in use.')
nvBillstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3), )
if mibBuilder.loadTexts: nvBillstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatTable.setDescription('Billstat file.')
nvBillstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvBillstatIndex"))
if mibBuilder.loadTexts: nvBillstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatEntry.setDescription('Billstat record.')
nvBillstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatIndex.setDescription('Index ')
nvBillstatNodeid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNodeid.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatNodeid.setDescription('')
nvBillstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatDate.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatDate.setDescription('')
nvBillstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatTime.setDescription('')
nvBillstatNuaset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNuaset.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatNuaset.setDescription('')
nvBillstatN300bps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatN300bps.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatN300bps.setDescription('')
nvBillstatN1200bps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatN1200bps.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatN1200bps.setDescription('')
nvBillstatN2400bps = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatN2400bps.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatN2400bps.setDescription('')
nvBillstatNgrtr2400 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNgrtr2400.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatNgrtr2400.setDescription('')
nvBillstatTxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatTxseg.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatTxseg.setDescription('')
nvBillstatRxseg = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatRxseg.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatRxseg.setDescription('')
nvBillstatRxcallc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatRxcallc.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatRxcallc.setDescription('')
nvBillstatHostclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatHostclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatHostclr.setDescription('')
nvBillstatNetclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatNetclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatNetclr.setDescription('')
nvBillstatTxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatTxpak.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatTxpak.setDescription('')
nvBillstatRxpak = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatRxpak.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatRxpak.setDescription('')
nvBillstatLess5 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatLess5.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatLess5.setDescription('')
nvBillstat5to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstat5to10.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstat5to10.setDescription('')
nvBillstat10to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstat10to15.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstat10to15.setDescription('')
nvBillstat15to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstat15to20.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstat15to20.setDescription('')
nvBillstatGrtr20 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatGrtr20.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatGrtr20.setDescription('')
nvBillstatClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 7, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvBillstatClosed.setStatus('mandatory')
if mibBuilder.loadTexts: nvBillstatClosed.setDescription('Record closed or open.')
nvApfilter = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 8))
nvApfilterMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfilterMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterMaxRec.setDescription('total number of records allowed in database file.')
nvApfilterNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfilterNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterNumRec.setDescription('number of records in use.')
nvApfilterTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3), )
if mibBuilder.loadTexts: nvApfilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterTable.setDescription('Apfilter file.')
nvApfilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApfilterIndex"))
if mibBuilder.loadTexts: nvApfilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterEntry.setDescription('Apfilter record.')
nvApfilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfilterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterIndex.setDescription('Index of Apfilter record')
nvApfilterCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterCalled.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterCalled.setDescription('Called Telephone Number.')
nvApfilterCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterCalling.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterCalling.setDescription('Calling Telephone Number.')
nvApfilterAblock = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterAblock.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterAblock.setDescription('A Block.')
nvApfilterLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterLabel1.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterLabel1.setDescription('ANUACONF Label 1.')
nvApfilterMerchid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterMerchid.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterMerchid.setDescription('Merchant ID.')
nvApfilterTermid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterTermid.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterTermid.setDescription('Terminal ID.')
nvApfilterFailcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("any", 1), ("none", 2), ("failneg", 3), ("noadrblk", 4), ("invadrblk", 5), ("nonuamtch", 6), ("trmdscsu", 7), ("loscarsu", 8), ("parerrsu", 9), ("x25clrcip", 10), ("acttmocip", 11), ("trmdsccip", 12), ("loscarcip", 13), ("lrcerrcip", 14), ("parerrcip", 15), ("tmoerrcip", 16), ("x25clrdat", 17), ("acttmodat", 18), ("trmdscdat", 19), ("loscardat", 20), ("dscnoack", 21), ("dscexcnak", 22), ("lrcerrdat", 23), ("parerrdat", 24), ("bdhostblk", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterFailcause.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterFailcause.setDescription('Failure Cause.')
nvApfilterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterThreshold.setDescription('Number of records per minute for this filter.')
nvApfilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 8, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvApfilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfilterStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvApfclstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 9))
nvApfclstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatMaxRec.setDescription('total number of records allowed in database file.')
nvApfclstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatNumRec.setDescription('number of records in use.')
nvApfclstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3), )
if mibBuilder.loadTexts: nvApfclstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatTable.setDescription('Apfclstat file.')
nvApfclstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApfclstatIndex"))
if mibBuilder.loadTexts: nvApfclstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatEntry.setDescription('Apfclstat record.')
nvApfclstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatIndex.setDescription('Index of Apfclstat record')
nvApfclstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatDate.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatDate.setDescription('Date of Call Failure.')
nvApfclstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatTime.setDescription('Time of Call Failure.')
nvApfclstatCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatCalling.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatCalling.setDescription('Calling telephone number.')
nvApfclstatCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatCalled.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatCalled.setDescription('Called telephone number.')
nvApfclstatAblock = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatAblock.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatAblock.setDescription('A-block received from terminal.')
nvApfclstatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatNua.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatNua.setDescription('NUA to which call was connected.')
nvApfclstatLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatLabel1.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatLabel1.setDescription('ANUACONF label1 used.')
nvApfclstatMerchid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatMerchid.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatMerchid.setDescription('Merchant ID from transaction.')
nvApfclstatTermid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTermid.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatTermid.setDescription('Terminal ID from transaction.')
nvApfclstatSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatSpeed.setDescription('Speed of modem.')
nvApfclstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatTxbytes.setDescription('Number of bytes sent.')
nvApfclstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatRxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatRxbytes.setDescription('Number of bytes received.')
nvApfclstatIsdnclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatIsdnclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatIsdnclr.setDescription('ISDN Clear codes.')
nvApfclstatX25clr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatX25clr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatX25clr.setDescription('X25 Clear codes.')
nvApfclstatDialind = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatDialind.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatDialind.setDescription('Dial indicator from the transaction data.')
nvApfclstatTermtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatTermtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatTermtype.setDescription('Terminal type from the transaction data.')
nvApfclstatPstndur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatPstndur.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatPstndur.setDescription('PSTN duration.')
nvApfclstatX25dur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatX25dur.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatX25dur.setDescription('X25 duration.')
nvApfclstatDspname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatDspname.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatDspname.setDescription('DSP Port Number.')
nvApfclstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatPriname.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatPriname.setDescription('PRI link number.')
nvApfclstatWanport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatWanport.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatWanport.setDescription('X25 Port Number.')
nvApfclstatFailcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("any", 1), ("none", 2), ("failneg", 3), ("noadrblk", 4), ("invadrblk", 5), ("nonuamtch", 6), ("trmdscsu", 7), ("loscarsu", 8), ("parerrsu", 9), ("x25clrcip", 10), ("acttmocip", 11), ("trmdsccip", 12), ("loscarcip", 13), ("lrcerrcip", 14), ("parerrcip", 15), ("tmoerrcip", 16), ("x25clrdat", 17), ("acttmodat", 18), ("trmdscdat", 19), ("loscardat", 20), ("dscnoack", 21), ("dscexcnak", 22), ("lrcerrdat", 23), ("parerrdat", 24), ("bdhostblk", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatFailcause.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatFailcause.setDescription('Failure Cause.')
nvApfclstatFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 9, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApfclstatFilter.setStatus('mandatory')
if mibBuilder.loadTexts: nvApfclstatFilter.setDescription('Filter number - not used in this file.')
nvApclstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 50, 10))
nvApclstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatMaxRec.setDescription('total number of records allowed in database file.')
nvApclstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatNumRec.setDescription('number of records in use.')
nvApclstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3), )
if mibBuilder.loadTexts: nvApclstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatTable.setDescription('Apclstat file.')
nvApclstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvApclstatIndex"))
if mibBuilder.loadTexts: nvApclstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatEntry.setDescription('Apclstat record.')
nvApclstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatIndex.setDescription('Index of Apclstat record')
nvApclstatDate = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatDate.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatDate.setDescription('Date of Call Failure.')
nvApclstatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTime.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatTime.setDescription('Time of Call Failure.')
nvApclstatCalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatCalling.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatCalling.setDescription('Calling telephone number.')
nvApclstatCalled = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatCalled.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatCalled.setDescription('Called telephone number.')
nvApclstatAblock = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatAblock.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatAblock.setDescription('A-block received from terminal.')
nvApclstatNua = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatNua.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatNua.setDescription('NUA to which call was connected.')
nvApclstatLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatLabel1.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatLabel1.setDescription('ANUACONF label1 used.')
nvApclstatMerchid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatMerchid.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatMerchid.setDescription('Merchant ID from transaction.')
nvApclstatTermid = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTermid.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatTermid.setDescription('Terminal ID from transaction.')
nvApclstatSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatSpeed.setDescription('Speed of modem.')
nvApclstatTxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatTxbytes.setDescription('Number of bytes sent.')
nvApclstatRxbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatRxbytes.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatRxbytes.setDescription('Number of bytes received.')
nvApclstatIsdnclr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatIsdnclr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatIsdnclr.setDescription('ISDN Clear codes.')
nvApclstatX25clr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatX25clr.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatX25clr.setDescription('X25 Clear codes.')
nvApclstatDialind = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatDialind.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatDialind.setDescription('Dial indicator from the transaction data.')
nvApclstatTermtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatTermtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatTermtype.setDescription('Terminal type from the transaction data.')
nvApclstatPstndur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatPstndur.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatPstndur.setDescription('PSTN duration.')
nvApclstatX25dur = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatX25dur.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatX25dur.setDescription('X25 duration.')
nvApclstatDspname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatDspname.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatDspname.setDescription('DSP Port Number.')
nvApclstatPriname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("pri1", 2), ("pri2", 3), ("pri3", 4), ("pri4", 5), ("pri5", 6), ("pri6", 7), ("pri7", 8), ("pri8", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatPriname.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatPriname.setDescription('PRI link number.')
nvApclstatWanport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatWanport.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatWanport.setDescription('X25 Port Number.')
nvApclstatFailcause = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("any", 1), ("none", 2), ("failneg", 3), ("noadrblk", 4), ("invadrblk", 5), ("nonuamtch", 6), ("trmdscsu", 7), ("loscarsu", 8), ("parerrsu", 9), ("x25clrcip", 10), ("acttmocip", 11), ("trmdsccip", 12), ("loscarcip", 13), ("lrcerrcip", 14), ("parerrcip", 15), ("tmoerrcip", 16), ("x25clrdat", 17), ("acttmodat", 18), ("trmdscdat", 19), ("loscardat", 20), ("dscnoack", 21), ("dscexcnak", 22), ("lrcerrdat", 23), ("parerrdat", 24), ("bdhostblk", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatFailcause.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatFailcause.setDescription('Failure Cause.')
nvApclstatFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 50, 10, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvApclstatFilter.setStatus('mandatory')
if mibBuilder.loadTexts: nvApclstatFilter.setDescription('Filter number used to produce this record.')
nvR2prof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 1))
nvR2profMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2profMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMaxRec.setDescription('total number of records allowed in database file.')
nvR2profNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2profNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profNumRec.setDescription('number of records in use.')
nvR2profTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3), )
if mibBuilder.loadTexts: nvR2profTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profTable.setDescription('R2prof file.')
nvR2profEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2profIndex"))
if mibBuilder.loadTexts: nvR2profEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profEntry.setDescription('R2prof record.')
nvR2profIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2profIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profIndex.setDescription('Index of R2prof record')
nvR2profProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profProfname.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profProfname.setDescription('Name of R2 flavor (profname)')
nvR2profSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profSuffix.setDescription('Abbreviation of R2 flavor (suffix) ')
nvR2profcdBits = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profcdBits.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profcdBits.setDescription(' Support for CD bits (cdbits) Default value 2 ')
nvR2profClearback = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClearback.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profClearback.setDescription(' Support for CLEAR_BACK (clearback) ')
nvR2profForcerel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profForcerel.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profForcerel.setDescription(' Support for Forced Release (forcerel) ')
nvR2profClearack = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClearack.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profClearack.setDescription(' Support for CLEAR_ACK (clearack) ')
nvR2profReanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7))).clone(namedValues=NamedValues(("sup", 6), ("notsup", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profReanswer.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profReanswer.setDescription(' Support for Reanswer (reanswer) ')
nvR2profMfmode = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(24, 25, 26))).clone(namedValues=NamedValues(("compelled", 24), ("semicompel", 25), ("noncompel", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfmode.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfmode.setDescription(' MF scheme for in-band signaling (mfmode) ')
nvR2profMfnextdig = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfnextdig.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfnextdig.setDescription(' MF code for send next digit (mfnextdig) ')
nvR2profMfrestart = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfrestart.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfrestart.setDescription(' MF code for restart (mfrestart) ')
nvR2profMfcongstion = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfcongstion.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfcongstion.setDescription(' MF code for eqpt congestion (mfcongestion) ')
nvR2profMfvacant = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfvacant.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfvacant.setDescription(' MF code for vacant number (mfvacant) ')
nvR2profMfspeech = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfspeech.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfspeech.setDescription(' MF code for set up speech charge (mfspeech) ')
nvR2profMfbusy = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfbusy.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfbusy.setDescription(' MF code for line busy (mfbusy) ')
nvR2profMfspchnc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfspchnc.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfspchnc.setDescription(' MF code for free no charge (mfspchnc) ')
nvR2profMfgroupb = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfgroupb.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfgroupb.setDescription(' MF code for change to group B (mfgroupb) ')
nvR2profMfanumsch = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfanumsch.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfanumsch.setDescription(' Trans prot type for calling number (mfanumsch) ')
nvR2profMftimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMftimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMftimeout.setDescription(' Timeout for MF signaling (mftimeout) ')
nvR2profStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvR2profAnswergrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profAnswergrd.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profAnswergrd.setDescription('Minimal duration of answer signal in ms.')
nvR2profClrfwdgrd = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClrfwdgrd.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profClrfwdgrd.setDescription('Minimal duration of clr fwd signal in ms.')
nvR2profMfabnrel = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("notapp", 1), ("a1", 32), ("a2", 33), ("a3", 34), ("a4", 35), ("a5", 36), ("a6", 37), ("a7", 38), ("a8", 39), ("a9", 40), ("a10", 41), ("a11", 42), ("a12", 43), ("a13", 44), ("a14", 45), ("a15", 46), ("b1", 47), ("b2", 48), ("b3", 49), ("b4", 50), ("b5", 51), ("b6", 52), ("b7", 53), ("b8", 54), ("b9", 55), ("b10", 56), ("b11", 57), ("b12", 58), ("b13", 59), ("b14", 60), ("b15", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profMfabnrel.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profMfabnrel.setDescription('MF code for abnormal release of inband.')
nvR2profIdlealmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profIdlealmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profIdlealmsk.setDescription('Mask alarms in IDLE state?')
nvR2profSeizalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profSeizalmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profSeizalmsk.setDescription('Mask alarms in SEIZED state?')
nvR2profSzakalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profSzakalmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profSzakalmsk.setDescription('Mask alarms in SEIZE ACK state?')
nvR2profAnswalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profAnswalmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profAnswalmsk.setDescription('Mask alarms in ANSWERED state?')
nvR2profClbkalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClbkalmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profClbkalmsk.setDescription('Mask alarms in ANSWERED state?')
nvR2profFcrlalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profFcrlalmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profFcrlalmsk.setDescription('Mask alarms in FORCE RELEASE state?')
nvR2profClfwalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profClfwalmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profClfwalmsk.setDescription('Mask alarms in CLEAR FWD state?')
nvR2profBlckalmsk = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 1, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2profBlckalmsk.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2profBlckalmsk.setDescription('Mask alarms in BLOCKED state?')
nvR2syspar = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 2))
nvR2sysparMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2sysparMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparMaxRec.setDescription('total number of records allowed in database file.')
nvR2sysparNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2sysparNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparNumRec.setDescription('number of records in use.')
nvR2sysparTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3), )
if mibBuilder.loadTexts: nvR2sysparTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparTable.setDescription('R2syspar file.')
nvR2sysparEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2sysparIndex"))
if mibBuilder.loadTexts: nvR2sysparEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparEntry.setDescription('R2syspar record.')
nvR2sysparIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2sysparIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparIndex.setDescription('Index of R2syspar record')
nvR2sysparProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparProfname.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparProfname.setDescription('Name of R2 flavor (profname)')
nvR2sysparMaxperdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparMaxperdsp.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparMaxperdsp.setDescription('Signaling channels allowed per R2DSP (maxperdsp)')
nvR2sysparAllocthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparAllocthrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparAllocthrs.setDescription(' Allocation threshold for R2DSPs (allocthrs) ')
nvR2sysparDeallthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparDeallthrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparDeallthrs.setDescription('Deallocation threshold for R2DSPs (deallthrs)')
nvR2sysparStatint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparStatint.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparStatint.setDescription('Health status message interval for R2DSPs (statint) ')
nvR2sysparAlarmint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparAlarmint.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparAlarmint.setDescription('Debounce for line status changes (alarmint)')
nvR2sysparLineway = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(104, 105))).clone(namedValues=NamedValues(("inonly", 104), ("inout", 105)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparLineway.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparLineway.setDescription('Direction of allowed R2 calls (lineway) ')
nvR2sysparMaxbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparMaxbnmlen.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparMaxbnmlen.setDescription('Maximum length of called number for incoming calls (maxbnmlen) default is zero ')
nvR2sysparMinbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparMinbnmlen.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparMinbnmlen.setDescription('Minimum length of called number for incoming calls (minbnmlen) Default value is zero ')
nvR2sysparGetcalling = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2sysparGetcalling.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2sysparGetcalling.setDescription('Whether or not calling number is needed (getcallng) default is yes ')
nvR2conf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 3))
nvR2confMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2confMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2confMaxRec.setDescription('total number of records allowed in database file.')
nvR2confNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2confNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2confNumRec.setDescription('number of records in use.')
nvR2confTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3), )
if mibBuilder.loadTexts: nvR2confTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2confTable.setDescription('R2conf file.')
nvR2confEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2confIndex"))
if mibBuilder.loadTexts: nvR2confEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2confEntry.setDescription('R2conf record.')
nvR2confIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2confIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2confIndex.setDescription('Index of R2conf record')
nvR2confDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2confDliname.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2confDliname.setDescription('Name of DLI port (dliname)')
nvR2confStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvR2confStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2confStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvR2pstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 4))
nvR2pstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatMaxRec.setDescription('total number of records allowed in database file.')
nvR2pstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatNumRec.setDescription('number of records in use.')
nvR2pstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3), )
if mibBuilder.loadTexts: nvR2pstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatTable.setDescription('R2pstat file.')
nvR2pstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2pstatIndex"))
if mibBuilder.loadTexts: nvR2pstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatEntry.setDescription('R2pstat record.')
nvR2pstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatIndex.setDescription('Index of R2pstat record')
nvR2pstatDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatDliname.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatDliname.setDescription('Name of DLI port (dliname)')
nvR2pstatPstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 2), ("up", 3), ("disabled", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatPstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatPstat.setDescription('Status of R2 port')
nvR2pstatTsstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTsstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatTsstat.setDescription("Status of R2 port's timeslots. s : means timeslot for synchronization O : means out-of-band signaling - : means no info yet B : means blocked I : means idle M : means in-band signaling (MF) C : means call is up E : means timeslot is in abnormal state D : means port is down.")
nvR2pstatObr2dsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatObr2dsp.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatObr2dsp.setDescription('R2DSP which has this ports ob sig channel')
nvR2pstatObstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nocircuit", 1), ("obcircsetup", 2), ("obsigsetup", 3), ("obsigup", 4), ("obbad", 5), ("dspbad", 6), ("swerr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatObstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatObstat.setDescription('status of the ob sig channel for this port')
nvR2pstatLstatinfo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatLstatinfo.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatLstatinfo.setDescription('Information accompanying a LINE_STATUS message')
nvR2pstatLinbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatLinbadcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatLinbadcnt.setDescription(' No. of line_status line_bad msg received')
nvR2pstatTsbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTsbadcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatTsbadcnt.setDescription('No. of line_status line_bad msg received ')
nvR2pstatTotisigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotisigatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatTotisigatt.setDescription('No. of incoming in-band channels created')
nvR2pstatToticalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatToticalatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatToticalatt.setDescription('No. of incoming R2 calls attempted')
nvR2pstatToticalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatToticalest.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatToticalest.setDescription('No. of incoming R2 calls established')
nvR2pstatTotosigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotosigatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatTotosigatt.setDescription('No. of outgoing in-band channels created')
nvR2pstatTotocalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotocalatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatTotocalatt.setDescription('No. of outgoing R2 calls attempted')
nvR2pstatTotocalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatTotocalest.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatTotocalest.setDescription('No. of outgoing R2 calls established')
nvR2pstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatDtreset.setDescription('date & time statistics last reset')
nvR2pstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 4, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2pstatFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2pstatFlavor.setDescription('Abbreviation of R2 flavor.')
nvR2dspstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 5))
nvR2dspstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatMaxRec.setDescription('total number of records allowed in database file.')
nvR2dspstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatNumRec.setDescription('number of records in use.')
nvR2dspstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3), )
if mibBuilder.loadTexts: nvR2dspstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatTable.setDescription('R2dspstat file.')
nvR2dspstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2dspstatIndex"))
if mibBuilder.loadTexts: nvR2dspstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatEntry.setDescription('R2dspstat record.')
nvR2dspstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatIndex.setDescription('Index of R2dspstat record')
nvR2dspstatDevname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatDevname.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatDevname.setDescription('Name of DSP device used for this R2DSP')
nvR2dspstatStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("r2dspinit", 1), ("r2dspconfig", 2), ("r2dspup", 3), ("r2dspdown", 4), ("r2dspfail", 5), ("tsmalfunc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatStat.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatStat.setDescription('Health status of R2DSP')
nvR2dspstatNumobchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatNumobchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatNumobchn.setDescription('Num of ob sig channels assigned to this R2DSP')
nvR2dspstatNumibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatNumibchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatNumibchn.setDescription('Num of ib channels assigned to this R2DSP')
nvR2dspstatUnusedchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatUnusedchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatUnusedchn.setDescription('Num of avaialble timeslots on this R2DSP')
nvR2dspstatTotobchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatTotobchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatTotobchn.setDescription('Cumulative total of ob channels assigned to this R2DSP')
nvR2dspstatTotibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatTotibchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatTotibchn.setDescription('Cumulative total of ib channels assigned to this R2DSP')
nvR2dspstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatDtreset.setDescription('date & time statistics last reset')
nvR2dspstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2dspstatFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2dspstatFlavor.setDescription('Abbreviation of the R2 Flavor.')
nvR2cstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 55, 6))
nvR2cstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatMaxRec.setDescription('total number of records allowed in database file.')
nvR2cstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatNumRec.setDescription('number of records in use.')
nvR2cstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3), )
if mibBuilder.loadTexts: nvR2cstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatTable.setDescription('R2cstat file.')
nvR2cstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvR2cstatIndex"))
if mibBuilder.loadTexts: nvR2cstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatEntry.setDescription('R2cstat record.')
nvR2cstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatIndex.setDescription('Index of R2cstat record')
nvR2cstatR2port = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatR2port.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatR2port.setDescription(' R2CONF record number of port carring timeslot of this call')
nvR2cstatTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatTimeslot.setDescription('Timeslot number')
nvR2cstatIbr2dsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatIbr2dsp.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatIbr2dsp.setDescription('R2DSPSTAT recnum of R2DSP carrying this circuit')
nvR2cstatCstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ibnocircuit", 1), ("ibcircsetup", 2), ("ibcircerr", 3), ("ibcirfail", 4), ("ibdspmalf", 5), ("nor2dspts", 6), ("ibdecode", 7), ("ibcomplete", 8), ("ibabnterm", 9), ("ibconrej", 10), ("rejected", 11), ("datacall", 12), ("cleared", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatCstat.setDescription(' Current status of this timeslot')
nvR2cstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatDirection.setDescription(' incoming or outgoing call')
nvR2cstatReason = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatReason.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatReason.setDescription(' For failed calls reason for the failure')
nvR2cstatCallnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCallnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatCallnum.setDescription('Sequence number of this call')
nvR2cstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCallednum.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatCallednum.setDescription(' Called number')
nvR2cstatCallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCallingnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatCallingnum.setDescription(' Calling number')
nvR2cstatLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("nolang", 1), ("discrim", 2), ("french", 3), ("english", 4), ("german", 5), ("russian", 6), ("spanish", 7), ("spare1", 8), ("spare2", 9), ("spare3", 10), ("spare4", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatLanguage.setDescription('Language of call')
nvR2cstatEchosup = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noechosup", 1), ("echosnone", 2), ("echoshalf", 3), ("echosfull", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatEchosup.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatEchosup.setDescription('Echo suppressor')
nvR2cstatCparty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 55, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("nocparty", 1), ("natsubpri", 2), ("natsubnopri", 3), ("natmaint", 4), ("spare", 5), ("natmanop", 6), ("natdata", 7), ("intsubnopri", 8), ("intsubpri", 9), ("intdata", 10), ("intopftc", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvR2cstatCparty.setStatus('mandatory')
if mibBuilder.loadTexts: nvR2cstatCparty.setDescription('Type of calling party')
nvRbsyspar = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 1))
nvRbsysparMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbsysparMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparMaxRec.setDescription('total number of records allowed in database file.')
nvRbsysparNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbsysparNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparNumRec.setDescription('number of records in use.')
nvRbsysparTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3), )
if mibBuilder.loadTexts: nvRbsysparTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparTable.setDescription('Rbsyspar file.')
nvRbsysparEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbsysparIndex"))
if mibBuilder.loadTexts: nvRbsysparEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparEntry.setDescription('Rbsyspar record.')
nvRbsysparIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbsysparIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparIndex.setDescription('Index of Rbsyspar record')
nvRbsysparMaxperdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparMaxperdsp.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparMaxperdsp.setDescription('Signaling channels allowed per RbDSP (maxperdsp)')
nvRbsysparAllocthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparAllocthrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparAllocthrs.setDescription(' Allocation threshold for RbDSPs (allocthrs) ')
nvRbsysparDeallthrs = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparDeallthrs.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparDeallthrs.setDescription('Deallocation threshold for RbDSPs (deallthrs)')
nvRbsysparStatint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparStatint.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparStatint.setDescription('Health status message interval for RbDSPs (statint) ')
nvRbsysparAlarmint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparAlarmint.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparAlarmint.setDescription('Debounce for line status changes (alarmint)')
nvRbsysparMaxbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparMaxbnmlen.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparMaxbnmlen.setDescription('Maximum length of called number for incoming calls (maxbnmlen) default is zero ')
nvRbsysparMinbnmlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparMinbnmlen.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparMinbnmlen.setDescription('Minimum length of called number for incoming calls (minbnmlen) Default value is zero ')
nvRbsysparPollint = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparPollint.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparPollint.setDescription('Polling interval for RB pipes. default is 25 ')
nvRbsysparStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbsysparStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbsysparStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvRbconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 2))
nvRbconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfMaxRec.setDescription('total number of records allowed in database file.')
nvRbconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfNumRec.setDescription('number of records in use.')
nvRbconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3), )
if mibBuilder.loadTexts: nvRbconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfTable.setDescription('Rbconf file.')
nvRbconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbconfIndex"))
if mibBuilder.loadTexts: nvRbconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfEntry.setDescription('Rbconf record.')
nvRbconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfIndex.setDescription('Index of Rbconf record')
nvRbconfDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfDliname.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfDliname.setDescription('Name of DLI port (dliname)')
nvRbconfProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfProfname.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfProfname.setDescription('Name of Prof')
nvRbconfRtmethod = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17))).clone(namedValues=NamedValues(("ibsig", 16), ("direct", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfRtmethod.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfRtmethod.setDescription('default 15')
nvRbconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvRbpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 3))
nvRbpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatMaxRec.setDescription('total number of records allowed in database file.')
nvRbpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatNumRec.setDescription('number of records in use.')
nvRbpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3), )
if mibBuilder.loadTexts: nvRbpstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatTable.setDescription('Rbpstat file.')
nvRbpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbpstatIndex"))
if mibBuilder.loadTexts: nvRbpstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatEntry.setDescription('Rbpstat record.')
nvRbpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatIndex.setDescription('Index of Rbpstat record')
nvRbpstatDliname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatDliname.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatDliname.setDescription('Name of (dliname)')
nvRbpstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatFlavor.setDescription('Name ')
nvRbpstatPstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 2), ("up", 3), ("disabled", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatPstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatPstat.setDescription('Status of Rb port')
nvRbpstatTsstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTsstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatTsstat.setDescription("Status of Rb port's timeslots. s : means timeslot for synchronization O : means out-of-band signaling - : means no info yet B : means blocked I : means idle M : means in-band signaling (MF) C : means call is up E : means timeslot is in abnormal state D : means port is down.")
nvRbpstatRbsrbdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatRbsrbdsp.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatRbsrbdsp.setDescription('RbsrbDSP which has this ports ob sig channel')
nvRbpstatRbstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("nopipe", 1), ("rbsigsetup", 3), ("rbsigup", 4), ("rbbad", 5), ("dspbad", 6), ("swerr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatRbstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatRbstat.setDescription('status of the ob sig channel for this port')
nvRbpstatLstatinfo = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatLstatinfo.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatLstatinfo.setDescription('Information accompanying a LINE_STATUS message')
nvRbpstatLinbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatLinbadcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatLinbadcnt.setDescription(' No. of line_status line_bad msg received')
nvRbpstatTsbadcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTsbadcnt.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatTsbadcnt.setDescription('No. of line_status line_bad msg received ')
nvRbpstatTotisigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotisigatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatTotisigatt.setDescription('No. of incoming in-band channels created')
nvRbpstatToticalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatToticalatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatToticalatt.setDescription('No. of incoming Rb calls attempted')
nvRbpstatToticalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatToticalest.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatToticalest.setDescription('No. of incoming Rb calls established')
nvRbpstatTotosigatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotosigatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatTotosigatt.setDescription('No. of outgoing in-band channels created')
nvRbpstatTotocalatt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotocalatt.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatTotocalatt.setDescription('No. of outgoing R2 calls attempted')
nvRbpstatTotocalest = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatTotocalest.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatTotocalest.setDescription('No. of outgoing Rb calls established')
nvRbpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 3, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbpstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbpstatDtreset.setDescription('date & time statistics last reset')
nvRbdspstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 4))
nvRbdspstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatMaxRec.setDescription('total number of records allowed in database file.')
nvRbdspstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatNumRec.setDescription('number of records in use.')
nvRbdspstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3), )
if mibBuilder.loadTexts: nvRbdspstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatTable.setDescription('Rbdspstat file.')
nvRbdspstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbdspstatIndex"))
if mibBuilder.loadTexts: nvRbdspstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatEntry.setDescription('Rbdspstat record.')
nvRbdspstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatIndex.setDescription('Index of Rbdspstat record')
nvRbdspstatDevname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatDevname.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatDevname.setDescription('Name of DSP device used for this RbDSP')
nvRbdspstatFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatFlavor.setDescription('flavor')
nvRbdspstatStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rbdspinit", 1), ("rbdspconfig", 2), ("rbdspup", 3), ("rbdspdown", 4), ("rbdspfail", 5), ("tsmalfunc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatStat.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatStat.setDescription('Health status of RbDSP')
nvRbdspstatNumrbpipe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatNumrbpipe.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatNumrbpipe.setDescription('Num of rbpipe sig channels assigned to this RbDSP')
nvRbdspstatNumibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatNumibchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatNumibchn.setDescription('Num of ib channels assigned to this RbDSP')
nvRbdspstatUnusedchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatUnusedchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatUnusedchn.setDescription('Num of avaialble timeslots on this RbDSP')
nvRbdspstatTotrbpipe = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatTotrbpipe.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatTotrbpipe.setDescription('Cumulative total of rbpipe channels assigned to this RbDSP')
nvRbdspstatTotibchn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatTotibchn.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatTotibchn.setDescription('Cumulative total of ib channels assigned to this RbDSP')
nvRbdspstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 4, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbdspstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbdspstatDtreset.setDescription('date & time statistics last reset')
nvRbcstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 5))
nvRbcstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatMaxRec.setDescription('total number of records allowed in database file.')
nvRbcstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatNumRec.setDescription('number of records in use.')
nvRbcstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3), )
if mibBuilder.loadTexts: nvRbcstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatTable.setDescription('Rbcstat file.')
nvRbcstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbcstatIndex"))
if mibBuilder.loadTexts: nvRbcstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatEntry.setDescription('Rbcstat record.')
nvRbcstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatIndex.setDescription('Index of Rbcstat record')
nvRbcstatRbport = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatRbport.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatRbport.setDescription('RBCONF record number of port carring timeslot of this call')
nvRbcstatTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatTimeslot.setDescription('Timeslot number')
nvRbcstatIbrbdsp = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatIbrbdsp.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatIbrbdsp.setDescription('RBDSPSTAT recnum of RBDSP carrying this circuit')
nvRbcstatCstat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ibnocircuit", 1), ("ibcircsetup", 2), ("ibcircerr", 3), ("ibcircfail", 4), ("ibdspmalf", 5), ("norbdspts", 6), ("ibdecode", 7), ("ibcomplete", 8), ("dirrouting", 9), ("ibabnterm", 10), ("ibconrej", 11), ("rejected", 12), ("datacall", 13), ("cleared", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCstat.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatCstat.setDescription(' Current status of this timeslot')
nvRbcstatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatDirection.setDescription(' incoming or outgoing call')
nvRbcstatReason = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatReason.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatReason.setDescription(' For failed calls reason for the failure')
nvRbcstatCallnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCallnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatCallnum.setDescription('Sequence number of this call')
nvRbcstatCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCallednum.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatCallednum.setDescription(' Called number')
nvRbcstatCallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbcstatCallingnum.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbcstatCallingnum.setDescription(' Calling number')
nvRbprof = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 58, 6))
nvRbprofMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbprofMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofMaxRec.setDescription('total number of records allowed in database file.')
nvRbprofNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbprofNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofNumRec.setDescription('number of records in use.')
nvRbprofTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3), )
if mibBuilder.loadTexts: nvRbprofTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofTable.setDescription('Rbprof file.')
nvRbprofEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvRbprofIndex"))
if mibBuilder.loadTexts: nvRbprofEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofEntry.setDescription('Rbprof record.')
nvRbprofIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvRbprofIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofIndex.setDescription('Index of Rbprof record')
nvRbprofProfname = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofProfname.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofProfname.setDescription('Name of RB flavor (profname)')
nvRbprofSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofSuffix.setDescription('Abbreviation of RB flavor (suffix) ')
nvRbprofSigtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("e-and-m", 2), ("loop", 3), ("ground", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofSigtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofSigtype.setDescription(' Support for CD bits (cdbits) Default value 2 ')
nvRbprofRlcf = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notapp", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofRlcf.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofRlcf.setDescription(' ')
nvRbprofLcfo = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notapp", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofLcfo.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofLcfo.setDescription(' ')
nvRbprofWinklen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofWinklen.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofWinklen.setDescription(' Support for CLEAR_ACK (clearack) ')
nvRbprofMfdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofMfdelay.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofMfdelay.setDescription('Duration in ms between wink and inband (mfdelay).')
nvRbprofDisconlen = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDisconlen.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofDisconlen.setDescription('Duration of EM disconnection.')
nvRbprofIbsigtype = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("dtmf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofIbsigtype.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofIbsigtype.setDescription('Inband signaling protocol to use.')
nvRbprofDtmftmout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDtmftmout.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofDtmftmout.setDescription('DTMF signal timeout.')
nvRbprofDtmfon = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDtmfon.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofDtmfon.setDescription('DTMF signal ON time.')
nvRbprofDtmfoff = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofDtmfoff.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofDtmfoff.setDescription('DTMF signal OFF time.')
nvRbprofStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 58, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvRbprofStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvRbprofStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvL2tpconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 1))
nvL2tpconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfMaxRec.setDescription('total number of records allowed in database file.')
nvL2tpconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfNumRec.setDescription('number of records in use.')
nvL2tpconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3), )
if mibBuilder.loadTexts: nvL2tpconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfTable.setDescription('l2tpconf file.')
nvL2tpconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tpconfIndex"))
if mibBuilder.loadTexts: nvL2tpconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfEntry.setDescription('l2tpconf record.')
nvL2tpconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfIndex.setDescription('Index of L2tpconf record.')
nvL2tpconfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfAdminStat.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfAdminStat.setDescription('enable l2tp protocol stack.')
nvL2tpconfAckTimout = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfAckTimout.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfAckTimout.setDescription('acknowlege timeout.')
nvL2tpconfInactivty = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfInactivty.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfInactivty.setDescription('Inactivty interval for hello msg.')
nvL2tpconfRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfRetrans.setDescription('max retransmit before closing.')
nvL2tpconfIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfIdle.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfIdle.setDescription('max idle prior to closing tunnel')
nvL2tpconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvL2tpconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpconfStatus.setDescription('Operation status. Add the record to the table (valid) or delete the record from the table (invalid).')
nvL2tpstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 2))
nvL2tpstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatMaxRec.setDescription('total number of records allowed in database file.')
nvL2tpstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatNumRec.setDescription('number of records in use.')
nvL2tpstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3), )
if mibBuilder.loadTexts: nvL2tpstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatTable.setDescription('L2tpstat file.')
nvL2tpstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tpstatIndex"))
if mibBuilder.loadTexts: nvL2tpstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatEntry.setDescription('L2tpstat record.')
nvL2tpstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatIndex.setDescription('Index of L2tpstat record')
nvL2tpstatActivTnls = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatActivTnls.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatActivTnls.setDescription('number of currently active tunnel')
nvL2tpstatActivSns = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatActivSns.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatActivSns.setDescription(' number of currently active session')
nvL2tpstatMlfrmPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatMlfrmPkt.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatMlfrmPkt.setDescription('number of malformed packets received by l2tp')
nvL2tpstatCtrlRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlRecv.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatCtrlRecv.setDescription('number of control packet received')
nvL2tpstatCtrlOofW = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlOofW.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatCtrlOofW.setDescription('number of control packet received outside of window')
nvL2tpstatCtrlOofS = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlOofS.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatCtrlOofS.setDescription('number of control packet received out of sequence')
nvL2tpstatCtrlSend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatCtrlSend.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatCtrlSend.setDescription('number of control packet sent')
nvL2tpstatDataRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatDataRecv.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatDataRecv.setDescription(' number of data packet received')
nvL2tpstatDataSend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatDataSend.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatDataSend.setDescription(' number of data packet sent')
nvL2tpstatTnlUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatTnlUnav.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatTnlUnav.setDescription('tunnels not created due to unavailable resources')
nvL2tpstatSessUnav = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatSessUnav.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatSessUnav.setDescription('number session not created due to unavailable resources')
nvL2tpstatProtVrsn = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatProtVrsn.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatProtVrsn.setDescription('l2tp protocol version number')
nvL2tpstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 2, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpstatDtreset.setDescription('date & time statistics last reset')
nvL2tptstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 3))
nvL2tptstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatMaxRec.setDescription('total number of records allowed in database file.')
nvL2tptstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatNumRec.setDescription('number of records in use.')
nvL2tptstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3), )
if mibBuilder.loadTexts: nvL2tptstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatTable.setDescription('L2tptstat file.')
nvL2tptstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tptstatIndex"))
if mibBuilder.loadTexts: nvL2tptstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatEntry.setDescription('L2tptstat record.')
nvL2tptstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatIndex.setDescription('Index of L2tptstat record')
nvL2tptstatLocalTnID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatLocalTnID.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatLocalTnID.setDescription('Local Tunnel Id of the LAC ')
nvL2tptstatRemotTnID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRemotTnID.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatRemotTnID.setDescription(' Local call id of the LNS')
nvL2tptstatLocalWSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatLocalWSiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatLocalWSiz.setDescription('Remote Call Id of the LNS')
nvL2tptstatRemotWSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRemotWSiz.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatRemotWSiz.setDescription('Call Serial Number')
nvL2tptstatRmtIPaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRmtIPaddr.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatRmtIPaddr.setDescription('Local Window Size')
nvL2tptstatRmtHstNme = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRmtHstNme.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatRmtHstNme.setDescription('PPP stat file record')
nvL2tptstatTunlState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("null", 1), ("idle", 2), ("cnnting", 3), ("estb", 4), ("disconn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatTunlState.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatTunlState.setDescription('Received Data Packets')
nvL2tptstatRecvCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRecvCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatRecvCtrl.setDescription('Received Control Packets')
nvL2tptstatRecvData = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatRecvData.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatRecvData.setDescription('Received Data Packets')
nvL2tptstatSendCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatSendCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatSendCtrl.setDescription('Sent Control Packets')
nvL2tptstatSendData = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatSendData.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatSendData.setDescription('Sent Data Packets')
nvL2tptstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 3, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tptstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tptstatDtreset.setDescription('date & time statistics last reset')
nvL2tpsstat = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 70, 4))
nvL2tpsstatMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatMaxRec.setDescription('total number of records allowed in database file.')
nvL2tpsstatNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatNumRec.setDescription('number of records in use.')
nvL2tpsstatTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3), )
if mibBuilder.loadTexts: nvL2tpsstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatTable.setDescription('l2tpsstat file.')
nvL2tpsstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvL2tpsstatIndex"))
if mibBuilder.loadTexts: nvL2tpsstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatEntry.setDescription('l2tpsstat record.')
nvL2tpsstatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatIndex.setDescription('Index of L2tpsstat record')
nvL2tpsstatTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatTunnelID.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatTunnelID.setDescription('Local Tunnel Id of the LAC.')
nvL2tpsstatLclCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatLclCallID.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatLclCallID.setDescription('Local Call Id of the LNS.')
nvL2tpsstatRmtCallID = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatRmtCallID.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatRmtCallID.setDescription('Remote Call Id of the LNS.')
nvL2tpsstatCallSN = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatCallSN.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatCallSN.setDescription('Call Serial Number.')
nvL2tpsstatState = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("null", 1), ("idle", 2), ("cnnting", 3), ("estb", 4), ("disconn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatState.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatState.setDescription('State.')
nvL2tpsstatDeviceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDeviceNum.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatDeviceNum.setDescription('Device Number.')
nvL2tpsstatDataRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDataRecv.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatDataRecv.setDescription('Received Data Packets.')
nvL2tpsstatDataSend = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDataSend.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatDataSend.setDescription('Sent Data Packets.')
nvL2tpsstatDtreset = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 70, 4, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvL2tpsstatDtreset.setStatus('mandatory')
if mibBuilder.loadTexts: nvL2tpsstatDtreset.setDescription('date & time statistics last reset')
nvTrapS0 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapS0.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapS0.setDescription('S0: 0-80 character trap string')
nvTrapS1 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapS1.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapS1.setDescription('S1: 0-80 character trap string')
nvTrapS2 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapS2.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapS2.setDescription('S2: 0-80 character trap string')
nvTrapN0 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapN0.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapN0.setDescription('N0: numeric trap value')
nvTrapN1 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapN1.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapN1.setDescription('N1: numeric trap value')
nvTrapN2 = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapN2.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapN2.setDescription('N2: numeric trap value')
nvTrapconf = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 64, 7))
nvTrapconfMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfMaxRec.setDescription('total number of traps that have been defined')
nvTrapconfNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfNumRec.setDescription('number of highest record in use.')
nvTrapconfTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3), )
if mibBuilder.loadTexts: nvTrapconfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfTable.setDescription('Nevada Traps Lists')
nvTrapconfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvTrapconfIndex"))
if mibBuilder.loadTexts: nvTrapconfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfEntry.setDescription('Nevada Trapconf definition.')
nvTrapconfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfIndex.setDescription('Index for traps.. for config purpose')
nvTrapconfTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvTrapconfTrapId.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfTrapId.setDescription('The assigned enterprise trap number')
nvTrapconfDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTrapconfDesc.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfDesc.setDescription('The Description of the specific trap')
nvTrapconfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 64, 7, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvTrapconfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvTrapconfStatus.setDescription('Operation status of the Trap. Use enable to generate trap and disable otherwise.')
nvReboot = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("reboot", 2), ("failed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvReboot.setStatus('mandatory')
if mibBuilder.loadTexts: nvReboot.setDescription('Reboot Nevada.')
nvWriteConfig = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("write", 1), ("executing", 2), ("successful", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvWriteConfig.setStatus('mandatory')
if mibBuilder.loadTexts: nvWriteConfig.setDescription('Write Configuration -save-')
nvDate = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvDate.setStatus('mandatory')
if mibBuilder.loadTexts: nvDate.setDescription('Set Nevada date/time. The Format is as follows yyyy mm dd hh mm ss')
nvWriteRoot = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("write", 1), ("executing", 2), ("successful", 3), ("failed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvWriteRoot.setStatus('mandatory')
if mibBuilder.loadTexts: nvWriteRoot.setDescription('Write Mediastat file (root)')
nvStartScript = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvStartScript.setStatus('mandatory')
if mibBuilder.loadTexts: nvStartScript.setDescription('Script Number to Start')
nvString = MibIdentifier((1, 3, 6, 1, 4, 1, 230, 5, 65, 6))
nvStringMaxRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvStringMaxRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvStringMaxRec.setDescription('total number of records available for all strings allowed in database file.')
nvStringNumRec = MibScalar((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvStringNumRec.setStatus('mandatory')
if mibBuilder.loadTexts: nvStringNumRec.setDescription('number of highest record in use.')
nvStringTable = MibTable((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3), )
if mibBuilder.loadTexts: nvStringTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvStringTable.setDescription('Nevada String List file.')
nvStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1), ).setIndexNames((0, "Telematics-Nevada-MIB", "nvStringIndex"))
if mibBuilder.loadTexts: nvStringEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvStringEntry.setDescription('Nevada String record.')
nvStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvStringIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvStringIndex.setDescription('Index of Nevada String record')
nvStringData = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvStringData.setStatus('mandatory')
if mibBuilder.loadTexts: nvStringData.setDescription('The data in the specific string, size up to 256')
nvStringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 230, 5, 65, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvStringStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nvStringStatus.setDescription('Operation status of the record. Use valid to add record to database file and invalid to delete record from database file.')
nvTrapDeviceConnected = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4352)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
if mibBuilder.loadTexts: nvTrapDeviceConnected.setDescription('Probable Cause The port placed or accepted call with the attached device. Probable Effect Nevada has a network connection Recommended Action Network connection is now available for data transfer. ')
nvTrapDeviceDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4353)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
if mibBuilder.loadTexts: nvTrapDeviceDisconnected.setDescription('Probable Cause The port disconnected with the attached device. Probable Effect Nevada does not have a network connection on the port. Recommended Action Refer stat files itipstat, iticstat, itiustat & portstat. ')
nvTrapDuiportavail = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4354)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
if mibBuilder.loadTexts: nvTrapDuiportavail.setDescription('Probable Cause number of available ports at site Probable Effect can place calls Recommended Action place calls ')
nvTrapNoIdlePorts = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4355))
if mibBuilder.loadTexts: nvTrapNoIdlePorts.setDescription('Probable Cause All available ports are in use Probable Effect No additional users will be able to call in. Recommended Action Add more ports to the particular site. ')
nvTrapDatatimerexpird = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4359)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
if mibBuilder.loadTexts: nvTrapDatatimerexpird.setDescription('Probable Cause Data mode timer expired Probable Effect Recommended Action ')
nvTrapDUIDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4365)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapDUIDown.setDescription('Probable Cause Both DUI Circuits down. Probable Effect Can not accept calls. Recommended Action ')
nvTrapDatabaseUpPrimary = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4377)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapDatabaseUpPrimary.setDescription('LSERVER: Database Up: primary NUA `S0`')
nvTrapDatabaseUpSecondary = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4378)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapDatabaseUpSecondary.setDescription('LSERVER: Database Up: secondary NUA `S0`')
nvTrapLinkNotReady = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4668)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapLinkNotReady.setDescription('Probable Cause X.25 detected that the link is down. Probable Effect Data transfer over the specified link not possible Recommended Action Correct the Physical connection and/or configuration ')
nvTrapLinkReady = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,4669)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapLinkReady.setDescription('Probable Cause X.25 detected that the link has come up. Probable Effect Data transfer over the specified link possible Recommended Action New calls can now be established on this link ')
nvTrapAlternateConfig = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5635)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapAlternateConfig.setDescription('Nevada running alternate config on side `n0`')
nvTrapDbautosave = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5636))
if mibBuilder.loadTexts: nvTrapDbautosave.setDescription('data base auto save')
nvTrapDbCrcError = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5637))
if mibBuilder.loadTexts: nvTrapDbCrcError.setDescription('Nevada CRC error on database')
nvTrapDbsavecount = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5638))
if mibBuilder.loadTexts: nvTrapDbsavecount.setDescription('save count is zero')
nvTrapLocalDatabaseChanged = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5639))
if mibBuilder.loadTexts: nvTrapLocalDatabaseChanged.setDescription('Nevada local database has been changed')
nvTrapRateIncreasedToL1 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5640)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapRateIncreasedToL1.setDescription('Nevada statistics rate increased to level 1')
nvTrapRateIncreasedToL2 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5641)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapRateIncreasedToL2.setDescription('Nevada statistics rate increased to level 2')
nvTrapRateDecreasedBelowL1 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5642)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapRateDecreasedBelowL1.setDescription('Nevada statistics rate decrease to below level 1')
nvTrapRateDecreasedBelowL2 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5643)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"), ("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapRateDecreasedBelowL2.setDescription('Nevada statistics rate decrease to below level 2')
nvTrapReachedStatus = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5644)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"))
if mibBuilder.loadTexts: nvTrapReachedStatus.setDescription('Nevada status value reached')
nvTrapLeftStatus = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5645)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"), ("Telematics-Nevada-MIB", "nvTrapS2"))
if mibBuilder.loadTexts: nvTrapLeftStatus.setDescription('Nevada status value no longer met')
nvTrapFramerfailaction = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5652)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapS1"))
if mibBuilder.loadTexts: nvTrapFramerfailaction.setDescription('Probable Cause framer failed to do the required action Probable Effect Recommended Action ')
nvTrapFramerfailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,5653)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapFramerfailed.setDescription('Probable Cause framer card in the indicated slot failed to do the requested action Probable Effect no traffic will flow Recommended Action check hardware and software configuration ')
nvTrapFrPortUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11520)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapFrPortUp.setDescription('Nevada Frame Relay Interface up ready')
nvTrapFrPortDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11521)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapFrPortDown.setDescription('Nevada Frame Relay Interface down not-ready')
nvTrapFrLMIError = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11522)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapFrLMIError.setDescription('Probable Cause The specified frame relay interface has detected LMI error. Probable Effect Stops PVC traffic. Recommended Action Wait for LMI to enter normal state to resume PVC traffic. ')
nvTrapFrLMINormal = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11523)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapFrLMINormal.setDescription('Probable Cause The specified frame relay interface has found LMI in normal state. Probable Effect Enables PVC traffic to resume. Recommended Action The FRI is available for data transfer. ')
nvTrapFrAllDLCIsUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11524)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapFrAllDLCIsUp.setDescription('Probable Cause All DLCIs on the FRI are functional. Probable Effect All FRPVCs enter data transfer state. Recommended Action All FRPVCs are available for data transfer. ')
nvTrapFrDLCIsDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,11525)).setObjects(("Telematics-Nevada-MIB", "nvItipstatPortname"), ("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapFrDLCIsDown.setDescription('Probable Cause One or more DLCIs on the FRI not functional. Probable Effect Data transfer will stop on the FRPVC that has gone down. Recommended Action Refer stat files fristat, frvcstat and frstat. ')
nvTrapElxUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,12032)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapElxUp.setDescription('Probable Cause ELX has gone up. Probable Effect Data can be exchanged Recommended Action Pass data through ')
nvTrapElxDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,12033)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapElxDown.setDescription('Probable Cause ELX has gone down. Probable Effect Data can not be exchanged Recommended Action Correct configuration, cable connection or the hardware setup. ')
nvTrapPppLcpUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14848)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapPppLcpUp.setDescription('Probable Cause The Link Control Protocol (LCP) has gone up. Probable Effect The link is configured, tested and available for higher-level protocols such as IPCP (Internet Protocol Control Protocol). Recommended Action The PPP link is now available for higher-level protocol such as IPCP. ')
nvTrapPppLcpDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14849)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapPppLcpDown.setDescription('Probable Cause The Link Control Protocol (LCP) has gone down. Probable Effect The link is not configured and is not available for higher-level protocols such as IPCP (Internet Protocol Control Protocol). Recommended Action Refer PPP statfile pppstat. ')
nvTrapPppIpcpOnLcpUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14850)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"), ("Telematics-Nevada-MIB", "nvTrapN1"))
if mibBuilder.loadTexts: nvTrapPppIpcpOnLcpUp.setDescription('Probable Cause The IP Control Protocol (IPCP) has gone up. Probable Effect The Network Layer Protocol is selected and datagrams can be sent. Recommended Action The PPP link is now available for datagram traffic. ')
nvPppIpcpOnLcpDown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,14851)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"), ("Telematics-Nevada-MIB", "nvTrapN1"))
if mibBuilder.loadTexts: nvPppIpcpOnLcpDown.setDescription('Probable Cause The IP Control Protocol (IPCP) has gone down. Probable Effect The Network Layer Protocol is not selected and datagrams can not be sent. Recommended Action Refer PPP statfile pppstat. ')
nvTrapPriDataLayerUp = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15136)).setObjects(("Telematics-Nevada-MIB", "nvPristatIndex"))
if mibBuilder.loadTexts: nvTrapPriDataLayerUp.setDescription('Probable Cause ISDN Data Layer Up PRI is functional on the DLI Probable Effect Data Channel responding. Recommended Action Unit is ready to receive ISDN calls ')
nvTrapPriDataLayerDn = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15137)).setObjects(("Telematics-Nevada-MIB", "nvPristatIndex"))
if mibBuilder.loadTexts: nvTrapPriDataLayerDn.setDescription('Probable Cause ISDN Data Layer Down PRI is Not functional on the DLI Probable Effect Data Channel not responding bchannel calls will fail Recommended Action Test the DLI and check associated Config in CDLI and PRICONF ')
nvTrapPppLcpNetworkPhase = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15500)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapPppLcpNetworkPhase.setDescription('Probable Cause The LCP protocol has entered the network phase on the PPP link Probable Effect Network layer protocols such as IPCP can now exchange packets on the link Recommended Action None ')
nvTrapPppLcpNetworkdown = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15501)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapPppLcpNetworkdown.setDescription('Probable Cause The LCP protocol is down on the network phase on the PPP link Probable Effect Network layer protocols such as IPCP can not exchange packets on the link Recommended Action ')
nvTrapPppMpLinkAdded = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15504)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapPppMpLinkAdded.setDescription('Probable Cause A PPP link has been added to a multilink bundle Probable Effect Greater bandwidth is available on the bundle Recommended Action None required. Informational only ')
nvTrapPppMpLinkDropped = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,15505)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"))
if mibBuilder.loadTexts: nvTrapPppMpLinkDropped.setDescription('Probable Cause A PPP link has been dropped from a multilink bundle Probable Effect The bandwidth for the bundle has been reduced. If this was the last link in the bundle the bundle will be closed Recommended Action None required, informational only ')
nvTrapDSPMFailedModemThresh1 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16896)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapDSPMFailedModemThresh1.setDescription('Probable Cause Number of Modem failures has reached the configured threshold one Probable Effect Modem failure results in failed calls Recommended Action check modem hardware/configuration ')
nvTrapDSPMFailedModemThresh2 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16897)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapDSPMFailedModemThresh2.setDescription('Probable Cause Number of Modem failures has reached the configured threshold two Probable Effect Modem failure results in failed calls Recommended Action check modem hardware/configuration ')
nvTrapDSPMFailedModemThresh3 = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16898)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapDSPMFailedModemThresh3.setDescription('Probable Cause Number of Modem failures has reached the configured threshold three Probable Effect Modem failure results in failed calls Recommended Action check modem hardware/configuration ')
nvTrapDSPRFailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16899)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapDSPRFailed.setDescription('Probable Cause DSPR has failed. Probable Effect DSPR card has failed -- hardware resources failure Recommended Action Replace the DSPR card ')
nvTrapISDNFailedCalls = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,16640)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapISDNFailedCalls.setDescription('Probable Cause Number of ISDN calls failure have reached the configured threshold Probable Effect ISDN failure -- results in failed ISDN calls Recommended Action check the ISDN IO cards/service provider/hardware ')
nvTrapFRAMERFailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17664)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapFRAMERFailed.setDescription('Probable Cause FRAMER card failure Probable Effect FRAMER card failure -- system failure Recommended Action replace the framer card ')
nvTrapQDLIFailed = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17920)).setObjects(("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapQDLIFailed.setDescription('Probable Cause QDLI card has failed Probable Effect QDLI card has failed Recommended Action None required, informational only ')
nvTrapRemovedCard = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17940)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapRemovedCard.setDescription('Probable Cause a card has been deleted in the indicated slot Probable Effect a card has been deleted -- hotswap Recommended Action None required, informational only ')
nvTrapCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 230, 5, 2, 1) + (0,17950)).setObjects(("Telematics-Nevada-MIB", "nvTrapS0"), ("Telematics-Nevada-MIB", "nvTrapN0"))
if mibBuilder.loadTexts: nvTrapCardInserted.setDescription('Probable Cause a card has been inserted in the indicated slot Probable Effect a card has been inserted -- hotswap Recommended Action None required, informational only ')
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvRbprofDisconlen=nvRbprofDisconlen, nvAcctstat64krxchars=nvAcctstat64krxchars, nvMpstatPart2InPkts=nvMpstatPart2InPkts, nvSDLIYelcnts=nvSDLIYelcnts, nvCrfstatAddr=nvCrfstatAddr, nvNmsuserRpoacode=nvNmsuserRpoacode, nvR2dspstatIndex=nvR2dspstatIndex, nevadaPpp=nevadaPpp, nvPosstatInvrqtpdu=nvPosstatInvrqtpdu, nvNetconEntry=nvNetconEntry, nvTnstatStatus=nvTnstatStatus, nvR2profSuffix=nvR2profSuffix, nvPristatCallrecvs=nvPristatCallrecvs, nvTcpcnstat=nvTcpcnstat, nvSDSPEvent7=nvSDSPEvent7, nvUgstatThresrejs=nvUgstatThresrejs, nvDspmallocTable=nvDspmallocTable, nvIpwanmapRevacc=nvIpwanmapRevacc, nvFrmrstatState=nvFrmrstatState, nvModemprofIndex=nvModemprofIndex, nvPridstatEntry=nvPridstatEntry, nvL2tpsstatMaxRec=nvL2tpsstatMaxRec, nvIpwanmapStatus=nvIpwanmapStatus, nvPosisoNumRec=nvPosisoNumRec, nvApacsstatRetrnnak=nvApacsstatRetrnnak, nvR2pstatTsbadcnt=nvR2pstatTsbadcnt, nvItimapStatus=nvItimapStatus, nvElxstatOutErrors=nvElxstatOutErrors, nvModemstatTable=nvModemstatTable, nvTrapN2=nvTrapN2, nvIticstatTrmdscdat=nvIticstatTrmdscdat, nvApmdmstatRxbytes=nvApmdmstatRxbytes, nvPosprofNumchan=nvPosprofNumchan, nvSDSPTable=nvSDSPTable, nvNetconMaxRec=nvNetconMaxRec, nvItipstatMaxRec=nvItipstatMaxRec, nvPricuconfStatus=nvPricuconfStatus, nvMpstatPart2OutDiscRq=nvMpstatPart2OutDiscRq, nvSDSPFailcaus=nvSDSPFailcaus, nvRadconfStatus=nvRadconfStatus, nvPppstatOutErrors=nvPppstatOutErrors, nvApacsstatActtmodat=nvApacsstatActtmodat, nvApacsstatTrmdscdat=nvApacsstatTrmdscdat, nvPristatDtreset=nvPristatDtreset, nvMpstatPart1Link15=nvMpstatPart1Link15, nvNmsuserCalldata=nvNmsuserCalldata, nvAbillstatP2call=nvAbillstatP2call, nvPosprofPolltim=nvPosprofPolltim, nvL2tpsstat=nvL2tpsstat, nvApacsconfEntry=nvApacsconfEntry, nvNmsuserStatus=nvNmsuserStatus, nvIcmpstatInSrcQus=nvIcmpstatInSrcQus, nvPppstatInOctets=nvPppstatInOctets, nvRbsysparMaxRec=nvRbsysparMaxRec, nvR2confEntry=nvR2confEntry, nvApmdmstatRxpkt=nvApmdmstatRxpkt, nvDialstatNbusy=nvDialstatNbusy, nvSDSPEvent1=nvSDSPEvent1, nvItipstatNdorigin=nvItipstatNdorigin, nvIcmpstatInErrs=nvIcmpstatInErrs, nvL2tpconfAdminStat=nvL2tpconfAdminStat, nvPosprofSkip=nvPosprofSkip, nvFtpconf=nvFtpconf, nvApclstatX25clr=nvApclstatX25clr, nvSnmpmgrstatus=nvSnmpmgrstatus, nvModemconfEntry=nvModemconfEntry, nvX25statNtxsegs=nvX25statNtxsegs, nvSDSPEvent11=nvSDSPEvent11, nvPricustatTable=nvPricustatTable, nvFriconfMode=nvFriconfMode, nvPosstatNactivchn=nvPosstatNactivchn, nvR2confNumRec=nvR2confNumRec, nvPridstatPriname=nvPridstatPriname, nvBillstatClosed=nvBillstatClosed, nvPosvisaField11=nvPosvisaField11, nvPosnmsmapNmsid=nvPosnmsmapNmsid, nvBillstatRxcallc=nvBillstatRxcallc, nvNmsuserOchrg=nvNmsuserOchrg, nvRbconfTable=nvRbconfTable, nvPriconfNumbplan=nvPriconfNumbplan, nvFristatTable=nvFristatTable, nvRrstatDtreset=nvRrstatDtreset, nvPosnmsmapMaxRec=nvPosnmsmapMaxRec, nvTnstatMaxRec=nvTnstatMaxRec, nvBillstatN2400bps=nvBillstatN2400bps, nvTrapPppLcpNetworkPhase=nvTrapPppLcpNetworkPhase, nvPosstatNmsbaddst=nvPosstatNmsbaddst, nvTnnlstatOutframes=nvTnnlstatOutframes, nevadaSnmp=nevadaSnmp, nvNetroutePrio=nvNetroutePrio, nvRrstatNumOcalls=nvRrstatNumOcalls, nvR2sysparStatint=nvR2sysparStatint, nvPosconfTable=nvPosconfTable, nvTnnlconfMaxRec=nvTnnlconfMaxRec, nvItipstatNinputs=nvItipstatNinputs, nvFriconfRsrcpool=nvFriconfRsrcpool, nvDialmapAddprefix=nvDialmapAddprefix, nvIprtstatType=nvIprtstatType, nvApfilterStatus=nvApfilterStatus, nvIticlassComfac=nvIticlassComfac, nvNetrouteTable=nvNetrouteTable, nvL2tptstatLocalWSiz=nvL2tptstatLocalWSiz, nvSDSPNumload=nvSDSPNumload, nvFrstatRxcurfps=nvFrstatRxcurfps, nvLinkstatRrrxs=nvLinkstatRrrxs, nvApclstatX25dur=nvApclstatX25dur, nvX25conf=nvX25conf, nvRoutemapNetaddr=nvRoutemapNetaddr, nvTcpstatTimeoutdrops=nvTcpstatTimeoutdrops, nvRbpstatTotisigatt=nvRbpstatTotisigatt, nvIticmd=nvIticmd, nvCrcstatRcsc2=nvCrcstatRcsc2, nvLinkstatIftxs=nvLinkstatIftxs, nvR2profReanswer=nvR2profReanswer, nvBillconfSet6=nvBillconfSet6, nvR2sysparAlarmint=nvR2sysparAlarmint, nvModemconfIndex=nvModemconfIndex, nvR2cstat=nvR2cstat, nvR2profFcrlalmsk=nvR2profFcrlalmsk, nvMpconfComptype=nvMpconfComptype, nvLcpconfSecurtmr=nvLcpconfSecurtmr, nvFrvcconfMappedpvc=nvFrvcconfMappedpvc, nvSDLITable=nvSDLITable, nvTcpstatEntry=nvTcpstatEntry, nvSnmpconfauthen=nvSnmpconfauthen, nvNodestat=nvNodestat, nvAbillstatPtxbytes=nvAbillstatPtxbytes, nvRbpstatLstatinfo=nvRbpstatLstatinfo, nvTnstatPortnum=nvTnstatPortnum, nvNsockconfNumRec=nvNsockconfNumRec, nvTcpprofProfname=nvTcpprofProfname, nvModemstatState=nvModemstatState, nvR2profClbkalmsk=nvR2profClbkalmsk, nvCFRMREntry=nvCFRMREntry, nvPppstatUserName=nvPppstatUserName, nvTnnlstat=nvTnnlstat, nvPosniimapIndex=nvPosniimapIndex, nvCrfstatCid=nvCrfstatCid, nvItirpoaMaxRec=nvItirpoaMaxRec, nvIticlassIndex=nvIticlassIndex, nvX25confNetaddr=nvX25confNetaddr, nvRbpstat=nvRbpstat, nvRrstatMaxcalls=nvRrstatMaxcalls, nvNsockmapEntry=nvNsockmapEntry, nvApacsstatActtmocip=nvApacsstatActtmocip, nvTnclassNumRec=nvTnclassNumRec, nvStringEntry=nvStringEntry, nvCrfstatIndex=nvCrfstatIndex, nvTnnlconfEntry=nvTnnlconfEntry, nvCrcstatCalledsub=nvCrcstatCalledsub, nvMpstatPart1UserName=nvMpstatPart1UserName, nvTslotstatNumcon=nvTslotstatNumcon, nvNetrouteNumRec=nvNetrouteNumRec, nvDlconfNumRec=nvDlconfNumRec, nvX25statNtxcalls=nvX25statNtxcalls, nvDportstatCli=nvDportstatCli, nvX25callCode=nvX25callCode, nvR2pstatIndex=nvR2pstatIndex, nvFrmrstatNumRxBytes=nvFrmrstatNumRxBytes, nvFtpconfUsername=nvFtpconfUsername, nvPosisoIndex=nvPosisoIndex, nvTncmapIndex=nvTncmapIndex, nvFtpconfReqaddr=nvFtpconfReqaddr, nvDportstatDuistatus=nvDportstatDuistatus, nvPosisoField58=nvPosisoField58, nvApacsstatX25conns=nvApacsstatX25conns, nvFrstatMrxcurfps=nvFrstatMrxcurfps, nvLcpconfComprot1=nvLcpconfComprot1, nvLinkconfPortname=nvLinkconfPortname, nvPosconfName=nvPosconfName, nvIpcpconf=nvIpcpconf, nvTcpstatSndpacks=nvTcpstatSndpacks, nevadaIti=nevadaIti, nvIcmpstat=nvIcmpstat, nvApacsstatRxnaks=nvApacsstatRxnaks, nvNodeconfStartup=nvNodeconfStartup, nvIcmpstatInTmStRps=nvIcmpstatInTmStRps, nvAcctstatCalling=nvAcctstatCalling, nvItiustatNpassfails=nvItiustatNpassfails, nvItirpoaCode=nvItirpoaCode, nvElxconf=nvElxconf, nvRaduserRespmsg=nvRaduserRespmsg, nvPricustatThresh2=nvPricustatThresh2, nvTrapLeftStatus=nvTrapLeftStatus, nvCDLIEnable=nvCDLIEnable, nvX25callNumRec=nvX25callNumRec, nvTrapPppMpLinkAdded=nvTrapPppMpLinkAdded, nvTrapDatatimerexpird=nvTrapDatatimerexpird, nvSFRMRTable=nvSFRMRTable, nvTnnlstatInframes=nvTnnlstatInframes, nevadaElx=nevadaElx, nvTcpstatRcvtotals=nvTcpstatRcvtotals, nvTcpstatConnattempts=nvTcpstatConnattempts, nvTncmapNumRec=nvTncmapNumRec, nvPricuconfThresh4=nvPricuconfThresh4, nvApfilterIndex=nvApfilterIndex, nvElxstat=nvElxstat, nvRbsysparMaxperdsp=nvRbsysparMaxperdsp, nvL2tptstatEntry=nvL2tptstatEntry, nvSFRMRNrxoff=nvSFRMRNrxoff, nvSlotstatCardid=nvSlotstatCardid, nvCrouteIndex=nvCrouteIndex, nvTncconfQuit=nvTncconfQuit, nvR2pstatToticalest=nvR2pstatToticalest, nvPricstatCallingno=nvPricstatCallingno, nvPosprofIndex=nvPosprofIndex, nvNetpvcPvccode=nvNetpvcPvccode, nvMediastatOrigimage=nvMediastatOrigimage, nvItimapClass=nvItimapClass, nvCrfstatEntry=nvCrfstatEntry, nvNodeconfNumRec=nvNodeconfNumRec, nvFriconfnP1=nvFriconfnP1, nvItirpoaStatus=nvItirpoaStatus, nvTncconfIndex=nvTncconfIndex, nvLinkstatRxdds=nvLinkstatRxdds, nvAbillstatP1call=nvAbillstatP1call, nvL2tpconfTable=nvL2tpconfTable, nvNodeconfRate2=nvNodeconfRate2, nvBillstatLess5=nvBillstatLess5, nvItipstatRpoa=nvItipstatRpoa, nvXnuasetNua1=nvXnuasetNua1, nvTcpstatKeeptimeos=nvTcpstatKeeptimeos, nvPriconfX25diags=nvPriconfX25diags, nvAcctstatTable=nvAcctstatTable, nvNetconNumRec=nvNetconNumRec, nvRbdspstatEntry=nvRbdspstatEntry, nvAcctoperMaxRec=nvAcctoperMaxRec, nvItiprofP9=nvItiprofP9, nvPosprofTcpmsglen=nvPosprofTcpmsglen, nvX25confFstacc=nvX25confFstacc, nvApclstatIndex=nvApclstatIndex, nvItiprofP22=nvItiprofP22, nvX25statNtxclrs=nvX25statNtxclrs, nvPosstatInvrstpdu=nvPosstatInvrstpdu, nvR2cstatIbr2dsp=nvR2cstatIbr2dsp, nvRadustatMaxRec=nvRadustatMaxRec, nvL2tpsstatDataSend=nvL2tpsstatDataSend, nvItipstatNrcode=nvItipstatNrcode, nvRbpstatToticalatt=nvRbpstatToticalatt, nvDialstatNabredial=nvDialstatNabredial, nvR2cstatReason=nvR2cstatReason, nvCDSPPortIndex=nvCDSPPortIndex, nvDialstatNnoModem=nvDialstatNnoModem, nvPosprofTpduaddr=nvPosprofTpduaddr, nvBillconfSet5nua3=nvBillconfSet5nua3, nvBillconfSet12nua2=nvBillconfSet12nua2, nvModemprofNumRec=nvModemprofNumRec, nevadaSync=nevadaSync, nvRadustatClass=nvRadustatClass, nvModemstatDsp=nvModemstatDsp, nvDialmap=nvDialmap, nvApacsconfMaxRec=nvApacsconfMaxRec, nvPricustatNumRec=nvPricustatNumRec, nvItiportEntry=nvItiportEntry)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvItiuserTable=nvItiuserTable, nvItiportTimer1=nvItiportTimer1, nvIprouteMask=nvIprouteMask, nvTnconfNumRec=nvTnconfNumRec, nvFristat=nvFristat, nvAbillstatP4time=nvAbillstatP4time, nvTnnlstatIndex=nvTnnlstatIndex, nvApmdmstat=nvApmdmstat, nvItiprofP20=nvItiprofP20, nvRaduserPasswd=nvRaduserPasswd, nvCFRMRName=nvCFRMRName, nvRadustatNumRec=nvRadustatNumRec, nvAbillstatPfail=nvAbillstatPfail, nvFrvcstatService=nvFrvcstatService, nvR2sysparGetcalling=nvR2sysparGetcalling, nvModemconfTable=nvModemconfTable, nvIpcpconfCompress=nvIpcpconfCompress, nvRadconfAcct3port=nvRadconfAcct3port, nvSlotstatTable=nvSlotstatTable, nvMpstatPart1RmtMRRU=nvMpstatPart1RmtMRRU, nvApacsstatMaxsimul=nvApacsstatMaxsimul, nvR2confTable=nvR2confTable, nvCFRMRSlotIndex=nvCFRMRSlotIndex, nvLinkstatLreset=nvLinkstatLreset, nvPosconfNumRec=nvPosconfNumRec, nvIticlassIchrg=nvIticlassIchrg, nvNodeconfEntry=nvNodeconfEntry, nvPppstatMaxRec=nvPppstatMaxRec, nvApacsstatCallrcv=nvApacsstatCallrcv, nvTncmap=nvTncmap, nvPristatTable=nvPristatTable, nvCrcstatReserve2=nvCrcstatReserve2, nvRadconfNbnsatt2=nvRadconfNbnsatt2, nvLcpconfAccm=nvLcpconfAccm, nvRadcstatNAuth3Rej=nvRadcstatNAuth3Rej, nvDlstatIftxs=nvDlstatIftxs, nvModemprofCmpdtype=nvModemprofCmpdtype, nvPosconfStatus=nvPosconfStatus, nvRbdspstatMaxRec=nvRbdspstatMaxRec, nvMpstatPart1Link4=nvMpstatPart1Link4, nvAnuaconfEntry=nvAnuaconfEntry, nvR2sysparLineway=nvR2sysparLineway, nvDlspcconfEntry=nvDlspcconfEntry, nvIpcpconfStatus=nvIpcpconfStatus, nvItiportMaxRec=nvItiportMaxRec, nvPosisoField46=nvPosisoField46, nvDialmapIndex=nvDialmapIndex, nvNmsuserTable=nvNmsuserTable, nvDspmallocStatus=nvDspmallocStatus, nvPristatMaxincom=nvPristatMaxincom, nvRadcstat=nvRadcstat, nvPriconfRsrcpool=nvPriconfRsrcpool, nvRbpstatTotocalatt=nvRbpstatTotocalatt, nvItiportIndex=nvItiportIndex, nvPriconfIndex=nvPriconfIndex, nvApacsconfBillingT1=nvApacsconfBillingT1, nvPppstatBundleId=nvPppstatBundleId, nvR2profMfabnrel=nvR2profMfabnrel, nvApacsstat=nvApacsstat, nvX25confTx0=nvX25confTx0, nvLcpconfMaxterm=nvLcpconfMaxterm, nvItiportRsrcpool=nvItiportRsrcpool, nvPristatEstreq=nvPristatEstreq, nvItipstatTxPsze=nvItipstatTxPsze, nvPosprofProtocol=nvPosprofProtocol, nvIcmpstatInDstUnrs=nvIcmpstatInDstUnrs, nvIticstatTcalls=nvIticstatTcalls, nvNmsuserWsiz=nvNmsuserWsiz, nvLinkconfAckthresh=nvLinkconfAckthresh, nvDialstatAdSucctim=nvDialstatAdSucctim, nvCrfstatRcsc2=nvCrfstatRcsc2, nvX25confDefwsze=nvX25confDefwsze, nvMpconfLnkLimit=nvMpconfLnkLimit, nvMpstatPart1=nvMpstatPart1, nvCDLIGain=nvCDLIGain, nvBillconfSet3nua2=nvBillconfSet3nua2, nvX25statNtxcallcs=nvX25statNtxcallcs, nvModemstatSelftest=nvModemstatSelftest, nvRbprofIbsigtype=nvRbprofIbsigtype, nvTnnlconfLineprot=nvTnnlconfLineprot, nvRbsysparIndex=nvRbsysparIndex, nvBillconf=nvBillconf, nvModemstatRxpclear=nvModemstatRxpclear, nvModemprofAnston=nvModemprofAnston, nvSnmpmgrIp=nvSnmpmgrIp, nvAnuaconfTable=nvAnuaconfTable, nvNetpvcIndex=nvNetpvcIndex, nvRoutemapTable=nvRoutemapTable, nvTncmapMaxRec=nvTncmapMaxRec, nvItiportFclevel=nvItiportFclevel, nvPriconfNfasgrp=nvPriconfNfasgrp, nvBillconfSet5nua2=nvBillconfSet5nua2, nvTnnlstatUserdata=nvTnnlstatUserdata, nvPppstatInDiscard=nvPppstatInDiscard, nvBillconfSet4nua2=nvBillconfSet4nua2, nvDportstatChstate=nvDportstatChstate, nvApacsstatHostnodat=nvApacsstatHostnodat, nvElxstatEntry=nvElxstatEntry, nvIcmpstatMaxRec=nvIcmpstatMaxRec, nvItiuserNumber=nvItiuserNumber, nvTnstatIndex=nvTnstatIndex, nvLinkstatProtocol=nvLinkstatProtocol, nvUgconfThreshld=nvUgconfThreshld, nvCrcstatState=nvCrcstatState, nvModemstatRate=nvModemstatRate, nvTcpstatDelacks=nvTcpstatDelacks, nvIticlassClasmsgid=nvIticlassClasmsgid, nvApacsstatDscexcnak=nvApacsstatDscexcnak, nvRbcstatIndex=nvRbcstatIndex, nvItipstatNtccs=nvItipstatNtccs, nvTnnlconf=nvTnnlconf, nvModemstatModel=nvModemstatModel, nvR2dspstatMaxRec=nvR2dspstatMaxRec, nvTnmapTnclass=nvTnmapTnclass, nvTrapN0=nvTrapN0, nvLinkstatTretrys=nvLinkstatTretrys, nvIpwanmapIndex=nvIpwanmapIndex, nvItiprofTable=nvItiprofTable, nvNetconCallingad=nvNetconCallingad, nvNsockmap=nvNsockmap, nvR2profMfcongstion=nvR2profMfcongstion, nvTcpstatPersisttimeos=nvTcpstatPersisttimeos, nvLcpconfTxmaxbuf=nvLcpconfTxmaxbuf, nvCDSPNumload=nvCDSPNumload, nvPppstatInEchRp=nvPppstatInEchRp, nvItiustat=nvItiustat, nvX25confAutostart=nvX25confAutostart, nvTslotstatOpstate=nvTslotstatOpstate, nvLinkconfT2=nvLinkconfT2, nvRbsysparEntry=nvRbsysparEntry, nvNmsuserNmsid=nvNmsuserNmsid, nvDialstatNcalling=nvDialstatNcalling, nvIproute=nvIproute, nvIcmpstatIndex=nvIcmpstatIndex, nvIticlassRpoatype=nvIticlassRpoatype, nvDlconfMaxRec=nvDlconfMaxRec, nvPristatStatus=nvPristatStatus, nvR2cstatEchosup=nvR2cstatEchosup, nvDuiconfStatus=nvDuiconfStatus, nvPriconfTsshift=nvPriconfTsshift, nvMpstatPart2OutOctets=nvMpstatPart2OutOctets, nvRadcstatDtreset=nvRadcstatDtreset, nvBillconfNumRec=nvBillconfNumRec, nvPricstatMaxRec=nvPricstatMaxRec, nvApclstatNua=nvApclstatNua, nvL2tptstatSendData=nvL2tptstatSendData, nvIticlass=nvIticlass, nvRbcstatDirection=nvRbcstatDirection, nvTcpstatSegstimeds=nvTcpstatSegstimeds, nvR2dspstatNumibchn=nvR2dspstatNumibchn, nvApfilterTermid=nvApfilterTermid, nvPppstatOutEchRp=nvPppstatOutEchRp, nvNetpvcPvcid=nvNetpvcPvcid, nvBillconfSet1nua1=nvBillconfSet1nua1, nvAbillstatB1time=nvAbillstatB1time, nvFristatPort=nvFristatPort, nvFristatRxexceszes=nvFristatRxexceszes, nvIprouteMetric=nvIprouteMetric, nvRadconfNumRec=nvRadconfNumRec, nvTrapFramerfailaction=nvTrapFramerfailaction, nvBillstatNgrtr2400=nvBillstatNgrtr2400, nvPristatMaxoutgo=nvPristatMaxoutgo, nvX25callTxpsze=nvX25callTxpsze, nvTcprstatMaxRec=nvTcprstatMaxRec, nvTslotconfTable=nvTslotconfTable, nvPristatEntry=nvPristatEntry, nvTslotstatIndex=nvTslotstatIndex, nvTrapDUIDown=nvTrapDUIDown, nvRbpstatTotosigatt=nvRbpstatTotosigatt, nvLinkconfT3=nvLinkconfT3, nvLinkstatNumRec=nvLinkstatNumRec, nvPosstatDtreset=nvPosstatDtreset, nvMediastatEntry=nvMediastatEntry, nvR2cstatCallingnum=nvR2cstatCallingnum, nvR2profNumRec=nvR2profNumRec, nvMpstatPart2Entry=nvMpstatPart2Entry, nvFtpstatCommstat=nvFtpstatCommstat, nvTcpstatTable=nvTcpstatTable, nvNodeconfClksrc1=nvNodeconfClksrc1, nvRbpstatTsstat=nvRbpstatTsstat, nvApmdmstatIndex=nvApmdmstatIndex, nvDportstatNumRec=nvDportstatNumRec, nvPosprofStatus=nvPosprofStatus, nvApfclstatDspname=nvApfclstatDspname, nvRoutemap=nvRoutemap, nvAcctoperEnable=nvAcctoperEnable, nvTcpstat=nvTcpstat, nvElxconfTable=nvElxconfTable, nvL2tpstatProtVrsn=nvL2tpstatProtVrsn, nvRbprofProfname=nvRbprofProfname, nvDlspcconfSitename=nvDlspcconfSitename, nvCrcstatL1prot=nvCrcstatL1prot, nvX25statCallcur=nvX25statCallcur, nvIptrunkTable=nvIptrunkTable, nvTcprstatIndex=nvTcprstatIndex, nvItipstatEntry=nvItipstatEntry, nvX25callRxwsze=nvX25callRxwsze, nvSnmpmgrTable=nvSnmpmgrTable, nvFriconfStatus=nvFriconfStatus, nvIprtstatMaxRec=nvIprtstatMaxRec, nvNetrouteService=nvNetrouteService, nvItiportIticlass=nvItiportIticlass, nvRoutemapAddrtype=nvRoutemapAddrtype, nvApacsstatLoscarsu=nvApacsstatLoscarsu, nvPosstatNmsreqs=nvPosstatNmsreqs, nvAcctoperTable=nvAcctoperTable, nvPosmsgmapTable=nvPosmsgmapTable, nvDportstatMaxRec=nvDportstatMaxRec, nvIticlassPromptid=nvIticlassPromptid, nvDuistatNretries=nvDuistatNretries, nvIpstat=nvIpstat, nvNsockmapMaxRec=nvNsockmapMaxRec, nvPosconfEntry=nvPosconfEntry, nvR2cstatMaxRec=nvR2cstatMaxRec, nvPosvisaName=nvPosvisaName, nvPosisoField21=nvPosisoField21, nvPosisoField43=nvPosisoField43, nvElxstatOutDiscrds=nvElxstatOutDiscrds, nvPosstatNousdest=nvPosstatNousdest, nvApacsconfNodename=nvApacsconfNodename, nvPosmsgmapMaxRec=nvPosmsgmapMaxRec, nvApfclstatCalling=nvApfclstatCalling, nvPosisoField27=nvPosisoField27, nvL2tpstatMaxRec=nvL2tpstatMaxRec, nvNodeconfDsprfail=nvNodeconfDsprfail, nvRadcstatNAuthLocl=nvRadcstatNAuthLocl, nvRrstatNumbers=nvRrstatNumbers, nvUgstatPool=nvUgstatPool, nvR2profIndex=nvR2profIndex, nvStringStatus=nvStringStatus, nvPosstatNumimsgs=nvPosstatNumimsgs, nvL2tpstatCtrlSend=nvL2tpstatCtrlSend, nvL2tpsstatDeviceNum=nvL2tpsstatDeviceNum, nvIprtstatNextHop=nvIprtstatNextHop, nvPridstatMaxRec=nvPridstatMaxRec, nvModemstatTxparity=nvModemstatTxparity, nvPosprofEntry=nvPosprofEntry, nvIptrunkNumRec=nvIptrunkNumRec, nvApacsstatDleeotrcv=nvApacsstatDleeotrcv, nvApacsstatNonuamtch=nvApacsstatNonuamtch, nvApacsstatNonuaentr=nvApacsstatNonuaentr, nvTncconfMaxRec=nvTncconfMaxRec, nvCDSPNumfaicon=nvCDSPNumfaicon, nvApacsstatRetrntmo=nvApacsstatRetrntmo, nvFrvcstatDtreset=nvFrvcstatDtreset, nvNetpvcmapPvccode=nvNetpvcmapPvccode, nvTrapQDLIFailed=nvTrapQDLIFailed, nvPosprofPermchan=nvPosprofPermchan, nvApacsstatNwadrblks=nvApacsstatNwadrblks, nvItipstatRxTput=nvItipstatRxTput, nvNsockmapIndex=nvNsockmapIndex, nvRaduserEntry=nvRaduserEntry, nvPosvisaField10=nvPosvisaField10, nvApacsstatRjadrblks=nvApacsstatRjadrblks)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvDuistatNaccepts=nvDuistatNaccepts, nvTslotconf=nvTslotconf, nvLinkstatEntry=nvLinkstatEntry, nvDuistatDtreset=nvDuistatDtreset, nvBillstatRxpak=nvBillstatRxpak, nvNas=nvNas, nvItiuserEntry=nvItiuserEntry, nvApfilterNumRec=nvApfilterNumRec, nvLcpconfComprot2=nvLcpconfComprot2, nvX25statIndex=nvX25statIndex, nvSDSPEvent10=nvSDSPEvent10, nvPosvisaIndex=nvPosvisaIndex, nvDlstatTouts=nvDlstatTouts, nvTrapPriDataLayerDn=nvTrapPriDataLayerDn, nvIticlassDialout=nvIticlassDialout, nvTslotstatCurdrprx=nvTslotstatCurdrprx, nvRbcstatEntry=nvRbcstatEntry, nvRaduserMaxRec=nvRaduserMaxRec, nvSFRMRMode=nvSFRMRMode, nvTnnlstatTable=nvTnnlstatTable, nvItipstatReservet=nvItipstatReservet, nvTnnlstatPortname=nvTnnlstatPortname, nvFristatEntry=nvFristatEntry, nvFriconfnT3=nvFriconfnT3, nvPppstatDtreset=nvPppstatDtreset, nvNodestatMincpu=nvNodestatMincpu, nvPosisoField33=nvPosisoField33, nvCrcstatDirection=nvCrcstatDirection, nvTnclassIndex=nvTnclassIndex, nvFriconfNumRec=nvFriconfNumRec, nvCrcstatMaxRec=nvCrcstatMaxRec, nvX25statNtxres=nvX25statNtxres, nvTcprstatEntry=nvTcprstatEntry, nvTncstatIndex=nvTncstatIndex, nvApacsstatTrmdscsu=nvApacsstatTrmdscsu, nvR2sysparIndex=nvR2sysparIndex, nvCFRMREIAtype=nvCFRMREIAtype, nvX25nuimapNui=nvX25nuimapNui, nvIticonfEntry=nvIticonfEntry, nvRadconfN1=nvRadconfN1, nvApacsstatNoadrblk=nvApacsstatNoadrblk, nvLinkconfHostinact=nvLinkconfHostinact, nvCDLICsudsu=nvCDLICsudsu, nvFtpstatCurrkbyrvs=nvFtpstatCurrkbyrvs, nvApfclstatRxbytes=nvApfclstatRxbytes, nvAnuaconfLabel1=nvAnuaconfLabel1, nvAbillstatTable=nvAbillstatTable, nvIticstatN14400bd=nvIticstatN14400bd, nvRaduserNumRec=nvRaduserNumRec, nvDspmallocMaxRec=nvDspmallocMaxRec, nvUgconfPool=nvUgconfPool, nvDlstatRnrrxs=nvDlstatRnrrxs, nvApclstatEntry=nvApclstatEntry, nvTcpstatKeepprobes=nvTcpstatKeepprobes, nvAcctstatDtreset=nvAcctstatDtreset, nvTnstatClientAddr=nvTnstatClientAddr, nvDspmallocWeight=nvDspmallocWeight, nvRadustatState=nvRadustatState, nvR2cstatR2port=nvR2cstatR2port, nvApfilterThreshold=nvApfilterThreshold, nvMpconfTxFragMin=nvMpconfTxFragMin, nvApacsconfReserve1=nvApacsconfReserve1, nvNodestatCurmincpu=nvNodestatCurmincpu, nvMediastatTable=nvMediastatTable, nvAbillstatPbtime=nvAbillstatPbtime, nvDialstatMaxRec=nvDialstatMaxRec, nvPricstatEntry=nvPricstatEntry, nvUgstatDtreset=nvUgstatDtreset, nvRadcstatTable=nvRadcstatTable, nvRadconfAuth1port=nvRadconfAuth1port, nvR2profSeizalmsk=nvR2profSeizalmsk, nvIpwanmapMask=nvIpwanmapMask, nvIpstatOutDiscrds=nvIpstatOutDiscrds, nvTcpstatConnects=nvTcpstatConnects, nvTcpprofKeepprbs=nvTcpprofKeepprbs, nvItipstatNoutputs=nvItipstatNoutputs, nvNetrouteEntry=nvNetrouteEntry, nvX25statDiag=nvX25statDiag, nvR2profMfnextdig=nvR2profMfnextdig, nvIpconfMtu=nvIpconfMtu, nvX25confDefpsze=nvX25confDefpsze, nvIcmpstatOutTmSts=nvIcmpstatOutTmSts, nvTncstatMode=nvTncstatMode, nvSnmpconfEntry=nvSnmpconfEntry, nvR2dspstatTotobchn=nvR2dspstatTotobchn, nvDuistatIndex=nvDuistatIndex, nvBillconfSet11nua1=nvBillconfSet11nua1, nvItiuserInitcmd=nvItiuserInitcmd, nvXbillstatDatarate=nvXbillstatDatarate, nvPosisoField57=nvPosisoField57, nvPosisoField2=nvPosisoField2, nvPriconfPriname=nvPriconfPriname, nvAbillstatNumRec=nvAbillstatNumRec, nvDlspcstatNports=nvDlspcstatNports, nvApacsconfStatus=nvApacsconfStatus, nvNodestatClkfails=nvNodestatClkfails, nvTcpstatRcvpacks=nvTcpstatRcvpacks, nvIticmdStatus=nvIticmdStatus, nvCDLILineimp=nvCDLILineimp, nvAbillstatTbcalls=nvAbillstatTbcalls, nvSFRMRState=nvSFRMRState, nvFriconfDlci=nvFriconfDlci, nvTnconfIndex=nvTnconfIndex, nvX25nuimapIndex=nvX25nuimapIndex, nvX25confDlnumber=nvX25confDlnumber, nvApclstatTermtype=nvApclstatTermtype, nvRbconfEntry=nvRbconfEntry, nvPosisoField61=nvPosisoField61, nvSlotstat=nvSlotstat, nvX25confNettype=nvX25confNettype, nvPosisoField4=nvPosisoField4, nvDlstatSstate=nvDlstatSstate, nvCDLIPortIndex=nvCDLIPortIndex, nvLinkstatN1=nvLinkstatN1, nvX25callNtxres=nvX25callNtxres, nvPosconfProfile=nvPosconfProfile, nvAcctstatDay=nvAcctstatDay, nvDlstat=nvDlstat, nvIcmpstatInEchRps=nvIcmpstatInEchRps, nvRoutemapNumRec=nvRoutemapNumRec, nvIticonfPadaddr=nvIticonfPadaddr, nvTnstatOptions=nvTnstatOptions, nvLinkconfWsze=nvLinkconfWsze, nvPosisoField17=nvPosisoField17, nvBillconfSet8nua3=nvBillconfSet8nua3, nvPosisoField47=nvPosisoField47, nvDialmapMaxRec=nvDialmapMaxRec, nvDialstatLastDiag=nvDialstatLastDiag, NvIsoType=NvIsoType, nvPosstatEftrsps=nvPosstatEftrsps, nvL2tptstatRemotTnID=nvL2tptstatRemotTnID, nvDlstatAlarms=nvDlstatAlarms, nvR2pstatTotocalest=nvR2pstatTotocalest, nvX25call=nvX25call, nvTcpprofMaxRec=nvTcpprofMaxRec, nvMpstatPart1Link8=nvMpstatPart1Link8, nvLcpconfInactivty=nvLcpconfInactivty, nvRbdspstatNumRec=nvRbdspstatNumRec, nvNetrouteNodeid=nvNetrouteNodeid, nvTnconfDeftnclass=nvTnconfDeftnclass, nvRbsyspar=nvRbsyspar, nvRbcstatTimeslot=nvRbcstatTimeslot, nvNetpvcmapIndex=nvNetpvcmapIndex, nvTcpcnstatLocalport=nvTcpcnstatLocalport, nvX25statNrxclrcs=nvX25statNrxclrcs, nvApfclstatCalled=nvApfclstatCalled, nvL2tptstatMaxRec=nvL2tptstatMaxRec, nvModemstatRenego=nvModemstatRenego, nvApacsconf=nvApacsconf, nvR2profMfbusy=nvR2profMfbusy, nvPosprofRetrytim=nvPosprofRetrytim, nvX25confDeftput=nvX25confDeftput, nvTncstatEntry=nvTncstatEntry, nvDrstatMaxused=nvDrstatMaxused, nvSDLISlotIndex=nvSDLISlotIndex, nvCrouteBw=nvCrouteBw, nvLcpconfRestartim=nvLcpconfRestartim, nvApmdmstatTxbytes=nvApmdmstatTxbytes, nvAcctoper=nvAcctoper, nvIcmpstatOutTmExcds=nvIcmpstatOutTmExcds, nvPppstat=nvPppstat, nvPppstatOutCmPcnt=nvPppstatOutCmPcnt, nvDportstatPorttype=nvDportstatPorttype, nvTnclass=nvTnclass, nvMpstatPart1Link11=nvMpstatPart1Link11, nvFrmrstatFailCause=nvFrmrstatFailCause, nvItipstatNrxpaks=nvItipstatNrxpaks, nvItiportName=nvItiportName, nvTslotstatService=nvTslotstatService, nvMpstatPart2InRsmErr=nvMpstatPart2InRsmErr, nvLcpconfItiudata=nvLcpconfItiudata, nvIpcpconfMaxRec=nvIpcpconfMaxRec, nvItiustatDuration=nvItiustatDuration, nvIpstatInDlvrs=nvIpstatInDlvrs, nvIticonfItiswitch=nvIticonfItiswitch, nvStringData=nvStringData, nvRaduserTable=nvRaduserTable, nvTncconfEscape=nvTncconfEscape, nvPosisoField36=nvPosisoField36, nvFrvcstatDrprxs=nvFrvcstatDrprxs, nvIticmdStringid=nvIticmdStringid, nvLinkstatMaxRec=nvLinkstatMaxRec, nvIpconf=nvIpconf, nvFtpstatIndex=nvFtpstatIndex, nevadaX25=nevadaX25, nvTrapRateDecreasedBelowL1=nvTrapRateDecreasedBelowL1, nvXbillconfBilltime=nvXbillconfBilltime, nvIpstatEntry=nvIpstatEntry, nvItipstatNcrxpaks=nvItipstatNcrxpaks, nvBillstatNetclr=nvBillstatNetclr, nvTncmapEntry=nvTncmapEntry, nvTrapDSPMFailedModemThresh2=nvTrapDSPMFailedModemThresh2, nvItimapIndex=nvItimapIndex, tmxNevada=tmxNevada, nvBillconf1Entry=nvBillconf1Entry, nvIticstatNnccs=nvIticstatNnccs, nvPppstatTnnlState=nvPppstatTnnlState, nvDlstatFrmrtxs=nvDlstatFrmrtxs, nvFrmrstatNumTxBytes=nvFrmrstatNumTxBytes, nvCrfstatMaxRec=nvCrfstatMaxRec, nvDportstatResetdate=nvDportstatResetdate, nevadaIsdn=nevadaIsdn, nvSDLISdlinm=nvSDLISdlinm, nvRrstatNumcalls=nvRrstatNumcalls, nvLinkstatFstate=nvLinkstatFstate, nevadaModels=nevadaModels, nvModemconfEnable=nvModemconfEnable, nvTncconfAyt=nvTncconfAyt, nvRbprofWinklen=nvRbprofWinklen, nvTrapRateIncreasedToL2=nvTrapRateIncreasedToL2, nvMediastatImage1sw=nvMediastatImage1sw, nvIpwanmapEntry=nvIpwanmapEntry, nvItiprofP27=nvItiprofP27, nvSnmpconfIndex=nvSnmpconfIndex, nvTnclassAobreak=nvTnclassAobreak, nvSlotstatNumRec=nvSlotstatNumRec, nvSDSPNumIncom=nvSDSPNumIncom, nvPristatCallinrels=nvPristatCallinrels, nvDportstatIncalls=nvDportstatIncalls, nvCrouteReserve1=nvCrouteReserve1, nvL2tpstat=nvL2tpstat, nvXbillstatRxpak=nvXbillstatRxpak, nvTcpstatSndbytes=nvTcpstatSndbytes, nvFrmrstatResetTime=nvFrmrstatResetTime, nvCrouteTable=nvCrouteTable, nvPosisoField9=nvPosisoField9, nvIticlassOutbar=nvIticlassOutbar, nvLcpconfMultilink=nvLcpconfMultilink, nvNsockconfTable=nvNsockconfTable, nvIticstatN1200bd=nvIticstatN1200bd, nvMpconfAdminS=nvMpconfAdminS, nvTncconfKill=nvTncconfKill, nvDuistatNrejects=nvDuistatNrejects, nvIpwanmapMtu=nvIpwanmapMtu, nvItipstatId=nvItipstatId, nvItiprofP35=nvItiprofP35, nvFtpstat=nvFtpstat, nvBillstatNodeid=nvBillstatNodeid, nvApmdmstatFlsess=nvApmdmstatFlsess, nvItipstatUsername=nvItipstatUsername, nvR2dspstatStat=nvR2dspstatStat, nvItiprofStatus=nvItiprofStatus, nvMpstatPart2OutEchRp=nvMpstatPart2OutEchRp, nvDportstatEntry=nvDportstatEntry, nvSFRMRSlotIndex=nvSFRMRSlotIndex, nvTncconfTable=nvTncconfTable, nvX25callNrxints=nvX25callNrxints, nvX25nuimapTable=nvX25nuimapTable, nvR2profBlckalmsk=nvR2profBlckalmsk, nvCrcstatCallngnum=nvCrcstatCallngnum, nvApfilterTable=nvApfilterTable, nvPosprofIdletime=nvPosprofIdletime, nvRbprof=nvRbprof, nvX25statNtxpaks=nvX25statNtxpaks)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvIpstatUnKnwnPrs=nvIpstatUnKnwnPrs, nvNodeconfClksrc2=nvNodeconfClksrc2, nvNmsuserPassword=nvNmsuserPassword, nvPosmsgmapIndex=nvPosmsgmapIndex, nvXnuasetSetname=nvXnuasetSetname, nvR2prof=nvR2prof, nvPosvisaField9=nvPosvisaField9, nvApacsstatInvadrblk=nvApacsstatInvadrblk, nvTrapAlternateConfig=nvTrapAlternateConfig, nvTnnlstatCallattfs=nvTnnlstatCallattfs, nvModemstatType=nvModemstatType, nvIticstatNumOutgo=nvIticstatNumOutgo, nvTcpstatRcvaftercloses=nvTcpstatRcvaftercloses, nvPosisoField28=nvPosisoField28, nvAbillstatP5time=nvAbillstatP5time, nvRbconfMaxRec=nvRbconfMaxRec, nvPosprofMode=nvPosprofMode, nvTrapS0=nvTrapS0, nvDlspcstat=nvDlspcstat, nvTncconfStatus=nvTncconfStatus, nvTcpstatSndurgs=nvTcpstatSndurgs, nvTrapconfEntry=nvTrapconfEntry, nvApfclstatIsdnclr=nvApfclstatIsdnclr, nvDrstatNumdev=nvDrstatNumdev, nvMpconfTxFrag=nvMpconfTxFrag, nvApacsstatLrcerrdat=nvApacsstatLrcerrdat, nvPosisoField32=nvPosisoField32, nvMpconfComprot2=nvMpconfComprot2, nvAcctstat64ktxchars=nvAcctstat64ktxchars, nvX25statNtxrnrs=nvX25statNtxrnrs, nvDlspcstatNumRec=nvDlspcstatNumRec, nvTnnlstatDtreset=nvTnnlstatDtreset, nvPriconfDchrst=nvPriconfDchrst, nvX25confNpc=nvX25confNpc, nvUgstatEntry=nvUgstatEntry, nvIpstatOutRqsts=nvIpstatOutRqsts, nvIticonfConfigstr=nvIticonfConfigstr, nvRbprofRlcf=nvRbprofRlcf, nvRadustatITimeout=nvRadustatITimeout, nvItipstatTable=nvItipstatTable, nvIpconfTable=nvIpconfTable, nvFrstatCurtime=nvFrstatCurtime, nvXnuasetStatus=nvXnuasetStatus, nvBillconfSet2nua2=nvBillconfSet2nua2, nvIpwanmapPvcid=nvIpwanmapPvcid, nvApfclstatSpeed=nvApfclstatSpeed, nvNodeconfDbversion=nvNodeconfDbversion, nvItiustatUsername=nvItiustatUsername, nvAnuaconfIndex=nvAnuaconfIndex, nvRbcstatRbport=nvRbcstatRbport, nvPriconfSwitch=nvPriconfSwitch, nvXbillstatGrtr20=nvXbillstatGrtr20, nvCrfstatRouting=nvCrfstatRouting, nvDialstatNcmderror=nvDialstatNcmderror, nvTslotconfMaxrxbuf=nvTslotconfMaxrxbuf, nvDialstatAdFailtim=nvDialstatAdFailtim, nvX25confUpdncmd=nvX25confUpdncmd, nvR2pstatFlavor=nvR2pstatFlavor, nvModemstatNumRec=nvModemstatNumRec, nvR2dspstatDtreset=nvR2dspstatDtreset, nvBillconfSet4=nvBillconfSet4, nvNodeconfRate4=nvNodeconfRate4, nvTnmap=nvTnmap, nvIcmpstatOutAdMsRps=nvIcmpstatOutAdMsRps, nvUgconfTable=nvUgconfTable, nvApmdmstatB4calls=nvApmdmstatB4calls, nvTcpcnstatTable=nvTcpcnstatTable, nvAcctstatNumRec=nvAcctstatNumRec, nvRadustatSType=nvRadustatSType, nvIpwanmapWsize=nvIpwanmapWsize, nvUgconfStatus=nvUgconfStatus, nvX25statNrxrrs=nvX25statNrxrrs, nvX25confXtend=nvX25confXtend, nvL2tpstatMlfrmPkt=nvL2tpstatMlfrmPkt, nvApfilterFailcause=nvApfilterFailcause, nvDuistatNua=nvDuistatNua, nvPosvisaField8=nvPosvisaField8, nvX25nuimapMaxRec=nvX25nuimapMaxRec, nvIpstatMaxRec=nvIpstatMaxRec, nvTslotstatNumRec=nvTslotstatNumRec, nvNetconSrccompid=nvNetconSrccompid, nvApacsstatEntry=nvApacsstatEntry, nvXbillstatLess5=nvXbillstatLess5, nvFrmrstatSlotIndex=nvFrmrstatSlotIndex, nvPosstatTable=nvPosstatTable, nvItiprofMaxRec=nvItiprofMaxRec, nvR2pstatEntry=nvR2pstatEntry, nvElxstatUnKnwnPrs=nvElxstatUnKnwnPrs, nvItipstatNnfails=nvItipstatNnfails, nvRbsysparStatus=nvRbsysparStatus, nvTncstatNumRec=nvTncstatNumRec, nvApfclstatAblock=nvApfclstatAblock, nvIticonfNumRec=nvIticonfNumRec, nvPristatNtxconn=nvPristatNtxconn, nvAbillstatB4time=nvAbillstatB4time, nvTnnlconfRsrcpool=nvTnnlconfRsrcpool, nvApacsstatTxbytes=nvApacsstatTxbytes, nvApfclstatPriname=nvApfclstatPriname, nvDlspcconfAbortmsg=nvDlspcconfAbortmsg, nvUgstatTable=nvUgstatTable, nvAbillstatTxbytes=nvAbillstatTxbytes, nvL2tptstatRmtIPaddr=nvL2tptstatRmtIPaddr, nvPosisoStatus=nvPosisoStatus, nvTncconf=nvTncconf, nvNmsuserCug=nvNmsuserCug, nvDlspcstatTable=nvDlspcstatTable, nvDuiconfRetrytime=nvDuiconfRetrytime, nvPppstatOutPkts=nvPppstatOutPkts, nvItiuserUserpaswd=nvItiuserUserpaswd, nvMpstatPart1Ipcp=nvMpstatPart1Ipcp, nvL2tpsstatCallSN=nvL2tpsstatCallSN, nvTcpstatRcvpartdupbytes=nvTcpstatRcvpartdupbytes, nvRadconfAcct=nvRadconfAcct, nvApmdmstatFltrain=nvApmdmstatFltrain, nvApacsstatRxbytes=nvApacsstatRxbytes, nvElxstatInErrors=nvElxstatInErrors, nvTnconf=nvTnconf, nvTnstatMode=nvTnstatMode, nvIpstatFragFails=nvIpstatFragFails, nvUgconfNumrsrvd=nvUgconfNumrsrvd, nvCrcstatCallngsub=nvCrcstatCallngsub, nvSDSPEvent4=nvSDSPEvent4, nvPriconfDsltype=nvPriconfDsltype, nvTcpcnstatState=nvTcpcnstatState, nvApclstatCalling=nvApclstatCalling, nvFrvcconfBe=nvFrvcconfBe, nvAbillstatB7call=nvAbillstatB7call, nvRadustatSTimeout=nvRadustatSTimeout, nvR2dspstatNumRec=nvR2dspstatNumRec, nvTcpcnstatMaxRec=nvTcpcnstatMaxRec, nvApmdmstatTbcalls=nvApmdmstatTbcalls, nvBillconfSet10=nvBillconfSet10, nvItiprofP10=nvItiprofP10, nvDuistatNumRec=nvDuistatNumRec, nvAbillstatP1time=nvAbillstatP1time, nvTslotstatTable=nvTslotstatTable, nvApacsstatX25clrcip=nvApacsstatX25clrcip, nvIticlassExitcmd=nvIticlassExitcmd, nvIcmpstatOutDstUnrs=nvIcmpstatOutDstUnrs, nvPosisoField19=nvPosisoField19, nvMediastatNumRec=nvMediastatNumRec, nvTncmapUsdata=nvTncmapUsdata, nvCrcstatDevice1=nvCrcstatDevice1, nvApfilterMerchid=nvApfilterMerchid, nvMpstatPart2Dtreset=nvMpstatPart2Dtreset, nvAbillstatB5time=nvAbillstatB5time, nvBillconf2Index=nvBillconf2Index, nvAcctstat64ktxpaks=nvAcctstat64ktxpaks, nvRadustatFrmRt=nvRadustatFrmRt, nvSFRMRNtxoff=nvSFRMRNtxoff, nvRbpstatToticalest=nvRbpstatToticalest, nvDialstatNdialout=nvDialstatNdialout, nvIcmpstatInPrmPrbs=nvIcmpstatInPrmPrbs, nvPosprofPolladdr=nvPosprofPolladdr, nvXbillconfSegsize=nvXbillconfSegsize, nvCrcstatCallednum=nvCrcstatCallednum, nvRaduserStatus=nvRaduserStatus, nvItiprofP19=nvItiprofP19, nvX25callNrxrnrs=nvX25callNrxrnrs, nvL2tpconfStatus=nvL2tpconfStatus, nvPricuconfTable=nvPricuconfTable, nvRrstatMaxRec=nvRrstatMaxRec, nvDialmapTable=nvDialmapTable, nvFrvcconfRxcgclear=nvFrvcconfRxcgclear, nvL2tptstatRemotWSiz=nvL2tptstatRemotWSiz, nvMpstatPart1LocMRRU=nvMpstatPart1LocMRRU, nvBillstatMaxRec=nvBillstatMaxRec, nvSDSPSlotIndex=nvSDSPSlotIndex, nvBillstat15to20=nvBillstat15to20, nvItipstat=nvItipstat, nvX25confThruneg=nvX25confThruneg, nvFrmrstatCallsPresent=nvFrmrstatCallsPresent, nvItipstatNnccs=nvItipstatNnccs, nvCrouteNumRec=nvCrouteNumRec, nvDialstatNnoInput=nvDialstatNnoInput, nvIpwanmapInactivty=nvIpwanmapInactivty, nvRadcstatMaxRec=nvRadcstatMaxRec, nvMpconfTrapEnable=nvMpconfTrapEnable, nvNetpvc=nvNetpvc, nvX25callIndex=nvX25callIndex, nvRbprofSigtype=nvRbprofSigtype, nvNsockconf=nvNsockconf, nvIticstatNnfails=nvIticstatNnfails, nvIticlassXoffout=nvIticlassXoffout, nvPosvisaField19=nvPosvisaField19, nvItiprofP23=nvItiprofP23, nvItipstatCug=nvItipstatCug, nvMpconfStatus=nvMpconfStatus, nvR2profClearack=nvR2profClearack, nvDuiconfFirsttry=nvDuiconfFirsttry, nvRbpstatIndex=nvRbpstatIndex, nvMpstatPart1Table=nvMpstatPart1Table, nvSDSPEvent3=nvSDSPEvent3, nvDialstatNumRec=nvDialstatNumRec, nvBillstatEntry=nvBillstatEntry, nvRbsysparStatint=nvRbsysparStatint, nvDuistatEntry=nvDuistatEntry, nvBillconf1Index=nvBillconf1Index, nvPosprofTable=nvPosprofTable, nvTnconfDefmaxbspace=nvTnconfDefmaxbspace, nvSlotstatIndex=nvSlotstatIndex, nvIfStackInfoHigherLI=nvIfStackInfoHigherLI, nvPosstatName=nvPosstatName, nvPosstatNumRec=nvPosstatNumRec, nvXbillstatHostclr=nvXbillstatHostclr, nvPristatNtxsetup=nvPristatNtxsetup, nvAnuaconfPreempt=nvAnuaconfPreempt, nvIpstatInDiscrds=nvIpstatInDiscrds, nvDrstatName=nvDrstatName, nvPosstatNumcalls=nvPosstatNumcalls, nvBillconf2Table=nvBillconf2Table, nvRbpstatNumRec=nvRbpstatNumRec, nvApfclstatNua=nvApfclstatNua, nvWriteRoot=nvWriteRoot, nvMpstatPart1RmtDisc=nvMpstatPart1RmtDisc, nvStringIndex=nvStringIndex, nvItirpoa=nvItirpoa, nvDportstatUptime=nvDportstatUptime, nvSDSPEvent5=nvSDSPEvent5, nvPosisoField12=nvPosisoField12, nvPriconfTable=nvPriconfTable, nvXbillstatTable=nvXbillstatTable, nvAnuaconfRetries=nvAnuaconfRetries, nvSDSPPortIndex=nvSDSPPortIndex, nvTnnlconfProt=nvTnnlconfProt, nvFtpstatCurrfisnds=nvFtpstatCurrfisnds, nvModemprofDspname=nvModemprofDspname, nvRbcstatIbrbdsp=nvRbcstatIbrbdsp, nvItiprofP16=nvItiprofP16, nvPricustatEntry=nvPricustatEntry, nevadaAdmin=nevadaAdmin, nvElxstatIndex=nvElxstatIndex, nvModemprofType=nvModemprofType, nvApfclstatTable=nvApfclstatTable, nvTrapFrAllDLCIsUp=nvTrapFrAllDLCIsUp, nvApfclstatEntry=nvApfclstatEntry, nvIpwanmapIpcp=nvIpwanmapIpcp, nvIpcpconfTest=nvIpcpconfTest, nvSDSPNumfnegs=nvSDSPNumfnegs, nvFrmrstatNumFailures=nvFrmrstatNumFailures, nvAcctstat64ktxsegs=nvAcctstat64ktxsegs, nvMpstatPart2OutEfrags=nvMpstatPart2OutEfrags, nvFtpstatTotalfals=nvFtpstatTotalfals, nvFristatOperstate=nvFristatOperstate, nvSDSPNumfaicon=nvSDSPNumfaicon, nvDrstatEntry=nvDrstatEntry, nvNetpvcmapNumRec=nvNetpvcmapNumRec, nvItirpoaEntry=nvItirpoaEntry, nvXbillstatTime=nvXbillstatTime, nvR2profSzakalmsk=nvR2profSzakalmsk, nvSDSPNumIfailneg=nvSDSPNumIfailneg, nvTslotstatServiceid=nvTslotstatServiceid, nvNsockconfEntry=nvNsockconfEntry, nvItipstatNcrxresets=nvItipstatNcrxresets)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvApacsstatCursimul=nvApacsstatCursimul, nvXnuasetMaxRec=nvXnuasetMaxRec, nvPosstatNmsrsps=nvPosstatNmsrsps, nvPosstatNbadframes=nvPosstatNbadframes, nvIticlassClaspaswd=nvIticlassClaspaswd, nvIpcpconfProfile=nvIpcpconfProfile, nvPristatCallaceps=nvPristatCallaceps, nvIprouteIpaddr=nvIprouteIpaddr, nvR2profIdlealmsk=nvR2profIdlealmsk, nvTnnlstatConnstat=nvTnnlstatConnstat, nvDlspcconfNodename=nvDlspcconfNodename, nvR2profStatus=nvR2profStatus, nvIcmpstatOutEchs=nvIcmpstatOutEchs, nvPosvisaField20=nvPosvisaField20, nvIpcpconfNbnsadd2=nvIpcpconfNbnsadd2, nvPriconfNumRec=nvPriconfNumRec, nvAcctstatSegsize=nvAcctstatSegsize, nvMpstatPart1Link6=nvMpstatPart1Link6, nvTcpprofIndex=nvTcpprofIndex, nvApfclstatTermtype=nvApfclstatTermtype, nvModemstat=nvModemstat, nvTcpprof=nvTcpprof, nvPosisoField5=nvPosisoField5, nvBillconfSet12=nvBillconfSet12, nvNetconIndex=nvNetconIndex, nvSFRMREntry=nvSFRMREntry, nvTcpcnstatRemport=nvTcpcnstatRemport, nvModemconfStatus=nvModemconfStatus, nvPosisoField37=nvPosisoField37, nvCDSPSlotIndex=nvCDSPSlotIndex, nvPosisoField51=nvPosisoField51, nvPosstatNotpdurt=nvPosstatNotpdurt, nvDialstatLastCause=nvDialstatLastCause, nvIticstatClassname=nvIticstatClassname, nvItiportTable=nvItiportTable, nvRadcstatNAuthRtry=nvRadcstatNAuthRtry, nvPriconfMaxRec=nvPriconfMaxRec, nvTcpstatRcvbadoffs=nvTcpstatRcvbadoffs, nvBillconf2Entry=nvBillconf2Entry, nvApmdmstatB6calls=nvApmdmstatB6calls, nvItiprofP1=nvItiprofP1, nvL2tpstatCtrlOofS=nvL2tpstatCtrlOofS, nvApmdmstatDtreset=nvApmdmstatDtreset, nvRbpstatLinbadcnt=nvRbpstatLinbadcnt, nvPosnmsmapStatus=nvPosnmsmapStatus, nvDialstatNinvnum=nvDialstatNinvnum, nvTncstatStatus=nvTncstatStatus, nvTrapFramerfailed=nvTrapFramerfailed, nvIticlassCalmethod=nvIticlassCalmethod, nvTcpstatRexmttimeos=nvTcpstatRexmttimeos, nevadaTcp=nevadaTcp, nvPosisoField16=nvPosisoField16, nvFrstatMtxcurfps=nvFrstatMtxcurfps, nvPosprofEftrspto=nvPosprofEftrspto, nvR2cstatTable=nvR2cstatTable, nvPosmsgmapEntry=nvPosmsgmapEntry, nvPosniimapTpduaddr=nvPosniimapTpduaddr, nvR2profMfspchnc=nvR2profMfspchnc, nvPppstatTable=nvPppstatTable, nvApacsstatTrmdsccip=nvApacsstatTrmdsccip, nvRbprofLcfo=nvRbprofLcfo, nvReboot=nvReboot, nvCrouteStatus=nvCrouteStatus, nvAcctstatSecond=nvAcctstatSecond, nvLcpconfUsrdelim=nvLcpconfUsrdelim, nvPosisoField10=nvPosisoField10, nvRbpstatEntry=nvRbpstatEntry, nvDuistatType=nvDuistatType, nvTrapRateDecreasedBelowL2=nvTrapRateDecreasedBelowL2, nvX25confTx2=nvX25confTx2, nvNodeconfAcctrec=nvNodeconfAcctrec, nvTcpstatRcvpartduppacks=nvTcpstatRcvpartduppacks, nvIticstatNumRec=nvIticstatNumRec, nvUgstat=nvUgstat, nvElxstatDtreset=nvElxstatDtreset, nvApclstatAblock=nvApclstatAblock, nvItipstatUserdata=nvItipstatUserdata, nvX25confMaxpsze=nvX25confMaxpsze, nvApacsstatParerrcip=nvApacsstatParerrcip, nvBillstatN300bps=nvBillstatN300bps, nvDuistatLastdiag=nvDuistatLastdiag, nvItiprofP31=nvItiprofP31, nvItiprofP15=nvItiprofP15, nvMediastatImagechg=nvMediastatImagechg, nvPosisoTable=nvPosisoTable, nvAbillstatPrxbytes=nvAbillstatPrxbytes, nvApacsstatNidle=nvApacsstatNidle, nvCrcstatBw=nvCrcstatBw, nvApacsstatN1200bd=nvApacsstatN1200bd, nvL2tpstatCtrlRecv=nvL2tpstatCtrlRecv, nvSymuserEntry=nvSymuserEntry, nvPosisoField38=nvPosisoField38, nvRrstatEntry=nvRrstatEntry, nvL2tpsstatTunnelID=nvL2tpsstatTunnelID, nvNetmapNodeid=nvNetmapNodeid, nvFtpconfEntry=nvFtpconfEntry, nvPosnmsmap=nvPosnmsmap, nvIpwanmapIdnum=nvIpwanmapIdnum, nvItiustatIndex=nvItiustatIndex, nvTnnlconfPortname=nvTnnlconfPortname, nvTnstatNumRec=nvTnstatNumRec, nvLinkstatAbtfrxs=nvLinkstatAbtfrxs, nvNetmapUserdata=nvNetmapUserdata, nvPppstatInEch=nvPppstatInEch, nvFristatErrorcounts=nvFristatErrorcounts, nvIticlassPvcid=nvIticlassPvcid, nvTcpstatSndctrls=nvTcpstatSndctrls, nvX25confRevacc=nvX25confRevacc, nvMpstatPart2Index=nvMpstatPart2Index, nvIticstatCurcalls=nvIticstatCurcalls, nvX25confLoc=nvX25confLoc, nvBillstatTime=nvBillstatTime, nvX25callNtxsegs=nvX25callNtxsegs, nvAcctstatTxchars=nvAcctstatTxchars, nvDlspcconfPortalarm=nvDlspcconfPortalarm, nvPristatNtxbusy=nvPristatNtxbusy, nvTcpprofTable=nvTcpprofTable, nvPppstatMultilink=nvPppstatMultilink, nvTcpstatDrops=nvTcpstatDrops, nvTncstatSessnum=nvTncstatSessnum, nvPosisoField64=nvPosisoField64, nvUgconfMaxbw=nvUgconfMaxbw, nvApmdmstatNwclr=nvApmdmstatNwclr, nvL2tpstatSessUnav=nvL2tpstatSessUnav, nvPosvisaField2=nvPosvisaField2, nvDialstatIndex=nvDialstatIndex, nvPosvisaField13=nvPosvisaField13, nvIcmpstatOutAdMs=nvIcmpstatOutAdMs, nvXbillconfNumRec=nvXbillconfNumRec, nvPppstatIpcp=nvPppstatIpcp, nvIpstatForwDatas=nvIpstatForwDatas, nvDuistatLink=nvDuistatLink, nvDlstatAbtfrxs=nvDlstatAbtfrxs, nvNmsuserNumRec=nvNmsuserNumRec, nvFriconfIndex=nvFriconfIndex, nvIticstatN2400bd=nvIticstatN2400bd, nvPosvisaTable=nvPosvisaTable, nvApacsconfBillingT4=nvApacsconfBillingT4, nvCrouteDirection=nvCrouteDirection, nvApmdmstatHostclr=nvApmdmstatHostclr, nvCrcstatRcsc1=nvCrcstatRcsc1, nvApclstatRxbytes=nvApclstatRxbytes, nvTslotstatNumfailcn=nvTslotstatNumfailcn, nvNetmapMaxRec=nvNetmapMaxRec, nvNetpvcmap=nvNetpvcmap, nvIcmpstatOutErrs=nvIcmpstatOutErrs, nvIpcpconfIndex=nvIpcpconfIndex, nvPosconfMaxRec=nvPosconfMaxRec, nvTcpstatSndtotals=nvTcpstatSndtotals, nvMediastatMediasize=nvMediastatMediasize, nvCDLIName=nvCDLIName, nvL2tpsstatDataRecv=nvL2tpsstatDataRecv, nvApacsstatFailneg=nvApacsstatFailneg, nvRadcstatRadcOperS=nvRadcstatRadcOperS, nvDrstatDtreset=nvDrstatDtreset, nvDialstatNdialtone=nvDialstatNdialtone, nvPppstatEntry=nvPppstatEntry, nvUgstatNumused=nvUgstatNumused, nvR2pstatTable=nvR2pstatTable, nvSDSPNumcalls=nvSDSPNumcalls, nvAbillstatB3call=nvAbillstatB3call, nvPriconfNumbtype=nvPriconfNumbtype, nvApfclstatIndex=nvApfclstatIndex, nvMpstatPart2InCmPcnt=nvMpstatPart2InCmPcnt, nvIprtstatDest=nvIprtstatDest, nvR2profcdBits=nvR2profcdBits, nvNodestatCurminbufs=nvNodestatCurminbufs, nvNmsuserIndex=nvNmsuserIndex, nvR2sysparEntry=nvR2sysparEntry, nvItiuserUsername=nvItiuserUsername, nvX25statTable=nvX25statTable, nvTrapFrPortDown=nvTrapFrPortDown, nvRadustatReqId=nvRadustatReqId, nvRoutemapEntry=nvRoutemapEntry, nvNodeconfFrmrfail=nvNodeconfFrmrfail, nvUgconfIndex=nvUgconfIndex, nvTncmapStatus=nvTncmapStatus, nvIcmpstatOutEchRps=nvIcmpstatOutEchRps, nvRbpstatTable=nvRbpstatTable, nvNetpvcPvcend=nvNetpvcPvcend, nvLinkstatLfrmr=nvLinkstatLfrmr, nvPosisoField8=nvPosisoField8, nvMpstatPart2OutDiscrd=nvMpstatPart2OutDiscrd, nvMpconfTxShortSeq=nvMpconfTxShortSeq, nvNetroute=nvNetroute, nvPosisoMaxRec=nvPosisoMaxRec, nvAcctstatRxsegs=nvAcctstatRxsegs, nvR2cstatNumRec=nvR2cstatNumRec, nvApacsstatIndex=nvApacsstatIndex, nvNodestatRxavgpps=nvNodestatRxavgpps, nvX25callTxtput=nvX25callTxtput, nvPriconfBusyout=nvPriconfBusyout, nvItipstatRxWsze=nvItipstatRxWsze, nvX25callLcn=nvX25callLcn, nvSDLIPortIndex=nvSDLIPortIndex, nvTnstat=nvTnstat, nvApacsconfBillingT5=nvApacsconfBillingT5, nvR2profClfwalmsk=nvR2profClfwalmsk, nvDrstatClass=nvDrstatClass, nvTslotconfStatus=nvTslotconfStatus, nvApfclstatDate=nvApfclstatDate, nvIticlassInvclrtim=nvIticlassInvclrtim, nvDportstatDowntime=nvDportstatDowntime, nvIticlassTermtype=nvIticlassTermtype, nvTrapElxDown=nvTrapElxDown, nvCrouteRouting=nvCrouteRouting, nvIticlassX29mskstr=nvIticlassX29mskstr, nvTncmapTable=nvTncmapTable, nvPosisoField44=nvPosisoField44, nvCrcstatDevice0=nvCrcstatDevice0, nvModemprof=nvModemprof, nvFrvcstatRxbufdepletion=nvFrvcstatRxbufdepletion, nvLinkconfProtocol=nvLinkconfProtocol, nvX25nuimapNumRec=nvX25nuimapNumRec, nvTnclassClassname=nvTnclassClassname, nvRbconfStatus=nvRbconfStatus, nvApacsstatTrmnoack=nvApacsstatTrmnoack, nvItiprofNumRec=nvItiprofNumRec, nvIpwanmapMetric=nvIpwanmapMetric, nvL2tptstatNumRec=nvL2tptstatNumRec, nvLinkconfWaitframe=nvLinkconfWaitframe, nvIticstatLoscardat=nvIticstatLoscardat, nvPosvisaStatus=nvPosvisaStatus, nvRbdspstatFlavor=nvRbdspstatFlavor, nvTnconfNumSess=nvTnconfNumSess, nvNodeconfClksrc3=nvNodeconfClksrc3, nvXbillstatTxseg=nvXbillstatTxseg, nvFtpstatNumreqs=nvFtpstatNumreqs, nvTncmapIpaddr=nvTncmapIpaddr, nvTrapFrLMINormal=nvTrapFrLMINormal, nvRadconfAuth2=nvRadconfAuth2, nvFrvcconfT=nvFrvcconfT, nvTrapDSPRFailed=nvTrapDSPRFailed, nvTcpstatCloseds=nvTcpstatCloseds, nvNodestatRxcurpps=nvNodestatRxcurpps, nvMpstatPart2OutCmPcnt=nvMpstatPart2OutCmPcnt, nvPristatMaxtsetup=nvPristatMaxtsetup, nvTnnlstatRsrcpool=nvTnnlstatRsrcpool, nvCrfstatCallednum=nvCrfstatCallednum, nvIticstatNumcalls=nvIticstatNumcalls, nvX25confTx3=nvX25confTx3, nvPosisoField50=nvPosisoField50, nvApfclstatX25clr=nvApfclstatX25clr, nvCrcstatReserve1=nvCrcstatReserve1, nvIpwanmapTput=nvIpwanmapTput, nvTncconfEntry=nvTncconfEntry, nvX25callExpack=nvX25callExpack, nvLinkstatTcharrxs=nvLinkstatTcharrxs, nvLcpconfEntry=nvLcpconfEntry, nvLcpconfPort=nvLcpconfPort, nvTnconfMaxRec=nvTnconfMaxRec, nvRadcstatNAuth2Rej=nvRadcstatNAuth2Rej, nvLinkstatNlinkup=nvLinkstatNlinkup, nvBillconfSet4nua3=nvBillconfSet4nua3)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvTcpstatKeepdrops=nvTcpstatKeepdrops, nvRadconfAcctauth=nvRadconfAcctauth, nvRadconfAuth1=nvRadconfAuth1, nvPricstatSeqno=nvPricstatSeqno, nvFriconfMaxfrmsz=nvFriconfMaxfrmsz, nvMpstatPart1NumRec=nvMpstatPart1NumRec, nvX25confMaxwsze=nvX25confMaxwsze, nvR2profMfvacant=nvR2profMfvacant, nvNodestatDtreset=nvNodestatDtreset, nvDportstatDtreset=nvDportstatDtreset, nvAbillstatP6call=nvAbillstatP6call, nvSDSPState=nvSDSPState, nvPosconfIndex=nvPosconfIndex, nvBillconfSet12nua3=nvBillconfSet12nua3, nvSDLIRxfrmslp=nvSDLIRxfrmslp, nvAcctstatMaxRec=nvAcctstatMaxRec, nvRadconfT1=nvRadconfT1, nvTncmapTcppn=nvTncmapTcppn, nvApacsstatX25clrdat=nvApacsstatX25clrdat, nvBillconfSet3=nvBillconfSet3, nvDlstatRrrxs=nvDlstatRrrxs, nvDlstatTable=nvDlstatTable, nvPosisoField26=nvPosisoField26, nvItirpoaTable=nvItirpoaTable, nvBillconfSet6nua1=nvBillconfSet6nua1, nvCDLIAtten=nvCDLIAtten, nvTncmapMode=nvTncmapMode, nvSnmpconfstatus=nvSnmpconfstatus, nvLinkstatRrtxs=nvLinkstatRrtxs, nvIptrunkEntry=nvIptrunkEntry, nvPosnmsmapIndex=nvPosnmsmapIndex, nvSFRMRRate=nvSFRMRRate, nvSnmpconf=nvSnmpconf, nvRrstatNumRec=nvRrstatNumRec, nvIprouteTable=nvIprouteTable, nvPricstatPriname=nvPricstatPriname, nvR2sysparTable=nvR2sysparTable, nvL2tpstatEntry=nvL2tpstatEntry, nvCrcstatNumRec=nvCrcstatNumRec, nvMpstatPart1Link14=nvMpstatPart1Link14, nvApacsstatN2400bd=nvApacsstatN2400bd, nvRbprofIndex=nvRbprofIndex, nvCDSPEntry=nvCDSPEntry, nvItipstatX28type=nvItipstatX28type, nvFriconfTable=nvFriconfTable, nvTcprstatOutport=nvTcprstatOutport, nvAnuaconfMaxRec=nvAnuaconfMaxRec, nvAcctstatRecorg=nvAcctstatRecorg, nvPosstatRspnomtch=nvPosstatRspnomtch, nvIpconfIndex=nvIpconfIndex, nvTslotconfNumRec=nvTslotconfNumRec, nvMpstatPart1Profile=nvMpstatPart1Profile, nvSymuserUsername=nvSymuserUsername, nvX25callEntry=nvX25callEntry, nvApacsconfIndex=nvApacsconfIndex, nvApfclstatNumRec=nvApfclstatNumRec, nvMpconfMaxRec=nvMpconfMaxRec, nvDialstatMaxcall=nvDialstatMaxcall, nvIfStackInfoNumRec=nvIfStackInfoNumRec, nvTnmapPortnum=nvTnmapPortnum, nvFtpstatTotalkbysds=nvFtpstatTotalkbysds, nevadaTraps=nevadaTraps, nvLinkstatFrmrtxs=nvLinkstatFrmrtxs, nvAbillstatB6call=nvAbillstatB6call, nvLcpconfPfc=nvLcpconfPfc, nvAcctstatCallid=nvAcctstatCallid, nvPosnmsmapEntry=nvPosnmsmapEntry, nvCrouteAddr=nvCrouteAddr, nvApclstatFilter=nvApclstatFilter, nvSDSPDtreset=nvSDSPDtreset, telematics=telematics, nvPosisoField15=nvPosisoField15, nvCrfstatCause=nvCrfstatCause, nvNodeconfPartnum=nvNodeconfPartnum, nvLinkstatRnrrxs=nvLinkstatRnrrxs, nvTcpstatSndacks=nvTcpstatSndacks, nvIfStackInfoTable=nvIfStackInfoTable, nvTnnlstatRtstring=nvTnnlstatRtstring, nvPricuconfEntry=nvPricuconfEntry, nvPppstatInCmPcnt=nvPppstatInCmPcnt, nvIprtstatTable=nvIprtstatTable, nvRbprofMaxRec=nvRbprofMaxRec, nvDialmapStatus=nvDialmapStatus, nvPricstatL1prot=nvPricstatL1prot, nvPppstatRealm=nvPppstatRealm, nvTslotconfEntry=nvTslotconfEntry, nvTcpstatSndrexmitpacks=nvTcpstatSndrexmitpacks, nvX25confNic=nvX25confNic, nvDialstatLastResponse=nvDialstatLastResponse, nvR2sysparMaxperdsp=nvR2sysparMaxperdsp, nvMpconfComprot1=nvMpconfComprot1, nvPosisoField52=nvPosisoField52, nvRbprofDtmfon=nvRbprofDtmfon, nvItiprofP26=nvItiprofP26, nvX25confTable=nvX25confTable, nvFtpstatCurrstat=nvFtpstatCurrstat, nvTncconfSuspend=nvTncconfSuspend, nvIticlassBannerid=nvIticlassBannerid, nvBillconfSet8nua1=nvBillconfSet8nua1, nvX25statMaxRec=nvX25statMaxRec, nvIpstatNumRec=nvIpstatNumRec, nvDportstatTable=nvDportstatTable, nvDlstatMaxRec=nvDlstatMaxRec, nvIticlassTable=nvIticlassTable, nvPppstatCcpOperS=nvPppstatCcpOperS, nvPosniimapEntry=nvPosniimapEntry, nvFristatMaxRec=nvFristatMaxRec, nvDlstatTretrys=nvDlstatTretrys, nvNsockmapNetaddr=nvNsockmapNetaddr, nvNmsuserCalladdr=nvNmsuserCalladdr, nvNetrouteMaxRec=nvNetrouteMaxRec, nvIptrunkMaxRec=nvIptrunkMaxRec, nvItipstatIndex=nvItipstatIndex, nvXbillstat=nvXbillstat, nvSnmpmgrNumRec=nvSnmpmgrNumRec, nvApacsconfBillingT6=nvApacsconfBillingT6, nvPricstat=nvPricstat, nvTcpstatRcvduppacks=nvTcpstatRcvduppacks, nvNsockmapIpaddr=nvNsockmapIpaddr, nvPppstatIpcpOperS=nvPppstatIpcpOperS, nvDialstatNconnfail=nvDialstatNconnfail, nvTcpstatRcvshorts=nvTcpstatRcvshorts, nvLcpconfpppTrapEn=nvLcpconfpppTrapEn, nvElxstatTable=nvElxstatTable, nvIticstatIndex=nvIticstatIndex, nvPosprofName=nvPosprofName, nvItiportMinbspace=nvItiportMinbspace, nvApclstatDialind=nvApclstatDialind, nvDspmallocDsptype=nvDspmallocDsptype, nvDlspcstatMaxRec=nvDlspcstatMaxRec, nvLcpconfMaxcfg=nvLcpconfMaxcfg, nvDialstatNcircfail=nvDialstatNcircfail, nvCrfstatRcsc1=nvCrfstatRcsc1, nvIticlassPrefixid=nvIticlassPrefixid, nvItiprofP28=nvItiprofP28, nvXbillconfEnable=nvXbillconfEnable, nvMpstatPart1Link1=nvMpstatPart1Link1, nvModemstatDctype=nvModemstatDctype, nvR2profEntry=nvR2profEntry, nvRaduserUsername=nvRaduserUsername, nvR2profClearback=nvR2profClearback, nvItiprofP4=nvItiprofP4, nvTslotconfPeertsid=nvTslotconfPeertsid, nvSnmpconflocation=nvSnmpconflocation, nvTcpstatRcvdupacks=nvTcpstatRcvdupacks, nvR2cstatCparty=nvR2cstatCparty, nvIticlassClasmode=nvIticlassClasmode, nvModemprofTxlvl=nvModemprofTxlvl, nvX25confNtc=nvX25confNtc, nvX25confNoc=nvX25confNoc, nvPridstatTime=nvPridstatTime, nvNetpvcmapMaxRec=nvNetpvcmapMaxRec, nvPosisoField45=nvPosisoField45, nvTnnlconfRtmethod=nvTnnlconfRtmethod, nvIpconfMask=nvIpconfMask, nvAcctstatMinute=nvAcctstatMinute, nvFrvcconfNumRec=nvFrvcconfNumRec, nvIticlassDefpsze=nvIticlassDefpsze, nvLinkstatFrmrrxs=nvLinkstatFrmrrxs, nvBillconf1Table=nvBillconf1Table, nvRbconfDliname=nvRbconfDliname, nvIticlassCmdtimout=nvIticlassCmdtimout, nvRbpstatRbsrbdsp=nvRbpstatRbsrbdsp, nvRbcstat=nvRbcstat, nvFriconf=nvFriconf, nvItipstatNdcode=nvItipstatNdcode, nvTncconfInterrupt=nvTncconfInterrupt, nvR2cstatCstat=nvR2cstatCstat, nvIprouteEntry=nvIprouteEntry, nvPosisoField34=nvPosisoField34, nvTrapPppLcpDown=nvTrapPppLcpDown, nvItiprofIndex=nvItiprofIndex, nvTrapS2=nvTrapS2, nvApfclstatFailcause=nvApfclstatFailcause, nvRadustat=nvRadustat, nvL2tpsstatState=nvL2tpsstatState, nvDialstatNnoRoute=nvDialstatNnoRoute, nvNodeconfMaxRec=nvNodeconfMaxRec, nvRadcstatRadAdminS=nvRadcstatRadAdminS, nvTrapN1=nvTrapN1, nvModemconfNumRec=nvModemconfNumRec, nvFrmrstatNumTxFrames=nvFrmrstatNumTxFrames, nvPosisoField31=nvPosisoField31, nvSFRMRTxoff=nvSFRMRTxoff, nvTrapconfTrapId=nvTrapconfTrapId, nvNsockmapUserdata=nvNsockmapUserdata, nvTslotstatTottxfrm=nvTslotstatTottxfrm, nvL2tpstatCtrlOofW=nvL2tpstatCtrlOofW, nvApacsconfDscdleeot=nvApacsconfDscdleeot, nvPricustatThresh4=nvPricustatThresh4, nvModemconfName=nvModemconfName, nvSlotstatCpu=nvSlotstatCpu, nvRrstatTable=nvRrstatTable, nvIpwanmapPsize=nvIpwanmapPsize, nvNetcon=nvNetcon, nvIprouteIndex=nvIprouteIndex, nvIcmpstatOutMsgs=nvIcmpstatOutMsgs, nvFtpstatDtreset=nvFtpstatDtreset, nvDuiconfTable=nvDuiconfTable, nvTnmapIticlass=nvTnmapIticlass, nvItipstatCugtype=nvItipstatCugtype, nvModemstatAccms=nvModemstatAccms, nvX25nuimapCalled=nvX25nuimapCalled, nvBillstatN1200bps=nvBillstatN1200bps, nvMpstatPart1RmtClass=nvMpstatPart1RmtClass, nvXbillconfMaxRec=nvXbillconfMaxRec, nvApclstatPriname=nvApclstatPriname, nvXbillstatTxpak=nvXbillstatTxpak, nvPosprofAddrtype=nvPosprofAddrtype, nvCrouteVol1prot=nvCrouteVol1prot, nvUgstatNumRec=nvUgstatNumRec, nvIpcpconfDnsadd2=nvIpcpconfDnsadd2, nvNodestatFreebufs=nvNodestatFreebufs, nvAcctstat=nvAcctstat, nvCDLISlotIndex=nvCDLISlotIndex, nvUgconfEntry=nvUgconfEntry, nvSDLIDlitype=nvSDLIDlitype, nvMpstatPart2=nvMpstatPart2, nvIcmpstatEntry=nvIcmpstatEntry, nvAcctoperIndex=nvAcctoperIndex, nvX25confNetname=nvX25confNetname, nvDlspcconfStatus=nvDlspcconfStatus, nvIpstatReasmFails=nvIpstatReasmFails, nvStringMaxRec=nvStringMaxRec, nvCrouteChoice=nvCrouteChoice, nvApmdmstatTable=nvApmdmstatTable, nvSnmpmgrEntry=nvSnmpmgrEntry, nvPosprofRsrcpool=nvPosprofRsrcpool, nvMediastatIndex=nvMediastatIndex, nvPristatNcurincom=nvPristatNcurincom, nvApmdmstatB5calls=nvApmdmstatB5calls, nvAcctstatRxchars=nvAcctstatRxchars, nvIcmpstatInTmExcds=nvIcmpstatInTmExcds, nvTslotstatRemipaddr=nvTslotstatRemipaddr, nvCDLICode=nvCDLICode, nvR2cstatEntry=nvR2cstatEntry, nvApmdmstatSpeed=nvApmdmstatSpeed, nvApacsstatTxnaks=nvApacsstatTxnaks, nvMpconfEntry=nvMpconfEntry, nvR2sysparMaxbnmlen=nvR2sysparMaxbnmlen, nvFrstatTxcurfps=nvFrstatTxcurfps, nvRadconfAuth2port=nvRadconfAuth2port, nvNodeconfSwdate=nvNodeconfSwdate, nvSDLITxundrun=nvSDLITxundrun, nvCrouteDialmapid=nvCrouteDialmapid, nvApclstatMerchid=nvApclstatMerchid, nvTnmapStatus=nvTnmapStatus, nvBillconfSet5=nvBillconfSet5, nvDspmallocIndex=nvDspmallocIndex, nvApfclstatMerchid=nvApfclstatMerchid, nvNetconDstcompid=nvNetconDstcompid, nvIpwanmapBcastcntl=nvIpwanmapBcastcntl, nvIticlassDefwsze=nvIticlassDefwsze, nvNodestatMaxcpu=nvNodestatMaxcpu)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvRadcstatNAcct1=nvRadcstatNAcct1, nvElxstatMaxRec=nvElxstatMaxRec, nvTrapDeviceDisconnected=nvTrapDeviceDisconnected, nvNetconTable=nvNetconTable, nvMpstatPart1Link13=nvMpstatPart1Link13, nvLinkstatPort=nvLinkstatPort, nvTncstatPortnum=nvTncstatPortnum, nvMpconfIndex=nvMpconfIndex, nvRbcstatMaxRec=nvRbcstatMaxRec, nvCrfstatDirection=nvCrfstatDirection, nvPppstatPppAdminS=nvPppstatPppAdminS, nvPppstatNumRec=nvPppstatNumRec, nvMpstatPart2OutPkts=nvMpstatPart2OutPkts, nvDialstatNcurrent=nvDialstatNcurrent, nvIticstatAvgtime=nvIticstatAvgtime, nvL2tpstatIndex=nvL2tpstatIndex, nvDlstatEntry=nvDlstatEntry, nvTncstatMaxRec=nvTncstatMaxRec, nvL2tptstatRmtHstNme=nvL2tptstatRmtHstNme, nvAbillstatP7time=nvAbillstatP7time, nvL2tptstatSendCtrl=nvL2tptstatSendCtrl, nvModemprofEntry=nvModemprofEntry, nvL2tptstatTunlState=nvL2tptstatTunlState, nvLcpconfMaxRec=nvLcpconfMaxRec, nvTslotstatName=nvTslotstatName, nvIpcpconfNbnsadd1=nvIpcpconfNbnsadd1, nvModemstatMse=nvModemstatMse, nvPosnmsmapNumRec=nvPosnmsmapNumRec, nvApclstatIsdnclr=nvApclstatIsdnclr, nvIticlassFastsel=nvIticlassFastsel, nvTnmapNumRec=nvTnmapNumRec, nvFtpconfStatus=nvFtpconfStatus, nvRadcstatNAcct=nvRadcstatNAcct, nvApacsstatN28800bd=nvApacsstatN28800bd, nvApacsstatBdhostblk=nvApacsstatBdhostblk, nvBillconfSet11nua3=nvBillconfSet11nua3, nvNsockconfDefport=nvNsockconfDefport, nvApclstatCalled=nvApclstatCalled, nvIpconfStatus=nvIpconfStatus, nvRbsysparMinbnmlen=nvRbsysparMinbnmlen, nvPosisoField42=nvPosisoField42, nvTrapPppMpLinkDropped=nvTrapPppMpLinkDropped, nvTcpstatRcvwinprobes=nvTcpstatRcvwinprobes, nvFrvcstatInputrate=nvFrvcstatInputrate, nvX25confNuirtg=nvX25confNuirtg, nvModemstatDtreset=nvModemstatDtreset, nvBillconfSet8nua2=nvBillconfSet8nua2, nvFrmrstatNumReloads=nvFrmrstatNumReloads, nvApclstatPstndur=nvApclstatPstndur, nvBillconfSet11nua2=nvBillconfSet11nua2, nvAbillstatP6time=nvAbillstatP6time, nvApacsconfTable=nvApacsconfTable, nvRbcstatCstat=nvRbcstatCstat, nvDialstatNattempt=nvDialstatNattempt, nvFrstatMtxavgfps=nvFrstatMtxavgfps, nvDlspcconfNumRec=nvDlspcconfNumRec, nvX25callRxpsze=nvX25callRxpsze, nvCDLIFdl=nvCDLIFdl, nvIprtstat=nvIprtstat, nvTcpstatConndrops=nvTcpstatConndrops, nvRadconfDnsatt1=nvRadconfDnsatt1, nvSFRMRDtreset=nvSFRMRDtreset, nvFrvcconfIndex=nvFrvcconfIndex, nvDlstatIndex=nvDlstatIndex, nvSymuserStatus=nvSymuserStatus, nvPricuconfThresh3=nvPricuconfThresh3, nvIcmpstatDtreset=nvIcmpstatDtreset, nvNodeconfTable=nvNodeconfTable, nvRadustatFrmIpMask=nvRadustatFrmIpMask, nvL2tpsstatNumRec=nvL2tpsstatNumRec, nvIcmpstatOutSrcQus=nvIcmpstatOutSrcQus, nvMpstatPart2InEchRp=nvMpstatPart2InEchRp, nvBillstatNuaset=nvBillstatNuaset, nvTrapconfNumRec=nvTrapconfNumRec, nvTslotstat=nvTslotstat, nvFtpstatClientaddr=nvFtpstatClientaddr, nvItiprofP21=nvItiprofP21, nvFristatCurseq=nvFristatCurseq, nvModemconfProfilename=nvModemconfProfilename, nvTrapDeviceConnected=nvTrapDeviceConnected, nvIticlassAcctng=nvIticlassAcctng, nvDlspcconfIndex=nvDlspcconfIndex, nvBillstat5to10=nvBillstat5to10, nvMpstatPart1Link5=nvMpstatPart1Link5, nvFrvcstatTxframes=nvFrvcstatTxframes, nvDuistatNunxmsgs=nvDuistatNunxmsgs, nvLinkconfMaxRec=nvLinkconfMaxRec, nvIcmpstatInAdMs=nvIcmpstatInAdMs, nvPosmsgmapStatus=nvPosmsgmapStatus, nvL2tpstatDtreset=nvL2tpstatDtreset, nvXbillstatRxseg=nvXbillstatRxseg, nvPosisoField7=nvPosisoField7, nvCrfstat=nvCrfstat, nvNetpvcmapEntry=nvNetpvcmapEntry, nvX25confLic=nvX25confLic, nvNetmapNetaddr=nvNetmapNetaddr, nvMpstatPart1Link2=nvMpstatPart1Link2, nvLinkstat=nvLinkstat, nvPricustatIndex=nvPricustatIndex, nvAbillstatB2time=nvAbillstatB2time, nvPosvisaField14=nvPosvisaField14, nvR2sysparProfname=nvR2sysparProfname, nvItiuserCallback=nvItiuserCallback, nvTcpprofEntry=nvTcpprofEntry, nvSDSPNumOfailneg=nvSDSPNumOfailneg, nvCFRMRPortIndex=nvCFRMRPortIndex, nvApacsstatN9600bd=nvApacsstatN9600bd, nvElxconfEnable=nvElxconfEnable, nvPristatNnoanswer=nvPristatNnoanswer, nvFrvcstatNumRec=nvFrvcstatNumRec, nvItipstatNtimeout=nvItipstatNtimeout, nvPristatIndex=nvPristatIndex, nvItiprofP11=nvItiprofP11, nvIprtstatMetric=nvIprtstatMetric, nvDspmallocEntry=nvDspmallocEntry, nvItipstatRevf=nvItipstatRevf, nvR2profMfmode=nvR2profMfmode, nvBillconfSet7nua1=nvBillconfSet7nua1, NvPortName=NvPortName, nvXbillstatNuaset=nvXbillstatNuaset, nvUgconfMaxRec=nvUgconfMaxRec, nvRrstatConns=nvRrstatConns, nvR2pstatLinbadcnt=nvR2pstatLinbadcnt, nvFtpstatTotalsucs=nvFtpstatTotalsucs, nvPricustatResettime=nvPricustatResettime, nvSlotstatRam=nvSlotstatRam, nvTrapDSPMFailedModemThresh1=nvTrapDSPMFailedModemThresh1, nvX25statNtxints=nvX25statNtxints, nvFtpconfTimeout=nvFtpconfTimeout, nvX25statNtxrrs=nvX25statNtxrrs, nvBillstatRxseg=nvBillstatRxseg, nvUgstatIndex=nvUgstatIndex, nvXbillstat10to15=nvXbillstat10to15, nvFtpstatConnects=nvFtpstatConnects, nvR2cstatLanguage=nvR2cstatLanguage, nvPriconfEstlink=nvPriconfEstlink, nvX25confNetvrsion=nvX25confNetvrsion, nvMpstatPart1LocClass=nvMpstatPart1LocClass, nvNsockmapTable=nvNsockmapTable, nvRadcstatNSilent=nvRadcstatNSilent, nvNetconCalledad=nvNetconCalledad, nvMpstatPart1Link10=nvMpstatPart1Link10, nvPosniimapTable=nvPosniimapTable, nvNetpvcMaxRec=nvNetpvcMaxRec, nvIpstatIndex=nvIpstatIndex, nvItiustatDtreset=nvItiustatDtreset, nvIticlassProfile=nvIticlassProfile, nvRadconfIndex=nvRadconfIndex, nvRadustatFrmMtu=nvRadustatFrmMtu, nvPricuconfMaxRec=nvPricuconfMaxRec, nvFrvcstatTable=nvFrvcstatTable, nvIticlassInvclrcmd=nvIticlassInvclrcmd, nvIpcpconfLcp=nvIpcpconfLcp, nvItiportEnable=nvItiportEnable, nvPristatDchanup=nvPristatDchanup, nvNodeconfSwversion=nvNodeconfSwversion, nvTcpprofNumRec=nvTcpprofNumRec, nvL2tpstatTnlUnav=nvL2tpstatTnlUnav, nvMpstatPart2OutEch=nvMpstatPart2OutEch, nvCrcstatCroute=nvCrcstatCroute, nvItiprofP7=nvItiprofP7, nvIcmpstatOutRdrcts=nvIcmpstatOutRdrcts, nvApclstatTermid=nvApclstatTermid, nvTncconfSetact=nvTncconfSetact, nvFrvcstatMaxRec=nvFrvcstatMaxRec, nvTnclassStatus=nvTnclassStatus, nvL2tptstatRecvCtrl=nvL2tptstatRecvCtrl, nvTnstatTable=nvTnstatTable, nvR2dspstatTable=nvR2dspstatTable, nvTrapDatabaseUpPrimary=nvTrapDatabaseUpPrimary, nvNetconConstate=nvNetconConstate, nvNsockmapService=nvNsockmapService, nvDlstatNumRec=nvDlstatNumRec, nvApmdmstatB3calls=nvApmdmstatB3calls, nvAcctstatInfofunc=nvAcctstatInfofunc, nvSymuserMaxRec=nvSymuserMaxRec, nvTrapDuiportavail=nvTrapDuiportavail, nvItiuser=nvItiuser, nvApacsstatTxenqs=nvApacsstatTxenqs, nvRadustatSTime=nvRadustatSTime, nvPriconf=nvPriconf, nvNetrouteStatus=nvNetrouteStatus, nvStringNumRec=nvStringNumRec, nvIpwanmapMaxRec=nvIpwanmapMaxRec, nvItiustatMaxRec=nvItiustatMaxRec, nvApclstatNumRec=nvApclstatNumRec, nvItipstatNtxresets=nvItipstatNtxresets, nvPppstatOutEch=nvPppstatOutEch, nvNetmapEntry=nvNetmapEntry, nvAcctstatRxpaks=nvAcctstatRxpaks, nvPppstatLcpOperS=nvPppstatLcpOperS, nvRadconfNbnsatt1=nvRadconfNbnsatt1, nvPosmsgmapDest=nvPosmsgmapDest, nvApacsstatTable=nvApacsstatTable, nvRbpstatFlavor=nvRbpstatFlavor, nvItipstatNumRec=nvItipstatNumRec, nvDialstatTrace=nvDialstatTrace, nvRadustatUserId=nvRadustatUserId, nvBillstatTxseg=nvBillstatTxseg, nvAbillstatB5call=nvAbillstatB5call, nvPosisoField20=nvPosisoField20, nvR2pstatDliname=nvR2pstatDliname, nvR2profAnswergrd=nvR2profAnswergrd, nvTcpstatRttupdateds=nvTcpstatRttupdateds, nvSDLIBlucnts=nvSDLIBlucnts, nvRadcstatEntry=nvRadcstatEntry, nvPosvisaField5=nvPosvisaField5, nvMpstatPart1LocDisc=nvMpstatPart1LocDisc, nvPriconfModemcap=nvPriconfModemcap, nvTrapLocalDatabaseChanged=nvTrapLocalDatabaseChanged, nvPridstatTable=nvPridstatTable, nvRoutemapUserdata=nvRoutemapUserdata, nvR2dspstat=nvR2dspstat, nvAbillstatB4call=nvAbillstatB4call, nvL2tpstatActivTnls=nvL2tpstatActivTnls, nvAbillstatTfail=nvAbillstatTfail, nvTnnlstatfMaxRec=nvTnnlstatfMaxRec, nvMpstatPart1Entry=nvMpstatPart1Entry, nvUgconfNumRec=nvUgconfNumRec, nevadaR2=nevadaR2, nvItipstatNctxresets=nvItipstatNctxresets, nvLinkconfPollthres=nvLinkconfPollthres, nvPristatNrxsetupa=nvPristatNrxsetupa, nvIpwanmapNumRec=nvIpwanmapNumRec, nvSDSPEvent9=nvSDSPEvent9, nvFriconfnN1=nvFriconfnN1, nvRadcstatNAuth1Acc=nvRadcstatNAuth1Acc, nvTnstatEntry=nvTnstatEntry, nvPosstatCommfail=nvPosstatCommfail, nvAbillstatP2time=nvAbillstatP2time, nvAbillstatB1call=nvAbillstatB1call, nvSlotstatMaxRec=nvSlotstatMaxRec, nvR2pstatTotosigatt=nvR2pstatTotosigatt, nvPosvisaField6=nvPosvisaField6, nvPricstatIndex=nvPricstatIndex, nvPricuconfInterval=nvPricuconfInterval, nvPricstatCalldir=nvPricstatCalldir, nvCrfstatCallngnum=nvCrfstatCallngnum, nvNodeconfRsttimer=nvNodeconfRsttimer, nvNodeconfCalarms=nvNodeconfCalarms, nvIcmpstatOutTmStRps=nvIcmpstatOutTmStRps, nvApacsstatDleeotsnt=nvApacsstatDleeotsnt, nvRbconfRtmethod=nvRbconfRtmethod, nvTrapPppIpcpOnLcpUp=nvTrapPppIpcpOnLcpUp, nvNetconSrcid=nvNetconSrcid, nvItipstatAcct=nvItipstatAcct, nvPosisoField3=nvPosisoField3, nvRbsysparMaxbnmlen=nvRbsysparMaxbnmlen, nvR2profMaxRec=nvR2profMaxRec, nvPristatCalloutrels=nvPristatCalloutrels, nvX25nuimapStatus=nvX25nuimapStatus, nvNodeconfBusyout=nvNodeconfBusyout, nvDate=nvDate, nvItipstatParam=nvItipstatParam)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvIprtstatProto=nvIprtstatProto, nvIpconfNumRec=nvIpconfNumRec, nvRadcstatNAuth2Acc=nvRadcstatNAuth2Acc, nvTcpcnstatEntry=nvTcpcnstatEntry, nvPristatPriname=nvPristatPriname, nvRbpstatTotocalest=nvRbpstatTotocalest, nvX25confFlowneg=nvX25confFlowneg, nvModemstatIndex=nvModemstatIndex, nvItiuserUserclass=nvItiuserUserclass, nvApacsconfBillingT3=nvApacsconfBillingT3, nvUgstatUnavrejs=nvUgstatUnavrejs, nvX25callDiag=nvX25callDiag, nvPosprofDirection=nvPosprofDirection, nvL2tpconfIndex=nvL2tpconfIndex, nvRadustatRaduOperS=nvRadustatRaduOperS, nvRbdspstatTable=nvRbdspstatTable, nvFrvcconfBc=nvFrvcconfBc, nvFrmrstatTotalCalls=nvFrmrstatTotalCalls, nvCrcstat=nvCrcstat, nvItiprofP6=nvItiprofP6, nvAbillstatMaxRec=nvAbillstatMaxRec, nvSnmpmgr=nvSnmpmgr, nvPriconfRouting=nvPriconfRouting, nvSymuserPassword=nvSymuserPassword, nvTrapconfTable=nvTrapconfTable, nvTnnlconfUserdata=nvTnnlconfUserdata, nvFrmrstatNumRxFrames=nvFrmrstatNumRxFrames, nvR2pstatTsstat=nvR2pstatTsstat, nvRrstatClass=nvRrstatClass, nvTnmapIndex=nvTnmapIndex, nvElxstatInNUcasts=nvElxstatInNUcasts, nvPosprofResptim=nvPosprofResptim, nvNetpvcNumRec=nvNetpvcNumRec, nvAbillstatB2call=nvAbillstatB2call, nvL2tpconfMaxRec=nvL2tpconfMaxRec, nvFrstat=nvFrstat, nvRadconfAcct2port=nvRadconfAcct2port, nvApacsconfBillingT2=nvApacsconfBillingT2, nvPridstat=nvPridstat, nvAbillstatB7time=nvAbillstatB7time, nvR2sysparMinbnmlen=nvR2sysparMinbnmlen, nvNsockconfIndex=nvNsockconfIndex, nevadaRb=nevadaRb, nvModemstatRetrain=nvModemstatRetrain, nvMpstatPart2OutMfrags=nvMpstatPart2OutMfrags, nvRadcstatNAuth1Rej=nvRadcstatNAuth1Rej, nvRadconfAuth3port=nvRadconfAuth3port, nvRadcstatNAcct3=nvRadcstatNAcct3, nvFriconfnN2=nvFriconfnN2, nvAbillstatPbcalls=nvAbillstatPbcalls, nvL2tpconfIdle=nvL2tpconfIdle, nvIpstatTable=nvIpstatTable, nvTrapconfIndex=nvTrapconfIndex, nvIticlassCallingid=nvIticlassCallingid, nvPosvisaNumRec=nvPosvisaNumRec, nvApclstatTable=nvApclstatTable, nvNsockmapTcpmsglen=nvNsockmapTcpmsglen, nvTcprstatNumRec=nvTcprstatNumRec, nvIpcpconfNumRec=nvIpcpconfNumRec, nvItiprofP33=nvItiprofP33, nvPosconf=nvPosconf, nvBillconfSet7=nvBillconfSet7, nvPosprofTranslate=nvPosprofTranslate, nvItipstatNddiag=nvItipstatNddiag, nvItiprofP14=nvItiprofP14, nvNodestatTxavgpps=nvNodestatTxavgpps, nvCrouteRcscp2=nvCrouteRcscp2, nvIticmdEntry=nvIticmdEntry, nvIticstatTrmdsccip=nvIticstatTrmdsccip, nvDialstatTable=nvDialstatTable, nvL2tpconf=nvL2tpconf, nvPosvisaField3=nvPosvisaField3, nvTcpstatSndwinups=nvTcpstatSndwinups, nvPosprofUserdata=nvPosprofUserdata, nvApfclstatTxbytes=nvApfclstatTxbytes, nvTrapRemovedCard=nvTrapRemovedCard, nvPosisoField13=nvPosisoField13, nvTcpprofKeepintvl=nvTcpprofKeepintvl, nvX25statDtreset=nvX25statDtreset, nvRadustatDtreset=nvRadustatDtreset, nvRbprofEntry=nvRbprofEntry, nvSymuser=nvSymuser, nvLcpconfTable=nvLcpconfTable, nvDuistatNinvmsgs=nvDuistatNinvmsgs, nvFrvcstatEntry=nvFrvcstatEntry, nvX25confDiagsupr=nvX25confDiagsupr, nvRadconfAcct1=nvRadconfAcct1, nvCrfstatL1mode=nvCrfstatL1mode, nvX25callMaxRec=nvX25callMaxRec, nvPristatNtxsetupa=nvPristatNtxsetupa, nvPppIpcpOnLcpDown=nvPppIpcpOnLcpDown, nvLcpconfIndex=nvLcpconfIndex, nvRadconfAuth3=nvRadconfAuth3, nvSFRMRFerrs=nvSFRMRFerrs, nvRbdspstatTotrbpipe=nvRbdspstatTotrbpipe, nvX25callRxtput=nvX25callRxtput, nvNetmapNumRec=nvNetmapNumRec, nvLinkstatAlarms=nvLinkstatAlarms, nvPppstatUnKnwnPr=nvPppstatUnKnwnPr, nvIticstatDtreset=nvIticstatDtreset, nvR2profTable=nvR2profTable, nvLinkstatDtreset=nvLinkstatDtreset, nvPristatCallsent=nvPristatCallsent, nvApacsconfSitename=nvApacsconfSitename, nvX25callDtreset=nvX25callDtreset, nvNmsuserMaxRec=nvNmsuserMaxRec, nvFrvcstatFri=nvFrvcstatFri, nvUgstatBwused=nvUgstatBwused, nvIprouteNexthop=nvIprouteNexthop, nvDrstatMaxRec=nvDrstatMaxRec, nvCDLISignaling=nvCDLISignaling, nvDrstat=nvDrstat, nvApacsconfTimerA=nvApacsconfTimerA, nvX25statIfstate=nvX25statIfstate, nvFristatNumRec=nvFristatNumRec, nvItirpoaCarrier=nvItirpoaCarrier, nvRbprofDtmfoff=nvRbprofDtmfoff, nvRadustatTable=nvRadustatTable, nvDuiconfEntry=nvDuiconfEntry, nvR2sysparNumRec=nvR2sysparNumRec, nvTnstatLastCmd=nvTnstatLastCmd, nvFtpstatServaddr=nvFtpstatServaddr, nvIticonf=nvIticonf, nvPosisoField55=nvPosisoField55, nvApacsconfDlrtries=nvApacsconfDlrtries, nvPriconfNfasdch=nvPriconfNfasdch, nvRbsysparTable=nvRbsysparTable, nvRbsysparAllocthrs=nvRbsysparAllocthrs, nvX25confTx1=nvX25confTx1, nvSnmpconfsysname=nvSnmpconfsysname, nvNetmapIndex=nvNetmapIndex, nvDlstatRejrxs=nvDlstatRejrxs, nvNetpvcTable=nvNetpvcTable, nvIticlassOchrg=nvIticlassOchrg, nvPosisoField54=nvPosisoField54, nvPosconfEnable=nvPosconfEnable, nvXbillstatClosed=nvXbillstatClosed, nvDuiconfNua=nvDuiconfNua, nvDlconfEntry=nvDlconfEntry, nvBillconfSet1nua3=nvBillconfSet1nua3, nvApfilterMaxRec=nvApfilterMaxRec, nvPosmsgmap=nvPosmsgmap, nvIpcpconfEntry=nvIpcpconfEntry, nvFrvcstat=nvFrvcstat, nvItipstatTxTput=nvItipstatTxTput, nvPricstatCalledno=nvPricstatCalledno, nvX25statMaxvc=nvX25statMaxvc, NvPoolName=NvPoolName, nvFristatRxbaddlcis=nvFristatRxbaddlcis, nvIticlassCug=nvIticlassCug, nvLinkconfRsrcpool=nvLinkconfRsrcpool, nvTslotconfOrigans=nvTslotconfOrigans, nvNodestatX25call=nvNodestatX25call, nvPosisoField53=nvPosisoField53, nvBillconfSet9=nvBillconfSet9, nvCrfstatCroute=nvCrfstatCroute, nvDuistatTable=nvDuistatTable, nvDspmallocNumRec=nvDspmallocNumRec, nvR2profAnswalmsk=nvR2profAnswalmsk, nvDlstatApp=nvDlstatApp, nvItiprofName=nvItiprofName, nvTcpstatRcvbyteafterwins=nvTcpstatRcvbyteafterwins, nvSFRMRRxoff=nvSFRMRRxoff, nvPriconfDliname=nvPriconfDliname, nvAnuaconfNuaAddress=nvAnuaconfNuaAddress, nvSDLIErrcnt=nvSDLIErrcnt, nvMpconf=nvMpconf, nvTnnlconfTable=nvTnnlconfTable, nvItipstatDtreset=nvItipstatDtreset, nvTnclassTable=nvTnclassTable, nvDlstatRnrtxs=nvDlstatRnrtxs, nvPriconfDlirst=nvPriconfDlirst, nvModemstatMode=nvModemstatMode, nvDuiconfNumRec=nvDuiconfNumRec, nvPricuconfThresh1=nvPricuconfThresh1, nvTcpstatRcvwinupds=nvTcpstatRcvwinupds, nvPosisoField40=nvPosisoField40, nvPosstatProtocol=nvPosstatProtocol, nvXbillstatIndex=nvXbillstatIndex, nvIpconfIpaddr=nvIpconfIpaddr, nvIticlassDroptimer=nvIticlassDroptimer, nvMpstatPart2UnKnwnPr=nvMpstatPart2UnKnwnPr, nvApfclstatPstndur=nvApfclstatPstndur, nvRbsysparPollint=nvRbsysparPollint, nvTnnlstatCallatts=nvTnnlstatCallatts, nvIticlassBreaksgnl=nvIticlassBreaksgnl, nvRadconfSecret=nvRadconfSecret, nvSDSPEvent2=nvSDSPEvent2, nvApacsstatParerrdat=nvApacsstatParerrdat, nvPricuconfIndex=nvPricuconfIndex, nvSFRMRCrcerrs=nvSFRMRCrcerrs, nevadaApacs=nevadaApacs, nvPricustatThresh1=nvPricustatThresh1, nvIpwanmapTable=nvIpwanmapTable, nvNetpvcService=nvNetpvcService, nvCDSPName=nvCDSPName, nvX25callChantype=nvX25callChantype, nvTslotstatTcpcn=nvTslotstatTcpcn, nvFrvcconfEnable=nvFrvcconfEnable, nvTnclassGoahead=nvTnclassGoahead, nvRbcstatNumRec=nvRbcstatNumRec, nvPricustatCounter2=nvPricustatCounter2, nvTnconfTable=nvTnconfTable, nvPristatDchrst=nvPristatDchrst, nvDialstatNmnegfail=nvDialstatNmnegfail, nvApclstat=nvApclstat, nvR2cstatIndex=nvR2cstatIndex, nvL2tpconfRetrans=nvL2tpconfRetrans, nvDlspcstatNidle=nvDlspcstatNidle, nvTslotstatDtreset=nvTslotstatDtreset, nvR2dspstatFlavor=nvR2dspstatFlavor, nvFtpstatTotalfisds=nvFtpstatTotalfisds, nvNodeconfX25call=nvNodeconfX25call, nvX25confNumRec=nvX25confNumRec, nvItiustatEntry=nvItiustatEntry, nvNsockmapOrigin=nvNsockmapOrigin, nvR2confMaxRec=nvR2confMaxRec, nvRbpstatTsbadcnt=nvRbpstatTsbadcnt, nvTrapFrPortUp=nvTrapFrPortUp, nvItipstatPrio=nvItipstatPrio, nvX25callNtxints=nvX25callNtxints, nvPristatNumRec=nvPristatNumRec, nvX25callNetname=nvX25callNetname, nvR2dspstatNumobchn=nvR2dspstatNumobchn, nvModemstatMaxRec=nvModemstatMaxRec, nvItiustatNtxpaks=nvItiustatNtxpaks, nvPristatDlirst=nvPristatDlirst, nvTcpstatMaxRec=nvTcpstatMaxRec, nvSnmpconfMaxRec=nvSnmpconfMaxRec, nvApacsstatDtreset=nvApacsstatDtreset, nvLinkconfIndex=nvLinkconfIndex, nvTrapconf=nvTrapconf, nvTnconfDefiticlass=nvTnconfDefiticlass, nvPosstatConnfail=nvPosstatConnfail, nvModemprofEc=nvModemprofEc, nvCrouteEntry=nvCrouteEntry, nvCDSPTable=nvCDSPTable, nvRrstatAvgtime=nvRrstatAvgtime, nvSlotstatIotype=nvSlotstatIotype, nvTrapPriDataLayerUp=nvTrapPriDataLayerUp, nvIticlassMaxRec=nvIticlassMaxRec, nvLcpconfRsrcpool=nvLcpconfRsrcpool, nvR2profMfrestart=nvR2profMfrestart, nvRbdspstatTotibchn=nvRbdspstatTotibchn, nvIticmdClass=nvIticmdClass, nvX25callNrxrrs=nvX25callNrxrrs, nvDialstat=nvDialstat, nvIticstatNcurIncom=nvIticstatNcurIncom, nvMpstatPart2InMfrags=nvMpstatPart2InMfrags, nvFrstatRxavgfps=nvFrstatRxavgfps, nvCDSPEnable=nvCDSPEnable, nvSDSPEvent8=nvSDSPEvent8, nvCrouteRcscp1=nvCrouteRcscp1, nvModemstatRxparity=nvModemstatRxparity)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvSDLIRedcnts=nvSDLIRedcnts, nvLinkstatTable=nvLinkstatTable, nvLcpconfStatus=nvLcpconfStatus, nvPricustatThresh3=nvPricustatThresh3, nvApacsconfNumRec=nvApacsconfNumRec, nvLinkstatApp=nvLinkstatApp, nvApacsstatTcalls=nvApacsstatTcalls, nvAnuaconfMaxpsze=nvAnuaconfMaxpsze, nvItiprofP2=nvItiprofP2, nvUgconfName=nvUgconfName, nvR2profProfname=nvR2profProfname, nvIpwanmapCugtype=nvIpwanmapCugtype, nvItiprofP17=nvItiprofP17, nvMediastatMaxRec=nvMediastatMaxRec, nvMpstatPart2OutExpnds=nvMpstatPart2OutExpnds, nvApclstatMaxRec=nvApclstatMaxRec, nvLcpconfAuth=nvLcpconfAuth, nvMpstatPart1IpAddress=nvMpstatPart1IpAddress, nvModemconfMaxRec=nvModemconfMaxRec, nvX25confAckthresh=nvX25confAckthresh, nvDlstatProtocol=nvDlstatProtocol, nvDportstatPortname=nvDportstatPortname, nvSnmpmgrSndTrap=nvSnmpmgrSndTrap, nvFrmrstatNumPortUp=nvFrmrstatNumPortUp, nvAbillstatTbtime=nvAbillstatTbtime, nvPristatNcuroutgo=nvPristatNcuroutgo, nvMediastatImage1db=nvMediastatImage1db, nvIticstatEntry=nvIticstatEntry, nvIpstatReasmRqds=nvIpstatReasmRqds, nvFrvcconfMaxRec=nvFrvcconfMaxRec, nvElxconfNumRec=nvElxconfNumRec, nvTcpstatRcvacktoomuchs=nvTcpstatRcvacktoomuchs, nvX25statNetname=nvX25statNetname, nvDrstatNumavail=nvDrstatNumavail, nvIptrunk=nvIptrunk, nvTnclassIpcmd=nvTnclassIpcmd, nvIticstatNpassfails=nvIticstatNpassfails, nvDialstatLastAddr=nvDialstatLastAddr, nvApacsstatGdadrblks=nvApacsstatGdadrblks, nvBillconfSet12nua1=nvBillconfSet12nua1, nvIpcpconfTable=nvIpcpconfTable, nvNodeconfExstat=nvNodeconfExstat, nvNodeconfSwtype=nvNodeconfSwtype, nvNsockconfMaxconn=nvNsockconfMaxconn, nvPosisoField18=nvPosisoField18, nvMpstatPart1Link9=nvMpstatPart1Link9, nvXbillconfTable=nvXbillconfTable, nvTnmapEntry=nvTnmapEntry, nvBillconfSet9nua3=nvBillconfSet9nua3, nvR2confIndex=nvR2confIndex, nvApmdmstatB7calls=nvApmdmstatB7calls, nvPosisoField41=nvPosisoField41, nvPridstatDate=nvPridstatDate, nvRbcstatCallnum=nvRbcstatCallnum, nvNodestatCurtime=nvNodestatCurtime, nvModemstatRcvlvl=nvModemstatRcvlvl, nvApacsconfTimerC=nvApacsconfTimerC, nvDrstatNumused=nvDrstatNumused, nvDlspcconf=nvDlspcconf, nvCrcstatDevice2=nvCrcstatDevice2, nvApfilterCalling=nvApfilterCalling, nvFrvcconfRxbufspac=nvFrvcconfRxbufspac, nvPricstatBchanl=nvPricstatBchanl, nvRadustatNasPort=nvRadustatNasPort, nvNetrouteIndex=nvNetrouteIndex, nvL2tptstatIndex=nvL2tptstatIndex, nvApacsstatMaxRec=nvApacsstatMaxRec, nvPricstatRate=nvPricstatRate, nvPristatMaxrsetup=nvPristatMaxrsetup, nvApfclstatDialind=nvApfclstatDialind, nvX25callNsunak=nvX25callNsunak, nvX25callNrunak=nvX25callNrunak, nvSlotstatCatPartnum=nvSlotstatCatPartnum, nvMpstatPart2InErrors=nvMpstatPart2InErrors, nvNodestatMinbufs=nvNodestatMinbufs, nvR2confStatus=nvR2confStatus, nvCrfstatCalledsub=nvCrfstatCalledsub, nvLinkconfDialout=nvLinkconfDialout, nvApacsconfParerrall=nvApacsconfParerrall, nvDrstatIndex=nvDrstatIndex, nvSnmpconfTable=nvSnmpconfTable, nvApacsstatNxidle=nvApacsstatNxidle, nvIticlassAcctsigl=nvIticlassAcctsigl, nvItiport=nvItiport, nvIfStackInfoEntry=nvIfStackInfoEntry, nvRaduserIndex=nvRaduserIndex, nvPosnmsmapTable=nvPosnmsmapTable, nvSymuserTable=nvSymuserTable, nvTnnlconfNumRec=nvTnnlconfNumRec, nvX25confIndex=nvX25confIndex, nvIcmpstatOutPrmPrbs=nvIcmpstatOutPrmPrbs, nvFrvcstatTxcongstatus=nvFrvcstatTxcongstatus, nvFrvcstatRxframes=nvFrvcstatRxframes, nvPosisoName=nvPosisoName, nvAbillstatIndex=nvAbillstatIndex, nvDuistatLcn=nvDuistatLcn, nvSnmpconfcontact=nvSnmpconfcontact, nvIticstatMaxOutgo=nvIticstatMaxOutgo, nvTcpstatRcvackpacks=nvTcpstatRcvackpacks, nvDlstatIfrxs=nvDlstatIfrxs, nvPosniimapNumRec=nvPosniimapNumRec, nvR2profMfspeech=nvR2profMfspeech, nvPricustatCounter1=nvPricustatCounter1, nvR2pstatMaxRec=nvR2pstatMaxRec, nvLinkconfNumRec=nvLinkconfNumRec, nvItirpoaNumRec=nvItirpoaNumRec, nvTslotconfPeeripadr=nvTslotconfPeeripadr, nvMpstatPart2OutBfrags=nvMpstatPart2OutBfrags, nvRadustatFrmProto=nvRadustatFrmProto, nvItipstatPortname=nvItipstatPortname, nvMpstatPart2InBfrags=nvMpstatPart2InBfrags, nvElxstatAdminStat=nvElxstatAdminStat, nvRadconfAcct2=nvRadconfAcct2, nvIfStackInfo=nvIfStackInfo, nvL2tpsstatIndex=nvL2tpsstatIndex, nvPristatNrxbusy=nvPristatNrxbusy, nvMpconfNumRec=nvMpconfNumRec, nvRoutemapMaxRec=nvRoutemapMaxRec, nvPosisoField60=nvPosisoField60, nvX25stat=nvX25stat, nvNetconConid=nvNetconConid, nvPricstatContype=nvPricstatContype, nvX25callTxwsze=nvX25callTxwsze, nvX25statNumRec=nvX25statNumRec, nvSnmpmgrComm=nvSnmpmgrComm, nvIptrunkStatus=nvIptrunkStatus, nvApacsconfHelpphone=nvApacsconfHelpphone, nvX25confNuireq=nvX25confNuireq, nvIcmpstatNumRec=nvIcmpstatNumRec, nvSDLIEntry=nvSDLIEntry, nvIcmpstatInEchs=nvIcmpstatInEchs, nvNmsuserPsiz=nvNmsuserPsiz, nvNodeconfAlarmrec=nvNodeconfAlarmrec, nvLinkconfN2=nvLinkconfN2, nvRrstatNumIcalls=nvRrstatNumIcalls, nvAbillstatNua=nvAbillstatNua, nvBillconfSegsize=nvBillconfSegsize, nvPosvisaEntry=nvPosvisaEntry, nvSnmpmgrIndex=nvSnmpmgrIndex, nvPricuconf=nvPricuconf, nvItiprofP24=nvItiprofP24, nvTslotconfReserve1=nvTslotconfReserve1, nvL2tpconfEntry=nvL2tpconfEntry, nvLcpconfMaxnak=nvLcpconfMaxnak, nvAcctoperEntry=nvAcctoperEntry, nvDialstatNsucceed=nvDialstatNsucceed, nvIticlassX28type=nvIticlassX28type, nvR2pstatLstatinfo=nvR2pstatLstatinfo, nvFrstatDtreset=nvFrstatDtreset, nvRbsysparDeallthrs=nvRbsysparDeallthrs, nvNodestatFreecpu=nvNodestatFreecpu, nvPppstatIpAddr=nvPppstatIpAddr, nvSlotstatHwRevision=nvSlotstatHwRevision, nvFrvcconfRxcgthres=nvFrvcconfRxcgthres, nvIpconfBcastaddr=nvIpconfBcastaddr, nvTcpstatSndrexmitbytes=nvTcpstatSndrexmitbytes, nvFtpstatConnfails=nvFtpstatConnfails, nvItiportTimer2=nvItiportTimer2, nvFtpstatTotalkbyrvs=nvFtpstatTotalkbyrvs, nvSymuserNumRec=nvSymuserNumRec, nvX25confApp=nvX25confApp, nvElxstatNumRec=nvElxstatNumRec, nvRbpstatPstat=nvRbpstatPstat, nvPosisoField30=nvPosisoField30, nvIticstatMaxcalls=nvIticstatMaxcalls, nvFrvcconfDlci=nvFrvcconfDlci, nvPosisoField25=nvPosisoField25, nvApacsstatLoscarcip=nvApacsstatLoscarcip, nvDialmapNumdelete=nvDialmapNumdelete, nvPppstatOutDiscRq=nvPppstatOutDiscRq, nvAbillstatDtreset=nvAbillstatDtreset, nvXbillconfEntry=nvXbillconfEntry, nvLcpconfMode=nvLcpconfMode, nvTncconfDnsaddr=nvTncconfDnsaddr, nvSFRMRName=nvSFRMRName, nvIfStackInfoRid=nvIfStackInfoRid, nvApclstatTxbytes=nvApclstatTxbytes, nvNodestatNumcalls=nvNodestatNumcalls, nvNsockmapNumRec=nvNsockmapNumRec, nvMpstatPart2NumRec=nvMpstatPart2NumRec, nvSDSPNumOutgo=nvSDSPNumOutgo, nvTslotstatCurtxfrm=nvTslotstatCurtxfrm, nvItipstatSrcadr=nvItipstatSrcadr, nvX25confPktbuf=nvX25confPktbuf, nvIticstatNumIncom=nvIticstatNumIncom, nvApclstatSpeed=nvApclstatSpeed, nvIfStackInfoLowerLI=nvIfStackInfoLowerLI, nvTrapDSPMFailedModemThresh3=nvTrapDSPMFailedModemThresh3, nvPosmsgmapNumRec=nvPosmsgmapNumRec, nvX25nuimap=nvX25nuimap, nvLinkstatRnrtxs=nvLinkstatRnrtxs, nvTrapNoIdlePorts=nvTrapNoIdlePorts, nvIpwanmapNetprot=nvIpwanmapNetprot, nvItimapNetaddr=nvItimapNetaddr, nvIticstat=nvIticstat, nvTrapconfMaxRec=nvTrapconfMaxRec, nvPosstatEftreqs=nvPosstatEftreqs, nvMpstatPart1Link12=nvMpstatPart1Link12, nvPppstatCallId=nvPppstatCallId, nvApacsstatParerrsu=nvApacsstatParerrsu, nvX25confDirection=nvX25confDirection, nvApacsstatNumRec=nvApacsstatNumRec, nvIticstatTrmdscsu=nvIticstatTrmdscsu, nvX25callNr=nvX25callNr, nvItiprof=nvItiprof, nvTncconfEcho=nvTncconfEcho, nvPosprofNretry=nvPosprofNretry, nvApacsstatTrmnodat=nvApacsstatTrmnodat, nvIpwanmapUserdat=nvIpwanmapUserdat, nvNsockmapNbusport=nvNsockmapNbusport, nvTcpcnstatLocaladdr=nvTcpcnstatLocaladdr, nvIticonfDnic=nvIticonfDnic, nvTnnlstatNetaddr=nvTnnlstatNetaddr, nvTncstatCalldata=nvTncstatCalldata, nvLinkconf=nvLinkconf, nvFriconfnN4=nvFriconfnN4, nvIticlassInitcmd=nvIticlassInitcmd, nvL2tpsstatRmtCallID=nvL2tpsstatRmtCallID, nvR2pstat=nvR2pstat, nvTrapElxUp=nvTrapElxUp, nvX25statNrxcalls=nvX25statNrxcalls, NvVisaType=NvVisaType, nvCFRMRDebounce=nvCFRMRDebounce, nvRbdspstat=nvRbdspstat, nvXbillstatNumRec=nvXbillstatNumRec, nvMpstatPart1Link16=nvMpstatPart1Link16, nvElxstatPhysAddr=nvElxstatPhysAddr, nvRadconfAcct1port=nvRadconfAcct1port, nvL2tpstatDataSend=nvL2tpstatDataSend, nvPriconfNfasif=nvPriconfNfasif, nvDlspcconfMaxRec=nvDlspcconfMaxRec, nvFrvcconfStatus=nvFrvcconfStatus, nvPppstatInPkts=nvPppstatInPkts, nvDlstatMstate=nvDlstatMstate, nvTcpstatDtreset=nvTcpstatDtreset, nvIpstatInAdrErrs=nvIpstatInAdrErrs, nvDportstatSessions=nvDportstatSessions, nvAbillstatB6time=nvAbillstatB6time, nvModemstatName=nvModemstatName, nvApfclstat=nvApfclstat, nvAbillstatEntry=nvAbillstatEntry, nvRbprofSuffix=nvRbprofSuffix, nvRadustatIndex=nvRadustatIndex, nvIticlassEntry=nvIticlassEntry, nvIpwanmapIpaddr=nvIpwanmapIpaddr, nvMediastatImage=nvMediastatImage, nvDrstatTable=nvDrstatTable, nvLcpconfNaifwd=nvLcpconfNaifwd, nvNodestatTotalbufs=nvNodestatTotalbufs, nvFrvcconfFri=nvFrvcconfFri, nvAcctstatComponent=nvAcctstatComponent, nvPosvisaField17=nvPosvisaField17, nvAbillstat=nvAbillstat, nvPosprofRouting=nvPosprofRouting)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvUgstatName=nvUgstatName, nvModemprofBildly=nvModemprofBildly, nvX25confEntry=nvX25confEntry, nvAbillstatP5call=nvAbillstatP5call, nvIpwanmapFrpvc=nvIpwanmapFrpvc, nvNetpvcmapTable=nvNetpvcmapTable, nvSDLIDtreset=nvSDLIDtreset, nvMpstatPart2InEch=nvMpstatPart2InEch, nvFriconfLmitype=nvFriconfLmitype, nvItimapUserdata=nvItimapUserdata, nvIptrunkIpaddr=nvIptrunkIpaddr, nvNsockmapTcpport=nvNsockmapTcpport, nvRadcstatNAuths=nvRadcstatNAuths, nvSDSPEvent6=nvSDSPEvent6, nvAnuaconfStrippar=nvAnuaconfStrippar, nvTrapISDNFailedCalls=nvTrapISDNFailedCalls, nvPosprofMaxRec=nvPosprofMaxRec, nvIprtstatNumRec=nvIprtstatNumRec, nvPosiso=nvPosiso, nvL2tptstatTable=nvL2tptstatTable, nvBillconfSet7nua3=nvBillconfSet7nua3, nvDuistatLastcause=nvDuistatLastcause, nvRadustatNasIpAddr=nvRadustatNasIpAddr, nvFriconfMaxRec=nvFriconfMaxRec, nvTslotconfVersion=nvTslotconfVersion, nvFrvcconfTable=nvFrvcconfTable, nvCDLIFormat=nvCDLIFormat, nvDlstatLinkname=nvDlstatLinkname, nvModemprofFalbckchr=nvModemprofFalbckchr, nvAcctstatEntry=nvAcctstatEntry, nvTcpstatRcvackbytes=nvTcpstatRcvackbytes, nvSnmpmgrMaxRec=nvSnmpmgrMaxRec, nvNetpvcmapStatus=nvNetpvcmapStatus, nvCrcstatRouting=nvCrcstatRouting, nvR2profMfanumsch=nvR2profMfanumsch, nvFtpstatTotalfirvs=nvFtpstatTotalfirvs, nvR2pstatNumRec=nvR2pstatNumRec, nvR2confDliname=nvR2confDliname, nvItiuserClrestrct=nvItiuserClrestrct, nvX25statNrxints=nvX25statNrxints, nvPristat=nvPristat, nvX25confStndbytim=nvX25confStndbytim, nvR2profMftimeout=nvR2profMftimeout, nvX25confIsdnaddr=nvX25confIsdnaddr, nvTrapDbautosave=nvTrapDbautosave, nvNetpvcEntry=nvNetpvcEntry, nvPosisoField14=nvPosisoField14, nvItiportMaxbspace=nvItiportMaxbspace, nvApmdmstatTxpkt=nvApmdmstatTxpkt, nvPppstatTnnlId=nvPppstatTnnlId, nvItiprofP32=nvItiprofP32, nvDlstatLfrmr=nvDlstatLfrmr, nvRadconfAcct3=nvRadconfAcct3, nvNetconDstid=nvNetconDstid, nvIticstatTable=nvIticstatTable, nvXnuasetNumRec=nvXnuasetNumRec, nvR2cstatTimeslot=nvR2cstatTimeslot, nvItipstatX3type=nvItipstatX3type, nvFtpconfPassword=nvFtpconfPassword, nvLcpconfAcfc=nvLcpconfAcfc, nvRbpstatDtreset=nvRbpstatDtreset, nvApacsstatLoscardat=nvApacsstatLoscardat, nvTncstatTable=nvTncstatTable, nvModemprofRxthresh=nvModemprofRxthresh, nvX25statNrxrnrs=nvX25statNrxrnrs, nvTrapLinkReady=nvTrapLinkReady, nvPosniimapDest=nvPosniimapDest, nvTnnlstatNumRec=nvTnnlstatNumRec, nvRbprofMfdelay=nvRbprofMfdelay, nvMediastat=nvMediastat, nvFrmrstatNumFailUp=nvFrmrstatNumFailUp, nvXnuasetEntry=nvXnuasetEntry, nvAcctstatAbstime=nvAcctstatAbstime, nvElxstatOperStat=nvElxstatOperStat, nvCrcstatIndex=nvCrcstatIndex, nvApmdmstatB2calls=nvApmdmstatB2calls, nvItipstatFast=nvItipstatFast, nvBillconfSet2nua3=nvBillconfSet2nua3, nvItiuserMaxRec=nvItiuserMaxRec, nvElxconfMaxRec=nvElxconfMaxRec, nvCFRMREnable=nvCFRMREnable, nvModemprofDc=nvModemprofDc, nvAcctstatCalled=nvAcctstatCalled, nvRadustatDFilter=nvRadustatDFilter, nvPosisoField39=nvPosisoField39, nvTcpstatRcvoopacks=nvTcpstatRcvoopacks, nvApclstatFailcause=nvApclstatFailcause, nvSFRMRCid=nvSFRMRCid, nvPosprofSize=nvPosprofSize, nvDuiconfMaxRec=nvDuiconfMaxRec, nvRbdspstatNumibchn=nvRbdspstatNumibchn, nvTcprstat=nvTcprstat, nvL2tpstatActivSns=nvL2tpstatActivSns, nvDuistatNmnxtcall=nvDuistatNmnxtcall, nvFtpconfTable=nvFtpconfTable, nvIpwanmapRpoa=nvIpwanmapRpoa, nvItiprofEntry=nvItiprofEntry, nvR2dspstatDevname=nvR2dspstatDevname, nvPristatCallrejs=nvPristatCallrejs, nvL2tpstatNumRec=nvL2tpstatNumRec, nvIticlassActonloss=nvIticlassActonloss, nvElxconfEntry=nvElxconfEntry, nvAnuaconfAltLabel=nvAnuaconfAltLabel, nvBillstat10to15=nvBillstat10to15, nvBillconfSet10nua3=nvBillconfSet10nua3, nvDuistatMaxRec=nvDuistatMaxRec, nvTcpstatRcvoobytes=nvTcpstatRcvoobytes, nvIticmdMaxRec=nvIticmdMaxRec, nvTcpstatRcvpackafterwins=nvTcpstatRcvpackafterwins, nvBillconfSet11=nvBillconfSet11, nvL2tptstatDtreset=nvL2tptstatDtreset, nvL2tpconfInactivty=nvL2tpconfInactivty, nvPosvisaField1=nvPosvisaField1, nvXnuasetIndex=nvXnuasetIndex, nvAnuaconfStatus=nvAnuaconfStatus, nvPridstatEventno=nvPridstatEventno, nvXbillstatDate=nvXbillstatDate, nvApacsstatN300bd=nvApacsstatN300bd, nevadaL2tp=nevadaL2tp, nvNsockconfStatus=nvNsockconfStatus, nvFrvcstatExcessdatas=nvFrvcstatExcessdatas, nvDportstatDuihost=nvDportstatDuihost, nvSDSPEvent12=nvSDSPEvent12, nvIticlassInactivty=nvIticlassInactivty, nvPridstatIndex=nvPridstatIndex, nvMpstatPart2InEfrags=nvMpstatPart2InEfrags, nvTncconfX3parms=nvTncconfX3parms, nvTncconfErase=nvTncconfErase, nvTcpcnstatDtreset=nvTcpcnstatDtreset, nvMpstatPart1Link3=nvMpstatPart1Link3, nvDialmapNumRec=nvDialmapNumRec, nvIticmdCommand=nvIticmdCommand, nvItimapTable=nvItimapTable, nvFriconfPort=nvFriconfPort, nvAcctstatTxsegs=nvAcctstatTxsegs, nvIticstatN28800bd=nvIticstatN28800bd, nvRadconf=nvRadconf, nvTnnlconfStatus=nvTnnlconfStatus, nvAcctoperSegsize=nvAcctoperSegsize, nvIticlassClassname=nvIticlassClassname, nvItiportTimer0=nvItiportTimer0, nvIticstatFailneg=nvIticstatFailneg, nvDlstatPstate=nvDlstatPstate, nvCroute=nvCroute, nvItipstatNtxpaks=nvItipstatNtxpaks, nvX25callNrxsegs=nvX25callNrxsegs, nvR2cstatCallnum=nvR2cstatCallnum, nvTrapDatabaseUpSecondary=nvTrapDatabaseUpSecondary, nvMpstatPart2Table=nvMpstatPart2Table, nvDlspcconfHelpphone=nvDlspcconfHelpphone, nvPosisoField24=nvPosisoField24, nvIticonfValserver=nvIticonfValserver, nvElxstatOutOctets=nvElxstatOutOctets, nvIcmpstatInAdMsRps=nvIcmpstatInAdMsRps, nvFriconfEntry=nvFriconfEntry, nvX25statNrxres=nvX25statNrxres, nvDlstatLreset=nvDlstatLreset, nvApclstatDate=nvApclstatDate, nvIticonfIndex=nvIticonfIndex, nvMpconfProfile=nvMpconfProfile, nvIcmpstatInTmSts=nvIcmpstatInTmSts, nvPppstatOutOctets=nvPppstatOutOctets, nvFtpstatTotalerrs=nvFtpstatTotalerrs, nvPosprof=nvPosprof, nvRbcstatTable=nvRbcstatTable, nvFriconfnN3=nvFriconfnN3, nvItipstatPvc=nvItipstatPvc, nvTncstat=nvTncstat, nvR2sysparMaxRec=nvR2sysparMaxRec, nvElxconfInactivty=nvElxconfInactivty, nvDlstatFrmrrxs=nvDlstatFrmrrxs, nvBillstatIndex=nvBillstatIndex, nvItiprofP8=nvItiprofP8, nvDspmalloc=nvDspmalloc, nvIticstatNcurOutgo=nvIticstatNcurOutgo, nvX25statNrxchars=nvX25statNrxchars, nvPriconfEntry=nvPriconfEntry, nvRadcstatNAcctLost=nvRadcstatNAcctLost, nvR2profForcerel=nvR2profForcerel, nvX25statCode=nvX25statCode, nvAnuaconfRedirect=nvAnuaconfRedirect, nvTrapCardInserted=nvTrapCardInserted, nvItiustatNumRec=nvItiustatNumRec, nvElxstatOutNUcasts=nvElxstatOutNUcasts, nvPosstatNumomsgs=nvPosstatNumomsgs, nvItiprofP12=nvItiprofP12, nvItipstatPreparam=nvItipstatPreparam, nvPosisoField63=nvPosisoField63, nvNsockmapMaxsessn=nvNsockmapMaxsessn, nvR2pstatTotocalatt=nvR2pstatTotocalatt, nvTnnlconfNetaddr=nvTnnlconfNetaddr, nvAbillstatP4call=nvAbillstatP4call, nvSFRMRPerrs=nvSFRMRPerrs, nvX25statNrxclrs=nvX25statNrxclrs, nvXbillstatRxcallc=nvXbillstatRxcallc, nvDuiconf=nvDuiconf, nvPosvisa=nvPosvisa, nvNodeconf=nvNodeconf, nvPriconfL1prot=nvPriconfL1prot, nevadaPos=nevadaPos, nvNmsuser=nvNmsuser, nvDialstatNmiscfail=nvDialstatNmiscfail, nvFristatDtreset=nvFristatDtreset, nvFtpconfIndex=nvFtpconfIndex, nvFtpstatCurrkbysds=nvFtpstatCurrkbysds, nvTnconfEntry=nvTnconfEntry, nvDlstatDtreset=nvDlstatDtreset, nvSlotstatProdChkDate=nvSlotstatProdChkDate, nvElxconfIndex=nvElxconfIndex, nvApfilterCalled=nvApfilterCalled, nvNodeconfIndex=nvNodeconfIndex, nvBillconfSet3nua3=nvBillconfSet3nua3, nvFtpconfNumRec=nvFtpconfNumRec, nvTnclassEntry=nvTnclassEntry, nvRadcstatNAuthLost=nvRadcstatNAuthLost, nvIticmdIndex=nvIticmdIndex, nvR2pstatToticalatt=nvR2pstatToticalatt, nvIticlassSecurity=nvIticlassSecurity, nvBillstatGrtr20=nvBillstatGrtr20, nvFristatLmistate=nvFristatLmistate, nvDuiconfIndex=nvDuiconfIndex, nvMpstatPart2InOctets=nvMpstatPart2InOctets, nvTrapDbsavecount=nvTrapDbsavecount, nvPristatNrxsetup=nvPristatNrxsetup, nvTncconfNumRec=nvTncconfNumRec, nvBillstat=nvBillstat, nvUgstatMaxRec=nvUgstatMaxRec, nvItiustatNrxpaks=nvItiustatNrxpaks, nvApddmstatNumRec=nvApddmstatNumRec, nvNodestatChgreqid=nvNodestatChgreqid, nvIcmpstatTable=nvIcmpstatTable, nvIticlassMaxwsze=nvIticlassMaxwsze, nvRbpstatDliname=nvRbpstatDliname, nvItiustatNcallbacks=nvItiustatNcallbacks, nvMediastatDebug=nvMediastatDebug, nvMpstatPart1LocSeqS=nvMpstatPart1LocSeqS, nvIticstatN9600bd=nvIticstatN9600bd, nvDportstat=nvDportstat, nvMpstatPart2OutErrors=nvMpstatPart2OutErrors, nvItipstatDstadr=nvItipstatDstadr, nvApfclstatMaxRec=nvApfclstatMaxRec, nvRbdspstatDtreset=nvRbdspstatDtreset, nvCDLIDataInver=nvCDLIDataInver, nvPosstatNtoolong=nvPosstatNtoolong, nvX25confCugformat=nvX25confCugformat, nvFrmrstatEntry=nvFrmrstatEntry, nvBillconfSet4nua1=nvBillconfSet4nua1, nvCrfstatTable=nvCrfstatTable, nvTslotconfIndex=nvTslotconfIndex, nvApfilter=nvApfilter, nvCrcstatRcsc0=nvCrcstatRcsc0, nvXbillconfIndex=nvXbillconfIndex, nvR2dspstatUnusedchn=nvR2dspstatUnusedchn, nvNetmapTable=nvNetmapTable)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvR2pstatObstat=nvR2pstatObstat, nvTslotconfMaxRec=nvTslotconfMaxRec, nvPosisoField35=nvPosisoField35, nvPosisoField22=nvPosisoField22, nvXbillstatNetclr=nvXbillstatNetclr, nevadaFtp=nevadaFtp, nvCrfstatL1prot=nvCrfstatL1prot, nvSFRMRLostfrms=nvSFRMRLostfrms, nvXnuasetNua3=nvXnuasetNua3, nvR2profClrfwdgrd=nvR2profClrfwdgrd, nvIticlassMaxpsze=nvIticlassMaxpsze, nvItimapMaxRec=nvItimapMaxRec, nvBillstatHostclr=nvBillstatHostclr, nvTcprstatInport=nvTcprstatInport, nvLinkconfEntry=nvLinkconfEntry, nvRbcstatCallednum=nvRbcstatCallednum, nvMediastatImage2db=nvMediastatImage2db, nvModemprofTable=nvModemprofTable, nvFriconfnT2=nvFriconfnT2, nvIticlassEscchar=nvIticlassEscchar, nvDlspcconfPidtable=nvDlspcconfPidtable, nvDrstatNumRec=nvDrstatNumRec, nvTncstatIpaddr=nvTncstatIpaddr, nvDuiconfType=nvDuiconfType, nvL2tpconfNumRec=nvL2tpconfNumRec, nvLcpconfNumRec=nvLcpconfNumRec, nvTcpstatRcvbytes=nvTcpstatRcvbytes, nvBillconfSet3nua1=nvBillconfSet3nua1, nvBillconfSet6nua3=nvBillconfSet6nua3, nvModemprofAnstondur=nvModemprofAnstondur, nvPosstatMaxRec=nvPosstatMaxRec, nvItipstatOrg=nvItipstatOrg, nvX25statNrxsegs=nvX25statNrxsegs, nvTrapDbCrcError=nvTrapDbCrcError, nvBillconfMaxRec=nvBillconfMaxRec, nvIpconfEncap=nvIpconfEncap, nvIticonfTable=nvIticonfTable, nvItiprofP3=nvItiprofP3, nvIpwanmapCug=nvIpwanmapCug, nvRadustatFrmRting=nvRadustatFrmRting, nvBillconfSet8=nvBillconfSet8, nvPosvisaField4=nvPosvisaField4, nvSFRMRRxaborts=nvSFRMRRxaborts, nvPppstatOutDiscrd=nvPppstatOutDiscrd, nvL2tpconfAckTimout=nvL2tpconfAckTimout, nvMpstatPart1Link7=nvMpstatPart1Link7, nvElxstatInDiscards=nvElxstatInDiscards, nvAcctstatTxpaks=nvAcctstatTxpaks, nvDlconfTable=nvDlconfTable, nvTcpstatRcvbadsums=nvTcpstatRcvbadsums, nvRbdspstatIndex=nvRbdspstatIndex, nvBillconfSet1=nvBillconfSet1, nvL2tptstatRecvData=nvL2tptstatRecvData, nvSymuserIndex=nvSymuserIndex, nvFrvcstatServiceid=nvFrvcstatServiceid, nvTslotconfName=nvTslotconfName, nvTncmapX3parms=nvTncmapX3parms, nevadaFrameRelay=nevadaFrameRelay, nvPosvisaField15=nvPosvisaField15, nvApacsstatUnxhstclr=nvApacsstatUnxhstclr, nvItiprofP30=nvItiprofP30, nvIprouteNumRec=nvIprouteNumRec, nvRbconf=nvRbconf, nvXbillconf=nvXbillconf, nvXbillstatMaxRec=nvXbillstatMaxRec, nvPosstat=nvPosstat, nvItipstatState=nvItipstatState, nvRadconfAttrchk=nvRadconfAttrchk, nvPricustat=nvPricustat, nvTncstatCalladdr=nvTncstatCalladdr, nvTrapFrLMIError=nvTrapFrLMIError, nvDlconf=nvDlconf, nevadaIp=nevadaIp, nvFrstatMrxavgfps=nvFrstatMrxavgfps, nvItiportMode=nvItiportMode, nvIpstatInRxs=nvIpstatInRxs, nvNodeconfRate1=nvNodeconfRate1, nvBillconfSet10nua2=nvBillconfSet10nua2, nvDuistat=nvDuistat, nvApclstatDspname=nvApclstatDspname, nvRadcstatIndex=nvRadcstatIndex, nvPosprofActsupl=nvPosprofActsupl, nvPosstatEntry=nvPosstatEntry, nvPricustatCounter3=nvPricustatCounter3, nvPosisoField59=nvPosisoField59, nvX25callChanstate=nvX25callChanstate, nvX25callNrxres=nvX25callNrxres, nvIpconfMaxRec=nvIpconfMaxRec, nvItiprofP34=nvItiprofP34, nvBillconfSet1nua2=nvBillconfSet1nua2, nvCFRMRClkmode=nvCFRMRClkmode, nvX25statNrxpaks=nvX25statNrxpaks, nvR2cstatDirection=nvR2cstatDirection, nvApacsstatResetdate=nvApacsstatResetdate, nvPristatMaxRec=nvPristatMaxRec, nvSFRMRPortIndex=nvSFRMRPortIndex, nvItiuserStatus=nvItiuserStatus, nvApmdmstatB1calls=nvApmdmstatB1calls, nvItimapNumRec=nvItimapNumRec, nvRbconfIndex=nvRbconfIndex, nvItiuserIndex=nvItiuserIndex, nvModemprofMaxRec=nvModemprofMaxRec, nvTcpstatNumRec=nvTcpstatNumRec, nvTrapReachedStatus=nvTrapReachedStatus, nvApmdmstatSuccess=nvApmdmstatSuccess, nvSnmpmgrAccPriv=nvSnmpmgrAccPriv, nvAnuaconfReserve1=nvAnuaconfReserve1, nvTnclassMaxRec=nvTnclassMaxRec, nvR2sysparAllocthrs=nvR2sysparAllocthrs, nvL2tpsstatEntry=nvL2tpsstatEntry, nvRadconfNumdigits=nvRadconfNumdigits, nvPosniimap=nvPosniimap, nvFrvcstatDlci=nvFrvcstatDlci, nvTncmapSecure=nvTncmapSecure, nvPosisoEntry=nvPosisoEntry, nvPosvisaField16=nvPosvisaField16, nvTrapconfDesc=nvTrapconfDesc, nvMpconfTable=nvMpconfTable, nvCrouteVol1mode=nvCrouteVol1mode, nvIpconfRoutprot=nvIpconfRoutprot, nvR2pstatTotisigatt=nvR2pstatTotisigatt, nvLinkstatTouts=nvLinkstatTouts, nvApacsconfTimerB=nvApacsconfTimerB, nvApfilterEntry=nvApfilterEntry, nvBillconfSet2=nvBillconfSet2, nvNodeconfNodeid=nvNodeconfNodeid, nvIpstatOutNoRts=nvIpstatOutNoRts, nvAnuaconf=nvAnuaconf, nvPristatNrxconn=nvPristatNrxconn, nvItiprofP29=nvItiprofP29, nvApmdmstatEntry=nvApmdmstatEntry, nvItipstatReserve1=nvItipstatReserve1, nvSlotstatCardType=nvSlotstatCardType, nvTrapS1=nvTrapS1, nvR2cstatCallednum=nvR2cstatCallednum, nvTslotstatRemtsid=nvTslotstatRemtsid, nvDlstatRrtxs=nvDlstatRrtxs, nvDportstatIndex=nvDportstatIndex, nvIticlassNumRec=nvIticlassNumRec, nvRrstatIndex=nvRrstatIndex, nvIpwanmapRevcall=nvIpwanmapRevcall, nvDuiconfRetryinc=nvDuiconfRetryinc, nvItiprofP18=nvItiprofP18, nvCFRMRRate=nvCFRMRRate, nvDialstatEntry=nvDialstatEntry, nvX25statLinkup=nvX25statLinkup, nvTslotconfEnable=nvTslotconfEnable, nvRadconfMaxRec=nvRadconfMaxRec, nvR2conf=nvR2conf, nvXnuasetNua2=nvXnuasetNua2, nvTcpcnstatRemaddr=nvTcpcnstatRemaddr, nvRaduser=nvRaduser, nvAbillstatRxbytes=nvAbillstatRxbytes, nvDrstatNumrsrvd=nvDrstatNumrsrvd, nvLinkconfTable=nvLinkconfTable, nvElxstatInUcasts=nvElxstatInUcasts, nvIticstatLoscarcip=nvIticstatLoscarcip, nvBillconfSet2nua1=nvBillconfSet2nua1, nvMpstatPart1Index=nvMpstatPart1Index, nvRadconfTable=nvRadconfTable, nvPppstatIndex=nvPppstatIndex, nvApclstatLabel1=nvApclstatLabel1, nvDialstatRcscpool=nvDialstatRcscpool, nvCDLIEntry=nvCDLIEntry, nvSlotstatSrNumber=nvSlotstatSrNumber, nvApacsstatSimultime=nvApacsstatSimultime, nvTncconfFout=nvTncconfFout, nvModemstatEctype=nvModemstatEctype, nvPosniimapMaxRec=nvPosniimapMaxRec, nvApfilterAblock=nvApfilterAblock, nvDportstatOutcalls=nvDportstatOutcalls, nvXnuasetTable=nvXnuasetTable, nvPppstatName=nvPppstatName, nvPosvisaMaxRec=nvPosvisaMaxRec, nvDlconfLinkname=nvDlconfLinkname, nvIticlassRejectid=nvIticlassRejectid, nvItipstatRxPsze=nvItipstatRxPsze, nvFrvcstatDrprxdes=nvFrvcstatDrprxdes, nvTcpcnstatNumRec=nvTcpcnstatNumRec, nvX25callNs=nvX25callNs, nvFristatIndex=nvFristatIndex, nvX25nuimapEntry=nvX25nuimapEntry, nvX25confLtc=nvX25confLtc, nvTrapFrDLCIsDown=nvTrapFrDLCIsDown, nvX25confAcktimer=nvX25confAcktimer, nvPosstatNmsbadhst=nvPosstatNmsbadhst, nvMpstatPart1IpcpOperS=nvMpstatPart1IpcpOperS, nvRbdspstatDevname=nvRbdspstatDevname, NvNetAddress=NvNetAddress, nvFrvcconf=nvFrvcconf, nvApacsstatTmoerrcip=nvApacsstatTmoerrcip, nvUgconf=nvUgconf, nevadaRadius=nevadaRadius, nvX25statEntry=nvX25statEntry, nvX25callNunakpac=nvX25callNunakpac, nvDlstatRejtxs=nvDlstatRejtxs, nvApfilterLabel1=nvApfilterLabel1, nvTrapPppLcpUp=nvTrapPppLcpUp, nvIpstatReasmOKs=nvIpstatReasmOKs, nvDlspcconfTable=nvDlspcconfTable, nvL2tptstat=nvL2tptstat, nvRbconfProfname=nvRbconfProfname, nvIticlassXonin=nvIticlassXonin, nvPosisoField6=nvPosisoField6, nvIticlassDatacmd=nvIticlassDatacmd, nvTrapconfStatus=nvTrapconfStatus, nvItiuserNumRec=nvItiuserNumRec, nvIticmdTable=nvIticmdTable, nvTnconfDefminbspace=nvTnconfDefminbspace, nvFrvcstatIndex=nvFrvcstatIndex, nvRbcstatCallingnum=nvRbcstatCallingnum, nvX25callNrxpaks=nvX25callNrxpaks, nvAcctoperNumRec=nvAcctoperNumRec, nvPosprofPortname=nvPosprofPortname, nvCrfstatCallngsub=nvCrfstatCallngsub, nvItiportNumRec=nvItiportNumRec, nvPricustatCounter4=nvPricustatCounter4, nvPosmsgmapPattern=nvPosmsgmapPattern, nvModemprofName=nvModemprofName, nvTcpstatAccepts=nvTcpstatAccepts, nvFriconfnT1=nvFriconfnT1, nvR2profMfgroupb=nvR2profMfgroupb, nvIpstatFragCrs=nvIpstatFragCrs, nvNsockconfMaxRec=nvNsockconfMaxRec, nvNmsuserTput=nvNmsuserTput, nvPosisoContrec=nvPosisoContrec, nvX25statNrxcallcs=nvX25statNrxcallcs, nvSlotstatStatus=nvSlotstatStatus, nvItimapEntry=nvItimapEntry, nvPricstatState=nvPricstatState, nvIticlassMaskstrng=nvIticlassMaskstrng, nvMediastatImage2sw=nvMediastatImage2sw, nvBillconfSet7nua2=nvBillconfSet7nua2, nvFtpstatCurrfirecs=nvFtpstatCurrfirecs, nvIpstatFragOKs=nvIpstatFragOKs, nvPppstatInError=nvPppstatInError, nvNetmap=nvNetmap, nvApfclstatFilter=nvApfclstatFilter, nvTcprstatDtreset=nvTcprstatDtreset, nvSnmpconfNumRec=nvSnmpconfNumRec, nvFrvcstatStatus=nvFrvcstatStatus, nvIfStackInfoStatus=nvIfStackInfoStatus, nvR2pstatPstat=nvR2pstatPstat, nvFrvcconfEntry=nvFrvcconfEntry, nvNodeconfChgreqid=nvNodeconfChgreqid, nvPricstatNumRec=nvPricstatNumRec, nvPosisoField62=nvPosisoField62, nvAbillstatP7call=nvAbillstatP7call, nvRadcstatNAuth3Acc=nvRadcstatNAuth3Acc, nvDlstatRxdds=nvDlstatRxdds, nvBillconfSet9nua2=nvBillconfSet9nua2, nvItirpoaIndex=nvItirpoaIndex, nvIticmdNumRec=nvIticmdNumRec, nvIprtstatIndex=nvIprtstatIndex)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvX25callNtxpaks=nvX25callNtxpaks, nvPosisoField48=nvPosisoField48, nvTncstatX29err=nvTncstatX29err, nvTnnlstatEntry=nvTnnlstatEntry, nvItipstatNctxpaks=nvItipstatNctxpaks, nvIticlassDevtype=nvIticlassDevtype, nvIpstatInHdrErrs=nvIpstatInHdrErrs, nvAnuaconfRsvrReverse=nvAnuaconfRsvrReverse, nvPosstatNfailcall=nvPosstatNfailcall, nvXbillstatEntry=nvXbillstatEntry, nvIticstatNncr=nvIticstatNncr, nvX25confDbmod=nvX25confDbmod, nvPppstatInDiscRq=nvPppstatInDiscRq, nvString=nvString, nvLinkconfLinkname=nvLinkconfLinkname, nvPosvisaField7=nvPosvisaField7, nvCDLITable=nvCDLITable, nvBillconfSet6nua2=nvBillconfSet6nua2, nvRoutemapStatus=nvRoutemapStatus, nvAcctstatRecord=nvAcctstatRecord, nvCrcstatL1mode=nvCrcstatL1mode, nvX25statOpen=nvX25statOpen, nvTcpstatRcvdupbytes=nvTcpstatRcvdupbytes, nvXbillstat5to10=nvXbillstat5to10, nvDlconfPuaddr=nvDlconfPuaddr, nvRbconfNumRec=nvRbconfNumRec, nvApfclstatLabel1=nvApfclstatLabel1, nvModemconf=nvModemconf, nvFristatRcvseq=nvFristatRcvseq, nvTncconfNumSess=nvTncconfNumSess, nvItipstatTxWsze=nvItipstatTxWsze, nvPricuconfNumRec=nvPricuconfNumRec, nvItipstatNtconn=nvItipstatNtconn, nvPosisoField23=nvPosisoField23, nvPosstatRsptimout=nvPosstatRsptimout, nvIprouteStatus=nvIprouteStatus, nvFrvcstatOutputrate=nvFrvcstatOutputrate, nvR2syspar=nvR2syspar, nvCrfstatRcsc0=nvCrfstatRcsc0, nvTslotstatCurrxfrm=nvTslotstatCurrxfrm, nvRrstat=nvRrstat, nvTcpcnstatIndex=nvTcpcnstatIndex, nvX25statNtxchars=nvX25statNtxchars, nvL2tpsstatDtreset=nvL2tpsstatDtreset, nvModemprofRsrcpool=nvModemprofRsrcpool, nvRadustatFrmIpaddr=nvRadustatFrmIpaddr, nvPricstatTable=nvPricstatTable, nvTnmapTable=nvTnmapTable, nvDialstatNfail=nvDialstatNfail, nvTslotconfTcpprof=nvTslotconfTcpprof, nvIticonfBroadcast=nvIticonfBroadcast, nvXbillstatNodeid=nvXbillstatNodeid, nvRoutemapIndex=nvRoutemapIndex, nvRbprofDtmftmout=nvRbprofDtmftmout, nvRadcstatNAcctRtry=nvRadcstatNAcctRtry, nvBillconfSet5nua1=nvBillconfSet5nua1, nvIticlassStatus=nvIticlassStatus, nvPosvisaField12=nvPosvisaField12, nvApmdmstatMaxRec=nvApmdmstatMaxRec, nvUgstatBwrejs=nvUgstatBwrejs, nvTcpprofStatus=nvTcpprofStatus, nvBillstatNumRec=nvBillstatNumRec, nvIticonfNumcopy=nvIticonfNumcopy, nvIticlassXoffin=nvIticlassXoffin, nvItipstatNncr=nvItipstatNncr, nvRbsysparNumRec=nvRbsysparNumRec, nvTrapLinkNotReady=nvTrapLinkNotReady, nvItiprofP13=nvItiprofP13, nvAbillstatP3time=nvAbillstatP3time, nvX25statUp=nvX25statUp, nvPristatCallcur=nvPristatCallcur, nvRoutemapAddrstr=nvRoutemapAddrstr, nvRbdspstatNumrbpipe=nvRbdspstatNumrbpipe, nvItiprofP5=nvItiprofP5, nvAnuaconfNumRec=nvAnuaconfNumRec, nvRbdspstatStat=nvRbdspstatStat, nvFrmrstatTable=nvFrmrstatTable, nvPosprofNumRec=nvPosprofNumRec, nvPosstatQueued=nvPosstatQueued, nvR2sysparDeallthrs=nvR2sysparDeallthrs, nvApfclstatWanport=nvApfclstatWanport, nvPriconfStatus=nvPriconfStatus, nvItipstatNrdiag=nvItipstatNrdiag, nvItiustatNcalls=nvItiustatNcalls, nvPosisoField56=nvPosisoField56, nvMpstatPart2InDiscRq=nvMpstatPart2InDiscRq, nvCrouteMaxRec=nvCrouteMaxRec, nvRadconfName=nvRadconfName, nvIticstatMaxIncom=nvIticstatMaxIncom, nvRbcstatReason=nvRbcstatReason, nvAcctstat64krxpaks=nvAcctstat64krxpaks, nvLinkstatRejrxs=nvLinkstatRejrxs, nvRbprofStatus=nvRbprofStatus, nvMpstatPart2InDiscrd=nvMpstatPart2InDiscrd, nvRbpstatMaxRec=nvRbpstatMaxRec, nvCrcstatTable=nvCrcstatTable, nvItiustatTable=nvItiustatTable, nvPppstatComprot=nvPppstatComprot, nvFrstatTxavgfps=nvFrstatTxavgfps, nvNsockmapStatus=nvNsockmapStatus, nvIpwanmapNetaddr=nvIpwanmapNetaddr, nvApfclstatTime=nvApfclstatTime, nvNmsuserEntry=nvNmsuserEntry, nvX25callNtxrrs=nvX25callNtxrrs, nvAbillstatB3time=nvAbillstatB3time, nvLinkstatIndex=nvLinkstatIndex, nvApacsstatN14400bd=nvApacsstatN14400bd, nvModemstatFirmver=nvModemstatFirmver, nvTslotstatEntry=nvTslotstatEntry, nvRbprofTable=nvRbprofTable, nvNetpvcStatus=nvNetpvcStatus, nvSFRMRRxovrs=nvSFRMRRxovrs, nvIticlassXonout=nvIticlassXonout, nvR2dspstatTotibchn=nvR2dspstatTotibchn, nvTnnlconfIndex=nvTnnlconfIndex, nvElxstatInOctets=nvElxstatInOctets, nvBillconfEnable=nvBillconfEnable, nvApacsstatLrcerrcip=nvApacsstatLrcerrcip, nvLinkstatRejtxs=nvLinkstatRejtxs, nvL2tpsstatLclCallID=nvL2tpsstatLclCallID, nvIptrunkDstiptrnk=nvIptrunkDstiptrnk, nvFtpconfMaxRec=nvFtpconfMaxRec, nvBillconfSet9nua1=nvBillconfSet9nua1, nvItiportPortname=nvItiportPortname, nvItimap=nvItimap, nvCrouteType=nvCrouteType, nvL2tpstatDataRecv=nvL2tpstatDataRecv, nvBillstatTxpak=nvBillstatTxpak, nvXbillstat15to20=nvXbillstat15to20, nvBillstatTable=nvBillstatTable, nvDialmapEntry=nvDialmapEntry, nvTcprstatTable=nvTcprstatTable, nvIcmpstatInRdrcts=nvIcmpstatInRdrcts, nvApfclstatTermid=nvApfclstatTermid, nvPosvisaField18=nvPosvisaField18, nvTrapRateIncreasedToL1=nvTrapRateIncreasedToL1, nvNodestatCurclk=nvNodestatCurclk, nvLinkstatTchartxs=nvLinkstatTchartxs, nvApfclstatX25dur=nvApfclstatX25dur, nvTrapPppLcpNetworkdown=nvTrapPppLcpNetworkdown, nvPosstatNodatart=nvPosstatNodatart, nvL2tpsstatTable=nvL2tpsstatTable, nvSlotstatEntry=nvSlotstatEntry, nvRadconfEntry=nvRadconfEntry, nvPosisoField49=nvPosisoField49, nvIticlassRpoacode=nvIticlassRpoacode, nvItipstatNrxresets=nvItipstatNrxresets, nvLinkstatIfrxs=nvLinkstatIfrxs, nvRadustatEntry=nvRadustatEntry, nvLcpconfChalint=nvLcpconfChalint, nvRadcstatNumRec=nvRadcstatNumRec, nvFrvcconfN=nvFrvcconfN, nvX25confLpc=nvX25confLpc, nvTrapFRAMERFailed=nvTrapFRAMERFailed, nvX25confMaxRec=nvX25confMaxRec, nvRbsysparAlarmint=nvRbsysparAlarmint, nvL2tptstatLocalTnID=nvL2tptstatLocalTnID, nvPricstatCallid=nvPricstatCallid, nvPppstatOutExpnds=nvPppstatOutExpnds, nvPosnmsmapDest=nvPosnmsmapDest, nvCrcstatEntry=nvCrcstatEntry, nvTcpstatSndprobes=nvTcpstatSndprobes, nvDportstatSetstate=nvDportstatSetstate, nvIticonfMaxRec=nvIticonfMaxRec, nvR2dspstatEntry=nvR2dspstatEntry, nvPosisoField29=nvPosisoField29, nvL2tpstatTable=nvL2tpstatTable, nvPricustatMaxRec=nvPricustatMaxRec, nvNodeconfRate3=nvNodeconfRate3, nvMpstatPart2MaxRec=nvMpstatPart2MaxRec, nvCFRMRTable=nvCFRMRTable, nvPosstatIndex=nvPosstatIndex, nvItipstatClassname=nvItipstatClassname, nvPristatCallfail=nvPristatCallfail, nvNetmapStatus=nvNetmapStatus, nvIprtstatEntry=nvIprtstatEntry, nvIpcpconfDnsadd1=nvIpcpconfDnsadd1, nvBillconfSet10nua1=nvBillconfSet10nua1, nvRbpstatRbstat=nvRbpstatRbstat, nvPosisoField11=nvPosisoField11, nvR2pstatObr2dsp=nvR2pstatObr2dsp, nvRrstatPoolname=nvRrstatPoolname, nvDuiconfCalling=nvDuiconfCalling, nvTcpstatIndex=nvTcpstatIndex, nvDlspcstatIndex=nvDlspcstatIndex, nvNodeconfQdlifail=nvNodeconfQdlifail, nvIticonfV120p11=nvIticonfV120p11, nvTslotstatMaxRec=nvTslotstatMaxRec, nvIticlassIncbar=nvIticlassIncbar, nvAcctstat64krxsegs=nvAcctstat64krxsegs, nvBillstatDate=nvBillstatDate, nvIptrunkIndex=nvIptrunkIndex, nvTncconfIdletim=nvTncconfIdletim, nvApclstatWanport=nvApclstatWanport, nvStringTable=nvStringTable, nvCrfstatReserve1=nvCrfstatReserve1, nvIticlassTidprompt=nvIticlassTidprompt, nvMediastatDump=nvMediastatDump, nvIpconfEntry=nvIpconfEntry, nvPriconfStandby=nvPriconfStandby, nvIpstatDtreset=nvIpstatDtreset, nvIcmpstatInMsgs=nvIcmpstatInMsgs, nvModemprofMode=nvModemprofMode, nvTcpprofKeepidle=nvTcpprofKeepidle, nvX25statNtxclrcs=nvX25statNtxclrcs, nvItiprofP25=nvItiprofP25, nvIprouteMaxRec=nvIprouteMaxRec, nvPridstatProtlayer=nvPridstatProtlayer, nevadaSystem=nevadaSystem, nvIticstatN300bd=nvIticstatN300bd, nvXnuaset=nvXnuaset, nvTslotstatTotrxfrm=nvTslotstatTotrxfrm, nvNetpvcmapNodeid=nvNetpvcmapNodeid, nvSDSPEntry=nvSDSPEntry, nvDlspcstatEntry=nvDlspcstatEntry, nvPosstatDnlnkfail=nvPosstatDnlnkfail, nvTcprstatService=nvTcprstatService, nevadaTelnet=nevadaTelnet, nvRbdspstatUnusedchn=nvRbdspstatUnusedchn, nvSDLICurstate=nvSDLICurstate, nvIprtstatInterface=nvIprtstatInterface, nvItipstatNtdc=nvItipstatNtdc, nvCrfstatNumRec=nvCrfstatNumRec, nvDportstatIntfstate=nvDportstatIntfstate, nvAcctoperComponent=nvAcctoperComponent, nvDlconfDlnumber=nvDlconfDlnumber, nvIpwanmap=nvIpwanmap, nvPridstatNumRec=nvPridstatNumRec, nvRadconfDnsatt2=nvRadconfDnsatt2, nvTnmapMaxRec=nvTnmapMaxRec, nvApacsstatDscnoack=nvApacsstatDscnoack, nvDialstatNnoAnswer=nvDialstatNnoAnswer, nvR2pstatDtreset=nvR2pstatDtreset, nvLcpconf=nvLcpconf, nvNodestatTxcurpps=nvNodestatTxcurpps, nvSDSPName=nvSDSPName, nvRadustatSessionId=nvRadustatSessionId, nvRbprofNumRec=nvRbprofNumRec, nvDuistatState=nvDuistatState, nvRadcstatNAcct2=nvRadcstatNAcct2, nvElxstatOutUcasts=nvElxstatOutUcasts, nvWriteConfig=nvWriteConfig, nvCrcstatCid=nvCrcstatCid, nvLinkconfT1=nvLinkconfT1, nvIticlassX3type=nvIticlassX3type, nvMpstatPart1RmtSeqS=nvMpstatPart1RmtSeqS, nvTslotconfReserve2=nvTslotconfReserve2, nvAbillstatP3call=nvAbillstatP3call, nvModemstatEntry=nvModemstatEntry, nvTncmapNetad=nvTncmapNetad, nvPricuconfThresh2=nvPricuconfThresh2, nvPristatCallconn=nvPristatCallconn, nvStartScript=nvStartScript, nvPosniimapStatus=nvPosniimapStatus)
mibBuilder.exportSymbols("Telematics-Nevada-MIB", nvIticstatLoscarsu=nvIticstatLoscarsu, nvApclstatTime=nvApclstatTime, nvX25callTable=nvX25callTable, nvModemprofStatus=nvModemprofStatus, nvSlotstatName=nvSlotstatName, nvIticstatMaxRec=nvIticstatMaxRec, nvMpstatPart1MaxRec=nvMpstatPart1MaxRec, nvTncstatDnsidx=nvTncstatDnsidx)
