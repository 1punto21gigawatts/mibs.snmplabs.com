#
# PySNMP MIB module DGS3000-28SC-L2MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS3000-28SC-L2MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:45:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
AgentNotifyLevel, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "AgentNotifyLevel")
dot1agCfmMdIndex, dot1agCfmMaIndex, dot1agCfmMepIdentifier = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMdIndex", "dot1agCfmMaIndex", "dot1agCfmMepIdentifier")
swPortSecPortIndex, = mibBuilder.importSymbols("PORT-SECURITY-MIB", "swPortSecPortIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, TimeTicks, MibIdentifier, Bits, iso, Gauge32, Unsigned32, Counter32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "TimeTicks", "MibIdentifier", "Bits", "iso", "Gauge32", "Unsigned32", "Counter32", "NotificationType", "Integer32")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
dlink_Dgs3000Proj_DGS3000_28SCax, = mibBuilder.importSymbols("SWDGS3000PRIMGMT-MIB", "dlink-Dgs3000Proj-DGS3000-28SCax")
swL2MgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2))
if mibBuilder.loadTexts: swL2MgmtMIB.setLastUpdated('201410141006Z')
if mibBuilder.loadTexts: swL2MgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swL2MgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swL2MgmtMIB.setDescription('The Structure of Layer 2 Network Management Information.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1))
swL2VLANMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2))
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3))
swL2TrunkMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9))
swL2MirrorMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10))
swL2IGMPMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11))
swL2TrafficMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13))
swL2TrafficSegMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14))
swL2MulticastFilterMode = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17))
swL2LoopDetectMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18))
swL2MgmtMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100))
class IANAifMauAutoNegCapBits(TextualConvention, Bits):
    reference = '[IEEE802.3], Section 30.6.1.1.5'
    description = 'This data type is used as the syntax of the swL2PortAutoNegCapabilityBits, swL2PortAutoNegCapAdvertisedBits, and swL2PortAutoNegCapReceivedBits objects in swL2PortAutoNegTable.'
    status = 'current'
    namedValues = NamedValues(("bOther", 0), ("b10baseT", 1), ("b10baseTFD", 2), ("b100baseT4", 3), ("b100baseTX", 4), ("b100baseTXFD", 5), ("b100baseT2", 6), ("b100baseT2FD", 7), ("bFdxPause", 8), ("bFdxAPause", 9), ("bFdxSPause", 10), ("bFdxBPause", 11), ("b1000baseX", 12), ("b1000baseXFD", 13), ("b1000baseT", 14), ("b1000baseTFD", 15))

swL2DevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1))
swDevInfoTotalNumOfPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setStatus('current')
if mibBuilder.loadTexts: swDevInfoTotalNumOfPort.setDescription('The number of ports within this switch. This value is the sum of the ports within this switch.')
swDevInfoNumOfPortInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setStatus('current')
if mibBuilder.loadTexts: swDevInfoNumOfPortInUse.setDescription('The number of ports in this switch connected to the segment or the end stations.')
swDevModuleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3), )
if mibBuilder.loadTexts: swDevModuleInfoTable.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoTable.setDescription('This table contains the module information.')
swDevModuleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swDevModuleInfoUnitID"))
if mibBuilder.loadTexts: swDevModuleInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoEntry.setDescription('A list of management information for each unit in the system.')
swDevModuleInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoUnitID.setDescription('This object indicates the specific unit ID in the stacking/chassis table.')
swDevModuleInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoModuleName.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoModuleName.setDescription('A text string containing the name of the module. ')
swDevModuleInfoReversion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoReversion.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoReversion.setDescription('A text string containing the version (name or number) of the module.')
swDevModuleInfoSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoSerial.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoSerial.setDescription('A text string containing the serial number or serial name of the module.')
swDevModuleInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swDevModuleInfoDescription.setStatus('current')
if mibBuilder.loadTexts: swDevModuleInfoDescription.setDescription('A text string containing a description of the module. ')
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlStpState.setDescription('This object can enable or disable the spanning tree algorithm during the runtime of the system.')
swL2DevCtrlIGMPSnooping = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnooping.setDescription('This object indicates if the layer 2 Internet Group Management Protocol (IGMP) capture function is enabled or disabled.')
swL2DevCtrlIGMPSnoopingMcstRTOnly = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIGMPSnoopingMcstRTOnly.setDescription('This object controls the IGMP snooping forward multicast routing only state.')
swL2DevCtrlRmonState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlRmonState.setDescription('This object can enable or disable RMON.')
swL2DevCtrlSnmpTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlSnmpTrapState.setDescription('This object controls the SNMP trap status.')
swL2DevCtrlCleanAllStatisticCounter = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCleanAllStatisticCounter.setDescription('When the object is set to active, all statistical counters will be cleared. If set to normal, no action will occur.')
swL2DevCtrlVlanIdOfFDBTbl = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVlanIdOfFDBTbl.setDescription('Indicates the VLAN ID to which the Dot1dTpFdbTable belongs; The default value is the DEFAULT_VLAN_ID of the system.')
swL2MACNotifyState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyState.setDescription('This object can enable or disable MAC Notification.')
swL2MACNotifyHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyHistorySize.setDescription('This object indicates the history size of MAC addresses in the MAC Address table. The default value is 1.')
swL2MACNotifyInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MACNotifyInterval.setStatus('current')
if mibBuilder.loadTexts: swL2MACNotifyInterval.setDescription('This object indicates the time interval, in seconds, that will trigger MAC notification messages.')
swL2DevCtrlAsymVlanState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlAsymVlanState.setDescription('This object enables or disables asymmetric VLANs during the runtime of the system.')
swL2DevCtrlTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 14))
swL2DevCtrlTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetState.setDescription('This object controls the Telnet status.')
swL2DevCtrlTelnetTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlTelnetTcpPort.setDescription('This object designates TCP ports. When Telnet is disabled, this object is not accessible.')
swL2DevCtrlManagementVlanId = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlManagementVlanId.setDescription('This object controls which previously created VLANs are included in the System IP Interface.')
swL2DevCtrlWeb = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 17))
swL2DevCtrlWebState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebState.setDescription('This object controls the Web status.')
swL2DevCtrlWebTcpPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlWebTcpPort.setDescription('This object designates TCP ports. When Web is disabled, this object is not accessible.')
swL2DevCtrlLLDPState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPState.setDescription('Specifies the state of the LLDP function. When this function is enabled, the switch can start to transmit LLDP packets and receive and process the LLDP packets. The specific function of each port will depend on the per port LLDP setting. For the advertisement of LLDP packets, the switch announces the information to its neighbor through ports. For receiving LLDP packets, the switch will learn the information from the LLDP packets advertised from the neighbor in the neighbor table. ')
swL2DevCtrlLLDPForwardMessageState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlLLDPForwardMessageState.setDescription("When lldp is disabled and lldp forward_message's are enabled, the LLDP Data Unit packets received by the switch will be forwarded. ")
swL2DevCtrlIpAutoconfig = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfig.setDescription('This object controls the IP auto configuration state.')
swL2DevCtrlCFM = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21))
swL2DevCtrlCFMState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMState.setDescription('This object indicates the CFM global state.')
swL2DevCtrlCFMPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2), )
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortTable.setDescription('A table containing the CFM state of specified ports.')
swL2DevCtrlCFMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2DevCtrlCFMPortIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortEntry.setDescription('The entry of the CFM state on specified ports.')
swL2DevCtrlCFMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortIndex.setDescription('This object indicates the port number.')
swL2DevCtrlCFMPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMPortState.setDescription('This object indicates the CFM state by port.')
swL2DevCtrlCFMMaTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 3), )
if mibBuilder.loadTexts: swL2DevCtrlCFMMaTable.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMaTable.setDescription('A table containing the CFM mode of specified MAs.')
swL2DevCtrlCFMMaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 3, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: swL2DevCtrlCFMMaEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMaEntry.setDescription('The entry of the CFM mode on specified MAs.')
swL2DevCtrlCFMMaMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlCFMMaMode.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMaMode.setDescription('This object indicates the CFM mode by MA.')
swL2DevCtrlCFMMepTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 4), )
if mibBuilder.loadTexts: swL2DevCtrlCFMMepTable.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMepTable.setDescription('A table containing the CFM mode of specified MEPs.')
swL2DevCtrlCFMMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 4, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: swL2DevCtrlCFMMepEntry.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMepEntry.setDescription('The entry of the CFM mode on specified MEPs.')
swL2DevCtrlCFMMepMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 21, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2DevCtrlCFMMepMode.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlCFMMepMode.setDescription('This object indicates the CFM mode by MEP.')
swL2DevCtrlVLANTrunkState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlVLANTrunkState.setDescription('This indicates the global state of the VLAN trunking feature of the device.')
swL2DevCtrlIpAutoconfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(50)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfigTimeout.setStatus('current')
if mibBuilder.loadTexts: swL2DevCtrlIpAutoconfigTimeout.setDescription('This object indicates the timeout for the auto configuration.')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3))
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of the Spanning Tree, this object decides whether to send a new root trap.')
swL2DevAlarmTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmTopologyChange.setDescription('This object determines whether or not to send a trap message when the switch topology changes. If the object is enabled (3), the Topology Change trap is sent by the device when any of its configured ports transition from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port transition, the device does not send the trap if this object value is disabled or in another state.')
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('current')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription('This object determines whether or not to send a trap message when the link changes. If the object is enabled (3), the Link Change trap is sent by the device when any of its port links change. The device does not send the trap if this object value is disabled or in another state.')
swL2VlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1), )
if mibBuilder.loadTexts: swL2VlanStaticTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticTable.setDescription('A table containing static configuration information for each VLAN configured into the device by (local or network) management. All entries are permanent and will be restored after the device is reset.')
swL2VlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanIndex"))
if mibBuilder.loadTexts: swL2VlanStaticEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanStaticEntry.setDescription('Static information for a VLAN configured into this device by (local or network) management.')
swL2VlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: swL2VlanIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanIndex.setDescription('The VLAN-ID or other identifier referring to this VLAN.')
swL2VLANAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VLANAdvertisement.setStatus('current')
if mibBuilder.loadTexts: swL2VLANAdvertisement.setDescription('This object indicates if the advertisement is active or not.')
swL2PVIDAutoAssignmentState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setStatus('current')
if mibBuilder.loadTexts: swL2PVIDAutoAssignmentState.setDescription("This object controls the PVID auto assignment state. If 'Auto-assign PVID' is disabled, the PVID can only be changed by PVID configuration (user changes explicitly). The VLAN configuration will not automatically change the PVID. If 'Auto-assign PVID' is enabled, the PVID will be changed by PVID or VLAN configuration. When a user configures a port to VLAN X's untagged membership, this port's PVID will be updated with VLAN X. Using the VLAN list command, PVID is updated as the last item of the VLAN list. When a user removes a port from the untagged membership of the PVID's VLAN, the port's PVID will be assigned 'default VLAN'.")
swL2VlanPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3), )
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoTable.setDescription('A table containing the VLAN and port role information of each port.')
swL2VlanPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanPortInfoPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanPortInfoVid"))
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoEntry.setDescription('The table entry of VLAN port information.')
swL2VlanPortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoPortIndex.setDescription('The port index.')
swL2VlanPortInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoVid.setDescription('The VLAN ID assigned to a special port')
swL2VlanPortInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("untagged", 2), ("tagged", 3), ("dynamic", 4), ("forbidden", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPortInfoPortRole.setDescription("The port role of a special port. When the role is 'other', it means this port does not belong to the VLAN.")
swL2SubnetVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4), )
if mibBuilder.loadTexts: swL2SubnetVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2SubnetVLANTable.setDescription('A table containing the subnet VLAN information.')
swL2SubnetVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2SubnetVLANIPAddress"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2SubnetVLANIPMask"))
if mibBuilder.loadTexts: swL2SubnetVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2SubnetVLANEntry.setDescription('The entry of subnet VLAN information.')
swL2SubnetVLANIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPAddress.setStatus('current')
if mibBuilder.loadTexts: swL2SubnetVLANIPAddress.setDescription('This object indicates the IP address.')
swL2SubnetVLANIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2SubnetVLANIPMask.setStatus('current')
if mibBuilder.loadTexts: swL2SubnetVLANIPMask.setDescription('This object indicates the IP mask.')
swL2SubnetVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANID.setStatus('current')
if mibBuilder.loadTexts: swL2SubnetVLANID.setDescription('This object indicates the VLAN ID.')
swL2SubnetVLANPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANPriority.setStatus('current')
if mibBuilder.loadTexts: swL2SubnetVLANPriority.setDescription('This object indicates the priority.')
swL2SubnetVLANRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2SubnetVLANRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2SubnetVLANRowStatus.setDescription('This object indicates the status of this entry.')
swL2VlanPrecedenceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5), )
if mibBuilder.loadTexts: swL2VlanPrecedenceTable.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPrecedenceTable.setDescription('A table containing the VLAN classification precedence information of each port.')
swL2VlanPrecedenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2VlanPrecedencePortIndex"))
if mibBuilder.loadTexts: swL2VlanPrecedenceEntry.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPrecedenceEntry.setDescription('The entry of VLAN classification precedence information.')
swL2VlanPrecedencePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2VlanPrecedencePortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPrecedencePortIndex.setDescription('This object indicates the port index.')
swL2VlanPrecedenceClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-based", 1), ("subnet-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2VlanPrecedenceClassification.setStatus('current')
if mibBuilder.loadTexts: swL2VlanPrecedenceClassification.setDescription('This object indicates the VLAN classification precedence.')
swL2NniGvrpBpduAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1d", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setStatus('current')
if mibBuilder.loadTexts: swL2NniGvrpBpduAddress.setDescription("Specifies the GVRP's BPDU MAC address of the NNI port with Q-in-Q status.")
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortInfoPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortInfoMediumType"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortInfoMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoMediumType.setDescription('Indicates the medium type of the port number.')
swL2PortInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoUnitID.setDescription('Indicates the ID of the unit in the system.')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("portType-100Base-TX", 1), ("portType-100Base-FX", 2), ("portType-100Base-FL", 3), ("portType-1000Base-TX", 4), ("portType-1000Base-SX", 5), ("portType-1000Base-LX", 6), ("portType-1000Base-SX-GBIC", 7), ("portType-1000Base-LX-GBIC", 8), ("portType-1000Base-TX-GBIC", 9), ("portType-1000Base-1394", 10), ("portType-1000Base-TX-GBIC-COMBO", 11), ("portType-1000Base-none-GBIC", 12), ("portType-1000Base-SX-MGBIC", 13), ("portType-1000Base-LX-MGBIC", 14), ("portType-1000Base-TX-MGBIC", 15), ("portType-1000Base-none-MGBIC", 16), ("portType-SIO", 17), ("portType-10G", 18), ("portType-10G-xenpak-1310nm", 19), ("portType-10G-xenpak-850nm", 20), ("portType-10G-xenpak-empty", 21), ("portType-10G-xfp-1310nm", 22), ("portType-10G-xfp-850nm", 23), ("portType-10G-xfp-empty", 24), ("portType-none", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoType.setDescription('This object indicates the connector type of this port.')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('This object indicates the port link status.')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("link-down", 0), ("full-10Mbps-8023x", 1), ("full-10Mbps-none", 2), ("half-10Mbps-backp", 3), ("half-10Mbps-none", 4), ("full-100Mbps-8023x", 5), ("full-100Mbps-none", 6), ("half-100Mbps-backp", 7), ("half-100Mbps-none", 8), ("full-1Gigabps-8023x", 9), ("full-1Gigabps-none", 10), ("half-1Gigabps-backp", 11), ("half-1Gigabps-none", 12), ("full-10Gigabps-8023x", 13), ("full-10Gigabps-none", 14), ("half-10Gigabps-8023x", 15), ("half-10Gigabps-none", 16), ("empty", 17), ("err-disabled", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortInfoModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 0), ("moduleType-COMBO", 1), ("moduleType-1394", 2), ("moduleType-1000T", 3), ("moduleType-MGBIC", 4), ("moduleType-1P-SC-SX", 5), ("moduleType-2P-SC-SX", 6), ("moduleType-1P-SC-LX", 7), ("moduleType-2P-SC-LX", 8), ("moduleType-1P-TX", 9), ("moduleType-2P-TX", 10), ("moduleType-1P-MTRJ-SX", 11), ("moduleType-2P-MTRJ-SX", 12), ("moduleType-1P-MTRJ-LX", 13), ("moduleType-2P-MTRJ-LX", 14), ("moduleType-1P-GBIC", 15), ("moduleType-2P-GBIC", 16), ("moduleType-1P-GBIC-1P-TX", 17), ("moduleType-1P-GBIC-1P-STACK", 18), ("moduleType-2P-STACK", 19), ("moduleType-2P-100FX", 20), ("moduleType-1P-100FX", 21), ("moduleType-2P-100FX-NEW", 22), ("moduleType-1P-100FL", 23), ("moduleType-2P-100FL", 24), ("moduleType-2P-100TX", 25), ("moduleType-BaseModule-24PORT", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleType.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoModuleType.setDescription('This object indicates the module type of this port.')
swL2PortInfoErrorDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("storm-control", 1), ("stp-lbd", 2), ("unknow", 3), ("ctp-lbd", 4), ("ddm", 5), ("bpdu-protection", 6), ("power-saving", 7), ("port-security", 8), ("ip-mac-port-binding", 9), ("mac-temperature", 10), ("oam-unidirectional-link", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setStatus('current')
if mibBuilder.loadTexts: swL2PortInfoErrorDisabled.setDescription('This object indicates the blocking type of this port.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCtrlPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCtrlMediumType"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port on the device.')
swL2PortCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCtrlMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMediumType.setDescription('Indicates the medium type of the port number.')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setDescription('Indicates the ID of the unit in the device')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decides if the port is enabled or disabled.')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("nway-disabled-1Gigabps-Full-master", 9), ("nway-disabled-1Gigabps-Full-slave", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Chose the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('The flow control mechanism is different between full duplex mode and half duplex mode. For half duplex mode, the jamming signal is asserted. For full duplex mode, the IEEE 802.3x flow control function sends PAUSE frames and receives PAUSE frames.')
swL2PortCtrlLearningState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlLearningState.setDescription('This object decides if the port is locked or not.')
swL2PortCtrlMACNotifyState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMACNotifyState.setDescription("This object sets each port's MAC notification state.")
swL2PortCtrlMDIXState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("cross", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlMDIXState.setDescription('This object configures the MDIX setting of the port.')
swL2PortCtrlAutoNegRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("norestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setReference('[IEEE802.3], 30.6.1.2.1, acAutoNegRestartAutoConfig.')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegRestart.setDescription('If the value of this object is set to restart(1) then this will force auto-negotiation to begin link renegotiation. If auto-negotiation signaling is disabled, a write to this object has no effect. Setting the value of this object to norestart(2) has no effect.')
swL2PortCtrlAutoNegCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 2, 1, 12), IANAifMauAutoNegCapBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setReference('[IEEE802.3], 30.6.1.1.6, aAutoNegAdvertisedTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlAutoNegCapAdvertisedBits.setDescription('A value that uniquely identifies the set of capabilities advertised by the local auto-negotiation entity. Capabilities in this object that are not available in swL2PortAutoNegInfoCapabilityBits cannot be enabled. Note that the local auto-negotiation entity may advertise some capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortCtrlJumboFrame = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrame.setDescription("This object configures the switch's jumbo frame settings.")
swL2PortCtrlJumboFrameMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setStatus('current')
if mibBuilder.loadTexts: swL2PortCtrlJumboFrameMaxSize.setDescription('This object describes how many bytes the max jumbo frame is.')
swL2PortCableDiagnosisTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5), )
if mibBuilder.loadTexts: swL2PortCableDiagnosisTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisTable.setDescription('A table that contains cable diagnostic information about every port.')
swL2PortCableDiagnosisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCableDiagnosisPortIndex"), (0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCableDiagnosisPairIndex"))
if mibBuilder.loadTexts: swL2PortCableDiagnosisEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisEntry.setDescription('A list with cable diagnostic information for each port of the device.')
swL2PortCableDiagnosisPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCableDiagnosisPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairIndex.setDescription('Indicates the pair index of each port. Pair 1 means pin 3 and 6 of the connector. Pair 2 means pin 1 and 2 of the connector. Pair 3 means pin 7 and 8 of the connector. Pair 4 means pin 4 and 5 of the connector.')
swL2PortCableDiagnosisCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("open-short", 3), ("not-support", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisCableStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisCableStatus.setDescription('This object indicates the cable status.')
swL2PortCableDiagnosisPairStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 0), ("open", 1), ("short", 2), ("fail", 3), ("not-supported", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairStatus.setDescription('This object indicates the status of the pair.')
swL2PortCableDiagnosisPairLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLength.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLength.setDescription('This object indicates the approx. length or length to failure of the pair. The unit value is in meters.')
swL2PortCableDiagnosisPairLengthInaccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLengthInaccuracy.setStatus('current')
if mibBuilder.loadTexts: swL2PortCableDiagnosisPairLengthInaccuracy.setDescription('This object indicates the inaccuracy of a pair length. The unit value is in meters.')
swL2PortCounterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6), )
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlTable.setDescription('A table that is used to clear counter information about every port.')
swL2PortCounterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortCounterCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlEntry.setDescription('A list of entries used to clear the counter information for each port of the device.')
swL2PortCounterCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterCtrlPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortCounterClearCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2PortCounterClearCtrl.setDescription('This object indicates whether to clear the counters for each port of the device or not.')
swL2PortErrTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7), )
if mibBuilder.loadTexts: swL2PortErrTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrTable.setDescription('A table that contains error information for each port.')
swL2PortErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortErrPortIndex"))
if mibBuilder.loadTexts: swL2PortErrEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrEntry.setDescription('A list of information regarding port errors on the device.')
swL2PortErrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module).")
swL2PortErrPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortState.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortState.setDescription('This object indicates if the port state is enabled or disabled.')
swL2PortErrPortConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("err-disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortConnStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortConnStatus.setDescription('This object indicates whether the Port Status is err-disabled or not.')
swL2PortErrPortReason = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 0), ("stp-lbd", 1), ("storm-control", 2), ("ctp-lbd", 4), ("ddm", 5), ("bpdu-protection", 6), ("power-saving", 7), ("port-security", 8), ("ip-mac-port-binding", 9), ("mac-temperature", 10), ("oam-unidirectional-link", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortErrPortReason.setStatus('current')
if mibBuilder.loadTexts: swL2PortErrPortReason.setDescription('This object describes the reason for the port error.')
swL2PortAutoNegInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8), )
if mibBuilder.loadTexts: swL2PortAutoNegInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoTable.setDescription("A table that contains information about every port's auto negotiation status.")
swL2PortAutoNegInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortAutoNegInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortAutoNegInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoEntry.setDescription('A list of information for each port auto negotiation of the device.')
swL2PortAutoNegInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortAutoNegInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setReference('[IEEE802.3], 30.6.1.1.2, aAutoNegAdminState, and 30.6.1.2.2, acAutoNegAdminControl.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoAdminStatus.setDescription(' If the value of this object is disabled(2) then the interface will act as it would if it had no auto-negotiation signaling. The status is affect by setting swL2PortCtrlNwayState.')
swL2PortAutoNegInfoCapabilityBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 3), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setReference('[IEEE802.3], 30.6.1.1.5, aAutoNegLocalTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapabilityBits.setDescription('A value that uniquely identifies the set of capabilities of the local auto-negotiation entity. Note that interfaces that support this MIB may have capabilities that extend beyond the scope of this MIB. Note that the local auto-negotiation entity may support some capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortAutoNegInfoCapAdvertisedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 4), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setReference('[IEEE802.3], 30.6.1.1.6, aAutoNegAdvertisedTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapAdvertisedBits.setDescription('A value that uniquely identifies the set of capabilities advertised by the local auto-negotiation entity. Capabilities in this object that are not available in swL2PortAutoNegCapabilityBits cannot be enabled. Note that the local auto-negotiation entity may advertise some capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortAutoNegInfoCapReceivedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 8, 1, 5), IANAifMauAutoNegCapBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setReference('[IEEE802.3], 30.6.1.1.7, aAutoNegReceivedTechnologyAbility.')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setStatus('current')
if mibBuilder.loadTexts: swL2PortAutoNegInfoCapReceivedBits.setDescription('A value that uniquely identifies the set of capabilities received from the remote auto-negotiation entity. Note that interfaces that support this MIB may be attached to remote auto-negotiation entities that have capabilities beyond the scope of this MIB. This is indicated by returning the bit value bOther in addition to any bit values for standard capabilities that are listed in the IANAifMauAutoNegCapBits TC.')
swL2PortDropCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9), )
if mibBuilder.loadTexts: swL2PortDropCounterTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortDropCounterTable.setDescription('A table that contains received error statistic information for each port.')
swL2PortDropCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortDropCounterPortIndex"))
if mibBuilder.loadTexts: swL2PortDropCounterEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortDropCounterEntry.setDescription('A list of information for each port received drop counter.')
swL2PortDropCounterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortDropCounterPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortDropCounterPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortBufferFullDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortBufferFullDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortBufferFullDrops.setDescription('The total number of packets discarded while input buffer full.')
swL2PortACLDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortACLDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortACLDrops.setDescription('The total number of received packets denied by ACLs.')
swL2PortMulticastDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortMulticastDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortMulticastDrops.setDescription('The total number of received multicast packet that is discarded.')
swL2PortVLANIngressDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortVLANIngressDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortVLANIngressDrops.setDescription('The total number of packets discarded by VLAN ingress checking.')
swL2PortIngressBandwidthControlDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortIngressBandwidthControlDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortIngressBandwidthControlDrops.setDescription('The total number of packets discarded by port ingress bandwidth control.')
swL2PortInvalidIPv6Drops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInvalidIPv6Drops.setStatus('current')
if mibBuilder.loadTexts: swL2PortInvalidIPv6Drops.setDescription('The total number of packets discarded by IPv6 L3')
swL2PortSTPDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSTPDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortSTPDrops.setDescription('The total number of packets discarded when ingress port is not in forwarding state.')
swL2PortStormAndFDBDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStormAndFDBDiscard.setStatus('current')
if mibBuilder.loadTexts: swL2PortStormAndFDBDiscard.setDescription('The total number of packets discarded by receiving policy (i.e. DST_DISCARD, SRC_DISCARD,RATE_CONTROL, etc.)')
swL2PortMTUDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortMTUDrops.setStatus('current')
if mibBuilder.loadTexts: swL2PortMTUDrops.setDescription('The total number of packets discarded by frames received, which exceeds Maximum Frame in length and contains a valid or invalid FCS.')
swL2PortInvalidDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInvalidDestinationPort.setStatus('current')
if mibBuilder.loadTexts: swL2PortInvalidDestinationPort.setDescription('The total number of packets dropped due to port bitmap of zero condition.')
swL2PortJumboFrameCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10), )
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlTable.setDescription("A table that contains information for each port's jumbo frame information.")
swL2PortJumboFrameCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortJumboFrameCtrlPortIndex"))
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlEntry.setDescription("A list of information for each port's jumbo frame of the device.")
swL2PortJumboFrameCtrlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlPortIndex.setDescription("This object indicates the module's port number.")
swL2PortJumboFrameCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlState.setStatus('current')
if mibBuilder.loadTexts: swL2PortJumboFrameCtrlState.setDescription('This object indicates the jumbo frame state on a specified port.')
swL2PortSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11), )
if mibBuilder.loadTexts: swL2PortSfpInfoTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoTable.setDescription('A table that contains information for each sfp pluged in port.')
swL2PortSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortSfpInfoPortIndex"))
if mibBuilder.loadTexts: swL2PortSfpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoEntry.setDescription('A list of information for each sfp pluged in port.')
swL2PortSfpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoPortIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortSfpInfoConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoConnectType.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoConnectType.setDescription('The ConnectType of sfp informaiton.')
swL2PortSfpInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorName.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoVendorName.setDescription('The vendor name of sfp informaiton.')
swL2PortSfpInfoVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorPN.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoVendorPN.setDescription('The vendor PN of sfp informaiton.')
swL2PortSfpInfoVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorSN.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoVendorSN.setDescription('The vendor SN of sfp informaiton.')
swL2PortSfpInfoVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorOUI.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoVendorOUI.setDescription('The vendor OUI of sfp information.')
swL2PortSfpInfoVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoVendorRev.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoVendorRev.setDescription('The vendor Rev of sfp information.')
swL2PortSfpInfoDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoDateCode.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoDateCode.setDescription('The date code of sfp information.')
swL2PortSfpInfoFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoFiberType.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoFiberType.setDescription('The fiber type of sfp information.')
swL2PortSfpInfoBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoBaudRate.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoBaudRate.setDescription('The baud rate of sfp information.')
swL2PortSfpInfoWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortSfpInfoWavelength.setStatus('current')
if mibBuilder.loadTexts: swL2PortSfpInfoWavelength.setDescription('The wavelength of sfp information.')
swL2PortLinkTimeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14), )
if mibBuilder.loadTexts: swL2PortLinkTimeTable.setStatus('current')
if mibBuilder.loadTexts: swL2PortLinkTimeTable.setDescription('A table of information for the link time of the port.')
swL2PortLinkTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2PortLinkTimeIfIndex"))
if mibBuilder.loadTexts: swL2PortLinkTimeEntry.setStatus('current')
if mibBuilder.loadTexts: swL2PortLinkTimeEntry.setDescription('An entry in swL2PortLinkTimeTable contains the link time of the port.')
swL2PortLinkTimeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortLinkTimeIfIndex.setStatus('current')
if mibBuilder.loadTexts: swL2PortLinkTimeIfIndex.setDescription("This object indicates the module's port number.(1..Max port number in the module)")
swL2PortLinkTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 3, 14, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortLinkTimer.setStatus('current')
if mibBuilder.loadTexts: swL2PortLinkTimer.setDescription('The link timer of the port after the port is link up When the value is 0 means the port is link down.')
swL2TrunkMaxSupportedEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMaxSupportedEntries.setDescription('Maximum number of entries in the trunk configuration table (swL2TrunkCtrlTable).')
swL2TrunkCurrentNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCurrentNumEntries.setDescription('Current active number of entries in the trunk configuration table.')
swL2TrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3), )
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlTable.setDescription('This table specifies information about the logical port trunk groups.')
swL2TrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrunkIndex"))
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkCtrlEntry.setDescription('A list of information about each logical port trunk group.')
swL2TrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkIndex.setDescription('The index number of the logical port trunk group. The trunk group number depends on the existence of unit and module.')
swL2TrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkName.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkName.setDescription('The name of the logical port trunk group.')
swL2TrunkMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMasterPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMasterPort.setDescription('This object indicates the master port number of the port trunk entry. When using Port Trunking, you cannot configure the other ports of the group except the master port. Their configuration must be the same as the master port (e.g. speed, duplex, enabled/disabled, flow control, and so on).')
swL2TrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkMember.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkMember.setDescription('Indicates the number of ports included in this Trunk group. The trunk port number depends on the existence of the module. The maximum number of ports is 8 for one trunk group.')
swL2TrunkFloodingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkFloodingPort.setDescription('The object indicates the flooding port number of the port trunk entry. The first port of the Trunk group is implicitly configured to be the flooding port.')
swL2TrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("lacp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkType.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkType.setDescription('This object indicates the type of trunk group. static: is a static trunk group lacp: is a LACP trunk group. ')
swL2TrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2TrunkState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkState.setDescription('This object indicates the status of this entry.')
swL2TrunkAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("mac-source", 2), ("mac-destination", 3), ("mac-source-dest", 4), ("ip-source", 5), ("ip-destination", 6), ("ip-source-dest", 7), ("l4-source-port", 8), ("l4-destination-port", 9), ("l4-source-dest-port", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkAlgorithm.setDescription('This object configures part of the packet examined by the switch when selecting the egress port for transmitting load-sharing data.')
swL2TrunkLACPPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5), )
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortTable.setDescription('This table specifies which ports are grouped together (this can be up to 8 ports) into a single logical link.')
swL2TrunkLACPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrunkLACPPortIndex"))
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortEntry.setDescription('A list of information specifying which ports are grouped together (this can be up to 8 ports) into a single logical link.')
swL2TrunkLACPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortIndex.setDescription('The index of logical port LACP. ')
swL2TrunkLACPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkLACPPortState.setDescription('The state of a logical port LACP.')
swL2TrunkVLANTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6), )
if mibBuilder.loadTexts: swL2TrunkVLANTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANTable.setDescription('This table is used to manage the VLAN trunking feature of the device.')
swL2TrunkVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrunkVLANPort"))
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANEntry.setDescription('This object is used to configure the VLAN trunking settings for each port.')
swL2TrunkVLANPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrunkVLANPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANPort.setDescription('This object indicates the port being configured.')
swL2TrunkVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrunkVLANState.setStatus('current')
if mibBuilder.loadTexts: swL2TrunkVLANState.setDescription('The state of the logical port LACP.')
swL2MirrorLogicTargetPort = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorLogicTargetPort.setDescription('This object indicates which switch port will sniff another port. The port number is the sequential (logical) number, which is also applied to the bridge MIB, etc.')
swL2MirrorPortSourceIngress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceIngress.setDescription('This represents the port where ingress packets will be sniffed.')
swL2MirrorPortSourceEgress = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortSourceEgress.setDescription('This represents the port where egress packets will be sniffed.')
swL2MirrorPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MirrorPortState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorPortState.setDescription('This object indicates the port mirroring state. other (1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled (2) - After writing this value to the object, the corresponding entry will be removed from the table. enabled (3) - This entry resides in the table.')
swL2MirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5), )
if mibBuilder.loadTexts: swL2MirrorGroupTable.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupTable.setDescription('This table specifies information about the mirror group configuration.')
swL2MirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2MirrorGroupID"))
if mibBuilder.loadTexts: swL2MirrorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupEntry.setDescription('A list of information about each mirror group configuration.')
swL2MirrorGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: swL2MirrorGroupID.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupID.setDescription('This object indicates the mirror group. The range of this object is (1..N), the value of N is project dependent.')
swL2MirrorGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupRowStatus.setDescription('This object indicates the status of this entry.')
swL2MirrorGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupState.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupState.setDescription('This object indicates the mirror group state.')
swL2MirrorGroupTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupTargetPort.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupTargetPort.setDescription('This object indicates the mirror group target port.')
swL2MirrorGroupSourceIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupSourceIngress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupSourceIngress.setDescription('This object indicates the mirror group ingress source ports.')
swL2MirrorGroupSourceEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 10, 5, 1, 6), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swL2MirrorGroupSourceEgress.setStatus('current')
if mibBuilder.loadTexts: swL2MirrorGroupSourceEgress.setDescription('This object indicates the mirror group egress source ports.')
swL2IGMPAccessAuthTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13), )
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthTable.setDescription('This table is used to manage the IGMP Access Authentication configurations of the device.')
swL2IGMPAccessAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2IGMPAccessAuthPort"))
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthEntry.setDescription('A list of manageable entities for IGMP Access Authentication. The configuration is done per port.')
swL2IGMPAccessAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthPort.setDescription('The index of the swL2IGMPAccessAuthTable. This object corresponds to the port being configured.')
swL2IGMPAccessAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 11, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("auth_only", 3), ("accounting_only", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setStatus('current')
if mibBuilder.loadTexts: swL2IGMPAccessAuthState.setDescription('This object denotes the status of IGMP Access Authentication of the port. Note: enabled(1): Both the authentication and accounting functions are enabled, after the client is authenticated, the accounting message will be sent to Radius. disabled(2): Both the authentication and accounting functions are disabled. auth_only(3): Only the authentication function is enabled, after the client is authenticated, accounting message will not be sent to Radius. accounting_only(4): Only the accounting function is enabled, authentication is not needed, if the client joins a group, the accounting message will be sent to Radius. ')
swL2TrafficCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1), )
if mibBuilder.loadTexts: swL2TrafficCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlTable.setDescription('This table specifies the storm traffic control configuration.')
swL2TrafficCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrafficCtrlGroupIndex"))
if mibBuilder.loadTexts: swL2TrafficCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlEntry.setDescription('A list of information specific to the storm traffic control configuration.')
swL2TrafficCtrlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlGroupIndex.setDescription('The index of the logical port trunk. The trunk group number depends on the existence of a unit and module.')
swL2TrafficCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficCtrlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlUnitIndex.setDescription('Indicates the ID of the unit in the device')
swL2TrafficCtrlBMStromthreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBMStromthreshold.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlBMStromthreshold.setDescription('This object decides how many thousand broadcast/multicast packets per second (depending on swL2TrafficCtrlBcastStromCtrl, swL2TrafficCtrlMcastStromCtrl or swL2TrafficCtrlDlfStromCtrl objects being enabled) will activate the storm control function. Whenever a port reaches its configured amount of packets in the one second time interval, the device will start dropping that type of packet, until the time interval has expired. Once the time interval has expired, the device will restart forwarding that type of packet.')
swL2TrafficCtrlBcastStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlBcastStromCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlBcastStromCtrl.setDescription('This object indicates if the broadcast storm control function is enabled or disabled.')
swL2TrafficCtrlMcastStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlMcastStromCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlMcastStromCtrl.setDescription('This object indicates if the multicast storm control function is enabled or disabled.')
swL2TrafficCtrlDlfStromCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficCtrlDlfStromCtrl.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficCtrlDlfStromCtrl.setDescription('This object indicates if the destination lookup fail function is enabled or disabled.')
swL2TrafficSegTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1), )
if mibBuilder.loadTexts: swL2TrafficSegTable.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegTable.setDescription('This table specifies that the port can just forward traffic to the specific port list.')
swL2TrafficSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2TrafficSegPort"))
if mibBuilder.loadTexts: swL2TrafficSegEntry.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegEntry.setDescription('A list of information which specifies the port with its traffic forwarding list.')
swL2TrafficSegPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2TrafficSegPort.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegPort.setDescription('The port number of the logical port.')
swL2TrafficSegForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 14, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setStatus('current')
if mibBuilder.loadTexts: swL2TrafficSegForwardPorts.setDescription('The port list where a specific port can forward traffic.')
swL2MulticastFilterModeVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1), )
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanTable.setDescription(' A table that contains information about the VLAN multicast filter mode.')
swL2MulticastFilterModeVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2MulticastFilterVid"))
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModeVlanEntry.setDescription('A list of multicast filter mode information for each VLAN. ')
swL2MulticastFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterVid.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterVid.setDescription('Indicates the VID for each VLAN.')
swL2MulticastFilterVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterVlanMode.setDescription('Specifies the multicast filter mode for each VLAN.')
swL2MulticastFilterModePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2), )
if mibBuilder.loadTexts: swL2MulticastFilterModePortTable.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModePortTable.setDescription(' A table that contains information about the port multicast filter mode.')
swL2MulticastFilterModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2MulticastFilterPortIndex"))
if mibBuilder.loadTexts: swL2MulticastFilterModePortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterModePortEntry.setDescription('A list of multicast filter mode information for each port. ')
swL2MulticastFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2MulticastFilterPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterPortIndex.setDescription('Specifies the port number.')
swL2MulticastFilterPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward-all-groups", 1), ("forward-unregistered-groups", 2), ("filter-unregistered-groups", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2MulticastFilterPortMode.setStatus('current')
if mibBuilder.loadTexts: swL2MulticastFilterPortMode.setDescription('Specifies multicast filter mode for each port.')
swL2LoopDetectCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1))
swL2LoopDetectAdminState = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectAdminState.setDescription('This object indicates the loopback detection status for the system.')
swL2LoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectInterval.setDescription('This object indicates the interval value, the range is from 1 to 32767 seconds.')
swL2LoopDetectRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectRecoverTime.setDescription('This object indicates the recover time, the range is from 60 to 1000000. The value of 0 disables the recover function.')
swL2LoopDetectMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan-based", 1), ("port-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectMode.setDescription('This object indicates the loopback detection mode for the system.')
swL2LoopDetectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop_detected", 2), ("loop_cleared", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectTrapMode.setDescription('This object indicates the loopback detection trap mode for the system.')
swL2LoopDetectPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2))
swL2LoopDetectPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1), )
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortTable.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1), ).setIndexNames((0, "DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortEntry.setDescription('The table specifies the loopback detection function specified by port.')
swL2LoopDetectPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number specified in the module")
swL2LoopDetectPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2LoopDetectPortState.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortState.setDescription('This object indicates the loopback detection function state on the port.')
swL2LoopDetectPortLoopVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopVLAN.setDescription('This object indicates the VLAN list that has detected a loopback.')
swL2LoopDetectPortLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 18, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("loop", 2), ("error", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setStatus('current')
if mibBuilder.loadTexts: swL2LoopDetectPortLoopStatus.setDescription('This object indicates the port status.')
swL2Notify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1))
swL2NotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 1))
swL2NotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2))
swL2NotifFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0))
swL2macNotificationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2macNotificationSeverity.setStatus('current')
if mibBuilder.loadTexts: swL2macNotificationSeverity.setDescription('Indicates the level of macNotification detection.')
swL2PortSecurityViolationSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationSeverity.setDescription('Indicates the level of PortSecurityViolation detection.')
swL2macNotification = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 1)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2macNotifyInfo"))
if mibBuilder.loadTexts: swL2macNotification.setStatus('current')
if mibBuilder.loadTexts: swL2macNotification.setDescription(' This trap indicates the MAC address variations in the address table . ')
swL2PortSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 2)).setObjects(("PORT-SECURITY-MIB", "swPortSecPortIndex"), ("DGS3000-28SC-L2MGMT-MIB", "swL2PortSecurityViolationMac"))
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationTrap.setDescription('When the port_security trap is enabled, new MAC addresses that violate the pre-defined port security configuration will trigger trap messages to be sent out.')
swL2PortLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 3)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopOccurred.setDescription('The trap is sent when a Port loop occurs.')
swL2PortLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 4)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"))
if mibBuilder.loadTexts: swL2PortLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2PortLoopRestart.setDescription('The trap is sent when a Port loop restarts after the interval time.')
swL2VlanLoopOccurred = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 5)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3000-28SC-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopOccurred.setDescription('The trap is sent when a Port with a VID loop occurs.')
swL2VlanLoopRestart = NotificationType((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 0, 6)).setObjects(("DGS3000-28SC-L2MGMT-MIB", "swL2LoopDetectPortIndex"), ("DGS3000-28SC-L2MGMT-MIB", "swL2VlanLoopDetectVID"))
if mibBuilder.loadTexts: swL2VlanLoopRestart.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopRestart.setDescription('The trap is sent when a Port with a VID loop restarts after the interval time.')
swl2NotificationBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1))
swL2macNotifyInfo = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2macNotifyInfo.setStatus('current')
if mibBuilder.loadTexts: swL2macNotifyInfo.setDescription('This object indicates the information for the device MAC address changes. And the detailed information include: Operation Code + MAC address + Box ID + Port Number + Zero... Operation Code: 1, 2 1 means learned a new MAC address 2 means deleted a old MAC address. Box ID: The switch box ID, for standalone device, it always 1. Port Number: The port number learned or deleted for the box. Zero: Used to separate each message(Operate Code + MAC address + Box ID + Port Number).')
swL2PortSecurityViolationMac = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setStatus('current')
if mibBuilder.loadTexts: swL2PortSecurityViolationMac.setDescription('This object indicates the MAC address that violated the port security configuration.')
swL2VlanLoopDetectVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 11, 133, 5, 1, 2, 100, 1, 2, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setStatus('current')
if mibBuilder.loadTexts: swL2VlanLoopDetectVID.setDescription('This object indicates the VID that detected a loopback.')
mibBuilder.exportSymbols("DGS3000-28SC-L2MGMT-MIB", swL2DevMgmt=swL2DevMgmt, swL2PortLoopOccurred=swL2PortLoopOccurred, swL2MirrorMgmt=swL2MirrorMgmt, swL2PortCableDiagnosisPortIndex=swL2PortCableDiagnosisPortIndex, swL2TrunkIndex=swL2TrunkIndex, swL2PortInfoModuleType=swL2PortInfoModuleType, swL2PortCableDiagnosisPairStatus=swL2PortCableDiagnosisPairStatus, swL2TrafficCtrlDlfStromCtrl=swL2TrafficCtrlDlfStromCtrl, swL2DevCtrlCFMPortIndex=swL2DevCtrlCFMPortIndex, swL2PortJumboFrameCtrlPortIndex=swL2PortJumboFrameCtrlPortIndex, swL2PortDropCounterPortIndex=swL2PortDropCounterPortIndex, swL2MACNotifyState=swL2MACNotifyState, swL2TrunkLACPPortIndex=swL2TrunkLACPPortIndex, swL2DevCtrlManagementVlanId=swL2DevCtrlManagementVlanId, swL2VlanPortInfoVid=swL2VlanPortInfoVid, swDevModuleInfoUnitID=swDevModuleInfoUnitID, swL2VlanPrecedencePortIndex=swL2VlanPrecedencePortIndex, swL2NniGvrpBpduAddress=swL2NniGvrpBpduAddress, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, swL2DevCtrlSnmpTrapState=swL2DevCtrlSnmpTrapState, swL2PortLinkTimeTable=swL2PortLinkTimeTable, swL2IGMPAccessAuthPort=swL2IGMPAccessAuthPort, swL2IGMPAccessAuthState=swL2IGMPAccessAuthState, swL2DevCtrlTelnetState=swL2DevCtrlTelnetState, swL2VlanPortInfoPortRole=swL2VlanPortInfoPortRole, swL2SubnetVLANRowStatus=swL2SubnetVLANRowStatus, swL2PortCtrlMediumType=swL2PortCtrlMediumType, swL2PortDropCounterTable=swL2PortDropCounterTable, swL2MulticastFilterModeVlanTable=swL2MulticastFilterModeVlanTable, swL2MgmtMIB=swL2MgmtMIB, swL2TrunkVLANEntry=swL2TrunkVLANEntry, swL2PortCtrlMDIXState=swL2PortCtrlMDIXState, swL2PortCtrlAdminState=swL2PortCtrlAdminState, swL2PortJumboFrameCtrlState=swL2PortJumboFrameCtrlState, swL2IGMPMgmt=swL2IGMPMgmt, swL2PortSfpInfoVendorName=swL2PortSfpInfoVendorName, swL2TrafficCtrlGroupIndex=swL2TrafficCtrlGroupIndex, swL2LoopDetectPortTable=swL2LoopDetectPortTable, swL2PortStormAndFDBDiscard=swL2PortStormAndFDBDiscard, swL2MACNotifyInterval=swL2MACNotifyInterval, swL2PortJumboFrameCtrlEntry=swL2PortJumboFrameCtrlEntry, swL2DevCtrlAsymVlanState=swL2DevCtrlAsymVlanState, swL2PortSfpInfoBaudRate=swL2PortSfpInfoBaudRate, swL2PortAutoNegInfoCapReceivedBits=swL2PortAutoNegInfoCapReceivedBits, swL2MACNotifyHistorySize=swL2MACNotifyHistorySize, swL2macNotificationSeverity=swL2macNotificationSeverity, swDevModuleInfoReversion=swDevModuleInfoReversion, swL2DevAlarm=swL2DevAlarm, swL2TrunkLACPPortTable=swL2TrunkLACPPortTable, swL2VlanPrecedenceEntry=swL2VlanPrecedenceEntry, swL2PortMgmt=swL2PortMgmt, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swL2PortErrEntry=swL2PortErrEntry, swL2LoopDetectAdminState=swL2LoopDetectAdminState, swL2LoopDetectPortIndex=swL2LoopDetectPortIndex, swL2MirrorGroupSourceEgress=swL2MirrorGroupSourceEgress, swL2TrafficSegTable=swL2TrafficSegTable, swL2LoopDetectPortLoopStatus=swL2LoopDetectPortLoopStatus, swL2DevCtrlCFMState=swL2DevCtrlCFMState, swL2TrunkVLANTable=swL2TrunkVLANTable, swL2MirrorLogicTargetPort=swL2MirrorLogicTargetPort, swL2VlanLoopOccurred=swL2VlanLoopOccurred, swL2TrunkVLANPort=swL2TrunkVLANPort, swL2MulticastFilterModePortTable=swL2MulticastFilterModePortTable, swL2VlanPortInfoPortIndex=swL2VlanPortInfoPortIndex, PortList=PortList, swL2DevCtrlRmonState=swL2DevCtrlRmonState, swL2SubnetVLANTable=swL2SubnetVLANTable, swL2PortCableDiagnosisTable=swL2PortCableDiagnosisTable, swL2PortSfpInfoFiberType=swL2PortSfpInfoFiberType, swL2PortIngressBandwidthControlDrops=swL2PortIngressBandwidthControlDrops, swL2DevInfo=swL2DevInfo, swL2LoopDetectRecoverTime=swL2LoopDetectRecoverTime, swDevModuleInfoTable=swDevModuleInfoTable, swL2PortInfoEntry=swL2PortInfoEntry, swL2PortSfpInfoTable=swL2PortSfpInfoTable, swL2PortSfpInfoPortIndex=swL2PortSfpInfoPortIndex, swL2LoopDetectMode=swL2LoopDetectMode, swL2PortSfpInfoEntry=swL2PortSfpInfoEntry, swL2PortInvalidDestinationPort=swL2PortInvalidDestinationPort, swL2DevCtrlCFMPortTable=swL2DevCtrlCFMPortTable, swL2TrafficSegForwardPorts=swL2TrafficSegForwardPorts, swL2PortSfpInfoVendorOUI=swL2PortSfpInfoVendorOUI, swL2MulticastFilterModeVlanEntry=swL2MulticastFilterModeVlanEntry, swL2PortCableDiagnosisPairLengthInaccuracy=swL2PortCableDiagnosisPairLengthInaccuracy, swL2macNotification=swL2macNotification, swL2TrafficCtrlUnitIndex=swL2TrafficCtrlUnitIndex, swL2TrunkMember=swL2TrunkMember, swL2MirrorGroupTargetPort=swL2MirrorGroupTargetPort, swL2VlanPortInfoEntry=swL2VlanPortInfoEntry, swL2PortCableDiagnosisPairLength=swL2PortCableDiagnosisPairLength, swL2TrunkMaxSupportedEntries=swL2TrunkMaxSupportedEntries, swL2LoopDetectInterval=swL2LoopDetectInterval, swL2TrafficCtrlEntry=swL2TrafficCtrlEntry, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swL2DevCtrlIpAutoconfig=swL2DevCtrlIpAutoconfig, swL2TrunkCtrlTable=swL2TrunkCtrlTable, swL2MirrorGroupEntry=swL2MirrorGroupEntry, swL2PortCableDiagnosisPairIndex=swL2PortCableDiagnosisPairIndex, swL2PortSfpInfoWavelength=swL2PortSfpInfoWavelength, swL2DevCtrlLLDPForwardMessageState=swL2DevCtrlLLDPForwardMessageState, swL2PortCtrlMACNotifyState=swL2PortCtrlMACNotifyState, swDevModuleInfoDescription=swDevModuleInfoDescription, swL2PortCounterCtrlTable=swL2PortCounterCtrlTable, swDevModuleInfoModuleName=swDevModuleInfoModuleName, swL2TrunkLACPPortState=swL2TrunkLACPPortState, swL2MirrorGroupState=swL2MirrorGroupState, swL2PortInfoUnitID=swL2PortInfoUnitID, swL2PortErrTable=swL2PortErrTable, swl2NotificationBidings=swl2NotificationBidings, swL2NotifyMgmt=swL2NotifyMgmt, swL2PortSTPDrops=swL2PortSTPDrops, swL2DevCtrlIGMPSnoopingMcstRTOnly=swL2DevCtrlIGMPSnoopingMcstRTOnly, swL2VlanPortInfoTable=swL2VlanPortInfoTable, swL2PortVLANIngressDrops=swL2PortVLANIngressDrops, swL2PortErrPortConnStatus=swL2PortErrPortConnStatus, swL2PortCtrlJumboFrame=swL2PortCtrlJumboFrame, swL2MirrorPortSourceEgress=swL2MirrorPortSourceEgress, swL2VlanPrecedenceTable=swL2VlanPrecedenceTable, swL2DevCtrlTelnetTcpPort=swL2DevCtrlTelnetTcpPort, swL2PVIDAutoAssignmentState=swL2PVIDAutoAssignmentState, swL2TrunkVLANState=swL2TrunkVLANState, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2VlanLoopDetectVID=swL2VlanLoopDetectVID, swL2TrafficSegPort=swL2TrafficSegPort, PYSNMP_MODULE_ID=swL2MgmtMIB, swL2MulticastFilterPortMode=swL2MulticastFilterPortMode, swL2PortSecurityViolationMac=swL2PortSecurityViolationMac, swL2PortAutoNegInfoTable=swL2PortAutoNegInfoTable, swL2PortAutoNegInfoCapabilityBits=swL2PortAutoNegInfoCapabilityBits, swL2MirrorGroupSourceIngress=swL2MirrorGroupSourceIngress, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swL2DevCtrl=swL2DevCtrl, swL2MirrorPortSourceIngress=swL2MirrorPortSourceIngress, swL2TrunkAlgorithm=swL2TrunkAlgorithm, swL2MulticastFilterVlanMode=swL2MulticastFilterVlanMode, swL2PortCtrlPortIndex=swL2PortCtrlPortIndex, swL2DevCtrlCFMMaEntry=swL2DevCtrlCFMMaEntry, swL2LoopDetectMgmt=swL2LoopDetectMgmt, swL2VlanPrecedenceClassification=swL2VlanPrecedenceClassification, swL2SubnetVLANIPAddress=swL2SubnetVLANIPAddress, swL2PortCableDiagnosisEntry=swL2PortCableDiagnosisEntry, swL2LoopDetectCtrl=swL2LoopDetectCtrl, swDevModuleInfoEntry=swDevModuleInfoEntry, swL2LoopDetectPortState=swL2LoopDetectPortState, swL2TrunkCtrlEntry=swL2TrunkCtrlEntry, swL2MirrorGroupID=swL2MirrorGroupID, swL2PortMTUDrops=swL2PortMTUDrops, swL2MulticastFilterMode=swL2MulticastFilterMode, swL2PortErrPortReason=swL2PortErrPortReason, swL2IGMPAccessAuthTable=swL2IGMPAccessAuthTable, swL2PortInfoErrorDisabled=swL2PortInfoErrorDisabled, swL2PortCounterCtrlPortIndex=swL2PortCounterCtrlPortIndex, swL2MulticastFilterPortIndex=swL2MulticastFilterPortIndex, swL2MirrorGroupRowStatus=swL2MirrorGroupRowStatus, swDevInfoNumOfPortInUse=swDevInfoNumOfPortInUse, swL2DevCtrlWebState=swL2DevCtrlWebState, swL2PortCtrlJumboFrameMaxSize=swL2PortCtrlJumboFrameMaxSize, swL2DevAlarmTopologyChange=swL2DevAlarmTopologyChange, swL2PortCounterCtrlEntry=swL2PortCounterCtrlEntry, IANAifMauAutoNegCapBits=IANAifMauAutoNegCapBits, MacAddress=MacAddress, swL2DevCtrlWeb=swL2DevCtrlWeb, swL2DevCtrlStpState=swL2DevCtrlStpState, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, swL2PortAutoNegInfoCapAdvertisedBits=swL2PortAutoNegInfoCapAdvertisedBits, swL2PortLoopRestart=swL2PortLoopRestart, swL2PortInfoMediumType=swL2PortInfoMediumType, swL2VlanStaticEntry=swL2VlanStaticEntry, swL2PortSfpInfoVendorSN=swL2PortSfpInfoVendorSN, swL2PortCableDiagnosisCableStatus=swL2PortCableDiagnosisCableStatus, swL2PortInvalidIPv6Drops=swL2PortInvalidIPv6Drops, swL2TrafficCtrlTable=swL2TrafficCtrlTable, swL2PortJumboFrameCtrlTable=swL2PortJumboFrameCtrlTable, swL2SubnetVLANPriority=swL2SubnetVLANPriority, swL2PortInfoPortIndex=swL2PortInfoPortIndex, swL2PortSecurityViolationSeverity=swL2PortSecurityViolationSeverity, swL2TrafficSegMgmt=swL2TrafficSegMgmt, swL2LoopDetectPortEntry=swL2LoopDetectPortEntry, swL2Notify=swL2Notify, swL2PortCounterClearCtrl=swL2PortCounterClearCtrl, swL2SubnetVLANID=swL2SubnetVLANID, swL2LoopDetectTrapMode=swL2LoopDetectTrapMode, swL2VlanLoopRestart=swL2VlanLoopRestart, swL2DevCtrlCFMMaMode=swL2DevCtrlCFMMaMode, swL2TrafficCtrlBMStromthreshold=swL2TrafficCtrlBMStromthreshold, swL2PortSfpInfoVendorPN=swL2PortSfpInfoVendorPN, swL2PortSfpInfoVendorRev=swL2PortSfpInfoVendorRev, swL2PortBufferFullDrops=swL2PortBufferFullDrops, swL2PortCtrlNwayState=swL2PortCtrlNwayState, swL2LoopDetectPortMgmt=swL2LoopDetectPortMgmt, swL2TrunkMgmt=swL2TrunkMgmt, swL2VLANAdvertisement=swL2VLANAdvertisement, swL2PortLinkTimeEntry=swL2PortLinkTimeEntry, swL2TrunkMasterPort=swL2TrunkMasterPort, swL2PortInfoType=swL2PortInfoType, swL2PortACLDrops=swL2PortACLDrops, swL2MulticastFilterVid=swL2MulticastFilterVid, swL2MgmtMIBTraps=swL2MgmtMIBTraps, swL2DevCtrlVLANTrunkState=swL2DevCtrlVLANTrunkState, swL2DevCtrlCFMPortEntry=swL2DevCtrlCFMPortEntry, swL2PortCtrlAutoNegCapAdvertisedBits=swL2PortCtrlAutoNegCapAdvertisedBits, swL2PortMulticastDrops=swL2PortMulticastDrops, VlanId=VlanId, swL2PortErrPortIndex=swL2PortErrPortIndex, swL2TrunkFloodingPort=swL2TrunkFloodingPort, swL2DevCtrlIpAutoconfigTimeout=swL2DevCtrlIpAutoconfigTimeout, swL2PortAutoNegInfoEntry=swL2PortAutoNegInfoEntry, swL2DevCtrlCFMPortState=swL2DevCtrlCFMPortState, swL2PortCtrlLearningState=swL2PortCtrlLearningState, swL2IGMPAccessAuthEntry=swL2IGMPAccessAuthEntry, swL2DevCtrlIGMPSnooping=swL2DevCtrlIGMPSnooping, swL2DevCtrlCFMMepTable=swL2DevCtrlCFMMepTable, swL2TrafficCtrlBcastStromCtrl=swL2TrafficCtrlBcastStromCtrl, swL2MirrorGroupTable=swL2MirrorGroupTable, swL2PortInfoTable=swL2PortInfoTable, swL2TrunkCurrentNumEntries=swL2TrunkCurrentNumEntries, swL2TrafficMgmt=swL2TrafficMgmt, swL2DevCtrlVlanIdOfFDBTbl=swL2DevCtrlVlanIdOfFDBTbl, swL2DevCtrlTelnet=swL2DevCtrlTelnet, swL2DevCtrlCFM=swL2DevCtrlCFM, swL2DevCtrlCFMMepEntry=swL2DevCtrlCFMMepEntry, swL2PortAutoNegInfoPortIndex=swL2PortAutoNegInfoPortIndex, swL2PortDropCounterEntry=swL2PortDropCounterEntry, swL2DevCtrlLLDPState=swL2DevCtrlLLDPState, swL2PortLinkTimeIfIndex=swL2PortLinkTimeIfIndex, swL2NotifyPrefix=swL2NotifyPrefix, swDevInfoTotalNumOfPort=swDevInfoTotalNumOfPort, swL2VlanIndex=swL2VlanIndex, swL2PortCtrlTable=swL2PortCtrlTable, swL2TrunkName=swL2TrunkName, swL2MirrorPortState=swL2MirrorPortState, swL2VlanStaticTable=swL2VlanStaticTable, swL2PortSfpInfoDateCode=swL2PortSfpInfoDateCode, swL2PortCtrlEntry=swL2PortCtrlEntry, swL2TrafficSegEntry=swL2TrafficSegEntry, swL2LoopDetectPortLoopVLAN=swL2LoopDetectPortLoopVLAN, swL2SubnetVLANIPMask=swL2SubnetVLANIPMask, swL2PortSfpInfoConnectType=swL2PortSfpInfoConnectType, swL2SubnetVLANEntry=swL2SubnetVLANEntry, swL2DevCtrlWebTcpPort=swL2DevCtrlWebTcpPort, swL2VLANMgmt=swL2VLANMgmt, swL2PortErrPortState=swL2PortErrPortState, swL2PortLinkTimer=swL2PortLinkTimer, swL2TrafficCtrlMcastStromCtrl=swL2TrafficCtrlMcastStromCtrl, swL2MulticastFilterModePortEntry=swL2MulticastFilterModePortEntry, swL2PortSecurityViolationTrap=swL2PortSecurityViolationTrap, swL2PortAutoNegInfoAdminStatus=swL2PortAutoNegInfoAdminStatus, swL2PortCtrlAutoNegRestart=swL2PortCtrlAutoNegRestart, swL2macNotifyInfo=swL2macNotifyInfo, swL2DevCtrlCFMMepMode=swL2DevCtrlCFMMepMode, swL2TrunkType=swL2TrunkType, swL2DevCtrlCleanAllStatisticCounter=swL2DevCtrlCleanAllStatisticCounter, swL2TrunkLACPPortEntry=swL2TrunkLACPPortEntry)
mibBuilder.exportSymbols("DGS3000-28SC-L2MGMT-MIB", swL2DevCtrlCFMMaTable=swL2DevCtrlCFMMaTable, swDevModuleInfoSerial=swDevModuleInfoSerial, swL2NotifFirmware=swL2NotifFirmware, swL2TrunkState=swL2TrunkState)
