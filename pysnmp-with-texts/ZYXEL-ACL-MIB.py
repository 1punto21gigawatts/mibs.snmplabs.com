#
# PySNMP MIB module ZYXEL-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
InetAddress, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, MibIdentifier, Counter32, iso, Gauge32, Bits, IpAddress, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "MibIdentifier", "Counter32", "iso", "Gauge32", "Bits", "IpAddress", "ModuleIdentity", "Integer32")
TextualConvention, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "MacAddress", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10))
if mibBuilder.loadTexts: zyxelAcl.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelAcl.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelAcl.setContactInfo('')
if mibBuilder.loadTexts: zyxelAcl.setDescription('The subtree for access control list (ACL)')
zyxelClassifierStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1))
zyxelPolicyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2))
zyxelClassifierTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1), )
if mibBuilder.loadTexts: zyxelClassifierTable.setStatus('current')
if mibBuilder.loadTexts: zyxelClassifierTable.setDescription('The table contains classifier configuration.')
zyxelClassifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1), ).setIndexNames((0, "ZYXEL-ACL-MIB", "zyClassifierName"))
if mibBuilder.loadTexts: zyxelClassifierEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelClassifierEntry.setDescription('An entry contains classifier configuration.')
zyClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyClassifierName.setStatus('current')
if mibBuilder.loadTexts: zyClassifierName.setDescription('The name of classifier rule is used for identifying purposes.')
zyClassifierState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierState.setStatus('current')
if mibBuilder.loadTexts: zyClassifierState.setDescription('Enable/Disable classifier rule on this switch.')
zyClassifierPacketFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("ethernetIIUntagged", 2), ("ethernetIITagged", 3), ("ethernet802dot3Untagged", 4), ("ethernet802dot3Tagged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierPacketFormat.setStatus('current')
if mibBuilder.loadTexts: zyClassifierPacketFormat.setDescription('Packet format for classifier rule. A value of 802.3 indicates that the packets are formatted according to the IEEE 802.3 standards. A value of Ethernet II indicates that the packets are formatted according to RFC 894, Ethernet II encapsulation.')
zyClassifierVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierVid.setStatus('current')
if mibBuilder.loadTexts: zyClassifierVid.setDescription('Source VLAN ID for classifier rule. The range is 1~4094 and value 0 means any VLAN.')
zyClassifier8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifier8021pPriority.setStatus('current')
if mibBuilder.loadTexts: zyClassifier8021pPriority.setDescription('802.1p priority for classifier rule. 0~7. The range is 0~7 and value -1 means any priority level.')
zyClassifierEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierEthernetType.setStatus('current')
if mibBuilder.loadTexts: zyClassifierEthernetType.setDescription('Ethernet type for classifier rule. It is represented in decimal expression and value 65535 means any Ethernet type.')
zyClassifierSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyClassifierSourceMacAddress.setDescription('Source MAC address for classifier rule. 00:00:00:00:00:00 means any source MAC address.')
zyClassifierIncomingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIncomingPort.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIncomingPort.setDescription('Incoming Port for classifier rule. Value 65536 means any port.')
zyClassifierDestinationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierDestinationMacAddress.setStatus('current')
if mibBuilder.loadTexts: zyClassifierDestinationMacAddress.setDescription('Destination MAC address for classifier rule. 00:00:00:00:00:00 means any destination MAC address.')
zyClassifierDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierDSCP.setStatus('current')
if mibBuilder.loadTexts: zyClassifierDSCP.setDescription('DSCP (DiffServ Code Point) for classifier rule. The range is 0~63 and value -1 means any DSCP.')
zyClassifierIpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIpProtocol.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIpProtocol.setDescription('IP Protocol for classifier rule. Value 255 means any IP protocol.')
zyClassifierEstablishOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 12), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierEstablishOnly.setStatus('current')
if mibBuilder.loadTexts: zyClassifierEstablishOnly.setDescription('Establish Only for TCP protocol type in classifier rule. This means that the switch will pick out the packets that are sent to establish TCP connections.')
zyClassifierSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyClassifierSourceIpAddress.setDescription('Source IP address for classifier rule. 0.0.0.0 means any source IP address.')
zyClassifierSourceIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierSourceIpMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyClassifierSourceIpMaskBits.setDescription('Source IP mask bits for classifier rule.')
zyClassifierSourceSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierSourceSocket.setStatus('current')
if mibBuilder.loadTexts: zyClassifierSourceSocket.setDescription('Source socket number for classifier rule. Value 0 means any socket number.')
zyClassifierDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyClassifierDestinationIpAddress.setDescription('Destination IP address for classifier rule. 0.0.0.0 means any destination IP address.')
zyClassifierDestinationIpMaskBits = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierDestinationIpMaskBits.setStatus('current')
if mibBuilder.loadTexts: zyClassifierDestinationIpMaskBits.setDescription('Destination IP mask bits for classifier rule.')
zyClassifierDestinationSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierDestinationSocket.setStatus('current')
if mibBuilder.loadTexts: zyClassifierDestinationSocket.setDescription('Destination socket number for classifier rule. Value 0 means any socket number.')
zyClassifierIPv6DSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIPv6DSCP.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIPv6DSCP.setDescription('DSCP (DiffServ Code Point) for classifier rule. The range is 0~63 and value -1 means any DSCP.')
zyClassifierIPv6NextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIPv6NextHeader.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIPv6NextHeader.setDescription('IPv6 next header protocol type for classifier rule. Value 255 means any protocol type.')
zyClassifierIPv6EstablishOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 21), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIPv6EstablishOnly.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIPv6EstablishOnly.setDescription('Establish Only for TCP protocol type in classifier rule. This means that the switch will pick out the packets that are sent to establish TCP connections.')
zyClassifierIPv6SourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 22), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIPv6SourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIPv6SourceIpAddress.setDescription('IPv6 source address for classifier rule. :: means any IPv6 source ip address.')
zyClassifierIPv6SourceIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIPv6SourceIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIPv6SourceIpPrefixLength.setDescription('IPv6 source address prefix length for classifier rule.')
zyClassifierIPv6DestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 24), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIPv6DestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIPv6DestinationIpAddress.setDescription('IPv6 destination address for classifier rule. :: means any IPv6 destination ip address.')
zyClassifierIPv6DestinationIpPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierIPv6DestinationIpPrefixLength.setStatus('current')
if mibBuilder.loadTexts: zyClassifierIPv6DestinationIpPrefixLength.setDescription('IPv6 destination address prefix length for classifier rule.')
zyClassifierRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 1, 1, 1, 26), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyClassifierRowstatus.setStatus('current')
if mibBuilder.loadTexts: zyClassifierRowstatus.setDescription('This object shows the entry of classifier rule status.')
zyxelPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1), )
if mibBuilder.loadTexts: zyxelPolicyTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPolicyTable.setDescription('The table contains policy configuration.')
zyxelPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1), ).setIndexNames((0, "ZYXEL-ACL-MIB", "zyPolicyName"))
if mibBuilder.loadTexts: zyxelPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPolicyEntry.setDescription('An entry contains policy configuration.')
zyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyPolicyName.setStatus('current')
if mibBuilder.loadTexts: zyPolicyName.setDescription('The name of policy rule is used for identifying purposes.')
zyPolicyState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyState.setStatus('current')
if mibBuilder.loadTexts: zyPolicyState.setDescription('Enable/Disable policy rule on this switch.')
zyPolicyClassifier = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyClassifier.setStatus('current')
if mibBuilder.loadTexts: zyPolicyClassifier.setDescription('The classifier(s) applies in this policy rule.')
zyPolicyVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyVid.setStatus('current')
if mibBuilder.loadTexts: zyPolicyVid.setDescription('VLAN ID for policy rule.')
zyPolicyEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyEgressPort.setStatus('current')
if mibBuilder.loadTexts: zyPolicyEgressPort.setDescription('The outgoing port number in this policy rule.')
zyPolicy8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicy8021pPriority.setStatus('current')
if mibBuilder.loadTexts: zyPolicy8021pPriority.setDescription('Specify a 802.1p priority level for policy rule. The value of 802.1p is between 0 and 7.')
zyPolicyDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyDSCP.setStatus('current')
if mibBuilder.loadTexts: zyPolicyDSCP.setDescription('Specify a DSCP (DiffServ Code Point) for policy rule. DSCP number is between 0 and 63.')
zyPolicyTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyTOS.setStatus('current')
if mibBuilder.loadTexts: zyPolicyTOS.setDescription('Specify the type of service (TOS) priority level for policy rule. The value of TOS is between 0 and 7.')
zyPolicyBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyBandwidth.setStatus('current')
if mibBuilder.loadTexts: zyPolicyBandwidth.setDescription('Specify the bandwidth for policy rule in kilobit per second (Kbps).')
zyPolicyOutOfProfileDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyOutOfProfileDSCP.setStatus('current')
if mibBuilder.loadTexts: zyPolicyOutOfProfileDSCP.setDescription('Specify a new DSCP number (between 0 and 63) for policy rule if you want to replace or remark the DSCP number for out-of-profile traffic.')
zyPolicyForwardingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noChange", 1), ("discardThePacket", 2), ("doNotDropTheMatchingFramePreviouslyMarkedForDropping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyForwardingAction.setStatus('current')
if mibBuilder.loadTexts: zyPolicyForwardingAction.setDescription("There are three forwarding actions for policy rule. 'No change' is forward the packets. 'Discard the packet' is drop the packets. 'Do not drop the matching frame previously marked for dropping' is retain the frames that were marked to be dropped before.")
zyPolicyPriorityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noChange", 1), ("setThePackets802dot1Priority", 2), ("sendThePacketToPriorityQueue", 3), ("replaceThe802dot1PriorityFieldWithTheIpTosValue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyPriorityAction.setStatus('current')
if mibBuilder.loadTexts: zyPolicyPriorityAction.setDescription("There are four priority actions for policy rule. 'No change' is keep the priority setting of the frames. 'Set the packet's 802.1 priority' is replace the packet's 802.1 priority field with the value you set in the Priority field. 'Send the packet to priority queue' is put the packets in the designated queue. 'Replace the 802.1 priority field with the IP TOS value' to replace the packet's 802.1 priority field with the value you set in the TOS field.")
zyPolicyDiffServAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noChange", 1), ("setThePacketsTosField", 2), ("replaceTheIpTosFieldWithThe802dot1PriorityValue", 3), ("setTheDiffservCodepointFieldInTheFrame", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyDiffServAction.setStatus('current')
if mibBuilder.loadTexts: zyPolicyDiffServAction.setDescription("There are four DiffServ actions for policy rule. 'No change' is keeping the TOS and/or DSCP fields in the packets. 'Set the packet's TOS field' is set the TOS field with the value you configure in the TOS field. 'Replace the IP TOS with the 802.1 priority value' is replace the TOS field with the value you configure in the Priority field. 'Set the Diffserv Codepoint field in the frame' to set the DSCP field with the value you configure in the DSCP field.")
zyPolicyOutgoingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 14), Bits().clone(namedValues=NamedValues(("sendThePacketToTheMirrorPort", 0), ("sendThePacketToTheEgressPort", 1), ("sendTheMatchingFramesToTheEgressPort", 2), ("setThePacketVlanId", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyOutgoingAction.setStatus('current')
if mibBuilder.loadTexts: zyPolicyOutgoingAction.setDescription("There are four outgoing actions for policy rule. 'Send the packet to the mirror port' is sent the packet to the mirror port. 'Send the packet to the egress port' is sent the packet to the egress port. 'Send the matching frames to the egress port' is sent the matching policy rule frames to the egress port. 'Set the packets VLAN ID' is set packet with tag.")
zyPolicyMeteringState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyMeteringState.setStatus('current')
if mibBuilder.loadTexts: zyPolicyMeteringState.setDescription('Enable/Disable bandwidth limitation on the traffic flow(s) then set the actions to be taken on out-of-profile packets.')
zyPolicyOutOfProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 16), Bits().clone(namedValues=NamedValues(("dropThePacket", 0), ("changeTheDscpValue", 1), ("setOutDropPrecedence", 2), ("doNotDropTheMatchingFramePreviouslyMarkedForDropping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyOutOfProfileAction.setStatus('current')
if mibBuilder.loadTexts: zyPolicyOutOfProfileAction.setDescription("There are four out of profile actions for policy rule. 'Drop the packet' is discard the out-of-profile traffic. 'Change the DSCP value' is replace the DSCP field with the value specified in the Out of profile DSCP field. 'Set Out-Drop Precedence' is mark out-of-profile traffic and drop it when network is congested. 'Do not drop the matching frame previously marked for dropping' to queue the frames that are marked to be dropped.")
zyPolicyRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 10, 2, 1, 1, 17), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPolicyRowstatus.setStatus('current')
if mibBuilder.loadTexts: zyPolicyRowstatus.setDescription('This object shows the entry of policy rule status.')
mibBuilder.exportSymbols("ZYXEL-ACL-MIB", zyClassifierSourceIpMaskBits=zyClassifierSourceIpMaskBits, zyPolicyName=zyPolicyName, PYSNMP_MODULE_ID=zyxelAcl, zyxelClassifierTable=zyxelClassifierTable, zyClassifierSourceMacAddress=zyClassifierSourceMacAddress, zyxelPolicyEntry=zyxelPolicyEntry, zyPolicyDSCP=zyPolicyDSCP, zyPolicyMeteringState=zyPolicyMeteringState, zyClassifierSourceSocket=zyClassifierSourceSocket, zyxelPolicyTable=zyxelPolicyTable, zyClassifierDestinationIpMaskBits=zyClassifierDestinationIpMaskBits, zyClassifierIPv6SourceIpAddress=zyClassifierIPv6SourceIpAddress, zyClassifierEstablishOnly=zyClassifierEstablishOnly, zyPolicyEgressPort=zyPolicyEgressPort, zyxelPolicyStatus=zyxelPolicyStatus, zyClassifierSourceIpAddress=zyClassifierSourceIpAddress, zyClassifierIPv6SourceIpPrefixLength=zyClassifierIPv6SourceIpPrefixLength, zyClassifierName=zyClassifierName, zyClassifierDestinationIpAddress=zyClassifierDestinationIpAddress, zyClassifierDSCP=zyClassifierDSCP, zyClassifierIPv6DSCP=zyClassifierIPv6DSCP, zyClassifierIPv6NextHeader=zyClassifierIPv6NextHeader, zyClassifierIPv6DestinationIpAddress=zyClassifierIPv6DestinationIpAddress, zyClassifierVid=zyClassifierVid, zyClassifierRowstatus=zyClassifierRowstatus, zyPolicyBandwidth=zyPolicyBandwidth, zyPolicyOutOfProfileDSCP=zyPolicyOutOfProfileDSCP, zyClassifierDestinationSocket=zyClassifierDestinationSocket, zyxelClassifierStatus=zyxelClassifierStatus, zyPolicyOutgoingAction=zyPolicyOutgoingAction, zyPolicyClassifier=zyPolicyClassifier, zyxelClassifierEntry=zyxelClassifierEntry, zyPolicyRowstatus=zyPolicyRowstatus, zyPolicyPriorityAction=zyPolicyPriorityAction, zyPolicyOutOfProfileAction=zyPolicyOutOfProfileAction, zyClassifierIPv6DestinationIpPrefixLength=zyClassifierIPv6DestinationIpPrefixLength, zyClassifierDestinationMacAddress=zyClassifierDestinationMacAddress, zyPolicy8021pPriority=zyPolicy8021pPriority, zyClassifierState=zyClassifierState, zyPolicyState=zyPolicyState, zyPolicyForwardingAction=zyPolicyForwardingAction, zyPolicyVid=zyPolicyVid, zyPolicyDiffServAction=zyPolicyDiffServAction, zyxelAcl=zyxelAcl, zyClassifierIpProtocol=zyClassifierIpProtocol, zyClassifierEthernetType=zyClassifierEthernetType, zyClassifierIPv6EstablishOnly=zyClassifierIPv6EstablishOnly, zyClassifier8021pPriority=zyClassifier8021pPriority, zyClassifierPacketFormat=zyClassifierPacketFormat, zyClassifierIncomingPort=zyClassifierIncomingPort, zyPolicyTOS=zyPolicyTOS)
