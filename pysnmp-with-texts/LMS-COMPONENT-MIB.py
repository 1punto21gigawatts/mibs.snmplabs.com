#
# PySNMP MIB module LMS-COMPONENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LMS-COMPONENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:08:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, enterprises, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Bits, MibIdentifier, ObjectIdentity, ModuleIdentity, Unsigned32, NotificationType, TimeTicks, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "enterprises", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Bits", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "NotificationType", "TimeTicks", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
lotus = MibIdentifier((1, 3, 6, 1, 4, 1, 334))
notes = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 1))
lcs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 2))
softswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3))
common_mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 1)).setLabel("common-mibs")
lms = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2))
class TimeInterval(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class UInteger32(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

lmsComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1))
lmsSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1))
lmsSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 2))
lmsMsgStore = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 3))
lmsTransports = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4))
lmsIPC = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5))
lmsDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6))
lmsSwitchID = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchID.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchID.setDescription('The Lotus supplied Identifier, uniquely identifying this switch.')
lmsSwitchName = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchName.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchName.setDescription('A brief descriptive name or nickname for this switch.')
lmsSwitchVersion = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchVersion.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchVersion.setDescription('The version, including patch level, of this switch.')
lmsSwitchUpTime = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchUpTime.setDescription('The value of sysUpTime at the time this switch began execution.')
lmsSwitchOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("stopped", 2), ("starting", 3), ("shutdown", 4), ("configurable", 5), ("running", 6), ("stopping", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchOperStatus.setDescription('The current operational state of the switch.')
lmsSwitchLastChange = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsSwitchLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchLastChange.setDescription('The value of sysUpTime at the time this switch entered its current operational state. If the current state was entered prior to the last initialization of the local network management subsystem then this object contains a zero value.')
lmsSwitchDesiredOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stopped", 1), ("shutdown", 2), ("configurable", 3), ("running", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchDesiredOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchDesiredOperStatus.setDescription('The desired operational state for this switch.')
lmsSwitchDescr = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchDescr.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchDescr.setDescription('A textual description for the switch. This may contain any pertinent details for the local or remote administrators.')
lmsSwitchContact = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmsSwitchContact.setStatus('mandatory')
if mibBuilder.loadTexts: lmsSwitchContact.setDescription('The textual information of the contact person for this switch, together with information on how to contact that person.')
lmsMsgStoreDatabaseUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsMsgStoreDatabaseUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: lmsMsgStoreDatabaseUtilization.setDescription('The current utilization of the relational database portion of the message store, expressed as a percentage.')
lmsMsgStoreFileSystemUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmsMsgStoreFileSystemUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: lmsMsgStoreFileSystemUtilization.setDescription('The current utilization of the native file system portion of the message store, expressed as a percentage.')
snaState = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaState.setStatus('mandatory')
if mibBuilder.loadTexts: snaState.setDescription('Indicates the operational status of the SNA transport subsystem. The values are: up - transport is operation and available down - transport is not available halted - transport is operational but not available congested - transport is operationallly overloaded (optional) restarting - transport is unavailable, but will be soon quiescing - transport is unavailable, shutdown in progress unknown - transport status is unknown or cannot be determined')
osiState = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osiState.setStatus('mandatory')
if mibBuilder.loadTexts: osiState.setDescription('Indicates the operational status of the OSI transport subsystem. The values are the same as those for snaState and tcpIpState.')
tcpIpState = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpIpState.setStatus('mandatory')
if mibBuilder.loadTexts: tcpIpState.setDescription('Indicates the operational status of the TCP/IP transport subsystem. The values are the same as those for snaState and osiState.')
transportLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 4, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transportLastUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: transportLastUpdate.setDescription('The value of sysUpTime at the time the latest transport information was gathered.')
ipcOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("halted", 3), ("congested", 4), ("restarting", 5), ("quiescing", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipcOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipcOperStatus.setDescription('Indicates the operational state of the IPC subsystem (XIPC).')
semaphoreMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 2), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreMaxUsers.setStatus('mandatory')
if mibBuilder.loadTexts: semaphoreMaxUsers.setDescription('The configured maximum number of users of the semaphore subsystem.')
semaphoreCurrUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreCurrUsers.setStatus('mandatory')
if mibBuilder.loadTexts: semaphoreCurrUsers.setDescription('The current number of users of the semaphore subsystem.')
semaphoreMaxSemaphores = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 4), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreMaxSemaphores.setStatus('mandatory')
if mibBuilder.loadTexts: semaphoreMaxSemaphores.setDescription('The configured maximum number of semaphores in the semaphore subsystem.')
semaphoreCurrSemaphores = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreCurrSemaphores.setStatus('mandatory')
if mibBuilder.loadTexts: semaphoreCurrSemaphores.setDescription('The current number of semaphores in use in the semaphore subsystem.')
semaphoreMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 6), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreMaxNodes.setStatus('mandatory')
if mibBuilder.loadTexts: semaphoreMaxNodes.setDescription('The configured maximum number of nodes in the semaphore subsystem.')
semaphoreCurrNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: semaphoreCurrNodes.setStatus('mandatory')
if mibBuilder.loadTexts: semaphoreCurrNodes.setDescription('The current number of nodes in use in the semaphore subsystem.')
sharedmemMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 8), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxUsers.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemMaxUsers.setDescription('The configured maximum number of users of the shared memory subsystem.')
sharedmemCurrUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrUsers.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemCurrUsers.setDescription('The current number of users of the shared memory subsystem.')
sharedmemMaxSeqments = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 10), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxSeqments.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemMaxSeqments.setDescription('The configured maximum number of seqments in the shared memory subsystem.')
sharedmemCurrSegments = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrSegments.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemCurrSegments.setDescription('The current number of segments in use by the shared memory subsystem.')
sharedmemMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 12), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemMaxNodes.setDescription('The configured maximum number of nodes in the shared memory subsystem.')
sharedmemCurrNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrNodes.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemCurrNodes.setDescription('The current number of nodes in use by the shared memory subsystem.')
sharedmemMaxMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 14), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemMaxMempool.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemMaxMempool.setDescription('The configured maximum size of the mempool allowed for use by the shared memory subsystem')
sharedmemCurrMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sharedmemCurrMempool.setStatus('mandatory')
if mibBuilder.loadTexts: sharedmemCurrMempool.setDescription('The current size of the mempool in use by the shared memory subsystem.')
msgqueueMaxUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 16), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxUsers.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueMaxUsers.setDescription('The configured maximum number of users of the message queue subsystem.')
msgqueueCurrUsers = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrUsers.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueCurrUsers.setDescription('The current number of users of the message queue subsystem.')
msgqueueMaxQueues = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 18), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxQueues.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueMaxQueues.setDescription('The configured maximum number of message queues to be used by the message queue subsystem.')
msgqueueCurrQueues = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrQueues.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueCurrQueues.setDescription('The current number of message queues in use by the message queue subsystem.')
msgqueueMaxNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 20), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxNodes.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueMaxNodes.setDescription('The configured maximum number of nodes in the message queue subsystem.')
msgqueueCurrNodes = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrNodes.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueCurrNodes.setDescription('The current number of nodes in use by the message queue subsystem.')
msgqueueMaxMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 22), UInteger32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueMaxMempool.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueMaxMempool.setDescription('The configured maximum size of the mempool allowed for use by the message queue subsystem.')
msgqueueCurrMempool = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 5, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msgqueueCurrMempool.setStatus('mandatory')
if mibBuilder.loadTexts: msgqueueCurrMempool.setDescription('The current size of the mempool in use by the message queue subsystem.')
dbConfigSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbConfigSpaceUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: dbConfigSpaceUtilization.setDescription('This is a percentage between 0 and 100 inclusive, representing the current utilization of config table space in the database.')
dbNameSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbNameSpaceUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: dbNameSpaceUtilization.setDescription('This is a percentage between 0 and 100 inclusive, representing the current utilization of names table space in the database.')
dbDistribSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbDistribSpaceUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: dbDistribSpaceUtilization.setDescription('This is a percentage between 0 and 100 inclusive, representing the current utilization of distrib table space in the database.')
dbSystemSpaceUtilization = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSystemSpaceUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: dbSystemSpaceUtilization.setDescription('This is a percentage between 0 and 100 inclusive, representing the current utilization of system table space in the database.')
dbLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 334, 3, 2, 1, 6, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbLastUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: dbLastUpdate.setDescription('The value of sysUpTime at the time the latest database information was gathered.')
mibBuilder.exportSymbols("LMS-COMPONENT-MIB", sharedmemMaxMempool=sharedmemMaxMempool, msgqueueMaxUsers=msgqueueMaxUsers, lmsSwitchDescr=lmsSwitchDescr, lmsMsgStoreDatabaseUtilization=lmsMsgStoreDatabaseUtilization, semaphoreCurrUsers=semaphoreCurrUsers, msgqueueCurrNodes=msgqueueCurrNodes, ipcOperStatus=ipcOperStatus, lmsSwitchName=lmsSwitchName, lms=lms, lmsComponent=lmsComponent, lotus=lotus, msgqueueCurrQueues=msgqueueCurrQueues, lmsSwitchVersion=lmsSwitchVersion, lcs=lcs, lmsMsgStore=lmsMsgStore, semaphoreMaxSemaphores=semaphoreMaxSemaphores, sharedmemMaxNodes=sharedmemMaxNodes, sharedmemMaxSeqments=sharedmemMaxSeqments, lmsSystem=lmsSystem, lmsDatabase=lmsDatabase, common_mibs=common_mibs, TimeInterval=TimeInterval, notes=notes, osiState=osiState, sharedmemMaxUsers=sharedmemMaxUsers, UInteger32=UInteger32, msgqueueCurrUsers=msgqueueCurrUsers, dbConfigSpaceUtilization=dbConfigSpaceUtilization, lmsIPC=lmsIPC, sharedmemCurrUsers=sharedmemCurrUsers, lmsSwitchUpTime=lmsSwitchUpTime, sharedmemCurrSegments=sharedmemCurrSegments, msgqueueCurrMempool=msgqueueCurrMempool, semaphoreMaxNodes=semaphoreMaxNodes, dbDistribSpaceUtilization=dbDistribSpaceUtilization, dbSystemSpaceUtilization=dbSystemSpaceUtilization, lmsSwitch=lmsSwitch, sharedmemCurrNodes=sharedmemCurrNodes, snaState=snaState, tcpIpState=tcpIpState, transportLastUpdate=transportLastUpdate, lmsSwitchID=lmsSwitchID, msgqueueMaxNodes=msgqueueMaxNodes, softswitch=softswitch, lmsSwitchLastChange=lmsSwitchLastChange, semaphoreCurrSemaphores=semaphoreCurrSemaphores, sharedmemCurrMempool=sharedmemCurrMempool, semaphoreCurrNodes=semaphoreCurrNodes, semaphoreMaxUsers=semaphoreMaxUsers, msgqueueMaxMempool=msgqueueMaxMempool, dbNameSpaceUtilization=dbNameSpaceUtilization, lmsSwitchDesiredOperStatus=lmsSwitchDesiredOperStatus, lmsMsgStoreFileSystemUtilization=lmsMsgStoreFileSystemUtilization, lmsTransports=lmsTransports, lmsSwitchOperStatus=lmsSwitchOperStatus, msgqueueMaxQueues=msgqueueMaxQueues, lmsSwitchContact=lmsSwitchContact, dbLastUpdate=dbLastUpdate)
