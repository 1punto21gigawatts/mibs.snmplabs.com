#
# PySNMP MIB module EMPIRE-ORAMOD (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EMPIRE-ORAMOD
# Produced by pysmi-0.3.4 at Wed May  1 13:02:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Integer32, NotificationType, enterprises, TimeTicks, ObjectIdentity, iso, Gauge32, Bits, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Integer32", "NotificationType", "enterprises", "TimeTicks", "ObjectIdentity", "iso", "Gauge32", "Bits", "NotificationType", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
empire = MibIdentifier((1, 3, 6, 1, 4, 1, 546))
applications = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16))
oracledb = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4))
oramodTtlFootprt = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 12))
oramodCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 10))
oramodDbCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1))
oramodCfgDf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2))
oramodCfgLf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3))
oramodCfgSga = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4))
oramodPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11))
oramodFootprint = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1))
oramodMetrics = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2))
oramodSGA = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3))
oramodRedoLogBuf = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4))
oramodRollBack = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5))
oramodWaits = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6))
oramodExpSql = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7))
oramodTblsp = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8))
oramodLocks = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9))
oramodBackups = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10))
oramodArchive = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11))
oramodFootprt = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1))
oramodFFootprt = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2))
oramodSgaDddAgg = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1))
oramodSgaDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2))
oramodLock = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1))
oramodLatch = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2))
oramodBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1))
oramodArcDest = MibIdentifier((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1))
oraModVersion = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraModVersion.setStatus('mandatory')
if mibBuilder.loadTexts: oraModVersion.setDescription('Description and version number of this installation.')
oraModMode = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullMode", 1), ("restrictedMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraModMode.setStatus('mandatory')
if mibBuilder.loadTexts: oraModMode.setDescription('This object indicates if the Oracle Module is in full-mode or restricted-mode. Restricted-mode is entered, when SystemEDGE 4.0 and higher, fails to find a valid license. Once a valid license has been allocated and set, the module will then transition to fullMode(1)')
oraFlag = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraFlag.setStatus('mandatory')
if mibBuilder.loadTexts: oraFlag.setDescription('Performance flags for this installation.')
oramodTtlCPUTIME = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlCPUTIME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlCPUTIME.setDescription('CPU time, in seconds, accumulated by Oracle which includes all its core components and instance. Because core components can come and go, the accumulated cpu time can fluctuate therefore making this variable unsuitable as a counter.')
oramodTtlPERCENTCPU = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlPERCENTCPU.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlPERCENTCPU.setDescription("The percentage of CPU utilization, by Oracle, over the last sample interval. Since fractions are not supported by SNMP, the value reported is the percentage multipled by 100. It is the sum of the CPU utilization of all the Oracle core services and components. Its gives a good indication of the CPU resource consumption by the entire Oracle application'")
oramodTtlMEMSIZE = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlMEMSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlMEMSIZE.setDescription("The combined size of Oracle's text, data, and stack segments in KBytes. It is the summation of the process sizes for all the core Oracle services and optional connectors.")
oramodTtlRSS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlRSS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlRSS.setDescription('The real memory (resident set) size of Oracle in KBytes. It is the summation of the process RSS for all the core Oracle services and optional connectors.')
oramodTtlPERCENTMEM = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlPERCENTMEM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlPERCENTMEM.setDescription('The percentage (0-100) of real memory used by the Oracle Application which includes core services and optional connectors.')
oramodTtlTHREADS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlTHREADS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlTHREADS.setDescription('The total number of threads operating within the respective Oracle components as seen by the operating system. Monitoring the number of threads can help with performance tuning resource contention issues that may be brought about by too many threads or can help identify if too few threads have too great of a workload.')
oramodTtlINBLKS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlINBLKS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlINBLKS.setDescription(' The number of blocks of data input by the processes.')
oramodTtlOUTBLKS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlOUTBLKS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlOUTBLKS.setDescription(' The number of blocks of data put by the processes.')
oramodTtlMSGSSENT = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlMSGSSENT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlMSGSSENT.setDescription(' The number of messages sent by the processes.')
oramodTtlMSGSRCVD = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlMSGSRCVD.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlMSGSRCVD.setDescription(' The number of messages received by the processes.')
oramodTtlSYSCALLS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlSYSCALLS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlSYSCALLS.setDescription(' The number of system calls invoked by the processes.')
oramodTtlMINORPGFLTS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlMINORPGFLTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlMINORPGFLTS.setDescription(' The number of minor page faults incurred by the process. Minor faults do not require I/O to retrieve the page.')
oramodTtlMAJORPGFLTS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlMAJORPGFLTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlMAJORPGFLTS.setDescription(' The number of major page faults incurred by the process. Minor faults require I/O to retrieve the page.')
oramodTtlNUMSWAPS = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlNUMSWAPS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlNUMSWAPS.setDescription(' The number of times the processes have been swapped.')
oramodTtlVOLCNTX = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlVOLCNTX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlVOLCNTX.setDescription(' The number of voluntary context switches incurred by the processes. Voluntary contest switches occur when the processor voluntary gives up the CPU (e.g. waiting on I/O).')
oramodTtlINVOLCNTX = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlINVOLCNTX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlINVOLCNTX.setDescription('The number of involuntary context switches incurred by the processes. An involuntary context switch occurs when the process has executed for the duration of its time quantum and is switched out by the process scheduler.')
oramodTtlDISKSIZE = MibScalar((1, 3, 6, 1, 4, 1, 546, 16, 4, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTtlDISKSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTtlDISKSIZE.setDescription('The size, in KBytes of the Oracle root directory and all the Database Disk storage areas.')
oramodDbCfgTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1), )
if mibBuilder.loadTexts: oramodDbCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgTable.setDescription('This table describes the instance names, index numbers and initial startup information.')
oramodDbCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodDbCfgSIDINDX"))
if mibBuilder.loadTexts: oramodDbCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgEntry.setDescription('An entry in the Oracle Configuration table.')
oramodDbCfgSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgSIDINDX.setDescription("Sid's Index Number.")
oramodDbCfgSID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgSID.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgSID.setDescription('Database Name.')
oramodDbCfgVERSION = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgVERSION.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgVERSION.setDescription('Description and version of this Oracle installation from v$version')
oramodDbCfgHOME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgHOME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgHOME.setDescription('The Installation Directory for Oracle or ORACLEHOME.')
oramodDbCfgBASE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgBASE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgBASE.setDescription('The Base Directory for Oracle or ORACLEBASE.')
oramodDbCfgID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgID.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgID.setDescription('The database ID calculated when the database is created and stored in all file headers (521382036).')
oramodDbCfgCRTDT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgCRTDT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgCRTDT.setDescription('The original creation date and time of the database.')
oramodDbCfgLOGMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgLOGMODE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgLOGMODE.setDescription('The Archive log mode: NOARCHIVELOG or ARCHIVELOG.')
oramodDbCfgCTRLFILETYPE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgCTRLFILETYPE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgCTRLFILETYPE.setDescription('Control File Type. Can be the following types : CURRENT,STANDBY,CLONE,BACKUP,CREATED.')
oramodDbCfgOPENMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgOPENMODE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgOPENMODE.setDescription('Shows whether the database is set to READ WRITE or READ ONLY (NEW TO 8i.).')
oramodDbCfgMAXPROCESS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgMAXPROCESS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgMAXPROCESS.setDescription('For a multiple-process operation, this parameter specifies the maximum number of user processes that can simultaneously connect to an Oracle server. The PROCESSES parameter is used to derive the SESSIONS INIT.ORA parameter. The default is 50. Typical range 6 - OS/dependent')
oramodDbCfgMAXSESSION = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgMAXSESSION.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgMAXSESSION.setDescription('Maximum number of User and System Sessions.')
oramodDbCfgTIMEDSTATISTICS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgTIMEDSTATISTICS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgTIMEDSTATISTICS.setDescription('TRUE/FALSE: sets timing on. Should be false for maximum performance.')
oramodDbCfgCPUCNT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgCPUCNT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgCPUCNT.setDescription("The maximum number of CPU's for this instance.")
oramodDbCfgSHAREDPOOLSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgSHAREDPOOLSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgSHAREDPOOLSIZE.setDescription('Shared Pool Size Size in Kbytes. Controls the size of the memory area used for parsing and executing SQL statements. The default is 3.5 Mbytes. Typical Range 300 Kbytes. It is O/S dependent. ')
oramodDbCfgSHAREDPOOLRSSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgSHAREDPOOLRSSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgSHAREDPOOLRSSIZE.setDescription('Shared Pool Reserved Size Kbytes.')
oramodDbCfgLARGEPOOLSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgLARGEPOOLSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgLARGEPOOLSIZE.setDescription('Large Pool Reserved Size Kbytes.')
oramodDbCfgJAVAPOOLSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgJAVAPOOLSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgJAVAPOOLSIZE.setDescription('Java Pool Size in Kbytes Default is (20000K) ')
oramodDbCfgCNTRLFILES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgCNTRLFILES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgCNTRLFILES.setDescription('Name and path of control files. String of file names.')
oramodDbCfgDBBLKBUFF = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgDBBLKBUFF.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgDBBLKBUFF.setDescription('Number of Database Block Buffers in blocks. Controls how much memory is available in the buffer cache for data blocks. Default is (26240)')
oramodDbCfgDBBLKSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgDBBLKSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgDBBLKSIZE.setDescription('Size of Database Blocks. O/S dependent')
oramodDbCfgCKPTINTRVL = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgCKPTINTRVL.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgCKPTINTRVL.setDescription('Redo Log Checkpoint Interval.')
oramodDbCfgDBFILES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgDBFILES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgDBFILES.setDescription('Maximum Number of Database Files.')
oramodDbCfgSORTAREASIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgSORTAREASIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgSORTAREASIZE.setDescription('Maximum Sort Area Size. Controls the amount of memory allocated to each process in the Process Global Area for any sorting activity (for multithreaded server this is allocated in the shared pool). When a process needs more memory than is available for a sort, disk space must be allocated in the temporary tablespace. Tuning is based on the transaction mix of the application. The default (O/S dependent) is adequate for most DB operations. ')
oramodDbCfgOPENCURSORS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgOPENCURSORS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgOPENCURSORS.setDescription('Maximum open cursors a single-user process can have at once. Typical Range (1 - 2147483647).')
oramodDbCfgTRNSACTNS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgTRNSACTNS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgTRNSACTNS.setDescription('Maximum number of concurrent transactions allowed at one time.')
oramodDbCfgTRNSACTNSPERSEG = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgTRNSACTNSPERSEG.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgTRNSACTNSPERSEG.setDescription('Maximum number of concurrent transactions per segment. Default is 30. O/S dependent.')
oramodDbCfgMAXROLLSEG = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodDbCfgMAXROLLSEG.setStatus('mandatory')
if mibBuilder.loadTexts: oramodDbCfgMAXROLLSEG.setDescription('Maximum number of rollback segments.')
oramodCfgDfTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1), )
if mibBuilder.loadTexts: oramodCfgDfTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfTable.setDescription('This table describes the database files for the database.')
oramodCfgDfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodCfgDfSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodCfgDfFILENUM"))
if mibBuilder.loadTexts: oramodCfgDfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfEntry.setDescription('An entry in the Oracle v$datafile table.')
oramodCfgDfSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfSIDINDX.setDescription('Sid Index Number.')
oramodCfgDfFILENUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfFILENUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfFILENUM.setDescription('File Identification Number.')
oramodCfgDfSTATUS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfSTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfSTATUS.setDescription('Type of file (system or user) and its status. Values: OFFLINE, ONLINE, SYSTEM, RECOVER, SYSOFF(an offline file from the SYSTEM tablespace).')
oramodCfgDfENABLED = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfENABLED.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfENABLED.setDescription('Describes how accessible the file is from SQL. Can be DISABLED, READ ONLY, READ WRITE and UNKNOWN.')
oramodCfgDfUNRCVRBLECHG = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfUNRCVRBLECHG.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfUNRCVRBLECHG.setDescription('The last unrecoverbale change number made to this datafile. Always updated when an unrecoverable operation completes.')
oramodCfgDfUNRCVRBLETIME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfUNRCVRBLETIME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfUNRCVRBLETIME.setDescription('The last unrecoverbale change time made to this datafile. Always updated when an unrecoverable operation completes.')
oramodCfgDfKBYTES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfKBYTES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfKBYTES.setDescription('Current size in kbytes; 0 if unaccessible.')
oramodCfgDfCRTKBYTES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfCRTKBYTES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfCRTKBYTES.setDescription('Size when created.')
oramodCfgDfFNAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfFNAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfFNAME.setDescription('Name of the file.')
oramodCfgDfCRTTIME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfCRTTIME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfCRTTIME.setDescription('Time at which the datafile was created.')
oramodCfgDfTBLESPACENUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfTBLESPACENUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfTBLESPACENUM.setDescription('Tablespace Number.')
oramodCfgDfTBLESPACERFILENUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfTBLESPACERFILENUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfTBLESPACERFILENUM.setDescription('Tablespace Relative Df Number.')
oramodCfgDfBLOCKS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfBLOCKS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfBLOCKS.setDescription('Current datafile size in blocks; 0 if inaccessible.')
oramodCfgDfBLOCKSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfBLOCKSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfBLOCKSIZE.setDescription('Block size of the datafile.')
oramodCfgDfERROR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfERROR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfERROR.setDescription('NULL if the header read success. If error must restore.')
oramodCfgDfRECOVER = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfRECOVER.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfRECOVER.setDescription('YES/NO File needs media recovery.')
oramodCfgDfRSTLOGSCHGNUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfRSTLOGSCHGNUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfRSTLOGSCHGNUM.setDescription('Reset Logs change number.')
oramodCfgDfRSTLOGSTIME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgDfRSTLOGSTIME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgDfRSTLOGSTIME.setDescription('Reset Logs timestamp.')
oramodCfgLfTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3, 1), )
if mibBuilder.loadTexts: oramodCfgLfTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgLfTable.setDescription('This table describes the redo log files locations for each Oracle installation from v$logfile.')
oramodCfgLfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodCfgLfSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodCfgLfMEMBERINDX"))
if mibBuilder.loadTexts: oramodCfgLfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgLfEntry.setDescription('An entry in the Oracle Logfile table.')
oramodCfgLfSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgLfSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgLfSIDINDX.setDescription('Sid Index Number.')
oramodCfgLfMEMBERINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147482647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgLfMEMBERINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgLfMEMBERINDX.setDescription('Logfile member index.')
oramodCfgLfGROUPNUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147482647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgLfGROUPNUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgLfGROUPNUM.setDescription('Group Number.')
oramodCfgLfSTATUS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgLfSTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgLfSTATUS.setDescription('Status of File.')
oramodCfgLfMEMBER = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgLfMEMBER.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgLfMEMBER.setDescription('File name and path.')
oramodCfgSgaTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1), )
if mibBuilder.loadTexts: oramodCfgSgaTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaTable.setDescription('This table summarizes the system global area.')
oramodCfgSgaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodCfgSgaSIDINDX"))
if mibBuilder.loadTexts: oramodCfgSgaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaEntry.setDescription('An entry in the Oracle Sga table.')
oramodCfgSgaSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgSgaSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaSIDINDX.setDescription('Sid Index Number.')
oramodCfgSgaTOTALMEMALLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147482647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgSgaTOTALMEMALLOC.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaTOTALMEMALLOC.setDescription('Total real memory allocated. Summation of values in v$sga.')
oramodCfgSgaFIXEDSGA = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgSgaFIXEDSGA.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaFIXEDSGA.setDescription('Fixed memory allocated in Kbytes')
oramodCfgSgaVARIABLE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgSgaVARIABLE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaVARIABLE.setDescription('Variable Memory allocated in the SGA')
oramodCfgSgaDBBUFF = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgSgaDBBUFF.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaDBBUFF.setDescription('Database buffers allocated in Kbytes. Typical Range is 4 Kbytes - 2 Gbytes. ')
oramodCfgSgaREDOBUFF = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 10, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodCfgSgaREDOBUFF.setStatus('mandatory')
if mibBuilder.loadTexts: oramodCfgSgaREDOBUFF.setDescription('Redo Buffers allocated in Kbytes')
oramodFootprtTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1), )
if mibBuilder.loadTexts: oramodFootprtTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtTable.setDescription('This table describes the system footprint.')
oramodFootprtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodFootprtSIDINDX"))
if mibBuilder.loadTexts: oramodFootprtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtEntry.setDescription('An entry in the Oracle Footprint table.')
oramodFootprtSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtSIDINDX.setDescription("Empire's Index Number.")
oramodFootprtCPUTIME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtCPUTIME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtCPUTIME.setDescription('CPU time, in seconds, accumulated by Oracle which includes all its core components and instance. Because core components can come and go, the accumulated cpu time can fluctuate therefore making this variable unsuitable as a counter.')
oramodFootprtPERCENTCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtPERCENTCPU.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtPERCENTCPU.setDescription("The percentage of CPU utilization, by Oracle, over the last sample interval. Since fractions are not supported by SNMP, the value reported is the percentage multipled by 100. It is the sum of the CPU utilization of all the Oracle core services and components. Its gives a good indication of the CPU resource consumption by the entire Oracle application'")
oramodFootprtMEMSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtMEMSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtMEMSIZE.setDescription("The combined size of Oracle's text, data, and stack segments in KBytes. It is the summation of the process sizes for all the core Oracle services and optional connectors.")
oramodFootprtRSS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtRSS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtRSS.setDescription('The real memory (resident set) size of Oracle in KBytes. It is the summation of the process RSS for all the core Oracle services and optional connectors.')
oramodFootprtPERCENTMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtPERCENTMEM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtPERCENTMEM.setDescription('The percentage (0-100) of real memory used by the Oracle Application which includes core services and optional connectors.')
oramodFootprtTHREADS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtTHREADS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtTHREADS.setDescription('The total number of threads operating within the respective Oracle components as seen by the operating system. Monitoring the number of threads can help with performance tuning resource contention issues that may be brought about by too many threads or can help identify if too few threads have too great of a workload.')
oramodFootprtINBLKS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtINBLKS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtINBLKS.setDescription(' The number of blocks of data input by the processes.')
oramodFootprtOUTBLKS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtOUTBLKS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtOUTBLKS.setDescription(' The number of blocks of data put by the processes.')
oramodFootprtMSGSSENT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtMSGSSENT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtMSGSSENT.setDescription(' The number of messages sent by the processes.')
oramodFootprtMSGSRCVD = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtMSGSRCVD.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtMSGSRCVD.setDescription(' The number of messages received by the processes.')
oramodFootprtSYSCALLS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtSYSCALLS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtSYSCALLS.setDescription(' The number of system calls invoked by the processes.')
oramodFootprtMINORPGFLTS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtMINORPGFLTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtMINORPGFLTS.setDescription(' The number of minor page faults incurred by the process. Minor faults do not require I/O to retrieve the page.')
oramodFootprtMAJORPGFLTS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtMAJORPGFLTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtMAJORPGFLTS.setDescription(' The number of major page faults incurred by the process. Minor faults require I/O to retrieve the page.')
oramodFootprtNUMSWAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtNUMSWAPS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtNUMSWAPS.setDescription(' The number of times the processes have been swapped.')
oramodFootprtVOLCNTX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtVOLCNTX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtVOLCNTX.setDescription(' The number of voluntary context switches incurred by the processes. Voluntary contest switches occur when the processor voluntary gives up the CPU (e.g. waiting on I/O).')
oramodFootprtINVOLCNTX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtINVOLCNTX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtINVOLCNTX.setDescription('The number of involuntary context switches incurred by the processes. An involuntary context switch occurs when the process has executed for the duration of its time quantum and is switched out by the process scheduler.')
oramodFootprtHOMESIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtHOMESIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtHOMESIZE.setDescription('The size, in KBytes of the Oracle root directory and all files beneath it.')
oramodFootprtDBDISKSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtDBDISKSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtDBDISKSIZE.setDescription('The size, in KBytes, of all the Oracle Database disk storage areas. It is a summation of all database files. Summing these components in one location presents an easy and convenient MIB object to poll and self-monitor.')
oramodFootprtLASTUPDATE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 1, 1, 1, 20), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFootprtLASTUPDATE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFootprtLASTUPDATE.setDescription('The time (based on sysUpTime) that the last update of all variables in the table was completed.')
oramodFFootprtTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1), )
if mibBuilder.loadTexts: oramodFFootprtTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtTable.setDescription('This table describes the system footprint.')
oramodFFootprtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodFFootprtSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodFFootprtFILEINDX"))
if mibBuilder.loadTexts: oramodFFootprtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtEntry.setDescription('An entry in the Oracle File Footprint table.')
oramodFFootprtSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtSIDINDX.setDescription('Sid Index Number.')
oramodFFootprtFILEINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtFILEINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtFILEINDX.setDescription('File Index Number.')
oramodFFootprtFILETYPE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtFILETYPE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtFILETYPE.setDescription('File Type.')
oramodFFootprtFILENAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtFILENAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtFILENAME.setDescription('File Name. ')
oramodFFootprtCRTTS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtCRTTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtCRTTS.setDescription('Last update timestamp.')
oramodFFootprtCRTKBYTES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtCRTKBYTES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtCRTKBYTES.setDescription('File creation kbytes.')
oramodFFootprtKBYTES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtKBYTES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtKBYTES.setDescription('File kbytes.')
oramodFFootprtBLOCKS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtBLOCKS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtBLOCKS.setDescription('File blocks.')
oramodFFootprtSTATUS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtSTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtSTATUS.setDescription('File Status.')
oramodFFootprtRECOVER = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtRECOVER.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtRECOVER.setDescription('Last Recover timestamp.')
oramodFFootprtAVGIOTIM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodFFootprtAVGIOTIM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodFFootprtAVGIOTIM.setDescription('File average I/O time.')
oramodMetricsTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1), )
if mibBuilder.loadTexts: oramodMetricsTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsTable.setDescription('This table describes the database metrics.')
oramodMetricsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodMetricsSIDINDX"))
if mibBuilder.loadTexts: oramodMetricsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsEntry.setDescription('An entry in the Metrics table.')
oramodMetricsSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSIDINDX.setDescription('Sid Index Number.')
oramodMetricsBCPT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsBCPT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsBCPT.setDescription('Block Changes Per Transaction scaled by 100. This ratio measures the amount of DML work that each transaction performs. Creating or dropping indexes impact this value, because changes to index blocks increment it.')
oramodMetricsBGR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsBGR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsBGR.setDescription('Block Get Rate Per Second scaled by 100. This ratio determines the block get rate per second. It is a basic measurement of the rate at which the application systems reference the database. ')
oramodMetricsBVPT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsBVPT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsBVPT.setDescription('Block Vists Per Transaction scaled by 100. This ratio measures the work database load imposed per transaction. It is a basic measurement of the application workload. If it is moving independently, then this strongly indicates that there has been a change in the application workload.')
oramodMetricsCHR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCHR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCHR.setDescription('Cache Hit Ratio scaled by 100. Measures the effectiveness of the hits against the buffer cache. Whenever Oracle reads data from disk, it places that data into the buffer cache. Data is aged out of the buffer cache using a least recently used algorithm. Oracle looks in the buffer cache first for data requests. If the data is not there, Oracle searches the disk based data files that comprise the database. On most production systems, Oracle should not have to resort to disk reads more than 20% of the time. So, if the buffer cache hit ratio is less than 80%, you should consider increasing the database buffer cache in the System Global Area. This can be done by increasing the value for DBBLOCKBUFFER in the initialization parameter file.')
oramodMetricsCR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCR.setDescription('Call Rate over time. The number of user and recursive calls over time. This ratio measures the work demand rate being placed on the instance from all work sources.')
oramodMetricsCPT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCPT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCPT.setDescription('Calls Per Transaction scaled by 100. The number of database requests per committed transaction. Can be used to detect changes in the application, or in the way in which it is normally used. Ad hoc queries will cause this value to sharply increase. ')
oramodMetricsCBR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCBR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCBR.setDescription('Changed Blocks scaled by 100. Measures the balance between queris and data manipulation language (DML) within the database applications. Can be used to detect changes in application usage or indexes.')
oramodMetricsCCR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCCR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCCR.setDescription('Consistent Change Ratio scaled by 100. The ratio of database consistent changes and consistent gets. It measures the extent to which applications are having to exercise the read consistency mechanism. Update and delete operations are subject to read consistency. ')
oramodMetricsCRR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCRR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCRR.setDescription('Continued Row Ratio scaled by 100. Measures the space useage of data blocks. Should be close to zero, except in applications handling long LONG columns. If this ratio increases over time, usually PCTFREE has been set too low on one or more tables.')
oramodMetricsLCM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsLCM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsLCM.setDescription('Library Cache Miss Ratio scaled by 100. The ratio of missed requests and reloads to access library cached objects since instance startup. The library cache is a memory structure containing shared SQL and PL/SQL areas. Monitoring the library cache is important to determine whether or not to resize the shared pool. If this ratio increases over time, then resource useage can be expected to increase. A rising library cache miss ratio may be due to wider use of application functionality causing more SQL statements and stored procedures to be active that had been previously.')
oramodMetricsRTUC = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsRTUC.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsRTUC.setDescription('Recursive To User Call Ratio scaled by 100. The ratio of recursive and user or application calls. A change in this ratio can reflect an application change or the need to adjust the size of the shared pool.')
oramodMetricsRLSW = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsRLSW.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsRLSW.setDescription('Redo Log Space Wait Ratio scaled by 100. It shows the rate at which failures are occuring in writing to the redo log space and is used to measure memory allocation. If this ratio is greater than 1/5,000, the the redo log buffer should be increased until the redo log space wait ratio stops failing. ')
oramodMetricsRSR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsRSR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsRSR.setDescription('Row Source Ratio scaled by 100. It shows the percentage of total rows retrieved which came from full table scans. If this percentage start to rise above zero, the interpretation of other statistics may need to be reviewed.')
oramodMetricsSOR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSOR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSOR.setDescription('Sort Overflow Ratio scaled by 100. Indicates the number of sorts which are using temporary segments. Under restrictive circumstances when there is a predominance of medium sorts, increasing the sort area size may be effective. ')
oramodMetricsTRR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsTRR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsTRR.setDescription('Transaction Rate Ratio scaled by 100. The rate at which users or applications are committing transactions. If a fall in this value is associated with a rise in the number of connected users or vice versa, an administrator should be concerned. Changes in application structure or work patterns can also distort this figure.')
oramodMetricsUCR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsUCR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsUCR.setDescription('User Call Rate Ratio scaled by 100. The rate at which client users or applications are requesting sql statements. Measures the work demand rate being posed by client side applications running under the instance. May not be directly comparable across application system version changes where code has been moved from client to server or vice versa.')
oramodMetricsUCPP = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsUCPP.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsUCPP.setDescription('User Calls Per Parse Ratio scaled by 100. The ratio of user calls to parse in the shared SQL area. Indicates how well the application is managing its context area. If it changes, then application change is the most likely explanation, but it may indicate the useage patterns are changing and users are moving from one module to another either more frequently or less frequently. Although the shared SQL area makes the maximizing of this ratio less important than with earlier versions of Oracle, it is still possible to reduce resource usage by raising this ratio. ')
oramodMetricsURR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsURR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsURR.setDescription('User Rollback Ratio scaled by 100. The ratio of user or application transaction rollbacks. Indicates the rate at which application transactions are failing. Rolling back a transaction uses significant resources, and would seem to indicate that all of the resources expended in executing the transaction have been wasted. ')
oramodMetricsSGALCE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSGALCE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSGALCE.setDescription('Library Cache Efficiency Percentage scaled by 100. The percentage that a SQL statement did not need to be reloaded because it was already in the library cache. This percentage should be 100. If not, try resizing the SHAREDPOOLSIZE in the initialization file.')
oramodMetricsSGADDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSGADDCE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSGADDCE.setDescription('Data Dictionary Cache Efficiency Percentage scaled by 100. Shows the ratio of gets to misses within the shared pool. The ratio should be less than 0.1. Various database operations cause the RDBMS to access its system tables. These system tables are stored in the Oracle data dictionary. The objects in the data dictionary are stored in the system tablespace. When the RDBMS needs access to its system tables, the tables are read into the data dictionary cache. Resizing the shared pool can affect this ratio. ')
oramodMetricsDBTOTALRW = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBTOTALRW.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBTOTALRW.setDescription('The total number of physical reads and physical writes since instance startup. See individual descriptions below.')
oramodMetricsDBBLKCHG = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBBLKCHG.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBBLKCHG.setDescription('The total number of database block changes. It is incremented each time that a database block is in memory to create a dirty block. This statistic is a rough indication of total database work. Increments at several thousand per second in the largest systems, so this variable is definitely a wraparound candidate.')
oramodMetricsDBBLKGET = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBBLKGET.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBBLKGET.setDescription("The total number of database block gets since instance startup. It is incremented each time the buffer manager is asked for a database block in current mode, regardless of read consistency. This mode is used to locate blocks which are to be updated, and also to access control information such as segment headers. Only if the requested block is not found in Oracle's Buffer cache will a db block get result in physical I/O. ")
oramodMetricsDBCNSTGET = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBCNSTGET.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBCNSTGET.setDescription("The total number of consistent gets since instance startup. This value is incremented each time that the Oracle Buffer Manager is requested to locate a database block as part of a read consistent operation (a query). Only if the requested block is not found in Oracle's Buffer Cache will consistent get result in physical I/O. Increments at several thousand per second in the largest systems, so this variable is definitely a wraparound candidate.")
oramodMetricsDBPHYSREAD = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBPHYSREAD.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBPHYSREAD.setDescription('The total number of physical reads since instance startup. It increments each time a DB Block is retrieved from the disk subsystem, but is not necessarily equal to the number of I/O requests made to the host operating system, as multiblock I/O may be used. A physical read can be viewed as an SGA Buffer Cache miss, hampering throughput (contention induction) and CPU (code pathlength) processing. Unlikely to increment at a rate greater than a few hundred per second.')
oramodMetricsDBSORTDISK = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBSORTDISK.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBSORTDISK.setDescription('The total number of database disk sorts since instance startup. It increments for each sort which has to allocate disk work space. Should be zero.')
oramodMetricsDBSORTMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBSORTMEM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBSORTMEM.setDescription('The total number of database memory sorts since instance startup. It is incremented for each sort which does not require the allocation of work. Unlikely to increment faster than tens per second, except in the largest systems.')
oramodMetricsBLKFREEWAIT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsBLKFREEWAIT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsBLKFREEWAIT.setDescription("The percent that a request resulted in a wait for a free block. Should be less than 1%. To reduce contention for a table's free list the table must be recreated with a larger value in the FREELISTS storage parameter.")
oramodMetricsMTHRDQUEUEWAIT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsMTHRDQUEUEWAIT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsMTHRDQUEUEWAIT.setDescription('The number of seconds waited in queue for multi-threaded servers.')
oramodMetricsSESSHIWTRMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSESSHIWTRMEM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSESSHIWTRMEM.setDescription('The maximum highwater amount of session memory used.')
oramodMetricsSESSCURRMEM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSESSCURRMEM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSESSCURRMEM.setDescription('The current maximum amount of session memory used.')
oramodMetricsSESSHIWTR = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSESSHIWTR.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSESSHIWTR.setDescription('The highwater mark for number of sessions.')
oramodMetricsSESSCURRENT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSESSCURRENT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSESSCURRENT.setDescription('The current number of sessions.')
oramodMetricsUSERCOMMITS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsUSERCOMMITS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsUSERCOMMITS.setDescription('Records the number of database transactions successfully completed and records the number of aborted database transactions. In most real world applications, the value is less the 1 per second.')
oramodMetricsUSERROLLBACK = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsUSERROLLBACK.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsUSERROLLBACK.setDescription('The number of transactions rolled back since instance startup.')
oramodMetricsUSERCALLS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsUSERCALLS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsUSERCALLS.setDescription('The number of transactions started since instance startup.')
oramodMetricsDBPHYSWRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDBPHYSWRTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDBPHYSWRTS.setDescription('The total number of physical writes since instance startup. It increments each time a DB Block is written to the disk. All writes are performed either by DBWR or LGWR, two background processes responsible for getting Blocks out of the SGA and back on disk.')
oramodMetricsTBLSCANROWS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsTBLSCANROWS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsTBLSCANROWS.setDescription('The number of rows retrieved through table scans since instance startup.')
oramodMetricsTBLFTCHROWID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsTBLFTCHROWID.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsTBLFTCHROWID.setDescription('The number of rows retrieved through table fetches by rowid since instance startup.')
oramodMetricsTBLFTCHCROW = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsTBLFTCHCROW.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsTBLFTCHCROW.setDescription('The number of rows retrieved through table fetches by continued row since instance startup.')
oramodMetricsRECRSVCALLS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsRECRSVCALLS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsRECRSVCALLS.setDescription('The number of recursive calls since instance startup.')
oramodMetricsCNSTCHGS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCNSTCHGS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCNSTCHGS.setDescription('The number of consistent changes since instance startup.')
oramodMetricsPARSECNT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsPARSECNT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsPARSECNT.setDescription('The number of parses since instance startup.')
oramodMetricsCPUTM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsCPUTM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsCPUTM.setDescription('The amount of time taken to work requests.')
oramodMetricsLOGFILESWTCH = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsLOGFILESWTCH.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsLOGFILESWTCH.setDescription('The number of redo log file switches.')
oramodMetricsARCHIVER = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsARCHIVER.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsARCHIVER.setDescription('The database archiver.')
oramodMetricsDATABASESTATUS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsDATABASESTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsDATABASESTATUS.setDescription('The status of the database.')
oramodMetricsSHUTDOWNPENDING = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsSHUTDOWNPENDING.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsSHUTDOWNPENDING.setDescription('The shutdown status of the database.')
oramodMetricsLASTUPDATE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 2, 1, 1, 50), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodMetricsLASTUPDATE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodMetricsLASTUPDATE.setDescription('The time (based on sysUpTime) that the last update of all variables in the table was completed.')
oramodSgaDddAggTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1), )
if mibBuilder.loadTexts: oramodSgaDddAggTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSgaDddAggTable.setDescription('This table describes the data dictionary aggregates.')
oramodSgaDddAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodSGAAGGSIDINDX"))
if mibBuilder.loadTexts: oramodSgaDddAggEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSgaDddAggEntry.setDescription('An entry in the Data Dictionary Aggregate table.')
oramodSGAAGGSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGSIDINDX.setDescription('Sid Index Number.')
oramodSGAAGGCNT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGCNT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGCNT.setDescription('Total number of entries in the data dictionary cache since instance startup.')
oramodSGAAGGUSGE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGUSGE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGUSGE.setDescription('The total number of cache entries with valid data since instance startup.')
oramodSGAAGGFIX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGFIX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGFIX.setDescription('The total number of fixed entries in the data dictionary cache since instance startup.')
oramodSGAAGGGET = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGGET.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGGET.setDescription('The total number of information requests since instance startup.')
oramodSGAAGGGETMISS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGGETMISS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGGETMISS.setDescription('The total number of informations requests resulting in cache misses since instance startup.')
oramodSGAAGGSCAN = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGSCAN.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGSCAN.setDescription('The total number of scan requests since instance startup.')
oramodSGAAGGSCANMISS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGSCANMISS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGSCANMISS.setDescription('The total number of scan requests resulting in misses since instance startup.')
oramodSGAAGGSCANCPLT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGSCANCPLT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGSCANCPLT.setDescription('For subordinate entries, the total number of times list was scanned completely since instance startup.')
oramodSGAAGGMODS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGMODS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGMODS.setDescription('The total number of inserts, updates, and deletions since instance startup.')
oramodSGAAGGFLUSH = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGAAGGFLUSH.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGAAGGFLUSH.setDescription('The total number of times flushed to disk since instance startup.')
oramodSgaDlciTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1), )
if mibBuilder.loadTexts: oramodSgaDlciTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSgaDlciTable.setDescription('This table describes the detailed library cache information.')
oramodSgaDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodSGADLCISIDINDX"), (0, "EMPIRE-ORAMOD", "oramodSGADLCIINDX"))
if mibBuilder.loadTexts: oramodSgaDlciEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSgaDlciEntry.setDescription('An entry in the Library Cache table.')
oramodSGADLCISIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCISIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCISIDINDX.setDescription('Sid Index Number.')
oramodSGADLCIINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIINDX.setDescription('Namespace Index Number.')
oramodSGADLCINAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCINAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCINAME.setDescription('Library Cache Namespace. (SQL AREA, TABLE/PROCEDURE, BODY, TRIGGER, INDEX, CLUSTER, OBJECT, PIPE)')
oramodSGADLCIGET = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIGET.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIGET.setDescription('The total number of request handles to library namespace since instance startup Typical range (0..500,00).')
oramodSGADLCIGETHIT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIGETHIT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIGETHIT.setDescription('The total number of times handles are already allocated in the cache. If the handle is not already allocated it is a miss.')
oramodSGADLCIGETHITRT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIGETHITRT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIGETHITRT.setDescription('The Get/Hit ratio determines the percentage of parse calls that find a cursor to share. The value is derived from GETHITS divided by GETS. Should be in the high 90s which indicates that most of the handles the system has tried to get are cached.')
oramodSGADLCIPIN = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIPIN.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIPIN.setDescription('The total number of pin requests for objects in the cache since instance startup.')
oramodSGADLCIPINHIT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIPINHIT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIPINHIT.setDescription('The number of pin hits or executions of objects that are already allocated and initiated in the cache. Otherwise, it is a miss, and the system has to reallocate and initialize it with data queried from the database or generate the data.')
oramodSGADLCIPINHITRT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIPINHITRT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIPINHITRT.setDescription('The ratio of PINHITS to PINS. Values close to 100 indicate that most of the objects the system has tried to pin and access have been cached.')
oramodSGADLCIRELOAD = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIRELOAD.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIRELOAD.setDescription('Number of times a statement had to be reparsed in order to be executed. Statements are reloaded due to aging or invalidation. Should never be more that one percent of PINS. Goal is the have close to zero reloads.')
oramodSGADLCIINVALID = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodSGADLCIINVALID.setStatus('mandatory')
if mibBuilder.loadTexts: oramodSGADLCIINVALID.setDescription('The number of times that non-persistant library objects (like SQL areas) have been invalidated.')
oramodRedoLogBufTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1), )
if mibBuilder.loadTexts: oramodRedoLogBufTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRedoLogBufTable.setDescription('This table describes the Redo Log information.')
oramodRedoLogBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodREDOSIDINDX"))
if mibBuilder.loadTexts: oramodRedoLogBufEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRedoLogBufEntry.setDescription('An entry in the Redo Log table.')
oramodREDOSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOSIDINDX.setDescription('Sid Index Number.')
oramodREDOBLKWRT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOBLKWRT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOBLKWRT.setDescription('The total number of redo blocks written since instance startup.')
oramodREDOENTRIES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOENTRIES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOENTRIES.setDescription('The total number of redo entries in the redo log since instance startup.')
oramodREDOSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOSIZE.setDescription('The size of the redo log.')
oramodREDOSPACERQST = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOSPACERQST.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOSPACERQST.setDescription('The number of redo log space requests. Should be close to zero. A nonzero value means the the buffer may be too small. Increase the size of the buffer so that processes are not waiting. The INIT.ora parameter LOGBUFFER controls the size of the redo log buffer.')
oramodREDOSPACEWAIT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOSPACEWAIT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOSPACEWAIT.setDescription('The total number of redo log space wait time since instance startup')
oramodREDOSYNCHWRT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOSYNCHWRT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOSYNCHWRT.setDescription('The total number of redo synch writes since instance startup.')
oramodREDOSYNCHTM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOSYNCHTM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOSYNCHTM.setDescription('The amount of redo log synch time.')
oramodREDOWASTAGE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOWASTAGE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOWASTAGE.setDescription('The total amount of redo log wastage.')
oramodREDORETRIES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDORETRIES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDORETRIES.setDescription('The total number of redo retries.')
oramodREDOLASTUPDATE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 4, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodREDOLASTUPDATE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodREDOLASTUPDATE.setDescription('The time (based on sysUpTime) that the last update of all variables in the table was completed.')
oramodRollBackTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1), )
if mibBuilder.loadTexts: oramodRollBackTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackTable.setDescription('This table describes any rollback segments.')
oramodRollBackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodRollBackSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodRollBackSEGINDX"))
if mibBuilder.loadTexts: oramodRollBackEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackEntry.setDescription('An entry in the rollstat table.')
oramodRollBackSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackSIDINDX.setDescription('SID Index Number.')
oramodRollBackSEGINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackSEGINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackSEGINDX.setDescription('Undo Segment Number used as an index.')
oramodRollBackSEGNAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackSEGNAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackSEGNAME.setDescription('Rollback Segment Name.')
oramodRollBackEXTENTS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackEXTENTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackEXTENTS.setDescription('The total number of Segment Extends since instance startup.')
oramodRollBackRSSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackRSSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackRSSIZE.setDescription('The size of the Rollback Segment.')
oramodRollBackWRITES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackWRITES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackWRITES.setDescription('The total number of Segment Writes since instance startup.')
oramodRollBackGETS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackGETS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackGETS.setDescription('The total number of Rollback Segment Gets since instance startup.')
oramodRollBackWAITS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackWAITS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackWAITS.setDescription('The total number of Segment Waits since instance startup.')
oramodRollBackOPTSIZE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackOPTSIZE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackOPTSIZE.setDescription('The Optimal Size of the Rollback Segment. This size should be set based on application usage to minimize space management issues.')
oramodRollBackSHRINKS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackSHRINKS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackSHRINKS.setDescription('The total number of Rollback Segment Shrinks since instance startup. Rollback Segments shrink back to their optimal size after extends have occurred.')
oramodRollBackWRAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackWRAPS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackWRAPS.setDescription(" The total number of Rollback Segment wraps since instance startup. When a transaction's rollback segment entry cannot be stored within a single extent, the entry wraps into a second extent within the rollback segment. If this value is non-zero, try recreating the rollback segments with larger extent sizes.")
oramodRollBackEXTENDS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackEXTENDS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackEXTENDS.setDescription("Rollback Segment extends. Extensions indicate that the rollback segments are handling larger transactions than they were designed for; and if the entire rollback segment cannot handle a transaction's rollback information, a single extent will not be able to hold it either. Thus, rollback segments that extend will frequently have a high number of wraps.")
oramodRollBackAVESHRINK = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackAVESHRINK.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackAVESHRINK.setDescription('The average shrink size of the Rollback Segment since this instance startup.')
oramodRollBackAVEACTIVE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackAVEACTIVE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackAVEACTIVE.setDescription('Segment average active.')
oramodRollBackSTATUS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodRollBackSTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodRollBackSTATUS.setDescription('Segment status.')
oramodWaitsTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1), )
if mibBuilder.loadTexts: oramodWaitsTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsTable.setDescription('This table describes resource waits.')
oramodWaitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodWaitsSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodWaitsEVENTINDX"))
if mibBuilder.loadTexts: oramodWaitsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsEntry.setDescription('An entry in the waits table.')
oramodWaitsSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodWaitsSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsSIDINDX.setDescription('Sid Index Number.')
oramodWaitsEVENTINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodWaitsEVENTINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsEVENTINDX.setDescription("Event's Index Number.")
oramodWaitsEVENT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodWaitsEVENT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsEVENT.setDescription('Resource Name.')
oramodWaitsTOTALWAITS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodWaitsTOTALWAITS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsTOTALWAITS.setDescription('Resource Total Waits.')
oramodWaitsTOTALTIMOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodWaitsTOTALTIMOUT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsTOTALTIMOUT.setDescription('Resource Total Timeouts.')
oramodWaitsTIMEWAITED = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodWaitsTIMEWAITED.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsTIMEWAITED.setDescription('Resource Total Waited.')
oramodWaitsAVGWAIT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodWaitsAVGWAIT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodWaitsAVGWAIT.setDescription('Resource average wait.')
oramodExpSqlTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1), )
if mibBuilder.loadTexts: oramodExpSqlTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlTable.setDescription('This table describes expensive sql.')
oramodExpSqlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodExpSqlSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodExpSqlSQLINDX"))
if mibBuilder.loadTexts: oramodExpSqlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlEntry.setDescription('An entry in the v$sqlarea table.')
oramodExpSqlSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlSIDINDX.setDescription('Sid Index Number.')
oramodExpSqlSQLINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlSQLINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlSQLINDX.setDescription('SQL Statement Index Number.')
oramodExpSqlEXECUTION = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlEXECUTION.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlEXECUTION.setDescription('Number of Executions.')
oramodExpSqlDISKREAD = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlDISKREAD.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlDISKREAD.setDescription('Number of Disk Reads.')
oramodExpSqlPARSECNT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlPARSECNT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlPARSECNT.setDescription('Number of Parses. Parsing is the work done by the database to validate the SQL statement and generate the query plan used for execution. When the parse count is close to that of executions for a given statement, you may be continually reparsing that statement. You can reduce parsing by making sure that statements are reused as much as possible in the shared pool. In general, a large number of hard parses indicates that more memory is needed for the shared pool.')
oramodExpSqlBUFFGETS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlBUFFGETS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlBUFFGETS.setDescription('Number of Buffer Gets.')
oramodExpSqlSORTS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlSORTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlSORTS.setDescription('Number of Sorts.')
oramodExpSqlSQL = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 7, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodExpSqlSQL.setStatus('mandatory')
if mibBuilder.loadTexts: oramodExpSqlSQL.setDescription('Sql Statement truncated.')
oramodTblspTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1), )
if mibBuilder.loadTexts: oramodTblspTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspTable.setDescription('List Fragmentation Information.')
oramodTblspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodTblspSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodTblspTBLSPINDX"))
if mibBuilder.loadTexts: oramodTblspEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspEntry.setDescription('An entry from the dbafreespace table.')
oramodTblspSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspSIDINDX.setDescription('Sid Index Number.')
oramodTblspTBLSPINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspTBLSPINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspTBLSPINDX.setDescription('Tablespace Index Number.')
oramodTblspTBLSPNAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspTBLSPNAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspTBLSPNAME.setDescription('Tablespace Name.')
oramodTblspFILENAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspFILENAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspFILENAME.setDescription('File Name.')
oramodTblspEXTENTS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspEXTENTS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspEXTENTS.setDescription('The number of extents.')
oramodTblspLRGEXTENT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspLRGEXTENT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspLRGEXTENT.setDescription('Size in bytes of the largest extent.')
oramodTblspSMEXTENT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspSMEXTENT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspSMEXTENT.setDescription('Size in bytes of the smallest extent.')
oramodTblspINCREMENTBY = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspINCREMENTBY.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspINCREMENTBY.setDescription('Size in bytes of the next extent increment.')
oramodTblspBYTESCOALSD = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspBYTESCOALSD.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspBYTESCOALSD.setDescription('The number of free bytes that were coalesed. If this number does not match bytesfree then the tablespace has some extents that can be coalesced.')
oramodTblspBYTESFREE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 8, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodTblspBYTESFREE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodTblspBYTESFREE.setDescription('The total number of free bytes available.')
oramodLockTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1), )
if mibBuilder.loadTexts: oramodLockTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockTable.setDescription('Lock Holders and Requestors')
oramodLockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodLockSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodLockUSERINDX"))
if mibBuilder.loadTexts: oramodLockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockEntry.setDescription('An entry from the lock and session tables.')
oramodLockSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockSIDINDX.setDescription('Sid Index Number.')
oramodLockUSERINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockUSERINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockUSERINDX.setDescription("User's Index Number.")
oramodLockUSERNAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockUSERNAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockUSERNAME.setDescription('User Name holding the lock.')
oramodLockOBJECT = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockOBJECT.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockOBJECT.setDescription('The name of the locked object.')
oramodLockTYPE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockTYPE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockTYPE.setDescription('Object Type.')
oramodLockMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockMODE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockMODE.setDescription('Lock Mode held (Null, Row share, Row exclusive, Share, Share row exclusive, Exclusive).')
oramodLockCTIME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockCTIME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockCTIME.setDescription('Time since current mode was granted.')
oramodLockBLOCK = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLockBLOCK.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLockBLOCK.setDescription('The lock is blocking another lock.')
oramodLatchTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1), )
if mibBuilder.loadTexts: oramodLatchTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchTable.setDescription('Latch information.')
oramodLatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodLatchSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodLatchLATCHINDX"))
if mibBuilder.loadTexts: oramodLatchEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchEntry.setDescription('An entry from the latch table.')
oramodLatchSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchSIDINDX.setDescription('Sid Index Number.')
oramodLatchLATCHINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchLATCHINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchLATCHINDX.setDescription('Latch Index Number.')
oramodLatchLATCHNUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchLATCHNUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchLATCHNUM.setDescription('Latch Number.')
oramodLatchLATCHNAME = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchLATCHNAME.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchLATCHNAME.setDescription('Latch Name.')
oramodLatchGETS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchGETS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchGETS.setDescription('Latch Gets. Reflects the proportion of times requests for latches are satisfied without waiting. Should be high.')
oramodLatchMISSES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchMISSES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchMISSES.setDescription('Latch Misses.')
oramodLatchSLEEPS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchSLEEPS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchSLEEPS.setDescription('Latch Sleeps.')
oramodLatchIMDGETS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchIMDGETS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchIMDGETS.setDescription('Latch Immediate Gets.')
oramodLatchIMDMISSES = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchIMDMISSES.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchIMDMISSES.setDescription('Latch Immediate Misses.')
oramodLatchWAITSHOLDING = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchWAITSHOLDING.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchWAITSHOLDING.setDescription('Latch Immediate Misses. When a session cannot acquire a latch, it goes into active wait and repeatedly trys to acquire the latch impaitiently.')
oramodLatchSPINGETS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 9, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodLatchSPINGETS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodLatchSPINGETS.setDescription('Latch Spin Gets. Some latch types will lock into a tight loop testing the latch and trying to get it. Spinning uses significant CPU resources. The number of spins depends on the spincount set it the init.ora file. Once the number of spincounts has been reached the prcess will back off and sleep.')
oramodBackupTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1, 1), )
if mibBuilder.loadTexts: oramodBackupTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodBackupTable.setDescription('Backup Information')
oramodBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodBackupSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodBackupFILENUM"))
if mibBuilder.loadTexts: oramodBackupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodBackupEntry.setDescription('An entry from the backup table.')
oramodBackupSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodBackupSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodBackupSIDINDX.setDescription('Sid Index Number.')
oramodBackupFILENUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodBackupFILENUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodBackupFILENUM.setDescription('Backup File Index Number.')
oramodBackupSTATUS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodBackupSTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodBackupSTATUS.setDescription('Status of the backup.')
oramodBackupCHANGENUM = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodBackupCHANGENUM.setStatus('mandatory')
if mibBuilder.loadTexts: oramodBackupCHANGENUM.setDescription('The change number of the backup file.')
oramodBackupDATE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 10, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodBackupDATE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodBackupDATE.setDescription('Date of the Backup.')
oramodArcDestTable = MibTable((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1, 1), )
if mibBuilder.loadTexts: oramodArcDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: oramodArcDestTable.setDescription('Archive Information.')
oramodArcDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1, 1, 1), ).setIndexNames((0, "EMPIRE-ORAMOD", "oramodArcDestSIDINDX"), (0, "EMPIRE-ORAMOD", "oramodArcDestARCINDX"))
if mibBuilder.loadTexts: oramodArcDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oramodArcDestEntry.setDescription('An entry from the archive destination table.')
oramodArcDestSIDINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodArcDestSIDINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodArcDestSIDINDX.setDescription('Sid Index Number.')
oramodArcDestARCINDX = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodArcDestARCINDX.setStatus('mandatory')
if mibBuilder.loadTexts: oramodArcDestARCINDX.setDescription('Index of Archive log.')
oramodArcDestARCMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodArcDestARCMODE.setStatus('mandatory')
if mibBuilder.loadTexts: oramodArcDestARCMODE.setDescription('Mode of Archive log.')
oramodArcDestSTATUS = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodArcDestSTATUS.setStatus('mandatory')
if mibBuilder.loadTexts: oramodArcDestSTATUS.setDescription('Status of Archive Log File.')
oramodArcDestDEST = MibTableColumn((1, 3, 6, 1, 4, 1, 546, 16, 4, 11, 11, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oramodArcDestDEST.setStatus('mandatory')
if mibBuilder.loadTexts: oramodArcDestDEST.setDescription('Archive Log File Destination.')
mibBuilder.exportSymbols("EMPIRE-ORAMOD", oramodFootprtEntry=oramodFootprtEntry, oramodFootprtLASTUPDATE=oramodFootprtLASTUPDATE, oramodMetricsDBPHYSWRTS=oramodMetricsDBPHYSWRTS, oramodBackupDATE=oramodBackupDATE, oramodDbCfgDBBLKSIZE=oramodDbCfgDBBLKSIZE, oramodDbCfgMAXSESSION=oramodDbCfgMAXSESSION, oramodCfgDfBLOCKS=oramodCfgDfBLOCKS, oramodWaits=oramodWaits, oramodRollBackAVESHRINK=oramodRollBackAVESHRINK, oramodTblspINCREMENTBY=oramodTblspINCREMENTBY, oramodMetricsARCHIVER=oramodMetricsARCHIVER, oramodFFootprtSIDINDX=oramodFFootprtSIDINDX, oramodWaitsTOTALWAITS=oramodWaitsTOTALWAITS, oramodExpSqlSORTS=oramodExpSqlSORTS, oramodCfgSgaSIDINDX=oramodCfgSgaSIDINDX, oramodExpSqlTable=oramodExpSqlTable, oramodExpSqlDISKREAD=oramodExpSqlDISKREAD, oramodFootprtHOMESIZE=oramodFootprtHOMESIZE, oramodCfgLfTable=oramodCfgLfTable, oramodCfgSgaDBBUFF=oramodCfgSgaDBBUFF, oramodMetricsUSERROLLBACK=oramodMetricsUSERROLLBACK, oramodCfgLfEntry=oramodCfgLfEntry, oramodCfgSgaVARIABLE=oramodCfgSgaVARIABLE, oramodFFootprtFILENAME=oramodFFootprtFILENAME, oramodDbCfg=oramodDbCfg, oramodCfgDfTBLESPACENUM=oramodCfgDfTBLESPACENUM, oramodSgaDddAggTable=oramodSgaDddAggTable, oramodMetricsTBLFTCHCROW=oramodMetricsTBLFTCHCROW, oramodSGADLCIPIN=oramodSGADLCIPIN, oramodRollBackAVEACTIVE=oramodRollBackAVEACTIVE, oramodLatch=oramodLatch, oramodDbCfgSHAREDPOOLSIZE=oramodDbCfgSHAREDPOOLSIZE, oramodREDOSIDINDX=oramodREDOSIDINDX, oramodTtlINVOLCNTX=oramodTtlINVOLCNTX, oramodMetricsCPUTM=oramodMetricsCPUTM, oramodCfgDfUNRCVRBLETIME=oramodCfgDfUNRCVRBLETIME, oramodLockOBJECT=oramodLockOBJECT, oramodSgaDlciTable=oramodSgaDlciTable, oramodTtlNUMSWAPS=oramodTtlNUMSWAPS, oramodTtlMSGSSENT=oramodTtlMSGSSENT, oramodCfgLfMEMBER=oramodCfgLfMEMBER, oramodFootprtMINORPGFLTS=oramodFootprtMINORPGFLTS, oramodTtlMINORPGFLTS=oramodTtlMINORPGFLTS, oramodSgaDlciEntry=oramodSgaDlciEntry, oramodTtlFootprt=oramodTtlFootprt, oramodBackup=oramodBackup, oramodSGAAGGGETMISS=oramodSGAAGGGETMISS, oramodTblspBYTESCOALSD=oramodTblspBYTESCOALSD, oramodCfgLfMEMBERINDX=oramodCfgLfMEMBERINDX, oramodSGADLCIGETHIT=oramodSGADLCIGETHIT, oramodLocks=oramodLocks, oramodLatchIMDGETS=oramodLatchIMDGETS, oramodRedoLogBufEntry=oramodRedoLogBufEntry, oramodREDOBLKWRT=oramodREDOBLKWRT, oramodRollBackSEGNAME=oramodRollBackSEGNAME, oramodMetricsBLKFREEWAIT=oramodMetricsBLKFREEWAIT, oramodSGAAGGSCAN=oramodSGAAGGSCAN, oramodCfgDfSIDINDX=oramodCfgDfSIDINDX, oramodMetricsTBLFTCHROWID=oramodMetricsTBLFTCHROWID, oramodExpSql=oramodExpSql, oramodRollBack=oramodRollBack, oramodCfgSgaTOTALMEMALLOC=oramodCfgSgaTOTALMEMALLOC, oramodCfgDfKBYTES=oramodCfgDfKBYTES, oramodFootprtMAJORPGFLTS=oramodFootprtMAJORPGFLTS, oramodLockTable=oramodLockTable, oramodMetricsEntry=oramodMetricsEntry, oramodWaitsTIMEWAITED=oramodWaitsTIMEWAITED, oramodRollBackWAITS=oramodRollBackWAITS, oramodMetricsDBBLKGET=oramodMetricsDBBLKGET, oramodLockCTIME=oramodLockCTIME, oramodCfgDfERROR=oramodCfgDfERROR, oramodBackupCHANGENUM=oramodBackupCHANGENUM, oramodCfgDfENABLED=oramodCfgDfENABLED, oramodMetricsSESSCURRMEM=oramodMetricsSESSCURRMEM, oramodCfgDfRECOVER=oramodCfgDfRECOVER, oramodExpSqlSQL=oramodExpSqlSQL, oramodFootprtRSS=oramodFootprtRSS, oramodSGAAGGGET=oramodSGAAGGGET, oramodFFootprtCRTTS=oramodFFootprtCRTTS, oramodCfgDfRSTLOGSCHGNUM=oramodCfgDfRSTLOGSCHGNUM, oramodLockMODE=oramodLockMODE, oramodFFootprtCRTKBYTES=oramodFFootprtCRTKBYTES, oramodFootprtTHREADS=oramodFootprtTHREADS, oramodDbCfgDBFILES=oramodDbCfgDBFILES, oramodFootprtPERCENTCPU=oramodFootprtPERCENTCPU, oramodRollBackRSSIZE=oramodRollBackRSSIZE, oramodSGAAGGMODS=oramodSGAAGGMODS, oramodMetricsRECRSVCALLS=oramodMetricsRECRSVCALLS, oramodMetricsDBTOTALRW=oramodMetricsDBTOTALRW, oramodMetricsUSERCALLS=oramodMetricsUSERCALLS, oramodFootprtOUTBLKS=oramodFootprtOUTBLKS, oramodTtlSYSCALLS=oramodTtlSYSCALLS, oramodSGADLCISIDINDX=oramodSGADLCISIDINDX, oramodTblsp=oramodTblsp, oramodCfgSga=oramodCfgSga, oramodTtlOUTBLKS=oramodTtlOUTBLKS, oramodMetricsRTUC=oramodMetricsRTUC, oramodExpSqlEXECUTION=oramodExpSqlEXECUTION, oramodCfgSgaEntry=oramodCfgSgaEntry, oramodFootprint=oramodFootprint, oramodMetricsPARSECNT=oramodMetricsPARSECNT, oramodDbCfgTRNSACTNSPERSEG=oramodDbCfgTRNSACTNSPERSEG, oramodBackupSTATUS=oramodBackupSTATUS, oramodExpSqlSQLINDX=oramodExpSqlSQLINDX, oramodRollBackSTATUS=oramodRollBackSTATUS, oramodDbCfgTRNSACTNS=oramodDbCfgTRNSACTNS, oramodFFootprtSTATUS=oramodFFootprtSTATUS, oramodSGAAGGUSGE=oramodSGAAGGUSGE, oramodCfgDf=oramodCfgDf, oramodCfgDfFILENUM=oramodCfgDfFILENUM, oramodMetricsCBR=oramodMetricsCBR, oramodCfgDfCRTTIME=oramodCfgDfCRTTIME, oramodExpSqlBUFFGETS=oramodExpSqlBUFFGETS, oramodLatchLATCHNUM=oramodLatchLATCHNUM, oramodMetricsUSERCOMMITS=oramodMetricsUSERCOMMITS, oramodRollBackSHRINKS=oramodRollBackSHRINKS, oramodDbCfgTable=oramodDbCfgTable, oramodFFootprtRECOVER=oramodFFootprtRECOVER, oramodDbCfgVERSION=oramodDbCfgVERSION, oramodCfgSgaREDOBUFF=oramodCfgSgaREDOBUFF, oramodTblspLRGEXTENT=oramodTblspLRGEXTENT, oramodMetricsSIDINDX=oramodMetricsSIDINDX, oramodFootprtMSGSSENT=oramodFootprtMSGSSENT, oramodFootprtMSGSRCVD=oramodFootprtMSGSRCVD, oramodArcDestDEST=oramodArcDestDEST, oramodLockUSERINDX=oramodLockUSERINDX, oramodCfgDfTBLESPACERFILENUM=oramodCfgDfTBLESPACERFILENUM, oramodDbCfgEntry=oramodDbCfgEntry, oramodFootprtTable=oramodFootprtTable, oramodCfgSgaTable=oramodCfgSgaTable, oramodRollBackEXTENTS=oramodRollBackEXTENTS, oramodCfgDfFNAME=oramodCfgDfFNAME, oramodTblspBYTESFREE=oramodTblspBYTESFREE, empire=empire, oramodFootprtPERCENTMEM=oramodFootprtPERCENTMEM, oramodTblspFILENAME=oramodTblspFILENAME, oramodLatchWAITSHOLDING=oramodLatchWAITSHOLDING, oramodMetricsSESSCURRENT=oramodMetricsSESSCURRENT, oramodMetricsRLSW=oramodMetricsRLSW, oramodMetricsBCPT=oramodMetricsBCPT, oramodDbCfgOPENMODE=oramodDbCfgOPENMODE, oramodLockTYPE=oramodLockTYPE, oramodMetricsLASTUPDATE=oramodMetricsLASTUPDATE, oramodFootprtINVOLCNTX=oramodFootprtINVOLCNTX, oramodDbCfgBASE=oramodDbCfgBASE, oramodFootprtNUMSWAPS=oramodFootprtNUMSWAPS, oramodSGADLCIRELOAD=oramodSGADLCIRELOAD, oramodFootprtSYSCALLS=oramodFootprtSYSCALLS, oramodDbCfgID=oramodDbCfgID, oramodMetricsCHR=oramodMetricsCHR, oramodREDOSPACEWAIT=oramodREDOSPACEWAIT, oramodSGADLCIGETHITRT=oramodSGADLCIGETHITRT, oramodRollBackTable=oramodRollBackTable, oramodArcDestARCINDX=oramodArcDestARCINDX, oraModVersion=oraModVersion, oramodWaitsEVENT=oramodWaitsEVENT, oramodMetricsTBLSCANROWS=oramodMetricsTBLSCANROWS, oramodTtlMEMSIZE=oramodTtlMEMSIZE, oramodMetricsDATABASESTATUS=oramodMetricsDATABASESTATUS, oramodCfgLfSTATUS=oramodCfgLfSTATUS, oramodArcDestSTATUS=oramodArcDestSTATUS, oramodTblspTBLSPINDX=oramodTblspTBLSPINDX, oramodCfgDfBLOCKSIZE=oramodCfgDfBLOCKSIZE, oramodFFootprtTable=oramodFFootprtTable, oramodFootprtMEMSIZE=oramodFootprtMEMSIZE, oramodLatchSLEEPS=oramodLatchSLEEPS, oramodSGADLCIGET=oramodSGADLCIGET, oramodCfgDfRSTLOGSTIME=oramodCfgDfRSTLOGSTIME, oramodTblspEXTENTS=oramodTblspEXTENTS, oramodFFootprtKBYTES=oramodFFootprtKBYTES, oramodDbCfgCTRLFILETYPE=oramodDbCfgCTRLFILETYPE, oramodDbCfgOPENCURSORS=oramodDbCfgOPENCURSORS, oramodLatchSPINGETS=oramodLatchSPINGETS, oramodMetricsRSR=oramodMetricsRSR, oraFlag=oraFlag, oramodFFootprtFILEINDX=oramodFFootprtFILEINDX, oramodFFootprtBLOCKS=oramodFFootprtBLOCKS, oramodLockSIDINDX=oramodLockSIDINDX, oramodREDOSYNCHWRT=oramodREDOSYNCHWRT, oramodRollBackGETS=oramodRollBackGETS, oramodSGAAGGCNT=oramodSGAAGGCNT, oramodSGAAGGFLUSH=oramodSGAAGGFLUSH, oramodSGADLCIPINHITRT=oramodSGADLCIPINHITRT, oramodREDOSPACERQST=oramodREDOSPACERQST, oramodMetricsCCR=oramodMetricsCCR, oramodBackupSIDINDX=oramodBackupSIDINDX, oramodArcDestSIDINDX=oramodArcDestSIDINDX, oramodMetricsTRR=oramodMetricsTRR, oramodDbCfgMAXROLLSEG=oramodDbCfgMAXROLLSEG, oramodLatchIMDMISSES=oramodLatchIMDMISSES, oramodExpSqlSIDINDX=oramodExpSqlSIDINDX, oramodMetricsCPT=oramodMetricsCPT, oramodDbCfgCKPTINTRVL=oramodDbCfgCKPTINTRVL, oramodTtlMSGSRCVD=oramodTtlMSGSRCVD, oramodMetricsLOGFILESWTCH=oramodMetricsLOGFILESWTCH, oramodTtlTHREADS=oramodTtlTHREADS, oramodMetrics=oramodMetrics, oramodTblspTable=oramodTblspTable, oramodArchive=oramodArchive, oramodWaitsTOTALTIMOUT=oramodWaitsTOTALTIMOUT, oramodCfgDfTable=oramodCfgDfTable, oramodSGAAGGSCANCPLT=oramodSGAAGGSCANCPLT, oramodTtlCPUTIME=oramodTtlCPUTIME, oramodLockUSERNAME=oramodLockUSERNAME, oramodArcDestEntry=oramodArcDestEntry, oramodWaitsEVENTINDX=oramodWaitsEVENTINDX, oramodDbCfgCPUCNT=oramodDbCfgCPUCNT, oramodDbCfgSID=oramodDbCfgSID, oramodDbCfgLARGEPOOLSIZE=oramodDbCfgLARGEPOOLSIZE, oramodRollBackOPTSIZE=oramodRollBackOPTSIZE, oramodExpSqlEntry=oramodExpSqlEntry, oramodMetricsUCR=oramodMetricsUCR, oramodSGAAGGSIDINDX=oramodSGAAGGSIDINDX, oramodREDOENTRIES=oramodREDOENTRIES, oramodCfgDfCRTKBYTES=oramodCfgDfCRTKBYTES, oramodTtlVOLCNTX=oramodTtlVOLCNTX, oramodBackupFILENUM=oramodBackupFILENUM, oramodTblspEntry=oramodTblspEntry, oramodSGA=oramodSGA, oramodLatchMISSES=oramodLatchMISSES, oramodSgaDddAgg=oramodSgaDddAgg, oramodSGADLCIINDX=oramodSGADLCIINDX, oramodCfgDfEntry=oramodCfgDfEntry, oramodLock=oramodLock, oramodWaitsEntry=oramodWaitsEntry, oramodTblspTBLSPNAME=oramodTblspTBLSPNAME, oramodLatchSIDINDX=oramodLatchSIDINDX, oramodDbCfgCNTRLFILES=oramodDbCfgCNTRLFILES, oramodFootprtDBDISKSIZE=oramodFootprtDBDISKSIZE, oramodMetricsLCM=oramodMetricsLCM, oramodCfgSgaFIXEDSGA=oramodCfgSgaFIXEDSGA, oramodCfgLf=oramodCfgLf, oramodMetricsDBPHYSREAD=oramodMetricsDBPHYSREAD, oramodSgaDddAggEntry=oramodSgaDddAggEntry, oracledb=oracledb, oramodPerf=oramodPerf, oramodExpSqlPARSECNT=oramodExpSqlPARSECNT, oramodRedoLogBuf=oramodRedoLogBuf, oramodREDOSIZE=oramodREDOSIZE, oramodCfgLfGROUPNUM=oramodCfgLfGROUPNUM, oramodLatchGETS=oramodLatchGETS, applications=applications, oramodMetricsSOR=oramodMetricsSOR, oraModMode=oraModMode, oramodDbCfgHOME=oramodDbCfgHOME, oramodLatchTable=oramodLatchTable, oramodArcDestARCMODE=oramodArcDestARCMODE, oramodBackupTable=oramodBackupTable, oramodLatchLATCHNAME=oramodLatchLATCHNAME, oramodRollBackSEGINDX=oramodRollBackSEGINDX, oramodMetricsCNSTCHGS=oramodMetricsCNSTCHGS, oramodRollBackWRITES=oramodRollBackWRITES, oramodTtlINBLKS=oramodTtlINBLKS, oramodMetricsCRR=oramodMetricsCRR)
mibBuilder.exportSymbols("EMPIRE-ORAMOD", oramodTblspSMEXTENT=oramodTblspSMEXTENT, oramodMetricsDBSORTDISK=oramodMetricsDBSORTDISK, oramodWaitsAVGWAIT=oramodWaitsAVGWAIT, oramodMetricsSESSHIWTR=oramodMetricsSESSHIWTR, oramodREDOLASTUPDATE=oramodREDOLASTUPDATE, oramodTtlPERCENTCPU=oramodTtlPERCENTCPU, oramodFootprt=oramodFootprt, oramodDbCfgLOGMODE=oramodDbCfgLOGMODE, oramodTtlPERCENTMEM=oramodTtlPERCENTMEM, oramodTtlRSS=oramodTtlRSS, oramodMetricsSHUTDOWNPENDING=oramodMetricsSHUTDOWNPENDING, oramodMetricsSESSHIWTRMEM=oramodMetricsSESSHIWTRMEM, oramodLockBLOCK=oramodLockBLOCK, oramodMetricsSGALCE=oramodMetricsSGALCE, oramodRollBackEXTENDS=oramodRollBackEXTENDS, oramodCfgDfSTATUS=oramodCfgDfSTATUS, oramodCfgDfUNRCVRBLECHG=oramodCfgDfUNRCVRBLECHG, oramodSgaDlci=oramodSgaDlci, oramodMetricsDBBLKCHG=oramodMetricsDBBLKCHG, oramodSGAAGGSCANMISS=oramodSGAAGGSCANMISS, oramodWaitsTable=oramodWaitsTable, oramodMetricsTable=oramodMetricsTable, oramodRedoLogBufTable=oramodRedoLogBufTable, oramodFFootprt=oramodFFootprt, oramodMetricsUCPP=oramodMetricsUCPP, oramodArcDest=oramodArcDest, oramodDbCfgJAVAPOOLSIZE=oramodDbCfgJAVAPOOLSIZE, oramodTtlDISKSIZE=oramodTtlDISKSIZE, oramodFootprtCPUTIME=oramodFootprtCPUTIME, oramodFFootprtEntry=oramodFFootprtEntry, oramodTblspSIDINDX=oramodTblspSIDINDX, oramodLockEntry=oramodLockEntry, oramodWaitsSIDINDX=oramodWaitsSIDINDX, oramodMetricsDBSORTMEM=oramodMetricsDBSORTMEM, oramodBackups=oramodBackups, oramodDbCfgTIMEDSTATISTICS=oramodDbCfgTIMEDSTATISTICS, oramodFootprtVOLCNTX=oramodFootprtVOLCNTX, oramodDbCfgSORTAREASIZE=oramodDbCfgSORTAREASIZE, oramodMetricsCR=oramodMetricsCR, oramodRollBackEntry=oramodRollBackEntry, oramodCfg=oramodCfg, oramodDbCfgSIDINDX=oramodDbCfgSIDINDX, oramodRollBackWRAPS=oramodRollBackWRAPS, oramodDbCfgSHAREDPOOLRSSIZE=oramodDbCfgSHAREDPOOLRSSIZE, oramodArcDestTable=oramodArcDestTable, oramodFFootprtFILETYPE=oramodFFootprtFILETYPE, oramodCfgLfSIDINDX=oramodCfgLfSIDINDX, oramodLatchLATCHINDX=oramodLatchLATCHINDX, oramodBackupEntry=oramodBackupEntry, oramodDbCfgCRTDT=oramodDbCfgCRTDT, oramodSGAAGGFIX=oramodSGAAGGFIX, oramodREDOWASTAGE=oramodREDOWASTAGE, oramodSGADLCIPINHIT=oramodSGADLCIPINHIT, oramodLatchEntry=oramodLatchEntry, oramodREDOSYNCHTM=oramodREDOSYNCHTM, oramodFFootprtAVGIOTIM=oramodFFootprtAVGIOTIM, oramodMetricsBVPT=oramodMetricsBVPT, oramodTtlMAJORPGFLTS=oramodTtlMAJORPGFLTS, oramodFootprtINBLKS=oramodFootprtINBLKS, oramodDbCfgDBBLKBUFF=oramodDbCfgDBBLKBUFF, oramodFootprtSIDINDX=oramodFootprtSIDINDX, oramodSGADLCINAME=oramodSGADLCINAME, oramodMetricsURR=oramodMetricsURR, oramodMetricsMTHRDQUEUEWAIT=oramodMetricsMTHRDQUEUEWAIT, oramodMetricsSGADDCE=oramodMetricsSGADDCE, oramodMetricsDBCNSTGET=oramodMetricsDBCNSTGET, oramodMetricsBGR=oramodMetricsBGR, oramodREDORETRIES=oramodREDORETRIES, oramodSGADLCIINVALID=oramodSGADLCIINVALID, oramodRollBackSIDINDX=oramodRollBackSIDINDX, oramodDbCfgMAXPROCESS=oramodDbCfgMAXPROCESS)
