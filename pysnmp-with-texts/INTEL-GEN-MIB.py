#
# PySNMP MIB module INTEL-GEN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-GEN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, IpAddress, NotificationType, Counter64, MibIdentifier, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, Unsigned32, iso, ModuleIdentity, ObjectIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "NotificationType", "Counter64", "MibIdentifier", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "Unsigned32", "iso", "ModuleIdentity", "ObjectIdentity", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
sysProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5))
switches = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1))
express10 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 1))
express10plus = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 2))
express100fx = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 3))
express550t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 4))
express550f = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 5))
express510t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 6))
express520t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 7))
expressGigaSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 8))
express460t_16 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 9)).setLabel("express460t-16")
express460t_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 10)).setLabel("express460t-24")
nstructure560t = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 11))
nstructure560tr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 13))
nstructure560fr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 1, 14))
routers = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2))
express9100 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 1))
express920x = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 2))
express9300 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 3))
express9400 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 4))
express8100st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 5))
express8100u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 6))
express8100x = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 7))
express8100fr = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 8))
express9520st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 9))
express9520u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 10))
express9510st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 11))
express9510u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 12))
express9515st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 13))
express9515u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 14))
express9525st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 15))
express9525u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 16))
express8210 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 17))
express8220 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 18))
express9530 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 19))
express9535 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 20))
express9545st = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 21))
express9545u = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 22))
express8100wV4 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 23))
express8100stV4 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 27))
express8100uV4 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 2, 28))
hubs = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3))
express110_12 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 1)).setLabel("express110-12")
express110_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 2)).setLabel("express110-24")
express210_12 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 3)).setLabel("express210-12")
express210_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 4)).setLabel("express210-24")
express220_12 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 5)).setLabel("express220-12")
express220_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 6)).setLabel("express220-24")
express330_16 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 7)).setLabel("express330-16")
express330_24 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 3, 8)).setLabel("express330-24")
stacks = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4))
nstructure560 = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4, 1))
nstructure560s = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4, 1, 1))
nstructure560l3s = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 5, 4, 1, 2))
mib2ext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 1))
ip = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 2))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 3))
hw = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7))
stack = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 1))
chassis = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 3))
mediamodules = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 4))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 5))
stackext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 11))
chassisext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 12))
modulesext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 13))
mediamodulesext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 14))
portsext = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 7, 15))
sysVendorName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: sysVendorName.setDescription('Must return: Intel Corporation.')
sysProductName = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductName.setStatus('mandatory')
if mibBuilder.loadTexts: sysProductName.setDescription('Full name of device. Excludes the Sub Type information.')
sysProductSubType = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysProductSubType.setStatus('mandatory')
if mibBuilder.loadTexts: sysProductSubType.setDescription('Sub Type description of device. For example, national, special, or test versions.')
sysMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sysMibVersion.setDescription("Version of the INTEL-GEN-MIB supported by the device's SNMP agent. Syntax: A.BC xxx A (1-9): Changes when B overflows, or when object STATUS is changed to obsolete. B (0-9): Changed when new (major) object(s) are added to the MIB (Not objects below the sysProducts section). C (0-9): Changed when adding a new enumeration or making minor changes to an object. xxx: For Intel internal use only Version Log: 1.00: First version.")
sysTimeOfDay = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeOfDay.setStatus('mandatory')
if mibBuilder.loadTexts: sysTimeOfDay.setDescription("The device's expression of the local date and time of day. The time is expressed in seconds since midnight (0 hour), January 1, 1970. 0 is returned if the device does not support a real-time clock.")
sysSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSystemDate.setStatus('optional')
if mibBuilder.loadTexts: sysSystemDate.setDescription("The device's expression of the local date, time of day, and time zone. The syntax is identical to the DateAndTime format defined in RFC-1514. field octets contents range _____ ______ ________ _____ 1 1-2 year 0..65536 (in network byte order) 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' (in ASCII notation) 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 Note: If only the local time is known, then time-zone information (fields 8-10) is not present. An empty string is returned if the device does not support a real-time clock.")
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("resetCold", 1), ("resetWarm", 2), ("resetStackCold", 3), ("resetStackWarm", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysReset.setStatus('mandatory')
if mibBuilder.loadTexts: sysReset.setDescription('Resets the agent/device. resetCold(1): Restarts as if the device was powered off then on. resetWarm(2): Restarts the currently active software. resetStackCold(3): Restarts a multi agent stack as if the stack was powered off then on. resetStackWarm(4): Restarts the currently active software for each devices in a multi agent stack.')
sysConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 1, 8), )
if mibBuilder.loadTexts: sysConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfTable.setDescription("This table is used to describe the state of the device's configuration.")
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1) + (1000, ), Integer32())
sysConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: sysConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfEntry.setDescription('Configuration information entry: Index 1 is the active configuration. Index 2 is the backup configuration (if it exists).')
confStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("default", 2), ("loaded", 3), ("changed", 4), ("saved", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confStatus.setStatus('mandatory')
if mibBuilder.loadTexts: confStatus.setDescription("unknown(1): default(2): (Index 1) default configuration. loaded(3): (Index 1) configuration loaded from a TFTP server. changed(4): (Index 1) modified, but not copied to the backup. saved(5): (Index 1) active configuration and backup copies are identical. (Index 2) always returns 'saved(5)' (if it exists).")
confName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confName.setStatus('mandatory')
if mibBuilder.loadTexts: confName.setDescription('The configuration filename (0 to 256 bytes). Use this name when using TFTP to download the configuration. An empty string is returned if configuration files are not supported for the device.')
confTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confTime.setStatus('mandatory')
if mibBuilder.loadTexts: confTime.setDescription('sysTimeOfDay of the last time the configuration was modified, loaded, or saved to backup.')
confTftpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confTftpIp.setStatus('mandatory')
if mibBuilder.loadTexts: confTftpIp.setDescription('IP address of the TFTP server from which the configuration was loaded. 0 is returned if the configuration was not loaded from a server.')
sysConfChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("useDefaultConf", 1), ("useDefaultConfKeepIp", 2), ("useBackupConf", 3), ("createBackupConf", 4), ("createDefBackupConf", 5), ("useStackBackupConf", 6), ("createStackBackupConf", 7), ("stackTftpUploadLock", 8), ("stackTftpUploadUnlockActivate", 9), ("stackTftpUploadUnlockCancel", 10), ("stackTftpUploadKeepAlive", 11), ("stackUseDefaultConf", 12), ("stackUseDefaultConfKeepIp", 13), ("stackCreateDefBackupConf", 14)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sysConfChange.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfChange.setDescription('Object used to activate and backup configurations: useDefaultConf(1): Load the factory default configuration as the active configuration. useDefaultConfKeepIp(2): Same as useDefaultConf(1), but keep the current IP address. useBackupConf(3): Load the backup configuration as the active configuration. createBackupConf(4): Save the active configuration as the backup configuration. createDefBackupConf(5): Combine useDefaultConf(1) and createBackupConf(4) and use as the factory default. useStackBackupConf(6): Load the backup configuration as the active configuration. For all modules in a stack. createStackBackupConf(7):Save the active configuration as the backup configuration. For all modules in a stack. stackTftpUploadLock(8): Lock for TFTP upload of configuration to all modules in a stack. Used to syncronise external backup configuration actions. 60 sec inactivity timeout on the lock. stackTftpUploadUnlockActivate(9): Unlock and activate uploaded configuration for for all modules in a stack. stackTftpUploadUnlockCancel(10): Unlock and cancel uploaded configuration for for all modules in a stack. stackTftpUploadKeepAlive(11): Inform device that TFTP upload still in progress and mgt station is alive. stackUseDefaultConf(12): Load the factory default configuration as the active configuration for each device in a multi agent stack. stackUseDefaultConfKeepIp(13): Same as stackUseDefaultConf(1), but keep the current IP addresses. stackCreateDefBackupConf(14): Combine stackUseDefaultConf(12) and createStackBackupConf(7). Thus, restore the factory default configuration and save it as the backup configuration for all modules in the stack.')
sysLogTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 1, 10), )
if mibBuilder.loadTexts: sysLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysLogTable.setDescription("This table is used to configure and monitor the agent's log files. The log files are read with TFTP.")
sysLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "logType"))
if mibBuilder.loadTexts: sysLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysLogEntry.setDescription('Entry with a description of a log.')
logType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logSystem", 1), ("logError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logType.setStatus('mandatory')
if mibBuilder.loadTexts: logType.setDescription('The type of log: logSystem(1): Log of system events. logError(2): Log of errors.')
logEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logEntries.setStatus('mandatory')
if mibBuilder.loadTexts: logEntries.setDescription('The number of entries in the log. Setting the value to zero will clear the log. Setting any other value is invalid.')
logFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileName.setStatus('mandatory')
if mibBuilder.loadTexts: logFileName.setDescription('Filename of the log file. Use this name when using TFTP to download the log.')
logLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 1, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logLastChanged.setStatus('mandatory')
if mibBuilder.loadTexts: logLastChanged.setDescription('sysUpTime of the last change to the log.')
sysConfRollbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysConfRollbackTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfRollbackTimeout.setDescription('This object is used to activate and deactivate the configuration rollback mechanism. Set to 0 to deactivate. Set to x (x > 0) to activate in x seconds.')
sysConfChangeLastResponse = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17, 99))).clone(namedValues=NamedValues(("success", 1), ("noEditingRightsVlan", 2), ("noEditingRightsLocalParm", 3), ("flashOperationFailed", 4), ("flashOperationNothingToLoad", 5), ("tftpOperationFailed", 6), ("tftpOperationNoLock", 7), ("tftpOperationStackMemberMissingParmFile", 8), ("tftpOperationMissingParmFile", 9), ("tftpOperationMissingNvpFile", 10), ("tftpOperationMgtTimeout", 11), ("factoryDefaultOperationFailed", 12), ("stackMemberRejectsOperation", 13), ("intraStackCommunicationError", 16), ("internalError", 17), ("notReady", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysConfChangeLastResponse.setStatus('mandatory')
if mibBuilder.loadTexts: sysConfChangeLastResponse.setDescription("This object is used in conjunction with the sysConfChange object, to be read after setting a value for sysConfChange to obtain status of that operation. When this object returns notReady(99) snmp client must poll again, until it returns a valid response different from notReady(99). success(1): Last SET request of SysConfChange object was successful. Mgt station should continue process. noEditingRightsVlan(2): The VLAN configuration is busy, probable causes: VLAN is being edited somewhere else (editToken taken) VLAN is distributing configuration among the switches Mgt station should check the editToken state and advice the user to wait or force a release of the token, if taken. If not taken advice user to wait until configuration is no longer busy and try again. noEditingRightsLocalParm(3): A switch is having the local parameters modified. Mgt station should advice user to wait and try again. flashOperationFailed(4): A switch failed loading the configuration from Flash. Mgt station should advice user to check status of the switches and possibly try again later. flashOperationNothingToLoad(5): The contacted switch didn't have a configuration saved in Flash + Mgt station should advice the user that this switch never had a configuration saved, and the load from Flash has been aborted. This could occur if the contacted switch is new in the stack, and thus haven't had anything saved yet, or if the user simply never saved anything in Flash. Mgt station should advice user to save configuration in flash for entire stack always. tftpOperationFailed(6): The TFTP of files to the switches failed Mgt station should advice user to check status of the switches and possibly try again later. tftpOperationNoLock(7): The stack TFTP lock has not been set by Mgt station. Mgt station should advice user that someone may have tampered with the stack (reset, re-config) while the process was ongoing. (This could also be due to an error by the Mgt platform or switch) tftpOperationStackMemberMissingParmFile(8): One or more of the switches in the stack (other than the contacted switch) didn't receive a parameter block file yet. Mgt station should advice user to check status of the stack, if new switches were added since the configuration was backed-up, or during the process, this could be the problem. tftpOperationMissingParmFile(9): The contacted switch didn't receive a parameter block file yet. Mgt should advice user that a proper parameter block file wasn't received on the contacted switch. Data may have been corrupted. tftpOperationMissingNvpFile(10): The contacted switch didn't receive a network vlan policy file yet. Mgt should advice user that a proper nvp file wasn't received on the contacted switch. Data may have been corrupted. tftpOperationMgtTimeout(11): The contacted switch didn't receive a keep-alive signal from the Mgt station for 60 seconds. If Mgt is still there it should advice the user to check connection between Mgt station and switch. factoryDefaultOperationFailed(12): A switch failed loading the configuration from default parameters. Mgt station should advice user to check status of the switches and possibly try again later. stackMemberRejectsOperation(13): A switch (other than the contacted) couldn't initiate the desired operation. Mgt should advice the user to check the stack status. If switches were added or removed during the operation this may have caused the problem. intraStackCommunicationError(16): Communication between the stack members failed. Mgt should advice user to check cable connections and status of the switches, and possibly try operation again. internalError(17): This should never occur, and would indicate that a switch is in a fatal state of error. Mgt should advice the user to report the problem to support. notReady(99):")
sysLocalMangementTimeout = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLocalMangementTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sysLocalMangementTimeout.setDescription('The users conection to the local management system will be terminated by the device if it is idle for more than this timeout value. Time is in minutes. 0 indicates no termination will occour.')
ipConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 2, 1), )
if mibBuilder.loadTexts: ipConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipConfTable.setDescription('IP configuration table: The first table entry (index 1) shows the current values. The second entry (index 2) contains the values you wish to set. To activate the second entry, set ipConf2Activate = active(1).')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1) + (1001, ), Integer32())
ipConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: ipConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipConfEntry.setDescription("This table is used to view and modify the agent's IP configuration: Index 1 is the currently active configuration (read only). Index 2 is the new configuration, which is activated by setting ipConf2Activate = active(1).")
ipAddressAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: ipAddressAssignment.setDescription('Determines how the management agent gets its IP configuration: fixed(1): Get configuration from ipAddress, ipSubNetMask, ... in this table. bootp(2): Get configuration from a BOOTP server (ipBootpServerAddress).')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipAddress.setDescription('IP address for the device and agent.')
ipSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipSubNetMask.setDescription('Network (subnet) mask for the device and agent.')
ipRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipRouterAddress.setDescription('Gateway (router) address for the device and agent.')
ipBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBroadcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipBroadcastAddress.setDescription('Broadcast address for the device and agent.')
ipBootpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipBootpServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipBootpServerAddress.setDescription('If ipAddressAssignment = bootp(2), then this is the IP address of the BOOTP/DHCP server used to get the current address. If 0.0.0.0, then BOOTP/DHCP requests are multicasted.')
ipConf2Activate = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipConf2Activate.setStatus('mandatory')
if mibBuilder.loadTexts: ipConf2Activate.setDescription('Activates the second IP configuration set. Warning! This may reset the device in some implementations.')
ipModuleConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 2, 3), )
if mibBuilder.loadTexts: ipModuleConfTable.setStatus('optional')
if mibBuilder.loadTexts: ipModuleConfTable.setDescription('IP module configuration table: This is a version of the ipConfTable indexed by Chassis, Module')
ipModuleConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "ipModuleChassisIndex"), (0, "INTEL-GEN-MIB", "ipModuleModuleIndex"), (0, "INTEL-GEN-MIB", "ipModuleConfigIndex"))
if mibBuilder.loadTexts: ipModuleConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleConfEntry.setDescription("This table is used to view and modify the module agent's IP configuration:")
ipModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipModuleChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleChassisIndex.setDescription('Chassis number in stack that contains the module.')
ipModuleModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipModuleModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleModuleIndex.setDescription('Module number in the chassis.')
ipModuleConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipModuleConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleConfigIndex.setDescription('Configuration number in the module. Index 1 is the currently active configuration (read only). Index 2 is the new configuration, which is activated by setting ipConf2Activate = active(1).')
ipModuleAddressAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleAddressAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleAddressAssignment.setDescription('Determines how the management agent gets its IP configuration: fixed(1): Get configuration from ipModuleAddress, ipModuleSubNetMask, ... in this table. bootp(2): Get configuration from a BOOTP server (ipModuleBootpServerAddress).')
ipModuleAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleAddress.setDescription('IP address for the module.')
ipModuleSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleSubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleSubNetMask.setDescription('Network (subnet) mask for the module.')
ipModuleRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleRouterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleRouterAddress.setDescription('Gateway (router) address for the module.')
ipModuleBroadcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleBroadcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleBroadcastAddress.setDescription('Broadcast address for the module.')
ipModuleBootpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 2, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipModuleBootpServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipModuleBootpServerAddress.setDescription('If ipModuleAddressAssignment = bootp(2), then this is the IP address of the BOOTP/DHCP server used to get the current address. If 0.0.0.0, then BOOTP/DHCP requests are multicasted.')
ipModuleConf2Activate = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipModuleConf2Activate.setStatus('optional')
if mibBuilder.loadTexts: ipModuleConf2Activate.setDescription('Activates the second IP configuration set for all modules. Warning! This may reset one or more of the chassis or modules in some implementations.')
ipModuleConf2Confirm = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("confirm", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipModuleConf2Confirm.setStatus('optional')
if mibBuilder.loadTexts: ipModuleConf2Confirm.setDescription('If not set to confirm(1) within a short period of time (60 sec) after ipModuleConf2Activate is set to active(1), then all modules should revert to their original ip configuration.')
snmpAuthMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAuthMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAuthMaxEntries.setDescription('Maximum number of entries in the access authentication table (snmpAuthTable).')
snmpAuthTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAuthTableLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAuthTableLastChange.setDescription('sysUpTime of last change to snmpAuthTable.')
snmpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 3, 3), )
if mibBuilder.loadTexts: snmpAuthTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAuthTable.setDescription('Management access authentication table. ')
snmpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "authNumber"))
if mibBuilder.loadTexts: snmpAuthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAuthEntry.setDescription('Authentication entry.')
authNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authNumber.setStatus('mandatory')
if mibBuilder.loadTexts: authNumber.setDescription('A number that uniquely identifies an authentication entry.')
authProtocolAccessIpCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authProtocolAccessIpCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: authProtocolAccessIpCommunity.setDescription("This object contains the Protocol (1 byte), Access (1 byte), IP address (4 byte), IP subnet mask (4 byte), and Community (0 to 31 byte). Not all protocols are supported by all devices. Protocol: snmp(1), telnet(2), http(3), tftp(4), ftp(5) Access: Protocols: noAccess(1), All readOnly(2), All writeOnly(3), Not snmp(1) or telnet(2) readWrite(4), All readOnlySecureSNMPObjects(5), snmp(1) readWriteSecureSNMPObjects(6) snmp(1) If the IP address is zero, then any IP address is allowed. If the IP subnet mask is not 255.255.255.255, then any IP address is an IP network address. IP network addresses can't overlap for a given protocol. If an IP address and an IP network address overlap for a given protocol, then the access field of the IP address is used. The community string is only used for SNMP access. If the community string is zero length, then any value of community is allowed.")
authDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: authDelete.setStatus('mandatory')
if mibBuilder.loadTexts: authDelete.setDescription('The snmpAuthEntry is removed when set to delete(1).')
snmpTrapMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapMaxEntries.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapMaxEntries.setDescription('Maximum number of entries in the trapTable.')
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 3, 5), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapTable.setDescription('Host Trap list.')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "trapNumber"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapEntry.setDescription('Host Trap entry.')
trapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapNumber.setDescription('A number that uniquely identifies a trap entry.')
trapIpAndGroupAndCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 39))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIpAndGroupAndCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: trapIpAndGroupAndCommunity.setDescription('This object contains the IP address (4 byte), the trap groups (32 bit = 4 byte), and the community (0 to 31 byte) used in the trap. The trap groups section is stored as a 32-bit little-endian value. Groups: bit 1: all traps bit 2: configuration related traps bit 3: hardware state related traps bit 4: diagnostics related traps')
trapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trapDelete.setStatus('mandatory')
if mibBuilder.loadTexts: trapDelete.setDescription('The trapEntry is removed when set to delete(1).')
snmpAccessTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 3, 6), )
if mibBuilder.loadTexts: snmpAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAccessTable.setDescription('Management access list. This is a list of all IP addresses that have passed the authentication table.')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1) + (1002, ), Integer32())
snmpAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: snmpAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAccessEntry.setDescription('Management access entry.')
snmpAccessIP = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessIP.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAccessIP.setDescription('IP addresses of devices that have successfully cleared the authentication table.')
snmpAccessTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessTime.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAccessTime.setDescription('sysTimeOfDay of the last successful access from this IP address.')
snmpAccessProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("snmp", 1), ("telnet", 2), ("http", 3), ("tftp", 4), ("ftp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAccessProtocol.setDescription('Protocol used for successful access from this IP address.')
snmpAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAccess", 1), ("readOnly", 2), ("writeOnly", 3), ("readWrite", 4), ("readOnlySecureSNMPObjects", 5), ("readWriteSecureSNMPObjects", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpAccessType.setStatus('mandatory')
if mibBuilder.loadTexts: snmpAccessType.setDescription('Types of successful access from this IP address. Access: Protocols: noAccess(1), All readOnly(2), All writeOnly(3), All except for snmp(1) and telnet(2) readWrite(4), All readOnlySecureSNMPObjects(5), snmp(1) only readWriteSecureSNMPObjects(6) snmp(1) only')
stackClass = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 1), ("chassis", 2), ("multiagentstack", 3), ("singleagentstack", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackClass.setStatus('mandatory')
if mibBuilder.loadTexts: stackClass.setDescription("This object identifies which type of stack the device is a part of: standalone(1): Not a stack. (stackMaxChassis=1, chassisMaxModules=1). chassis(2): Not a stack. (stackMaxChassis=1, chassisMaxModules>1). multiagentstack(3): Stack of chassis' with their own management agents. singleagentstack(4): Stack of chassis' with a single management agent.")
stackMaxChassis = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackMaxChassis.setStatus('mandatory')
if mibBuilder.loadTexts: stackMaxChassis.setDescription("The maximum number of chassis' in a stack. Returns one (1) if stackClass = standalone(1) or chassis(2).")
stackChassis = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackChassis.setStatus('mandatory')
if mibBuilder.loadTexts: stackChassis.setDescription("The actual number of chassis' in a stack. Returns one (1) if stackClass = standalone(1) or chassis(2).")
stackAgentChassis = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackAgentChassis.setStatus('mandatory')
if mibBuilder.loadTexts: stackAgentChassis.setDescription('Which chassis in a stack contains the agent. Possible values are 1..stackMaxChassis. Returns one (1) if stackClass = standalone(1) or chassis(2).')
stackAgentModule = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackAgentModule.setStatus('mandatory')
if mibBuilder.loadTexts: stackAgentModule.setDescription('Which module in the chassis selected by stackAgentChassis contains the agent. Possible values are 1..chassisMaxModules for the selected chassis. Returns one (1) if stackClass = standalone(1).')
stackUserAssignedName = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackUserAssignedName.setStatus('mandatory')
if mibBuilder.loadTexts: stackUserAssignedName.setDescription('User-definable information about the stack.')
stackID = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackID.setStatus('optional')
if mibBuilder.loadTexts: stackID.setDescription('Unique identifier used to identify which stack a device last belonged to. Automatically genarated when a new stack is created. Based on MAC addresses.')
stackTopology = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chain", 1), ("star", 2), ("tree", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackTopology.setStatus('optional')
if mibBuilder.loadTexts: stackTopology.setDescription('Stack topology type')
stackMultiAgentDefultChassisModule = MibScalar((1, 3, 6, 1, 4, 1, 343, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackMultiAgentDefultChassisModule.setStatus('mandatory')
if mibBuilder.loadTexts: stackMultiAgentDefultChassisModule.setDescription('This object contains the Chassis and Module numbers to be used when using a non indexed MIB on a multi agent stack. Chassis index (4 byte (big-endian)), Module index (4 byte (big-endian))')
chassisTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 2, 1), )
if mibBuilder.loadTexts: chassisTable.setStatus('mandatory')
if mibBuilder.loadTexts: chassisTable.setDescription('Possible values of indices are 1..stackChassis')
chassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "chassisIndex"))
if mibBuilder.loadTexts: chassisEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chassisEntry.setDescription('Possible values of indices are 1..stackChassis')
chassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: chassisIndex.setDescription('Chassis number in the stack.')
chassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unavailable", 1), ("campus8tx", 2), ("campus8fx", 3), ("desktop24tx", 4), ("stackable12tx", 5), ("stackable24tx", 6), ("stackable16tx", 7), ("desktop16tx", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisType.setStatus('mandatory')
if mibBuilder.loadTexts: chassisType.setDescription('Hardware identification for the chassis.')
chassisMaxModules = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMaxModules.setStatus('mandatory')
if mibBuilder.loadTexts: chassisMaxModules.setDescription('The maximum number of modules in this chassis. Returns one (1) if stackClass = standalone(1).')
chassisModules = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisModules.setStatus('mandatory')
if mibBuilder.loadTexts: chassisModules.setDescription('The actual number of modules in this chassis. Possible values are 1..chassisMaxModules. Returns one (1) if stackClass = standalone(1).')
chassisUserAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisUserAssignedType.setStatus('mandatory')
if mibBuilder.loadTexts: chassisUserAssignedType.setDescription('User-definable information about the chassis.')
chassisUserAssignedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisUserAssignedNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chassisUserAssignedNumber.setDescription('User-definable information about the chassis.')
chassisUserAssignedName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chassisUserAssignedName.setStatus('mandatory')
if mibBuilder.loadTexts: chassisUserAssignedName.setDescription('User-definable information about the chassis.')
chassisMaxPSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassisMaxPSUs.setStatus('mandatory')
if mibBuilder.loadTexts: chassisMaxPSUs.setDescription('The maximum number of power supply units in this chassis. Detailed information about the power supply units is located in the psuTable (a chassis extension MIB).')
moduleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 3, 1), )
if mibBuilder.loadTexts: moduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: moduleTable.setDescription('Possible values of indices are 1..stackMaxChassis and 1..chassisMaxModules')
moduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "moduleChassisIndex"), (0, "INTEL-GEN-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: moduleEntry.setDescription('Possible values of indices are 1..stackMaxChassis and 1..chassisMaxModules')
moduleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: moduleChassisIndex.setDescription('Chassis number in stack that contains the module.')
moduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: moduleIndex.setDescription('Module number in the chassis.')
moduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39))).clone(namedValues=NamedValues(("unavailable", 1), ("express550t", 2), ("express550f", 3), ("express510t", 4), ("express8100st", 5), ("express8100u", 6), ("express8100x", 7), ("express8100fr", 8), ("express110p12", 20), ("express110p24", 21), ("express110management", 22), ("express110bridge", 23), ("express110managementWithRMON", 24), ("express210p12", 25), ("express210p24", 26), ("express220p12", 27), ("express220p24", 28), ("express330p16", 29), ("express330p24", 30), ("express300management", 31), ("express300txuplink", 32), ("express300fxuplink", 33), ("express460tp16", 34), ("express460tp24", 35), ("nstructure560t", 36), ("nstructure560tr", 38), ("nstructure560fr", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleType.setStatus('mandatory')
if mibBuilder.loadTexts: moduleType.setDescription('Hardware identification for the module.')
moduleFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: moduleFirstPort.setDescription('The portIndex of the first port on the module.')
moduleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: moduleNumberOfPorts.setDescription('Number of ports on the module.')
moduleMaxMediaModules = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMaxMediaModules.setStatus('mandatory')
if mibBuilder.loadTexts: moduleMaxMediaModules.setDescription('Maximum number of media modules on the module. Returns 0 if none.')
moduleUserAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedType.setStatus('mandatory')
if mibBuilder.loadTexts: moduleUserAssignedType.setDescription('User-definable information about the module.')
moduleUserAssignedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedNumber.setStatus('mandatory')
if mibBuilder.loadTexts: moduleUserAssignedNumber.setDescription('User-definable information about the module.')
moduleUserAssignedName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleUserAssignedName.setStatus('mandatory')
if mibBuilder.loadTexts: moduleUserAssignedName.setDescription('User-definable information about the module.')
moduleRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleRAM.setStatus('mandatory')
if mibBuilder.loadTexts: moduleRAM.setDescription("Displays the module's RAM size in bytes.")
moduleEPROM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleEPROM.setStatus('mandatory')
if mibBuilder.loadTexts: moduleEPROM.setDescription("Displays the module's EPROM size in bytes.")
moduleFLASHPROM = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleFLASHPROM.setStatus('mandatory')
if mibBuilder.loadTexts: moduleFLASHPROM.setDescription("Displays the module's Flash Memory size in bytes.")
moduleLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLEDInfo.setStatus('mandatory')
if mibBuilder.loadTexts: moduleLEDInfo.setDescription('State of all non-port LEDs on the module. There is one byte per LED: Byte 1 is the Power LED. Byte 2 is the Status LED. The rest are module specific. The most significant bit is used for blink/solid: Off = The LED is lit permanently. On = The LED blinks. The three least significant bits are used for color: 1 = not lit 2 = green 3 = yellow 4 = blue 5 = red 0+6+7 not used The four remaining bits are currently unused and must be 0.')
moduleAllPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortType.setStatus('mandatory')
if mibBuilder.loadTexts: moduleAllPortType.setDescription('Type of all ports in the module. One byte per port. The values are coded like portType.')
moduleAllPortLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortLEDInfo.setStatus('mandatory')
if mibBuilder.loadTexts: moduleAllPortLEDInfo.setDescription('The current state of all port LEDs on the module. X bytes per port on the module, where X = the normal number of LEDs per port on this module. There is one byte per LED. The most significant bit is used for blink/solid: Off = The LED is lit permanently. On = The LED blinks. The three least significant bits are used for color: 1 = not lit, 2 = green, 3 = yellow, 4 = blue, 5 = red, 0+6+7 not used The four remaining bits are currently unused and must be 0.')
moduleAllPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleAllPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: moduleAllPortStatus.setDescription('The current operational state for all ports on this module. This is an array of bit arrays which represents the state of the port. bit 0: disabled due to configuration bit 1: hardware error bit 2: no linkpulse bit 3: disabled by manager bit 4: disabled by access control bit 5: disabled by redundancy')
moduleLastPortChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleLastPortChange.setStatus('mandatory')
if mibBuilder.loadTexts: moduleLastPortChange.setDescription('sysUpTime of last change to any of the AllPort values above.')
moduleMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: moduleMacAddress.setDescription('The base MAC address allocated for MAC interfaces on this module. Returns 00,00,00,00,00,00 if not used.')
moduleIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: moduleIpAddress.setDescription('The IP address of the agent located in this module. Returns 0.0.0.0 if no agent is located in this module')
moduleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSerialNumber.setDescription('Module serial number.')
moduleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: moduleVersion.setDescription('The hardware version number for this module. First version is 0, second is 1, and so on.')
moduleSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notsupported", 1), ("nosoftware", 2), ("unavailable", 3), ("approved", 4), ("experimental", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleSwStatus.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwStatus.setDescription('The state of the active software on the module. This is for single software devices. notsupported(1): This module does not support software. nosoftware(2): This module does not currently have software. unavailable(3): This module is currently not able get the software status. approved(4): This software is used after power off or a resetCold(1). experimental(5): Software must be approved to be used after any type of reset. The only permitted set operation is to change the status from experimental(5) to approved(4) or to change the status from approved(4) to nosoftware(2); this requires moduleBackupSwStatus == approved(4).')
moduleSwName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwName.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwName.setDescription("The active software's filename (0 to 256 bytes).")
moduleSwDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwDescription.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwDescription.setDescription('Description of the active software.')
moduleSwLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwLoadTime.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwLoadTime.setDescription('sysTimeOfDay of last time the active software was loaded from a TFTP server or flash memory.')
moduleSwTftpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwTftpIp.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwTftpIp.setDescription('IP address of the TFTP server from which the active software was loaded. Returns 0.0.0.0 for factory-loaded software or software loaded by a non IP-based connection to the device (for example, a serial cable connection).')
moduleBackupSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notsupported", 1), ("nosoftware", 2), ("unavailable", 3), ("approved", 4), ("experimental", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwStatus.setStatus('mandatory')
if mibBuilder.loadTexts: moduleBackupSwStatus.setDescription("The state of the module's backup software: notsupported(1): This module does not support a backup software. nosoftware(2): This module does not currently have backup software. unavailable(3): This module is not currently able to get the backup software status. approved(4): Software is used after a resetWarm(2) unless moduleSwStatus == approved(4). experimental(5): Never returned. The only permitted set operation is to change the status from approved(4) to nosoftware(2); this requires moduleSwStatus == approved(4).")
moduleBackupSwName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwName.setStatus('mandatory')
if mibBuilder.loadTexts: moduleBackupSwName.setDescription("The backup software's filename (0 to 256 bytes).")
moduleBackupSwDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwDescription.setStatus('mandatory')
if mibBuilder.loadTexts: moduleBackupSwDescription.setDescription('Description of the backup software.')
moduleBackupSwLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwLoadTime.setStatus('mandatory')
if mibBuilder.loadTexts: moduleBackupSwLoadTime.setDescription('sysTimeOfDay of last time the backup software was saved to Flash Memory.')
moduleBackupSwTftpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 31), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBackupSwTftpIp.setStatus('mandatory')
if mibBuilder.loadTexts: moduleBackupSwTftpIp.setDescription('IP address of the TFTP server from which the software was originally loaded.')
moduleSwTftpIpAndSwName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 260))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moduleSwTftpIpAndSwName.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwTftpIpAndSwName.setDescription('This object contains the IP address of the TFTP server (4 bytes) and the software filename (0 to 256 bytes). This is used to initiate a software update. The result of the upgrade is accessible in moduleSwUpdateResult.')
moduleSwUpdateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("swUpdateRunning", 2), ("errorUnknown", 3), ("errorNoTftpServer", 4), ("errorNoSoftware", 5), ("errorSoftwareMismatch", 6), ("errorMoreFlash", 7), ("errorMoreRAM", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleSwUpdateResult.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSwUpdateResult.setDescription('The result of software update initiated by setting moduleSwTftpIpAndSwName: noError(1): The last upgrade ended successfully. No upgrade currently in progress. swUpdateRunning(2): An upgrade is currently in progress. errorUnknown(3): The last upgrade failed. errorNoTftpServer(4): The last upgrade failed. Server not found. errorNoSoftware(5): The last upgrade failed. File not found on server. errorSoftwareMismatch(6): The last upgrade failed. The software loaded was not for this device type. errorMoreFlash(7): The last upgrade failed. Insufficient Flash Memory. errorMoreRAM(8): The last upgrade failed. Insufficient RAM.')
moduleSpecificObject = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: moduleSpecificObject.setStatus('mandatory')
if mibBuilder.loadTexts: moduleSpecificObject.setDescription('Used for module specific configuration.')
moduleTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("normal", 1), ("high", 2), ("critical", 3), ("unavailable", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleTemperatureStatus.setStatus('optional')
if mibBuilder.loadTexts: moduleTemperatureStatus.setDescription('Indication of the modules temperature. normal(1): Temperature within normal opperational specification high(2): Temperature obove normal opperational specification (Check air circulation) critical(3): Temperature critically obove normal opperational specification (Chut device the device imediatlly) unavailable(99): No temperature censor in the device.')
moduleBootSectionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 3, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleBootSectionVersion.setStatus('mandatory')
if mibBuilder.loadTexts: moduleBootSectionVersion.setDescription('The version number for the Boot section of this module. Major version number = moduleBootSectionVersion / 256 Minor version number = moduleBootSectionVersion % 256')
mediaModuleTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 4, 1), )
if mibBuilder.loadTexts: mediaModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleTable.setDescription('Possible values of indices are 1..moduleMaxMediaModules')
mediaModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "mediaModuleChassisIndex"), (0, "INTEL-GEN-MIB", "mediaModuleModuleIndex"), (0, "INTEL-GEN-MIB", "mediaModuleIndex"))
if mibBuilder.loadTexts: mediaModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleEntry.setDescription('Possible values of indices are 1..stackMaxChassis, 1..chassisMaxModules and 1..moduleMaxMediaModules')
mediaModuleChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleChassisIndex.setDescription('The chassis number that contains the module that contains the media modules.')
mediaModuleModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleModuleIndex.setDescription('The module number that contains the media module.')
mediaModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleIndex.setDescription('Media module number in the module.')
mediaModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unavailable", 1), ("mediaModule4tx", 2), ("mediaModule2fx", 3), ("mediaModuleSMM", 4), ("mediaModule1sx", 5), ("mediaModuleMMM", 6), ("mediaModule1sxSMM", 7), ("mediaModule1lxSMM", 8), ("mediaModule1atmmm", 9), ("mediaModule1atmsm", 10), ("mediaModule1atmutp", 11), ("mediaModule1lx", 12), ("mediaModule1000bt", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleType.setDescription('The product identification of the media module.')
mediaModuleFirstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleFirstPort.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleFirstPort.setDescription('The portIndex of the first port on the media module.')
mediaModuleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleNumberOfPorts.setDescription('The number of ports on the media module.')
mediaModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediaModuleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mediaModuleVersion.setDescription('Hardware version number for this media module. First version is 0, second is 1, and so on.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 343, 7, 5, 1), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTable.setDescription('Possible values of indices are 1..chassisModules')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1), ).setIndexNames((0, "INTEL-GEN-MIB", "portChassisIndex"), (0, "INTEL-GEN-MIB", "portModuleIndex"), (0, "INTEL-GEN-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription('Possible values of indices are 1..chassisModules')
portChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChassisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portChassisIndex.setDescription('The chassis number that contains the module.')
portModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portModuleIndex.setDescription('The module number that contains the port.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIndex.setDescription('The port number in the module.')
portMediaModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portMediaModuleIndex.setDescription('The media module number in the module. Returns 0 if the port is not on a media module.')
portIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIfIndex.setDescription('The index value which uniquely identifies the interface to which this port is assigned. This is the same interface as identified by the same value of ifIndex. Returns 0 if the port is not a part of an interface.')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("tpfd", 1), ("fomm", 2), ("fosm", 3), ("hundredbasetx", 4), ("hundredbasefx", 5), ("core", 6), ("serialwan", 7), ("isdnU", 8), ("isdnST", 9), ("gigabasesxlx", 10), ("tenbasetx", 11), ("oc3mm", 12), ("oc3sm", 13), ("utp5", 14), ("csu", 15), ("console", 16), ("gigabasesx", 17), ("gigabaselx", 18), ("gigabaset", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
if mibBuilder.loadTexts: portType.setDescription('Type of the port. tpfd(1) : 10Mb Twisted pair full duplex port fomm(2) : 10Mb Fiber-optic multi-mode port fosm(3) : 10Mb Fiber-optic single-mode port hundredbasetx(4) : 100Mb Twisted pair port hundredbasefx(5) : 100Mb Fiber-optic port core(6) : Stack interface port serialwan(7) : Serial Wan Interface Port isdnU(8) : ISDN Basic Rate U interface isdnST(9) : ISDN Basic Rate S/T Interface gigabasesxlx(10) : 1Gb sx or lx port tenbasetx(11) : 10Mb Twisted pair port oc3mm(12) : ATM oc3 multi mode 155MB port oc3sm(13) : ATM oc3 single mode 155MB port utp5(14) : ATM 155MB utp5 port csu(15) : 1,544 Mb T1 Channel Service Unit port console(16) : RS-232 Console port gigabasesx(17) : 1Gb sx port gigabaselx(18) : 1Gb lx port gigabaset(19) : 1Gb tx port')
portStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatus.setStatus('mandatory')
if mibBuilder.loadTexts: portStatus.setDescription('The current operational state. This is a bit array which represents the state of the port. bit 0: disabled by configuration bit 1: hardware error bit 2: no link pulse bit 3: disabled by manager bit 4: disabled by access control bit 5: disabled by redundancy')
portLEDInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLEDInfo.setStatus('mandatory')
if mibBuilder.loadTexts: portLEDInfo.setDescription('State of all LEDs for the port (external ports only). There is one byte per LED. The most significant bit is used for blink/solid: Off = The LED is lit permanently. On = The LED blinks. The three least significant bits are used for color: 1 = not lit 2 = green 3 = yellow 4 = blue 5 = red 0+6+7 not used The four remaining bits are currently unused and must be 0.')
portTimeSinceLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTimeSinceLastStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: portTimeSinceLastStateChange.setDescription('sysUpTime of last portState change.')
portResetAllCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portResetAllCounters.setStatus('mandatory')
if mibBuilder.loadTexts: portResetAllCounters.setDescription('Reset all port counters to zero. This is not recommended because it violates the SNMP specification.')
portReset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2), ("holdinreset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portReset.setStatus('mandatory')
if mibBuilder.loadTexts: portReset.setDescription('Reset the port at the media level.')
portLastErrorID = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("badPhy", 2), ("polarity", 3), ("wrongSpeedLP", 4), ("jabberSeen", 5), ("partition", 6), ("reserved1", 7), ("reserved2", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLastErrorID.setStatus('mandatory')
if mibBuilder.loadTexts: portLastErrorID.setDescription("Type of last error that occurred on the port since the last link status change. badPhy is a hardware problem with the hub port. polarity means there's a cabling problem between the hub and the attached device. wrongSpeedLP means the device attached to the port is operating at the wrong speed. jabberSeen means you may have a faulty device attached to the port. partition means the port was automatically partitioned at least once. ")
portUserAssignedName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 7, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portUserAssignedName.setStatus('mandatory')
if mibBuilder.loadTexts: portUserAssignedName.setDescription('User-definable information about the port.')
snmpAuthViolation = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 3) + (0,1)).setObjects(("INTEL-GEN-MIB", "snmpAccessIP"), ("INTEL-GEN-MIB", "snmpAccessTime"), ("INTEL-GEN-MIB", "snmpAccessProtocol"), ("INTEL-GEN-MIB", "snmpAccessType"))
if mibBuilder.loadTexts: snmpAuthViolation.setDescription("This trap is sent when a device attempting to access the device fails to pass the snmpAuthTable for any of the supported protocols. If it is the SNMP protocol that is violated then the device must also send the 'Authentication failure' trap defined in MIB-2.")
snmpLoginViolation = NotificationType((1, 3, 6, 1, 4, 1, 343, 6, 3) + (0,2)).setObjects(("INTEL-GEN-MIB", "snmpAccessIP"), ("INTEL-GEN-MIB", "snmpAccessTime"), ("INTEL-GEN-MIB", "snmpAccessProtocol"), ("INTEL-GEN-MIB", "snmpAccessType"))
if mibBuilder.loadTexts: snmpLoginViolation.setDescription('This trap is sent when a device attempting to access the device fails to pass the user/password authentication for any of the supported protocols.')
chassisInserted = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 2) + (0,1)).setObjects(("INTEL-GEN-MIB", "chassisIndex"))
if mibBuilder.loadTexts: chassisInserted.setDescription('This trap is sent when a chassis is inserted in the stack.')
chassisRemoved = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 2) + (0,2)).setObjects(("INTEL-GEN-MIB", "chassisIndex"))
if mibBuilder.loadTexts: chassisRemoved.setDescription('This trap is sent when a chassis is removed from the stack.')
moduleInserted = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 3) + (0,1)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleInserted.setDescription('This trap is sent when a module is inserted in the chassis.')
moduleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 3) + (0,2)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleRemoved.setDescription('This trap is sent when a module is removed from the chassis.')
moduleTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 3) + (0,3)).setObjects(("INTEL-GEN-MIB", "moduleTemperatureStatus"), ("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"))
if mibBuilder.loadTexts: moduleTemperatureEvent.setDescription('This trap indicates that the temparature of the module has changed')
mediaModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 4) + (0,1)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"), ("INTEL-GEN-MIB", "mediaModuleIndex"))
if mibBuilder.loadTexts: mediaModuleInserted.setDescription('This trap is sent when a media module is inserted in the chassis/module.')
mediaModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 343, 7, 4) + (0,2)).setObjects(("INTEL-GEN-MIB", "moduleChassisIndex"), ("INTEL-GEN-MIB", "moduleIndex"), ("INTEL-GEN-MIB", "mediaModuleIndex"))
if mibBuilder.loadTexts: mediaModuleRemoved.setDescription('This trap is sent when a media module is removed from the chassis/module.')
mibBuilder.exportSymbols("INTEL-GEN-MIB", portReset=portReset, nstructure560s=nstructure560s, chassisUserAssignedNumber=chassisUserAssignedNumber, snmpAccessEntry=snmpAccessEntry, portMediaModuleIndex=portMediaModuleIndex, express9510u=express9510u, authNumber=authNumber, express550t=express550t, portTable=portTable, mediaModuleModuleIndex=mediaModuleModuleIndex, express460t_24=express460t_24, snmpAuthTable=snmpAuthTable, chassisUserAssignedName=chassisUserAssignedName, express110_24=express110_24, snmpAccessProtocol=snmpAccessProtocol, nstructure560=nstructure560, logLastChanged=logLastChanged, moduleTemperatureEvent=moduleTemperatureEvent, moduleBackupSwName=moduleBackupSwName, stackMultiAgentDefultChassisModule=stackMultiAgentDefultChassisModule, sysProductName=sysProductName, mediaModuleFirstPort=mediaModuleFirstPort, express8100x=express8100x, moduleVersion=moduleVersion, ipConf2Activate=ipConf2Activate, express110_12=express110_12, ipModuleBootpServerAddress=ipModuleBootpServerAddress, portResetAllCounters=portResetAllCounters, moduleSwTftpIp=moduleSwTftpIp, moduleChassisIndex=moduleChassisIndex, modulesext=modulesext, hw=hw, stackChassis=stackChassis, stackAgentModule=stackAgentModule, chassisRemoved=chassisRemoved, stackTopology=stackTopology, moduleInserted=moduleInserted, stackMaxChassis=stackMaxChassis, ipBroadcastAddress=ipBroadcastAddress, express10plus=express10plus, express8100u=express8100u, hubs=hubs, moduleMacAddress=moduleMacAddress, express9530=express9530, ipModuleConfigIndex=ipModuleConfigIndex, trapDelete=trapDelete, nstructure560t=nstructure560t, express8210=express8210, moduleIndex=moduleIndex, moduleAllPortStatus=moduleAllPortStatus, ipAddress=ipAddress, sysLocalMangementTimeout=sysLocalMangementTimeout, express920x=express920x, express8100fr=express8100fr, ipModuleConfTable=ipModuleConfTable, stackClass=stackClass, stackUserAssignedName=stackUserAssignedName, moduleLastPortChange=moduleLastPortChange, intel=intel, snmpAccessIP=snmpAccessIP, chassisEntry=chassisEntry, sysSystemDate=sysSystemDate, express8100uV4=express8100uV4, chassis=chassis, moduleSwUpdateResult=moduleSwUpdateResult, express330_24=express330_24, express8100stV4=express8100stV4, sysConfRollbackTimeout=sysConfRollbackTimeout, snmpAuthTableLastChange=snmpAuthTableLastChange, moduleUserAssignedType=moduleUserAssignedType, portUserAssignedName=portUserAssignedName, ipModuleSubNetMask=ipModuleSubNetMask, snmpTrapTable=snmpTrapTable, pysmiFakeCol1000=pysmiFakeCol1000, sysReset=sysReset, portChassisIndex=portChassisIndex, ports=ports, moduleAllPortLEDInfo=moduleAllPortLEDInfo, snmpAuthMaxEntries=snmpAuthMaxEntries, snmpAccessTime=snmpAccessTime, chassisTable=chassisTable, mediaModuleEntry=mediaModuleEntry, sysConfChange=sysConfChange, snmpAccessTable=snmpAccessTable, express210_24=express210_24, ipModuleConfEntry=ipModuleConfEntry, sysProducts=sysProducts, moduleSwStatus=moduleSwStatus, ipRouterAddress=ipRouterAddress, sysMibVersion=sysMibVersion, confTime=confTime, authDelete=authDelete, moduleAllPortType=moduleAllPortType, mediaModuleIndex=mediaModuleIndex, portType=portType, portLEDInfo=portLEDInfo, portIndex=portIndex, chassisType=chassisType, express550f=express550f, express9100=express9100, pysmiFakeCol1001=pysmiFakeCol1001, express220_24=express220_24, express9545u=express9545u, confTftpIp=confTftpIp, portModuleIndex=portModuleIndex, ipModuleAddressAssignment=ipModuleAddressAssignment, stack=stack, sysConfTable=sysConfTable, snmp=snmp, ipSubNetMask=ipSubNetMask, express9525st=express9525st, switches=switches, ip=ip, express220_12=express220_12, express9520st=express9520st, moduleSpecificObject=moduleSpecificObject, sysTimeOfDay=sysTimeOfDay, portStatus=portStatus, snmpLoginViolation=snmpLoginViolation, mediamodulesext=mediamodulesext, express330_16=express330_16, snmpAccessType=snmpAccessType, moduleRAM=moduleRAM, snmpAuthEntry=snmpAuthEntry, ipModuleConf2Confirm=ipModuleConf2Confirm, moduleNumberOfPorts=moduleNumberOfPorts, snmpAuthViolation=snmpAuthViolation, ipModuleConf2Activate=ipModuleConf2Activate, portLastErrorID=portLastErrorID, express9520u=express9520u, mediaModuleChassisIndex=mediaModuleChassisIndex, mib2ext=mib2ext, authProtocolAccessIpCommunity=authProtocolAccessIpCommunity, chassisModules=chassisModules, ipConfTable=ipConfTable, express9300=express9300, moduleBackupSwStatus=moduleBackupSwStatus, moduleBootSectionVersion=moduleBootSectionVersion, express8100wV4=express8100wV4, moduleIpAddress=moduleIpAddress, moduleSwDescription=moduleSwDescription, nstructure560fr=nstructure560fr, express9510st=express9510st, sysLogEntry=sysLogEntry, expressGigaSwitch=expressGigaSwitch, chassisext=chassisext, pysmiFakeCol1002=pysmiFakeCol1002, nstructure560l3s=nstructure560l3s, chassisUserAssignedType=chassisUserAssignedType, moduleEPROM=moduleEPROM, portTimeSinceLastStateChange=portTimeSinceLastStateChange, express100fx=express100fx, express8100st=express8100st, moduleFirstPort=moduleFirstPort, confStatus=confStatus, mediaModuleVersion=mediaModuleVersion, express510t=express510t, portsext=portsext, portIfIndex=portIfIndex, mediamodules=mediamodules, chassisMaxPSUs=chassisMaxPSUs, moduleTemperatureStatus=moduleTemperatureStatus, mediaModuleTable=mediaModuleTable, moduleSwLoadTime=moduleSwLoadTime, ipAddressAssignment=ipAddressAssignment, stackID=stackID, stackAgentChassis=stackAgentChassis, express9515u=express9515u, moduleEntry=moduleEntry, moduleMaxMediaModules=moduleMaxMediaModules, stacks=stacks, moduleTable=moduleTable, moduleSwTftpIpAndSwName=moduleSwTftpIpAndSwName, moduleFLASHPROM=moduleFLASHPROM, mediaModuleInserted=mediaModuleInserted, moduleRemoved=moduleRemoved, nstructure560tr=nstructure560tr, express9400=express9400, portEntry=portEntry, mediaModuleRemoved=mediaModuleRemoved, express9545st=express9545st, express9525u=express9525u, logFileName=logFileName, moduleUserAssignedNumber=moduleUserAssignedNumber, ipConfEntry=ipConfEntry, modules=modules, trapIpAndGroupAndCommunity=trapIpAndGroupAndCommunity, ipModuleChassisIndex=ipModuleChassisIndex, moduleBackupSwLoadTime=moduleBackupSwLoadTime, ipModuleAddress=ipModuleAddress, moduleBackupSwTftpIp=moduleBackupSwTftpIp, confName=confName, moduleLEDInfo=moduleLEDInfo, express210_12=express210_12, ipBootpServerAddress=ipBootpServerAddress, routers=routers, ipModuleRouterAddress=ipModuleRouterAddress, express520t=express520t, express9515st=express9515st, system=system, moduleType=moduleType, logEntries=logEntries, express9535=express9535, moduleSerialNumber=moduleSerialNumber, snmpTrapEntry=snmpTrapEntry, mediaModuleNumberOfPorts=mediaModuleNumberOfPorts, express460t_16=express460t_16, sysConfEntry=sysConfEntry, trapNumber=trapNumber, express10=express10, mediaModuleType=mediaModuleType, sysConfChangeLastResponse=sysConfChangeLastResponse, moduleBackupSwDescription=moduleBackupSwDescription, sysProductSubType=sysProductSubType, sysLogTable=sysLogTable, snmpTrapMaxEntries=snmpTrapMaxEntries, chassisIndex=chassisIndex, moduleSwName=moduleSwName, chassisInserted=chassisInserted, ipModuleModuleIndex=ipModuleModuleIndex, express8220=express8220, sysVendorName=sysVendorName, chassisMaxModules=chassisMaxModules, stackext=stackext, logType=logType, ipModuleBroadcastAddress=ipModuleBroadcastAddress, moduleUserAssignedName=moduleUserAssignedName)
