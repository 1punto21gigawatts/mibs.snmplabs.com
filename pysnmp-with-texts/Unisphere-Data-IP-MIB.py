#
# PySNMP MIB module Unisphere-Data-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:31:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
ipCidrRouteEntry, = mibBuilder.importSymbols("IP-FORWARD-MIB", "ipCidrRouteEntry")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Counter64, ModuleIdentity, Bits, TimeTicks, NotificationType, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, Unsigned32, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "ModuleIdentity", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "Unsigned32", "Integer32", "ObjectIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdEnable, UsdIpAddrLessIf, UsdNextIfIndex = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdEnable", "UsdIpAddrLessIf", "UsdNextIfIndex")
usdIpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12))
usdIpMIB.setRevisions(('2002-04-03 14:04', '2001-07-05 14:00', '2001-06-18 19:11', '2000-07-31 00:00', '1999-11-09 00:00', '1999-09-16 00:00', '1998-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdIpMIB.setRevisionsDescriptions(('Obsoleted the following objects with the introduction of QoS: usdIpIfStatsInForwardedPackets usdIpIfStatsInForwardedOctets usdIpIfStatsOutRequestedPackets usdIpIfStatsOutRequesteOctets usdIpIfStatsGreenOutSchedDropPackets usdIpIfStatsYellowOutSchedDropPackets usdIpIfStatsRedOutSchedDropOctets usdIpIfStatsGreenOutSchedDropOctets usdIpIfStatsYellowOutSchedDropOctets usdIpIfStatsRedOutSchedDropOctet ', 'Added the usdIpIfAssocTable.', 'o In usdIpIfTable, added the following: usdIpIfSAValidation usdIpIfCreationType usdIpIfProfileId usdIpIfAlwaysUp usdIpIfLoopback usdIpIfLoopbackUid usdIpIfDebounceTime usdIpIfForwarding usdIpIfForceFragmentation usdIpIfSharesLowerUid usdIpIfFilterOptions usdIpIfName usdIpIfArpTimeout usdIpIfAdminSpeed usdIpIfMultipathMode usdIpIfSharedNhAddr usdIpIfSharedNhRouterId usdIpIfPrimaryIpAddress usdIpIfPrimaryIpMask usdIpIfOperDebounceTime o In usdIpAddrTable, added usdIpAdEntIsSecondary o In usdIpAddrTable, deprecated usdIpAdEntIgmpEnable o Added following scalars: usdIpDebounceTime usdIpRouterId usdIpSourceRoutingAdminStatus usdIpVpnIdOui usdIpVpnIdIndex o In usdIpIfStatsTable, added: usdIpIfStatsGreenOutSchedDropPackets usdIpIfStatsYellowOutSchedDropPackets usdIpIfStatsRedOutSchedDropPackets usdIpIfStatsGreenOutSchedDropOctets usdIpIfStatsYellowOutSchedDropOctets usdIpIfStatsRedOutSchedDropOctets o Changed the type of usdIpRouteStaticNextHop to UsdIpAddrLessIf to support setting static routes next hop values to unnumbered IP interfaces. This type is a Unisphere TC, which can transparently support the original IpAddress type, so existing clients are not negatively affected by this change.', 'o Added extended IP interface statistics.', 'o In usdIpIfTable, added null(5) enumeration value for usdIpIfType. o Added usdIpIfTypeId object.', 'o In usdIpAddrTable, added usdIpAdEntUnnumLoopbackIfIndex, usdIpAdEntIrdpEnable, usdIpAdEntAccessRouteEnable, usdIpAdEntAccessRouteHost. o In usdIpRouteStaticTable, changed Tos to Preference, and added Tag. o Added usdIpCidrRouteTable (proprietary extensions to standard ipCidrRouteTable).', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdIpMIB.setLastUpdated('200204031404Z')
if mibBuilder.loadTexts: usdIpMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdIpMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 E-mail: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdIpMIB.setDescription('The IP Protocol MIB for the Unisphere Networks Inc. enterprise.')
usdIpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1))
usdIpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1))
usdIpAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2))
usdIpRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3))
usdIpGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 4))
usdIpDebounceTime = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdIpDebounceTime.setStatus('current')
if mibBuilder.loadTexts: usdIpDebounceTime.setDescription('The time in milliseconds that an event has to be in the same state before being reported.')
usdIpRouterId = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdIpRouterId.setStatus('current')
if mibBuilder.loadTexts: usdIpRouterId.setDescription('The router-id that this IP router will use to identify itself.')
usdIpSourceRoutingAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 4, 3), UsdEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdIpSourceRoutingAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpSourceRoutingAdminStatus.setDescription('The administrative setting for source routing.')
usdIpVpnIdOui = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdIpVpnIdOui.setStatus('current')
if mibBuilder.loadTexts: usdIpVpnIdOui.setDescription('The OUI portion of the VPN identifier. This object must be set coincident with the index portion of the VpnId (usdIpVpnIdIndex), otherwise the set will fail.')
usdIpVpnIdIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 4, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdIpVpnIdIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpVpnIdIndex.setDescription('The index portion of the VPN identifier. This object must be set coincident with the OUI portion of the VpnId (usdIpVpnOui), otherwise the set will fail.')
usdIpNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 1), UsdNextIfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpNextIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpNextIfIndex.setDescription('Coordinate ifIndex value allocation for entries in usdIpIfTable. A GET of this object returns the next available ifIndex value to be used to create an entry in the associated interface table; or zero, if no valid ifIndex value is available. This object also returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that ifIndex allocation is unintended. Successive GETs will typically return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously. ')
usdIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2), )
if mibBuilder.loadTexts: usdIpIfTable.setStatus('current')
if mibBuilder.loadTexts: usdIpIfTable.setDescription('This table contains entries for IP interfaces present in the system.')
usdIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-IP-MIB", "usdIpIfIndex"))
if mibBuilder.loadTexts: usdIpIfEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpIfEntry.setDescription('Each entry describes the characteristics of an IP interface. Creating/deleting entries in this table causes corresponding entries for be created/deleted in ifTable/ifXTable/usdIfTable.')
usdIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpIfIndex.setDescription('The ifIndex of the IP interface. When creating entries in this table, suitable values for this object are determined by reading usdIpNextIfIndex.')
usdIpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpIfRowStatus.setDescription("Controls creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create an entry in this table, the following entry objects MUST be explicitly configured: usdIpIfRowStatus usdIpIfLowerIfIndex In addition, when creating an entry the following conditions must hold: A value for usdIpIfIndex must have been determined previously, typically by reading usdIpNextIfIndex. The interface identified by a nonzero usdIpIfLowerIfIndex must exist. If usdIpIfType is configured to be 'loopback' or 'null', usdIpIfLowerIfIndex must be set to zero. The selected value of usdIpIfType must be compatible with the underlying media interface identified by usdIpIfLowerIfIndex. Once created, the following objects may not be modified: usdIpIfLowerIfIndex usdIpIfType usdIpIfTypeId A corresponding entry in ifTable/ifXTable/usdIfTable is created/destroyed as a result of creating/destroying an entry in this table.")
usdIpIfLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpIfLowerIfIndex.setDescription('The ifIndex of a media interface over which this IP interface is to be layered. A value of zero is used when usdIpIfType is specified to be loopback(4) or null(5).')
usdIpIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 0), ("broadcast", 1), ("pointToPoint", 2), ("nbma", 3), ("loopback", 4), ("null", 5))).clone('pointToPoint')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfType.setStatus('current')
if mibBuilder.loadTexts: usdIpIfType.setDescription('The type of network interface.')
usdIpIfTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfTypeId.setStatus('current')
if mibBuilder.loadTexts: usdIpIfTypeId.setDescription('A numerical distinguisher relevant for the loopback and null IP interface types. loopback Must be unique for all IP interfaces of this type. null Must be unique for all IP interfaces of this type. (FOR IMPLEMENTATIONS THAT SUPPORT ONE AND ONLY ONE NULL INTERFACE, THE VALUE ZERO MUST BE USED.) For all other IP interface types, this object is not relevant, reports a value of zero when read, and must be given a value of zero if explicitly configured during creation.')
usdIpIfSAValidationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 6), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfSAValidationEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpIfSAValidationEnable.setDescription('Enable/disable source address validation on this IP network interface.')
usdIpIfCreationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfCreationType.setStatus('current')
if mibBuilder.loadTexts: usdIpIfCreationType.setDescription('Specify if the interface was created due to static configuration or due to some dynamic event. Dynamic interfaces are not stored in NVS.')
usdIpIfProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfProfileId.setStatus('current')
if mibBuilder.loadTexts: usdIpIfProfileId.setDescription('Identified the profile used when creating a dynamic interface.')
usdIpIfAlwaysUp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 9), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfAlwaysUp.setStatus('current')
if mibBuilder.loadTexts: usdIpIfAlwaysUp.setDescription('When enabled, the interface is determined to be up regardless of the state of any lower layer interfaces.')
usdIpIfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 10), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfLoopback.setStatus('current')
if mibBuilder.loadTexts: usdIpIfLoopback.setDescription('Indicates whether the interface is a loopback type interface.')
usdIpIfLoopbackUid = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfLoopbackUid.setStatus('current')
if mibBuilder.loadTexts: usdIpIfLoopbackUid.setDescription('Specify the interface index of a loopback interface whose IP address should be used when sourcing traffic on this interface. Useful for unnumbered interfaces.')
usdIpIfDebounceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfDebounceTime.setStatus('current')
if mibBuilder.loadTexts: usdIpIfDebounceTime.setDescription('Specifies the time in milliseconds that a layer 2 interface must remain in a state before it is conveyed to the IP layer. Useful for interfaces that experience brief outages that should not constitute a route flap. A value of 0 indicates that the feature is disabled.')
usdIpIfForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 13), UsdEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfForwarding.setStatus('current')
if mibBuilder.loadTexts: usdIpIfForwarding.setDescription('Enable/disable the forwarding of IP traffic to/from this interface. This is currently only applicable to the out-of-band management port.')
usdIpIfForceFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 14), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfForceFragmentation.setStatus('current')
if mibBuilder.loadTexts: usdIpIfForceFragmentation.setDescription('Force the fragmentation of all IP packets greater than the interface MTU even if the DF bit is set.')
usdIpIfSharesLowerUid = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 15), UsdEnable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfSharesLowerUid.setStatus('current')
if mibBuilder.loadTexts: usdIpIfSharesLowerUid.setDescription('Identifies the interface as sharing a lower interface with another interface vs owning it outright.')
usdIpIfFilterOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfFilterOptions.setStatus('current')
if mibBuilder.loadTexts: usdIpIfFilterOptions.setDescription('Bit mask to configure the interface to filter packets with IP header options. Currently, either no bits or all bits may be set.')
usdIpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfName.setStatus('current')
if mibBuilder.loadTexts: usdIpIfName.setDescription('Specify the IP interface discriminator for an IP interface not attached to a layer 2 interface with a specific location.')
usdIpIfArpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 18), Unsigned32().clone(21600)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfArpTimeout.setStatus('current')
if mibBuilder.loadTexts: usdIpIfArpTimeout.setDescription('Specify the ARP timeout for this interface in seconds.')
usdIpIfAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: usdIpIfAdminSpeed.setDescription('Set an administrative speed for the interface that overrides the speed learned from the lower layer. A value of 0 indicates no speed is specified.')
usdIpIfMultipathMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hashed", 1), ("roundRobin", 2))).clone('hashed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfMultipathMode.setStatus('current')
if mibBuilder.loadTexts: usdIpIfMultipathMode.setDescription('Configure the mode this interface should use when forwarding equal-cost multipath traffic.')
usdIpIfSharedNhAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfSharedNhAddr.setStatus('current')
if mibBuilder.loadTexts: usdIpIfSharedNhAddr.setDescription('The IP address of either a direct or indirect next-hop toward which this shared interface should point.')
usdIpIfSharedNhRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpIfSharedNhRouterId.setStatus('current')
if mibBuilder.loadTexts: usdIpIfSharedNhRouterId.setDescription('The identifier for the domain of a virtual router in which the usdIpIfSharedNhAddr should be resolved.')
usdIpIfPrimaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfPrimaryIpAddress.setStatus('current')
if mibBuilder.loadTexts: usdIpIfPrimaryIpAddress.setDescription('The IP address of the primary IP network on an interface.')
usdIpIfPrimaryIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfPrimaryIpMask.setStatus('current')
if mibBuilder.loadTexts: usdIpIfPrimaryIpMask.setDescription('The IP address mask of the primary IP network on an interface.')
usdIpIfOperDebounceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfOperDebounceTime.setStatus('current')
if mibBuilder.loadTexts: usdIpIfOperDebounceTime.setDescription('Indicates the operational time in milliseconds that a layer2 interface must remain in a state before it is conveyed to the IP layer. Useful for interfaces that experience brief outages that should not constitute a route flap. A value of 0 indicates that the feature is disabled.')
usdIpIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3), )
if mibBuilder.loadTexts: usdIpIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsTable.setDescription('This table contains entries for IP interfaces present in the system.')
usdIpIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1), ).setIndexNames((0, "Unisphere-Data-IP-MIB", "usdIpIfStatsIndex"))
if mibBuilder.loadTexts: usdIpIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsEntry.setDescription('Each entry contains statistics for an IP interface.')
usdIpIfStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdIpIfStatsIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsIndex.setDescription('The ifIndex of the IP interface.')
usdIpIfStatsInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInPackets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsInPackets.setDescription('The number of packets received on this interface.')
usdIpIfStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsInOctets.setDescription('The number of octets received on this interface.')
usdIpIfStatsInPoliciedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInPoliciedPackets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsInPoliciedPackets.setDescription('The number of packets dropped due to rate limiters attached to this interface.')
usdIpIfStatsInPoliciedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInPoliciedOctets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsInPoliciedOctets.setDescription('The number of octets dropped due to rate limiters attached to this interface.')
usdIpIfStatsInErrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInErrorPackets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsInErrorPackets.setDescription('The number of packets received with errors on this interface.')
usdIpIfStatsInSpoofedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInSpoofedPackets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsInSpoofedPackets.setDescription('The number of packets received on this interface with destination unknown.')
usdIpIfStatsInForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInForwardedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpIfStatsInForwardedPackets.setDescription('The number of packets received on this interface that were forwarded by any interface in the system.')
usdIpIfStatsInForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsInForwardedOctets.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpIfStatsInForwardedOctets.setDescription('The number of octets received on this interface that were forwarded by any interface in the system.')
usdIpIfStatsOutForwardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutForwardedPackets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsOutForwardedPackets.setDescription('The number of packets forwarded by this interface.')
usdIpIfStatsOutForwardedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutForwardedOctets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsOutForwardedOctets.setDescription('The number of octets forwarded by this interface.')
usdIpIfStatsOutSchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutSchedDropPackets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsOutSchedDropPackets.setDescription('The number of packets dropped at this interface due to output queue congestion.')
usdIpIfStatsOutSchedDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutSchedDropOctets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsOutSchedDropOctets.setDescription('The number of octets dropped at this interface due to output queue congestion.')
usdIpIfStatsOutRequestedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutRequestedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpIfStatsOutRequestedPackets.setDescription('The number of packets requested for transmission at this interface.')
usdIpIfStatsOutRequestedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutRequestedOctets.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpIfStatsOutRequestedOctets.setDescription('The number of octets requested for transmission at this interface.')
usdIpIfStatsOutPoliciedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutPoliciedPackets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsOutPoliciedPackets.setDescription('The number of packets dropped due to rate limiters attached to this interface.')
usdIpIfStatsOutPoliciedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsOutPoliciedOctets.setStatus('current')
if mibBuilder.loadTexts: usdIpIfStatsOutPoliciedOctets.setDescription('The number of octets dropped due to rate limiters attached to this interface.')
usdIpIfStatsGreenOutSchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsGreenOutSchedDropPackets.setStatus('deprecated')
if mibBuilder.loadTexts: usdIpIfStatsGreenOutSchedDropPackets.setDescription('The number of packets dropped at this interface due to output queue congestion in the green output queue. The green output queue has lowest drop probability.')
usdIpIfStatsYellowOutSchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsYellowOutSchedDropPackets.setStatus('deprecated')
if mibBuilder.loadTexts: usdIpIfStatsYellowOutSchedDropPackets.setDescription('The number of packets dropped at this interface due to output queue congestion in the yellow output queue. The yellow output queue has medium level drop probability.')
usdIpIfStatsRedOutSchedDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsRedOutSchedDropPackets.setStatus('deprecated')
if mibBuilder.loadTexts: usdIpIfStatsRedOutSchedDropPackets.setDescription('The number of packets dropped at this interface due to output queue congestion in the red output queue. The red output queue has highest level drop probability.')
usdIpIfStatsGreenOutSchedDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsGreenOutSchedDropOctets.setStatus('deprecated')
if mibBuilder.loadTexts: usdIpIfStatsGreenOutSchedDropOctets.setDescription('The number of octets dropped at this interface due to output queue congestion in the green output queue. The green output queue has the lowest drop probability.')
usdIpIfStatsYellowOutSchedDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsYellowOutSchedDropOctets.setStatus('deprecated')
if mibBuilder.loadTexts: usdIpIfStatsYellowOutSchedDropOctets.setDescription('The number of octets dropped at this interface due to output queue congestion in the yellow output queue. The yellow output queue has the medium drop probability.')
usdIpIfStatsRedOutSchedDropOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfStatsRedOutSchedDropOctets.setStatus('deprecated')
if mibBuilder.loadTexts: usdIpIfStatsRedOutSchedDropOctets.setDescription('The number of octets dropped at this interface due to output queue congestion in the red output queue. The red output queue has the highest drop probability.')
usdIpIfAssocTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 4), )
if mibBuilder.loadTexts: usdIpIfAssocTable.setStatus('current')
if mibBuilder.loadTexts: usdIpIfAssocTable.setDescription('This table contains entries of interfaces present in the system.')
usdIpIfAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 4, 1), ).setIndexNames((0, "Unisphere-Data-IP-MIB", "usdIpIfAssocLowerIfIndex"))
if mibBuilder.loadTexts: usdIpIfAssocEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpIfAssocEntry.setDescription('Each entry in this table returns the ifIndex of the IP interface associated with the lower layer ifIndex supplied as the index to this table. The purpose of this table is to translate L2 interfaces to corresponding L3 interfaces for billing applications. Since interesting billing related statistics are kept at L3, it is often useful to know the L2-L3 relationship. Note that this table is not confined to L2-L3 relationships. Any interface sublayer can be used to access this table to determine the relationship with the L3 interface.')
usdIpIfAssocLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdIpIfAssocLowerIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpIfAssocLowerIfIndex.setDescription('The ifIndex of the lower layer interface.')
usdIpIfAssocIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 1, 4, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpIfAssocIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpIfAssocIpIfIndex.setDescription("The ifIndex of the IP interface associated with the lower layer usdIpIfAssocLowerIfIndex. In cases where there is not a 1 to 1 relationship between lower layer and higher layer IP interface, a zero value usdIpIfAssocIpIfIndex is returned; this includes the case where an IP interface has not yet been configued at the top of the interface column. An example usage of this table: Assume a user needs to know the ifIndex relationship for all interfaces with the L3 IP interface. Then starting at the bottom of the stack below, the ATM and AAL5's ifIndex would be used to access the table. The agent will return 0 for each of these cases because multiple customer's traffic is demultiplexed at these levels. IP_1 PPP IP_2 ATM1483_1 ATM1483_2 \\ / AAL5 ATM If the ATM1483_1 ifIndex is used to access this table, then the value of usdIpIfAssocLowerIfIndex will be set to the ifIndex of IP_1. Similarily, if the ATM1483_2 ifIndex is used to access this table, the usdIpifAssocLowerIfIndex will set to the ifIndex of IP_2.")
usdIpAddrGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 1))
usdIpArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdIpArpTimeout.setStatus('current')
if mibBuilder.loadTexts: usdIpArpTimeout.setDescription('Timeout, in seconds, for ARP requests issued by this entity.')
usdIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2), )
if mibBuilder.loadTexts: usdIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: usdIpAddrTable.setDescription("IP addressing information for this entity's IP network interfaces. Representation of both numbered and unnumbered IP interfaces is supported.")
usdIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1), ).setIndexNames((0, "Unisphere-Data-IP-MIB", "usdIpAdEntAddr"))
if mibBuilder.loadTexts: usdIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpAddrEntry.setDescription("IP addressing information for one of this entity's IP network interfaces. This interface could be either numbered or unnumbered. The following objects correspond to (read-only) counterparts in the IP-MIB ipAddrTable: usdIpAdEntAddr usdIpAdEntIfIndex usdIpAdEntNetMask usdIpAdEntBcastAddr usdIpAdEntReasmMaxSize ")
usdIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 1), UsdIpAddrLessIf())
if mibBuilder.loadTexts: usdIpAdEntAddr.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntAddr.setDescription("The IP address for a numbered IP network interface, if this object's value has the form 'a.b.c.d', where 'a' is nonzero; or, the ifIndex (interpreting the low 24 bits of this value as an integer) of an unnumbered ('address-less') IP interface, if this object's value has the form '0.b.c.d'.")
usdIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 2), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntIfIndex.setDescription("The ifIndex of the network interface to which this entry's IP addressing mode pertains.")
usdIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 3), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntNetMask.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntNetMask.setDescription("The IP subnet mask associated with the IP address of this entry. The network and host bit fields of the mask are filled with 1's and 0's, respectively. If this entry represents an unnumbered IP interface, this object should have a value of all ones.")
usdIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpAdEntBcastAddr.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the IP network interface associated with this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this interface.')
usdIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpAdEntReasmMaxSize.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
usdIpAdEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntRowStatus.setDescription('Controls the creation/deletion of entries in this table according to the RowStatus textual convention, constrained to support the following values only: createAndGo destroy To create entries for both numbered and unnumbered IP interfaces, the following entry objects MUST be explicitly configured: usdIpAdEntRowStatus usdIpAdEntIfIndex To create an entry for a numbered IP interface, the following conditions must also hold: <none> To create an entry for an unnumbered IP interface, the following conditions must also hold: usdIpAdEntUnnumLoopbackIfIndex must be configured with a nonzero ifIndex value of an IP loopback interface.')
usdIpAdEntAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 7), UsdEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntAdminStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntAdminStatus.setDescription('Enable/disable operation of IP on this IP network interface.')
usdIpAdEntArpRspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 8), UsdEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntArpRspEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntArpRspEnable.setDescription('Enable/disable ARP response on this IP network interface.')
usdIpAdEntProxyArpRspEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 9), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntProxyArpRspEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntProxyArpRspEnable.setDescription('Enable/disable proxy ARP response on this IP network interface.')
usdIpAdEntIgmpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 10), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntIgmpEnable.setStatus('deprecated')
if mibBuilder.loadTexts: usdIpAdEntIgmpEnable.setDescription('Enable/disable IGMP operation on this IP network interface.')
usdIpAdEntDirectedBcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 11), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntDirectedBcastEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntDirectedBcastEnable.setDescription('Enable/disable forwarding of directed broadcasts on this IP network interface.')
usdIpAdEntIcmpRedirectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 12), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntIcmpRedirectEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntIcmpRedirectEnable.setDescription('Enable/disable transmission of ICMP Redirect messages on this IP network interface.')
usdIpAdEntIcmpMaskReplyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 13), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntIcmpMaskReplyEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntIcmpMaskReplyEnable.setDescription('Enable/disable transmission of ICMP Mask Reply messages on this IP network interface.')
usdIpAdEntIcmpUnreachEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 14), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntIcmpUnreachEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntIcmpUnreachEnable.setDescription('Enable/disable transmission of ICMP Unreachable messages on this IP network interface.')
usdIpAdEntMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntMtu.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntMtu.setDescription('The configured MTU size for this IP network interface. If set to zero, the default MTU size, as determined by the underlying network media, is used.')
usdIpAdEntUnnumLoopbackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 16), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntUnnumLoopbackIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntUnnumLoopbackIfIndex.setDescription('For unnumbered interfaces, the ifIndex of the IP loopback interface whose IP address is used as the source IP address for IP packets transmitted on the unnumbered network. For numbered interfaces, this object has a value of zero.')
usdIpAdEntIrdpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 17), UsdEnable().clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntIrdpEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntIrdpEnable.setDescription('Controls whether ICMP Router Discovery Protocol operation is permitted to be sent on this network.')
usdIpAdEntAccessRouteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 18), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntAccessRouteEnable.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntAccessRouteEnable.setDescription('If enabled, then establishment/loss of a point-to-point network connection causes a host route for the remote host to be created/deleted automatically.')
usdIpAdEntAccessRouteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpAdEntAccessRouteHost.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntAccessRouteHost.setDescription('If an access route has been established, the IP address of the remote host is reported by this object; otherwise, this object contains the value 0.0.0.0.')
usdIpAdEntIsSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 2, 2, 1, 20), UsdEnable().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpAdEntIsSecondary.setStatus('current')
if mibBuilder.loadTexts: usdIpAdEntIsSecondary.setDescription('If enabled, then the IP address corresponding to this entry is a secondary address. If disabled, then the IP address corresponding to this entry is te primary address.')
usdIpRouteGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 1))
usdIpRouteLimit = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdIpRouteLimit.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteLimit.setDescription('Maximum number of IP routes maintained by this entity. Setting a value lower than the current number of routes prevents additional routes from being learned or configured, but does not cause existing excess routes to be deleted to enforce the new limit.')
usdIpRouteStaticTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2), )
if mibBuilder.loadTexts: usdIpRouteStaticTable.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticTable.setDescription("Table of static routes configured on this entity. The object definitions and indexing for this table are chosen to closely align with the IP-FORWARD-MIB's ipCidrRouteTable. This table serves three purposes: 1. Provide the means for configuring static routes. 2. Provide an efficient view of static routes (otherwise they must be observed by traversing the entire routing table). 3. Provide view of static routes configured on network interfaces that are currently inactive. (In this implementation, static routes configured on inactive interfaces are not visible in the routing table.)")
usdIpRouteStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1), ).setIndexNames((0, "Unisphere-Data-IP-MIB", "usdIpRouteStaticDest"), (0, "Unisphere-Data-IP-MIB", "usdIpRouteStaticMask"), (0, "Unisphere-Data-IP-MIB", "usdIpRouteStaticPref"), (0, "Unisphere-Data-IP-MIB", "usdIpRouteStaticNextHop"))
if mibBuilder.loadTexts: usdIpRouteStaticEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticEntry.setDescription('A static route.')
usdIpRouteStaticDest = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteStaticDest.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticDest.setDescription('The destination IP address of this route. This object may not take a Multicast (Class D) address value. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the usdIpRouteStaticMask object is not equal to x.')
usdIpRouteStaticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteStaticMask.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the usdIpRouteStaticDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the usdIpRouteStaticMask by reference to the IP Address Class. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the usdIpRouteStaticDest object is not equal to usdIpRouteStaticDest.')
usdIpRouteStaticPref = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteStaticPref.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticPref.setDescription('The preference of this static route. Higher values correspond to higher preference. A static route with preference of zero will never be installed as an active route.')
usdIpRouteStaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 4), UsdIpAddrLessIf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteStaticNextHop.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticNextHop.setDescription('The address of the next hop toward the destination.')
usdIpRouteStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRouteStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticRowStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
usdIpRouteStaticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRouteStaticIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticIfIndex.setDescription('The ifIndex value which identifies the local interface through which the next hop of this route should be reached. A value of zero means the router should automatically determine the interface through which the specified next-hop address is reached. An implementation may disallow non-zero values from being configured.')
usdIpRouteStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1), ("incomplete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpRouteStaticStatus.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticStatus.setDescription('The operational status of this static route. active(0) indicates this route is currently being used to reach the specified destination. inactive(1) indicates this route is considered valid, but currently is superseded by another routing table entry for the destination, having a higher preference value. incomplete(2) indicates this route entry contains information that is incomplete, or is inconsistent with other system configuration (for example, the interface specified in usdIpRouteStaticIfIndex does not exist).')
usdIpRouteStaticNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRouteStaticNextHopAS.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticNextHopAS.setDescription("The Autonomous System Number of the Next Hop. The semantics of this object are determined by the routing-protocol specified in the route's ipCidrRouteProto value. When this object is unknown or not relevant its value should be set to zero.")
usdIpRouteStaticMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 9), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRouteStaticMetric.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticMetric.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's ipCidrRouteProto value. If this metric is not used, its value should be set to -1.")
usdIpRouteStaticTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdIpRouteStaticTag.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteStaticTag.setDescription('A tag value for this static route.')
usdIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 3), )
if mibBuilder.loadTexts: usdIpCidrRouteTable.setStatus('current')
if mibBuilder.loadTexts: usdIpCidrRouteTable.setDescription("Table of routes active on this entity. This table is an augmentation of the IP-FORWARD-MIB's ipCidrRouteTable.")
usdIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 3, 1), )
ipCidrRouteEntry.registerAugmentions(("Unisphere-Data-IP-MIB", "usdIpCidrRouteEntry"))
usdIpCidrRouteEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: usdIpCidrRouteEntry.setStatus('current')
if mibBuilder.loadTexts: usdIpCidrRouteEntry.setDescription('Additional attributes of an active route.')
usdIpCidrRoutePref = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpCidrRoutePref.setStatus('current')
if mibBuilder.loadTexts: usdIpCidrRoutePref.setDescription('The preference of this route. Higher values correspond to higher preference.')
usdIpCidrRouteArea = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpCidrRouteArea.setStatus('current')
if mibBuilder.loadTexts: usdIpCidrRouteArea.setDescription('The Area to which this route pertains. A value of 0.0.0.0 indicates no area is identified.')
usdIpCidrRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 1, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdIpCidrRouteTag.setStatus('current')
if mibBuilder.loadTexts: usdIpCidrRouteTag.setDescription('A tag value for this route.')
usdIpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4))
usdIpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 1))
usdIpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2))
usdIpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 1, 1)).setObjects(("Unisphere-Data-IP-MIB", "usdIpInterfaceGroup"), ("Unisphere-Data-IP-MIB", "usdIpAddressGroup"), ("Unisphere-Data-IP-MIB", "usdIpRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpCompliance = usdIpCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpCompliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere IP MIB. This statement became obsolete when the IP interface and IP address groups changed and the global objects were added.')
usdIpCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 1, 2)).setObjects(("Unisphere-Data-IP-MIB", "usdIpInterfaceGroup2"), ("Unisphere-Data-IP-MIB", "usdIpAddressGroup2"), ("Unisphere-Data-IP-MIB", "usdIpRouteGroup"), ("Unisphere-Data-IP-MIB", "usdIpGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpCompliance2 = usdIpCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpCompliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere IP MIB. This statement became obsolete when the usdIpIfAssocTable was added.')
usdIpCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 1, 3)).setObjects(("Unisphere-Data-IP-MIB", "usdIpInterfaceGroup3"), ("Unisphere-Data-IP-MIB", "usdIpAddressGroup2"), ("Unisphere-Data-IP-MIB", "usdIpRouteGroup"), ("Unisphere-Data-IP-MIB", "usdIpGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpCompliance3 = usdIpCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpCompliance3.setDescription('Obsolete compliance statement for entities which implement the Unisphere IP MIB. This statement became obsolete when the QoS related objects were obsoleted.')
usdIpCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 1, 4)).setObjects(("Unisphere-Data-IP-MIB", "usdIpInterfaceGroup4"), ("Unisphere-Data-IP-MIB", "usdIpAddressGroup2"), ("Unisphere-Data-IP-MIB", "usdIpRouteGroup"), ("Unisphere-Data-IP-MIB", "usdIpGlobalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpCompliance4 = usdIpCompliance4.setStatus('current')
if mibBuilder.loadTexts: usdIpCompliance4.setDescription('The compliance statement for entities which implement the Unisphere IP MIB.')
usdIpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 1)).setObjects(("Unisphere-Data-IP-MIB", "usdIpNextIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfRowStatus"), ("Unisphere-Data-IP-MIB", "usdIpIfLowerIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfType"), ("Unisphere-Data-IP-MIB", "usdIpIfTypeId"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInErrorPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInSpoofedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInForwardedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInForwardedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutRequestedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutRequestedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpInterfaceGroup = usdIpInterfaceGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpInterfaceGroup.setDescription('Obsolete collection of objects for managing IP interface capabilities in a Unisphere product. This group became obsolete when new objects were added to the usdIpIfTable and the usdIpIfStatsTable.')
usdIpAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 2)).setObjects(("Unisphere-Data-IP-MIB", "usdIpArpTimeout"), ("Unisphere-Data-IP-MIB", "usdIpAdEntRowStatus"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpAdEntNetMask"), ("Unisphere-Data-IP-MIB", "usdIpAdEntAdminStatus"), ("Unisphere-Data-IP-MIB", "usdIpAdEntArpRspEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntProxyArpRspEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIgmpEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntDirectedBcastEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIcmpRedirectEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIcmpMaskReplyEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIcmpUnreachEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntMtu"), ("Unisphere-Data-IP-MIB", "usdIpAdEntUnnumLoopbackIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIrdpEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntAccessRouteEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntAccessRouteHost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpAddressGroup = usdIpAddressGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpAddressGroup.setDescription('Obsolete collection of objects for managing IP address capabilities in a Unisphere product. This group became obsolete when usdIpAdEntIgmpEnable was deprecated and usdIpAdEntIsSecondary was added.')
usdIpRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 3)).setObjects(("Unisphere-Data-IP-MIB", "usdIpRouteLimit"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticDest"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticMask"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticPref"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticNextHop"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticRowStatus"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticStatus"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticNextHopAS"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticMetric"), ("Unisphere-Data-IP-MIB", "usdIpRouteStaticTag"), ("Unisphere-Data-IP-MIB", "usdIpCidrRoutePref"), ("Unisphere-Data-IP-MIB", "usdIpCidrRouteArea"), ("Unisphere-Data-IP-MIB", "usdIpCidrRouteTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpRouteGroup = usdIpRouteGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpRouteGroup.setDescription('A collection of objects for managing IP routing capabilities in a Unisphere product.')
usdIpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 4)).setObjects(("Unisphere-Data-IP-MIB", "usdIpDebounceTime"), ("Unisphere-Data-IP-MIB", "usdIpRouterId"), ("Unisphere-Data-IP-MIB", "usdIpSourceRoutingAdminStatus"), ("Unisphere-Data-IP-MIB", "usdIpVpnIdOui"), ("Unisphere-Data-IP-MIB", "usdIpVpnIdIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpGlobalGroup = usdIpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: usdIpGlobalGroup.setDescription('A collection of IP global objects for managing instances of IP in a Unisphere product.')
usdIpInterfaceGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 5)).setObjects(("Unisphere-Data-IP-MIB", "usdIpNextIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfRowStatus"), ("Unisphere-Data-IP-MIB", "usdIpIfLowerIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfType"), ("Unisphere-Data-IP-MIB", "usdIpIfTypeId"), ("Unisphere-Data-IP-MIB", "usdIpIfSAValidationEnable"), ("Unisphere-Data-IP-MIB", "usdIpIfCreationType"), ("Unisphere-Data-IP-MIB", "usdIpIfProfileId"), ("Unisphere-Data-IP-MIB", "usdIpIfAlwaysUp"), ("Unisphere-Data-IP-MIB", "usdIpIfLoopback"), ("Unisphere-Data-IP-MIB", "usdIpIfLoopbackUid"), ("Unisphere-Data-IP-MIB", "usdIpIfDebounceTime"), ("Unisphere-Data-IP-MIB", "usdIpIfForwarding"), ("Unisphere-Data-IP-MIB", "usdIpIfForceFragmentation"), ("Unisphere-Data-IP-MIB", "usdIpIfSharesLowerUid"), ("Unisphere-Data-IP-MIB", "usdIpIfFilterOptions"), ("Unisphere-Data-IP-MIB", "usdIpIfName"), ("Unisphere-Data-IP-MIB", "usdIpIfArpTimeout"), ("Unisphere-Data-IP-MIB", "usdIpIfAdminSpeed"), ("Unisphere-Data-IP-MIB", "usdIpIfMultipathMode"), ("Unisphere-Data-IP-MIB", "usdIpIfSharedNhAddr"), ("Unisphere-Data-IP-MIB", "usdIpIfSharedNhRouterId"), ("Unisphere-Data-IP-MIB", "usdIpIfPrimaryIpAddress"), ("Unisphere-Data-IP-MIB", "usdIpIfPrimaryIpMask"), ("Unisphere-Data-IP-MIB", "usdIpIfOperDebounceTime"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInErrorPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInSpoofedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInForwardedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInForwardedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutRequestedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutRequestedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsGreenOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsYellowOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsRedOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsGreenOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsYellowOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsRedOutSchedDropOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpInterfaceGroup2 = usdIpInterfaceGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpInterfaceGroup2.setDescription('Obsolete collection of objects for managing IP interface capabilities in a Unisphere product. This group became obsolete when the usdIpIfAssocTable was added.')
usdIpAddressGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 6)).setObjects(("Unisphere-Data-IP-MIB", "usdIpArpTimeout"), ("Unisphere-Data-IP-MIB", "usdIpAdEntRowStatus"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpAdEntNetMask"), ("Unisphere-Data-IP-MIB", "usdIpAdEntBcastAddr"), ("Unisphere-Data-IP-MIB", "usdIpAdEntReasmMaxSize"), ("Unisphere-Data-IP-MIB", "usdIpAdEntAdminStatus"), ("Unisphere-Data-IP-MIB", "usdIpAdEntArpRspEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntProxyArpRspEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntDirectedBcastEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIcmpRedirectEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIcmpMaskReplyEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIcmpUnreachEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntMtu"), ("Unisphere-Data-IP-MIB", "usdIpAdEntUnnumLoopbackIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIrdpEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntAccessRouteEnable"), ("Unisphere-Data-IP-MIB", "usdIpAdEntAccessRouteHost"), ("Unisphere-Data-IP-MIB", "usdIpAdEntIsSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpAddressGroup2 = usdIpAddressGroup2.setStatus('current')
if mibBuilder.loadTexts: usdIpAddressGroup2.setDescription('A collection of objects for managing IP address capabilities in a Unisphere product.')
usdIpInterfaceGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 7)).setObjects(("Unisphere-Data-IP-MIB", "usdIpNextIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfRowStatus"), ("Unisphere-Data-IP-MIB", "usdIpIfLowerIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfType"), ("Unisphere-Data-IP-MIB", "usdIpIfTypeId"), ("Unisphere-Data-IP-MIB", "usdIpIfSAValidationEnable"), ("Unisphere-Data-IP-MIB", "usdIpIfCreationType"), ("Unisphere-Data-IP-MIB", "usdIpIfProfileId"), ("Unisphere-Data-IP-MIB", "usdIpIfAlwaysUp"), ("Unisphere-Data-IP-MIB", "usdIpIfLoopback"), ("Unisphere-Data-IP-MIB", "usdIpIfLoopbackUid"), ("Unisphere-Data-IP-MIB", "usdIpIfDebounceTime"), ("Unisphere-Data-IP-MIB", "usdIpIfForwarding"), ("Unisphere-Data-IP-MIB", "usdIpIfForceFragmentation"), ("Unisphere-Data-IP-MIB", "usdIpIfSharesLowerUid"), ("Unisphere-Data-IP-MIB", "usdIpIfFilterOptions"), ("Unisphere-Data-IP-MIB", "usdIpIfName"), ("Unisphere-Data-IP-MIB", "usdIpIfArpTimeout"), ("Unisphere-Data-IP-MIB", "usdIpIfAdminSpeed"), ("Unisphere-Data-IP-MIB", "usdIpIfMultipathMode"), ("Unisphere-Data-IP-MIB", "usdIpIfSharedNhAddr"), ("Unisphere-Data-IP-MIB", "usdIpIfSharedNhRouterId"), ("Unisphere-Data-IP-MIB", "usdIpIfPrimaryIpAddress"), ("Unisphere-Data-IP-MIB", "usdIpIfPrimaryIpMask"), ("Unisphere-Data-IP-MIB", "usdIpIfOperDebounceTime"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInErrorPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInSpoofedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInForwardedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInForwardedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutRequestedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutRequestedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsGreenOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsYellowOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsRedOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsGreenOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsYellowOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsRedOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfAssocIpIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpInterfaceGroup3 = usdIpInterfaceGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: usdIpInterfaceGroup3.setDescription('Obsolete collection of objects for managing IP interface capabilities in a Unisphere product. This group became obsolete when the QoS related objects were obsoleted.')
usdIpInterfaceGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 12, 4, 2, 8)).setObjects(("Unisphere-Data-IP-MIB", "usdIpNextIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfRowStatus"), ("Unisphere-Data-IP-MIB", "usdIpIfLowerIfIndex"), ("Unisphere-Data-IP-MIB", "usdIpIfType"), ("Unisphere-Data-IP-MIB", "usdIpIfTypeId"), ("Unisphere-Data-IP-MIB", "usdIpIfSAValidationEnable"), ("Unisphere-Data-IP-MIB", "usdIpIfCreationType"), ("Unisphere-Data-IP-MIB", "usdIpIfProfileId"), ("Unisphere-Data-IP-MIB", "usdIpIfAlwaysUp"), ("Unisphere-Data-IP-MIB", "usdIpIfLoopback"), ("Unisphere-Data-IP-MIB", "usdIpIfLoopbackUid"), ("Unisphere-Data-IP-MIB", "usdIpIfDebounceTime"), ("Unisphere-Data-IP-MIB", "usdIpIfForwarding"), ("Unisphere-Data-IP-MIB", "usdIpIfForceFragmentation"), ("Unisphere-Data-IP-MIB", "usdIpIfSharesLowerUid"), ("Unisphere-Data-IP-MIB", "usdIpIfFilterOptions"), ("Unisphere-Data-IP-MIB", "usdIpIfName"), ("Unisphere-Data-IP-MIB", "usdIpIfArpTimeout"), ("Unisphere-Data-IP-MIB", "usdIpIfAdminSpeed"), ("Unisphere-Data-IP-MIB", "usdIpIfMultipathMode"), ("Unisphere-Data-IP-MIB", "usdIpIfSharedNhAddr"), ("Unisphere-Data-IP-MIB", "usdIpIfSharedNhRouterId"), ("Unisphere-Data-IP-MIB", "usdIpIfPrimaryIpAddress"), ("Unisphere-Data-IP-MIB", "usdIpIfPrimaryIpMask"), ("Unisphere-Data-IP-MIB", "usdIpIfOperDebounceTime"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInPoliciedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInErrorPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsInSpoofedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutForwardedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutSchedDropOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedPackets"), ("Unisphere-Data-IP-MIB", "usdIpIfStatsOutPoliciedOctets"), ("Unisphere-Data-IP-MIB", "usdIpIfAssocIpIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdIpInterfaceGroup4 = usdIpInterfaceGroup4.setStatus('current')
if mibBuilder.loadTexts: usdIpInterfaceGroup4.setDescription('A collection of objects for managing IP interface capabilities in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-IP-MIB", usdIpIfStatsEntry=usdIpIfStatsEntry, usdIpRouteGlobals=usdIpRouteGlobals, usdIpIfStatsInForwardedPackets=usdIpIfStatsInForwardedPackets, usdIpAdEntReasmMaxSize=usdIpAdEntReasmMaxSize, usdIpIfSharesLowerUid=usdIpIfSharesLowerUid, usdIpIfLowerIfIndex=usdIpIfLowerIfIndex, usdIpIfStatsInForwardedOctets=usdIpIfStatsInForwardedOctets, usdIpAdEntIcmpUnreachEnable=usdIpAdEntIcmpUnreachEnable, usdIpIfStatsOutSchedDropPackets=usdIpIfStatsOutSchedDropPackets, usdIpIfCreationType=usdIpIfCreationType, usdIpDebounceTime=usdIpDebounceTime, usdIpIfStatsOutRequestedPackets=usdIpIfStatsOutRequestedPackets, usdIpRouteStaticTag=usdIpRouteStaticTag, usdIpIfStatsOutPoliciedOctets=usdIpIfStatsOutPoliciedOctets, usdIpRouteStaticTable=usdIpRouteStaticTable, usdIpCompliance=usdIpCompliance, usdIpIfStatsGreenOutSchedDropOctets=usdIpIfStatsGreenOutSchedDropOctets, usdIpIfIndex=usdIpIfIndex, usdIpAdEntArpRspEnable=usdIpAdEntArpRspEnable, usdIpAdEntNetMask=usdIpAdEntNetMask, usdIpIfFilterOptions=usdIpIfFilterOptions, usdIpConformance=usdIpConformance, usdIpAddrGlobals=usdIpAddrGlobals, usdIpGlobals=usdIpGlobals, usdIpIfStatsInPackets=usdIpIfStatsInPackets, usdIpCompliances=usdIpCompliances, usdIpIfPrimaryIpMask=usdIpIfPrimaryIpMask, usdIpIfStatsYellowOutSchedDropPackets=usdIpIfStatsYellowOutSchedDropPackets, usdIpAdEntAccessRouteEnable=usdIpAdEntAccessRouteEnable, usdIpCidrRouteTable=usdIpCidrRouteTable, usdIpIfTable=usdIpIfTable, usdIpInterfaceGroup2=usdIpInterfaceGroup2, usdIpRouteStaticNextHop=usdIpRouteStaticNextHop, usdIpIfSharedNhRouterId=usdIpIfSharedNhRouterId, usdIpIfStatsOutSchedDropOctets=usdIpIfStatsOutSchedDropOctets, usdIpCompliance4=usdIpCompliance4, usdIpRouteStaticIfIndex=usdIpRouteStaticIfIndex, usdIpAddrEntry=usdIpAddrEntry, usdIpIfStatsOutPoliciedPackets=usdIpIfStatsOutPoliciedPackets, usdIpAdEntIfIndex=usdIpAdEntIfIndex, usdIpIfOperDebounceTime=usdIpIfOperDebounceTime, usdIpAdEntBcastAddr=usdIpAdEntBcastAddr, usdIpCidrRouteArea=usdIpCidrRouteArea, usdIpIfStatsTable=usdIpIfStatsTable, usdIpIfAssocLowerIfIndex=usdIpIfAssocLowerIfIndex, usdIpRoute=usdIpRoute, usdIpCompliance2=usdIpCompliance2, usdIpIfStatsInPoliciedPackets=usdIpIfStatsInPoliciedPackets, usdIpIfRowStatus=usdIpIfRowStatus, usdIpIfStatsYellowOutSchedDropOctets=usdIpIfStatsYellowOutSchedDropOctets, usdIpRouteStaticEntry=usdIpRouteStaticEntry, usdIpInterfaceGroup4=usdIpInterfaceGroup4, usdIpIfStatsOutRequestedOctets=usdIpIfStatsOutRequestedOctets, usdIpRouteStaticDest=usdIpRouteStaticDest, usdIpObjects=usdIpObjects, usdIpIfDebounceTime=usdIpIfDebounceTime, usdIpIfStatsInErrorPackets=usdIpIfStatsInErrorPackets, usdIpIfPrimaryIpAddress=usdIpIfPrimaryIpAddress, usdIpGroups=usdIpGroups, usdIpIfStatsRedOutSchedDropPackets=usdIpIfStatsRedOutSchedDropPackets, usdIpRouteGroup=usdIpRouteGroup, usdIpAdEntMtu=usdIpAdEntMtu, usdIpIfProfileId=usdIpIfProfileId, usdIpIfEntry=usdIpIfEntry, usdIpAdEntRowStatus=usdIpAdEntRowStatus, usdIpRouteStaticMetric=usdIpRouteStaticMetric, usdIpRouteStaticPref=usdIpRouteStaticPref, usdIpIfType=usdIpIfType, usdIpAdEntIgmpEnable=usdIpAdEntIgmpEnable, usdIpIfName=usdIpIfName, usdIpAdEntAdminStatus=usdIpAdEntAdminStatus, usdIpNextIfIndex=usdIpNextIfIndex, usdIpIfTypeId=usdIpIfTypeId, usdIpCidrRoutePref=usdIpCidrRoutePref, usdIpIfSharedNhAddr=usdIpIfSharedNhAddr, usdIpAdEntUnnumLoopbackIfIndex=usdIpAdEntUnnumLoopbackIfIndex, usdIpGlobalGroup=usdIpGlobalGroup, usdIpCompliance3=usdIpCompliance3, usdIpAddress=usdIpAddress, usdIpInterfaceGroup3=usdIpInterfaceGroup3, usdIpIfStatsOutForwardedOctets=usdIpIfStatsOutForwardedOctets, usdIpInterfaceGroup=usdIpInterfaceGroup, usdIpIfForwarding=usdIpIfForwarding, usdIpIfSAValidationEnable=usdIpIfSAValidationEnable, PYSNMP_MODULE_ID=usdIpMIB, usdIpCidrRouteEntry=usdIpCidrRouteEntry, usdIpRouterId=usdIpRouterId, usdIpIfAssocEntry=usdIpIfAssocEntry, usdIpIfLoopback=usdIpIfLoopback, usdIpAdEntDirectedBcastEnable=usdIpAdEntDirectedBcastEnable, usdIpAdEntIrdpEnable=usdIpAdEntIrdpEnable, usdIpIfAlwaysUp=usdIpIfAlwaysUp, usdIpIfStatsInSpoofedPackets=usdIpIfStatsInSpoofedPackets, usdIpAdEntProxyArpRspEnable=usdIpAdEntProxyArpRspEnable, usdIpVpnIdIndex=usdIpVpnIdIndex, usdIpAdEntIcmpMaskReplyEnable=usdIpAdEntIcmpMaskReplyEnable, usdIpIfArpTimeout=usdIpIfArpTimeout, usdIpIfStatsRedOutSchedDropOctets=usdIpIfStatsRedOutSchedDropOctets, usdIpAdEntIcmpRedirectEnable=usdIpAdEntIcmpRedirectEnable, usdIpIfAssocTable=usdIpIfAssocTable, usdIpRouteLimit=usdIpRouteLimit, usdIpIfForceFragmentation=usdIpIfForceFragmentation, usdIpIfStatsInPoliciedOctets=usdIpIfStatsInPoliciedOctets, usdIpAdEntAccessRouteHost=usdIpAdEntAccessRouteHost, usdIpRouteStaticMask=usdIpRouteStaticMask, usdIpInterface=usdIpInterface, usdIpIfStatsInOctets=usdIpIfStatsInOctets, usdIpIfAdminSpeed=usdIpIfAdminSpeed, usdIpSourceRoutingAdminStatus=usdIpSourceRoutingAdminStatus, usdIpRouteStaticStatus=usdIpRouteStaticStatus, usdIpCidrRouteTag=usdIpCidrRouteTag, usdIpIfStatsOutForwardedPackets=usdIpIfStatsOutForwardedPackets, usdIpAddressGroup=usdIpAddressGroup, usdIpMIB=usdIpMIB, usdIpIfStatsIndex=usdIpIfStatsIndex, usdIpAdEntAddr=usdIpAdEntAddr, usdIpAdEntIsSecondary=usdIpAdEntIsSecondary, usdIpRouteStaticNextHopAS=usdIpRouteStaticNextHopAS, usdIpVpnIdOui=usdIpVpnIdOui, usdIpIfLoopbackUid=usdIpIfLoopbackUid, usdIpIfStatsGreenOutSchedDropPackets=usdIpIfStatsGreenOutSchedDropPackets, usdIpAddressGroup2=usdIpAddressGroup2, usdIpAddrTable=usdIpAddrTable, usdIpIfMultipathMode=usdIpIfMultipathMode, usdIpRouteStaticRowStatus=usdIpRouteStaticRowStatus, usdIpArpTimeout=usdIpArpTimeout, usdIpIfAssocIpIfIndex=usdIpIfAssocIpIfIndex)
