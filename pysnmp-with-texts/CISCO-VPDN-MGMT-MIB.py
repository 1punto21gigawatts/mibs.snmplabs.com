#
# PySNMP MIB module CISCO-VPDN-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VPDN-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, MibIdentifier, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Integer32, IpAddress, NotificationType, Counter32, ObjectIdentity, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Integer32", "IpAddress", "NotificationType", "Counter32", "ObjectIdentity", "Gauge32", "ModuleIdentity")
TruthValue, TextualConvention, DisplayString, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "TimeStamp")
ciscoVpdnMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 24))
ciscoVpdnMgmtMIB.setRevisions(('2006-01-20 00:00', '2004-06-08 00:00', '2004-04-02 00:00', '2002-07-08 00:00', '2002-05-17 00:00', '2002-04-02 00:00', '2000-01-12 00:00', '1999-03-24 00:00', '1997-07-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVpdnMgmtMIB.setRevisionsDescriptions(("Obsoleted the following deprecated L2F specific objects. These set of objects have been replaced by the corresponding multi-protocol objects since 1999-03-24. Obsoleted Objects Existing replacements ================= ===================== cvpdnTunnelTotal cvpdnSystemTable cvpdnSessionTotal cvpdnSystemTable cvpdnDeniedUsersTotal cvpdnSystemTable cvpdnTunnelTable cvpdnTunnelAttrTable cvpdnTunnelSessionTable cvpdnSessionAttrTable Deprecated the following objects and added corresponding InetAddressType/InetAddress compliant counterparts: Deprecated Objects Added Replacements ================== ================== cvpdnTunnelAttrLocalIpAddress cvpdnTunnelAttrLocalInetAddressType cvpdnTunnelAttrLocalInetAddress cvpdnTunnelAttrSourceIpAddress cvpdnTunnelAttrSourceInetAddressType cvpdnTunnelAttrSourceInetAddress cvpdnTunnelAttrRemoteIpAddress cvpdnTunnelAttrRemoteInetAddressType cvpdnTunnelAttrRemoteInetAddress cvpdnUnameToFailHistSourceIp cvpdnUnameToFailHistSourceInetType cvpdnUnameToFailHistSourceInetAddr cvpdnUnameToFailHistDestIp cvpdnUnameToFailHistDestInetType cvpdnUnameToFailHistDestInetAddr Added two new values, 'pwUp' and 'pwDown', for the existing object cvpdnNotifSessionEvent to support pseudowire status change event reporting. ", "Deprecated the cvpdnBundleEndpointType object since it's values did not align with the PPP protocol. This object was replaced by cvpdnBundleEndpointClass. ", 'Added support for Multilink PPP VPDN information. Modified the cvpdnSessionAttrTable to add objects that specify the multilink PPP bundle to which a session belongs. Added scalar objects to hold the total number of multilink PPP bundles comprised of one, two, and more than two links. Added the cvpdnBundleTable that describes the PPP multilink bundle. Added the cvpdnChildBundleTable to expose the containment relationship between the multilink PPP bundle and the VPDN tunnel. ', 'Added support for VPDN Template information. The template table reports the number of active sessions for each template. This number is the sum of active sessions for all VPDN groups associated with each template. ', 'Changed cvpdnSessionAttrVirtualCircuitID to an Unsigned32 object. Also, moved Unsigned32 import to SNMPv2-SMI. ', 'Added virtual circuit ID, packets dropped, and notification objects for WAN/IP support. ', 'Added support for Point-to-Point Tunneling Protocol (PPTP). Changed object descriptions to use generic terms. ', 'Added support for multiple tunnel protocols with these tables 1) cvpdnSystemTable 2) cvpdnTunnelAttrTable 3) cvpdnTunnelSessionAttrTable Deprecated objects and tables duplicated by the three new tables 1) cvpdnTunnelTotal, cvpdnSessionTotal, cvpdnDeniedUsersTotal 2) cvpdnTunnelTable 3) cvpdnTunnelSessionTable ', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVpdnMgmtMIB.setLastUpdated('200906160000Z')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vpdn@cisco.com')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIB.setDescription("The MIB module for VPDN. Overview of VPDN MIB MIB description This MIB is to support the Virtual Private Dialup Network (VPDN) feature of Cisco IOS. VPDN handles the forwarding of PPP links from an Internet Provider (ISP) to a Home Gateway. The VPDN MIB provides the operational information on Cisco's VPDN tunnelling implementation. The following entities are managed: 1) Global VPDN information 2) VPDN tunnel information 3) VPDN tunnel's user information 4) Failure history per user The following example configuration shows how the VPDN MIB returns VPDN information, from either CISCO A - Network Access Server (NAS) or CISCO B - Tunnel Server (TS). The User call is projected by either domain name or Dialed Number Identification Service (DNIS). The terms NAS and TS are generic terms refering to the VPDN systems. The following table shows the corresponding technology-specific terms. Network Access Server Tunnel Server ------------------------------ ------------------------- L2F Network Access Server (NAS) Home Gateway (HGW) L2TP L2TP Access Concentrator (LAC) L2TP Network Server (LNS) PPTP PPTP Access Concentrator (PAC) PPTP Network Server (PNS) (NAS) (TS) User ===== Cisco A ===== IP Network ===== Cisco B ===== Server | | +========== VPDN ==========+ 1) The VPDN global entry identifies the system wide VPDN information. 2) The VPDN tunnel table identifies the active VPDN tunnels on Cisco A and Cisco B. The table contains an entry for each active tunnel on the system. 3) The VPDN tunnel user table identifies the active users for each active tunnel on each system and provides relevant information for each user. 4) The VPDN failure history table identifies the last failure recorded per user and provides relevant information. ")
class TunnelType(TextualConvention, Integer32):
    description = 'The tunnel type. This is the tunnel protocol of a VPDN tunnel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("l2f", 1), ("l2tp", 2), ("pptp", 3))

class EndpointClass(TextualConvention, Integer32):
    reference = 'The PPP Multilink Protocol (MP), RFC 1990, Section 5.1.3.'
    description = 'The endpoint discriminator class supplied by the remote peer in a PPP Multilink bundle. RFC 1990 defines the following classes: none: Class 0 - Null Class. No endpoint discriminator is being used. The endpoint discriminator should contain a SnmpAdminString (SIZE (0)) value. local: Class 1 - Locally Assigned Address. This class is defined to permit a local assignment in the case where use of one of the globally unique classes is not possible. The endpoint discriminator should contain a SnmpAdminString (SIZE(1..20)) value. ipV4Address: Class 2 - Internet Protocol (IP) Address. An address in this class contains an IP host address. The endpoint discriminator should contain a InetAddressIPv4 value. macAddress: Class 3 - IEEE 802.1 Globally Assigned MAC Address. An address in this class contains an IEEE 802.1 MAC address in canonical (802.3) format. The endpoint discriminator should contain a MacAddress value. magicNumber: Class 4 - PPP Magic-Number Block. This is not an address but a block of 1 to 5 concatenated 32 bit PPP Magic-Numbers. The endpoint discriminator should contain an OCTET STRING (SIZE (4|8|12|16| 20)) value. phone: Class 5 - Public Switched Network Directory Number. An address in this class contains an octet sequence as defined by I.331 (E.164) representing an international telephone directory number suitable for use to access the endpoint via the public switched telephone network. The endpoint discriminator should contain a SnmpAdminString (SIZE(1..15)) value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("local", 2), ("ipV4Address", 3), ("macAddress", 4), ("magicNumber", 5), ("phone", 6))

ciscoVpdnMgmtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 1))
cvpdnSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1))
cvpdnTunnelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2))
cvpdnTunnelSessionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3))
cvpdnUserToFailHistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4))
cvpdnTemplateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 5))
cvpdnMultilinkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6))
cvpdnTunnelTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 1), Gauge32()).setUnits('tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelTotal.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelTotal.setDescription('The total number of VPDN tunnels that are currently active within this system.')
cvpdnSessionTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 2), Gauge32()).setUnits('users').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionTotal.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnSessionTotal.setDescription('The total number of active users in all the active VPDN tunnels within this system.')
cvpdnDeniedUsersTotal = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 3), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnDeniedUsersTotal.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnDeniedUsersTotal.setDescription('The total number of denied user attempts to all the active VPDN tunnels within this system.')
cvpdnSystemTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4), )
if mibBuilder.loadTexts: cvpdnSystemTable.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemTable.setDescription('Table of information about the VPDN system for all tunnel types.')
cvpdnSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnSystemTunnelType"))
if mibBuilder.loadTexts: cvpdnSystemEntry.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemEntry.setDescription('An entry in the table, containing information about a single type of VPDN tunnel.')
cvpdnSystemTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 1), TunnelType())
if mibBuilder.loadTexts: cvpdnSystemTunnelType.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemTunnelType.setDescription('The tunnel type. This is the tunnel protocol.')
cvpdnSystemTunnelTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 2), Gauge32()).setUnits('tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSystemTunnelTotal.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemTunnelTotal.setDescription('The total number of VPDN tunnels that are currently active of this tunnel type.')
cvpdnSystemSessionTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 3), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSystemSessionTotal.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemSessionTotal.setDescription('The total number of active sessions in all the active VPDN tunnels of this tunnel type.')
cvpdnSystemDeniedUsersTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 4), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSystemDeniedUsersTotal.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemDeniedUsersTotal.setDescription('The total number of denied user attempts to all the VPDN tunnels of this tunnel type since last system re-initialization.')
cvpdnSystemInitialConnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 5), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSystemInitialConnReq.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemInitialConnReq.setDescription('The total number tunnel connection attempts on all the VPDN tunnels of this tunnel type since last system re-initialization.')
cvpdnSystemSuccessConnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 6), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSystemSuccessConnReq.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemSuccessConnReq.setDescription('The total number tunnel Successful connection attempts in VPDN tunnels of this tunnel type since last system re-initialization.')
cvpdnSystemFailedConnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 4, 1, 7), Counter32()).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSystemFailedConnReq.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemFailedConnReq.setDescription('The total number tunnel Failed connection attempts in VPDN tunnels of this tunnel type since last system re-initialization.')
cvpdnSystemNotifSessionEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSystemNotifSessionEnabled.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemNotifSessionEnabled.setDescription('Indicates whether Layer 2 VPN session notifications are enabled.')
cvpdnSystemClearSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("l2f", 3), ("l2tp", 4), ("pptp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvpdnSystemClearSessions.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemClearSessions.setDescription("Clears all the sessions in a given tunnel type. When reading this object, the value of 'none' will always be returned. When setting these values, the following operations will be performed: none: no operation. all: clears all the sessions in all the tunnels. l2f: clears all the L2F sessions. l2tp: clears all the L2TP sessions. pptp: clears all the PPTP sessions.")
cvpdnTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1), )
if mibBuilder.loadTexts: cvpdnTunnelTable.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelTable.setDescription('Table of information about the active VPDN tunnels.')
cvpdnTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnTunnelTunnelId"))
if mibBuilder.loadTexts: cvpdnTunnelEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelEntry.setDescription('An entry in the table, containing information about a single active VPDN tunnel.')
cvpdnTunnelTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cvpdnTunnelTunnelId.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelTunnelId.setDescription('The Tunnel ID of an active VPDN tunnel. If it is the instigator of the tunnel, the ID is the HGW/LNS tunnel ID, otherwise it is the NAS/LAC tunnel ID.')
cvpdnTunnelRemoteTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelRemoteTunnelId.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelRemoteTunnelId.setDescription('The remote Tunnel ID of an active VPDN tunnel. If it is the instigator of the tunnel, the ID is the NAS/LAC tunnel ID, otherwise it is the HGW/LNS tunnel ID.')
cvpdnTunnelLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelLocalName.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelLocalName.setDescription('The local name of an active VPDN tunnel. It will be the NAS/LAC name of the tunnel if the router serves as the NAS/LAC, or the HGW/LNS name of the tunnel if the system serves as the home gateway. Typically, the local name is the configured host name of the router.')
cvpdnTunnelRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelRemoteName.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelRemoteName.setDescription('The remote name of an active VPDN tunnel. It will be the home gateway name of the tunnel if the system is a NAS/LAC, or the NAS/LAC name of the tunnel if the system serves as the home gateway.')
cvpdnTunnelRemoteEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelRemoteEndpointName.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelRemoteEndpointName.setDescription('The remote end point name of an active VPDN tunnel. This name is either the domain name or the DNIS that this tunnel is projected with.')
cvpdnTunnelLocalInitConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelLocalInitConnection.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelLocalInitConnection.setDescription('This object indicates whether the tunnel was generated locally or not.')
cvpdnTunnelOrigCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("domain", 1), ("dnis", 2), ("stack", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelOrigCause.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelOrigCause.setDescription('The cause which originated an active VPDN tunnel. The tunnel can be projected via domain name, DNIS or a stack group (SGBP).')
cvpdnTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("opening", 2), ("open", 3), ("closing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelState.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelState.setDescription('The current state of an active VPDN tunnel. Each state code is explained below: unknown: The current state of the tunnel is unknown. opening: The tunnel has just been instigated and is pending for a remote end reply to complete the process. open: The tunnel is active. closing: The tunnel has just been shut down and is pending for the remote end to reply to complete the process.')
cvpdnTunnelActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 9), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelActiveSessions.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelActiveSessions.setDescription('The total number of active session currently in the tunnel.')
cvpdnTunnelDeniedUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 10), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelDeniedUsers.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelDeniedUsers.setDescription('A count of the accumulated total of denied users for the tunnel.')
cvpdnTunnelSoftshut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSoftshut.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSoftshut.setDescription('A VPDN tunnel can be put into a soft shut state to prevent any new user session to be added. This object specifies whether this tunnel has been soft shut.')
cvpdnTunnelNetworkServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelNetworkServiceType.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelNetworkServiceType.setDescription('The type of network service used in the active tunnel. For now it is IP only.')
cvpdnTunnelLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelLocalIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelLocalIpAddress.setDescription('The local IP address of the tunnel. This IP address is that of the interface at the local end of the tunnel.')
cvpdnTunnelSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSourceIpAddress.setReference('The Stack Group Biding Protocol (SGBP), United States Patent 6073176')
if mibBuilder.loadTexts: cvpdnTunnelSourceIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSourceIpAddress.setDescription('The source IP address of the tunnel. This IP address is the user configurable IP address for Stack Group Biding Protocol (SGBP) via the CLI command: vpdn source-ip')
cvpdnTunnelRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelRemoteIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelRemoteIpAddress.setDescription('The remote IP address of the tunnel. This IP address is that of the interface at the remote end of the tunnel.')
cvpdnTunnelAttrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2), )
if mibBuilder.loadTexts: cvpdnTunnelAttrTable.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrTable.setDescription('Table of information about the active VPDN tunnels. An entry is added to the table when a new tunnel is initiated and removed from the table when the tunnel is terminated.')
cvpdnTunnelAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnSystemTunnelType"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrTunnelId"))
if mibBuilder.loadTexts: cvpdnTunnelAttrEntry.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrEntry.setDescription('An entry in the table, containing information about a single active VPDN tunnel.')
cvpdnTunnelAttrTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cvpdnTunnelAttrTunnelId.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrTunnelId.setDescription('The Tunnel ID of an active VPDN tunnel. If this end is the instigator of the tunnel, the ID is the TS tunnel ID, otherwise it is the NAS tunnel ID. Two distinct tunnels with the same tunnel ID may exist, but with different tunnel types. ')
cvpdnTunnelAttrRemoteTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteTunnelId.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteTunnelId.setDescription('The remote Tunnel ID of an active VPDN tunnel. If this end is the instigator of the tunnel, the ID is the NAS tunnel ID, otherwise it is the TS tunnel ID.')
cvpdnTunnelAttrLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalName.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalName.setDescription('The local name of an active VPDN tunnel. It will be the NAS name of the tunnel if the system serves as the NAS, or the TS name of the tunnel if the system serves as the tunnel server. Typically, the local name is the configured host name of the system.')
cvpdnTunnelAttrRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteName.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteName.setDescription('The remote name of an active VPDN tunnel. It will be the tunnel server name of the tunnel if the system is a NAS, or the NAS name of the tunnel if the system serves as the tunnel server.')
cvpdnTunnelAttrRemoteEndpointName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteEndpointName.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteEndpointName.setDescription('The remote end point name of an active VPDN tunnel. This name is either the domain name or the DNIS that this tunnel is projected with.')
cvpdnTunnelAttrLocalInitConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalInitConnection.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalInitConnection.setDescription("This object indicates whether the tunnel was originated locally or not. If it's true, the tunnel was originated locally.")
cvpdnTunnelAttrOrigCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("domain", 1), ("dnis", 2), ("stack", 3), ("xconnect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrOrigCause.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrOrigCause.setDescription('The cause which originated an active VPDN tunnel. The tunnel can be projected via domain name, DNIS, stack group, or L2 Xconnect.')
cvpdnTunnelAttrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("unknown", 1), ("l2fOpening", 2), ("l2fOpenWait", 3), ("l2fOpen", 4), ("l2fClosing", 5), ("l2fCloseWait", 6), ("l2tpIdle", 7), ("l2tpWaitCtlReply", 8), ("l2tpEstablished", 9), ("l2tpShuttingDown", 10), ("l2tpNoSessionLeft", 11), ("pptpIdle", 12), ("pptpWaitConnect", 13), ("pptpWaitCtlRequest", 14), ("pptpWaitCtlReply", 15), ("pptpEstablished", 16), ("pptpWaitStopReply", 17), ("pptpTerminal", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrState.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrState.setDescription("The current state of an active VPDN tunnel. Tunnels of type l2f will have states with the 'l2f' prefix. Tunnels of type l2tp will have states with the 'l2tp' prefix. Tunnels of type pptp will have states with the 'pptp' prefix. Each state code is explained below: unknown: The current state of the tunnel is unknown. l2fOpening: The tunnel has just been initiated and is pending for a remote end reply to complete the process. l2fOpenWait: This end received a tunnel open request from the remote end and is waiting for the tunnel to be established. l2fOpen: The tunnel is active. l2fClosing: This end received a tunnel close request. l2fCloseWait: The tunnel has just been shut down and is pending for the remote end to reply to complete the process. l2tpIdle: No tunnel is initiated yet. l2tpWaitCtlReply: The tunnel has been initiated and is pending for a remote end reply to complete the process. l2tpEstablished: The tunnel is active. l2tpShuttingDown: The tunnel is in progress of shutting down. l2tpNoSessionLeft: There is no session left in the tunnel. pptpIdle: No tunnel is initiated yet. pptpWaitConnect: The tunnel is waiting for a TCP connection. pptpWaitCtlRequest: The tunnel has been initiated and is pending for a remote end request. pptpWaitCtlReply: The tunnel has been initiated and is pending for a remote end reply. pptpEstablished: The tunnel is active. pptpWaitStopReply: The tunnel is being shut down and is pending for a remote end reply. pptpTerminal: The tunnel has been shut down.")
cvpdnTunnelAttrActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 9), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrActiveSessions.setDescription('The total number of active session currently in the tunnel.')
cvpdnTunnelAttrDeniedUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 10), Counter32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrDeniedUsers.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrDeniedUsers.setDescription('A count of the accumulated total of denied users for the tunnel.')
cvpdnTunnelAttrSoftshut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrSoftshut.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrSoftshut.setDescription('A VPDN tunnel can be put into a soft shut state to prevent any new session to be added. This object specifies whether this tunnel has been soft shut. If its true, it has been soft shut.')
cvpdnTunnelAttrNetworkServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrNetworkServiceType.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrNetworkServiceType.setDescription('The type of network service used in the active tunnel.')
cvpdnTunnelAttrLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalIpAddress.setDescription('The local IP address of the tunnel. This IP address is that of the interface at the local end of the tunnel.')
cvpdnTunnelAttrSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceIpAddress.setReference('The Stack Group Biding Protocol (SGBP), United States Patent 6073176')
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceIpAddress.setDescription('The source IP address of the tunnel. This IP address is the user configurable IP address for Stack Group Biding Protocol.')
cvpdnTunnelAttrRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteIpAddress.setDescription('The remote IP address of the tunnel. This IP address is that of the interface at the remote end of the tunnel.')
cvpdnTunnelAttrLocalInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 16), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalInetAddressType.setDescription('Indicates the type of address contained in cvpdnTunnelAttrLocalInetAddress')
cvpdnTunnelAttrLocalInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 17), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalInetAddress.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrLocalInetAddress.setDescription('The local IP address of the tunnel. This IP address is that of the interface at the local end of the tunnel. The type of this address is determined by the value of cvpdnTunnelAttrLocalInetAddressType.')
cvpdnTunnelAttrSourceInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 18), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceInetAddressType.setDescription('Indicates the type of address contained in cvpdnTunnelAttrSourceInetAddress')
cvpdnTunnelAttrSourceInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 19), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceInetAddress.setReference('The Stack Group Biding Protocol (SGBP), United States Patent 6073176')
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceInetAddress.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrSourceInetAddress.setDescription('The source IP address of the tunnel. This IP address is the user configurable IP address for Stack Group Biding Protocol. The type of this address is determined by the value of cvpdnTunnelAttrSourceInetAddressType.')
cvpdnTunnelAttrRemoteInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteInetAddressType.setDescription('Indicates the type of address contained in cvpdnTunnelAttrRemoteInetAddress')
cvpdnTunnelAttrRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 2, 2, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrRemoteInetAddress.setDescription('The remote IP address of the tunnel. This IP address is that of the interface at the remote end of the tunnel. The type of this address is determined by the value of cvpdnTunnelAttrRemoteInetAddressType.')
cvpdnTunnelSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1), )
if mibBuilder.loadTexts: cvpdnTunnelSessionTable.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionTable.setDescription('Table of information about individual user sessions within the active tunnels. Entry is added to the table when new user session is initiated and be removed from the table when the user session is terminated.')
cvpdnTunnelSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnTunnelTunnelId"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionId"))
if mibBuilder.loadTexts: cvpdnTunnelSessionEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionEntry.setDescription('An entry in the table, containing information about a single user session within the tunnel.')
cvpdnTunnelSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cvpdnTunnelSessionId.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionId.setDescription('The ID of an active VPDN tunnel user session.')
cvpdnTunnelSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionUserName.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionUserName.setDescription('The name of the user of the user session.')
cvpdnTunnelSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("opening", 2), ("open", 3), ("closing", 4), ("waitingForTunnel", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionState.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionState.setDescription("The current state of an active user session. Each state code is explained below: unknown: The current state of the tunnel's session is unknown. opening: The user session has just been initiated through a tunnel and is pending for the remote end reply to complete the process. open: The user session is active. closing: The user session has just been closed and is pending for the remote end reply to complete the process. waitingForTunnel: The user session is in this state when the tunnel which this session is going through is still in CLOSED state. It waits for the tunnel to become OPEN before the session is allow to be fully established.")
cvpdnTunnelSessionCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionCallDuration.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionCallDuration.setDescription('This object specifies the call duration of the current active user session in value of system uptime.')
cvpdnTunnelSessionPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionPacketsOut.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionPacketsOut.setDescription('The total number of output packets through this active user session.')
cvpdnTunnelSessionBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionBytesOut.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionBytesOut.setDescription('The total number of output bytes through this active user session.')
cvpdnTunnelSessionPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionPacketsIn.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionPacketsIn.setDescription('The total number of input packets through this active user session.')
cvpdnTunnelSessionBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionBytesIn.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionBytesIn.setDescription('The total number of input bytes through this active user session.')
cvpdnTunnelSessionDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("asyncInternalModem", 2), ("async", 3), ("bchan", 4), ("sync", 5), ("virtualAccess", 6), ("xdsl", 7), ("cable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionDeviceType.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionDeviceType.setDescription('The type of physical devices that this user session is attached to for the local end of the tunnel. The meaning of each device type is explained below: other: Any device that has not been defined. asyncInternalModem: Modem Pool device of an access server. async: A regular asynchronous serial interface. sync: A regular synchronous serial interface. bchan: An ISDN call. xdsl: Future application with xDSL devices. cable: Future application with Cable modem devices.')
cvpdnTunnelSessionDeviceCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionDeviceCallerId.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionDeviceCallerId.setDescription('The incoming caller identification of the user. It is the originating number that called into the device that initiates the user session. This object can be empty since not all dial device can provide caller ID information.')
cvpdnTunnelSessionDevicePhyId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionDevicePhyId.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionDevicePhyId.setDescription('The device ID of the physical interface for the user session. The object is the the interface index which points to the ifTable. For virtual interface that is not in the ifTable, it will have zero value.')
cvpdnTunnelSessionMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionMultilink.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionMultilink.setDescription('This object indicates whether the session is part of a multilink or not.')
cvpdnTunnelSessionModemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionModemSlotIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionModemSlotIndex.setDescription('The Modem Pool database slot index if it is associated with this user session. Only a session with device of type asyncInternalModem will have a valid value for this object.')
cvpdnTunnelSessionModemPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionModemPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionModemPortIndex.setDescription('The Modem Pool database port index if it is associated with this user session. Only a session with a device of type asyncInternalModem will have a valid value for this object.')
cvpdnTunnelSessionDS1SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionDS1SlotIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionDS1SlotIndex.setDescription('The DS1 database slot index if it is associated with this user session. Only a session with a device of type asyncInternalModem will have a valid value for this object.')
cvpdnTunnelSessionDS1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionDS1PortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionDS1PortIndex.setDescription('The DS1 database port index if it is associated with this user session. Only a session with a device of type asyncInternalModem will have a a valid value for this object.')
cvpdnTunnelSessionDS1ChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionDS1ChannelIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionDS1ChannelIndex.setDescription('The DS1 database channel index if it is associated with this user session. Only a session over a device of type asyncInternalModem will have a valid value for this object.')
cvpdnTunnelSessionModemCallStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionModemCallStartTime.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionModemCallStartTime.setDescription('The start time of the current modem call. Only a session with a device of type asyncInternalModem will have a valid value for this object.')
cvpdnTunnelSessionModemCallStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTunnelSessionModemCallStartIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionModemCallStartIndex.setDescription('Arbitrary small integer to distinguish modem calls that occurred at the same time tick. Only session over device asyncInternalModem will have a valid value for this object.')
cvpdnSessionAttrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2), )
if mibBuilder.loadTexts: cvpdnSessionAttrTable.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrTable.setDescription('Table of information about individual sessions within the active tunnels. An entry is added to the table when a new session is initiated and removed from the table when the session is terminated.')
cvpdnSessionAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnSystemTunnelType"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrTunnelId"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrSessionId"))
if mibBuilder.loadTexts: cvpdnSessionAttrEntry.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrEntry.setDescription('An entry in the table, containing information about a single session within the tunnel.')
cvpdnSessionAttrSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cvpdnSessionAttrSessionId.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrSessionId.setDescription('The ID of an active VPDN session.')
cvpdnSessionAttrUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrUserName.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrUserName.setDescription('The name of the user of the session.')
cvpdnSessionAttrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("unknown", 1), ("l2fOpening", 2), ("l2fOpen", 3), ("l2fCloseWait", 4), ("l2fWaitingForTunnel", 5), ("l2tpIdle", 6), ("l2tpWaitingTunnel", 7), ("l2tpWaitReply", 8), ("l2tpWaitConnect", 9), ("l2tpEstablished", 10), ("l2tpShuttingDown", 11), ("pptpWaitVAccess", 12), ("pptpPacEstablished", 13), ("pptpWaitTunnel", 14), ("pptpWaitOCRP", 15), ("pptpPnsEstablished", 16), ("pptpWaitCallDisc", 17), ("pptpTerminal", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrState.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrState.setDescription("The current state of a tunnel session. L2F tunnel sessions will have states with the 'l2f' prefix. L2TP tunnel sessions will have states with the 'l2tp' prefix. Each state code is explained below: unknown: The current state of the tunnel's session is unknown. l2fOpening: The session has just been initiated through a tunnel and is pending for the remote end reply to complete the process. l2fOpen: The session is active. l2fCloseWait: The session has just been closed and is pending for the remote end reply to complete the process. l2fWaitingForTunnel: The session is in this state when the tunnel which this session is going through is still in CLOSED state. It waits for the tunnel to become OPEN before the session is allowed to be fully established. l2tpIdle: No session is initiated yet. l2tpWaitingTunnel: The session is waiting for the tunnel to be established. l2tpWaitReply: The session has been initiated and is pending for the remote end reply to complete the process. l2tpWaitConnect: This end has acknowledged a connection request and is waiting for the remote end to connect. l2tpEstablished: The session is active. l2tpShuttingDown: The session is in progress of shutting down. pptpWaitVAccess: The session is waiting for the creation of a virtual access interface. pptpPacEstablished: The session is active. pptpWaitTunnel: The session is waiting for the tunnel to be established. pptpWaitOCRP: The session has been initiated and is pending for the remote end reply to complete the process. pptpPnsEstablished: The session is active. pptpWaitCallDisc: Session shutdown is in progress.")
cvpdnSessionAttrCallDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrCallDuration.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrCallDuration.setDescription('This object specifies the call duration of the current active session.')
cvpdnSessionAttrPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrPacketsOut.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrPacketsOut.setDescription('The total number of output packets through this active session.')
cvpdnSessionAttrBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrBytesOut.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrBytesOut.setDescription('The total number of output bytes through this active session.')
cvpdnSessionAttrPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrPacketsIn.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrPacketsIn.setDescription('The total number of input packets through this active session.')
cvpdnSessionAttrBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 8), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrBytesIn.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrBytesIn.setDescription('The total number of input bytes through this active session.')
cvpdnSessionAttrDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("asyncInternalModem", 2), ("async", 3), ("bchan", 4), ("sync", 5), ("virtualAccess", 6), ("xdsl", 7), ("cable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrDeviceType.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrDeviceType.setDescription('The type of physical devices that this session is attached to for the local end of the tunnel. The meaning of each device type is explained below: other: Any device that has not been defined. asyncInternalModem: Modem Pool device of an access server. async: A regular asynchronous serial interface. sync: A regular synchronous serial interface. bchan: An ISDN call. xdsl: xDSL interface. cable: cable modem interface.')
cvpdnSessionAttrDeviceCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrDeviceCallerId.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrDeviceCallerId.setDescription('The incoming caller identification of the user. It is the originating number that called into the device that initiates the session. This object can be empty since not all dial devices can provide caller ID information.')
cvpdnSessionAttrDevicePhyId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrDevicePhyId.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrDevicePhyId.setDescription('The device ID of the physical interface for the session. The object is the the interface index which points to the ifTable. For virtual interfaces that are not in the ifTable, the value will be zero.')
cvpdnSessionAttrMultilink = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrMultilink.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrMultilink.setDescription('This object indicates whether the session is part of a multilink PPP bundle, even if there is only one link or session in the bundle. If it is multilink PPP, the value is true.')
cvpdnSessionAttrModemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrModemSlotIndex.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrModemSlotIndex.setDescription("The Modem Pool database slot index if it is associated with this session. Only a session with device of type 'asyncInternalModem' will have a valid value for this object; otherwise, it is not instantiated.")
cvpdnSessionAttrModemPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrModemPortIndex.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrModemPortIndex.setDescription("The Modem Pool database port index if it is associated with this session. Only a session with a device of type 'asyncInternalModem' will have a valid value for this object; otherwise, it is not instantiated.")
cvpdnSessionAttrDS1SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrDS1SlotIndex.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrDS1SlotIndex.setDescription("The DS1 database slot index if it is associated with this session. Only a session with a device of type 'asyncInternalModem' will have a valid value for this object; otherwise it is not instantiated.")
cvpdnSessionAttrDS1PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrDS1PortIndex.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrDS1PortIndex.setDescription("The DS1 database port index if it is associated with this session. Only a session with a device of type 'asyncInternalModem' will have a valid value for this object; otherwise it is not instantiated.")
cvpdnSessionAttrDS1ChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrDS1ChannelIndex.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrDS1ChannelIndex.setDescription("The DS1 database channel index if it is associated with this session. Only a session over a device of type 'asyncInternalModem' will have a valid value for this object; otherwise it is not instantiated.")
cvpdnSessionAttrModemCallStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrModemCallStartTime.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrModemCallStartTime.setDescription("The start time of the current modem call. Only a session with a device of type 'asyncInternalModem' will have a valid value for this object; otherwise, it is not instantiated.")
cvpdnSessionAttrModemCallStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrModemCallStartIndex.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrModemCallStartIndex.setDescription("Arbitrary small integer to distinguish modem calls that occurred at the same time tick. Only session over device 'asyncInternalModem' will have a valid value for this object; otherwise, it is not instantiated.")
cvpdnSessionAttrVirtualCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrVirtualCircuitID.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrVirtualCircuitID.setDescription('The virtual circuit ID of an active Layer 2 VPN session.')
cvpdnSessionAttrSentPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 21), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrSentPktsDropped.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrSentPktsDropped.setDescription('The total number of dropped packets that could not be sent into this active session.')
cvpdnSessionAttrRecvPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 22), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrRecvPktsDropped.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrRecvPktsDropped.setDescription('The total number of dropped packets that were received from this active session.')
cvpdnSessionAttrMultilinkBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 23), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrMultilinkBundle.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrMultilinkBundle.setDescription("This object specifies the name of the multilink bundle to which this session belongs. The value of this object is only valid when the value of cvpdnSessionAttrMultilink is 'true'. If the value of cvpdnSessionAttrMultilink is 'false', then the value of this object will be the empty string.")
cvpdnSessionAttrMultilinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 3, 2, 1, 24), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnSessionAttrMultilinkIfIndex.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrMultilinkIfIndex.setDescription("This object specifies the ifIndex of the multilink bundle to which this session belongs. The value of this object is only valid when the value of cvpdnSessionAttrMultilink is 'true'. If the value of cvpdnSessionAttrMultilink is 'false', then the value of this object will be zero.")
cvpdnUserToFailHistInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1), )
if mibBuilder.loadTexts: cvpdnUserToFailHistInfoTable.setStatus('current')
if mibBuilder.loadTexts: cvpdnUserToFailHistInfoTable.setDescription('Table of the record of failure objects which can be referenced by an user name. Only a name that has a valid item in the Cisco IOS VPDN failure history table will yield a valid entry in this table. The table has a maximum size of 50 entries. Only the newest 50 entries will be kept in the table.')
cvpdnUserToFailHistInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistUname"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistTunnelId"))
if mibBuilder.loadTexts: cvpdnUserToFailHistInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cvpdnUserToFailHistInfoEntry.setDescription('An entry in the table, containing failure history relevant to an user name.')
cvpdnUnameToFailHistUname = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cvpdnUnameToFailHistUname.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistUname.setDescription('The user name for this failure entry.')
cvpdnUnameToFailHistTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cvpdnUnameToFailHistTunnelId.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistTunnelId.setDescription('The Tunnel ID for this failure entry. If it is the instigator of the tunnel, the ID is the TS tunnel ID, otherwise it is the NAS tunnel ID.')
cvpdnUnameToFailHistUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistUserId.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistUserId.setDescription('The user ID of this failure entry.')
cvpdnUnameToFailHistLocalInitConn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistLocalInitConn.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistLocalInitConn.setDescription('This object indicates whether the tunnel in which the failure occurred was generated locally or not.')
cvpdnUnameToFailHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistLocalName.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistLocalName.setDescription('The local name of the VPDN tunnel in which the failure occurred. It will be the NAS name of the tunnel if the system serves as the NAS, or the TS name of the tunnel if the system serves as the tunnel server. The local name is the configured host name of the system. This object can be empty if the failure occurred prior to successful tunnel projection, thus no source name will be available.')
cvpdnUnameToFailHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistRemoteName.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistRemoteName.setDescription('The remote name of the VPDN tunnel in which the failure occurred. It will be the tunnel server name of the tunnel if the system is a NAS, or the NAS name of the tunnel if the system serves as the tunnel server. This object can be empty if the failure occurred prior to successful tunnel projection, thus no source name will be available.')
cvpdnUnameToFailHistSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistSourceIp.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnUnameToFailHistSourceIp.setDescription('The source IP address of the tunnel in which the failure occurred. This IP address is that of the interface at the instigator end of the tunnel.')
cvpdnUnameToFailHistDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistDestIp.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnUnameToFailHistDestIp.setDescription('The destination IP address of the tunnel in which the failure occurred. This IP address is that of the interface at the receiver end of the tunnel.')
cvpdnUnameToFailHistCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 9), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistCount.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistCount.setDescription('This object is incremented when multiple failures has been experienced by this user on this tunnel. Seeing a delta of >1 is an indication that the current failure record is the latest of a series of failures that has been recorded.')
cvpdnUnameToFailHistFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistFailTime.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistFailTime.setDescription('This object specifies the time when the failure is occurred.')
cvpdnUnameToFailHistFailType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistFailType.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistFailType.setDescription('The type of failure for the current failure record. It comes in a form of a an ASCII string which describes the type of failure.')
cvpdnUnameToFailHistFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistFailReason.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistFailReason.setDescription('The reason of failure for the current failure record.')
cvpdnUnameToFailHistSourceInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 13), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistSourceInetType.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistSourceInetType.setDescription('Indicates the type of address contained in cvpdnUnameToFailHistSourceInetAddr.')
cvpdnUnameToFailHistSourceInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 14), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistSourceInetAddr.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistSourceInetAddr.setDescription('The source IP address of the tunnel in which the failure occurred. This IP address is that of the interface at the instigator end of the tunnel. The instigator end is the peer which initiates the tunnel estalishment. The type of this address is determined by the value of cvpdnUnameToFailHistSourceInetType.')
cvpdnUnameToFailHistDestInetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistDestInetType.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistDestInetType.setDescription('Indicates the type of address contained in cvpdnUnameToFailHistDestInetAddr.')
cvpdnUnameToFailHistDestInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 4, 1, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnUnameToFailHistDestInetAddr.setStatus('current')
if mibBuilder.loadTexts: cvpdnUnameToFailHistDestInetAddr.setDescription('The destination IP address of the tunnel in which the failure occurred. This IP address is that of the interface at the receiver end of the tunnel. The type of this address is determined by the value of cvpdnUnameToFailHistDestInetType.')
ciscoVpdnMgmtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 0))
cvpdnNotifSessionID = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 0, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnNotifSessionID.setStatus('current')
if mibBuilder.loadTexts: cvpdnNotifSessionID.setDescription('This object contains the local session ID of the L2X session for which this notification has been generated.')
cvpdnNotifSessionEvent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 0, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("pwUp", 3), ("pwDown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnNotifSessionEvent.setStatus('current')
if mibBuilder.loadTexts: cvpdnNotifSessionEvent.setDescription('Indicates the event that generated the L2X session notification. The events are represented as follows: up: Session has come up. down: Session has gone down. pwUp: Pseudowire associated with this session has come up. pwDown: Pseudowire associated with this session has gone down. ')
cvpdnNotifSession = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 24, 0, 3)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnNotifSessionID"), ("CISCO-VPDN-MGMT-MIB", "cvpdnNotifSessionEvent"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDevicePhyId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrVirtualCircuitID"))
if mibBuilder.loadTexts: cvpdnNotifSession.setStatus('current')
if mibBuilder.loadTexts: cvpdnNotifSession.setDescription('Conveys an event regarding the L2X session with the indicated session ID and Xconnect VCID.')
cvpdnTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 5, 1), )
if mibBuilder.loadTexts: cvpdnTemplateTable.setStatus('current')
if mibBuilder.loadTexts: cvpdnTemplateTable.setDescription('Table of information about the VPDN templates. The VPDN template is a grouping mechanism that allows configuration settings to be shared among multiple VPDN groups. One such setting is a limit on the number of active sessions across all VPDN groups associated with the template. The template table allows customers to monitor template-wide information such as tracking the allocation of sessions across templates.')
cvpdnTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 5, 1, 1), ).setIndexNames((1, "CISCO-VPDN-MGMT-MIB", "cvpdnTemplateName"))
if mibBuilder.loadTexts: cvpdnTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: cvpdnTemplateEntry.setDescription('An entry in the table, containing information about a single VPDN template.')
cvpdnTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 5, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cvpdnTemplateName.setStatus('current')
if mibBuilder.loadTexts: cvpdnTemplateName.setDescription('The name of the VPDN template.')
cvpdnTemplateActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 5, 1, 1, 2), Gauge32()).setUnits('sessions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnTemplateActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cvpdnTemplateActiveSessions.setDescription('The total number of active session in all groups associated with the template.')
cvpdnBundlesWithOneLink = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundlesWithOneLink.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundlesWithOneLink.setDescription('The total number of bundles comprised of a single link.')
cvpdnBundlesWithTwoLinks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundlesWithTwoLinks.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundlesWithTwoLinks.setDescription('The total number of bundles comprised of two links.')
cvpdnBundlesWithMoreThanTwoLinks = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundlesWithMoreThanTwoLinks.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundlesWithMoreThanTwoLinks.setDescription('The total number of bundles comprised of more than two links.')
cvpdnBundleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4), )
if mibBuilder.loadTexts: cvpdnBundleTable.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleTable.setDescription('Table that describes the multilink PPP attributes of the active VPDN sessions.')
cvpdnBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnBundleName"))
if mibBuilder.loadTexts: cvpdnBundleEntry.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleEntry.setDescription('An entry in this table represents an active multilink PPP bundle that belongs to a VPDN tunnel.')
cvpdnBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cvpdnBundleName.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleName.setDescription('The name of the multilink PPP bundle associated with a VPDN tunnel.')
cvpdnBundleLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1, 2), Gauge32()).setUnits('links').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundleLinkCount.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleLinkCount.setDescription('The total number of active links in a multilink PPP bundle associated with a VPDN tunnel.')
cvpdnBundleEndpointType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("hostname", 2), ("string", 3), ("macAddress", 4), ("ipV4Address", 5), ("ipV6Address", 6), ("phone", 7), ("magicNumber", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundleEndpointType.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnBundleEndpointType.setDescription("The multilink PPP bundle discriminator type associated with a VPDN tunnel. The value of this object represents the type of discriminator used in cvpdnBundleEndpoint. none: No endpoint discriminator was supplied, the default value is being used. hostname: The router's hostname is being used as discriminator. string: User specified string is being used as discriminator. macAddress: A MAC address as defined by the MacAddress textual convention is being used as discriminator. ipV4Address: An IP address as defined by the InetAddressIPv4 textual convention is being used as discriminator. ipV6Address: An IP address as defined by the InetAddressIPv6 textual convention is being used as discriminator. phone: The PSTN phone number is being used as discriminator. magicNumber: A magic number is being used as discriminator.")
cvpdnBundleEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundleEndpoint.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleEndpoint.setDescription('Indicates the discriminator used in this bundle that is associated with a VPDN tunnel.')
cvpdnBundlePeerIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundlePeerIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundlePeerIpAddrType.setDescription('Indicates the type of address contained in cvpdnBundlePeerIpAddr.')
cvpdnBundlePeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundlePeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundlePeerIpAddr.setDescription('The IP address of the multilink PPP peer in a VPDN tunnel.')
cvpdnBundleEndpointClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 4, 1, 7), EndpointClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundleEndpointClass.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleEndpointClass.setDescription('The multilink PPP bundle discriminator class associated with a VPDN tunnel. The value of this object represents the type of discriminator used in cvpdnBundleEndpoint.')
cvpdnBundleLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundleLastChanged.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleLastChanged.setDescription('The value of the sysUpTime object when the contents of cvpdnBundleTable last changed.')
cvpdnBundleChildTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 6), )
if mibBuilder.loadTexts: cvpdnBundleChildTable.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleChildTable.setDescription('A table that exposes the containment relationship between a multilink PPP bundle and a VPDN tunnel.')
cvpdnBundleChildEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 6, 1), ).setIndexNames((0, "CISCO-VPDN-MGMT-MIB", "cvpdnBundleName"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnBundleChildTunnelType"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnBundleChildTunnelId"), (0, "CISCO-VPDN-MGMT-MIB", "cvpdnBundleChildSessionId"))
if mibBuilder.loadTexts: cvpdnBundleChildEntry.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleChildEntry.setDescription('An entry in this table represents a session that belongs to a VPDN tunnel and to a multilink PPP bundle.')
cvpdnBundleChildTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 6, 1, 1), TunnelType())
if mibBuilder.loadTexts: cvpdnBundleChildTunnelType.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleChildTunnelType.setDescription('The tunnel type. This is the tunnel protocol of an active VPDN session that is associated with a multilink PPP bundle.')
cvpdnBundleChildTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cvpdnBundleChildTunnelId.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleChildTunnelId.setDescription('The Tunnel ID of an active VPDN session that is associated with a multilink PPP bundle.')
cvpdnBundleChildSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 24, 1, 6, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpdnBundleChildSessionId.setStatus('current')
if mibBuilder.loadTexts: cvpdnBundleChildSessionId.setDescription('The ID of an active VPDN session that is associated with a multilink PPP bundle.')
ciscoVpdnMgmtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 3))
ciscoVpdnMgmtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1))
ciscoVpdnMgmtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2))
ciscoVpdnMgmtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1, 1)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSystemInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUserToFailHistInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVpdnMgmtMIBCompliance = ciscoVpdnMgmtMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco VPDN Management MIB')
ciscoVpdnMgmtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1, 2)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSystemInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUserToFailHistInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVpdnMgmtMIBComplianceRev1 = ciscoVpdnMgmtMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco VPDN Management MIB')
ciscoVpdnMgmtMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1, 3)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnUserToFailHistInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVpdnMgmtMIBComplianceRev2 = ciscoVpdnMgmtMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco VPDN Management MIB')
ciscoVpdnMgmtMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1, 4)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnUserToFailHistInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrGroupRev1"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTemplateGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnNotifEnabledGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionNotifGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnConfigGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnMultilinkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVpdnMgmtMIBComplianceRev3 = ciscoVpdnMgmtMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Cisco VPDN Management MIB')
ciscoVpdnMgmtMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1, 5)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnUserToFailHistInfoGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrGroupRev1"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTemplateGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnNotifEnabledGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionNotifGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnConfigGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnMultilinkGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVpdnMgmtMIBComplianceRev4 = ciscoVpdnMgmtMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Cisco VPDN Management MIB')
ciscoVpdnMgmtMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 1, 6)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnUserToFailHistInfoGroupRev1"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrGroupRev1"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrGroupRev1"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTemplateGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnNotifEnabledGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionNotifGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnConfigGroup"), ("CISCO-VPDN-MGMT-MIB", "cvpdnMultilinkGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVpdnMgmtMIBComplianceRev5 = ciscoVpdnMgmtMIBComplianceRev5.setStatus('current')
if mibBuilder.loadTexts: ciscoVpdnMgmtMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Cisco VPDN Management MIB')
cvpdnSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 1)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelTotal"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionTotal"), ("CISCO-VPDN-MGMT-MIB", "cvpdnDeniedUsersTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnSystemInfoGroup = cvpdnSystemInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnSystemInfoGroup.setDescription('A collection of objects providing VPDN system status information.')
cvpdnTunnelInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 2)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelRemoteTunnelId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelLocalName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelRemoteName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelRemoteEndpointName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelLocalInitConnection"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelOrigCause"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelState"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelActiveSessions"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelDeniedUsers"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSoftshut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelNetworkServiceType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelLocalIpAddress"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSourceIpAddress"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelRemoteIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnTunnelInfoGroup = cvpdnTunnelInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelInfoGroup.setDescription('A collection of objects providing VPDN tunnel status information.')
cvpdnTunnelSessionInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 3)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionUserName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionState"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionCallDuration"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionPacketsOut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionBytesOut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionPacketsIn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionBytesIn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionDeviceType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionDeviceCallerId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionDevicePhyId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionMultilink"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionModemSlotIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionModemPortIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionDS1SlotIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionDS1PortIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionDS1ChannelIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionModemCallStartTime"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelSessionModemCallStartIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnTunnelSessionInfoGroup = cvpdnTunnelSessionInfoGroup.setStatus('obsolete')
if mibBuilder.loadTexts: cvpdnTunnelSessionInfoGroup.setDescription('A collection of objects providing session information of VPDN tunnel.')
cvpdnUserToFailHistInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 4)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistUserId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistLocalInitConn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistLocalName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistRemoteName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistSourceIp"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistDestIp"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistCount"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistFailTime"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistFailType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnUserToFailHistInfoGroup = cvpdnUserToFailHistInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnUserToFailHistInfoGroup.setDescription('A collection of objects providing user failure information of VPDN system.')
cvpdnSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 5)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSystemTunnelTotal"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemSessionTotal"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemDeniedUsersTotal"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemInitialConnReq"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemSuccessConnReq"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSystemFailedConnReq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnSystemGroup = cvpdnSystemGroup.setStatus('current')
if mibBuilder.loadTexts: cvpdnSystemGroup.setDescription('A collection of objects providing VPDN system status information for multiple tunnel types.')
cvpdnTunnelAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 6)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteTunnelId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrLocalName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteEndpointName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrLocalInitConnection"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrOrigCause"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrState"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrActiveSessions"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrDeniedUsers"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrSoftshut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrNetworkServiceType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrLocalIpAddress"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrSourceIpAddress"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnTunnelAttrGroup = cvpdnTunnelAttrGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnTunnelAttrGroup.setDescription('A collection of objects providing VPDN tunnel attribute information for multiple tunnel types.')
cvpdnSessionAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 7)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrUserName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrState"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrCallDuration"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrPacketsOut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrBytesOut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrPacketsIn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrBytesIn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDeviceType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDeviceCallerId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDevicePhyId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrMultilink"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemSlotIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemPortIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDS1SlotIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDS1PortIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDS1ChannelIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemCallStartTime"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemCallStartIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnSessionAttrGroup = cvpdnSessionAttrGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnSessionAttrGroup.setDescription('A collection of objects providing session attributed information for multiple tunnel types.')
cvpdnSessionAttrGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 8)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrUserName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrState"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrCallDuration"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrPacketsOut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrBytesOut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrPacketsIn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrBytesIn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDeviceType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDeviceCallerId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDevicePhyId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrMultilink"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemSlotIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemPortIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDS1SlotIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDS1PortIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrDS1ChannelIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemCallStartTime"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrModemCallStartIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrVirtualCircuitID"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrSentPktsDropped"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrRecvPktsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnSessionAttrGroupRev1 = cvpdnSessionAttrGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionAttrGroupRev1.setDescription('A collection of objects providing session attributed information for multiple tunnel types.')
cvpdnNotifEnabledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 9)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSystemNotifSessionEnabled"), ("CISCO-VPDN-MGMT-MIB", "cvpdnNotifSessionID"), ("CISCO-VPDN-MGMT-MIB", "cvpdnNotifSessionEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnNotifEnabledGroup = cvpdnNotifEnabledGroup.setStatus('current')
if mibBuilder.loadTexts: cvpdnNotifEnabledGroup.setDescription('A collection of objects indicating whether Layer 2 VPN notifications are enabled.')
cvpdnSessionNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 10)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnNotifSession"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnSessionNotifGroup = cvpdnSessionNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cvpdnSessionNotifGroup.setDescription('A collection of objects providing basic Layer 2 VPN session notifications.')
cvpdnTemplateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 11)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnTemplateActiveSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnTemplateGroup = cvpdnTemplateGroup.setStatus('current')
if mibBuilder.loadTexts: cvpdnTemplateGroup.setDescription('A collection of objects providing VPDN template information.')
cvpdnConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 12)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSystemClearSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnConfigGroup = cvpdnConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cvpdnConfigGroup.setDescription('A collection of objects providing VPDN system configuration.')
cvpdnMultilinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 13)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrMultilinkBundle"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrMultilinkIfIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlesWithOneLink"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlesWithTwoLinks"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlesWithMoreThanTwoLinks"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleLinkCount"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleEndpointType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleEndpoint"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlePeerIpAddrType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlePeerIpAddr"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleLastChanged"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleChildSessionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnMultilinkGroup = cvpdnMultilinkGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cvpdnMultilinkGroup.setDescription('A collection of objects providing information about PPP multilink bundles associates with a VPDN tunnel.')
cvpdnMultilinkGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 14)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrMultilinkBundle"), ("CISCO-VPDN-MGMT-MIB", "cvpdnSessionAttrMultilinkIfIndex"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlesWithOneLink"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlesWithTwoLinks"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlesWithMoreThanTwoLinks"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleLinkCount"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleEndpoint"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlePeerIpAddrType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundlePeerIpAddr"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleLastChanged"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleChildSessionId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnBundleEndpointClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnMultilinkGroupRev1 = cvpdnMultilinkGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cvpdnMultilinkGroupRev1.setDescription('A collection of objects providing information about PPP multilink bundles associates with a VPDN tunnel.')
cvpdnUserToFailHistInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 15)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistUserId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistLocalInitConn"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistLocalName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistRemoteName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistCount"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistFailTime"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistFailType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistFailReason"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistSourceInetType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistSourceInetAddr"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistDestInetType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnUnameToFailHistDestInetAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnUserToFailHistInfoGroupRev1 = cvpdnUserToFailHistInfoGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cvpdnUserToFailHistInfoGroupRev1.setDescription('A collection of objects providing user failure information of VPDN system.')
cvpdnTunnelAttrGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 24, 3, 2, 16)).setObjects(("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteTunnelId"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrLocalName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteEndpointName"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrLocalInitConnection"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrOrigCause"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrState"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrActiveSessions"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrDeniedUsers"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrSoftshut"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrNetworkServiceType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrLocalInetAddressType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrLocalInetAddress"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrSourceInetAddressType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrSourceInetAddress"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteInetAddressType"), ("CISCO-VPDN-MGMT-MIB", "cvpdnTunnelAttrRemoteInetAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvpdnTunnelAttrGroupRev1 = cvpdnTunnelAttrGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cvpdnTunnelAttrGroupRev1.setDescription('A collection of objects providing VPDN tunnel attribute information for multiple tunnel types.')
mibBuilder.exportSymbols("CISCO-VPDN-MGMT-MIB", cvpdnSystemSessionTotal=cvpdnSystemSessionTotal, cvpdnTunnelInfoGroup=cvpdnTunnelInfoGroup, cvpdnTunnelInfo=cvpdnTunnelInfo, cvpdnTunnelAttrTable=cvpdnTunnelAttrTable, cvpdnTunnelDeniedUsers=cvpdnTunnelDeniedUsers, cvpdnTunnelAttrRemoteInetAddressType=cvpdnTunnelAttrRemoteInetAddressType, cvpdnTunnelSessionDS1ChannelIndex=cvpdnTunnelSessionDS1ChannelIndex, cvpdnDeniedUsersTotal=cvpdnDeniedUsersTotal, cvpdnTunnelSessionBytesIn=cvpdnTunnelSessionBytesIn, cvpdnSessionAttrUserName=cvpdnSessionAttrUserName, cvpdnSessionAttrModemCallStartIndex=cvpdnSessionAttrModemCallStartIndex, cvpdnBundleEndpoint=cvpdnBundleEndpoint, cvpdnTunnelRemoteIpAddress=cvpdnTunnelRemoteIpAddress, cvpdnSessionAttrSentPktsDropped=cvpdnSessionAttrSentPktsDropped, cvpdnSessionAttrModemCallStartTime=cvpdnSessionAttrModemCallStartTime, cvpdnBundlesWithMoreThanTwoLinks=cvpdnBundlesWithMoreThanTwoLinks, cvpdnTunnelState=cvpdnTunnelState, cvpdnTunnelSessionId=cvpdnTunnelSessionId, cvpdnTunnelAttrLocalInitConnection=cvpdnTunnelAttrLocalInitConnection, cvpdnSessionAttrBytesIn=cvpdnSessionAttrBytesIn, cvpdnBundlePeerIpAddrType=cvpdnBundlePeerIpAddrType, cvpdnTunnelEntry=cvpdnTunnelEntry, cvpdnTunnelAttrDeniedUsers=cvpdnTunnelAttrDeniedUsers, ciscoVpdnMgmtMIBComplianceRev5=ciscoVpdnMgmtMIBComplianceRev5, cvpdnTunnelSessionDeviceCallerId=cvpdnTunnelSessionDeviceCallerId, cvpdnSessionAttrDS1PortIndex=cvpdnSessionAttrDS1PortIndex, cvpdnSessionAttrDS1ChannelIndex=cvpdnSessionAttrDS1ChannelIndex, cvpdnBundlesWithOneLink=cvpdnBundlesWithOneLink, cvpdnBundleTable=cvpdnBundleTable, ciscoVpdnMgmtMIBComplianceRev1=ciscoVpdnMgmtMIBComplianceRev1, cvpdnSessionAttrDeviceCallerId=cvpdnSessionAttrDeviceCallerId, cvpdnTunnelSessionDevicePhyId=cvpdnTunnelSessionDevicePhyId, cvpdnTunnelTunnelId=cvpdnTunnelTunnelId, cvpdnTunnelLocalIpAddress=cvpdnTunnelLocalIpAddress, cvpdnTunnelTotal=cvpdnTunnelTotal, cvpdnTemplateName=cvpdnTemplateName, cvpdnUnameToFailHistDestInetAddr=cvpdnUnameToFailHistDestInetAddr, cvpdnSessionAttrDS1SlotIndex=cvpdnSessionAttrDS1SlotIndex, cvpdnUnameToFailHistFailTime=cvpdnUnameToFailHistFailTime, cvpdnTunnelAttrState=cvpdnTunnelAttrState, cvpdnTunnelAttrSourceIpAddress=cvpdnTunnelAttrSourceIpAddress, cvpdnTunnelSessionUserName=cvpdnTunnelSessionUserName, cvpdnMultilinkGroupRev1=cvpdnMultilinkGroupRev1, cvpdnSessionAttrGroup=cvpdnSessionAttrGroup, cvpdnTunnelAttrLocalInetAddress=cvpdnTunnelAttrLocalInetAddress, cvpdnNotifEnabledGroup=cvpdnNotifEnabledGroup, cvpdnSessionAttrMultilinkIfIndex=cvpdnSessionAttrMultilinkIfIndex, EndpointClass=EndpointClass, cvpdnBundleChildTable=cvpdnBundleChildTable, cvpdnTunnelActiveSessions=cvpdnTunnelActiveSessions, cvpdnTunnelSessionPacketsIn=cvpdnTunnelSessionPacketsIn, cvpdnNotifSession=cvpdnNotifSession, cvpdnSessionAttrCallDuration=cvpdnSessionAttrCallDuration, cvpdnBundlesWithTwoLinks=cvpdnBundlesWithTwoLinks, cvpdnMultilinkGroup=cvpdnMultilinkGroup, cvpdnUserToFailHistInfoTable=cvpdnUserToFailHistInfoTable, cvpdnBundleChildEntry=cvpdnBundleChildEntry, cvpdnSystemSuccessConnReq=cvpdnSystemSuccessConnReq, cvpdnBundleEndpointClass=cvpdnBundleEndpointClass, cvpdnTunnelAttrGroupRev1=cvpdnTunnelAttrGroupRev1, cvpdnSessionAttrBytesOut=cvpdnSessionAttrBytesOut, cvpdnSessionAttrVirtualCircuitID=cvpdnSessionAttrVirtualCircuitID, cvpdnTunnelAttrSourceInetAddress=cvpdnTunnelAttrSourceInetAddress, cvpdnUnameToFailHistLocalName=cvpdnUnameToFailHistLocalName, cvpdnTunnelLocalInitConnection=cvpdnTunnelLocalInitConnection, cvpdnTunnelAttrTunnelId=cvpdnTunnelAttrTunnelId, cvpdnUnameToFailHistRemoteName=cvpdnUnameToFailHistRemoteName, cvpdnNotifSessionID=cvpdnNotifSessionID, cvpdnSessionAttrState=cvpdnSessionAttrState, cvpdnTunnelSessionTable=cvpdnTunnelSessionTable, cvpdnSessionNotifGroup=cvpdnSessionNotifGroup, cvpdnSystemEntry=cvpdnSystemEntry, cvpdnSystemGroup=cvpdnSystemGroup, cvpdnTunnelSessionMultilink=cvpdnTunnelSessionMultilink, cvpdnTunnelTable=cvpdnTunnelTable, cvpdnUnameToFailHistUname=cvpdnUnameToFailHistUname, cvpdnBundleChildSessionId=cvpdnBundleChildSessionId, cvpdnTunnelAttrSoftshut=cvpdnTunnelAttrSoftshut, ciscoVpdnMgmtMIBObjects=ciscoVpdnMgmtMIBObjects, cvpdnBundlePeerIpAddr=cvpdnBundlePeerIpAddr, cvpdnTunnelSessionState=cvpdnTunnelSessionState, ciscoVpdnMgmtMIBComplianceRev3=ciscoVpdnMgmtMIBComplianceRev3, TunnelType=TunnelType, cvpdnSystemInfo=cvpdnSystemInfo, cvpdnTunnelAttrNetworkServiceType=cvpdnTunnelAttrNetworkServiceType, cvpdnBundleEndpointType=cvpdnBundleEndpointType, cvpdnTemplateTable=cvpdnTemplateTable, cvpdnBundleLinkCount=cvpdnBundleLinkCount, ciscoVpdnMgmtMIBGroups=ciscoVpdnMgmtMIBGroups, cvpdnTunnelSessionPacketsOut=cvpdnTunnelSessionPacketsOut, cvpdnTunnelSourceIpAddress=cvpdnTunnelSourceIpAddress, cvpdnUnameToFailHistSourceInetType=cvpdnUnameToFailHistSourceInetType, ciscoVpdnMgmtMIBNotifs=ciscoVpdnMgmtMIBNotifs, cvpdnUserToFailHistInfo=cvpdnUserToFailHistInfo, cvpdnTunnelSessionEntry=cvpdnTunnelSessionEntry, cvpdnBundleChildTunnelType=cvpdnBundleChildTunnelType, cvpdnTunnelAttrSourceInetAddressType=cvpdnTunnelAttrSourceInetAddressType, cvpdnSessionAttrDevicePhyId=cvpdnSessionAttrDevicePhyId, cvpdnUserToFailHistInfoGroupRev1=cvpdnUserToFailHistInfoGroupRev1, cvpdnSystemNotifSessionEnabled=cvpdnSystemNotifSessionEnabled, cvpdnSessionAttrMultilinkBundle=cvpdnSessionAttrMultilinkBundle, cvpdnTunnelSessionModemSlotIndex=cvpdnTunnelSessionModemSlotIndex, cvpdnTunnelSessionModemCallStartTime=cvpdnTunnelSessionModemCallStartTime, cvpdnTunnelAttrLocalInetAddressType=cvpdnTunnelAttrLocalInetAddressType, cvpdnUnameToFailHistTunnelId=cvpdnUnameToFailHistTunnelId, cvpdnUnameToFailHistFailReason=cvpdnUnameToFailHistFailReason, cvpdnTunnelAttrRemoteInetAddress=cvpdnTunnelAttrRemoteInetAddress, cvpdnUserToFailHistInfoEntry=cvpdnUserToFailHistInfoEntry, cvpdnSessionTotal=cvpdnSessionTotal, cvpdnTunnelAttrRemoteEndpointName=cvpdnTunnelAttrRemoteEndpointName, cvpdnMultilinkInfo=cvpdnMultilinkInfo, cvpdnTunnelAttrRemoteName=cvpdnTunnelAttrRemoteName, cvpdnSessionAttrModemSlotIndex=cvpdnSessionAttrModemSlotIndex, cvpdnBundleName=cvpdnBundleName, cvpdnTunnelOrigCause=cvpdnTunnelOrigCause, cvpdnTemplateActiveSessions=cvpdnTemplateActiveSessions, cvpdnTemplateGroup=cvpdnTemplateGroup, cvpdnSystemInfoGroup=cvpdnSystemInfoGroup, cvpdnSessionAttrModemPortIndex=cvpdnSessionAttrModemPortIndex, ciscoVpdnMgmtMIB=ciscoVpdnMgmtMIB, cvpdnSystemTunnelTotal=cvpdnSystemTunnelTotal, cvpdnNotifSessionEvent=cvpdnNotifSessionEvent, cvpdnTunnelRemoteName=cvpdnTunnelRemoteName, cvpdnSessionAttrRecvPktsDropped=cvpdnSessionAttrRecvPktsDropped, cvpdnSessionAttrSessionId=cvpdnSessionAttrSessionId, cvpdnUnameToFailHistSourceIp=cvpdnUnameToFailHistSourceIp, cvpdnTunnelSessionBytesOut=cvpdnTunnelSessionBytesOut, cvpdnSessionAttrMultilink=cvpdnSessionAttrMultilink, cvpdnTunnelSessionCallDuration=cvpdnTunnelSessionCallDuration, ciscoVpdnMgmtMIBCompliances=ciscoVpdnMgmtMIBCompliances, cvpdnSystemFailedConnReq=cvpdnSystemFailedConnReq, cvpdnTunnelRemoteEndpointName=cvpdnTunnelRemoteEndpointName, cvpdnTunnelSessionDS1SlotIndex=cvpdnTunnelSessionDS1SlotIndex, cvpdnSystemTunnelType=cvpdnSystemTunnelType, cvpdnSessionAttrDeviceType=cvpdnSessionAttrDeviceType, cvpdnTunnelSoftshut=cvpdnTunnelSoftshut, cvpdnBundleEntry=cvpdnBundleEntry, cvpdnTunnelSessionInfo=cvpdnTunnelSessionInfo, cvpdnSessionAttrEntry=cvpdnSessionAttrEntry, PYSNMP_MODULE_ID=ciscoVpdnMgmtMIB, cvpdnSessionAttrTable=cvpdnSessionAttrTable, cvpdnSystemTable=cvpdnSystemTable, cvpdnUnameToFailHistLocalInitConn=cvpdnUnameToFailHistLocalInitConn, cvpdnTunnelAttrOrigCause=cvpdnTunnelAttrOrigCause, cvpdnTunnelAttrEntry=cvpdnTunnelAttrEntry, ciscoVpdnMgmtMIBConformance=ciscoVpdnMgmtMIBConformance, cvpdnTunnelAttrRemoteIpAddress=cvpdnTunnelAttrRemoteIpAddress, cvpdnUnameToFailHistUserId=cvpdnUnameToFailHistUserId, cvpdnTunnelRemoteTunnelId=cvpdnTunnelRemoteTunnelId, cvpdnSessionAttrPacketsOut=cvpdnSessionAttrPacketsOut, cvpdnUnameToFailHistSourceInetAddr=cvpdnUnameToFailHistSourceInetAddr, cvpdnTunnelSessionModemPortIndex=cvpdnTunnelSessionModemPortIndex, cvpdnTunnelAttrLocalName=cvpdnTunnelAttrLocalName, cvpdnSessionAttrPacketsIn=cvpdnSessionAttrPacketsIn, cvpdnUnameToFailHistDestIp=cvpdnUnameToFailHistDestIp, ciscoVpdnMgmtMIBComplianceRev2=ciscoVpdnMgmtMIBComplianceRev2, cvpdnTunnelAttrGroup=cvpdnTunnelAttrGroup, ciscoVpdnMgmtMIBCompliance=ciscoVpdnMgmtMIBCompliance, cvpdnUserToFailHistInfoGroup=cvpdnUserToFailHistInfoGroup, cvpdnConfigGroup=cvpdnConfigGroup, cvpdnSessionAttrGroupRev1=cvpdnSessionAttrGroupRev1, cvpdnSystemInitialConnReq=cvpdnSystemInitialConnReq, cvpdnTunnelLocalName=cvpdnTunnelLocalName, cvpdnSystemDeniedUsersTotal=cvpdnSystemDeniedUsersTotal, cvpdnTemplateInfo=cvpdnTemplateInfo, cvpdnTunnelAttrLocalIpAddress=cvpdnTunnelAttrLocalIpAddress, ciscoVpdnMgmtMIBComplianceRev4=ciscoVpdnMgmtMIBComplianceRev4, cvpdnTunnelSessionDeviceType=cvpdnTunnelSessionDeviceType, cvpdnUnameToFailHistDestInetType=cvpdnUnameToFailHistDestInetType, cvpdnTunnelAttrActiveSessions=cvpdnTunnelAttrActiveSessions, cvpdnBundleLastChanged=cvpdnBundleLastChanged, cvpdnSystemClearSessions=cvpdnSystemClearSessions, cvpdnTunnelSessionDS1PortIndex=cvpdnTunnelSessionDS1PortIndex, cvpdnTunnelSessionModemCallStartIndex=cvpdnTunnelSessionModemCallStartIndex, cvpdnTunnelAttrRemoteTunnelId=cvpdnTunnelAttrRemoteTunnelId, cvpdnUnameToFailHistCount=cvpdnUnameToFailHistCount, cvpdnTemplateEntry=cvpdnTemplateEntry, cvpdnTunnelSessionInfoGroup=cvpdnTunnelSessionInfoGroup, cvpdnTunnelNetworkServiceType=cvpdnTunnelNetworkServiceType, cvpdnBundleChildTunnelId=cvpdnBundleChildTunnelId, cvpdnUnameToFailHistFailType=cvpdnUnameToFailHistFailType)
