#
# PySNMP MIB module GSA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
gsa, = mibBuilder.importSymbols("GOOGLE-MIB", "gsa")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, IpAddress, iso, Counter32, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Bits, Integer32, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "IpAddress", "iso", "Counter32", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Bits", "Integer32", "ModuleIdentity", "NotificationType")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
crawl = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 1))
crawlRunning = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("paused", 0), ("running", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: crawlRunning.setStatus('current')
if mibBuilder.loadTexts: crawlRunning.setDescription('Crawling activity of GSA')
status = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2))
docsServed = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsServed.setStatus('current')
if mibBuilder.loadTexts: docsServed.setDescription('The number of documents being served by the Google Search Appliance')
crawlingRate = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: crawlingRate.setStatus('current')
if mibBuilder.loadTexts: crawlingRate.setDescription('The current crawling rate of the Google Search Appliance')
docBytes = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docBytes.setStatus('current')
if mibBuilder.loadTexts: docBytes.setDescription('The total megabytes processed so far by the Google Search Appliance')
todayDocsCrawled = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todayDocsCrawled.setStatus('current')
if mibBuilder.loadTexts: todayDocsCrawled.setDescription('The number of documents crawled today')
docErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docErrors.setStatus('current')
if mibBuilder.loadTexts: docErrors.setDescription('Number of times an error occurred while trying to crawl a document')
docsFound = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsFound.setStatus('current')
if mibBuilder.loadTexts: docsFound.setDescription('Total documents found by the Google Search Appliance')
batchCrawlRunning = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlRunning.setStatus('current')
if mibBuilder.loadTexts: batchCrawlRunning.setDescription('Batch crawl activity of the GSA')
batchCrawlStartTime = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlStartTime.setStatus('current')
if mibBuilder.loadTexts: batchCrawlStartTime.setDescription('Time the most recent batch crawl started on the Google Search Appliance')
batchCrawlEndTime = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlEndTime.setStatus('current')
if mibBuilder.loadTexts: batchCrawlEndTime.setDescription('Time the most recent batch crawl ended on the Google Search Appliance')
batchCrawlEndReason = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("urllimit", 0), ("schedulestopped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batchCrawlEndReason.setStatus('current')
if mibBuilder.loadTexts: batchCrawlEndReason.setDescription('Reason the most recent batch crawl ended on the Google Search Appliance')
diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 1, 3))
serving = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 2))
qpm = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qpm.setStatus('current')
if mibBuilder.loadTexts: qpm.setDescription('The serving status, in terms of queries per minute being handled')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3))
gsaDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3, 1))
diskHealth = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskHealth.setStatus('current')
if mibBuilder.loadTexts: diskHealth.setDescription('Information about status of the disk(s) in GSA')
diskErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskErrors.setStatus('current')
if mibBuilder.loadTexts: diskErrors.setDescription('Errors associated with disk')
temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3, 2))
temperatureHealth = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureHealth.setStatus('current')
if mibBuilder.loadTexts: temperatureHealth.setDescription('Information about temperature of GSA')
temperatureErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: temperatureErrors.setStatus('current')
if mibBuilder.loadTexts: temperatureErrors.setDescription('Error string associated with temperature')
machine = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 3, 3))
machineHealth = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("green", 0), ("yellow", 1), ("red", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineHealth.setStatus('current')
if mibBuilder.loadTexts: machineHealth.setDescription('Information about status of the machine')
machineErrors = MibScalar((1, 3, 6, 1, 4, 1, 11129, 1, 3, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineErrors.setStatus('current')
if mibBuilder.loadTexts: machineErrors.setDescription('Error string associated with machine')
search = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 4))
reports = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 4, 1))
logs = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 4, 2))
eventLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 11129, 1, 5))
mibBuilder.exportSymbols("GSA-MIB", docsServed=docsServed, crawlRunning=crawlRunning, diskErrors=diskErrors, temperatureErrors=temperatureErrors, todayDocsCrawled=todayDocsCrawled, temperatureHealth=temperatureHealth, status=status, machineErrors=machineErrors, diskHealth=diskHealth, crawlingRate=crawlingRate, eventLogs=eventLogs, docErrors=docErrors, batchCrawlRunning=batchCrawlRunning, temperature=temperature, search=search, batchCrawlEndTime=batchCrawlEndTime, machineHealth=machineHealth, gsaDisk=gsaDisk, batchCrawlEndReason=batchCrawlEndReason, reports=reports, crawl=crawl, batchCrawlStartTime=batchCrawlStartTime, docBytes=docBytes, serving=serving, docsFound=docsFound, logs=logs, system=system, machine=machine, qpm=qpm, diagnostics=diagnostics)
