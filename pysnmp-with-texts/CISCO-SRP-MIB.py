#
# PySNMP MIB module CISCO-SRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, NotificationType, Unsigned32, TimeTicks, MibIdentifier, Gauge32, iso, Counter32, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "NotificationType", "Unsigned32", "TimeTicks", "MibIdentifier", "Gauge32", "iso", "Counter32", "Integer32", "ObjectIdentity")
DisplayString, TimeStamp, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "MacAddress", "TextualConvention")
ciscosrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 60))
ciscosrpMIB.setRevisions(('2005-12-19 00:00', '2001-03-28 00:00', '2000-04-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscosrpMIB.setRevisionsDescriptions(('Updated the mib to import, Unsigned32 from SNMPv2-SMI instead of CISCO-TC and ifIndex from IF-MIB instead of RFC1213-MIB. Modified the PerfCurrentCount64 and PerfIntervalCount64 as per the HCPerfCurrentCount and HCPerfIntervalCount TCs in RFC3705. Replaced the use of CounterBasedGauge64 with PerfCurrentCount64 or PerfIntervalCount64. Added a new compliance including all the groups.', 'Second version of this MIB module. srpErrorsCountersCurrentTable and srpErrorsCountersIntervalTable have been deprecated and replaced with srpErrCntCurrentTable and srpErrCntIntervalTable. The srpMACCountersTable has been deprecated.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscosrpMIB.setLastUpdated('200512190000Z')
if mibBuilder.loadTexts: ciscosrpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscosrpMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-dpt@cisco.com')
if mibBuilder.loadTexts: ciscosrpMIB.setDescription('The MIB module to describe objects for Spatial Reuse Protocol (SRP) interface layer.')
class InterfaceSide(TextualConvention, Integer32):
    description = "An indication of the side of the interface. An SRP ring is composed of two fiber rings: Outer and Inner. Outer ring traffic flows clockwise. Inner ring traffic flows counter-clockwise. The side of a node with Outer ring receive fiber is identified as side A, the side of a node with Inner ring receive fiber is identified as B. Side A must be connected to side B. The SRP protocol operates by sending data traffic in one direction known as downstream and it's corresponding control information in the opposite direction known as upstream."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sideA", 1), ("sideB", 2))

class IpsMode(TextualConvention, Integer32):
    description = "An Intelligent Protection Switching mode. An SRP ring provides redundancy and protection from a failed node or a link/fiber cut through the use of IPS modes that are automatic or operator/user-configured. Automatic IPS modes take effect when the ring detects an event, a fiber cut, or a node failure and remain in effect until the wait-to-restore value expires. As the protection requests travel around the ring, the protection hierarchy is applied. All modes are signalled on the IPS messaging channel. If an node or fiber facility failure is detected, traffic going toward or coming from the failure direction is wrapped (looped) back to go in opposite direction on the other ring. The wrap around takes place on the nodes adjacent to the failure. This way the traffic is re-routed from the failed span. The ISP modes starting from the highest to the lowest level in the IPS protection hierarchy are: 'forcedSwitch' - an operator-configured mode which causes a high-priority protection switch wrap on each end of a specified span. 'signalFail' - an automatically-detected mode which causes a protection switch wrap on a span when a media signal failure is detected. 'signalDegrade' - an automatically-detected mode which causes protection switch wraps on a span when a media signal degrade is detected due to excessive Bit Error Rate. 'manualSwitch' - an operator-configured mode which causes a low-prioority protection switch wrap on each end of a specified span. 'waitToRestore' - an automatically-invoked mode which results in a waiting period after the working channel meets the restoration criteria after a signal fail or signal degrade condition disappears to prevent protection switch oscilation. 'normal' - a mode which can be configured by an operator, and/or is in effect when no other mode has been automatically detected/invoked."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("noRequest", 1), ("waitToRestore", 2), ("manualSwitch", 3), ("signalDegrade", 4), ("signalFail", 5), ("forcedSwitch", 6))

class PerfCurrentCount64(TextualConvention, Counter64):
    description = "A gauge associated with a performance measurement in a current 15 minute measurement interval. The value of an object with an HCPerfCurrentCount syntax starts from zero and is increased when associated events occur, until the end of the 15 minute interval. At that time the value of the gauge is stored in the first 15 minute history interval, and the gauge is restarted at zero. In the case where the agent has no valid data available for the current interval, the corresponding object instance is not available and upon a retrieval request a corresponding error message shall be returned to indicate that this instance does not exist. This count represents a non-negative integer, which may increase or decrease, but shall never exceed 2^64-1 (18446744073709551615 decimal), nor fall below 0. The value of an object with HCPerfCurrentCount syntax assumes its maximum value whenever the underlying count exceeds 2^64-1. If the underlying count subsequently decreases below 2^64-1 (due, e.g., to a retroactive adjustment as a result of entering or exiting unavailable time), then the object's value also decreases. Note that this TC is not strictly supported in SMIv2, because the 'always increasing' and 'counter wrap' semantics associated with the Counter64 base type are not preserved. It is possible that management applications which rely solely upon the (Counter64) ASN.1 tag to determine object semantics will mistakenly operate upon objects of this type as they would for Counter64 objects. This textual convention represents a limited and short- term solution, and may be deprecated as a long term solution is defined and deployed to replace it."
    status = 'current'

class PerfIntervalCount64(TextualConvention, Counter64):
    description = "A gauge associated with a performance measurement in a previous 15 minute measurement interval. In the case where the agent has no valid data available for a particular interval, the corresponding object instance is not available and upon a retrieval request a corresponding error message shall be returned to indicate that this instance does not exist. Let X be an object with HCPerfIntervalCount syntax Let Y be an object with HCPerfCurrentCount syntax. Let Z be an object with HCPerfTotalCount syntax. Then, in a system supporting a history of n intervals with X(1) and X(n) the most and least recent intervals respectively, the following applies at the end of a 15 minute interval: - discard the value of X(n) - the value of X(i) becomes that of X(i-1) for n >= i > 1 - the value of X(1) becomes that of Y. - the value of Z, if supported, is adjusted. This count represents a non-negative integer, which may increase or decrease, but shall never exceed 2^64-1 (18446744073709551615 decimal), nor fall below 0. The value of an object with HCPerfIntervalCount syntax assumes its maximum value whenever the underlying count exceeds 2^64-1. If the underlying count subsequently decreases below 2^64-1 (due, e.g., to a retroactive adjustment as a result of entering or exiting unavailable time), then the value of the object also decreases. Note that this TC is not strictly supported in SMIv2, because the 'always increasing' and 'counter wrap' semantics associated with the Counter64 base type are not preserved. It is possible that management applications which rely solely upon the (Counter64) ASN.1 tag to determine object semantics will mistakenly operate upon objects of this type as they would for Counter64 objects. This textual convention represents a limited and short- term solution, and may be deprecated as a long term solution is defined and deployed to replace it."
    status = 'current'

srpMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 1))
srpRingCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 2))
srpHostCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 3))
srpErrorsCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 4))
srpTrapsNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 5))
srpTrapsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 5, 0))
srpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 6))
srpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1))
srpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 2))
srpIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1), )
if mibBuilder.loadTexts: srpIfTable.setStatus('current')
if mibBuilder.loadTexts: srpIfTable.setDescription('The SRP interface table.')
srpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: srpIfEntry.setStatus('current')
if mibBuilder.loadTexts: srpIfEntry.setDescription('There exists one such entry for every interface in the ifTable which has an ifType of SRP interface (151) Each of these entries are indexed by the value of ifIndex as defined in RFC2233.')
srpMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACAddress.setStatus('current')
if mibBuilder.loadTexts: srpMACAddress.setDescription("The MAC's 48-bit individual MAC address.")
srpPriorityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpPriorityThreshold.setStatus('current')
if mibBuilder.loadTexts: srpPriorityThreshold.setDescription("The priority threshold value to be compared against the 3 bits of priority contained in each packet's SRP header. If a packet's priority is greater or equal to this threshold, that packet should be placed in the high priority transmit or transit queue. If a packet's priority is less than this threshold, it should be placed in the low priority transmit or transit queue. Since there are only two types of priority queues (High Priority and Low Priority) a packet is treated as either low or high priority once it is on the ring. Each node determines the threshold value for classifying what is considered a high priority packet and what is considered a low priority packet.")
srpNodesOnTheRing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodesOnTheRing.setStatus('current')
if mibBuilder.loadTexts: srpNodesOnTheRing.setDescription('The number of nodes in the SRP ring. When interface is down the value is 0.')
srpIpsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("passThrough", 2), ("wrapped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpIpsState.setStatus('current')
if mibBuilder.loadTexts: srpIpsState.setDescription('Each node in the Intelligent Protection Switching (IPS) is one of the following states. Idle - In this mode the node is ready to perform protection and it sends to both neighboring nodes idle IPS messages, which include self in the source address field {0, SELF, 0, S}. PassThrough - Node participate in a protection switch by passing the wrapped traffic and long path signalling through itself. This state is entered based on received IPS messages. Wrapped - Node participate in a protection switch with a wrap present. This state is entered based on protection request issued locally or based on received IPS messages. When interface is down the value for IPS state is passThrough.')
srpIpsLockedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpIpsLockedOut.setStatus('current')
if mibBuilder.loadTexts: srpIpsLockedOut.setDescription("The boolean flag to indicate node LockedOut of protection state. If it's true than Intelligent Protection Swiching is disabled and the node will not wrap on either side of the interface.")
srpIpsWaitToRestoreTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpIpsWaitToRestoreTimer.setStatus('current')
if mibBuilder.loadTexts: srpIpsWaitToRestoreTimer.setDescription('Indicates the length of time in seconds, to remain in the wrap state, after the cause of a wrap is removed. This mechanism prevents protection switch oscillations. Default value is 60 sec.')
srpIfTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: srpIfTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: srpIfTimeElapsed.setDescription("The number of seconds, including partial seconds, that have elapsed since the beginning of the current measurement interval as described in RFC 2493. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
srpIfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpIfValidIntervals.setStatus('current')
if mibBuilder.loadTexts: srpIfValidIntervals.setDescription('The number of previous 15-minute measurement intervals for which data was collected. A SRP interface must be capable of supporting at least n intervals. The minimum value of n is 4. The default of n is 32. The maximum value of n is 96. The value will be unless the measurement was (re-)started within the last (*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available. ')
srpMACSideTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2), )
if mibBuilder.loadTexts: srpMACSideTable.setStatus('current')
if mibBuilder.loadTexts: srpMACSideTable.setDescription('A table of information about the sides of SRP interfaces.')
srpMACSideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpMACInterfaceSide"))
if mibBuilder.loadTexts: srpMACSideEntry.setStatus('current')
if mibBuilder.loadTexts: srpMACSideEntry.setDescription('A list of information specific to a particular side of a particular SRP interface.')
srpMACInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpMACInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: srpMACInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpMACNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACNeighborAddress.setStatus('current')
if mibBuilder.loadTexts: srpMACNeighborAddress.setDescription("The MAC's neighbor's 48-bit individual MAC address.")
srpMACSideWrapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACSideWrapped.setStatus('current')
if mibBuilder.loadTexts: srpMACSideWrapped.setDescription("The boolean flag to indicate the node's wrapped state.")
srpMACIpsMgmtRequestedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 4), IpsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACIpsMgmtRequestedMode.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsMgmtRequestedMode.setDescription('The IPS mode requested by management for the local node that can affect the srpMACIpsActiveMode state of the SRP node, according to the set of rules describing IPS protocol. This variable value is one from the following subset (noRequest, manualSwitch, forcedSwitch).')
srpMACIpsAutoDetectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 5), IpsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsAutoDetectMode.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsAutoDetectMode.setDescription('The current IPS mode as automatically detected by the the local node that can affect the srpMACIpsActiveMode state of the SRP node, according to the set of rules describing IPS protocol. This variable value is one from the following subset (SignalFail, SignalDegrade, WaitToRestore).')
srpMACIpsRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 6), IpsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsRemoteMode.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsRemoteMode.setDescription('The IPS mode indicated in IPS messages being received by the local node from other nodes on the ring, that can affect the srpMACIpsActiveMode state of the SRP node, according to the set of rules describing IPS protocol.')
srpMACIpsRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shortPath", 1), ("longPath", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsRemoteType.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsRemoteType.setDescription('Indicates if srpMACIpsRemoteMode object value belongs to the adjacent node in the case of the shortPath or belongs to the non-adjacent node in the case of the longPath.')
srpMACIpsActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 8), IpsMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsActiveMode.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsActiveMode.setDescription('The currently active IPS mode for the local node, which can be changed based on combined effect of the following variables: srpMACIpsMgmtRequestedMode, srpMACIpsAutoDetectMode, srpMACIpsRemoteMode, and srpMACIpsRemoteType according to the set of rules describing IPS protocol.')
srpMACIpsWrapCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsWrapCounter.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsWrapCounter.setDescription('The number of transition from unwrap to wrap state.')
srpMACIpsLastWrapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsLastWrapTimeStamp.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsLastWrapTimeStamp.setDescription('The value of sysUpTime for the last wrap.')
srpMACIpsLastUnWrapTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACIpsLastUnWrapTimeStamp.setStatus('current')
if mibBuilder.loadTexts: srpMACIpsLastUnWrapTimeStamp.setDescription('The value of sysUpTime for the last unwrap.')
srpMACClockSourceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACClockSourceMode.setStatus('current')
if mibBuilder.loadTexts: srpMACClockSourceMode.setDescription('Indicates the mode of the SRP interface clock source. Internal - mode specifies the clock source as internal, and is used when connecting between two routers over a dark fiber or over WDM system. The internal mode is used as a default value. Line - mode specifies the clock source as line, and is used when connecting a router to SONET/SDH ADM.')
srpMACTopologyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACTopologyTimer.setStatus('current')
if mibBuilder.loadTexts: srpMACTopologyTimer.setDescription('Indicates the topology-timer on a SRP ring, how frequently topology discovery messages are sent around ring to identify the nodes. Toplogy discovery is always on. The default value is 10 seconds.')
srpRingTopologyMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3), )
if mibBuilder.loadTexts: srpRingTopologyMapTable.setStatus('current')
if mibBuilder.loadTexts: srpRingTopologyMapTable.setDescription('A list of SRP ring topology map entries.')
srpRingTopologyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpNodeHopsNumber"))
if mibBuilder.loadTexts: srpRingTopologyMapEntry.setStatus('current')
if mibBuilder.loadTexts: srpRingTopologyMapEntry.setDescription('A MAC entry containing information specific to a particular node on the ring.')
srpNodeHopsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: srpNodeHopsNumber.setStatus('current')
if mibBuilder.loadTexts: srpNodeHopsNumber.setDescription('A value, between 0 and (srpNodesOnTheRing - 1), used to identify the particular node which is the number of hops around the ring (clock-wise) away from the local node.')
srpNodeMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodeMACAddress.setStatus('current')
if mibBuilder.loadTexts: srpNodeMACAddress.setDescription("The node MAC's 48-bit individual MAC address.")
srpNodeWrapped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodeWrapped.setStatus('current')
if mibBuilder.loadTexts: srpNodeWrapped.setDescription('Indicates in general if the node is wrapped without specifying on which side.')
srpNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpNodeName.setStatus('current')
if mibBuilder.loadTexts: srpNodeName.setDescription('The node name reported by the SRP protocol. If the name is not known then this field is left blank.')
srpMACCountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6), )
if mibBuilder.loadTexts: srpMACCountersTable.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountersTable.setDescription('The MAC layer traffic Counters table.')
srpMACCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: srpMACCountersEntry.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountersEntry.setDescription('A packet counting and packet reject capability for a source and/or destination address on a particular SRP interface.')
srpMACCountPktsBySourceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsBySourceFlag.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountPktsBySourceFlag.setDescription('Indicates that packets are to be counted for a particular source address.')
srpMACCountPktsBySourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsBySourceAddress.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountPktsBySourceAddress.setDescription("Indicates the particular source address for which packets are to be counted when the corresponding instance of srpMACCountPktsBySourceFlag has the value 'true'.")
srpMACSourceDiscontTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACSourceDiscontTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACSourceDiscontTimeStamp.setDescription('The value of sysUpTime on the most recent occasion when there was a change in the value of the corresponding instances of either srpMACCountPktsBySourceAddress or srpMACCountPktsBySourceFlag.')
srpMACCountPktsBySource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACCountPktsBySource.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountPktsBySource.setDescription("Counter for the number of packets received from a particular source node's MAC address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of srpMACSourceDiscontTimeStamp.")
srpMACCountPktsByDestinationFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsByDestinationFlag.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountPktsByDestinationFlag.setDescription('Indicates that packets are to be counted for a particular destination address.')
srpMACCountPktsByDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACCountPktsByDestAddress.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountPktsByDestAddress.setDescription("Indicates the particular destination address for which packets are to be counted when the corresponding instance of srpMACCountPktsByDestinationFlag has the value 'true'.")
srpMACDestDiscontTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACDestDiscontTimeStamp.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACDestDiscontTimeStamp.setDescription('The value of sysUpTime on the most recent occasion when there was a change in the value of the corresponding instances of either srpMACCountPktsByDestAddress or srpMACCountPktsByDestinationFlag.')
srpMACCountPktsByDest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpMACCountPktsByDest.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountPktsByDest.setDescription("Counter for the number of packets send to a particular destination node's MAC address. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times as indicated by the value of srpMACDestDiscontTimeStamp.")
srpMACRejectPktsBySourceFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsBySourceFlag.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACRejectPktsBySourceFlag.setDescription('Indicates that packets are to be rejected for a particular source address.')
srpMACRejectPktsBySourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsBySourceAddress.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACRejectPktsBySourceAddress.setDescription("Indicates the particular source address for which packets are to rejected when the corresponding instance of srpMACRejectPktsBySourceFlag has the value 'true'.")
srpMACRejectPktsByDestFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsByDestFlag.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACRejectPktsByDestFlag.setDescription('Indicates that packets are to be rejected for a particular destination address.')
srpMACRejectPktsByDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 1, 6, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srpMACRejectPktsByDestAddress.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACRejectPktsByDestAddress.setDescription("Indicates the particular destination address for which packets are to rejected when the corresponding instance of srpMACRejectPktsByDestFlag has the value 'true'.")
srpRingCountersCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1), )
if mibBuilder.loadTexts: srpRingCountersCurrentTable.setStatus('current')
if mibBuilder.loadTexts: srpRingCountersCurrentTable.setDescription('The Physical medium dependent layer Current counters table.')
srpRingCountersCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpRingInterfaceSide"))
if mibBuilder.loadTexts: srpRingCountersCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: srpRingCountersCurrentEntry.setDescription('Packets and octets statistics for the current interval for the Physical medium dependent layer of a particular side of a particular SRP interface. The corresponding instance of srpIfTimeElapsed indicates the number of seconds which have elapsed so far in the current interval.')
srpRingInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpRingInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: srpRingInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpRingCurUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastLowPriPktsIn.setDescription('The counter associated with the number of low priority unicast packets received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastLowPriOctetsIn.setDescription('The counter associated with the number of low priority unicast octets received from the Physical medium dependent layer in the current 15minute interval.')
srpRingCurMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastLowPriPktsIn.setDescription('The counter associated with the number of low priority multicast packets received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastLowPriOctetsIn.setDescription('The counter associated with the number of low priority multicast octets received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastHighPriPktsIn.setDescription('The counter associated with the number of high priority unicast packets received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority unicast octets received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastHighPriPktsIn.setDescription('The counter associated with the number of high priority multicast packets received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority multicast octets received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 10), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastLowPriPktsOut.setDescription('The counter associated with the number of low priority unicast packets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 11), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastLowPriOctetsOut.setDescription('The counter associated with the number of low priority unicast octets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 12), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastLowPriPktsOut.setDescription('The counter associated with the number of low priority multicast packets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 13), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastLowPriOctetsOut.setDescription('The counter associated with the number of low priority multicast octets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 14), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastHighPriPktsOut.setDescription('The counter associated with the number of high priority unicast packets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 15), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurUcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurUcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority unicast octets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 16), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastHighPriPktsOut.setDescription('The counter associated with the number of high priority multicast packets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 1, 1, 17), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurMcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingCurMcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority multicast octets going to the Physical medium dependent layer in the current 15 minute interval.')
srpRingCountersIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2), )
if mibBuilder.loadTexts: srpRingCountersIntervalTable.setStatus('current')
if mibBuilder.loadTexts: srpRingCountersIntervalTable.setDescription('The Physical medium dependent layer Interval counters table.')
srpRingCountersIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpRingIntInterfaceSide"), (0, "CISCO-SRP-MIB", "srpRingIntNumber"))
if mibBuilder.loadTexts: srpRingCountersIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: srpRingCountersIntervalEntry.setDescription('Packets and octets statistics collected for a particular interval for the Physical medium dependent layer of a particular side of a particular SRP interface. The number of 15-minute intervals is between 1 and 96, identifies the intervals for which the set of and statistics is available.')
srpRingIntInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpRingIntInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: srpRingIntInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpRingIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpRingIntNumber.setStatus('current')
if mibBuilder.loadTexts: srpRingIntNumber.setDescription('A number between 1 and 96, which identifies the intervals for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1.')
srpRingIntWrapCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntWrapCounter.setStatus('current')
if mibBuilder.loadTexts: srpRingIntWrapCounter.setDescription('The counter counts the number of transition from unwrap to wrap state for the last intervals described by the srpRingIntNumber variable.')
srpRingIntUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastLowPriPktsIn.setDescription('The counter associated with the number of low priority unicast packets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastLowPriOctetsIn.setDescription('The counter associated with the number of low priority unicast octets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastLowPriPktsIn.setDescription('The counter associated with the number of low priority multicast packets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastLowPriOctetsIn.setDescription('The counter associated with the number of low priority multicast octets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastHighPriPktsIn.setDescription('The counter associated with the number of high priority unicast packets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority unicast octets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastHighPriPktsIn.setDescription('The counter associated with the number of high priority multicast packets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 11), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority multicast octets received from the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 12), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastLowPriPktsOut.setDescription('The counter associated with the number of low priority unicast packets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 13), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastLowPriOctetsOut.setDescription('The counter associated with the number of low priority unicast octets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 14), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastLowPriPktsOut.setDescription('The counter associated with the number of low priority multicast packets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 15), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastLowPriOctetsOut.setDescription('The counter associated with the number of low priority multicast octets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 16), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastHighPriPktsOut.setDescription('The counter associated with the number of high priority unicast packets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 17), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntUcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntUcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority unicast octets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 18), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastHighPriPktsOut.setDescription('The counter associated with the number of high priority multicast packets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpRingIntMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 2, 2, 1, 19), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntMcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpRingIntMcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority multicast octets going to the Physical medium dependent layer in a particular 15-minute interval in the past 24 hours.')
srpHostCountersCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1), )
if mibBuilder.loadTexts: srpHostCountersCurrentTable.setStatus('current')
if mibBuilder.loadTexts: srpHostCountersCurrentTable.setDescription('The Higher Layer Current counters table.')
srpHostCountersCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpHostInterfaceSide"))
if mibBuilder.loadTexts: srpHostCountersCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: srpHostCountersCurrentEntry.setDescription('Packets and octets statistics for the current interval for the Higher Layer of a particular side of a particular SRP interface. The corresponding instance of srpIfTimeElapsed indicates the number of seconds which have elapsed so far in the current interval.')
srpHostInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpHostInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: srpHostInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpHostCurUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastLowPriPktsIn.setDescription('The counter associated with the number of total unicast packets received from the Higher Layer in the current 15 minute interval.')
srpHostCurUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastLowPriOctetsIn.setDescription('The counter associated with the number of total unicast octets received from the Higher Layer in the current 15 minute interval.')
srpHostCurMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastLowPriPktsIn.setDescription('The counter associated with the number of total multicast packets received from the Higher Layer in the current 15 minute interval.')
srpHostCurMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastLowPriOctetsIn.setDescription('The counter associated with the number of total multicast octets received from the Higher Layer in the current 15 minute interval.')
srpHostCurUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastHighPriPktsIn.setDescription('The counter associated with the number of high priority unicast packets received from the Higher Layer in the current 15 minute interval.')
srpHostCurUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority unicast octets received from the Higher Layer in the current 15 minute interval.')
srpHostCurMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastHighPriPktsIn.setDescription('The counter associated with the number of high priority multicast packets received from the Higher Layer in the current 15 minute interval.')
srpHostCurMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority multicast octets received from the Higher Layer in the current 15 minute interval.')
srpHostCurUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 10), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastLowPriPktsOut.setDescription('The counter associated with the number of total unicast packets going to the Higher Layer in the current 15 minute interval.')
srpHostCurUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 11), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastLowPriOctetsOut.setDescription('The counter associated with the number of total unicast octets going to the Higher Layer in the current 15 minute interval.')
srpHostCurMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 12), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastLowPriPktsOut.setDescription('The counter associated with the number of total multicast packets going to the Higher Layer in the current 15 minute interval.')
srpHostCurMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 13), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastLowPriOctetsOut.setDescription('The counter associated with the number of total multicast octets going to the Higher Layer in the current 15 minute interval.')
srpHostCurUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 14), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastHighPriPktsOut.setDescription('The counter associated with the number of high priority unicast packets going to the Higher Layer in the current 15 minute interval.')
srpHostCurUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 15), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurUcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurUcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority unicast octets going to from the Higher Layer in the current 15 minute interval.')
srpHostCurMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 16), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastHighPriPktsOut.setDescription('The counter associated with the number of high priority multicast packets going to the Higher Layer in the current 15 minute interval.')
srpHostCurMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 1, 1, 17), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurMcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostCurMcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority multicast octets going to the Higher Layer in the current 15 minute interval.')
srpHostCountersIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2), )
if mibBuilder.loadTexts: srpHostCountersIntervalTable.setStatus('current')
if mibBuilder.loadTexts: srpHostCountersIntervalTable.setDescription('The Higher Layer Interval counters table.')
srpHostCountersIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpHostIntInterfaceSide"), (0, "CISCO-SRP-MIB", "srpHostIntNumber"))
if mibBuilder.loadTexts: srpHostCountersIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: srpHostCountersIntervalEntry.setDescription('Packets and octets statistics collected for a particular interval for the Higher Layer of a particular side of a particular SRP interface. The number of 15-minute intervals is between 1 and 96, and identifies the intervals for which the set of statistics is available.')
srpHostIntInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpHostIntInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: srpHostIntInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpHostIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpHostIntNumber.setStatus('current')
if mibBuilder.loadTexts: srpHostIntNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set od statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1.')
srpHostIntUcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 3), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastLowPriPktsIn.setDescription('The counter associated with the number of total unicast packets received from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntUcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastLowPriOctetsIn.setDescription('The counter associated with the number of total unicast octets received from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastLowPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastLowPriPktsIn.setDescription('The counter associated with the number of total multicast packets received from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastLowPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastLowPriOctetsIn.setDescription('The counter associated with the number of total multicast octets received from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntUcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastHighPriPktsIn.setDescription('The counter associated with the number of high priority unicast packets received from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntUcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority unicast octets received from from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastHighPriPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriPktsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastHighPriPktsIn.setDescription('The counter associated with the number of high priority multicast packets received from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastHighPriOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriOctetsIn.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastHighPriOctetsIn.setDescription('The counter associated with the number of high priority multicast octets received from the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntUcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 11), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastLowPriPktsOut.setDescription('The counter associated with the number of total unicast packets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntUcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 12), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastLowPriOctetsOut.setDescription('The counter associated with the number of total unicast octets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastLowPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 13), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastLowPriPktsOut.setDescription('The counter associated with the number of total multicast packets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastLowPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 14), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastLowPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastLowPriOctetsOut.setDescription('The counter associated with the number of total multicast octets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntUcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 15), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastHighPriPktsOut.setDescription('The counter associated with the number of high priority unicast packets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntUcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 16), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntUcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntUcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority unicast octets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastHighPriPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 17), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriPktsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastHighPriPktsOut.setDescription('The counter associated with the number of high priority multicast packets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntMcastHighPriOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 3, 2, 1, 18), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntMcastHighPriOctetsOut.setStatus('current')
if mibBuilder.loadTexts: srpHostIntMcastHighPriOctetsOut.setDescription('The counter associated with the number of high priority multicast octets going to the Higher Layer in a particular 15-minute interval in the past 24 hours.')
srpErrorsCountersCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1), )
if mibBuilder.loadTexts: srpErrorsCountersCurrentTable.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsCountersCurrentTable.setDescription('The SRP Errors Current counters table.')
srpErrorsCountersCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrorsInterfaceSide"))
if mibBuilder.loadTexts: srpErrorsCountersCurrentEntry.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsCountersCurrentEntry.setDescription('Errors statistics for the current interval of a particular side of a particular SRP interface. The corresponding instance of srpIfTimeElapsed indicates the number of seconds which have elapsed so far in the current interval.')
srpErrorsInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrorsInterfaceSide.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpRingCurRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsDataParity.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingCurRxErrorsDataParity.setDescription('The counter associated with the number of data parity errors, received from the Physical medium dependent layer in the current 15 minute interval.')
srpRingCurRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsShortPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingCurRxErrorsShortPackets.setDescription('The counter associated with the number of short packets, received from the Physical medium dependent layer in the current 15 minute interval. A short packet is 16 octets or less.')
srpRingCurRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsGiantPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingCurRxErrorsGiantPackets.setDescription('The counter associated with the number of giant packets, received from the Physical medium dependent layer in the current 15 minute interval. A giant packet is larger than max size MTU, which is 9216 octets.')
srpRingCurRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsSideBadPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingCurRxErrorsSideBadPackets.setDescription('The counter associated with the current number of bad packets, received from the Physical medium dependent layer in the current 15 minute interval. A bad packet is an empty packet with a valid Start-Of-Packet signal causing an incorrect CRC.')
srpRingCurRxErrorsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingCurRxErrorsCRC.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingCurRxErrorsCRC.setDescription('The counter associated with the current number of packets with CRC errors, received from the Physical medium dependent layer in the current 15 minute interval.')
srpHostCurRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsDataParity.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostCurRxErrorsDataParity.setDescription('The counter associated with the current number of data parity errors, received from the Higher Layer in the current 15 minute interval.')
srpHostCurRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsShortPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostCurRxErrorsShortPackets.setDescription('The counter associated with the current number of short packets, received from the Higher Layer in the current 15 minute interval.')
srpHostCurRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsGiantPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostCurRxErrorsGiantPackets.setDescription('The counter associated with the current number of giant packets, received from the Higher Layer in the current 15 minute interval.')
srpHostCurRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 1, 1, 10), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostCurRxErrorsSideBadPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostCurRxErrorsSideBadPackets.setDescription('The counter associated with the current number of bad packets, received from the Higher Layer in the current 15 minute interval.')
srpErrorsCountersIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2), )
if mibBuilder.loadTexts: srpErrorsCountersIntervalTable.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsCountersIntervalTable.setDescription('The SRP Errors Interval counters table.')
srpErrorsCountersIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrorsIntervalInterfaceSide"), (0, "CISCO-SRP-MIB", "srpErrorsIntervalNumber"))
if mibBuilder.loadTexts: srpErrorsCountersIntervalEntry.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsCountersIntervalEntry.setDescription('Error statistics collected for a particular interval of a particular side of a particular SRP interface. The number of 15-minute intervals is between 1 and 96, and identifies the intervals for which the set of statistics is available.')
srpErrorsIntervalInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrorsIntervalInterfaceSide.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsIntervalInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpErrorsIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpErrorsIntervalNumber.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set od statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1.')
srpRingIntRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 3), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsDataParity.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingIntRxErrorsDataParity.setDescription('The counter associated with the interval number of data parity errors, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpRingIntRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsShortPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingIntRxErrorsShortPackets.setDescription('The counter associated with the interval number of short packets, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpRingIntRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsGiantPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingIntRxErrorsGiantPackets.setDescription('The counter associated with the interval number of giant packets, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpRingIntRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsSideBadPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingIntRxErrorsSideBadPackets.setDescription('The counter associated with the interval number of bad packets, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpRingIntRxErrorsCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpRingIntRxErrorsCRC.setStatus('deprecated')
if mibBuilder.loadTexts: srpRingIntRxErrorsCRC.setDescription('The counter associated with the interval number of packets with CRC errors, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpHostIntRxErrorsDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsDataParity.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostIntRxErrorsDataParity.setDescription('The counter associated with the interval number of data parity errors, received from the higher layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntRxErrorsShortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsShortPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostIntRxErrorsShortPackets.setDescription('The counter associated with the interval number of short packets, received from the higher layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntRxErrorsGiantPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsGiantPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostIntRxErrorsGiantPackets.setDescription('The counter associated with the interval number of giant packets, received from the higher layer in a particular 15-minute interval in the past 24 hours.')
srpHostIntRxErrorsSideBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 2, 1, 11), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpHostIntRxErrorsSideBadPackets.setStatus('deprecated')
if mibBuilder.loadTexts: srpHostIntRxErrorsSideBadPackets.setDescription('The counter associated with the interval number of bad packets, received from the higher layer in a particular 15-minute interval in the past 24 hours.')
srpErrCntCurrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3), )
if mibBuilder.loadTexts: srpErrCntCurrTable.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrTable.setDescription('The SRP Errors Current counters table.')
srpErrCntCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrCntCurrInterfaceSide"))
if mibBuilder.loadTexts: srpErrCntCurrEntry.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrEntry.setDescription('Errors statistics for the current interval of a particular side of a particular SRP interface. The corresponding instance of srpIfTimeElapsed indicates the number of seconds which have elapsed so far in the current interval.')
srpErrCntCurrInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrCntCurrInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpErrCntCurrRingRxTtlExpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 2), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxTtlExpPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrRingRxTtlExpPkts.setDescription('The counter associated with the number of packets discarded due to TTL expiry, received from the Physical medium dependent layer in the current 15 minute interval.')
srpErrCntCurrRingRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 3), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxShortPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrRingRxShortPkts.setDescription('The counter associated with the number of short packets, received from the Physical medium dependent layer in the current 15 minute interval. A short packet is 16 octets or less.')
srpErrCntCurrRingRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 4), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrRingRxGiantPkts.setDescription('The counter associated with the number of giant packets, received from the Physical medium dependent layer in the current 15 minute interval. A giant packet is larger than max size packet, which is 9216 octets.')
srpErrCntCurrRingRxAbortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 5), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxAbortPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrRingRxAbortPkts.setDescription('The counter associated with the current number of aborted packets, received from the Physical medium dependent layer in the current 15 minute interval. Aborted packets are packets that have been aborted by an abort sequence code.')
srpErrCntCurrRingRxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 6), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrRingRxCRC.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrRingRxCRC.setDescription('The counter associated with the current number of packets with CRC errors, received from the Physical medium dependent layer in the current 15 minute interval.')
srpErrCntCurrHostRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 7), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrHostRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrHostRxDiscardPkts.setDescription('The counter associated with the current number of packets which were prevented from being delivered to the Higher Layer because of a resource limitation, in the current 15 minute interval.')
srpErrCntCurrHostRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 8), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrHostRxShortPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrHostRxShortPkts.setDescription('The counter associated with the current number of packets which were prevented from being delivered to the Higher Layer because of being too short, in the current 15 minute interval.')
srpErrCntCurrHostRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 3, 1, 9), PerfCurrentCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntCurrHostRxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrHostRxGiantPkts.setDescription('The counter associated with the current number of packets discarded because of being too big for the higher layer, in the current 15 minute interval.')
srpErrCntIntTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4), )
if mibBuilder.loadTexts: srpErrCntIntTable.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntTable.setDescription('The SRP Errors Interval counters table.')
srpErrCntIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-SRP-MIB", "srpErrCntIntInterfaceSide"), (0, "CISCO-SRP-MIB", "srpErrCntIntNumber"))
if mibBuilder.loadTexts: srpErrCntIntEntry.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntEntry.setDescription('Error statistics collected for a particular interval of a particular side of a particular SRP interface. The number of 15-minute intervals is between 1 and 96, and identifies the intervals for which the set of statistics is available. The value of srpIfValidIntervals indicates how many intervals are currently available.')
srpErrCntIntInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 1), InterfaceSide())
if mibBuilder.loadTexts: srpErrCntIntInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntInterfaceSide.setDescription('An indication of the side of the interface for which this row contains information.')
srpErrCntIntNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: srpErrCntIntNumber.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set od statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and interval identified by N is the interval immediately preceding the one identified by N-1.')
srpErrCntIntRingRxTtlExpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 3), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxTtlExpPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntRingRxTtlExpPkts.setDescription('The counter associated with the interval number of expired packets, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpErrCntIntRingRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 4), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxShortPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntRingRxShortPkts.setDescription('The counter associated with the interval number of short packets, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpErrCntIntRingRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 5), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntRingRxGiantPkts.setDescription('The counter associated with the interval number of giant packets, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpErrCntIntRingRxAbortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 6), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxAbortPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntRingRxAbortPkts.setDescription('The counter associated with the interval number of aborted packets, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpErrCntIntRingRxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 7), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntRingRxCRC.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntRingRxCRC.setDescription('The counter associated with the interval number of packets with CRC errors, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpErrCntIntHostRxDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 8), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntHostRxDiscardPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntHostRxDiscardPkts.setDescription('The counter associated with the interval number of packets discarded due to resource limitations, received from the Layer 1 Physical medium in a particular 15-minute interval in the past 24 hours.')
srpErrCntIntHostRxShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 9), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntHostRxShortPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntHostRxShortPkts.setDescription('The counter associated with the interval number of packets discarded because of being too short for the higher layer, in a particular 15-minute interval in the past 24 hours.')
srpErrCntIntHostRxGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 60, 4, 4, 1, 10), PerfIntervalCount64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: srpErrCntIntHostRxGiantPkts.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntHostRxGiantPkts.setDescription('The counter associated with the interval number of packets discarded because of being too big for the higher layer, in a particular 15-minute interval in the past 24 hours.')
srpTrapRingWrapped = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 60, 5, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-SRP-MIB", "srpIpsState"), ("CISCO-SRP-MIB", "srpMACIpsAutoDetectMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteType"), ("CISCO-SRP-MIB", "srpMACIpsActiveMode"), ("CISCO-SRP-MIB", "srpMACIpsWrapCounter"), ("CISCO-SRP-MIB", "srpMACIpsLastWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACIpsLastUnWrapTimeStamp"))
if mibBuilder.loadTexts: srpTrapRingWrapped.setStatus('current')
if mibBuilder.loadTexts: srpTrapRingWrapped.setDescription('An srpTrapRingWrapped notification is sent when the value of an instance of srpMACIpsWrapCounter increments.')
srpTrapRingRestored = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 60, 5, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-SRP-MIB", "srpIpsState"), ("CISCO-SRP-MIB", "srpMACIpsAutoDetectMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteType"), ("CISCO-SRP-MIB", "srpMACIpsActiveMode"), ("CISCO-SRP-MIB", "srpMACIpsWrapCounter"), ("CISCO-SRP-MIB", "srpMACIpsLastWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACIpsLastUnWrapTimeStamp"))
if mibBuilder.loadTexts: srpTrapRingRestored.setStatus('current')
if mibBuilder.loadTexts: srpTrapRingRestored.setDescription('An srpTrapRingRestored notification is sent when the value of an instance of rpMACIpsLastUnWrapTimeStamp is changed.')
srpIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 1)).setObjects(("CISCO-SRP-MIB", "srpMACAddress"), ("CISCO-SRP-MIB", "srpPriorityThreshold"), ("CISCO-SRP-MIB", "srpNodesOnTheRing"), ("CISCO-SRP-MIB", "srpIpsState"), ("CISCO-SRP-MIB", "srpIpsLockedOut"), ("CISCO-SRP-MIB", "srpIpsWaitToRestoreTimer"), ("CISCO-SRP-MIB", "srpIfTimeElapsed"), ("CISCO-SRP-MIB", "srpIfValidIntervals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpIfGroup = srpIfGroup.setStatus('current')
if mibBuilder.loadTexts: srpIfGroup.setDescription('A collection of objects providing information independent from a particular side A or B and is applicable to all SRP interfaces.')
srpMACSideGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 2)).setObjects(("CISCO-SRP-MIB", "srpMACNeighborAddress"), ("CISCO-SRP-MIB", "srpMACSideWrapped"), ("CISCO-SRP-MIB", "srpMACIpsMgmtRequestedMode"), ("CISCO-SRP-MIB", "srpMACIpsAutoDetectMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteMode"), ("CISCO-SRP-MIB", "srpMACIpsRemoteType"), ("CISCO-SRP-MIB", "srpMACIpsActiveMode"), ("CISCO-SRP-MIB", "srpMACIpsWrapCounter"), ("CISCO-SRP-MIB", "srpMACIpsLastWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACIpsLastUnWrapTimeStamp"), ("CISCO-SRP-MIB", "srpMACClockSourceMode"), ("CISCO-SRP-MIB", "srpMACTopologyTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpMACSideGroup = srpMACSideGroup.setStatus('current')
if mibBuilder.loadTexts: srpMACSideGroup.setDescription('A collection of objects providing information dependent from a particular side A or B and is specific to MAC and IPS (Intelligent protection Switching).')
srpRingTopologyMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 3)).setObjects(("CISCO-SRP-MIB", "srpNodeMACAddress"), ("CISCO-SRP-MIB", "srpNodeWrapped"), ("CISCO-SRP-MIB", "srpNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpRingTopologyMapGroup = srpRingTopologyMapGroup.setStatus('current')
if mibBuilder.loadTexts: srpRingTopologyMapGroup.setDescription('A collection of objects providing information on the ring topology and nodes status.')
srpMACCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 4)).setObjects(("CISCO-SRP-MIB", "srpMACCountPktsBySourceFlag"), ("CISCO-SRP-MIB", "srpMACCountPktsBySourceAddress"), ("CISCO-SRP-MIB", "srpMACSourceDiscontTimeStamp"), ("CISCO-SRP-MIB", "srpMACCountPktsBySource"), ("CISCO-SRP-MIB", "srpMACCountPktsByDestinationFlag"), ("CISCO-SRP-MIB", "srpMACCountPktsByDestAddress"), ("CISCO-SRP-MIB", "srpMACDestDiscontTimeStamp"), ("CISCO-SRP-MIB", "srpMACCountPktsByDest"), ("CISCO-SRP-MIB", "srpMACRejectPktsBySourceFlag"), ("CISCO-SRP-MIB", "srpMACRejectPktsBySourceAddress"), ("CISCO-SRP-MIB", "srpMACRejectPktsByDestFlag"), ("CISCO-SRP-MIB", "srpMACRejectPktsByDestAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpMACCountersGroup = srpMACCountersGroup.setStatus('deprecated')
if mibBuilder.loadTexts: srpMACCountersGroup.setDescription('A collection of objects providing information about packets received or rejected by a particular source or destination address.')
srpRingCountersCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 5)).setObjects(("CISCO-SRP-MIB", "srpRingCurUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingCurUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingCurMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpRingCountersCurrentGroup = srpRingCountersCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: srpRingCountersCurrentGroup.setDescription('A collection of objects providing information about unicast or multicast packets and octets coming from the ring to a particular node in the current 15 minute interval.')
srpRingCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 6)).setObjects(("CISCO-SRP-MIB", "srpRingIntWrapCounter"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpRingIntMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpRingCountersIntervalGroup = srpRingCountersIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: srpRingCountersIntervalGroup.setDescription('A collection of objects providing information about uni or multicast packets and octets coming from the ring to a particular node in a particular 15-minute interval in the past 24 hours.')
srpHostCountersCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 7)).setObjects(("CISCO-SRP-MIB", "srpHostCurUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostCurUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostCurMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpHostCountersCurrentGroup = srpHostCountersCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: srpHostCountersCurrentGroup.setDescription('A collection of objects providing information about uni or multicast packets and octets coming from the host to a particular node in the current 15 minute interval.')
srpHostCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 8)).setObjects(("CISCO-SRP-MIB", "srpHostIntUcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriPktsIn"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriOctetsIn"), ("CISCO-SRP-MIB", "srpHostIntUcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntUcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastLowPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntUcastHighPriOctetsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriPktsOut"), ("CISCO-SRP-MIB", "srpHostIntMcastHighPriOctetsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpHostCountersIntervalGroup = srpHostCountersIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: srpHostCountersIntervalGroup.setDescription('A collection of objects providing information about uni or multicast packets and octets coming from the host to a particular node in a particular 15-minute interval in the past 24 hours.')
srpErrorsCountersCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 9)).setObjects(("CISCO-SRP-MIB", "srpRingCurRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsSideBadPackets"), ("CISCO-SRP-MIB", "srpRingCurRxErrorsCRC"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpHostCurRxErrorsSideBadPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrorsCountersCurrentGroup = srpErrorsCountersCurrentGroup.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsCountersCurrentGroup.setDescription('A collection of objects providing information about errors coming from the ring to a particular node in the current 15 minute interval.')
srpErrorsCountersIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 10)).setObjects(("CISCO-SRP-MIB", "srpRingIntRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsSideBadPackets"), ("CISCO-SRP-MIB", "srpRingIntRxErrorsCRC"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsDataParity"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsShortPackets"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsGiantPackets"), ("CISCO-SRP-MIB", "srpHostIntRxErrorsSideBadPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrorsCountersIntervalGroup = srpErrorsCountersIntervalGroup.setStatus('deprecated')
if mibBuilder.loadTexts: srpErrorsCountersIntervalGroup.setDescription('A collection of objects providing information about errors coming from the higher layer to a particular interface in the current 15 minute interval.')
srpErrCntCurrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 11)).setObjects(("CISCO-SRP-MIB", "srpErrCntCurrRingRxTtlExpPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxGiantPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxAbortPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrRingRxCRC"), ("CISCO-SRP-MIB", "srpErrCntCurrHostRxDiscardPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrHostRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntCurrHostRxGiantPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrCntCurrGroup = srpErrCntCurrGroup.setStatus('current')
if mibBuilder.loadTexts: srpErrCntCurrGroup.setDescription('A collection of objects providing information about received errors, in the current 15 minute interval.')
srpErrCntIntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 12)).setObjects(("CISCO-SRP-MIB", "srpErrCntIntRingRxTtlExpPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxGiantPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxAbortPkts"), ("CISCO-SRP-MIB", "srpErrCntIntRingRxCRC"), ("CISCO-SRP-MIB", "srpErrCntIntHostRxDiscardPkts"), ("CISCO-SRP-MIB", "srpErrCntIntHostRxShortPkts"), ("CISCO-SRP-MIB", "srpErrCntIntHostRxGiantPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpErrCntIntGroup = srpErrCntIntGroup.setStatus('current')
if mibBuilder.loadTexts: srpErrCntIntGroup.setDescription('A collection of objects providing information about received errors, in a particular 15-minute interval in the past 24 hours.')
srpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 1, 13)).setObjects(("CISCO-SRP-MIB", "srpTrapRingWrapped"), ("CISCO-SRP-MIB", "srpTrapRingRestored"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpNotificationsGroup = srpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: srpNotificationsGroup.setDescription('The collection of notifications used to indicate wrapped and unwrapped node state information.')
srpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 2, 1)).setObjects(("CISCO-SRP-MIB", "srpIfGroup"), ("CISCO-SRP-MIB", "srpMACSideGroup"), ("CISCO-SRP-MIB", "srpRingTopologyMapGroup"), ("CISCO-SRP-MIB", "srpRingCountersCurrentGroup"), ("CISCO-SRP-MIB", "srpRingCountersIntervalGroup"), ("CISCO-SRP-MIB", "srpHostCountersCurrentGroup"), ("CISCO-SRP-MIB", "srpHostCountersIntervalGroup"), ("CISCO-SRP-MIB", "srpErrCntCurrGroup"), ("CISCO-SRP-MIB", "srpErrCntIntGroup"), ("CISCO-SRP-MIB", "srpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpCompliance = srpCompliance.setStatus('current')
if mibBuilder.loadTexts: srpCompliance.setDescription('The compliance statement for this MIB.')
srpComplianceOld = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 60, 6, 2, 2)).setObjects(("CISCO-SRP-MIB", "srpMACCountersGroup"), ("CISCO-SRP-MIB", "srpErrorsCountersCurrentGroup"), ("CISCO-SRP-MIB", "srpErrorsCountersIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    srpComplianceOld = srpComplianceOld.setStatus('deprecated')
if mibBuilder.loadTexts: srpComplianceOld.setDescription('A compliance statement whose only purpose is to list explicitly the deprecated groups.')
mibBuilder.exportSymbols("CISCO-SRP-MIB", srpHostCountersCurrentGroup=srpHostCountersCurrentGroup, srpHostCurMcastLowPriOctetsIn=srpHostCurMcastLowPriOctetsIn, srpHostCountersCurrentTable=srpHostCountersCurrentTable, srpHostIntMcastHighPriOctetsOut=srpHostIntMcastHighPriOctetsOut, srpHostCurRxErrorsSideBadPackets=srpHostCurRxErrorsSideBadPackets, srpNodeMACAddress=srpNodeMACAddress, srpErrorsIntervalNumber=srpErrorsIntervalNumber, srpErrCntIntRingRxAbortPkts=srpErrCntIntRingRxAbortPkts, srpRingCurMcastLowPriPktsIn=srpRingCurMcastLowPriPktsIn, srpHostIntUcastHighPriOctetsIn=srpHostIntUcastHighPriOctetsIn, srpRingCounters=srpRingCounters, srpMACIpsRemoteType=srpMACIpsRemoteType, srpRingIntUcastHighPriOctetsOut=srpRingIntUcastHighPriOctetsOut, srpHostIntUcastLowPriOctetsOut=srpHostIntUcastLowPriOctetsOut, srpMACRejectPktsBySourceAddress=srpMACRejectPktsBySourceAddress, srpErrCntCurrHostRxGiantPkts=srpErrCntCurrHostRxGiantPkts, srpErrCntIntHostRxGiantPkts=srpErrCntIntHostRxGiantPkts, srpErrCntIntHostRxShortPkts=srpErrCntIntHostRxShortPkts, InterfaceSide=InterfaceSide, srpMAC=srpMAC, srpHostCurUcastHighPriPktsIn=srpHostCurUcastHighPriPktsIn, srpRingIntMcastHighPriPktsOut=srpRingIntMcastHighPriPktsOut, srpErrCntCurrTable=srpErrCntCurrTable, srpErrCntIntHostRxDiscardPkts=srpErrCntIntHostRxDiscardPkts, srpHostCurUcastLowPriPktsOut=srpHostCurUcastLowPriPktsOut, srpMACCountersTable=srpMACCountersTable, srpCompliances=srpCompliances, srpErrCntCurrRingRxCRC=srpErrCntCurrRingRxCRC, srpRingCurUcastHighPriPktsOut=srpRingCurUcastHighPriPktsOut, srpErrCntCurrEntry=srpErrCntCurrEntry, srpIfEntry=srpIfEntry, srpRingCurRxErrorsShortPackets=srpRingCurRxErrorsShortPackets, srpErrCntIntRingRxGiantPkts=srpErrCntIntRingRxGiantPkts, srpMACRejectPktsByDestFlag=srpMACRejectPktsByDestFlag, srpIfGroup=srpIfGroup, srpErrCntIntGroup=srpErrCntIntGroup, srpErrCntIntRingRxCRC=srpErrCntIntRingRxCRC, srpHostIntUcastHighPriPktsIn=srpHostIntUcastHighPriPktsIn, srpMACRejectPktsBySourceFlag=srpMACRejectPktsBySourceFlag, srpIpsLockedOut=srpIpsLockedOut, srpRingInterfaceSide=srpRingInterfaceSide, srpHostCurMcastHighPriPktsIn=srpHostCurMcastHighPriPktsIn, srpErrCntIntInterfaceSide=srpErrCntIntInterfaceSide, srpRingCountersIntervalGroup=srpRingCountersIntervalGroup, srpHostIntMcastHighPriPktsIn=srpHostIntMcastHighPriPktsIn, srpErrCntCurrInterfaceSide=srpErrCntCurrInterfaceSide, srpRingCurUcastLowPriOctetsOut=srpRingCurUcastLowPriOctetsOut, srpComplianceOld=srpComplianceOld, srpRingCurRxErrorsDataParity=srpRingCurRxErrorsDataParity, srpErrCntCurrRingRxTtlExpPkts=srpErrCntCurrRingRxTtlExpPkts, srpHostIntMcastLowPriOctetsIn=srpHostIntMcastLowPriOctetsIn, srpErrCntCurrRingRxGiantPkts=srpErrCntCurrRingRxGiantPkts, srpMACCountPktsByDestinationFlag=srpMACCountPktsByDestinationFlag, srpHostCurMcastHighPriOctetsIn=srpHostCurMcastHighPriOctetsIn, srpRingIntUcastHighPriOctetsIn=srpRingIntUcastHighPriOctetsIn, srpHostCurMcastHighPriPktsOut=srpHostCurMcastHighPriPktsOut, srpErrorsCountersIntervalGroup=srpErrorsCountersIntervalGroup, srpHostCurMcastLowPriOctetsOut=srpHostCurMcastLowPriOctetsOut, srpMACIpsAutoDetectMode=srpMACIpsAutoDetectMode, srpHostCurUcastLowPriPktsIn=srpHostCurUcastLowPriPktsIn, srpRingIntUcastLowPriOctetsOut=srpRingIntUcastLowPriOctetsOut, srpRingCurRxErrorsGiantPackets=srpRingCurRxErrorsGiantPackets, srpHostCounters=srpHostCounters, srpHostCurMcastLowPriPktsIn=srpHostCurMcastLowPriPktsIn, srpRingCurUcastLowPriPktsIn=srpRingCurUcastLowPriPktsIn, srpRingCountersCurrentTable=srpRingCountersCurrentTable, srpMACSideGroup=srpMACSideGroup, srpRingIntMcastHighPriOctetsIn=srpRingIntMcastHighPriOctetsIn, srpErrCntIntTable=srpErrCntIntTable, srpNodeWrapped=srpNodeWrapped, srpMACCountPktsByDest=srpMACCountPktsByDest, srpIfTimeElapsed=srpIfTimeElapsed, srpRingIntInterfaceSide=srpRingIntInterfaceSide, srpRingIntUcastLowPriPktsIn=srpRingIntUcastLowPriPktsIn, srpErrCntIntEntry=srpErrCntIntEntry, srpErrCntIntNumber=srpErrCntIntNumber, srpTrapsNotifications=srpTrapsNotifications, srpTrapsNotificationsPrefix=srpTrapsNotificationsPrefix, srpIfTable=srpIfTable, srpTrapRingRestored=srpTrapRingRestored, srpMACIpsMgmtRequestedMode=srpMACIpsMgmtRequestedMode, srpNotificationsGroup=srpNotificationsGroup, srpHostCurMcastLowPriPktsOut=srpHostCurMcastLowPriPktsOut, srpRingCurUcastLowPriOctetsIn=srpRingCurUcastLowPriOctetsIn, PYSNMP_MODULE_ID=ciscosrpMIB, srpNodeHopsNumber=srpNodeHopsNumber, srpRingIntMcastLowPriOctetsOut=srpRingIntMcastLowPriOctetsOut, srpRingIntUcastHighPriPktsOut=srpRingIntUcastHighPriPktsOut, srpRingIntRxErrorsShortPackets=srpRingIntRxErrorsShortPackets, srpRingCurMcastHighPriOctetsOut=srpRingCurMcastHighPriOctetsOut, srpRingCountersCurrentGroup=srpRingCountersCurrentGroup, srpRingIntUcastLowPriPktsOut=srpRingIntUcastLowPriPktsOut, srpRingIntUcastHighPriPktsIn=srpRingIntUcastHighPriPktsIn, srpErrCntCurrRingRxShortPkts=srpErrCntCurrRingRxShortPkts, srpGroups=srpGroups, srpIpsWaitToRestoreTimer=srpIpsWaitToRestoreTimer, srpMACNeighborAddress=srpMACNeighborAddress, srpHostIntMcastHighPriPktsOut=srpHostIntMcastHighPriPktsOut, srpRingCurRxErrorsSideBadPackets=srpRingCurRxErrorsSideBadPackets, PerfIntervalCount64=PerfIntervalCount64, srpHostIntRxErrorsGiantPackets=srpHostIntRxErrorsGiantPackets, srpHostCountersIntervalEntry=srpHostCountersIntervalEntry, srpHostIntRxErrorsShortPackets=srpHostIntRxErrorsShortPackets, srpRingCountersIntervalEntry=srpRingCountersIntervalEntry, srpHostCurUcastLowPriOctetsOut=srpHostCurUcastLowPriOctetsOut, srpRingTopologyMapGroup=srpRingTopologyMapGroup, srpRingCountersCurrentEntry=srpRingCountersCurrentEntry, srpRingCurRxErrorsCRC=srpRingCurRxErrorsCRC, srpErrorsInterfaceSide=srpErrorsInterfaceSide, srpRingIntMcastLowPriPktsOut=srpRingIntMcastLowPriPktsOut, srpHostCountersIntervalGroup=srpHostCountersIntervalGroup, srpErrorsCountersIntervalTable=srpErrorsCountersIntervalTable, srpRingIntMcastLowPriPktsIn=srpRingIntMcastLowPriPktsIn, srpErrCntCurrHostRxShortPkts=srpErrCntCurrHostRxShortPkts, srpRingIntMcastHighPriOctetsOut=srpRingIntMcastHighPriOctetsOut, srpMACCountPktsByDestAddress=srpMACCountPktsByDestAddress, srpErrorsCountersCurrentTable=srpErrorsCountersCurrentTable, srpHostIntInterfaceSide=srpHostIntInterfaceSide, srpIfValidIntervals=srpIfValidIntervals, srpHostCurRxErrorsGiantPackets=srpHostCurRxErrorsGiantPackets, srpHostIntMcastHighPriOctetsIn=srpHostIntMcastHighPriOctetsIn, srpRingCurUcastHighPriOctetsIn=srpRingCurUcastHighPriOctetsIn, srpErrCntIntRingRxShortPkts=srpErrCntIntRingRxShortPkts, srpRingCountersIntervalTable=srpRingCountersIntervalTable, srpMACCountersGroup=srpMACCountersGroup, srpRingCurMcastLowPriPktsOut=srpRingCurMcastLowPriPktsOut, srpMACCountPktsBySource=srpMACCountPktsBySource, srpRingIntMcastLowPriOctetsIn=srpRingIntMcastLowPriOctetsIn, srpHostCurRxErrorsShortPackets=srpHostCurRxErrorsShortPackets, srpMACIpsRemoteMode=srpMACIpsRemoteMode, srpHostIntUcastHighPriOctetsOut=srpHostIntUcastHighPriOctetsOut, srpTrapRingWrapped=srpTrapRingWrapped, srpMACIpsActiveMode=srpMACIpsActiveMode, srpRingCurUcastHighPriOctetsOut=srpRingCurUcastHighPriOctetsOut, srpMACSourceDiscontTimeStamp=srpMACSourceDiscontTimeStamp, srpErrCntCurrHostRxDiscardPkts=srpErrCntCurrHostRxDiscardPkts, srpHostCurUcastHighPriPktsOut=srpHostCurUcastHighPriPktsOut, srpHostIntUcastLowPriPktsOut=srpHostIntUcastLowPriPktsOut, srpErrorsCounters=srpErrorsCounters, srpRingCurMcastHighPriPktsOut=srpRingCurMcastHighPriPktsOut, srpHostIntMcastLowPriPktsOut=srpHostIntMcastLowPriPktsOut, srpRingIntMcastHighPriPktsIn=srpRingIntMcastHighPriPktsIn, srpHostIntRxErrorsSideBadPackets=srpHostIntRxErrorsSideBadPackets, srpMACAddress=srpMACAddress, srpErrCntCurrRingRxAbortPkts=srpErrCntCurrRingRxAbortPkts, srpPriorityThreshold=srpPriorityThreshold, srpRingIntWrapCounter=srpRingIntWrapCounter, srpMACClockSourceMode=srpMACClockSourceMode, srpHostIntNumber=srpHostIntNumber, srpMACSideEntry=srpMACSideEntry, PerfCurrentCount64=PerfCurrentCount64, srpRingCurMcastHighPriPktsIn=srpRingCurMcastHighPriPktsIn, ciscosrpMIB=ciscosrpMIB, srpRingCurMcastLowPriOctetsOut=srpRingCurMcastLowPriOctetsOut, srpRingTopologyMapTable=srpRingTopologyMapTable, srpRingIntNumber=srpRingIntNumber, srpHostIntUcastHighPriPktsOut=srpHostIntUcastHighPriPktsOut, srpRingIntRxErrorsGiantPackets=srpRingIntRxErrorsGiantPackets, srpMACTopologyTimer=srpMACTopologyTimer, srpMACSideWrapped=srpMACSideWrapped, srpErrorsCountersCurrentEntry=srpErrorsCountersCurrentEntry, srpErrCntCurrGroup=srpErrCntCurrGroup, srpErrCntIntRingRxTtlExpPkts=srpErrCntIntRingRxTtlExpPkts, srpHostIntUcastLowPriOctetsIn=srpHostIntUcastLowPriOctetsIn, srpMACSideTable=srpMACSideTable, srpHostIntUcastLowPriPktsIn=srpHostIntUcastLowPriPktsIn, srpErrorsCountersIntervalEntry=srpErrorsCountersIntervalEntry, srpRingIntRxErrorsCRC=srpRingIntRxErrorsCRC, srpMACIpsLastUnWrapTimeStamp=srpMACIpsLastUnWrapTimeStamp, srpHostInterfaceSide=srpHostInterfaceSide, srpHostCurRxErrorsDataParity=srpHostCurRxErrorsDataParity, srpMACInterfaceSide=srpMACInterfaceSide, srpMACDestDiscontTimeStamp=srpMACDestDiscontTimeStamp, srpHostIntMcastLowPriPktsIn=srpHostIntMcastLowPriPktsIn, srpRingCurUcastLowPriPktsOut=srpRingCurUcastLowPriPktsOut, srpConformance=srpConformance, srpErrorsCountersCurrentGroup=srpErrorsCountersCurrentGroup, srpHostCurMcastHighPriOctetsOut=srpHostCurMcastHighPriOctetsOut, srpRingCurMcastLowPriOctetsIn=srpRingCurMcastLowPriOctetsIn, srpMACIpsLastWrapTimeStamp=srpMACIpsLastWrapTimeStamp, srpNodeName=srpNodeName, srpRingCurMcastHighPriOctetsIn=srpRingCurMcastHighPriOctetsIn, srpHostCountersCurrentEntry=srpHostCountersCurrentEntry, srpRingIntRxErrorsSideBadPackets=srpRingIntRxErrorsSideBadPackets, srpMACRejectPktsByDestAddress=srpMACRejectPktsByDestAddress, srpHostCurUcastHighPriOctetsIn=srpHostCurUcastHighPriOctetsIn, srpHostCurUcastLowPriOctetsIn=srpHostCurUcastLowPriOctetsIn, srpHostCountersIntervalTable=srpHostCountersIntervalTable, srpHostIntRxErrorsDataParity=srpHostIntRxErrorsDataParity, srpCompliance=srpCompliance, srpMACCountPktsBySourceFlag=srpMACCountPktsBySourceFlag, srpRingCurUcastHighPriPktsIn=srpRingCurUcastHighPriPktsIn, srpMACIpsWrapCounter=srpMACIpsWrapCounter, srpErrorsIntervalInterfaceSide=srpErrorsIntervalInterfaceSide, srpIpsState=srpIpsState, srpRingIntRxErrorsDataParity=srpRingIntRxErrorsDataParity, srpHostIntMcastLowPriOctetsOut=srpHostIntMcastLowPriOctetsOut, srpRingIntUcastLowPriOctetsIn=srpRingIntUcastLowPriOctetsIn, srpNodesOnTheRing=srpNodesOnTheRing, IpsMode=IpsMode, srpHostCurUcastHighPriOctetsOut=srpHostCurUcastHighPriOctetsOut, srpRingTopologyMapEntry=srpRingTopologyMapEntry, srpMACCountPktsBySourceAddress=srpMACCountPktsBySourceAddress, srpMACCountersEntry=srpMACCountersEntry)
