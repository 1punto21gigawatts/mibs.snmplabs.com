#
# PySNMP MIB module INTEL-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, Counter32, Counter64, ObjectIdentity, MibIdentifier, iso, NotificationType, Gauge32, IpAddress, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "Counter32", "Counter64", "ObjectIdentity", "MibIdentifier", "iso", "NotificationType", "Gauge32", "IpAddress", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
log = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 8))
logInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 8, 1))
logListTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1), )
if mibBuilder.loadTexts: logListTable.setStatus('mandatory')
if mibBuilder.loadTexts: logListTable.setDescription('')
logListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1), ).setIndexNames((0, "INTEL-LOG-MIB", "logListSeqno"))
if mibBuilder.loadTexts: logListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logListEntry.setDescription('')
logListSeqno = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListSeqno.setStatus('mandatory')
if mibBuilder.loadTexts: logListSeqno.setDescription('')
logListCode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListCode.setStatus('mandatory')
if mibBuilder.loadTexts: logListCode.setDescription('Unique identifier (combination of Source and ID: upper two bytes are source and lower to bytes are ID)')
logListSource = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("misc", 1), ("system", 2), ("syslogd", 3), ("ipx", 6), ("ip", 7), ("isdn", 8), ("callcontrol", 9), ("framerelay", 10), ("ppp", 11), ("link", 12), ("tunnel", 13), ("x25", 14), ("csu", 15), ("hdlc", 16), ("wanPort", 17), ("modem", 18), ("ipm", 19), ("rsvp", 20), ("l3l", 21), ("ipru", 22), ("gmrp", 23), ("lapb", 24), ("bridging", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListSource.setStatus('mandatory')
if mibBuilder.loadTexts: logListSource.setDescription('')
logListCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListCategory.setStatus('mandatory')
if mibBuilder.loadTexts: logListCategory.setDescription('Max 64 categories')
logListLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 70, 60, 50, 40, 30))).clone(namedValues=NamedValues(("fatalError", 100), ("error", 70), ("warning", 60), ("note", 50), ("info", 40), ("debug", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListLevel.setStatus('mandatory')
if mibBuilder.loadTexts: logListLevel.setDescription('')
logListTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: logListTimeStamp.setDescription('time in secs since 1970-1-1')
logListMulti = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListMulti.setStatus('mandatory')
if mibBuilder.loadTexts: logListMulti.setDescription('code(4) category(8) level(2) timestamp(4) repeats(2). (code(4) = source(2) + Id(2)) Number in parenthesis is number of bytes used by element.')
logListText1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListText1.setStatus('mandatory')
if mibBuilder.loadTexts: logListText1.setDescription('Text1, Text2, Text3 and Text4 should be concatenated to give the description string.')
logListText2 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListText2.setStatus('mandatory')
if mibBuilder.loadTexts: logListText2.setDescription('')
logListText3 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListText3.setStatus('mandatory')
if mibBuilder.loadTexts: logListText3.setDescription('')
logListText4 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(250, 250)).setFixedLength(250)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListText4.setStatus('mandatory')
if mibBuilder.loadTexts: logListText4.setDescription('')
logListChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListChassis.setStatus('mandatory')
if mibBuilder.loadTexts: logListChassis.setDescription('')
logListModule = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListModule.setStatus('mandatory')
if mibBuilder.loadTexts: logListModule.setDescription('')
logListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListPort.setStatus('mandatory')
if mibBuilder.loadTexts: logListPort.setDescription('')
logListExtFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logListExtFlags.setStatus('mandatory')
if mibBuilder.loadTexts: logListExtFlags.setDescription('')
logListRepeats = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListRepeats.setStatus('mandatory')
if mibBuilder.loadTexts: logListRepeats.setDescription('Number of times this message text has been inserted.')
logArgListTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 2), )
if mibBuilder.loadTexts: logArgListTable.setStatus('mandatory')
if mibBuilder.loadTexts: logArgListTable.setDescription('')
logArgListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 2, 1), ).setIndexNames((0, "INTEL-LOG-MIB", "logArgListSeqno"), (0, "INTEL-LOG-MIB", "logArgListArgNumber"))
if mibBuilder.loadTexts: logArgListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logArgListEntry.setDescription('')
logArgListSeqno = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logArgListSeqno.setStatus('mandatory')
if mibBuilder.loadTexts: logArgListSeqno.setDescription('')
logArgListArgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logArgListArgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: logArgListArgNumber.setDescription('')
logArgListArg = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logArgListArg.setStatus('mandatory')
if mibBuilder.loadTexts: logArgListArg.setDescription("The first byte is the datatype ('s':string) and the rest of the value is the argument")
logMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 3), )
if mibBuilder.loadTexts: logMgmtTable.setStatus('mandatory')
if mibBuilder.loadTexts: logMgmtTable.setDescription('')
logMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 3, 1), ).setIndexNames((0, "INTEL-LOG-MIB", "logMgmtIpAddress"))
if mibBuilder.loadTexts: logMgmtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: logMgmtEntry.setDescription('')
logMgmtIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMgmtIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: logMgmtIpAddress.setDescription('')
logMgmtSeqno = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logMgmtSeqno.setStatus('mandatory')
if mibBuilder.loadTexts: logMgmtSeqno.setDescription('External mgmt stations can write a seqno to store how far they have come in reading the log.')
logListEntryCount = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logListEntryCount.setStatus('mandatory')
if mibBuilder.loadTexts: logListEntryCount.setDescription('Write 0 to this value clears the log.')
logListFirstSeqno = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListFirstSeqno.setStatus('mandatory')
if mibBuilder.loadTexts: logListFirstSeqno.setDescription('')
logListLastSeqno = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListLastSeqno.setStatus('mandatory')
if mibBuilder.loadTexts: logListLastSeqno.setDescription('')
logListLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 8, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logListLastUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: logListLastUpdateTime.setDescription('Last insertion in log in timeticks since boot')
mibBuilder.exportSymbols("INTEL-LOG-MIB", logListCategory=logListCategory, logListFirstSeqno=logListFirstSeqno, logListPort=logListPort, logListChassis=logListChassis, logArgListArgNumber=logArgListArgNumber, logMgmtEntry=logMgmtEntry, logListCode=logListCode, logListEntryCount=logListEntryCount, logListLastSeqno=logListLastSeqno, logInfo=logInfo, logListText4=logListText4, logArgListEntry=logArgListEntry, logMgmtIpAddress=logMgmtIpAddress, logListLevel=logListLevel, logArgListTable=logArgListTable, logListText3=logListText3, logListMulti=logListMulti, logListSource=logListSource, log=log, logListText2=logListText2, logArgListArg=logArgListArg, logMgmtTable=logMgmtTable, logListLastUpdateTime=logListLastUpdateTime, logMgmtSeqno=logMgmtSeqno, logListModule=logListModule, logListText1=logListText1, logListTimeStamp=logListTimeStamp, logListRepeats=logListRepeats, logArgListSeqno=logArgListSeqno, logListTable=logListTable, logListSeqno=logListSeqno, logListEntry=logListEntry, logListExtFlags=logListExtFlags)
