#
# PySNMP MIB module TIMETRA-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:17:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
AtmVpIdentifier, AtmTrafficDescrParamIndex = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmTrafficDescrParamIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Counter64, ObjectIdentity, Gauge32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Integer32, Unsigned32, Counter32, ModuleIdentity, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ObjectIdentity", "Gauge32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Integer32", "Unsigned32", "Counter32", "ModuleIdentity", "Bits", "IpAddress")
DateAndTime, TimeStamp, TruthValue, MacAddress, RowStatus, RowPointer, DisplayString, TimeInterval, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TimeStamp", "TruthValue", "MacAddress", "RowStatus", "RowPointer", "DisplayString", "TimeInterval", "TextualConvention")
TmnxPortAdminStatus, tmnxMdaNotifyType, tmnxChassisIndex, TmnxMDAChanType, TmnxAlarmState, tmnxHwNotification, tmnxHwConformance, tmnxChassisNotifyChassisId, tmnxHwObjs = mibBuilder.importSymbols("TIMETRA-CHASSIS-MIB", "TmnxPortAdminStatus", "tmnxMdaNotifyType", "tmnxChassisIndex", "TmnxMDAChanType", "TmnxAlarmState", "tmnxHwNotification", "tmnxHwConformance", "tmnxChassisNotifyChassisId", "tmnxHwObjs")
timetraSRMIBModules, = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules")
TNamedItem, TFCName, TAdaptationRuleOverride, TEgressQueueId, TCIRRateOverride, TmnxSubIdentStringOrEmpty, TItemLongDescription, TIngressQueueId, TCIRPercentOverride, TMlpppQoSProfileId, TEgrPolicerId, TSecondaryShaper10GPIRRate, TPortSchedulerCIR, TMcFrQoSProfileId, THsmdaPIRMRateOverride, TBurstSizeOverride, TmnxActionType, THsmdaWeightOverride, TPortSchedulerPIRRate, TClassBurstLimit, TPortSchedulerPIR, TExpSecondaryShaperPIRRate, TmnxPortID, TBurstSizeBytesOverride, TRateType, TmnxSubMgtIntDestId, TmnxSubMgtOrgStrOrZero, TPIRRateOverride, TNamedItemOrEmpty, TPIRPercentOverride, TItemDescription, TBurstPercentOrDefaultOverride, TQueueId, TmnxOperState, TmnxEgrPolicerStatMode, TmnxEnabledDisabled, TExpSecondaryShaperClassRate = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TNamedItem", "TFCName", "TAdaptationRuleOverride", "TEgressQueueId", "TCIRRateOverride", "TmnxSubIdentStringOrEmpty", "TItemLongDescription", "TIngressQueueId", "TCIRPercentOverride", "TMlpppQoSProfileId", "TEgrPolicerId", "TSecondaryShaper10GPIRRate", "TPortSchedulerCIR", "TMcFrQoSProfileId", "THsmdaPIRMRateOverride", "TBurstSizeOverride", "TmnxActionType", "THsmdaWeightOverride", "TPortSchedulerPIRRate", "TClassBurstLimit", "TPortSchedulerPIR", "TExpSecondaryShaperPIRRate", "TmnxPortID", "TBurstSizeBytesOverride", "TRateType", "TmnxSubMgtIntDestId", "TmnxSubMgtOrgStrOrZero", "TPIRRateOverride", "TNamedItemOrEmpty", "TPIRPercentOverride", "TItemDescription", "TBurstPercentOrDefaultOverride", "TQueueId", "TmnxOperState", "TmnxEgrPolicerStatMode", "TmnxEnabledDisabled", "TExpSecondaryShaperClassRate")
tmnxPortMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 25))
tmnxPortMIBModule.setRevisions(('1911-02-01 00:00', '1909-02-28 00:00', '1908-07-01 00:00', '1908-01-01 00:00', '1907-01-01 00:00', '1906-03-16 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-03-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tmnxPortMIBModule.setRevisionsDescriptions(('Rev 9.0 1 Feb 2011 00:00 9.0 release of the TIMETRA-PORT-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-PORT-MIB.', 'Rev 6.1 01 Jul 2008 00:00 6.1 release of the TIMETRA-PORT-MIB.', 'Rev 6.0 01 Jan 2008 00:00 6.0 release of the TIMETRA-PORT-MIB.', 'Rev 5.0 01 Jan 2007 00:00 5.0 release of the TIMETRA-PORT-MIB.', 'Rev 4.0 16 Mar 2006 00:00 4.0 release of the TIMETRA-PORT-MIB.', 'Rev 3.0 31 Aug 2005 00:00 3.0 release of the TIMETRA-PORT-MIB.', 'Rev 2.1 24 Jan 2005 00:00 2.1 release of the TIMETRA-PORT-MIB.', 'Rev 2.0 01 Mar 2004 00:00 2.0 release of the TIMETRA-PORT-MIB.',))
if mibBuilder.loadTexts: tmnxPortMIBModule.setLastUpdated('201102010000Z')
if mibBuilder.loadTexts: tmnxPortMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: tmnxPortMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: tmnxPortMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the hardware components of the Alcatel-Lucent SROS device. Copyright 2003-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxPortObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4))
tmnxPortNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7))
tmnxFRObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9))
tmnxQosAppObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10))
tmnxATMObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11))
tmnxPortStatsObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12))
tmnxPortNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2))
tmnxPortNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0))
tmnxPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2))
tmnxPortPlcyObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67))
class TmnxPortOperStatus(TextualConvention, Integer32):
    description = 'The current operational status of this port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("diagnosing", 4), ("failed", 5))

class TmnxPortEtherReportValue(TextualConvention, Integer32):
    description = 'The TmnxPortEtherReportValue is an enumerated integer that describes the values used to identify the reason an alarm has been raised on an Ethernet Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notUsed", 0), ("signalFailure", 1), ("remoteFault", 2), ("localFault", 3), ("noFrameLock", 4), ("highBer", 5), ("noBlockLock", 6), ("noAmLock", 7), ("duplicateLane", 8))

class TmnxPortEtherReportStatus(TextualConvention, Bits):
    description = 'The TmnxPortEtherReportStatus is a bitmask that describes alarms that can be raised/cleared on an Ethernet Port.'
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("signalFailure", 1), ("remoteFault", 2), ("localFault", 3), ("noFrameLock", 4), ("highBer", 5), ("noBlockLock", 6), ("noAmLock", 7), ("duplicateLane", 8))

class TmnxPortEtherCrcMonReportValue(TextualConvention, Integer32):
    description = 'The TmnxPortEtherCrcMonReportValue is an enumerated integer that describes the values used to identify the reason an alarm has been raised for a fault in CRC Monitoring on an Ethernet Port. TmnxPortEtherCrcMonReportStatus defines the valid alarm values.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("noFault", 0), ("sdThresholdExceeded", 1), ("sfThresholdExceeded", 2))

class TmnxPortEtherCrcMonReportStatus(TextualConvention, Bits):
    description = 'The TmnxPortEtherCrcMonReportStatus is a bitmask that describes alarms that can be raised/cleared on an Ethernet Port used in CRC Monitoring. The possible values are: sdThresholdExceeded (0)-- Signal Degradation exceeded the threshold. sfThresholdExceeded (1)-- Signal Failure exceeded the threshold.'
    status = 'current'
    namedValues = NamedValues(("sdThresholdExceeded", 0), ("sfThresholdExceeded", 1))

class TmnxPortClass(TextualConvention, Integer32):
    description = 'The TmnxPortClass data type is an enumerated integer that describes the values used to identify the class of interface provided by this port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("none", 1), ("faste", 2), ("gige", 3), ("xgige", 4), ("sonet", 5), ("vport", 6), ("unused", 7), ("xcme", 8), ("tdm", 9), ("xlgige", 10), ("cgige", 11), ("vsme", 12))

class TmnxPortConnectorType(TextualConvention, Unsigned32):
    description = "The TmnxPortConnectorType data type is an enumerated integer that describes the values used to identify the connector type used on a port. A TmnxPortConnectorType value specifies the index value for the entry in the tmnxPortConnectTypeTable used to identify a specific type of port connector. Some example port connector types are: 'unknown', 'rj45', 'bncCoax', 'mtrj', 'scDuplex', 'sffp', 'lcDuplex'."
    status = 'current'

class TmnxPortState(TextualConvention, Integer32):
    description = "The state level of this port. A value of 'none' indicates the port is either in its initial creation state or is just about to be deleted. A value of 'ghost' represents a port that is not physically present. This state may represent a pre-provisioned port. A value of 'linkDown' represents a port that is physically present but does not have a link. The 'linkUp' state represents a port that is physically present and has physical link present. A port in 'up' state is ready to pass some kinds of traffic. The tmnxPortUpProtocols variable indicates the actual type(s) of traffic that can be passed on this 'up' link. The 'diagnose' state represents the port undergoing diagnostic test."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("ghost", 2), ("linkDown", 3), ("linkUp", 4), ("up", 5), ("diagnose", 6))

class TmnxPortType(TextualConvention, Unsigned32):
    description = 'The TmnxPortType data type is an enumerated integer that describes the values used to identify the specific type of hardware port. A TmnxPortType value specifies the index value for the entry in the tmnxPortTypeTable used to identify a specific type of port. Some example port types are: -- unknown - no port installed or unidentified -- portType100Tx - 10/100 base copper -- portType100F - 10/100 base fiber -- portType1000Tx - 1000 base copper -- portType1000F - 1000 base fiber -- portType1000dF - 1000 base dual fiber -- portTypeOC3sonet - OC-3 -- portTypeOC12sonet - OC-12 -- portTypeOC48sonet - OC-48 -- portTypeOC192sonet - OC-192 -- portType10000F - 10 Gig Ethernet LAN -- portTypeXgigWan - 10 Gig Ethernet WAN -- portTypeVport - Virtual port -- portTypeDS3E3 - DS3/E3 port -- portTypeDS1E1 - DS1/E1 port '
    status = 'current'

class TmnxPortEncapType(TextualConvention, Integer32):
    description = "The type of encapsulation protocol configured on a port's network interface. When the encap type has a value of 'nullEncap', frames received will not carry any tags or labels and as a result only one service can be configured on this port. Sometimes this is referred to as raw Ethernet packets. When the encap type has a value of 'qEncap', ingress frames carry 802.1q tags where each different tag can signify a different service. This is not a valid value if tmnxPortClass has a value of 'sonetPath'. When the encap type has a value of 'bcpNullEncap', BCP is used on the SONET path as the NCP control protocol. The BCP IEEE 802 Tagged Frame Configuration Option (type 8) is negotiated to 'enabled'. VLAN tagged frames are allowed into the SONET path. Only a single SAP can be associated with the SONET path. 'bcpNullEncap' is valid only if tmnxPortClass has a value of 'sonetPath'. When the encap type has a value of 'bcpDot1qEncap', BCP is used as the NCP control protocol. The BCP IEEE 802 Tagged Frame Configuration Option (type 8) is negotiated to 'enabled'. VLAN tagged frames are allowed on the SONET path. This encapsulation type is required when multiple SAPs are defined on the SONET path where each one is service delimited by a provisioned Dot1q tag. When 'bcpDot1qEncap' is specified, BCP does not enter the 'open' state unless the far end peer also supports 'bcpDot1qEncap'. This allows a LCP negotiation to transmit configuration request and confirmation messages to enable this feature. 'bcpDot1qEncap' is a valid value only if tmnxPortClass has a value of 'SONET'. When the encap type has a value of 'ipcpEncap', BCP will not be used on this SONET path. IPCP NCP is used instead. 'ipcpEncap' is a valid only if tmnxPortClass has a value of 'sonetPath'. When the encap type has a value of 'frEncap', Frame Relay is the expected encapsulation. When the encap type has a value of 'pppAutoEncap', IPCP is automatically enabled. This encap type is only valid on ports/paths in network mode. When the encap type has a value of 'atmEncap', the encapsulation on the port is ATM. The 'atmEncap' is also used when mirroring ATM ports. When the encap type has a value of 'wanMirrorEncap', the port is used for mirroring of frame-relay and POS ports. On such ports no link management protocol would run. When the encap type has a value of 'ciscoHDLCEncap', the Cisco HDLC encapsulation is applied. This encap type is only valid if TmnxPortClass has a value of 'tdm' or 'sonet'. When the encap type has a value of 'cemEncap', encapsulation of frames will be circuit emulation. This is used to support transparent transmission of frames. This encap type is only valid if TmnxPortClass has a value of 'tdm' or 'sonet' in access mode. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("unknown", 0), ("nullEncap", 1), ("qEncap", 2), ("mplsEncap", 3), ("bcpNullEncap", 4), ("bcpDot1qEncap", 5), ("ipcpEncap", 6), ("frEncap", 7), ("pppAutoEncap", 8), ("atmEncap", 9), ("qinqEncap", 10), ("wanMirrorEncap", 11), ("ciscoHDLCEncap", 12), ("cemEncap", 13))

class TmnxDs0ChannelList(TextualConvention, OctetString):
    description = 'A list of ds0 timeslots on a DS1 line. The list is specified as an OCTET STRING in which each ds0 timeslot is represented by a single bit, where timeslots 1 through 8 are represented by the bits in the first octet, timeslots 9 through 16 by the bits in the second octet, etc. In each octet, the lowest numbered timeslot is represented by the most significant bit, and the highest numbered timeslot by the least significant bit. A timeslot is present in the list when its bit is 1, and absent when its bit is 0. If the OCTET STRING value has more bits than required to represent the timeslots on a DS1, then the extra bits are ignored.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 4)

class TmnxBundleID(TextualConvention, Unsigned32):
    description = 'A TmnxBundleID is an unique 32 bit number encoded as shown below. |32 30| 29 26 | 25 22 | 21 16 | 15 13 | 12 1| +-----+-------+-------+-------+-----------+-------+ |001 | slot | mda | 0 | bndl type | bndlid| +-----+-------+-------+-------+-----------+-------+ The bundle id is unique for a MDA. The bndlid must fall in one of the following ranges depending on MDA type: mda-type range m4-choc3-as-sfp 1-256 m1-choc12-as-sfp 1-256 m12-chds3-as 1-256 m4-chds3-as 1-112 m4-chds3 1-56 m12-chds3 1-56 m1-choc12-sfp 1-56 m4-choc3-sfp 1-56 c8-chds1 1-56 c8-atmds1 1-8 A slot value of 15 (Invalid slot) and mda value of 0 (invalid mda) represents a bundle protection group. Otherwise, the bundle is considered associated with a valid slot and mda. The following bundle types are supported: bndl type value MLPPP 000 IMA 001 MLFR 010'
    status = 'current'

class TmnxDSXBertPattern(TextualConvention, Integer32):
    description = 'The TmnxDSXBertPattern data type is an enumerated integer that indicates the pattern used for the Bit Error Rate Test (BERT).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("ones", 1), ("zeros", 2), ("alternating", 3), ("twoexp3", 4), ("twoexp9", 5), ("twoexp15", 6), ("twoexp20", 7), ("twoexp11", 8), ("twoexp20q", 9), ("twoexp23", 10))

class TmnxDSXBertOperStatus(TextualConvention, Integer32):
    description = "The TmnxDSXBertOperStatus data type is an enumerated integer that indicates the status of Bit Error Rate Test (BERT). When BERT is activated, the status will be 'active'. Otherwise the status will be 'idle' or 'noMdaResources' if the last BERT test could not be executed because of an MDA concurrent BERT test limit."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("active", 1), ("idle", 2), ("noMdaResources", 3))

class TmnxDSXIdleCycleFlags(TextualConvention, Integer32):
    description = "The TmnxDSXIdleCycleFlags data type is an enumerated integer that indicates the value that the DS3/DS1 port/channel or a DS0 channel group transmits during idle cycle. The value of 'none' is applicable to ATM and CEM ports/channels only, which transmit idle cells and not octets defined by the below values. If the value is set to 'flags', a value of 0x7E is used. If the value is set to 'ones', a value of 0xFF is used."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("flags", 1), ("ones", 2))

class TmnxDSXIdleFillType(TextualConvention, Integer32):
    description = "The TmnxDSXIdleFillType data type is an enumerated integer that indicates the type of data fill that a CEM DS3/DS1 channel or a DS0 channel group plays out when the channel experiences underun. - The value of 'notApplicable' indicates that this object is not applicable to the channel. - The value of 'allOnes' indicates that all 1's will be played out. - The value of 'userDefinedPattern' indicates that a user defined pattern will be played out."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("allOnes", 1), ("userDefinedPattern", 2))

class TmnxDSXLoopback(TextualConvention, Integer32):
    description = 'The TmnxDSXLoopback data type is an enumerated integer that indicates the type of loopback the DS3/DS1 port/channel currently is in.'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("remote", 3))

class TmnxDSXReportAlarm(TextualConvention, Bits):
    description = 'The TmnxDSXReportAlarm data type indicates the type of TDM alarm: ais - alarm indication signal errors. los - loss of signal errors. oof - out-of-frame errors. rai - resource availability indicator events. looped - far end wants the read end to loopback berSd - DSX bit error signal degradation berSf - DSX bit error signal failure'
    status = 'current'
    namedValues = NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5), ("berSd", 6), ("berSf", 7))

class TmnxDSXClockSource(TextualConvention, Integer32):
    description = "The TmnxDSXClockSource data type is an enumerated type that indicates the clock for transmitted data on a DS3 or DS1 channel. loopTimed(1) - The clock is recovered from the line's receive data stream nodeTimed(2) - The clock is internal adaptive(3) - The clock is adaptively recovered from the rate at which data is received and not from the physical layer. differential(4) - The clock is recovered from differential RTP timestamp header."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("loopTimed", 1), ("nodeTimed", 2), ("adaptive", 3), ("differential", 4))

class TmnxDSXClockSyncState(TextualConvention, Integer32):
    description = 'The TmnxDSXClockSyncState data type is an enumeration type that indicates the clock synchronization state on a DS3 or DS1 channel. unknown(0) - Unsupported or unknown state normal(1) - Normal (locked) state holdOver(2) - Synchronization with reference has been lost freeRun(3) - Synchronized with internal reference'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("normal", 1), ("holdOver", 2), ("freeRun", 3), ("phaseTracking", 4), ("freqTracking", 5))

class TmnxDS1Loopback(TextualConvention, Integer32):
    description = "The TmnxDS1Loopback data type is an enumerated integer that indicates the type of loopback the DS1 port/channel currently is in. A 'line' loopback loops frames received on this port back to the remote system. A 'internal' loopback loops frames from the local system back at the framer. A 'fdlAnsi' requests a line loopback of type FDL ANSI T1.403. A 'fdlBellcore' requests a line loopback of type FDL Bellcore TR-TSY-000312. A 'payloadAnsi' requests a payload loopback of type FDL ANSI T1.403. A 'inbandAnsi' requests a line loopback of type inband ANSI T1.403. A 'inbandBellcore' requests a line loopback of type inband Bellcore TR-TSY-000312."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("fdlAnsi", 3), ("fdlBellcore", 4), ("payloadAnsi", 5), ("inbandAnsi", 6), ("inbandBellcore", 7))

class TmnxDS3Loopback(TextualConvention, Integer32):
    description = "The TmnxDS3Loopback data type is an enumerated integer that indicates the type of loopback the DS3 port/channel currently is in. A 'line' loopback loops frames received on this port back to the remote system. A 'internal' loopback loops the frames from the local system back at the framer. When the value is set to 'remote', a signal is sent to the remote system to provide a line loopback."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("line", 1), ("internal", 2), ("remote", 3))

class TmnxImaGrpState(TextualConvention, Integer32):
    description = 'The TmnxImaGrpState indicates the current state of the IMA Group State Machine.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("invalid", 0), ("notConfigured", 1), ("startUp", 2), ("startUpAck", 3), ("configAbortUnsupportedM", 4), ("configAbortIncompatibleSymmetry", 5), ("configAbortOther", 6), ("insufficientLinks", 7), ("blocked", 8), ("operational", 9), ("configAbortUnsupportedImaVersion", 10))

class TmnxImaGrpFailState(TextualConvention, Integer32):
    description = 'The TmnxImaGrpFailState indcates the failure reason of an IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("noFailure", 1), ("startUpNe", 2), ("startUpFe", 3), ("invalidMValueNe", 4), ("invalidMValueFe", 5), ("failedAssymetricNe", 6), ("failedAssymetricFe", 7), ("insufficientLinksNe", 8), ("insufficientLinksFe", 9), ("blockedNe", 10), ("blockedFe", 11), ("otherFailure", 12), ("invalidImaVersionNe", 13), ("invalidImaVersionFe", 14))

class TmnxImaLnkState(TextualConvention, Integer32):
    description = 'The TmnxImaLnkState indicates the current state of an IMA link.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notInGroup", 1), ("unusableNoGivenReason", 2), ("unusableFault", 3), ("unusableMisconnected", 4), ("unusableInhibited", 5), ("unusableFailed", 6), ("usable", 7), ("active", 8))

class TmnxImaLnkFailState(TextualConvention, Integer32):
    description = 'The TmnxImaLnkFailState indicates the local failure status of a link belonging to an IMA group.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("noFailure", 1), ("imaLinkFailure", 2), ("lifFailure", 3), ("lodsFailure", 4), ("misConnected", 5), ("blocked", 6), ("fault", 7), ("farEndTxLinkUnusable", 8), ("farEndRxLinkUnusable", 9))

class TmnxImaTestState(TextualConvention, Integer32):
    description = 'The TmnxImaTestState indicates the current state of the test pattern procedure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("operating", 2), ("failed", 3))

class TmnxImaGrpClockModes(TextualConvention, Integer32):
    description = 'The TmnxImaGrpClockModes lists the types of clock modes available to IMA Groups.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ctc", 1), ("itc", 2))

class TmnxImaGrpVersion(TextualConvention, Integer32):
    description = 'The TmnxImaGrpVersion lists the types of Ima versions available per IMA Groups.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("oneDotZero", 1), ("oneDotOne", 2))

class TmnxMcMlpppClassIndex(TextualConvention, Integer32):
    description = 'The TmnxMcMlpppClassIndex indicates the class of a Multiclass MLPPP bundle. For Multiclass MLPPP bundles with a non-zero tmnxBundleMlpppClassCount of classes, class index takes valid values from 0 to (tmnxBundleMlpppClassCount - 1) inclusive. For example a 4-class MLPPP bundle has 4 classes with indices 0, 1, 2, and 3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 15)

class TmnxMlpppEndpointIdClass(TextualConvention, Integer32):
    description = 'TmnxMlpppEndpointIdClass indicates the MLPPP Endpoint Discriminator Class Field Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("nullClass", 0), ("localAddress", 1), ("ipAddress", 2), ("ieee802dot1GlobalMacAddress", 3), ("pppMagicNumberBlock", 4), ("publicSwitchedNetworkDirNumber", 5))

class TmnxMlfrLinkDownReason(TextualConvention, Integer32):
    description = "TmnxMlfrLinkDownReason indicates the reason code for marking a MLFR member link of a bundle to down. A 'none' down reason indicates that the link is active. An 'outOfService' down reason indicates that the link operational status is down. A 'redDiffDelayExceeded' down reason indicates that the differential delay of the link exceeded the configured value of red differential delay and the delay action was configured as 'down'. A 'loopback' down reason indicates that the link has been detected to be in a loopback condition. A 'negotiating' down reason indicates that the link has not successfully negotiated the link into a bundle. A 'noRxHelloAck' down reason indicates that the link has not received a hello ack response. A 'rxCause' down reason indicates that a peer failure has been detected on this link. A 'txCause' down reason indicates that a local failure has been detected on this link. A linkReset' down reason indicates that the link is being reset."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 7, 8, 9))
    namedValues = NamedValues(("none", 0), ("outOfService", 1), ("redDiffDelayExceeded", 2), ("loopback", 3), ("negotiating", 4), ("noRxHelloAck", 5), ("rxCause", 7), ("txCause", 8), ("linkReset", 9))

class TmnxWaveTrackerAlarm(TextualConvention, Bits):
    description = 'The TmnxWaveTrackerAlarm specifies the alarms which are enabled or outstanding against a Wave Tracker enabled interface. The valid alarms are as follows: - encFail - Encoder Failure. - encDegr - Encoder Degrade. - pwrFail - Power Control Failure. - pwrDegr - Power Control Degrade. - pwrHigh - Power Control High limit reached. - pwrLow - Power Control Low limit reached.'
    status = 'current'
    namedValues = NamedValues(("encFail", 0), ("encDegr", 1), ("pwrFail", 2), ("pwrDegr", 3), ("pwrHigh", 4), ("pwrLow", 5))

class TmnxOpticalAmpAlarm(TextualConvention, Bits):
    description = 'The TmnxOpticalAmpAlarm specifies the alarms which are enabled or outstanding against an interface that is equipped with an optical amplifier. The valid alarms are as follows: - ampIld - Amplifier Pump over-current. - ampTmp - Amplifier Pump temperature. - ampMth - Amplifier Module Case temperature high. - ampMtl - Amplifier Module Case temperature low. - ampLos - Amplifier Loss of input optical power. - ampLop - Amplifier Loss of output power. - ampCom - Amplifier Module communication failure.'
    status = 'current'
    namedValues = NamedValues(("ampIld", 0), ("ampTmp", 1), ("ampMth", 2), ("ampMtl", 3), ("ampLos", 4), ("ampLop", 5), ("ampCom", 6))

class TmnxOpticalTdcmAlarm(TextualConvention, Bits):
    description = 'The TmnxOpticalTdcmAlarm specifies the alarms which are enabled or outstanding against an interface that is equipped with a tunable dispersion compensation module. The valid alarms are as follows: - tdcmNotRdy - Tdcm not ready. - tdcmMth - Tdcm module temperature high. - tdcmMtl - Tdcm module temperature low. - tdcmUnLck - Tdcm thermal control unlocked. - tdcmTmpLim - Tdcm thermal control temperature limit. - tdcmEprInv - Tdcm EEPROM invalid. - tdcmCom - Tdcm module communication failure.'
    status = 'current'
    namedValues = NamedValues(("tdcmNotRdy", 0), ("tdcmMth", 1), ("tdcmMtl", 2), ("tdcmUnLck", 3), ("tdcmTmpLim", 4), ("tdcmEprInv", 5), ("tdcmCom", 6))

class TmnxOpticalTdcmCtrlMode(TextualConvention, Integer32):
    description = 'The TmnxOpticalTdcmCtrlMode specifies the operational control mode of the optical tunable dispersion compensation module. The valid modes are as follows: - automatic - The software control loop automatically determines the dispersion using a FEC feedback algorithm to find the best operational dispersion compensation point - manual - The software control loop is disabled and the user manually configures the dispersion compensation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("automatic", 0), ("manual", 1))

class TmnxOpticalAmpCtrlState(TextualConvention, Integer32):
    description = 'The TmnxOpticalAmpCtrlState specifies the state of the control loop that optimizes the receive optical power of to the MSA optics.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 0), ("lossOfsignal", 1), ("adjusting", 2), ("paused", 3), ("converged", 4))

class TmnxOpticalTdcmCtrlState(TextualConvention, Integer32):
    description = 'The TmnxOpticalTdcmCtrlState specifies the state of the control loop that optimizes the dispersion by tuning the dispersion compensation module to the set point at which the FEC corrected error rate is the lowest.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("disabled", 1), ("waiting", 2), ("sweeping", 3), ("zoneIn", 4), ("fineTuning", 5), ("converged", 6))

class TmnxOpticalDwdmChannel(TextualConvention, Unsigned32):
    description = "TmnxOpticalDwdmChannel is the DWDM ITU channel associated with an optical interface. It is expressed in a form that is derived from the laser's operational frequency. For example 193.40 THz corresponds to DWDM ITU channel 34 in the 100 GHz grid and 193.45 THz corresponds to DWDM ITU channel 345 in the 50 GHz grid. Range ITU Grid -------- ---------------------- 17-61 100 GHz Grid 170-610 50 GHz Grid For configurable attributes, the value 0 represents no channel. For read-only attributes, the value 0 represents no channel transmitted or the interface is not equipped with a laser."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(17, 61), ValueRangeConstraint(170, 610), )
class TmnxDigitalDiagnosticFailureBits(TextualConvention, Bits):
    description = 'The TmnxDigitalDiagnosticFailureBits specifies the state of the Digital Diagnostic Monitoring (DDM) SFF thresholds. For each monitored attribute a low-warning, low-alarm, high-warning, and high-alarm are recorded. A set bit indicates the object is in a failed state, a cleared bit indicates the object has not exceeded the threshold.'
    status = 'current'
    namedValues = NamedValues(("unknown", 0), ("temperature-low-warning", 1), ("temperature-low-alarm", 2), ("temperature-high-warning", 3), ("temperature-high-alarm", 4), ("supplyVoltage-low-warning", 5), ("supplyVoltage-low-alarm", 6), ("supplyVoltage-high-warning", 7), ("supplyVoltage-high-alarm", 8), ("txBiasCurrent-low-warning", 9), ("txBiasCurrent-low-alarm", 10), ("txBiasCurrent-high-warning", 11), ("txBiasCurrent-high-alarm", 12), ("txOutputPower-low-warning", 13), ("txOutputPower-low-alarm", 14), ("txOutputPower-high-warning", 15), ("txOutputPower-high-alarm", 16), ("rxOpticalPower-low-warning", 17), ("rxOpticalPower-low-alarm", 18), ("rxOpticalPower-high-warning", 19), ("rxOpticalPower-high-alarm", 20), ("aux1-low-warning", 21), ("aux1-low-alarm", 22), ("aux1-high-warning", 23), ("aux1-high-alarm", 24), ("aux2-low-warning", 25), ("aux2-low-alarm", 26), ("aux2-high-warning", 27), ("aux2-high-alarm", 28))

tmnxPortTableLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTableLastChange.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTableLastChange.setDescription('The value of sysUpTime when the tmnxPortTable was last changed.')
tmnxPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2), )
if mibBuilder.loadTexts: tmnxPortTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTable.setDescription('The port table has an entry for each port on each IOM card in each chassis in the TMNX system.')
tmnxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEntry.setDescription('Each row entry represents a port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. Before an IOM tmnxMDAEntry can be deleted from the tmnxMDATable, its supported tmnxPortEntry rows must be in the proper state for removal.')
tmnxPortPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 1), TmnxPortID())
if mibBuilder.loadTexts: tmnxPortPortID.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPortID.setDescription('tmnxPortPortID is an index into this table. It maps this port to its entry in the mib-2 interfaces table.')
tmnxPortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLastChangeTime.setDescription('The tmnxPortLastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxPortEntry row for this port.')
tmnxPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 3), TmnxPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortType.setStatus('current')
if mibBuilder.loadTexts: tmnxPortType.setDescription('The type of port or optical pack installed.')
tmnxPortClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 4), TmnxPortClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortClass.setStatus('current')
if mibBuilder.loadTexts: tmnxPortClass.setDescription('The class of port or optical pack installed. This can be derived from tmnxPortType.')
tmnxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 5), TItemLongDescription().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxPortDescription.setDescription('A textual string containing user supplied information about the interface.')
tmnxPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 6), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortName.setDescription("The textual name of the interface. The value of this object should be the name of the interface as assigned by the local device and should be suitable for use in commands entered at the device's `console'. This might be a text name, such as `le0' or 'sys171-2/1.")
tmnxPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 7), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAlias.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAlias.setDescription("This object is an 'alias' name for the interface as specified by a network manager, and provides a non-volatile 'handle' for the interface. On the first instantiation of an interface, the value of tmnxPortAlias associated with that interface is the zero-length string. As and when a value is written into an instance of tmnxPortAlias through a network management set operation, then the agent must retain the supplied value in the tmnxPortAlias instance associated with the same interface for as long as that interface remains instantiated, including across all re- initializations/reboots of the network management system.")
tmnxPortUserAssignedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortUserAssignedMac.setStatus('current')
if mibBuilder.loadTexts: tmnxPortUserAssignedMac.setDescription("When tmnxPortUserAssignedMac has a value of 'true', the value of tmnxPortMacAddress has been explicitly assigned by a SNMP SET request. When tmnxPortUserAssignedMac is set to 'false', tmnxPortMacAddress returns the system assigned MAC address.")
tmnxPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 9), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxPortMacAddress.setDescription("When tmnxPortUserAssignedMac has a value of 'true', tmnxPortMacAddress has the value that has been explicitly assigned by a SNMP SET request. When tmnxPortUserAssignedMac has a value of 'false', tmnxPortMacAddress returns the same value as tmnxPortMacAddress, the hardware or system assigned MAC address. When tmnxPortMacAddress is modified by a SET request, the agent sets tmnxPortUserAssignedMac to 'true'. Setting tmnxPortMacAddress to all zeros causes the agent to revert to using the default tmnxPortHwMacAddress and also to return tmnxPortUserAssignedMac as 'false'.")
tmnxPortHwMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortHwMacAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHwMacAddress.setDescription("The interface's hardware or system assigned MAC address at its protocol sub-layer. When tmnxPortUserAssignedMac has a value of 'true', the value of tmnxPortMacAddress is used instead of tmnxPortHwMacAddress. In the case of a pre-provisioned port that is not yet physically in the system, the MAC address may not be known. In this case a MAC address of all zeros is returned.")
tmnxPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("access", 1), ("network", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortMode.setStatus('current')
if mibBuilder.loadTexts: tmnxPortMode.setDescription("The tmnxPortMode variable indicates if the interface on this port is configured as a service access port, a network port or a hybrid port. Once the port's mode has been configured for 'access', 'network' or 'hybrid' mode, multiple services may be configured on the port. tmnxPortEncapType is defaulted based on MDA type and Port Mode according to the following table: MDA Type Port Mode tmnxPortEncapType --------------------------------------------------------- ATM access atmEncap CEM access cemEncap Ethernet access nullEncap network nullEncap hybrid qEncap ISA isa-aa network nullEncap isa-bb access qinqEncap network qEncap isa-ipsec access qEncap isa-video access qEncap Sonet/SDH access bcpNullEncap network pppAutoEncap TDM access bcpNullEncap network pppAutoEncap VSM vsm-cca access qEncap vsm-cca network qEncap ")
tmnxPortEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 12), TmnxPortEncapType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEncapType.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEncapType.setDescription("The value of tmnxPortEncapType specifies the type of encapsulation protocol configured on this port's network interface. tmnxPortEncapType is set to 'unknown' for physical SONET/SDH and TDM ports. If the port mode equals 'hybrid', tmnxPortEncapType can only be set to 'qEncap' or 'qinqEncap'. ")
tmnxPortLagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLagId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLagId.setDescription("The value of tmnxPortLagId indicates which LAG or multi-link trunk (MLT) this port is assigned to. If this port is not associated with any LAG, this value will be set to zero(0). The maximum value of this object is '64', when the value of TIMETRA-CHASSIS-MIB::tmnxChassisType is '5' (ESS-1/SR-1).")
tmnxPortHoldTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeUp.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHoldTimeUp.setDescription("The value of tmnxPortHoldTimeUp is used to configure the hold-timer for link up event dampening. This guards against reporting excessive interface transitions. This is implemented by not advertising subsequent transitions of the interface to upper layer protocols until the configured timer has expired. A value of zero (0) indicates that an up transition is reported immediately. The value of tmnxPortHoldTimeUp is not applicable when tmnxPortClass has a value of 'sonet (5)'. In that case, tmnxSonetHoldTimeUp is used instead. tmnxPortHoldTimeUp is measured in units as specified by tmnxPortHoldTimeUnits. The maximum hold-time for this object is 15 minutes, regardless of the units specified. Attempts to change the maximum value to a hold-time longer than 15 minutes will result in an INCONSISTENT error.")
tmnxPortHoldTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeDown.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHoldTimeDown.setDescription("The value of tmnxPortHoldTimeDown is used to configure the hold-timer for link down event dampening. This guards against reporting excessive interface transitions. This is implemented by not advertising subsequent transitions of the interface to upper layer protocols until the configured timer has expired. A value of zero (0) indicates that a down transition is reported immediately. The value of tmnxPortHoldTimeDown is not applicable when tmnxPortClass has a value of 'sonet (5)'. In that case, tmnxSonetHoldTimeDown is used instead. tmnxPortHoldTimeDown is measured in units as specified by tmnxPortHoldTimeUnits. The maximum hold-time for this object is 15 minutes, regardless of the units specified. Attempts to change the maximum value to a hold-time longer than 15 minutes will result in an INCONSISTENT error.")
tmnxPortUpProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 16), Bits().clone(namedValues=NamedValues(("portUpIpv4", 0), ("portUpMpls", 1), ("portUpBcp", 2), ("portUpIso", 3), ("portUpFr", 4), ("portUpAtm", 5), ("portUpChdlc", 6), ("portUpIma", 7), ("portUpIpv6", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortUpProtocols.setStatus('current')
if mibBuilder.loadTexts: tmnxPortUpProtocols.setDescription('The tmnxPortUpProtocols variable is a bitmap that indicates what protocols can be used on this port type.')
tmnxPortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 17), TmnxPortConnectorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectorType.setStatus('current')
if mibBuilder.loadTexts: tmnxPortConnectorType.setDescription('The type of connector installed on this port.')
tmnxPortTransceiverType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 0), ("gbic", 1), ("moduleConnectorSolderedToMotherboard", 2), ("sfpTransceiver", 3), ("xbiTransceiver", 4), ("xenpakTransceiver", 5), ("xfpTransceiver", 6), ("xffTransceiver", 7), ("xfpeTransceiver", 8), ("xpakTransceiver", 9), ("x2Transceiver", 10), ("dwdmSfpTransceiver", 11), ("qsfpTransceiver", 12), ("qsfpPlusTransceiver", 13), ("cfpTransceiver", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverType.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTransceiverType.setDescription('Type of the transceiver.')
tmnxPortTransceiverCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 26), Bits().clone(namedValues=NamedValues(("unknown", 0), ("oc48-longreach", 1), ("oc48-intermediatereach", 2), ("oc48-shortreach", 3), ("oc12-singlemodelongreach", 4), ("oc12-singlemodeinterreach", 5), ("oc12-multimodeshortreach", 6), ("oc3-singlemodelongreach", 7), ("oc3-singlemodeinterreach", 8), ("oc3-multi-modeshortreach", 9), ("gige-1000base-t", 10), ("gige-1000base-cx", 11), ("gige-1000base-lx", 12), ("gige-1000base-sx", 13), ("faste-100base-mm-fx", 14), ("faste-100base-sm-fx", 15), ("xgige-10gbase-sr", 16), ("xgige-10gbase-lr", 17), ("xgige-10gbase-er", 18), ("xgige-10gbase-sw", 19), ("xgige-10gbase-lw", 20), ("xgige-10gbase-ew", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverCode.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortTransceiverCode.setDescription('The code for the transmission media. tmnxPortOpticalCompliance is used instead of tmnxPortTransceiverCode.tmnxPortOpticalCompliance contains the same information and is defined by an industry standard.')
tmnxPortTransceiverLaserWaveLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverLaserWaveLen.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTransceiverLaserWaveLen.setDescription("The light wavelength transmitted by the transceiver's laser. A value of zero indicates that the port is not equipped with the transceiver. A value in the range of 1 to 2000 indicates that the units are in nano-meters (nm). A value in the range of 850000 to 2000000 indicates that the units are in pico-meters (pm).")
tmnxPortTransceiverDiagCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverDiagCapable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTransceiverDiagCapable.setDescription('Indicates if the transceiver is capable of doing diagnostics.')
tmnxPortTransceiverModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 29), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTransceiverModelNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTransceiverModelNumber.setDescription('The value of tmnxPortTransceiverModelNumber indicates the model information for the transceiver, as read from the transceiver EEPROM. For example, the string may contain the Alcatel-Lucent part number and CLEI for the transceiver. The string is expected to contain printable ASCII characters, but unprintable ASCII characters read from the EEPROM are not filtered out.')
tmnxPortSFPConnectorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33, 128))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("fiberChannel-Style1-CopperConnector", 2), ("fiberChannel-Style2-CopperConnector", 3), ("bncortnc", 4), ("fiberChannelCoaxialHeaders", 5), ("fiberJack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalPigtail", 11), ("hssdcII", 32), ("copperPigtail", 33), ("copperGigE", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPConnectorCode.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPConnectorCode.setDescription('The external connector provided on the interface.')
tmnxPortSFPVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorOUI.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPVendorOUI.setDescription('The vendor organizationally unique identifier field (OUI) contains the IEEE company identifier for the vendor. A value of all zero indicates that the vendor OUI is unspecified.')
tmnxPortSFPVendorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorManufactureDate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPVendorManufactureDate.setDescription("The vendor's date code.")
tmnxPortSFPMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("ethernet", 1), ("sonetsdh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPMedia.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPMedia.setDescription('The media supported for the SFP.')
tmnxPortSFPEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPEquipped.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPEquipped.setDescription('Indicates if the SFP is equipped.')
tmnxPortEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEquipped.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEquipped.setDescription('Indicates if there is an optics pack installed in this port or not.')
tmnxPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLinkStatus.setDescription('Indicates whether or not the port has a physical link.')
tmnxPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 37), TmnxPortAdminStatus().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAdminStatus.setDescription("The desired administrative status of this port. When tmnxPortType references a row in the tmnxPortTypeTable where tmnxPortTypeName is the octet string 'Application Assurance', an attempt to set tmnxPortAdminStatus to a value other than 'inService' results in an 'inconsistentValue' error.")
tmnxPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 38), TmnxPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortOperStatus.setDescription('The current operational status of this port.')
tmnxPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 39), TmnxPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortState.setStatus('current')
if mibBuilder.loadTexts: tmnxPortState.setDescription("The state level of this port. A value of 'none' indicates the port is either in its initial creation state or is just about to be deleted. A value of 'ghost' represents a port that is not physically present. This state may represent a pre-provisioned port. A value of 'linkDown' represents a port that is physically present but does not have a link. The 'linkUp' state represents a port that is physically present and has physical link present. A port in 'up' state is ready to pass some kinds of traffic. The tmnxPortUpProtocols variable indicates the actual type(s) of traffic can be passed on this 'up' link.")
tmnxPortPrevState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 40), TmnxPortState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPrevState.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPrevState.setDescription('The tmnxPortPrevState indicates the state level that the port transitioned from into the current tmnxPortState level.')
tmnxPortNumAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNumAlarms.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNumAlarms.setDescription('The number of alarms currently outstanding on this port.')
tmnxPortAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 42), TmnxAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortAlarmState.setStatus('current')
if mibBuilder.loadTexts: tmnxPortAlarmState.setDescription('The value of tmnxPortAlarmState indicates the current alarm state for this port.')
tmnxPortLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 43), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastAlarmEvent.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLastAlarmEvent.setDescription("The value of tmnxPortLastAlarmEvent indicates the object name and instance value that points to the row entry in the ALARM-MIB containing the most recent alarm associated with this port. If tmnxPortAlarmState has a value of 'alarmCleared(2)', the most recent alarm event will be in the cleared alarm table. If it has a value of 'alarmActive(1)', the most recent alarm event will be in the active alarm table. If the value of tmnxPortLastAlarmEvent is '0.0', either no port alarm events have occurred since the system was last booted, or the last port alarm event has aged out and its entry is no longer available in the ALARM-MIB tables.")
tmnxPortClearAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 44), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortClearAlarms.setStatus('current')
if mibBuilder.loadTexts: tmnxPortClearAlarms.setDescription('Setting this action variable causes all the alarms associated with this port to be moved from the current alarm log to the history alarm log. Primarily meant for use in development. This object will most likely be removed from the MIB before product release.')
tmnxPortSFPVendorSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 45), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorSerialNum.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPVendorSerialNum.setDescription("The value of tmnxPortSFPVendorSerialNum indicates the transceiver's vendor serial number in ASCII characters, as read from the transceiver EEPROM. An empty string indicates the vendor serial number is unspecified. The string is expected to contain printable ASCII characters, but unprintable ASCII characters read from the EEPROM are not filtered out.")
tmnxPortSFPVendorPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 46), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPVendorPartNum.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPVendorPartNum.setDescription("The value of tmnxPortSFPVendorPartNum indicates the transceiver's vendor part number (or product name) in ASCII characters, as read from the transceiver EEPROM. An empty string indicates the vendor part number is unspecified. The string is expected to contain printable ASCII characters, but unprintable ASCII characters read from the EEPROM are not filtered out.")
tmnxPortLastStateChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 48), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastStateChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLastStateChanged.setDescription('The tmnxPortLastStateChanged variable contains the value of the sysUpTime the last time the operational status of the port changed state.')
tmnxPortNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 49), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNumChannels.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNumChannels.setDescription('For SONET/SDH paths or TDM channels, tmnxPortNumChannels contains the number of possible immediate children. For leaf paths or channels, the value of this object will be zero. For SONET/SDH or TDM physical ports, tmnxPortNumChannels contains the total number of channels on the physical port. For all other entries in the tmnxPortTable, the value of this object will be zero.')
tmnxPortNetworkEgrQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 50), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortNetworkEgrQueues.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetworkEgrQueues.setDescription('tmnxPortNetworkEgrQueues contains the network egress queue policy if the tmnxPortMode is network. Otherwise this object has no significance.')
tmnxPortBundleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortBundleNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxPortBundleNumber.setDescription('tmnxPortBundleNumber identifies the bundle for which this port is a member. If this port is not a member of any bundle, the value of tmnxPortBundleNumber will be zero.')
tmnxPortIsLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIsLeaf.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIsLeaf.setDescription("tmnxPortIsLeaf is applicable only when the 'isSonet' and/or 'isTDM' bits in TIMETRA-CHASSIS-MIB:tmnxMDACapabilities are set. When the value of this object is 'true', it indicates that the channel is capable of passing traffic. The value of this object is 'false' for: 1. Physical ports on SONET/TDM MDA's 2. Intermediate channels on a channelized MDA 3. Leaf channels which belong to a bundle For ports on Ethernet MDA's or for LAG ports, the value of this object will be 'false'.")
tmnxPortChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 53), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortChanType.setStatus('current')
if mibBuilder.loadTexts: tmnxPortChanType.setDescription("tmnxPortChanType is applicable only when the 'isSonet' and/or 'isTDM' bits in TIMETRA-CHASSIS-MIB:tmnxMDACapabilities are set. It indicates the type of the channel. For ports on Ethernet MDA's, the value of this object will be 'unknown'.")
tmnxPortParentPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 54), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortParentPortID.setStatus('current')
if mibBuilder.loadTexts: tmnxPortParentPortID.setDescription("tmnxPortParentPortID is applicable only when the 'isSonet' and/or 'isTDM' bits in TIMETRA-CHASSIS-MIB:tmnxMDACapabilities are set. For SONET or TDM channel, it indicates the port ID of its parent channel or port.")
tmnxPortOpticalCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOpticalCompliance.setStatus('current')
if mibBuilder.loadTexts: tmnxPortOpticalCompliance.setDescription("tmnxPortOpticalCompliance is applicable only when the tmnxPortSFPEquipped is set to 'true'. The value of tmnxPortOpticalCompliance indicates the 8 bytes of optical compliance bits stored in SFP and XFP eeproms.")
tmnxPortLoadBalanceAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("default", 1), ("includeL4", 2), ("excludeL4", 3))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortLoadBalanceAlgorithm.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLoadBalanceAlgorithm.setDescription("The value of tmnxPortLoadBalanceAlgorithm specifies the load balancing algorithm to be used on this port. When the value is 'includeL4', the src and dst port are used in the hashing algorithm. When it's 'excludeL4', they are not included. When the value is 'default', the port inherits the global settings in tmnxL4LoadBalancing. The value is 'notApplicable' for ports that do not pass any traffic. An attempt to modify this object when it is set to 'notApplicable' will return an inconsistentValue error.")
tmnxPortEgrPortSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 57), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrPortSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrPortSchedPlcy.setDescription("The value of tmnxPortEgrPortSchedPlcy specifies the egress QoS port-scheduler policy for this port. This object must correspond to the index of a row in TIMETRA-QOS-MIB::tPortSchedulerPlcyTable. A non-empty value for tmnxPortEgrPortSchedPlcy is only valid when the tmnxMDAAssignedType is a non-HSMDA MDA Type. Attempting to set tmnxPortEgrPortSchedPlcy to a non-empty string when the tmnxMDAAssignedType is a HSMDA MDA Type will return an 'inconsistentValue' error.")
tmnxPortLastClearedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 58), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLastClearedTime.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLastClearedTime.setDescription('The value of tmnxPortLastClearedTime indicates the sysUpTime when the counters in the IF-MIB:ifTable were last cleared.')
tmnxPortEgrHsmdaSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 59), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrHsmdaSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrHsmdaSchedPlcy.setDescription("The value of tmnxPortEgrHsmdaSchedPlcy specifies the egress QoS Hsmda-scheduler policy for this port. This object must correspond to the index of a row in TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyTable, otherwise an 'inconsistentValue' error will be returned. When the tmnxMDAAssignedType is a non-HSMDA MDA Type, the value for tmnxPortEgrHsmdaSchedPlcy will be ignored. If the tmnxMDAAssignedType is a HSMDA MDA Type, the default for this object will be the string 'default'.")
tmnxPortIngNamedPoolPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 60), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortIngNamedPoolPlcy.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngNamedPoolPlcy.setDescription('The value of tmnxPortIngNamedPoolPlcy specifies a named pool policy associated with an port ingress context. The policy governs the way named pools are created at the port level.')
tmnxPortEgrNamedPoolPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 61), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrNamedPoolPlcy.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrNamedPoolPlcy.setDescription('The value of tmnxPortEgrNamedPoolPlcy specifies a named pool policy associated with an port egress context. The policy governs the way named pools are created at the port level.')
tmnxPortIngPoolPercentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortIngPoolPercentRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngPoolPercentRate.setDescription('The value of tmnxPortIngPoolPercentRate specifies increment or decrement of the active bandwidth associated with the ingress port. This active bandwidth affects the amount of ingress buffer space managed by the port.')
tmnxPortEgrPoolPercentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEgrPoolPercentRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrPoolPercentRate.setDescription('The value of tmnxPortEgrPoolPercentRate specifies increment or decrement of the active bandwidth associated with the egress port. This active bandwidth affects the amount of egress buffer space managed by the port. The table below summarizes cases when the default value of tmnxPortEgrPoolPercentRate differs from 100. port behavior default value ------------------------------------ ISA-AA /to-sub 1000 ISA-AA /fm-sub 500 ')
tmnxPortDDMEventSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 64), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDDMEventSuppression.setStatus('current')
if mibBuilder.loadTexts: tmnxPortDDMEventSuppression.setDescription('The value of tmnxPortDDMEventSuppression specifies whether or not an inserted SFF that supports Digital Diagnostic Monitoring raises traps and events (false) or suppresses all notifications (true).')
tmnxPortSFPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-equipped", 0), ("operational", 1), ("read-error", 2), ("data-corrupt", 3), ("ddm-corrupt", 4), ("unsupported", 5))).clone('not-equipped')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPStatus.setDescription("The value of tmnxPortSFPStatus indicates the operational status of the inserted SFF. If tmnxPortSFPEquipped is false, the tmnxPortSFPStatus will be 'not-equipped (0)', otherwise 'operational (1)' if no failure is detected. A failure to read the SFP data will result in a 'read-error (2)', while corrupted information on the SFP will result in either 'data-corrupt (3)', or 'ddm-corrupt (4)' if an SFP read results in invalid data or DDM information respectively. An insertion of an unsupported SFP will result in 'unsupported (5)'. A trap will be raised if the value of tmnxPortSFPStatus indicates a failure; that is the tmnxPortSFPStatus is neither 'not-equipped (0)', nor 'operational (1)'.")
tmnxPortReasonDownFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 66), Bits().clone(namedValues=NamedValues(("unknown", 0), ("linklossFwd", 1), ("lagMemberPortStandby", 2), ("ethCfmFault", 3), ("opticalTuning", 4), ("channelOutOfRange", 5), ("channelNotConfigured", 6), ("crcError", 7), ("internalMacTxError", 8), ("noServicePort", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortReasonDownFlags.setStatus('current')
if mibBuilder.loadTexts: tmnxPortReasonDownFlags.setDescription("The tmnxPortReasonDownFlags indicates why a port may be in the operationally 'down' state. The following reasons are detected through this object: unknown(0) - Unspecified (or unknown) linklossFwd(1) - A sap using this port has an LLF operational status set to 'fault' lagMemberPortStandby(2) - A lag using this port as a member port has set the member port to 'standby' while configured to keep standby member ports down. ethCfmFault(3) - A facility MEP bound to this port has its dot1agCfmMepHighestPrDefect set to a value other than 'none (0)'. opticalTuning(4) - The DWDM optical receive signal is undergoing tuning and analysis by control algorithms to find the optimal settings. channelOutOfRange(5) - The configured DWDM optical channel is out of range for the equipped tunable optical interface. channelNotConfigured(6) - The DWDM optical channel is not configured for the equipped tunable optical interface. crcError(7) - CRC errors on the port exceeded the configured threshold. internalMacTxError(8) - An internal MAC tx error was detected on the port. noServicePort(9) - port configured as no-service port ")
tmnxPortSSMRxQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("unknown", 0), ("prs", 1), ("stu", 2), ("st2", 3), ("tnc", 4), ("st3e", 5), ("st3", 6), ("smc", 7), ("st4", 8), ("dus", 9), ("prc", 10), ("ssua", 11), ("ssub", 12), ("sec", 13), ("dnu", 14), ("inv", 15), ("pno", 16), ("eec1", 17), ("eec2", 18), ("failed", 19))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSSMRxQualityLevel.setReference('Bellcore (Telcordia Technologies) GR-253-CORE, Issue 3, September 2000, 5.4.2. ITU-T Recommendation G.781, June 1999. ITU-T Recommendation G.8264, October 2008.')
if mibBuilder.loadTexts: tmnxPortSSMRxQualityLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSSMRxQualityLevel.setDescription("tmnxPortSSMRxQualityLevel indicates the SSM quality level of received SSM messages. On ports not supporting SSM, or not receiving SSM messages, the quality level will be 'unknown (0)'. The values 'prs (1)' through 'dus (9)' and 'pno (16)' correspond to quality levels defined in GR-253-CORE. The values 'prc (10)' through 'inv (15)' correspond to quality levels defined in G.781. The values 'eec1 (17)' and 'eec2 (18)' correspond to quality levels defines in G.8264. The value 'failed (19)' is used when there is a failure in the SSM channel.")
tmnxPortDwdmLaserChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 68), TmnxOpticalDwdmChannel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDwdmLaserChannel.setStatus('current')
if mibBuilder.loadTexts: tmnxPortDwdmLaserChannel.setDescription('tmnxPortDwdmLaserChannel specifies the DWDM ITU channel at which a tunable optical interface will be configured to operate. A value of zero(0) can be specified only on an administratively disabled port or a port that is equipped with a non-tunable laser. To enable a port that is equipped with a tunable laser, tmnxPortDwdmLaserChannel must be changed to a valid DWDM ITU channel number in either the 50GHz, or 100GHz grid.')
tmnxPortOtuCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 69), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortOtuCapable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortOtuCapable.setDescription('The value of tmnxPortOtuCapable indicates whether or not the physical port supports the Optical Transport Unit (OTU) encapsulation.')
tmnxPortWaveTrackerCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 70), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortWaveTrackerCapable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortWaveTrackerCapable.setDescription("The value of tmnxPortWaveTrackerCapable indicates whether or not the physical port supports Wavelength Tracker. tmnxPortWaveTrackerCapable is equivalent to 'tnWtEncodePortCapabilityPresent' of the 1696-Roadm MIBs.")
tmnxPortHybridIngAccessWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 71), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridIngAccessWeight.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHybridIngAccessWeight.setDescription("The value of tmnxPortHybridIngAccessWeight specifies the increment or decrement of the ingress access weight associated with the port. This active weight affects the amount of ingress access buffer space managed by the port. This object only applies when tmnxPortMode is set to 'hybrid (3)'")
tmnxPortHybridIngNetworkWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 72), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridIngNetworkWeight.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHybridIngNetworkWeight.setDescription("The value of tmnxPortHybridIngNetworkWeight specifies the increment or decrement of the ingress network weight associated with the port. This active weight affects the amount of ingress network buffer space managed by the port. This object only applies when tmnxPortMode is set to 'hybrid (3)'")
tmnxPortHybridEgrAccessWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 73), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridEgrAccessWeight.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHybridEgrAccessWeight.setDescription("The value of tmnxPortHybridEgrAccessWeight specifies the increment or decrement of the egress access weight associated with the port. This active weight affects the amount of egress access buffer space managed by the port. This object only applies when tmnxPortMode is set to 'hybrid (3)'")
tmnxPortHybridEgrNetworkWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHybridEgrNetworkWeight.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHybridEgrNetworkWeight.setDescription("The value of tmnxPortHybridEgrNetworkWeight specifies the increment or decrement of the egress network weight associated with the port. This active weight affects the amount of egress network buffer space managed by the port. This object only applies when tmnxPortMode is set to 'hybrid (3)'")
tmnxPortDwdmRxDtvAdjustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 75), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortDwdmRxDtvAdjustEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortDwdmRxDtvAdjustEnable.setDescription("The value of tmnxPortDwdmRxDtvAdjustEnable specifies whether or not the Receive Decision threshold voltage adjustment feedback loop should be enabled. When this value is set to false, the optical receiver's default receive decision threshold voltage will be used.")
tmnxPortDwdmRxDtvDacPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 76), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(5000)).setUnits('Hundredths of a percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortDwdmRxDtvDacPercent.setStatus('current')
if mibBuilder.loadTexts: tmnxPortDwdmRxDtvDacPercent.setDescription("The value of tmnxPortDwdmRxDtvDacPercent specifies the current relative adjustment of the receive decision threshold voltage in hundredths of a percent. 50.00% is the optical receiver's default decision threshold voltage.")
tmnxPortInterfaceGroupHandlerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 77), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortInterfaceGroupHandlerIdx.setStatus('current')
if mibBuilder.loadTexts: tmnxPortInterfaceGroupHandlerIdx.setDescription('The value of tmnxPortInterfaceGroupHandlerIdx indicates whether or not the physical port is a member of an Interface Group Handler.')
tmnxPortHoldTimeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("seconds", 0), ("centiseconds", 1))).clone('seconds')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortHoldTimeUnits.setStatus('current')
if mibBuilder.loadTexts: tmnxPortHoldTimeUnits.setDescription('The value of tmnxPortHoldTimeUnits specifies the measurable units of tmnxPortHoldTimeDown and tmnxPortHoldTimeUp.')
tmnxPortLinkLengthInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortLinkLengthInfo.setReference('SFF Committee, SFF-8472 Specification for Diagnostic Monitoring Interface for Optical Transceivers, Rev 11.0, September 14, 2010 SFF Committee, INF-8077i 10 Gigabit Small Form Factor Pluggable Module, Rev 4.5, August 31, 2005')
if mibBuilder.loadTexts: tmnxPortLinkLengthInfo.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLinkLengthInfo.setDescription("The value of tmnxPortLinkLengthInfo indicates the link length info stored in SFP and XFP EEPROMs. tmnxPortLinkLengthInfo is applicable only when tmnxPortSFPEquipped is 'true'; otherwise, all 6 bytes will have a value of '0'. See SFF Committee documents for details on the representation of the values in each byte. For SFP EEPROMs, the 6 bytes are bytes 14 to 19 of the A0 bank inclusive, described in SFF Committee document SFF-8472. For XFP EEPROMs, the first 5 bytes are bytes 142 to 146 of the 01 bank inclusive, described in SFF Committee document INF-8077i. For XFP EEPROMs, byte 6 will have a value of '0'.")
tmnxPortSFPNumLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 80), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSFPNumLanes.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSFPNumLanes.setDescription("The value of tmnxPortSFPNumLanes indicates the total number of lanes supported by the CSFP/QSFP. If tmnxPortSFPEquipped is false, this object will have a value of '0'.")
tmnxPortPhysStateChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 2, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPhysStateChangeCount.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPhysStateChangeCount.setDescription("The value of tmnxPortPhysStateChangeCount indicates the number of times a physical port state has changed from 'linkDown (3)' to either 'linkUp (4)' or 'up (5)' and from either 'linkUp (4)' or 'up (5)' to 'linkDown (3)'. The count does not include transitions between 'linkUp (4)' and 'up (5)'. This counter is applicable to physical Ethernet ports only. All other ports maintain a count of 0. This object is automatically reset to zero, once the port enters the 'ghost (2)' state. To reset this object manually, one may use the tmnxClearTable entry whose tmnxClearName value is 'clearPortPhysStateChangeCount' by specifying the tmnxClearParams value with 'port-id=<ifIndex>'.")
tmnxPortTestTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3), )
if mibBuilder.loadTexts: tmnxPortTestTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestTable.setDescription('The tmnxPortTestTable has an entry for each port on each IOM card in each chassis in the TMNX system.')
tmnxPortTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1), )
tmnxPortEntry.registerAugmentions(("TIMETRA-PORT-MIB", "tmnxPortTestEntry"))
tmnxPortTestEntry.setIndexNames(*tmnxPortEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxPortTestEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestEntry.setDescription('Each row entry represents a port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations.')
tmnxPortTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInTest", 1), ("inTest", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestState.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestState.setDescription('The current testing status of this port.')
tmnxPortTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 0), ("loopback1", 1), ("loopback2", 2), ("loopback3", 3), ("singalInsertion", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestMode.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestMode.setDescription('The type of test to be executed on this port.')
tmnxPortTestParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestParameter.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestParameter.setDescription('A parameter to be passed to the test program.')
tmnxPortTestLastResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("success", 1), ("failure", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestLastResult.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestLastResult.setDescription('The status of the last test executed on this port.')
tmnxPortTestStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestStartTime.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestStartTime.setDescription('The date and time the test started on this port. Returns 0 if tmnxPortTestState is notInTest.')
tmnxPortTestEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTestEndTime.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestEndTime.setDescription('The date and time the last test completed. Returns 0 if a test is in progress or no tests have yet to be run on this port.')
tmnxPortTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestDuration.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestDuration.setDescription('The number of seconds the port test is anticipated to last.')
tmnxPortTestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("startTest", 2), ("stopTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortTestAction.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestAction.setDescription('The operator sets this variable to perform the appropriate type of testing.')
tmnxPortEtherTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4), )
if mibBuilder.loadTexts: tmnxPortEtherTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherTable.setDescription('The tmnxPortEtherTable has an entry for each Ethernet (faste, gige, xcme or xgige) port on each IOM card in each chassis in the TMNX system.')
tmnxPortEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortEtherEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherEntry.setDescription('Each row entry represents an Ethernet port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. Before an IOM card entry can be deleted from the tmnxMDATable, its supported tmnxPortEntry and tmnxPortEtherEntry rows must be in the proper state for removal. The tmnxPortEtherEntry contains attributes that are unique to the Ethernet TmnxPortType.')
tmnxPortEtherMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9212), ))).setUnits('bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherMTU.setDescription('The size of the largest packet which can be sent/received on the Ethernet physical interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface. Setting tmnxPortEtherMTU to a value of zero (0), causes the agent to recalculate the default MTU size which can vary based on the current setting of tmnxPortMode and tmnxPortEncapType variables. Some typical default values are: 1514 with mode access and encap-type null 1518 with mode access and encap-type dot1q 1518 with mode access and encap-type mpls 9198 with mode network ')
tmnxPortEtherDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("fullDuplex", 1), ("halfDuplex", 2))).clone('fullDuplex')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDuplex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDuplex.setDescription("The tmnxPortEtherDuplex variable specifies the duplex mode used by the Ethernet interface if tmnxPortEtherAutoNegotiate has a value of 'false' or 'limited'. If tmnxPortEtherAutoNegotiate has a value of 'true', the link parameters are negotiated with the far end and the tmnxPortEtherDuplex variable is ignored. A value of 'fullDuplex' sets the link to full duplex mode. A value of 'halfDuplex' sets the link to half duplex mode. tmnxPortEtherDuplex is only valid on Ethernet interfaces that support multiple duplex modes.")
tmnxPortEtherSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 0), ("speed10", 1), ("speed100", 2), ("speed1000", 3), ("speed10000", 4), ("speed40000", 5), ("speed100000", 6), ("speed25000", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSpeed.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherSpeed.setDescription("The tmnxPortEtherSpeed variable specifies the link speed of the Ethernet interface if tmnxPortEtherAutoNegotiate has a value of 'false' or 'limited'. If tmnxPortEtherAutoNegotiate has a value of 'true', the link parameters are negotiated with the far end and the tmnxPortEtherSpeed variable is ignored. A value of 'speed10' sets the link to 10 mbps. A value of 'speed100' sets the link to 100 mbps. A value of 'speed1000' sets the link to 1000 mbps (1 gbps). tmnxPortEtherSpeed is only valid on Ethernet interfaces that support multiple link speeds.")
tmnxPortEtherAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("true", 1), ("false", 2), ("limited", 3))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherAutoNegotiate.setDescription("When the value of tmnxPortEtherAutoNegotiate is 'true', the Ethernet interface will automatically negotiate link parameters with the far end (including speed and duplex), and will advertise all speeds and duplex modes supported by the interface. When the value of tmnxPortEtherAutoNegotiate is 'limited', the Ethernet interface will automatically negotiate link parameters with the far end, but will only advertise the speed and duplex mode specified by tmnxPortEtherSpeed and tmnxPortEtherDuplex. If tmnxPortEtherAutoNegotiate is 'false', the Ethernet interface will not negotiate link parameters with the far end and will instead force the speed and duplex mode to the values specified by tmnxPortEtherSpeed and tmnxPortEtherDuplex respectively.")
tmnxPortEtherOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("fullDuplex", 1), ("halfDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherOperDuplex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherOperDuplex.setDescription("The tmnxPortEtherOperDuplex variable indicates the operational duplex mode of the Ethernet interface. A value of 'fullDuplex' indicates that the link is in full duplex mode. A value of 'halfDuplex' indicates that the link is in half duplex mode. tmnxPortEtherOperDuplex is only valid if tmnxPortClass is 'faste' or 'xcme'.")
tmnxPortEtherOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 6), Unsigned32()).setUnits('mega-bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherOperSpeed.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherOperSpeed.setDescription("The tmnxPortEtherOperSpeed variable indicates the operational speed of the Ethernet interface in mega-bits per second (mbps). If the value of tmnxPortEtherAutoNegotiate is 'true', the link autonegotiates the link parameters with the far end side. The value of tmnxPortEtherOperSpeed is only valid if tmnxPortClass is one of the Ethernet classes.")
tmnxPortEtherAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherAcctPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherAcctPolicyId.setDescription('The value of the accounting policy must be defined prior to associating the policy with the ethernet port. Accounting policies can only be associated with network ports. A non-zero value indicates the tmnxLogApPolicyId index identifying the policy entry in the tmnxLogApTable from the TIMETRA-LOG-MIB which is associated with this port. A zero value indicates that there is no accounting policy associated with this port')
tmnxPortEtherCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCollectStats.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherCollectStats.setDescription('Enable/disable the collection of accounting and statistical data for the network ethernet port. When applying accounting policies the data by default will be collected in the appropriate records and written to the designated billing file. When the value is set to false, the statistics are still accumulated by the IOM cards, however, the CPU will not obtain the results and write them to the billing file.')
tmnxPortEtherMDIMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("mdi", 1), ("mdix", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherMDIMDIX.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherMDIMDIX.setDescription("The tmnxPortEtherMDIMDIX variable indicates whether the Ethernet interface is of type 'mdi' (Media Dependent Interface) or 'mdix' (Media Dependent Interface with crossover). If the agent cannot identify the type of Ethernet interface the value 'unknown (0)' is indicated. tmnxPortEtherMDIMDIX is only valid if tmnxPortClass is 'faste' or 'xcme'.")
tmnxPortEtherXGigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notApplicable", 0), ("lan", 1), ("wan", 2))).clone('lan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherXGigMode.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherXGigMode.setDescription("The tmnxPortEtherXGigMode variable specifies whether the Ethernet interface is in LAN or WAN mode. tmnxPortEtherXGigMode must be 'notApplicable' if tmnxPortClass is not 'xgige'.")
tmnxPortEtherEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100000000), )).clone(-1)).setUnits('kilo-bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherEgressRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherEgressRate.setDescription('The tmnxPortEtherEgressRate variable specifies the maximum egress bandwidth (in kilo-bits per second) that the Ethernet interface can generate. A value of -1 means that the limit is the actual physical limit. If the provisioned sub-rate bandwidth is larger than the actual physical bandwidth of the interface, the latter applies.')
tmnxPortEtherDot1qEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDot1qEtype.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDot1qEtype.setDescription("The tmnxPortEtherDot1qEtype variable indicates the ethertype expected when the port's encapsulation type is dot1qEncap.")
tmnxPortEtherQinqEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherQinqEtype.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherQinqEtype.setDescription("The tmnxPortEtherQinqEtype variable indicates the ethertype expected when the port's encapsulation type is qinqEncap.")
tmnxPortEtherIngressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100000), )).clone(-1)).setUnits('mega-bits per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherIngressRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherIngressRate.setDescription('The tmnxPortEtherIngressRate variable specifies the maximum ingress bandwidth (in mega-bits per second) that the Ethernet interface can receive. A value of -1 means that the limit is the actual physical limit. If the provisioned sub-rate bandwidth is larger than the actual physical bandwidth of the interface, the latter applies. For interfaces that support more than 10Gbps, the configured value must be specified as a multiple of 10Mbps; otherwise, the configuration will be rejected with an inconsistentValue error.')
tmnxPortEtherReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 15), TmnxPortEtherReportStatus().clone(namedValues=NamedValues(("remoteFault", 2), ("localFault", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherReportAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherReportAlarm.setDescription('The value of tmnxPortEtherReportAlarm determines when and if to generate tmnxEqPortEtherAlarm and tmnxEqPortEtherAlarmClear.')
tmnxPortEtherReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 16), TmnxPortEtherReportStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherReportAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherReportAlarmStatus.setDescription('The value of tmnxPortEtherReportAlarmStatus indicates the alarms on this port.')
tmnxPortEtherPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherPkts1519toMax.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherPkts1519toMax.setDescription('The total number of packets received that were longer than 1518 octets but less than the maximum frame size for the particular medium, usually 12287 octets (excluding framing bits, but including FCS octets) and were otherwise well formed.')
tmnxPortEtherHCOverPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherHCOverPkts1519toMax.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherHCOverPkts1519toMax.setDescription('The number of times the associated tmnxPortEtherPkts1519toMax counter has overflowed.')
tmnxPortEtherHCPkts1519toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherHCPkts1519toMax.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherHCPkts1519toMax.setDescription('The total number of packets (including bad packets) received that were between 1519 octets in length and the maximum frame size, usually 12287 octets inclusive (excluding framing bits but including FCS octets). The lower 32-bits of this 64-bit counter will equal the value of tmnxPortEtherHCPkts1519toMax. The high 32-bits of this counter will equal the value of tmnxPortEtherHCOverPkts1519toMax.')
tmnxPortEtherLacpTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherLacpTunnel.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherLacpTunnel.setDescription('The value of tmnxPortEtherLacpTunnel specifies whether the LACP packet tunneling for the ethernet port is enabled or disabled. When tunneling is enabled, the port will not process any LACP packets but will tunnel them through instead. Also, the port cannot be added as a member to a LAG group, and vice versa.')
tmnxPortEtherDownWhenLoopedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedEnabled.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedEnabled.setDescription("The value of tmnxPortEtherDownWhenLoopedEnabled specifies whether physical loop detection for the Ethernet port is enabled or disabled. When enabled, the port will periodically send out keep-alive PDUs with an EtherType of 0x9000. If the port receives a keep-alive that it transmitted, tmnxPortState will be set to 'linkUp' if it was previously 'up'. The port will not move back to tmnxPortState 'up' for a period of time defined by tmnxPortEtherDownWhenLoopedRetry, but will continue to periodically send out keep-alive PDUs. Every time the port receives a keep alive it sent while a loop has been detected, it will reset the time period that it will remain down as defined by tmnxPortEtherDownWhenLoopedRetry.")
tmnxPortEtherDownWhenLoopedKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedKeepAlive.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedKeepAlive.setDescription('The tmnxPortEtherDownWhenLoopedKeepAlive variable specifies the number of seconds between each keep alive PDU transmission.')
tmnxPortEtherDownWhenLoopedRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 160), )).clone(120)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedRetry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedRetry.setDescription("The tmnxPortEtherDownWhenLoopedRetry variable specifies the minimum number of seconds the port should wait after detecting a loop before tmnxPortState can be set to 'up'. A value of 0 specifies the the port should not set tmnxPortState to 'up' until the user administratively disables and re-enables the port by setting tmnxPortAdminStatus to 'outOfService' and then to 'inService'.")
tmnxPortEtherDownWhenLoopedState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoopDetected", 1), ("loopDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedState.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDownWhenLoopedState.setDescription("The value of tmnxPortEtherDownWhenLoopedState indicates whether a physical loop has been detected on the port or not. If tmnxPortEtherDownWhenLoopedEnabled is set to 'false', this value will be 'noLoopDetected'.")
tmnxPortEtherPBBEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(35047)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherPBBEtype.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherPBBEtype.setDescription('The tmnxPortEtherPBBEtype variable indicates the Ethertype expected for Provider Backbone Bridging Frames.')
tmnxPortEtherReasonDownFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 26), Bits().clone(namedValues=NamedValues(("unknown", 0), ("linklossFwd", 1), ("lagMemberPortStandby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherReasonDownFlags.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEtherReasonDownFlags.setDescription("The tmnxPortEtherReasonDownFlags indicates why an ethernet port may be in the operationally 'down' state. The following reasons are detected through this object: unknown(0) - Unspecified (or unknown) linklossFwd(1) - A sap using this port has the object 'sapEthernetLLFOperStatus' set to 'fault' lagMemberPortStandby(2) - A lag using this port as a member port has set the member port to 'standby' while configured to keep standby member ports down.")
tmnxPortEtherSingleFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSingleFiber.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherSingleFiber.setDescription('tmnxPortEtherSingleFiber is used to enable/disable packet gathering and redirection of IP packets from a single fiber on RX port of the Ethernet interface and redistribute packets to other interfaces through either state routes or policy-based forwarding.')
tmnxPortEtherSSM = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSSM.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherSSM.setDescription('tmnxPortEtherSSM specifies whether or not synchronous status messages (SSM) are enabled on the ethernet port.')
tmnxPortEtherDWLUseBroadcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDWLUseBroadcastAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDWLUseBroadcastAddr.setDescription("tmnxPortEtherDWLUseBroadcastAddr specifies whether or not the Down When Looped destination MAC address is the broadcast address, 'true (1)', or the local port mac address, as specified in tmnxPortMacAddress, 'false (2)'.")
tmnxPortEtherSSMCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sonet", 2), ("sdh", 3))).clone('sdh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSSMCodeType.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherSSMCodeType.setDescription('The value of tmnxPortEtherSSMCodeType specifies the code-type used by the Synchronous Status Message (SSM) channel.')
tmnxPortEtherSSMTxDus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherSSMTxDus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherSSMTxDus.setDescription('The value of tmnxPortEtherSSMTxDus specifies whether or not the value 0xF (dus/dnu) is forced in the Synchronous Status Message (SSM) channel.')
tmnxPortEtherSSMRxEsmc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherSSMRxEsmc.setReference('ITU-T Recommendation G.8264, October 2008.')
if mibBuilder.loadTexts: tmnxPortEtherSSMRxEsmc.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherSSMRxEsmc.setDescription("The value of tmnxPortEtherSSMRxEsmc indicates the SSM code received on the Ethernet Synchronization Messaging Channel of the Ethernet port. The value returned for this object is only meaningful if tmnxPortEtherSSM is 'true', and tmnxPortSSMRxQualityLevel is not 'failed'.")
tmnxPortEtherSSMTxQualityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("reserved0", 0), ("prs", 1), ("stu", 2), ("st2", 3), ("tnc", 4), ("st3e", 5), ("reserved6", 6), ("smc", 7), ("reserved8", 8), ("dus", 9), ("prc", 10), ("ssua", 11), ("ssub", 12), ("reserved13", 13), ("dnu", 14), ("reserved15", 15), ("pno", 16), ("eec1", 17), ("eec2", 18), ("reserved19", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherSSMTxQualityLevel.setReference('ITU-T Recommendation G.8264, October 2008.')
if mibBuilder.loadTexts: tmnxPortEtherSSMTxQualityLevel.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherSSMTxQualityLevel.setDescription('The value of tmnxPortEtherSSMTxQualityLevel indicates the quality level transmitted in the Ethernet Synchronization Messaging Channel.')
tmnxPortEtherCrcMonSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSdThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSdThreshold.setDescription('The value of tmnxPortEtherCrcMonSdThreshold specifies a packet error rate threshold used to determine when to send a tmnxEqPortEtherCrcAlarm notification for a CRC Signal Degradation (SD) failure and tmnxEqPortEtherCrcAlarmClear notification for a CRC SD failure clear. tmnxPortEtherCrcMonSdThreshold is the absolute value of the exponent of the rate expressed as 10e-n. The CRC SD error rate threshold is calculated as: tmnxPortEtherCrcMonSdTMultiplier * 10e-tmnxPortEtherCrcMonSdThreshold. A value of 0 disables CRC SD monitioring.')
tmnxPortEtherCrcMonSdTMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSdTMultiplier.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSdTMultiplier.setDescription('The value of tmnxPortEtherCrcMonSdTMultiplier specifies the tmnxPortEtherCrcMonSdThreshold multiplier value. The CRC SD error rate threshold is calculated as: tmnxPortEtherCrcMonSdTMultiplier * 10e-tmnxPortEtherCrcMonSdThreshold.')
tmnxPortEtherCrcMonSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSfThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSfThreshold.setDescription("The value of tmnxPortEtherCrcMonSfThreshold specifies a packet error rate threshold used to determine when to send a tmnxEqPortEtherCrcAlarm notification for a CRC Signal Failure (SF) failure. Crossing the tmnxPortEtherCrcMonSfThreshold will result in the tmnxPortOperStatus being set to 'outOfService'. tmnxPortEtherCrcMonSfThreshold is the absolute value of the exponent of the rate expressed as 10e-n. The CRC SF error rate threshold is calculated as: tmnxPortEtherCrcMonSfTMultiplier * 10e-tmnxPortEtherCrcMonSfThreshold. A value of 0 disables CRC SF montioring.")
tmnxPortEtherCrcMonSfTMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSfTMultiplier.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherCrcMonSfTMultiplier.setDescription('The value of tmnxPortEtherCrcMonSfTMultiplier specifies the tmnxPortEtherCrcMonSfThreshold multiplier value. The CRC SF error rate threshold is calculated as: tmnxPortEtherCrcMonSfTMultiplier * 10e-tmnxPortEtherCrcMonSfThreshold.')
tmnxPortEtherCrcMonWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherCrcMonWindowSize.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherCrcMonWindowSize.setDescription('The value of tmnxPortEtherCrcMonWindowSize specifies the size of the sliding window in seconds over which the tmnxPortEtherCrcMonSdThreshold and tmnxPortEtherCrcMonSfThreshold are applied.')
tmnxPortEtherCrcAlarmReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 39), TmnxPortEtherCrcMonReportStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEtherCrcAlarmReason.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherCrcAlarmReason.setDescription('The value of tmnxPortEtherCrcAlarmReason indicates the current status of the Ethernet CRC Monitored alarms on the port.')
tmnxPortEtherDownOnInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 40), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherDownOnInternalError.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherDownOnInternalError.setDescription("The value of tmnxPortEtherDownOnInternalError specifies whether or not the port is monitored for excessive internal MAC tx errors. When enabled, excess Internal MAC tx errors results in the tmnxPortOperStatus being set to 'outOfService (3)' and a tmnxEqPortEtherInternalAlarm notification trap.")
tmnxPortEtherMinFrameLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 4, 1, 41), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(64, 64), ValueRangeConstraint(68, 68), )).clone(64)).setUnits('Bytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortEtherMinFrameLength.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherMinFrameLength.setDescription('The value of tmnxPortEtherMinFrameLength specifies the minimum length of any frame transmitted out of the port.')
tmnxSonetTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5), )
if mibBuilder.loadTexts: tmnxSonetTable.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetTable.setDescription('The tmnxSonetTable has an entry for each packet over Sonet port on each IOM card in each chassis in the TMNX system.')
tmnxSonetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetEntry.setDescription("Each row entry represents a packet over Sonet port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. Before an IOM tmnxMDAEntry can be deleted from the tmnxMDATable, its supported tmnxPortEntry rows must be in the proper state for removal. The tmnxSonetEntry contains attributes that are unique to the 'sonet' TmnxPortType. It also contains attributes that are common to all sonet paths configured on a sonet port. The tmnxPortPortID for a sonet port includes a sonet path number in the lower bits. If the sonet path number is zero, '0', it represents a single (clear) sonet path on the port that uses the full bandwidth of the sonet port. All entries in this table have the sonet path number part of their tmnxPortPortID index value set to zero.")
tmnxSonetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oc3", 1), ("oc12", 2), ("oc48", 3), ("oc192", 4), ("oc768", 5), ("oc1", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSpeed.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetSpeed.setDescription('The rate of this optical facility.')
tmnxSonetClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTimed", 1), ("nodeTimed", 2))).clone('loopTimed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetClockSource.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetClockSource.setDescription("tmnxSonetClockSource configures the clock for transmitted data from either the internal clock ('nodeTimed') or from a clock recovered from the line's receive data stream ('loopTimed').")
tmnxSonetFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("sonet", 2), ("sdh", 3))).clone('sonet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetFraming.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetFraming.setDescription('The value of tmnxSonetFraming indicates the type of framing used on this interface.')
tmnxSonetReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 4), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12))).clone(namedValues=NamedValues(("loc", 1), ("lrdi", 3), ("lb2erSf", 7), ("slof", 8), ("slos", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetReportAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetReportAlarm.setDescription('The value of tmnxSonetReportAlarm determines when and if to generate tmnxEqPortSonetAlarm and tmnxEqPortSonetAlarmClear notifications for this port: loc(1) Reports a loss of clock which causes the operational state of the port to be downed. Set by default. lais(2) Reports line alarm indication signal errors. Not set by default. lrdi(3) Reports line remote defect initiation errors. LRDIs are caused by remote LOF, LOC, and LOS. Set by default. ss1f(4) Reports section synchronization failure as reported by the S1 byte. Not set by default. sb1err(5) Reports section B1 errors. Not set by default. lb2erSd(6) Reports line signal degradation BER errors. Not set by default. lb2erSf(7) Reports line signal failure BER errors. Set by default. slof(8) Reports section loss of frame errors. Set by default slos(9) Reports section loss of signal errors. Set by default. stxptr(10) Reports a section synchronization error on the transmit side. Indicates if there is a positive or negative justification count per channel. Not set by default. srxptr(11) Reports a section synchronization error on the receive side. Indicates if there is a positive or negative justification count per path. Not set by default. lrei(12) Reports a line error condition raised by the remote as a result of B1 errors received from this node. Not set by default. ')
tmnxSonetBerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 9)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetBerSdThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetBerSdThreshold.setDescription('The value of tmnxSonetBerSdThreshold specifies a bit error rate (BER) threshold used to determine when to send a tmnxEqPortSonetAlarm notification for a BER SD failure and tmnxEqPortSonetAlarmClear notification for a BER SD failure clear. tmnxSonetBerSdThreshold is the absolute value of the exponent of the rate expressed as 10e-n.')
tmnxSonetBerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 6)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetBerSfThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetBerSfThreshold.setDescription('The value of tmnxSonetBerSfThreshold specifies a bit error rate (BER) threshold used to determine when to send a tmnxEqPortSonetAlarm notification for a BER SF failure and tmnxEqPortSonetAlarmClear notification for a BER SF failure clear. tmnxSonetBerSdThreshold is the absolute value of the exponent of the rate expressed as 10e-n.')
tmnxSonetAps = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetAps.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetAps.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 8), TmnxPortAdminStatus().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsAdminStatus.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 9), TmnxPortOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsOperStatus.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAuthKey.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsAuthKey.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsNeighborAddr.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsNeighborAddr.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsAdvertiseInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 12), TimeInterval().clone(1000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseInterval.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseInterval.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsAdvertiseTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 13), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseTimeLeft.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsAdvertiseTimeLeft.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 14), TimeInterval().clone(3000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetApsHoldTime.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsHoldTime.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetApsHoldTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 15), TimeInterval()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetApsHoldTimeLeft.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetApsHoldTimeLeft.setDescription('Automatic Protection Switching (APS) is supported on 7x50 systems by the APS-MIB and TIMETRA-APS-MIB.')
tmnxSonetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("line", 1), ("internal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetLoopback.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetLoopback.setDescription('Activate a loopback on the SONET port. The SONET port must be in a shutdown state to activate any type of loopback.')
tmnxSonetReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 17), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetReportAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetReportAlarmStatus.setDescription('The bits in this object are used for indicating the alarms. The bits are explained as follows: loc(1) Indicates a loss of clock which causes the operational state of the port to be downed. lais(2) Indicates line alarm indication signal errors. lrdi(3) Indicates line remote defect indication errors. LRDIs are caused by remote LOF, LOC, and LOS. ss1f(4) Indicates section synchronization failure as reported by the S1 byte. sb1err(5) Indicates section B1 errors. lb2erSd(6) Indicates line signal degradation BER errors. lb2erSf(7) Indicates line signal failure BER errors. slof(8) Indicates section loss of frame errors. slos(9) Indicates section loss of signal errors. stxptr(10) Indicates a section synchronization error on the transmit side. Indicates if there is a positive or negative justification count per channel. srxptr(11) Indicates a section synchronization error on the receive side. Indicates if there is a positive or negative justification count per sonet path. lrei(12) Indicates a line error condition raised by the remote as a result of B1 errors received from this node. ')
tmnxSonetSectionTraceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("increment-z0", 1), ("byte", 2), ("string", 3))).clone('byte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSectionTraceMode.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetSectionTraceMode.setDescription("The tmnxSonetSectionTraceMode variable along with the tmnxSonetJ0String object determines the contents of the section trace bytes (j0/z0) in the SONET Section Header. If the mode is set to 'increment-z0', then the j0 byte is 0x01, and the z0 byte increments. If the mode is set to 'byte', then the j0 byte is the first octet of the tmnxSonetJ0String object and the z0 byte is 0xcc. If the mode is set to 'string', then the J0 byte is set to the 16 values in the tmnxSonetJ0String object and the z0 byte is 0xcc.")
tmnxSonetJ0String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="01")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetJ0String.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetJ0String.setDescription('The tmnxSonetJ0String is used with the tmnxSonetSectionTraceMode variable to determine the contents of the j0 byte in the SONET Section Header. If the tmnxSonetSectionTraceMode is increment-z0, this object is ignored. If the mode is byte, then the first octet of this object is used for the J0 byte. If the mode is string, then the 16 bytes in this object are used for the J0 byte. If set to less than 16 bytes it, will be padded out to 16 with zeros. The default value is 0x01 and 15 NULLs')
tmnxSonetMonS1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(204)).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonS1Byte.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetMonS1Byte.setDescription('The tmnxSonetMonS1Byte variable reports the Synchronization Status Message from the S1 byte in the Line Overhead Header. A value of 0x00 indicates unknown quality. A value of 0xF0 indicates `Do not use for synchronization`. Other values are documented in Telcordia GR253 and ITU G.707')
tmnxSonetMonJ0String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonJ0String.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetMonJ0String.setDescription('The tmnxSonetMonJ0String variable reports the contents of the j0 byte in the SONET Section Header.')
tmnxSonetMonK1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonK1Byte.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetMonK1Byte.setDescription('The tmnxSonetMonK1Byte variable reports the Automatic Protection Switching(APS) signalling status from the K1 byte in the SONET Line Overhead Header.')
tmnxSonetMonK2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetMonK2Byte.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetMonK2Byte.setDescription('The tmnxSonetMonK1Byte variable reports the Automatic Protection Switching(APS) signalling status from the K2 byte in the SONET Line Overhead Header.')
tmnxSonetSingleFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSingleFiber.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetSingleFiber.setDescription('tmnxSonetSingleFiber is used to enable/disable packet gathering and redirection of IP packets from a single fiber on RX port of the SONET interface and redistribute packets to other interfaces through either state routes or policy-based forwarding.')
tmnxSonetHoldTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(5)).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetHoldTimeUp.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetHoldTimeUp.setDescription('The value of tmnxSonetHoldTimeUp is used to configure the hold-timer for link up event dampening. This guards against reporting excessive interface transitions. This is implemented by not advertising subsequent transitions of the interface to upper layer protocols until the configured timer has expired. A value of zero (0) indicates that an up transition is reported immediately.')
tmnxSonetHoldTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('100s of milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetHoldTimeDown.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetHoldTimeDown.setDescription('The value of tmnxSonetHoldTimeDown is used to configure the hold-timer for link down event dampening. This guards against reporting excessive interface transitions. This is implemented by not advertising subsequent transitions of the interface to upper layer protocols until the configured timer has expired. A value of zero (0) indicates that a down transition is reported immediately.')
tmnxSonetSuppressLoOrderAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetSuppressLoOrderAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetSuppressLoOrderAlarm.setDescription('The value of tmnxSonetSuppressLoOrderAlarm specifies whether or not the lower order alarms on Sonet ports are suppressed.')
tmnxSonetTxDus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetTxDus.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetTxDus.setDescription('The value of tmnxSonetTxDus specifies whether or not the value 0xF (dus/dnu) is forced in the S1 overhead byte.')
tmnxSonetTxS1Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 5, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetTxS1Byte.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetTxS1Byte.setDescription('The value of tmnxSonetTxS1Byte indicates the transmitted S1 Byte.')
tmnxSonetPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6), )
if mibBuilder.loadTexts: tmnxSonetPathTable.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathTable.setDescription('The tmnxSonetPathTable has an entry for each sonet path configured in each packet over Sonet port on each IOM card in each chassis in the TMNX system.')
tmnxSonetPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetPathEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathEntry.setDescription("Each row entry represents a configured sonet path in a packet over Sonet port on a IOM card in a chassis in the system. The tmnxSonetPathEntry contains attributes that are unique to a sonet path of a 'sonet' TmnxPortType. The tmnxPortPortID for a sonet port includes a sonet path number in the lower bits. If the sonet path number is zero, '0', it represents a single (clear) sonet path on the port that uses the full bandwidth of the sonet port. Entries in this table that have the sonet path number part of their tmnxPortPortID index value set to zero cannot be created and deleted via SNMP SET operations. They are created by the SNMP agent when the corresponding entry in the tmnxSonetTable is created. Entries with non-zero sonet path numbers can be created and deleted via SNMP SET operations using tmnxSonetPathRowStatus. When a row is created in the tmnxSonetPathTable, the agent also creates a row with the same index values in the tmnxPortTable. In order to delete an entry, tmnxPortAdminStatus must first be set to 'outOfService'. When the tmnxSonetPathEntry is deleted, the agent also deletes the corresponding row in the tmnxPortTable.")
tmnxSonetPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathRowStatus.setDescription("tmnxSonetPathRowStatus controls the creation and deletion of row entries in the tmnxSonetPathTable. The tmnxPortPortID for a sonet port includes a sonet path number in the lower bits. If the sonet path number is zero, '0', it represents a single (clear) sonet path on the port that uses the full bandwidth of the sonet port. Entries in this table that have the sonet path number part of their tmnxPortPortID index value set to zero cannot be created and deleted via SNMP SET operations. They are created by the SNMP agent when the corresponding entry in the tmnxSonetTable is created. Entries with non-zero sonet path numbers can be created and deleted via SNMP SET operations. When a row is created in the tmnxSonetPathTable, the agent also creates a row with the same index values in the tmnxPortTable. In order to delete an entry, tmnxPortAdminStatus must first be set to 'outOfService'. When the tmnxSonetPathEntry is deleted, the agent also deletes the corresponding row in the tmnxPortTable for this sonet path port.")
tmnxSonetPathLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathLastChangeTime.setDescription('The tmnxSonetPathLastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxSonetPathEntry row for this sonet path.')
tmnxSonetPathMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathMTU.setDescription('The size of the largest packet which can be sent/received on the sonet path, specified in octets. For paths that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the sonet path. Setting tmnxSonetPathMTU to a value of zero (0), causes the agent to recalculate the default MTU size which can vary based on the current setting of tmnxPortMode and tmnxPortEncapType variables. Some typical default values are: 1522 with mode access and encap-type bcp-null 1526 with mode access and encap-type bcp-dot1q 1502 with mode access and encap-type ipcp 1506 with mode access and encap-type mplscp 1524 with mode access and encap-type atm 9208 with mode network ')
tmnxSonetPathScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathScramble.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathScramble.setDescription("If the tmnxSonetPathScramble variable is set to 'true', SONET (SDH) payload scrambling is enabled on this sonet path. Both ends of the connection must use the same scrambling algorithm. If tmnxSonetPathScramble is set to 'false', scrambling is disabled. The default value for non-ATM paths is 'false'. The default value for ATM paths is 'true' If the value of tmnxSonetPathC2Byte is set to the default for the currently configured tmnxSonetPathScramble, then changing the value of tmnxSonetPathScramble for non-ATM paths causes a change to tmnxSonetPathC2Byte to a default value for a new scrambling option. The default values are as follows: scrambled non-ATM sonet/sdh path - C2 Byte value is 0x16 unscrambled non-ATM sonet/sdh path - C2 Byte value is 0xCF")
tmnxSonetPathC2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathC2Byte.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathC2Byte.setDescription("The tmnxSonetPathC2Byte variable is used configure the value used in the SONET/SDH C2 header byte. For paths on an MDA that does not support channelization: Setting C2 equal to 0x16 indicates scrambled sonet. Setting C2 equal to 0xCF indicates unscrambled sonet. Setting C2 equal to 0x13 indicates ATM. For paths on an MDA that supports channelization, the default value is based on the value of tmnxMDAMaxChannelization. For 'pdhDs3' or 'pdhE3' channelization, the default value is 0x04. Setting tmnxSonetPathC2Byte to a value of zero(0) causes the agent to assign the default value to this object.")
tmnxSonetPathJ1String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathJ1String.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathJ1String.setDescription("The tmnxSonetPathJ1String variable is used to configure the sonet path trace string to be sent in the J1 Path Overhead bytes. The bytes must be printable ASCII. If the string is less than 62 bytes, it will be padded with NULLs. For SONET framing, an additional CR (0x0D) / LF (0x0A) pair will be added by the driver. For SDH framing only 16 bytes are sent in the J1 bytes. The driver will set the MSB of the first byte, and put the first 15 bytes of the user configured string as the following bytes. The driver will set the CRC-7 of the 16 bytes into the other 7 bits of the first byte. The default value is `Alcatel 7x50 SR`. Setting a 1-byte long string containing 0xFF will restore the default. Setting the string 'zeros' will send all-zeros (ASCII NULL characters without CR/LF or CRC-7)in the J1 bytes.")
tmnxSonetPathCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc32')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathCRC.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathCRC.setDescription("The value of tmnxSonetPathCRC variable indicates the precision of the cyclic redundancy check. A value of 'crc16' is a 16-bit CRC calculation. A value of 'crc32' is a 32-bit CRC calculation. 32-bit CRC increases the error detection ability, but it also adds some performance overhead. For paths with encapsulation set to ATM the default and only supported value is crc32 and applies to AAL5 CRC calculations on that path.")
tmnxSonetPathOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 8), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathOperMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathOperMTU.setDescription('The negotiated size of the largest packet which can be sent on the sonet path, specified in octets. For sonet paths that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the sonet path.')
tmnxSonetPathOperMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathOperMRU.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathOperMRU.setDescription('The negotiated size of the largest packet that can be received on the sonet path, specified in octets.')
tmnxSonetPathReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 10), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8))).clone(namedValues=NamedValues(("plop", 2), ("pplm", 5), ("puneq", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathReportAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathReportAlarm.setDescription("The value of tmnxSonetPathReportAlarm determines when and if to generate tmnxEqPortSonetPathAlarm and tmnxEqPortSonetPathAlarmClear notifications for this port: pais(1) Reports path alarm indication signal errors. Not set by default. plop(2) Reports path loss of pointer (per tributary) errors. Set by default. prdi(3) Reports path remote defect indication errors. Not set by default. pb3err(4) Reports path B3 errors. Not set by default. pplm(5) Reports a path payload mismatch. As a result the path will be operationally downed. Set by default. prei(6) Reports a path error condition raised by the remote as a result of B3 errors received from this node. Not set by default. puneq(7) Reports unequipped path errors. Set by default. plcd(8) Reports path loss of codegroup delineation error. It is applicable only when the value of tmnxPortEtherXGigMode is set to 'wan'. Not set by default. ")
tmnxSonetPathAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathAcctPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathAcctPolicyId.setDescription('The value of the accounting policy must be defined prior to associating the policy with the sonet path. Accounting policies can only be associated with network sonet path. A non-zero value indicates the tmnxLogApPolicyId index identifying the policy entry in the tmnxLogApTable from the TIMETRA-LOG-MIB which is associated with this port. A zero value indicates that there is no accounting policy associated with this port')
tmnxSonetPathCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathCollectStats.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathCollectStats.setDescription('Enable/disable the collection of accounting and statistical data for the network sonet path. When applying accounting policies the data by default will be collected in the appropriate records and written to the designated billing file. When the value is set to false, the statistics are still accumulated by the IOM cards, however, the CPU will not obtain the results and write them to the billing file.')
tmnxSonetPathReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 13), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathReportAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathReportAlarmStatus.setDescription("The bits in this object are used for indicating the alarms. The bits are explained as follows: pais(1) Indicates path alarm indication signal errors. plop(2) Indicates path loss of pointer (per tributary) errors. prdi(3) Indicates path remote defect indication errors. pb3err(4) Indicates path B3 errors. pplm(5) Indicates a path payload mismatch. prei(6) Indicates a path error condition raised by the remote as a result of B3 errors received from this node. puneq(7) Indicates a far-end unequipped error. plcd(8) Indicates a path loss of codegroup delineation error. It is applicable only when the value of tmnxPortEtherXGigMode is set to 'wan'. Not set by default. ")
tmnxSonetPathMonC2Byte = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathMonC2Byte.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathMonC2Byte.setDescription('The tmnxSonetPathC2Byte variable reports the value in the SONET/SDH C2 header byte.')
tmnxSonetPathMonJ1String = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetPathMonJ1String.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathMonJ1String.setDescription('The tmnxSonetPathJ1String variable reports the sonet path trace string received in the J1 Path Overhead bytes.')
tmnxSonetPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2), ("vtg", 3), ("tug-2", 4), ("tug-3", 5))).clone('ds3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathType.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxSonetPathType.setDescription('tmnxSonetPathType specifies if the associated SONET/SDH Path is an asynchronous circuit, a virtual tributary group or a tributary unit group. ds3 - Configures the port or channel as service access(ds3) e3 - Configures the port or channel as service access(e3) vtg - Configures the path as a virtual tributary group. tug-2 - Configures the path as a tributary unit group. tug-3 - Configures the port or channel for transport network use.')
tmnxSonetPathChildType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 6, 1, 17), TmnxMDAChanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxSonetPathChildType.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetPathChildType.setDescription('tmnxSonetPathChildType is used to configure the type of this path. Some typical default values are: pdhDs3 for STS-1 paths pdhE3 for TU3 paths pdhE1 for VT2 paths pdhDs1 for VT15 paths Examples of valid child path types are sonetSts3, sdhTug3, pdhDs3, pdhE3, sonetVt15, sonetVt2, pdhDs1 and pdhE1.')
tmnxPortTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7), )
if mibBuilder.loadTexts: tmnxPortTypeTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTypeTable.setDescription('The Port type table has an entry for each Alcatel-Lucent SROS series port model.')
tmnxPortTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxPortTypeIndex"))
if mibBuilder.loadTexts: tmnxPortTypeEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTypeEntry.setDescription('Each row entry represents an Alcatel-Lucent SROS series port model. Rows in this table are created by the agent at initialization and cannot be created or destroyed by SNMP Get or Set requests.')
tmnxPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 1), TmnxPortType())
if mibBuilder.loadTexts: tmnxPortTypeIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTypeIndex.setDescription('The unique index value which identifies this type of Alcatel-Lucent SROS series port model.')
tmnxPortTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTypeName.setDescription('The administrative name that identifies this type of Alcatel-Lucent SROS series port model. This name string may be used in CLI commands to specify a particular Port model type.')
tmnxPortTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTypeDescription.setDescription('A detailed description of this Alcatel-Lucent SROS series port model.')
tmnxPortTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortTypeStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTypeStatus.setDescription("When tmnxPortTypeStatus has a value of 'true' it indicates that this port model is supported in this revision of the management software. When it has a value of 'false' there is no support.")
tmnxPortConnectTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8), )
if mibBuilder.loadTexts: tmnxPortConnectTypeTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortConnectTypeTable.setDescription('The Port Connector type table has an entry for each Alcatel-Lucent SROS series port connector model.')
tmnxPortConnectTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxPortConnectTypeIndex"))
if mibBuilder.loadTexts: tmnxPortConnectTypeEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortConnectTypeEntry.setDescription('Each row entry represents an Alcatel-Lucent SROS series port Connector model. Rows in this table are created by the agent at initialization and cannot be created or destroyed by SNMP Get or Set requests.')
tmnxPortConnectTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 1), TmnxPortConnectorType())
if mibBuilder.loadTexts: tmnxPortConnectTypeIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortConnectTypeIndex.setDescription('The unique index value which identifies this type of Alcatel-Lucent SROS series port connector model.')
tmnxPortConnectTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortConnectTypeName.setDescription('The administrative name that identifies this type of Alcatel-Lucent SROS series port connector model. This name string may be used in CLI commands to specify a particular port connector model type.')
tmnxPortConnectTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 3), TItemDescription()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxPortConnectTypeDescription.setDescription('A detailed description of this Alcatel-Lucent SROS series port connector model.')
tmnxPortConnectTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortConnectTypeStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortConnectTypeStatus.setDescription("When tmnxPortConnectTypeStatus has a value of 'true' it indicates that this port connector model is supported in this revision of the chassis management software. When it has a value of 'false' there is no support.")
tmnxPortFCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9), )
if mibBuilder.loadTexts: tmnxPortFCStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsTable.setDescription('The Network Port FC Stats table has an entry for each forwarding class defined on each network port.')
tmnxPortFCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortFCStatsIndex"))
if mibBuilder.loadTexts: tmnxPortFCStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEntry.setDescription('Each row entry represents a set of ingress and egress packet and octet statistics for the given network port and forwarding class. Rows in this table are created by the agent when the network port is provisioned and cannot be created or destroyed by SNMP Get or Set requests.')
tmnxPortFCStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 1), TFCName())
if mibBuilder.loadTexts: tmnxPortFCStatsIndex.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIndex.setDescription('The forwarding class associated with these stats on this network port.')
tmnxPortFCStatsIngFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfPkts.setDescription('The number of in-profile packets (rate below CIR) forwarded by the ingress Qchip.')
tmnxPortFCStatsIngFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfPkts.setDescription('The number of out-of-profile packets (rate above CIR) forwarded by the ingress Qchip.')
tmnxPortFCStatsIngFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdInProfOcts.setDescription('The number of in-profile octets (rate below CIR) forwarded by the ingress Qchip.')
tmnxPortFCStatsIngFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngFwdOutProfOcts.setDescription('The number of out-of-profile octets (rate above CIR) forwarded by the ingress Qchip.')
tmnxPortFCStatsIngDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfPkts.setDescription('The number of in-profile packets (rate below CIR) dropped by the ingress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortFCStatsIngDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfPkts.setDescription('The number of out-of-profile packets (rate above CIR) dropped by the ingress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortFCStatsIngDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroInProfOcts.setDescription('The number of in-profile octets (rate below CIR) dropped by the ingress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortFCStatsIngDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsIngDroOutProfOcts.setDescription('The number of out-of-profile octets (rate above CIR) dropped by the ingress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortFCStatsEgrFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfPkts.setDescription('The number of in-profile packets (rate below CIR) forwarded by the egress Qchip.')
tmnxPortFCStatsEgrFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfPkts.setDescription('The number of out-of-profile packets (rate above CIR) forwarded by the egress Qchip.')
tmnxPortFCStatsEgrFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdInProfOcts.setDescription('The number of in-profile octets (rate below CIR) forwarded by the egress Qchip.')
tmnxPortFCStatsEgrFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrFwdOutProfOcts.setDescription('The number of out-of-profile octets (rate above CIR) forwarded by the egress Qchip.')
tmnxPortFCStatsEgrDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfPkts.setDescription('The number of in-profile packets (rate below CIR) dropped by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortFCStatsEgrDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfPkts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfPkts.setDescription('The number of out-of-profile packets (rate above CIR) dropped by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortFCStatsEgrDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroInProfOcts.setDescription('The number of in-profile octets (rate below CIR) dropped by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortFCStatsEgrDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfOcts.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortFCStatsEgrDroOutProfOcts.setDescription('The number of out-of-profile octets (rate above CIR) dropped by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxDS3Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10), )
if mibBuilder.loadTexts: tmnxDS3Table.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3Table.setDescription('The tmnxDS3Table has an entry for a DS3 physical port.')
tmnxDS3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS3Entry.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3Entry.setDescription("Each row entry represents a physical DS3 port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. Entries in this table will be created automatically when the tmnxMDAAssignedType object is set to the DS3 MDA type The tmnxDS3Entry contains attributes that are unique to the 'ds3e3' TmnxPortType. The tmnxPortPortID contains the slot, mda and port numbers encoded into it. For each tmnxDS3Entry, there will be a corresponding entry in the tmnxPortTable and the ifTable.")
tmnxDS3Buildout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3Buildout.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3Buildout.setDescription('tmnxDS3Buildout configures the T3 line buildout. A T3 port has two settings for the T3 line buildout: a short setting, which is less than 225 feet, and a long setting, which is greater than 225 feet. This object applies to copper-cable-based T3 ports only.')
tmnxDS3LastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3LastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3LastChangeTime.setDescription('The tmnxDS3LastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxDS3Entry row for this port.')
tmnxDS3Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2))).clone('ds3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3Type.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3Type.setDescription("tmnxDS3Type configures the type of the physical port to 'ds3' or 'e3'.")
tmnxDS3ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11), )
if mibBuilder.loadTexts: tmnxDS3ChannelTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelTable.setDescription('The tmnxDS3ChannelTable has an entry for a DS3 channel.')
tmnxDS3ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS3ChannelEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelEntry.setDescription('Each row entry represents a DS3 channel. Entries can be created and deleted via SNMP SET operations. The tmnxDS3ChannelEntry contains attributes that are applicable to a DS3 channel which can belong to the DS3 physical port or belong to a container on a sonet path. The tmnxPortPortID contains the slot, mda and port numbers encoded into it. For each tmnxDS3ChannelEntry, there will be a corresponding entry in the tmnxPortTable and the ifTable.')
tmnxDS3ChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelRowStatus.setDescription('tmnxDS3ChannelRowStatus controls the creation and deletion of row entries in the tmnxDS3ChannelTable. For row creation, the manager has to first calculate the tmnxPortPortID based on the TiMOS encoding scheme.')
tmnxDS3ChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelType.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelType.setDescription('The value of tmnxDS3ChannelType indicates whether the channel is in DS3 or E3 mode.')
tmnxDS3ChannelFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cbit", 1), ("m23", 2), ("g751", 3), ("g832", 4), ("e3-unframed", 5), ("ds3-unframed", 6))).clone('cbit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelFraming.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelFraming.setDescription("The value of tmnxDS3ChannelFraming indicates the type of framing associated with the DS3 channel. If tmnxDS3ChannelType is set to 'ds3', the default framing is 'cbit'. If tmnxDS3ChannelType is set to 'e3', the default framing is 'g751'.")
tmnxDS3ChannelClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 4), TmnxDSXClockSource().clone('loopTimed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelClockSource.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelClockSource.setDescription("tmnxDS3ChannelClockSource configures the clock for transmitted data from either the internal clock ('nodeTimed'), or from a clock recovered from the line's receive data stream ('loopTimed').")
tmnxDS3ChannelChannelized = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ds1", 2), ("e1", 3), ("j1", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelChannelized.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelChannelized.setDescription("tmnxDS3ChannelChannelized is used to create sub-channels of type 'ds1' or 'e1' or 'j1' on the interface. Setting the value to 'none' removes the sub-channels on the interface.")
tmnxDS3ChannelSubrateCSUMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notUsed", 0), ("digital-link", 1))).clone('notUsed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelSubrateCSUMode.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelSubrateCSUMode.setDescription("tmnxDS3ChannelSubrateCSUMode configures the channel service unit (CSU) compatibility mode to interoperate with existing DS3 subrate standards. This configuration applies only for a non-channelized DS3. Changing the value of tmnxDS3ChannelSubrateCSUMode to notUsed resets the value of tmnxDS3ChannelScramble to 'false'. Changing the value of tmnxDS3ChannelSubrateCSUMode resets the value of tmnxDS3ChannelSubrate to default for the mode if tmnxDS3ChannelSubrate is not provided.")
tmnxDS3ChannelSubrate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelSubrate.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelSubrate.setDescription('tmnxDS3ChannelSubrate configures the subrate step. tmnxDS3ChannelSubrate multiplied by the granularity for a particular mode as defined by tmnxDS3ChannelSubrateCSUMode gives the absoulte subrate in kbps. ---------------------------------------------------------------------- Subrate CSU Mode|Granularity|Default |Range |Subrate speed range ----------------------------------------------------------`----------- notUsed | N/A | 0 | 0 |N/A digital-link | 301 kbps | 1 | 1 to 147 |301 kbps to 44.2 mbps ----------------------------------------------------------------------')
tmnxDS3ChannelIdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 8), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelIdleCycleFlags.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelIdleCycleFlags.setDescription("tmnxDS3ChannelIdleCycleFlags configures the value that the DS3 port transmits during idle cycle. The default value applies to HDLC channels only. For ATM channels the object does not really apply so a default value of 'none' is used and cannot be changed.")
tmnxDS3ChannelLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 9), TmnxDS3Loopback().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelLoopback.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelLoopback.setDescription("tmnxDS3ChannelLoopback is used to put the channel into a loopback mode. The value of tmnxPortAdminStatus should be set to 'outOfService' in order for the loopback to be enabled. A 'line' loopback loops frames received on this port back to the remote system. A 'internal' loopback loops the frames from the local system back at the framer. When the value is set to 'remote', a signal is sent to the remote system to provide a line loopback.")
tmnxDS3ChannelBitErrorInsertionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBitErrorInsertionRate.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelBitErrorInsertionRate.setDescription('tmnxDS3ChannelBitErrorInsertionRate is used to insert bit errors for a BERT test. The number of error corresponds to 10^(-rate). A rate of 7 will cause an error rate of 10^(-7), or 1 error in every 10 million bits transmitted. If the value is set to 0, it disables the insertion of bit errors into the BERT. Change in this value while the test is running is accepted but does not take effect until the test gets restarted.')
tmnxDS3ChannelBERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 11), TmnxDSXBertPattern().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTPattern.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelBERTPattern.setDescription("tmnxDS3ChannelBERTPattern indicates the pattern used for the Bit Error Rate Test (BERT). The value of tmnxDS3ChannelBERTDuration indicates the duration of the test. Setting the value of this object to 'none' terminates the test.")
tmnxDS3ChannelBERTDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTDuration.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelBERTDuration.setDescription('tmnxDS3ChannelBERTDuration is used to set the duration of the BERT test.')
tmnxDS3ChannelMDLEicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLEicString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLEicString.setDescription('tmnxDS3ChannelMDLEicString configures the Equipment ID Code(EIC) of the Message Data Link (MDL).')
tmnxDS3ChannelMDLLicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLLicString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLLicString.setDescription('tmnxDS3ChannelMDLLicString configures the Location ID Code(LIC) of the Message Data Link (MDL).')
tmnxDS3ChannelMDLFicString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLFicString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLFicString.setDescription('tmnxDS3ChannelMDLFicString configures the Frame ID Code(FIC) of the Message Data Link (MDL).')
tmnxDS3ChannelMDLUnitString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLUnitString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLUnitString.setDescription('tmnxDS3ChannelMDLUnitString configures the Unit ID Code(UIC) of the Message Data Link (MDL).')
tmnxDS3ChannelMDLPfiString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPfiString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPfiString.setDescription('tmnxDS3ChannelMDLPfiString configures the Facility ID Code sent in the Message Data Link (MDL) Path message.')
tmnxDS3ChannelMDLPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPortString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLPortString.setDescription('tmnxDS3ChannelMDLPortString configures the port number string sent in the Message Data Link (MDL) idle signal message.')
tmnxDS3ChannelMDLGenString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLGenString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLGenString.setDescription('tmnxDS3ChannelMDLGenString configures the generator number string sent in the Message Data Link (MDL) test signal message.')
tmnxDS3ChannelMDLMessageType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 20), Bits().clone(namedValues=NamedValues(("none", 0), ("ds3Path", 1), ("idleSignal", 2), ("testSignal", 3))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMessageType.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMessageType.setDescription("tmnxDS3ChannelMDLMessageType configures the type of MDL message that is transmitted over the DS3 interface. If the value of this object is set to 'none', MDL messages are not transmitted. ds3Path(0) - Enables transmission of the MDL path message. An MDL path message, as defined by ANSI T1.107, is distinguished from idle and test signal messages in that it contains a facility identification code as its final data element. idleSignal(1) - Enables transmission of the MDL idle signal message. An MDL idle signal message, as defined by ANSI T1.107, is distinguished from path and test signal messages in that it contains a port number as its final data element. testSignal(2) - Enables transmission of the MDL test signal message. An MDL test signal message, as defined by ANSI T1.107, is distinguished from path and idle signal messages in that it contains a generator number as its final data element.")
tmnxDS3ChannelFEACLoopRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelFEACLoopRespond.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelFEACLoopRespond.setDescription("When tmnxDS3ChannelFEACLoopRespond has a value of 'true', the channel is enabled to respond to remote loop signals. When it has a value of 'false' the port will not respond.")
tmnxDS3ChannelCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelCRC.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelCRC.setDescription("The value of tmnxDS3ChannelCRC variable indicates the precision of the cyclic redundancy check. A value of 'crc16' is a 16-bit CRC calculation. A value of 'crc32' is a 32-bit CRC calculation. 32-bit CRC increases the error detection ability, but it also adds some performance overhead. For ATM channels, crc32 is the default and the only value supported and applies to AAL5 CRC calculation on that channel.")
tmnxDS3ChannelMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMTU.setDescription('The size of the largest packet which can be sent/received on the port, specified in octets. For ports that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the sonet path. Setting tmnxDS3ChannelMTU to a value of zero (0), causes the agent to recalculate the default MTU size which can vary based on the current setting of tmnxPortMode and tmnxPortEncapType variables. Some typical default values are: 1522 with mode access and encap-type bcp-null 1526 with mode access and encap-type bcp-dot1q 1502 with mode access and encap-type ipcp 4474 with mode access and encap-type frame-relay 1524 with mode access and encap-type atm 2092 with mode access and encap-type cem ')
tmnxDS3ChannelOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 24), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelOperMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelOperMTU.setDescription('The negotiated size of the largest packet which can be sent on the channel, specified in octets. For channels that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent.')
tmnxDS3ChannelReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 25), TmnxDSXReportAlarm().clone(namedValues=NamedValues(("ais", 1), ("los", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarm.setDescription('The value of tmnxDS3ChannelReportAlarm determines when and if to generate notifications for this channel: ais - Reports alarm indication signal errors. ais alarms are issued by default. los - Reports loss of signal errors. los alarms are issued by default. oof - Reports out-of-frame errors. oof alarms are not issued by default. rai - Reports resource availability indicator events. rai alarms are not issued by default. looped - Reports if the far end has forced the near end to loopback. looped alarms are not issued by default. berSd - Reports DS3/E3 signal degradation bit errors. berSd alarms are not issued by default. berSf - Reports DS3/E3 signal failure bit errors. berSf alarms are not issued by default')
tmnxDS3ChannelReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 26), TmnxDSXReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelReportAlarmStatus.setDescription('The value of tmnxDS3ChannelReportAlarmStatus indicates the current alarms on this port.')
tmnxDS3ChannelLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelLastChangeTime.setDescription('The tmnxDS3ChannelLastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxDS3ChannelEntry row for this port.')
tmnxDS3ChannelInFEACLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelInFEACLoop.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelInFEACLoop.setDescription('tmnxDS3ChannelInFEACLoop indicates whether the remote end has put this channel in FEAC(Far End Alarm Control) loopback.')
tmnxDS3ChannelMDLMonPortString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonPortString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonPortString.setDescription('tmnxDS3ChannelMDLMonPortString indicates the port number string received in the Message Data Link (MDL) idle signal message.')
tmnxDS3ChannelMDLMonGenString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonGenString.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelMDLMonGenString.setDescription('tmnxDS3ChannelMDLMonGenString indicates the generator number string received in the Message Data Link (MDL) test signal message.')
tmnxDS3ChannelBERTOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 31), TmnxDSXBertOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTOperStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelBERTOperStatus.setDescription('tmnxDS3ChannelBERTOperStatus indicates the status of the BERT test as specified by TmnxDSXBertOperStatus.')
tmnxDS3ChannelBERTSynched = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 32), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTSynched.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelBERTSynched.setDescription("tmnxDS3ChannelBERTSynched is the number of seconds for which the BERT hardware was synchronized. This will be less than or equal to the duration of the last BERT test. It is valid only after tmnxDS3ChannelBERTOperStatus transitioned from 'active' to 'idle' the last time BERT was activated.")
tmnxDS3ChannelBERTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelBERTErrors.setDescription("tmnxDS3ChannelBERTErrors is the number of bit errors detected during the last BERT test. It is valid only after tmnxDS3ChannelBERTOperStatus transitioned from 'active' to 'idle' the last time BERT was activated.")
tmnxDS3ChannelBERTTotalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelBERTTotalBits.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelBERTTotalBits.setDescription("tmnxDS3ChannelBERTTotalBits is the total number of bits received during the last BERT test. Bits are only counted when the BERT hardware is synchronized. It is valid only after tmnxDS3ChannelBERTOperStatus transitioned from 'active' to 'idle' the last time BERT was activated.")
tmnxDS3ChannelScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 35), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelScramble.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelScramble.setDescription("When tmnxDS3ChannelScramble indicates whether scrambling is enabled on this channel. Both ends of the connection must use the same scrambling algorithm. The default value is 'true' if the tmnxPortEncapType is atmEncap for this channel and indicates ATM payload scrambling; otherwise (tmnxPortEncapType is not atmEncap) the default is 'false' and can only be changed to true if the value of tmnxDS3ChannelSubrateCSUMode is digital-link (1)")
tmnxDS3ChannelAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelAcctPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelAcctPolicyId.setDescription('The value of tmnxDS3ChannelAcctPolicyId specifies an existing accounting policy to use for the ds3 channel. Accounting policies can only be associated with network ports or channels. A non-zero value indicates the tmnxLogApPolicyId index identifying the policy entry in the tmnxLogApTable from the TIMETRA-LOG-MIB which is associated with this channel. A zero value indicates that there is no accounting policy associated with this channel')
tmnxDS3ChannelCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 37), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS3ChannelCollectStats.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelCollectStats.setDescription('The value of tmnxDS3ChannelCollectStats specifies whether or not the collection of accounting and statistical data for the network ds3 channel is collected. When the value is set to false, the statistics are still accumulated by the IOM cards, however, the CPM will not obtain the results and write them to the billing file. When applying accounting policies the data by default will be collected in the appropriate records and written to the designated billing file.')
tmnxDS3ChannelClockSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 38), TmnxDSXClockSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelClockSyncState.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelClockSyncState.setDescription("The value of tmnxDS3ChannelClockSyncState indicates the current clock synchronization state if tmnxDS3ChannelClockSource is 'adaptive' or 'differential'.")
tmnxDS3ChannelClockMasterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 11, 1, 39), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS3ChannelClockMasterPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3ChannelClockMasterPortId.setDescription("The value of tmnxDS3ChannelClockMasterPortId indicates the current clock synchronization master port id if tmnxDS3ChannelClockSource is 'adaptive' or 'differential'.")
tmnxDS1Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12), )
if mibBuilder.loadTexts: tmnxDS1Table.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1Table.setDescription('The tmnxDS1Table has an entry for each DS1 channel.')
tmnxDS1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS1Entry.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1Entry.setDescription("Each row entry represents a DS1 channel on a IOM card in a chassis in the system. DS1 channel entries for DS3 ports cannot be created and deleted via SNMP SET operations. Entries in this table will be created automatically when tmnxDS3ChannelChannelized is set to 'true'. DS1 channel entries for DS1 ports can be created and deleted via SNMP SET operations. For each tmnxDS1Entry, there will be a corresponding entry in the tmnxPortTable and the ifTable.")
tmnxDS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1RowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1RowStatus.setDescription('tmnxDS1RowStatus controls the creation and deletion of row entries in the tmnxDS1Table. For row creation, the manager has to first calculate the tmnxPortPortID based on the TiMOS encoding scheme.')
tmnxDS1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("e1", 2), ("j1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1Type.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1Type.setDescription('The value of tmnxDS1Type indicates whether the DS1 channel is in DS1, E1 or J1 mode.')
tmnxDS1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2), ("g704-no-crc", 3), ("g704", 4), ("e1-unframed", 5), ("ds1-unframed", 6))).clone('esf')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1Framing.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1Framing.setDescription("The value of tmnxDS1Framing indicates the type of framing associated with the channel: esf ESF (extended super frame) mode for T1 interfaces. sf SF (super frame) mode for T1 interfaces. g704 G.704 framing format for E1 interfaces. g704-no-crc4 G.704 framing with no CRC4 for E1 interfaces. e1-unframed E1 Unframed (G.703) mode for E1 interfaces. ds1-unframed Unframed mode for T1 interfaces. If tmnxDS1Type is set to 'ds1', the default framing is 'esf'. If tmnxDS1Type is set to 'e1', the default framing is 'g704'. Changing the value of tmnxDS1Framing resets the values of tmnxDS1BerSdThreshold and tmnxDS1BerSfThreshold to defaults and turns off reporting of berSd and berSf alarms in tmnxDS1ReportAlarm.")
tmnxDS1IdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 4), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1IdleCycleFlags.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxDS1IdleCycleFlags.setDescription('tmnxDS1IdleCycleFlags configures the value that the DS1 channel transmits during idle cycle.')
tmnxDS1Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 5), TmnxDS1Loopback().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1Loopback.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1Loopback.setDescription("tmnxDS1Loopback is used to put the channel into a loopback mode. The value of tmnxPortAdminStatus should be set to 'outOfService' in order for the loopback to be enabled. A 'line' loopback loops frames received on this port back to the remote system. A 'internal' loopback loops frames from the local system back at the framer. A 'fdlAnsi' requests loopback of type FDL ANSI T1.403. This is valid with tmnxDS1Framing set to 'esf' framing. A 'fdlBellcore' requests loopback of type FDL Bellcore TR-TSY-000312. This is valid with tmnxDS1Framing set to 'esf'. A 'inbandAnsi' requests loopback of type inband ANSI T1.403. This is valid with tmnxDS1Framing set to 'sf'.")
tmnxDS1InvertData = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1InvertData.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1InvertData.setDescription("Setting tmnxDS1InvertData to 'true' causes all data bits to be inverted, to guarantee ones density. It is typically used with AMI line encoding.")
tmnxDS1BitErrorInsertionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BitErrorInsertionRate.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BitErrorInsertionRate.setDescription('tmnxDS1BitErrorInsertionRate is used to insert bit errors for a BERT test. The number of error corresponds to 10^(-rate). A rate of 7 will cause an error rate of 10^(-7), or 1 error in every 10 million bits transmitted. If the value is set to 0, disables the insertion of bit errors into the BERT. Change in this value while the test is running is accepted but does not take effect until the test gets restarted.')
tmnxDS1BERTPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 8), TmnxDSXBertPattern().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BERTPattern.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BERTPattern.setDescription("tmnxDS1BERTPattern object indicates the pattern used for the Bit Error Rate Test (BERT). The value of tmnxDS1BERTDuration indicates the duration of the test. Setting the value to 'none' terminates the test.")
tmnxDS1BERTDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BERTDuration.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BERTDuration.setDescription('tmnxDS1BERTDuration is used to set the duration of the BERT test.')
tmnxDS1ReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 10), TmnxDSXReportAlarm().clone(namedValues=NamedValues(("ais", 1), ("los", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1ReportAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1ReportAlarm.setDescription('The value of tmnxDS1ReportAlarm determines when and if to generate notifications for this channel: ais - Reports alarm indication signal errors. ais alarms are issued by default. los - Reports loss of signal errors. los alarms are issued by default. oof - Reports out-of-frame errors. oof alarms are not issued by default. rai - Reports resource availability indicator events. rai alarms are not issued by default. looped - Reports if the far end has forced the near end to loopback. looped alarms are not issued by default. berSd - Reports DS1/E1/J1 signal degradation bit errors. berSd alarms are not issued by default. berSf - Reports DS1/E1/J1 signal failure bit errors. berSf alarms are not issued by default')
tmnxDS1ReportAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 11), TmnxDSXReportAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ReportAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1ReportAlarmStatus.setDescription('The value of tmnxDS1ReportAlarmStatus indicates the current alarms on this channel.')
tmnxDS1LastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1LastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1LastChangeTime.setDescription('The tmnxDS1LastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxDS1Entry row for this channel.')
tmnxDS1ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 13), TmnxDSXClockSource().clone('loopTimed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1ClockSource.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1ClockSource.setDescription("tmnxDS1ClockSource configures the clock for transmitted data from either the internal clock ('nodeTimed'), or from a clock recovered from the line's receive data stream ('loopTimed'), or recovered adaptively from the rate at which the data that is received and not from the physical layer ('adaptive'), or recovered from the differential timestamp in the RTP header ('differential').")
tmnxDS1BERTOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 14), TmnxDSXBertOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTOperStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BERTOperStatus.setDescription('tmnxDS1BERTOperStatus indicates the status of the BERT test as specified by TmnxDSXBertOperStatus.')
tmnxDS1BERTSynched = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTSynched.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BERTSynched.setDescription("tmnxDS1BERTSynched is the number of seconds for which the BERT hardware was synchronized. This will be less than or equal to the duration of the last BERT test. It is valid only after tmnxDS1BERTOperStatus transitioned from 'active' to 'idle' the last time BERT was activated.")
tmnxDS1BERTErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTErrors.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BERTErrors.setDescription("tmnxDS1BERTErrors is the number of bit errors detected during the last BERT test. It is valid only after tmnxDS1BERTOperStatus transitioned from 'active' to 'idle' the last time BERT was activated.")
tmnxDS1BERTTotalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1BERTTotalBits.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BERTTotalBits.setDescription("tmnxDS1BERTTotalBits is the total number of bits received during the last BERT test. Bits are only counted when the BERT hardware is synchronized. It is valid only after tmnxDS1BERTOperStatus transitioned from 'active' to 'idle' the last time BERT was activated.")
tmnxDS1RemoteLoopRespond = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1RemoteLoopRespond.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1RemoteLoopRespond.setDescription("When tmnxDS1RemoteLoopRespond has a value of 'true', the channel is enabled to respond to remote loop signals. When it has a value of 'false' the port will not respond.")
tmnxDS1InRemoteLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1InRemoteLoop.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1InRemoteLoop.setDescription('tmnxDS1InRemoteLoop indicates whether the remote end has put this channel in remote loopback.')
tmnxDS1InsertSingleBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 20), TmnxActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1InsertSingleBitError.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1InsertSingleBitError.setDescription('tmnxDS1InsertSingleBitError is used to insert a single bit error for a BERT test.')
tmnxDS1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("cas", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1SignalMode.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1SignalMode.setDescription("The value of tmnxDS1SignalMode indicates the type of signalling associated with the channel: none - Indicates no signalling on this channel. cas - Indicates Channel Associated Signalling (CAS) on this channel. The default signalling is 'none'. ")
tmnxDS1ClockSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 22), TmnxDSXClockSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ClockSyncState.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1ClockSyncState.setDescription("The value of tmnxDS1ClockSyncState indicates the current clock synchronization state if tmnxDS1ClockSource is 'adaptive' or 'differential'.")
tmnxDS1ClockMasterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 23), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1ClockMasterPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1ClockMasterPortId.setDescription("The value of tmnxDS1ClockMasterPortId indicates the current clock synchronization master port id if tmnxDS1ClockSource is 'adaptive' or 'differential'.")
tmnxDS1BerSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), )).clone(5)).setUnits('error bits in million bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BerSdThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BerSdThreshold.setDescription('The value of tmnxDS1BerSdThreshold specifies a bit error rate (BER) threshold used to determine when to send a tmnxEqPortDS1Alarm notification for a BER SD failure and a tmnxEqPortDS1AlarmClear notification for a BER SD failure clear. Bit error computed must reach/exceed threshold value over a pre-defined period of time for the tmnxEqPortSonetAlarm notification to be sent. The value of tmnxDS1Framing defines how the bit error is computed and what values of tmnxDS1BerSdThreshold are allowed. The following table defines this dependency: tmnxDS1Framing Bit error calculation and value supported -------------- ----------------------------------------- esf (1) each CRC error is counted as one bit error g704 (4) values supported are 1,5,10,50,100 other values bit error alarms not supported, value of tmnxDS1BerSdThreshold set to default and cannot be changed tmnxDS1BerSdThreshold value must not exceed the value of tmnxDS1BerSfThreshold.')
tmnxDS1BerSfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(5, 5), ValueRangeConstraint(10, 10), ValueRangeConstraint(50, 50), ValueRangeConstraint(100, 100), )).clone(50)).setUnits('error bits in million bits received').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1BerSfThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1BerSfThreshold.setDescription('The value of tmnxDS1BerSfThreshold specifies a bit error rate (BER) threshold used to determine when to send a tmnxEqPortDS1Alarm notification for a BER SF failure and a tmnxEqPortDS1AlarmClear notification for a BER SF failure clear. Bit error computed must reach/exceed threshold value over a pre-defined period of time for the tmnxEqPortSonetAlarm notification to be sent. The value of tmnxDS1Framing defines how the bit errors are computed and what values of tmnxDS1BerSfThreshold are allowed. The following table defines this dependency: tmnxDS1Framing Bit error calculation and value supported -------------- ----------------------------------------- esf (1) each CRC error is counted as one bit error g704 (4) values supported are 1,5,10,50,100 other values bit error alarms not supported, value of tmnxDS1BerSfThreshold set to default and cannot be changed tmnxDS1BerSfThreshold value must not be smaller than tmnxDS1BerSdThreshold value')
tmnxDS1NationalUseBits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 12, 1, 26), Bits().clone(namedValues=NamedValues(("sa4", 0), ("sa5", 1), ("sa6", 2), ("sa7", 3), ("sa8", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1NationalUseBits.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1NationalUseBits.setDescription('The tmnxDS1NationalUseBits specifies the transmitted value for each of the E1 national use bits (Sa4 to Sa8). This object is only applicable on E1 channels with tmnxDS1Framing set to g704-no-crc (3), or g704 (4).')
tmnxDS0ChanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13), )
if mibBuilder.loadTexts: tmnxDS0ChanGroupTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupTable.setDescription('The tmnxDS0ChanGroupTable has an entry for DS0 channels grouped together and belonging to a particular DS1 channel.')
tmnxDS0ChanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS0ChanGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupEntry.setDescription('Each row entry represents one or more DS0 channels on a DS1 interface. tmnxDS0ChanGroupTimeSlots object is used to add or remove DS0 channels from the group. Entries can be created and deleted via SNMP SET operations using the tmnxDS0ChanGroupRowStatus object. For each tmnxDS0ChanGroupEntry, there will be a corresponding entry in the tmnxPortTable and the ifTable.')
tmnxDS0ChanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupRowStatus.setDescription('tmnxDS0ChanGroupRowStatus controls the creation and deletion of row entries in the tmnxDS0ChanGroupTable. The tmnxPortPortID for a channel group includes a group ID in the lower bits. The manager has to first calculate the tmnxPortPortID based on the TiMOS encoding scheme.')
tmnxDS0ChanGroupTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 2), TmnxDs0ChannelList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupTimeSlots.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupTimeSlots.setDescription("tmnxDS0ChanGroupTimeSlots is a bitmap which is used to add/remove DS0 timeslots from a channel group. The description for TmnxDs0ChannelList contains details of the bitmap organization. When a channel group is created on unframed DS1/E1, all timeslots as applicable to a given speed are auto-allocated and cannot be changed. When a channel group is created on a framed DS1/E1 or existing channel group's encapsulation is changed from ATM, the default of no timeslots is auto-assigned to the group. When a channel group on a framed DS1/E1 is configured for ATM encapsulation, the ATM defaults of 0x00FFFFFF (DS1) and 0XFFFEFFFE (E1) are auto-assigned and cannot be changed.")
tmnxDS0ChanGroupSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speed-56", 1), ("speed-64", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSpeed.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupSpeed.setDescription('tmnxDS0ChanGroupSpeed configures the required link speed for all the time slots included in this channel group.')
tmnxDS0ChanGroupCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupCRC.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupCRC.setDescription("The value of tmnxDS0ChanGroupCRC variable indicates the precision of the cyclic redundancy check. A value of 'crc16' is a 16-bit CRC calculation. A value of 'crc32' is a 32-bit CRC calculation. 32-bit CRC increases the error detection ability, but it also adds some performance overhead. For channel groups with encapsulation set to ATM, the default and only supported value is crc32 and applies to AAL5 CRC calculations on that channel group.")
tmnxDS0ChanGroupMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9208), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupMTU.setDescription('The size of the largest packet which can be sent/received on the channel group, specified in octets. For groups that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent. Setting tmnxDS0ChanGroupMTU to a value of zero (0), causes the agent to recalculate the default MTU size which can vary based on the current setting of tmnxPortMode and tmnxPortEncapType variables. Some typical default values are: 1522 with mode access and encap-type bcp-null 1526 with mode access and encap-type bcp-dot1q 1502 with mode access and encap-type ipcp 4474 with mode access and encap-type frame-relay 1524 with mode access and encap-type atm 2092 with mode access and encap-type cem ')
tmnxDS0ChanGroupOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 6), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS0ChanGroupOperMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupOperMTU.setDescription('The negotiated size of the largest packet which can be sent on the channel group, specified in octets. For channel groups that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent.')
tmnxDS0ChanGroupLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS0ChanGroupLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupLastChangeTime.setDescription('The tmnxDS0ChanGroupLastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxDS0ChanGroupEntry row for this channel group.')
tmnxDS0ChanGroupIdleCycleFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 8), TmnxDSXIdleCycleFlags().clone('flags')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupIdleCycleFlags.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupIdleCycleFlags.setDescription("tmnxDS0ChanGroupIdleCycleFlags configures the value that the channel group transmits during idle cycle. The default value applies to HDLC channels only. For ATM and CEM channels the object does not really apply so a default value of 'none' is used and cannot be changed.")
tmnxDS0ChanGroupScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupScramble.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupScramble.setDescription("tmnxDS0ChanGroupScramble indicates whether payload scrambling is enabled on this ATM channel. Both ends of the connection must use the same scrambling algorithm. The default value is 'true' if the tmnxPortEncapType is atmEncap for this channel, otherwise the default is 'false' and not allowed to change.")
tmnxDS0ChanGroupAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupAcctPolicyId.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupAcctPolicyId.setDescription('The value of tmnxDS0ChanGroupAcctPolicyId specifies an existing accounting policy to use for the ds0 channel-group. Accounting policies can only be associated with network ports or channels. A non-zero value indicates the tmnxLogApPolicyId index identifying the policy entry in the tmnxLogApTable from the TIMETRA-LOG-MIB which is associated with this channel-group. A zero value indicates that there is no accounting policy associated with this channel')
tmnxDS0ChanGroupCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 11), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupCollectStats.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupCollectStats.setDescription('The value of tmnxDS0ChanGroupCollectStats specifies whether or not the collection of accounting and statistical data for the network ds0 channel-group is collected. When the value is set to false, the statistics are still accumulated by the IOM cards, however, the CPM will not obtain the results and write them to the billing file. When applying accounting policies the data by default will be collected in the appropriate records and written to the designated billing file.')
tmnxDS0ChanGroupPayloadFillType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 12), TmnxDSXIdleFillType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadFillType.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadFillType.setDescription("The value of tmnxDS0ChanGroupPayloadFillType specifies the type of idle payload fill to be sent when the CEM channel group experiences an underrun. If the type is set to 'userDefinedPattern' then the value of tmnxDS0ChanGroupPayloadPattern is used to define the payload pattern. The default value depends on the encap type of the channel group: For CEM encap - 'allOnes' For all other encaps - 'notApplicable' For a ds1-unframed and e1-unframed CEM encap DS0 channel group the only supported value is 'allOnes'. For non-CEM encap channel groups the value cannot be changed.")
tmnxDS0ChanGroupPayloadPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadPattern.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupPayloadPattern.setDescription("The value of tmnxDS0ChanGroupPayloadPattern specifies the idle payload fill pattern when the CEM channel group experiences an underrun and tmnxDS0ChanGroupPayloadFillType is set to 'userDefinedPattern'. The default value depends on the encap type of the channel group: For CEM encap channel group - 255 (Valid range 0..255) For non-CEM encap channel group - 0 (Valid range 0..0).")
tmnxDS0ChanGroupSignalFillType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 14), TmnxDSXIdleFillType().clone('notApplicable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalFillType.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalFillType.setDescription("The value of tmnxDS0ChanGroupSignalFillType specifies the type of idle signal fill to be sent when the CAS CEM channel group experiences an underrun. If the type is set to 'userDefinedPattern' then the value of tmnxDS0ChanGroupSignalPattern is used to define the signal pattern. The default value depends on the encap of the DS0 channel group and the signal-mode of the DS1/E1: For CEM encap on DS1/E1 with CAS signal mode - 'allOnes' For all other encaps or non-CAS CEM DS1/E1 - 'notApplicable' For CEM channel groups on DS1/E1 with no CAS signalling and non-CEM encap channel groups the value cannot be changed.")
tmnxDS0ChanGroupSignalPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalPattern.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupSignalPattern.setDescription("The value of tmnxDS0ChanGroupSignalPattern specifies the idle signal fill pattern when the CAS CEM channel group experiences an underrun and tmnxDS0ChanGroupSignalFillType is set to 'userDefinedPattern'. CAS ESF DS1 and CAS E1 support 4 signalling bits per timeslot (ABCD) CAS SF DS1 supports 2 signalling bits per timeslot (AB) The default value depends on the type of channel group: For CAS DS1 ESF or CAS E1 channel group - 15 (Valid range 0..15) For CAS DS1 SF channel group - 3 (Valid range 0..3) For non-CAS or non-CEM channel group - 0 (Valid range 0..0)")
tmnxDS0ChanGroupBerSfLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 13, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS0ChanGroupBerSfLinkDown.setStatus('current')
if mibBuilder.loadTexts: tmnxDS0ChanGroupBerSfLinkDown.setDescription('The value of tmnxDS0ChanGroupBerSfLinkDown specifies whether or not the DS0 channel-group will become operationally down when a BER-SF alarm is raised. If tmnxDS0ChanGroupBerSfLinkDown is false then the channel-group will not operationally change state due to BER-SF alarms.')
tmnxBundleTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14), )
if mibBuilder.loadTexts: tmnxBundleTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleTable.setDescription('The tmnxBundleTable has an entry for a bundle created on the system.')
tmnxBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleEntry.setDescription('Each row entry represents a multilink bundle on a MDA. Entries can be created and deleted via SNMP SET operations using the tmnxBundleRowStatus object. The tmnxBundleBundleID will contain the bundle number encoded in it. The bundle number is unique for a MDA. For each tmnxBundleEntry, there will be a corresponding entry in the tmnxPortTable and the ifTable.')
tmnxBundleBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 1), TmnxBundleID())
if mibBuilder.loadTexts: tmnxBundleBundleID.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleBundleID.setDescription('tmnxBundleBundleID identifies this multilink bundle. The value of this object is calculated using the TiMOS encoding scheme described in TmnxBundleID. tmnxBundleBundleID is used as an index into the ifTable and the tmnxPortTable to access an entry corresponding to this entry.')
tmnxBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleRowStatus.setDescription('tmnxBundleRowStatus controls the creation and deletion of row entries in the tmnxBundleTable. The manager has to first calculate the tmnxBundleBundleID based on the TiMOS encoding.')
tmnxBundleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mlppp", 1), ("mlfr", 2), ("imagrp", 3))).clone('mlppp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleType.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleType.setDescription('tmnxBundleType specifies the type of this multilink bundle. It provides a reference as to the type of bundle this row refers to but does not map to the direct value of bndle type defined in TmnxBundleID.')
tmnxBundleMinimumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMinimumLinks.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMinimumLinks.setDescription('tmnxBundleMinimumLinks is the minimum number of links that must be active for a bundle to be active. If the number of links drop below the given minimum then the multilink bundle will transition to an operation down state.')
tmnxBundleNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleNumLinks.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleNumLinks.setDescription('tmnxBundleNumLinks indicates the total number of links configured for this bundle.')
tmnxBundleNumActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleNumActiveLinks.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleNumActiveLinks.setDescription('tmnxBundleNumActiveLinks indicates the current number of active links belonging to this bundle.')
tmnxBundleMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1500, 9206), )).clone(1524)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMRRU.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMRRU.setDescription('tmnxBundleMRRU is used to configure the Max Received Reconstructed Unit (MRRU). This is the maximum frame that can be reconstructed from multilink fragments. This object is only applicable to tmnxBundleType value of mlppp. All non applicable types have a value of zero.')
tmnxBundleOperMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 8), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleOperMRRU.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleOperMRRU.setDescription('tmnxBundleOperMRRU indicates the operational value of Max Received Reconstructed Unit (MRRU). This object is only applicable to tmnxBundleType value of mlppp. All non applicable types have a value of zero.')
tmnxBundlePeerMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 9), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundlePeerMRRU.setStatus('current')
if mibBuilder.loadTexts: tmnxBundlePeerMRRU.setDescription('tmnxBundlePeerMRRU indicates the MRRU value sent by the peer during negotiation. This object is only applicable to tmnxBundleType value of mlppp. All non applicable types have a value of zero.')
tmnxBundleOperMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 10), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleOperMTU.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleOperMTU.setDescription('tmnxBundleOperMTU indicates the operational MTU of the bundle.')
tmnxBundleRedDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 25), ValueRangeConstraint(0, 50), ))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRedDiffDelay.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleRedDiffDelay.setDescription("tmnxBundleRedDiffDelay configures the maximum acceptable differential delay for individual circuits within this multilink bundle. If the delay exceeds this threshold, a tmnxEqPortBndlRedDiffExceeded trap is issued. For a tmnxBundleType value of 'imagrp' a range of 0 to 50 is supported, 0 to 25 otherwise.")
tmnxBundleRedDiffDelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("down", 1))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleRedDiffDelayAction.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleRedDiffDelayAction.setDescription("tmnxBundleRedDiffDelayAction specifies the action to be taken when the differential delay exceeds the threshold configured in tmnxBundleRedDiffDelay. For a tmnxBundleType value of 'imagrp', only the down action is supported.")
tmnxBundleYellowDiffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleYellowDiffDelay.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleYellowDiffDelay.setDescription("tmnxBundleYellowDiffDelay configures the yellow warning threshold for the differential delay for the circuits within a given multilink bundle. If the delay exceeds this threshold, a tmnxEqPortBndlYellowDiffExceeded trap is issued. This object is only applicable to tmnxBundleType values of 'mlppp' or 'mlfr'. All non applicable types have a value of zero.")
tmnxBundleShortSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleShortSequence.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleShortSequence.setDescription('tmnxBundleShortSequence command specifies that the MLPPP bundle should use short (12 bit) sequence numbers. Instead of the standard long (24 bits) sequence number. This object is only applicable to tmnxBundleType value of mlppp.')
tmnxBundleLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleLastChangeTime.setDescription('The tmnxBundleLastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxBundleEntry row for this channel group.')
tmnxBundleFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 16), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 512), )).clone(128)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleFragmentThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleFragmentThreshold.setDescription('The value of tmnxBundleFragmentThreshold specifies the maximum length of a fragment transmitted across the multilink bundle. Values supported within each bundle type are hardware dependent. The value of 0 specifies no fragmentation. Currently, the following values are supported depending upon the tmnxBundleType value: tmnxBundleType tmnxBundleFragmentThreshold values supported mlppp 0; 128 to 512 inclusive imagrp 128 mlfr 0; 128 to 512 inclusive')
tmnxBundleUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 17), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleUpTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleUpTime.setDescription("tmnxBundleUpTime indicates the time since the bundle is operationally 'inService'.")
tmnxBundleInputDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleInputDiscards.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleInputDiscards.setDescription('tmnxBundleInputDiscards indicates the number of LCP packets that were discarded. This object is only supported for a tmnxBundleType value of mlppp.')
tmnxBundlePrimaryMemberPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 19), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundlePrimaryMemberPortID.setStatus('current')
if mibBuilder.loadTexts: tmnxBundlePrimaryMemberPortID.setDescription('tmnxBundlePrimaryMemberPortID indicates the TmnxPortID of the primary member of this bundle. The value of this object will be zero if there are no members configured in this bundle.')
tmnxBundleLFI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleLFI.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleLFI.setDescription("tmnxBundleLFI specifies if Link Fragmentation and Interleaving is enabled on the multilink bundle. A value of 'false' indicates that Link Fragmentation and Interleaving is disabled on the multilink bundle while a value of 'true' indicates that Link Fragmentation and Interleaving is enabled on the multilink bundle. This object is only supported for tmnxBundleType value of mlppp. The value of tmnxBundleLFI may be modified only when no members are part of the bundle. This object cannot be set to true when tmnxBundleMlpppClassCount object value is set to enable Multiclass MLPPP on the bundle.")
tmnxBundleProtectedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("working", 1), ("protection", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleProtectedType.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleProtectedType.setDescription("tmnxBundleProtectedType identifies how this bundle is part of a tmnxBundleParentBundle. A value of 'none' identifies no protection, 'working' identifies it to be a working bundle of a tmnxBundleParentBundle and 'protection' identifies it to be a protection bundle of a tmnxBundleParentBundle. tmnxBundleProtectedType can only be set at row creation.")
tmnxBundleParentBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 14, 1, 22), TmnxBundleID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleParentBundle.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleParentBundle.setDescription('tmnxBundleParentBundle specifies the parent to which this bundle belongs. A row for the given non zero walue of tmnxBundleParentBundle must exist for this row to be successfully created. If a bundle has no parent, its value is zero. tmnxBundleParentBundle can only be set at row creation.')
tmnxBundleMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15), )
if mibBuilder.loadTexts: tmnxBundleMemberTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberTable.setDescription('The tmnxBundleMemberTable has an entry for a member port associated with a multilink bundle.')
tmnxBundleMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberEntry.setDescription('Each row represents a port associated with a bundle. Entries can be added or removed from this table using SNMP SET operation.')
tmnxBundleMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberRowStatus.setDescription('tmnxBundleMemberRowStatus controls the creation and deletion of row entries in the tmnxBundleMemberTable. tmnxPortPortID identifies the port to be associated with the bundle. A bundle entry with tmnxBundleBundleID has to exist in the tmnxBundleTable before creating an entry in this table.')
tmnxBundleMemberActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberActive.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberActive.setDescription("tmnxBundleMemberActive is set to 'false' for one of reasons in tmnxBundleMemberDownReason.")
tmnxBundleMemberDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("outOfService", 1), ("redDiffDelayExceeded", 2), ("mismatchEndPtDiscriminator", 3), ("peerNotBundleMember", 4), ("underNegotiation", 5), ("peerInvalidMlHdrFmt", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberDownReason.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberDownReason.setDescription("tmnxBundleMemberDownReason contains the reason code for marking the member link of the bundle to down (i.e. tmnxBundleMemberActive will be set to false): none - The link is active and the value of tmnxBundleMemberActive is 'true'. outOfService - The link operational status is down. redDiffDelayExceeded - The differential delay of the link exceeded the configured value of red differential delay and tmnxBundleRedDiffDelayAction was configured as 'down'. mismatchEndPtDiscriminator - Detected inconsistent peer endpoint discriminator for the bundle. peerNotBundleMember - When the peer is either not added to the bundle or is removed from the bundle. underNegotiation - When the local end is trying to negotiate with the peer. peerInvalidMlHdrFmt - The peer does not support the required ML-PPP header format. The remote peer must support the same short/long sequence code, and at least as many classes as configured for the local bundle. other - Refer to the corresponding member table, if any, for more information based on the tmnxBundleType. ")
tmnxBundleMemberUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 15, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberUpTime.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberUpTime.setDescription('tmnxBundleMemberUpTime indicates the time since the bundle member is active as indicated by tmnxBundleMemberActive.')
tmnxPortToChannelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16), )
if mibBuilder.loadTexts: tmnxPortToChannelTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortToChannelTable.setDescription('The tmnxPortToChannelTable is a mapping table. Given a chassis index, physical port index and channel string, it maps it to the index of the channel. This channel index can then be used as an index into the ifTable or the tmnxPortTable.')
tmnxPortToChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxChannelIdxString"))
if mibBuilder.loadTexts: tmnxPortToChannelEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortToChannelEntry.setDescription('Each row represents a mapping of the physical port index and the channel index string to the index of the channel.')
tmnxChannelIdxString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1, 1), DisplayString())
if mibBuilder.loadTexts: tmnxChannelIdxString.setStatus('current')
if mibBuilder.loadTexts: tmnxChannelIdxString.setDescription('tmnxChannelIdxString is an index into the table. It contains a string identifying a channel on the physical port.')
tmnxChannelPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 16, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxChannelPortID.setStatus('current')
if mibBuilder.loadTexts: tmnxChannelPortID.setDescription('tmnxChannelPortID contains the port ID of the channel. This value is used to identify the entry for this channel in the ifTable or the tmnxPortTable.')
tmnxPortIngrMdaQosStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17), )
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatTable.setDescription('The table tmnxPortIngrMdaQosStatTable contains a row for each ethernet or SONET/SDH port located on an oversubscribed MDA. Each object in a row refers to a QoS priority and forwarding class, which is a decimal value between 00 and 15 inclusive. The following table describes each decimal value: | Priority |------------------ Forwarding Class | High Low ---------------------------------------- NC (Network Control) | 00 01 H1 (Voice) | 02 03 EF (Premium) | 04 05 H2 (Video) | 06 07 L1 (Management) | 08 09 AF (Assured) | 10 11 L2 (Priority) | 12 13 BE (Best Effort) | 14 15')
tmnxPortIngrMdaQosStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatEntry.setDescription('Each row indicates the MDA QoS discard statistics on an ethernet or SONET/SDH port located on an oversubscribed MDA. For ethernet ports, the tmnxPortEtherIngressRate object indicates the ingress shaping rate configured.')
tmnxPortIngrMdaQos00StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropPkts.setDescription('tmnxPortIngrMdaQos00StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 00 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos00StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos00StatDropOcts.setDescription('tmnxPortIngrMdaQos00StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 00 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos01StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropPkts.setDescription('tmnxPortIngrMdaQos01StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 01 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos01StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos01StatDropOcts.setDescription('tmnxPortIngrMdaQos01StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 01 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos02StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropPkts.setDescription('tmnxPortIngrMdaQos02StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 02 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos02StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos02StatDropOcts.setDescription('tmnxPortIngrMdaQos02StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 02 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos03StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropPkts.setDescription('tmnxPortIngrMdaQos03StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 03 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos03StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos03StatDropOcts.setDescription('tmnxPortIngrMdaQos03StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 03 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos04StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropPkts.setDescription('tmnxPortIngrMdaQos04StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 04 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos04StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos04StatDropOcts.setDescription('tmnxPortIngrMdaQos04StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 04 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos05StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropPkts.setDescription('tmnxPortIngrMdaQos05StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 05 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos05StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos05StatDropOcts.setDescription('tmnxPortIngrMdaQos05StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 05 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos06StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropPkts.setDescription('tmnxPortIngrMdaQos06StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 06 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos06StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos06StatDropOcts.setDescription('tmnxPortIngrMdaQos06StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 06 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos07StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropPkts.setDescription('tmnxPortIngrMdaQos07StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 07 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos07StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos07StatDropOcts.setDescription('tmnxPortIngrMdaQos07StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 07 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos08StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropPkts.setDescription('tmnxPortIngrMdaQos08StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 08 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos08StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos08StatDropOcts.setDescription('tmnxPortIngrMdaQos08StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 08 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos09StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropPkts.setDescription('tmnxPortIngrMdaQos09StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 09 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos09StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos09StatDropOcts.setDescription('tmnxPortIngrMdaQos09StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 09 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos10StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropPkts.setDescription('tmnxPortIngrMdaQos10StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 10 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos10StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos10StatDropOcts.setDescription('tmnxPortIngrMdaQos10StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 10 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos11StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropPkts.setDescription('tmnxPortIngrMdaQos11StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 11 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos11StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos11StatDropOcts.setDescription('tmnxPortIngrMdaQos11StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 11 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos12StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropPkts.setDescription('tmnxPortIngrMdaQos12StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 12 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos12StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos12StatDropOcts.setDescription('tmnxPortIngrMdaQos12StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 12 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos13StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropPkts.setDescription('tmnxPortIngrMdaQos13StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 13 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos13StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos13StatDropOcts.setDescription('tmnxPortIngrMdaQos13StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 13 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos14StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropPkts.setDescription('tmnxPortIngrMdaQos14StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 14 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos14StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos14StatDropOcts.setDescription('tmnxPortIngrMdaQos14StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 14 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos15StatDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropPkts.setDescription('tmnxPortIngrMdaQos15StatDropPkts indicates the number of packets dropped on the oversubscribed MDA for QoS classifier result threshold 15 because of an overload condition on the MDA.')
tmnxPortIngrMdaQos15StatDropOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 17, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQos15StatDropOcts.setDescription('tmnxPortIngrMdaQos15StatDropOcts indicates the number of octets dropped on the oversubscribed MDA for QoS classifier result threshold 15 because of an overload condition on the MDA.')
tmnxSonetGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18), )
if mibBuilder.loadTexts: tmnxSonetGroupTable.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetGroupTable.setDescription("The tmnxSonetGroupTable has an entry for each Tributary Unit Group(TUG3) on a path. On a port which supports unchannelized STS-3's, rows in this table are created when a channelized STS-3 has its tmnxSonetPathChildType set to sdhTug3. On a port which does not support unchannelized STS-3's, the rows in this table are implicitly created when a STS-3 is created in the tmnxSonetPathTable. Entries in this table are implicitly deleted when the parent entry of this group is deleted from the tmnxSonetPathTable or if the tmnxSonetPathChildType of the parent is set to something other than sdhTug3.")
tmnxSonetGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxSonetGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetGroupEntry.setDescription('Each row entry represents a Tributary Unit Group(TUG3) on a path.')
tmnxSonetGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 1), TmnxMDAChanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupType.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetGroupType.setDescription("tmnxSonetGroupType indicates the sonet group type of this entry. For STS-3/STM-1 channelization, the value of this object will be 'sdhTug3'.")
tmnxSonetGroupParentPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 2), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupParentPortID.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetGroupParentPortID.setDescription('tmnxSonetGroupParentPortID indicates the TmnxPortID of the parent of this group.')
tmnxSonetGroupChildType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 3), TmnxMDAChanType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxSonetGroupChildType.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetGroupChildType.setDescription("tmnxSonetGroupChildType is used to configure the type of the children of this group. Based on the value of this object, entries of a certain channel type can be created in the tmnxSonetPathTable. For example, if the value of this object is set to 'sonetVt15', then 28 entries of type 'sonetVt15' can be created in the tmnxSonetPathTable.")
tmnxSonetGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 18, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxSonetGroupName.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetGroupName.setDescription('tmnxSonetGroupName is the textual name for this sonet group.')
tmnxCiscoHDLCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20), )
if mibBuilder.loadTexts: tmnxCiscoHDLCTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCTable.setDescription('The tmnxCiscoHDLCTable has an entry for each port in the system that is configured for Cisco HDLC. It contains the parameters related to Cisco HDLC protocol on this port.')
tmnxCiscoHDLCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxCiscoHDLCEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCEntry.setDescription('The tmnxCiscoHDLCEntry specifies parameters for a particular interfaces running Cisco HDLC encapsulation. Entries cannot be created and deleted via SNMP SET operations.')
tmnxCiscoHDLCKeepAliveInt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCKeepAliveInt.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCKeepAliveInt.setDescription('tmnxCiscoHDLCKeepAliveInt specifies the interval in seconds used for sending periodic keepalive packets. The default value is set to 10 seconds. A value of 0 specifies that the keepalive function is turned off. It is expected that the nodes at the two endpoints of the Cisco HDLC link are provisioned with the same values.')
tmnxCiscoHDLCUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCUpCount.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCUpCount.setDescription('tmnxCiscoHDLCUpCount specifies the number of continual keepalive packets that has to be received to declare the link up. It is expected that the nodes at the two endpoints of the Cisco HDLC link are provisioned with the same values.')
tmnxCiscoHDLCDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 16)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxCiscoHDLCDownCount.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCDownCount.setDescription("tmnxCiscoHDLCDownCount specifies the number of 'tmnxCiscoHDLCKeepAliveInt' intervals that must pass without receiving a keepalive packet before the link is declared down. It is expected that the nodes at the two endpoints of the Cisco HDLC link are provisioned with the same values.")
tmnxCiscoHDLCOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 20, 1, 4), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCOperState.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCOperState.setDescription('The value of tmnxCiscoHDLCOperState indicates the operational status of the Cisco HDLC protocol for this port.')
tmnxCiscoHDLCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3), )
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsTable.setDescription('The tmnxCiscoHDLCStatsTable has an entry for each port in the system that is configured for Cisco HDLC encapsulation. It contains Cisco HDLC protocol statistics for the particular port.')
tmnxCiscoHDLCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1), )
tmnxCiscoHDLCEntry.registerAugmentions(("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatsEntry"))
tmnxCiscoHDLCStatsEntry.setIndexNames(*tmnxCiscoHDLCEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCStatsEntry.setDescription('An entry in the tmnxCiscoHDLCStatsTable.')
tmnxCiscoHDLCDiscardStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatInPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatInPkts.setDescription('tmnxCiscoHDLCDiscardStatInPkts indicates the number of inbound Cisco HDLC packets discarded.')
tmnxCiscoHDLCDiscardStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatOutPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCDiscardStatOutPkts.setDescription('tmnxCiscoHDLCDiscardStatOutPkts indicates the number of outbound Cisco HDLC packets discarded.')
tmnxCiscoHDLCStatInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInPkts.setDescription('tmnxCiscoHDLCStatInPkts indicates the number of inbound Cisco HDLC packets.')
tmnxCiscoHDLCStatOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutPkts.setDescription('tmnxCiscoHDLCStatOutPkts indicates the number of outbound Cisco HDLC packets.')
tmnxCiscoHDLCStatInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInOctets.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCStatInOctets.setDescription('tmnxCiscoHDLCStatInOctets indicates the number of inbound Cisco HDLC octets.')
tmnxCiscoHDLCStatOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutOctets.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCStatOutOctets.setDescription('tmnxCiscoHDLCStatOutOctets indicates the number of outbound Cisco HDLC octets.')
tmnxFRDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1), )
if mibBuilder.loadTexts: tmnxFRDlcmiTable.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiTable.setDescription('The tmnxFRDlcmiTable has an entry for each port in the system that is configured for Frame Relay. It contains the parameters for the Data Link Connection Management Interface (DLCMI) for the frame relay service on this port.')
tmnxFRDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxFRDlcmiEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiEntry.setDescription('The Parameters for a particular Data Link Connection Management Interface. Entries cannot be created and deleted via SNMP SET operations.')
tmnxFRDlcmiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("bidir", 3))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiMode.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiMode.setDescription('tmnxFRDlcmiMode is used to set the mode of the interface. It can be set as Data terminal equipment (dte), Data circuit-terminating equipment (dce) or both as Data terminal equipment and Data circuit-terminating equipment (bidir). ')
tmnxFRDlcmiN392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiN392Dce.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiN392Dce.setDescription('tmnxFRDlcmiN392Dce is used to configure the LMI error threshold for DCE interface.')
tmnxFRDlcmiN393Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiN393Dce.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiN393Dce.setDescription('tmnxFRDlcmiN393Dce is used to configure the LMI monitored event count for DCE interface.')
tmnxFRDlcmiT392Dce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxFRDlcmiT392Dce.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiT392Dce.setDescription('tmnxFRDlcmiT392Dce is used to configure the polling verification timer for the Frame Relay DCE interface.')
tmnxFRDlcmiTxStatusEnqMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 5), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusEnqMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusEnqMsgs.setDescription('tmnxFRDlcmiTxStatusEnqMsgs indicates the number of LMI Status Enquiry messages transmitted on this Frame Relay interface.')
tmnxFRDlcmiRxStatusEnqMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 6), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusEnqMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusEnqMsgs.setDescription('tmnxFRDlcmiRxStatusEnqMsgs indicates the number of LMI Status Enquiry messages received on this Frame Relay interface.')
tmnxFRDlcmiStatusEnqMsgTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 7), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiStatusEnqMsgTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiStatusEnqMsgTimeouts.setDescription('tmnxFRDlcmiStatusEnqMsgTimeouts indicates the number of times the LMI agent did not receive a Status Enquiry message within the allotted time.')
tmnxFRDlcmiTxStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 8), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiTxStatusMsgs.setDescription('tmnxFRDlcmiTxStatusMsgs indicates the number of LMI Status messages transmitted on this Frame Relay interface.')
tmnxFRDlcmiRxStatusMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 9), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiRxStatusMsgs.setDescription('tmnxFRDlcmiRxStatusMsgs indicates the number of LMI Status messages received on this Frame Relay interface.')
tmnxFRDlcmiStatusMsgTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 10), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiStatusMsgTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiStatusMsgTimeouts.setDescription('tmnxFRDlcmiStatusMsgTimeouts indicates the number of times the LMI agent did not receive a Status message within the allotted time.')
tmnxFRDlcmiDiscardedMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 11), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiDiscardedMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiDiscardedMsgs.setDescription("tmnxFRDlcmiDiscardedMsgs indicates the number of times the LMI agent discarded a received message because it wasn't expecting it, the type of message was incorrect, or the contents of the message were invalid.")
tmnxFRDlcmiInvRxSeqNumMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 1, 1, 12), Counter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFRDlcmiInvRxSeqNumMsgs.setStatus('current')
if mibBuilder.loadTexts: tmnxFRDlcmiInvRxSeqNumMsgs.setDescription('tmnxFRDlcmiInvRxSeqNumMsgs indicates the number of times the LMI agent received a message with an invalid receive sequence number: i.e. a sequence number that does not match the last transmitted sequence number of the agent.')
tmnxQosPoolAppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2), )
if mibBuilder.loadTexts: tmnxQosPoolAppTable.setStatus('current')
if mibBuilder.loadTexts: tmnxQosPoolAppTable.setDescription('This table maintains associations of the buffer pools with the individual objects.')
tmnxQosPoolAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxObjectType"), (0, "TIMETRA-PORT-MIB", "tmnxObjectId"), (0, "TIMETRA-PORT-MIB", "tmnxObjectAppType"), (0, "TIMETRA-PORT-MIB", "tmnxObjectAppPool"))
if mibBuilder.loadTexts: tmnxQosPoolAppEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxQosPoolAppEntry.setDescription('This entry maintains the specifics about the association of a buffer pool and an object.')
tmnxObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 51))).clone(namedValues=NamedValues(("mda", 1), ("port", 2), ("unused", 3), ("bundle", 4), ("mpointQueues", 51))))
if mibBuilder.loadTexts: tmnxObjectType.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectType.setDescription('The object tmnxObjectType defines the type of object to which the pool is being setup for.')
tmnxObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 2), TmnxPortID())
if mibBuilder.loadTexts: tmnxObjectId.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectId.setDescription("tmnxObjectId is used to identify the specific object. If tmnxObjectType is 'mda', then the tmnxObjectId is encoded as a physical port with the port being '0'. For all other types the encoding is done as per the description of TmnxPortID.")
tmnxObjectAppType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 51))).clone(namedValues=NamedValues(("accessIngress", 1), ("accessEgress", 2), ("networkIngress", 3), ("networkEgress", 4), ("system", 51))))
if mibBuilder.loadTexts: tmnxObjectAppType.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppType.setDescription('The object tmnxObjectAppType specifies the nature of usage the pool would be used for. The pools could be used for access or network traffic at either ingress or egress. The value mpointQueues (51) is valid only for 7210-SAS-X platform.')
tmnxObjectAppPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 4), TNamedItem())
if mibBuilder.loadTexts: tmnxObjectAppPool.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppPool.setDescription('tmnxObjectAppPool specifies the name of the pool to be used/created.')
tmnxObjectAppPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppPoolRowStatus.setDescription('The object tmnxObjectAppPoolRowStatus is used to create or remove a pool application to the object.')
tmnxObjectAppResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppResvCbs.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppResvCbs.setDescription("The percentage of pool size reserved for CBS. The value '-1' implies that the reserved CBS should be computed as the sum of the CBS requested by the entities using this pool if the application point is 'network'. For 'access' application points the value '-1' means a default of 30%.")
tmnxObjectAppSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 7), TNamedItem().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppSlopePolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppSlopePolicy.setDescription('tmnxObjectAppSlopePolicy specifies the slope policy being used for this pool. The Slope policies define the nature of the RED Slopes for the high and the low priority traffic.')
tmnxObjectAppPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 100), )).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppPoolSize.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppPoolSize.setDescription("Size in percentage of buffer space. The value '-1' implies that the pool size should be computed as per fair weighing between all other pools.")
tmnxObjectAppResvCbsAmbrAlrmStep = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppResvCbsAmbrAlrmStep.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppResvCbsAmbrAlrmStep.setDescription('The value of tmnxObjectAppResvCbsAmbrAlrmStep specifies the percentage step-size for the reserved CBS size of the pool. When tmnxObjectAppResvCbsAmbrAlrmStep is set to default value, the adaptive CBS sizing is disabled. To enable adaptive CBS sizing, tmnxObjectAppResvCbsAmbrAlrmStep MUST be set to non-default value along with tmnxObjectAppResvCbsAmbrAlrmMax. When reserved CBS is set to default value, adaptive CBS sizing cannot be enabled. The reserved CBS (Committed Burst Size) defines the amount of buffer space within the pool that is not considered shared.')
tmnxObjectAppResvCbsAmbrAlrmMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppResvCbsAmbrAlrmMax.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppResvCbsAmbrAlrmMax.setDescription('The value of tmnxObjectAppResvCbsAmbrAlrmMax specifies the maximum percentage for the reserved CBS size of the pool. When tmnxObjectAppResvCbsAmbrAlrmMax is set to default value, the adaptive CBS sizing is disabled. To enable adaptive CBS sizing, tmnxObjectAppResvCbsAmbrAlrmMax MUST be set to non-default value along with tmnxObjectAppResvCbsAmbrAlrmStep. When reserved CBS is set to default value, adaptive CBS sizing cannot be enabled. The reserved CBS (Committed Burst Size) defines the amount of buffer space within the pool that is not considered shared. Max reserved CBS must not be more than the reserved CBS.')
tmnxObjectAppAmbrAlrmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppAmbrAlrmThresh.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppAmbrAlrmThresh.setDescription('The value of tmnxObjectAppAmbrAlrmThresh specifies the threshold for the amber alarm on the over-subscription allowed.')
tmnxObjectAppRedAlrmThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxObjectAppRedAlrmThresh.setStatus('current')
if mibBuilder.loadTexts: tmnxObjectAppRedAlrmThresh.setDescription('The value of tmnxObjectAppRedAlrmThresh specifies the threshold for the red alarm on the over-subscription allowed.')
tmnxATMIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1), )
if mibBuilder.loadTexts: tmnxATMIntfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfTable.setDescription('The tmnxATMIntfTable has an entry for each port/channel in the system that is configured for ATM. It contains ATM cell layer configuration parameters.')
tmnxATMIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxATMIntfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfEntry.setDescription('The Parameters for a particular ATM Cell Management Interface. Entries cannot be created or deleted via SNMP SET operations. Entries will exist in this table when ATM encapsulation is configured on the port/channel.')
tmnxATMIntfCellFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2))).clone('uni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfCellFormat.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfCellFormat.setDescription('tmnxATMIntfCellFormat is used to set the cell format (UNI or NNI) that is to be used on the ATM interface.')
tmnxATMIntfMinVpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfMinVpValue.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfMinVpValue.setDescription('tmnxATMIntfMinVpValue is used to set the minimum allowable VPI value that can be used on the ATM interface for a VPC.')
tmnxATMIntfMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("direct", 1), ("plcp", 2))).clone('direct')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfMapping.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfMapping.setDescription("The value of tmnxATMIntfMapping specifies the cell mapping that is to be used on this ATM interface. When tmnxPortChanType does not have a value of 'pdhDs3 (14)', 'inconsistentValue' error will be returned to SNMP SET requests. When tmnxPortChanType has a value of 'pdhDs3 (14)', tmnxATMIntfMapping can be set to 'plcp (2)'.")
tmnxATMIntfCustomBufferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfCustomBufferMode.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfCustomBufferMode.setDescription('The value of tmnxATMIntfCustomBufferMode specifies whether port is in a mode that allows custom configuration of port buffer pool and VC thresholds.')
tmnxATMIntfBufferPool = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfBufferPool.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfBufferPool.setDescription("The value of tmnxATMIntfBufferPool specifies the percentage of the buffers configured on this interface over the maximum allowed on this interface. The value can only be changed if tmnxATMIntfCustomBufferMode is set to 'true'. Changing tmnxATMIntfCustomBufferMode to 'false' will reset tmnxATMIntfBufferPool back to the default value.")
tmnxATMIntfVcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(190, 117000)).clone(190)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxATMIntfVcThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxATMIntfVcThreshold.setDescription("The value of tmnxATMIntfVcThreshold specifies the VC buffer threshold for all VCs configured on this port. The value can only be changed if tmnxATMIntfCustomBufferMode is set to 'true'. Changing tmnxATMIntfCustomBufferMode to 'false' will reset tmnxATMIntfVcThreshold back to the default value.")
tmnxPortATMVpShaperTblLastCh = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortATMVpShaperTblLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMVpShaperTblLastCh.setDescription('The value of tmnxPortATMVpShaperTblLastCh indicates the sysUpTime at the time of the last modification of tmnxPortATMVpShaperTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxPortATMVpShaperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3), )
if mibBuilder.loadTexts: tmnxPortATMVpShaperTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMVpShaperTable.setDescription('The tmnxPortATMVpShaperTable has an entry for each ATM port-level VP shaper configured on this system.')
tmnxPortATMVpShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortATMVpShaperVpi"))
if mibBuilder.loadTexts: tmnxPortATMVpShaperEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMVpShaperEntry.setDescription('Each row represents a particular ATM port-level VP shaper. Entries are created and deleted by the user.')
tmnxPortATMVpShaperVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 1), AtmVpIdentifier())
if mibBuilder.loadTexts: tmnxPortATMVpShaperVpi.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMVpShaperVpi.setDescription('The value of tmnxPortATMVpShaperVpi specifies the ATM Virtual Path identifier of this row.')
tmnxPortATMVpShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortATMVpShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMVpShaperRowStatus.setDescription('The value of sapAtmVcRangeRowStatus specifies the row status of this row.')
tmnxPortATMVpShaperLastMgmtCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortATMVpShaperLastMgmtCh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMVpShaperLastMgmtCh.setDescription('The value of tmnxPortATMVpShaperLastMgmtCh indicates the sysUpTime at the time of the most recent management-initiated change to this table row.')
tmnxPortATMVpShaperEgrAtd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 11, 3, 1, 4), AtmTrafficDescrParamIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortATMVpShaperEgrAtd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMVpShaperEgrAtd.setDescription('The value of tmnxPortATMVpShaperEgrAtd specifies the index of the ATM traffic descriptor in the ATM traffic data encapsulation used for the egress direction over the AAL5 SSCS layer. The definition references RFC 2684 Multiprotocol Encapsulation over ATM AAL5 and to the ATM Forum LAN Emulation specification. The value of tmnxPortATMVpShaperEgrAtd must be specified when the conceptual row is created, and it cannot be changed afterwards.')
tmnxPortNetIngressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1), )
if mibBuilder.loadTexts: tmnxPortNetIngressStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressStatsTable.setDescription('Defines the Alcatel-Lucent SROS series network port ingress statistics table for providing, via SNMP, the capability of retrieving the traffic statistics for the physical queues being used for the ports to forward the network ingress traffic.')
tmnxPortNetIngressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortNetIngressQueueIndex"))
if mibBuilder.loadTexts: tmnxPortNetIngressStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressStatsEntry.setDescription('Defines an entry in tmnxPortNetIngressStatsTable. Entries are created and deleted by the system depending on the queue policy being used at the specific port.')
tmnxPortNetIngressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxPortNetIngressQueueIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressQueueIndex.setDescription('tmnxPortNetIngressQueueIndex serves as the tertiary index. When used in conjunction with tmnxChassisIndex and tmnxPortPortID, it uniquely identifies a network ingress queue for the specified port in the managed system.')
tmnxPortNetIngressFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfPkts.setDescription('tmnxPortNetIngressFwdInProfPkts indicates the number of conforming network ingress packets forwarded on this port using this queue.')
tmnxPortNetIngressFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfPkts.setDescription('tmnxPortNetIngressFwdOutProfPkts indicates the number of exceeding network ingress packets forwarded on this port using this queue.')
tmnxPortNetIngressFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressFwdInProfOcts.setDescription('tmnxPortNetIngressFwdInProfOcts indicates the number of conforming network ingress octets forwarded on this port using this queue.')
tmnxPortNetIngressFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressFwdOutProfOcts.setDescription('tmnxPortNetIngressFwdOutProfOcts indicates the number of exceeding network ingress octets forwarded on this port using this queue.')
tmnxPortNetIngressDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfPkts.setDescription('tmnxPortNetIngressDroInProfPkts indicates the number of conforming network ingress packets dropped on this port using this queue.')
tmnxPortNetIngressDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfPkts.setDescription('tmnxPortNetIngressDroOutProfPkts indicates the number of exceeding network ingress packets dropped on this port using this queue.')
tmnxPortNetIngressDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressDroInProfOcts.setDescription('tmnxPortNetIngressDroInProfOcts indicates the number of conforming network ingress octets dropped on this port using this queue.')
tmnxPortNetIngressDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetIngressDroOutProfOcts.setDescription('tmnxPortNetIngressDroOutProfOcts indicates the number of exceeding network ingress octets dropped on this port using this queue.')
tmnxPortNetEgressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2), )
if mibBuilder.loadTexts: tmnxPortNetEgressStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressStatsTable.setDescription('Defines the Alcatel-Lucent SROS series network port egress statistics table for providing, via SNMP, the capability of retrieving the traffic statistics for the physical queues being used for the ports to forward the network egress traffic.')
tmnxPortNetEgressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortNetEgressQueueIndex"))
if mibBuilder.loadTexts: tmnxPortNetEgressStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressStatsEntry.setDescription('Defines an entry in tmnxPortNetEgressStatsTable. Entries are created and deleted by the system depending on the queue policy being used at the specific port.')
tmnxPortNetEgressQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 1), TQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxPortNetEgressQueueIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressQueueIndex.setDescription('tmnxPortNetEgressQueueIndex serves as the tertiary index. When used in conjunction with tmnxChassisIndex and tmnxPortPortID, it uniquely identifies a network egress queue for the specified port in the managed system.')
tmnxPortNetEgressFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfPkts.setDescription('tmnxPortNetEgressFwdInProfPkts indicates the number of conforming network egress packets forwarded on this port using this queue.')
tmnxPortNetEgressFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfPkts.setDescription('tmnxPortNetEgressFwdOutProfPkts indicates the number of exceeding network egress packets forwarded on this port using this queue.')
tmnxPortNetEgressFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressFwdInProfOcts.setDescription('tmnxPortNetEgressFwdInProfOcts indicates the number of conforming network egress octets forwarded on this port using this queue.')
tmnxPortNetEgressFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressFwdOutProfOcts.setDescription('tmnxPortNetEgressFwdOutProfOcts indicates the number of exceeding network egress octets forwarded on this port using this queue.')
tmnxPortNetEgressDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfPkts.setDescription('tmnxPortNetEgressDroInProfPkts indicates the number of conforming network egress packets dropped on this port using this queue.')
tmnxPortNetEgressDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfPkts.setDescription('tmnxPortNetEgressDroOutProfPkts indicates the number of exceeding network egress packets dropped on this port using this queue.')
tmnxPortNetEgressDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressDroInProfOcts.setDescription('tmnxPortNetEgressDroInProfOcts indicates the number of conforming network egress octets dropped on this port using this queue.')
tmnxPortNetEgressDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgressDroOutProfOcts.setDescription('tmnxPortNetEgressDroOutProfOcts indicates the number of exceeding network egress octets dropped on this port using this queue.')
tmnxMcMlpppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4), )
if mibBuilder.loadTexts: tmnxMcMlpppStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsTable.setDescription('Defines the Alcatel-Lucent SROS series Multiclass MLPPP statistics table for providing the capability of retrieving the traffic statistics for the physical queues being used for a class of a multiclass MLPPP bundle to forward the traffic.')
tmnxMcMlpppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxMcMlpppClassIndex"))
if mibBuilder.loadTexts: tmnxMcMlpppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsEntry.setDescription('Defines an entry in tmnxMcMlpppStatsTable. Entries are created and deleted by the system depending on the number of classes being used by a given MLPPP bundle.')
tmnxMcMlpppClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 1), TmnxMcMlpppClassIndex())
if mibBuilder.loadTexts: tmnxMcMlpppClassIndex.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppClassIndex.setDescription('tmnxMcMlpppClassIndex serves as the tertiary index. When used in conjunction with tmnxChassisIndex and tmnxBundleBundleID, it uniquely identifies a class of a multiclass MLPPP bundle in the managed system.')
tmnxMcMlpppStatsIngressOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressOct.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressOct.setDescription('The value of tmnxMcMlpppStatsIngressOct indicates the total number of octets in all packets received on the bundle for the given class on ingress before reassembly.')
tmnxMcMlpppStatsIngressPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressPkt.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressPkt.setDescription('The value of tmnxMcMlpppStatsIngressPkt indicates the total number of packets forwarded on the bundle for the given class on ingress towards higher layer protocols.')
tmnxMcMlpppStatsIngressErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressErrPkt.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsIngressErrPkt.setDescription('The value of tmnxMcMlpppStatsIngressErrPkt indicates the total number of packets discarded due to reassembly errors on the bundle for the given class on ingress.')
tmnxMcMlpppStatsEgressOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressOct.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressOct.setDescription('The value of tmnxMcMlpppStatsEgressOct indicates the total number of octets in all packets received on the bundle for the given class on egress before segmentation.')
tmnxMcMlpppStatsEgressPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressPkt.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressPkt.setDescription('The value of tmnxMcMlpppStatsEgressPkt indicates the total number of packets forwarded on the bundle for the given class on egress towards the line.')
tmnxMcMlpppStatsEgressErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressErrPkt.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppStatsEgressErrPkt.setDescription('The value of tmnxMcMlpppStatsEgressErrPkt indicates the total number of packets discarded due to segmentation errors on the bundle for the given class on egress.')
tmnxBundleImaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21), )
if mibBuilder.loadTexts: tmnxBundleImaGrpTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTable.setDescription('The tmnxBundleImaGrpTable contains IMA Group data')
tmnxBundleImaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleImaGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpEntry.setDescription('Each row entry contains data on an IMA Group.')
tmnxBundleImaGrpLnkActTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000)).clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkActTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkActTimer.setDescription('tmnxBundleImaGrpLnkActTimer specifies the Link Activation Timer used to clear an existing LIF, LODS and FRI-IMA alarm. The time specified determines how long is needed for member links to stabilize before being activated.')
tmnxBundleImaGrpLnkDeactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkDeactTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpLnkDeactTimer.setDescription('tmnxBundleImaGrpLnkDeactTimer specifies the Link Deactivation Timer used to raise an LIF, LODS and FRI-IMA alarm. The time specified determines how long before a member link is declared in error and is deactivated.')
tmnxBundleImaGrpSymmetryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("symmetric", 1))).clone('symmetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpSymmetryMode.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpSymmetryMode.setDescription('tmnxBundleImaGrpSymmetryMode specifies the type of cell rate transfer over the virtual link.')
tmnxBundleImaGrpTxId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxId.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTxId.setDescription('tmnxBundleImaGrpTxId specifies the IMA Id generated at group creation time used by the near-end.')
tmnxBundleImaGrpRxId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxId.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpRxId.setDescription('tmnxBundleImaGrpRxId specifies the IMA ID generated at group creation time used by the far-end.')
tmnxBundleImaGrpTxRefLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 6), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxRefLnk.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTxRefLnk.setDescription('tmnxBundleImaGrpTxRefLnk specifies the IMA bundle member that was selected to be the transmit timing reference link. If no member has been selected as the reference link a value of zero is returned. ')
tmnxBundleImaGrpRxRefLnk = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 7), TmnxPortID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxRefLnk.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpRxRefLnk.setDescription('tmnxBundleImaGrpRxRefLnk specifies the IMA bundle member that was detected to be the receive timing reference link. If no member has been detected as the reference link a value of zero is returned. ')
tmnxBundleImaGrpSmNeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 8), TmnxImaGrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmNeState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpSmNeState.setDescription('tmnxBundleImaGrpSmNeState specifies the current state of the IMA Group for the near-end.')
tmnxBundleImaGrpSmFeState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 9), TmnxImaGrpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFeState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFeState.setDescription('tmnxBundleImaGrpSmFeState specifies the current state of the IMA Group for the far-end.')
tmnxBundleImaGrpSmFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 10), TmnxImaGrpFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFailState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpSmFailState.setDescription('tmnxBundleImaGrpSmFailState specifies the current state of the IMA Group.')
tmnxBundleImaGrpSmDownSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmDownSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpSmDownSecs.setDescription('tmnxBundleImaGrpSmDownSecs specifies the number of seconds that the IMA Group State Machine is not Operational.')
tmnxBundleImaGrpSmOperSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpSmOperSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpSmOperSecs.setDescription('tmnxBundleImaGrpSmOperSecs specifies the number of seconds that the IMA Group State Machine has been in the Operational State.')
tmnxBundleImaGrpAvailTxCR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailTxCR.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailTxCR.setDescription('tmnxBundleImaGrpAvailTxCR specifies the available transmit bandwidth on this IMA group. It only considers members that are in the Active State.')
tmnxBundleImaGrpAvailRxCR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailRxCR.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpAvailRxCR.setDescription('tmnxBundleImaGrpAvailRxCR specifies the available bandwidth on this IMA group in the receive direction. It only considers members that are in the Active State.')
tmnxBundleImaGrpNeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpNeFails.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpNeFails.setDescription('tmnxBundleImaGrpNeFails specifies the number of reported IMA Group failures since boot time.')
tmnxBundleImaGrpFeFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpFeFails.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpFeFails.setDescription('tmnxBundleImaGrpFeFails specifies the number of reported IMA Group far-end failures since boot time.')
tmnxBundleImaGrpTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTxIcpCells.setDescription('tmnxBundleImaGrpTxIcpCells specifies number of transmitted ICP cells for this IMA Group.')
tmnxBundleImaGrpRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpRxIcpCells.setDescription('tmnxBundleImaGrpRxIcpCells specifies number of received ICP cells for this IMA Group.')
tmnxBundleImaGrpErrorIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpErrorIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpErrorIcpCells.setDescription('tmnxBundleImaGrpErrorIcpCells specifies number of ICP cells with HEC or CRC-10 errors.')
tmnxBundleImaGrpLostRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpLostRxIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpLostRxIcpCells.setDescription('tmnxBundleImaGrpLostRxIcpCells specifies the number of missing ICP cells at the expected offset.')
tmnxBundleImaGrpTxOamLablVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpTxOamLablVal.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTxOamLablVal.setDescription('tmnxBundleImaGrpTxOamLablVal specifies near-end value to be transmitted.')
tmnxBundleImaGrpRxOamLablVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpRxOamLablVal.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpRxOamLablVal.setDescription('tmnxBundleImaGrpRxOamLablVal specifies far-end value received.')
tmnxBundleImaGrpAlphaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 23), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpAlphaValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpAlphaValue.setDescription('tmnxBundleImaGrpAlphaValue specifies the number of consecutive ICP cells that need to be detected before moving from the IMA Sync State to the IMA Hunt State.')
tmnxBundleImaGrpBetaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 24), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpBetaValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpBetaValue.setDescription('tmnxBundleImaGrpBetaValue specifies the number of consecutive errored ICP cells that need to be detected before moving from the IMA Sync State to the IMA Hunt State')
tmnxBundleImaGrpGammaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 25), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpGammaValue.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpGammaValue.setDescription('tmnxBundleImaGrpGammaValue specifies the number of consecutive valid ICP cells that need to be detected before moving from the IMA pre-Sync State to the IMA Hunt State.')
tmnxBundleImaGrpNeClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 26), TmnxImaGrpClockModes().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpNeClockMode.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpNeClockMode.setDescription('tmnxBundleImaGrpNeClockMode specifies near-end transmit clock mode.')
tmnxBundleImaGrpFeClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 27), TmnxImaGrpClockModes().clone('ctc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpFeClockMode.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpFeClockMode.setDescription('tmnxBundleImaGrpFeClockMode specifies far-end transmit clock mode.')
tmnxBundleImaGrpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 28), TmnxImaGrpVersion().clone('oneDotOne')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpVersion.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpVersion.setDescription('tmnxBundleImaGrpVersion specifies the IMA Version for this group.')
tmnxBundleImaGrpMaxConfBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpMaxConfBw.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpMaxConfBw.setDescription('tmnxBundleImaGrpMaxConfBw specifies the number of links that is used to determine the maximum configurable bandwidth that is allowed to be used for this IMA group.')
tmnxBundleImaGrpTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 30), TmnxImaTestState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTestState.setDescription("tmnxBundleImaGrpTestState specifies the current state of the test pattern procedure. A value of 'disabled' specifies that the group is currently not running. A value of 'operating' enables the test pattern procedure. The test pattern procedure continues until it is 'disabled'.")
tmnxBundleImaGrpTestMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 31), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestMember.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTestMember.setDescription("tmnxBundleImaGrpTestMember specifies a member link to be used for the test pattern procedure. A value of zero indicates that no member link has been selected. When tmnxBundleImaGrpTestState does not have the value 'disabled', an attempt to set this object will be rejected with an inconsistentValue error.")
tmnxBundleImaGrpTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleImaGrpTestPattern.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpTestPattern.setDescription("tmnxBundleImaGrpTestPattern specifies the Transmit Test Pattern in an IMA group loopback operation. This value may only be changed when tmnxBundleImaGrpTestState is 'disabled'.")
tmnxBundleImaGrpDiffDelayMaxObs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 33), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpDiffDelayMaxObs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpDiffDelayMaxObs.setDescription('tmnxBundleImaGrpDiffDelayMaxObs indicates the latest maximum differential delay observed between links having the least and most link propagation delay among the received links configured in this IMA group.')
tmnxBundleImaGrpLeastDelayLink = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 21, 1, 34), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleImaGrpLeastDelayLink.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleImaGrpLeastDelayLink.setDescription('tmnxBundleImaGrpLeastDelayLink indicates a member link which has the smallest link propagation delay. If this delay has yet to be determined or no member link has been configured, a value of zero is returned.')
tmnxBundleMemberImaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22), )
if mibBuilder.loadTexts: tmnxBundleMemberImaTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaTable.setDescription('The tmnxBundleMemberImaTable has an entry for an IMA link associated with an IMA Group.')
tmnxBundleMemberImaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberImaEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaEntry.setDescription('Each row entry represents an IMA link associated with an IMA Group.')
tmnxBundleMemberImaNeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 1), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxState.setDescription('tmnxBundleMemberImaNeTxState indicates the state of near-end transmit IMA link.')
tmnxBundleMemberImaNeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 2), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxState.setDescription('tmnxBundleMemberImaNeRxState indicates the state of near-end receive IMA link.')
tmnxBundleMemberImaFeTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 3), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxState.setDescription('tmnxBundleMemberImaFeTxState indicates the state of far-end transmit IMA link.')
tmnxBundleMemberImaFeRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 4), TmnxImaLnkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxState.setDescription('tmnxBundleMemberImaFeRxState indicates the state of far-end receive IMA link.')
tmnxBundleMemberImaNeRxFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 5), TmnxImaLnkFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxFailState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxFailState.setDescription('tmnxBundleMemberImaNeRxFailState indicates the IMA link failure reason for the near-end.')
tmnxBundleMemberImaFeRxFailState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 6), TmnxImaLnkFailState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxFailState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxFailState.setDescription('tmnxBundleMemberImaFeRxFailState indicates the IMA link failure reason for the far-end.')
tmnxBundleMemberImaTxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaTxLid.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaTxLid.setDescription('tmnxBundleMemberImaTxLid indicates the Link Identifier assigned to the transmit IMA link.')
tmnxBundleMemberImaRxLid = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxLid.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaRxLid.setDescription('tmnxBundleMemberImaRxLid indicates the Link Identifier used on the receive IMA link.')
tmnxBundleMemberImaViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaViolations.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaViolations.setDescription('tmnxBundleMemberImaViolations indicates the number of ICP violations including errored, invalid or missing ICP cells.')
tmnxBundleMemberImaNeSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeSevErrSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeSevErrSecs.setDescription('tmnxBundleMemberImaNeSevErrSecs indicates the number of one second intervals in which thirty percent or more of the near-end ICP cells are in violation, or link defects have occurred.')
tmnxBundleMemberImaFeSevErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeSevErrSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeSevErrSecs.setDescription('tmnxBundleMemberImaFeSevErrSecs indicates the number of one second intervals in which the far-end contains IMA-RDI defects.')
tmnxBundleMemberImaNeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeUnavailSecs.setDescription('tmnxBundleMemberImaNeUnavailSecs indicates the number of unavailable seconds at the near-end.')
tmnxBundleMemberImaFeUnavailSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeUnavailSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeUnavailSecs.setDescription('tmnxBundleMemberImaFeUnavailSecs indicates the number of unavailable seconds at the near-end.')
tmnxBundleMemberImaNeTxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxUnuseSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxUnuseSecs.setDescription('tmnxBundleMemberImaNeTxUnuseSecs indicates the number of unavailable seconds at the near-end transmit link state machine.')
tmnxBundleMemberImaNeRxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxUnuseSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxUnuseSecs.setDescription('tmnxBundleMemberImaNeRxUnuseSecs indicates the number of unavailable seconds at the near-end receive link state machine.')
tmnxBundleMemberImaFeTxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxUnuseSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxUnuseSecs.setDescription('tmnxBundleMemberImaFeTxUnuseSecs indicates the number of unavailable seconds at the far-end transmit link state machine.')
tmnxBundleMemberImaFeRxUnuseSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxUnuseSecs.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxUnuseSecs.setDescription('tmnxBundleMemberImaFeRxUnuseSecs indicates the number of unavailable seconds at the far-end receive link state machine.')
tmnxBundleMemberImaNeTxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxNumFails.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeTxNumFails.setDescription('tmnxBundleMemberImaNeTxNumFails indicates the number of times that a near-end transmit alarm is set on the IMA link.')
tmnxBundleMemberImaNeRxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxNumFails.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaNeRxNumFails.setDescription('tmnxBundleMemberImaNeRxNumFails indicates the number of times that a near-end receive alarm is set on the IMA link.')
tmnxBundleMemberImaFeTxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxNumFails.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeTxNumFails.setDescription('tmnxBundleMemberImaFeTxNumFails indicates the number of times that a far-end transmit alarm is set on the IMA link.')
tmnxBundleMemberImaFeRxNumFails = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxNumFails.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaFeRxNumFails.setDescription('tmnxBundleMemberImaFeRxNumFails indicates the number of times that a far-end receive alarm is set on the IMA link.')
tmnxBundleMemberImaTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaTxIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaTxIcpCells.setDescription('tmnxBundleMemberImaTxIcpCells indicates the number of ICP cells that have been transmitted on the IMA link.')
tmnxBundleMemberImaRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaRxIcpCells.setDescription('tmnxBundleMemberImaRxIcpCells indicates the number of ICP cells that have been received on the IMA link.')
tmnxBundleMemberImaErrorIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaErrorIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaErrorIcpCells.setDescription('tmnxBundleMemberImaErrorIcpCells indicates the number of ICP cells with HEC or CRC-10 errors.')
tmnxBundleMemberImaLstRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaLstRxIcpCells.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaLstRxIcpCells.setDescription('tmnxBundleMemberImaLstRxIcpCells indicates the number of lost ICP cells at the expected offset.')
tmnxBundleMemberImaOifAnomalies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaOifAnomalies.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaOifAnomalies.setDescription('tmnxBundleMemberImaOifAnomalies indicates the number of OIF anomalies at the near-end.')
tmnxBundleMemberImaRxTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 27), TmnxImaTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestState.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestState.setDescription('tmnxBundleMemberImaRxTestState indicates the current state of the test pattern on this link.')
tmnxBundleMemberImaRxTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestPattern.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaRxTestPattern.setDescription('tmnxBundleMemberImaRxTestPattern indicates the received test pattern value on this link.')
tmnxBundleMemberImaRelDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 22, 1, 29), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberImaRelDelay.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberImaRelDelay.setDescription('tmnxBundleMemberImaRelDelay indicates the latest measured delay on this member link relative to the member link with the least delay within the same IMA group')
tmnxPortScalarObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19))
tmnxL4LoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxL4LoadBalancing.setStatus('current')
if mibBuilder.loadTexts: tmnxL4LoadBalancing.setDescription("The value of tmnxL4LoadBalancing specifies whether layer 4 information, src and dst ports, should be used in the LAG and ECMP hashing algorithm. This is the global system setting that all ports will inherit. When set to 'true', src and dst ports are used in the hashing algorithm. The per port setting of tmnxPortLoadBalanceAlgorithm can override tmnxL4LoadBalancing.")
tmnxLsrIpLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("label-only", 1), ("label-ip", 2), ("ip-only", 3))).clone('label-only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxLsrIpLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: tmnxLsrIpLoadBalancing.setDescription("The value of tmnxLsrIpLoadBalancing specifies whether the IP Header is used in the LAG and ECMP LSR hashing algorithm. This is the global system setting that all ports will inherit. When set to 'label-ip (2)', the IP Header is included in the hashing algorithm. When set to 'ip-only (3)' the IP Header is used exclusively in the hashing algorithm.")
tmnxIpLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 19, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("systemIp", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxIpLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: tmnxIpLoadBalancing.setDescription("The value of tmnxIpLoadBalancing specifies whether or not this node's system IP address is used in the final stage of the load balancing (hashing) algorithm used to choose the LAG member or ECMP route for an outbound packet. If 'systemIp(2)' is selected, this node's system IP address (i.e. TIMETRA-VRTR-MIB::vRiaIpAddress.1.1.1) is used in the final stage of the LAG and ECMP load balancing algorithm. This selection makes it more likely that different SROS nodes in a network will make different load balancing decisions. 'systemIp(2)' is supported on iom3-xp IOMs, equivalent IMMs, and newer IOM and IMM types. When older IOMs/IMMs are present in a system which has 'systemIp(2)' configured, the older IOMs operate in 'standard(1)' mode. If 'standard(1)' is selected, this node's system IP address is not used in the final stage of the LAG and ECMP load balancing algorithm. 'standard(1)' is supported on all IOM and IMM types. The earlier stages of the load balancing algorithm are controlled by tmnxL4LoadBalancing and tmnxLsrIpLoadBalancing (when applicable).")
tmnxDS1PortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23), )
if mibBuilder.loadTexts: tmnxDS1PortTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortTable.setDescription('The tmnxDS1PortTable has an entry for a DS1 physical port.')
tmnxDS1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDS1PortEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortEntry.setDescription("Each row entry represents a physical DS1 port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. Entries in this table will be created automatically when the tmnxMDAAssignedType object is set to the DS1 MDA type The tmnxDS1PortEntry contains attributes that are unique to the 'ds1e1' TmnxPortType. The tmnxPortPortID contains the slot, mda and port numbers encoded into it. For each tmnxDS1PortEntry, there will be a corresponding entry in the tmnxPortTable and the ifTable.")
tmnxDS1PortBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2))).clone('short')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortBuildout.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortBuildout.setDescription("tmnxDS1PortBuildout configures the cable buildout length. A ds1 port has two settings for the DS1 cable buildout: a 'short' setting, for cable lengths of less than or equal to 655 feet, and a 'long' setting for cable lengths of greater than 655 feet. This object applies to copper-cable-based DS1 ports only.")
tmnxDS1PortLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1PortLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortLastChangeTime.setDescription('The tmnxDS1PortLastChangeTime variable contains the sysUpTime value of the most recently modified writable variable in the tmnxDS1PortEntry row for this port.')
tmnxDS1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1", 1), ("e1", 2), ("j1", 3))).clone('ds1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortType.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortType.setDescription("tmnxDS1PortType configures the type of the physical port to 'ds1', 'e1' or 'j1'.")
tmnxDS1PortLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lengthNotApplicable", 1), ("length0To133", 2), ("length134To266", 3), ("length267To399", 4), ("length400To533", 5), ("length534To655", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortLineLength.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortLineLength.setDescription("tmnxDS1PortLineLength configuration only applies to a ds1 port configured with a 'short' buildout. tmnxDS1PortLineLength configures the length of the line (in feet). For line lengths longer than 655 feet configure the ds1 port buildout as 'long'. For 'long' buildout the following values are valid: lengthNotApplicable - Not applicable For 'short' buildout the following values are valid: length0To133 - For line length from 0 to 133 feet length134To266 - For line length from 134 to 266 feet length267To399 - For line length from 267 to 399 feet length400To533 - For line length from 400 to 533 feet length534To655 - For line length from 534 to 655 feet The default for 'long' buildout is 'lengthNotApplicable' while the default for 'short' buildout is 'length0To133'.")
tmnxDS1PortLbo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lboNotApplicable", 1), ("lbo0dB", 2), ("lboNeg7p5dB", 3), ("lboNeg15p0dB", 4), ("lboNeg22p5dB", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxDS1PortLbo.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortLbo.setDescription("tmnxDS1PortLbo configuration only applies to a ds1 port configured with a 'long' buildout. tmnxDS1PortLbo configures the number of decibels(dB) the transmission signal decreases over the line. For 'short' buildout the following values are valid: lboNotApplicable - Not applicable For 'long' buildout the following values are valid: lbo0dB - For 0 dB lboNeg7p5dB - For -7.5 dB lboNeg15p0dB - For -15.0 dB lboNeg22p5dB - For -22.5 dB The default for 'short' build out is 'lboNotApplicable' while the default for 'long' buildout is 'lbo0dB'")
tmnxDS1PortDbGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 23, 1, 6), Integer32()).setUnits('db').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDS1PortDbGain.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1PortDbGain.setDescription("tmnxDS1PortDbGain only applies to a ds1 port configured with a 'long' buildout. tmnxDS1PortDbGain shows the number of decibels the received signal is increased to compensate for loss.")
tmnxPortSchedOverrideTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24), )
if mibBuilder.loadTexts: tmnxPortSchedOverrideTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideTable.setDescription('The tmnxPortSchedOverrideTable has an entry for each port scheduler override configured on this system.')
tmnxPortSchedOverrideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortSchedOverrideEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideEntry.setDescription('Each row represents a particular port-scheduler override. Entries are created and deleted by the user.')
tmnxPortSchedOverrideRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideRowStatus.setDescription('The value of tmnxPortSchedOverrideRowStatus is used for the creation and deletion of port-scheduler overrides. When tmnxPortEgrPortSchedPlcy of the tmnxPortEntry indexed by the same indices of this table is an empty string, creation will fail.')
tmnxPortSchedOverrideSchedName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSchedOverrideSchedName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideSchedName.setDescription('The value of tmnxPortSchedOverrideSchedName indicates the name of the port scheduler policy that this row entry overrides.')
tmnxPortSchedOverrideLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLastChanged.setDescription('The value of tmnxPortSchedOverrideLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tmnxPortSchedOverrideMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 4), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideMaxRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideMaxRate.setDescription('The value of tmnxPortSchedOverrideMaxRate specifies the explicit maximum frame based bandwidth limit. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyMaxRate.')
tmnxPortSchedOverrideLvl1PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 5), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1PIR.setDescription('The value of tmnxPortSchedOverrideLvl1PIR specifies the total bandwidth limit, PIR, for priority level 1. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl1PIR.')
tmnxPortSchedOverrideLvl1CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 6), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl1CIR.setDescription('The value of tmnxPortSchedOverrideLvl1CIR specifies the within-cir bandwidth limit for priority level 1. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl1CIR.')
tmnxPortSchedOverrideLvl2PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 7), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2PIR.setDescription('The value of tmnxPortSchedOverrideLvl2PIR specifies the total bandwidth limit, PIR, for priority level 2. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl2PIR.')
tmnxPortSchedOverrideLvl2CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 8), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl2CIR.setDescription('The value of tmnxPortSchedOverrideLvl2CIR specifies the within-cir bandwidth limit for priority level 2. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl2CIR.')
tmnxPortSchedOverrideLvl3PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 9), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3PIR.setDescription('The value of tmnxPortSchedOverrideLvl3PIR specifies the total bandwidth limit, PIR, for priority level 3. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl3PIR.')
tmnxPortSchedOverrideLvl3CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 10), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl3CIR.setDescription('The value of tmnxPortSchedOverrideLvl3CIR specifies the within-cir bandwidth limit for priority level 3. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl3CIR.')
tmnxPortSchedOverrideLvl4PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 11), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4PIR.setDescription('The value of tmnxPortSchedOverrideLvl4PIR specifies the total bandwidth limit, PIR, for priority level 4. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl4PIR.')
tmnxPortSchedOverrideLvl4CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 12), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl4CIR.setDescription('The value of tmnxPortSchedOverrideLvl4CIR specifies the within-cir bandwidth limit for priority level 4. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl4CIR.')
tmnxPortSchedOverrideLvl5PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 13), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5PIR.setDescription('The value of tmnxPortSchedOverrideLvl5PIR specifies the total bandwidth limit, PIR, for priority level 5. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl5PIR.')
tmnxPortSchedOverrideLvl5CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 14), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl5CIR.setDescription('The value of tmnxPortSchedOverrideLvl5CIR specifies the within-cir bandwidth limit for priority level 5. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl5CIR.')
tmnxPortSchedOverrideLvl6PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 15), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6PIR.setDescription('The value of tmnxPortSchedOverrideLvl6PIR specifies the total bandwidth limit, PIR, for priority level 6. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl6PIR.')
tmnxPortSchedOverrideLvl6CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 16), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl6CIR.setDescription('The value of tmnxPortSchedOverrideLvl6CIR specifies the within-cir bandwidth limit for priority level 6. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl6CIR.')
tmnxPortSchedOverrideLvl7PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 17), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7PIR.setDescription('The value of tmnxPortSchedOverrideLvl7PIR specifies the total bandwidth limit, PIR, for priority level 7. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl7PIR.')
tmnxPortSchedOverrideLvl7CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 18), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl7CIR.setDescription('The value of tmnxPortSchedOverrideLvl7CIR specifies the within-cir bandwidth limit for priority level 7. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl7CIR.')
tmnxPortSchedOverrideLvl8PIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 19), TPortSchedulerPIRRate().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8PIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8PIR.setDescription('The value of tmnxPortSchedOverrideLvl8PIR specifies the total bandwidth limit, PIR, for priority level 8. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl8PIR.')
tmnxPortSchedOverrideLvl8CIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 20), TPortSchedulerCIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8CIR.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideLvl8CIR.setDescription('The value of tmnxPortSchedOverrideLvl8CIR specifies the within-cir bandwidth limit for priority level 8. This object overrides TIMETRA-QOS-MIB::tPortSchedulerPlcyLvl8CIR.')
tmnxPortSchedOverrideFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 24, 1, 21), Bits().clone(namedValues=NamedValues(("maxRate", 0), ("lvl1PIR", 1), ("lvl1CIR", 2), ("lvl2PIR", 3), ("lvl2CIR", 4), ("lvl3PIR", 5), ("lvl3CIR", 6), ("lvl4PIR", 7), ("lvl4CIR", 8), ("lvl5PIR", 9), ("lvl5CIR", 10), ("lvl6PIR", 11), ("lvl6CIR", 12), ("lvl7PIR", 13), ("lvl7CIR", 14), ("lvl8PIR", 15), ("lvl8CIR", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortSchedOverrideFlags.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedOverrideFlags.setDescription("The value of tmnxPortSchedOverrideFlags specifies the set of attributes whose values have been overridden via management on this port scheduler. Clearing a given flag will return the corresponding overridden attribute to the value defined in the port's port-scheduler policy.")
tmnxBPGrpAssocTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25), )
if mibBuilder.loadTexts: tmnxBPGrpAssocTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBPGrpAssocTable.setDescription('The tmnxBPGrpAssocTable has an entry for each Bundle Protection Group created on the system.')
tmnxBPGrpAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBPGrpAssocEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBPGrpAssocEntry.setDescription('Each row displays the relationship between a Bundle Protection group and its working and protection bundle.')
tmnxBPGrpAssocWorkingBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 1), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocWorkingBundleID.setStatus('current')
if mibBuilder.loadTexts: tmnxBPGrpAssocWorkingBundleID.setDescription('tmnxBPGrpAssocWorkingBundleID identifies the working bundle. A value of zero is given if no working bundle is associated with the given tmnxBundleBundleID.')
tmnxBPGrpAssocProtectBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 2), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocProtectBundleID.setStatus('current')
if mibBuilder.loadTexts: tmnxBPGrpAssocProtectBundleID.setDescription('tmnxBPGrpAssocProtectBundleID identifies the protection bundle. A value of zero is given if no protection bundle is associated with the given tmnxBundleBundleID.')
tmnxBPGrpAssocActiveBundleID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 25, 1, 3), TmnxBundleID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBPGrpAssocActiveBundleID.setStatus('current')
if mibBuilder.loadTexts: tmnxBPGrpAssocActiveBundleID.setDescription('tmnxBPGrpAssocActiveBundleID identifies the bundle that is considered the active bundle. This bundle contains the members that are part of the active aps port. A value of zero is given if no bundle is considered active.')
tmnxBundleMlpppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26), )
if mibBuilder.loadTexts: tmnxBundleMlpppTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppTable.setDescription('The tmnxBundleMlpppTable contains MLPPP specific data.')
tmnxBundleMlpppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleMlpppEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppEntry.setDescription('Each row entry contains data on an MLPPP Bundle.')
tmnxBundleMlpppEndpointID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointID.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointID.setDescription("tmnxBundleMlpppEndpointID indentifies the Endpoint Discriminator identifier value within the specified tmnxBundleMlpppEndpointIDClass. The object tmnxPortAdminStatus must be set to 'outOfService' to change this value.")
tmnxBundleMlpppEndpointIDClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 2), TmnxMlpppEndpointIdClass()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointIDClass.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppEndpointIDClass.setDescription("tmnxBundleMlpppEndpointIDClass specifies the Link Control Protocol Endpoint Descriminator Class field type of the tmnxBundleMlpppEndpointID. The object tmnxPortAdminStatus must be set to 'outOfService' to change this value. Bundle DEFVAL Physical MLPPP Bundle ieee802dot1GlobalMacAddress (3) MLPPP Bundle Protection Group ipAddress (2)")
tmnxBundleMlpppClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppClassCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppClassCount.setDescription("The value of tmnxBundleMlpppClassCount specifies whether Multiclass MLPPP is enabled on a bundle with a tmnxBundleType of 'mlppp' and when enabled what is the number of classes to be negotiated/supported over the MLPPP bundle. The value of 0 disables multiclass MLPPP including negotiation in the PPP protocol. All other values specify the number of classes to be supported on a given multiclass bundle and enable Multiclass MLPPP negotiation on that bundle. Non-zero values supported are platform/MDA specific. The value of tmnxBundleMlpppClassCount must be set to 0 and cannot be changed when LFI is enabled on the bundle (see tmnxBundleLFI object in tmnxBundleTable). The value of tmnxBundleMlpppClassCount may be modified only when tmnxBundleNumLinks is zero. To set the value of tmnxBundleMlpppClassCount to a value greater than 4, the long sequence format must be enabled on the bundle (see tmnxBundleShortSequence object in tmnxBundleTable). Changing the value of tmnxBundleMlpppClassCount resets the values of tmnxBundleMlpppIngQoSProfId and tmnxBundleMlpppEgrQoSProfId to their defaults")
tmnxBundleMlpppIngQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 4), TMlpppQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppIngQoSProfId.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppIngQoSProfId.setDescription('tmnxBundleMlpppIngQoSProfId specifies ingress QoS profile to be used for the incoming traffic over this MLPPP bundle. The value of tmnxBundleMlpppIngQoSProfId may be modified only when the value of tmnxBundleNumLinks is 0. The value of tmnxBundleMlpppIngQoSProfId of 0 indicates a default QoS profile is used as applicable to a given hardware and the configured value of tmnxBundleMlpppClassCount.')
tmnxBundleMlpppEgrQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 5), TMlpppQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppEgrQoSProfId.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppEgrQoSProfId.setDescription('tmnxBundleMlpppEgrQoSProfId specifies egress QoS profile to be used for the outgoing traffic over this MLPPP bundle. The value of tmnxBundleMlpppEgrQoSProfId may be modified only when tmnxBundleNumLinks is zero. The value of tmnxBundleMlpppEgrQoSProfId of 0 indicates a default profile is used as applicable to a given hardware and the configured value of tmnxBundleMlpppClassCount.')
tmnxBundleMlpppMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 6), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppMagicNumber.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppMagicNumber.setDescription("tmnxBundleMlpppMagicNumber specifies whether or not the bundle will detect a loopback scenario on member links and take a looped back member links out of service. A value of 'enabled (1)' will detect loopbacks.")
tmnxBundleMlpppStatelessApsSwo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 26, 1, 7), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlpppStatelessApsSwo.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlpppStatelessApsSwo.setDescription("tmnxBundleMlpppStatelessApsSwo specifies whether the bundle will perform a statefull or a stateless APS switchover. The value of tmnxBundleMlpppStatelessApsSwo must be set to 'disabled (2)' and cannot be changed for normal mlppp bundles. The value of tmnxBundleMlpppStatelessApsSwo may be changed for APS bundle protection groups. A stateless switchover implies that PPP is renegotiated on each member link after the switchover. PPP negotiations may take a few seconds to complete. A statefull switchover implies that after an APS switchover the PPP state of the bundle will be restored based on the bpgrp bundle state before the switchover. A value of 'enabled (1)' will configure stateless APS switchovers.")
tmnxHsmdaPortSchOvrTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 27), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrTblLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrTblLastChngd.setDescription('The value of tmnxHsmdaPortSchOvrTblLastChngd indicates the sysUpTime at the time of the last modification of tmnxHsmdaPortSchOvrTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxHsmdaPortSchOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28), )
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrTable.setDescription('The tmnxHsmdaPortSchOvrTable has an entry for each port-level HSMDA scheduler override configured on this system.')
tmnxHsmdaPortSchOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrEntry.setDescription('Each row represents a particular port-level HSMDA scheduler override. Entries are created and deleted by the user.')
tmnxHsmdaPortSchOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrRowStatus.setDescription("The value of tmnxHsmdaPortSchOvrRowStatus is used for the creation and deletion of port-level HSMDA scheduler overrides. When the tmnxMDAAssignedType of the tmnxPortEntry indexed by the same indices of this table is a non-HSMDA MDA Type, creation will fail and return a 'noCreation' error.")
tmnxHsmdaPortSchOvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrLastChanged.setDescription('The value of tmnxHsmdaPortSchOvrLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxHsmdaPortSchOvrMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 3), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrMaxRate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrMaxRate.setDescription('The value of tmnxHsmdaPortSchOvrMaxRate specifies the explicit maximum frame based bandwidth limit for this HSMDA port scheduler. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyMaxRate.')
tmnxHsmdaPortSchOvrGrp1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 4), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrGrp1Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrGrp1Rate.setDescription('The value of tmnxHsmdaPortSchOvrGrp1Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for group 1 for this HSMDA port scheduler. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyGrp1Rate.')
tmnxHsmdaPortSchOvrGrp2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 5), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrGrp2Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrGrp2Rate.setDescription('The value of tmnxHsmdaPortSchOvrGrp2Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for group 2 for this HSMDA port scheduler. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyGrp2Rate.')
tmnxHsmdaPortSchOvrClass1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 6), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass1Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass1Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass1Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl1Rate.')
tmnxHsmdaPortSchOvrClass1WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 7), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass1WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass1WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass1WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass1WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl1GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl1WgtInGrp.')
tmnxHsmdaPortSchOvrClass2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 8), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass2Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass2Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass2Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl2Rate.')
tmnxHsmdaPortSchOvrClass2WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 9), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass2WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass2WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass2WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass2WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl2GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl2WgtInGrp.')
tmnxHsmdaPortSchOvrClass3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 10), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass3Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass3Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass3Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl3Rate.')
tmnxHsmdaPortSchOvrClass3WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 11), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass3WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass3WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass3WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass3WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl3GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl3WgtInGrp.')
tmnxHsmdaPortSchOvrClass4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 12), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass4Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass4Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass4Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl4Rate.')
tmnxHsmdaPortSchOvrClass4WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 13), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass4WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass4WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass4WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass4WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl4GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl4WgtInGrp.')
tmnxHsmdaPortSchOvrClass5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 14), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass5Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass5Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass5Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl5Rate.')
tmnxHsmdaPortSchOvrClass5WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 15), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass5WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass5WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass5WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass5WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl5GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl5WgtInGrp.')
tmnxHsmdaPortSchOvrClass6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 16), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass6Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass6Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass6Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl6Rate.')
tmnxHsmdaPortSchOvrClass6WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 17), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass6WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass6WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass6WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass6WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl6GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl6WgtInGrp.')
tmnxHsmdaPortSchOvrClass7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 18), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass7Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass7Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass7Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl7Rate.')
tmnxHsmdaPortSchOvrClass7WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 19), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass7WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass7WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass7WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass7WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl7GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl7WgtInGrp.')
tmnxHsmdaPortSchOvrClass8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 20), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass8Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass8Rate.setDescription('The value of tmnxHsmdaPortSchOvrClass8Rate specifies the explicit maximum frame based bandwidth limit, in megabits per second, for this HSMDA port scheduler policy level. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl8Rate.')
tmnxHsmdaPortSchOvrClass8WtInGp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 28, 1, 21), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass8WtInGp.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaPortSchOvrClass8WtInGp.setDescription('The value of tmnxHsmdaPortSchOvrClass8WtInGp specifies the weight the HSMDA port scheduler policy should apply to this policy level within the group it belongs to. The value of tmnxHsmdaPortSchOvrClass8WtInGp will only be used if this policy level has been assigned to a group by setting tHsmdaSchedulerPlcyLvl8GrpId to a non-zero value. A value of -2 indicates no override. This object overrides TIMETRA-QOS-MIB::tHsmdaSchedulerPlcyLvl8WgtInGrp.')
tmnxPortEgrShaperTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrShaperTblLastChanged.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEgrShaperTblLastChanged.setDescription('The value of tmnxPortEgrShaperTblLastChanged indicates the sysUpTime at the time of the last modification of tmnxPortEgrShaperTable. If no changes were made to the table since the last re-initialization of the local network management subsystem, then this object contains a zero value. This object is obsoleted in 10.0 Release.')
tmnxPortEgrShaperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30), )
if mibBuilder.loadTexts: tmnxPortEgrShaperTable.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEgrShaperTable.setDescription('The tmnxPortEgrShaperTable has an entry for each port-level egress secondary shaper configured on this system. This table is obsoleted in 10.0 Release.')
tmnxPortEgrShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrShaperName"))
if mibBuilder.loadTexts: tmnxPortEgrShaperEntry.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEgrShaperEntry.setDescription('Each row represents a particular port-level egress secondary shaper. Entries are created and deleted by the user.')
tmnxPortEgrShaperName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxPortEgrShaperName.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEgrShaperName.setDescription('The port egress shaper named is used an index to the table entry.')
tmnxPortEgrShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrShaperRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEgrShaperRowStatus.setDescription('The value of tmnxPortEgrShaperRowStatus is used for the creation and deletion of entries in the tmnxPortEgrShaperTable.')
tmnxPortEgrShaperLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrShaperLastChanged.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEgrShaperLastChanged.setDescription('The value of tmnxPortEgrShaperLastChanged indicates the sysUpTime at the time of the last modification of this entry. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxPortEgrShaperRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 30, 1, 4), TSecondaryShaper10GPIRRate().clone(-1)).setUnits('Mbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrShaperRate.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEgrShaperRate.setDescription('The value of tmnxPortEgrShaperRate specifies the explicit maximum frame based bandwidth limit, in megabits per second, of this egress port secondary shaper policy.')
tmnxDigitalDiagMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31), )
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorTable.setDescription('The tmnxDigitalDiagMonitorTable has an entry for each SFF in the system that supports Digital Diagnostic Monitoring (DDM). The table is indexed by TmnxPortID. Each row in this table is dynamically added and removed internally by the system based on the presence or absence of DDM capable SFF components.')
tmnxDigitalDiagMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorEntry.setDescription('Each row represents a particular SFF that supports Digital Diagnostic Monitoring. Entries are created and deleted internally by the system.')
tmnxDDMTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTemperature.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTemperature.setDescription('The value of tmnxDDMTemperature indicates the current temperature of the SFF in 1/256th degrees Celsius. If the SFF is externally calibrated, the objects tmnxDDMExtCalTemperatureSlope and tmnxDDMExtCalTemperatureOffset affect the temperature calculation. The formula for translating between the value of tmnxDDMTemperature and degrees Celsius is: Internally Calibrated only: tmnxDDMTemperature / 256 Externally Calibrated: (tmnxDDMTemperature * (tmnxDDMExtCalTemperatureSlope / 256) + tmnxDDMExtCalTemperatureOffset) / 256 For example (internally calibrated SFP): The SNMP value 5734 is 22.4 degrees Celsius.')
tmnxDDMTempLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempLowWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTempLowWarning.setDescription('The value of tmnxDDMTempLowWarning indicates the temperature of the SFF in degrees Celsius that triggers a low-warning.')
tmnxDDMTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTempLowAlarm.setDescription('The value of tmnxDDMTempLowAlarm indicates the temperature of the SFF in degrees Celsius that triggers a low-alarm.')
tmnxDDMTempHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempHiWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTempHiWarning.setDescription('The value of tmnxDDMTempHiWarning indicates the temperature of the SFF in degrees Celsius that triggers a hi-warning.')
tmnxDDMTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTempHiAlarm.setDescription('The value of tmnxDDMTempHiAlarm indicates the temperature of the SFF in degrees Celsius that triggers a hi-alarm.')
tmnxDDMSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltage.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMSupplyVoltage.setDescription('The value of tmnxDDMSupplyVoltage indicates the current supply voltage of the SFF in 1/10000 of a Volt(V). If the SFF is externally calibrated, the objects tmnxDDMExtCalVoltageSlope and tmnxDDMExtCalVoltageOffset affect the voltage calculation. The formula for translating between the value of tmnxDDMSupplyVoltage and Voltage is: Internally Calibrated only: tmnxDDMSupplyVoltage / 10000 Externally Calibrated: (tmnxDDMSupplyVoltage * (tmnxDDMExtCalVoltageSlope / 256) + tmnxDDMExtCalVoltageOffset) / 10000 For example (internally calibrated SFP): The SNMP value 32851 is 3.2851 Volts (V).')
tmnxDDMSupplyVoltageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowWarning.setDescription('The value of tmnxDDMSupplyVoltageLowWarning indicates the supply voltage of the SFF in micro-Volts (uV) that triggers a low-warning.')
tmnxDDMSupplyVoltageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageLowAlarm.setDescription('The value of tmnxDDMSupplyVoltageLowAlarm indicates the supply voltage of the SFF in micro-Volts (uV) that triggers a low-alarm.')
tmnxDDMSupplyVoltageHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiWarning.setDescription('The value of tmnxDDMSupplyVoltageHiWarning indicates the supply voltage of the SFF in micro-Volts (uV) that triggers a hi-warning.')
tmnxDDMSupplyVoltageHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMSupplyVoltageHiAlarm.setDescription('The value of tmnxDDMSupplyVoltageHiAlarm indicates the supply voltage of the SFF in micro-Volts (uV) that triggers a hi-alarm.')
tmnxDDMTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrent.setDescription('The value of tmnxDDMTxBiasCurrent indicates the current Transmit Bias Current of the SFF in 1/500 milliamperes (mA). If the SFF is externally calibrated, the objects tmnxDDMExtCalTxLaserBiasSlope and tmnxDDMExtCalTxLaserBiasOffset affect the ampere calculation. The formula for translating between the value of tmnxDDMTxBiasCurrent and amperes is: Internally Calibrated only: tmnxDDMTxBiasCurrent / 500 Externally Calibrated: (tmnxDDMTxBiasCurrent * (tmnxDDMExtCalTxLaserBiasSlope / 256) + tmnxDDMExtCalTxLaserBiasOffset) / 500 For example (internally calibrated SFP): The SNMP value 2565 is 5.1 milliamperes (mA).')
tmnxDDMTxBiasCurrentLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowWarning.setDescription('The value of tmnxDDMTxBiasCurrentLowWarning indicates the Transmit Bias Current of the SFF in micro-Amperes (uA) that triggers a low-warning.')
tmnxDDMTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentLowAlarm.setDescription('The value of tmnxDDMTxBiasCurrentLowAlarm indicates the Transmit Bias Current of the SFF in micro-Amperes (uA) that triggers a low-alarm.')
tmnxDDMTxBiasCurrentHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiWarning.setDescription('The value of tmnxDDMTxBiasCurrentHiWarning indicates the Transmit Bias Current of the SFF in micro-Amperes (uA) that triggers a hi-warning.')
tmnxDDMTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxBiasCurrentHiAlarm.setDescription('The value of tmnxDDMTxBiasCurrentHiAlarm indicates the Transmit Bias Current of the SFF in micro-Amperes (uA) that triggers a hi-alarm.')
tmnxDDMTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxOutputPower.setDescription('The value of tmnxDDMTxOutputPower indicates the current Output Power of the SFF in one tenths of a micro-Watt (uW). For example: Using the SNMP value of 790, and using units of tenths of microwatt, 790 becomes 79 microwatts or 0.079 milliwatts. Converting to dBm: 10 x log10(0.079) = -11.0 dBm')
tmnxDDMTxOutputPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowWarning.setDescription('The value of tmnxDDMTxOutputPowerLowWarning indicates the Output Power of the SFF in one tenths of a micro-Watt (uW) that triggers a low-warning.')
tmnxDDMTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerLowAlarm.setDescription('The value of tmnxDDMTxOutputPowerLowAlarm indicates the Output Power of the SFF in one tenths of a micro-Watt (uW) that triggers a low-alarm.')
tmnxDDMTxOutputPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiWarning.setDescription('The value of tmnxDDMTxOutputPowerHiWarning indicates the Output Power of the SFF in one tenths of a micro-Watt (uW) that triggers a hi-warning.')
tmnxDDMTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMTxOutputPowerHiAlarm.setDescription('The value of tmnxDDMTxOutputPowerHiAlarm indicates the Output Power of the SFF in one tenths of a micro-Watt (uW) that triggers a hi-alarm.')
tmnxDDMRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPower.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMRxOpticalPower.setDescription('The value of tmnxDDMRxOpticalPower indicates the current Received Optical Power of the SFF in one tenths of a micro-Watt (uW). For example: Using the SNMP value of 790, and using units of tenths of microwatt, 790 becomes 79 microwatts or 0.079 milliwatts. Converting to dBm: 10 x log10(0.079) = -11.0 dBm')
tmnxDDMRxOpticalPowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowWarning.setDescription('The value of tmnxDDMRxOpticalPowerLowWarning indicates the Received Optical Power of the SFF in one tenths of a micro-Watt (uW) that triggers a low-warning.')
tmnxDDMRxOpticalPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerLowAlarm.setDescription('The value of tmnxDDMRxOpticalPowerLowAlarm indicates the Received Optical Power of the SFF in one tenths of a micro-Watt (uW) that triggers a low-alarm.')
tmnxDDMRxOpticalPowerHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiWarning.setDescription('The value of tmnxDDMRxOpticalPowerHiWarning indicates the Received Optical Power of the SFF in one tenths of a micro-Watt (uW) that triggers a hi-warning.')
tmnxDDMRxOpticalPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerHiAlarm.setDescription('The value of tmnxDDMRxOpticalPowerHiAlarm indicates the Received Optical Power of the SFF in one tenths of a micro-Watt (uW) that triggers a hi-alarm.')
tmnxDDMRxOpticalPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oma", 0), ("average", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerType.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMRxOpticalPowerType.setDescription('The value of tmnxDDMRxOpticalPowerType indicates whether the tmnxDDMRxOpticalPower was taken as an average, or as an Optical Modulation Amplitude (OMA).')
tmnxDDMAux1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux1.setDescription('The value of tmnxDDMAux1 indicates the Manufacturer specific Auxiliary 1 information of the XFP.')
tmnxDDMAux1LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1LowWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux1LowWarning.setDescription('The value of tmnxDDMAux1LowWarning indicates the Manufacturer specific Auxiliary 1 low-warning threshold for the XFP.')
tmnxDDMAux1LowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1LowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux1LowAlarm.setDescription('The value of tmnxDDMAux1LowAlarm indicates the Manufacturer specific Auxiliary 1 low-alarm threshold for the XFP.')
tmnxDDMAux1HiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1HiWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux1HiWarning.setDescription('The value of tmnxDDMAux1HiWarning indicates the Manufacturer specific Auxiliary 1 hi-warning threshold for the XFP.')
tmnxDDMAux1HiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1HiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux1HiAlarm.setDescription('The value of tmnxDDMAux1HiAlarm indicates the Manufacturer specific Auxiliary 1 hi-alarm threshold for the XFP.')
tmnxDDMAux1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("adp-bias-voltage", 1), ("reserved-2", 2), ("tec-current", 3), ("laser-temp", 4), ("laser-wavelength", 5), ("voltage-50", 6), ("voltage-33", 7), ("voltage-18", 8), ("voltage-52", 9), ("current-50", 10), ("reserved-11", 11), ("reserved-12", 12), ("current-33", 13), ("current-18", 14), ("current-52", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux1Type.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux1Type.setDescription('The value of tmnxDDMAux1Type indicates the measurement type of the Manufacturer specific Auxiliary 1 information of the XFP: none (0) - not specified. adp-bias-voltage (1) - LSB is 10mV. reserved-2 (2) - reserved for future use. tec-current (3) - LSB is 100uA. laser-temp (4) - degrees Celsius(C). laser-wavelength (5) - LSB is 0.05 nm. voltage-50 (6) - 5.0 supply voltage, LSB=100uV. voltage-33 (7) - 3.3 supply voltage, LSB=100uV. voltage-18 (8) - 1.8 supply voltage, LSB=100uV, voltage-52 (9) - -5.2 supply voltage, LSB=100uV. current-50 (10) - 5.0V supply current, LSB=100uA. reserved-11 (11) - reserved for future use. reserved-12 (12) - reserved for future use. current-33 (13) - 3.3V supply current, LSB=100uA. current-18 (14) - 1.8V supply current, LSB=100uA. current-52 (15) - -5.2V supply current, LSB=100uA.')
tmnxDDMAux2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux2.setDescription('The value of tmnxDDMAux2 indicates the Manufacturer specific Auxiliary 2 information of the SFF.')
tmnxDDMAux2LowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2LowWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux2LowWarning.setDescription('The value of tmnxDDMAux2LowWarning indicates the Manufacturer specific Auxiliary 2 low-warning threshold for the XFP.')
tmnxDDMAux2LowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2LowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux2LowAlarm.setDescription('The value of tmnxDDMAux2LowAlarm indicates the Manufacturer specific Auxiliary 2 low-alarm threshold for the XFP.')
tmnxDDMAux2HiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2HiWarning.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux2HiWarning.setDescription('The value of tmnxDDMAux2HiWarning indicates the Manufacturer specific Auxiliary 2 hi-warning threshold for the XFP.')
tmnxDDMAux2HiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2HiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux2HiAlarm.setDescription('The value of tmnxDDMAux2HiAlarm indicates the Manufacturer specific Auxiliary 2 hi-alarm threshold for the XFP.')
tmnxDDMAux2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 0), ("adp-bias-voltage", 1), ("reserved-2", 2), ("tec-current", 3), ("laser-temp", 4), ("laser-wavelength", 5), ("voltage-50", 6), ("voltage-33", 7), ("voltage-18", 8), ("voltage-52", 9), ("current-50", 10), ("reserved-11", 11), ("reserved-12", 12), ("current-33", 13), ("current-18", 14), ("current-52", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMAux2Type.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMAux2Type.setDescription('The value of tmnxDDMAux2Type indicates the measurement type of the Manufacturer specific Auxiliary 2 information of the XFP: none (0) - not specified. adp-bias-voltage (1) - LSB is 10mV. reserved-2 (2) - reserved for future use. tec-current (3) - LSB is 100uA. laser-temp (4) - degrees Celsius(C). laser-wavelength (5) - LSB is 0.05 nm. voltage-50 (6) - 5.0 supply voltage, LSB=100uV. voltage-33 (7) - 3.3 supply voltage, LSB=100uV. voltage-18 (8) - 1.8 supply voltage, LSB=100uV, voltage-52 (9) - -5.2 supply voltage, LSB=100uV. current-50 (10) - 5.0V supply current, LSB=100uA. reserved-11 (11) - reserved for future use. reserved-12 (12) - reserved for future use. current-33 (13) - 3.3V supply current, LSB=100uA. current-18 (14) - 1.8V supply current, LSB=100uA. current-52 (15) - -5.2V supply current, LSB=100uA.')
tmnxDDMFailedThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 39), TmnxDigitalDiagnosticFailureBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMFailedThresholds.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMFailedThresholds.setDescription('The value of tmnxDDMFailedThresholds indicates which objects of the monitored SFF is in a failed or cleared threshold state. A set bit indicates that the specified threshold has been exceeded.')
tmnxDDMExternallyCalibrated = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExternallyCalibrated.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExternallyCalibrated.setDescription('The value of tmnxDDMExternallyCalibrated indicates whether the SFP was externally calibrated (true) or internally calibrated (false).')
tmnxDDMExtCalRxPower4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 41), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower4.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower4.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower4.setDescription("The value of tmnxDDMExtCalRxPower4 indicates the Rx_PWR(4) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalRxPower3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 42), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower3.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower3.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower3.setDescription("The value of tmnxDDMExtCalRxPower3 indicates the Rx_PWR(3) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8462 Rev 10.2.")
tmnxDDMExtCalRxPower2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower2.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower2.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower2.setDescription("The value of tmnxDDMExtCalRxPower2 indicates the Rx_PWR(2) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalRxPower1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower1.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower1.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower1.setDescription("The value of tmnxDDMExtCalRxPower1 indicates the Rx_PWR(1) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalRxPower0 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 45), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower0.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower0.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalRxPower0.setDescription("The value of tmnxDDMExtCalRxPower0 indicates the Rx_PWR(0) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalTxLaserBiasSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasSlope.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasSlope.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasSlope.setDescription("The value of tmnxDDMExtCalTxLaserBiasSlope indicates the Tx_l(Slope) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalTxLaserBiasOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasOffset.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasOffset.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalTxLaserBiasOffset.setDescription("The value of tmnxDDMExtCalTxLaserBiasOffset indicates the Tx_l(Offset) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalTxPowerSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerSlope.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerSlope.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerSlope.setDescription("The value of tmnxDDMExtCalTxPowerSlope indicates the Tx_PWR(Slope) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalTxPowerOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerOffset.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerOffset.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalTxPowerOffset.setDescription("The value of tmnxDDMExtCalTxPowerOffset indicates the Tx_PWR(Offset) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalTemperatureSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureSlope.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureSlope.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureSlope.setDescription("The value of tmnxDDMExtCalTemperatureSlope indicates the T(Slope) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalTemperatureOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureOffset.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureOffset.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalTemperatureOffset.setDescription("The value of tmnxDDMExtCalTemperatureOffset indicates the T(Offset) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalVoltageSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageSlope.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageSlope.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageSlope.setDescription("The value of tmnxDDMExtCalVoltageSlope indicates the V(Slope) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tmnxDDMExtCalVoltageOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 31, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageOffset.setReference('SFF-8472 Rev 10.2')
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageOffset.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMExtCalVoltageOffset.setDescription("The value of tmnxDDMExtCalVoltageOffset indicates the V(Slope) value as specified in Table 3.16 in the SFF Committee Standard's document SFF-8472 Rev 10.2.")
tPortAccIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQGrpTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpTableLastChgd.setDescription('The value of tPortAccIngQGrpTableLastChgd indicates the timestamp of last change to the tPortAccIngQGrpTable.')
tPortAccIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33), )
if mibBuilder.loadTexts: tPortAccIngQGrpTable.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpTable.setDescription('The value of tPortAccIngQGrpTable defines access Ingress Queue Group Table for providing, via SNMP, the capability of defining the port specific queue groups from the queue-groups existing in the TIMETRA-QOS-MIB::tQosIngQGroupTable.')
tPortAccIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"))
if mibBuilder.loadTexts: tPortAccIngQGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpEntry.setDescription('The value of tPortAccIngQGrpEntry defines an entry in the tPortAccIngQGrpTable. Entries are created/deleted in this table by SNMP sets to tPortAccIngQGrpRowStatus.')
tPortAccIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccIngQGrpName.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpName.setDescription('The value of tPortAccIngQGrpName defines the port Ingress Queue Group name. It uniquely identifies a port ingress queue group in the managed system.')
tPortAccIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tPortAccIngQGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpRowStatus.setDescription('The value of tPortAccIngQGrpRowStatus allows entries to be created and deleted in the tPortAccIngQGrpTable. The creation of an entry in this table will succeed only if the queue-group being created exists in TIMETRA-QOS-MIB::tQosIngQGroupTable.')
tPortAccIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQGrpLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpLastChgd.setDescription('The value of tPortAccIngQGrpLastChgd indicates the value of sysUpTime when the queue entry was last modified.')
tPortAccIngQGrpSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpSchedPol.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpSchedPol.setDescription('The value of tPortAccIngQGrpSchedPol specifies the name of the scheduler-policy to be used with this port ingress queue-group.')
tPortAccIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpAcctgPolId.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpAcctgPolId.setDescription('The value of tPortAccIngQGrpAcctgPolId specifies the accounting-policy to be used with this port ingress queue-group. A non-zero value indicates the tmnxLogApPolicyId index identifying the policy entry in the tmnxLogApTable from the TIMETRA-LOG-MIB which is associated with this queue-group. The value zero indicates that the agent should use the default accounting policy, if one exists.')
tPortAccIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpCollectStats.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpCollectStats.setDescription('The value of tPortAccIngQGrpCollectStats specifies whether statistics should be collected on this port ingress queue-group.')
tPortAccIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 33, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQGrpDescr.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQGrpDescr.setDescription('The value of tPortAccIngQGrpDescr specifies the description for this port queue-group.')
tPortAccIngQOverTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 34), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQOverTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverTableLastChgd.setDescription('The value of tPortAccIngQOverTableLastChgd indicates the timestamp of last change to the tPortAccIngQOverTable.')
tPortAccIngQOverTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35), )
if mibBuilder.loadTexts: tPortAccIngQOverTable.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverTable.setDescription('The tPortAccIngQOverTable has an entry for each access port queue override configured on this system.')
tPortAccIngQOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQOverQueue"))
if mibBuilder.loadTexts: tPortAccIngQOverEntry.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverEntry.setDescription('Each row represents a particular port-queue override. Entries are created and deleted by the user.')
tPortAccIngQOverQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tPortAccIngQOverQueue.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverQueue.setDescription('The value of tPortAccIngQOverQueue specifies the queue ID which is used as the fourth index to the table entry.')
tPortAccIngQOverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverRowStatus.setDescription('The value of tPortAccIngQOverRowStatus is used for the creation and deletion of port-queue overrides. Row creation will fail if there is no entry in the TIMETRA-QOS-MIB::tQosIngQueueTable with the same index values as the last two indices of this table (tPortAccIngQGrpName.tPortAccIngQOverQueue).')
tPortAccIngQOverLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngQOverLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverLastChanged.setDescription('The value of tPortAccIngQOverLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tPortAccIngQOverCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 4), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverCBS.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverCBS.setDescription('The value of tPortAccIngQOverCBS specifies the amount of reserved buffer space for the queue.')
tPortAccIngQOverMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 5), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverMBS.setStatus('obsolete')
if mibBuilder.loadTexts: tPortAccIngQOverMBS.setDescription('The value of tPortAccIngQOverMBS specifies the maximum amount of buffer space allowed for the queue. This object is replaced with tPortAccIngQOverMBSBytes object.')
tPortAccIngQOverHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 6), TBurstPercentOrDefaultOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverHiPrioOnly.setDescription('The value of tPortAccIngQOverHiPrioOnly specifies the percentage of buffer space for the queue, used exclusively by high priority packets.')
tPortAccIngQOverAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 7), TPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverAdminPIR.setDescription('The value of tPortAccIngQOverAdminPIR specifies the administrative PIR specified by the user.')
tPortAccIngQOverAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 8), TCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverAdminCIR.setDescription('The value of tPortAccIngQOverAdminCIR specifies the administrative CIR specified by the user.')
tPortAccIngQOverPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 9), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverPIRAdaptation.setDescription('The value of tPortAccIngQOverPIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tPortAccIngQOverCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 10), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverCIRAdaptation.setDescription('The value of tPortAccIngQOverCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tPortAccIngQOverMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 35, 1, 11), TBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccIngQOverMBSBytes.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngQOverMBSBytes.setDescription('The value of tPortAccIngQOverMBSBytes specifies the maximum amount of buffer space allowed for the queue.')
tPortAccEgrQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 36), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpTableLastChgd.setDescription('The value of tPortAccEgrQGrpTableLastChgd indicates the timestamp of last change to the tPortAccEgrQGrpTable.')
tPortAccEgrQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37), )
if mibBuilder.loadTexts: tPortAccEgrQGrpTable.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpTable.setDescription('The value of tPortAccEgrQGrpTable defines access Egress Queue Group Table for providing, via SNMP, the capability of defining the port specific queue groups from the queue-groups existing in the TIMETRA-QOS-MIB::tQosEgrQGroupTable.')
tPortAccEgrQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"))
if mibBuilder.loadTexts: tPortAccEgrQGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpEntry.setDescription('The value of tPortAccEgrQGrpEntry defines an entry in the tPortAccEgrQGrpTable. Entries are created/deleted in this table by SNMP sets to tPortAccEgrQGrpRowStatus.')
tPortAccEgrQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccEgrQGrpName.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpName.setDescription('The value of tPortAccEgrQGrpName defines the port Egress Queue Group name. It uniquely identifies a port egress queue group in the managed system.')
tPortAccEgrQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tPortAccEgrQGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpRowStatus.setDescription('The value of tPortAccEgrQGrpRowStatus allows entries to be created and deleted in the tPortAccEgrQGrpTable. The creation of an entry in this table will succeed only if the queue-group being created exist in TIMETRA-QOS-MIB::tQosEgrQGroupTable.')
tPortAccEgrQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpLastChgd.setDescription('The value of tPortAccEgrQGrpLastChgd indicates the value of sysUpTime when the queue entry was last modified.')
tPortAccEgrQGrpSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpSchedPol.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpSchedPol.setDescription('The value of tPortAccEgrQGrpSchedPol specifies the name of the scheduler-policy to be used with this port egress queue-group.')
tPortAccEgrQGrpAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 5), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpAggRateLimit.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpAggRateLimit.setDescription("The value of tPortAccEgrQGrpAggRateLimit specifies the maximum total rate of all egress queues in this queue-group. The value '-1' means that there is no limit.")
tPortAccEgrQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpAcctgPolId.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpAcctgPolId.setDescription('The value of tPortAccEgrQGrpAcctgPolId specifies the accounting-policy to be used with this port egress queue-group. A non-zero value indicates the tmnxLogApPolicyId index identifying the policy entry in the tmnxLogApTable from the TIMETRA-LOG-MIB which is associated with this queue-group. The value zero indicates that the agent should use the default accounting policy, if one exists.')
tPortAccEgrQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpCollectStats.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpCollectStats.setDescription('The value of tPortAccEgrQGrpCollectStats specifies whether statistics should be collected on this port egress queue-group.')
tPortAccEgrQGrpFrameBaseActg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpFrameBaseActg.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpFrameBaseActg.setDescription("The value of tPortAccEgrQGrpFrameBaseActg specifies whether to use frame-based accounting for this port egress queue-group. If the value is 'false', the default packet-based accounting method will be used.")
tPortAccEgrQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 37, 1, 9), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpDescr.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpDescr.setDescription('The value of tPortAccEgrQGrpDescr specifies the description for this port queue-group.')
tPortAccEgrQOverTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 38), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQOverTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverTableLastChgd.setDescription('The value of tPortAccEgrQOverTableLastChgd indicates the timestamp of last change to the tPortAccEgrQOverTable.')
tPortAccEgrQOverTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39), )
if mibBuilder.loadTexts: tPortAccEgrQOverTable.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverTable.setDescription('The tPortAccEgrQOverTable has an entry for each access port queue override configured on this system.')
tPortAccEgrQOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQOverQueue"))
if mibBuilder.loadTexts: tPortAccEgrQOverEntry.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverEntry.setDescription('Each row represents a particular port-queue override. Entries are created and deleted by the user.')
tPortAccEgrQOverQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tPortAccEgrQOverQueue.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverQueue.setDescription('The value of tPortAccEgrQOverQueue specifies the queue ID which is used as the fourth index to the table entry.')
tPortAccEgrQOverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverRowStatus.setDescription('The value of tPortAccEgrQOverRowStatus is used for the creation and deletion of port-queue overrides. Row creation will fail if there is no entry in the TIMETRA-QOS-MIB::tQosEgrQueueTable with the same index values as the last two indices of this table (tPortAccEgrQGrpName.tPortAccEgrQOverQueue).')
tPortAccEgrQOverLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQOverLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverLastChanged.setDescription('The value of tPortAccEgrQOverLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tPortAccEgrQOverCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 4), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverCBS.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverCBS.setDescription('The value of tPortAccEgrQOverCBS specifies the amount of reserved buffer space for the queue.')
tPortAccEgrQOverMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 5), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverMBS.setStatus('obsolete')
if mibBuilder.loadTexts: tPortAccEgrQOverMBS.setDescription('The value of tPortAccEgrQOverMBS specifies the maximum amount of buffer space allowed for the queue. This object is replaced with tPortAccEgrQOverMBSBytes object.')
tPortAccEgrQOverHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 6), TBurstPercentOrDefaultOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverHiPrioOnly.setDescription('The value of tPortAccEgrQOverHiPrioOnly specifies the percentage of buffer space for the queue, used exclusively by high priority packets.')
tPortAccEgrQOverAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 7), TPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverAdminPIR.setDescription("The value of tPortAccEgrQOverAdminPIR specifies the administrative PIR specified by the user. An 'inconsistentValue' error is returned if tPortAccEgrQOverAdminPIR is set to non-default value when the object tPortAccEgrQOverRateType is set to 'percent'.")
tPortAccEgrQOverAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 8), TCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverAdminCIR.setDescription("The value of tPortAccEgrQOverAdminCIR specifies the administrative CIR specified by the user. An 'inconsistentValue' error is returned if tPortAccEgrQOverAdminCIR is set to non-default value when the object tPortAccEgrQOverRateType is set to 'percent'.")
tPortAccEgrQOverPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 9), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverPIRAdaptation.setDescription('The value of tPortAccEgrQOverPIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tPortAccEgrQOverCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 10), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverCIRAdaptation.setDescription('The value of tPortAccEgrQOverCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tPortAccEgrQOverMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 11), TBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverMBSBytes.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverMBSBytes.setDescription('The value of tPortAccEgrQOverMBSBytes specifies the maximum amount of buffer space allowed for the queue.')
tPortAccEgrQOverAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 12), TPIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminPIRPercent.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverAdminPIRPercent.setDescription("The value of tPortAccEgrQOverAdminPIRPercent specifies the administrative PIR percentage, in hudredths of a percent. An 'inconsistentValue' error is returned if tPortAccEgrQOverAdminPIRPercent is set to non-default value when the object tPortAccEgrQOverRateType is set to 'kbps'.")
tPortAccEgrQOverAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 13), TCIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverAdminCIRPercent.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverAdminCIRPercent.setDescription("The value of tPortAccEgrQOverAdminCIRPercent specifies the administrative CIR percentage, in hudredths of a percent. An 'inconsistentValue' error is returned if tPortAccEgrQOverAdminCIRPercent is set to non-default value when the object tPortAccEgrQOverRateType is set to 'kbps'.")
tPortAccEgrQOverRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 39, 1, 14), TRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQOverRateType.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQOverRateType.setDescription("The value of tPortAccEgrQOverRateType specifies the type of Egress queue rate. When the value of the object is set to 'kbps', the egresss queue rates are specified in kbps. The objects tPortAccEgrQOverAdminPIRPercent and tPortAccEgrQOverAdminCIRPercent will be set to their default values. When the value of the object is set to 'percent', the egress queue rates are specified in percentage. The objects tPortAccEgrQOverAdminPIR and tPortAccEgrQOverAdminCIR will be set to their default values.")
tPortNetEgrQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 40), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpTableLastChgd.setDescription('The value of tPortNetEgrQGrpTableLastChgd indicates the timestamp of last change to the tPortNetEgrQGrpTable.')
tPortNetEgrQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41), )
if mibBuilder.loadTexts: tPortNetEgrQGrpTable.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpTable.setDescription('The value of tPortNetEgrQGrpTable defines network Egress Queue Group Table for providing, via SNMP, the capability of defining the port specific queue groups from the queue-groups existing in the TIMETRA-QOS-MIB::tQosEgrQGroupTable.')
tPortNetEgrQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"))
if mibBuilder.loadTexts: tPortNetEgrQGrpEntry.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpEntry.setDescription('The value of tPortNetEgrQGrpEntry defines an entry in the tPortNetEgrQGrpTable. Entries are created/deleted in this table by SNMP sets to tPortNetEgrQGrpRowStatus.')
tPortNetEgrQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortNetEgrQGrpName.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpName.setDescription('The value of tPortNetEgrQGrpName defines the port Egress Queue Group name. It, along with tPortNetEgrQGrpInstanceId uniquely identifies a port egress queue group in the managed system.')
tPortNetEgrQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tPortNetEgrQGrpRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpRowStatus.setDescription('The value of tPortNetEgrQGrpRowStatus allows entries to be created and deleted in the tPortNetEgrQGrpTable. The creation of an entry in this table will succeed only if the queue-group being created exist in TIMETRA-QOS-MIB::tQosEgrQGroupTable.')
tPortNetEgrQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpLastChgd.setDescription('The value of tPortNetEgrQGrpLastChgd indicates the value of sysUpTime when the queue entry was last modified.')
tPortNetEgrQGrpSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 4), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpSchedPol.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpSchedPol.setDescription('The value of tPortNetEgrQGrpSchedPol specifies the name of the scheduler-policy to be used with this port egress queue-group.')
tPortNetEgrQGrpAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 5), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpAggRateLimit.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpAggRateLimit.setDescription("The value of tPortNetEgrQGrpAggRateLimit specifies the maximum total rate of all egress queues in this queue-group. The value '-1' means that there is no limit.")
tPortNetEgrQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpAcctgPolId.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpAcctgPolId.setDescription('The value of tPortNetEgrQGrpAcctgPolId specifies the accounting-policy to be used with this port egress queue-group. A non-zero value indicates the tmnxLogApPolicyId index identifying the policy entry in the tmnxLogApTable from the TIMETRA-LOG-MIB which is associated with this queue-group. The value zero indicates that the agent should use the default accounting policy, if one exists.')
tPortNetEgrQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpCollectStats.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpCollectStats.setDescription('The value of tPortNetEgrQGrpCollectStats specifies whether statistics should be collected on this port egress queue-group.')
tPortNetEgrQGrpFrameBaseActg = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpFrameBaseActg.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpFrameBaseActg.setDescription("The value of tPortNetEgrQGrpFrameBaseActg specifies whether to use frame-based accounting for this port egress queue-group. If the value is 'false', the default packet-based accounting method will be used.")
tPortNetEgrQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 9), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpDescr.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpDescr.setDescription('The value of tPortNetEgrQGrpDescr specifies the description for this port queue-group.')
tPortNetEgrQGrpPlcrCntrlPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 10), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQGrpPlcrCntrlPolicy.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPlcrCntrlPolicy.setDescription('The value of tPortNetEgrQGrpPlcrCntrlPolicy specifies the network egress policer control policy applicable to this port egress queue-group.')
tPortNetEgrQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 41, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tPortNetEgrQGrpInstanceId.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpInstanceId.setDescription('The value of tPortNetEgrQGrpInstanceId defines the unique instance of the port Egress Queue Group. It, along with tPortNetEgrQGrpName, uniquely identifies a port egress queue group in the managed system.')
tPortNetEgrQOverTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 42), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQOverTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverTableLastChgd.setDescription('The value of tPortNetEgrQOverTableLastChgd indicates the timestamp of last change to the tPortNetEgrQOverTable.')
tPortNetEgrQOverTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43), )
if mibBuilder.loadTexts: tPortNetEgrQOverTable.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverTable.setDescription('The tPortNetEgrQOverTable has an entry for each port queue override configured on this system.')
tPortNetEgrQOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQOverQueue"))
if mibBuilder.loadTexts: tPortNetEgrQOverEntry.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverEntry.setDescription('Each row represents a particular port-queue override. Entries are created and deleted by the user.')
tPortNetEgrQOverQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tPortNetEgrQOverQueue.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverQueue.setDescription('The value of tPortNetEgrQOverQueue specifies the queue ID which is used as the fourth index to the table entry.')
tPortNetEgrQOverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverRowStatus.setDescription('The value of tPortNetEgrQOverRowStatus is used for the creation and deletion of port-queue overrides. Row creation will fail if there is no entry in the TIMETRA-QOS-MIB::tQosEgrQueueTable with the same index values as the last two indices of this table (tPortNetEgrQGrpName.tPortNetEgrQOverQueue).')
tPortNetEgrQOverLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQOverLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverLastChanged.setDescription('The value of tPortNetEgrQOverLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tPortNetEgrQOverCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 4), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverCBS.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverCBS.setDescription('The value of tPortNetEgrQOverCBS specifies the amount of reserved buffer space for the queue.')
tPortNetEgrQOverMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 5), TBurstSizeOverride().clone(-2)).setUnits('kilo-bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverMBS.setStatus('obsolete')
if mibBuilder.loadTexts: tPortNetEgrQOverMBS.setDescription('The value of tPortNetEgrQOverMBS specifies the maximum amount of buffer space allowed for the queue. This object is replaced with tPortNetEgrQOverMBSBytes object.')
tPortNetEgrQOverHiPrioOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 6), TBurstPercentOrDefaultOverride().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverHiPrioOnly.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverHiPrioOnly.setDescription('The value of tPortNetEgrQOverHiPrioOnly specifies the percentage of buffer space for the queue, used exclusively by high priority packets.')
tPortNetEgrQOverAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 7), TPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminPIR.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverAdminPIR.setDescription("The value of tPortNetEgrQOverAdminPIR specifies the administrative PIR specified by the user. An 'inconsistentValue' error is returned if tPortNetEgrQOverAdminPIR is set to non-default value when the object tPortNetEgrQOverRateType is set to 'percent'.")
tPortNetEgrQOverAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 8), TCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminCIR.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverAdminCIR.setDescription("The value of tPortNetEgrQOverAdminCIR specifies the administrative CIR specified by the user. An 'inconsistentValue' error is returned if tPortNetEgrQOverAdminCIR is set to non-default value when the object tPortNetEgrQOverRateType is set to 'percent'.")
tPortNetEgrQOverPIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 9), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverPIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverPIRAdaptation.setDescription('The value of tPortNetEgrQOverPIRAdaptation specifies the adaptation rule to be used while computing the operational PIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tPortNetEgrQOverCIRAdaptation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 10), TAdaptationRuleOverride().clone('noOverride')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverCIRAdaptation.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverCIRAdaptation.setDescription('The value of tPortNetEgrQOverCIRAdaptation specifies the adaptation rule to be used while computing the operational CIR value. The adaptation rule specifies the rules to compute the operational values while maintaining minimum offset.')
tPortNetEgrQOverMBSBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 11), TBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverMBSBytes.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverMBSBytes.setDescription('The value of tPortNetEgrQOverMBSBytes specifies the maximum amount of buffer space allowed for the queue.')
tPortNetEgrQOverAdminPIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 12), TPIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminPIRPercent.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverAdminPIRPercent.setDescription("The value of tPortNetEgrQOverAdminPIRPercent specifies the administrative PIR percentage, in hudredths of a percent. An 'inconsistentValue' error is returned if tPortNetEgrQOverAdminPIRPercent is set to non-default value when the object tPortNetEgrQOverRateType is set to 'kbps'.")
tPortNetEgrQOverAdminCIRPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 13), TCIRPercentOverride().clone(-2)).setUnits('hundredths of a percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverAdminCIRPercent.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverAdminCIRPercent.setDescription("The value of tQosEgrQueueAdminCIRPercent specifies the administrative CIR percentage, in hudredths of a percent. An 'inconsistentValue' error is returned if tQosEgrQueueAdminCIRPercent is set to non-default value when the object tPortNetEgrQOverRateType is set to 'kbps'.")
tPortNetEgrQOverRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 43, 1, 14), TRateType().clone('kbps')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortNetEgrQOverRateType.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQOverRateType.setDescription("The value of tPortNetEgrQOverRateType specifies the type of Egress queue rate. When the value of the object is set to 'kbps', the egresss queue rates are specified in kbps. The objects tPortNetEgrQOverAdminPIRPercent and tPortNetEgrQOverAdminCIRPercent will be set to their default values. When the value of the object is set to 'percent', the egress queue rates are specified in percentage. The objects tPortNetEgrQOverAdminPIR and tPortNetEgrQOverAdminCIR will be set to their default values.")
tmnxBundleMlfrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44), )
if mibBuilder.loadTexts: tmnxBundleMlfrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrTable.setDescription('The tmnxBundleMlfrTable contains MLFR specific data.')
tmnxBundleMlfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"))
if mibBuilder.loadTexts: tmnxBundleMlfrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrEntry.setDescription('Each row entry contains data on an MLFR Bundle.')
tmnxBundleMlfrBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrBundleId.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrBundleId.setDescription("The value of tmnxBundleMlfrBundleId is the Bundle Identifier sent with each Link Integrity Protocol message for each member of a tmnxBundleBundleID. The object tmnxPortAdminStatus must be set to 'outOfService' to change this value.")
tmnxBundleMlfrIngQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 4), TMcFrQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrIngQoSProfId.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrIngQoSProfId.setDescription('The value of tmnxBundleMlfrIngQoSProfId specifies the ingress QoS profile to be used for the incoming traffic over this MLFR bundle. The value of tmnxBundleMlfrIngQoSProfId of 0 indicates a default QoS profile is used as applicable to given hardware.')
tmnxBundleMlfrEgrQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 5), TMcFrQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrEgrQoSProfId.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrEgrQoSProfId.setDescription('The value of tmnxBundleMlfrEgrQoSProfId specifies the egress QoS profile to be used for the outgoing traffic over this MLFR bundle. The value of tmnxBundleMlfrEgrQoSProfId of 0 indicates a default profile is used as applicable to given hardware.')
tmnxBundleMlfrHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrHelloTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrHelloTimer.setDescription('The value of tmnxBundleMlfrHelloTimer specifies the rate at which hello messages are sent across a member link.')
tmnxBundleMlfrHelloRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrHelloRetryCount.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrHelloRetryCount.setDescription('The value of tmnxBundleMlfrHelloTimer specifies the number of times to attempt to resend hello messages when the tmnxBundleMlfrAckTimer has expired before taking action.')
tmnxBundleMlfrAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxBundleMlfrAckTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrAckTimer.setDescription('The value of tmnxBundleMlfrAckTimer specifies the length of time to wait for acknowledgment of a hello message before declaring the hello message has not been received.')
tmnxBundleMlfrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 44, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMlfrLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMlfrLastChanged.setDescription('The value of tmnxBundleMlfrLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tmnxFrIntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2), )
if mibBuilder.loadTexts: tmnxFrIntfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxFrIntfTable.setDescription('The tmnxFrIntfTable has an entry for each port/channel in the system that is configured for Frame Relay. It contains Frame Relay configuration parameters.')
tmnxFrIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxFrIntfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxFrIntfEntry.setDescription('The Parameters for a particular FR Interface. Entries cannot be created or deleted via SNMP SET operations. Entries will exist in this table when tmnxPortEncapType is set to frEncap.')
tmnxFrIntfFrf12Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1, 1), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrIntfFrf12Mode.setStatus('current')
if mibBuilder.loadTexts: tmnxFrIntfFrf12Mode.setDescription("The value of tmnxFrIntfFrf12Mode enables or disables the use of FRF12 headers. This cannot be set to 'enabled' for entries with a tmnxPortBundleNumber set or bundles with a tmnxBundleType of mlfr.")
tmnxFrIntfLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrIntfLinkId.setStatus('current')
if mibBuilder.loadTexts: tmnxFrIntfLinkId.setDescription('The value of tmnxFrIntfLinkId is a Link Identifier that is used when this entry is added to a MLFR bundle.')
tmnxFrIntfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFrIntfLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxFrIntfLastChanged.setDescription('The value of tmnxFrIntfLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tmnxFrf12IntfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3), )
if mibBuilder.loadTexts: tmnxFrf12IntfTable.setStatus('current')
if mibBuilder.loadTexts: tmnxFrf12IntfTable.setDescription("The tmnxFrf12IntfTable contains entries for a port/channel that has frf12 mode 'enabled'.")
tmnxFrf12IntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxFrf12IntfEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxFrf12IntfEntry.setDescription('Each row represents a particular frame-relay interface that has enabled frf12 on a port/channel. Each row in this table is added/removed when frf12 is enabled on a port/channel.')
tmnxFrf12IntfFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(128, 512)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrf12IntfFragmentThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxFrf12IntfFragmentThreshold.setDescription('The value of tmnxFrf12IntfFragmentThreshold specifies the maximum length of a fragment to be transmitted. A value of 0 specifies no fragmentation.')
tmnxFrf12IntfEgrQoSProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1, 2), TMcFrQoSProfileId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxFrf12IntfEgrQoSProfId.setStatus('current')
if mibBuilder.loadTexts: tmnxFrf12IntfEgrQoSProfId.setDescription('The value of tmnxFrf12IntfEgrQoSProfId specifies the egress QoS profile to be used for the outgoing traffic over this frf12 frame-relay interface. The value of tmnxFrf12IntfEgrQoSProfId of 0 indicates a default QoS profile is used as applicable to given hardware.')
tmnxFrf12IntfLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 9, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxFrf12IntfLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxFrf12IntfLastChanged.setDescription('The value of tmnxFrf12IntfLastChanged indicates the value of sysUpTime at the time of the most recent management change to this row.')
tmnxPortIngQosQStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45), )
if mibBuilder.loadTexts: tmnxPortIngQosQStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatTable.setDescription('A table that contains ingress QoS queue-group queue port statistics.')
tmnxPortIngQosQStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"), (0, "TIMETRA-PORT-MIB", "tmnxPortIngQosQStatQueueId"))
if mibBuilder.loadTexts: tmnxPortIngQosQStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatEntry.setDescription("Ingress statistics about a specific port's QoS queue-group queue.")
tmnxPortIngQosQStatQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 1), TIngressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: tmnxPortIngQosQStatQueueId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatQueueId.setDescription('The value of tmnxPortIngQosQStatQueueId specifies the queue-group queue ID which is used as the fourth index to the table entry.')
tmnxPortIngQosQStatOffHiPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffHiPrioPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffHiPrioPkts.setDescription('The value of tmnxPortIngQosQStatOffHiPrioPkts indicates the number of high priority packets, as determined by the port ingress QoS policy, offered by the Pchip to the Qchip.')
tmnxPortIngQosQStatDpdHiPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdHiPrioPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdHiPrioPkts.setDescription('The value of tmnxPortIngQosQStatDpdHiPrioPkts indicates the number of high priority packets, as determined by the port ingress QoS policy, dropped by the Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortIngQosQStatOffLoPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffLoPrioPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffLoPrioPkts.setDescription('The value of tmnxPortIngQosQStatOffLoPrioPkts indicates the number of low priority packets, as determined by the port ingress QoS policy, offered by the Pchip to the Qchip.')
tmnxPortIngQosQStatDpdLoPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdLoPrioPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdLoPrioPkts.setDescription('The value of tmnxPortIngQosQStatDpdLoPrioPkts indicates the number of low priority packets, as determined by the port ingress QoS policy, dropped by the Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortIngQosQStatOffHiPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffHiPrioOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffHiPrioOcts.setDescription('The value of tmnxPortIngQosQStatOffHiPrioOcts indicates the number of high priority octets, as determined by the port ingress QoS policy, offered by the Pchip to the Qchip.')
tmnxPortIngQosQStatDpdHiPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdHiPrioOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdHiPrioOcts.setDescription('The value of tmnxPortIngQosQStatDpdHiPrioOcts indicates the number of high priority octets, as determined by the port ingress QoS policy, dropped by the Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortIngQosQStatOffLoPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffLoPrioOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatOffLoPrioOcts.setDescription('The value of tmnxPortIngQosQStatOffLoPrioOcts indicates the number of low priority octets, as determined by the port ingress QoS policy, offered by the Pchip to the Qchip.')
tmnxPortIngQosQStatDpdLoPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdLoPrioOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatDpdLoPrioOcts.setDescription('The value of tmnxPortIngQosQStatDpdLoPrioOcts indicates the number of low priority octets, as determined by the port ingress QoS policy, dropped by the Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortIngQosQStatFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdInProfPkts.setDescription('The value of tmnxPortIngQosQStatFwdInProfPkts indicates the number of in-profile packets (rate below CIR) forwarded by the ingress Qchip.')
tmnxPortIngQosQStatFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdOutProfPkts.setDescription('The value of tmnxPortIngQosQStatFwdOutProfPkts indicates the number of out-of-profile packets (rate above CIR) forwarded by the ingress Qchip.')
tmnxPortIngQosQStatFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdInProfOcts.setDescription('The value of tmnxPortIngQosQStatFwdInProfOcts indicates the number of in-profile octets (rate below CIR) forwarded by the ingress Qchip.')
tmnxPortIngQosQStatFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatFwdOutProfOcts.setDescription('The value of tmnxPortIngQosQStatFwdOutProfOcts indicates the number of out-of-profile octets (rate above CIR) forwarded by the ingress Qchip.')
tmnxPortIngQosQStatUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatUncolPktsOff.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatUncolPktsOff.setDescription('The value of tmnxPortIngQosQStatUncolPktsOff indicates the number of uncolored packets offered to the ingress Qchip.')
tmnxPortIngQosQStatUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 45, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortIngQosQStatUncolOctsOff.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngQosQStatUncolOctsOff.setDescription('The value of tmnxPortIngQosQStatUncolOctsOff indicates the number of uncolored octets offered to the ingress Qchip.')
tmnxPortEgrQosQStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46), )
if mibBuilder.loadTexts: tmnxPortEgrQosQStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatTable.setDescription('A table that contains egress QoS queue-group queue port statistics.')
tmnxPortEgrQosQStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatQueueId"))
if mibBuilder.loadTexts: tmnxPortEgrQosQStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatEntry.setDescription("Egress statistics about a specific port's QoS queue-group queue.")
tmnxPortEgrQosQStatQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 1), TEgressQueueId().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: tmnxPortEgrQosQStatQueueId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatQueueId.setDescription('The value of tmnxPortEgrQosQStatQueueId specifies the queue-group queue ID which is used as the fourth index to the table entry.')
tmnxPortEgrQosQStatFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdInProfPkts.setDescription('The value of tmnxPortEgrQosQStatFwdInProfPkts indicates the number of in-profile packets (rate below CIR) forwarded by the egress Qchip.')
tmnxPortEgrQosQStatDpdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdInProfPkts.setDescription('The value of tmnxPortEgrQosQStatDpdInProfPkts indicates the number of in-profile packets discarded by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortEgrQosQStatFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdOutProfPkts.setDescription('The value of tmnxPortEgrQosQStatFwdOutProfPkts indicates the number of out-of-profile packets (rate above CIR) forwarded by the egress Qchip.')
tmnxPortEgrQosQStatDpdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdOutProfPkts.setDescription('The value of tmnxPortEgrQosQStatDpdOutProfPkts indicates the number of out-of-profile packets discarded by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortEgrQosQStatFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdInProfOcts.setDescription('The value of tmnxPortEgrQosQStatFwdInProfOcts indicates the number of in-profile octets (rate below CIR) forwarded by the egress Qchip.')
tmnxPortEgrQosQStatDpdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdInProfOcts.setDescription('The value of tmnxPortEgrQosQStatDpdInProfOcts indicates the number of in-profile octets discarded by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortEgrQosQStatFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatFwdOutProfOcts.setDescription('The value of tmnxPortEgrQosQStatFwdOutProfOcts indicates the number of out-of-profile octets (rate above CIR) forwarded by the egress Qchip.')
tmnxPortEgrQosQStatDpdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 46, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrQosQStatDpdOutProfOcts.setDescription('The value of tmnxPortEgrQosQStatDpdOutProfOcts indicates the number of out-of-profile octets discarded by the egress Qchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tmnxPortNetEgrQStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5), )
if mibBuilder.loadTexts: tmnxPortNetEgrQStatTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQStatTable.setDescription('Defines the Alcatel-Lucent SROS series network port egress statistics table for providing, via SNMP, the capability of retrieving the traffic statistics for the queue-group queues being used for the ports to forward the network egress traffic.')
tmnxPortNetEgrQStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatQueueId"))
if mibBuilder.loadTexts: tmnxPortNetEgrQStatEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQStatEntry.setDescription('Defines an entry in tmnxPortNetEgrQStatTable. Entries are created and deleted by the system depending on the queue policy being used at the specific port. In release 10.0 tPortNetEgrQGrpInstanceId is added as another index before tmnxPortEgrQosQStatQueueId for this tmnxPortNetEgrQStatTable.')
tmnxPortNetEgrQFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdInProfPkts.setDescription('The value of tmnxPortNetEgrQFwdInProfPkts indicates the number of conforming network egress packets forwarded on this port using this queue-group queue.')
tmnxPortNetEgrQFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdOutProfPkts.setDescription('The value of tmnxPortNetEgrQFwdOutProfPkts indicates the number of exceeding network egress packets forwarded on this port using this queue-group queue.')
tmnxPortNetEgrQFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdInProfOcts.setDescription('The value of tmnxPortNetEgrQFwdInProfOcts indicates the number of conforming network egress octets forwarded on this port using this queue-group queue.')
tmnxPortNetEgrQFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQFwdOutProfOcts.setDescription('The value of tmnxPortNetEgrQFwdOutProfOcts indicates the number of exceeding network egress octets forwarded on this port using this queue-group queue.')
tmnxPortNetEgrQDroInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroInProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQDroInProfPkts.setDescription('The value of tmnxPortNetEgrQDroInProfPkts indicates the number of conforming network egress packets dropped on this port using this queue-group queue.')
tmnxPortNetEgrQDroOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroOutProfPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQDroOutProfPkts.setDescription('The value of tmnxPortNetEgrQDroOutProfPkts indicates the number of exceeding network egress packets dropped on this port using this queue-group queue.')
tmnxPortNetEgrQDroInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroInProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQDroInProfOcts.setDescription('The value of tmnxPortNetEgrQDroInProfOcts indicates the number of conforming network egress octets dropped on this port using this queue-group queue.')
tmnxPortNetEgrQDroOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortNetEgrQDroOutProfOcts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrQDroOutProfOcts.setDescription('The value of tmnxPortNetEgrQDroOutProfOcts indicates the number of exceeding network egress octets dropped on this port using this queue-group queue.')
tPortNetEgrQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7), )
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatTable.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatTable.setDescription('The value of tPortNetEgrQGrpPStatTable contains port egress queue group policer statistics on network side.')
tPortNetEgrQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStatQosPolicerId"))
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatEntry.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatEntry.setDescription('The value of tPortNetEgrQGrpPStatEntry defines an entry in the tPortNetEgrQGrpPStatTable. It represents statistics about a specific QoS egress queue group policer on the specified port.')
tPortNetEgrQGrpPStatQosPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 1), TEgrPolicerId())
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatQosPolicerId.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatQosPolicerId.setDescription('The value of tPortNetEgrQGrpPStatQosPolicerId specifies the index of the egress QoS policer queue group on network port.')
tPortNetEgrQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 2), TmnxEgrPolicerStatMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatMode.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStatMode.setDescription('The value of tPortNetEgrQGrpPStatMode indicates the stat mode used by this policer.')
tPortNetEgrQGrpPStOffInProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPkt.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPkt.setDescription('The value of tPortNetEgrQGrpPStOffInProfPkt indicates the number of in-profile packets (rate below CIR) offered by the egress Pchip.')
tPortNetEgrQGrpPStOffInProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPktL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPktL.setDescription('The value of tPortNetEgrQGrpPStOffInProfPktL indicates the lower 32 bits of tPortNetEgrQGrpPStOffInProfPkt.')
tPortNetEgrQGrpPStOffInProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPktH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfPktH.setDescription('The value of tPortNetEgrQGrpPStOffInProfPktH indicates the upper 32 bits of tPortNetEgrQGrpPStOffInProfPkt.')
tPortNetEgrQGrpPStFwdInProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPkt.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPkt.setDescription('The value of tPortNetEgrQGrpPStFwdInProfPkt indicates the number of in-profile packets (rate below CIR) forwarded by the egress Pchip.')
tPortNetEgrQGrpPStFwdInProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPktL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPktL.setDescription('The value of tPortNetEgrQGrpPStFwdInProfPktL indicates the lower 32 bits of tPortNetEgrQGrpPStFwdInProfPkt.')
tPortNetEgrQGrpPStFwdInProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPktH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfPktH.setDescription('The value of tPortNetEgrQGrpPStFwdInProfPktH indicates the upper 32 bits of tPortNetEgrQGrpPStFwdInProfPkt.')
tPortNetEgrQGrpPStDrpInProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPkt.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPkt.setDescription('The value of tPortNetEgrQGrpPStDrpInProfPkt indicates the number of in-profile packets discarded by the egress Pchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tPortNetEgrQGrpPStDrpInProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPktL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPktL.setDescription('The value of tPortNetEgrQGrpPStDrpInProfPktL indicates the lower 32 bits of tPortNetEgrQGrpPStDrpInProfPkt.')
tPortNetEgrQGrpPStDrpInProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPktH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfPktH.setDescription('The value of tPortNetEgrQGrpPStDrpInProfPktH indicates the upper 32 bits of tPortNetEgrQGrpPStDrpInProfPkt.')
tPortNetEgrQGrpPStOffOutProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPkt.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPkt.setDescription('The value of tPortNetEgrQGrpPStOffOutProfPkt indicates the number of out-of-profile packets (rate above CIR) offered by the egress Pchip.')
tPortNetEgrQGrpPStOffOutProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPktL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPktL.setDescription('The value of tPortNetEgrQGrpPStOffOutProfPktL indicates the lower 32 bits of tPortNetEgrQGrpPStOffOutProfPkt.')
tPortNetEgrQGrpPStOffOutProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPktH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfPktH.setDescription('The value of tPortNetEgrQGrpPStOffOutProfPktH indicates the upper 32 bits of tPortNetEgrQGrpPStOffOutProfPkt.')
tPortNetEgrQGrpPStFwdOutProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPkt.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPkt.setDescription('The value of tPortNetEgrQGrpPStFwdOutProfPkt indicates the number of out-of-profile packets (rate above CIR) forwarded by the egress Pchip.')
tPortNetEgrQGrpPStFwdOutProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPktL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPktL.setDescription('The value of tPortNetEgrQGrpPStFwdOutProfPktL indicates the lower 32 bits of tPortNetEgrQGrpPStFwdOutProfPkt.')
tPortNetEgrQGrpPStFwdOutProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPktH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfPktH.setDescription('The value of tPortNetEgrQGrpPStFwdOutProfPktH indicates the upper 32 bits of tPortNetEgrQGrpPStFwdOutProfPkt.')
tPortNetEgrQGrpPStDrpOutProfPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPkt.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPkt.setDescription('The value of tPortNetEgrQGrpPStDrpOutProfPkt indicates the number of out-of-profile packets discarded by the egress Pchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tPortNetEgrQGrpPStDrpOutProfPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPktL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPktL.setDescription('The value of tPortNetEgrQGrpPStDrpOutProfPktL indicates the lower 32 bits of tPortNetEgrQGrpPStDrpOutProfPkt.')
tPortNetEgrQGrpPStDrpOutProfPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPktH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfPktH.setDescription('The value of tPortNetEgrQGrpPStDrpOutProfPktH indicates the upper 32 bits of tPortNetEgrQGrpPStDrpOutProfPkt.')
tPortNetEgrQGrpPStOffInProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOct.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOct.setDescription('The value of tPortNetEgrQGrpPStOffInProfOct indicates the number of in-profile octets (rate below CIR) offered by the egress Pchip.')
tPortNetEgrQGrpPStOffInProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOctL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOctL.setDescription('The value of tPortNetEgrQGrpPStOffInProfOctL indicates the lower 32 bits of tPortNetEgrQGrpPStOffInProfOct.')
tPortNetEgrQGrpPStOffInProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOctH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffInProfOctH.setDescription('The value of tPortNetEgrQGrpPStOffInProfOctH indicates the upper 32 bits of tPortNetEgrQGrpPStOffInProfOct.')
tPortNetEgrQGrpPStFwdInProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOct.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOct.setDescription('The value of tPortNetEgrQGrpPStFwdInProfOct indicates the number of in-profile octets (rate below CIR) forwarded by the egress Pchip.')
tPortNetEgrQGrpPStFwdInProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOctL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOctL.setDescription('The value of tPortNetEgrQGrpPStFwdInProfOctL indicates the lower 32 bits of tPortNetEgrQGrpPStFwdInProfOct.')
tPortNetEgrQGrpPStFwdInProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOctH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdInProfOctH.setDescription('The value of tPortNetEgrQGrpPStFwdInProfOctH indicates the upper 32 bits of tPortNetEgrQGrpPStFwdInProfOct.')
tPortNetEgrQGrpPStDrpInProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOct.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOct.setDescription('The value of tPortNetEgrQGrpPStDrpInProfOct indicates the number of in-profile octets discarded by the egress Pchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tPortNetEgrQGrpPStDrpInProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOctL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOctL.setDescription('The value of tPortNetEgrQGrpPStDrpInProfOctL indicates the lower 32 bits of tPortNetEgrQGrpPStDrpInProfOct.')
tPortNetEgrQGrpPStDrpInProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOctH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpInProfOctH.setDescription('The value of tPortNetEgrQGrpPStDrpInProfOctH indicates the upper 32 bits of tPortNetEgrQGrpPStDrpInProfOct.')
tPortNetEgrQGrpPStOffOutProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOct.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOct.setDescription('The value of tPortNetEgrQGrpPStOffOutProfOct indicates the number of out-of-profile octets (rate above CIR) forwarded by the egress Pchip.')
tPortNetEgrQGrpPStOffOutProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOctL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOctL.setDescription('The value of tPortNetEgrQGrpPStOffOutProfOctL indicates the lower 32 bits of tPortNetEgrQGrpPStOffOutProfOct.')
tPortNetEgrQGrpPStOffOutProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOctH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStOffOutProfOctH.setDescription('The value of tPortNetEgrQGrpPStOffOutProfOctH indicates the upper 32 bits of tPortNetEgrQGrpPStOffOutProfOct.')
tPortNetEgrQGrpPStFwdOutProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOct.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOct.setDescription('The value of tPortNetEgrQGrpPStFwdOutProfOct indicates the number of out-of-profile octets (rate above CIR) forwarded by the egress Pchip.')
tPortNetEgrQGrpPStFwdOutProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOctL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOctL.setDescription('The value of tPortNetEgrQGrpPStFwdOutProfOctL indicates the lower 32 bits of tPortNetEgrQGrpPStFwdOutProfOct.')
tPortNetEgrQGrpPStFwdOutProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOctH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStFwdOutProfOctH.setDescription('The value of tPortNetEgrQGrpPStFwdOutProfOctH indicates the upper 32 bits of tPortNetEgrQGrpPStFwdOutProfOct.')
tPortNetEgrQGrpPStDrpOutProfOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOct.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOct.setDescription('The value of tPortNetEgrQGrpPStDrpOutProfOct indicates the number of out-of-profile octets discarded by the egress Pchip due to: MBS exceeded, buffer pool limit exceeded, etc.')
tPortNetEgrQGrpPStDrpOutProfOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOctL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOctL.setDescription('The value of tPortNetEgrQGrpPStDrpOutProfOctL indicates the lower 32 bits of tPortNetEgrQGrpPStDrpOutProfOct.')
tPortNetEgrQGrpPStDrpOutProfOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOctH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStDrpOutProfOctH.setDescription('The value of tPortNetEgrQGrpPStDrpOutProfOctH indicates the upper 32 bits of tPortNetEgrQGrpPStDrpOutProfOct.')
tPortNetEgrQGrpPStUncolPktOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOff.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOff.setDescription('The value of tPortNetEgrQGrpPStUncolPktOff indicates the number of uncolored packets forwarded by the egress Pchip.')
tPortNetEgrQGrpPStUncolPktOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOffL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOffL.setDescription('The value of tPortNetEgrQGrpPStUncolPktOffL indicates the lower 32 bits of tPortNetEgrQGrpPStUncolPktOff.')
tPortNetEgrQGrpPStUncolPktOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOffH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolPktOffH.setDescription('The value of tPortNetEgrQGrpPStUncolPktOffH indicates the upper 32 bits of tPortNetEgrQGrpPStUncolPktOff.')
tPortNetEgrQGrpPStUncolOctOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOff.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOff.setDescription('The value of tPortNetEgrQGrpPStUncolOctOff indicates the number of uncolored octets forwarded by the egress Pchip.')
tPortNetEgrQGrpPStUncolOctOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOffL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOffL.setDescription('The value of tPortNetEgrQGrpPStUncolOctOffL indicates the lower 32 bits of tPortNetEgrQGrpPStUncolOctOff.')
tPortNetEgrQGrpPStUncolOctOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 7, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOffH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpPStUncolOctOffH.setDescription('The value of tPortNetEgrQGrpPStUncolOctOffH indicates the upper 32 bits of tPortNetEgrQGrpPStUncolOctOff.')
tmnxPortCemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6), )
if mibBuilder.loadTexts: tmnxPortCemStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsTable.setDescription('A table that contains CEM Port statistics.')
tmnxPortCemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxPortCemStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEntry.setDescription('Statistics for a specific CEM Port.')
tmnxPortCemStatsReportAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 1), Bits().clone(namedValues=NamedValues(("notUsed", 0), ("strayPkts", 1), ("malformedPkts", 2), ("pktLoss", 3), ("bfrOverrun", 4), ("bfrUnderrun", 5), ("rmtPktLoss", 6), ("rmtFault", 7), ("rmtRdi", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsReportAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsReportAlarm.setDescription('The value of tmnxPortCemStatsReportAlarm indicates the type of Circuit EMulation (CEM) alarm currently active on the port. The syntax of this object mirrors that of the CemSapReportAlarm TEXTUAL-CONVENTION. The values may be one of: strayPkts (1)- receiving stray packets. malformedPkts (2)- detecting malformed packets. pktLoss (3)- experiencing packet loss. bfrOverrun (4)- experiencing jitter buffer overrun. bfrUnderrun (5)- experiencing jitter buffer underrun. rmtPktLoss (6)- remote packet loss indication. rmtFault (7)- remote TDM fault indication. rmtRdi (8)- remote RDI indication.')
tmnxPortCemStatsIgrForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsIgrForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsIgrForwardedPkts.setDescription('The value of tmnxPortCemStatsIgrForwardedPkts indicates the number of packets that were successfully forwarded.')
tmnxPortCemStatsIgrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsIgrDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsIgrDroppedPkts.setDescription('The value of tmnxPortCemStatsIgrDroppedPkts indicates the total number of packets that were dropped due to errors.')
tmnxPortCemStatsEgrForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrForwardedPkts.setDescription('The value of tmnxPortCemStatsEgrForwardedPkts indicates the number of packets that were successfully forwarded.')
tmnxPortCemStatsEgrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrDroppedPkts.setDescription('The value of tmnxPortCemStatsEgrDroppedPkts indicates the total number of packets that were dropped due to errors.')
tmnxPortCemStatsEgrMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMissingPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMissingPkts.setDescription('The value of tmnxPortCemStatsEgrMissingPkts indicates the number of missing packets (as detected via control word sequence number gaps).')
tmnxPortCemStatsEgrPktsReOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrPktsReOrder.setDescription('The value of tmnxPortCemStatsEgrPktsReOrder indicates the number of packets detected out of sequence (via control word sequence number), but successfully re-ordered.')
tmnxPortCemStatsEgrJtrBfrURun = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrURun.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrURun.setDescription('The value of tmnxPortCemStatsEgrJtrBfrURun indicates the number of times a packet needed to be played out and the jitter buffer was empty.')
tmnxPortCemStatsEgrJtrBfrORun = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrORun.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrORun.setDescription('The value of tmnxPortCemStatsEgrJtrBfrORun indicates the number of times a packet was dropped because it could not fit in the jitter buffer.')
tmnxPortCemStatsEgrMisOrderDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMisOrderDrop.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMisOrderDrop.setDescription('The value of tmnxPortCemStatsEgrMisOrderDrop indicates the number of packets detected out of order (via control word sequence numbers), and could not be re-ordered, or could not be placed in the jitter buffer because it was out of the current window.')
tmnxPortCemStatsEgrMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMalformedPkts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMalformedPkts.setDescription("The value of tmnxPortCemStatsEgrMalformedPkts indicates the number of packets detected with unexpected size, or bad headers' stack.")
tmnxPortCemStatsEgrLBitDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrLBitDrop.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrLBitDrop.setDescription('The value of tmnxPortCemStatsEgrLBitDrop indicates the number of packets dropped due to the L bit set by the far end.')
tmnxPortCemStatsEgrMultipleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMultipleDrop.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrMultipleDrop.setDescription('The value of tmnxPortCemStatsEgrMultipleDrop indicates the number of packets dropped due to multiple sequence numbers.')
tmnxPortCemStatsEgrESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrESs.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrESs.setDescription('The value of tmnxPortCemStatsEgrESs indicates the number of Error Seconds (ESs) encountered. Any malformed packet, seq. error, LOPS and similar are considered as error seconds.')
tmnxPortCemStatsEgrSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrSESs.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrSESs.setDescription('The value of tmnxPortCemStatsEgrSESs indicates the number of Severely Error Seconds (SESs) encountered. This is when more than 30 percent of the packets within a one second window are missing.')
tmnxPortCemStatsEgrUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrUASs.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrUASs.setDescription('The value of tmnxPortCemStatsEgrUASs indicates the number of Unavailable Seconds (UASs) encountered. Any consecutive ten seconds of SESs are counted as one UAS.')
tmnxPortCemStatsEgrFailureCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrFailureCounts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrFailureCounts.setDescription('The value of tmnxPortCemStatsEgrFailureCounts indicates the number failure events. A failure event begins when the LOPS failure is declared, and ends when the failure is cleared.')
tmnxPortCemStatsEgrURunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrURunCounts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrURunCounts.setDescription('The value of tmnxPortCemStatsEgrURunCounts indicates the number of times the jitter buffer went into an underrun state.')
tmnxPortCemStatsEgrORunCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrORunCounts.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrORunCounts.setDescription('The value of tmnxPortCemStatsEgrORunCounts indicates the number of times the jitter buffer went into an overrun state.')
tmnxPortCemStatsEgrJtrBfrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 12, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrDepth.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemStatsEgrJtrBfrDepth.setDescription('The value of tmnxPortCemStatsEgrJtrBfrDepth indicates the current packet depth of the jitter buffer.')
tmnxBundleMemberMlfrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 47), )
if mibBuilder.loadTexts: tmnxBundleMemberMlfrTable.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberMlfrTable.setDescription('The tmnxBundleMemberMlfrTable has an entry for a frame-relay link associated with an MLFR Bundle.')
tmnxBundleMemberMlfrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 47, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxBundleBundleID"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxBundleMemberMlfrEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberMlfrEntry.setDescription('Each row entry represents an frame-relay link associated with a MLFR Bundle.')
tmnxBundleMemberMlfrDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 47, 1, 1), TmnxMlfrLinkDownReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxBundleMemberMlfrDownReason.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberMlfrDownReason.setDescription('The value of tmnxBundleMemberMlfrDownReason indicates the reason code for marking the MLFR member link of the bundle to down (i.e. tmnxBundleMemberActive will be set to false).')
tmnxWaveTrackerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48), )
if mibBuilder.loadTexts: tmnxWaveTrackerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerTable.setDescription('The tmnxWaveTrackerTable has an entry for each Wavelength Tracker port on each IOM card in each chassis in the TMNX system.')
tmnxWaveTrackerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxWaveTrackerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerEntry.setDescription('Each row entry represents a Wave Tracker capable port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. The tmnxWaveTrackerEntry contains attributes that are unique to the Wave Tracker capable ports.')
tmnxWaveTrackerPowerCtrlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerPowerCtrlEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerPowerCtrlEnable.setDescription("The value of tmnxWaveTrackerPowerCtrlEnable specifies whether or not the Wavelength Tracker Power Control loop that maintains the interface's transmitted optical signal average output power is enabled. tmnxWaveTrackerPowerCtrlEnable is equivalent to 'tnWtEncodePortCapabilityProgrammed' of the 1696-Roadm MIBs.")
tmnxWaveTrackerEncodeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerEncodeEnable.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerEncodeEnable.setDescription("the value of tmnxWaveTrackerEncodeEnable specifies whether or not the Wavelength Tracker Encoding of Wave Keys on the interface's transmitted optical signal is enabled. tmnxWaveTrackerEncodeEnable is equivalent to 'tnWaveKeyEncodeTransmitState' of the 1696-Roadm MIBs.")
tmnxWaveTrackerInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerInUse.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerInUse.setDescription("The value of tmnxWaveTrackerInUse indicates whether or not the Wavelength Tracker feature is in use by the system for services. tmnxWaveTrackerInUse is equivalent to 'tnWtEncodePortCapabilityInUse' of the 1696-Roadm MIBs.")
tmnxWaveTrackerTargetPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2200, 300)).clone(-2000)).setUnits('mBm').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerTargetPower.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerTargetPower.setDescription("The value of tmnxWaveTrackerTargetPower specifies the desired average output power of the interface's transmitted optical signal when tmnxWaveTrackerPowerCtrlEnable is set to 'true (1)'. The UNITS millibels (mBm) are units of 0.01 decibel relative to one milliwatt (dBm) or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.")
tmnxWaveTrackerWaveKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerWaveKey1.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerWaveKey1.setDescription("The value of tmnxWaveTrackerWaveKey1 specifies the first Wavelength Tracker Key (or Identifier) to be transmitted on the interface's optical signal when tmnxWaveTrackerEncodeEnable is set to 'true (1)'. The following table describes the possible tmnxWaveTrackerWaveKey1 and tmnxWaveTrackerWaveKey2 values based on ITU channel. Key1 and Key2 must also match in modulo 2 with each other. Index ITU Key 1 Key 2 channel First Last First Last ------------------------------------------- 0 61 1548 1548 2032 2032 // 1696 Test Channel // Original Tropic Channels (index 1 to 32) 1 59 1 15 545 559 2 58 18 32 562 576 3 57 35 49 579 593 4 56 52 66 596 610 5 54 69 83 613 627 6 53 86 100 630 644 7 52 103 117 647 661 8 51 120 134 664 678 9 49 137 151 681 698 10 48 154 168 698 712 11 47 171 185 715 729 12 46 188 202 732 746 13 44 205 219 749 763 14 43 222 236 766 780 15 42 239 253 783 797 16 41 256 270 800 814 17 39 273 287 817 831 18 38 290 304 834 848 19 37 307 321 851 865 20 36 324 338 868 882 21 34 341 355 885 899 22 33 358 372 902 916 23 32 375 389 919 933 24 31 392 406 936 950 25 29 409 423 953 967 26 28 426 440 970 984 27 27 443 457 987 1001 28 26 460 474 1004 1018 29 24 477 491 1021 1035 30 23 494 508 1038 1052 31 22 511 525 1055 1069 32 21 528 542 1072 1086 // 1696 Extension 42 channels (index 33 to 42) 33 60 1089 1103 1573 1587 34 55 1106 1120 1590 1604 35 50 1123 1137 1607 1621 36 45 1140 1154 1624 1638 37 40 1157 1171 1641 1655 38 35 1174 1188 1658 1672 39 30 1191 1205 1675 1689 40 25 1208 1222 1692 1706 41 20 1225 1239 1709 1723 42 19 1242 1256 1726 1740 // 1830 Extension to 44 channels (index 43 and 44) 43 18 1259 1273 1743 1757 44 17 1276 1290 1760 1774 // 1830 Extension to 88 channels (index 45 to 88) 45 595 1293 1307 1777 1791 46 585 1310 1324 1794 1808 47 575 1327 1341 1811 1825 48 565 1344 1358 1828 1842 49 545 1361 1375 1845 1859 50 535 1378 1392 1862 1876 51 525 1395 1409 1879 1893 52 515 1412 1426 1896 1910 53 495 1429 1443 1913 1927 54 485 1446 1460 1930 1944 55 475 1463 1477 1947 1961 56 465 1480 1494 1964 1978 57 445 1497 1511 1981 1995 58 435 1514 1528 1998 2012 59 425 1531 1545 2015 2029 60 415 1548 1562 2032 2046 61 395 3585 3599 2049 2063 62 385 3602 3616 2066 2080 63 375 3619 3633 2083 2097 64 365 3636 3650 2100 2114 65 345 3653 3667 2117 2131 66 335 3670 3684 2134 2148 67 325 3687 3701 2151 2165 68 315 3704 3718 2168 2182 69 295 3721 3735 2185 2199 70 285 3738 3752 2202 2216 71 275 3755 3769 2219 2233 72 265 3772 3786 2236 2250 73 245 3789 3803 2253 2267 74 235 3806 3820 2270 2284 75 225 3823 3837 2287 2301 76 215 3840 3854 2304 2318 77 605 3857 3871 2321 2335 78 555 3874 3888 2338 2352 79 505 3891 3905 2355 2369 80 455 3908 3922 2372 2386 81 405 3434 3448 3946 3960 82 355 3451 3465 3963 3977 83 305 3468 3482 3980 3994 84 255 3485 3499 3997 4011 85 205 3502 3516 4014 4028 86 195 3519 3533 4031 4045 87 185 3536 3550 4048 4062 88 175 3553 3567 4065 4079 -------------------------------------------")
tmnxWaveTrackerWaveKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerWaveKey2.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerWaveKey2.setDescription("the value of tmnxWaveTrackerWaveKey2 specifies the second Wavelength Tracker Key (or Identifier) to be transmitted on the interface's optical signal when tmnxWaveTrackerEncodeEnable is set to 'true (1)'. Refer to the description of tmnxWaveTrackerWaveKey1 for the valid values based on the ITU channel.")
tmnxWaveTrackerTrailName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerTrailName.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerTrailName.setDescription("The value of tmnxWaveTrackerTrailName indicates the trail name of the encode point. This trail is usually transmitted in the OTU pm-tti. tmnxWaveTrackerTrailName is equivalent to 'tnWaveKeyEncodeTrailName' of the 1696-Roadm MIBs.")
tmnxWaveTrackerCfgAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 8), TmnxWaveTrackerAlarm().clone(namedValues=NamedValues(("encFail", 0), ("encDegr", 1), ("pwrFail", 2), ("pwrDegr", 3), ("pwrHigh", 4), ("pwrLow", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxWaveTrackerCfgAlarms.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerCfgAlarms.setDescription('The value of tmnxWaveTrackerCfgAlarms specifies the alarms that are to be monitored by the Wavelength Tracker interface. If an alarm bit is set, then the corresponding alarm will generate a raise or clear notification when its state changes. An unset bit specifies that the alarm corresponding with the bit will not report on its state transitions.')
tmnxWaveTrackerAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 9), TmnxWaveTrackerAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerAlarmState.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerAlarmState.setDescription('The value of tmnxWaveTrackerAlarmState indicates which monitored alarms are raised against the Wavelength Tracker interface.')
tmnxWaveTrackerMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 10), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerMeasuredPower.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerMeasuredPower.setDescription("tmnxWaveTrackerMeasuredPower indicates the current average output power of the interface's transmitted optical signal. The UNITS mBm are units of 0.01 dBm or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.")
tmnxWaveTrackerMaxAttainablePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 11), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerMaxAttainablePwr.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerMaxAttainablePwr.setDescription("tmnxWaveTrackerMaxAttainablePwr indicates the maximum average output power of the interface's transmitted optical signal at end of life. The UNITS mBm are units of 0.01 dBm or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.")
tmnxWaveTrackerMinAttainablePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 12), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerMinAttainablePwr.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerMinAttainablePwr.setDescription("tmnxWaveTrackerMinAttainablePwr indicates the minimum average output power of the interface's transmitted optical signal at end of life. The UNITS mBm are units of 0.01 dBm or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.")
tmnxWaveTrackerUpperPowerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 13), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerUpperPowerMargin.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerUpperPowerMargin.setDescription("tmnxWaveTrackerUpperPowerMargin indicates how much the average output power of the interface's transmitted optical signal can be increased. The UNITS millibels (mB) are units of 0.01 dB or dB multiplied by 100. The mB is used when integers are required instead of floating point. For example: 5.21 dB is equivalent to 521 mB.")
tmnxWaveTrackerLowerPowerMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 48, 1, 14), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxWaveTrackerLowerPowerMargin.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerLowerPowerMargin.setDescription("tmnxWaveTrackerLowerPowerMargin indicates how much the average output power of the interface's transmitted optical signal can be decreased. The UNITS mBm are units of 0.01 dB or dB multiplied by 100. The mB is used when integers are required instead of floating point. For example: 5.21 dB is equivalent to 521 mB.")
tPortAccEgrQGrpHMTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 49), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpHMTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHMTableLastChgd.setDescription('The value of tPortAccEgrQGrpHMTableLastChgd indicates the timestamp of last change to the tPortAccEgrQGrpHostMatchTable.')
tPortAccEgrQGrpHostMatchTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50), )
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchTable.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchTable.setDescription("The value of tPortAccEgrQGrpHostMatchTable defines a set of string values optionally used by subscriber management to map subscriber's and subscriber host's policed traffic to a specific egress port queue group.")
tPortAccEgrQGrpHostMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMIntDestId"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMOrgString"))
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchEntry.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchEntry.setDescription('The value of tPortAccEgrQGrpHostMatchEntry defines an entry in the tPortAccEgrQGrpHostMatchTable. Entries are created/deleted in this table by SNMP sets to tPortAccEgrQGrpHMRowStatus.')
tPortAccEgrQGrpHMIntDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 1), TmnxSubMgtIntDestId())
if mibBuilder.loadTexts: tPortAccEgrQGrpHMIntDestId.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHMIntDestId.setDescription('The value of tPortAccEgrQGrpHMIntDestId defines the intermediate destination id to match on.')
tPortAccEgrQGrpHMOrgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 2), TmnxSubMgtOrgStrOrZero())
if mibBuilder.loadTexts: tPortAccEgrQGrpHMOrgString.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHMOrgString.setDescription("The value of tPortAccEgrQGrpHMOrgString defines the organization string to match on. If tPortAccEgrQGrpHMOrgString is the empty string (''), every subscriber with an organization string will not match this entry. If tPortAccEgrQGrpHMOrgString is the wildcard symbol ('*'), every subscriber with an organization string will match this entry, if the tPortAccEgrQGrpHMIntDestId matches. Currently only the empty string ('') is accepted.")
tPortAccEgrQGrpHMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortAccEgrQGrpHMRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tPortAccEgrQGrpHMRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHMRowStatus.setDescription('The value of tPortAccEgrQGrpHMRowStatus allows entries to be created and deleted in the tPortAccEgrQGrpHostMatchTable. The creation of an entry in this table will succeed only if the queue-group being created exist in TIMETRA-QOS-MIB::tQosEgrQGroupTable.')
tPortAccEgrQGrpHMLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 50, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrQGrpHMLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHMLastChgd.setDescription('The value of tPortAccEgrQGrpHMLastChgd indicates the value of sysUpTime when the host match entry was last modified.')
tPortAccIngSchedStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51), )
if mibBuilder.loadTexts: tPortAccIngSchedStatTable.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatTable.setDescription('The value of tPortAccIngSchedStatTable defines access Ingress Queue Group related statistics per scheduler.')
tPortAccIngSchedStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccIngQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccIngSchedStatName"))
if mibBuilder.loadTexts: tPortAccIngSchedStatEntry.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatEntry.setDescription('The value of tPortAccIngSchedStatEntry defines an entry in the tPortAccIngSchedStatTable. It represents statistics about a specific QoS ingress queue group scheduler on the port specified by tPortAccIngSchedStatName on the access side.')
tPortAccIngSchedStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccIngSchedStatName.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatName.setDescription('The value of tPortAccEgrSchedStatName indicates the scheduler associated with this queue group on this port.')
tPortAccIngSchedStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPkts.setDescription('The value of tPortAccIngSchedStatFwdPkts indicates the number of forwarded packets by this port on this queue-group using this scheduler.')
tPortAccIngSchedStatFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPktsHi.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPktsHi.setDescription('The value of tPortAccIngSchedStatFwdPktsHi indicates upper 32 bits of tPortAccIngSchedStatFwdPkts object.')
tPortAccIngSchedStatFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPktsLo.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdPktsLo.setDescription('The value of tPortAccIngSchedStatFwdPktsLo indicates lower 32 bits of tPortAccIngSchedStatFwdPkts object.')
tPortAccIngSchedStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOcts.setDescription('The value of tPortAccIngSchedStatFwdOcts indicates the number of forwarded octets by this port on this queue-group using this scheduler.')
tPortAccIngSchedStatFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOctsHi.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOctsHi.setDescription('The value of tPortAccIngSchedStatFwdOctsHi indicates upper 32 bits of tPortAccIngSchedStatFwdOcts object.')
tPortAccIngSchedStatFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 51, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOctsLo.setStatus('current')
if mibBuilder.loadTexts: tPortAccIngSchedStatFwdOctsLo.setDescription('The value of tPortAccIngSchedStatFwdOctsLo indicates lower 32 bits of tPortAccIngSchedStatFwdOcts object.')
tPortAccEgrSchedStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52), )
if mibBuilder.loadTexts: tPortAccEgrSchedStatTable.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatTable.setDescription('The value of tPortAccEgrSchedStatTable defines access Egress Queue Group related statistics per scheduler.')
tPortAccEgrSchedStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortAccEgrSchedStatName"))
if mibBuilder.loadTexts: tPortAccEgrSchedStatEntry.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatEntry.setDescription('The value of tPortAccEgrSchedStatEntry defines an entry in the tPortAccEgrSchedStatTable. It represents statistics about a specific QoS egress queue group scheduler on the port specified by tPortAccEgrSchedStatName on the access side.')
tPortAccEgrSchedStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortAccEgrSchedStatName.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatName.setDescription('The value of tPortAccEgrSchedStatName indicates the scheduler associated with this queue group on this port.')
tPortAccEgrSchedStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPkts.setDescription('The value of tPortAccEgrSchedStatFwdPkts indicates the number of forwarded packets by this port on this queue-group using this scheduler.')
tPortAccEgrSchedStatFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPktsHi.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPktsHi.setDescription('The value of tPortAccEgrSchedStatFwdPktsHi indicates upper 32 bits of tPortAccEgrSchedStatFwdPkts object.')
tPortAccEgrSchedStatFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPktsLo.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdPktsLo.setDescription('The value of tPortAccEgrSchedStatFwdPktsLo indicates lower 32 bits of tPortAccEgrSchedStatFwdPkts object.')
tPortAccEgrSchedStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOcts.setDescription('tPortAccEgrSchedStatFwdOcts indicates the number of forwarded octets by this port on this queue-group using this scheduler.')
tPortAccEgrSchedStatFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOctsHi.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOctsHi.setDescription('The value of tPortAccEgrSchedStatFwdOctsHi indicates upper 32 bits of tPortAccEgrSchedStatFwdOcts object.')
tPortAccEgrSchedStatFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 52, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOctsLo.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrSchedStatFwdOctsLo.setDescription('The value of tPortAccEgrSchedStatFwdOctsLo indicates lower 32 bits of tPortAccEgrSchedStatFwdOcts object.')
tPortNetEgrSchedStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53), )
if mibBuilder.loadTexts: tPortNetEgrSchedStatTable.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatTable.setDescription('The value of tPortNetEgrSchedStatTable defines network Egress Queue Group related statistics per scheduler.')
tPortNetEgrSchedStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrSchedStatName"))
if mibBuilder.loadTexts: tPortNetEgrSchedStatEntry.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatEntry.setDescription('The value of tPortNetEgrSchedStatEntry defines an entry in the tPortNetEgrSchedStatTable. It represents statistics about a specific QoS egress queue group scheduler on the port specified by tPortNetEgrSchedStatName on the network side.')
tPortNetEgrSchedStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortNetEgrSchedStatName.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatName.setDescription('The value of tPortAccEgrSchedStatName indicates the scheduler associated with this queue group on this port.')
tPortNetEgrSchedStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPkts.setDescription('The value of tPortNetEgrSchedStatFwdPkts indicates the number of forwarded packets by this port on this queue-group using this scheduler.')
tPortNetEgrSchedStatFwdPktsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPktsHi.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPktsHi.setDescription('The value of tPortNetEgrSchedStatFwdPktsHi indicates upper 32 bits of tPortNetEgrSchedStatFwdPkts object.')
tPortNetEgrSchedStatFwdPktsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPktsLo.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdPktsLo.setDescription('tPortNetEgrSchedStatFwdPktsLo indicates lower 32 bits of tPortNetEgrSchedStatFwdPkts object.')
tPortNetEgrSchedStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOcts.setDescription('The value of tPortNetEgrSchedStatFwdOcts indicates the number of forwarded octets by this port on this queue-group using this scheduler.')
tPortNetEgrSchedStatFwdOctsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOctsHi.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOctsHi.setDescription('tPortNetEgrSchedStatFwdOctsHi indicates upper 32 bits of tPortNetEgrSchedStatFwdOcts object.')
tPortNetEgrSchedStatFwdOctsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 53, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOctsLo.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrSchedStatFwdOctsLo.setDescription('The value of tPortNetEgrSchedStatFwdOctsLo indicates lower 32 bits of tPortNetEgrSchedStatFwdOcts object.')
tPortEgrVPortTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 54), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortTableLastChgd.setDescription('The value of tPortEgrVPortTableLastChgd indicates the timestamp of last change to the tPortEgrVPortTable.')
tPortEgrVPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55), )
if mibBuilder.loadTexts: tPortEgrVPortTable.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortTable.setDescription('The tPortEgrVPortTable has an entry for each virtual port defined on this port.')
tPortEgrVPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"))
if mibBuilder.loadTexts: tPortEgrVPortEntry.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortEntry.setDescription('Each row entry represents a virtual port defined on the port for the chassis in the system.')
tPortEgrVPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortEgrVPortName.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortName.setDescription('The value of tPortEgrVPortName is the name of the virtual port on this port.')
tPortEgrVPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortRowStatus.setDescription('The value of tPortEgrVPortRowStatus specifies the row-status of this entry in this table.')
tPortEgrVPortLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortLastChanged.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortLastChanged.setDescription('The value of tPortEgrVPortLastChanged indicates the time-stamp of the last change in this entry.')
tPortEgrVPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortDescr.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortDescr.setDescription('The value of tPortEgrVPortDescr specifies the description of the virtual port.')
tPortEgrVPortSchedPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 5), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortSchedPol.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortSchedPol.setDescription('The value of tPortEgrVPortSchedPol specifies the name of the port scheduler policy assigned to this virtual port.')
tPortEgrVPortAggRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 55, 1, 6), TPortSchedulerPIR().clone(-1)).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortAggRateLimit.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortAggRateLimit.setDescription('The value of tPortEgrVPortAggRateLimit specifies the maximum total rate of all subscribers for this virtual port. The value -1 means that there is no limit.')
tPortEgrVPortHMTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 56), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortHMTableLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHMTableLastChgd.setDescription('The value of tPortEgrVPortHMTableLastChgd indicates the timestamp of last change to the tPortEgrVPortHostMatchTable.')
tPortEgrVPortHostMatchTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57), )
if mibBuilder.loadTexts: tPortEgrVPortHostMatchTable.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHostMatchTable.setDescription("The value of tPortEgrVPortHostMatchTable defines a set of string values optionally used by subscriber management to map subscriber's and subscriber host's queued traffic to a specific egress port virtual port.")
tPortEgrVPortHostMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortHMIntDestId"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortHMOrgString"))
if mibBuilder.loadTexts: tPortEgrVPortHostMatchEntry.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHostMatchEntry.setDescription('The value of tPortEgrVPortHostMatchEntry defines an entry in the tPortEgrVPortHostMatchTable. Entries are created/deleted in this table by SNMP sets to tPortEgrVPortHMRowStatus.')
tPortEgrVPortHMIntDestId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 1), TmnxSubMgtIntDestId())
if mibBuilder.loadTexts: tPortEgrVPortHMIntDestId.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHMIntDestId.setDescription('The value of tPortEgrVPortHMIntDestId defines the intermediate destination id to match on.')
tPortEgrVPortHMOrgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 2), TmnxSubMgtOrgStrOrZero())
if mibBuilder.loadTexts: tPortEgrVPortHMOrgString.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHMOrgString.setDescription("The value of tPortEgrVPortHMOrgString defines the organization string to match on. If tPortEgrVPortHMOrgString is the empty string (''), every subscriber with an organization string will not match this entry. If tPortEgrVPortHMOrgString is the wildcard symbol ('*'), every subscriber with an organization string will match this entry, if the tPortEgrVPortHMIntDestId matches. Currently only the empty string ('') is accepted.")
tPortEgrVPortHMRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tPortEgrVPortHMRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: tPortEgrVPortHMRowStatus.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHMRowStatus.setDescription('The value of tPortEgrVPortHMRowStatus allows entries to be created and deleted in the tPortEgrVPortHostMatchTable.')
tPortEgrVPortHMLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 57, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPortHMLastChgd.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHMLastChgd.setDescription('The value of tPortEgrVPortHMLastChgd indicates the value of sysUpTime when the host match entry was last modified.')
tmnxOpticalPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58), )
if mibBuilder.loadTexts: tmnxOpticalPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortCfgTable.setDescription('The tmnxOpticalPortCfgTable has an entry for each DWDM Optical port on each IOM card in each chassis in the Alcatel SROS system.')
tmnxOpticalPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxOpticalPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortCfgEntry.setDescription('Each row entry represents an Optical port on a IOM card in a chassis in the system. Entries cannot be created and deleted via SNMP SET operations. The tmnxOpticalPortCfgEntry contains attributes that are unique to the Optical ports.')
tmnxOpticalPortAmpCfgAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 1), TmnxOpticalAmpAlarm().clone(namedValues=NamedValues(("ampIld", 0), ("ampTmp", 1), ("ampMth", 2), ("ampMtl", 3), ("ampLos", 4), ("ampLop", 5), ("ampCom", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortAmpCfgAlarms.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpCfgAlarms.setDescription('The value of tmnxOpticalPortAmpCfgAlarms specifies the alarms that are monitored by the optical amplifier interface. If an alarm bit is set, then the corresponding alarm will generate a raise or clear notification when its state changes. An unset bit specifies that the alarm corresponding with the bit will not report on its state transitions.')
tmnxOpticalPortTdcmCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 2), TmnxOpticalTdcmCtrlMode().clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCtrlMode.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCtrlMode.setDescription('The value of tmnxOpticalPortTdcmCtrlMode specifies the current operational mode of the tunable dispersion compensation module. When TmnxOpticalTdcmCtrlMode is set to automatic, the dispersion setpoint can be retrieved from tmnxOpticalPortTdcmAutoDisp. When TmnxOpticalTdcmCtrlMode is set to manual, the dispersion setpoint can be configured with tmnxOpticalPortTdcmManCfgDisp.')
tmnxOpticalPortTdcmManCfgDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200))).setUnits('picoseconds per nanometer').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmManCfgDisp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmManCfgDisp.setDescription('The value of tmnxOpticalPortTdcmManCfgDisp specifies the manually configured dispersion of the tunable dispersion compensation module. This parameter is valid when the tmnxOpticalPortTdcmCtrlMode is manual. Dispersion is expressed in pico-seconds per nano-meter (ps/nm).')
tmnxOpticalPortTdcmCfgRxChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 4), TmnxOpticalDwdmChannel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCfgRxChan.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCfgRxChan.setDescription('tmnxOpticalPortTdcmCfgRxChan specifies the DWDM ITU channel at which the tunable dispersion compensation module should operate. If a value of zero(0) has been specified, tmnxOpticalPortTdcmPresRxChan will be changed by the system to be equivalent to tmnxPortDwdmLaserChannel. tmnxOpticalPortTdcmCfgRxChan should be set to the same value as tmnxPortDwdmLaserChannel in most cases, but may be set to a different value when the received wavelength is different from the transmitted wavelength.')
tmnxOpticalPortTdcmCfgAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 5), TmnxOpticalTdcmAlarm().clone(namedValues=NamedValues(("tdcmNotRdy", 0), ("tdcmMth", 1), ("tdcmMtl", 2), ("tdcmUnLck", 3), ("tdcmTmpLim", 4), ("tdcmEprInv", 5), ("tdcmCom", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCfgAlarms.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCfgAlarms.setDescription("The value of tmnxOpticalPortTdcmCfgAlarms specifies the alarms that are monitored by the tunable dispersion compensation module's interface. If an alarm bit is set, then the corresponding alarm will generate a raise or clear notification when its state changes. An unset bit specifies that the alarm corresponding with the bit will not report on its state transitions.")
tmnxOpticalPortTdcmDispSwpStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200)).clone(-1200)).setUnits('picoseconds per nanometer').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmDispSwpStart.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmDispSwpStart.setDescription('The value of tmnxOpticalPortTdcmDispSwpStart specifies the the start value for dispersion sweeping on a tunable dispersion compensation module. Dispersion is expressed in pico-seconds per nano-meter (ps/nm).')
tmnxOpticalPortTdcmDispSwpEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 58, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200)).clone(1200)).setUnits('picoseconds per nanometer').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmDispSwpEnd.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmDispSwpEnd.setDescription('The value of tmnxOpticalPortTdcmDispSwpEnd specifies the the end value for dispersion sweeping on a tunable dispersion compensation module. Dispersion is expressed in pico-seconds per nano-meter (ps/nm).')
tmnxOpticalPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59), )
if mibBuilder.loadTexts: tmnxOpticalPortOperTable.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortOperTable.setDescription('The tmnxOpticalPortOperTable has an entry for each DWDM Optical port on each IOM card in each chassis in the Alcatel SROS system.')
tmnxOpticalPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"))
if mibBuilder.loadTexts: tmnxOpticalPortOperEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortOperEntry.setDescription('Each row entry represents an Optical port on a IOM card in a chassis in the system. The tmnxOpticalPortOperEntry contains attributes that are unique to the Optical ports.')
tmnxOpticalPortHasRxAmplifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortHasRxAmplifier.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortHasRxAmplifier.setDescription('The value of tmnxOpticalPortHasRxAmplifier indicates whether or not the port has an optical amplifier on the receive path.')
tmnxOpticalPortHasRxTdcm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortHasRxTdcm.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortHasRxTdcm.setDescription('The value of tmnxOpticalPortHasRxTdcm indicates whether or not the port has an optical tunable dispersion compensation module on the receive path.')
tmnxOpticalPortAmpPowerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 3), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPowerIn.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpPowerIn.setDescription('The value of tmnxOpticalPortAmpPowerIn indicates the received average optical power at the input of the optical amplifier. The UNITS millibels (mBm) are units of 0.01 decibel relative to one milliwatt (dBm) or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.')
tmnxOpticalPortAmpGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 4), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpGain.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpGain.setDescription('The value of tmnxOpticalPortAmpGain indicates the gain of the optical amplifier. The gain indicates how much the input signal is amplified. The UNITS millibels (mB) are units of 0.01 dB or dB multiplied by 100. The mB is used when integers are required instead of floating point. For example: 5.21 dB is equivalent to 521 mB.')
tmnxOpticalPortAmpPowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 5), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPowerOut.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpPowerOut.setDescription('The value of tmnxOpticalPortAmpPowerOut indicates the optical power at the output of the optical amplifier. The UNITS millibels (mBm) are units of 0.01 decibel relative to one milliwatt (dBm) or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.')
tmnxOpticalPortAmpPumpTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 6), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPumpTemp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpPumpTemp.setDescription("The value of tmnxOpticalPortAmpPumpTemp indicates the current temperature of the optical amplifier's pump in millidegrees Celsius.")
tmnxOpticalPortAmpModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 7), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpModuleTemp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpModuleTemp.setDescription("The value of tmnxOpticalPortAmpModuleTemp indicates the current temperature of the optical amplifier module's case in millidegrees Celsius.")
tmnxOpticalPortAmpPumpCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 8), Unsigned32()).setUnits('microAmperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpPumpCurrent.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpPumpCurrent.setDescription("The value of tmnxOpticalPortAmpPumpCurrent indicates the amount of electical current used by the optical amplifier's pump in microAmperes (uA).")
tmnxOpticalPortAmpAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 9), TmnxOpticalAmpAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpAlarmState.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpAlarmState.setDescription("The value of tmnxOpticalPortAmpAlarmState indicates which monitored alarms are raised against the optical amplifier's interface.")
tmnxOpticalPortAmpSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpSerialNum.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpSerialNum.setDescription('The value of tmnxOpticalPortAmpSerialNum indicates the manufacturing serial number in ASCII characters as read from the optical amplifier module. An empty string indicates the serial number is unspecified. The string is expected to contain printable ASCII characters. Any unprintable ASCII characters read from the module will be filtered out. The string will be NULL terminated.')
tmnxOpticalPortAmpCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 11), TmnxOpticalAmpCtrlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortAmpCtrlState.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortAmpCtrlState.setDescription('The value of tmnxOpticalPortAmpCtrlState indicates the state of the control loop that optimizes the receive optical power of to the MSA optics.')
tmnxOpticalPortTdcmPowerIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 12), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPowerIn.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPowerIn.setDescription('The value of tmnxOpticalPortTdcmPowerIn indicates the received average optical power at the input the tunable dispersion compensation module. The UNITS millibels (mBm) are units of 0.01 decibel relative to one milliwatt (dBm) or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.')
tmnxOpticalPortTdcmLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 13), Unsigned32()).setUnits('mB').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmLoss.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmLoss.setDescription('The value of tmnxOpticalPortTdcmLoss indicates the optical loss occuring in the tunable dispersion compensation module. The UNITS millibels (mB) are units of 0.01 dB or dB multiplied by 100. The mB is used when integers are required instead of floating point. For example: 5.21 dB is equivalent to 521 mB.')
tmnxOpticalPortTdcmPowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 14), Integer32()).setUnits('mBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPowerOut.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPowerOut.setDescription('The value of tmnxOpticalPortTdcmPowerOut indicates the optical power at the output of tunable dispersion compensation module. The UNITS millibels (mBm) are units of 0.01 decibel relative to one milliwatt (dBm) or dBm multiplied by 100. The mBm is used when integers are required instead of floating point. For example: -5.21 dBm is equivalent to -521 mBm.')
tmnxOpticalPortTdcmRtd1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 15), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd1Temp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd1Temp.setDescription("The value of tmnxOpticalPortTdcmRtd1Temp indicates the current temperature of the tunable dispersion compensation module's first Resistance Temperature Detector (also known as a thermistor). The temperature is in units of millidegrees Celsius.")
tmnxOpticalPortTdcmRtd2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 16), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd2Temp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd2Temp.setDescription("The value of tmnxOpticalPortTdcmRtd2Temp indicates the current temperature of the tunable dispersion compensation module's second Resistance Temperature Detector (also known as a thermistor). The temperature is in units of millidegrees Celsius.")
tmnxOpticalPortTdcmRtd3Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 17), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd3Temp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd3Temp.setDescription("The value of tmnxOpticalPortTdcmRtd3Temp indicates the current temperature of the tunable dispersion compensation module's third Resistance Temperature Detector (also known as a thermistor). The temperature is in units of millidegrees Celsius.")
tmnxOpticalPortTdcmRtd4Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 18), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd4Temp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmRtd4Temp.setDescription("The value of tmnxOpticalPortTdcmRtd4Temp indicates the current temperature of the tunable dispersion compensation module's fourth Resistance Temperature Detector (also known as a thermistor). The temperature is in units of millidegrees Celsius.")
tmnxOpticalPortTdcmModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 19), Integer32()).setUnits('millidegrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmModuleTemp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmModuleTemp.setDescription("The value of tmnxOpticalPortTdcmModuleTemp indicates the current temperature of the tunable dispersion compensation module's case in millidegrees Celsius.")
tmnxOpticalPortTdcmMinDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 20), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMinDisp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMinDisp.setDescription('The value of tmnxOpticalPortTdcmMinDisp indicates the minimum configurable dispersion of the tunable dispersion compensation module. Dispersion is expressed in pico-seconds per nano-meter (ps/nm).')
tmnxOpticalPortTdcmMaxDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 21), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMaxDisp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMaxDisp.setDescription('The value of tmnxOpticalPortTdcmMaxDisp indicates the maximum configurable dispersion of the tunable dispersion compensation module. Dispersion is expressed in pico-seconds per nano-meter (ps/nm).')
tmnxOpticalPortTdcmAutoDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 22), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmAutoDisp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmAutoDisp.setDescription('The value of tmnxOpticalPortTdcmAutoDisp indicates the currently auto-configured dispersion of the tunable dispersion compensation module. Dispersion is expressed in pico-seconds per nano-meter (ps/nm).')
tmnxOpticalPortTdcmMeasDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 23), Integer32()).setUnits('picoseconds per nanometer').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMeasDisp.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmMeasDisp.setDescription('The value of tmnxOpticalPortTdcmMeasDisp indicates the dynamically measured dispersion of the tunable dispersion compensation module. Dispersion is expressed in pico-seconds per nano-meter (ps/nm).')
tmnxOpticalPortTdcmPresRxChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 24), TmnxOpticalDwdmChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPresRxChan.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmPresRxChan.setDescription('tmnxOpticalPortTdcmPresRxChan indicates the DWDM ITU channel at which the tunable dispersion compensation module is operating.')
tmnxOpticalPortTdcmAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 25), TmnxOpticalTdcmAlarm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmAlarmState.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmAlarmState.setDescription("The value of tmnxOpticalPortTdcmAlarmState indicates which monitored alarms are raised against the dispersion compensation module's interface.")
tmnxOpticalPortTdcmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmSerialNum.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmSerialNum.setDescription('The value of tmnxOpticalPortTdcmSerialNum indicates the manufacturing serial number in ASCII characters as read from the tunable dispersion compensation module. An empty string indicates the serial number is unspecified. The string is expected to contain printable ASCII characters. Any unprintable ASCII characters read from the module will be filtered out. The string will be NULL terminated.')
tmnxOpticalPortTdcmCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 27), TmnxOpticalTdcmCtrlState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCtrlState.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortTdcmCtrlState.setDescription('The TmnxOpticalTdcmCtrlState indicates the state of the control loop that optimizes the dispersion by tuning the dispersion compensation module to the set point at which the FEC corrected error rate is the lowest.')
tmnxOpticalPortDwdmChannelMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 28), TmnxOpticalDwdmChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortDwdmChannelMin.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortDwdmChannelMin.setDescription('tmnxOpticalPortDwdmChannelMin indicates the minimum DWDM ITU channel supported by a tunable optical interface.')
tmnxOpticalPortDwdmChannelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 29), TmnxOpticalDwdmChannel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortDwdmChannelMax.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortDwdmChannelMax.setDescription('tmnxOpticalPortDwdmChannelMax indicates the maximum DWDM ITU channel supported by a tunable optical interface.')
tmnxOpticalPortLaserTunability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 59, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unequipped", 0), ("notTunable", 1), ("fullyTunable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxOpticalPortLaserTunability.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortLaserTunability.setDescription("tmnxOpticalPortLaserTunability indicates if the optical interface laser is tunable or fixed. Value 'unequipped(0)' indicates that the optical interface is not equipped with a laser.")
tmnxPortEgrExpShaperTblLastChngd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 60), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperTblLastChngd.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperTblLastChngd.setDescription('The value of tmnxPortEgrExpShaperTblLastChngd indicates the sysUpTime at the time of the last modification of tmnxPortEgrExpShaperTable.')
tmnxPortEgrExpShaperTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61), )
if mibBuilder.loadTexts: tmnxPortEgrExpShaperTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperTable.setDescription('The tmnxPortEgrExpShaperTable contains the information of each egress expanded shaper at the port level configured on this system.')
tmnxPortEgrExpShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperName"))
if mibBuilder.loadTexts: tmnxPortEgrExpShaperEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperEntry.setDescription('Each row in tmnxPortEgrExpShaperEntry represents a particular egress expanded secondary shaper at the port level specified by tmnxPortEgrExpShaperName.')
tmnxPortEgrExpShaperName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxPortEgrExpShaperName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperName.setDescription('The value of tmnxPortEgrExpShaperName specifies the expanded shaper name on the egress side of this port.')
tmnxPortEgrExpShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperRowStatus.setDescription('The value of tmnxPortEgrExpShaperRowStatus specifies the row-status of this entry in this table.')
tmnxPortEgrExpShaperRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 3), TExpSecondaryShaperPIRRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperRate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperRate.setDescription('The value of tmnxPortEgrExpShaperRate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of this egress port expanded secondary shaper as a whole.')
tmnxPortEgrExpShaperClass1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 4), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass1Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass1Rate.setDescription('The value of tmnxPortEgrExpShaperClass1Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 1 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperClass2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 5), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass2Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass2Rate.setDescription('The value of tmnxPortEgrExpShaperClass2Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 2 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperClass3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 6), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass3Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass3Rate.setDescription('The value of tmnxPortEgrExpShaperClass3Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 3 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperClass4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 7), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass4Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass4Rate.setDescription('The value of tmnxPortEgrExpShaperClass4Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 4 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperClass5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 8), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass5Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass5Rate.setDescription('The value of tmnxPortEgrExpShaperClass5Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 5 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperClass6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 9), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass6Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass6Rate.setDescription('The value of tmnxPortEgrExpShaperClass6Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 6 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperClass7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 10), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass7Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass7Rate.setDescription('The value of tmnxPortEgrExpShaperClass7Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 7 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperClass8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 11), TExpSecondaryShaperClassRate().clone(-1)).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass8Rate.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass8Rate.setDescription('The value of tmnxPortEgrExpShaperClass8Rate specifies the explicit maximum frame based bandwidth limit, in kilobits per second, of the Class 8 traffic using this egress port expanded secondary shaper.')
tmnxPortEgrExpShaperLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLastChanged.setDescription('The value of tmnxPortEgrExpShaperLastChanged indicates the value of sysUpTime when the egress expanded shaper entry was last modified.')
tmnxPortEgrExpShaperLoBrstMaxCls = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLoBrstMaxCls.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLoBrstMaxCls.setDescription('The value of tmnxPortEgrExpShaperLoBrstMaxCls specifies which class should use the low priority burst threshold. All classes starting from 1, up to and including that specified by tmnxPortEgrExpShaperLoBrstMaxCls use the low priority burst threshold. All classes greater than the value of tmnxPortEgrExpShaperLoBrstMaxCls up to and including class 8 use the high priority burst threshold.')
tmnxPortEgrExpShaperClass1Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass1Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass1Thresh.setDescription("The tmnxPortEgrExpShaperClass1Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-1. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperClass2Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass2Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass2Thresh.setDescription("The tmnxPortEgrExpShaperClass2Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-2. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperClass3Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass3Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass3Thresh.setDescription("The tmnxPortEgrExpShaperClass3Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-3. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperClass4Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass4Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass4Thresh.setDescription("The tmnxPortEgrExpShaperClass4Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-4. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperClass5Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass5Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass5Thresh.setDescription("The tmnxPortEgrExpShaperClass5Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-5. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperClass6Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass6Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass6Thresh.setDescription("The tmnxPortEgrExpShaperClass6Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-6. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperClass7Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass7Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass7Thresh.setDescription("The tmnxPortEgrExpShaperClass7Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-7. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperClass8Thresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass8Thresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperClass8Thresh.setDescription("The tmnxPortEgrExpShaperClass8Thresh specifies the monitoring non-conformance burst threshold for the exp-secondary-shaper class-8. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 8190), )).clone(-1)).setUnits('kbytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperThresh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperThresh.setDescription("The tmnxPortEgrExpShaperThresh specifies the monitoring non-conformance burst threshold for the aggregate exp-secondary-shaper. When set to default value '-1', the system will adopt a suitable default setting for this threshold.")
tmnxPortEgrExpShaperLoBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 23), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLoBurstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperLoBurstLimit.setDescription('The tmnxPortEgrExpShaperLoBurstLimit specifies the number of bytes to be used as the low burst threshold for the aggregate rate of the classes pertaining to the low burst threshold in the expanded secondary shaper.')
tmnxPortEgrExpShaperHiBurstInc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 65528), )).clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperHiBurstInc.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperHiBurstInc.setDescription("The tmnxPortEgrExpShaperHiBurstInc specifies the incremental number of bytes above the low burst limit to be used as the high burst threshold for the aggregate rate of the classes pertaining to the high burst threshold in the expanded secondary shaper. When set to the default value '-1', the system will default to a value of '4000' bytes.")
tmnxPortEgrExpShaperCl1BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 25), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl1BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl1BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl1BrstLimit specifies the explicit shaping burst size of the class.')
tmnxPortEgrExpShaperCl2BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 26), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl2BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl2BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl2BrstLimit specifies the explicit shaping burst size of the class.')
tmnxPortEgrExpShaperCl3BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 27), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl3BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl3BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl3BrstLimit specifies the explicit shaping burst size of the class.')
tmnxPortEgrExpShaperCl4BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 28), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl4BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl4BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl4BrstLimit specifies the explicit shaping burst size of the class.')
tmnxPortEgrExpShaperCl5BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 29), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl5BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl5BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl5BrstLimit specifies the explicit shaping burst size of the class.')
tmnxPortEgrExpShaperCl6BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 30), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl6BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl6BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl6BrstLimit specifies the explicit shaping burst size of the class.')
tmnxPortEgrExpShaperCl7BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 31), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl7BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl7BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl7BrstLimit specifies the explicit shaping burst size of the class.')
tmnxPortEgrExpShaperCl8BrstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 61, 1, 32), TClassBurstLimit().clone(-1)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl8BrstLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperCl8BrstLimit.setDescription('The value of tmnxPortEgrExpShaperCl8BrstLimit specifies the explicit shaping burst size of the class.')
tPortEgrExpShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62), )
if mibBuilder.loadTexts: tPortEgrExpShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperStatsTable.setDescription('The tPortEgrExpShaperStatsTable contains the statistics of each egress expanded shaper at the port level configured on this system. Most objects are represented in 64 bit. 32-bit version of the objects are available in tPortEgrExpShaperStatsHLTable.')
tPortEgrExpShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperName"))
if mibBuilder.loadTexts: tPortEgrExpShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperStatsEntry.setDescription('Each row in tPortEgrExpShaperStatsEntry represents a particular egress expanded secondary shaper statistics at the port level specified by tmnxPortEgrExpShaperName.')
tPortEgrExpShaperStLstClrdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperStLstClrdTime.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperStLstClrdTime.setDescription('The value of tPortEgrExpShaperStLstClrdTime indicates the sysUpTime when the counters in this table were last cleared.')
tPortEgrExpShaperCls1StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPkts.setDescription("The value of tPortEgrExpShaperCls1StFwdPkts indicates the number of packets forwarded by the class '1' egress expanded shaper.")
tPortEgrExpShaperCls1StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOcts.setDescription("The value of tPortEgrExpShaperCls1StFwdOcts indicates the number of octets forwarded by the class '1' egress expanded shaper.")
tPortEgrExpShaperCls1StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls1StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '1' egress expanded shaper.")
tPortEgrExpShaperCls2StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPkts.setDescription("The value of tPortEgrExpShaperCls2StFwdPkts indicates the number of packets forwarded by the class '2' egress expanded shaper.")
tPortEgrExpShaperCls2StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOcts.setDescription("The value of tPortEgrExpShaperCls2StFwdOcts indicates the number of octets forwarded by the class '2' egress expanded shaper.")
tPortEgrExpShaperCls2StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls2StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '2' egress expanded shaper.")
tPortEgrExpShaperCls3StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPkts.setDescription("The value of tPortEgrExpShaperCls3StFwdPkts indicates the number of packets forwarded by the class '3' egress expanded shaper.")
tPortEgrExpShaperCls3StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOcts.setDescription("The value of tPortEgrExpShaperCls3StFwdOcts indicates the number of octets forwarded by the class '3' egress expanded shaper.")
tPortEgrExpShaperCls3StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls3StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '3' egress expanded shaper.")
tPortEgrExpShaperCls4StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPkts.setDescription("The value of tPortEgrExpShaperCls4StFwdPkts indicates the number of packets forwarded by the class '4' egress expanded shaper.")
tPortEgrExpShaperCls4StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOcts.setDescription("The value of tPortEgrExpShaperCls4StFwdOcts indicates the number of octets forwarded by the class '4' egress expanded shaper.")
tPortEgrExpShaperCls4StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls4StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '4' egress expanded shaper.")
tPortEgrExpShaperCls5StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPkts.setDescription("The value of tPortEgrExpShaperCls5StFwdPkts indicates the number of packets forwarded by the class '5' egress expanded shaper.")
tPortEgrExpShaperCls5StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOcts.setDescription("The value of tPortEgrExpShaperCls5StFwdOcts indicates the number of octets forwarded by the class '5' egress expanded shaper.")
tPortEgrExpShaperCls5StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls5StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '5' egress expanded shaper.")
tPortEgrExpShaperCls6StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPkts.setDescription("The value of tPortEgrExpShaperCls6StFwdPkts indicates the number of packets forwarded by the class '6' egress expanded shaper.")
tPortEgrExpShaperCls6StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOcts.setDescription("The value of tPortEgrExpShaperCls6StFwdOcts indicates the number of octets forwarded by the class '6' egress expanded shaper.")
tPortEgrExpShaperCls6StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls6StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '6' egress expanded shaper.")
tPortEgrExpShaperCls7StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPkts.setDescription("The value of tPortEgrExpShaperCls7StFwdPkts indicates the number of packets forwarded by the class '7' egress expanded shaper.")
tPortEgrExpShaperCls7StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOcts.setDescription("The value of tPortEgrExpShaperCls7StFwdOcts indicates the number of octets forwarded by the class '7' egress expanded shaper.")
tPortEgrExpShaperCls7StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls7StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '7' egress expanded shaper.")
tPortEgrExpShaperCls8StFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPkts.setDescription("The value of tPortEgrExpShaperCls8StFwdPkts indicates the number of packets forwarded by the class '8' egress expanded shaper.")
tPortEgrExpShaperCls8StFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOcts.setDescription("The value of tPortEgrExpShaperCls8StFwdOcts indicates the number of octets forwarded by the class '8' egress expanded shaper.")
tPortEgrExpShaperCls8StMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOct.setDescription("The value of tPortEgrExpShaperCls8StMonOvrOct indicates the number of octets above the configured monitor-threshold (since last read) by the class '8' egress expanded shaper.")
tPortEgrExpShaperAggStFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPkts.setDescription('The value of tPortEgrExpShaperAggStFwdPkts indicates the aggregate number of packets forwarded by all of the classes of this egress expanded shaper.')
tPortEgrExpShaperAggStFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOcts.setDescription('The value of tPortEgrExpShaperAggStFwdOcts indicates the aggregate number of octets forwarded by all of the classes of this egress expanded shaper.')
tPortEgrExpShaperAggStMonOvrOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 62, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOct.setDescription('The value of tPortEgrExpShaperAggStMonOvrOct indicates the aggregate number of octets above the configured monitor-threshold (since last read) by all of the classes of this egress expanded shaper.')
tPortEgrExpShaperStatsHLTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63), )
if mibBuilder.loadTexts: tPortEgrExpShaperStatsHLTable.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperStatsHLTable.setDescription('The tPortEgrExpShaperStatsHLTable contains the statistics of each egress expanded shaper at the port level configured on this system represented in higher 32 and lower 32 bit objects.')
tPortEgrExpShaperStatsHLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperName"))
if mibBuilder.loadTexts: tPortEgrExpShaperStatsHLEntry.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperStatsHLEntry.setDescription('Each row in tPortEgrExpShaperStatsHLEntry represents a particular egress expanded secondary shaper statistics at the port level specified by tmnxPortEgrExpShaperName.')
tPortEgrExpShaperCls1StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls1StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls1StFwdPkts.')
tPortEgrExpShaperCls1StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls1StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls1StFwdPkts.')
tPortEgrExpShaperCls1StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls1StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls1StFwdOcts.')
tPortEgrExpShaperCls1StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls1StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls1StFwdOcts.')
tPortEgrExpShaperCls1StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls1StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls1StMonOvrOct.')
tPortEgrExpShaperCls1StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls1StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls1StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls1StMonOvrOct.')
tPortEgrExpShaperCls2StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls2StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls2StFwdPkts.')
tPortEgrExpShaperCls2StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls2StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls2StFwdPkts.')
tPortEgrExpShaperCls2StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls2StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls2StFwdOcts.')
tPortEgrExpShaperCls2StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls2StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls2StFwdOcts.')
tPortEgrExpShaperCls2StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls2StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls2StMonOvrOct.')
tPortEgrExpShaperCls2StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls2StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls2StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls2StMonOvrOct.')
tPortEgrExpShaperCls3StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls3StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls3StFwdPkts.')
tPortEgrExpShaperCls3StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls3StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls3StFwdPkts.')
tPortEgrExpShaperCls3StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls3StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls3StFwdOcts.')
tPortEgrExpShaperCls3StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls3StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls3StFwdOcts.')
tPortEgrExpShaperCls3StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls3StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls3StMonOvrOct.')
tPortEgrExpShaperCls3StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls3StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls3StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls3StMonOvrOct.')
tPortEgrExpShaperCls4StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls4StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls4StFwdPkts.')
tPortEgrExpShaperCls4StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls4StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls4StFwdPkts.')
tPortEgrExpShaperCls4StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls4StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls4StFwdOcts.')
tPortEgrExpShaperCls4StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls4StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls4StFwdOcts.')
tPortEgrExpShaperCls4StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls4StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls4StMonOvrOct.')
tPortEgrExpShaperCls4StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls4StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls4StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls4StMonOvrOct.')
tPortEgrExpShaperCls5StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls5StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls5StFwdPkts.')
tPortEgrExpShaperCls5StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls5StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls5StFwdPkts.')
tPortEgrExpShaperCls5StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls5StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls5StFwdOcts.')
tPortEgrExpShaperCls5StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls5StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls5StFwdOcts.')
tPortEgrExpShaperCls5StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls5StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls5StMonOvrOct.')
tPortEgrExpShaperCls5StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls5StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls5StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls5StMonOvrOct.')
tPortEgrExpShaperCls6StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls6StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls6StFwdPkts.')
tPortEgrExpShaperCls6StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls6StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls6StFwdPkts.')
tPortEgrExpShaperCls6StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls6StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls6StFwdOcts.')
tPortEgrExpShaperCls6StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls6StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls6StFwdOcts.')
tPortEgrExpShaperCls6StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls6StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls6StMonOvrOct.')
tPortEgrExpShaperCls6StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls6StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls6StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls6StMonOvrOct.')
tPortEgrExpShaperCls7StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls7StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls7StFwdPkts.')
tPortEgrExpShaperCls7StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls7StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls7StFwdPkts.')
tPortEgrExpShaperCls7StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls7StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls7StFwdOcts.')
tPortEgrExpShaperCls7StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls7StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls7StFwdOcts.')
tPortEgrExpShaperCls7StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls7StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls7StMonOvrOct.')
tPortEgrExpShaperCls7StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls7StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls7StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls7StMonOvrOct.')
tPortEgrExpShaperCls8StFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPktsL.setDescription('The value of tPortEgrExpShaperCls8StFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls8StFwdPkts.')
tPortEgrExpShaperCls8StFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdPktsH.setDescription('The value of tPortEgrExpShaperCls8StFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls8StFwdPkts.')
tPortEgrExpShaperCls8StFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOctsL.setDescription('The value of tPortEgrExpShaperCls8StFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperCls8StFwdOcts.')
tPortEgrExpShaperCls8StFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StFwdOctsH.setDescription('The value of tPortEgrExpShaperCls8StFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperCls8StFwdOcts.')
tPortEgrExpShaperCls8StMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOL.setDescription('The value of tPortEgrExpShaperCls8StMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperCls8StMonOvrOct.')
tPortEgrExpShaperCls8StMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperCls8StMonOvrOH.setDescription('The value of tPortEgrExpShaperCls8StMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperCls8StMonOvrOct.')
tPortEgrExpShaperAggStFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPktsL.setDescription('The value of tPortEgrExpShaperAggStFwdPktsL indicates the lower 32 bits of the value of tPortEgrExpShaperAggStFwdPkts.')
tPortEgrExpShaperAggStFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdPktsH.setDescription('The value of tPortEgrExpShaperAggStFwdPktsH indicates the higher 32 bits of the value of tPortEgrExpShaperAggStFwdPkts.')
tPortEgrExpShaperAggStFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOctsL.setDescription('The value of tPortEgrExpShaperAggStFwdOctsL indicates the lower 32 bits of the value of tPortEgrExpShaperAggStFwdOcts.')
tPortEgrExpShaperAggStFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStFwdOctsH.setDescription('The value of tPortEgrExpShaperAggStFwdOctsH indicates the higher 32 bits of the value of tPortEgrExpShaperAggStFwdOcts.')
tPortEgrExpShaperAggStMonOvrOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOL.setDescription('The value of tPortEgrExpShaperAggStMonOvrOL indicates the lower 32 bits of the value of tPortEgrExpShaperAggStMonOvrOct.')
tPortEgrExpShaperAggStMonOvrOH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 63, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrExpShaperAggStMonOvrOH.setDescription('The value of tPortEgrExpShaperAggStMonOvrOH indicates the higher 32 bits of the value of tPortEgrExpShaperAggStMonOvrOct.')
tPortEgrVPortAggStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64), )
if mibBuilder.loadTexts: tPortEgrVPortAggStatsTable.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortAggStatsTable.setDescription('The tPortEgrVPortAggStatsTable contains the statistics of each virtual port at the port egress level configured on this system. Most objects are represented in 64 bit. 32-bit version of the objects are available in tPortEgrVPortAggStatsHLTable.')
tPortEgrVPortAggStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPStLvl"))
if mibBuilder.loadTexts: tPortEgrVPortAggStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortAggStatsEntry.setDescription('Each row in tPortEgrVPortAggStatsEntry represents a particular virtual port at the port egress level specified by tPortEgrVPortName and tPortEgrVPStLvl.')
tPortEgrVPStLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 8), ValueRangeConstraint(4294967295, 4294967295), )))
if mibBuilder.loadTexts: tPortEgrVPStLvl.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvl.setDescription("The value of tPortEgrVPStLvl indicates the priority level for the port scheduler to which a subscriber host queue can be port-parented. When the value of tPortEgrVPStLvl is specified as '0xffffffff H', snmp GET on this table returns aggregate statistics.")
tPortEgrVPStLstClrdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLstClrdTime.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLstClrdTime.setDescription('The value of tPortEgrVPStLstClrdTime indicates the sysUpTime when the counters in this table were last cleared.')
tPortEgrVPStLvlFwdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPkt.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPkt.setDescription('The value of tPortEgrVPStLvlFwdPkt indicates the number of packets forwarded by the virtual port for the priority level specified by tPortEgrVPStLvl.')
tPortEgrVPStLvlFwdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOct.setDescription('The value of tPortEgrVPStLvlFwdOct indicates the number of octets forwarded by the virtual port for the priority level specified by tPortEgrVPStLvl.')
tPortEgrVPStLvlDpdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPkt.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPkt.setDescription('The value of tPortEgrVPStLvlDpdPkt indicates the number of packets dropped by the virtual port for the priority level specified by tPortEgrVPStLvl.')
tPortEgrVPStLvlDpdOct = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 64, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOct.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOct.setDescription('The value of tPortEgrVPStLvlDpdOct indicates the number of octets dropped by the virtual port for the priority level specified by tPortEgrVPStLvl.')
tPortEgrVPortAggStatsHLTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65), )
if mibBuilder.loadTexts: tPortEgrVPortAggStatsHLTable.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortAggStatsHLTable.setDescription('The tPortEgrVPortAggStatsHLTable contains the statistics of each virtual port at the port egress level configured on this system represented in higher 32 and lower 32 bit objects.')
tPortEgrVPortAggStatsHLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPortName"), (0, "TIMETRA-PORT-MIB", "tPortEgrVPStLvl"))
if mibBuilder.loadTexts: tPortEgrVPortAggStatsHLEntry.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortAggStatsHLEntry.setDescription('Each row in tPortEgrVPortAggStatsHLEntry represents a particular virtual port statistics at the port egress level specified by tPortEgrVPortName and tPortEgrVPStLvl.')
tPortEgrVPStLvlFwdPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPktL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPktL.setDescription('The value of tPortEgrVPStLvlFwdPktL indicates the lower 32 bits of the value of tPortEgrVPStLvlFwdPkt.')
tPortEgrVPStLvlFwdPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPktH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdPktH.setDescription('The value of tPortEgrVPStLvlFwdPktH indicates the higher 32 bits of the value of tPortEgrVPStLvlFwdPkt.')
tPortEgrVPStLvlFwdOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOctL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOctL.setDescription('The value of tPortEgrVPStLvlFwdOctL indicates the lower 32 bits of the value of tPortEgrVPStLvlFwdOct.')
tPortEgrVPStLvlFwdOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOctH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlFwdOctH.setDescription('The value of tPortEgrVPStLvlFwdOctH indicates the higher 32 bits of the value of tPortEgrVPStLvlFwdOct.')
tPortEgrVPStLvlDpdPktL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPktL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPktL.setDescription('The value of tPortEgrVPStLvlDpdPktL indicates the lower 32 bits of the value of tPortEgrVPStLvlDpdPkt.')
tPortEgrVPStLvlDpdPktH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPktH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdPktH.setDescription('The value of tPortEgrVPStLvlDpdPktH indicates the higher 32 bits of the value of tPortEgrVPStLvlDpdPkt.')
tPortEgrVPStLvlDpdOctL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOctL.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOctL.setDescription('The value of tPortEgrVPStLvlDpdOctL indicates the lower 32 bits of the value of tPortEgrVPStLvlDpdOct.')
tPortEgrVPStLvlDpdOctH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 65, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOctH.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPStLvlDpdOctH.setDescription('The value of tPortEgrVPStLvlDpdOctH indicates the higher 32 bits of the value of tPortEgrVPStLvlDpdOct.')
tmnxDDMLaneTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66), )
if mibBuilder.loadTexts: tmnxDDMLaneTable.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTable.setDescription('The tmnxDDMLaneTable has an entry for each CFP/QSFP in the system that supports Lane Digital Diagnostic Monitoring (DDM). The table is indexed by tmnxPortPortID and tmnxDDMLaneId. Each row in this table is dynamically added and removed internally by the system based on the presence or absence of DDM capable CFP/QSFP components.')
tmnxDDMLaneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tmnxDDMLaneId"))
if mibBuilder.loadTexts: tmnxDDMLaneEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneEntry.setDescription('Each row represents a particular CFP/QSFP that supports Digital Diagnostic Monitoring Lanes. Entries are created and deleted internally by the system.')
tmnxDDMLaneId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: tmnxDDMLaneId.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneId.setDescription('The value of tmnxDDMLaneId specifies the Optical Lane ID for the row. The maximum ID for a given port is restricted to the value of tmnxPortSFPNumLanes for the given port. ')
tmnxDDMLaneTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTemperature.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTemperature.setDescription('The value of tmnxDDMLaneTemperature indicates the current temperature of the CFP/QSFP in 1/256th degrees Celsius. The formula for translating between the value of tmnxDDMLaneTemperature and degrees Celsius is: tmnxDDMLaneTemperature / 256 For example: The SNMP value 5734 is 22.4 degrees Celsius.')
tmnxDDMLaneTempLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempLowWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTempLowWarn.setDescription('The value of tmnxDDMLaneTempLowWarn indicates the temperature of the CFP/QSFP in degrees Celsius that triggers a low-Warning.')
tmnxDDMLaneTempLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTempLowAlarm.setDescription('The value of tmnxDDMLaneTempLowAlarm indicates the temperature of the CFP/QSFP in degrees Celsius that triggers a low-alarm.')
tmnxDDMLaneTempHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempHiWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTempHiWarn.setDescription('The value of tmnxDDMLaneTempHiWarn indicates the temperature of the CFP/QSFP in degrees Celsius that triggers a hi-Warning.')
tmnxDDMLaneTempHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTempHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTempHiAlarm.setDescription('The value of tmnxDDMLaneTempHiAlarm indicates the temperature of the CFP/QSFP in degrees Celsius that triggers a hi-alarm.')
tmnxDDMLaneTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrent.setDescription('The value of tmnxDDMLaneTxBiasCurrent indicates the current Transmit Bias Current of the CFP/QSFP in 1/500 milliamperes (mA). The formula for translating between the value of tmnxDDMLaneTxBiasCurrent and amperes is: tmnxDDMLaneTxBiasCurrent / 500 For example: The SNMP value 2565 is 5.1 milliamperes (mA).')
tmnxDDMLaneTxBiasCurrentLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentLowWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentLowWarn.setDescription('The value of tmnxDDMLaneTxBiasCurrentLowWarn indicates the Transmit Bias Current of the CFP/QSFP in micro-Amperes (uA) that triggers a low-Warning.')
tmnxDDMLaneTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentLowAlarm.setDescription('The value of tmnxDDMLaneTxBiasCurrentLowAlarm indicates the Transmit Bias Current of the CFP/QSFP in micro-Amperes (uA) that triggers a low-alarm.')
tmnxDDMLaneTxBiasCurrentHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentHiWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentHiWarn.setDescription('The value of tmnxDDMLaneTxBiasCurrentHiWarn indicates the Transmit Bias Current of the CFP/QSFP in micro-Amperes (uA) that triggers a hi-Warning.')
tmnxDDMLaneTxBiasCurrentHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxBiasCurrentHiAlarm.setDescription('The value of tmnxDDMLaneTxBiasCurrentHiAlarm indicates the Transmit Bias Current of the CFP/QSFP in micro-Amperes (uA) that triggers a hi-alarm.')
tmnxDDMLaneTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPower.setDescription('The value of tmnxDDMLaneTxOutputPower indicates the current Output Power of the CFP/QSFP in one tenths of a micro-Watt (uW). For example: Using the SNMP value of 790, and using units of tenths of microwatt, 790 becomes 79 microwatts or 0.079 milliwatts. Converting to dBm: 10 x log10(0.079) = -11.0 dBm')
tmnxDDMLaneTxOutputPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerLowWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerLowWarn.setDescription('The value of tmnxDDMLaneTxOutputPowerLowWarn indicates the Output Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a low-Warning.')
tmnxDDMLaneTxOutputPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerLowAlarm.setDescription('The value of tmnxDDMLaneTxOutputPowerLowAlarm indicates the Output Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a low-alarm.')
tmnxDDMLaneTxOutputPowerHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerHiWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerHiWarn.setDescription('The value of tmnxDDMLaneTxOutputPowerHiWarn indicates the Output Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a hi-warning.')
tmnxDDMLaneTxOutputPowerHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneTxOutputPowerHiAlarm.setDescription('The value of tmnxDDMLaneTxOutputPowerHiAlarm indicates the Output Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a hi-alarm.')
tmnxDDMLaneRxOpticalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPower.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPower.setDescription('The value of tmnxDDMLaneRxOpticalPower indicates the current Received Optical Power of the CFP/QSFP in one tenths of a micro-Watt (uW). For example: Using the SNMP value of 790, and using units of tenths of microwatt, 790 becomes 79 microwatts or 0.079 milliwatts. Converting to dBm: 10 x log10(0.079) = -11.0 dBm')
tmnxDDMLaneRxOpticalPwrLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrLowWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrLowWarn.setDescription('The value of tmnxDDMLaneRxOpticalPwrLowWarn indicates the Received Optical Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a low-Warning.')
tmnxDDMLaneRxOpticalPwrLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrLowAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrLowAlarm.setDescription('The value of tmnxDDMLaneRxOpticalPwrLowAlarm indicates the Received Optical Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a low-alarm.')
tmnxDDMLaneRxOpticalPwrHiWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrHiWarn.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrHiWarn.setDescription('The value of tmnxDDMLaneRxOpticalPwrHiWarn indicates the Received Optical Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a hi-Warning.')
tmnxDDMLaneRxOpticalPwrHiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrHiAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPwrHiAlarm.setDescription('The value of tmnxDDMLaneRxOpticalPwrHiAlarm indicates the Received Optical Power of the CFP/QSFP in one tenths of a micro-Watt (uW) that triggers a hi-alarm.')
tmnxDDMLaneRxOpticalPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("oma", 0), ("average", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPowerType.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneRxOpticalPowerType.setDescription('The value of tmnxDDMLaneRxOpticalPowerType indicates whether the tmnxDDMLaneRxOpticalPower was taken as an average, or as an Optical Modulation Amplitude (OMA).')
tmnxDDMLaneFailedThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 66, 1, 23), TmnxDigitalDiagnosticFailureBits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDDMLaneFailedThresholds.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneFailedThresholds.setDescription('The value of tmnxDDMLaneFailedThresholds indicates which objects of the monitored CFP/QSFP is in a failed or cleared threshold state. A set bit indicates that the specified threshold has been exceeded.')
tPortNetEgrQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68), )
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatTable.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatTable.setDescription('The value of tPortNetEgrQGrpArbitStatTable contains egress QoS queue group arbiter statistics on network side.')
tPortNetEgrQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-PORT-MIB", "tmnxPortPortID"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpName"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpInstanceId"), (0, "TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatName"))
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatEntry.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatEntry.setDescription('The value of tPortNetEgrQGrpArbitStatEntry defines an entry in the tPortNetEgrQGrpArbitStatTable. It represents statistics about a specific QoS egress queue group arbiter.')
tPortNetEgrQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatName.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatName.setDescription('The value of tPortNetEgrQGrpArbitStatName specifies the name of the egress QoS arbiter of this port network queue group.')
tPortNetEgrQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPkts.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPkts.setDescription('The value of tPortNetEgrQGrpArbitStatFwdPkts indicates the number of fowrwarded packets by the egress queue group arbiter Pchip.')
tPortNetEgrQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPktsL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPktsL.setDescription('The value of tPortNetEgrQGrpArbitStatFwdPktsL indicates the lower 32 bits of tPortNetEgrQGrpArbitStatFwdPkts.')
tPortNetEgrQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPktsH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdPktsH.setDescription('The value of tPortNetEgrQGrpArbitStatFwdPktsH indicates the upper 32 bits of tPortNetEgrQGrpArbitStatFwdPkts.')
tPortNetEgrQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOcts.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOcts.setDescription('The value of tPortNetEgrQGrpArbitStatFwdOcts indicates the number of fowrwarded octets by the egress queue group arbiter Pchip.')
tPortNetEgrQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOctsL.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOctsL.setDescription('The value of tPortNetEgrQGrpArbitStatFwdOctsL indicates the lower 32 bits of tPortNetEgrQGrpArbitStatFwdOcts.')
tPortNetEgrQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 68, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOctsH.setStatus('current')
if mibBuilder.loadTexts: tPortNetEgrQGrpArbitStatFwdOctsH.setDescription('The value of tPortNetEgrQGrpArbitStatFwdOctsH indicates the upper 32 bits of tPortNetEgrQGrpArbitStatFwdOcts.')
tmnxPortPlcyTableLastCh = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPlcyTableLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyTableLastCh.setDescription('The value of the object tmnxPortPlcyTableLastCh indicates the value of sysUpTime at the time of the last modification of an entry in the tmnxPortPlcyTable.')
tmnxPortPlcyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2), )
if mibBuilder.loadTexts: tmnxPortPlcyTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyTable.setDescription('The tmnxPortPlcyTable allows configuration of port policies. A port policy has port parameters that can be applied to applicable ports associated with such a policy.')
tmnxPortPlcyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1), ).setIndexNames((1, "TIMETRA-PORT-MIB", "tmnxPortPlcyName"))
if mibBuilder.loadTexts: tmnxPortPlcyEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyEntry.setDescription('Each row represents the configuration of a specific port policy. Rows in this table can be created and deleted via SNMP SET operations to tmnxPortPlcyRowStatus.')
tmnxPortPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxPortPlcyName.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyName.setDescription('The value of tmnxPortPlcyName specifies the identifier of a port policy.')
tmnxPortPlcyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortPlcyRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyRowStatus.setDescription('The value of tmnxPortPlcyRowStatus controls the creation and deletion of rows in the table.')
tmnxPortPlcyLastCh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPortPlcyLastCh.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyLastCh.setDescription('The value of tmnxPortPlcyLastCh indicates the sysUpTime at the time of the most recent management-initiated change to this policy.')
tmnxPortPlcyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 4), TItemDescription()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPortPlcyDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyDescription.setDescription('The value of tmnxPortPlcyDescription specifies the user provided description of this policy.')
tmnxPortPlcyEgrPortSchedPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 67, 2, 1, 5), TNamedItemOrEmpty()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxPortPlcyEgrPortSchedPlcy.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyEgrPortSchedPlcy.setDescription('The value of tmnxPortPlcyEgrPortSchedPlcy specifies the egress QoS port-scheduler policy. This object must correspond to the index of a row in TIMETRA-QOS-MIB::tPortSchedulerPlcyTable.')
tmnxPwPortTblLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 69), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPwPortTblLastChanged.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortTblLastChanged.setDescription('The value of tmnxPwPortTblLastChanged indicates the sysUpTime at the time of the last modification of tmnxPwPortTable. If no changes were made to the entry since the last re-initialization of the local network management subsystem, then this object contains a zero value.')
tmnxPwPortTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70), )
if mibBuilder.loadTexts: tmnxPwPortTable.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortTable.setDescription('A table that contains pseudo-wire port information in the system.')
tmnxPwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1), ).setIndexNames((0, "TIMETRA-PORT-MIB", "tmnxPwPortId"))
if mibBuilder.loadTexts: tmnxPwPortEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortEntry.setDescription('A row-entry that contains port specific pseudo-wire information.')
tmnxPwPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10239)))
if mibBuilder.loadTexts: tmnxPwPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortId.setDescription('This value of the object tmnxPwPortId specifies the pseudo-wire port in the system.')
tmnxPwPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPwPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortRowStatus.setDescription('This value of the object tmnxPwPortRowStatus specifies the status of this row.')
tmnxPwPortLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxPwPortLastChgd.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortLastChgd.setDescription('The value of tmnxPwPortLastChgd indicates the timestamp of last change to this row in tmnxPwPortTable.')
tmnxPwPortEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 4, 70, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 10))).clone(namedValues=NamedValues(("dot1q", 2), ("qinq", 10))).clone('dot1q')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxPwPortEncapType.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortEncapType.setDescription('The value of tmnxPwPortEncapType specifies the encapsulation type of this pseudo-wire port entry.')
tmnxPortNotifyPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 1), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyPortId.setDescription('Used by tmnx port Notifications, the OID indicates the port or sonet path associated with the alarm.')
tmnxPortNotifySonetAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notUsed", 0), ("loc", 1), ("lais", 2), ("lrdi", 3), ("ss1f", 4), ("sb1err", 5), ("lb2erSd", 6), ("lb2erSf", 7), ("slof", 8), ("slos", 9), ("stxptr", 10), ("srxptr", 11), ("lrei", 12)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifySonetAlarmReason.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifySonetAlarmReason.setDescription('Used by tmnx sonet Port Notifications, the value of tmnxPortNotifySonetAlarmReason indicates the reason a sonet port alarm has been raised.')
tmnxPortNotifySonetPathAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notUsed", 0), ("pais", 1), ("plop", 2), ("prdi", 3), ("pb3err", 4), ("pplm", 5), ("prei", 6), ("puneq", 7), ("plcd", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifySonetPathAlarmReason.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifySonetPathAlarmReason.setDescription('Used by tmnx sonet path Notifications, the value of tmnxPortNotifySonetPathAlarmReason indicates the reason a sonet path alarm has been raised.')
tmnxPortNotifyError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("txClockError", 1), ("rxClockError", 2), ("txFifoError", 3), ("laserError", 4), ("miscError", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyError.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyError.setDescription('Used by tmnxEqPortError notification, the value of tmnxPortNotifyError indicates the reason a port has an error.')
tmnxPortNotifyDS3AlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDS3AlarmReason.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyDS3AlarmReason.setDescription('Used by tmnx DS3 Port Notifications, the value of tmnxPortNotifyDS3AlarmReason indicates the reason a DS3 interface alarm has been raised.')
tmnxPortNotifyDS1AlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notUsed", 0), ("ais", 1), ("los", 2), ("oof", 3), ("rai", 4), ("looped", 5), ("berSd", 6), ("berSf", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDS1AlarmReason.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyDS1AlarmReason.setDescription('Used by tmnx DS1 Port Notifications, the value of tmnxPortNotifyDS1AlarmReason indicates the reason a DS1 interface alarm has been raised.')
tmnxPortNotifyBundleId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 7), TmnxBundleID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyBundleId.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyBundleId.setDescription('Used by tmnx bundle Notifications, the value indicates the bundle associated with the alarm.')
tmnxPortNotifyEtherAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 8), TmnxPortEtherReportValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherAlarmReason.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyEtherAlarmReason.setDescription('Used by tmnx ethernet Port Notifications, the value of tmnxPortNotifyEtherAlarmReason indicates the reason a ethernet port alarm has been raised.')
tmnxDDMFailedObject = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("unknown", 0), ("temperature-low-warning", 1), ("temperature-low-alarm", 2), ("temperature-high-warning", 3), ("temperature-high-alarm", 4), ("supplyVoltage-low-warning", 5), ("supplyVoltage-low-alarm", 6), ("supplyVoltage-high-warning", 7), ("supplyVoltage-high-alarm", 8), ("txBiasCurrent-low-warning", 9), ("txBiasCurrent-low-alarm", 10), ("txBiasCurrent-high-warning", 11), ("txBiasCurrent-high-alarm", 12), ("txOutputPower-low-warning", 13), ("txOutputPower-low-alarm", 14), ("txOutputPower-high-warning", 15), ("txOutputPower-high-alarm", 16), ("rxOpticalPower-low-warning", 17), ("rxOpticalPower-low-alarm", 18), ("rxOpticalPower-high-warning", 19), ("rxOpticalPower-high-alarm", 20), ("aux1-low-warning", 21), ("aux1-low-alarm", 22), ("aux1-high-warning", 23), ("aux1-high-alarm", 24), ("aux2-low-warning", 25), ("aux2-low-alarm", 26), ("aux2-high-warning", 27), ("aux2-high-alarm", 28)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDDMFailedObject.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMFailedObject.setDescription('Used by Digital Diagnostic Monitoring (DDM) Notifications, the value of tmnxDDMFailedObject indicates which object of the monitored SFF is in a failed or cleared threshold state.')
tmnxDSXClockSyncStateObject = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 10), TmnxDSXClockSyncState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDSXClockSyncStateObject.setStatus('current')
if mibBuilder.loadTexts: tmnxDSXClockSyncStateObject.setDescription('Used by tmnxDSXClockSyncStateChange. The value of tmnxDSXClockSyncStateObject indicates the clock sync state of a DS3 or DS1 channel with clock source adaptive or differential.')
tmnxPortNotifyDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyDescription.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyDescription.setDescription('The object tmnxPortNotifyDescription is a printable character string.')
tmnxPortNotifyWTAlarmReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notUsed", 0), ("encFail", 1), ("encDegr", 2), ("pwrFail", 3), ("pwrDegr", 4), ("pwrHigh", 5), ("pwrLow", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyWTAlarmReason.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyWTAlarmReason.setDescription('Used by Wavelength Tracker Port Notifications, the value of tmnxPortNotifyWTAlarmReason indicates the reason a Wavelength Tracker port alarm has been raised. The values correspond to the TmnxWaveTrackerAlarm bits.')
tmnxHostMatchNotifyIntDestId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 13), TmnxSubMgtIntDestId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxHostMatchNotifyIntDestId.setStatus('current')
if mibBuilder.loadTexts: tmnxHostMatchNotifyIntDestId.setDescription('Used by tPortAccEgrQGrpHostMatchFailure and tPortEgrVPortHostMatchFailure. The value of tmnxHostMatchNotifyIntDestId indicates the intermediate destination id of the host which was used to lookup the port egress queue-group or virtual port.')
tmnxHostMatchNotifyOrgString = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 14), TmnxSubMgtOrgStrOrZero()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxHostMatchNotifyOrgString.setStatus('current')
if mibBuilder.loadTexts: tmnxHostMatchNotifyOrgString.setDescription('Used by tPortAccEgrQGrpHostMatchFailure and tPortEgrVPortHostMatchFailure. The value of tmnxHostMatchNotifyOrgString indicates the organization string of the host which was used to lookup the port egress queue-group or virtual port.')
tmnxHostMatchNotifySubIdent = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 15), TmnxSubIdentStringOrEmpty()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxHostMatchNotifySubIdent.setStatus('current')
if mibBuilder.loadTexts: tmnxHostMatchNotifySubIdent.setDescription('Used by tPortAccEgrQGrpHostMatchFailure and tPortEgrVPortHostMatchFailure. The value of tmnxHostMatchNotifySubIdent indicates the subscriber identification string of the host which was used to lookup the port egress queue-group or virtual port.')
tmnxObjAppResvSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 16), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvSize.setStatus('current')
if mibBuilder.loadTexts: tmnxObjAppResvSize.setDescription('The value of tmnxObjAppResvSize indicates operational value of reserved size of the associated object (MDA or port). This is used by tmnxResvCbsPoolThreshGreen, tmnxResvCbsPoolThreshAmber and tmnxResvCbsPoolThreshRed notifications.')
tmnxObjAppResvCbsOld = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 17), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvCbsOld.setStatus('current')
if mibBuilder.loadTexts: tmnxObjAppResvCbsOld.setDescription("The value of tmnxObjAppResvCbsOld indicates old value of reserved CBS of the associated object (MDA or port). When tmnxObjAppResvCbsOld is set to '4294967295', tmnxObjAppResvCbsOld indicates invalid reserved size value. This is used by tmnxResvCbsPoolThreshGreen, tmnxResvCbsPoolThreshAmber and tmnxResvCbsPoolThreshRed notifications.")
tmnxObjAppResvCbsNew = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 18), Unsigned32()).setUnits('percent').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvCbsNew.setStatus('current')
if mibBuilder.loadTexts: tmnxObjAppResvCbsNew.setDescription('The value of tmnxObjAppResvCbsNew indicates new value of reserved CBS of the associated object (MDA or port). This is used by tmnxResvCbsPoolThreshGreen, tmnxResvCbsPoolThreshAmber and tmnxResvCbsPoolThreshRed notifications.')
tmnxObjAppSumOfQResvSize = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 19), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppSumOfQResvSize.setStatus('current')
if mibBuilder.loadTexts: tmnxObjAppSumOfQResvSize.setDescription('The value of tmnxObjAppSumOfQResvSize indicates sum of the reserved CBS queue size of reserved CBS of the associated object (MDA or port). This is used by tmnxResvCbsPoolThreshGreen, tmnxResvCbsPoolThreshAmber and tmnxResvCbsPoolThreshRed notifications.')
tmnxObjType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mda", 1), ("port", 2), ("unused", 3), ("bundle", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjType.setStatus('current')
if mibBuilder.loadTexts: tmnxObjType.setDescription('The object tmnxObjType defines the type of object for which this notification is sent.')
tmnxObjPortId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 21), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjPortId.setStatus('current')
if mibBuilder.loadTexts: tmnxObjPortId.setDescription('The object tmnxObjPortId is used to identify the specific Port object.')
tmnxObjMdaId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 22), TmnxPortID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjMdaId.setStatus('current')
if mibBuilder.loadTexts: tmnxObjMdaId.setDescription("The tmnxObjMdaId is used to identify the specific MDA object. If tmnxObjType is 'mda', then the tmnxObjMdaId is encoded as a physical port with the port being '0'.")
tmnxObjAppType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accessIngress", 1), ("accessEgress", 2), ("networkIngress", 3), ("networkEgress", 4), ("ingress", 5), ("egress", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppType.setStatus('current')
if mibBuilder.loadTexts: tmnxObjAppType.setDescription("The object tmnxObjAppType specifies the nature of usage the pool tmnxObjAppPool is used for. The pools could be used for access or network traffic at either ingress or egress. The value of 'ingress' and 'egress' is used with objects using named-pool policy.")
tmnxObjAppPool = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 24), TNamedItemOrEmpty()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppPool.setStatus('current')
if mibBuilder.loadTexts: tmnxObjAppPool.setDescription('The object tmnxObjAppPool specifies the name of the pool being used.')
tmnxObjNamedPoolPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 25), TNamedItemOrEmpty()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjNamedPoolPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxObjNamedPoolPolicy.setDescription('The value of tmnxObjNamedPoolPolicy indicates the name of the tmnxPortIngNamedPoolPlcy or tmnxPortEgrNamedPoolPlcy object to which this notification belongs.')
tmnxPortNotifyEtherCrcThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 27), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcThreshold.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcThreshold.setDescription('The value of tmnxPortNotifyEtherCrcThreshold indicates the threshold value used in a Ethernet Port CRC Monitoring alarm.')
tmnxPortNotifyEtherCrcMultiplier = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 28), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcMultiplier.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcMultiplier.setDescription('The value of tmnxPortNotifyEtherCrcMultiplier indicates the threshold multiplier value used in a Ethernet Port CRC Monitoring alarm.')
tmnxPortNotifyEtherCrcAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 29), TmnxPortEtherCrcMonReportValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcAlarmValue.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyEtherCrcAlarmValue.setDescription('The value of tmnxPortNotifyEtherCrcAlarmValue indicates the enumerated alarm raised or cleared in a Ethernet Port CRC Monitoring alarm.')
tmnxObjAppResvSizeOld = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 30), Unsigned32()).setUnits('kilo-bytes').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxObjAppResvSizeOld.setStatus('current')
if mibBuilder.loadTexts: tmnxObjAppResvSizeOld.setDescription("The value of tmnxObjAppResvSizeOld indicates old value of reserved size of the associated object (MDA or port). When tmnxObjAppResvSizeOld is set to '4294967295', tmnxObjAppResvSizeOld indicates invalid reserved size value. This is used by tmnxResvCbsPoolThreshGreen, tmnxResvCbsPoolThreshAmber and tmnxResvCbsPoolThreshRed notifications.")
tmnxDDMLaneIdOrModule = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 7, 31), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 16), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tmnxDDMLaneIdOrModule.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneIdOrModule.setDescription('The value of tmnxDDMLaneIdOrModule indicates which component of the Digital Diagnostic Monitoring (DDM) SFF device caused the notification to be raised. A value of zero (0) indicates the SFF module failed, otherwise the SFF Lane ID is specified. For SFF modules that do not support Lanes, this object will always be set to the value zero (0).')
tmnxEqOobPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 1)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqOobPortFailure.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxEqOobPortFailure.setDescription('Generated when the out-of-band Ethernet port has failed. On the Alcatel-Lucent SROS system, the out-of-band port is the CPM management interface. This notification was made obsolete in the 2.1 release. The Out-of-band, OOB, port is what id refered to as the management port or cpm port. It has an entry in ifTable and linkup, linkDown and tmnxEqPortError notifications are sent for the management port just as for any other port in the system.')
tmnxEqPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 2)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortFailure.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxEqPortFailure.setDescription("Generated when a port has failed. This notification was made obsolete in the 2.1 release. tmnxEqPortError is used instead of tmnxEqPortFailure. Standard IETF linkDown notification is sent when a physical port failure is detected. tmnxEqPortError is sent with a ASCII reason message when port errors are detected. It was originally intended that tmnxEqPortError be used to report errors that do not cause port state change to 'down'. tmnxEqPortFailure was intended to report errors that do cause the port state change to 'down'. However, in the implementation tmnxEqPortError is used for both fatal and non-fatal errors.")
tmnxEqPortSonetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSonetAlarm.setDescription('Generated when a SONET/SDH port alarm condition is detected. It is generated only when the type of alarm being raised is enabled in tmnxSonetReportAlarm.')
tmnxEqPortSonetAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetAlarmClear.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSonetAlarmClear.setDescription('Generated when a SONET/SDH port alarm condition is cleared. It is generated only when the type of alarm being cleared is enabled in tmnxSonetReportAlarm.')
tmnxEqPortSonetPathAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarm.setDescription('Generated when a SONET/SDH path alarm condition is detected. It is generated only when the type of alarm being raised is enabled in tmnxSonetPathReportAlarm.')
tmnxEqPortSonetPathAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarmClear.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSonetPathAlarmClear.setDescription('Generated when a SONET/SDH path alarm condition is cleared. It is generated only when the type of alarm being cleared is enabled in tmnxSonetPathReportAlarm.')
tmnxEqPortSFPInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 8)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPInserted.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSFPInserted.setDescription('Generated when a SFP is inserted in the port.')
tmnxEqPortSFPRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 9)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPRemoved.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSFPRemoved.setDescription('Generated when a SFP is removed from the port.')
tmnxEqPortWrongSFP = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 10)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortWrongSFP.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxEqPortWrongSFP.setDescription('Generated when a wrong type of SFP optics module is plugged into a 1 Gig MDA, SONET MDA, or 100FX MDA. Because of the large variety of SFPs now supported and their different encoding schemes for compliance bits, the check for wrong SFP has been removed. As a result, tmnxEqPortWrongSFP notification is no longer generated. However, wrong SFP can be inferred from port statistics.')
tmnxEqPortSFPCorrupted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 11)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortSFPCorrupted.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxEqPortSFPCorrupted.setDescription('Generated when SFP information stored in the EPROM on the SFP is corrupt. This notification was made obsolete for revision 6.0 on Alcatel-Lucent SROS series systems; it was replaced by tmnxEqPortSFPStatusFailure.')
tmnxPortNotifyBerSdTca = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 12)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSdThreshold"))
if mibBuilder.loadTexts: tmnxPortNotifyBerSdTca.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortNotifyBerSdTca.setDescription("Generated when a SONET/SDH port's signal degradation bit error rate is greater than the configured error rate threshold. This notification was made obsolete in the 2.1 release.")
tmnxPortNotifyBerSfTca = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 13)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"))
if mibBuilder.loadTexts: tmnxPortNotifyBerSfTca.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortNotifyBerSfTca.setDescription("Generated when a SONET/SDH port's signal failure bit error rate is greater than the configured error rate threshold. This notification was made obsolete in the 2.1 release.")
tmnxEqPortError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 14)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyError"))
if mibBuilder.loadTexts: tmnxEqPortError.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortError.setDescription('Generated when an error listed in tmnxPortNotifyError is detected on the port.')
tmnxEqPortDS3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 15)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS3Alarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortDS3Alarm.setDescription('Generated when a DS3 interface alarm condition is detected. It is generated only when the type of alarm being raised is enabled in tmnxDS3ChannelReportAlarm.')
tmnxEqPortDS3AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 16)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS3AlarmClear.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortDS3AlarmClear.setDescription('Generated when a DS3 interface alarm condition is cleared. It is generated only when the type of alarm being cleared is enabled in tmnxDS3ChannelReportAlarm.')
tmnxEqPortDS1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 17)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS1Alarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortDS1Alarm.setDescription('Generated when a DS1 interface alarm condition is detected. It is generated only when the type of alarm being raised is enabled in tmnxDS1ReportAlarm.')
tmnxEqPortDS1AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 18)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortDS1AlarmClear.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortDS1AlarmClear.setDescription('Generated when a DS1 interface alarm condition is cleared. It is generated only when the type of alarm being cleared is enabled in tmnxDS1ReportAlarm.')
tmnxEqPortBndlYellowDiffExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 19)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"))
if mibBuilder.loadTexts: tmnxEqPortBndlYellowDiffExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortBndlYellowDiffExceeded.setDescription('Generated when the differential delay of a port in the bundle exceeds the configured value in tmnxBundleYellowDiffDelay.')
tmnxEqPortBndlRedDiffExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 20)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"))
if mibBuilder.loadTexts: tmnxEqPortBndlRedDiffExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortBndlRedDiffExceeded.setDescription('Generated when the differential delay of a port in the bundle exceeds the configured value in tmnxBundleRedDiffDelay.')
tmnxEqPortBndlBadEndPtDiscr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 21)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"))
if mibBuilder.loadTexts: tmnxEqPortBndlBadEndPtDiscr.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortBndlBadEndPtDiscr.setDescription('Generated when the port detected mismatched peer endpoint discriminator for the bundle.')
tmnxEqPortEtherAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 22)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortEtherAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherAlarm.setDescription('tmnxEqPortEtherAlarm is generated when a ethernet port alarm condition is detected. It is generated only when the type of alarm being raised is enabled in tmnxPortEtherReportAlarm.')
tmnxEqPortEtherAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 23)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if mibBuilder.loadTexts: tmnxEqPortEtherAlarmClear.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherAlarmClear.setDescription('tmnxEqPortEtherAlarmClear is generated when a ethernet port alarm condition is cleared. It is generated only when the type of alarm being cleared is enabled in tmnxPortEtherReportAlarm.')
tmnxDS1E1LoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 24)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"))
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStarted.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStarted.setDescription('The tmnxDS1E1LoopbackStarted notification is generated when a loopback is provisioned on a DS1/E1 port.')
tmnxDS1E1LoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 25)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"))
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStopped.setStatus('current')
if mibBuilder.loadTexts: tmnxDS1E1LoopbackStopped.setDescription('The tmnxDS1E1LoopbackStopped notification is generated when a loopback is removed on a DS1/E1 port. The value of tmnxSonetLoopback specifies the type of loopback that was configured and has now been removed.')
tmnxDS3E3LoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 26)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"))
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStarted.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStarted.setDescription('The tmnxDS3E3LoopbackStarted notification is generated when a loopback is provisioned on a DS3/E3 port.')
tmnxDS3E3LoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 27)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"))
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStopped.setStatus('current')
if mibBuilder.loadTexts: tmnxDS3E3LoopbackStopped.setDescription('The tmnxDS3E3LoopbackStopped notification is generated when a loopback is removed on a DS3/E3 port. The value of tmnxDS3ChannelLoopback specifies the type of loopback that was configured and has now been removed.')
tmnxSonetSDHLoopbackStarted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 28)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetLoopback"))
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStarted.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStarted.setDescription('The tmnxSonetSDHLoopbackStarted notification is generated when a loopback is provisioned on a Sonet-SDH port.')
tmnxSonetSDHLoopbackStopped = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 29)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxSonetLoopback"))
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStopped.setStatus('current')
if mibBuilder.loadTexts: tmnxSonetSDHLoopbackStopped.setDescription('The tmnxSonetSDHLoopbackStopped notification is generated when a loopback test is removed on a Sonet-SDH port. The value of tmnxDS1Loopback specifies the type of loopback that was configured and has now been removed.')
tmnxEqPortEtherLoopDetected = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 30)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherLoopDetected.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherLoopDetected.setDescription("The tmnxEqPortEtherLoopDetected notification is genereated when down-when-looped detects an Ethernet port is receiving PDUs that it transmitted and tmnxPortEtherDownWhenLoopedEnabled is set to 'true'.")
tmnxEqPortEtherLoopCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 31)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherLoopCleared.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherLoopCleared.setDescription("The tmnxEqPortEtherLoopCleared notification is generated when down-when-looped detects an Ethernet port has stopped receiving PDUs that it transmitted and tmnxPortEtherDownWhenLoopedEnabled is set to 'true'. Setting tmnxPortEtherDownWhenLoopedEnabled to 'false' will also cause this notification to be generated if tmnxEqPortEtherLoopDetected had previously been raised.")
tmnxEqPortSpeedCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 32)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqPortSpeedCfgNotCompatible.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSpeedCfgNotCompatible.setDescription('Generated when a configured speed on an MDA port is not compatible with the MDA type. [EFFECT] Though services can still be created, if the tmnxMdaNotifyType is the same as the tmnxMDAEquippedType then the MDA will fail to operate as configured and will be in a failed state. [RECOVERY] Change the configuration to reflect the capabilities of the MDA port, or switch out/re-provision the MDA for one that is compatible.')
tmnxEqPortDuplexCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 33)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqPortDuplexCfgNotCompatible.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortDuplexCfgNotCompatible.setDescription('Generated when a configured duplex on an MDA port is not compatible with the MDA type. [EFFECT] Though services can still be created, if the tmnxMdaNotifyType is the same as the tmnxMDAEquippedType then the MDA will fail to operate as configured and will be in a failed state. [RECOVERY] Change the configuration to reflect the capabilities of the MDA port, or switch out/re-provision the MDA for one that is compatible.')
tmnxEqPortIngressRateCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 34)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqPortIngressRateCfgNotCompatible.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortIngressRateCfgNotCompatible.setDescription('Generated when a configured ingress rate on an MDA port is not compatible with the MDA type. [EFFECT] Though services can still be created, if the tmnxMdaNotifyType is the same as the tmnxMDAEquippedType then the MDA will fail to operate as configured and will be in a failed state. [RECOVERY] Change the configuration to reflect the capabilities of the MDA port, or switch out/re-provision the MDA for one that is compatible.')
tmnxEqDigitalDiagMonitorFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 35)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDDMFailedObject"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneIdOrModule"))
if mibBuilder.loadTexts: tmnxEqDigitalDiagMonitorFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxEqDigitalDiagMonitorFailure.setDescription('Generated when an SFF that supports Digital Diagnostic Monitoring (DDM) enters a failed state.')
tmnxEqPortSFPStatusFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 36)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortSFPStatus"))
if mibBuilder.loadTexts: tmnxEqPortSFPStatusFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortSFPStatusFailure.setDescription("Generated when the tmnxPortSFPStatus of an SFF results in a value other than 'not-equipped (0)', or 'operational (1)'. tmnxEqPortSFPStatusFailure obsoleted tmnxEqPortSFPCorrupted for revision 6.0 on Alcatel-Lucent SROS series systems.")
tmnxDSXClockSyncStateChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 37)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateObject"))
if mibBuilder.loadTexts: tmnxDSXClockSyncStateChange.setStatus('current')
if mibBuilder.loadTexts: tmnxDSXClockSyncStateChange.setDescription('Generated when the tmnxDS3ChannelClockSyncState changes for a DS3 or DS1 channel with adaptive or differentical clock source.')
tmnxQosServiceDegraded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 3)).setObjects(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxQosServiceDegraded.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxQosServiceDegraded.setDescription('Generated when the port is unable to provided the specified quality of service level.')
tmnxPortUnsupportedFunction = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 38)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDescription"))
if mibBuilder.loadTexts: tmnxPortUnsupportedFunction.setStatus('current')
if mibBuilder.loadTexts: tmnxPortUnsupportedFunction.setDescription('Generated when a functionality is required from this port that it cannot support. The object tmnxPortNotifyDescription explains what function is affected.')
tmnxBundleMemberMlfrLoopback = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 39)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrDownReason"))
if mibBuilder.loadTexts: tmnxBundleMemberMlfrLoopback.setStatus('current')
if mibBuilder.loadTexts: tmnxBundleMemberMlfrLoopback.setDescription("Generated when a Multilink Frame-Relay Bundle Member enters or leaves the 'loopback (3)' state.")
tmnxEqPortWaveTrackerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 40)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyWTAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerAlarmState"))
if mibBuilder.loadTexts: tmnxEqPortWaveTrackerAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortWaveTrackerAlarm.setDescription('The tmnxEqPortWaveTrackerAlarm notification indicates that a Wave Tracker interface has experienced either a raising or clearing of an alarm as indicated by the value of tmnxPortNotifyWTAlarmReason.')
tPortAccEgrQGrpHostMatchFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 41)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyIntDestId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyOrgString"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifySubIdent"))
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchFailure.setStatus('current')
if mibBuilder.loadTexts: tPortAccEgrQGrpHostMatchFailure.setDescription('The tPortAccEgrQGrpHostMatchFailure notification indicates that a host match lookup failed to resolve a specific port egress queue-group. In such case the default policer-output-queue is used.')
tPortEgrVPortHostMatchFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 42)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyIntDestId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyOrgString"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifySubIdent"))
if mibBuilder.loadTexts: tPortEgrVPortHostMatchFailure.setStatus('current')
if mibBuilder.loadTexts: tPortEgrVPortHostMatchFailure.setDescription('The tPortEgrVPortHostMatchFailure notification indicates that a host match lookup failed to resolve a specific port egress virtual port.')
tmnxEqDigitalDiagMonitorClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 43)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxDDMFailedObject"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneIdOrModule"))
if mibBuilder.loadTexts: tmnxEqDigitalDiagMonitorClear.setStatus('current')
if mibBuilder.loadTexts: tmnxEqDigitalDiagMonitorClear.setDescription('Generated when an SFF that supports Digital Diagnostic Monitoring (DDM) clears a failed state.')
tmnxEqPortOpticalAmpAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 44)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpAlarmState"))
if mibBuilder.loadTexts: tmnxEqPortOpticalAmpAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortOpticalAmpAlarm.setDescription('The tmnxEqPortOpticalAmpAlarm notification indicates that an Optical Amplifier interface has experienced either a raising or clearing of an alarm as indicated by the value of tmnxOpticalPortAmpAlarmState.')
tmnxEqPortOpticalTdcmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 45)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmAlarmState"))
if mibBuilder.loadTexts: tmnxEqPortOpticalTdcmAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortOpticalTdcmAlarm.setDescription('The tmnxEqPortOpticalTdcmAlarm notification indicates that an Optical Tdcm interface has experienced either a raising or clearing of an alarm as indicated by the value of tmnxOpticalPortTdcmAlarmState.')
tmnxEqSonetClockSrcNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 46)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqSonetClockSrcNotCompatible.setStatus('current')
if mibBuilder.loadTexts: tmnxEqSonetClockSrcNotCompatible.setDescription('Notification tmnxEqSonetClockSrcNotCompatible is generated when a configured SONET/SDH clock source on an MDA port is not compatible with the MDA type. [EFFECT] Though services can still be created, if the tmnxMdaNotifyType is the same as the tmnxMDAEquippedType then the MDA will fail to operate as configured and will be in a failed state. [RECOVERY] Change the configuration to reflect the capabilities of the MDA port, or switch out/re-provision the MDA for one that is compatible.')
tmnxEqSonetSfThreshNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 47)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqSonetSfThreshNotCompatible.setStatus('current')
if mibBuilder.loadTexts: tmnxEqSonetSfThreshNotCompatible.setDescription('Notification tmnxEqSonetSfThreshNotCompatible is generated when a configured SONET/SDH Signal Fail (SF) threshold on an MDA port is not compatible with the MDA type. [EFFECT] Though services can still be created, if the tmnxMdaNotifyType is the same as the tmnxMDAEquippedType then the MDA will fail to operate as configured and will be in a failed state. [RECOVERY] Change the configuration to reflect the capabilities of the MDA port, or switch out/re-provision the MDA for one that is compatible.')
tmnxEqSonetFramingNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 48)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetFraming"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"))
if mibBuilder.loadTexts: tmnxEqSonetFramingNotCompatible.setStatus('current')
if mibBuilder.loadTexts: tmnxEqSonetFramingNotCompatible.setDescription('Notification tmnxEqSonetFramingNotCompatible is generated when a configured SONET/SDH framing on an MDA port is not compatible with the MDA type. [EFFECT] Though services can still be created, if the tmnxMdaNotifyType is the same as the tmnxMDAEquippedType then the MDA will fail to operate as configured and will be in a failed state. [RECOVERY] Change the configuration to reflect the capabilities of the MDA port, or switch out/re-provision the MDA for one that is compatible.')
tmnxResvCbsPoolThreshGreen = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 49)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshGreen.setStatus('current')
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshGreen.setDescription('The notification tmnxResvCbsPoolThreshGreen is generated when a reserved-CBS of an object (MDA or port) returns to within defined thresholds. [EFFECT] Reserved CBS of the object has returned to within normal parameters. [RECOVERY] None required.')
tmnxResvCbsPoolThreshAmber = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 50)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshAmber.setStatus('current')
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshAmber.setDescription('The notification tmnxResvCbsPoolThreshAmber is generated when a reserved-CBS of an object (MDA or port) has crossed threshold value specified by tmnxObjectAppAmbrAlrmThresh or tQ1NamedPoolAmbrAlrmThresh. [EFFECT] This is warning event but the traffic is not yet affected. [RECOVERY] The value of tmnxObjectAppResvCbs or TIMETRA-QOS-MIB::tQ1NamedPoolReservedCbs may need to be adjusted.')
tmnxResvCbsPoolThreshRed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 51)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshRed.setStatus('current')
if mibBuilder.loadTexts: tmnxResvCbsPoolThreshRed.setDescription('The notification tmnxResvCbsPoolThreshAmber is generated when a reserved-CBS of an object (MDA or port) has crossed threshold value specified by tmnxObjectAppRedAlrmThresh or tQ1NamedPoolRedAlrmThresh. [EFFECT] This is a critical event and the traffic may be affected. [RECOVERY] The value of tmnxObjectAppResvCbs or TIMETRA-QOS-MIB::tQ1NamedPoolReservedCbs may need to be adjusted.')
tmnxEqPortEtherCrcAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 52)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcAlarmValue"))
if mibBuilder.loadTexts: tmnxEqPortEtherCrcAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherCrcAlarm.setDescription('tmnxEqPortEtherCrcAlarm is generated when an Ethernet port CRC alarm condition is detected. It is generated only when the type of alarm being raised is enabled on the port. [EFFECT] On a signal failure (SF) fault, the port is taken out of service until the CRC alarm condition is cleared. [RECOVERY] tmnxEqPortEtherCrcAlarm is cleared by taking the port out of service (eg. shutdown, card/mda reset, physical link loss), or changing/disabling the associated threshold/multiplier values. Signal Degradation is self clearing and will clear once the error rate drops below 1/10th of the configured rate.')
tmnxEqPortEtherCrcAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 53)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcAlarmValue"))
if mibBuilder.loadTexts: tmnxEqPortEtherCrcAlarmClear.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherCrcAlarmClear.setDescription('tmnxEqPortEtherCrcAlarmClear is generated when an Ethernet port CRC alarm condition is cleared or disabled.')
tmnxEqPortEtherInternalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 54)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherInternalAlarm.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherInternalAlarm.setDescription("tmnxEqPortEtherInternalAlarm is generated when an Ethernet port experiences excessive internal MAC tx errors. It is generated only when tmnxPortEtherDownOnInternalError is enabled on the port. [EFFECT] A port experiencing excessive internal MAC tx errors will take the port out of service while the alarm condition is in affect. [RECOVERY] tmnxEqPortEtherInternalAlarm is cleared by taking the port out of service (eg. shutdown, card/mda reset, physical link loss), or setting tmnxPortEtherDownOnInternalError to the value 'false'.")
tmnxEqPortEtherInternalAlarmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 2, 0, 55)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"))
if mibBuilder.loadTexts: tmnxEqPortEtherInternalAlarmClr.setStatus('current')
if mibBuilder.loadTexts: tmnxEqPortEtherInternalAlarmClr.setDescription('tmnxEqPortEtherInternalAlarmClr is generated when an Ethernet port no longer experiences excessive internal MAC tx errors.')
tmnxPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1))
tmnxPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2))
tmnxPortComp7750 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3))
tmnxPortComp7450 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4))
tmnxPortComp7710 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5))
tmnxPortComp7750V4v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 2)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV3v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V4v0 = tmnxPortComp7750V4v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7750V4v0.setDescription('The compliance statement for revision 4.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems. tmnxMlImaBundleGroup was added as of R4.')
tmnxPortComp7750V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 3)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V5v0 = tmnxPortComp7750V5v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7750V5v0.setDescription('The compliance statement for revision 5.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems.')
tmnxPortComp7750V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V6v0 = tmnxPortComp7750V6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7750V6v0.setDescription('The compliance statement for revision 6.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems.')
tmnxPortComp7750V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v1Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V6v1 = tmnxPortComp7750V6v1.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7750V6v1.setDescription('The compliance statement for revision 6.1 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems.')
tmnxPortComp7750V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V7v0 = tmnxPortComp7750V7v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7750V7v0.setDescription('The compliance statement for revision 7.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems.')
tmnxPortComp7750V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V8v0 = tmnxPortComp7750V8v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7750V8v0.setDescription('The compliance statement for revision 8.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems.')
tmnxPortComp7750V9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 3, 8)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV9v4"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortObjAppV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"), ("TIMETRA-PORT-MIB", "tmnxPortEgrVPortStatsV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7750V9v0 = tmnxPortComp7750V9v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7750V9v0.setDescription('The compliance statement for revision 9.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems. This MODULE-COMPLIANCE was made obsolete in favor of tmnxPortComplianceV9v0.')
tmnxPortComp7450V4v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 2)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV3v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V4v0 = tmnxPortComp7450V4v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7450V4v0.setDescription('The compliance statement for revision 4.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent 7450 SR series systems.')
tmnxPortComp7450V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 3)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V5v0 = tmnxPortComp7450V5v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7450V5v0.setDescription('The compliance statement for revision 5.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent 7450 SR series systems.')
tmnxPortComp7450V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V6v0 = tmnxPortComp7450V6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7450V6v0.setDescription('The compliance statement for revision 6.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent 7450 SR series systems.')
tmnxPortComp7450V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v1Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V6v1 = tmnxPortComp7450V6v1.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7450V6v1.setDescription('The compliance statement for revision 6.1 of TIMETRA-PORT-MIB on the Alcatel-Lucent 7450 SR series systems.')
tmnxPortComp7450V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V7v0 = tmnxPortComp7450V7v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7450V7v0.setDescription('The compliance statement for revision 7.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent 7450 SR series systems.')
tmnxPortComp7450V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 4, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7450V8v0 = tmnxPortComp7450V8v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7450V8v0.setDescription('The compliance statement for revision 8.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent 7450 SR series systems.')
tmnxPortComp7710V3v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 1)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupR2r1"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleV3v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV3v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V3v0 = tmnxPortComp7710V3v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7710V3v0.setDescription('The compliance statement for revision 3.0 of TIMETRA-PORT-MIB.')
tmnxPortComp7710V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 2)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V5v0 = tmnxPortComp7710V5v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7710V5v0.setDescription('The compliance statement for revision 5.0 of TIMETRA-PORT-MIB.')
tmnxPortComp7710V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 3)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V6v0 = tmnxPortComp7710V6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7710V6v0.setDescription('The compliance statement for revision 6.0 of TIMETRA-PORT-MIB.')
tmnxPortComp7710V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 4)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV6v1Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV4v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V6v1 = tmnxPortComp7710V6v1.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7710V6v1.setDescription('The compliance statement for revision 6.1 of TIMETRA-PORT-MIB.')
tmnxPortComp7710V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V7v0 = tmnxPortComp7710V7v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7710V7v0.setDescription('The compliance statement for revision 7.0 of TIMETRA-PORT-MIB.')
tmnxPortComp7710V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 5, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComp7710V8v0 = tmnxPortComp7710V8v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComp7710V8v0.setDescription('The compliance statement for revision 8.0 of TIMETRA-PORT-MIB.')
tmnxPortComplianceV9v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV9v4"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortObjAppV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"), ("TIMETRA-PORT-MIB", "tmnxPortEgrVPortStatsV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEtherV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortV9v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComplianceV9v0 = tmnxPortComplianceV9v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortComplianceV9v0.setDescription('The compliance statement for revision 9.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems.')
tmnxPortComplianceV10v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 1, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortSonetV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortTDMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortTDME1GroupV6v1"), ("TIMETRA-PORT-MIB", "tmnxPortFRGroup"), ("TIMETRA-PORT-MIB", "tmnxQosAppObjsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortTestGroup"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV9v4"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQosStatR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxPortStatsR2r1Group"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCGroup"), ("TIMETRA-PORT-MIB", "tmnxScalarPortV3v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlBundleGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMlImaBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxPortSchedV5v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEthernetV10v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortCemGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxHsmdaGroupV10v0"), ("TIMETRA-PORT-MIB", "tmnxNamedPoolGroupV6v0"), ("TIMETRA-PORT-MIB", "tmnxDigitalDiagMonitorGroup"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneGroupV10v0"), ("TIMETRA-PORT-MIB", "tmnxPortQV8v0Group"), ("TIMETRA-PORT-MIB", "tmnx7710PortTDMGroupV5v0"), ("TIMETRA-PORT-MIB", "tmnxPortQStatV7v0Group"), ("TIMETRA-PORT-MIB", "tmnxMcMfrBundleGroup"), ("TIMETRA-PORT-MIB", "tmnxFrIntfGroup"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfGroup"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerGroup"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmGroup"), ("TIMETRA-PORT-MIB", "tmnxPortGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortCEMGroupV8v0"), ("TIMETRA-PORT-MIB", "tmnxPortSchedStatsGroup"), ("TIMETRA-PORT-MIB", "tmnxPortVPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxMlpppBundleGroupV7v0"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroup"), ("TIMETRA-PORT-MIB", "tmnxPortATMGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortObjAppV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortGroupV9v0"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationGroupV8v9"), ("TIMETRA-PORT-MIB", "tmnxPortEgrVPortStatsV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortEtherV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortNotificationV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortV9v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrV10v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyGroup"), ("TIMETRA-PORT-MIB", "tmnxPwPortV10v0Group"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalGroupV10v0"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortComplianceV10v0 = tmnxPortComplianceV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortComplianceV10v0.setDescription('The compliance statement for revision 10.0 of TIMETRA-PORT-MIB on the Alcatel-Lucent SROS series systems.')
tmnxPortFRGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 5)).setObjects(("TIMETRA-PORT-MIB", "tmnxFRDlcmiMode"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiN392Dce"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiN393Dce"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiT392Dce"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiTxStatusEnqMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiRxStatusEnqMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiStatusEnqMsgTimeouts"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiTxStatusMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiRxStatusMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiStatusMsgTimeouts"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiDiscardedMsgs"), ("TIMETRA-PORT-MIB", "tmnxFRDlcmiInvRxSeqNumMsgs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortFRGroup = tmnxPortFRGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPortFRGroup.setDescription('The group of objects supporting management of Frame Relay DLCMI on Alcatel-Lucent SROS series systems.')
tmnxQosAppObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 6)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjectAppPoolRowStatus"), ("TIMETRA-PORT-MIB", "tmnxObjectAppResvCbs"), ("TIMETRA-PORT-MIB", "tmnxObjectAppSlopePolicy"), ("TIMETRA-PORT-MIB", "tmnxObjectAppPoolSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxQosAppObjsGroup = tmnxQosAppObjsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxQosAppObjsGroup.setDescription('The group of objects supporting management of Qos associations of the buffer pools to mdas, ports, channels and bundles on Alcatel-Lucent SROS series systems.')
tmnxPortTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 7)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTestState"), ("TIMETRA-PORT-MIB", "tmnxPortTestMode"), ("TIMETRA-PORT-MIB", "tmnxPortTestParameter"), ("TIMETRA-PORT-MIB", "tmnxPortTestLastResult"), ("TIMETRA-PORT-MIB", "tmnxPortTestStartTime"), ("TIMETRA-PORT-MIB", "tmnxPortTestEndTime"), ("TIMETRA-PORT-MIB", "tmnxPortTestDuration"), ("TIMETRA-PORT-MIB", "tmnxPortTestAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTestGroup = tmnxPortTestGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTestGroup.setDescription('The group of objects supporting management of port testing on Alcatel-Lucent SROS series system.')
tmnxPortObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 11)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS1IdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxSonetPathType"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsIngDroOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortFCStatsEgrDroOutProfOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortObsoleteGroup = tmnxPortObsoleteGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPortObsoleteGroup.setDescription('The group of objects in TIMETRA-PORT-MIB which are obsoleted.')
tmnxPortIngrMdaQosStatR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 14)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos00StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos00StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos01StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos01StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos02StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos02StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos03StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos03StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos04StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos04StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos05StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos05StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos06StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos06StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos07StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos07StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos08StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos08StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos09StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos09StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos10StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos10StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos11StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos11StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos12StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos12StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos13StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos13StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos14StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos14StatDropOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos15StatDropPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngrMdaQos15StatDropOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortIngrMdaQosStatR2r1Group = tmnxPortIngrMdaQosStatR2r1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortIngrMdaQosStatR2r1Group.setDescription('The group of objects that describe the MDA QoS discard statistics for an ethernet port located on an oversubscribed MDA for revision 2.1 on Alcatel-Lucent SROS series systems.')
tmnxPortStatsR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 16)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetIngressDroOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgressDroOutProfOcts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortStatsR2r1Group = tmnxPortStatsR2r1Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortStatsR2r1Group.setDescription('The group of objects supporting port statistics for revision 2.1 on Alcatel-Lucent SROS series systems.')
tmnxPortNotificationGroupR2r1 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 17)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupR2r1 = tmnxPortNotificationGroupR2r1.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortNotificationGroupR2r1.setDescription('The group of notifications supporting the management of physical ports for revision 2.1 on Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObjsGroupR2r1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 18)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifySonetPathAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyError"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS3AlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyDS1AlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyBundleId"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherAlarmReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupR2r1 = tmnxPortNotifyObjsGroupR2r1.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObjsGroupR2r1.setDescription('The group of objects supporting physical port notifications for revision 2.1 on Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 20)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqOobPortFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortFailure"), ("TIMETRA-PORT-MIB", "tmnxQosServiceDegraded"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyBerSdTca"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyBerSfTca"), ("TIMETRA-PORT-MIB", "tmnxEqPortWrongSFP"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObsoleteGroup = tmnxPortNotifyObsoleteGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObsoleteGroup.setDescription('The group of notifications supporting the management of physical ports made obsolete for revision 2.1 on Alcatel-Lucent SROS series systems. tmnxEqPortSFPCorrupted was made obsolete for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxPortSonetV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 21)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetSpeed"), ("TIMETRA-PORT-MIB", "tmnxSonetClockSource"), ("TIMETRA-PORT-MIB", "tmnxSonetFraming"), ("TIMETRA-PORT-MIB", "tmnxSonetReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxSonetBerSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxSonetLoopback"), ("TIMETRA-PORT-MIB", "tmnxSonetReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetSectionTraceMode"), ("TIMETRA-PORT-MIB", "tmnxSonetJ0String"), ("TIMETRA-PORT-MIB", "tmnxSonetMonS1Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetMonJ0String"), ("TIMETRA-PORT-MIB", "tmnxSonetMonK1Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetMonK2Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetSingleFiber"), ("TIMETRA-PORT-MIB", "tmnxSonetHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxSonetHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxSonetPathRowStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetPathLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxSonetPathMTU"), ("TIMETRA-PORT-MIB", "tmnxSonetPathScramble"), ("TIMETRA-PORT-MIB", "tmnxSonetPathC2Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetPathJ1String"), ("TIMETRA-PORT-MIB", "tmnxSonetPathCRC"), ("TIMETRA-PORT-MIB", "tmnxSonetPathOperMTU"), ("TIMETRA-PORT-MIB", "tmnxSonetPathOperMRU"), ("TIMETRA-PORT-MIB", "tmnxSonetPathReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxSonetPathAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxSonetPathCollectStats"), ("TIMETRA-PORT-MIB", "tmnxSonetPathReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetPathMonC2Byte"), ("TIMETRA-PORT-MIB", "tmnxSonetPathMonJ1String"), ("TIMETRA-PORT-MIB", "tmnxSonetPathChildType"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupType"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupParentPortID"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupChildType"), ("TIMETRA-PORT-MIB", "tmnxSonetGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSonetV3v0Group = tmnxPortSonetV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSonetV3v0Group.setDescription('The group of objects supporting management of SONET type ports for revision 3.0 on Alcatel-Lucent SROS series systems.')
tmnxPortTDMV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 22)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMV3v0Group = tmnxPortTDMV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortTDMV3v0Group.setDescription('The group of objects supporting management of TDM type ports for revision 3.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortATMV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 23)).setObjects(("TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMV3v0Group = tmnxPortATMV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortATMV3v0Group.setDescription('The group of objects supporting management of ATM interfaces for version 3.0 on Alcatel-Lucent SROS series systems.')
tmnxScalarPortV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 24)).setObjects(("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxScalarPortV3v0Group = tmnxScalarPortV3v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxScalarPortV3v0Group.setDescription('The group of objects supporting management for general port settings for revision 3.0 on Alcatel-Lucent SROS series systems.')
tmnxPortV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 25)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortV3v0Group = tmnxPortV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortV3v0Group.setDescription('The group of objects supporting management of physical port capabilities for revision 3.0 on Alcatel-Lucent SROS series systems.')
tmnxCiscoHDLCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 26)).setObjects(("TIMETRA-PORT-MIB", "tmnxCiscoHDLCKeepAliveInt"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCUpCount"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCDownCount"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCOperState"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCDiscardStatInPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCDiscardStatOutPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatInPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatOutPkts"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatInOctets"), ("TIMETRA-PORT-MIB", "tmnxCiscoHDLCStatOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxCiscoHDLCGroup = tmnxCiscoHDLCGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxCiscoHDLCGroup.setDescription('The group of objects supporting Cisco HDLC encapsulation on Alcatel-Lucent SROS series systems.')
tmnxMlBundleV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 27)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleV3v0Group = tmnxMlBundleV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxMlBundleV3v0Group.setDescription('The group of objects supporting management MLBUNDLES for revision 3.0 on the Alcatel-Lucent SROS series systems.')
tmnxObsoleteGroupV3v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 28)).setObjects(("TIMETRA-PORT-MIB", "tmnxSonetAps"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetApsOperStatus"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAuthKey"), ("TIMETRA-PORT-MIB", "tmnxSonetApsNeighborAddr"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAdvertiseInterval"), ("TIMETRA-PORT-MIB", "tmnxSonetApsAdvertiseTimeLeft"), ("TIMETRA-PORT-MIB", "tmnxSonetApsHoldTime"), ("TIMETRA-PORT-MIB", "tmnxSonetApsHoldTimeLeft"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoleteGroupV3v0 = tmnxObsoleteGroupV3v0.setStatus('current')
if mibBuilder.loadTexts: tmnxObsoleteGroupV3v0.setDescription('The group of objects obsoleted in the 7x50 SR series 3.0 release')
tmnxPortEthernetV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 29)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV3v0Group = tmnxPortEthernetV3v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEthernetV3v0Group.setDescription('The group of objects supporting management of Ethernet ports for revision 3.0 on Alcatel-Lucent SROS series systems.')
tmnxPortTDMGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 30)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV4v0 = tmnxPortTDMGroupV4v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortTDMGroupV4v0.setDescription('The group of objects supporting management of TDM type ports for version 4.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortATMGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 31)).setObjects(("TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMGroupV4v0 = tmnxPortATMGroupV4v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortATMGroupV4v0.setDescription('The group of objects supporting management of ATM interfaces for version 4.0 on Alcatel-Lucent SROS series systems.')
tmnxMlBundleGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 32)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV4v0 = tmnxMlBundleGroupV4v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxMlBundleGroupV4v0.setDescription('The group of objects supporting management MLBUNDLES for revision 4.0 on the Alcatel-Lucent SROS series systems.')
tmnxMlImaBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 33)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLnkActTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLnkDeactTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSymmetryMode"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxId"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxId"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxRefLnk"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxRefLnk"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmNeState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmFeState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmFailState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmDownSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpSmOperSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpAvailTxCR"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpAvailRxCR"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpNeFails"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpFeFails"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpErrorIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLostRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTxOamLablVal"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpRxOamLablVal"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpAlphaValue"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpBetaValue"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpGammaValue"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpNeClockMode"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpFeClockMode"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpVersion"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpMaxConfBw"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestState"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestMember"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpTestPattern"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpDiffDelayMaxObs"), ("TIMETRA-PORT-MIB", "tmnxBundleImaGrpLeastDelayLink"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxFailState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxFailState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaTxLid"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxLid"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaViolations"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeSevErrSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeSevErrSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeUnavailSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeUnavailSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxUnuseSecs"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeTxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaNeRxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeTxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaFeRxNumFails"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaTxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaErrorIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaLstRxIcpCells"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaOifAnomalies"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxTestState"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRxTestPattern"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberImaRelDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlImaBundleGroup = tmnxMlImaBundleGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMlImaBundleGroup.setDescription('The group of objects supporting management of Ima Groups and Members on the Alcatel-Lucent SROS series systems.')
tmnx7710PortTDMGroupV3v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 34)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS1PortBuildout"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1PortType"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLineLength"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLbo"), ("TIMETRA-PORT-MIB", "tmnxDS1PortDbGain"), ("TIMETRA-PORT-MIB", "tmnxDS1InsertSingleBitError"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCollectStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710PortTDMGroupV3v0 = tmnx7710PortTDMGroupV3v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnx7710PortTDMGroupV3v0.setDescription('The group of objects supporting management of TDM type ports specific to the Alcatel-Lucent 7710 SR series systems for revision 3.0.')
tmnxPortGroupV4v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 35)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV4v0 = tmnxPortGroupV4v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortGroupV4v0.setDescription('The group of objects supporting management of physical port capabilities for revision 4.0 on Alcatel-Lucent SROS series systems.')
tmnxObsoleteGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 36)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxObsoleteGroupV5v0 = tmnxObsoleteGroupV5v0.setStatus('current')
if mibBuilder.loadTexts: tmnxObsoleteGroupV5v0.setDescription('The group of objects obsoleted in the 7x50 SR series 5.0 release')
tmnxPortSchedV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 37)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrPortSchedPlcy"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideSchedName"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideMaxRate"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl1PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl1CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl2PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl2CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl3PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl3CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl4PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl4CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl5PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl5CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl6PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl6CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl7PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl7CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl8PIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideLvl8CIR"), ("TIMETRA-PORT-MIB", "tmnxPortSchedOverrideFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSchedV5v0Group = tmnxPortSchedV5v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedV5v0Group.setDescription('The group of objects supporting management of physical port virtual scheduler capabilities for revision 5.0 on Alcatel-Lucent SROS series systems.')
tmnxPortEthernetV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 38)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV5v0Group = tmnxPortEthernetV5v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEthernetV5v0Group.setDescription('The group of objects supporting management of Ethernet ports for revision 5.0 on Alcatel-Lucent SROS series systems.')
tmnxPortGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 39)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverCode"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV5v0 = tmnxPortGroupV5v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortGroupV5v0.setDescription('The group of objects supporting management of physical port capabilities for revision 5.0 on Alcatel-Lucent SROS series systems.')
tmnxMlBundleGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 40)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"), ("TIMETRA-PORT-MIB", "tmnxBundleProtectedType"), ("TIMETRA-PORT-MIB", "tmnxBundleParentBundle"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocWorkingBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocProtectBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocActiveBundleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV5v0 = tmnxMlBundleGroupV5v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxMlBundleGroupV5v0.setDescription('The group of objects supporting management MLBUNDLES for revision 5.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortNotificationGroupV5v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 41)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV5v0 = tmnxPortNotificationGroupV5v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortNotificationGroupV5v0.setDescription('The group of notifications supporting the management of physical ports for revision 5.0 on Alcatel-Lucent SROS series systems.')
tmnxPortTDMGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 42)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV5v0 = tmnxPortTDMGroupV5v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortTDMGroupV5v0.setDescription('The group of objects supporting management of TDM type ports for version 5.0 on the Alcatel-Lucent SROS series systems.')
tmnx7710PortTDMGroupV5v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 43)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS1PortBuildout"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1PortType"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLineLength"), ("TIMETRA-PORT-MIB", "tmnxDS1PortLbo"), ("TIMETRA-PORT-MIB", "tmnxDS1PortDbGain"), ("TIMETRA-PORT-MIB", "tmnxDS1InsertSingleBitError"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCollectStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnx7710PortTDMGroupV5v0 = tmnx7710PortTDMGroupV5v0.setStatus('current')
if mibBuilder.loadTexts: tmnx7710PortTDMGroupV5v0.setDescription('The group of objects supporting management of TDM type ports specific to the revision 5.0 on Alcatel-Lucent 7710 SR series systems.')
tmnxPortCemGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 44)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSyncState"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockMasterPortId"), ("TIMETRA-PORT-MIB", "tmnxDS1SignalMode"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSyncState"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockMasterPortId"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupPayloadFillType"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupPayloadPattern"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSignalFillType"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSignalPattern"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortCemGroupV6v0 = tmnxPortCemGroupV6v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCemGroupV6v0.setDescription('The group of objects supporting management of CEM encapsulation TDM type ports specific to the Alcatel-Lucent 7750 and 7710 SR series systems for revision 6.0.')
tmnxMcMlpppBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 45)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlpppClassCount"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppIngQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppEgrQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressOct"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressPkt"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsIngressErrPkt"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressOct"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressPkt"), ("TIMETRA-PORT-MIB", "tmnxMcMlpppStatsEgressErrPkt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMcMlpppBundleGroup = tmnxMcMlpppBundleGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMlpppBundleGroup.setDescription('The group of objects supporting management of MClass MLPPP BUNDLES for revision 6.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortNotificationGroupV6v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 46)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopDetected"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopCleared"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPStatusFailure"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV6v0 = tmnxPortNotificationGroupV6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortNotificationGroupV6v0.setDescription('The group of notifications supporting the management of physical ports for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxPortEthernetV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 47)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedEnabled"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedKeepAlive"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedRetry"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedState"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPBBEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV6v0Group = tmnxPortEthernetV6v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEthernetV6v0Group.setDescription('The group of objects supporting management of Ethernet ports for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxMlBundleGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 48)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleType"), ("TIMETRA-PORT-MIB", "tmnxBundleMinimumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleNumActiveLinks"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleRedDiffDelayAction"), ("TIMETRA-PORT-MIB", "tmnxBundleLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxBundleFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxBundleUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberRowStatus"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberActive"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberDownReason"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberUpTime"), ("TIMETRA-PORT-MIB", "tmnxBundleInputDiscards"), ("TIMETRA-PORT-MIB", "tmnxBundlePrimaryMemberPortID"), ("TIMETRA-PORT-MIB", "tmnxPortBundleNumber"), ("TIMETRA-PORT-MIB", "tmnxBundleProtectedType"), ("TIMETRA-PORT-MIB", "tmnxBundleParentBundle"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocWorkingBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocProtectBundleID"), ("TIMETRA-PORT-MIB", "tmnxBPGrpAssocActiveBundleID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlBundleGroupV6v0 = tmnxMlBundleGroupV6v0.setStatus('current')
if mibBuilder.loadTexts: tmnxMlBundleGroupV6v0.setDescription('The group of objects supporting management MLBUNDLES for revision 6.0 on the Alcatel-Lucent SROS series systems.')
tmnxMlpppBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 49)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlpppEndpointID"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppEndpointIDClass"), ("TIMETRA-PORT-MIB", "tmnxBundleYellowDiffDelay"), ("TIMETRA-PORT-MIB", "tmnxBundleShortSequence"), ("TIMETRA-PORT-MIB", "tmnxBundleMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundlePeerMRRU"), ("TIMETRA-PORT-MIB", "tmnxBundleOperMTU"), ("TIMETRA-PORT-MIB", "tmnxBundleLFI"), ("TIMETRA-PORT-MIB", "tmnxBundleMlpppMagicNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlpppBundleGroup = tmnxMlpppBundleGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMlpppBundleGroup.setDescription('The group of objects supporting management of MLPPP Bundles on the Alcatel-Lucent SROS series systems.')
tmnxPortNotificationGroupV3v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 50)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPCorrupted"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV3v0 = tmnxPortNotificationGroupV3v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortNotificationGroupV3v0.setDescription('The group of notifications supporting the management of physical ports for revision 3.0 on Alcatel-Lucent SROS series systems.')
tmnxHsmdaGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 51)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrHsmdaSchedPlcy"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrTblLastChngd"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrRowStatus"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrLastChanged"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrMaxRate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8WtInGp"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperTblLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxHsmdaGroupV6v0 = tmnxHsmdaGroupV6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxHsmdaGroupV6v0.setDescription('The group of objects supporting the management of HSMDA ports for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxPortTDMGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 52)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV6v0 = tmnxPortTDMGroupV6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortTDMGroupV6v0.setDescription('The group of objects supporting management of TDM type ports for version 6.0 on the Alcatel-Lucent SROS series systems.')
tmnxDigitalDiagMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 53)).setObjects(("TIMETRA-PORT-MIB", "tmnxDDMTemperature"), ("TIMETRA-PORT-MIB", "tmnxDDMTempLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTempLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTempHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTempHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltage"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMSupplyVoltageHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrent"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxBiasCurrentHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPower"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMTxOutputPowerHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPower"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerLowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerHiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMRxOpticalPowerType"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1LowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1LowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1HiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1HiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux1Type"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2LowWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2LowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2HiWarning"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2HiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMAux2Type"), ("TIMETRA-PORT-MIB", "tmnxDDMFailedThresholds"), ("TIMETRA-PORT-MIB", "tmnxDDMExternallyCalibrated"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower4"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower3"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower2"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower1"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalRxPower0"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxLaserBiasSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxLaserBiasOffset"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxPowerSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTxPowerOffset"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTemperatureSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalTemperatureOffset"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalVoltageSlope"), ("TIMETRA-PORT-MIB", "tmnxDDMExtCalVoltageOffset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDigitalDiagMonitorGroup = tmnxDigitalDiagMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxDigitalDiagMonitorGroup.setDescription('The group of objects supporting the management of Digital Diagnostic Monitoring SFFs for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxPortGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 54)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"), ("TIMETRA-PORT-MIB", "tmnxPortDDMEventSuppression"), ("TIMETRA-PORT-MIB", "tmnxPortSFPStatus"), ("TIMETRA-PORT-MIB", "tmnxPortReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV6v0 = tmnxPortGroupV6v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortGroupV6v0.setDescription('The group of objects supporting management of physical port capabilities for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxNamedPoolGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 55)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortIngNamedPoolPlcy"), ("TIMETRA-PORT-MIB", "tmnxPortEgrNamedPoolPlcy"), ("TIMETRA-PORT-MIB", "tmnxPortIngPoolPercentRate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrPoolPercentRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxNamedPoolGroupV6v0 = tmnxNamedPoolGroupV6v0.setStatus('current')
if mibBuilder.loadTexts: tmnxNamedPoolGroupV6v0.setDescription('The group of objects supporting the Named Pool feature for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxPortEthernetV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 56)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedEnabled"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedKeepAlive"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedRetry"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedState"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPBBEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReasonDownFlags"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSingleFiber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV6v1Group = tmnxPortEthernetV6v1Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortEthernetV6v1Group.setDescription('The group of objects supporting management of Ethernet ports for revision 6.1 on Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObjsGroupV6v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 57)).setObjects(("TIMETRA-PORT-MIB", "tmnxDDMFailedObject"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateObject"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV6v0 = tmnxPortNotifyObjsGroupV6v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObjsGroupV6v0.setDescription('The group of objects supporting physical port notifications for revision 6.0 on Alcatel-Lucent SROS series systems.')
tmnxPortQV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 58)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverMBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverMBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverMBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQV7v0Group = tmnxPortQV7v0Group.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortQV7v0Group.setDescription('The group of objects supporting management of Ethernet ports for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxMcMfrBundleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 59)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlfrBundleId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrIngQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrEgrQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrHelloTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrHelloRetryCount"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrAckTimer"), ("TIMETRA-PORT-MIB", "tmnxBundleMlfrLastChanged"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrDownReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMcMfrBundleGroup = tmnxMcMfrBundleGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMcMfrBundleGroup.setDescription('The group of objects supporting management of MClass Mlfr Bundles for revision 7.0 on the Alcatel-Lucent SROS series systems.')
tmnxFrIntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 60)).setObjects(("TIMETRA-PORT-MIB", "tmnxFrIntfFrf12Mode"), ("TIMETRA-PORT-MIB", "tmnxFrIntfLinkId"), ("TIMETRA-PORT-MIB", "tmnxFrIntfLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFrIntfGroup = tmnxFrIntfGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxFrIntfGroup.setDescription('The group of objects supporting management of Frame-Relay Interfaces for revision 7.0 on the Alcatel-Lucent SROS series systems.')
tmnxFrf12IntfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 61)).setObjects(("TIMETRA-PORT-MIB", "tmnxFrf12IntfFragmentThreshold"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfEgrQoSProfId"), ("TIMETRA-PORT-MIB", "tmnxFrf12IntfLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxFrf12IntfGroup = tmnxFrf12IntfGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxFrf12IntfGroup.setDescription('The group of objects supporting management of Frame-Relay Frf12 Interfaces for revision 7.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortQStatV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 62)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatDpdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortEgrQosQStatFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdHiPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdHiPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdLoPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatDpdLoPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatFwdOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffHiPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffHiPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffLoPrioOcts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatOffLoPrioPkts"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatUncolOctsOff"), ("TIMETRA-PORT-MIB", "tmnxPortIngQosQStatUncolPktsOff"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQDroOutProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdInProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdInProfPkts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdOutProfOcts"), ("TIMETRA-PORT-MIB", "tmnxPortNetEgrQFwdOutProfPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQStatV7v0Group = tmnxPortQStatV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortQStatV7v0Group.setDescription('The group of objects supporting management of ethernet port queue group statistics on the Alcatel-Lucent SROS series systems.')
tmnxPortEthernetV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 63)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMTU"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAutoNegotiate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperDuplex"), ("TIMETRA-PORT-MIB", "tmnxPortEtherOperSpeed"), ("TIMETRA-PORT-MIB", "tmnxPortEtherAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCollectStats"), ("TIMETRA-PORT-MIB", "tmnxPortEtherMDIMDIX"), ("TIMETRA-PORT-MIB", "tmnxPortEtherXGigMode"), ("TIMETRA-PORT-MIB", "tmnxPortEtherEgressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDot1qEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherQinqEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherIngressRate"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortEtherReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCOverPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherHCPkts1519toMax"), ("TIMETRA-PORT-MIB", "tmnxPortEtherLacpTunnel"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedEnabled"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedKeepAlive"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedRetry"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownWhenLoopedState"), ("TIMETRA-PORT-MIB", "tmnxPortEtherPBBEtype"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSingleFiber"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSM"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDWLUseBroadcastAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV7v0Group = tmnxPortEthernetV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEthernetV7v0Group.setDescription('The group of objects supporting management of Ethernet ports for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxPortGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 64)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortTableLastChange"), ("TIMETRA-PORT-MIB", "tmnxPortLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxPortType"), ("TIMETRA-PORT-MIB", "tmnxPortClass"), ("TIMETRA-PORT-MIB", "tmnxPortDescription"), ("TIMETRA-PORT-MIB", "tmnxPortName"), ("TIMETRA-PORT-MIB", "tmnxPortAlias"), ("TIMETRA-PORT-MIB", "tmnxPortUserAssignedMac"), ("TIMETRA-PORT-MIB", "tmnxPortMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortHwMacAddress"), ("TIMETRA-PORT-MIB", "tmnxPortMode"), ("TIMETRA-PORT-MIB", "tmnxPortEncapType"), ("TIMETRA-PORT-MIB", "tmnxPortLagId"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUp"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeDown"), ("TIMETRA-PORT-MIB", "tmnxPortUpProtocols"), ("TIMETRA-PORT-MIB", "tmnxPortConnectorType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverType"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverLaserWaveLen"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverDiagCapable"), ("TIMETRA-PORT-MIB", "tmnxPortTransceiverModelNumber"), ("TIMETRA-PORT-MIB", "tmnxPortSFPConnectorCode"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorOUI"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorManufactureDate"), ("TIMETRA-PORT-MIB", "tmnxPortSFPMedia"), ("TIMETRA-PORT-MIB", "tmnxPortSFPEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorSerialNum"), ("TIMETRA-PORT-MIB", "tmnxPortSFPVendorPartNum"), ("TIMETRA-PORT-MIB", "tmnxPortEquipped"), ("TIMETRA-PORT-MIB", "tmnxPortLinkStatus"), ("TIMETRA-PORT-MIB", "tmnxPortAdminStatus"), ("TIMETRA-PORT-MIB", "tmnxPortOperStatus"), ("TIMETRA-PORT-MIB", "tmnxPortState"), ("TIMETRA-PORT-MIB", "tmnxPortPrevState"), ("TIMETRA-PORT-MIB", "tmnxPortNumAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortAlarmState"), ("TIMETRA-PORT-MIB", "tmnxPortLastAlarmEvent"), ("TIMETRA-PORT-MIB", "tmnxPortClearAlarms"), ("TIMETRA-PORT-MIB", "tmnxPortLastStateChanged"), ("TIMETRA-PORT-MIB", "tmnxPortNumChannels"), ("TIMETRA-PORT-MIB", "tmnxPortNetworkEgrQueues"), ("TIMETRA-PORT-MIB", "tmnxPortIsLeaf"), ("TIMETRA-PORT-MIB", "tmnxPortChanType"), ("TIMETRA-PORT-MIB", "tmnxPortParentPortID"), ("TIMETRA-PORT-MIB", "tmnxPortLoadBalanceAlgorithm"), ("TIMETRA-PORT-MIB", "tmnxPortTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeName"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeDescription"), ("TIMETRA-PORT-MIB", "tmnxPortConnectTypeStatus"), ("TIMETRA-PORT-MIB", "tmnxChannelPortID"), ("TIMETRA-PORT-MIB", "tmnxPortOpticalCompliance"), ("TIMETRA-PORT-MIB", "tmnxL4LoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxLsrIpLoadBalancing"), ("TIMETRA-PORT-MIB", "tmnxPortLastClearedTime"), ("TIMETRA-PORT-MIB", "tmnxPortDDMEventSuppression"), ("TIMETRA-PORT-MIB", "tmnxPortSFPStatus"), ("TIMETRA-PORT-MIB", "tmnxPortReasonDownFlags"), ("TIMETRA-PORT-MIB", "tmnxPortSSMRxQualityLevel"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmLaserChannel"), ("TIMETRA-PORT-MIB", "tmnxPortOtuCapable"), ("TIMETRA-PORT-MIB", "tmnxSonetSuppressLoOrderAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV7v0 = tmnxPortGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortGroupV7v0.setDescription('The group of objects supporting management of physical port capabilities for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObjsGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 65)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV7v0 = tmnxPortNotifyObjsGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObjsGroupV7v0.setDescription('The group of objects supporting physical port notifications for revision 7.0 on Alcatel 7xxx series systems.')
tmnxPortNotificationGroupV7v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 66)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopDetected"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopCleared"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPStatusFailure"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateChange"), ("TIMETRA-PORT-MIB", "tmnxPortUnsupportedFunction"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrLoopback"), ("TIMETRA-PORT-MIB", "tmnxEqPortWaveTrackerAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV7v0 = tmnxPortNotificationGroupV7v0.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortNotificationGroupV7v0.setDescription('The group of notifications supporting the management of physical ports for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxPortEtherObsoleteV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 67)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherReasonDownFlags"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEtherObsoleteV7v0Group = tmnxPortEtherObsoleteV7v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherObsoleteV7v0Group.setDescription('The objects which were obsoleted for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxPortTDMGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 68)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS3ChannelAcctPolicyId"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCollectStats"), ("TIMETRA-PORT-MIB", "tmnxDS3Buildout"), ("TIMETRA-PORT-MIB", "tmnxDS3Type"), ("TIMETRA-PORT-MIB", "tmnxDS3LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFraming"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelChannelized"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrateCSUMode"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelSubrate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLoopback"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLEicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLLicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLFicString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLUnitString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPfiString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMessageType"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelFEACLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelCRC"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelInFEACLoop"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonPortString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelMDLMonGenString"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelBERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS3ChannelScramble"), ("TIMETRA-PORT-MIB", "tmnxDS1RowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1Type"), ("TIMETRA-PORT-MIB", "tmnxDS1Framing"), ("TIMETRA-PORT-MIB", "tmnxDS1Loopback"), ("TIMETRA-PORT-MIB", "tmnxDS1InvertData"), ("TIMETRA-PORT-MIB", "tmnxDS1BitErrorInsertionRate"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTPattern"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTDuration"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxDS1ReportAlarmStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1LastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS1ClockSource"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTOperStatus"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTSynched"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTErrors"), ("TIMETRA-PORT-MIB", "tmnxDS1BERTTotalBits"), ("TIMETRA-PORT-MIB", "tmnxDS1RemoteLoopRespond"), ("TIMETRA-PORT-MIB", "tmnxDS1InRemoteLoop"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS1BerSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupRowStatus"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupTimeSlots"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupSpeed"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupCRC"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupOperMTU"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupLastChangeTime"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupIdleCycleFlags"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupScramble"), ("TIMETRA-PORT-MIB", "tmnxDS0ChanGroupBerSfLinkDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDMGroupV7v0 = tmnxPortTDMGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTDMGroupV7v0.setDescription('The group of objects supporting management of TDM type ports for version 6.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortTDME1GroupV6v1 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 69)).setObjects(("TIMETRA-PORT-MIB", "tmnxDS1NationalUseBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortTDME1GroupV6v1 = tmnxPortTDME1GroupV6v1.setStatus('current')
if mibBuilder.loadTexts: tmnxPortTDME1GroupV6v1.setDescription('The group of objects supporting management of TDM E1 type ports for version 6.1 on the Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObjsGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 70)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyWTAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyIntDestId"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifyOrgString"), ("TIMETRA-PORT-MIB", "tmnxHostMatchNotifySubIdent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV8v0 = tmnxPortNotifyObjsGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObjsGroupV8v0.setDescription('The group of objects supporting physical port notifications for revision 8.0 on Alcatel-Lucent SROS series systems.')
tmnxWaveTrackerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 71)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortWaveTrackerCapable"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerAlarmState"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerCfgAlarms"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerEncodeEnable"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerInUse"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerLowerPowerMargin"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerMaxAttainablePwr"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerMeasuredPower"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerMinAttainablePwr"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerPowerCtrlEnable"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerTargetPower"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerTrailName"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerUpperPowerMargin"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerWaveKey1"), ("TIMETRA-PORT-MIB", "tmnxWaveTrackerWaveKey2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxWaveTrackerGroup = tmnxWaveTrackerGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxWaveTrackerGroup.setDescription('The group of objects supporting management of Wave Tracker for version 8.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 72)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortHybridIngAccessWeight"), ("TIMETRA-PORT-MIB", "tmnxPortHybridIngNetworkWeight"), ("TIMETRA-PORT-MIB", "tmnxPortHybridEgrAccessWeight"), ("TIMETRA-PORT-MIB", "tmnxPortHybridEgrNetworkWeight"), ("TIMETRA-PORT-MIB", "tmnxPortInterfaceGroupHandlerIdx"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMCodeType"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMTxDus"), ("TIMETRA-PORT-MIB", "tmnxSonetTxDus"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverMBSBytes"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverMBSBytes"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverMBSBytes"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminPIRPercent"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminCIRPercent"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverRateType"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminPIRPercent"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminCIRPercent"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverRateType"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHMLastChgd"), ("TIMETRA-PORT-MIB", "tmnxPortHoldTimeUnits"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMRowStatus"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMLastChgd"), ("TIMETRA-PORT-MIB", "tmnxSonetTxS1Byte"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMRxEsmc"), ("TIMETRA-PORT-MIB", "tmnxPortEtherSSMTxQualityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortGroupV8v0 = tmnxPortGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortGroupV8v0.setDescription('The group of objects added in revision 8.0 Alcatel-Lucent SROS series systems for port management.')
tmnxPortDwdmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 73)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortDwdmLaserChannel"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmRxDtvAdjustEnable"), ("TIMETRA-PORT-MIB", "tmnxPortDwdmRxDtvDacPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortDwdmGroup = tmnxPortDwdmGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPortDwdmGroup.setDescription('The group of objects supporting management of DWDM for version 8.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortATMGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 74)).setObjects(("TIMETRA-PORT-MIB", "tmnxATMIntfCellFormat"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMinVpValue"), ("TIMETRA-PORT-MIB", "tmnxATMIntfMapping"), ("TIMETRA-PORT-MIB", "tmnxATMIntfCustomBufferMode"), ("TIMETRA-PORT-MIB", "tmnxATMIntfBufferPool"), ("TIMETRA-PORT-MIB", "tmnxATMIntfVcThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMGroupV7v0 = tmnxPortATMGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMGroupV7v0.setDescription('The group of objects supporting management of ATM interfaces for version 7.0 on Alcatel-Lucent SROS series systems.')
tmnxPortCEMGroupV8v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 75)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortCemStatsReportAlarm"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsIgrForwardedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsIgrDroppedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrForwardedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrDroppedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMissingPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrPktsReOrder"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrJtrBfrURun"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrJtrBfrORun"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMisOrderDrop"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMalformedPkts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrLBitDrop"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrMultipleDrop"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrESs"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrSESs"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrUASs"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrFailureCounts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrURunCounts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrORunCounts"), ("TIMETRA-PORT-MIB", "tmnxPortCemStatsEgrJtrBfrDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortCEMGroupV8v0 = tmnxPortCEMGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortCEMGroupV8v0.setDescription('The group of objects supporting management of Circuit EMulation (CEM) interfaces for version 8.0 on Alcatel-Lucent SROS series systems.')
tmnxPortQV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 76)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAcctgPolId"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpAggRateLimit"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpCollectStats"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpFrameBaseActg"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpSchedPol"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminCIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverAdminPIR"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverHiPrioOnly"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverLastChanged"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverRowStatus"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverCIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverPIRAdaptation"), ("TIMETRA-PORT-MIB", "tPortAccIngQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpDescr"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQV8v0Group = tmnxPortQV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortQV8v0Group.setDescription('The group of objects supporting management of Ethernet ports for revision 8.0 on Alcatel-Lucent SROS series systems.')
tmnxPortQObsoleteV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 77)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrQOverMBS"), ("TIMETRA-PORT-MIB", "tPortAccIngQOverMBS"), ("TIMETRA-PORT-MIB", "tPortNetEgrQOverMBS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortQObsoleteV8v0Group = tmnxPortQObsoleteV8v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortQObsoleteV8v0Group.setDescription('The objects which were obsoleted for revision 8.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNotificationGroupV8v0 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 78)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortSonetPathAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPInserted"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPRemoved"), ("TIMETRA-PORT-MIB", "tmnxEqPortError"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS3AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1Alarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortDS1AlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlYellowDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlRedDiffExceeded"), ("TIMETRA-PORT-MIB", "tmnxEqPortBndlBadEndPtDiscr"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS1E1LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxDS3E3LoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStarted"), ("TIMETRA-PORT-MIB", "tmnxSonetSDHLoopbackStopped"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopDetected"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherLoopCleared"), ("TIMETRA-PORT-MIB", "tmnxEqPortSpeedCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortDuplexCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqPortIngressRateCfgNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorFailure"), ("TIMETRA-PORT-MIB", "tmnxEqPortSFPStatusFailure"), ("TIMETRA-PORT-MIB", "tmnxDSXClockSyncStateChange"), ("TIMETRA-PORT-MIB", "tmnxPortUnsupportedFunction"), ("TIMETRA-PORT-MIB", "tmnxBundleMemberMlfrLoopback"), ("TIMETRA-PORT-MIB", "tmnxEqPortWaveTrackerAlarm"), ("TIMETRA-PORT-MIB", "tPortAccEgrQGrpHostMatchFailure"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHostMatchFailure"), ("TIMETRA-PORT-MIB", "tmnxEqDigitalDiagMonitorClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortOpticalAmpAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortOpticalTdcmAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV8v0 = tmnxPortNotificationGroupV8v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotificationGroupV8v0.setDescription('The group of notifications supporting the management of physical ports for revision 8.0 on Alcatel-Lucent SROS series systems.')
tmnxPortSchedStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 79)).setObjects(("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdOctsHi"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdOctsLo"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdPktsHi"), ("TIMETRA-PORT-MIB", "tPortAccEgrSchedStatFwdPktsLo"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdOctsHi"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdOctsLo"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdPktsHi"), ("TIMETRA-PORT-MIB", "tPortAccIngSchedStatFwdPktsLo"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdOctsHi"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdOctsLo"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdPktsHi"), ("TIMETRA-PORT-MIB", "tPortNetEgrSchedStatFwdPktsLo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortSchedStatsGroup = tmnxPortSchedStatsGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPortSchedStatsGroup.setDescription('The group of objects supporting the scheduler queue-group statistics per port for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxPortVPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 80)).setObjects(("TIMETRA-PORT-MIB", "tPortEgrVPortDescr"), ("TIMETRA-PORT-MIB", "tPortEgrVPortLastChanged"), ("TIMETRA-PORT-MIB", "tPortEgrVPortRowStatus"), ("TIMETRA-PORT-MIB", "tPortEgrVPortSchedPol"), ("TIMETRA-PORT-MIB", "tPortEgrVPortTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMTableLastChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortVPortGroup = tmnxPortVPortGroup.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxPortVPortGroup.setDescription('The group of objects supporting the virtual port related objects for revision 8.0 on Alcatel-Lucent SROS series systems.')
tmnxMlpppBundleGroupV7v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 81)).setObjects(("TIMETRA-PORT-MIB", "tmnxBundleMlpppStatelessApsSwo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMlpppBundleGroupV7v0 = tmnxMlpppBundleGroupV7v0.setStatus('current')
if mibBuilder.loadTexts: tmnxMlpppBundleGroupV7v0.setDescription('The group of additional objects supporting management of MLPPP Bundles for revision 7.0 on Alcatel-Lucent SROS series systems.')
tmnxOpticalPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 82)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpCfgAlarms"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCtrlMode"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmManCfgDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCfgRxChan"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCfgAlarms"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortHasRxAmplifier"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortHasRxTdcm"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPowerIn"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpGain"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPowerOut"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPumpTemp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpModuleTemp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpPumpCurrent"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpAlarmState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpSerialNum"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortAmpCtrlState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmPowerIn"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmLoss"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmPowerOut"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd1Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd2Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd3Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmRtd4Temp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmModuleTemp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmMinDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmMaxDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmAutoDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmMeasDisp"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmPresRxChan"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmAlarmState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmSerialNum"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmCtrlState"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmDispSwpStart"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortTdcmDispSwpEnd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOpticalPortGroup = tmnxOpticalPortGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortGroup.setDescription('The group of objects supporting management of Optical Port for version 8.0 on the Alcatel-Lucent SROS series systems.')
tmnxPortATMGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 90)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperTblLastCh"), ("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperLastMgmtCh"), ("TIMETRA-PORT-MIB", "tmnxPortATMVpShaperEgrAtd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortATMGroupV9v0 = tmnxPortATMGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortATMGroupV9v0.setDescription('The group of objects supporting management of ATM interfaces added in release 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortVPortV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 91)).setObjects(("TIMETRA-PORT-MIB", "tPortEgrVPortDescr"), ("TIMETRA-PORT-MIB", "tPortEgrVPortLastChanged"), ("TIMETRA-PORT-MIB", "tPortEgrVPortRowStatus"), ("TIMETRA-PORT-MIB", "tPortEgrVPortSchedPol"), ("TIMETRA-PORT-MIB", "tPortEgrVPortTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortEgrVPortHMTableLastChgd"), ("TIMETRA-PORT-MIB", "tPortEgrVPortAggRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortVPortV9v0Group = tmnxPortVPortV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortVPortV9v0Group.setDescription('The group of objects supporting the virtual port related objects for revision 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortEgrExpShaperV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 92)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperTblLastChngd"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperRate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass1Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass2Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass3Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass4Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass5Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass6Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass7Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass8Rate"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass1Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass2Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass3Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass4Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass5Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass6Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass7Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperClass8Thresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperLoBrstMaxCls"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdPkts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdOcts"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStMonOvrOct"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperStLstClrdTime"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls1StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls2StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls3StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls4StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls5StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls6StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls7StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperCls8StMonOvrOH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStFwdOctsH"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStMonOvrOL"), ("TIMETRA-PORT-MIB", "tPortEgrExpShaperAggStMonOvrOH"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperThresh"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperLoBurstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperHiBurstInc"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl1BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl2BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl3BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl4BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl5BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl6BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl7BrstLimit"), ("TIMETRA-PORT-MIB", "tmnxPortEgrExpShaperCl8BrstLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEgrExpShaperV9v0Group = tmnxPortEgrExpShaperV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrExpShaperV9v0Group.setDescription('The group of objects supporting the egress port expanded shaper related objects for revision 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNotificationGroupV9v4 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 93)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqSonetClockSrcNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqSonetSfThreshNotCompatible"), ("TIMETRA-PORT-MIB", "tmnxEqSonetFramingNotCompatible"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV9v4 = tmnxPortNotificationGroupV9v4.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotificationGroupV9v4.setDescription('The group of notifications supporting the management of physical ports for release 9.0 R4 on Alcatel-Lucent SROS series systems.')
tmnxPortObjAppV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 94)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjectAppResvCbsAmbrAlrmStep"), ("TIMETRA-PORT-MIB", "tmnxObjectAppResvCbsAmbrAlrmMax"), ("TIMETRA-PORT-MIB", "tmnxObjectAppAmbrAlrmThresh"), ("TIMETRA-PORT-MIB", "tmnxObjectAppRedAlrmThresh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortObjAppV9v0Group = tmnxPortObjAppV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortObjAppV9v0Group.setDescription('The group of objects supporting management of Network Named Pool policies on Alcatel-Lucent SROS series systems release 9.0.')
tmnxOpticalPortGroupV9v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 95)).setObjects(("TIMETRA-PORT-MIB", "tmnxOpticalPortDwdmChannelMin"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortDwdmChannelMax"), ("TIMETRA-PORT-MIB", "tmnxOpticalPortLaserTunability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxOpticalPortGroupV9v0 = tmnxOpticalPortGroupV9v0.setStatus('current')
if mibBuilder.loadTexts: tmnxOpticalPortGroupV9v0.setDescription('The group of objects supporting the management of optical ports added in release 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObjsGroupV8v9 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 96)).setObjects(("TIMETRA-PORT-MIB", "tmnxObjType"), ("TIMETRA-PORT-MIB", "tmnxObjPortId"), ("TIMETRA-PORT-MIB", "tmnxObjMdaId"), ("TIMETRA-PORT-MIB", "tmnxObjAppType"), ("TIMETRA-PORT-MIB", "tmnxObjAppPool"), ("TIMETRA-PORT-MIB", "tmnxObjNamedPoolPolicy"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppSumOfQResvSize"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsOld"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvCbsNew"), ("TIMETRA-PORT-MIB", "tmnxObjAppResvSizeOld"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV8v9 = tmnxPortNotifyObjsGroupV8v9.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObjsGroupV8v9.setDescription('The group of objects supporting physical port notifications for revision 8.0R9 on Alcatel-Lucent SROS series systems.')
tmnxPortNotificationGroupV8v9 = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 97)).setObjects(("TIMETRA-PORT-MIB", "tmnxResvCbsPoolThreshGreen"), ("TIMETRA-PORT-MIB", "tmnxResvCbsPoolThreshAmber"), ("TIMETRA-PORT-MIB", "tmnxResvCbsPoolThreshRed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationGroupV8v9 = tmnxPortNotificationGroupV8v9.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotificationGroupV8v9.setDescription('The group of notifications supporting the management of physical ports for release 8.0 R9 on Alcatel-Lucent SROS series systems.')
tmnxPortEgrVPortStatsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 99)).setObjects(("TIMETRA-PORT-MIB", "tPortEgrVPStLstClrdTime"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdPkt"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdOct"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdPkt"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdOct"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdPktL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdPktH"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdOctL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlFwdOctH"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdPktL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdPktH"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdOctL"), ("TIMETRA-PORT-MIB", "tPortEgrVPStLvlDpdOctH"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEgrVPortStatsV9v0Group = tmnxPortEgrVPortStatsV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEgrVPortStatsV9v0Group.setDescription('The group of objects supporting the virtual port aggregate statistics for revision 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObjsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 100)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortNotifyEtherCrcAlarmValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsV9v0Group = tmnxPortNotifyObjsV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObjsV9v0Group.setDescription('The group of notification objects extending port capabilities for revision 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortEtherV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 101)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSdThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSdTMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSfThreshold"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonSfTMultiplier"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcMonWindowSize"), ("TIMETRA-PORT-MIB", "tmnxPortEtherCrcAlarmReason"), ("TIMETRA-PORT-MIB", "tmnxPortEtherDownOnInternalError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEtherV9v0Group = tmnxPortEtherV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEtherV9v0Group.setDescription('The group of objects extending Ethernet port capabilities for revision 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNotificationV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 102)).setObjects(("TIMETRA-PORT-MIB", "tmnxEqPortEtherCrcAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherCrcAlarmClear"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherInternalAlarm"), ("TIMETRA-PORT-MIB", "tmnxEqPortEtherInternalAlarmClr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotificationV9v0Group = tmnxPortNotificationV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotificationV9v0Group.setDescription('The group of notifications extending port capabilities for revision 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 103)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortLinkLengthInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortV9v0Group = tmnxPortV9v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortV9v0Group.setDescription('The group of objects extending port capabilities for revision 9.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNetEgrV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 104)).setObjects(("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPlcrCntrlPolicy"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStatMode"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfPkt"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfPktL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfPktH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffInProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdInProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpInProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStOffOutProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStFwdOutProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfOct"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfOctL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStDrpOutProfOctH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolPktOff"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolPktOffL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolPktOffH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolOctOff"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolOctOffL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpPStUncolOctOffH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdPkts"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdPktsL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdPktsH"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdOcts"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdOctsL"), ("TIMETRA-PORT-MIB", "tPortNetEgrQGrpArbitStatFwdOctsH"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNetEgrV10v0Group = tmnxPortNetEgrV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNetEgrV10v0Group.setDescription('The group of objects added in 10.0 release to support network egress queue-group objects on Alcatel-Lucent SROS series systems.')
tmnxDDMLaneGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 105)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortSFPNumLanes"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTemperature"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTempHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrent"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxBiasCurrentHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPower"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneTxOutputPowerHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPower"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrLowWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrLowAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrHiWarn"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPwrHiAlarm"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneRxOpticalPowerType"), ("TIMETRA-PORT-MIB", "tmnxDDMLaneFailedThresholds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDDMLaneGroupV10v0 = tmnxDDMLaneGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxDDMLaneGroupV10v0.setDescription('The group of objects enhancing the management of Digital Diagnostic Monitoring SFFs for revision 10.0 on Alcatel-Lucent SROS series systems.')
tmnxPortNotifyObjsGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 106)).setObjects(("TIMETRA-PORT-MIB", "tmnxDDMLaneIdOrModule"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortNotifyObjsGroupV10v0 = tmnxPortNotifyObjsGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortNotifyObjsGroupV10v0.setDescription('The group of objects supporting physical port notifications for revision 10.0 on Alcatel-Lucent SROS series systems.')
tmnxPortPlcyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 107)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortPlcyTableLastCh"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyLastCh"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyDescription"), ("TIMETRA-PORT-MIB", "tmnxPortPlcyEgrPortSchedPlcy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortPlcyGroup = tmnxPortPlcyGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxPortPlcyGroup.setDescription('The group of objects to support network egress port policies on Alcatel-Lucent SROS series systems.')
tmnxPortLoadBalGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 108)).setObjects(("TIMETRA-PORT-MIB", "tmnxIpLoadBalancing"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortLoadBalGroupV10v0 = tmnxPortLoadBalGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxPortLoadBalGroupV10v0.setDescription('The group of additional objects supporting ECMP and LAG load balancing in Alcatel-Lucent SROS release 10.0 systems.')
tmnxPortEthernetV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 109)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEtherMinFrameLength"), ("TIMETRA-PORT-MIB", "tmnxPortPhysStateChangeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortEthernetV10v0Group = tmnxPortEthernetV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortEthernetV10v0Group.setDescription('The group of additional objects enhancing Ethernet Port functionality in Alcatel-Lucent SROS release 10.0 systems.')
tmnxHsmdaGroupV10v0 = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 110)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrHsmdaSchedPlcy"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrTblLastChngd"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrRowStatus"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrLastChanged"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrMaxRate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrGrp2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass1WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass2WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass3WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass4WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass5WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass6WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass7WtInGp"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8Rate"), ("TIMETRA-PORT-MIB", "tmnxHsmdaPortSchOvrClass8WtInGp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxHsmdaGroupV10v0 = tmnxHsmdaGroupV10v0.setStatus('current')
if mibBuilder.loadTexts: tmnxHsmdaGroupV10v0.setDescription('The group of objects supporting the management of HSMDA ports for revision 10.0 on Alcatel-Lucent SROS series systems.')
tmnxPortObsoletedV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 111)).setObjects(("TIMETRA-PORT-MIB", "tmnxPortEgrShaperTblLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPortEgrShaperRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPortObsoletedV10v0Group = tmnxPortObsoletedV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPortObsoletedV10v0Group.setDescription('The objects which were obsoleted for revision 10.0 on Alcatel-Lucent SROS series systems.')
tmnxPwPortV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 2, 2, 112)).setObjects(("TIMETRA-PORT-MIB", "tmnxPwPortTblLastChanged"), ("TIMETRA-PORT-MIB", "tmnxPwPortRowStatus"), ("TIMETRA-PORT-MIB", "tmnxPwPortLastChgd"), ("TIMETRA-PORT-MIB", "tmnxPwPortEncapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxPwPortV10v0Group = tmnxPwPortV10v0Group.setStatus('current')
if mibBuilder.loadTexts: tmnxPwPortV10v0Group.setDescription('The group of objects supporting specific pseudo-wire port feature on Alcatel-Lucnet SROS series systems.')
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxBundleImaGrpSmFailState=tmnxBundleImaGrpSmFailState, tPortEgrVPStLvlFwdOct=tPortEgrVPStLvlFwdOct, tmnxDDMLaneTemperature=tmnxDDMLaneTemperature, tmnxOpticalPortHasRxAmplifier=tmnxOpticalPortHasRxAmplifier, tmnxPortNotifyPortId=tmnxPortNotifyPortId, tmnxDS1PortBuildout=tmnxDS1PortBuildout, tmnxPortEtherV9v0Group=tmnxPortEtherV9v0Group, tmnxPortLoadBalanceAlgorithm=tmnxPortLoadBalanceAlgorithm, tmnxPortNotifyObsoleteGroup=tmnxPortNotifyObsoleteGroup, tmnxPortIngrMdaQos00StatDropPkts=tmnxPortIngrMdaQos00StatDropPkts, tPortAccEgrQGrpAcctgPolId=tPortAccEgrQGrpAcctgPolId, tPortEgrVPortAggStatsHLTable=tPortEgrVPortAggStatsHLTable, tmnxEqPortDS3AlarmClear=tmnxEqPortDS3AlarmClear, tPortEgrExpShaperCls3StFwdPktsH=tPortEgrExpShaperCls3StFwdPktsH, tmnxPortTestAction=tmnxPortTestAction, tmnxPortAlarmState=tmnxPortAlarmState, tmnxFRDlcmiN392Dce=tmnxFRDlcmiN392Dce, tmnxPortIngQosQStatOffLoPrioOcts=tmnxPortIngQosQStatOffLoPrioOcts, tmnxFRDlcmiDiscardedMsgs=tmnxFRDlcmiDiscardedMsgs, tPortNetEgrQGrpPlcrCntrlPolicy=tPortNetEgrQGrpPlcrCntrlPolicy, tmnxOpticalPortAmpSerialNum=tmnxOpticalPortAmpSerialNum, tmnxPortTypeStatus=tmnxPortTypeStatus, tPortEgrVPStLstClrdTime=tPortEgrVPStLstClrdTime, tmnxPortEgrExpShaperClass1Thresh=tmnxPortEgrExpShaperClass1Thresh, tmnxPortSchedOverrideLvl2PIR=tmnxPortSchedOverrideLvl2PIR, tPortAccEgrQGrpTableLastChgd=tPortAccEgrQGrpTableLastChgd, tmnxPwPortEntry=tmnxPwPortEntry, tmnxPortEtherTable=tmnxPortEtherTable, tmnxPortSchedOverrideLvl4CIR=tmnxPortSchedOverrideLvl4CIR, tPortAccIngQGrpSchedPol=tPortAccIngQGrpSchedPol, tmnxPortATMVpShaperTblLastCh=tmnxPortATMVpShaperTblLastCh, TmnxDSXBertPattern=TmnxDSXBertPattern, tmnxHsmdaPortSchOvrClass6Rate=tmnxHsmdaPortSchOvrClass6Rate, tmnxDS0ChanGroupTimeSlots=tmnxDS0ChanGroupTimeSlots, tmnxCiscoHDLCStatOutOctets=tmnxCiscoHDLCStatOutOctets, tmnxDDMLaneTempLowWarn=tmnxDDMLaneTempLowWarn, tPortNetEgrSchedStatFwdPkts=tPortNetEgrSchedStatFwdPkts, tmnxSonetMonJ0String=tmnxSonetMonJ0String, tmnxEqSonetFramingNotCompatible=tmnxEqSonetFramingNotCompatible, tmnxPortIngrMdaQos12StatDropPkts=tmnxPortIngrMdaQos12StatDropPkts, tmnxBundleMlpppEgrQoSProfId=tmnxBundleMlpppEgrQoSProfId, tmnxDS1PortTable=tmnxDS1PortTable, tmnxPortNotificationGroupV3v0=tmnxPortNotificationGroupV3v0, tmnxDS3ChannelMTU=tmnxDS3ChannelMTU, tPortAccEgrQOverHiPrioOnly=tPortAccEgrQOverHiPrioOnly, tmnxPortCemStatsEgrFailureCounts=tmnxPortCemStatsEgrFailureCounts, tPortAccEgrQOverCBS=tPortAccEgrQOverCBS, tPortAccIngQGrpTableLastChgd=tPortAccIngQGrpTableLastChgd, tmnxBundleMemberImaNeSevErrSecs=tmnxBundleMemberImaNeSevErrSecs, tPortNetEgrQOverMBS=tPortNetEgrQOverMBS, tmnxDS0ChanGroupPayloadFillType=tmnxDS0ChanGroupPayloadFillType, tmnxPortIngrMdaQos07StatDropPkts=tmnxPortIngrMdaQos07StatDropPkts, tmnxDDMAux2LowAlarm=tmnxDDMAux2LowAlarm, tmnxPortObsoleteGroup=tmnxPortObsoleteGroup, tmnxPortNetIngressStatsEntry=tmnxPortNetIngressStatsEntry, tmnxHostMatchNotifyOrgString=tmnxHostMatchNotifyOrgString, tPortEgrExpShaperCls2StFwdOctsL=tPortEgrExpShaperCls2StFwdOctsL, tmnxPortSFPNumLanes=tmnxPortSFPNumLanes, tmnxSonetPathAcctPolicyId=tmnxSonetPathAcctPolicyId, tmnxDDMLaneTempHiWarn=tmnxDDMLaneTempHiWarn, tmnxDS1NationalUseBits=tmnxDS1NationalUseBits, tmnxCiscoHDLCUpCount=tmnxCiscoHDLCUpCount, tmnxPortTypeIndex=tmnxPortTypeIndex, tmnxCiscoHDLCStatOutPkts=tmnxCiscoHDLCStatOutPkts, tmnxEqPortDS1AlarmClear=tmnxEqPortDS1AlarmClear, tmnxDDMSupplyVoltage=tmnxDDMSupplyVoltage, tPortEgrExpShaperCls8StMonOvrOct=tPortEgrExpShaperCls8StMonOvrOct, tmnxHsmdaPortSchOvrClass4Rate=tmnxHsmdaPortSchOvrClass4Rate, tmnxEqPortEtherAlarmClear=tmnxEqPortEtherAlarmClear, tmnxPortIngrMdaQos14StatDropPkts=tmnxPortIngrMdaQos14StatDropPkts, tmnxMcMlpppStatsIngressPkt=tmnxMcMlpppStatsIngressPkt, tmnxPortATMGroupV4v0=tmnxPortATMGroupV4v0, tPortEgrVPortAggStatsHLEntry=tPortEgrVPortAggStatsHLEntry, tmnxOpticalPortTdcmLoss=tmnxOpticalPortTdcmLoss, tmnxDS1SignalMode=tmnxDS1SignalMode, tmnxPortCemGroupV6v0=tmnxPortCemGroupV6v0, tmnxPortIngrMdaQos05StatDropOcts=tmnxPortIngrMdaQos05StatDropOcts, tmnxPortEgrExpShaperClass6Rate=tmnxPortEgrExpShaperClass6Rate, tmnxBundleImaGrpTestMember=tmnxBundleImaGrpTestMember, tmnxPortNotification=tmnxPortNotification, TmnxPortOperStatus=TmnxPortOperStatus, tmnxPortNotificationGroupV7v0=tmnxPortNotificationGroupV7v0, tPortEgrVPortHostMatchEntry=tPortEgrVPortHostMatchEntry, tmnxPortComp7750V6v0=tmnxPortComp7750V6v0, tmnxPortStatsR2r1Group=tmnxPortStatsR2r1Group, tmnxPortPlcyLastCh=tmnxPortPlcyLastCh, tPortEgrExpShaperCls6StFwdOcts=tPortEgrExpShaperCls6StFwdOcts, tmnxPortNotifyBundleId=tmnxPortNotifyBundleId, tmnxDS0ChanGroupRowStatus=tmnxDS0ChanGroupRowStatus, tmnxBundleMemberImaNeRxUnuseSecs=tmnxBundleMemberImaNeRxUnuseSecs, tmnxPortNotificationGroupR2r1=tmnxPortNotificationGroupR2r1, tmnxPortGroupV5v0=tmnxPortGroupV5v0, tmnxPortCemStatsEgrJtrBfrORun=tmnxPortCemStatsEgrJtrBfrORun, tmnxPortEgrExpShaperClass4Rate=tmnxPortEgrExpShaperClass4Rate, tmnxPortEgrHsmdaSchedPlcy=tmnxPortEgrHsmdaSchedPlcy, tPortNetEgrQGrpPStFwdInProfOctH=tPortNetEgrQGrpPStFwdInProfOctH, tmnxBundleMemberImaNeTxState=tmnxBundleMemberImaNeTxState, tmnxPortEncapType=tmnxPortEncapType, tmnxPwPortTblLastChanged=tmnxPwPortTblLastChanged, tmnxPortEtherSingleFiber=tmnxPortEtherSingleFiber, tmnxPortEtherMDIMDIX=tmnxPortEtherMDIMDIX, tPortEgrExpShaperCls6StFwdOctsL=tPortEgrExpShaperCls6StFwdOctsL, tmnxDS3Table=tmnxDS3Table, tPortEgrExpShaperCls7StFwdPktsH=tPortEgrExpShaperCls7StFwdPktsH, tmnxMcMlpppStatsIngressOct=tmnxMcMlpppStatsIngressOct, tmnxEqSonetSfThreshNotCompatible=tmnxEqSonetSfThreshNotCompatible, tmnxDS3ChannelSubrate=tmnxDS3ChannelSubrate, tPortNetEgrQGrpPStatQosPolicerId=tPortNetEgrQGrpPStatQosPolicerId, tmnxEqSonetClockSrcNotCompatible=tmnxEqSonetClockSrcNotCompatible, tmnxSonetBerSdThreshold=tmnxSonetBerSdThreshold, tPortEgrExpShaperCls8StFwdPktsH=tPortEgrExpShaperCls8StFwdPktsH, tmnxDS0ChanGroupSignalFillType=tmnxDS0ChanGroupSignalFillType, tmnxPortEtherOperSpeed=tmnxPortEtherOperSpeed, tmnxDS1ClockMasterPortId=tmnxDS1ClockMasterPortId, tmnxOpticalPortOperEntry=tmnxOpticalPortOperEntry, tmnxSonetGroupTable=tmnxSonetGroupTable, tmnxSonetClockSource=tmnxSonetClockSource, tmnxPortNetEgrQFwdOutProfPkts=tmnxPortNetEgrQFwdOutProfPkts, tmnxBundleMRRU=tmnxBundleMRRU, tmnxDDMLaneRxOpticalPower=tmnxDDMLaneRxOpticalPower, tmnxPortEgrExpShaperV9v0Group=tmnxPortEgrExpShaperV9v0Group, tmnxBundleImaGrpTxRefLnk=tmnxBundleImaGrpTxRefLnk, tmnxBundleMemberTable=tmnxBundleMemberTable, tmnxEqPortFailure=tmnxEqPortFailure, tmnxPortIngQosQStatUncolPktsOff=tmnxPortIngQosQStatUncolPktsOff, tPortEgrVPortHMRowStatus=tPortEgrVPortHMRowStatus, tPortEgrExpShaperCls1StMonOvrOct=tPortEgrExpShaperCls1StMonOvrOct, tmnxFrIntfEntry=tmnxFrIntfEntry, tmnxPortCemStatsEgrPktsReOrder=tmnxPortCemStatsEgrPktsReOrder, tmnxBundleImaGrpSmDownSecs=tmnxBundleImaGrpSmDownSecs, TmnxMlpppEndpointIdClass=TmnxMlpppEndpointIdClass, tmnxDDMTxBiasCurrentHiWarning=tmnxDDMTxBiasCurrentHiWarning, TmnxDSXIdleFillType=TmnxDSXIdleFillType, tPortNetEgrQGrpPStUncolPktOffH=tPortNetEgrQGrpPStUncolPktOffH, tmnxDDMTxOutputPowerHiAlarm=tmnxDDMTxOutputPowerHiAlarm, tPortNetEgrQGrpPStDrpInProfPkt=tPortNetEgrQGrpPStDrpInProfPkt, tmnxBundleNumActiveLinks=tmnxBundleNumActiveLinks, tmnxDDMAux1HiWarning=tmnxDDMAux1HiWarning, tmnxBundleMemberImaNeRxState=tmnxBundleMemberImaNeRxState, tPortEgrExpShaperCls5StFwdOcts=tPortEgrExpShaperCls5StFwdOcts, tmnxPortSchedOverrideLvl1PIR=tmnxPortSchedOverrideLvl1PIR, tmnxBundleInputDiscards=tmnxBundleInputDiscards, tmnxSonetBerSfThreshold=tmnxSonetBerSfThreshold, tPortEgrExpShaperCls8StMonOvrOL=tPortEgrExpShaperCls8StMonOvrOL, tmnxPortEgrExpShaperTblLastChngd=tmnxPortEgrExpShaperTblLastChngd, tmnxPortIngrMdaQos03StatDropOcts=tmnxPortIngrMdaQos03StatDropOcts, tmnxEqPortSpeedCfgNotCompatible=tmnxEqPortSpeedCfgNotCompatible, tmnxDS3ChannelBERTDuration=tmnxDS3ChannelBERTDuration, tmnxBundleMlfrEntry=tmnxBundleMlfrEntry, tPortEgrExpShaperCls5StFwdPktsL=tPortEgrExpShaperCls5StFwdPktsL, tmnxPortEgrExpShaperClass3Rate=tmnxPortEgrExpShaperClass3Rate, tmnxPortNetEgrQDroInProfPkts=tmnxPortNetEgrQDroInProfPkts, tmnxPortSchedOverrideLvl6CIR=tmnxPortSchedOverrideLvl6CIR, tmnxSonetApsHoldTime=tmnxSonetApsHoldTime, tmnxDS3ChannelCRC=tmnxDS3ChannelCRC, tPortAccEgrQGrpHostMatchEntry=tPortAccEgrQGrpHostMatchEntry, tPortEgrExpShaperCls5StMonOvrOct=tPortEgrExpShaperCls5StMonOvrOct, TmnxWaveTrackerAlarm=TmnxWaveTrackerAlarm, tmnxBundleLastChangeTime=tmnxBundleLastChangeTime, tPortAccIngSchedStatFwdPktsHi=tPortAccIngSchedStatFwdPktsHi, tPortEgrVPStLvlDpdPktL=tPortEgrVPStLvlDpdPktL, tmnxDS1LastChangeTime=tmnxDS1LastChangeTime, tPortAccEgrQGrpName=tPortAccEgrQGrpName, tmnxPortNotifyPrefix=tmnxPortNotifyPrefix, tmnxPortEtherCrcMonSfTMultiplier=tmnxPortEtherCrcMonSfTMultiplier, tmnxPortState=tmnxPortState, tmnxPortCEMGroupV8v0=tmnxPortCEMGroupV8v0, tmnxDS1ReportAlarm=tmnxDS1ReportAlarm, tmnxPortIngrMdaQos12StatDropOcts=tmnxPortIngrMdaQos12StatDropOcts, tmnxDS0ChanGroupCRC=tmnxDS0ChanGroupCRC, tmnxObjectAppResvCbsAmbrAlrmStep=tmnxObjectAppResvCbsAmbrAlrmStep, tmnxDS3ChannelTable=tmnxDS3ChannelTable, tmnxPortLinkLengthInfo=tmnxPortLinkLengthInfo, tPortEgrExpShaperStatsEntry=tPortEgrExpShaperStatsEntry, tmnxOpticalPortTdcmCfgAlarms=tmnxOpticalPortTdcmCfgAlarms, tmnxDDMRxOpticalPowerLowWarning=tmnxDDMRxOpticalPowerLowWarning, tmnxPortSFPEquipped=tmnxPortSFPEquipped, tmnxPortEgrExpShaperEntry=tmnxPortEgrExpShaperEntry, tmnxBundleImaGrpMaxConfBw=tmnxBundleImaGrpMaxConfBw, tmnxDS3ChannelType=tmnxDS3ChannelType, tmnxBundleMemberMlfrDownReason=tmnxBundleMemberMlfrDownReason, tmnxDDMTempHiWarning=tmnxDDMTempHiWarning, tmnxHsmdaPortSchOvrLastChanged=tmnxHsmdaPortSchOvrLastChanged, tPortEgrVPortHostMatchFailure=tPortEgrVPortHostMatchFailure, tmnxSonetGroupName=tmnxSonetGroupName, tmnxBundleImaGrpAlphaValue=tmnxBundleImaGrpAlphaValue, tmnxBundleImaGrpEntry=tmnxBundleImaGrpEntry, tmnxBundleBundleID=tmnxBundleBundleID, tmnxDS0ChanGroupScramble=tmnxDS0ChanGroupScramble, tPortNetEgrSchedStatFwdPktsHi=tPortNetEgrSchedStatFwdPktsHi, tmnxPortEgrShaperName=tmnxPortEgrShaperName, tmnxDDMLaneTxOutputPowerHiWarn=tmnxDDMLaneTxOutputPowerHiWarn, tPortNetEgrQGrpArbitStatFwdPkts=tPortNetEgrQGrpArbitStatFwdPkts, tmnxEqPortBndlYellowDiffExceeded=tmnxEqPortBndlYellowDiffExceeded, tmnxPortFCStatsEgrDroOutProfOcts=tmnxPortFCStatsEgrDroOutProfOcts, tmnxPortEtherLacpTunnel=tmnxPortEtherLacpTunnel, tPortEgrExpShaperCls7StMonOvrOL=tPortEgrExpShaperCls7StMonOvrOL, tmnxPortComp7710V7v0=tmnxPortComp7710V7v0, tmnxOpticalPortTdcmManCfgDisp=tmnxOpticalPortTdcmManCfgDisp, tmnxDDMLaneId=tmnxDDMLaneId, tPortNetEgrSchedStatFwdOctsHi=tPortNetEgrSchedStatFwdOctsHi, tmnxEqPortError=tmnxEqPortError, tmnxBundleMlpppClassCount=tmnxBundleMlpppClassCount, tmnxPortEgrQosQStatQueueId=tmnxPortEgrQosQStatQueueId, tPortAccEgrQGrpHMLastChgd=tPortAccEgrQGrpHMLastChgd, tmnxSonetHoldTimeDown=tmnxSonetHoldTimeDown, tmnxWaveTrackerInUse=tmnxWaveTrackerInUse, tmnxEqPortDS1Alarm=tmnxEqPortDS1Alarm, tmnxPortCemStatsEgrJtrBfrDepth=tmnxPortCemStatsEgrJtrBfrDepth, tmnxSonetMonS1Byte=tmnxSonetMonS1Byte, tPortAccIngSchedStatEntry=tPortAccIngSchedStatEntry, tmnxBundleMemberImaRxTestPattern=tmnxBundleMemberImaRxTestPattern, tmnxDS3E3LoopbackStopped=tmnxDS3E3LoopbackStopped, tmnxPortEtherReportAlarm=tmnxPortEtherReportAlarm, tmnxBundleImaGrpSmOperSecs=tmnxBundleImaGrpSmOperSecs, tmnxDDMExtCalVoltageSlope=tmnxDDMExtCalVoltageSlope, tmnxPortPlcyEntry=tmnxPortPlcyEntry, tmnxPortFCStatsIngDroOutProfPkts=tmnxPortFCStatsIngDroOutProfPkts, tmnxDS1BerSdThreshold=tmnxDS1BerSdThreshold, tPortAccIngSchedStatName=tPortAccIngSchedStatName, tPortEgrExpShaperCls2StMonOvrOct=tPortEgrExpShaperCls2StMonOvrOct, tmnxDS3ChannelFraming=tmnxDS3ChannelFraming, tmnxWaveTrackerMaxAttainablePwr=tmnxWaveTrackerMaxAttainablePwr, tmnxQosAppObjsGroup=tmnxQosAppObjsGroup, tmnxOpticalPortLaserTunability=tmnxOpticalPortLaserTunability, tmnxPortEtherDuplex=tmnxPortEtherDuplex, tmnxPortNetIngressDroInProfOcts=tmnxPortNetIngressDroInProfOcts, TmnxDSXBertOperStatus=TmnxDSXBertOperStatus, tmnxDDMFailedObject=tmnxDDMFailedObject, tmnxPortGroupV7v0=tmnxPortGroupV7v0, tmnxBundleMemberImaFeTxUnuseSecs=tmnxBundleMemberImaFeTxUnuseSecs, tmnxDDMRxOpticalPowerLowAlarm=tmnxDDMRxOpticalPowerLowAlarm, tmnxFrf12IntfGroup=tmnxFrf12IntfGroup, tmnxDS1BERTPattern=tmnxDS1BERTPattern, tmnxPortComp7450V6v0=tmnxPortComp7450V6v0, tmnxEqPortEtherInternalAlarmClr=tmnxEqPortEtherInternalAlarmClr, tmnxPortNetIngressFwdInProfOcts=tmnxPortNetIngressFwdInProfOcts, tmnxBundleMemberImaRxTestState=tmnxBundleMemberImaRxTestState, tmnxSonetPathReportAlarmStatus=tmnxSonetPathReportAlarmStatus, tmnxPortComp7450=tmnxPortComp7450, TmnxMlfrLinkDownReason=TmnxMlfrLinkDownReason, tmnxBundleRedDiffDelay=tmnxBundleRedDiffDelay, tmnxBundleMlfrHelloRetryCount=tmnxBundleMlfrHelloRetryCount, tPortNetEgrQGrpPStDrpInProfPktL=tPortNetEgrQGrpPStDrpInProfPktL, tPortEgrExpShaperAggStFwdOctsH=tPortEgrExpShaperAggStFwdOctsH, tmnxDDMLaneTxOutputPowerHiAlarm=tmnxDDMLaneTxOutputPowerHiAlarm, tmnxDDMExtCalVoltageOffset=tmnxDDMExtCalVoltageOffset, tmnxSonetTxS1Byte=tmnxSonetTxS1Byte, tmnxPortEtherSpeed=tmnxPortEtherSpeed, tmnxPortV9v0Group=tmnxPortV9v0Group, tmnxPortEgrQosQStatTable=tmnxPortEgrQosQStatTable, tmnxBPGrpAssocProtectBundleID=tmnxBPGrpAssocProtectBundleID, tmnxSonetApsAdvertiseInterval=tmnxSonetApsAdvertiseInterval, tmnxBundleImaGrpFeFails=tmnxBundleImaGrpFeFails)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxHsmdaPortSchOvrClass6WtInGp=tmnxHsmdaPortSchOvrClass6WtInGp, tmnxDS1RemoteLoopRespond=tmnxDS1RemoteLoopRespond, tmnxOpticalPortTdcmRtd2Temp=tmnxOpticalPortTdcmRtd2Temp, tPortEgrExpShaperCls1StFwdOctsH=tPortEgrExpShaperCls1StFwdOctsH, tmnxBundleImaGrpTestPattern=tmnxBundleImaGrpTestPattern, tPortNetEgrQGrpPStFwdInProfOct=tPortNetEgrQGrpPStFwdInProfOct, tmnxPortIngQosQStatDpdHiPrioPkts=tmnxPortIngQosQStatDpdHiPrioPkts, tPortAccEgrSchedStatFwdPkts=tPortAccEgrSchedStatFwdPkts, tmnxDS1PortLastChangeTime=tmnxDS1PortLastChangeTime, tPortNetEgrQGrpLastChgd=tPortNetEgrQGrpLastChgd, tmnxHsmdaPortSchOvrClass4WtInGp=tmnxHsmdaPortSchOvrClass4WtInGp, tmnxBundleEntry=tmnxBundleEntry, tmnxOpticalPortAmpCfgAlarms=tmnxOpticalPortAmpCfgAlarms, tmnxSonetPathMonJ1String=tmnxSonetPathMonJ1String, tmnxPwPortId=tmnxPwPortId, tmnxPortEgrExpShaperClass2Rate=tmnxPortEgrExpShaperClass2Rate, tmnxPortNotifyObjsGroupV10v0=tmnxPortNotifyObjsGroupV10v0, tmnxATMIntfBufferPool=tmnxATMIntfBufferPool, tmnxDS0ChanGroupTable=tmnxDS0ChanGroupTable, tmnxPortCemStatsEgrMalformedPkts=tmnxPortCemStatsEgrMalformedPkts, tmnxSonetTable=tmnxSonetTable, tmnxObjectId=tmnxObjectId, tmnxPwPortRowStatus=tmnxPwPortRowStatus, tmnxWaveTrackerTargetPower=tmnxWaveTrackerTargetPower, tmnxBundleMemberImaNeUnavailSecs=tmnxBundleMemberImaNeUnavailSecs, tPortAccEgrQOverAdminPIRPercent=tPortAccEgrQOverAdminPIRPercent, TmnxMcMlpppClassIndex=TmnxMcMlpppClassIndex, tmnxFrIntfGroup=tmnxFrIntfGroup, tmnxCiscoHDLCStatsEntry=tmnxCiscoHDLCStatsEntry, tmnxPortNotifyWTAlarmReason=tmnxPortNotifyWTAlarmReason, tmnxBundleMemberImaFeRxState=tmnxBundleMemberImaFeRxState, tmnxPortTDMGroupV6v0=tmnxPortTDMGroupV6v0, tmnxFrf12IntfEgrQoSProfId=tmnxFrf12IntfEgrQoSProfId, tmnxDS3ChannelBitErrorInsertionRate=tmnxDS3ChannelBitErrorInsertionRate, tmnxPortNotifyObjsGroupV8v9=tmnxPortNotifyObjsGroupV8v9, tPortAccEgrQGrpRowStatus=tPortAccEgrQGrpRowStatus, tmnxMcMlpppStatsEgressErrPkt=tmnxMcMlpppStatsEgressErrPkt, tmnxPortSchedOverrideLvl8PIR=tmnxPortSchedOverrideLvl8PIR, tmnxWaveTrackerUpperPowerMargin=tmnxWaveTrackerUpperPowerMargin, tPortAccIngSchedStatFwdOctsHi=tPortAccIngSchedStatFwdOctsHi, tPortAccEgrSchedStatFwdPktsHi=tPortAccEgrSchedStatFwdPktsHi, tPortEgrExpShaperCls1StFwdOctsL=tPortEgrExpShaperCls1StFwdOctsL, tPortEgrExpShaperCls4StFwdPktsL=tPortEgrExpShaperCls4StFwdPktsL, tPortAccEgrQGrpSchedPol=tPortAccEgrQGrpSchedPol, tmnxPortIngrMdaQos06StatDropOcts=tmnxPortIngrMdaQos06StatDropOcts, tmnxATMIntfEntry=tmnxATMIntfEntry, tmnxSonetPathReportAlarm=tmnxSonetPathReportAlarm, tmnxPortIngrMdaQosStatTable=tmnxPortIngrMdaQosStatTable, tmnxPortSFPConnectorCode=tmnxPortSFPConnectorCode, tmnxDS3ChannelMDLEicString=tmnxDS3ChannelMDLEicString, TmnxDSXReportAlarm=TmnxDSXReportAlarm, tmnxDS1InsertSingleBitError=tmnxDS1InsertSingleBitError, tmnxPortSchedOverrideMaxRate=tmnxPortSchedOverrideMaxRate, tPortNetEgrQOverCBS=tPortNetEgrQOverCBS, tmnxDS3ChannelBERTSynched=tmnxDS3ChannelBERTSynched, tmnxCiscoHDLCStatInPkts=tmnxCiscoHDLCStatInPkts, tmnxMlBundleV3v0Group=tmnxMlBundleV3v0Group, tmnxPortEgrNamedPoolPlcy=tmnxPortEgrNamedPoolPlcy, tmnxOpticalPortTdcmMaxDisp=tmnxOpticalPortTdcmMaxDisp, tmnxDS3ChannelFEACLoopRespond=tmnxDS3ChannelFEACLoopRespond, tmnxPortNetEgrQFwdInProfOcts=tmnxPortNetEgrQFwdInProfOcts, tmnxDigitalDiagMonitorTable=tmnxDigitalDiagMonitorTable, tmnxPortComp7710=tmnxPortComp7710, tmnxEqPortEtherLoopCleared=tmnxEqPortEtherLoopCleared, tmnxPortMacAddress=tmnxPortMacAddress, tmnxObsoleteGroupV5v0=tmnxObsoleteGroupV5v0, tmnxFRDlcmiStatusEnqMsgTimeouts=tmnxFRDlcmiStatusEnqMsgTimeouts, tmnxBundleMemberImaTxLid=tmnxBundleMemberImaTxLid, TmnxImaGrpFailState=TmnxImaGrpFailState, tmnxPortEgrExpShaperCl1BrstLimit=tmnxPortEgrExpShaperCl1BrstLimit, tmnxOpticalPortGroup=tmnxOpticalPortGroup, tmnxPortEtherMinFrameLength=tmnxPortEtherMinFrameLength, tPortAccIngQOverPIRAdaptation=tPortAccIngQOverPIRAdaptation, tmnxATMIntfCellFormat=tmnxATMIntfCellFormat, tmnxPortStatsObjs=tmnxPortStatsObjs, tmnxPortEgrExpShaperCl5BrstLimit=tmnxPortEgrExpShaperCl5BrstLimit, tmnxPortScalarObjs=tmnxPortScalarObjs, tmnxEqDigitalDiagMonitorClear=tmnxEqDigitalDiagMonitorClear, tmnxPortOpticalCompliance=tmnxPortOpticalCompliance, tmnxOpticalPortAmpPumpTemp=tmnxOpticalPortAmpPumpTemp, tmnxPortIngQosQStatFwdOutProfPkts=tmnxPortIngQosQStatFwdOutProfPkts, tmnxPortEgrShaperLastChanged=tmnxPortEgrShaperLastChanged, tPortAccEgrQGrpHMOrgString=tPortAccEgrQGrpHMOrgString, tmnxEqPortSFPRemoved=tmnxEqPortSFPRemoved, tmnxDS1ClockSource=tmnxDS1ClockSource, tPortEgrVPortSchedPol=tPortEgrVPortSchedPol, tmnxWaveTrackerTable=tmnxWaveTrackerTable, tmnxBPGrpAssocTable=tmnxBPGrpAssocTable, tmnxBundleMemberImaFeRxUnuseSecs=tmnxBundleMemberImaFeRxUnuseSecs, tPortNetEgrQGrpPStOffInProfPktH=tPortNetEgrQGrpPStOffInProfPktH, tmnxDS3ChannelRowStatus=tmnxDS3ChannelRowStatus, tmnxPortNotifyDS3AlarmReason=tmnxPortNotifyDS3AlarmReason, tmnxPortLinkStatus=tmnxPortLinkStatus, tmnxPortEgrExpShaperHiBurstInc=tmnxPortEgrExpShaperHiBurstInc, tPortEgrExpShaperCls8StMonOvrOH=tPortEgrExpShaperCls8StMonOvrOH, tPortEgrVPortHMOrgString=tPortEgrVPortHMOrgString, tmnxPortNetEgressStatsEntry=tmnxPortNetEgressStatsEntry, tmnxPortNotificationGroupV8v0=tmnxPortNotificationGroupV8v0, tmnxDDMLaneTempHiAlarm=tmnxDDMLaneTempHiAlarm, TmnxOpticalTdcmAlarm=TmnxOpticalTdcmAlarm, tPortAccIngQOverRowStatus=tPortAccIngQOverRowStatus, tmnxDDMLaneTxOutputPower=tmnxDDMLaneTxOutputPower, tmnxFRDlcmiTxStatusEnqMsgs=tmnxFRDlcmiTxStatusEnqMsgs, tPortNetEgrQGrpPStDrpInProfOctH=tPortNetEgrQGrpPStDrpInProfOctH, tmnxPortTestLastResult=tmnxPortTestLastResult, tmnxPortNetEgressStatsTable=tmnxPortNetEgressStatsTable, tPortNetEgrQOverCIRAdaptation=tPortNetEgrQOverCIRAdaptation, tmnxObjectAppAmbrAlrmThresh=tmnxObjectAppAmbrAlrmThresh, tmnxPortConnectTypeTable=tmnxPortConnectTypeTable, tmnxPortLoadBalGroupV10v0=tmnxPortLoadBalGroupV10v0, tmnxOpticalPortAmpPumpCurrent=tmnxOpticalPortAmpPumpCurrent, tmnxPortEtherCrcMonSdThreshold=tmnxPortEtherCrcMonSdThreshold, tmnxBundleMemberImaTxIcpCells=tmnxBundleMemberImaTxIcpCells, tmnxPortNetEgressFwdOutProfOcts=tmnxPortNetEgressFwdOutProfOcts, tmnxPortConnectTypeName=tmnxPortConnectTypeName, tmnxPortEtherSSMCodeType=tmnxPortEtherSSMCodeType, tPortNetEgrQOverEntry=tPortNetEgrQOverEntry, tPortEgrExpShaperCls8StFwdOctsH=tPortEgrExpShaperCls8StFwdOctsH, tmnxPortPlcyDescription=tmnxPortPlcyDescription, tmnxPortEgrPortSchedPlcy=tmnxPortEgrPortSchedPlcy, tmnxDDMAux1Type=tmnxDDMAux1Type, tmnxDDMExtCalTxLaserBiasSlope=tmnxDDMExtCalTxLaserBiasSlope, tmnxOpticalPortTdcmRtd3Temp=tmnxOpticalPortTdcmRtd3Temp, tmnxPortLastAlarmEvent=tmnxPortLastAlarmEvent, tmnxDDMAux2HiAlarm=tmnxDDMAux2HiAlarm, tmnxPortConnectorType=tmnxPortConnectorType, tmnxWaveTrackerWaveKey2=tmnxWaveTrackerWaveKey2, tmnxSonetSDHLoopbackStarted=tmnxSonetSDHLoopbackStarted, tmnxBundleMemberMlfrEntry=tmnxBundleMemberMlfrEntry, tmnxSonetApsAdvertiseTimeLeft=tmnxSonetApsAdvertiseTimeLeft, tmnxMlpppBundleGroupV7v0=tmnxMlpppBundleGroupV7v0, tmnxSonetJ0String=tmnxSonetJ0String, tmnxPortFCStatsTable=tmnxPortFCStatsTable, tmnxDDMExtCalRxPower1=tmnxDDMExtCalRxPower1, tPortNetEgrQGrpPStDrpOutProfPktH=tPortNetEgrQGrpPStDrpOutProfPktH, tmnxPortCemStatsEgrUASs=tmnxPortCemStatsEgrUASs, tPortNetEgrSchedStatTable=tPortNetEgrSchedStatTable, tPortEgrExpShaperAggStMonOvrOct=tPortEgrExpShaperAggStMonOvrOct, tmnxPortTestTable=tmnxPortTestTable, tPortNetEgrQGrpPStUncolOctOff=tPortNetEgrQGrpPStUncolOctOff, tmnxBundleMlpppEntry=tmnxBundleMlpppEntry, tPortNetEgrQGrpPStFwdOutProfPktL=tPortNetEgrQGrpPStFwdOutProfPktL, tmnxDDMExtCalTxLaserBiasOffset=tmnxDDMExtCalTxLaserBiasOffset, tmnxPortIngrMdaQos14StatDropOcts=tmnxPortIngrMdaQos14StatDropOcts, tPortAccEgrSchedStatFwdOctsHi=tPortAccEgrSchedStatFwdOctsHi, tmnxDigitalDiagMonitorEntry=tmnxDigitalDiagMonitorEntry, tmnxPortAdminStatus=tmnxPortAdminStatus, tmnxDDMTxOutputPowerLowWarning=tmnxDDMTxOutputPowerLowWarning, tmnxDS3ChannelMDLFicString=tmnxDS3ChannelMDLFicString, tmnxPortEtherIngressRate=tmnxPortEtherIngressRate, tmnxDS3ChannelMDLLicString=tmnxDS3ChannelMDLLicString, tmnxATMIntfMapping=tmnxATMIntfMapping, tmnxPortComp7450V8v0=tmnxPortComp7450V8v0, tPortAccIngQOverMBS=tPortAccIngQOverMBS, tmnxPortIngrMdaQos08StatDropPkts=tmnxPortIngrMdaQos08StatDropPkts, tmnxPortTestMode=tmnxPortTestMode, tmnxDS0ChanGroupSignalPattern=tmnxDS0ChanGroupSignalPattern, tmnxPortObjAppV9v0Group=tmnxPortObjAppV9v0Group, tmnxBundleType=tmnxBundleType, tmnxOpticalPortAmpPowerOut=tmnxOpticalPortAmpPowerOut, tmnxBundleMemberMlfrTable=tmnxBundleMemberMlfrTable, tmnxPortTestEndTime=tmnxPortTestEndTime, tmnxBundleTable=tmnxBundleTable, tmnxDSXClockSyncStateObject=tmnxDSXClockSyncStateObject, tmnxOpticalPortTdcmMinDisp=tmnxOpticalPortTdcmMinDisp, tmnxBundleMlfrLastChanged=tmnxBundleMlfrLastChanged, tmnxQosPoolAppTable=tmnxQosPoolAppTable, tmnxPortQV7v0Group=tmnxPortQV7v0Group, tPortEgrExpShaperCls6StFwdOctsH=tPortEgrExpShaperCls6StFwdOctsH, tmnxDDMExtCalRxPower0=tmnxDDMExtCalRxPower0, tmnxPortCemStatsEntry=tmnxPortCemStatsEntry, tmnxPortNetEgrQStatEntry=tmnxPortNetEgrQStatEntry, tmnxPortATMVpShaperEgrAtd=tmnxPortATMVpShaperEgrAtd, tmnxOpticalPortTdcmAlarmState=tmnxOpticalPortTdcmAlarmState, tmnxPortComplianceV10v0=tmnxPortComplianceV10v0, tmnxPortLastChangeTime=tmnxPortLastChangeTime, tmnxQosPoolAppEntry=tmnxQosPoolAppEntry, tPortNetEgrQOverAdminPIR=tPortNetEgrQOverAdminPIR, tPortNetEgrQOverAdminCIR=tPortNetEgrQOverAdminCIR, tPortEgrVPStLvlFwdOctL=tPortEgrVPStLvlFwdOctL, tmnxL4LoadBalancing=tmnxL4LoadBalancing, tmnxSonetEntry=tmnxSonetEntry, tmnxPortSchedV5v0Group=tmnxPortSchedV5v0Group, tmnxBundleImaGrpTable=tmnxBundleImaGrpTable, tmnxPortEgrQosQStatFwdInProfOcts=tmnxPortEgrQosQStatFwdInProfOcts, TmnxImaLnkFailState=TmnxImaLnkFailState, tPortNetEgrQOverRowStatus=tPortNetEgrQOverRowStatus, tmnxDDMLaneRxOpticalPwrLowAlarm=tmnxDDMLaneRxOpticalPwrLowAlarm, tmnxEqPortSonetAlarm=tmnxEqPortSonetAlarm, tmnxPortLastStateChanged=tmnxPortLastStateChanged, tPortEgrVPStLvlDpdOct=tPortEgrVPStLvlDpdOct, tmnxObjectAppSlopePolicy=tmnxObjectAppSlopePolicy, tmnxBundleMlpppEndpointIDClass=tmnxBundleMlpppEndpointIDClass, tmnxPortNetEgressDroInProfOcts=tmnxPortNetEgressDroInProfOcts, tmnxPortObjs=tmnxPortObjs, tmnxDS3ChannelClockSyncState=tmnxDS3ChannelClockSyncState, tmnxPortQV8v0Group=tmnxPortQV8v0Group, tmnxPortComp7450V6v1=tmnxPortComp7450V6v1, tmnxDS1PortLbo=tmnxDS1PortLbo, tmnxDDMLaneTxBiasCurrentHiWarn=tmnxDDMLaneTxBiasCurrentHiWarn, tmnxPortNetworkEgrQueues=tmnxPortNetworkEgrQueues, tmnxHsmdaPortSchOvrClass1Rate=tmnxHsmdaPortSchOvrClass1Rate, tmnxSonetGroupParentPortID=tmnxSonetGroupParentPortID, tmnxPortNetEgrV10v0Group=tmnxPortNetEgrV10v0Group, tPortAccIngQOverCBS=tPortAccIngQOverCBS, tmnxDDMLaneTxOutputPowerLowAlarm=tmnxDDMLaneTxOutputPowerLowAlarm, tmnxBundleMemberEntry=tmnxBundleMemberEntry, tmnxDS1Entry=tmnxDS1Entry, tmnxObjAppResvSize=tmnxObjAppResvSize, tmnxPortNetEgrQDroOutProfOcts=tmnxPortNetEgrQDroOutProfOcts, tmnxPortEgrShaperRate=tmnxPortEgrShaperRate, tmnxPortUserAssignedMac=tmnxPortUserAssignedMac, tmnxDDMSupplyVoltageHiAlarm=tmnxDDMSupplyVoltageHiAlarm, tmnxOpticalPortAmpModuleTemp=tmnxOpticalPortAmpModuleTemp, tmnxHsmdaPortSchOvrClass2Rate=tmnxHsmdaPortSchOvrClass2Rate, tmnxFRObjs=tmnxFRObjs, tmnxSonetPathMonC2Byte=tmnxSonetPathMonC2Byte, tmnxMcMlpppClassIndex=tmnxMcMlpppClassIndex, tmnxPortNotifySonetAlarmReason=tmnxPortNotifySonetAlarmReason, tmnxPortEtherSSMTxDus=tmnxPortEtherSSMTxDus, TmnxOpticalTdcmCtrlMode=TmnxOpticalTdcmCtrlMode, tmnxPortNotifyEtherAlarmReason=tmnxPortNotifyEtherAlarmReason, TmnxDSXIdleCycleFlags=TmnxDSXIdleCycleFlags, tmnxPortEgrExpShaperClass8Thresh=tmnxPortEgrExpShaperClass8Thresh, tmnxBundleMlpppEndpointID=tmnxBundleMlpppEndpointID, tmnxPortEtherXGigMode=tmnxPortEtherXGigMode, tmnxPortIngrMdaQos13StatDropPkts=tmnxPortIngrMdaQos13StatDropPkts, tmnxPortSonetV3v0Group=tmnxPortSonetV3v0Group, tmnxPortClearAlarms=tmnxPortClearAlarms, tmnxPortEgrShaperTable=tmnxPortEgrShaperTable, tmnxDS1BERTSynched=tmnxDS1BERTSynched, tPortEgrExpShaperStatsHLTable=tPortEgrExpShaperStatsHLTable, tPortNetEgrQGrpPStDrpOutProfOctL=tPortNetEgrQGrpPStDrpOutProfOctL, tmnxEqPortBndlRedDiffExceeded=tmnxEqPortBndlRedDiffExceeded, tPortNetEgrQGrpPStatEntry=tPortNetEgrQGrpPStatEntry, tmnxDS1PortType=tmnxDS1PortType, tmnxPortEtherSSMTxQualityLevel=tmnxPortEtherSSMTxQualityLevel, tmnxPortTDMV3v0Group=tmnxPortTDMV3v0Group, tPortEgrExpShaperCls7StFwdPkts=tPortEgrExpShaperCls7StFwdPkts, tmnxDS3ChannelLoopback=tmnxDS3ChannelLoopback, tmnxBPGrpAssocEntry=tmnxBPGrpAssocEntry, tmnxDSXClockSyncStateChange=tmnxDSXClockSyncStateChange, tmnxHsmdaPortSchOvrMaxRate=tmnxHsmdaPortSchOvrMaxRate, tmnxPortEgrExpShaperClass8Rate=tmnxPortEgrExpShaperClass8Rate, tPortAccEgrSchedStatFwdPktsLo=tPortAccEgrSchedStatFwdPktsLo, tPortNetEgrQGrpArbitStatFwdOctsH=tPortNetEgrQGrpArbitStatFwdOctsH, tmnxPortCemStatsEgrJtrBfrURun=tmnxPortCemStatsEgrJtrBfrURun, tPortNetEgrQGrpPStOffOutProfPktL=tPortNetEgrQGrpPStOffOutProfPktL, tmnxPortTDME1GroupV6v1=tmnxPortTDME1GroupV6v1, tmnxPortHybridEgrNetworkWeight=tmnxPortHybridEgrNetworkWeight, tmnxBundleMemberImaErrorIcpCells=tmnxBundleMemberImaErrorIcpCells, tmnxDDMAux2Type=tmnxDDMAux2Type, tmnxBundleMemberUpTime=tmnxBundleMemberUpTime, tmnxPortEtherSSM=tmnxPortEtherSSM)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxPortPlcyTableLastCh=tmnxPortPlcyTableLastCh, tmnxOpticalPortOperTable=tmnxOpticalPortOperTable, tPortAccIngQOverTableLastChgd=tPortAccIngQOverTableLastChgd, tmnxPortPrevState=tmnxPortPrevState, tmnxObjAppResvCbsNew=tmnxObjAppResvCbsNew, tmnxHsmdaPortSchOvrClass7Rate=tmnxHsmdaPortSchOvrClass7Rate, tmnxObjectAppPoolSize=tmnxObjectAppPoolSize, tmnxPortIngrMdaQos02StatDropOcts=tmnxPortIngrMdaQos02StatDropOcts, tmnxPortConnectTypeStatus=tmnxPortConnectTypeStatus, tmnxDS3ChannelBERTErrors=tmnxDS3ChannelBERTErrors, tmnxDS3Entry=tmnxDS3Entry, tmnxPortTDMGroupV4v0=tmnxPortTDMGroupV4v0, tmnxPortNotifyObjsGroupV8v0=tmnxPortNotifyObjsGroupV8v0, tPortNetEgrQGrpPStDrpOutProfOct=tPortNetEgrQGrpPStDrpOutProfOct, tmnxFrIntfTable=tmnxFrIntfTable, tPortAccIngQGrpName=tPortAccIngQGrpName, tmnxSonetGroupChildType=tmnxSonetGroupChildType, tmnxDDMLaneRxOpticalPwrHiWarn=tmnxDDMLaneRxOpticalPwrHiWarn, tmnxHsmdaPortSchOvrClass8Rate=tmnxHsmdaPortSchOvrClass8Rate, tmnxDDMRxOpticalPowerType=tmnxDDMRxOpticalPowerType, tmnxATMIntfVcThreshold=tmnxATMIntfVcThreshold, tPortEgrExpShaperCls2StFwdPktsL=tPortEgrExpShaperCls2StFwdPktsL, tmnxPortComp7750V4v0=tmnxPortComp7750V4v0, tmnxDS1BERTOperStatus=tmnxDS1BERTOperStatus, tmnxATMIntfMinVpValue=tmnxATMIntfMinVpValue, tmnxPortTestDuration=tmnxPortTestDuration, tmnxPortEtherAcctPolicyId=tmnxPortEtherAcctPolicyId, tmnxMlBundleGroupV6v0=tmnxMlBundleGroupV6v0, tPortNetEgrQOverPIRAdaptation=tPortNetEgrQOverPIRAdaptation, tmnxBundleMlfrBundleId=tmnxBundleMlfrBundleId, tPortAccIngQGrpLastChgd=tPortAccIngQGrpLastChgd, tmnxObjectAppPoolRowStatus=tmnxObjectAppPoolRowStatus, tmnxPortAlias=tmnxPortAlias, tmnxPortSchedStatsGroup=tmnxPortSchedStatsGroup, tmnxOpticalPortAmpCtrlState=tmnxOpticalPortAmpCtrlState, tmnxPwPortLastChgd=tmnxPwPortLastChgd, tmnxDDMLaneTxBiasCurrentLowWarn=tmnxDDMLaneTxBiasCurrentLowWarn, tmnxPortEthernetV6v1Group=tmnxPortEthernetV6v1Group, tmnxOpticalPortCfgEntry=tmnxOpticalPortCfgEntry, tmnxEqPortDuplexCfgNotCompatible=tmnxEqPortDuplexCfgNotCompatible, TmnxImaGrpState=TmnxImaGrpState, tmnxPortIngNamedPoolPlcy=tmnxPortIngNamedPoolPlcy, tmnxPortNetIngressFwdOutProfOcts=tmnxPortNetIngressFwdOutProfOcts, tmnxPortEgrExpShaperClass2Thresh=tmnxPortEgrExpShaperClass2Thresh, tmnxSonetPathCRC=tmnxSonetPathCRC, tmnxCiscoHDLCDiscardStatInPkts=tmnxCiscoHDLCDiscardStatInPkts, tmnxDS1BERTDuration=tmnxDS1BERTDuration, tmnxPortTypeEntry=tmnxPortTypeEntry, tmnxDS3ChannelLastChangeTime=tmnxDS3ChannelLastChangeTime, tmnxPortCemStatsEgrLBitDrop=tmnxPortCemStatsEgrLBitDrop, TmnxImaGrpClockModes=TmnxImaGrpClockModes, tmnxSonetPathLastChangeTime=tmnxSonetPathLastChangeTime, tmnxSonetPathTable=tmnxSonetPathTable, tmnxDS1Loopback=tmnxDS1Loopback, tmnxOpticalPortTdcmPowerOut=tmnxOpticalPortTdcmPowerOut, tmnxPortNetIngressDroOutProfPkts=tmnxPortNetIngressDroOutProfPkts, tmnxOpticalPortTdcmMeasDisp=tmnxOpticalPortTdcmMeasDisp, tmnxPortTDMGroupV7v0=tmnxPortTDMGroupV7v0, tmnxDDMAux1LowAlarm=tmnxDDMAux1LowAlarm, tmnxBundleImaGrpGammaValue=tmnxBundleImaGrpGammaValue, tmnxMcMlpppBundleGroup=tmnxMcMlpppBundleGroup, tmnxHsmdaGroupV10v0=tmnxHsmdaGroupV10v0, tPortEgrExpShaperCls4StFwdOctsL=tPortEgrExpShaperCls4StFwdOctsL, tmnxPortIngrMdaQos06StatDropPkts=tmnxPortIngrMdaQos06StatDropPkts, tmnxDDMAux2HiWarning=tmnxDDMAux2HiWarning, tmnxPortEthernetV5v0Group=tmnxPortEthernetV5v0Group, tmnxDDMFailedThresholds=tmnxDDMFailedThresholds, tmnxPortIngrMdaQos01StatDropPkts=tmnxPortIngrMdaQos01StatDropPkts, tPortNetEgrQGrpPStFwdOutProfOctL=tPortNetEgrQGrpPStFwdOutProfOctL, tmnxPortEthernetV3v0Group=tmnxPortEthernetV3v0Group, tmnxPortCemStatsEgrSESs=tmnxPortCemStatsEgrSESs, tmnxObjNamedPoolPolicy=tmnxObjNamedPoolPolicy, tmnxMcMlpppStatsEntry=tmnxMcMlpppStatsEntry, tmnxPortEgrExpShaperCl7BrstLimit=tmnxPortEgrExpShaperCl7BrstLimit, tmnxCiscoHDLCDiscardStatOutPkts=tmnxCiscoHDLCDiscardStatOutPkts, tmnxATMObjs=tmnxATMObjs, tPortNetEgrQGrpArbitStatTable=tPortNetEgrQGrpArbitStatTable, tmnxResvCbsPoolThreshGreen=tmnxResvCbsPoolThreshGreen, tmnxPortQStatV7v0Group=tmnxPortQStatV7v0Group, tmnxDS0ChanGroupIdleCycleFlags=tmnxDS0ChanGroupIdleCycleFlags, tPortEgrExpShaperCls6StFwdPktsH=tPortEgrExpShaperCls6StFwdPktsH, tmnxBundleImaGrpSmFeState=tmnxBundleImaGrpSmFeState, tmnxPortNotifySonetPathAlarmReason=tmnxPortNotifySonetPathAlarmReason, tmnxObjAppResvSizeOld=tmnxObjAppResvSizeOld, tmnxPortCemStatsIgrDroppedPkts=tmnxPortCemStatsIgrDroppedPkts, tPortEgrVPStLvlDpdPkt=tPortEgrVPStLvlDpdPkt, tmnxPortEtherDownWhenLoopedState=tmnxPortEtherDownWhenLoopedState, tmnxPortTransceiverModelNumber=tmnxPortTransceiverModelNumber, tmnxDS1Table=tmnxDS1Table, tmnxPortIngQosQStatOffHiPrioOcts=tmnxPortIngQosQStatOffHiPrioOcts, tmnxSonetPathMTU=tmnxSonetPathMTU, tmnxPortComplianceV9v0=tmnxPortComplianceV9v0, tPortNetEgrQGrpArbitStatFwdPktsL=tPortNetEgrQGrpArbitStatFwdPktsL, tmnxPortNotificationGroupV9v4=tmnxPortNotificationGroupV9v4, tmnxEqPortSFPStatusFailure=tmnxEqPortSFPStatusFailure, tPortAccEgrQOverTable=tPortAccEgrQOverTable, tmnxPortSchedOverrideEntry=tmnxPortSchedOverrideEntry, tmnxPortEgrExpShaperTable=tmnxPortEgrExpShaperTable, tmnxHostMatchNotifyIntDestId=tmnxHostMatchNotifyIntDestId, tmnxSonetPathRowStatus=tmnxSonetPathRowStatus, tmnxPortEtherDWLUseBroadcastAddr=tmnxPortEtherDWLUseBroadcastAddr, tmnxBundleImaGrpSmNeState=tmnxBundleImaGrpSmNeState, tmnxMlBundleGroupV4v0=tmnxMlBundleGroupV4v0, tmnxPortDescription=tmnxPortDescription, tmnxPortFCStatsIngDroOutProfOcts=tmnxPortFCStatsIngDroOutProfOcts, tmnxBundleImaGrpLnkActTimer=tmnxBundleImaGrpLnkActTimer, tmnxPortCemStatsEgrMultipleDrop=tmnxPortCemStatsEgrMultipleDrop, tmnxPortDwdmRxDtvDacPercent=tmnxPortDwdmRxDtvDacPercent, tmnxDDMTempLowAlarm=tmnxDDMTempLowAlarm, tPortNetEgrQOverAdminPIRPercent=tPortNetEgrQOverAdminPIRPercent, tmnxPortFCStatsIngFwdInProfPkts=tmnxPortFCStatsIngFwdInProfPkts, tmnx7710PortTDMGroupV5v0=tmnx7710PortTDMGroupV5v0, tmnxDS0ChanGroupLastChangeTime=tmnxDS0ChanGroupLastChangeTime, tPortEgrExpShaperCls1StFwdPkts=tPortEgrExpShaperCls1StFwdPkts, TmnxOpticalAmpCtrlState=TmnxOpticalAmpCtrlState, tPortEgrVPStLvlFwdPktL=tPortEgrVPStLvlFwdPktL, tmnxCiscoHDLCKeepAliveInt=tmnxCiscoHDLCKeepAliveInt, tPortEgrExpShaperCls2StFwdOctsH=tPortEgrExpShaperCls2StFwdOctsH, tmnxEqPortBndlBadEndPtDiscr=tmnxEqPortBndlBadEndPtDiscr, tmnxBundleMemberImaTable=tmnxBundleMemberImaTable, tmnxBundlePeerMRRU=tmnxBundlePeerMRRU, tmnxHsmdaPortSchOvrEntry=tmnxHsmdaPortSchOvrEntry, tPortNetEgrQGrpPStOffInProfPkt=tPortNetEgrQGrpPStOffInProfPkt, tPortEgrExpShaperCls2StMonOvrOH=tPortEgrExpShaperCls2StMonOvrOH, tmnxWaveTrackerEntry=tmnxWaveTrackerEntry, tmnxPortTestGroup=tmnxPortTestGroup, tmnxPortEgrShaperTblLastChanged=tmnxPortEgrShaperTblLastChanged, tPortAccEgrQGrpHMRowStatus=tPortAccEgrQGrpHMRowStatus, tmnxPortCemStatsReportAlarm=tmnxPortCemStatsReportAlarm, tPortNetEgrQGrpInstanceId=tPortNetEgrQGrpInstanceId, tmnxPortTableLastChange=tmnxPortTableLastChange, tPortAccIngQGrpRowStatus=tPortAccIngQGrpRowStatus, tmnxOpticalPortDwdmChannelMin=tmnxOpticalPortDwdmChannelMin, tmnxWaveTrackerPowerCtrlEnable=tmnxWaveTrackerPowerCtrlEnable, tmnxPortNetEgrQFwdOutProfOcts=tmnxPortNetEgrQFwdOutProfOcts, tmnxSonetSectionTraceMode=tmnxSonetSectionTraceMode, tmnxPortInterfaceGroupHandlerIdx=tmnxPortInterfaceGroupHandlerIdx, tmnxPwPortTable=tmnxPwPortTable, tmnxDDMLaneTxBiasCurrent=tmnxDDMLaneTxBiasCurrent, tmnxPortSFPMedia=tmnxPortSFPMedia, tmnxDDMExtCalRxPower2=tmnxDDMExtCalRxPower2, tmnxPortIngrMdaQos15StatDropPkts=tmnxPortIngrMdaQos15StatDropPkts, tmnxHsmdaPortSchOvrClass5Rate=tmnxHsmdaPortSchOvrClass5Rate, tmnxSonetApsAuthKey=tmnxSonetApsAuthKey, tmnxEqPortSFPCorrupted=tmnxEqPortSFPCorrupted, tmnxDDMExtCalTxPowerSlope=tmnxDDMExtCalTxPowerSlope, tmnxPortSchedOverrideLvl7CIR=tmnxPortSchedOverrideLvl7CIR, TmnxPortEtherCrcMonReportStatus=TmnxPortEtherCrcMonReportStatus, tmnxOpticalPortTdcmDispSwpStart=tmnxOpticalPortTdcmDispSwpStart, tPortNetEgrQOverQueue=tPortNetEgrQOverQueue, tmnxPortIngPoolPercentRate=tmnxPortIngPoolPercentRate, tPortEgrExpShaperCls6StFwdPktsL=tPortEgrExpShaperCls6StFwdPktsL, tmnxBundleImaGrpSymmetryMode=tmnxBundleImaGrpSymmetryMode, tmnxSonetMonK2Byte=tmnxSonetMonK2Byte, tmnxPortNetEgressFwdInProfPkts=tmnxPortNetEgressFwdInProfPkts, tmnxBundleProtectedType=tmnxBundleProtectedType, tmnxObjAppSumOfQResvSize=tmnxObjAppSumOfQResvSize, tmnxPortLagId=tmnxPortLagId, tmnxBPGrpAssocActiveBundleID=tmnxBPGrpAssocActiveBundleID, tmnxFRDlcmiRxStatusEnqMsgs=tmnxFRDlcmiRxStatusEnqMsgs, tmnxPortNetEgrQDroInProfOcts=tmnxPortNetEgrQDroInProfOcts, tmnxPortFCStatsEntry=tmnxPortFCStatsEntry, tmnxBundleImaGrpTxOamLablVal=tmnxBundleImaGrpTxOamLablVal, tmnxPortSchedOverrideRowStatus=tmnxPortSchedOverrideRowStatus, tmnxSonetReportAlarm=tmnxSonetReportAlarm, tmnxPortHwMacAddress=tmnxPortHwMacAddress, tPortEgrExpShaperAggStFwdPktsL=tPortEgrExpShaperAggStFwdPktsL, tPortEgrExpShaperCls8StFwdPktsL=tPortEgrExpShaperCls8StFwdPktsL, tmnxPortComp7710V5v0=tmnxPortComp7710V5v0, tPortAccEgrQGrpTable=tPortAccEgrQGrpTable, tmnxPortTestStartTime=tmnxPortTestStartTime, tmnxPortEtherAutoNegotiate=tmnxPortEtherAutoNegotiate, tPortEgrExpShaperCls1StMonOvrOL=tPortEgrExpShaperCls1StMonOvrOL, tPortNetEgrQGrpPStFwdOutProfPkt=tPortNetEgrQGrpPStFwdOutProfPkt, tmnxBundleImaGrpRxIcpCells=tmnxBundleImaGrpRxIcpCells, tPortAccEgrQGrpCollectStats=tPortAccEgrQGrpCollectStats, tmnxDDMLaneTable=tmnxDDMLaneTable, tmnxPortATMVpShaperVpi=tmnxPortATMVpShaperVpi, tmnxOpticalPortTdcmSerialNum=tmnxOpticalPortTdcmSerialNum, tmnxHsmdaGroupV6v0=tmnxHsmdaGroupV6v0, tmnxEqPortEtherInternalAlarm=tmnxEqPortEtherInternalAlarm, tPortNetEgrQGrpArbitStatEntry=tPortNetEgrQGrpArbitStatEntry, tPortEgrExpShaperCls2StMonOvrOL=tPortEgrExpShaperCls2StMonOvrOL, tPortEgrExpShaperCls5StFwdPktsH=tPortEgrExpShaperCls5StFwdPktsH, tmnxSonetPathCollectStats=tmnxSonetPathCollectStats, tmnxPortSFPVendorSerialNum=tmnxPortSFPVendorSerialNum, tmnxPortComp7750V8v0=tmnxPortComp7750V8v0, tPortEgrExpShaperStLstClrdTime=tPortEgrExpShaperStLstClrdTime, tmnxPortIngQosQStatDpdLoPrioPkts=tmnxPortIngQosQStatDpdLoPrioPkts, tPortAccEgrQGrpDescr=tPortAccEgrQGrpDescr, tmnxSonetPathType=tmnxSonetPathType, tmnxCiscoHDLCOperState=tmnxCiscoHDLCOperState, tmnxBundleFragmentThreshold=tmnxBundleFragmentThreshold, tPortEgrExpShaperCls5StMonOvrOL=tPortEgrExpShaperCls5StMonOvrOL, tmnxObjectAppResvCbsAmbrAlrmMax=tmnxObjectAppResvCbsAmbrAlrmMax, tmnxPortHybridIngAccessWeight=tmnxPortHybridIngAccessWeight, tmnxBundleRedDiffDelayAction=tmnxBundleRedDiffDelayAction, tmnxBundleImaGrpLeastDelayLink=tmnxBundleImaGrpLeastDelayLink, tmnxDS3ChannelMDLPfiString=tmnxDS3ChannelMDLPfiString, tmnxEqPortDS3Alarm=tmnxEqPortDS3Alarm, tmnxPortATMVpShaperLastMgmtCh=tmnxPortATMVpShaperLastMgmtCh, tmnxPortEgrShaperRowStatus=tmnxPortEgrShaperRowStatus, tmnxOpticalPortTdcmRtd1Temp=tmnxOpticalPortTdcmRtd1Temp, tPortAccIngQGrpCollectStats=tPortAccIngQGrpCollectStats, tPortEgrVPStLvlFwdPkt=tPortEgrVPStLvlFwdPkt, tmnxPortHybridEgrAccessWeight=tmnxPortHybridEgrAccessWeight, tmnxPortEtherDownWhenLoopedEnabled=tmnxPortEtherDownWhenLoopedEnabled, tmnxDDMLaneRxOpticalPowerType=tmnxDDMLaneRxOpticalPowerType, tmnxPortIngrMdaQos01StatDropOcts=tmnxPortIngrMdaQos01StatDropOcts, TmnxPortEtherCrcMonReportValue=TmnxPortEtherCrcMonReportValue, tmnxPortIngrMdaQos02StatDropPkts=tmnxPortIngrMdaQos02StatDropPkts, tmnxPortNetEgressDroInProfPkts=tmnxPortNetEgressDroInProfPkts, tmnxPortObsoletedV10v0Group=tmnxPortObsoletedV10v0Group, tPortEgrExpShaperCls1StFwdPktsL=tPortEgrExpShaperCls1StFwdPktsL, tmnxMcMlpppStatsEgressPkt=tmnxMcMlpppStatsEgressPkt, tmnxATMIntfCustomBufferMode=tmnxATMIntfCustomBufferMode, tmnxPwPortEncapType=tmnxPwPortEncapType, tmnxBundleNumLinks=tmnxBundleNumLinks, TmnxPortType=TmnxPortType, tmnxDS3ChannelIdleCycleFlags=tmnxDS3ChannelIdleCycleFlags, tmnxDS1BitErrorInsertionRate=tmnxDS1BitErrorInsertionRate, tPortNetEgrQGrpDescr=tPortNetEgrQGrpDescr, tPortNetEgrQGrpPStFwdInProfPktL=tPortNetEgrQGrpPStFwdInProfPktL, tPortEgrExpShaperCls1StMonOvrOH=tPortEgrExpShaperCls1StMonOvrOH, tmnxPortIngrMdaQos00StatDropOcts=tmnxPortIngrMdaQos00StatDropOcts, tmnxFRDlcmiEntry=tmnxFRDlcmiEntry, TmnxOpticalTdcmCtrlState=TmnxOpticalTdcmCtrlState, tmnxPortComp7750V5v0=tmnxPortComp7750V5v0, tPortNetEgrSchedStatName=tPortNetEgrSchedStatName, tmnxBundleImaGrpFeClockMode=tmnxBundleImaGrpFeClockMode, tmnxSonetPathScramble=tmnxSonetPathScramble, tmnxSonetPathOperMTU=tmnxSonetPathOperMTU, tmnxHsmdaPortSchOvrClass5WtInGp=tmnxHsmdaPortSchOvrClass5WtInGp, tmnxHsmdaPortSchOvrGrp2Rate=tmnxHsmdaPortSchOvrGrp2Rate, tmnxBundleParentBundle=tmnxBundleParentBundle, tmnxPortDwdmGroup=tmnxPortDwdmGroup, tmnxPortIngQosQStatOffHiPrioPkts=tmnxPortIngQosQStatOffHiPrioPkts, tmnxPortIngQosQStatDpdHiPrioOcts=tmnxPortIngQosQStatDpdHiPrioOcts, tmnxPortSchedOverrideTable=tmnxPortSchedOverrideTable, tPortEgrExpShaperCls3StMonOvrOH=tPortEgrExpShaperCls3StMonOvrOH, tmnxSonetSuppressLoOrderAlarm=tmnxSonetSuppressLoOrderAlarm, tmnxIpLoadBalancing=tmnxIpLoadBalancing, tmnxPortEgrExpShaperCl3BrstLimit=tmnxPortEgrExpShaperCl3BrstLimit, tmnxDDMLaneRxOpticalPwrHiAlarm=tmnxDDMLaneRxOpticalPwrHiAlarm, tPortEgrExpShaperCls5StFwdPkts=tPortEgrExpShaperCls5StFwdPkts, tmnxPortPhysStateChangeCount=tmnxPortPhysStateChangeCount, tmnxPortNetIngressStatsTable=tmnxPortNetIngressStatsTable, tmnxOpticalPortTdcmAutoDisp=tmnxOpticalPortTdcmAutoDisp, tPortNetEgrQGrpPStOffInProfOct=tPortNetEgrQGrpPStOffInProfOct, tmnxSonetApsHoldTimeLeft=tmnxSonetApsHoldTimeLeft, tmnxDDMRxOpticalPowerHiWarning=tmnxDDMRxOpticalPowerHiWarning, tmnxCiscoHDLCGroup=tmnxCiscoHDLCGroup, tmnxPortFCStatsEgrDroInProfOcts=tmnxPortFCStatsEgrDroInProfOcts, tmnxPortEgrQosQStatFwdOutProfPkts=tmnxPortEgrQosQStatFwdOutProfPkts)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxBundleMlfrAckTimer=tmnxBundleMlfrAckTimer, tmnxEqPortEtherAlarm=tmnxEqPortEtherAlarm, tmnxBundleMemberImaNeTxNumFails=tmnxBundleMemberImaNeTxNumFails, tmnxBundleOperMTU=tmnxBundleOperMTU, tmnxPortEgrExpShaperLastChanged=tmnxPortEgrExpShaperLastChanged, tmnxDDMLaneIdOrModule=tmnxDDMLaneIdOrModule, tPortAccEgrQGrpFrameBaseActg=tPortAccEgrQGrpFrameBaseActg, tmnxPortEtherPkts1519toMax=tmnxPortEtherPkts1519toMax, tmnxPortUpProtocols=tmnxPortUpProtocols, tmnxBundleMemberImaRelDelay=tmnxBundleMemberImaRelDelay, tmnxPortNotifyObjsGroupV6v0=tmnxPortNotifyObjsGroupV6v0, tmnxDS1E1LoopbackStopped=tmnxDS1E1LoopbackStopped, tmnxDS3ChannelEntry=tmnxDS3ChannelEntry, tmnxFRDlcmiN393Dce=tmnxFRDlcmiN393Dce, tPortNetEgrQOverHiPrioOnly=tPortNetEgrQOverHiPrioOnly, tmnxDS3ChannelMDLMonGenString=tmnxDS3ChannelMDLMonGenString, tmnxPortTestEntry=tmnxPortTestEntry, tmnxFrf12IntfTable=tmnxFrf12IntfTable, TmnxDSXClockSource=TmnxDSXClockSource, tmnxFrf12IntfEntry=tmnxFrf12IntfEntry, tmnx7710PortTDMGroupV3v0=tmnx7710PortTDMGroupV3v0, tPortAccIngQOverQueue=tPortAccIngQOverQueue, tPortAccEgrQOverLastChanged=tPortAccEgrQOverLastChanged, tmnxPortNetEgrQDroOutProfPkts=tmnxPortNetEgrQDroOutProfPkts, tmnxObjectType=tmnxObjectType, tmnxDDMSupplyVoltageHiWarning=tmnxDDMSupplyVoltageHiWarning, tmnxQosServiceDegraded=tmnxQosServiceDegraded, tPortNetEgrQGrpArbitStatFwdPktsH=tPortNetEgrQGrpArbitStatFwdPktsH, tmnxPortIngrMdaQos05StatDropPkts=tmnxPortIngrMdaQos05StatDropPkts, tmnxPortSchedOverrideLvl5CIR=tmnxPortSchedOverrideLvl5CIR, tmnxPortSchedOverrideSchedName=tmnxPortSchedOverrideSchedName, tmnxPortSchedOverrideLvl2CIR=tmnxPortSchedOverrideLvl2CIR, tmnxBundleImaGrpNeFails=tmnxBundleImaGrpNeFails, tPortEgrExpShaperCls6StMonOvrOL=tPortEgrExpShaperCls6StMonOvrOL, tmnxPortNetIngressQueueIndex=tmnxPortNetIngressQueueIndex, tmnxDDMExtCalTemperatureOffset=tmnxDDMExtCalTemperatureOffset, tmnxBundleImaGrpTxIcpCells=tmnxBundleImaGrpTxIcpCells, tmnxBundleMlpppMagicNumber=tmnxBundleMlpppMagicNumber, tPortAccIngQOverLastChanged=tPortAccIngQOverLastChanged, tPortEgrExpShaperCls4StMonOvrOct=tPortEgrExpShaperCls4StMonOvrOct, tmnxPortEgrPoolPercentRate=tmnxPortEgrPoolPercentRate, tmnxBundleImaGrpNeClockMode=tmnxBundleImaGrpNeClockMode, tmnxDDMExternallyCalibrated=tmnxDDMExternallyCalibrated, tmnxBPGrpAssocWorkingBundleID=tmnxBPGrpAssocWorkingBundleID, tmnxSonetFraming=tmnxSonetFraming, tmnxBundleMemberImaEntry=tmnxBundleMemberImaEntry, tmnxPortEgrExpShaperRowStatus=tmnxPortEgrExpShaperRowStatus, TmnxDS3Loopback=TmnxDS3Loopback, tmnxPortEgrExpShaperClass7Rate=tmnxPortEgrExpShaperClass7Rate, tPortEgrVPortEntry=tPortEgrVPortEntry, tmnxFrIntfFrf12Mode=tmnxFrIntfFrf12Mode, tmnxPortIngrMdaQos07StatDropOcts=tmnxPortIngrMdaQos07StatDropOcts, tPortEgrExpShaperAggStFwdOctsL=tPortEgrExpShaperAggStFwdOctsL, tmnxPortUnsupportedFunction=tmnxPortUnsupportedFunction, tmnxCiscoHDLCTable=tmnxCiscoHDLCTable, tmnxDDMTemperature=tmnxDDMTemperature, tmnxPortIngrMdaQos11StatDropPkts=tmnxPortIngrMdaQos11StatDropPkts, tmnxBundleUpTime=tmnxBundleUpTime, tmnxPortIngQosQStatOffLoPrioPkts=tmnxPortIngQosQStatOffLoPrioPkts, tPortEgrExpShaperCls2StFwdPkts=tPortEgrExpShaperCls2StFwdPkts, tPortEgrExpShaperCls8StFwdPkts=tPortEgrExpShaperCls8StFwdPkts, tPortAccIngQOverHiPrioOnly=tPortAccIngQOverHiPrioOnly, tmnxFrIntfLastChanged=tmnxFrIntfLastChanged, tmnxPortSchedOverrideLvl8CIR=tmnxPortSchedOverrideLvl8CIR, tmnxPortComp7750=tmnxPortComp7750, tmnxPortConnectTypeDescription=tmnxPortConnectTypeDescription, tmnxPortConformance=tmnxPortConformance, tmnxPortSchedOverrideLvl3CIR=tmnxPortSchedOverrideLvl3CIR, tmnxFrf12IntfLastChanged=tmnxFrf12IntfLastChanged, tPortNetEgrQGrpPStDrpInProfOct=tPortNetEgrQGrpPStDrpInProfOct, tPortAccIngQOverEntry=tPortAccIngQOverEntry, tmnxDDMTxBiasCurrentHiAlarm=tmnxDDMTxBiasCurrentHiAlarm, tPortEgrExpShaperCls4StFwdOctsH=tPortEgrExpShaperCls4StFwdOctsH, tPortNetEgrQGrpPStOffInProfOctL=tPortNetEgrQGrpPStOffInProfOctL, tmnxPortNotifyBerSfTca=tmnxPortNotifyBerSfTca, tmnxPortTransceiverType=tmnxPortTransceiverType, tmnxHsmdaPortSchOvrClass8WtInGp=tmnxHsmdaPortSchOvrClass8WtInGp, tPortAccEgrSchedStatFwdOcts=tPortAccEgrSchedStatFwdOcts, tmnxPortIsLeaf=tmnxPortIsLeaf, tmnxDDMExtCalRxPower4=tmnxDDMExtCalRxPower4, tmnxPortIngQosQStatQueueId=tmnxPortIngQosQStatQueueId, tPortNetEgrQGrpPStDrpOutProfOctH=tPortNetEgrQGrpPStDrpOutProfOctH, tmnxBundleMemberActive=tmnxBundleMemberActive, tPortEgrExpShaperCls3StMonOvrOL=tPortEgrExpShaperCls3StMonOvrOL, tmnxPortPlcyEgrPortSchedPlcy=tmnxPortPlcyEgrPortSchedPlcy, tmnxPortEgrExpShaperClass6Thresh=tmnxPortEgrExpShaperClass6Thresh, tmnxPortComp7710V3v0=tmnxPortComp7710V3v0, tmnxPortEtherCrcAlarmReason=tmnxPortEtherCrcAlarmReason, tPortEgrVPortHostMatchTable=tPortEgrVPortHostMatchTable, tmnxPortFCStatsIndex=tmnxPortFCStatsIndex, tmnxDS1InRemoteLoop=tmnxDS1InRemoteLoop, tmnxPortComp7710V6v1=tmnxPortComp7710V6v1, tmnxPortNetEgressFwdInProfOcts=tmnxPortNetEgressFwdInProfOcts, tmnxPortIngQosQStatDpdLoPrioOcts=tmnxPortIngQosQStatDpdLoPrioOcts, tPortEgrVPortHMTableLastChgd=tPortEgrVPortHMTableLastChgd, tmnxDS1ReportAlarmStatus=tmnxDS1ReportAlarmStatus, tmnxDDMAux2LowWarning=tmnxDDMAux2LowWarning, tmnxPortFCStatsIngFwdOutProfPkts=tmnxPortFCStatsIngFwdOutProfPkts, tPortEgrVPortName=tPortEgrVPortName, tmnxPortFRGroup=tmnxPortFRGroup, tmnxPortNetEgressFwdOutProfPkts=tmnxPortNetEgressFwdOutProfPkts, tmnxBundleMemberImaNeRxFailState=tmnxBundleMemberImaNeRxFailState, tmnxPortFCStatsIngFwdOutProfOcts=tmnxPortFCStatsIngFwdOutProfOcts, tmnxDDMTxOutputPowerHiWarning=tmnxDDMTxOutputPowerHiWarning, TmnxDigitalDiagnosticFailureBits=TmnxDigitalDiagnosticFailureBits, tmnxATMIntfTable=tmnxATMIntfTable, tmnxDS3ChannelClockMasterPortId=tmnxDS3ChannelClockMasterPortId, tmnxOpticalPortAmpPowerIn=tmnxOpticalPortAmpPowerIn, tmnxMcMfrBundleGroup=tmnxMcMfrBundleGroup, tmnxDS0ChanGroupPayloadPattern=tmnxDS0ChanGroupPayloadPattern, tmnxBundleImaGrpVersion=tmnxBundleImaGrpVersion, tmnxPortNotifyError=tmnxPortNotifyError, tmnxPortEgrExpShaperClass5Thresh=tmnxPortEgrExpShaperClass5Thresh, tmnxPortATMVpShaperEntry=tmnxPortATMVpShaperEntry, tPortEgrExpShaperCls5StFwdOctsH=tPortEgrExpShaperCls5StFwdOctsH, tPortNetEgrQGrpPStFwdInProfPkt=tPortNetEgrQGrpPStFwdInProfPkt, tPortAccEgrQGrpHMTableLastChgd=tPortAccEgrQGrpHMTableLastChgd, tmnxOpticalPortTdcmDispSwpEnd=tmnxOpticalPortTdcmDispSwpEnd, tmnxWaveTrackerTrailName=tmnxWaveTrackerTrailName, tmnxPortComp7750V7v0=tmnxPortComp7750V7v0, tmnxPortIngQosQStatUncolOctsOff=tmnxPortIngQosQStatUncolOctsOff, tPortEgrExpShaperCls4StFwdOcts=tPortEgrExpShaperCls4StFwdOcts, tmnxCiscoHDLCEntry=tmnxCiscoHDLCEntry, tmnxDDMLaneGroupV10v0=tmnxDDMLaneGroupV10v0, tPortNetEgrQGrpPStFwdOutProfOct=tPortNetEgrQGrpPStFwdOutProfOct, tmnxDDMTxOutputPower=tmnxDDMTxOutputPower, tmnxPortHoldTimeDown=tmnxPortHoldTimeDown, tmnxPortNetEgrQFwdInProfPkts=tmnxPortNetEgrQFwdInProfPkts, tmnxHsmdaPortSchOvrClass2WtInGp=tmnxHsmdaPortSchOvrClass2WtInGp, tmnxDS0ChanGroupAcctPolicyId=tmnxDS0ChanGroupAcctPolicyId, tPortAccIngQGrpAcctgPolId=tPortAccIngQGrpAcctgPolId, tmnxPortEgrQosQStatFwdInProfPkts=tmnxPortEgrQosQStatFwdInProfPkts, tPortEgrVPStLvl=tPortEgrVPStLvl, tmnxDDMLaneTxOutputPowerLowWarn=tmnxDDMLaneTxOutputPowerLowWarn, tmnxResvCbsPoolThreshAmber=tmnxResvCbsPoolThreshAmber, tmnxPortEgrExpShaperThresh=tmnxPortEgrExpShaperThresh, tPortEgrVPortAggStatsEntry=tPortEgrVPortAggStatsEntry, tmnxPortTransceiverLaserWaveLen=tmnxPortTransceiverLaserWaveLen, tmnxPortEgrExpShaperRate=tmnxPortEgrExpShaperRate, tPortNetEgrQGrpCollectStats=tPortNetEgrQGrpCollectStats, tmnxSonetPathEntry=tmnxSonetPathEntry, tPortNetEgrQOverLastChanged=tPortNetEgrQOverLastChanged, tmnxBundleLFI=tmnxBundleLFI, tPortAccEgrQOverPIRAdaptation=tPortAccEgrQOverPIRAdaptation, TmnxPortClass=TmnxPortClass, tmnxOpticalPortTdcmCfgRxChan=tmnxOpticalPortTdcmCfgRxChan, tmnxPortEgrQosQStatDpdOutProfPkts=tmnxPortEgrQosQStatDpdOutProfPkts, tmnxObjectAppPool=tmnxObjectAppPool, tmnxDS1IdleCycleFlags=tmnxDS1IdleCycleFlags, tmnxPortEgrExpShaperClass3Thresh=tmnxPortEgrExpShaperClass3Thresh, tmnxPortNotifyEtherCrcMultiplier=tmnxPortNotifyEtherCrcMultiplier, tPortEgrVPortTableLastChgd=tPortEgrVPortTableLastChgd, tmnxPortVPortV9v0Group=tmnxPortVPortV9v0Group, tmnxFRDlcmiMode=tmnxFRDlcmiMode, tmnxPortNetEgrQStatTable=tmnxPortNetEgrQStatTable, tPortAccIngQOverCIRAdaptation=tPortAccIngQOverCIRAdaptation, tmnxOpticalPortDwdmChannelMax=tmnxOpticalPortDwdmChannelMax, tmnxPortCemStatsEgrMissingPkts=tmnxPortCemStatsEgrMissingPkts, tmnxHsmdaPortSchOvrClass1WtInGp=tmnxHsmdaPortSchOvrClass1WtInGp, tmnxEqPortEtherLoopDetected=tmnxEqPortEtherLoopDetected, tmnxBundleMemberImaOifAnomalies=tmnxBundleMemberImaOifAnomalies, tmnxHsmdaPortSchOvrRowStatus=tmnxHsmdaPortSchOvrRowStatus, tPortAccIngQOverTable=tPortAccIngQOverTable, tPortEgrExpShaperAggStFwdOcts=tPortEgrExpShaperAggStFwdOcts, tmnxPortEtherSSMRxEsmc=tmnxPortEtherSSMRxEsmc, tPortEgrVPStLvlFwdOctH=tPortEgrVPStLvlFwdOctH, tPortAccIngSchedStatFwdPkts=tPortAccIngSchedStatFwdPkts, tmnxPortNetIngressFwdOutProfPkts=tmnxPortNetIngressFwdOutProfPkts, tPortNetEgrQGrpArbitStatFwdOctsL=tPortNetEgrQGrpArbitStatFwdOctsL, tmnxDDMLaneRxOpticalPwrLowWarn=tmnxDDMLaneRxOpticalPwrLowWarn, tmnxDDMTxOutputPowerLowAlarm=tmnxDDMTxOutputPowerLowAlarm, tPortEgrVPStLvlDpdOctL=tPortEgrVPStLvlDpdOctL, tmnxPortSchedOverrideFlags=tmnxPortSchedOverrideFlags, tmnxBundleMlfrIngQoSProfId=tmnxBundleMlfrIngQoSProfId, tmnxPortCemStatsEgrMisOrderDrop=tmnxPortCemStatsEgrMisOrderDrop, tmnxPortNotifyDescription=tmnxPortNotifyDescription, tmnxDDMLaneEntry=tmnxDDMLaneEntry, tmnxBundleMlfrTable=tmnxBundleMlfrTable, tPortAccEgrQGrpLastChgd=tPortAccEgrQGrpLastChgd, tmnxBundleMemberImaFeRxFailState=tmnxBundleMemberImaFeRxFailState, tmnxDS3ChannelScramble=tmnxDS3ChannelScramble, tmnxBundleMlpppTable=tmnxBundleMlpppTable, tmnxPortEntry=tmnxPortEntry, tmnxDS3Buildout=tmnxDS3Buildout, tmnxPortFCStatsEgrFwdInProfOcts=tmnxPortFCStatsEgrFwdInProfOcts, tmnxDS3ChannelChannelized=tmnxDS3ChannelChannelized, tPortAccEgrQGrpHMIntDestId=tPortAccEgrQGrpHMIntDestId, tmnxPortATMGroupV9v0=tmnxPortATMGroupV9v0, tmnxSonetHoldTimeUp=tmnxSonetHoldTimeUp, tmnxObjType=tmnxObjType, tmnxDDMAux2=tmnxDDMAux2, tmnxPortNotificationGroupV5v0=tmnxPortNotificationGroupV5v0, tmnxObjAppResvCbsOld=tmnxObjAppResvCbsOld, tmnxPortToChannelTable=tmnxPortToChannelTable, tmnxEqOobPortFailure=tmnxEqOobPortFailure, tmnxPortIngQosQStatFwdInProfPkts=tmnxPortIngQosQStatFwdInProfPkts, tmnxPortSchedOverrideLvl1CIR=tmnxPortSchedOverrideLvl1CIR, tmnxDS3LastChangeTime=tmnxDS3LastChangeTime, tmnxPortNumChannels=tmnxPortNumChannels, tmnxPortEgrExpShaperName=tmnxPortEgrExpShaperName, tmnxDDMAux1=tmnxDDMAux1, tmnxDDMExtCalTemperatureSlope=tmnxDDMExtCalTemperatureSlope, tmnxMlBundleGroupV5v0=tmnxMlBundleGroupV5v0, tPortAccEgrQOverQueue=tPortAccEgrQOverQueue, tPortAccEgrSchedStatTable=tPortAccEgrSchedStatTable, tmnxEqDigitalDiagMonitorFailure=tmnxEqDigitalDiagMonitorFailure, tmnxPortEgrVPortStatsV9v0Group=tmnxPortEgrVPortStatsV9v0Group, tmnxHsmdaPortSchOvrClass3Rate=tmnxHsmdaPortSchOvrClass3Rate, tPortEgrExpShaperStatsTable=tPortEgrExpShaperStatsTable, tmnxBundleMemberImaFeRxNumFails=tmnxBundleMemberImaFeRxNumFails, tPortAccIngSchedStatFwdOctsLo=tPortAccIngSchedStatFwdOctsLo, tmnxPortNetIngressDroInProfPkts=tmnxPortNetIngressDroInProfPkts, tmnxPortEtherEgressRate=tmnxPortEtherEgressRate, tmnxBundleImaGrpRxRefLnk=tmnxBundleImaGrpRxRefLnk, tmnxPortSSMRxQualityLevel=tmnxPortSSMRxQualityLevel, tPortNetEgrQGrpArbitStatName=tPortNetEgrQGrpArbitStatName, tmnxPortNotifyBerSdTca=tmnxPortNotifyBerSdTca, tmnxDS3ChannelBERTOperStatus=tmnxDS3ChannelBERTOperStatus, tmnxPortIngrMdaQos11StatDropOcts=tmnxPortIngrMdaQos11StatDropOcts, tmnxBundleMemberImaFeTxState=tmnxBundleMemberImaFeTxState, tmnxDS3ChannelReportAlarm=tmnxDS3ChannelReportAlarm, tmnxBundleRowStatus=tmnxBundleRowStatus, tPortNetEgrQGrpPStUncolOctOffH=tPortNetEgrQGrpPStUncolOctOffH, tmnxPortSFPVendorPartNum=tmnxPortSFPVendorPartNum, tmnxPortEgrExpShaperClass4Thresh=tmnxPortEgrExpShaperClass4Thresh, tmnxBundleImaGrpDiffDelayMaxObs=tmnxBundleImaGrpDiffDelayMaxObs, tmnxSonetLoopback=tmnxSonetLoopback, tmnxPortEtherReportAlarmStatus=tmnxPortEtherReportAlarmStatus, tmnxDS3ChannelMDLMonPortString=tmnxDS3ChannelMDLMonPortString, tmnxPortFCStatsIngFwdInProfOcts=tmnxPortFCStatsIngFwdInProfOcts, tmnxPortFCStatsEgrFwdOutProfOcts=tmnxPortFCStatsEgrFwdOutProfOcts, tmnxPortEtherCrcMonSdTMultiplier=tmnxPortEtherCrcMonSdTMultiplier, tmnxPortNotifyObjsGroupR2r1=tmnxPortNotifyObjsGroupR2r1, tPortNetEgrQGrpPStOffInProfPktL=tPortNetEgrQGrpPStOffInProfPktL, tmnxPortBundleNumber=tmnxPortBundleNumber, tmnxEqPortEtherCrcAlarm=tmnxEqPortEtherCrcAlarm, tmnxBundleMemberImaNeTxUnuseSecs=tmnxBundleMemberImaNeTxUnuseSecs, tmnxSonetPathC2Byte=tmnxSonetPathC2Byte, tmnxPortLastClearedTime=tmnxPortLastClearedTime, tmnxObjectAppResvCbs=tmnxObjectAppResvCbs, tPortEgrExpShaperCls6StFwdPkts=tPortEgrExpShaperCls6StFwdPkts, tmnxWaveTrackerMinAttainablePwr=tmnxWaveTrackerMinAttainablePwr, tmnxOpticalPortTdcmModuleTemp=tmnxOpticalPortTdcmModuleTemp, tmnxDDMAux1LowWarning=tmnxDDMAux1LowWarning, tmnxMcMlpppStatsIngressErrPkt=tmnxMcMlpppStatsIngressErrPkt, tPortNetEgrQGrpPStFwdOutProfOctH=tPortNetEgrQGrpPStFwdOutProfOctH, tPortNetEgrQGrpTable=tPortNetEgrQGrpTable, tmnxChannelIdxString=tmnxChannelIdxString, tmnxPortCemStatsEgrDroppedPkts=tmnxPortCemStatsEgrDroppedPkts, tmnxPortPlcyObjs=tmnxPortPlcyObjs, tmnxSonetTxDus=tmnxSonetTxDus, tmnxBundleMemberImaFeSevErrSecs=tmnxBundleMemberImaFeSevErrSecs, tmnxPortNetEgressDroOutProfPkts=tmnxPortNetEgressDroOutProfPkts, tmnxBundleMlfrEgrQoSProfId=tmnxBundleMlfrEgrQoSProfId)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxPortEgrQosQStatFwdOutProfOcts=tmnxPortEgrQosQStatFwdOutProfOcts, tPortEgrExpShaperCls3StFwdOcts=tPortEgrExpShaperCls3StFwdOcts, tPortNetEgrQGrpArbitStatFwdOcts=tPortNetEgrQGrpArbitStatFwdOcts, tmnxDDMLaneTempLowAlarm=tmnxDDMLaneTempLowAlarm, tmnxPortClass=tmnxPortClass, TmnxPortEncapType=TmnxPortEncapType, tmnxPortEgrQosQStatDpdInProfOcts=tmnxPortEgrQosQStatDpdInProfOcts, tmnxPortIngQosQStatEntry=tmnxPortIngQosQStatEntry, tmnxDDMSupplyVoltageLowWarning=tmnxDDMSupplyVoltageLowWarning, tPortAccEgrQOverEntry=tPortAccEgrQOverEntry, tmnxPortPlcyName=tmnxPortPlcyName, tmnxWaveTrackerAlarmState=tmnxWaveTrackerAlarmState, tPortNetEgrQGrpPStOffInProfOctH=tPortNetEgrQGrpPStOffInProfOctH, tPortAccIngQGrpDescr=tPortAccIngQGrpDescr, tmnxDS1RowStatus=tmnxDS1RowStatus, tmnxPortIngrMdaQos10StatDropPkts=tmnxPortIngrMdaQos10StatDropPkts, tPortEgrExpShaperCls5StMonOvrOH=tPortEgrExpShaperCls5StMonOvrOH, tmnxFRDlcmiTable=tmnxFRDlcmiTable, tmnxPortEthernetV7v0Group=tmnxPortEthernetV7v0Group, tmnxBundleImaGrpBetaValue=tmnxBundleImaGrpBetaValue, tmnxPortATMVpShaperRowStatus=tmnxPortATMVpShaperRowStatus, tmnxDDMLaneTxBiasCurrentHiAlarm=tmnxDDMLaneTxBiasCurrentHiAlarm, tmnxPortComp7710V8v0=tmnxPortComp7710V8v0, tPortNetEgrQGrpPStOffOutProfPkt=tPortNetEgrQGrpPStOffOutProfPkt, tmnxPortFCStatsIngDroInProfOcts=tmnxPortFCStatsIngDroInProfOcts, tPortNetEgrQGrpPStFwdInProfOctL=tPortNetEgrQGrpPStFwdInProfOctL, tmnxDS1InvertData=tmnxDS1InvertData, tmnxPortEgrExpShaperClass5Rate=tmnxPortEgrExpShaperClass5Rate, tPortEgrExpShaperCls4StMonOvrOH=tPortEgrExpShaperCls4StMonOvrOH, tmnxPortGroupV4v0=tmnxPortGroupV4v0, tmnxDDMTempLowWarning=tmnxDDMTempLowWarning, tmnxFrf12IntfFragmentThreshold=tmnxFrf12IntfFragmentThreshold, tmnxBundleImaGrpRxId=tmnxBundleImaGrpRxId, tmnxPortEgrQosQStatEntry=tmnxPortEgrQosQStatEntry, tmnxBundleMemberImaRxLid=tmnxBundleMemberImaRxLid, tmnxPortFCStatsEgrFwdOutProfPkts=tmnxPortFCStatsEgrFwdOutProfPkts, tmnxFrIntfLinkId=tmnxFrIntfLinkId, tmnxPortCemStatsEgrForwardedPkts=tmnxPortCemStatsEgrForwardedPkts, tmnxDS0ChanGroupBerSfLinkDown=tmnxDS0ChanGroupBerSfLinkDown, tmnxPortReasonDownFlags=tmnxPortReasonDownFlags, tmnxBundleMemberImaFeTxNumFails=tmnxBundleMemberImaFeTxNumFails, tmnxChannelPortID=tmnxChannelPortID, tmnxPortPlcyTable=tmnxPortPlcyTable, TmnxPortState=TmnxPortState, tmnxPortTypeName=tmnxPortTypeName, tmnxEqPortEtherCrcAlarmClear=tmnxEqPortEtherCrcAlarmClear, tmnxPortFCStatsEgrFwdInProfPkts=tmnxPortFCStatsEgrFwdInProfPkts, tmnxDDMTxBiasCurrentLowWarning=tmnxDDMTxBiasCurrentLowWarning, tmnxDDMRxOpticalPower=tmnxDDMRxOpticalPower, tmnxPortEtherQinqEtype=tmnxPortEtherQinqEtype, tmnxBundleMemberImaViolations=tmnxBundleMemberImaViolations, tmnxPortEtherDownWhenLoopedKeepAlive=tmnxPortEtherDownWhenLoopedKeepAlive, tmnxPortEgrExpShaperCl4BrstLimit=tmnxPortEgrExpShaperCl4BrstLimit, tmnxPortEtherEntry=tmnxPortEtherEntry, tmnxPortIngrMdaQos15StatDropOcts=tmnxPortIngrMdaQos15StatDropOcts, tmnxSonetReportAlarmStatus=tmnxSonetReportAlarmStatus, tmnxDDMLaneFailedThresholds=tmnxDDMLaneFailedThresholds, tmnxOpticalPortTdcmPowerIn=tmnxOpticalPortTdcmPowerIn, tmnxPortATMVpShaperTable=tmnxPortATMVpShaperTable, tPortEgrVPortTable=tPortEgrVPortTable, tmnxPortATMGroupV7v0=tmnxPortATMGroupV7v0, tmnxEqPortWrongSFP=tmnxEqPortWrongSFP, tPortNetEgrQGrpTableLastChgd=tPortNetEgrQGrpTableLastChgd, tmnxHsmdaPortSchOvrTblLastChngd=tmnxHsmdaPortSchOvrTblLastChngd, tmnxObjectAppRedAlrmThresh=tmnxObjectAppRedAlrmThresh, tPortEgrExpShaperCls3StMonOvrOct=tPortEgrExpShaperCls3StMonOvrOct, tmnxBundleMlfrHelloTimer=tmnxBundleMlfrHelloTimer, tPortNetEgrSchedStatFwdPktsLo=tPortNetEgrSchedStatFwdPktsLo, tmnxBundleImaGrpLostRxIcpCells=tmnxBundleImaGrpLostRxIcpCells, TmnxImaLnkState=TmnxImaLnkState, tPortEgrExpShaperCls3StFwdOctsL=tPortEgrExpShaperCls3StFwdOctsL, tPortEgrExpShaperCls2StFwdPktsH=tPortEgrExpShaperCls2StFwdPktsH, tmnxEqPortSonetPathAlarmClear=tmnxEqPortSonetPathAlarmClear, tmnxWaveTrackerMeasuredPower=tmnxWaveTrackerMeasuredPower, tmnxDS1PortLineLength=tmnxDS1PortLineLength, tPortNetEgrQGrpName=tPortNetEgrQGrpName, tmnxDS3ChannelReportAlarmStatus=tmnxDS3ChannelReportAlarmStatus, tmnxPortSchedOverrideLvl4PIR=tmnxPortSchedOverrideLvl4PIR, TmnxPortEtherReportStatus=TmnxPortEtherReportStatus, tmnxPortCemStatsIgrForwardedPkts=tmnxPortCemStatsIgrForwardedPkts, tmnxPortDwdmLaserChannel=tmnxPortDwdmLaserChannel, tPortEgrVPortAggStatsTable=tPortEgrVPortAggStatsTable, tPortAccIngSchedStatTable=tPortAccIngSchedStatTable, tPortNetEgrQGrpPStFwdInProfPktH=tPortNetEgrQGrpPStFwdInProfPktH, tmnxPortEgrExpShaperCl6BrstLimit=tmnxPortEgrExpShaperCl6BrstLimit, tmnxPortEgrExpShaperClass1Rate=tmnxPortEgrExpShaperClass1Rate, tmnxDS3ChannelBERTTotalBits=tmnxDS3ChannelBERTTotalBits, tmnxBundleMlpppStatelessApsSwo=tmnxBundleMlpppStatelessApsSwo, TmnxPortConnectorType=TmnxPortConnectorType, tmnxDS3Type=tmnxDS3Type, tmnxPortEtherCollectStats=tmnxPortEtherCollectStats, tmnxCiscoHDLCDownCount=tmnxCiscoHDLCDownCount, tmnxDS1BERTErrors=tmnxDS1BERTErrors, tmnxBundleImaGrpAvailRxCR=tmnxBundleImaGrpAvailRxCR, TmnxDs0ChannelList=TmnxDs0ChannelList, tmnxPortEtherObsoleteV7v0Group=tmnxPortEtherObsoleteV7v0Group, tPortEgrExpShaperCls8StFwdOctsL=tPortEgrExpShaperCls8StFwdOctsL, TmnxDS1Loopback=TmnxDS1Loopback, tmnxHsmdaPortSchOvrGrp1Rate=tmnxHsmdaPortSchOvrGrp1Rate, tmnxEqPortWaveTrackerAlarm=tmnxEqPortWaveTrackerAlarm, TmnxOpticalAmpAlarm=TmnxOpticalAmpAlarm, tmnxPortWaveTrackerCapable=tmnxPortWaveTrackerCapable, tPortEgrExpShaperCls4StFwdPkts=tPortEgrExpShaperCls4StFwdPkts, tPortAccEgrSchedStatFwdOctsLo=tPortAccEgrSchedStatFwdOctsLo, tmnxObjAppPool=tmnxObjAppPool, tmnxDS1BERTTotalBits=tmnxDS1BERTTotalBits, tmnxPortConnectTypeEntry=tmnxPortConnectTypeEntry, tmnxBundleMemberDownReason=tmnxBundleMemberDownReason, tPortAccEgrQOverTableLastChgd=tPortAccEgrQOverTableLastChgd, tmnxDDMRxOpticalPowerHiAlarm=tmnxDDMRxOpticalPowerHiAlarm, tmnxBundleMemberImaNeRxNumFails=tmnxBundleMemberImaNeRxNumFails, tmnxPortTransceiverDiagCapable=tmnxPortTransceiverDiagCapable, tPortNetEgrQGrpPStUncolPktOff=tPortNetEgrQGrpPStUncolPktOff, tmnxPortNetIngressDroOutProfOcts=tmnxPortNetIngressDroOutProfOcts, tmnxSonetApsNeighborAddr=tmnxSonetApsNeighborAddr, tPortEgrVPortAggRateLimit=tPortEgrVPortAggRateLimit, tmnxPortEgrQosQStatDpdOutProfOcts=tmnxPortEgrQosQStatDpdOutProfOcts, tmnxDS1PortEntry=tmnxDS1PortEntry, tmnxMlImaBundleGroup=tmnxMlImaBundleGroup, TmnxPortEtherReportValue=TmnxPortEtherReportValue, tPortNetEgrQGrpPStOffOutProfPktH=tPortNetEgrQGrpPStOffOutProfPktH, tPortEgrExpShaperAggStFwdPkts=tPortEgrExpShaperAggStFwdPkts, tPortAccEgrQOverCIRAdaptation=tPortAccEgrQOverCIRAdaptation, tmnxSonetApsAdminStatus=tmnxSonetApsAdminStatus, tPortAccEgrSchedStatName=tPortAccEgrSchedStatName, tmnxPortFCStatsEgrDroOutProfPkts=tmnxPortFCStatsEgrDroOutProfPkts, tmnxPortCemStatsEgrESs=tmnxPortCemStatsEgrESs, tPortNetEgrQGrpPStDrpInProfPktH=tPortNetEgrQGrpPStDrpInProfPktH, tmnxBundleMemberMlfrLoopback=tmnxBundleMemberMlfrLoopback, tmnxPortV3v0Group=tmnxPortV3v0Group, tmnxPortEtherOperDuplex=tmnxPortEtherOperDuplex, tmnxFRDlcmiT392Dce=tmnxFRDlcmiT392Dce, tmnxBundleImaGrpLnkDeactTimer=tmnxBundleImaGrpLnkDeactTimer, tmnxPortEgrQosQStatDpdInProfPkts=tmnxPortEgrQosQStatDpdInProfPkts, tmnxBundleMemberImaLstRxIcpCells=tmnxBundleMemberImaLstRxIcpCells, tmnxOpticalPortTdcmRtd4Temp=tmnxOpticalPortTdcmRtd4Temp, tmnxEqPortOpticalAmpAlarm=tmnxEqPortOpticalAmpAlarm, tmnxPortComp7750V6v1=tmnxPortComp7750V6v1, tmnxPortGroups=tmnxPortGroups, tmnxOpticalPortTdcmPresRxChan=tmnxOpticalPortTdcmPresRxChan, tmnxBundleOperMRRU=tmnxBundleOperMRRU, tmnxPortNumAlarms=tmnxPortNumAlarms, tmnxPortEtherReasonDownFlags=tmnxPortEtherReasonDownFlags, tmnxPortEtherMTU=tmnxPortEtherMTU, tmnxSonetAps=tmnxSonetAps, tPortEgrVPortHMIntDestId=tPortEgrVPortHMIntDestId, tmnxPortComp7450V7v0=tmnxPortComp7450V7v0, tmnxOpticalPortCfgTable=tmnxOpticalPortCfgTable, tPortNetEgrQGrpPStOffOutProfOctL=tPortNetEgrQGrpPStOffOutProfOctL, tmnxOpticalPortTdcmCtrlMode=tmnxOpticalPortTdcmCtrlMode, tmnxPortNotifyObjsGroupV7v0=tmnxPortNotifyObjsGroupV7v0, tmnxPortIngrMdaQosStatEntry=tmnxPortIngrMdaQosStatEntry, tmnxBundleMinimumLinks=tmnxBundleMinimumLinks, tmnxObjMdaId=tmnxObjMdaId, tPortNetEgrQGrpPStDrpOutProfPktL=tPortNetEgrQGrpPStDrpOutProfPktL, tmnxDS0ChanGroupCollectStats=tmnxDS0ChanGroupCollectStats, tPortNetEgrQGrpPStFwdOutProfPktH=tPortNetEgrQGrpPStFwdOutProfPktH, tmnxEqPortSFPInserted=tmnxEqPortSFPInserted, tmnxHsmdaPortSchOvrClass3WtInGp=tmnxHsmdaPortSchOvrClass3WtInGp, tPortNetEgrSchedStatEntry=tPortNetEgrSchedStatEntry, tmnxPortOperStatus=tmnxPortOperStatus, tmnxHostMatchNotifySubIdent=tmnxHostMatchNotifySubIdent, tmnxPortIngrMdaQos10StatDropOcts=tmnxPortIngrMdaQos10StatDropOcts, tmnxDS0ChanGroupMTU=tmnxDS0ChanGroupMTU, tmnxBundleImaGrpErrorIcpCells=tmnxBundleImaGrpErrorIcpCells, TmnxDSXLoopback=TmnxDSXLoopback, tPortAccEgrQOverAdminCIRPercent=tPortAccEgrQOverAdminCIRPercent, tPortEgrExpShaperCls7StFwdPktsL=tPortEgrExpShaperCls7StFwdPktsL, tPortEgrExpShaperCls5StFwdOctsL=tPortEgrExpShaperCls5StFwdOctsL, tPortEgrExpShaperStatsHLEntry=tPortEgrExpShaperStatsHLEntry, tmnxBundleImaGrpTxId=tmnxBundleImaGrpTxId, tPortNetEgrQGrpPStUncolOctOffL=tPortNetEgrQGrpPStUncolOctOffL, tmnxPortDDMEventSuppression=tmnxPortDDMEventSuppression, tmnxPortComp7450V4v0=tmnxPortComp7450V4v0, tmnxPortMode=tmnxPortMode, tmnxPortHoldTimeUnits=tmnxPortHoldTimeUnits, tmnxPortNetEgressDroOutProfOcts=tmnxPortNetEgressDroOutProfOcts, tmnxSonetPathJ1String=tmnxSonetPathJ1String, tmnxPortIngQosQStatFwdInProfOcts=tmnxPortIngQosQStatFwdInProfOcts, tPortAccEgrQOverAdminPIR=tPortAccEgrQOverAdminPIR, TmnxOpticalDwdmChannel=TmnxOpticalDwdmChannel, tPortNetEgrQOverAdminCIRPercent=tPortNetEgrQOverAdminCIRPercent, tmnxPortQObsoleteV8v0Group=tmnxPortQObsoleteV8v0Group, tmnxPortCemStatsTable=tmnxPortCemStatsTable, tPortNetEgrQOverTable=tPortNetEgrQOverTable, tmnxPortEtherDot1qEtype=tmnxPortEtherDot1qEtype, tmnxDS3ChannelMDLMessageType=tmnxDS3ChannelMDLMessageType, tPortEgrExpShaperCls1StFwdPktsH=tPortEgrExpShaperCls1StFwdPktsH, tmnxEqPortSonetAlarmClear=tmnxEqPortSonetAlarmClear, tmnxBundleImaGrpTestState=tmnxBundleImaGrpTestState, tPortEgrVPortLastChanged=tPortEgrVPortLastChanged, tPortEgrExpShaperAggStFwdPktsH=tPortEgrExpShaperAggStFwdPktsH, tmnxDS3ChannelInFEACLoop=tmnxDS3ChannelInFEACLoop, tmnxPortNotificationV9v0Group=tmnxPortNotificationV9v0Group, tPortAccEgrQGrpHostMatchTable=tPortAccEgrQGrpHostMatchTable, tmnxPortIngrMdaQos04StatDropOcts=tmnxPortIngrMdaQos04StatDropOcts, tmnxCiscoHDLCStatsTable=tmnxCiscoHDLCStatsTable, tmnxPortTypeDescription=tmnxPortTypeDescription, tmnxBundleYellowDiffDelay=tmnxBundleYellowDiffDelay, tmnxDS1PortDbGain=tmnxDS1PortDbGain, tmnxDS3ChannelMDLGenString=tmnxDS3ChannelMDLGenString, tmnxPortDwdmRxDtvAdjustEnable=tmnxPortDwdmRxDtvAdjustEnable, tPortEgrVPortDescr=tPortEgrVPortDescr, tmnxPortMIBModule=tmnxPortMIBModule, tmnxObjectAppType=tmnxObjectAppType, TmnxDSXClockSyncState=TmnxDSXClockSyncState, tmnxPortEgrExpShaperClass7Thresh=tmnxPortEgrExpShaperClass7Thresh, tmnxPortNotifyEtherCrcAlarmValue=tmnxPortNotifyEtherCrcAlarmValue, tmnxDS3ChannelAcctPolicyId=tmnxDS3ChannelAcctPolicyId, tmnxScalarPortV3v0Group=tmnxScalarPortV3v0Group, tmnxOpticalPortGroupV9v0=tmnxOpticalPortGroupV9v0, tPortNetEgrQGrpAcctgPolId=tPortNetEgrQGrpAcctgPolId, tmnxDS1ClockSyncState=tmnxDS1ClockSyncState, tPortNetEgrQGrpPStDrpOutProfPkt=tPortNetEgrQGrpPStDrpOutProfPkt, tmnxPortEgrExpShaperCl8BrstLimit=tmnxPortEgrExpShaperCl8BrstLimit, tPortAccIngQGrpTable=tPortAccIngQGrpTable, tmnxPortIngrMdaQos13StatDropOcts=tmnxPortIngrMdaQos13StatDropOcts, tmnxDS1BerSfThreshold=tmnxDS1BerSfThreshold, tPortEgrExpShaperCls1StFwdOcts=tPortEgrExpShaperCls1StFwdOcts, tPortEgrExpShaperCls7StFwdOctsL=tPortEgrExpShaperCls7StFwdOctsL, tmnxSonetApsOperStatus=tmnxSonetApsOperStatus, tmnxDS1E1LoopbackStarted=tmnxDS1E1LoopbackStarted, tmnxPortIngQosQStatTable=tmnxPortIngQosQStatTable, tmnxBundleMemberRowStatus=tmnxBundleMemberRowStatus, tmnxPortEquipped=tmnxPortEquipped, tmnxPortCompliances=tmnxPortCompliances, tmnxEqPortOpticalTdcmAlarm=tmnxEqPortOpticalTdcmAlarm, tPortEgrExpShaperCls3StFwdPktsL=tPortEgrExpShaperCls3StFwdPktsL, tmnxPortNotifyObjsV9v0Group=tmnxPortNotifyObjsV9v0Group, tmnxPortNetEgressQueueIndex=tmnxPortNetEgressQueueIndex, tmnxBundleMlpppIngQoSProfId=tmnxBundleMlpppIngQoSProfId, tmnxPortIngrMdaQosStatR2r1Group=tmnxPortIngrMdaQosStatR2r1Group, tmnxOpticalPortAmpGain=tmnxOpticalPortAmpGain, tmnxPortTestParameter=tmnxPortTestParameter, tPortNetEgrQOverMBSBytes=tPortNetEgrQOverMBSBytes, tmnxPortSchedOverrideLvl6PIR=tmnxPortSchedOverrideLvl6PIR, tmnxWaveTrackerGroup=tmnxWaveTrackerGroup, tPortEgrExpShaperCls4StMonOvrOL=tPortEgrExpShaperCls4StMonOvrOL, tPortAccIngSchedStatFwdPktsLo=tPortAccIngSchedStatFwdPktsLo, tmnxEqPortIngressRateCfgNotCompatible=tmnxEqPortIngressRateCfgNotCompatible, tPortNetEgrQGrpPStUncolPktOffL=tPortNetEgrQGrpPStUncolPktOffL, tPortEgrExpShaperCls8StFwdOcts=tPortEgrExpShaperCls8StFwdOcts, tmnxObjAppType=tmnxObjAppType, tPortAccEgrQOverMBSBytes=tPortAccEgrQOverMBSBytes, tPortAccIngQGrpEntry=tPortAccIngQGrpEntry, tmnxPortSchedOverrideLvl5PIR=tmnxPortSchedOverrideLvl5PIR, tPortNetEgrQGrpPStDrpInProfOctL=tPortNetEgrQGrpPStDrpInProfOctL, tmnxDS3ChannelBERTPattern=tmnxDS3ChannelBERTPattern, tmnxDS0ChanGroupEntry=tmnxDS0ChanGroupEntry, tmnxDDMSupplyVoltageLowAlarm=tmnxDDMSupplyVoltageLowAlarm, tmnxDS3E3LoopbackStarted=tmnxDS3E3LoopbackStarted, tmnxSonetPathOperMRU=tmnxSonetPathOperMRU, tmnxDDMExtCalTxPowerOffset=tmnxDDMExtCalTxPowerOffset, tmnxPortNotifyEtherCrcThreshold=tmnxPortNotifyEtherCrcThreshold)
mibBuilder.exportSymbols("TIMETRA-PORT-MIB", tmnxDDMAux1HiAlarm=tmnxDDMAux1HiAlarm, tmnxPortOtuCapable=tmnxPortOtuCapable, tmnxDS3ChannelOperMTU=tmnxDS3ChannelOperMTU, tmnxCiscoHDLCStatInOctets=tmnxCiscoHDLCStatInOctets, tmnxDS0ChanGroupOperMTU=tmnxDS0ChanGroupOperMTU, tmnxPortSFPVendorOUI=tmnxPortSFPVendorOUI, tPortNetEgrSchedStatFwdOctsLo=tPortNetEgrSchedStatFwdOctsLo, tmnxPortComp7750V9v0=tmnxPortComp7750V9v0, tmnxPortEtherHCPkts1519toMax=tmnxPortEtherHCPkts1519toMax, tmnxPortVPortGroup=tmnxPortVPortGroup, tmnxPortSFPVendorManufactureDate=tmnxPortSFPVendorManufactureDate, tmnxPortIngrMdaQos08StatDropOcts=tmnxPortIngrMdaQos08StatDropOcts, tmnxPortComp7450V5v0=tmnxPortComp7450V5v0, tmnxObsoleteGroupV3v0=tmnxObsoleteGroupV3v0, tmnxSonetSpeed=tmnxSonetSpeed, tmnxSonetGroupEntry=tmnxSonetGroupEntry, tmnxPortCemStatsEgrORunCounts=tmnxPortCemStatsEgrORunCounts, tmnxWaveTrackerLowerPowerMargin=tmnxWaveTrackerLowerPowerMargin, tPortEgrVPStLvlDpdPktH=tPortEgrVPStLvlDpdPktH, tPortNetEgrQGrpAggRateLimit=tPortNetEgrQGrpAggRateLimit, tmnxDS1Type=tmnxDS1Type, tmnxPortParentPortID=tmnxPortParentPortID, TmnxImaTestState=TmnxImaTestState, tPortNetEgrQGrpFrameBaseActg=tPortNetEgrQGrpFrameBaseActg, tPortEgrExpShaperCls3StFwdPkts=tPortEgrExpShaperCls3StFwdPkts, tmnxPortPortID=tmnxPortPortID, tmnxPortEthernetV6v0Group=tmnxPortEthernetV6v0Group, tmnxPwPortV10v0Group=tmnxPwPortV10v0Group, tmnxPortToChannelEntry=tmnxPortToChannelEntry, tmnxPortEthernetV10v0Group=tmnxPortEthernetV10v0Group, tPortEgrVPortRowStatus=tPortEgrVPortRowStatus, tmnxDDMTempHiAlarm=tmnxDDMTempHiAlarm, tmnxSonetSDHLoopbackStopped=tmnxSonetSDHLoopbackStopped, tmnxDS3ChannelSubrateCSUMode=tmnxDS3ChannelSubrateCSUMode, tmnxPortIngrMdaQos09StatDropPkts=tmnxPortIngrMdaQos09StatDropPkts, tmnxWaveTrackerCfgAlarms=tmnxWaveTrackerCfgAlarms, tmnxPortEtherHCOverPkts1519toMax=tmnxPortEtherHCOverPkts1519toMax, tmnxFRDlcmiInvRxSeqNumMsgs=tmnxFRDlcmiInvRxSeqNumMsgs, tPortNetEgrQGrpPStatMode=tPortNetEgrQGrpPStatMode, tPortAccEgrQGrpAggRateLimit=tPortAccEgrQGrpAggRateLimit, tmnxSonetGroupType=tmnxSonetGroupType, tmnxPortType=tmnxPortType, tmnxDS3ChannelCollectStats=tmnxDS3ChannelCollectStats, tPortAccIngSchedStatFwdOcts=tPortAccIngSchedStatFwdOcts, tmnxOpticalPortHasRxTdcm=tmnxOpticalPortHasRxTdcm, tmnxPortIngQosQStatFwdOutProfOcts=tmnxPortIngQosQStatFwdOutProfOcts, tPortAccEgrQOverRateType=tPortAccEgrQOverRateType, tmnxFRDlcmiStatusMsgTimeouts=tmnxFRDlcmiStatusMsgTimeouts, tmnxPortEtherCrcMonSfThreshold=tmnxPortEtherCrcMonSfThreshold, tPortAccEgrQGrpHostMatchFailure=tPortAccEgrQGrpHostMatchFailure, tPortAccIngQOverAdminPIR=tPortAccIngQOverAdminPIR, tmnxPortEtherDownOnInternalError=tmnxPortEtherDownOnInternalError, tmnxPortEtherPBBEtype=tmnxPortEtherPBBEtype, tmnxPortSchedOverrideLvl3PIR=tmnxPortSchedOverrideLvl3PIR, tmnxPortChanType=tmnxPortChanType, tmnxMcMlpppStatsEgressOct=tmnxMcMlpppStatsEgressOct, tmnxPortSchedOverrideLvl7PIR=tmnxPortSchedOverrideLvl7PIR, tPortEgrExpShaperCls3StFwdOctsH=tPortEgrExpShaperCls3StFwdOctsH, tPortNetEgrQOverRateType=tPortNetEgrQOverRateType, TmnxBundleID=TmnxBundleID, tmnxNamedPoolGroupV6v0=tmnxNamedPoolGroupV6v0, tmnxOpticalPortTdcmCtrlState=tmnxOpticalPortTdcmCtrlState, tmnxWaveTrackerWaveKey1=tmnxWaveTrackerWaveKey1, tPortEgrExpShaperCls6StMonOvrOct=tPortEgrExpShaperCls6StMonOvrOct, tmnxDDMTxBiasCurrent=tmnxDDMTxBiasCurrent, tmnxPortSFPStatus=tmnxPortSFPStatus, tmnxMcMlpppStatsTable=tmnxMcMlpppStatsTable, tmnxPortTypeTable=tmnxPortTypeTable, tmnxPortTable=tmnxPortTable, tmnxPortEtherDownWhenLoopedRetry=tmnxPortEtherDownWhenLoopedRetry, tmnxDS1Framing=tmnxDS1Framing, tmnxBundlePrimaryMemberPortID=tmnxBundlePrimaryMemberPortID, tmnxPortIngrMdaQos03StatDropPkts=tmnxPortIngrMdaQos03StatDropPkts, tmnxPortEtherCrcMonWindowSize=tmnxPortEtherCrcMonWindowSize, tPortEgrExpShaperAggStMonOvrOL=tPortEgrExpShaperAggStMonOvrOL, tmnxObjPortId=tmnxObjPortId, tPortNetEgrQGrpPStOffOutProfOctH=tPortNetEgrQGrpPStOffOutProfOctH, tmnxHsmdaPortSchOvrTable=tmnxHsmdaPortSchOvrTable, tPortNetEgrSchedStatFwdOcts=tPortNetEgrSchedStatFwdOcts, tmnxPortIngrMdaQos09StatDropOcts=tmnxPortIngrMdaQos09StatDropOcts, tmnxPortNotificationObjects=tmnxPortNotificationObjects, tmnxPortPlcyGroup=tmnxPortPlcyGroup, tPortEgrVPStLvlDpdOctH=tPortEgrVPStLvlDpdOctH, tmnxHsmdaPortSchOvrClass7WtInGp=tmnxHsmdaPortSchOvrClass7WtInGp, tmnxPortTDMGroupV5v0=tmnxPortTDMGroupV5v0, tmnxPortEgrExpShaperLoBurstLimit=tmnxPortEgrExpShaperLoBurstLimit, tmnxBundleMemberImaRxIcpCells=tmnxBundleMemberImaRxIcpCells, tPortAccEgrQGrpEntry=tPortAccEgrQGrpEntry, tPortNetEgrQGrpEntry=tPortNetEgrQGrpEntry, tmnxFRDlcmiRxStatusMsgs=tmnxFRDlcmiRxStatusMsgs, tmnxPortNotificationGroupV6v0=tmnxPortNotificationGroupV6v0, tmnxPortEgrExpShaperCl2BrstLimit=tmnxPortEgrExpShaperCl2BrstLimit, tPortAccEgrSchedStatEntry=tPortAccEgrSchedStatEntry, tmnxPortTransceiverCode=tmnxPortTransceiverCode, tmnxDS3ChannelClockSource=tmnxDS3ChannelClockSource, tmnxMlpppBundleGroup=tmnxMlpppBundleGroup, tmnxLsrIpLoadBalancing=tmnxLsrIpLoadBalancing, tmnxPortConnectTypeIndex=tmnxPortConnectTypeIndex, tPortEgrExpShaperCls7StMonOvrOH=tPortEgrExpShaperCls7StMonOvrOH, tmnxSonetPathChildType=tmnxSonetPathChildType, tPortEgrExpShaperCls6StMonOvrOH=tPortEgrExpShaperCls6StMonOvrOH, tmnxPortNetIngressFwdInProfPkts=tmnxPortNetIngressFwdInProfPkts, tmnxPortGroupV6v0=tmnxPortGroupV6v0, tmnxBundleMemberImaFeUnavailSecs=tmnxBundleMemberImaFeUnavailSecs, tPortAccEgrQOverMBS=tPortAccEgrQOverMBS, tmnxPortHybridIngNetworkWeight=tmnxPortHybridIngNetworkWeight, tmnxDS3ChannelMDLUnitString=tmnxDS3ChannelMDLUnitString, tPortEgrVPStLvlFwdPktH=tPortEgrVPStLvlFwdPktH, tmnxPortTestState=tmnxPortTestState, tPortAccIngQOverMBSBytes=tPortAccIngQOverMBSBytes, tPortNetEgrQGrpRowStatus=tPortNetEgrQGrpRowStatus, tmnxQosAppObjs=tmnxQosAppObjs, tmnxDigitalDiagMonitorGroup=tmnxDigitalDiagMonitorGroup, tmnxBundleShortSequence=tmnxBundleShortSequence, tPortAccIngQOverAdminCIR=tPortAccIngQOverAdminCIR, tmnxPortGroupV8v0=tmnxPortGroupV8v0, tmnxPortATMV3v0Group=tmnxPortATMV3v0Group, tmnxDS3ChannelMDLPortString=tmnxDS3ChannelMDLPortString, tmnxDDMExtCalRxPower3=tmnxDDMExtCalRxPower3, tPortEgrExpShaperCls4StFwdPktsH=tPortEgrExpShaperCls4StFwdPktsH, tmnxPortFCStatsIngDroInProfPkts=tmnxPortFCStatsIngDroInProfPkts, tPortEgrExpShaperCls7StFwdOctsH=tPortEgrExpShaperCls7StFwdOctsH, tPortNetEgrQGrpSchedPol=tPortNetEgrQGrpSchedPol, tmnxBundleImaGrpAvailTxCR=tmnxBundleImaGrpAvailTxCR, tPortNetEgrQGrpPStOffOutProfOct=tPortNetEgrQGrpPStOffOutProfOct, tmnxResvCbsPoolThreshRed=tmnxResvCbsPoolThreshRed, tmnxDDMLaneTxBiasCurrentLowAlarm=tmnxDDMLaneTxBiasCurrentLowAlarm, tPortNetEgrQGrpPStatTable=tPortNetEgrQGrpPStatTable, TmnxImaGrpVersion=TmnxImaGrpVersion, tmnxOpticalPortAmpAlarmState=tmnxOpticalPortAmpAlarmState, tmnxPortCemStatsEgrURunCounts=tmnxPortCemStatsEgrURunCounts, tmnxPortIngrMdaQos04StatDropPkts=tmnxPortIngrMdaQos04StatDropPkts, tmnxSonetSingleFiber=tmnxSonetSingleFiber, tmnxSonetMonK1Byte=tmnxSonetMonK1Byte, tPortAccEgrQOverRowStatus=tPortAccEgrQOverRowStatus, tmnxWaveTrackerEncodeEnable=tmnxWaveTrackerEncodeEnable, tmnxPortComp7710V6v0=tmnxPortComp7710V6v0, tmnxDDMTxBiasCurrentLowAlarm=tmnxDDMTxBiasCurrentLowAlarm, tmnxPortName=tmnxPortName, tmnxDS0ChanGroupSpeed=tmnxDS0ChanGroupSpeed, tPortEgrExpShaperCls7StFwdOcts=tPortEgrExpShaperCls7StFwdOcts, tmnxFRDlcmiTxStatusMsgs=tmnxFRDlcmiTxStatusMsgs, tmnxPortNotificationGroupV8v9=tmnxPortNotificationGroupV8v9, tPortEgrExpShaperCls2StFwdOcts=tPortEgrExpShaperCls2StFwdOcts, tmnxPortSchedOverrideLastChanged=tmnxPortSchedOverrideLastChanged, PYSNMP_MODULE_ID=tmnxPortMIBModule, tmnxPortEgrShaperEntry=tmnxPortEgrShaperEntry, tPortEgrVPortHMLastChgd=tPortEgrVPortHMLastChgd, tmnxBundleImaGrpRxOamLablVal=tmnxBundleImaGrpRxOamLablVal, tPortEgrExpShaperCls7StMonOvrOct=tPortEgrExpShaperCls7StMonOvrOct, tPortAccEgrQOverAdminCIR=tPortAccEgrQOverAdminCIR, tPortNetEgrQOverTableLastChgd=tPortNetEgrQOverTableLastChgd, tmnxPortEgrExpShaperLoBrstMaxCls=tmnxPortEgrExpShaperLoBrstMaxCls, tmnxEqPortSonetPathAlarm=tmnxEqPortSonetPathAlarm, tmnxPortFCStatsEgrDroInProfPkts=tmnxPortFCStatsEgrDroInProfPkts, tPortEgrExpShaperAggStMonOvrOH=tPortEgrExpShaperAggStMonOvrOH, tmnxPortHoldTimeUp=tmnxPortHoldTimeUp, tmnxPortNotifyDS1AlarmReason=tmnxPortNotifyDS1AlarmReason, tmnxPortPlcyRowStatus=tmnxPortPlcyRowStatus)
