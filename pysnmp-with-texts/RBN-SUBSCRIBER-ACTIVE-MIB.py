#
# PySNMP MIB module RBN-SUBSCRIBER-ACTIVE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-SUBSCRIBER-ACTIVE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnPortMediumType, RbnCircuitHandle, RbnPercentage = mibBuilder.importSymbols("RBN-TC", "RbnPortMediumType", "RbnCircuitHandle", "RbnPercentage")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
vacmContextName, = mibBuilder.importSymbols("SNMP-VIEW-BASED-ACM-MIB", "vacmContextName")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, Integer32, ModuleIdentity, Unsigned32, Counter32, Bits, zeroDotZero, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, ObjectIdentity, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "ModuleIdentity", "Unsigned32", "Counter32", "Bits", "zeroDotZero", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "ObjectIdentity", "NotificationType", "IpAddress")
TimeStamp, RowPointer, DateAndTime, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "RowPointer", "DateAndTime", "DisplayString", "TextualConvention", "TruthValue")
rbnSubscriberActiveMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 27))
rbnSubscriberActiveMib.setRevisions(('2013-02-27 00:00', '2012-09-04 00:00', '2010-02-01 00:00', '2009-01-19 18:00', '2008-12-03 18:00', '2007-05-24 18:00', '2007-05-09 18:00', '2004-06-28 18:00', '2004-02-02 18:00', '2003-11-01 18:00', '2003-06-26 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnSubscriberActiveMib.setRevisionsDescriptions((' Changed the following not-accessible objects to read-only rbnSubsActiveIpAddrType rbnSubsActiveIpAddr rbnSubsActiveIpPfxLen', ' Add rbnSubsIPv4OctetsSent rbnSubsIPv4OctetsReceived, rbnSubsIPv6OctetsSent, rbnSubsIPv6OctetsReceived, rbnSubsIPv4PktsSent, rbnSubsIPv4PktsReceived, rbnSubsIPv6PktsSent, rbnSubsIPv6PktsReceived, rbnSubsIPv4McastOctetsSent, rbnSubsIPv4McastOctetsReceived, rbnSubsIPv6McastOctetsSent, rbnSubsIPv6McastOctetsReceived, rbnSubsIPv4McastPktsSent, rbnSubsIPv4McastPktsReceived, rbnSubsIPv6McastPktsSent, rbnSubsIPv6McastPktsReceived to RbnSubsStatsEntry table rbnSubsServiceIPv4VolumeOctetsIn, rbnSubsServiceIPv4VolumeOctetsOut, rbnSubsServiceIPv6VolumeOctetsIn, rbnSubsServiceIPv6VolumeOctetsOut, rbnSubsServiceIPv4VolumePktsIn, rbnSubsServiceIPv4VolumePktsOut, rbnSubsServiceIPv6VolumePktsIn, rbnSubsServiceIPv6VolumePktsOut to RbnSubsServiceVolumeEntry table', 'Add rbnSubsActiveSessionTable, rbnSubsActiveIpAddrTable Update ORGANIZATION/CONTACT-INFO. ', 'Add rbnSubsActiveResendSvcAcct to rbnSubsActiveEntry.', 'Add rbnSubsMaxSupportedSessions, rbnSubsLicensedSessions, rbnSubsActiveSessions, and rbnSubsCapacityPercentageUsed. Defined rbnSubsCompliance5 and rbnSubsLicenseGroup for compliance. Deprecated rbnSubsCompliance4 and obsoleted rbnSubsCompliance3.', 'Add rbnSubsConfigErrorEvent notification along with the associated objects. Defined rbnSubsNotifyObjectGroup and rbnSubsNotifyGroup for compliance.', 'Add rbnSubsServiceVolumeTable and rbnSubsServicesTable along with associated objects. Defined rbnSubsCompliance4 and rbnSubsServicesGroup for compliance. Deprecated rbnSubsCompliance3 and obsoleted rbnSubsCompliance2.', 'Add rbnSubsActiveNasPortType and rbnSubsActiveMediumType to RbnSubsActiveEntry. Update conformance objects appropriately.', 'Add objects rbnSubsReauthName and rbnSubsReauthSessionId. These objects supercede the objects defined in the RBN-SUBSCRIBER-REAUTH-MIB.', 'Add rbnSubsActiveResend to rbnSubsActiveEntry. Add rbnSubsProfileCountTable with objects rbnSubsProfileName and rbnSubsProfileCount. Updated compliance and groups to reflect new objects.', 'Initial version.',))
if mibBuilder.loadTexts: rbnSubscriberActiveMib.setLastUpdated('201302270000Z')
if mibBuilder.loadTexts: rbnSubscriberActiveMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnSubscriberActiveMib.setContactInfo(' Redback Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com ')
if mibBuilder.loadTexts: rbnSubscriberActiveMib.setDescription('Defines the objects necessary to support the management of active subscribers in Redback product family. All mib objects, except rbnSubsCntxtCountTable, defined in the module are viewed within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3). ')
rbnSubsActiveObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1))
rbnSubsActiveConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2))
rbnSubsActiveNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 3))
rbnSubsActive = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1))
rbnSubsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2))
rbnSubsNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 3))
rbnSubsActiveTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1), )
if mibBuilder.loadTexts: rbnSubsActiveTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveTable.setDescription('This table contains subscriber sessions which have been authenticated on an circuit.')
rbnSubsActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveName"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"))
if mibBuilder.loadTexts: rbnSubsActiveEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveEntry.setDescription('A conceptual row in the rbnSubsActiveTable.')
rbnSubsActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: rbnSubsActiveName.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveName.setDescription('The name identifying this entry. An entry configured by other means may have been given a name whose length is greater than 80. Names which exceed this length are not accessible via SNMP operations.')
rbnSubsActiveSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rbnSubsActiveSessionId.setReference('Rigney, C., RADIUS Accounting, RFC 2866, June 2000')
if mibBuilder.loadTexts: rbnSubsActiveSessionId.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveSessionId.setDescription('A value that uniquely identifies an active subscriber session. If RADIUS is being used to configure/authenticate subscribers, this value will appear in the RADIUS Acct-Session-Id attribute.')
rbnSubsActiveCircuitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveCircuitDescr.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveCircuitDescr.setDescription('A string which provides identifying information (e.g slot/port) of the circuit the subscriber is using.')
rbnSubsActiveCircuitHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 4), RbnCircuitHandle()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveCircuitHandle.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveCircuitHandle.setDescription('A value for identifying circuits.')
rbnSubsActiveStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveStartTime.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveStartTime.setDescription('The time when the subscriber became active.')
rbnSubsActiveClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsActiveClear.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveClear.setDescription("Setting this value to 'true' will clear the active subscriber session. In the case of PPP, the PPP state machinery attempts to renegotiate and re-authenticate a new session with the remote peer on the circuit. In the case of RFC 1483 encapsulated circuits the session is brought down and then back up and an attempt is made to re-authenticate the subscriber. An SNMP get operation always returns 'false'")
rbnSubsActiveResend = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsActiveResend.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveResend.setDescription("Setting this value to 'true' will cause a resend of the Radius acct-start packet. An SNMP get operation always returns 'false'")
rbnSubsActiveNasPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveNasPortType.setReference('Rigney, C., Rubens, A., Simpson, W., and Willens, S., Remote Authentication Dial In User Service (RADIUS), RFC 2865, June 2000')
if mibBuilder.loadTexts: rbnSubsActiveNasPortType.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveNasPortType.setDescription('The RADIUS attribute NAS-Port-Type which indicates the type of the physical port which is authenticating the user.')
rbnSubsActiveMediumType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 9), RbnPortMediumType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveMediumType.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveMediumType.setDescription('The medium type of the NAS-Port.')
rbnSubsActiveResendSvcAcct = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsActiveResendSvcAcct.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveResendSvcAcct.setDescription("Setting this value to 'true' will cause a resend of the Radius acct-start packet for all services associated with the active subscriber session. An SNMP get operation always returns 'false'")
rbnSubsActiveIpTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 2), )
if mibBuilder.loadTexts: rbnSubsActiveIpTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpTable.setDescription('This table contains IP addresses used by active subscribers.')
rbnSubsActiveIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 2, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveName"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveAddrType"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveAddr"))
if mibBuilder.loadTexts: rbnSubsActiveIpEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpEntry.setDescription('A conceptual row in the rbnSubsActiveIpTable.')
rbnSubsActiveAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: rbnSubsActiveAddrType.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveAddrType.setDescription('The address type of rbnSubsActiveAddr. ')
rbnSubsActiveAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveAddr.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveAddr.setDescription('The host IP address of the active subscriber.')
rbnSubsActiveSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 6), )
if mibBuilder.loadTexts: rbnSubsActiveSessionTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveSessionTable.setDescription('This table contains active subscriber sessions which have been authenticated on an circuit.')
rbnSubsActiveSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 6, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"))
if mibBuilder.loadTexts: rbnSubsActiveSessionEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveSessionEntry.setDescription('A conceptual row in the rbnSubsActiveSessionTable.')
rbnSubsActiveSessionSubscriberName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveSessionSubscriberName.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveSessionSubscriberName.setDescription('The subscriber name associated with this session.')
rbnSubsActiveSessionPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 6, 1, 2), RowPointer().clone((0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveSessionPointer.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveSessionPointer.setDescription('A pointer to the row in rbnSubsActiveTable to which this session belongs. May be {0 0} if there is no such row.')
rbnSubsActiveIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 7), )
if mibBuilder.loadTexts: rbnSubsActiveIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpAddrTable.setDescription('This table contains IPv4/IPv6 addresses used by active subscriber sessions. ')
rbnSubsActiveIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 7, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveIpAddrType"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveIpAddr"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveIpPfxLen"))
if mibBuilder.loadTexts: rbnSubsActiveIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpAddrEntry.setDescription('A conceptual row in the rbnSubsActiveIpAddrTable.')
rbnSubsActiveIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 7, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveIpAddrType.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpAddrType.setDescription('The address type of rbnSubsActiveIpAddr.')
rbnSubsActiveIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 7, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveIpAddr.setReference('[RFC4291] IP Version 6 Addressing Architectur [RFC4632] Classless Inter-domain Routing (CIDR): The Internet Address Assignment and Aggregation Plan')
if mibBuilder.loadTexts: rbnSubsActiveIpAddr.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpAddr.setDescription('The address prefix. The address type of this object is specified in rbnSubsActiveIpAddrType. The length of this object is the standard length for objects of that type (4 or 16 bytes). Any bits after rbnSubsActiveIpPfxLen must be zero. ')
rbnSubsActiveIpPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 7, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveIpPfxLen.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpPfxLen.setDescription('The prefix length associated with this prefix. For IPv4 active subscriber session, the prefix length is always 32.')
rbnSubsActiveIpAddrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 7, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveIpAddrDescr.setReference('[RFC4291] 2.2. Text Representation of Addresses')
if mibBuilder.loadTexts: rbnSubsActiveIpAddrDescr.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveIpAddrDescr.setDescription('Human readable textual format of IP address. ')
rbnSubsClear = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3))
rbnSubsClearSubscriberName = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsClearSubscriberName.setStatus('current')
if mibBuilder.loadTexts: rbnSubsClearSubscriberName.setDescription('Setting this object to the subscriber name will clear all the sessions associated with the subscriber. In the case of PPP circuit, the PPP state machinery attempts to renegotiate and re-authenticate a new session with the remote peer on the circuit. In the case of RFC 1483 and RFC 1490 encapsulated circuits the circuit is brought down and then back up and an attempt is made to re-authenticate the subscriber bound to the circuit. This object returns a zero-length string when queried. ')
rbnSubsClearSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsClearSessionId.setStatus('current')
if mibBuilder.loadTexts: rbnSubsClearSessionId.setDescription('A set of this object will clear the subscriber session identified by this value. In the case of PPP circuit, the PPP state machinery attempts to renegotiate and re-authenticate a new session with the remote peer on the circuit. In the case of RFC 1483 and RFC 1490 encapsulated circuits the circuit is brought down and then back up and an attempt is made to re-authenticate the subscriber bound to the circuit. This object returns a zero-length string when queried. ')
rbnSubsBounceName = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsBounceName.setStatus('current')
if mibBuilder.loadTexts: rbnSubsBounceName.setDescription('Each circuit using CLIPS encapsulation used by the named subscriber is brought down and immediately recreated using the RADIUS Access- Accept attributes. Any other circuit encapsulation type is cleared. This object returns a zero-length string when queried.')
rbnSubsBounceSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsBounceSessionId.setStatus('current')
if mibBuilder.loadTexts: rbnSubsBounceSessionId.setDescription('The circuit using CLIPS encapsulation identified by the RADIUS Acct-Session-Id is brought down and immediately recreated using the RADIUS Access-Accept attributes. Any other circuit encapsulation type is cleared. This object returns a zero-length string when queried.')
rbnSubsReauthRadiusIndex = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsReauthRadiusIndex.setStatus('current')
if mibBuilder.loadTexts: rbnSubsReauthRadiusIndex.setDescription('An unsigned integer identifying a set of subscribers defined at the RADIUS server which are to be re-authorized. The source of this value and the set of subscribers to be re-authorized are defined outside the context of this mib module. An get of this attribute returns 0.')
rbnSubsReauthRadiusID = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsReauthRadiusID.setStatus('current')
if mibBuilder.loadTexts: rbnSubsReauthRadiusID.setDescription('An octet string identifying a set of subscribers defined at the RADIUS server which are to be re-authorized. The source of this value and the set of subscribers to be re-authorized are defined outside the context of this mib module. This object returns a zero-length string when queried.')
rbnSubsReauthName = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsReauthName.setStatus('current')
if mibBuilder.loadTexts: rbnSubsReauthName.setDescription('Used to reauthorize all of the active sessions associated with the given subscriber in the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3). This object returns a zero-length string when queried. ')
rbnSubsReauthSessionId = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsReauthSessionId.setStatus('current')
if mibBuilder.loadTexts: rbnSubsReauthSessionId.setDescription('Used to reauthorize the active session identified by the value of this object and the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3). This object returns a zero-length string when queried. ')
rbnSubsClearReason = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 3, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsClearReason.setStatus('current')
if mibBuilder.loadTexts: rbnSubsClearReason.setDescription('An unsigned integer value which may be included in the set request for rbnSubsClearSubscriberName, rbnSubsClearSessionId, rbnSubsBounceName, rbnSubsBounceSessionId, or any other objects define under the rbnSubsClear OID node. The use of this object value is implementation dependent. This object returns 0 when queried.')
rbnSubsCntxtCountTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 1), )
if mibBuilder.loadTexts: rbnSubsCntxtCountTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCntxtCountTable.setDescription("This table contains counts of active subscribers by context name. Unlike any of the other tables in this mib module, all rows in this table are accessible when the context 'local' is specified in the snmp message, unless restricted by entries in the vacmAccessTable. Snmp requests using other contexts shall return only the row which matches the context.")
rbnSubsCntxtCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 1, 1), ).setIndexNames((0, "SNMP-VIEW-BASED-ACM-MIB", "vacmContextName"))
if mibBuilder.loadTexts: rbnSubsCntxtCountEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCntxtCountEntry.setDescription('The conceptual row containing the count of active subscribers for each context.')
rbnSubsCntxtCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsCntxtCount.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCntxtCount.setDescription('The count of active subscribers with either IPv4 or IPv6 or both stack UP.')
rbnSubsCntxtIp4OnlyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsCntxtIp4OnlyCount.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCntxtIp4OnlyCount.setDescription('The count of IPv4 active subscribers which are authorized for only IPv4 protocol stack. This counter does not include subscribers authorized for dual IPv4/IPv6 protocol stack. ')
rbnSubsCntxtIp6OnlyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsCntxtIp6OnlyCount.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCntxtIp6OnlyCount.setDescription('The count of IPv6 active subscribers which are authorized for only IPv6 protocol stack. This counter does not include subscribers authorized for dual IPv4/IPv6 protocol stack. ')
rbnSubsCntxtDualCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsCntxtDualCount.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCntxtDualCount.setDescription('The count of active subscribers which are authorized for both IPv4 and IPv6 for the context. At any time either one or both stacks may be UP. ')
rbnSubsCntxtLacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsCntxtLacCount.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCntxtLacCount.setDescription('The count of active LAC subscribers.')
rbnSubsEncapsCountTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 2), )
if mibBuilder.loadTexts: rbnSubsEncapsCountTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsEncapsCountTable.setDescription('This table contains counts of active subscribers by encapsulation type.')
rbnSubsEncapsCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 2, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsEncapsulationType"))
if mibBuilder.loadTexts: rbnSubsEncapsCountEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsEncapsCountEntry.setDescription('A conceptual row in the rbnSubsEncapsCountTable. ')
rbnSubsEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))).clone(namedValues=NamedValues(("ppp", 1), ("pppoe", 2), ("bridged1483", 3), ("routed1483", 4), ("multi1483", 5), ("dot1q1483", 6), ("dot1qEnet", 7), ("bridged1490", 8), ("routed1490", 9), ("multi1490", 10), ("dot1q1490", 11), ("clips", 12), ("other", 255))))
if mibBuilder.loadTexts: rbnSubsEncapsulationType.setStatus('current')
if mibBuilder.loadTexts: rbnSubsEncapsulationType.setDescription("This object identifies the type of encapsulation the subscriber is using. Note that 'ppp' includes all types of supported ppp, excluding pppoe.")
rbnSubsEncapsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 2, 1, 2), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsEncapsCount.setStatus('current')
if mibBuilder.loadTexts: rbnSubsEncapsCount.setDescription('The count of active subscribers for the encapsulation type.')
rbnSubsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3), )
if mibBuilder.loadTexts: rbnSubsStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsStatsTable.setDescription('This table contains counters for individual circuits.')
rbnSubsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveName"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"))
if mibBuilder.loadTexts: rbnSubsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsStatsEntry.setDescription('A conceptual row in the rbnSubsStatsTable.')
rbnSubsOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 1), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsOctetsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsOctetsSent.setDescription('The number of octets sent by the circuit. This counter includes multicast activity.')
rbnSubsOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 2), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsOctetsReceived.setDescription('The number of octets received by the circuit. This counter includes multicast activity.')
rbnSubsPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsPktsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsPktsSent.setDescription('The number of packets sent by the circuit. This counter includes multicast activity.')
rbnSubsPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsPktsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsPktsReceived.setDescription('The number of packets received by the circuit. This counter includes multicast activity.')
rbnSubsXmitOctetsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsXmitOctetsDropped.setStatus('current')
if mibBuilder.loadTexts: rbnSubsXmitOctetsDropped.setDescription('The number of octets dropped by the circuit before transmission.')
rbnSubsXmitPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsXmitPktsDropped.setStatus('current')
if mibBuilder.loadTexts: rbnSubsXmitPktsDropped.setDescription('The number of packets dropped by the circuit before transmission.')
rbnSubsMcastOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 7), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsMcastOctetsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsMcastOctetsSent.setDescription('The number of multicast octets sent by the circuit.')
rbnSubsMcastOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 8), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsMcastOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsMcastOctetsReceived.setDescription('The number of multicast octets received by the circuit.')
rbnSubsMcastPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsMcastPktsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsMcastPktsSent.setDescription('The number of multicast packets sent by the circuit.')
rbnSubsMcastPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsMcastPktsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsMcastPktsReceived.setDescription('The number of multicast packets received by the circuit.')
rbnSubsIPv4OctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 11), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4OctetsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4OctetsSent.setDescription('The number of IPv4 octets sent by the circuit. This counter includes multicast activity.')
rbnSubsIPv4OctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 12), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4OctetsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4OctetsReceived.setDescription('The number of IPv4 octets received by the circuit. This counter includes multicast activity.')
rbnSubsIPv6OctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 13), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6OctetsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6OctetsSent.setDescription('The number of IPv6 octets sent by the circuit. This counter includes multicast activity.')
rbnSubsIPv6OctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 14), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6OctetsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6OctetsReceived.setDescription('The number of IPv6 octets received by the circuit. This counter includes multicast activity.')
rbnSubsIPv4PktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4PktsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4PktsSent.setDescription('The number of IPv4 packets sent by the circuit. This counter includes multicast activity.')
rbnSubsIPv4PktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4PktsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4PktsReceived.setDescription('The number of IPv4 packets received by the circuit. This counter includes multicast activity.')
rbnSubsIPv6PktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 17), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6PktsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6PktsSent.setDescription('The number of IPv6 packets sent by the circuit. This counter includes multicast activity.')
rbnSubsIPv6PktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 18), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6PktsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6PktsReceived.setDescription('The number of IPv6 packets received by the circuit. This counter includes multicast activity.')
rbnSubsIPv4McastOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 19), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4McastOctetsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4McastOctetsSent.setDescription('The number of IPv4 multicast octets sent by the circuit.')
rbnSubsIPv4McastOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 20), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4McastOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4McastOctetsReceived.setDescription('The number of IPv4 multicast octets received by the circuit.')
rbnSubsIPv6McastOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 21), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6McastOctetsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6McastOctetsSent.setDescription('The number of IPv6 multicast octets sent by the circuit.')
rbnSubsIPv6McastOctetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 22), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6McastOctetsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6McastOctetsReceived.setDescription('The number of IPv6 multicast octets received by the circuit.')
rbnSubsIPv4McastPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 23), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4McastPktsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4McastPktsSent.setDescription('The number of IPv4 multicast packets sent by the circuit.')
rbnSubsIPv4McastPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 24), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv4McastPktsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv4McastPktsReceived.setDescription('The number of IPv4 multicast packets received by the circuit.')
rbnSubsIPv6McastPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 25), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6McastPktsSent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6McastPktsSent.setDescription('The number of IPv6 multicast packets sent by the circuit.')
rbnSubsIPv6McastPktsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 3, 1, 26), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsIPv6McastPktsReceived.setStatus('current')
if mibBuilder.loadTexts: rbnSubsIPv6McastPktsReceived.setDescription('The number of IPv6 multicast packets received by the circuit.')
rbnSubsProfileCountTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 4), )
if mibBuilder.loadTexts: rbnSubsProfileCountTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsProfileCountTable.setDescription('This table contains counts of active subscribers by encapsulation type.')
rbnSubsProfileCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 4, 1), ).setIndexNames((1, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsProfileName"))
if mibBuilder.loadTexts: rbnSubsProfileCountEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsProfileCountEntry.setDescription('A conceptual row in the rbnSubsProfileCountTable. ')
rbnSubsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: rbnSubsProfileName.setStatus('current')
if mibBuilder.loadTexts: rbnSubsProfileName.setDescription('The profile name which applies to a set of subscribers.')
rbnSubsProfileCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 4, 1, 2), Gauge32()).setUnits('subscribers').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsProfileCount.setStatus('current')
if mibBuilder.loadTexts: rbnSubsProfileCount.setDescription('The count of active subscribers for the profile name.')
rbnSubsLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 5))
rbnSubsMaxSupportedSessions = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsMaxSupportedSessions.setStatus('current')
if mibBuilder.loadTexts: rbnSubsMaxSupportedSessions.setDescription('The maximum number of active subscriber sessions that are supported on the SmartEdge router.')
rbnSubsLicensedSessions = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsLicensedSessions.setStatus('current')
if mibBuilder.loadTexts: rbnSubsLicensedSessions.setDescription('The number of licensed subscriber sessions on the SmartEdge router.')
rbnSubsActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveSessions.setDescription('The number of active subscriber sessions on the SmartEdge router.')
rbnSubsCapacityPercentageUsed = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 2, 5, 4), RbnPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsCapacityPercentageUsed.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCapacityPercentageUsed.setDescription('The percentage of licensed subscriber sessions in use on the SmartEdge router. This value is computed as: if rbnSubsLicensedSessions equals 0 then if rbnSubsActiveSessions equals 0 then 0 else 100 else MIN((rbnSubsActiveSessions * 100)/rbnSubsLicensedSessions), 100).')
rbnSubsServiceVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4), )
if mibBuilder.loadTexts: rbnSubsServiceVolumeTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumeTable.setDescription('This table specifies service volume information on the subscriber circuits. It contains the volume octet counts for each active subscriber session for which the service is active. All MIB objects defined in the table are viewed within the context identified in the SNMP protocol (i.e. the community string in v1/v2c or the contextName in v3).')
rbnSubsServiceVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveName"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionId"), (0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIndex"))
if mibBuilder.loadTexts: rbnSubsServiceVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumeEntry.setDescription('A conceptual row in the RbnSubsServiceVolumeTable. Each row contains the service volume limit and volume octet count for each active service session.')
rbnSubsServiceVolumeLimitIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 1), Unsigned32()).setUnits('KiloBytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsServiceVolumeLimitIn.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumeLimitIn.setDescription('The volume limit in kilobytes (KB) allowed for the subscriber service to input (or receive) for this subscriber. If the value is 0, then there is no limit.')
rbnSubsServiceVolumeLimitOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 2), Unsigned32()).setUnits('KiloBytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsServiceVolumeLimitOut.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumeLimitOut.setDescription('The volume limit in kilobytes (KB) allowed for the subscriber service to output (or transmit) for this subscriber. If the value is 0, then there is no limit.')
rbnSubsServiceActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceActiveTime.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceActiveTime.setDescription('The value of sysUpTime when the service became active for this subscriber. If sysUpTime is reset to zero as a result of a reinitialization of the network management (sub)system, then the values of all TimeStamp objects are also reset.')
rbnSubsServiceVolumeOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceVolumeOctetsIn.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumeOctetsIn.setDescription('The subscriber session volume octets in count. ')
rbnSubsServiceVolumeOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 5), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceVolumeOctetsOut.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumeOctetsOut.setDescription('The subscriber session volume octets out count.')
rbnSubsServiceVolumePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceVolumePktsIn.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumePktsIn.setDescription('The subscriber session volume packet in count. ')
rbnSubsServiceVolumePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceVolumePktsOut.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceVolumePktsOut.setDescription('The subscriber session volume packet out count. ')
rbnSubsServiceIPv4VolumeOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumeOctetsIn.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumeOctetsIn.setDescription('The subscriber session volume IPv4 octets in count. ')
rbnSubsServiceIPv4VolumeOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumeOctetsOut.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumeOctetsOut.setDescription('The subscriber session volume IPv4 octets out count.')
rbnSubsServiceIPv6VolumeOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumeOctetsIn.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumeOctetsIn.setDescription('The subscriber session volume IPv6 octets in count. ')
rbnSubsServiceIPv6VolumeOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 11), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumeOctetsOut.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumeOctetsOut.setDescription('The subscriber session volume IPv6 octets out count.')
rbnSubsServiceIPv4VolumePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumePktsIn.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumePktsIn.setDescription('The subscriber session volume IPv4 packet in count. ')
rbnSubsServiceIPv4VolumePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumePktsOut.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv4VolumePktsOut.setDescription('The subscriber session volume IPv4 packet out count. ')
rbnSubsServiceIPv6VolumePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 14), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumePktsIn.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumePktsIn.setDescription('The subscriber session volume IPv6 packet in count. ')
rbnSubsServiceIPv6VolumePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 4, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumePktsOut.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIPv6VolumePktsOut.setDescription('The subscriber session volume IPv6 packet out count. ')
rbnSubsServicesTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 5), )
if mibBuilder.loadTexts: rbnSubsServicesTable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServicesTable.setDescription('This table contains services available to subscribers.')
rbnSubsServicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 5, 1), ).setIndexNames((0, "RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIndex"))
if mibBuilder.loadTexts: rbnSubsServicesEntry.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServicesEntry.setDescription('A conceptual row in the rbnSubsServicesTable. ')
rbnSubsServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnSubsServiceIndex.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceIndex.setDescription('A unique index assigned to the entry.')
rbnSubsServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 5, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceName.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceName.setDescription('The name identifying the service.')
rbnSubsServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 1, 5, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnSubsServiceTag.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServiceTag.setDescription('A tag associated with the service name which may provide additional qualification to the name.')
rbnSubsNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 3, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnSubsNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: rbnSubsNotifyEnable.setDescription('This object will provide a mechanism for enabling and disabling subscriber notifications. A value of 1 (true) indicates that subscriber notifications are enabled. A value of 2 (false) indicates that subscriber notifications are disabled.')
rbnSubsConfigErrorMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 27, 1, 3, 2), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnSubsConfigErrorMsgs.setStatus('current')
if mibBuilder.loadTexts: rbnSubsConfigErrorMsgs.setDescription('Detailed error messages that describes the mis-configured attributes that failed authentication.')
rbnSubsNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 3, 0))
rbnSubsConfigErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 27, 3, 0, 1)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitHandle"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsConfigErrorMsgs"))
if mibBuilder.loadTexts: rbnSubsConfigErrorEvent.setStatus('current')
if mibBuilder.loadTexts: rbnSubsConfigErrorEvent.setDescription('This notification signifies that the subscriber session received one or more attribute(s) referring non-existing configuration, and the subscriber session is allowed to stay up.')
rbnSubsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 1))
rbnSubsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2))
rbnSubsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 1, 1)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsCompliance = rbnSubsCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSubsCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback Subscriber MIB. This compliance is replaced by rbnSubsCompliance2')
rbnSubsCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 1, 2)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveGroup2"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsStatsGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsCompliance2 = rbnSubsCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSubsCompliance2.setDescription('The compliance statement for SNMP entities which implement the Redback Subscriber MIB. This compliance is replaced by rbnSubsCompliance3')
rbnSubsCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 1, 3)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveGroup3"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsStatsGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsCompliance3 = rbnSubsCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSubsCompliance3.setDescription('The compliance statement for SNMP entities which implement the Redback Subscriber MIB. This compliance is replaced by rbnSubsCompliance4.')
rbnSubsCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 1, 4)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveGroup3"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsStatsGroup2"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServicesGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsNotifyObjectGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsCompliance4 = rbnSubsCompliance4.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSubsCompliance4.setDescription('The compliance statement for SNMP entities which implement the Redback Subscriber MIB. ')
rbnSubsCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 1, 5)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveGroup3"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsStatsGroup2"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServicesGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsNotifyObjectGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsNotifyGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsLicenseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsCompliance5 = rbnSubsCompliance5.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSubsCompliance5.setDescription('The compliance statement for SNMP entities which implement the Redback Subscriber MIB. ')
rbnSubsCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 1, 6)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveGroup4"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsStatsGroup3"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServicesGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsNotifyObjectGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsNotifyGroup"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsLicenseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsCompliance6 = rbnSubsCompliance6.setStatus('current')
if mibBuilder.loadTexts: rbnSubsCompliance6.setDescription('The compliance statement for SNMP entities which implement the Redback Subscriber MIB. ')
rbnSubsActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 1)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitDescr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitHandle"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveStartTime"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveClear"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveAddr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSubscriberName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusIndex"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusID"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsActiveGroup = rbnSubsActiveGroup.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSubsActiveGroup.setDescription('The collection of objects which represent an active subscriber. This group is replaced by rbnSubsActiveGroup2.')
rbnSubsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 2)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCntxtCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsEncapsCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsPktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsXmitOctetsDropped"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsXmitPktsDropped"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastPktsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsStatsGroup = rbnSubsStatsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: rbnSubsStatsGroup.setDescription('The collection of objects which are generic counters of subscriber activity. This group is replaced by rbnSubsStatsGroup2')
rbnSubsActiveGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 3)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitDescr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitHandle"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveStartTime"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveClear"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveAddr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSubscriberName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusIndex"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusID"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearReason"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveResend"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsActiveGroup2 = rbnSubsActiveGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: rbnSubsActiveGroup2.setDescription('The collection of objects which represent an active subscriber.')
rbnSubsStatsGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 4)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCntxtCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsEncapsCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsPktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsXmitOctetsDropped"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsXmitPktsDropped"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastPktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsProfileCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsStatsGroup2 = rbnSubsStatsGroup2.setStatus('current')
if mibBuilder.loadTexts: rbnSubsStatsGroup2.setDescription('The collection of objects which are generic counters of subscriber activity.')
rbnSubsActiveGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 5)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitDescr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitHandle"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveStartTime"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveClear"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveAddr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveNasPortType"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveMediumType"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSubscriberName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusIndex"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusID"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearReason"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveResend"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsActiveGroup3 = rbnSubsActiveGroup3.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveGroup3.setDescription('The collection of objects which represent an active subscriber. This collection includes the objects rbnSubsActiveNasPortType and rbnSubsActiveMediumType.')
rbnSubsServicesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 6)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceTag"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceVolumeLimitIn"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceVolumeLimitOut"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceActiveTime"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceVolumeOctetsIn"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceVolumeOctetsOut"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceVolumePktsIn"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceVolumePktsOut"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv4VolumeOctetsIn"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv4VolumeOctetsOut"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv6VolumeOctetsIn"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv6VolumeOctetsOut"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv4VolumePktsIn"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv4VolumePktsOut"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv6VolumePktsIn"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsServiceIPv6VolumePktsOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsServicesGroup = rbnSubsServicesGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSubsServicesGroup.setDescription('The collection of objects which represent Service Volume attributes.')
rbnSubsNotifyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 7)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsNotifyEnable"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsConfigErrorMsgs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsNotifyObjectGroup = rbnSubsNotifyObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSubsNotifyObjectGroup.setDescription('The collection of objects related to subscriber notifications.')
rbnSubsNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 8)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsConfigErrorEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsNotifyGroup = rbnSubsNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSubsNotifyGroup.setDescription('Notification for tracking the failed attributes of subscriber active sessions.')
rbnSubsLicenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 9)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMaxSupportedSessions"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsLicensedSessions"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessions"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCapacityPercentageUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsLicenseGroup = rbnSubsLicenseGroup.setStatus('current')
if mibBuilder.loadTexts: rbnSubsLicenseGroup.setDescription('The collection of objects related to subscriber licenses.')
rbnSubsActiveGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 10)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitDescr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveCircuitHandle"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveStartTime"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveClear"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveAddr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveNasPortType"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveMediumType"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveResendSvcAcct"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSubscriberName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionSubscriberName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveSessionPointer"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveIpAddrDescr"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsBounceSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusIndex"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthRadiusID"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthName"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsReauthSessionId"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsClearReason"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsActiveResend"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsActiveGroup4 = rbnSubsActiveGroup4.setStatus('current')
if mibBuilder.loadTexts: rbnSubsActiveGroup4.setDescription('The collection of objects which represent an active subscriber. This collection includes the objects rbnSubsActiveNasPortType and rbnSubsActiveMediumType.')
rbnSubsStatsGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 27, 2, 2, 11)).setObjects(("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCntxtCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCntxtIp4OnlyCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCntxtIp6OnlyCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCntxtDualCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsCntxtLacCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsEncapsCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsPktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsXmitOctetsDropped"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsXmitPktsDropped"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsMcastPktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsProfileCount"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4OctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4OctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6OctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6OctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4PktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4PktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6PktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6PktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4McastOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4McastOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6McastOctetsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6McastOctetsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4McastPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv4McastPktsReceived"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6McastPktsSent"), ("RBN-SUBSCRIBER-ACTIVE-MIB", "rbnSubsIPv6McastPktsReceived"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnSubsStatsGroup3 = rbnSubsStatsGroup3.setStatus('current')
if mibBuilder.loadTexts: rbnSubsStatsGroup3.setDescription('The collection of objects which are generic counters of subscriber activity.')
mibBuilder.exportSymbols("RBN-SUBSCRIBER-ACTIVE-MIB", rbnSubsActiveIpPfxLen=rbnSubsActiveIpPfxLen, rbnSubsCompliance6=rbnSubsCompliance6, rbnSubsIPv6McastPktsSent=rbnSubsIPv6McastPktsSent, rbnSubsIPv6OctetsReceived=rbnSubsIPv6OctetsReceived, rbnSubsServicesGroup=rbnSubsServicesGroup, rbnSubsActiveAddr=rbnSubsActiveAddr, rbnSubsActiveEntry=rbnSubsActiveEntry, rbnSubsCntxtCountTable=rbnSubsCntxtCountTable, rbnSubsMcastPktsReceived=rbnSubsMcastPktsReceived, rbnSubsCompliance=rbnSubsCompliance, rbnSubsBounceName=rbnSubsBounceName, rbnSubsXmitPktsDropped=rbnSubsXmitPktsDropped, rbnSubsConfigErrorEvent=rbnSubsConfigErrorEvent, rbnSubsActiveClear=rbnSubsActiveClear, rbnSubsCntxtCountEntry=rbnSubsCntxtCountEntry, rbnSubsIPv6McastOctetsSent=rbnSubsIPv6McastOctetsSent, rbnSubsMcastOctetsSent=rbnSubsMcastOctetsSent, rbnSubsActiveResend=rbnSubsActiveResend, rbnSubsServiceIPv4VolumeOctetsIn=rbnSubsServiceIPv4VolumeOctetsIn, rbnSubsStatsGroup=rbnSubsStatsGroup, rbnSubsEncapsCount=rbnSubsEncapsCount, rbnSubsServicesEntry=rbnSubsServicesEntry, rbnSubsStatsTable=rbnSubsStatsTable, rbnSubsActiveIpEntry=rbnSubsActiveIpEntry, rbnSubsServiceTag=rbnSubsServiceTag, rbnSubsStats=rbnSubsStats, rbnSubsPktsSent=rbnSubsPktsSent, rbnSubsPktsReceived=rbnSubsPktsReceived, rbnSubsServiceVolumeOctetsOut=rbnSubsServiceVolumeOctetsOut, rbnSubsActiveNasPortType=rbnSubsActiveNasPortType, rbnSubsActiveGroup=rbnSubsActiveGroup, rbnSubsIPv6PktsReceived=rbnSubsIPv6PktsReceived, rbnSubsStatsEntry=rbnSubsStatsEntry, rbnSubsBounceSessionId=rbnSubsBounceSessionId, rbnSubsServiceIPv6VolumeOctetsOut=rbnSubsServiceIPv6VolumeOctetsOut, rbnSubsOctetsReceived=rbnSubsOctetsReceived, rbnSubsServiceName=rbnSubsServiceName, rbnSubsActiveGroup3=rbnSubsActiveGroup3, rbnSubsIPv4PktsSent=rbnSubsIPv4PktsSent, rbnSubsIPv4McastPktsReceived=rbnSubsIPv4McastPktsReceived, rbnSubsNotifyPrefix=rbnSubsNotifyPrefix, rbnSubsCompliance4=rbnSubsCompliance4, rbnSubsServiceIPv4VolumeOctetsOut=rbnSubsServiceIPv4VolumeOctetsOut, rbnSubsActiveIpAddrTable=rbnSubsActiveIpAddrTable, rbnSubsNotify=rbnSubsNotify, rbnSubsProfileCount=rbnSubsProfileCount, rbnSubsServiceActiveTime=rbnSubsServiceActiveTime, rbnSubsNotifyGroup=rbnSubsNotifyGroup, rbnSubsConfigErrorMsgs=rbnSubsConfigErrorMsgs, rbnSubsActiveSessionEntry=rbnSubsActiveSessionEntry, rbnSubsActiveIpAddrType=rbnSubsActiveIpAddrType, rbnSubsClear=rbnSubsClear, rbnSubsServiceIPv6VolumePktsIn=rbnSubsServiceIPv6VolumePktsIn, rbnSubsIPv4OctetsReceived=rbnSubsIPv4OctetsReceived, rbnSubsServiceVolumeLimitIn=rbnSubsServiceVolumeLimitIn, rbnSubsCompliances=rbnSubsCompliances, rbnSubsServiceIndex=rbnSubsServiceIndex, rbnSubsActiveConformance=rbnSubsActiveConformance, rbnSubsActiveSessionId=rbnSubsActiveSessionId, rbnSubsActiveIpAddrDescr=rbnSubsActiveIpAddrDescr, rbnSubsCntxtCount=rbnSubsCntxtCount, rbnSubsIPv4McastOctetsReceived=rbnSubsIPv4McastOctetsReceived, rbnSubsEncapsCountTable=rbnSubsEncapsCountTable, rbnSubsActiveIpAddr=rbnSubsActiveIpAddr, rbnSubsServiceIPv6VolumeOctetsIn=rbnSubsServiceIPv6VolumeOctetsIn, rbnSubsIPv4McastOctetsSent=rbnSubsIPv4McastOctetsSent, rbnSubsActiveIpAddrEntry=rbnSubsActiveIpAddrEntry, rbnSubsActiveMediumType=rbnSubsActiveMediumType, rbnSubsActiveCircuitHandle=rbnSubsActiveCircuitHandle, rbnSubsMcastOctetsReceived=rbnSubsMcastOctetsReceived, rbnSubsCntxtIp6OnlyCount=rbnSubsCntxtIp6OnlyCount, rbnSubsActiveName=rbnSubsActiveName, rbnSubsCntxtIp4OnlyCount=rbnSubsCntxtIp4OnlyCount, rbnSubsServiceVolumeTable=rbnSubsServiceVolumeTable, rbnSubsClearSubscriberName=rbnSubsClearSubscriberName, rbnSubsIPv6McastOctetsReceived=rbnSubsIPv6McastOctetsReceived, rbnSubsIPv6McastPktsReceived=rbnSubsIPv6McastPktsReceived, rbnSubsProfileCountEntry=rbnSubsProfileCountEntry, rbnSubsIPv6PktsSent=rbnSubsIPv6PktsSent, rbnSubsServiceVolumePktsOut=rbnSubsServiceVolumePktsOut, rbnSubsServiceVolumeEntry=rbnSubsServiceVolumeEntry, rbnSubsClearSessionId=rbnSubsClearSessionId, rbnSubsServiceVolumeOctetsIn=rbnSubsServiceVolumeOctetsIn, rbnSubsServiceIPv4VolumePktsOut=rbnSubsServiceIPv4VolumePktsOut, rbnSubsReauthRadiusIndex=rbnSubsReauthRadiusIndex, rbnSubsActiveAddrType=rbnSubsActiveAddrType, rbnSubsProfileName=rbnSubsProfileName, rbnSubsReauthSessionId=rbnSubsReauthSessionId, rbnSubsServiceIPv4VolumePktsIn=rbnSubsServiceIPv4VolumePktsIn, rbnSubsActiveSessionPointer=rbnSubsActiveSessionPointer, rbnSubsActiveSessionSubscriberName=rbnSubsActiveSessionSubscriberName, rbnSubsOctetsSent=rbnSubsOctetsSent, rbnSubsEncapsulationType=rbnSubsEncapsulationType, rbnSubsStatsGroup2=rbnSubsStatsGroup2, rbnSubsActiveCircuitDescr=rbnSubsActiveCircuitDescr, rbnSubsActiveSessions=rbnSubsActiveSessions, rbnSubsReauthRadiusID=rbnSubsReauthRadiusID, rbnSubsIPv4McastPktsSent=rbnSubsIPv4McastPktsSent, rbnSubsServicesTable=rbnSubsServicesTable, rbnSubsActiveTable=rbnSubsActiveTable, rbnSubsCompliance3=rbnSubsCompliance3, rbnSubsLicenseGroup=rbnSubsLicenseGroup, rbnSubsIPv4PktsReceived=rbnSubsIPv4PktsReceived, rbnSubsCompliance5=rbnSubsCompliance5, rbnSubsCntxtDualCount=rbnSubsCntxtDualCount, rbnSubsMcastPktsSent=rbnSubsMcastPktsSent, rbnSubsActiveObjects=rbnSubsActiveObjects, rbnSubsCntxtLacCount=rbnSubsCntxtLacCount, rbnSubscriberActiveMib=rbnSubscriberActiveMib, rbnSubsIPv4OctetsSent=rbnSubsIPv4OctetsSent, rbnSubsProfileCountTable=rbnSubsProfileCountTable, rbnSubsCompliance2=rbnSubsCompliance2, rbnSubsGroups=rbnSubsGroups, rbnSubsActiveSessionTable=rbnSubsActiveSessionTable, rbnSubsServiceVolumePktsIn=rbnSubsServiceVolumePktsIn, rbnSubsNotifyEnable=rbnSubsNotifyEnable, rbnSubsStatsGroup3=rbnSubsStatsGroup3, rbnSubsActiveResendSvcAcct=rbnSubsActiveResendSvcAcct, rbnSubsActive=rbnSubsActive, rbnSubsLicensedSessions=rbnSubsLicensedSessions, rbnSubsXmitOctetsDropped=rbnSubsXmitOctetsDropped, PYSNMP_MODULE_ID=rbnSubscriberActiveMib, rbnSubsLicense=rbnSubsLicense, rbnSubsNotifyObjectGroup=rbnSubsNotifyObjectGroup, rbnSubsReauthName=rbnSubsReauthName, rbnSubsActiveGroup4=rbnSubsActiveGroup4, rbnSubsActiveIpTable=rbnSubsActiveIpTable, rbnSubsMaxSupportedSessions=rbnSubsMaxSupportedSessions, rbnSubsServiceIPv6VolumePktsOut=rbnSubsServiceIPv6VolumePktsOut, rbnSubsActiveStartTime=rbnSubsActiveStartTime, rbnSubsEncapsCountEntry=rbnSubsEncapsCountEntry, rbnSubsActiveGroup2=rbnSubsActiveGroup2, rbnSubsCapacityPercentageUsed=rbnSubsCapacityPercentageUsed, rbnSubsClearReason=rbnSubsClearReason, rbnSubsIPv6OctetsSent=rbnSubsIPv6OctetsSent, rbnSubsServiceVolumeLimitOut=rbnSubsServiceVolumeLimitOut, rbnSubsActiveNotifications=rbnSubsActiveNotifications)
