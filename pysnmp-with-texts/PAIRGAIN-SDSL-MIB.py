#
# PySNMP MIB module PAIRGAIN-SDSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PAIRGAIN-SDSL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pgainSDSL, = mibBuilder.importSymbols("PAIRGAIN-COMMON-HD-MIB", "pgainSDSL")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, ObjectIdentity, ModuleIdentity, NotificationType, MibIdentifier, Counter32, Bits, Unsigned32, iso, TimeTicks, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "ObjectIdentity", "ModuleIdentity", "NotificationType", "MibIdentifier", "Counter32", "Bits", "Unsigned32", "iso", "TimeTicks", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
pgsdslMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 927, 1, 13, 1))
if mibBuilder.loadTexts: pgsdslMIB.setLastUpdated('9910070000Z')
if mibBuilder.loadTexts: pgsdslMIB.setOrganization('Pairgain Technologies Inc.')
if mibBuilder.loadTexts: pgsdslMIB.setContactInfo(' 14402 Franklin Avenue Tustin, CA 92780 ')
if mibBuilder.loadTexts: pgsdslMIB.setDescription('The module defines the SDSL MIB ')
sdslMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1))
class Byte(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class Short(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class SdslLineProfileType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class PgSdslTimeStamp(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class PgSdslAlarmSeverityMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disable", 1), ("enable", 2), ("notAvailable", 3))

sdsl15mPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 1), )
if mibBuilder.loadTexts: sdsl15mPerformanceTable.setStatus('current')
if mibBuilder.loadTexts: sdsl15mPerformanceTable.setDescription('This table provides the 15-minute performance history monitoring of the last 24 hours for all SDSL Errored Seconds (ES), and Unavailable Seconds (UAS).')
sdsl15mPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PAIRGAIN-SDSL-MIB", "sdsl15mHistoryId"))
if mibBuilder.loadTexts: sdsl15mPerformanceEntry.setStatus('current')
if mibBuilder.loadTexts: sdsl15mPerformanceEntry.setDescription('Entries of the SDSL 15-min performance table. All 96 entries for a 24 hour period are zeroed out and available at power up. Not all of the returned values are legitimate until the appropriate amount of time has elapsed.')
sdsl15mHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 1, 1, 1), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl15mHistoryId.setStatus('current')
if mibBuilder.loadTexts: sdsl15mHistoryId.setDescription('Identifies the history ID within the 96 15-minute performance history. ')
sdsl15mESNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 1, 1, 2), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl15mESNet.setStatus('current')
if mibBuilder.loadTexts: sdsl15mESNet.setDescription('SDSL 15-min ES count on Network side of the span.')
sdsl15mUASNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 1, 1, 3), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl15mUASNet.setStatus('current')
if mibBuilder.loadTexts: sdsl15mUASNet.setDescription('SDSL 15-min UAS count on Network side of the span.')
sdsl15mESCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 1, 1, 4), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl15mESCust.setStatus('current')
if mibBuilder.loadTexts: sdsl15mESCust.setDescription('SDSL 15-min ES count on the Customer side of the span.')
sdsl15mUASCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 1, 1, 5), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl15mUASCust.setStatus('current')
if mibBuilder.loadTexts: sdsl15mUASCust.setDescription('SDSL 15-min UAS count on the Customer side of the span.')
sdsl24hPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 2), )
if mibBuilder.loadTexts: sdsl24hPerformanceTable.setStatus('current')
if mibBuilder.loadTexts: sdsl24hPerformanceTable.setDescription('This table provides 24-hour performance history monitoring of the last 7 days for all SDSL Errored Seconds (ES), and Unavailable Seconds (UAS). All 7 entries for the 7-day history are zeroed out and available at power up. Not all of the returned values are legitimate until the appropriate number of days has elapsed.')
sdsl24hPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PAIRGAIN-SDSL-MIB", "sdsl24hHistoryId"))
if mibBuilder.loadTexts: sdsl24hPerformanceEntry.setStatus('current')
if mibBuilder.loadTexts: sdsl24hPerformanceEntry.setDescription('Entries of the SDSL 24-hour performance table ')
sdsl24hHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 2, 1, 1), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl24hHistoryId.setStatus('current')
if mibBuilder.loadTexts: sdsl24hHistoryId.setDescription('Identify the history ID within the 7 24-hour performance history. ')
sdsl24hESNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 2, 1, 2), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl24hESNet.setStatus('current')
if mibBuilder.loadTexts: sdsl24hESNet.setDescription('SDSL 24-hour ES count on the Network side of the span.')
sdsl24hUASNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 2, 1, 3), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl24hUASNet.setStatus('current')
if mibBuilder.loadTexts: sdsl24hUASNet.setDescription('SDSL 24-hour UAS count on the Network side of the span.')
sdsl24hESCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 2, 1, 4), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl24hESCust.setStatus('current')
if mibBuilder.loadTexts: sdsl24hESCust.setDescription('SDSL 24-hour ES count on the Customer side of the span.')
sdsl24hUASCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 2, 1, 5), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdsl24hUASCust.setStatus('current')
if mibBuilder.loadTexts: sdsl24hUASCust.setDescription('SDSL 24-hour UAS count on the Customer side of the span.')
sdslCurr24hPerformanceTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 3), )
if mibBuilder.loadTexts: sdslCurr24hPerformanceTable.setStatus('current')
if mibBuilder.loadTexts: sdslCurr24hPerformanceTable.setDescription('This table provides the current 24-hour performance history monitoring for all SDSL Errored Seconds (ES), and Unavailable Seconds (UAS).')
sdslCurr24hPerformanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdslCurr24hPerformanceEntry.setStatus('current')
if mibBuilder.loadTexts: sdslCurr24hPerformanceEntry.setDescription('Entries of the SDSL Current 24-hour PM counts table ')
sdslCurr24hESNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 3, 1, 1), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslCurr24hESNet.setStatus('current')
if mibBuilder.loadTexts: sdslCurr24hESNet.setDescription('SDSL Current 24-hour ES count on the Network side of the span.')
sdslCurr24hUASNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 3, 1, 2), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslCurr24hUASNet.setStatus('current')
if mibBuilder.loadTexts: sdslCurr24hUASNet.setDescription('SDSL 24-hour UAS count on the Network side of the span.')
sdslCurr24hESCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 3, 1, 3), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslCurr24hESCust.setStatus('current')
if mibBuilder.loadTexts: sdslCurr24hESCust.setDescription('SDSL 24-hour ES count on the Customer side of the span.')
sdslCurr24hUASCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 3, 1, 4), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslCurr24hUASCust.setStatus('current')
if mibBuilder.loadTexts: sdslCurr24hUASCust.setDescription('SDSL 24-hour UAS count on the Customer side of the span.')
sdslStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4), )
if mibBuilder.loadTexts: sdslStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sdslStatisticsTable.setDescription('This table lists statistics for margin, and pulse attenuation, of the SDSL loop.')
sdslStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdslStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sdslStatisticsEntry.setDescription('Entries of the SDSL line statistics table ')
sdslTipRingReversal = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 1), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslTipRingReversal.setStatus('current')
if mibBuilder.loadTexts: sdslTipRingReversal.setDescription('Current TIP/RING state on the SDSL span: 0 - TIP/RING is not reversed. 1 - TIP/RING is reversed. ')
sdslUpState = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 2), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslUpState.setStatus('current')
if mibBuilder.loadTexts: sdslUpState.setDescription('Current loop state of the span: 0 - loop is up. 1 - loop is acquiring/converging. 2 - loop is signaling. ')
sdslMarginNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 3), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginNet.setStatus('current')
if mibBuilder.loadTexts: sdslMarginNet.setDescription('Current Margin on the Network side of the span.')
sdslMarginHighNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 4), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginHighNet.setStatus('current')
if mibBuilder.loadTexts: sdslMarginHighNet.setDescription('Highest Margin on the Network side of the span.')
sdslMarginLowNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 5), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginLowNet.setStatus('current')
if mibBuilder.loadTexts: sdslMarginLowNet.setDescription('Lowest Margin on the Network side of the span.')
sdslPulseAttenuationNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 6), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslPulseAttenuationNet.setStatus('current')
if mibBuilder.loadTexts: sdslPulseAttenuationNet.setDescription('Pulse Attenuation on the Network side of the span.')
sdslMarginCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 7), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginCust.setStatus('current')
if mibBuilder.loadTexts: sdslMarginCust.setDescription('Current Margin on the Customer side of the span.')
sdslMarginHighCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 8), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginHighCust.setStatus('current')
if mibBuilder.loadTexts: sdslMarginHighCust.setDescription('Highest Margin on the Customer side of the span.')
sdslMarginLowCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 9), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginLowCust.setStatus('current')
if mibBuilder.loadTexts: sdslMarginLowCust.setDescription('Lowest Margin on the Customer side of the span.')
sdslPulseAttenuationCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 4, 1, 10), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslPulseAttenuationCust.setStatus('current')
if mibBuilder.loadTexts: sdslPulseAttenuationCust.setDescription('Pulse Attenuation on the Customer side of the span.')
sdslLineTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 5), )
if mibBuilder.loadTexts: sdslLineTable.setStatus('current')
if mibBuilder.loadTexts: sdslLineTable.setDescription('This table lists which Profiles (located at the AMC) are assigned to the particular SDSL Line.')
sdslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdslLineEntry.setStatus('current')
if mibBuilder.loadTexts: sdslLineEntry.setDescription('Entries of the SDSL line table ')
sdslLineConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 5, 1, 1), SdslLineProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslLineConfProfile.setStatus('current')
if mibBuilder.loadTexts: sdslLineConfProfile.setDescription("The value of this object identifies the row in the SDSL Line Configuration Profile Table, (sdslLineConfProfileTable), which applies for this SDSL line. The Profiles are stored on the Management card. In the case which the configuration profile has not been set, the value will be set to '0'.")
sdslLineAlarmConfProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 5, 1, 2), SdslLineProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslLineAlarmConfProfile.setStatus('current')
if mibBuilder.loadTexts: sdslLineAlarmConfProfile.setDescription("The value of this object identifies the row in the SDSL Line Alarm Configuration Profile Table, (sdslLineAlarmConfProfileTable), which applies for this SDSL line. In the case which the configuration profile has not been set, the value will be set to '0'.")
sdslAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6), )
if mibBuilder.loadTexts: sdslAlarmTable.setStatus('current')
if mibBuilder.loadTexts: sdslAlarmTable.setDescription('This table provides the SDSL alarms indication.')
sdslAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdslAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: sdslAlarmEntry.setDescription('Entries of the SDSL span alarm table ')
sdslMarginAlarmNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1, 1), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginAlarmNet.setStatus('current')
if mibBuilder.loadTexts: sdslMarginAlarmNet.setDescription('Margin Threshold Exceeded on the Network side of the span.')
sdslESAlarmNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1, 2), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslESAlarmNet.setStatus('current')
if mibBuilder.loadTexts: sdslESAlarmNet.setDescription('Errored Seconds threshold exceeded on the Network side of the span.')
sdslUASAlarmNet = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1, 3), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslUASAlarmNet.setStatus('current')
if mibBuilder.loadTexts: sdslUASAlarmNet.setDescription('Unavailable Seconds threshold exceeded on the Network side of the span.')
sdslMarginAlarmCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1, 4), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginAlarmCust.setStatus('current')
if mibBuilder.loadTexts: sdslMarginAlarmCust.setDescription('Margin Threshold Exceeded on the Customer side of the span.')
sdslESAlarmCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1, 5), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslESAlarmCust.setStatus('current')
if mibBuilder.loadTexts: sdslESAlarmCust.setDescription('Errored Seconds Exceeded on the Customer side of the span.')
sdslUASAlarmCust = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1, 6), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslUASAlarmCust.setStatus('current')
if mibBuilder.loadTexts: sdslUASAlarmCust.setDescription('Unavailable Seconds threshold exceeded on the customer side of the span.')
sdslLOSWAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 6, 1, 7), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslLOSWAlarm.setStatus('current')
if mibBuilder.loadTexts: sdslLOSWAlarm.setDescription('Loss of Sync Word (LOSW) occurred on the Network side of the SDSL loop. ')
sdslAlarmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7), )
if mibBuilder.loadTexts: sdslAlarmHistoryTable.setStatus('current')
if mibBuilder.loadTexts: sdslAlarmHistoryTable.setDescription('This table provides the SDSL alarms history')
sdslAlarmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdslAlarmHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: sdslAlarmHistoryEntry.setDescription('Entries of the SDSL Alarm History table ')
sdslMarginAlarmFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 1), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginAlarmFirst.setStatus('current')
if mibBuilder.loadTexts: sdslMarginAlarmFirst.setDescription('Date and time Margin threshold exceeded alarm first occurred')
sdslMarginAlarmLast = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 2), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginAlarmLast.setStatus('current')
if mibBuilder.loadTexts: sdslMarginAlarmLast.setDescription('Date and time Margin threshold exceeded alarm last occurred')
sdslMarginAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 3), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslMarginAlarmCount.setStatus('current')
if mibBuilder.loadTexts: sdslMarginAlarmCount.setDescription('The number of times the Margin threshold exceeded alarm has occurred ')
sdslESAlarmFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 4), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslESAlarmFirst.setStatus('current')
if mibBuilder.loadTexts: sdslESAlarmFirst.setDescription('Date and time Errored Seconds threshold exceeded alarm first occurred ')
sdslESAlarmLast = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 5), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslESAlarmLast.setStatus('current')
if mibBuilder.loadTexts: sdslESAlarmLast.setDescription('Date and time Errored Seconds threshold exceeded alarm last occurred ')
sdslESAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 6), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslESAlarmCount.setStatus('current')
if mibBuilder.loadTexts: sdslESAlarmCount.setDescription('The number of times the Errored Seconds threshold exceeded alarm has occurred')
sdslUASAlarmFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 7), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslUASAlarmFirst.setStatus('current')
if mibBuilder.loadTexts: sdslUASAlarmFirst.setDescription('Date and time Unavailable Seconds threshold exceeded alarm occurred')
sdslUASAlarmLast = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 8), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslUASAlarmLast.setStatus('current')
if mibBuilder.loadTexts: sdslUASAlarmLast.setDescription('Date and time Unavailable Seconds threshold exceeded alarm last occurred ')
sdslUASAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 9), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslUASAlarmCount.setStatus('current')
if mibBuilder.loadTexts: sdslUASAlarmCount.setDescription('The number of times the Unavailable Seconds threshold exceeded alarm has occurred')
sdslLOSWAlarmFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 10), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslLOSWAlarmFirst.setStatus('current')
if mibBuilder.loadTexts: sdslLOSWAlarmFirst.setDescription('Date and time the Loss of Sync Word alarm first occurred ')
sdslLOSWAlarmLast = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 11), PgSdslTimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslLOSWAlarmLast.setStatus('current')
if mibBuilder.loadTexts: sdslLOSWAlarmLast.setDescription('Date and time the Loss of Sync Word alarm last occurred ')
sdslLOSWAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 7, 1, 12), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslLOSWAlarmCount.setStatus('current')
if mibBuilder.loadTexts: sdslLOSWAlarmCount.setDescription('The number of times the Loss of Sync Word alarm has occurred.')
sdslLineConfProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslLineConfProfileIndexNext.setStatus('current')
if mibBuilder.loadTexts: sdslLineConfProfileIndexNext.setDescription(" This object contains an appropriate value to be used for sdslLineConfProfileIndex when creating entries in the sdslLineConfProfileTable. The value '0' indicates that no unassigned entries are available. To obtain the sdslLineConfProfileIndexNext value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
sdslLineConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 9), )
if mibBuilder.loadTexts: sdslLineConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: sdslLineConfProfileTable.setDescription('This table contains information on the sdsl line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the sdsl line.')
sdslLineConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 9, 1), ).setIndexNames((0, "PAIRGAIN-SDSL-MIB", "sdslLineConfProfileIndex"))
if mibBuilder.loadTexts: sdslLineConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sdslLineConfProfileEntry.setDescription('Each entry consists of a list of parameters that represents the configuration of an sdsl port. A profile is created in one step with all necessary parameter values and sdslLineProfileRowStatus set to createAndGo. This RowStatus object is also used to delete destroy profiles.')
sdslLineConfProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 9, 1, 1), SdslLineProfileType())
if mibBuilder.loadTexts: sdslLineConfProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sdslLineConfProfileIndex.setDescription('This object is used by the line configuration table in order to identify a row of this table')
sdslRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslRateMode.setStatus('current')
if mibBuilder.loadTexts: sdslRateMode.setDescription('Rate Mode defined in Rate Selective/Adaptive Specification for SDSL Products. Mode 1 - Fixed Rate (FR) - The channel shall operate at the rate set by the sdslRate parameter and supported at the remote unit either by default, manual switch setting, or Smart Manual mode on the modem. Support of the two-level signalling mechanism at the remote is known as Smart Manual mode. The remote unit is configured via a two-level signaling mechanism prior to the normal startup sequence. This mechanism allows the link rate to be controlled by the Central Office shelf. If the remote modem does not support the two-level signaling mechanism, the system will timeout and the default startup sequence will begin. Mode 2 - Rate Adaptive (RA) - NOT supported in this MIB yet. Allows the unit to evaluate the characteristics of the SDSL channel and adapt the data rate based upon user-defined performance criteria.')
sdslRemFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 9, 1, 3), Short()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslRemFeatures.setStatus('current')
if mibBuilder.loadTexts: sdslRemFeatures.setDescription('This will variable will reflect the features supported by the remote unit (modem) which are received during the two-level signaling mechanism that occurs before the start-up sequence. ')
sdslRate = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslRate.setStatus('current')
if mibBuilder.loadTexts: sdslRate.setDescription('The desired rate for the particular SDSL span. Set at the CO using management software ')
sdslLineConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdslLineConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdslLineConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
sdslLineAlarmConfProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdslLineAlarmConfProfileIndexNext.setStatus('current')
if mibBuilder.loadTexts: sdslLineAlarmConfProfileIndexNext.setDescription(" This object contains an appropriate value to be used for sdslLineAlarmConfProfileIndex when creating entries in the sdslLineAlarmConfTable. The value '0' indicates that no unassigned entries are available. To obtain the sdslLineAlarmConfProfileIndexNext value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
sdslLineAlarmConfProfileTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11), )
if mibBuilder.loadTexts: sdslLineAlarmConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: sdslLineAlarmConfProfileTable.setDescription('This table contains information on the sdsl line configuration. One entry in this table reflects a profile defined by a manager which can be used to configure the modem for a physical line')
sdslLineAlarmConfProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1), ).setIndexNames((0, "PAIRGAIN-SDSL-MIB", "sdslLineAlarmConfProfileIndex"))
if mibBuilder.loadTexts: sdslLineAlarmConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sdslLineAlarmConfProfileEntry.setDescription('Each entry consists of a list of parameters that represents the alarm configuration for one sdsl line. A profile is created in one step with all necessary parameter values and sdslLineAlarmConfProfileRowStatus set to createAndGo. This RowStatus object is also used to delete destroy profiles. Each entry is taken from the original Pairgain SDSL MIB called sdslAlarmSeverityEntry which provided: severity settings for SDSL alarms reporting and threshold settings for Errored Second(ES), Margin(MAR), Unavailable Seconds(UAS). ')
sdslLineAlarmConfProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 1), SdslLineProfileType())
if mibBuilder.loadTexts: sdslLineAlarmConfProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sdslLineAlarmConfProfileIndex.setDescription('This object is used by the line alarm configuration table in order to identify a row of this table')
sdslLOSWAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 2), PgSdslAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslLOSWAlarmSetting.setStatus('current')
if mibBuilder.loadTexts: sdslLOSWAlarmSetting.setDescription('Sets the severity for Loss of Sync Word alarm.')
sdslMarginThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 3), Byte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslMarginThreshold.setStatus('current')
if mibBuilder.loadTexts: sdslMarginThreshold.setDescription('Sets the SDSL Margin threshold value.')
sdslMarginAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 4), PgSdslAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslMarginAlarmSetting.setStatus('current')
if mibBuilder.loadTexts: sdslMarginAlarmSetting.setDescription('Sets the severity for Margin threshold exceeded alarm.')
sdslESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 5), Byte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslESThreshold.setStatus('current')
if mibBuilder.loadTexts: sdslESThreshold.setDescription('Sets the SDSL Errored Seconds threshold value.')
sdslESAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 6), PgSdslAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslESAlarmSetting.setStatus('current')
if mibBuilder.loadTexts: sdslESAlarmSetting.setDescription('Sets the severity for Errored Seconds threshold exceeded alarm.')
sdslUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 7), Byte()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslUASThreshold.setStatus('current')
if mibBuilder.loadTexts: sdslUASThreshold.setDescription('Sets the SDSL Unavailable Seconds threshold value.')
sdslUASAlarmSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 8), PgSdslAlarmSeverityMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdslUASAlarmSetting.setStatus('current')
if mibBuilder.loadTexts: sdslUASAlarmSetting.setDescription('Sets the severity for UAS threshold exceeded alarm.')
sdslLineAlarmConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 11, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sdslLineAlarmConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sdslLineAlarmConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. If the implementator of this MIB has choosen not to implement 'dynamic assignment' of profiles, this object is not useful and should return noSuchName upon SNMP request.")
pgSdslModGenTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12), )
if mibBuilder.loadTexts: pgSdslModGenTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenTable.setDescription('This table provides general information about the SDSL modem. pgSdslModGenVersionNum: Contains the Modem software version number pgSdslModGenListNum: When used with the vendor number the list number provides a unique model number identifier for the modem. pgSdslModGenVendNum: A unique number given to every Pairgain product. pgSdslModGenFeatures A 32 bit flag that has bits set according to feature supported by the modem. pgSdslModGenSerialNum 16 bits, used with manufacturing date to give unique identifier for the modem. pgSdslModGenMfgDate 16 bit, used with the Serial number to give a unique identifier for the modem. ')
pgSdslModGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslModGenEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenEntry.setDescription('Entries (one per port) for general modem information.')
pgSdslModGenVersionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12, 1, 1), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModGenVersionNum.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenVersionNum.setDescription('Identifies the software version number of the modem. ')
pgSdslModGenListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12, 1, 2), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModGenListNum.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenListNum.setDescription('Identifies the list number of the modem. ')
pgSdslModGenVendNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12, 1, 3), Byte()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModGenVendNum.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenVendNum.setDescription('Identifies the vendor number of the modem. The vendor number is a Pair Gain product unique identifier. ')
pgSdslModGenFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModGenFeatures.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenFeatures.setDescription('Contains the feature bytes from the modem. ')
pgSdslModGenSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12, 1, 5), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModGenSerialNum.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenSerialNum.setDescription("Contains the Serial number of the modem read from the modem's NVRAM. ")
pgSdslModGenMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 12, 1, 6), Short()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModGenMfgDate.setStatus('current')
if mibBuilder.loadTexts: pgSdslModGenMfgDate.setDescription("Contains the Manufacturing date of the modem read from the modem's NVRAM. ")
pgSdslModStatTable = MibTable((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13), )
if mibBuilder.loadTexts: pgSdslModStatTable.setStatus('current')
if mibBuilder.loadTexts: pgSdslModStatTable.setDescription('This table provides modem statistics gathered from the modem through EOC messages. These statistics correspond to a subset of those in the standard ifTable. Ethernet port statistics are given in the following objects: pgSdslModEthOperStatus: the status of the ethernet link. pgSdslModEthInOctets pgSdslModEthInUcastPkts pgSdslModEthInNUcastPkts pgSdslModEthInDiscards pgSdslModEthInErrors pgSdslModEthOutOctets pgSdslModEthOutUcastPkts pgSdslModEthOutNUcastPkts pgSdslModEthOutErrors SDSL port statistics are given in the following objects: pgSdslModDslInOctets pgSdslModDslInUcastPkts pgSdslModDslInNUcastPkts pgSdslModDslInDiscards pgSdslModDslInErrors pgSdslModDslOutOctets pgSdslModDslOutUcastPkts pgSdslModDslOutNUcastPkts pgSdslModDslOutErrors ')
pgSdslModStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pgSdslModStatEntry.setStatus('current')
if mibBuilder.loadTexts: pgSdslModStatEntry.setDescription('Entries (one per port) for the modem statistics.')
pgSdslModEthOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthOperStatus.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthOperStatus.setDescription("Identifies the status of the modem's ethernet port. Up or Down ")
pgSdslModEthInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthInOctets.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthInOctets.setDescription("modem's Ethernet ifInOctet count ")
pgSdslModEthInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthInUcastPkts.setDescription("modem's Ethernet ifInUcastPkts count ")
pgSdslModEthInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthInNUcastPkts.setDescription("modem's Ethernet ifNUcastPkts count ")
pgSdslModEthInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthInDiscards.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthInDiscards.setDescription("modem's Ethernet ifInDiscards count ")
pgSdslModEthInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthInErrors.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthInErrors.setDescription("modem's Ethernet ifInErrors count ")
pgSdslModEthOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthOutOctets.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthOutOctets.setDescription("modem's Ethernet ifOutOctets count ")
pgSdslModEthOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthOutUcastPkts.setDescription("modem's Ethernet ifOutUcastPkts count ")
pgSdslModEthOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthOutNUcastPkts.setDescription("modem's Ethernet ifOutNUcastPkts count ")
pgSdslModEthOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModEthOutErrors.setStatus('current')
if mibBuilder.loadTexts: pgSdslModEthOutErrors.setDescription("modem's Ethernet ifOutErrors count ")
pgSdslModDslInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslInOctets.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslInOctets.setDescription("modem's Dsl ifInOctets count ")
pgSdslModDslInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslInUcastPkts.setDescription("modem's Dsl ifInUcastPkts count ")
pgSdslModDslInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslInNUcastPkts.setDescription("modem's Dsl ifInNUcastPkts count ")
pgSdslModDslInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslInDiscards.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslInDiscards.setDescription("modem's Dsl ifInDiscards count ")
pgSdslModDslInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslInErrors.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslInErrors.setDescription("modem's Dsl ifInErrors count ")
pgSdslModDslOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslOutOctets.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslOutOctets.setDescription("modem's Dsl ifOutOctets count ")
pgSdslModDslOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslOutUcastPkts.setDescription("modem's Dsl ifOutUcastPkts count ")
pgSdslModDslOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslOutNUcastPkts.setDescription("modem's Dsl ifOutNUcastPkts count ")
pgSdslModDslOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 927, 1, 13, 1, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pgSdslModDslOutErrors.setStatus('current')
if mibBuilder.loadTexts: pgSdslModDslOutErrors.setDescription("modem's Dsl ifOutErrors count ")
mibBuilder.exportSymbols("PAIRGAIN-SDSL-MIB", sdslCurr24hUASCust=sdslCurr24hUASCust, sdslLineAlarmConfProfileTable=sdslLineAlarmConfProfileTable, pgSdslModDslOutErrors=pgSdslModDslOutErrors, PgSdslAlarmSeverityMode=PgSdslAlarmSeverityMode, sdslAlarmTable=sdslAlarmTable, pgSdslModGenTable=pgSdslModGenTable, pgSdslModEthInUcastPkts=pgSdslModEthInUcastPkts, sdslMarginHighNet=sdslMarginHighNet, sdslLineConfProfile=sdslLineConfProfile, pgSdslModGenFeatures=pgSdslModGenFeatures, sdslTipRingReversal=sdslTipRingReversal, pgSdslModDslInNUcastPkts=pgSdslModDslInNUcastPkts, pgSdslModGenSerialNum=pgSdslModGenSerialNum, sdsl15mUASCust=sdsl15mUASCust, sdslRemFeatures=sdslRemFeatures, sdslLineConfProfileTable=sdslLineConfProfileTable, sdslLineAlarmConfProfileIndexNext=sdslLineAlarmConfProfileIndexNext, sdslStatisticsEntry=sdslStatisticsEntry, sdsl24hPerformanceEntry=sdsl24hPerformanceEntry, PgSdslTimeStamp=PgSdslTimeStamp, sdslMibObjects=sdslMibObjects, sdslPulseAttenuationNet=sdslPulseAttenuationNet, sdsl24hESCust=sdsl24hESCust, sdslMarginThreshold=sdslMarginThreshold, sdslMarginAlarmCust=sdslMarginAlarmCust, sdslUASAlarmNet=sdslUASAlarmNet, sdslMarginAlarmLast=sdslMarginAlarmLast, pgSdslModStatEntry=pgSdslModStatEntry, pgSdslModEthOutUcastPkts=pgSdslModEthOutUcastPkts, sdsl15mESNet=sdsl15mESNet, sdslStatisticsTable=sdslStatisticsTable, pgSdslModDslOutUcastPkts=pgSdslModDslOutUcastPkts, sdslLineEntry=sdslLineEntry, sdsl24hESNet=sdsl24hESNet, sdslRateMode=sdslRateMode, sdslMarginNet=sdslMarginNet, sdsl24hUASNet=sdsl24hUASNet, sdslLineAlarmConfProfileEntry=sdslLineAlarmConfProfileEntry, sdslESAlarmNet=sdslESAlarmNet, sdslESAlarmFirst=sdslESAlarmFirst, sdslESAlarmSetting=sdslESAlarmSetting, pgSdslModGenVersionNum=pgSdslModGenVersionNum, sdslUASAlarmCust=sdslUASAlarmCust, sdsl15mESCust=sdsl15mESCust, sdslESAlarmCount=sdslESAlarmCount, pgSdslModEthInOctets=pgSdslModEthInOctets, pgsdslMIB=pgsdslMIB, sdslMarginLowCust=sdslMarginLowCust, sdslMarginAlarmCount=sdslMarginAlarmCount, sdslCurr24hPerformanceEntry=sdslCurr24hPerformanceEntry, sdsl24hHistoryId=sdsl24hHistoryId, sdslLOSWAlarm=sdslLOSWAlarm, sdsl15mPerformanceTable=sdsl15mPerformanceTable, pgSdslModGenVendNum=pgSdslModGenVendNum, pgSdslModDslInErrors=pgSdslModDslInErrors, sdslLineConfProfileEntry=sdslLineConfProfileEntry, sdslLineAlarmConfProfileRowStatus=sdslLineAlarmConfProfileRowStatus, sdslRate=sdslRate, pgSdslModEthOutNUcastPkts=pgSdslModEthOutNUcastPkts, pgSdslModDslInOctets=pgSdslModDslInOctets, pgSdslModDslInDiscards=pgSdslModDslInDiscards, sdslESAlarmLast=sdslESAlarmLast, pgSdslModGenEntry=pgSdslModGenEntry, pgSdslModEthOutErrors=pgSdslModEthOutErrors, sdslMarginAlarmNet=sdslMarginAlarmNet, sdslUASAlarmCount=sdslUASAlarmCount, sdslCurr24hPerformanceTable=sdslCurr24hPerformanceTable, sdslLineAlarmConfProfile=sdslLineAlarmConfProfile, sdslPulseAttenuationCust=sdslPulseAttenuationCust, sdslUASAlarmFirst=sdslUASAlarmFirst, pgSdslModDslOutOctets=pgSdslModDslOutOctets, sdslLOSWAlarmLast=sdslLOSWAlarmLast, sdslESThreshold=sdslESThreshold, pgSdslModGenMfgDate=pgSdslModGenMfgDate, sdslLineAlarmConfProfileIndex=sdslLineAlarmConfProfileIndex, sdslLOSWAlarmFirst=sdslLOSWAlarmFirst, pgSdslModDslOutNUcastPkts=pgSdslModDslOutNUcastPkts, sdslMarginCust=sdslMarginCust, sdsl24hUASCust=sdsl24hUASCust, sdslCurr24hESNet=sdslCurr24hESNet, sdsl15mHistoryId=sdsl15mHistoryId, sdslAlarmHistoryEntry=sdslAlarmHistoryEntry, sdslLOSWAlarmCount=sdslLOSWAlarmCount, pgSdslModStatTable=pgSdslModStatTable, sdslCurr24hESCust=sdslCurr24hESCust, sdslMarginHighCust=sdslMarginHighCust, pgSdslModDslInUcastPkts=pgSdslModDslInUcastPkts, sdslLineConfProfileIndex=sdslLineConfProfileIndex, pgSdslModGenListNum=pgSdslModGenListNum, pgSdslModEthInDiscards=pgSdslModEthInDiscards, PYSNMP_MODULE_ID=pgsdslMIB, sdslMarginAlarmSetting=sdslMarginAlarmSetting, sdslESAlarmCust=sdslESAlarmCust, sdslMarginAlarmFirst=sdslMarginAlarmFirst, sdslLOSWAlarmSetting=sdslLOSWAlarmSetting, sdslAlarmHistoryTable=sdslAlarmHistoryTable, sdslUASThreshold=sdslUASThreshold, sdslLineConfProfileRowStatus=sdslLineConfProfileRowStatus, pgSdslModEthOutOctets=pgSdslModEthOutOctets, pgSdslModEthOperStatus=pgSdslModEthOperStatus, sdsl15mUASNet=sdsl15mUASNet, Short=Short, sdslCurr24hUASNet=sdslCurr24hUASNet, SdslLineProfileType=SdslLineProfileType, sdslUASAlarmLast=sdslUASAlarmLast, sdsl24hPerformanceTable=sdsl24hPerformanceTable, sdslLineConfProfileIndexNext=sdslLineConfProfileIndexNext, sdsl15mPerformanceEntry=sdsl15mPerformanceEntry, sdslAlarmEntry=sdslAlarmEntry, pgSdslModEthInErrors=pgSdslModEthInErrors, pgSdslModEthInNUcastPkts=pgSdslModEthInNUcastPkts, sdslUASAlarmSetting=sdslUASAlarmSetting, Byte=Byte, sdslUpState=sdslUpState, sdslLineTable=sdslLineTable, sdslMarginLowNet=sdslMarginLowNet)
