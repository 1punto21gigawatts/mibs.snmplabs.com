#
# PySNMP MIB module AMIMEGARAIDMIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AMIMEGARAIDMIF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, Unsigned32, TimeTicks, Counter32, Counter64, NotificationType, enterprises, MibIdentifier, Bits, ModuleIdentity, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "Unsigned32", "TimeTicks", "Counter32", "Counter64", "NotificationType", "enterprises", "MibIdentifier", "Bits", "ModuleIdentity", "IpAddress", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DmiInteger(Integer32):
    pass

class DmiOctetstring(OctetString):
    pass

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

ami = MibIdentifier((1, 3, 6, 1, 4, 1, 16))
megaraid = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1))
mifmib = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1, 2))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 16, 1, 2, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines attributes common to all components.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('The name of the manufacturer that produced this component.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('The name of the component.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('The version for the component.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('The serial number for this instance of this component.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time & date of the lastest installation of this component.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vTheVerifyIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is still installed and working.')
tControllerInformation = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2), )
if mibBuilder.loadTexts: tControllerInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tControllerInformation.setDescription('This group contains Megaraid common information')
eControllerInformation = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"), (0, "AMIMEGARAIDMIF-MIB", "a2Adpadapternumber"))
if mibBuilder.loadTexts: eControllerInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eControllerInformation.setDescription('')
a2Adpadapternumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Adpadapternumber.setStatus('mandatory')
if mibBuilder.loadTexts: a2Adpadapternumber.setDescription('The adapter number for this instance of adapter object')
a2Firmwareversion = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Firmwareversion.setStatus('mandatory')
if mibBuilder.loadTexts: a2Firmwareversion.setDescription('The firmware version of this adapter.')
a2Biosversion = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Biosversion.setStatus('mandatory')
if mibBuilder.loadTexts: a2Biosversion.setDescription('The bios version of this adapter.')
a2Numlogicaldrives = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Numlogicaldrives.setStatus('mandatory')
if mibBuilder.loadTexts: a2Numlogicaldrives.setDescription('The number of logical drives attatched to this controller.')
a2Dramsizeinmb = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Dramsizeinmb.setStatus('mandatory')
if mibBuilder.loadTexts: a2Dramsizeinmb.setDescription('Amount of DRAM in MB present on this adapter')
a2Chipsettype = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(225, 226, 97))).clone(namedValues=NamedValues(("vIntelneptuneormercury", 225), ("vTriton", 226), ("vOthers", 97)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Chipsettype.setStatus('mandatory')
if mibBuilder.loadTexts: a2Chipsettype.setDescription('Motherboard Chipset Type for which the Adapter ASIC is Configure .')
a2Rebuildrateinpercent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 7), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2Rebuildrateinpercent.setStatus('mandatory')
if mibBuilder.loadTexts: a2Rebuildrateinpercent.setDescription('Rebuild Rate for this Adapter. This determines the Priority of Rebuild/Check-Consistency/Reconstruct Operations versus the Read-Write Operations.')
a2Flushinterval = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 10))).clone(namedValues=NamedValues(("vTwosec", 2), ("vFoursec", 4), ("vSixsec", 6), ("vEightsec", 8), ("vTensec", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2Flushinterval.setStatus('mandatory')
if mibBuilder.loadTexts: a2Flushinterval.setDescription('Internal Cache Flush Interval for Logical Drives in WriteBack Mode.')
a2Maxconcurrentcmds = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Maxconcurrentcmds.setStatus('mandatory')
if mibBuilder.loadTexts: a2Maxconcurrentcmds.setDescription('Maximum Concurrent Commands Supported by the Adapter.')
a2Spinupdelay = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Spinupdelay.setStatus('mandatory')
if mibBuilder.loadTexts: a2Spinupdelay.setDescription('This is the Spinup Delay for Spinning Up Physical Drives at Firmware Initialization Time. The Physical Drives are divided into Groups, each containing the number of drives indicated by the spinupCount variable. spinupDelay variable is the amount of delay used before the drives in the next group are issued a SPINUP Command.')
a2Spinupcount = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Spinupcount.setStatus('mandatory')
if mibBuilder.loadTexts: a2Spinupcount.setDescription('This is the Spinup Count for Spinning up Physical Drives at Firmware Initialization Time. The Physical Drives are divided into Groups, each containing the number of drives indicated by this variable. All the drives in a group are issued SPINUP Command without any delay. Next group is given SPINUP Commands after a delay indicated by the spinupDelay variable.')
a2Adpioreadspersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Adpioreadspersec.setStatus('mandatory')
if mibBuilder.loadTexts: a2Adpioreadspersec.setDescription('Number of IO Reads/sec statistics for this adapter.')
a2Adpiowritespersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Adpiowritespersec.setStatus('mandatory')
if mibBuilder.loadTexts: a2Adpiowritespersec.setDescription('Number of IO writes/sec statistics for this adapter.')
a2Adpreadkbspersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Adpreadkbspersec.setStatus('mandatory')
if mibBuilder.loadTexts: a2Adpreadkbspersec.setDescription('Amount of Data Transferred in KBs/sec due to READ Transfers.')
a2Adpwritekbspersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Adpwritekbspersec.setStatus('mandatory')
if mibBuilder.loadTexts: a2Adpwritekbspersec.setDescription('Amount of Data Transferred in KBs/sec due to Write Transfers.')
a2Adpreadfailurespersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Adpreadfailurespersec.setStatus('mandatory')
if mibBuilder.loadTexts: a2Adpreadfailurespersec.setDescription('Number of Read-Failures/sec statistics for this adapter.')
a2Adpwritefailurespersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Adpwritefailurespersec.setStatus('mandatory')
if mibBuilder.loadTexts: a2Adpwritefailurespersec.setDescription('Number of write-Failures/sec statistics for this adapter.')
a2Scanchannels = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vScanover", 1), ("vStartscan", 2), ("vScaninprog", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a2Scanchannels.setStatus('mandatory')
if mibBuilder.loadTexts: a2Scanchannels.setDescription('Use this Variable to Discover the Non-Disk Devices attached to the Adapter. Set this Variable to startscan (an integer value of 2) to start the Channel Scanning.')
a2Logicalview = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 19), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Logicalview.setStatus('mandatory')
if mibBuilder.loadTexts: a2Logicalview.setDescription('logical drive status for this adpater')
a2Physicalview = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 2, 1, 20), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a2Physicalview.setStatus('mandatory')
if mibBuilder.loadTexts: a2Physicalview.setDescription('logical drive status for this adpater')
tLogicalDriveInformation = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3), )
if mibBuilder.loadTexts: tLogicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tLogicalDriveInformation.setDescription('This group contains Logical Drive common information')
eLogicalDriveInformation = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"), (0, "AMIMEGARAIDMIF-MIB", "a3Ldadapternumber"), (0, "AMIMEGARAIDMIF-MIB", "a3Logicaldrivenumber"))
if mibBuilder.loadTexts: eLogicalDriveInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eLogicalDriveInformation.setDescription('')
a3Ldadapternumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Ldadapternumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3Ldadapternumber.setDescription('The adapter number for this instance of adpter/logical drive.')
a3Logicaldrivenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Logicaldrivenumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3Logicaldrivenumber.setDescription('The logical drive number.')
a3Raidlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5))).clone(namedValues=NamedValues(("vRaid0", 0), ("vRaid1", 1), ("vRaid3", 3), ("vRaid5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Raidlevel.setStatus('mandatory')
if mibBuilder.loadTexts: a3Raidlevel.setDescription('The Raid level of this logical drive.')
a3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("vOffline", 0), ("vDegraded", 1), ("vOptimal", 2), ("vInitialize", 3), ("vCheckconsistency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3Status.setStatus('mandatory')
if mibBuilder.loadTexts: a3Status.setDescription('The current status of this Logical drive.')
a3Sizeinmb = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Sizeinmb.setStatus('mandatory')
if mibBuilder.loadTexts: a3Sizeinmb.setDescription('The Configured size of this logical drive(in MB).')
a3Stripesize = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 8, 16, 32, 64, 128, 256))).clone(namedValues=NamedValues(("vOnekb", 2), ("vTwokb", 4), ("vFourkb", 8), ("vEightkb", 16), ("vSixteenkb", 32), ("vThirtytwokb", 64), ("vSixtyfourkb", 128), ("vOnetwentyeightkb", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Stripesize.setStatus('mandatory')
if mibBuilder.loadTexts: a3Stripesize.setDescription('The Configured stripe size of this logical drive(in MB).')
a3Readpolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vNormal", 0), ("vReadahead", 1), ("vAdaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3Readpolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a3Readpolicy.setDescription('The readpolicy logical drive(in MB).')
a3Writepolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vWritethru", 0), ("vWriteback", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3Writepolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a3Writepolicy.setDescription('The write policy logical drive(in MB).')
a3Cachepolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vCachedio", 0), ("vDirectio", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3Cachepolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a3Cachepolicy.setDescription('The cache policy logical drive(in MB).')
a3Numberofspans = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Numberofspans.setStatus('mandatory')
if mibBuilder.loadTexts: a3Numberofspans.setDescription('')
a3Numberofstripes = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Numberofstripes.setStatus('mandatory')
if mibBuilder.loadTexts: a3Numberofstripes.setDescription('')
a3Ldioreadspersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Ldioreadspersec.setStatus('mandatory')
if mibBuilder.loadTexts: a3Ldioreadspersec.setDescription('')
a3Ldiowritespersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Ldiowritespersec.setStatus('mandatory')
if mibBuilder.loadTexts: a3Ldiowritespersec.setDescription('')
a3Ldreadskbspersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Ldreadskbspersec.setStatus('mandatory')
if mibBuilder.loadTexts: a3Ldreadskbspersec.setDescription('')
a3Ldwritekbspersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 15), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Ldwritekbspersec.setStatus('mandatory')
if mibBuilder.loadTexts: a3Ldwritekbspersec.setDescription('')
a3Ldioreadfailurespersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 16), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Ldioreadfailurespersec.setStatus('mandatory')
if mibBuilder.loadTexts: a3Ldioreadfailurespersec.setDescription('')
a3Ldwritefailurespersec = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 17), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Ldwritefailurespersec.setStatus('mandatory')
if mibBuilder.loadTexts: a3Ldwritefailurespersec.setDescription('')
a3Progress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 18), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3Progress.setStatus('mandatory')
if mibBuilder.loadTexts: a3Progress.setDescription('Shows the Initialization or Check Consistency Progress inPercent ge')
a3Allattributes = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 3, 1, 19), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3Allattributes.setStatus('mandatory')
if mibBuilder.loadTexts: a3Allattributes.setDescription('Shows All Attributes Of this logical Drive As Octet String')
tPhysicalDeviceInformation = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4), )
if mibBuilder.loadTexts: tPhysicalDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalDeviceInformation.setDescription('SCSI physical device information.')
ePhysicalDeviceInformation = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"), (0, "AMIMEGARAIDMIF-MIB", "a4Physadapternumber"), (0, "AMIMEGARAIDMIF-MIB", "a4Physchannel"), (0, "AMIMEGARAIDMIF-MIB", "a4Targetid"))
if mibBuilder.loadTexts: ePhysicalDeviceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalDeviceInformation.setDescription('')
a4Physadapternumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Physadapternumber.setStatus('mandatory')
if mibBuilder.loadTexts: a4Physadapternumber.setDescription('The controller number this drive is connected to. (0-based)')
a4Physchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Physchannel.setStatus('mandatory')
if mibBuilder.loadTexts: a4Physchannel.setDescription('channel number on adapter')
a4Targetid = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Targetid.setStatus('mandatory')
if mibBuilder.loadTexts: a4Targetid.setDescription('SCSI Target ID of this device')
a4State = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vReady", 1), ("vOnline", 3), ("vFailed", 4), ("vRebuild", 5), ("vHotspare", 6), ("vNotResponding", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a4State.setStatus('mandatory')
if mibBuilder.loadTexts: a4State.setDescription('Current State of this physical drive')
a4Arrayposition = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Arrayposition.setStatus('mandatory')
if mibBuilder.loadTexts: a4Arrayposition.setDescription('array position of this disk')
a4Sizemb = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Sizemb.setStatus('mandatory')
if mibBuilder.loadTexts: a4Sizemb.setDescription('Actual size of this physical drive')
a4Devicetype = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("vDisk", 0), ("vTape", 1), ("vPrinter", 2), ("vProcessor", 3), ("vWorm", 4), ("vScanner", 6), ("vOptical", 7), ("vChanger", 8), ("vCommunication", 9), ("vAsynchronouslow", 10), ("vAsynchronoushigh", 11), ("vReservedlow", 12), ("vNotResponding", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Devicetype.setStatus('mandatory')
if mibBuilder.loadTexts: a4Devicetype.setDescription('The type of physical device (cdrom, tape, disk, etc).')
a4Inquirystring = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 8), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Inquirystring.setStatus('mandatory')
if mibBuilder.loadTexts: a4Inquirystring.setDescription('SCSI Inquiry String of this device')
a4Scsilevel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vScsi1", 1), ("vScsi2", 2), ("vUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Scsilevel.setStatus('mandatory')
if mibBuilder.loadTexts: a4Scsilevel.setDescription('ANSI SCSI Level Conformance of this device')
a4Syncnegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vEnable", 1), ("vDisable", 2), ("vUnknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Syncnegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: a4Syncnegotiation.setDescription('This indicates whether firmware has been enabled to perform Synchrous negotiation')
a4Qtags = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOne", 1), ("vTwo", 2), ("vThree", 3), ("vFour", 4), ("vEnhancedqtagscheduling", 5), ("vUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Qtags.setStatus('mandatory')
if mibBuilder.loadTexts: a4Qtags.setDescription('This indicates maximum number of concurrent commands that can be issued to thisdevice')
a4Rebuildprogress = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 12), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a4Rebuildprogress.setStatus('mandatory')
if mibBuilder.loadTexts: a4Rebuildprogress.setDescription('This Field Shows the Rebuild Progress In Percent. If There Is No Rebuild Started Then The Rebuild Progress Shown Will Be Zero Percent.')
a4Mediumerrors = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 13), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Mediumerrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4Mediumerrors.setDescription('Medium error occured')
a4Othererrors = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 14), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Othererrors.setStatus('mandatory')
if mibBuilder.loadTexts: a4Othererrors.setDescription('Other errors occured')
a4Allattributes = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 4, 1, 15), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a4Allattributes.setStatus('mandatory')
if mibBuilder.loadTexts: a4Allattributes.setDescription('logical drive status for this adpater')
tChannels = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 5), )
if mibBuilder.loadTexts: tChannels.setStatus('mandatory')
if mibBuilder.loadTexts: tChannels.setDescription('A list of channel Entries containing properties about scsi channels')
eChannels = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 5, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"), (0, "AMIMEGARAIDMIF-MIB", "a5Chanadapternumber"), (0, "AMIMEGARAIDMIF-MIB", "a5Channel"))
if mibBuilder.loadTexts: eChannels.setStatus('mandatory')
if mibBuilder.loadTexts: eChannels.setDescription('')
a5Chanadapternumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 5, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Chanadapternumber.setStatus('mandatory')
if mibBuilder.loadTexts: a5Chanadapternumber.setDescription('The Adapter Number')
a5Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 5, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Channel.setStatus('mandatory')
if mibBuilder.loadTexts: a5Channel.setDescription('Channel Number')
a5Terminations = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vDisabled", 0), ("vHigher8bits", 1), ("vWideterminations", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Terminations.setStatus('mandatory')
if mibBuilder.loadTexts: a5Terminations.setDescription('Current Terminations effective on this channel')
a5Channelstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vQuit", 0), ("vActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a5Channelstatus.setStatus('mandatory')
if mibBuilder.loadTexts: a5Channelstatus.setDescription('Current Activity status')
tAlertManagementInformation = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 6), )
if mibBuilder.loadTexts: tAlertManagementInformation.setStatus('mandatory')
if mibBuilder.loadTexts: tAlertManagementInformation.setDescription('Alert Management Information')
eAlertManagementInformation = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 6, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eAlertManagementInformation.setStatus('mandatory')
if mibBuilder.loadTexts: eAlertManagementInformation.setDescription('')
a6Dmiindication = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a6Dmiindication.setStatus('mandatory')
if mibBuilder.loadTexts: a6Dmiindication.setDescription('Indicates whether error reporting using dmiindication has been enabled ')
a6Ams2alerts = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a6Ams2alerts.setStatus('mandatory')
if mibBuilder.loadTexts: a6Ams2alerts.setDescription('Indicates whether error reporting using AMS2 alerts has been enabled ')
a6Eventlog = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vDisabled", 0), ("vEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a6Eventlog.setStatus('mandatory')
if mibBuilder.loadTexts: a6Eventlog.setDescription('Indicates whether error reporting using NT event log has been enabled ')
tGlobalinfo = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 7), )
if mibBuilder.loadTexts: tGlobalinfo.setStatus('mandatory')
if mibBuilder.loadTexts: tGlobalinfo.setDescription('Global Controller and logical drive information')
eGlobalinfo = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 7, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eGlobalinfo.setStatus('mandatory')
if mibBuilder.loadTexts: eGlobalinfo.setDescription('')
a7Globalcltrinfo = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 7, 1, 1), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a7Globalcltrinfo.setStatus('mandatory')
if mibBuilder.loadTexts: a7Globalcltrinfo.setDescription('global controller information')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 99), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group maps the DMI attributes to SNMP.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 99, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a99AmiMegaraidMib = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 99, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99AmiMegaraidMib.setStatus('mandatory')
if mibBuilder.loadTexts: a99AmiMegaraidMib.setDescription('The MIB name that defines this MIF')
a99MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 99, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a99MibOid.setDescription('The MIB OID that corresponds to this MIF')
a99DisableTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 99, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a99DisableTraps.setStatus('mandatory')
if mibBuilder.loadTexts: a99DisableTraps.setDescription('Setting this value to 1 disables trap generation.')
tCompositeDriveAlerts = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103), )
if mibBuilder.loadTexts: tCompositeDriveAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: tCompositeDriveAlerts.setDescription('')
eCompositeDriveAlerts = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"), (0, "AMIMEGARAIDMIF-MIB", "a103AssociatedGroup"))
if mibBuilder.loadTexts: eCompositeDriveAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: eCompositeDriveAlerts.setDescription('')
a103EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vCompositeDriveStatusChange", 1), ("vCompositeDriveRecoveryStarted", 2), ("vCompositeDriveRecoveryCompleted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventType.setDescription('The type of event that has occurred.')
a103EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSeverity.setDescription('The severity of this event.')
a103IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a103IsEventStateBased.setDescription('')
a103EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventStateKey.setDescription('')
a103AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a103AssociatedGroup.setDescription('')
a103EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSystem.setDescription('')
a103EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSubsystem.setDescription('')
a103EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a103EventSolution.setDescription('')
a103InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a103InstanceDataPresent.setDescription('')
a103VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 10), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a103VendorSpecificMessage.setDescription('')
a103VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a103VendorSpecificData.setDescription('')
a103VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 103, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a103VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a103VendorTrapNumber.setDescription('')
tPhysicalDriveAlerts = MibTable((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104), )
if mibBuilder.loadTexts: tPhysicalDriveAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: tPhysicalDriveAlerts.setDescription('')
ePhysicalDriveAlerts = MibTableRow((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1), ).setIndexNames((0, "AMIMEGARAIDMIF-MIB", "DmiComponentIndex"), (0, "AMIMEGARAIDMIF-MIB", "a104AssociatedGroup"))
if mibBuilder.loadTexts: ePhysicalDriveAlerts.setStatus('mandatory')
if mibBuilder.loadTexts: ePhysicalDriveAlerts.setDescription('')
a104EventType = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vPhysicalDriveStatusChange", 1), ("vPhysicalDriveRemoved", 2), ("vPhysicalDriveAppeared", 3), ("vHotSpareCreated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventType.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventType.setDescription('The type of event that has occurred.')
a104EventSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 10, 12))).clone(namedValues=NamedValues(("vMonitor", 1), ("vInformation", 2), ("vOk", 4), ("vNon-critical", 8), ("vCritical", 10), ("vNon-recoverable", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSeverity.setDescription('The severity of this event.')
a104IsEventStateBased = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104IsEventStateBased.setStatus('mandatory')
if mibBuilder.loadTexts: a104IsEventStateBased.setDescription('')
a104EventStateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventStateKey.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventStateKey.setDescription('')
a104AssociatedGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 5), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104AssociatedGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a104AssociatedGroup.setDescription('')
a104EventSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSystem.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSystem.setDescription('')
a104EventSubsystem = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSubsystem.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSubsystem.setDescription('')
a104EventSolution = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104EventSolution.setStatus('mandatory')
if mibBuilder.loadTexts: a104EventSolution.setDescription('')
a104InstanceDataPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104InstanceDataPresent.setStatus('mandatory')
if mibBuilder.loadTexts: a104InstanceDataPresent.setDescription('')
a104VendorSpecificMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 10), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104VendorSpecificMessage.setStatus('mandatory')
if mibBuilder.loadTexts: a104VendorSpecificMessage.setDescription('')
a104VendorSpecificData = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 11), DmiOctetstring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104VendorSpecificData.setStatus('mandatory')
if mibBuilder.loadTexts: a104VendorSpecificData.setDescription('')
a104VendorTrapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 16, 1, 2, 1, 104, 1, 12), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a104VendorTrapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a104VendorTrapNumber.setDescription('')
mibBuilder.exportSymbols("AMIMEGARAIDMIF-MIB", eCompositeDriveAlerts=eCompositeDriveAlerts, a3Raidlevel=a3Raidlevel, a103VendorSpecificData=a103VendorSpecificData, a4Physchannel=a4Physchannel, a4Arrayposition=a4Arrayposition, a2Numlogicaldrives=a2Numlogicaldrives, a104AssociatedGroup=a104AssociatedGroup, eChannels=eChannels, a99AmiMegaraidMib=a99AmiMegaraidMib, a3Readpolicy=a3Readpolicy, a3Logicaldrivenumber=a3Logicaldrivenumber, a2Adpiowritespersec=a2Adpiowritespersec, tChannels=tChannels, eMiftomib=eMiftomib, a2Chipsettype=a2Chipsettype, a5Terminations=a5Terminations, a4Rebuildprogress=a4Rebuildprogress, a1Installation=a1Installation, a104EventSystem=a104EventSystem, a3Numberofspans=a3Numberofspans, ePhysicalDriveAlerts=ePhysicalDriveAlerts, a3Writepolicy=a3Writepolicy, a6Ams2alerts=a6Ams2alerts, DmiDateX=DmiDateX, eGlobalinfo=eGlobalinfo, a104EventSeverity=a104EventSeverity, a99MibOid=a99MibOid, a1Verify=a1Verify, a2Adpwritefailurespersec=a2Adpwritefailurespersec, a104EventSubsystem=a104EventSubsystem, a104EventSolution=a104EventSolution, a99DisableTraps=a99DisableTraps, a3Status=a3Status, a4Mediumerrors=a4Mediumerrors, a2Flushinterval=a2Flushinterval, a3Ldioreadfailurespersec=a3Ldioreadfailurespersec, a4Devicetype=a4Devicetype, a104InstanceDataPresent=a104InstanceDataPresent, ami=ami, a3Progress=a3Progress, a2Biosversion=a2Biosversion, a2Scanchannels=a2Scanchannels, a2Dramsizeinmb=a2Dramsizeinmb, a3Stripesize=a3Stripesize, a103InstanceDataPresent=a103InstanceDataPresent, a104VendorTrapNumber=a104VendorTrapNumber, a1Version=a1Version, a2Adpwritekbspersec=a2Adpwritekbspersec, a104VendorSpecificMessage=a104VendorSpecificMessage, a2Spinupdelay=a2Spinupdelay, a4Qtags=a4Qtags, a2Physicalview=a2Physicalview, a3Ldadapternumber=a3Ldadapternumber, tGlobalinfo=tGlobalinfo, a2Logicalview=a2Logicalview, a2Adpioreadspersec=a2Adpioreadspersec, eComponentid=eComponentid, tPhysicalDeviceInformation=tPhysicalDeviceInformation, a3Ldioreadspersec=a3Ldioreadspersec, tLogicalDriveInformation=tLogicalDriveInformation, a1Manufacturer=a1Manufacturer, a6Dmiindication=a6Dmiindication, mifmib=mifmib, a2Firmwareversion=a2Firmwareversion, tMiftomib=tMiftomib, a4Syncnegotiation=a4Syncnegotiation, tAlertManagementInformation=tAlertManagementInformation, a3Ldiowritespersec=a3Ldiowritespersec, a103AssociatedGroup=a103AssociatedGroup, a4Sizemb=a4Sizemb, a3Sizeinmb=a3Sizeinmb, a103EventSubsystem=a103EventSubsystem, a3Numberofstripes=a3Numberofstripes, DmiComponentIndex=DmiComponentIndex, a4Scsilevel=a4Scsilevel, a4Physadapternumber=a4Physadapternumber, tComponentid=tComponentid, megaraid=megaraid, eControllerInformation=eControllerInformation, a103EventType=a103EventType, a104VendorSpecificData=a104VendorSpecificData, a103IsEventStateBased=a103IsEventStateBased, ePhysicalDeviceInformation=ePhysicalDeviceInformation, a103VendorSpecificMessage=a103VendorSpecificMessage, tCompositeDriveAlerts=tCompositeDriveAlerts, dmtfGroups=dmtfGroups, a2Adpreadfailurespersec=a2Adpreadfailurespersec, a4State=a4State, a3Allattributes=a3Allattributes, a4Othererrors=a4Othererrors, a103EventSolution=a103EventSolution, a5Channel=a5Channel, a103VendorTrapNumber=a103VendorTrapNumber, DmiInteger=DmiInteger, tControllerInformation=tControllerInformation, DmiDisplaystring=DmiDisplaystring, a4Allattributes=a4Allattributes, a103EventSeverity=a103EventSeverity, a103EventStateKey=a103EventStateKey, a103EventSystem=a103EventSystem, a1SerialNumber=a1SerialNumber, a2Adpreadkbspersec=a2Adpreadkbspersec, a2Spinupcount=a2Spinupcount, a1Product=a1Product, a4Inquirystring=a4Inquirystring, a2Maxconcurrentcmds=a2Maxconcurrentcmds, a2Rebuildrateinpercent=a2Rebuildrateinpercent, a5Chanadapternumber=a5Chanadapternumber, a3Ldwritefailurespersec=a3Ldwritefailurespersec, a104EventType=a104EventType, a6Eventlog=a6Eventlog, eLogicalDriveInformation=eLogicalDriveInformation, a2Adpadapternumber=a2Adpadapternumber, a3Cachepolicy=a3Cachepolicy, a4Targetid=a4Targetid, a5Channelstatus=a5Channelstatus, a104EventStateKey=a104EventStateKey, a7Globalcltrinfo=a7Globalcltrinfo, a104IsEventStateBased=a104IsEventStateBased, eAlertManagementInformation=eAlertManagementInformation, DmiOctetstring=DmiOctetstring, a3Ldreadskbspersec=a3Ldreadskbspersec, tPhysicalDriveAlerts=tPhysicalDriveAlerts, a3Ldwritekbspersec=a3Ldwritekbspersec)
