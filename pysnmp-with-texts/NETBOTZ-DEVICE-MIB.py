#
# PySNMP MIB module NETBOTZ-DEVICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETBOTZ-DEVICE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:18:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
netBotz_device, = mibBuilder.importSymbols("NETBOTZ-MIB", "netBotz-device")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Gauge32, Bits, Integer32, iso, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Counter32, ModuleIdentity, ObjectIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Gauge32", "Bits", "Integer32", "iso", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Counter32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netBotz_dev_host = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 1), DisplayString()).setLabel("netBotz-dev-host").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_host.setReference('Netbotz Host')
if mibBuilder.loadTexts: netBotz_dev_host.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_host.setDescription("Netbotz device's host name.")
netBotz_dev_domain = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 2), DisplayString()).setLabel("netBotz-dev-domain").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_domain.setReference('Netbotz Domain')
if mibBuilder.loadTexts: netBotz_dev_domain.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_domain.setDescription("Netbotz device's default DNS domain.")
netBotz_dev_ip = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 3), IpAddress()).setLabel("netBotz-dev-ip").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_ip.setReference('Netbotz IP address')
if mibBuilder.loadTexts: netBotz_dev_ip.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_ip.setDescription("Netbotz device's IP address.")
netBotz_dev_netmask = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 4), IpAddress()).setLabel("netBotz-dev-netmask").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_netmask.setReference('Netbotz Device Netmask')
if mibBuilder.loadTexts: netBotz_dev_netmask.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_netmask.setDescription("Netbotz device's netmask.")
netBotz_dev_gateway = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 5), IpAddress()).setLabel("netBotz-dev-gateway").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_gateway.setReference('Netbotz Device Gateway')
if mibBuilder.loadTexts: netBotz_dev_gateway.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_gateway.setDescription("Netbotz device's default gateway/router. 0.0.0.0 if not defined.")
netBotz_dev_primarydns = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 6), IpAddress()).setLabel("netBotz-dev-primarydns").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_primarydns.setReference('Primary DNS')
if mibBuilder.loadTexts: netBotz_dev_primarydns.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_primarydns.setDescription('Primary Domain Name Server. 0.0.0.0 if not defined.')
netBotz_dev_secondarydns = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 7), IpAddress()).setLabel("netBotz-dev-secondarydns").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_secondarydns.setReference('Secondary DNS')
if mibBuilder.loadTexts: netBotz_dev_secondarydns.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_secondarydns.setDescription('Secondary Domain Name Server. 0.0.0.0 if not defined.')
netBotz_dev_smtp = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 8), DisplayString()).setLabel("netBotz-dev-smtp").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_smtp.setReference('SMTP')
if mibBuilder.loadTexts: netBotz_dev_smtp.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_smtp.setDescription('SMTP server address. This is the mail server used for sending alert e-mails.')
netBotz_dev_smtpport = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 9), Integer32()).setLabel("netBotz-dev-smtpport").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_smtpport.setReference('SMTP Port')
if mibBuilder.loadTexts: netBotz_dev_smtpport.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_smtpport.setDescription('SMTP port. Port number of SMTP server used for sending alert e-mails.')
netBotz_dev_popport = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 10), Integer32()).setLabel("netBotz-dev-popport").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_popport.setReference('POP Port')
if mibBuilder.loadTexts: netBotz_dev_popport.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_popport.setDescription('POP port. Currently, not used.')
netBotz_dev_loglevel = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 11), Integer32()).setLabel("netBotz-dev-loglevel").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_loglevel.setReference('Log Level')
if mibBuilder.loadTexts: netBotz_dev_loglevel.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_loglevel.setDescription('This field contains the log level of the Netbotz device. Log messages will be filtered, so that only same or lower-level messages will be passed. The default log level is 5, for warnings and lower levels. The log levels are the following: 1 - emergency 2 - alert 3 - critical 4 - error 5 - warning 6 - notice 7 - info 8 - trace')
netBotz_dev_logaddress = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 12), IpAddress()).setLabel("netBotz-dev-logaddress").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_logaddress.setReference('Log Address')
if mibBuilder.loadTexts: netBotz_dev_logaddress.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_logaddress.setDescription('This field contains an IP address to receive log messages from the Netbotz device. 0.0.0.0 for no external logging.')
netBotz_dev_logport = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 13), Integer32()).setLabel("netBotz-dev-logport").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_logport.setReference('Log Port')
if mibBuilder.loadTexts: netBotz_dev_logport.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_logport.setDescription('Port to use in conjunction with the log address, for log messages from the Netbotz device to be sent to an external IP address. 0 = no external logging.')
netBotz_dev_primaryemail = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 14), DisplayString()).setLabel("netBotz-dev-primaryemail").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_primaryemail.setReference('Primary Email')
if mibBuilder.loadTexts: netBotz_dev_primaryemail.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_primaryemail.setDescription('The primary email addresses for alerts and messages (list separated by commas for multiple addresses).')
netBotz_dev_secondaryemail = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 15), DisplayString()).setLabel("netBotz-dev-secondaryemail").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_secondaryemail.setReference('Secondary Email')
if mibBuilder.loadTexts: netBotz_dev_secondaryemail.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_secondaryemail.setDescription('The secondary email address for alerts and messages (list separated by commas for multiple addresses).')
netBotz_dev_pager = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 16), DisplayString()).setLabel("netBotz-dev-pager").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_pager.setReference('Pager')
if mibBuilder.loadTexts: netBotz_dev_pager.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_pager.setDescription('The pager number for alerts and messages. Currently, not used.')
netBotz_dev_serialno = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 17), DisplayString()).setLabel("netBotz-dev-serialno").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_dev_serialno.setReference('Serial Number')
if mibBuilder.loadTexts: netBotz_dev_serialno.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_serialno.setDescription('The serial number of the Netbotz device.')
netBotz_dev_pop = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 18), DisplayString()).setLabel("netBotz-dev-pop").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_dev_pop.setReference('POP')
if mibBuilder.loadTexts: netBotz_dev_pop.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_pop.setDescription('POP server name. Currently, not used.')
netBotz_dev_version = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 19), DisplayString()).setLabel("netBotz-dev-version").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_dev_version.setReference('Firmware Version')
if mibBuilder.loadTexts: netBotz_dev_version.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_version.setDescription('The current NetBotz device firmware version.')
netBotz_dev_registered = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 20), Integer32()).setLabel("netBotz-dev-registered").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_dev_registered.setReference('Device Registered')
if mibBuilder.loadTexts: netBotz_dev_registered.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_dev_registered.setDescription('Indicates if the device has been registered with Netbotz, Inc. 1=registered, 0=not registered.')
netBotz_default_applet = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 21), Integer32()).setLabel("netBotz-default-applet").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_default_applet.setReference('Default Applet')
if mibBuilder.loadTexts: netBotz_default_applet.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_default_applet.setDescription('Setting to control if default web page should launch applet by default(1) or the HTML status page(0).')
netBotz_guibar_color = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 22), Integer32()).setLabel("netBotz-guibar-color").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_guibar_color.setReference('GUI Bar Color')
if mibBuilder.loadTexts: netBotz_guibar_color.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_guibar_color.setDescription('Setting for color of GUI bar (RGB). Value = 0xRRGGBB.')
netBotz_locale = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 23), DisplayString()).setLabel("netBotz-locale").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_locale.setReference('Locale')
if mibBuilder.loadTexts: netBotz_locale.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_locale.setDescription('The locale ID of the NetBotz device. Format is ISO 639 language (lower case), an underscore, and ISO 3166 country (upper case). Some locales are just the ISO 639 language code.')
netBotz_timezone = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 24), DisplayString()).setLabel("netBotz-timezone").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_timezone.setReference('TimeZone')
if mibBuilder.loadTexts: netBotz_timezone.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_timezone.setDescription('The timezone ID of the NetBotz device.')
netBotz_24hourpreferred = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 25), Integer32()).setLabel("netBotz-24hourpreferred").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_24hourpreferred.setReference('24 hour format')
if mibBuilder.loadTexts: netBotz_24hourpreferred.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_24hourpreferred.setDescription('Indicates if 24-hour(1) versus 12-hour(0) time format is preferred.')
netBotz_utc_clock = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 26), Integer32()).setLabel("netBotz-utc-clock").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_utc_clock.setReference('UTC Clock')
if mibBuilder.loadTexts: netBotz_utc_clock.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_utc_clock.setDescription('Current time of clock on NetBotz device, in UTC seconds (seconds since 1/1/1970 12:00am GMT).')
netBotz_ismetric = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 27), Integer32()).setLabel("netBotz-ismetric").setMaxAccess("readonly")
if mibBuilder.loadTexts: netBotz_ismetric.setReference('Metric Units')
if mibBuilder.loadTexts: netBotz_ismetric.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_ismetric.setDescription('Units are metric (1) or U.S. (0). Applies to temperature and airflow rate.')
netBotz_alert_url = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 28), DisplayString()).setLabel("netBotz-alert-url").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_url.setReference('Alert URL')
if mibBuilder.loadTexts: netBotz_alert_url.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_url.setDescription('The URL, if defined, to which non-picture alerts are HTTP POSTed')
netBotz_picture_alert_url = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 29), DisplayString()).setLabel("netBotz-picture-alert-url").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_picture_alert_url.setReference('Picture Alert URL')
if mibBuilder.loadTexts: netBotz_picture_alert_url.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_picture_alert_url.setDescription('The URL, if defined, to which picture alerts are HTTP POSTed, using multipart/form-data encoding.')
netBotz_sensor_data_url = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 30), DisplayString()).setLabel("netBotz-sensor-data-url").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url.setReference('Sensor Data URL')
if mibBuilder.loadTexts: netBotz_sensor_data_url.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url.setDescription('The URL, if defined, to which sensor data is periodically HTTP POSTed.')
netBotz_alert_url_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 31), DisplayString()).setLabel("netBotz-alert-url-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_alert_url_logon.setReference('Alert URL Logon')
if mibBuilder.loadTexts: netBotz_alert_url_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_alert_url_logon.setDescription('The user ID and password, if defined, used for POSTing non-picture alerts. Field is write-only, and formatted <username>/<password>')
netBotz_picture_alert_url_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 32), DisplayString()).setLabel("netBotz-picture-alert-url-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_picture_alert_url_logon.setReference('Picture Alert URL Logon')
if mibBuilder.loadTexts: netBotz_picture_alert_url_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_picture_alert_url_logon.setDescription('The user ID and password, if defined, used for POSTing picture alerts. Field is write-only, and formatted <username>/<password>')
netBotz_sensor_data_url_logon = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 33), DisplayString()).setLabel("netBotz-sensor-data-url-logon").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url_logon.setReference('Sensor Data URL Logon')
if mibBuilder.loadTexts: netBotz_sensor_data_url_logon.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url_logon.setDescription('The user ID and password, if defined, used for POSTing sensor data. Field is write-only, and formatted <username>/<password>')
netBotz_sensor_data_url_period = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 34), Integer32()).setLabel("netBotz-sensor-data-url-period").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url_period.setReference('Sensor Data URL Period')
if mibBuilder.loadTexts: netBotz_sensor_data_url_period.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url_period.setDescription('Default number of minutes between periodic sensor data HTTP POSTs.')
netBotz_sensor_data_url_flags = MibScalar((1, 3, 6, 1, 4, 1, 5528, 50, 35), Integer32()).setLabel("netBotz-sensor-data-url-flags").setMaxAccess("readwrite")
if mibBuilder.loadTexts: netBotz_sensor_data_url_flags.setReference('Sensor Data URL Flags')
if mibBuilder.loadTexts: netBotz_sensor_data_url_flags.setStatus('mandatory')
if mibBuilder.loadTexts: netBotz_sensor_data_url_flags.setDescription('Option flags for data POSTs of sensor data. Bit 0=1 if current picture should be included. Bits 1-31 are reserved.')
mibBuilder.exportSymbols("NETBOTZ-DEVICE-MIB", netBotz_dev_pager=netBotz_dev_pager, netBotz_dev_domain=netBotz_dev_domain, netBotz_dev_loglevel=netBotz_dev_loglevel, netBotz_utc_clock=netBotz_utc_clock, netBotz_dev_popport=netBotz_dev_popport, netBotz_dev_ip=netBotz_dev_ip, netBotz_24hourpreferred=netBotz_24hourpreferred, netBotz_dev_netmask=netBotz_dev_netmask, netBotz_dev_primaryemail=netBotz_dev_primaryemail, netBotz_dev_logport=netBotz_dev_logport, netBotz_dev_primarydns=netBotz_dev_primarydns, netBotz_dev_pop=netBotz_dev_pop, netBotz_dev_version=netBotz_dev_version, netBotz_alert_url=netBotz_alert_url, netBotz_dev_host=netBotz_dev_host, netBotz_dev_serialno=netBotz_dev_serialno, netBotz_locale=netBotz_locale, netBotz_guibar_color=netBotz_guibar_color, netBotz_picture_alert_url=netBotz_picture_alert_url, netBotz_default_applet=netBotz_default_applet, netBotz_dev_gateway=netBotz_dev_gateway, netBotz_alert_url_logon=netBotz_alert_url_logon, netBotz_dev_smtp=netBotz_dev_smtp, netBotz_picture_alert_url_logon=netBotz_picture_alert_url_logon, netBotz_dev_secondaryemail=netBotz_dev_secondaryemail, netBotz_sensor_data_url_flags=netBotz_sensor_data_url_flags, netBotz_ismetric=netBotz_ismetric, netBotz_sensor_data_url_period=netBotz_sensor_data_url_period, netBotz_dev_logaddress=netBotz_dev_logaddress, netBotz_sensor_data_url_logon=netBotz_sensor_data_url_logon, netBotz_dev_smtpport=netBotz_dev_smtpport, netBotz_dev_secondarydns=netBotz_dev_secondarydns, netBotz_timezone=netBotz_timezone, netBotz_sensor_data_url=netBotz_sensor_data_url, netBotz_dev_registered=netBotz_dev_registered)
