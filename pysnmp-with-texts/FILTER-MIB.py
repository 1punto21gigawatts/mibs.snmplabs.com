#
# PySNMP MIB module FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ModuleIdentity, Gauge32, IpAddress, Counter64, MibIdentifier, Integer32, Counter32, iso, ObjectIdentity, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "ModuleIdentity", "Gauge32", "IpAddress", "Counter64", "MibIdentifier", "Integer32", "Counter32", "iso", "ObjectIdentity", "Bits", "NotificationType")
DisplayString, RowStatus, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "MacAddress")
swFilterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 37))
if mibBuilder.loadTexts: swFilterMIB.setLastUpdated('0808120000Z')
if mibBuilder.loadTexts: swFilterMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swFilterMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swFilterMIB.setDescription('This MIB module defining objects for the management of filter.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swFilterDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 1))
swFilterNetbios = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 2))
swFilterExtNetbios = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 3))
swFilterCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 4))
swFilterEgress = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 5))
swFilterNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 100))
swFilterDhcpPermitTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1), )
if mibBuilder.loadTexts: swFilterDhcpPermitTable.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpPermitTable.setDescription('The table specifies DHCP permit information.')
swFilterDhcpPermitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterDhcpServerIP"), (0, "FILTER-MIB", "swFilterDhcpClientMac"))
if mibBuilder.loadTexts: swFilterDhcpPermitEntry.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpPermitEntry.setDescription('This entry includes all port DHCP information which is supported by the device, like server IP address, client MAC address...')
swFilterDhcpServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterDhcpServerIP.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpServerIP.setDescription('This object indicates the DHCP server IP address of this entry.')
swFilterDhcpClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterDhcpClientMac.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpClientMac.setDescription('This object indicates the DHCP client MAC address of this entry.')
swFilterDhcpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swFilterDhcpPorts.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpPorts.setDescription('This object indicates the operating port list of this entry.')
swFilterDhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swFilterDhcpStatus.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpStatus.setDescription('This object indicates the status of this entry.')
swFilterDhcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2), )
if mibBuilder.loadTexts: swFilterDhcpPortTable.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpPortTable.setDescription('The table specifies the DHCP filter function of a particular port.')
swFilterDhcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterDhcpPortIndex"))
if mibBuilder.loadTexts: swFilterDhcpPortEntry.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpPortEntry.setDescription('This entry includes all port DHCP states which are supported by the device.')
swFilterDhcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterDhcpPortIndex.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number supported by this module.")
swFilterDhcpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterDhcpPortState.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpPortState.setDescription('This object indicates the DHCP filter status of this entry.')
swFilterDhcpServerIllegalSerLogSuppressDuration = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duration_1min", 1), ("duration_5min", 2), ("duration_30min", 3))).clone('duration_5min')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterDhcpServerIllegalSerLogSuppressDuration.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpServerIllegalSerLogSuppressDuration.setDescription('This object indicates the illegal server log suppression duration. The same illegal DHCP server IP address detected is logged just once within the log ceasing unauthorized duration. The log ceasing unauthorized duration is 1 minute, 5 minutes, and 30 minutes. The default value is 5 minutes.')
swFilterDhcpServerTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterDhcpServerTrapLogState.setStatus('current')
if mibBuilder.loadTexts: swFilterDhcpServerTrapLogState.setDescription('This object indicates the state of the filter DHCP server log or trap on the switch.')
swFilterNetbiosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1), )
if mibBuilder.loadTexts: swFilterNetbiosTable.setStatus('current')
if mibBuilder.loadTexts: swFilterNetbiosTable.setDescription('The table specifies the NetBIOS filter function of a port.')
swFilterNetbiosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterNetbiosPortIndex"))
if mibBuilder.loadTexts: swFilterNetbiosEntry.setStatus('current')
if mibBuilder.loadTexts: swFilterNetbiosEntry.setDescription('This entry includes all port NetBIOS states which are supported by the device.')
swFilterNetbiosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterNetbiosPortIndex.setStatus('current')
if mibBuilder.loadTexts: swFilterNetbiosPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number supported by this module.")
swFilterNetbiosState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterNetbiosState.setStatus('current')
if mibBuilder.loadTexts: swFilterNetbiosState.setDescription('This object indicates the status of the NetBIOS filter.')
swFilterExtNetbiosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1), )
if mibBuilder.loadTexts: swFilterExtNetbiosTable.setStatus('current')
if mibBuilder.loadTexts: swFilterExtNetbiosTable.setDescription('The table specifies the extensive NetBIOS filter function of a port.')
swFilterExtNetbiosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterExtNetbiosPortIndex"))
if mibBuilder.loadTexts: swFilterExtNetbiosEntry.setStatus('current')
if mibBuilder.loadTexts: swFilterExtNetbiosEntry.setDescription('This entry includes all port extensive NetBIOS states which are supported by the device.')
swFilterExtNetbiosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterExtNetbiosPortIndex.setStatus('current')
if mibBuilder.loadTexts: swFilterExtNetbiosPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number supported by this module.")
swFilterExtNetbiosState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterExtNetbiosState.setStatus('current')
if mibBuilder.loadTexts: swFilterExtNetbiosState.setDescription('This object indicates the extensive NetBIOS filter status.')
swFilterCPUL3CtrlPktTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1), )
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktTable.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktTable.setDescription('The table specifies the CPU filter of the layer 3 control packet function of a port.')
swFilterCPUL3CtrlPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterCPUL3CtrlPktPortIndex"))
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktEntry.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktEntry.setDescription('This entry includes all port CPU filters of layer 3 control packet states which are supported by the device.')
swFilterCPUL3CtrlPktPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktPortIndex.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktPortIndex.setDescription("This object indicates the module's port number. The range is from 1 to the maximum port number supported by this module.")
swFilterCPUL3CtrlPktRIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktRIPState.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktRIPState.setDescription('This object indicates the RIP status of the layer 3 control packet.')
swFilterCPUL3CtrlPktOSPFState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktOSPFState.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktOSPFState.setDescription('This object indicates the OSPF status of the layer 3 control packet.')
swFilterCPUL3CtrlPktVRRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktVRRPState.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktVRRPState.setDescription('This object indicates the VRRP status of the layer 3 control packet.')
swFilterCPUL3CtrlPktPIMState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktPIMState.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktPIMState.setDescription('This object indicates the PIM status of the layer 3 control packet.')
swFilterCPUL3CtrlPktDVMRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktDVMRPState.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktDVMRPState.setDescription('This object indicates the DVMRP status of the layer 3 control packet.')
swFilterCPUL3CtrlPktIGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktIGMPQueryState.setStatus('current')
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktIGMPQueryState.setDescription('This object indicates the IGMP query status of the layer 3 control packet.')
swPktEgressFilterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1), )
if mibBuilder.loadTexts: swPktEgressFilterCtrlTable.setStatus('current')
if mibBuilder.loadTexts: swPktEgressFilterCtrlTable.setDescription('A table that contains information about egress filter control.')
swPktEgressFilterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swPktEgressFilterPortIndex"))
if mibBuilder.loadTexts: swPktEgressFilterCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: swPktEgressFilterCtrlEntry.setDescription('A list of information for each port of the device. unicast: Specifies the egress filter state of destination lookup fail packets. multicast: Specifies the egress filter state of unregistered multicast packets.')
swPktEgressFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPktEgressFilterPortIndex.setStatus('current')
if mibBuilder.loadTexts: swPktEgressFilterPortIndex.setDescription("This object indicates the device's port number.(1..Max port number in the device).Used to specify a range of ports to be configured.")
swPktEgressFilterUnknownUnicastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPktEgressFilterUnknownUnicastStatus.setStatus('current')
if mibBuilder.loadTexts: swPktEgressFilterUnknownUnicastStatus.setDescription('This object indicates the egress filter state of destination lookup fail packets.')
swPktEgressFilterUnknownMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPktEgressFilterUnknownMulticastStatus.setStatus('current')
if mibBuilder.loadTexts: swPktEgressFilterUnknownMulticastStatus.setDescription('This object indicates the egress filter state of unregistered multicast packets.')
swFilterNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 0))
swFilterDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 0, 1)).setObjects(("FILTER-MIB", "swFilterDetectedIP"), ("FILTER-MIB", "swFilterDetectedport"))
if mibBuilder.loadTexts: swFilterDetectedTrap.setStatus('current')
if mibBuilder.loadTexts: swFilterDetectedTrap.setDescription('Send trap when illegal DHCP server is detected. The same illegal DHCP server IP address detected is just sent once to the trap receivers within the log ceasing unauthorized duration.')
swFilterNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 2))
swFilterDetectedIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swFilterDetectedIP.setStatus('current')
if mibBuilder.loadTexts: swFilterDetectedIP.setDescription('This object indicates the detected illegal DHCP server IP address.')
swFilterDetectedport = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swFilterDetectedport.setStatus('current')
if mibBuilder.loadTexts: swFilterDetectedport.setDescription('This object indicates the port which detected the illegal DHCP server.')
mibBuilder.exportSymbols("FILTER-MIB", swFilterDhcpClientMac=swFilterDhcpClientMac, swFilterDetectedport=swFilterDetectedport, swFilterExtNetbiosPortIndex=swFilterExtNetbiosPortIndex, swFilterNetbios=swFilterNetbios, PortList=PortList, swFilterExtNetbios=swFilterExtNetbios, swFilterDhcpPorts=swFilterDhcpPorts, swPktEgressFilterPortIndex=swPktEgressFilterPortIndex, swFilterNotifyPrefix=swFilterNotifyPrefix, swPktEgressFilterCtrlEntry=swPktEgressFilterCtrlEntry, swFilterDhcpPortIndex=swFilterDhcpPortIndex, swFilterExtNetbiosTable=swFilterExtNetbiosTable, swFilterDhcpServerTrapLogState=swFilterDhcpServerTrapLogState, swFilterDhcpServerIP=swFilterDhcpServerIP, swFilterNetbiosPortIndex=swFilterNetbiosPortIndex, swFilterDhcp=swFilterDhcp, swPktEgressFilterUnknownMulticastStatus=swPktEgressFilterUnknownMulticastStatus, swFilterCPUL3CtrlPktEntry=swFilterCPUL3CtrlPktEntry, swFilterNetbiosState=swFilterNetbiosState, swFilterExtNetbiosState=swFilterExtNetbiosState, swFilterCPUL3CtrlPktOSPFState=swFilterCPUL3CtrlPktOSPFState, swFilterCPUL3CtrlPktDVMRPState=swFilterCPUL3CtrlPktDVMRPState, swFilterCPUL3CtrlPktRIPState=swFilterCPUL3CtrlPktRIPState, swFilterMIB=swFilterMIB, swFilterEgress=swFilterEgress, swFilterDhcpPortTable=swFilterDhcpPortTable, swFilterNetbiosEntry=swFilterNetbiosEntry, swFilterCPUL3CtrlPktPortIndex=swFilterCPUL3CtrlPktPortIndex, swFilterNotify=swFilterNotify, swFilterDhcpServerIllegalSerLogSuppressDuration=swFilterDhcpServerIllegalSerLogSuppressDuration, swPktEgressFilterCtrlTable=swPktEgressFilterCtrlTable, swFilterDhcpPermitTable=swFilterDhcpPermitTable, swFilterDetectedIP=swFilterDetectedIP, swFilterCPU=swFilterCPU, swFilterDetectedTrap=swFilterDetectedTrap, swFilterCPUL3CtrlPktIGMPQueryState=swFilterCPUL3CtrlPktIGMPQueryState, swFilterExtNetbiosEntry=swFilterExtNetbiosEntry, swFilterNetbiosTable=swFilterNetbiosTable, swFilterDhcpStatus=swFilterDhcpStatus, swFilterDhcpPortState=swFilterDhcpPortState, swFilterDhcpPortEntry=swFilterDhcpPortEntry, PYSNMP_MODULE_ID=swFilterMIB, swFilterCPUL3CtrlPktTable=swFilterCPUL3CtrlPktTable, swFilterNotificationBindings=swFilterNotificationBindings, swFilterCPUL3CtrlPktPIMState=swFilterCPUL3CtrlPktPIMState, swFilterCPUL3CtrlPktVRRPState=swFilterCPUL3CtrlPktVRRPState, swPktEgressFilterUnknownUnicastStatus=swPktEgressFilterUnknownUnicastStatus, swFilterDhcpPermitEntry=swFilterDhcpPermitEntry)
