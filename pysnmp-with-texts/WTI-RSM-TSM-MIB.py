#
# PySNMP MIB module WTI-RSM-TSM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WTI-RSM-TSM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Counter64, Gauge32, enterprises, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Unsigned32, IpAddress, NotificationType, Integer32, Bits, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Gauge32", "enterprises", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Unsigned32", "IpAddress", "NotificationType", "Integer32", "Bits", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
westernTelematic = MibIdentifier((1, 3, 6, 1, 4, 1, 2634))
rsm_tsm = ModuleIdentity((1, 3, 6, 1, 4, 1, 2634, 1)).setLabel("rsm-tsm")
rsm_tsm.setRevisions(('2014-01-08 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsm_tsm.setRevisionsDescriptions(('V5.10 for the RSM/TSM ',))
if mibBuilder.loadTexts: rsm_tsm.setLastUpdated('201401081600Z')
if mibBuilder.loadTexts: rsm_tsm.setOrganization('Western Telematic, Inc.')
if mibBuilder.loadTexts: rsm_tsm.setContactInfo('Western Telematic, Inc. 5 Sterling Irvine, Ca 92618 Email: anthonyb@wti.com')
if mibBuilder.loadTexts: rsm_tsm.setDescription('This is the MIB module for the RSM/TSM')
systemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 100))
portTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('A table of ports.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1), ).setIndexNames((0, "WTI-RSM-TSM-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('Row definition for the port table.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 41)))
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('Index for the port table.')
portID = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portID.setStatus('current')
if mibBuilder.loadTexts: portID.setDescription('The ID of the port.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('The name of the port.')
portBufferThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 262144))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBufferThreshold.setStatus('current')
if mibBuilder.loadTexts: portBufferThreshold.setDescription('Port buffer threshold')
portUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUserName.setStatus('current')
if mibBuilder.loadTexts: portUserName.setDescription('The name of the user logged in to port')
portStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatus.setStatus('current')
if mibBuilder.loadTexts: portStatus.setDescription('The status of the port.')
portBufferCt = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 100, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portBufferCt.setStatus('current')
if mibBuilder.loadTexts: portBufferCt.setDescription('Port byte threshold')
plugTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200), )
if mibBuilder.loadTexts: plugTable.setStatus('current')
if mibBuilder.loadTexts: plugTable.setDescription('A table of plugs.')
plugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1), ).setIndexNames((0, "WTI-RSM-TSM-MIB", "plugIndex"))
if mibBuilder.loadTexts: plugEntry.setStatus('current')
if mibBuilder.loadTexts: plugEntry.setDescription('Row definition for the plug table.')
plugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)))
if mibBuilder.loadTexts: plugIndex.setStatus('current')
if mibBuilder.loadTexts: plugIndex.setDescription('Index for the plug table.')
plugID = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugID.setStatus('current')
if mibBuilder.loadTexts: plugID.setDescription('The ID of the plug.')
plugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugStatus.setStatus('current')
if mibBuilder.loadTexts: plugStatus.setDescription('Plug status')
plugAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugAction.setStatus('current')
if mibBuilder.loadTexts: plugAction.setDescription('Plug action')
plugName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugName.setStatus('current')
if mibBuilder.loadTexts: plugName.setDescription('The Name of the plug.')
plugCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugCurrent.setStatus('current')
if mibBuilder.loadTexts: plugCurrent.setDescription('Plug current (In tenths of amps, divide by 10 for value in amps)')
plugPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 200, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugPower.setStatus('current')
if mibBuilder.loadTexts: plugPower.setDescription('Plug power (Watts)')
plugGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 1, 100, 300), )
if mibBuilder.loadTexts: plugGroupTable.setStatus('current')
if mibBuilder.loadTexts: plugGroupTable.setDescription('A table of plug groups.')
plugGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 1, 100, 300, 1), ).setIndexNames((0, "WTI-RSM-TSM-MIB", "plugGroupIndex"))
if mibBuilder.loadTexts: plugGroupEntry.setStatus('current')
if mibBuilder.loadTexts: plugGroupEntry.setDescription('Row definition for the plug group table.')
plugGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 300, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54)))
if mibBuilder.loadTexts: plugGroupIndex.setStatus('current')
if mibBuilder.loadTexts: plugGroupIndex.setDescription('Index for the plug group table.')
plugGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 300, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupName.setStatus('current')
if mibBuilder.loadTexts: plugGroupName.setDescription('The name of the plug group.')
plugGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 300, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugGroupAction.setStatus('current')
if mibBuilder.loadTexts: plugGroupAction.setDescription('Plug group action')
plugGroupCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 300, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupCurrent.setStatus('current')
if mibBuilder.loadTexts: plugGroupCurrent.setDescription('Plug group current (In tenths of amps, divide by 10 for value in amps)')
plugGroupPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 300, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupPower.setStatus('current')
if mibBuilder.loadTexts: plugGroupPower.setDescription('Plug group power (Watts)')
userTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400), )
if mibBuilder.loadTexts: userTable.setStatus('current')
if mibBuilder.loadTexts: userTable.setDescription('A table of users.')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1), ).setIndexNames((0, "WTI-RSM-TSM-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
if mibBuilder.loadTexts: userEntry.setDescription('Row definition for the user table.')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: userIndex.setStatus('current')
if mibBuilder.loadTexts: userIndex.setDescription('Index for the user table.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The name of the user.')
userPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPasswd.setStatus('current')
if mibBuilder.loadTexts: userPasswd.setDescription('The password of the user.')
userAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessLevel.setStatus('current')
if mibBuilder.loadTexts: userAccessLevel.setDescription('Users access level')
userPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPortAccess.setStatus('current')
if mibBuilder.loadTexts: userPortAccess.setDescription('Access to ports.')
userPlugAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPlugAccess.setStatus('current')
if mibBuilder.loadTexts: userPlugAccess.setDescription('Access to plugs.')
userGroupAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupAccess.setStatus('current')
if mibBuilder.loadTexts: userGroupAccess.setDescription('Access to plug groups.')
userSerialAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSerialAccess.setStatus('current')
if mibBuilder.loadTexts: userSerialAccess.setDescription('Access to serial interface.')
userTelnetSshAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTelnetSshAccess.setStatus('current')
if mibBuilder.loadTexts: userTelnetSshAccess.setDescription('Access to Telnet/SSH interface.')
userWebAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userWebAccess.setStatus('current')
if mibBuilder.loadTexts: userWebAccess.setDescription('Access to web interface.')
userOutboundTelAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userOutboundTelAccess.setStatus('current')
if mibBuilder.loadTexts: userOutboundTelAccess.setDescription('Access to outbound telnet.')
userCallbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCallbackNum.setStatus('current')
if mibBuilder.loadTexts: userCallbackNum.setDescription('Callback number.')
userSubmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 100, 400, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSubmit.setStatus('current')
if mibBuilder.loadTexts: userSubmit.setDescription('Submit changes to user.')
environmentTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 200))
environmentUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10), )
if mibBuilder.loadTexts: environmentUnitTable.setStatus('current')
if mibBuilder.loadTexts: environmentUnitTable.setDescription('A table of environment status for units.')
environmentUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1), ).setIndexNames((0, "WTI-RSM-TSM-MIB", "environmentUnitIndex"))
if mibBuilder.loadTexts: environmentUnitEntry.setStatus('current')
if mibBuilder.loadTexts: environmentUnitEntry.setDescription('Row definition for the environment unit table.')
environmentUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: environmentUnitIndex.setStatus('current')
if mibBuilder.loadTexts: environmentUnitIndex.setDescription('Index for the environment unit table.')
environmentUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitName.setStatus('current')
if mibBuilder.loadTexts: environmentUnitName.setDescription('The name of the unit.')
environmentUnitTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitTemperature.setStatus('current')
if mibBuilder.loadTexts: environmentUnitTemperature.setDescription('The temperature of the unit.')
environmentSysRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSysRAM.setStatus('current')
if mibBuilder.loadTexts: environmentSysRAM.setDescription('Total system RAM.')
environmentSysFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSysFlash.setStatus('current')
if mibBuilder.loadTexts: environmentSysFlash.setDescription('Total system Flash.')
environmentMacEth0 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentMacEth0.setStatus('current')
if mibBuilder.loadTexts: environmentMacEth0.setDescription('MAC Address Eth0')
environmentMacEth1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 1, 200, 10, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentMacEth1.setStatus('current')
if mibBuilder.loadTexts: environmentMacEth1.setDescription('MAC Address Eth1')
alarmTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 280))
alarmOverCurrentInitial = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverCurrentInitial.setStatus('current')
if mibBuilder.loadTexts: alarmOverCurrentInitial.setDescription('State of the Over Current Initial Alarm (0 = Inactive, 1 = Active)')
alarmOverCurrentCritical = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverCurrentCritical.setStatus('current')
if mibBuilder.loadTexts: alarmOverCurrentCritical.setDescription('State of the Over Current Critical Alarm (0 = Inactive, 1 = Active)')
alarmOverTemperatureInitial = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverTemperatureInitial.setStatus('current')
if mibBuilder.loadTexts: alarmOverTemperatureInitial.setDescription('State of the Over Temperature Initial Alarm (0 = Inactive, 1 = Active)')
alarmOverTemperatureCritical = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOverTemperatureCritical.setStatus('current')
if mibBuilder.loadTexts: alarmOverTemperatureCritical.setDescription('State of the Over Temperature Critical Alarm (0 = Inactive, 1 = Active)')
alarmCircuitBreakerOpen = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCircuitBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: alarmCircuitBreakerOpen.setDescription('State of the Circuit Breaker Open Alarm (0 = Inactive, 1 = Active)')
alarmCommLoss = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCommLoss.setStatus('current')
if mibBuilder.loadTexts: alarmCommLoss.setDescription('State of the Communication Loss Alarm (0 = Inactive, 1 = Active)')
alarmPingNoAnswer = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPingNoAnswer.setStatus('current')
if mibBuilder.loadTexts: alarmPingNoAnswer.setDescription('State of the Ping No Answer Alarm (0 = Inactive, 1 = Active)')
alarmInvalidAccessLockout = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmInvalidAccessLockout.setStatus('current')
if mibBuilder.loadTexts: alarmInvalidAccessLockout.setDescription('State of the Invalid Access Lockout Alarm (0 = Inactive, 1 = Active)')
alarmPowerCycle = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPowerCycle.setStatus('current')
if mibBuilder.loadTexts: alarmPowerCycle.setDescription('State of the Power Cycle Alarm (0 = Inactive, 1 = Active)')
alarmBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmBufferThreshold.setStatus('current')
if mibBuilder.loadTexts: alarmBufferThreshold.setDescription('State of the Buffer Threshold Alarm (0 = Inactive, 1 = Active)')
alarmPlugCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPlugCurrent.setStatus('current')
if mibBuilder.loadTexts: alarmPlugCurrent.setDescription('State of the Plug Current Alarm (0 = Inactive, 1 = Active)')
alarmLostOptoVoltage = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLostOptoVoltage.setStatus('current')
if mibBuilder.loadTexts: alarmLostOptoVoltage.setDescription('State of the Lost Voltage (Line Input) Alarm (0 = Inactive, 1 = Active)')
alarmEmergencyShutoff = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEmergencyShutoff.setStatus('current')
if mibBuilder.loadTexts: alarmEmergencyShutoff.setDescription('State of the Emergency Shutoff Alarm (0 = Inactive, 1 = Active)')
alarmNoDialtone = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 280, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNoDialtone.setStatus('current')
if mibBuilder.loadTexts: alarmNoDialtone.setDescription('State of the No Dialtone Alarm (0 = Inactive, 1 = Active)')
wtiTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300))
trapInfo = MibScalar((1, 3, 6, 1, 4, 1, 2634, 1, 300, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapInfo.setStatus('current')
if mibBuilder.loadTexts: trapInfo.setDescription('Alarm information')
testTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 2))
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 2) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: testTrap.setDescription('A test trap')
bufferThresholdTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 3))
bufferThresholdCrossedSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 3) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: bufferThresholdCrossedSetTrap.setDescription('Buffer Threshold Crossed Alarm')
bufferThresholdCrossedClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 3) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: bufferThresholdCrossedClearTrap.setDescription('Buffer Threshold Crossed Alarm (Clear)')
overCurrentInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 4))
overCurrentInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 4) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentInitialSetTrap.setDescription('Over Current Initial Alarm')
overCurrentInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 4) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentInitialClearTrap.setDescription('Over Current Initial Alarm (Clear)')
overCurrentCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 5))
overCurrentCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 5) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentCriticalSetTrap.setDescription('Over Current Critical Alarm')
overCurrentCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 5) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentCriticalClearTrap.setDescription('Over Current Critical Alarm (Clear)')
overTemperatureInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 6))
overTemperatureInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 6) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureInitialSetTrap.setDescription('Over Temperature Initial Alarm')
overTemperatureInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 6) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureInitialClearTrap.setDescription('Over Temperature Initial Alarm (Clear)')
overTemperatureCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 7))
overTemperatureCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 7) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureCriticalSetTrap.setDescription('Over Temperature Critical Alarm')
overTemperatureCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 7) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureCriticalClearTrap.setDescription('Over Temperature Critical Alarm (Clear)')
circuitBreakerOpenTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 8))
circuitBreakerOpenSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 8) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: circuitBreakerOpenSetTrap.setDescription('Circuit Breaker Open Alarm')
circuitBreakerOpenClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 8) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: circuitBreakerOpenClearTrap.setDescription('Circuit Breaker Open Alarm (Clear)')
lostCommTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 9))
lostCommSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 9) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostCommSetTrap.setDescription('Lost Communication with AUX Unit')
lostCommClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 9) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostCommClearTrap.setDescription('Lost Communication with AUX Unit (Clear)')
pingNoAnswerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 11))
pingNoAnswerSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 11) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: pingNoAnswerSetTrap.setDescription('Ping No Answer')
pingNoAnswerClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 11) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: pingNoAnswerClearTrap.setDescription('Ping No Answer (Clear)')
lockoutTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 12))
lockoutSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 12) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: lockoutSetTrap.setDescription('Invalid Access Lockout')
lockoutClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 12) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: lockoutClearTrap.setDescription('Invalid Access Lockout (Clear)')
powercycleTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 13))
powercycleSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 13) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: powercycleSetTrap.setDescription('Power Cycle')
plugCurrentTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 15))
plugCurrentSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 15) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: plugCurrentSetTrap.setDescription('Plug Current')
plugCurrentClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 15) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: plugCurrentClearTrap.setDescription('Plug Current (Clear)')
lostOptoVoltageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 16))
lostOptoVoltageSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 16) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostOptoVoltageSetTrap.setDescription('Lost Voltage')
lostOptoVoltageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 16) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostOptoVoltageClearTrap.setDescription('Lost Voltage (Clear)')
emergencyShutoffTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 17))
emergencyShutoffSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 17) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: emergencyShutoffSetTrap.setDescription('Emergency Shutoff')
emergencyShutoffClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 17) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: emergencyShutoffClearTrap.setDescription('Emergency Shutoff (Clear)')
noDialtoneTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 1, 300, 18))
noDialtoneSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 18) + (0,1)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: noDialtoneSetTrap.setDescription('No Dialtone')
noDialtoneClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 1, 300, 18) + (0,2)).setObjects(("WTI-RSM-TSM-MIB", "trapInfo"))
if mibBuilder.loadTexts: noDialtoneClearTrap.setDescription('No Dialtone (Clear)')
mibBuilder.exportSymbols("WTI-RSM-TSM-MIB", pingNoAnswerTraps=pingNoAnswerTraps, lockoutSetTrap=lockoutSetTrap, userCallbackNum=userCallbackNum, userEntry=userEntry, userTelnetSshAccess=userTelnetSshAccess, overTemperatureCriticalTraps=overTemperatureCriticalTraps, plugGroupCurrent=plugGroupCurrent, circuitBreakerOpenTraps=circuitBreakerOpenTraps, alarmOverTemperatureCritical=alarmOverTemperatureCritical, westernTelematic=westernTelematic, alarmCommLoss=alarmCommLoss, bufferThresholdCrossedSetTrap=bufferThresholdCrossedSetTrap, bufferThresholdCrossedClearTrap=bufferThresholdCrossedClearTrap, lockoutTraps=lockoutTraps, portEntry=portEntry, powercycleSetTrap=powercycleSetTrap, environmentMacEth0=environmentMacEth0, overCurrentCriticalTraps=overCurrentCriticalTraps, plugGroupName=plugGroupName, alarmPowerCycle=alarmPowerCycle, lockoutClearTrap=lockoutClearTrap, userTable=userTable, testTraps=testTraps, lostCommClearTrap=lostCommClearTrap, alarmLostOptoVoltage=alarmLostOptoVoltage, noDialtoneSetTrap=noDialtoneSetTrap, emergencyShutoffTraps=emergencyShutoffTraps, plugStatus=plugStatus, lostCommTraps=lostCommTraps, alarmNoDialtone=alarmNoDialtone, emergencyShutoffClearTrap=emergencyShutoffClearTrap, overTemperatureInitialClearTrap=overTemperatureInitialClearTrap, alarmOverCurrentCritical=alarmOverCurrentCritical, plugCurrentSetTrap=plugCurrentSetTrap, overCurrentCriticalSetTrap=overCurrentCriticalSetTrap, PYSNMP_MODULE_ID=rsm_tsm, plugGroupAction=plugGroupAction, userName=userName, overCurrentInitialClearTrap=overCurrentInitialClearTrap, plugTable=plugTable, portBufferThreshold=portBufferThreshold, rsm_tsm=rsm_tsm, environmentUnitIndex=environmentUnitIndex, wtiTraps=wtiTraps, environmentUnitTemperature=environmentUnitTemperature, plugPower=plugPower, userPortAccess=userPortAccess, powercycleTraps=powercycleTraps, noDialtoneTraps=noDialtoneTraps, trapInfo=trapInfo, circuitBreakerOpenClearTrap=circuitBreakerOpenClearTrap, alarmBufferThreshold=alarmBufferThreshold, pingNoAnswerSetTrap=pingNoAnswerSetTrap, overTemperatureInitialSetTrap=overTemperatureInitialSetTrap, overTemperatureCriticalClearTrap=overTemperatureCriticalClearTrap, userPlugAccess=userPlugAccess, userSerialAccess=userSerialAccess, userOutboundTelAccess=userOutboundTelAccess, alarmCircuitBreakerOpen=alarmCircuitBreakerOpen, systemTables=systemTables, lostCommSetTrap=lostCommSetTrap, plugCurrent=plugCurrent, lostOptoVoltageTraps=lostOptoVoltageTraps, userWebAccess=userWebAccess, noDialtoneClearTrap=noDialtoneClearTrap, alarmTables=alarmTables, plugName=plugName, userPasswd=userPasswd, lostOptoVoltageSetTrap=lostOptoVoltageSetTrap, plugID=plugID, overCurrentInitialTraps=overCurrentInitialTraps, plugIndex=plugIndex, testTrap=testTrap, overTemperatureCriticalSetTrap=overTemperatureCriticalSetTrap, portName=portName, environmentSysRAM=environmentSysRAM, userIndex=userIndex, environmentUnitTable=environmentUnitTable, environmentMacEth1=environmentMacEth1, environmentTables=environmentTables, alarmOverTemperatureInitial=alarmOverTemperatureInitial, userSubmit=userSubmit, lostOptoVoltageClearTrap=lostOptoVoltageClearTrap, portStatus=portStatus, plugGroupIndex=plugGroupIndex, alarmEmergencyShutoff=alarmEmergencyShutoff, pingNoAnswerClearTrap=pingNoAnswerClearTrap, portUserName=portUserName, plugCurrentClearTrap=plugCurrentClearTrap, overTemperatureInitialTraps=overTemperatureInitialTraps, portBufferCt=portBufferCt, plugCurrentTraps=plugCurrentTraps, alarmPingNoAnswer=alarmPingNoAnswer, plugEntry=plugEntry, plugGroupEntry=plugGroupEntry, alarmOverCurrentInitial=alarmOverCurrentInitial, alarmPlugCurrent=alarmPlugCurrent, alarmInvalidAccessLockout=alarmInvalidAccessLockout, userAccessLevel=userAccessLevel, plugAction=plugAction, portID=portID, bufferThresholdTraps=bufferThresholdTraps, emergencyShutoffSetTrap=emergencyShutoffSetTrap, overCurrentInitialSetTrap=overCurrentInitialSetTrap, userGroupAccess=userGroupAccess, environmentSysFlash=environmentSysFlash, environmentUnitName=environmentUnitName, environmentUnitEntry=environmentUnitEntry, plugGroupTable=plugGroupTable, portTable=portTable, portIndex=portIndex, plugGroupPower=plugGroupPower, circuitBreakerOpenSetTrap=circuitBreakerOpenSetTrap, overCurrentCriticalClearTrap=overCurrentCriticalClearTrap)
