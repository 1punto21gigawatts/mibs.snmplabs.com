#
# PySNMP MIB module EQL-DCB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQL-DCB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
eqlGroupId, = mibBuilder.importSymbols("EQLGROUP-MIB", "eqlGroupId")
eqlMemberIndex, = mibBuilder.importSymbols("EQLMEMBER-MIB", "eqlMemberIndex")
equalLogic, = mibBuilder.importSymbols("EQUALLOGIC-SMI", "equalLogic")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Integer32, Bits, enterprises, TimeTicks, Gauge32, ModuleIdentity, MibIdentifier, Counter64, NotificationType, Counter32, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Integer32", "Bits", "enterprises", "TimeTicks", "Gauge32", "ModuleIdentity", "MibIdentifier", "Counter64", "NotificationType", "Counter32", "Unsigned32", "IpAddress")
TimeInterval, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "DisplayString", "TruthValue", "TextualConvention")
eqlDcbMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12740, 19))
eqlDcbMib.setRevisions(('2011-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: eqlDcbMib.setRevisionsDescriptions(('Initial revision - based on IEEE P802.1Qbb Draft 1.2 Copyright (C) IEEE.',))
if mibBuilder.loadTexts: eqlDcbMib.setLastUpdated('201403121459Z')
if mibBuilder.loadTexts: eqlDcbMib.setOrganization('EqualLogic Inc.')
if mibBuilder.loadTexts: eqlDcbMib.setContactInfo('Contact: Customer Support Postal: Dell Inc 300 Innovative Way, Suite 301, Nashua, NH 03062 Tel: +1 603-579-9762 E-mail: US-NH-CS-TechnicalSupport@dell.com WEB: www.equallogic.com')
if mibBuilder.loadTexts: eqlDcbMib.setDescription('Data Center Bridging MIB module. Copyright (c) 2010-2011 by Dell, Inc. All rights reserved. This software may not be copied, disclosed, transferred, or used except in accordance with a license granted by Dell, Inc. This software embodies proprietary information and trade secrets of Dell, Inc. Copyright (C) IEEE (2009). This version of this MIB module is published as clause 17.7 of IEEE Std 802.1Qaz; see the standard itself for full legal notices. ')
eqlDcbMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 12740, 19, 1))
class EqlDcbxTrafficClassGroupValue(TextualConvention, Integer32):
    description = 'Indicates a traffic class group. Values 0-7 correspond to traffic class groups.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 7)

class EqlDcbxAppSelector(TextualConvention, Integer32):
    description = 'Indicates the contents of a protocol object 0: Ethertype 1: TCP Port number 2: UDP Port number 3: Port number over both TCP and UDP 4: Port number over neither TCP nor UDP'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("asEthertype", 0), ("asTCPPortNumber", 1), ("asUDPPortNumber", 2), ("asTCPUDPPortNumber", 3), ("asNotTCPUDPPortNumber", 4))

class EqlDcbxAppProtocol(TextualConvention, Integer32):
    description = 'Contains the application protocol indicator the type of which is specified by an object with the syntax of EqlDcbxAppSelector'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class EqlDcbxSupportedCapacity(TextualConvention, Integer32):
    description = 'Indicates the supported capacity of a given feature, for example, the number of traffic classes supported. This TC is used for features that have a maximum capacity of eight but may have fewer supported.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8)

class EqlVlanIdentifier(TextualConvention, Unsigned32):
    description = 'A value used to identify a VLAN for VLAN tagged frames.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ValueRangeConstraint(4095, 4095), )
class EqlIEEE8021PriorityValue(TextualConvention, Unsigned32):
    reference = '12.13.3.3'
    description = 'An 802.1Q user priority value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class EqlIEEEDraftSubtypeValue(TextualConvention, Unsigned32):
    description = 'The sub-type to use within an 802.1Q draft TLV.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class EqlDcbxState(TextualConvention, Integer32):
    description = 'Indicates the current state of a DCB feature.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("disabled", 2))

class EqlDcbxVlanState(TextualConvention, Integer32):
    description = 'Indicates the current state of VLAN tagging.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("static", 1), ("dynamic", 2))

class EqlDcbxTransmissionSelectionAlgorithm(TextualConvention, Integer32):
    description = 'Indicates the Transmission Selection Algorithm 0: Strict priority 1: Credit-based shaper 2: Enhanced transmission selection 3-254: Reserved 255: Vendor-specific.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))
    namedValues = NamedValues(("tsaStrictPriority", 0), ("tsaCreditBasedShaper", 1), ("tsaEnhancedTransmission", 2), ("tsaVendorSpecific", 255))

class EqlDcbxMode(TextualConvention, Integer32):
    description = 'Indicates the current operating mode of DCB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("dcbx101Baseline", 1), ("dcbxIeeeStandard", 2))

eqlDcbStaticIfTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1), )
if mibBuilder.loadTexts: eqlDcbStaticIfTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbStaticIfTable.setDescription("EqualLogic-Persistent A table of DCB information per each interface of a system. Each row in this table supplies values for one port's DCB parameters.")
eqlDcbStaticIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eqlDcbStaticIfEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDcbStaticIfEntry.setDescription('An entry in the DCB table, containing information about DCB on a single interface.')
eqlDcbxConfigTCSupportedTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigTCSupportedTxEnable.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxConfigTCSupportedTxEnable.setDescription('This field is deprecated.')
eqlDcbxConfigETSConfigurationTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigETSConfigurationTxEnable.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxConfigETSConfigurationTxEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigETSConfigurationTxEnable.setDescription('The eqlDcbxConfigETSConfigurationTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined ETS Configuration TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
eqlDcbxConfigETSRecommendationTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigETSRecommendationTxEnable.setReference('35.5.3')
if mibBuilder.loadTexts: eqlDcbxConfigETSRecommendationTxEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigETSRecommendationTxEnable.setDescription('The eqlDcbxConfigETSRecommendationTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined ETS Recommendation TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
eqlDcbxConfigPFCTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigPFCTxEnable.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxConfigPFCTxEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigPFCTxEnable.setDescription('The eqlDcbxConfigPFCTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Priority-based Flow Fontrol TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
eqlDcbxConfigAppPriorityTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigAppPriorityTxEnable.setReference('35.5.5')
if mibBuilder.loadTexts: eqlDcbxConfigAppPriorityTxEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigAppPriorityTxEnable.setDescription('The eqlDcbxConfigAppPriorityTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Application Priority TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
eqlDcbxConfigQcnTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigQcnTxEnable.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxConfigQcnTxEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigQcnTxEnable.setDescription('The eqlDcbxConfigQcnTxEnable, which is defined as a truth value and configured by the network management, determines whether the IEEE 802.1 organizationally defined Quantitized Congestion Notification TLV transmission is allowed on a given LLDP transmission capable port. The value of this object is restored from non-volatile storage after a re-initialization of the management system.')
eqlDcbxAdminTCSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 7), EqlDcbxSupportedCapacity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminTCSupported.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxAdminTCSupported.setDescription('This field is deprecated.')
eqlDcbxAdminETSConMaxTCG = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 8), EqlDcbxSupportedCapacity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConMaxTCG.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxAdminETSConMaxTCG.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConMaxTCG.setDescription('Indicates the number of Traffic Class Groups supported on the remote system. A value of 0 indicates that 8 Traffic Class Groups are supported.')
eqlDcbxAdminETSConWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConWilling.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxAdminETSConWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConWilling.setDescription('Indicates if the local system is willing to accept the ETS configuration recommended by the remote system.')
eqlDcbxAdminETSConTrafficClassGroupBandwidthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone(hexValue="6400000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupBandwidthTable.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupBandwidthTable.setDescription('Each octet corresponds to one traffic class group. The first octet corresponds to traffic class group 0, the second to traffic class group 1, and so on. Each octet contains the bandwidth in percent to be allocated to the traffic class group. Valid values are between 0 and 100 inclusive. The total of all eight octets must equal 100. Note that an octet string is used instead of a table to enable atomic programming of these values which is required to fulfill the requirement that they always total to 100.')
eqlDcbxAdminETSRecoTrafficClassGroupBandwidthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone(hexValue="6400000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupBandwidthTable.setReference('.5.5.3')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupBandwidthTable.setDescription('Each octet corresponds to one traffic class group. The first octet corresponds to traffic class group 0, the second to traffic class group 1, and so on. Each octet contains the bandwidth in percent that the remote station is recommending to be allocated to the traffic class group. Valid values are between 0 and 100 inclusive. The total of all eight octets must equal 100. Note that an octet string is used instead of a table to enable atomic programming of these values which is required to fulfill the requirement that they always total to 100.')
eqlDcbxAdminPFCWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 12), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCWilling.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCWilling.setDescription('Indicates if the local system is willing to accept the PFC configuration of the remote system.')
eqlDcbxAdminPFCMBC = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCMBC.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCMBC.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCMBC.setDescription('Indicates if the local system is capable of bypassing MACSEC processing when MACSEC is disabled.')
eqlDcbxAdminPFCCap = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 14), EqlDcbxSupportedCapacity().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCCap.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCCap.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCCap.setDescription('Indicates the number of traffic classes on the local device that may simultaneously have PFC enabled.')
eqlDcbxAdminAppPriorityWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 15), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityWilling.setReference('35.5.5')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityWilling.setDescription('Indicates if the local system is willing to accept the Application Priority configuration of the remote system.')
eqlDcbxConfigAutoDetectVLANEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigAutoDetectVLANEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigAutoDetectVLANEnable.setDescription('Enable automatic detection of VLAN ID.')
eqlDcbxConfigVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 17), EqlVlanIdentifier().clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigVLANId.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigVLANId.setDescription('VLAN ID to use for DCB.')
eqlDcbxAdminETSConTrafficClassGroupPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 18), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri0.setDescription('Indicates the traffic class group to which priority 0 is to be assigned.')
eqlDcbxAdminETSConTrafficClassGroupPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 19), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri1.setDescription('Indicates the traffic class group to which priority 1 is to be assigned.')
eqlDcbxAdminETSConTrafficClassGroupPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 20), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri2.setDescription('Indicates the traffic class group to which priority 2 is to be assigned.')
eqlDcbxAdminETSConTrafficClassGroupPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 21), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri3.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri3.setDescription('Indicates the traffic class group to which priority 3 is to be assigned.')
eqlDcbxAdminETSConTrafficClassGroupPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 22), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri4.setDescription('Indicates the traffic class group to which priority 4 is to be assigned.')
eqlDcbxAdminETSConTrafficClassGroupPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 23), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri5.setDescription('Indicates the traffic class group to which priority 5 is to be assigned.')
eqlDcbxAdminETSConTrafficClassGroupPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 24), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri6.setDescription('Indicates the traffic class group to which priority 6 is to be assigned.')
eqlDcbxAdminETSConTrafficClassGroupPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 25), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTrafficClassGroupPri7.setDescription('Indicates the traffic class group to which priority 7 is to be assigned.')
eqlDcbxAdminPFCEnableEnabledPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri0.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri0.setDescription('Indicates if PFC is enabled on priority 0')
eqlDcbxAdminPFCEnableEnabledPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 27), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri1.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri1.setDescription('Indicates if PFC is enabled on priority 1')
eqlDcbxAdminPFCEnableEnabledPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri2.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri2.setDescription('Indicates if PFC is enabled on priority 2')
eqlDcbxAdminPFCEnableEnabledPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 29), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri3.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri3.setDescription('Indicates if PFC is enabled on priority 3')
eqlDcbxAdminPFCEnableEnabledPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 30), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri4.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri4.setDescription('Indicates if PFC is enabled on priority 4')
eqlDcbxAdminPFCEnableEnabledPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri5.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri5.setDescription('Indicates if PFC is enabled on priority 5')
eqlDcbxAdminPFCEnableEnabledPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri6.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri6.setDescription('Indicates if PFC is enabled on priority 6')
eqlDcbxAdminPFCEnableEnabledPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri7.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminPFCEnableEnabledPri7.setDescription('Indicates if PFC is enabled on priority 7')
eqlDcbxAdminAppPriorityiSCSITxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 34), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSITxEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSITxEnable.setDescription('Indicates whether or not the iSCSI application priority entry is transmitted as part ot the Application Priority TLV.')
eqlDcbxAdminAppPriorityiSCSIProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 35), EqlDcbxAppProtocol().clone(3260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSIProtocol.setReference('35.5.5')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSIProtocol.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSIProtocol.setDescription('The protocol indicator used for iSCSI in the Application Priority TLV.')
eqlDcbxAdminAppPriorityiSCSIPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 36), EqlIEEE8021PriorityValue().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSIPriority.setReference('35.5.5')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSIPriority.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityiSCSIPriority.setDescription('The priority value used for iSCSI in the Application Priority TLV.')
eqlDcbxAdminAppPriorityFCoETxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 37), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoETxEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoETxEnable.setDescription('Indicates whether or not the FCoE application priority entry is transmitted as part ot the Application Priority TLV.')
eqlDcbxAdminAppPriorityFCoEProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 38), EqlDcbxAppProtocol().clone(35078)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoEProtocol.setReference('35.5.5')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoEProtocol.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoEProtocol.setDescription('The protocol indicator used for FCoE in the Application Priority TLV.')
eqlDcbxAdminAppPriorityFCoEPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 39), EqlIEEE8021PriorityValue().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoEPriority.setReference('35.5.5')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoEPriority.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminAppPriorityFCoEPriority.setDescription('The priority value used for FCoE in the Application Priority TLV.')
eqlDcbxConfigDCBEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 40), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigDCBEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigDCBEnable.setDescription('Indicates whether or not DCB is enabled for this interface')
eqlDcbxConfigDCBX101Enable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 41), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigDCBX101Enable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigDCBX101Enable.setDescription('Indicates whether or not the transmit of DCBX 1.01 TLVs is enabled.')
eqlDcbxConfigDCBXIEEEDraftEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 42), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigDCBXIEEEDraftEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxConfigDCBXIEEEDraftEnable.setDescription('Indicates whether or not the transmit of DCBX IEEE 802.1Qaz draft TLVs is enabled.')
eqlDcbxConfigQcnSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 43), EqlIEEEDraftSubtypeValue().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigQcnSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxConfigQcnSubtype.setDescription('This field is deprecated.')
eqlDcbxConfigETSConSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 44), EqlIEEEDraftSubtypeValue().clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigETSConSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxConfigETSConSubtype.setDescription('This field is deprecated.')
eqlDcbxConfigETSRecoSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 45), EqlIEEEDraftSubtypeValue().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigETSRecoSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxConfigETSRecoSubtype.setDescription('This field is deprecated.')
eqlDcbxConfigPFCSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 46), EqlIEEEDraftSubtypeValue().clone(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigPFCSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxConfigPFCSubtype.setDescription('This field is deprecated.')
eqlDcbxConfigAppPrioritySubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 47), EqlIEEEDraftSubtypeValue().clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigAppPrioritySubtype.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxConfigAppPrioritySubtype.setDescription('This field is deprecated.')
eqlDcbxConfigTCSupportedSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 48), EqlIEEEDraftSubtypeValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxConfigTCSupportedSubtype.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxConfigTCSupportedSubtype.setDescription('This field is deprecated.')
eqlDcbxAdminETSRecoTrafficClassGroupPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 49), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri0.setDescription('Indicates the traffic class group to which priority 0 is to be assigned.')
eqlDcbxAdminETSRecoTrafficClassGroupPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 50), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri1.setDescription('Indicates the traffic class group to which priority 1 is to be assigned.')
eqlDcbxAdminETSRecoTrafficClassGroupPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 51), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri2.setDescription('Indicates the traffic class group to which priority 2 is to be assigned.')
eqlDcbxAdminETSRecoTrafficClassGroupPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 52), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri3.setDescription('Indicates the traffic class group to which priority 3 is to be assigned.')
eqlDcbxAdminETSRecoTrafficClassGroupPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 53), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri4.setDescription('Indicates the traffic class group to which priority 4 is to be assigned.')
eqlDcbxAdminETSRecoTrafficClassGroupPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 54), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri5.setDescription('Indicates the traffic class group to which priority 5 is to be assigned.')
eqlDcbxAdminETSRecoTrafficClassGroupPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 55), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri6.setDescription('Indicates the traffic class group to which priority 6 is to be assigned.')
eqlDcbxAdminETSRecoTrafficClassGroupPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 56), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTrafficClassGroupPri7.setDescription('Indicates the traffic class group to which priority 7 is to be assigned.')
eqlDcbCnGlobalMasterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 57), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnGlobalMasterEnable.setReference('802.1Qau clause 32.2.1')
if mibBuilder.loadTexts: eqlDcbCnGlobalMasterEnable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnGlobalMasterEnable.setDescription('The state of the congestion notification feature on this bridge component or system. If true, Congestion notification is enabled, and if false, congestion notification is disabled.')
eqlDcbCnRpPortPriMaxRps = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriMaxRps.setReference('802.1Qau clause 32.10.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriMaxRps.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriMaxRps.setDescription('An integer controlling the maximum number of Reaction Points allowed for this CNPV on this Port. An end station SHALL not create more than this many Reaction Point on this Port, but it MAY create fewer.')
eqlDcbCnRpgEnablePri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 59), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri0.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri0.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgEnablePri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 60), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri1.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri1.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgEnablePri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 61), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri2.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri2.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgEnablePri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 62), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri3.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri3.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgEnablePri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 63), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri4.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri4.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgEnablePri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 64), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri5.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri5.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgEnablePri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 65), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri6.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri6.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgEnablePri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 66), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri7.setReference('802.1Qau clause 32.11.1, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgEnablePri7.setDescription('Controls the rpEnabled variable of the Reaction Point state machines of the Reaction Points (RPs) controlled by this entry as follows: true(1) The rpEnabled variable for the RPs controlled by this object are not held in the FALSE state, thus enabling them to pay attention to received CNMs. false(2) The rpEnabled variable for the RPs controlled by this object are held in the FALSE state, thus disabling them from paying attention to received CNMs. ')
eqlDcbCnRpgTimeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 67), TimeInterval().clone(15)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgTimeReset.setReference('802.1Qau clause 32.11.2')
if mibBuilder.loadTexts: eqlDcbCnRpgTimeReset.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgTimeReset.setDescription('This object controls the value for all of the state machine variables, rpgTimeReset, used to reset the timers RpWhile. ')
eqlDcbCnRpgByteReset = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 68), Unsigned32().clone(150000)).setUnits('octets').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgByteReset.setReference('802.1Qau clause 32.11.3')
if mibBuilder.loadTexts: eqlDcbCnRpgByteReset.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgByteReset.setDescription('This object controls the value for all of the state machine variables, rpgByteReset, used to reset the counters rpByteCount. ')
eqlDcbCnRpgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 69), Unsigned32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgThreshold.setReference('802.1Qau clause 32.11.4')
if mibBuilder.loadTexts: eqlDcbCnRpgThreshold.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgThreshold.setDescription('This object controls the number of times rpByteStage or rpTimeStage can count before the RP rate control state machine advances states. ')
eqlDcbCnRpgMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 70), Unsigned32().clone(10000)).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgMaxRate.setReference('802.1Qau clause 32.11.5')
if mibBuilder.loadTexts: eqlDcbCnRpgMaxRate.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgMaxRate.setDescription('This object controls the maximum rate, in multiples of 1 Mbit/s, at which an RP can transmit. Default value is the speed of the port. A system SHALL support a minimim value for this object that is no larger than 5 Mbits/s (object value 5). This rate includes all bits consequent to transmitting the frame on the LAN, including preamble, inter-frame gap, etc. ')
eqlDcbCnRpgAiRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 71), Unsigned32().clone(5)).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgAiRate.setReference('802.1Qau clause 32.11.6')
if mibBuilder.loadTexts: eqlDcbCnRpgAiRate.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgAiRate.setDescription('This object controls the transmission rate increment in the RPR_ACTIVE_INCREASE state (rpgAiRate) in multiples of 1 Mbit/s. This rate includes all bits consequent to transmitting the frame on the LAN, including preamble, inter-frame gap, etc. ')
eqlDcbCnRpgHaiRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 72), Unsigned32().clone(50)).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgHaiRate.setReference('802.1Qau clause 32.11.7')
if mibBuilder.loadTexts: eqlDcbCnRpgHaiRate.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgHaiRate.setDescription('This object controls the transmission rate increment in the RPR_HYPER_INCREASE state (rpgHaiRate) in multiples of 1 Mbit/s. This rate includes all bits consequent to transmitting the frame on the LAN, including preamble, inter-frame gap, etc. ')
eqlDcbCnRpgGd = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 73), Integer32().clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgGd.setReference('802.1Qau clause 32.11.8')
if mibBuilder.loadTexts: eqlDcbCnRpgGd.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgGd.setDescription('This object controls the number of bits that the value of the Quantized Feedback field received in a CNM PDU is shifted to the right to decrease rpTargetRate. rpgGd is thus 2 to the negative power of this object, e.g., 7 means rpgGd = 1/128. ')
eqlDcbCnRpgMinDecFac = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgMinDecFac.setReference('802.1Qau clause 32.11.9')
if mibBuilder.loadTexts: eqlDcbCnRpgMinDecFac.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgMinDecFac.setDescription('This object controls the minimum factor by which the current RP transmit rate rpCurrentRate can be changed by reception of a Congestion Notification Message. Its integer value represents a percentage, from 1% to 100%. ')
eqlDcbCnRpgMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 75), Unsigned32().clone(5)).setUnits('Mbit/s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbCnRpgMinRate.setReference('802.1Qau clause 32.11.10')
if mibBuilder.loadTexts: eqlDcbCnRpgMinRate.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpgMinRate.setDescription('This object controls the minimum transmission rate (rpgMinRate) in multiples of 1 Mbit/s. A system SHALL support a value for this object that is no larger than 5 Mbit/s per second. This rate includes all bits consequent to transmitting the frame on the LAN, including preamble, inter-frame gap, etc. ')
eqlDcbDefaultiSCSIPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 76), EqlIEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbDefaultiSCSIPriority.setStatus('current')
if mibBuilder.loadTexts: eqlDcbDefaultiSCSIPriority.setDescription('The default priority value used for iSCSI when no priority value is negotiated through DCBX.')
eqlDcbDefaultFCoEPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 77), EqlIEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbDefaultFCoEPriority.setStatus('current')
if mibBuilder.loadTexts: eqlDcbDefaultFCoEPriority.setDescription('The default priority value used for FCoE when no priority value is negotiated through DCBX.')
eqlDcbxAdminETSConTsaTc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 78), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc0.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSConTsaTc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 79), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc1.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSConTsaTc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 80), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc2.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSConTsaTc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 81), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc3.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSConTsaTc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 82), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc4.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSConTsaTc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 83), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc5.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSConTsaTc6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 84), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc6.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSConTsaTc7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 85), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSConTsaTc7.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 86), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc0.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 87), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc1.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 88), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc2.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 89), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc3.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 90), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc4.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 91), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc5.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 92), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc6.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxAdminETSRecoTsaTc7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 1, 1, 93), EqlDcbxTransmissionSelectionAlgorithm().clone('tsaVendorSpecific')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxAdminETSRecoTsaTc7.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbDynamicIfTable = MibTable((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2), )
if mibBuilder.loadTexts: eqlDcbDynamicIfTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbDynamicIfTable.setDescription("EqualLogic-Dynamic A table of DCB information per each interface of a system. Each row in this table supplies values for one port's DCB parameters.")
eqlDcbDynamicIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1), ).setIndexNames((0, "EQLGROUP-MIB", "eqlGroupId"), (0, "EQLMEMBER-MIB", "eqlMemberIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: eqlDcbDynamicIfEntry.setStatus('current')
if mibBuilder.loadTexts: eqlDcbDynamicIfEntry.setDescription('An entry in the DCB table, containing information about DCB on a single interface.')
eqlDcbPfcRequestsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbPfcRequestsSent.setStatus('current')
if mibBuilder.loadTexts: eqlDcbPfcRequestsSent.setDescription('A count of the invoked PFC M_CONTROL.request primitives.')
eqlDcbPfcIndicationsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbPfcIndicationsReceived.setStatus('current')
if mibBuilder.loadTexts: eqlDcbPfcIndicationsReceived.setDescription('A count of the received PFC M_CONTROL.indication primitives.')
eqlDcbxLocTCSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 3), EqlDcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocTCSupported.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxLocTCSupported.setDescription('This field is deprecated.')
eqlDcbxLocETSConMaxTCG = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 4), EqlDcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConMaxTCG.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConMaxTCG.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConMaxTCG.setDescription('Indicates the number of Traffic Class Groups supported on the local system. A value of 0 indicates that 8 Traffic Class Groups are supported.')
eqlDcbxLocETSConWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConWilling.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConWilling.setDescription('Indicates if the local system is willing to accept the ETS configuration recommended by the remote system.')
eqlDcbxLocETSConTrafficClassGroupBandwidthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupBandwidthTable.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupBandwidthTable.setDescription('Each octet corresponds to one traffic class group. The first octet corresponds to traffic class group 0, the second to traffic class group 1, and so on. Each octet contains the bandwidth in percent to be allocated to the traffic class group. Valid values are between 0 and 100 inclusive. The total of all eight octets must equal 100. Note that an octet string is used instead of a table to enable atomic programming of these values which is required to fulfill the requirement that they always total to 100.')
eqlDcbxLocETSRecoTrafficClassGroupBandwidthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTrafficClassGroupBandwidthTable.setReference('35.5.3')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTrafficClassGroupBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTrafficClassGroupBandwidthTable.setDescription('Each octet corresponds to one traffic class group. The first octet corresponds to traffic class group 0, the second to traffic class group 1, and so on. Each octet contains the bandwidth in percent that the remote station is recommending to be allocated to the traffic class group. Valid values are between 0 and 100 inclusive. The total of all eight octets must equal 100. Note that an octet string is used instead of a table to enable atomic programming of these values which is required to fulfill the requirement that they always total to 100.')
eqlDcbxLocPFCWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCWilling.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCWilling.setDescription('Indicates if the local system is willing to accept the PFC configuration of the remote system.')
eqlDcbxLocPFCMBC = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCMBC.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCMBC.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCMBC.setDescription('Indicates if the local system is capable of bypassing MACSEC processing when MACSEC is disabled.')
eqlDcbxLocPFCCap = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 10), EqlDcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCCap.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCCap.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCCap.setDescription('Indicates the number of traffic classes on the local device that may simultaneously have PFC enabled. Zero indicates no limitation, i.e. all available traffic classes may have PFC enabled.')
eqlDcbxLocAppPriorityWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocAppPriorityWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocAppPriorityWilling.setDescription('Indicates if the local system is willing to accept the Application Priority configuration of the remote system.')
eqlDcbxRemTCSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 12), EqlDcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemTCSupported.setStatus('deprecated')
if mibBuilder.loadTexts: eqlDcbxRemTCSupported.setDescription('This field is deprecated.')
eqlDcbxRemETSConMaxTCG = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 13), EqlDcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConMaxTCG.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxRemETSConMaxTCG.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConMaxTCG.setDescription('Indicates the number of Traffic Class Groups supported on the remote system. A value of 0 indicates that 8 Traffic Class Groups are supported.')
eqlDcbxRemETSConWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConWilling.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxRemETSConWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConWilling.setDescription('Indicates if the remote system is willing to accept the ETS configuration recommended by the remote system.')
eqlDcbxRemETSConTrafficClassGroupBandwidthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTrafficClassGroupBandwidthTable.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxRemETSConTrafficClassGroupBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTrafficClassGroupBandwidthTable.setDescription('Each octet corresponds to one traffic class group. The first octet corresponds to traffic class group 0, the second to traffic class group 1, and so on. Each octet contains the bandwidth in percent to be allocated to the traffic class group. Valid values are between 0 and 100 inclusive. The total of all eight octets must equal 100. Note that an octet string is used instead of a table to enable atomic programming of these values which is required to fulfill the requirement that they always total to 100.')
eqlDcbxRemETSRecoTrafficClassGroupBandwidthTable = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTrafficClassGroupBandwidthTable.setReference('35.5.3')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTrafficClassGroupBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTrafficClassGroupBandwidthTable.setDescription('Each octet corresponds to one traffic class group. The first octet corresponds to traffic class group 0, the second to traffic class group 1, and so on. Each octet contains the bandwidth in percent that the remote station is recommending to be allocated to the traffic class group. Valid values are between 0 and 100 inclusive. The total of all eight octets must equal 100. Note that an octet string is used instead of a table to enable atomic programming of these values which is required to fulfill the requirement that they always total to 100.')
eqlDcbxRemPFCWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemPFCWilling.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxRemPFCWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemPFCWilling.setDescription('Indicates if the remote system is willing to accept the PFC configuration of the local system.')
eqlDcbxRemPFCMBC = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemPFCMBC.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxRemPFCMBC.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemPFCMBC.setDescription('Indicates if the remote system is capable of bypassing MACSEC processing when MACSEC is disabled.')
eqlDcbxRemPFCCap = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 19), EqlDcbxSupportedCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemPFCCap.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxRemPFCCap.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemPFCCap.setDescription('Indicates the number of traffic classes on the remote device that may simultaneously have PFC enabled. Zero indicates no limitation, i.e. all available traffic classes may have PFC enabled.')
eqlDcbxRemAppPriorityWilling = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemAppPriorityWilling.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemAppPriorityWilling.setDescription('Indicates if the remote system is willing to accept the Application Priority configuration of the local system.')
eqlDcbxLocETSConTrafficClassGroupPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 21), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri0.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri0.setDescription('Indicates the traffic class group to which priority 0 is assigned.')
eqlDcbxLocETSConTrafficClassGroupPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 22), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri1.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri1.setDescription('Indicates the traffic class group to which priority 1 is assigned.')
eqlDcbxLocETSConTrafficClassGroupPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 23), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri2.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri2.setDescription('Indicates the traffic class group to which priority 2 is assigned.')
eqlDcbxLocETSConTrafficClassGroupPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 24), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri3.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri3.setDescription('Indicates the traffic class group to which priority 3 is assigned.')
eqlDcbxLocETSConTrafficClassGroupPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 25), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri4.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri4.setDescription('Indicates the traffic class group to which priority 4 is assigned.')
eqlDcbxLocETSConTrafficClassGroupPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 26), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri5.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri5.setDescription('Indicates the traffic class group to which priority 5 is to be assigned.')
eqlDcbxLocETSConTrafficClassGroupPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 27), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri6.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri6.setDescription('Indicates the traffic class group to which priority 6 is assigned.')
eqlDcbxLocETSConTrafficClassGroupPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 28), EqlDcbxTrafficClassGroupValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri7.setReference('35.5.2')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTrafficClassGroupPri7.setDescription('Indicates the traffic class group to which priority 7 is assigned.')
eqlDcbxLocPFCEnableEnabledPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri0.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri0.setDescription('Indicates if PFC is enabled on priority 0')
eqlDcbxLocPFCEnableEnabledPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri1.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri1.setDescription('Indicates if PFC is enabled on priority 1')
eqlDcbxLocPFCEnableEnabledPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri2.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri2.setDescription('Indicates if PFC is enabled on priority 2')
eqlDcbxLocPFCEnableEnabledPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri3.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri3.setDescription('Indicates if PFC is enabled on priority 3')
eqlDcbxLocPFCEnableEnabledPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri4.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri4.setDescription('Indicates if PFC is enabled on priority 4')
eqlDcbxLocPFCEnableEnabledPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri5.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri5.setDescription('Indicates if PFC is enabled on priority 5')
eqlDcbxLocPFCEnableEnabledPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri6.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri6.setDescription('Indicates if PFC is enabled on priority 6')
eqlDcbxLocPFCEnableEnabledPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri7.setReference('35.5.4')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCEnableEnabledPri7.setDescription('Indicates if PFC is enabled on priority 7')
eqlDcbxLocVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 37), EqlVlanIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocVLANId.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocVLANId.setDescription('VLAN ID to use for DCB.')
eqlDcbxLocVLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 38), EqlDcbxVlanState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocVLANState.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocVLANState.setDescription('State of VLAN tagging.')
eqlDcbxLocDCBState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 39), EqlDcbxState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocDCBState.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocDCBState.setDescription('Current state of DCB.')
eqlDcbxLocPFCState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 40), EqlDcbxState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPFCState.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPFCState.setDescription('Current state of DCB feature PFC.')
eqlDcbxLocETSState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 41), EqlDcbxState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSState.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSState.setDescription('Current state of DCB feature ETS.')
eqlDcbxLocQCNState = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 42), EqlDcbxState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocQCNState.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocQCNState.setDescription('Current state of DCB feature QCN.')
eqlDcbxLociSCSIPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 43), EqlIEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLociSCSIPriority.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLociSCSIPriority.setDescription('Current iSCSI priority.')
eqlDcbxLocFCoEPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 44), EqlIEEE8021PriorityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocFCoEPriority.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocFCoEPriority.setDescription('Current state of DCB feature QCN.')
eqlDcbxLocBytesRxPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri0.setDescription('Count of bytes recevied on priority 0.')
eqlDcbxLocBytesRxPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri1.setDescription('Count of bytes recevied on priority 1.')
eqlDcbxLocBytesRxPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri2.setDescription('Count of bytes recevied on priority 2.')
eqlDcbxLocBytesRxPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri3.setDescription('Count of bytes recevied on priority 3.')
eqlDcbxLocBytesRxPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri4.setDescription('Count of bytes recevied on priority 4.')
eqlDcbxLocBytesRxPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri5.setDescription('Count of bytes recevied on priority 5.')
eqlDcbxLocBytesRxPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri6.setDescription('Count of bytes recevied on priority 6.')
eqlDcbxLocBytesRxPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesRxPri7.setDescription('Count of bytes recevied on priority 7.')
eqlDcbxLocBytesTxPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri0.setDescription('Count of bytes transmitted on priority 0.')
eqlDcbxLocBytesTxPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri1.setDescription('Count of bytes transmitted on priority 1.')
eqlDcbxLocBytesTxPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri2.setDescription('Count of bytes transmitted on priority 2.')
eqlDcbxLocBytesTxPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri3.setDescription('Count of bytes transmitted on priority 3.')
eqlDcbxLocBytesTxPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri4.setDescription('Count of bytes transmitted on priority 4.')
eqlDcbxLocBytesTxPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri5.setDescription('Count of bytes transmitted on priority 5.')
eqlDcbxLocBytesTxPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri6.setDescription('Count of bytes transmitted on priority 6.')
eqlDcbxLocBytesTxPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocBytesTxPri7.setDescription('Count of bytes transmitted on priority 7.')
eqlDcbCnRpPortPriCreatedRpsPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri0.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCreatedRpsPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri1.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCreatedRpsPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri2.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCreatedRpsPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri3.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCreatedRpsPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri4.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCreatedRpsPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri5.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCreatedRpsPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri6.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCreatedRpsPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCreatedRpsPri7.setDescription('This object returns the number of times any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable set TRUE by the reception of a Congestion Notification Message. Dividing the change in eqlDcbCnRpPortPriCentiseconds by the change in this object over a time interval yields the average lifetime of an active RP during that interval.')
eqlDcbCnRpPortPriCentisecondsPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri0.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri0.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbCnRpPortPriCentisecondsPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri1.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri1.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbCnRpPortPriCentisecondsPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri2.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri2.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbCnRpPortPriCentisecondsPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri3.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri3.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbCnRpPortPriCentisecondsPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri4.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri4.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbCnRpPortPriCentisecondsPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri5.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri5.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbCnRpPortPriCentisecondsPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri6.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri6.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbCnRpPortPriCentisecondsPri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri7.setReference('802.1Qau clause 32.10.3, 32.13.1')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbCnRpPortPriCentisecondsPri7.setDescription('This object returns the total number of centi-seconds that any of the Reaction Points (RPs) controlled by this entry has had its rpEnabled variable in the TRUE state. That is, once each centi-second, this counter is incremented by the number of RPs this entry controls that are actively rate limiting output frames. Dividing the change in this object over a time interval by the length of the interval yields the average number of RPs active over that interval. Dividing the change in this object by the change in eqlDcbCnRpPortPriCreatedRps over that same time interval yields the average lifetime of an active RP during that interval. ')
eqlDcbxLocPfcPausePri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri0.setDescription('Number of time PFC pause frames received for priority 0.')
eqlDcbxLocPfcPausePri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri1.setDescription('Number of time PFC pause frames received for priority 1.')
eqlDcbxLocPfcPausePri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri2.setDescription('Number of time PFC pause frames received for priority 2.')
eqlDcbxLocPfcPausePri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri3.setDescription('Number of time PFC pause frames received for priority 3.')
eqlDcbxLocPfcPausePri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri4.setDescription('Number of time PFC pause frames received for priority 4.')
eqlDcbxLocPfcPausePri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri5.setDescription('Number of time PFC pause frames received for priority 5.')
eqlDcbxLocPfcPausePri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri6.setDescription('Number of time PFC pause frames received for priority 6.')
eqlDcbxLocPfcPausePri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcPausePri7.setDescription('Number of time PFC pause frames received for priority 7.')
eqlDcbxLocPfcUnpausePri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri0.setDescription('Number of time PFC unpause frames received for priority 0.')
eqlDcbxLocPfcUnpausePri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri1.setDescription('Number of time PFC unpause frames received for priority 1.')
eqlDcbxLocPfcUnpausePri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri2.setDescription('Number of time PFC unpause frames received for priority 2.')
eqlDcbxLocPfcUnpausePri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri3.setDescription('Number of time PFC unpause frames received for priority 3.')
eqlDcbxLocPfcUnpausePri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri4.setDescription('Number of time PFC unpause frames received for priority 4.')
eqlDcbxLocPfcUnpausePri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri5.setDescription('Number of time PFC unpause frames received for priority 5.')
eqlDcbxLocPfcUnpausePri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri6.setDescription('Number of time PFC unpause frames received for priority 6.')
eqlDcbxLocPfcUnpausePri7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocPfcUnpausePri7.setDescription('Number of time PFC unpause frames received for priority 7.')
eqlDcbxLocETSConTsaTc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 93), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc0.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSConTsaTc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 94), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc1.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSConTsaTc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 95), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc2.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSConTsaTc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 96), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc3.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSConTsaTc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 97), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc4.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSConTsaTc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 98), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc5.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSConTsaTc6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 99), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc6.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSConTsaTc7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 100), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSConTsaTc7.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 101), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc0.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 102), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc1.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 103), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc2.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 104), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc3.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 105), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc4.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 106), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc5.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 107), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc6.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocETSRecoTsaTc7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 108), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocETSRecoTsaTc7.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 109), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc0.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 110), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc1.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 111), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc2.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 112), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc3.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 113), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc4.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 114), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc5.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 115), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc6.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSConTsaTc7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 116), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSConTsaTc7.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc0 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 117), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc0.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc0.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc1 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 118), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc1.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc1.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 119), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc2.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc2.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc3 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 120), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc3.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc3.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 121), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc4.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc4.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc5 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 122), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc5.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc5.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc6 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 123), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc6.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc6.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxRemETSRecoTsaTc7 = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 124), EqlDcbxTransmissionSelectionAlgorithm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc7.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxRemETSRecoTsaTc7.setDescription('Indicates the transmission selection algorithm which is assigned to this traffic class.')
eqlDcbxLocDCBMode = MibTableColumn((1, 3, 6, 1, 4, 1, 12740, 19, 1, 2, 1, 125), EqlDcbxMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqlDcbxLocDCBMode.setStatus('current')
if mibBuilder.loadTexts: eqlDcbxLocDCBMode.setDescription('Current operating mode of DCB.')
mibBuilder.exportSymbols("EQL-DCB-MIB", eqlDcbxAdminETSRecoTsaTc0=eqlDcbxAdminETSRecoTsaTc0, eqlDcbxConfigETSRecoSubtype=eqlDcbxConfigETSRecoSubtype, eqlDcbxAdminETSConTrafficClassGroupPri3=eqlDcbxAdminETSConTrafficClassGroupPri3, eqlDcbxLocPFCMBC=eqlDcbxLocPFCMBC, EqlDcbxAppSelector=EqlDcbxAppSelector, eqlDcbxRemAppPriorityWilling=eqlDcbxRemAppPriorityWilling, eqlDcbStaticIfTable=eqlDcbStaticIfTable, eqlDcbxConfigQcnSubtype=eqlDcbxConfigQcnSubtype, eqlDcbCnRpgEnablePri1=eqlDcbCnRpgEnablePri1, eqlDcbxLocETSConMaxTCG=eqlDcbxLocETSConMaxTCG, eqlDcbxAdminETSConTrafficClassGroupPri1=eqlDcbxAdminETSConTrafficClassGroupPri1, eqlDcbxLocBytesRxPri6=eqlDcbxLocBytesRxPri6, eqlDcbxLocPFCEnableEnabledPri7=eqlDcbxLocPFCEnableEnabledPri7, eqlDcbxLocPfcUnpausePri7=eqlDcbxLocPfcUnpausePri7, eqlDcbxConfigQcnTxEnable=eqlDcbxConfigQcnTxEnable, eqlDcbxAdminETSRecoTsaTc2=eqlDcbxAdminETSRecoTsaTc2, eqlDcbxRemETSConTsaTc0=eqlDcbxRemETSConTsaTc0, eqlDcbxAdminPFCEnableEnabledPri7=eqlDcbxAdminPFCEnableEnabledPri7, eqlDcbxConfigETSConSubtype=eqlDcbxConfigETSConSubtype, eqlDcbxLocPFCWilling=eqlDcbxLocPFCWilling, eqlDcbxLocPFCState=eqlDcbxLocPFCState, eqlDcbCnRpgByteReset=eqlDcbCnRpgByteReset, eqlDcbxLocETSConTsaTc5=eqlDcbxLocETSConTsaTc5, eqlDcbxLociSCSIPriority=eqlDcbxLociSCSIPriority, eqlDcbCnRpgGd=eqlDcbCnRpgGd, eqlDcbxAdminETSConTrafficClassGroupPri2=eqlDcbxAdminETSConTrafficClassGroupPri2, EqlDcbxTrafficClassGroupValue=EqlDcbxTrafficClassGroupValue, eqlDcbCnRpgEnablePri0=eqlDcbCnRpgEnablePri0, eqlDcbDefaultFCoEPriority=eqlDcbDefaultFCoEPriority, eqlDcbxAdminETSRecoTrafficClassGroupPri7=eqlDcbxAdminETSRecoTrafficClassGroupPri7, eqlDcbxLocETSConTsaTc4=eqlDcbxLocETSConTsaTc4, eqlDcbxConfigAppPrioritySubtype=eqlDcbxConfigAppPrioritySubtype, eqlDcbxLocETSRecoTsaTc3=eqlDcbxLocETSRecoTsaTc3, eqlDcbxConfigAppPriorityTxEnable=eqlDcbxConfigAppPriorityTxEnable, eqlDcbCnRpgEnablePri5=eqlDcbCnRpgEnablePri5, eqlDcbxLocBytesTxPri5=eqlDcbxLocBytesTxPri5, eqlDcbMIBObjects=eqlDcbMIBObjects, eqlDcbxRemETSConTsaTc6=eqlDcbxRemETSConTsaTc6, eqlDcbDefaultiSCSIPriority=eqlDcbDefaultiSCSIPriority, eqlDcbxRemETSConMaxTCG=eqlDcbxRemETSConMaxTCG, EqlDcbxTransmissionSelectionAlgorithm=EqlDcbxTransmissionSelectionAlgorithm, eqlDcbxLocBytesRxPri2=eqlDcbxLocBytesRxPri2, eqlDcbxLocBytesRxPri7=eqlDcbxLocBytesRxPri7, eqlDcbxConfigPFCTxEnable=eqlDcbxConfigPFCTxEnable, eqlDcbxLocPfcUnpausePri2=eqlDcbxLocPfcUnpausePri2, eqlDcbCnRpgTimeReset=eqlDcbCnRpgTimeReset, eqlDcbxRemETSRecoTsaTc4=eqlDcbxRemETSRecoTsaTc4, eqlDcbxRemETSRecoTsaTc7=eqlDcbxRemETSRecoTsaTc7, eqlDcbxRemETSRecoTrafficClassGroupBandwidthTable=eqlDcbxRemETSRecoTrafficClassGroupBandwidthTable, eqlDcbxAdminETSRecoTrafficClassGroupBandwidthTable=eqlDcbxAdminETSRecoTrafficClassGroupBandwidthTable, eqlDcbxLocETSConWilling=eqlDcbxLocETSConWilling, eqlDcbxAdminETSRecoTrafficClassGroupPri4=eqlDcbxAdminETSRecoTrafficClassGroupPri4, eqlDcbCnRpPortPriCentisecondsPri6=eqlDcbCnRpPortPriCentisecondsPri6, eqlDcbxAdminETSRecoTrafficClassGroupPri6=eqlDcbxAdminETSRecoTrafficClassGroupPri6, eqlDcbxAdminAppPriorityFCoEProtocol=eqlDcbxAdminAppPriorityFCoEProtocol, eqlDcbCnRpPortPriCreatedRpsPri4=eqlDcbCnRpPortPriCreatedRpsPri4, eqlDcbxAdminETSRecoTsaTc5=eqlDcbxAdminETSRecoTsaTc5, eqlDcbxRemETSConTsaTc2=eqlDcbxRemETSConTsaTc2, eqlDcbxAdminTCSupported=eqlDcbxAdminTCSupported, eqlDcbxLocETSRecoTsaTc0=eqlDcbxLocETSRecoTsaTc0, eqlDcbCnRpPortPriCreatedRpsPri5=eqlDcbCnRpPortPriCreatedRpsPri5, eqlDcbxLocPfcUnpausePri4=eqlDcbxLocPfcUnpausePri4, eqlDcbxLocFCoEPriority=eqlDcbxLocFCoEPriority, eqlDcbxAdminAppPriorityFCoETxEnable=eqlDcbxAdminAppPriorityFCoETxEnable, eqlDcbxRemETSRecoTsaTc2=eqlDcbxRemETSRecoTsaTc2, eqlDcbCnRpPortPriCentisecondsPri7=eqlDcbCnRpPortPriCentisecondsPri7, eqlDcbxLocETSConTrafficClassGroupPri4=eqlDcbxLocETSConTrafficClassGroupPri4, eqlDcbCnRpPortPriCreatedRpsPri2=eqlDcbCnRpPortPriCreatedRpsPri2, eqlDcbxConfigDCBXIEEEDraftEnable=eqlDcbxConfigDCBXIEEEDraftEnable, eqlDcbCnGlobalMasterEnable=eqlDcbCnGlobalMasterEnable, eqlDcbxLocBytesRxPri3=eqlDcbxLocBytesRxPri3, eqlDcbxLocETSConTsaTc7=eqlDcbxLocETSConTsaTc7, eqlDcbxLocPFCEnableEnabledPri5=eqlDcbxLocPFCEnableEnabledPri5, eqlDcbxLocPFCEnableEnabledPri1=eqlDcbxLocPFCEnableEnabledPri1, eqlDcbxConfigETSConfigurationTxEnable=eqlDcbxConfigETSConfigurationTxEnable, eqlDcbxLocETSRecoTsaTc7=eqlDcbxLocETSRecoTsaTc7, eqlDcbxRemETSConTsaTc3=eqlDcbxRemETSConTsaTc3, eqlDcbxRemETSConTsaTc1=eqlDcbxRemETSConTsaTc1, eqlDcbCnRpgEnablePri3=eqlDcbCnRpgEnablePri3, EqlDcbxMode=EqlDcbxMode, eqlDcbxAdminETSConTsaTc0=eqlDcbxAdminETSConTsaTc0, eqlDcbCnRpPortPriCentisecondsPri5=eqlDcbCnRpPortPriCentisecondsPri5, eqlDcbxConfigVLANId=eqlDcbxConfigVLANId, eqlDcbxLocETSConTrafficClassGroupPri7=eqlDcbxLocETSConTrafficClassGroupPri7, eqlDcbCnRpPortPriCreatedRpsPri7=eqlDcbCnRpPortPriCreatedRpsPri7, eqlDcbxLocPFCEnableEnabledPri0=eqlDcbxLocPFCEnableEnabledPri0, EqlDcbxSupportedCapacity=EqlDcbxSupportedCapacity, eqlDcbCnRpgThreshold=eqlDcbCnRpgThreshold, eqlDcbxLocPfcPausePri7=eqlDcbxLocPfcPausePri7, eqlDcbxAdminAppPriorityiSCSIProtocol=eqlDcbxAdminAppPriorityiSCSIProtocol, eqlDcbxAdminETSConTsaTc5=eqlDcbxAdminETSConTsaTc5, eqlDcbCnRpgMaxRate=eqlDcbCnRpgMaxRate, eqlDcbxLocBytesRxPri4=eqlDcbxLocBytesRxPri4, eqlDcbCnRpPortPriCreatedRpsPri6=eqlDcbCnRpPortPriCreatedRpsPri6, eqlDcbDynamicIfTable=eqlDcbDynamicIfTable, eqlDcbxLocETSConTsaTc3=eqlDcbxLocETSConTsaTc3, eqlDcbxLocPfcUnpausePri3=eqlDcbxLocPfcUnpausePri3, eqlDcbxAdminETSConTsaTc4=eqlDcbxAdminETSConTsaTc4, eqlDcbxConfigDCBX101Enable=eqlDcbxConfigDCBX101Enable, eqlDcbxAdminPFCEnableEnabledPri1=eqlDcbxAdminPFCEnableEnabledPri1, eqlDcbCnRpgAiRate=eqlDcbCnRpgAiRate, eqlDcbxLocPfcPausePri6=eqlDcbxLocPfcPausePri6, eqlDcbxLocPfcUnpausePri6=eqlDcbxLocPfcUnpausePri6, eqlDcbxLocBytesTxPri4=eqlDcbxLocBytesTxPri4, eqlDcbxLocBytesRxPri0=eqlDcbxLocBytesRxPri0, eqlDcbCnRpPortPriCentisecondsPri0=eqlDcbCnRpPortPriCentisecondsPri0, eqlDcbxLocDCBState=eqlDcbxLocDCBState, eqlDcbCnRpgEnablePri6=eqlDcbCnRpgEnablePri6, eqlDcbxLocPfcUnpausePri0=eqlDcbxLocPfcUnpausePri0, eqlDcbxAdminPFCEnableEnabledPri4=eqlDcbxAdminPFCEnableEnabledPri4, eqlDcbxAdminETSConTrafficClassGroupPri7=eqlDcbxAdminETSConTrafficClassGroupPri7, eqlDcbxRemTCSupported=eqlDcbxRemTCSupported, eqlDcbCnRpPortPriCreatedRpsPri3=eqlDcbCnRpPortPriCreatedRpsPri3, EqlIEEEDraftSubtypeValue=EqlIEEEDraftSubtypeValue, eqlDcbxAdminAppPriorityiSCSITxEnable=eqlDcbxAdminAppPriorityiSCSITxEnable, eqlDcbxLocETSConTrafficClassGroupPri6=eqlDcbxLocETSConTrafficClassGroupPri6, eqlDcbCnRpgEnablePri7=eqlDcbCnRpgEnablePri7, eqlDcbxLocETSConTsaTc1=eqlDcbxLocETSConTsaTc1, eqlDcbxRemPFCMBC=eqlDcbxRemPFCMBC, eqlDcbxConfigAutoDetectVLANEnable=eqlDcbxConfigAutoDetectVLANEnable, eqlDcbxAdminETSRecoTsaTc6=eqlDcbxAdminETSRecoTsaTc6, eqlDcbxLocETSRecoTsaTc5=eqlDcbxLocETSRecoTsaTc5, eqlDcbxLocETSConTrafficClassGroupBandwidthTable=eqlDcbxLocETSConTrafficClassGroupBandwidthTable, eqlDcbxAdminPFCMBC=eqlDcbxAdminPFCMBC, eqlDcbxAdminPFCEnableEnabledPri5=eqlDcbxAdminPFCEnableEnabledPri5, eqlDcbPfcIndicationsReceived=eqlDcbPfcIndicationsReceived, eqlDcbxLocETSRecoTsaTc2=eqlDcbxLocETSRecoTsaTc2, eqlDcbxAdminPFCWilling=eqlDcbxAdminPFCWilling, eqlDcbxAdminETSConWilling=eqlDcbxAdminETSConWilling, eqlDcbxAdminAppPriorityWilling=eqlDcbxAdminAppPriorityWilling, eqlDcbxLocTCSupported=eqlDcbxLocTCSupported, eqlDcbxLocETSConTrafficClassGroupPri3=eqlDcbxLocETSConTrafficClassGroupPri3, eqlDcbxAdminETSRecoTrafficClassGroupPri2=eqlDcbxAdminETSRecoTrafficClassGroupPri2, eqlDcbxLocPfcPausePri0=eqlDcbxLocPfcPausePri0, eqlDcbxLocETSConTrafficClassGroupPri5=eqlDcbxLocETSConTrafficClassGroupPri5, eqlDcbxRemETSConTsaTc7=eqlDcbxRemETSConTsaTc7, EqlIEEE8021PriorityValue=EqlIEEE8021PriorityValue, eqlDcbxAdminETSConTsaTc3=eqlDcbxAdminETSConTsaTc3, eqlDcbxAdminETSRecoTsaTc3=eqlDcbxAdminETSRecoTsaTc3, eqlDcbCnRpPortPriCentisecondsPri1=eqlDcbCnRpPortPriCentisecondsPri1, eqlDcbxConfigDCBEnable=eqlDcbxConfigDCBEnable, eqlDcbxLocETSRecoTsaTc6=eqlDcbxLocETSRecoTsaTc6, eqlDcbxAdminETSRecoTrafficClassGroupPri5=eqlDcbxAdminETSRecoTrafficClassGroupPri5, eqlDcbCnRpgMinDecFac=eqlDcbCnRpgMinDecFac, eqlDcbxLocETSConTsaTc0=eqlDcbxLocETSConTsaTc0, eqlDcbxAdminETSRecoTsaTc1=eqlDcbxAdminETSRecoTsaTc1, eqlDcbxLocETSConTrafficClassGroupPri0=eqlDcbxLocETSConTrafficClassGroupPri0, eqlDcbxConfigTCSupportedTxEnable=eqlDcbxConfigTCSupportedTxEnable, eqlDcbCnRpgEnablePri2=eqlDcbCnRpgEnablePri2, eqlDcbCnRpgHaiRate=eqlDcbCnRpgHaiRate, eqlDcbxLocVLANId=eqlDcbxLocVLANId, eqlDcbxLocBytesTxPri7=eqlDcbxLocBytesTxPri7, eqlDcbxRemETSRecoTsaTc6=eqlDcbxRemETSRecoTsaTc6, PYSNMP_MODULE_ID=eqlDcbMib, eqlDcbxConfigTCSupportedSubtype=eqlDcbxConfigTCSupportedSubtype, eqlDcbxAdminETSConTsaTc7=eqlDcbxAdminETSConTsaTc7, eqlDcbxAdminETSConTsaTc6=eqlDcbxAdminETSConTsaTc6, eqlDcbxLocETSConTsaTc6=eqlDcbxLocETSConTsaTc6, eqlDcbxRemPFCWilling=eqlDcbxRemPFCWilling, eqlDcbCnRpPortPriCreatedRpsPri1=eqlDcbCnRpPortPriCreatedRpsPri1, eqlDcbxLocETSConTrafficClassGroupPri2=eqlDcbxLocETSConTrafficClassGroupPri2, eqlDcbMib=eqlDcbMib, eqlDcbxAdminETSRecoTrafficClassGroupPri1=eqlDcbxAdminETSRecoTrafficClassGroupPri1, eqlDcbxLocBytesRxPri1=eqlDcbxLocBytesRxPri1, eqlDcbxLocPfcPausePri5=eqlDcbxLocPfcPausePri5, eqlDcbxRemETSRecoTsaTc1=eqlDcbxRemETSRecoTsaTc1, eqlDcbxLocDCBMode=eqlDcbxLocDCBMode, eqlDcbxLocETSConTrafficClassGroupPri1=eqlDcbxLocETSConTrafficClassGroupPri1, eqlDcbxConfigPFCSubtype=eqlDcbxConfigPFCSubtype, eqlDcbPfcRequestsSent=eqlDcbPfcRequestsSent, eqlDcbxLocPFCEnableEnabledPri2=eqlDcbxLocPFCEnableEnabledPri2, eqlDcbxLocETSState=eqlDcbxLocETSState, eqlDcbxLocETSRecoTrafficClassGroupBandwidthTable=eqlDcbxLocETSRecoTrafficClassGroupBandwidthTable, eqlDcbxAdminETSConTrafficClassGroupPri6=eqlDcbxAdminETSConTrafficClassGroupPri6, eqlDcbxAdminPFCEnableEnabledPri6=eqlDcbxAdminPFCEnableEnabledPri6, eqlDcbxAdminPFCCap=eqlDcbxAdminPFCCap, eqlDcbxLocETSRecoTsaTc1=eqlDcbxLocETSRecoTsaTc1, eqlDcbxLocBytesTxPri2=eqlDcbxLocBytesTxPri2, eqlDcbCnRpPortPriMaxRps=eqlDcbCnRpPortPriMaxRps, eqlDcbxAdminETSConTsaTc1=eqlDcbxAdminETSConTsaTc1, eqlDcbxLocPFCEnableEnabledPri3=eqlDcbxLocPFCEnableEnabledPri3, eqlDcbxLocPfcPausePri2=eqlDcbxLocPfcPausePri2, eqlDcbxLocPfcUnpausePri5=eqlDcbxLocPfcUnpausePri5, eqlDcbCnRpPortPriCentisecondsPri4=eqlDcbCnRpPortPriCentisecondsPri4, eqlDcbxAdminETSConTrafficClassGroupPri5=eqlDcbxAdminETSConTrafficClassGroupPri5, eqlDcbxRemETSRecoTsaTc0=eqlDcbxRemETSRecoTsaTc0, eqlDcbCnRpPortPriCreatedRpsPri0=eqlDcbCnRpPortPriCreatedRpsPri0, EqlDcbxAppProtocol=EqlDcbxAppProtocol, eqlDcbxRemETSConWilling=eqlDcbxRemETSConWilling, eqlDcbxAdminETSRecoTsaTc7=eqlDcbxAdminETSRecoTsaTc7, EqlVlanIdentifier=EqlVlanIdentifier, eqlDcbxLocVLANState=eqlDcbxLocVLANState, eqlDcbxAdminPFCEnableEnabledPri0=eqlDcbxAdminPFCEnableEnabledPri0, eqlDcbxRemETSRecoTsaTc5=eqlDcbxRemETSRecoTsaTc5, eqlDcbDynamicIfEntry=eqlDcbDynamicIfEntry, eqlDcbxRemETSConTrafficClassGroupBandwidthTable=eqlDcbxRemETSConTrafficClassGroupBandwidthTable, eqlDcbxLocPFCEnableEnabledPri4=eqlDcbxLocPFCEnableEnabledPri4, eqlDcbxLocAppPriorityWilling=eqlDcbxLocAppPriorityWilling, eqlDcbxRemPFCCap=eqlDcbxRemPFCCap, eqlDcbxLocBytesTxPri1=eqlDcbxLocBytesTxPri1, eqlDcbxAdminETSRecoTrafficClassGroupPri0=eqlDcbxAdminETSRecoTrafficClassGroupPri0, eqlDcbxAdminETSConTrafficClassGroupBandwidthTable=eqlDcbxAdminETSConTrafficClassGroupBandwidthTable, eqlDcbxLocBytesRxPri5=eqlDcbxLocBytesRxPri5, eqlDcbxLocPfcPausePri4=eqlDcbxLocPfcPausePri4, eqlDcbxLocPFCEnableEnabledPri6=eqlDcbxLocPFCEnableEnabledPri6, eqlDcbxLocQCNState=eqlDcbxLocQCNState, eqlDcbCnRpPortPriCentisecondsPri3=eqlDcbCnRpPortPriCentisecondsPri3, eqlDcbxAdminETSConMaxTCG=eqlDcbxAdminETSConMaxTCG, eqlDcbxAdminAppPriorityiSCSIPriority=eqlDcbxAdminAppPriorityiSCSIPriority, eqlDcbxAdminAppPriorityFCoEPriority=eqlDcbxAdminAppPriorityFCoEPriority, eqlDcbCnRpPortPriCentisecondsPri2=eqlDcbCnRpPortPriCentisecondsPri2, eqlDcbxLocETSConTsaTc2=eqlDcbxLocETSConTsaTc2, eqlDcbxLocPfcPausePri1=eqlDcbxLocPfcPausePri1, eqlDcbxAdminETSConTsaTc2=eqlDcbxAdminETSConTsaTc2, eqlDcbxRemETSConTsaTc5=eqlDcbxRemETSConTsaTc5, eqlDcbxAdminPFCEnableEnabledPri2=eqlDcbxAdminPFCEnableEnabledPri2, eqlDcbxRemETSConTsaTc4=eqlDcbxRemETSConTsaTc4, eqlDcbxLocPfcPausePri3=eqlDcbxLocPfcPausePri3, eqlDcbxAdminETSRecoTrafficClassGroupPri3=eqlDcbxAdminETSRecoTrafficClassGroupPri3, eqlDcbxLocBytesTxPri3=eqlDcbxLocBytesTxPri3, eqlDcbxLocETSRecoTsaTc4=eqlDcbxLocETSRecoTsaTc4, eqlDcbxLocPfcUnpausePri1=eqlDcbxLocPfcUnpausePri1, eqlDcbStaticIfEntry=eqlDcbStaticIfEntry, EqlDcbxVlanState=EqlDcbxVlanState, eqlDcbxLocPFCCap=eqlDcbxLocPFCCap, eqlDcbxLocBytesTxPri0=eqlDcbxLocBytesTxPri0, eqlDcbxAdminETSRecoTsaTc4=eqlDcbxAdminETSRecoTsaTc4, eqlDcbxAdminPFCEnableEnabledPri3=eqlDcbxAdminPFCEnableEnabledPri3, eqlDcbxAdminETSConTrafficClassGroupPri4=eqlDcbxAdminETSConTrafficClassGroupPri4, eqlDcbxLocBytesTxPri6=eqlDcbxLocBytesTxPri6, eqlDcbxRemETSRecoTsaTc3=eqlDcbxRemETSRecoTsaTc3, EqlDcbxState=EqlDcbxState, eqlDcbCnRpgEnablePri4=eqlDcbCnRpgEnablePri4, eqlDcbCnRpgMinRate=eqlDcbCnRpgMinRate, eqlDcbxAdminETSConTrafficClassGroupPri0=eqlDcbxAdminETSConTrafficClassGroupPri0, eqlDcbxConfigETSRecommendationTxEnable=eqlDcbxConfigETSRecommendationTxEnable)
