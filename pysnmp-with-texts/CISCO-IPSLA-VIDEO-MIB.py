#
# PySNMP MIB module CISCO-IPSLA-VIDEO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPSLA-VIDEO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
rttMonCtrlAdminIndex, = mibBuilder.importSymbols("CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex")
RttResponseSense, = mibBuilder.importSymbols("CISCO-RTTMON-TC-MIB", "RttResponseSense")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Integer32, iso, ObjectIdentity, MibIdentifier, Bits, Gauge32, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "iso", "ObjectIdentity", "MibIdentifier", "Bits", "Gauge32", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "NotificationType", "Unsigned32")
DisplayString, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp")
ciscoIpslaVideoMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 744))
ciscoIpslaVideoMIB.setRevisions(('2010-06-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpslaVideoMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIpslaVideoMIB.setLastUpdated('201006110000Z')
if mibBuilder.loadTexts: ciscoIpslaVideoMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIpslaVideoMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoIpslaVideoMIB.setDescription("IP SLA is a capability which utilizes active monitoring for network performance. It can be used for network troubleshooting, network assessment and health monitoring. This MIB defines a collection of statistics resulting from the 'video' IP SLA operation. The Video Statistics table names are: cipslaLatestVideoStatsTable --- Contains only the latest statistics cipslaVideoAggStatsTable --- Contains aggregated statistics To create the Video operation, set rttMonEchoAdminProtocol (defined in CISCO-RTTMON-MIB) object to 'videoAppl'. Once the operation has been scheduled, both cipslaLatestVideoStatsTable and cipslaVideoAggStatsTable will be populated. Glossary: IP SLA - Cisco IOS IP Service Level Agreements IP SLA operation - Refers to the 'video' operation supported by IP SLA. RTT - Round Trip Time")
ciscoIpslaVideoMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 744, 0))
ciscoIpslaVideoMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 744, 1))
ciscoIpslaVideoMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 744, 2))
cipslaVideoLatestOper = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1))
cipslaVideoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2))
cipslaLatestVideoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1), )
if mibBuilder.loadTexts: cipslaLatestVideoStatsTable.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoStatsTable.setDescription("The 'video' operation sends out video streams at the frequency specified by rttMonCtrlAdminFrequency. This table contains the statistics calculated for the latest video packets. Each conceptual row in this table corresponds to an 'video' operation defined in rttMonCtrlAdminTable and has same index as rttMonCtrlAdminTable.")
cipslaLatestVideoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex"))
if mibBuilder.loadTexts: cipslaLatestVideoStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoStatsEntry.setDescription("A collection of objects that record the latest Video jitter operation. An entry is created only when the following objects are valid. - rttMonCtrlAdminRttType - rttMonEchoAdminProtocol The entry will start to collect data when rttMonCtrlAdminStatus is in 'active' state. The entry will be removed when the rttMonCtrlAdminStatus is changed to 'destroy' state.")
cipslaLatestVideoMinPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 1), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoMinPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoMinPosSD.setDescription('The minimum of all positive jitter values for packets sent from source to destination.')
cipslaLatestVideoMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 2), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoMaxPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoMaxPosSD.setDescription('The maximum of all positive jitter values for packets sent from source to destination.')
cipslaLatestVideoNumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 3), Gauge32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoNumPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoNumPosSD.setDescription('The number of all positive jitter values for packets sent from source to destination.')
cipslaLatestVideoSumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoSumPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoSumPosSD.setDescription('The sum of all positive jitter values for packets sent source to destination. The number of such values is stored in cipslaLatestVideoNumPosSD.')
cipslaLatestVideoSum2PosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoSum2PosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoSum2PosSD.setDescription('The sum of square of all positive jitter values for packets sent from source to destination.')
cipslaLatestVideoMinNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoMinNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoMinNegSD.setDescription('The minimum of absolute values of all negative jitter values for packets sent from source to destination.')
cipslaLatestVideoMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoMaxNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoMaxNegSD.setDescription('The maximum of absolute values of all negative jitter values for packets sent from source to destination.')
cipslaLatestVideoNumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 8), Gauge32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoNumNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoNumNegSD.setDescription('The number of all negative jitter values for packets sent from source to destination.')
cipslaLatestVideoSumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoSumNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoSumNegSD.setDescription('The sum of all negative jitter values for packets sent from source to destination. The number of such values is stored in cipslaLatestVideoNumNegSD.')
cipslaLatestVideoSum2NegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoSum2NegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoSum2NegSD.setDescription('The sum of square of all negative jitter values for packets sent from source to destination.')
cipslaLatestVideoPktLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 11), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoPktLossSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoPktLossSD.setDescription('The number of packets lost when sent from source to destination.')
cipslaLatestVideoPktOutSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 12), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoPktOutSeq.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoPktOutSeq.setDescription('The number of packets arrived out of sequence.')
cipslaLatestVideoSense = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 13), RttResponseSense()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoSense.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoSense.setDescription('An application specific sense code for the completion status.')
cipslaLatestVideoOWSumSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 14), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoOWSumSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoOWSumSD.setDescription('The sum of one way trip time from source to destination.')
cipslaLatestVideoOWSum2SD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 15), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoOWSum2SD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoOWSum2SD.setDescription('The sum of squares of one way trip time from source to destination.')
cipslaLatestVideoOWMinSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 16), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoOWMinSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoOWMinSD.setDescription('The minimum of all one way trip time from source to destination.')
cipslaLatestVideoOWMaxSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 17), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoOWMaxSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoOWMaxSD.setDescription('The maximum of all one way trip time from source to destination.')
cipslaLatestVideoNumOWSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 18), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoNumOWSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoNumOWSD.setDescription('The number of successful one way trip time measurements from source to destination.')
cipslaLatestVideoAvgJitterSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 19), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoAvgJitterSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoAvgJitterSD.setDescription('The average of positive and negative jitter values in Source-to-Destination direction.')
cipslaLatestVideoIAJOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 20), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoIAJOut.setReference('Refer to the following documents for the definition: RFC 1889, Section 6.3.1')
if mibBuilder.loadTexts: cipslaLatestVideoIAJOut.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoIAJOut.setDescription('Inter-arrival jitter (RFC 1889) at responder.')
cipslaLatestVideoErrSenseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 21), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoErrSenseDescr.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoErrSenseDescr.setDescription('An sense description for the completion status of the latest video operation.')
cipslaLatestVideoUnSyncRTs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoUnSyncRTs.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoUnSyncRTs.setDescription('The number of RTT operations that have completed with sender and responder out of sync with NTP. The NTP sync means the total of NTP offset on sender and responder is within configured tolerance level')
cipslaLatestVideoOWSumSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoOWSumSDHigh.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoOWSumSDHigh.setDescription('The sum of one way latency from source to destination (high order 32 bits). The low order 32 bits are stored in cipslaLatestVideoOWSumSD.')
cipslaLatestVideoOWSum2SDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoOWSum2SDHigh.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoOWSum2SDHigh.setDescription('The sum of squares of one way latency from source to destination (high order 32 bits). The low order 32 bits are stored in cipslaLatestVideoOWSum2SD.')
cipslaLatestVideoNTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("outOfSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoNTPState.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoNTPState.setDescription('A value of sync(1) means sender and responder was in sync with NTP. The NTP sync means the total of NTP offset on sender and responder is within configured tolerance level.')
cipslaLatestVideoIPDVAvgSDJ = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 26), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoIPDVAvgSDJ.setReference('Refer to the following documents for the definition: Inter Packet Delay Variation, RFC 5481 (IPDV)')
if mibBuilder.loadTexts: cipslaLatestVideoIPDVAvgSDJ.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoIPDVAvgSDJ.setDescription('Source to Destination IPDV average jitter according to RFC 5481.')
cipslaLatestVideoOWAvgSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 27), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoOWAvgSD.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoOWAvgSD.setDescription('The average latency value from source to destination.')
cipslaLatestVideoPktLateArrival = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 1, 1, 1, 28), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaLatestVideoPktLateArrival.setStatus('current')
if mibBuilder.loadTexts: cipslaLatestVideoPktLateArrival.setDescription('The number of packets that arrived after the timeout.')
cipslaVideoAggStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1), )
if mibBuilder.loadTexts: cipslaVideoAggStatsTable.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggStatsTable.setDescription("The 'video' statistics table contains summarized information of the results for a conceptual control row. A rolling accumulated history of this information is maintained in a series of hourly 'group(s)'. When ipslaVideoAggStartTimeId groups exceeds the rttMonStatisticsAdminNumHourGroups value, the oldest corresponding hourly group will be deleted and will be replaced with the new ipslaVideoAggStatsStartTimeId hourly group.")
cipslaVideoAggStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-RTTMON-MIB", "rttMonCtrlAdminIndex"), (0, "CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggStartTimeId"))
if mibBuilder.loadTexts: cipslaVideoAggStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggStatsEntry.setDescription("This entry contains the objects which accumulate the results of a series of 'video' operations over a 60 minute time period or a time period stored in rttMonScheduleAdminRttLife, whichever is smaller. An entry is created only if when the following objects are valid. - rttMonCtrlAdminRttType - rttMonEchoAdminProtocol The entry will start to collect data when rttMonCtrlAdminStatus is in 'active' state. The entry will be removed when the rttMonCtrlAdminStatus is changed to 'destroy' state. cipslaVideoAggStartTimeId will be created at the beginning of the hour and will keep aggregating statistics until the end of the hour.")
cipslaVideoAggStartTimeId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 1), TimeStamp())
if mibBuilder.loadTexts: cipslaVideoAggStartTimeId.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggStartTimeId.setDescription('The value of sysUpTime at the time when this row was created.')
cipslaVideoAggCompletions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 2), Counter32()).setUnits('completions').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggCompletions.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggCompletions.setDescription('The number of video operations that have completed successfully.')
cipslaVideoAggOverThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 3), Counter32()).setUnits('operations').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggOverThresholds.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggOverThresholds.setDescription('The number of video operations that violate jitterAvg threshold which is defined in RttMonReactVar.')
cipslaVideoAggMinPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggMinPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggMinPosSD.setDescription('The minimum of absolute values of all positive jitter values for packets sent from source to destination.')
cipslaVideoAggMaxPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggMaxPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggMaxPosSD.setDescription('The maximum of absolute values of all positive jitter values for packets sent from source to destination.')
cipslaVideoAggNumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 6), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggNumPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggNumPosSD.setDescription('The number of all positive jitter values for packets sent from source to destination.')
cipslaVideoAggSumPosSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 7), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggSumPosSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggSumPosSD.setDescription('The sum of all positive jitter values for packets sent from source to destination. The number of such values is stored in ipslaVideoAggNumPosSDs.')
cipslaVideoAggSum2PosSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 8), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggSum2PosSDLow.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggSum2PosSDLow.setDescription('The sum of square of all positive jitter values for packets sent from source to destination (low order 32 bits).')
cipslaVideoAggSum2PosSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 9), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggSum2PosSDHigh.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggSum2PosSDHigh.setDescription('The sum of square of all positive jitter values for packets sent from source to destination (high order 32 bits).')
cipslaVideoAggMinNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggMinNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggMinNegSD.setDescription('The minimum of all negative jitter values for packets sent from source to destination.')
cipslaVideoAggMaxNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggMaxNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggMaxNegSD.setDescription('The maximum of all negative jitter values for packets sent from source to destination.')
cipslaVideoAggNumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 12), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggNumNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggNumNegSD.setDescription('The number of all negative jitter values for packets sent from source to destination.')
cipslaVideoAggSumNegSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 13), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggSumNegSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggSumNegSD.setDescription('The sum of all negative jitter values for packets sent from source to destination. The number of such values is stored in ipslaVideoAggNumNegSDs.')
cipslaVideoAggSum2NegSDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 14), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggSum2NegSDLow.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggSum2NegSDLow.setDescription('The sum of square of all negative jitter values for packets sent from source to destination (low order 32 bits).')
cipslaVideoAggSum2NegSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 15), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggSum2NegSDHigh.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggSum2NegSDHigh.setDescription('The sum of square of all negative jitter values for packets sent from source to destination (high order 32 bits).')
cipslaVideoAggPktLossSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggPktLossSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggPktLossSD.setDescription('The number of lost packets when sent from source to destination.')
cipslaVideoAggPktOutSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggPktOutSeq.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggPktOutSeq.setDescription('The number of packets arrived out of sequence.')
cipslaVideoAggPktSkipped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggPktSkipped.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggPktSkipped.setDescription('The number of packets that are skipped per operation because the router could not send the packet out.')
cipslaVideoAggErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 19), Counter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggErrors.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggErrors.setDescription('The number of occasions when a video operation could not be initiated because of an internal error.')
cipslaVideoAggBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 20), Counter32()).setUnits('busies').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggBusies.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggBusies.setDescription('The number of occasions when a video operation could not be initiated because a previous video operation has not been completed.')
cipslaVideoAggOWSumSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 21), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggOWSumSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggOWSumSD.setDescription('The sum of one way trip time from source to destination.')
cipslaVideoAggOWSum2SDLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 22), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggOWSum2SDLow.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggOWSum2SDLow.setDescription('The sum of squares of one way trip time from source to destination (low order 32 bits).')
cipslaVideoAggOWSum2SDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 23), Counter32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggOWSum2SDHigh.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggOWSum2SDHigh.setDescription('The sum of squares of one way trip time from source to destination (high order 32 bits).')
cipslaVideoAggOWMinSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 24), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggOWMinSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggOWMinSD.setDescription('The minimum of all one way trip time from source to destination.')
cipslaVideoAggOWMaxSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 25), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggOWMaxSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggOWMaxSD.setDescription('The maximum of all one way trip time from source to destination.')
cipslaVideoAggNumOWSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 26), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggNumOWSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggNumOWSD.setDescription('The number of one way trip time that are successfully measured from source to destination.')
cipslaVideoAggAvgJSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 27), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggAvgJSD.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggAvgJSD.setDescription('The average of positive and negative jitter values in source-to-destination direction.')
cipslaVideoAggIAJOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 28), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggIAJOut.setReference('Refer to the following documents for the definition: RFC 1889, Section 6.3.1')
if mibBuilder.loadTexts: cipslaVideoAggIAJOut.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggIAJOut.setDescription('Inter-arrival jitter (RFC 1889) at responder')
cipslaVideoAggIAJIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 29), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggIAJIn.setReference('Refer to the following documents for the definition: RFC 1889, Section 6.3.1')
if mibBuilder.loadTexts: cipslaVideoAggIAJIn.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggIAJIn.setDescription('Inter-arrival jitter (RFC 1889) at sender')
cipslaVideoAggPktLateArrival = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 30), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggPktLateArrival.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggPktLateArrival.setDescription('The number of packets that arrived after the timeout.')
cipslaVideoAggUnSyncRTs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggUnSyncRTs.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggUnSyncRTs.setDescription('The number of RTT operations that have completed with sender and responder out of sync with NTP. The NTP sync means the total of NTP offset on sender and responder is within configured tolerance level')
cipslaVideoAggOWSumSDHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 744, 1, 2, 1, 1, 32), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipslaVideoAggOWSumSDHigh.setStatus('current')
if mibBuilder.loadTexts: cipslaVideoAggOWSumSDHigh.setDescription('The sum of one way times from source to destination (high order 32 bits). The low order 32 bits are stored in cipslaVideoAggOWSumSD.')
ciscoIpslaVideoMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 744, 2, 1))
ciscoIpslaVideoMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 744, 2, 2))
ciscoIpslaVideoMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 744, 2, 1, 1)).setObjects(("CISCO-IPSLA-VIDEO-MIB", "ciscoIpslaVideoStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpslaVideoMIBCompliance = ciscoIpslaVideoMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoIpslaVideoMIBCompliance.setDescription('This is a default module-compliance containing default object groups.')
ciscoIpslaVideoStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 744, 2, 2, 1)).setObjects(("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoMinPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoMaxPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoNumPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoSumPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoSum2PosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoMinNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoMaxNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoNumNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoSumNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoSum2NegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoPktLossSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoPktOutSeq"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoSense"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoOWSumSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoOWSum2SD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoOWMinSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoOWMaxSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoNumOWSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoAvgJitterSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoIAJOut"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoErrSenseDescr"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoUnSyncRTs"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoOWSumSDHigh"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoOWSum2SDHigh"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoNTPState"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoIPDVAvgSDJ"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoOWAvgSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaLatestVideoPktLateArrival"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggCompletions"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggOverThresholds"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggMinPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggMaxPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggNumPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggSumPosSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggSum2PosSDLow"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggSum2PosSDHigh"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggMinNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggMaxNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggNumNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggSumNegSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggSum2NegSDLow"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggSum2NegSDHigh"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggPktLossSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggPktOutSeq"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggPktSkipped"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggErrors"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggBusies"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggOWSumSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggOWSum2SDLow"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggOWSum2SDHigh"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggOWMinSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggOWMaxSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggNumOWSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggAvgJSD"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggIAJOut"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggIAJIn"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggPktLateArrival"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggUnSyncRTs"), ("CISCO-IPSLA-VIDEO-MIB", "cipslaVideoAggOWSumSDHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpslaVideoStatsGroup = ciscoIpslaVideoStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpslaVideoStatsGroup.setDescription('A collection of statistics objects related to Video Probe.')
mibBuilder.exportSymbols("CISCO-IPSLA-VIDEO-MIB", cipslaVideoAggMinPosSD=cipslaVideoAggMinPosSD, cipslaVideoAggStatsEntry=cipslaVideoAggStatsEntry, cipslaVideoStats=cipslaVideoStats, cipslaLatestVideoMinPosSD=cipslaLatestVideoMinPosSD, ciscoIpslaVideoMIBNotifs=ciscoIpslaVideoMIBNotifs, cipslaLatestVideoSumNegSD=cipslaLatestVideoSumNegSD, cipslaLatestVideoSumPosSD=cipslaLatestVideoSumPosSD, cipslaLatestVideoAvgJitterSD=cipslaLatestVideoAvgJitterSD, cipslaLatestVideoPktOutSeq=cipslaLatestVideoPktOutSeq, cipslaLatestVideoErrSenseDescr=cipslaLatestVideoErrSenseDescr, cipslaLatestVideoOWSum2SDHigh=cipslaLatestVideoOWSum2SDHigh, cipslaLatestVideoIAJOut=cipslaLatestVideoIAJOut, cipslaLatestVideoOWAvgSD=cipslaLatestVideoOWAvgSD, cipslaVideoAggBusies=cipslaVideoAggBusies, cipslaVideoAggAvgJSD=cipslaVideoAggAvgJSD, cipslaLatestVideoOWSumSD=cipslaLatestVideoOWSumSD, cipslaVideoAggStartTimeId=cipslaVideoAggStartTimeId, cipslaVideoAggOverThresholds=cipslaVideoAggOverThresholds, cipslaLatestVideoOWSum2SD=cipslaLatestVideoOWSum2SD, cipslaVideoAggSum2NegSDHigh=cipslaVideoAggSum2NegSDHigh, cipslaVideoAggMinNegSD=cipslaVideoAggMinNegSD, cipslaVideoAggOWSumSDHigh=cipslaVideoAggOWSumSDHigh, cipslaVideoAggUnSyncRTs=cipslaVideoAggUnSyncRTs, ciscoIpslaVideoMIBGroups=ciscoIpslaVideoMIBGroups, cipslaVideoAggPktSkipped=cipslaVideoAggPktSkipped, cipslaVideoAggNumOWSD=cipslaVideoAggNumOWSD, cipslaLatestVideoMinNegSD=cipslaLatestVideoMinNegSD, cipslaLatestVideoStatsTable=cipslaLatestVideoStatsTable, ciscoIpslaVideoMIBCompliance=ciscoIpslaVideoMIBCompliance, ciscoIpslaVideoStatsGroup=ciscoIpslaVideoStatsGroup, cipslaVideoAggIAJIn=cipslaVideoAggIAJIn, cipslaVideoAggSum2PosSDLow=cipslaVideoAggSum2PosSDLow, cipslaLatestVideoNumNegSD=cipslaLatestVideoNumNegSD, cipslaVideoAggErrors=cipslaVideoAggErrors, ciscoIpslaVideoMIBConform=ciscoIpslaVideoMIBConform, cipslaLatestVideoNumOWSD=cipslaLatestVideoNumOWSD, cipslaVideoLatestOper=cipslaVideoLatestOper, cipslaLatestVideoNumPosSD=cipslaLatestVideoNumPosSD, cipslaLatestVideoOWSumSDHigh=cipslaLatestVideoOWSumSDHigh, cipslaVideoAggStatsTable=cipslaVideoAggStatsTable, cipslaVideoAggMaxPosSD=cipslaVideoAggMaxPosSD, ciscoIpslaVideoMIBCompliances=ciscoIpslaVideoMIBCompliances, cipslaVideoAggNumNegSD=cipslaVideoAggNumNegSD, cipslaVideoAggIAJOut=cipslaVideoAggIAJOut, cipslaLatestVideoSum2NegSD=cipslaLatestVideoSum2NegSD, cipslaLatestVideoSense=cipslaLatestVideoSense, cipslaLatestVideoPktLateArrival=cipslaLatestVideoPktLateArrival, cipslaVideoAggCompletions=cipslaVideoAggCompletions, cipslaVideoAggSumNegSD=cipslaVideoAggSumNegSD, cipslaVideoAggOWMaxSD=cipslaVideoAggOWMaxSD, ciscoIpslaVideoMIB=ciscoIpslaVideoMIB, cipslaVideoAggNumPosSD=cipslaVideoAggNumPosSD, cipslaVideoAggSum2PosSDHigh=cipslaVideoAggSum2PosSDHigh, cipslaLatestVideoSum2PosSD=cipslaLatestVideoSum2PosSD, cipslaVideoAggSum2NegSDLow=cipslaVideoAggSum2NegSDLow, cipslaLatestVideoStatsEntry=cipslaLatestVideoStatsEntry, cipslaLatestVideoMaxPosSD=cipslaLatestVideoMaxPosSD, cipslaLatestVideoUnSyncRTs=cipslaLatestVideoUnSyncRTs, cipslaVideoAggSumPosSD=cipslaVideoAggSumPosSD, cipslaVideoAggMaxNegSD=cipslaVideoAggMaxNegSD, cipslaLatestVideoPktLossSD=cipslaLatestVideoPktLossSD, cipslaLatestVideoNTPState=cipslaLatestVideoNTPState, cipslaVideoAggOWSum2SDLow=cipslaVideoAggOWSum2SDLow, cipslaVideoAggPktLateArrival=cipslaVideoAggPktLateArrival, cipslaVideoAggOWMinSD=cipslaVideoAggOWMinSD, PYSNMP_MODULE_ID=ciscoIpslaVideoMIB, cipslaVideoAggOWSumSD=cipslaVideoAggOWSumSD, cipslaLatestVideoOWMaxSD=cipslaLatestVideoOWMaxSD, cipslaVideoAggOWSum2SDHigh=cipslaVideoAggOWSum2SDHigh, cipslaLatestVideoMaxNegSD=cipslaLatestVideoMaxNegSD, cipslaLatestVideoIPDVAvgSDJ=cipslaLatestVideoIPDVAvgSDJ, ciscoIpslaVideoMIBObjects=ciscoIpslaVideoMIBObjects, cipslaLatestVideoOWMinSD=cipslaLatestVideoOWMinSD, cipslaVideoAggPktLossSD=cipslaVideoAggPktLossSD, cipslaVideoAggPktOutSeq=cipslaVideoAggPktOutSeq)
