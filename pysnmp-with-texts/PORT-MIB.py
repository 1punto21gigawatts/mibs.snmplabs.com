#
# PySNMP MIB module PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
slotNo, = mibBuilder.importSymbols("CARD-MIB", "slotNo")
port, coriolisMibs = mibBuilder.importSymbols("CORIOLIS-MIB", "port", "coriolisMibs")
dot3StatsDuplexStatus, = mibBuilder.importSymbols("EtherLike-MIB", "dot3StatsDuplexStatus")
InterfaceIndex, ifOperStatus, ifSpeed, ifAdminStatus = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifOperStatus", "ifSpeed", "ifAdminStatus")
ifMauAutoNegConfig, = mibBuilder.importSymbols("MAU-MIB", "ifMauAutoNegConfig")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, TimeTicks, ObjectIdentity, ModuleIdentity, IpAddress, Unsigned32, NotificationType, MibIdentifier, Counter32, Counter64, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Unsigned32", "NotificationType", "MibIdentifier", "Counter32", "Counter64", "NotificationType", "iso")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
sonetPathCurrentStatus, sonetLineCurrentStatus, sonetSectionCurrentStatus, sonetVTCurrentStatus = mibBuilder.importSymbols("SONET-MIB", "sonetPathCurrentStatus", "sonetLineCurrentStatus", "sonetSectionCurrentStatus", "sonetVTCurrentStatus")
portMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5812, 3, 1))
if mibBuilder.loadTexts: portMIB.setLastUpdated('0007270000Z')
if mibBuilder.loadTexts: portMIB.setOrganization('Coriolis Networks')
if mibBuilder.loadTexts: portMIB.setContactInfo(' Shubhra Garg Postal: 330 Codman Hill Road, Boxboro MA, 01719. Tel: +1 978 264 1904 Fax: +1 978 264 1929 E-mail: shubhra@coriolisnet.com')
if mibBuilder.loadTexts: portMIB.setDescription('The MIB module for cards in coriolis boxes')
portTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 2), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('The port table. This contains the portNo variable, which is used as an index into specific port tables')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 2, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('Entry containing the portNo variable')
portNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: portNo.setStatus('current')
if mibBuilder.loadTexts: portNo.setDescription(' The purpose of this variable is to be used as index into tables ')
mib2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 2, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mib2IfIndex.setStatus('current')
if mibBuilder.loadTexts: mib2IfIndex.setDescription('This variable serves to identify the slot and port number.')
etherPortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 3), )
if mibBuilder.loadTexts: etherPortTable.setStatus('current')
if mibBuilder.loadTexts: etherPortTable.setDescription('The ethernet port table. This table contains information about the ethernet ports in this device.')
etherPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: etherPortEntry.setStatus('current')
if mibBuilder.loadTexts: etherPortEntry.setDescription('Entry containing information about ethernet ports')
etherPortSpeedCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed10", 1), ("speed100", 2), ("speed1000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortSpeedCfg.setStatus('current')
if mibBuilder.loadTexts: etherPortSpeedCfg.setDescription(' The desired port speed if Autonegotiation is disabled. Management control of the port speed can also be accomplished through the MAU MIB via ifMauDefaultType. Note that this object provides redundant information with ifMauType. Normally, redundant objects are discouraged. However, in this instance, it allows a management application to configure the duplex mode of an interface without having to know every possible value of ifMauType. This was felt to be sufficiently valuable to justify the redundancy.')
etherPortSpeedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed10", 1), ("speed100", 2), ("speed1000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: etherPortSpeedStatus.setDescription(' The speed of the port. If autoneg is enabled, this is determined by the results of the autoneg process. If autoneg is disabled, this is the same as IfAdminSpeed.')
etherPortDuplexCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("half", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortDuplexCfg.setStatus('current')
if mibBuilder.loadTexts: etherPortDuplexCfg.setDescription(' The desired duplex mode of operation of the MAC entity if Autonegotiation is disabled. Management control of the duplex mode can also be accomplished through the MAU MIB via ifMauDefaultType.Note that this object provides redundant information with ifMauType. Normally, redundant objects are discouraged. However, in this instance, it allows a management application to configure the duplex mode of an interface without having to know every possible value of ifMauType. This was felt to be sufficiently valuable to justify the redundancy.')
etherPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortLoopback.setStatus('current')
if mibBuilder.loadTexts: etherPortLoopback.setDescription(' Enables/disables loopback mode.')
etherPortPhyReset = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inReset", 1), ("outOfReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortPhyReset.setStatus('current')
if mibBuilder.loadTexts: etherPortPhyReset.setDescription(' Ethernet port phy reset')
etherPortStatsTxPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxPkts64Octets.setDescription(' Total 64 byte packets transmitted on ethernet port.')
etherPortStatsTxPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxPkts65to127Octets.setDescription(' The total number of packets (including bad packets) transmitted that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
etherPortStatsTxPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxPkts128to255Octets.setDescription(' The total number of packets (including bad packets) transmitted that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
etherPortStatsTxPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxPkts256to511Octets.setDescription(' The total number of packets (including bad packets) transmitted that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
etherPortStatsTxPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxPkts512to1023Octets.setDescription(' The total number of packets (including bad packets) transmitted that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
etherPortStatsTxPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxPkts1024to1518Octets.setDescription(' The total number of packets (including bad packets) transmitted that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
etherPortStatsTxPkts1519to1530Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxPkts1519to1530Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxPkts1519to1530Octets.setDescription(' The total number of packets (including bad packets) transmitted that were between 1519 and 1530 octets in length inclusive (excluding framing bits but including FCS octets).')
etherPortStatsTxFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxFCSErrors.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxFCSErrors.setDescription(' Total packets transmitted on ethernet port with FCS errors (if MAC generates the FCS, this can never be incremented).')
etherPortStatsTxOversize = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxOversize.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxOversize.setDescription(' Number of frames transmitted greater than 1518 bytes.')
etherPortStatsTxUndersize = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxUndersize.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxUndersize.setDescription(' Number of packets less than 64 bytes transmitted.')
etherPortStatsTxControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxControlFrames.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxControlFrames.setDescription(' Number of control frames transmitted.')
etherPortStatsTxBadFifoUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxBadFifoUnderrun.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxBadFifoUnderrun.setDescription(' Number of bad frames (due to Transmit FIFO underrun) transmitted.')
etherPortStatsTxBadFifoOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxBadFifoOverrun.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxBadFifoOverrun.setDescription(' Number of bad frames (due to Transmit FIFO overrun) transmitted.')
etherPortStatsTxDropFifoOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxDropFifoOverrun.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxDropFifoOverrun.setDescription(' Number of frames dropped due to Transmit FIFO underrun.')
etherPortStatsTxBadParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxBadParityError.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxBadParityError.setDescription(' Number of bad frames (due to parity error) transmitted.')
etherPortStatsTxDropParityError = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxDropParityError.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxDropParityError.setDescription(' Number of bad frames (due to parity error) dropped.')
etherPortStatsTxBadSequenceError = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxBadSequenceError.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxBadSequenceError.setDescription(' Number of bad frames (due to frame Sequence Error) transmitted.')
etherPortStatsTxDropSequenceError = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxDropSequenceError.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxDropSequenceError.setDescription(' Number of bad frames (due to frame Sequence Error) dropped.')
etherPortStatsTxBadJamError = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxBadJamError.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxBadJamError.setDescription(' Number of bad frames (due to Jam Bit Error) transmitted.')
etherPortStatsTxDropJamError = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsTxDropJamError.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsTxDropJamError.setDescription(' Number of bad frames (due to Jam Bit Error) dropped.')
etherPortSpeedTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortSpeedTrapEnable.setStatus('current')
if mibBuilder.loadTexts: etherPortSpeedTrapEnable.setDescription(' Indicates whether portSpeedTrap traps should be generated for this interface.')
etherPortDuplexTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortDuplexTrapEnable.setStatus('current')
if mibBuilder.loadTexts: etherPortDuplexTrapEnable.setDescription(' Ethernet port duplex trap enable ')
etherPortAutonegTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortAutonegTrapEnable.setStatus('current')
if mibBuilder.loadTexts: etherPortAutonegTrapEnable.setDescription(' Indicates whether autoNegCompleteTrap traps should be generated for this interface.')
etherPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: etherPortRowStatus.setDescription(' This variable is used to create or delete instances of ethernet ports This variable subsumes the admin state variable, and once the row is created, its value returns the admin state of the port')
etherPortAutonegAdvSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed10", 1), ("speed100", 2), ("speed1000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortAutonegAdvSpeed.setStatus('current')
if mibBuilder.loadTexts: etherPortAutonegAdvSpeed.setDescription(' This specifies what speed capability is advertised for autonegotiation. If 100 MBPS is set, then 10 MBPS is also advertised.This does not apply to Gig Ethernet Phys, since they do not autonegotiate speed or duplex.')
etherPortAutonegAdvDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("half", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortAutonegAdvDuplex.setStatus('current')
if mibBuilder.loadTexts: etherPortAutonegAdvDuplex.setDescription(' This specifies what duplex capability is advertised for autonegotiation. If Full Duplex is set, then Half Duplex is also adveetised.This does not apply to Gig Ethernet Phys, since they do not autonegotiate speed or duplex.')
etherPortPauseStateReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noPause", 1), ("enableTx", 2), ("enableRx", 3), ("enableTxRx", 4), ("undefined", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortPauseStateReceived.setStatus('current')
if mibBuilder.loadTexts: etherPortPauseStateReceived.setDescription(' The PAUSE mode received from the remote device, as read from the Auto Negotiation Partner Ability GMII Register of the PHY.If autoNegotiation is not enabled and completed, then this is set to undefined. This is used to determine the dot3PauseOperMode for the interface. ')
etherPortVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("stripVID", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortVlanMode.setStatus('current')
if mibBuilder.loadTexts: etherPortVlanMode.setDescription(' Specifies the VLAN mode for the port ')
etherPortDefaultVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etherPortDefaultVlanId.setStatus('current')
if mibBuilder.loadTexts: etherPortDefaultVlanId.setDescription(' Specifies what the default Vlan Id is for the port. This is used on ingress only if vlanMode is Enabled and a frame is received either untagged or tagged with a VID not known to the port. ')
etherPortRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortRxOverrun.setStatus('current')
if mibBuilder.loadTexts: etherPortRxOverrun.setDescription(' The total number of packets dropped by the GMAC due to the occurence of a receive overrun (gig only- supported by GMAC-D2 and later)')
etherPortRxSyncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortRxSyncErrors.setStatus('current')
if mibBuilder.loadTexts: etherPortRxSyncErrors.setDescription(' The total number of packets dropped due to loss of sync during packet reception. (GIG only- supported by GMAC-D2 and later)')
etherPortRxDelSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortRxDelSeqErrors.setStatus('current')
if mibBuilder.loadTexts: etherPortRxDelSeqErrors.setDescription(' The total number of packets dropped due to delimiter sequence errors as detected by the GMAC during packet reception. (GIG only- supported by GMAC-D2 and later)')
etherPortRxFifoOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortRxFifoOverrunErrors.setStatus('current')
if mibBuilder.loadTexts: etherPortRxFifoOverrunErrors.setDescription(' The total number of packets dropped by the GMAC due to the occurence of a receive FIFO overrun (gig only- supported by GMAC-D2 and later)')
etherPortRxControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortRxControlFrames.setStatus('current')
if mibBuilder.loadTexts: etherPortRxControlFrames.setDescription(' Number of control frames received by this port ')
etherPortRxThreshOvrszFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortRxThreshOvrszFrames.setStatus('current')
if mibBuilder.loadTexts: etherPortRxThreshOvrszFrames.setDescription(' The total number of threshold oversized frames received by the GMAC (gig only - supported by GMAC-D2 and later)')
etherPortStatsRxPkts1519to1530Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 3, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: etherPortStatsRxPkts1519to1530Octets.setStatus('current')
if mibBuilder.loadTexts: etherPortStatsRxPkts1519to1530Octets.setDescription(' The total number of packets (including bad packets) received that were between 1519 and 1530 octets in length inclusive (excluding framing bits but including FCS octets).')
tdmIoDS1PortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 4), )
if mibBuilder.loadTexts: tdmIoDS1PortTable.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortTable.setDescription('The DS1 TDM IO Port Table')
tdmIoDS1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: tdmIoDS1PortEntry.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortEntry.setDescription('Entry containing information about TDM IO DS1 ports')
tdmIoDS1PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ds1", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortType.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortType.setDescription(' The type of TDM IO DS1 port')
tdmIoDS1PortTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortTiming.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortTiming.setDescription(" Clock source for the DS1 port 'loopTiming' indicates that the recovered re- ceive clock is used as the transmit clock. 'localTiming' indicates that a local clock source is used or when an external clock is attached to the box containing the interface. 'throughTiming' indicates that recovered re- ceive clock from another interface is used as the transmit clock.")
tdmIoDS1PortBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("shortHaulMax133Feet", 1), ("shortHaulMax266Feet", 2), ("shortHaulMax399Feet", 3), ("shortHaulMax533Feet", 4), ("shortHaulMax655Feet", 5), ("longHaulZeroDB", 6), ("longHaulSevenFiveDB", 7), ("longHaulOneFiveDB", 8), ("longHaulTwentyTwoDB", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortBuildOut.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortBuildOut.setDescription('Line Build Out for Signal Strength. For short haul, a distance (in feet) is chosen. For long haul, an attenuation strength is chosen in Decibels. ')
tdmIoDS1PortFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ds1unframed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortFraming.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortFraming.setDescription('Framing type implemented for this interface.')
tdmIoDS1PortCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5))).clone(namedValues=NamedValues(("b8zs", 2), ("ami", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortCoding.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortCoding.setDescription('The type of Zero Code Suppression used on this interface. B8ZS refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density requirements, such as inverting HDLC data.')
tdmIoDS1PortLoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackState.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackState.setDescription("This object indicates the state of loopback on this interface. 'Idle' indicates that there is no loopback running and 'running' indicates that this interface is in loopback mode.")
tdmIoDS1PortLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 9, 10))).clone(namedValues=NamedValues(("noLoop", 1), ("localOn", 8), ("digitalOn", 9), ("remoteOn", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackType.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackType.setDescription('This object indicates the type of loopback on this interface. noLoop - the interface is not in loopBack mode. localOn - the interface is running in internal loop. digitalOn - the interface is running in internal loop. remoteOn - the interface is looping away external data.')
tdmIoDS1PortLoopbackResults = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failure", 1), ("success", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackResults.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackResults.setDescription('Results from previous loopback on this port')
tdmIoDS1PortLoopbackLLbActCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLLbActCode.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLLbActCode.setDescription('User code to enable Automatic Remote Loopback(ARL)')
tdmIoDS1PortLoopbackLLbDeactCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLLbDeactCode.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLLbDeactCode.setDescription('User code to disable Automatic Remote Loopback(ARL)')
tdmIoDS1PortLoopbackLlbActCodeLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up5Bit", 1), ("up6Bit", 2), ("up7Bit", 3), ("up8Bit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbActCodeLen.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbActCodeLen.setDescription('Length of user code to enable Automatic Remote Loopback(ARL)')
tdmIoDS1PortLoopbackLlbDeactCodeLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down5Bit", 1), ("down6Bit", 2), ("down7Bit", 3), ("down8Bit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbDeactCodeLen.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbDeactCodeLen.setDescription('Length of user code to disable Automatic Remote Loopback(ARL)')
tdmIoDS1PortLoopbackLlbControl = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("genOff", 1), ("genActOn", 2), ("genDeActOn", 3), ("monOff", 4), ("monOn", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbControl.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbControl.setDescription('LLBCODE(activate/deactivate) generation/monitoring control')
tdmIoDS1PortLoopbackLlbGenPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("genRcv", 1), ("genXmit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbGenPath.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbGenPath.setDescription('The path (xmit/rcv) for LLBCODE generation')
tdmIoDS1PortLoopbackLlbMonPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monRcv", 1), ("monXmit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbMonPath.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLoopbackLlbMonPath.setDescription('The path (xmit/rcv) for LLBCODE monitoring')
tdmIoDS1PortPrbsAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("algo215", 1), ("algo220", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPrbsAlgorithm.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPrbsAlgorithm.setDescription('The PRBS Algorithm')
tdmIoDS1PortPrbsInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortPrbsInversion.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPrbsInversion.setDescription('Whether the PRBS stream will be inverted')
tdmIoDS1PortPrbsGenPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("genRcv", 1), ("genXmit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPrbsGenPath.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPrbsGenPath.setDescription(' The PRBS generator path')
tdmIoDS1PortPrbsMonPath = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monRcv", 1), ("monXmit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPrbsMonPath.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPrbsMonPath.setDescription('The PRBS monitor path')
tdmIoDS1PortPrbsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPrbsMonitor.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPrbsMonitor.setDescription('PRBS monitor - is it off or on?')
tdmIoDS1PortPrbsTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPrbsTransmit.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPrbsTransmit.setDescription('PRBS or normal transmission on transmission line')
tdmIoDS1PortPrbsBec = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortPrbsBec.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPrbsBec.setDescription('The PRBS bit error counter')
tdmIoDS1PortBertState = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("running", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortBertState.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortBertState.setDescription('User specified BERT status')
tdmIoDS1PortBertPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("pattern223", 1), ("pattern220", 2), ("patternQrss", 3), ("pattern215", 4), ("pattern211", 5), ("patternAllZeros", 6), ("patternAllOnes", 7), ("patternAlternate", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortBertPattern.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortBertPattern.setDescription('User specified BERT type')
tdmIoDS1PortBertDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("oneMin", 1), ("fiveMin", 2), ("thirtyMin", 3), ("oneHour", 4), ("twelveHour", 5), ("twentyfourHour", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortBertDuration.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortBertDuration.setDescription('User specified BERT duration')
tdmIoDS1PortBertResults = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timeLeft", 1), ("totalBitErrs", 2), ("totalBits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortBertResults.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortBertResults.setDescription('Results from previous BERT test on this port')
tdmIoDS1PortLineESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLineESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLineESS15Min.setDescription('The 15 minute Line Errored Seconds Threshold')
tdmIoDS1PortPathESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathESS15Min.setDescription('The 15 minute Path Errored Seconds Threshold')
tdmIoDS1PortLineESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortLineESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLineESS1Day.setDescription('The 1 Day Line Errored Seconds Threshold')
tdmIoDS1PortPathESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathESS1Day.setDescription('The 1 Day Path Errored Seconds Threshold')
tdmIoDS1PortPathCVS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathCVS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathCVS15Min.setDescription('The 15 minute Path Coding Violations Threshold')
tdmIoDS1PortPathCVS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathCVS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathCVS1Day.setDescription('The 1 day Path Coding Violations Threshold')
tdmIoDS1PortPathSESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathSESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathSESS15Min.setDescription('The 15 minute Path Severely Errored Seconds Threshold')
tdmIoDS1PortPathSESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathSESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathSESS1Day.setDescription('The 1 day Path Severely Errored Seconds Threshold')
tdmIoDS1PortPathSASS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathSASS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathSASS15Min.setDescription('The 15 minute Path AIS seconds Threshold')
tdmIoDS1PortPathSASS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathSASS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathSASS1Day.setDescription('The 1 day Path AIS seconds Threshold')
tdmIoDS1PortPathCSS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathCSS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathCSS15Min.setDescription('The 15 minute path controlled slip seconds threshold')
tdmIoDS1PortPathCSS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathCSS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathCSS1Day.setDescription('The 1 day path controlled slip seconds threshold')
tdmIoDS1PortPathUASS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortPathUASS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortPathUASS15Min.setDescription('The 15 minute path unavailable seconds threshold')
tdmIoDS1PortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS1PortRowStatus.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortRowStatus.setDescription(' This variable is used to create or delete instances of TDM IO DS1 ports. This variable subsumes the admin state variable, and once the row is created, its value returns the admin state of the port')
dsxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("dsx-rcvrai-failure-declared", 1), ("dsx-rcvrai-failure-cleared", 2), ("dsx-xmitrai-failure-declared", 3), ("dsx-xmitrai-failure-cleared", 4), ("dsx-rcvais-failure-declared", 5), ("dsx-rcvais-failure-cleared", 6), ("dsx-xmitais-failure-declared", 7), ("dsx-xmitais-failure-cleared", 8), ("dsx-los-failure-declared", 9), ("dsx-los-failure-cleared", 10), ("dsx-lof-failure-declared", 11), ("dsx-lof-failure-cleared", 12), ("dsx-other-failure-declared", 13), ("dsx-other-failure-cleared", 14), ("dsx-uas-failure-declared", 15), ("dsx-uas-failure-cleared", 16), ("dsx-exz-failure-declared", 17), ("dsx-exz-failure-cleared", 18), ("dsx-pden-failure-declared", 19), ("dsx-pden-failure-cleared", 20)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dsxStatus.setStatus('current')
if mibBuilder.loadTexts: dsxStatus.setDescription('DSx line status.')
tdmIoDS1PortLCVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 4, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmIoDS1PortLCVCount.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS1PortLCVCount.setDescription('Count of Line Code Violations.')
sonetPortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 5), )
if mibBuilder.loadTexts: sonetPortTable.setStatus('current')
if mibBuilder.loadTexts: sonetPortTable.setDescription('The proprietary SONET Port Table')
sonetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: sonetPortEntry.setStatus('current')
if mibBuilder.loadTexts: sonetPortEntry.setDescription('Entry containing information about SONET ports')
sonetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oc12c", 1), ("oc12sts1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortType.setStatus('current')
if mibBuilder.loadTexts: sonetPortType.setDescription('The type of SONET port')
sonetPortIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortIdString.setStatus('current')
if mibBuilder.loadTexts: sonetPortIdString.setDescription('The identifier string for the SONET port')
sonetPortTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortTiming.setStatus('current')
if mibBuilder.loadTexts: sonetPortTiming.setDescription('Clock source for the port')
sonetPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("slle", 1), ("sdle", 2), ("pdle", 3), ("sllben", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLoopback.setStatus('current')
if mibBuilder.loadTexts: sonetPortLoopback.setDescription(' The types of loopback available on the SONET interface.')
sonetPortScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortScrambling.setStatus('current')
if mibBuilder.loadTexts: sonetPortScrambling.setDescription(' Whether port scrambling is enabled or disabled ')
sonetPortChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("concatenated", 1), ("nonConcatenated", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortChannelization.setStatus('current')
if mibBuilder.loadTexts: sonetPortChannelization.setDescription(' Whether the physical port is concatenated or not ')
sonetPortConfigedChans = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonetPortConfigedChans.setStatus('current')
if mibBuilder.loadTexts: sonetPortConfigedChans.setDescription(' The channels configured on the port ')
sonetPortSectESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortSectESS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortSectESS15Min.setDescription(' 15 minute section errored seconds threshold')
sonetPortLineESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineESS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineESS15Min.setDescription(' 15 minute line errored seconds threshold')
sonetPortPathESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathESS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathESS15Min.setDescription(' 15 minute path errored seconds threshold')
sonetPortSectESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortSectESS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortSectESS1Day.setDescription(' 1 day section errored seconds threshold')
sonetPortLineESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineESS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineESS1Day.setDescription(' 1 day line errored seconds threshold')
sonetPortPathESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathESS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathESS1Day.setDescription(' 1 day path errored seconds threshold')
sonetPortSectCVS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortSectCVS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortSectCVS15Min.setDescription('15 minute section coding violations threshold ')
sonetPortLineCVS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineCVS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineCVS15Min.setDescription('15 minute line coding violations threshold')
sonetPortPathCVS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathCVS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathCVS15Min.setDescription(' 15 minutes path coding violations threshold')
sonetPortSectCVS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortSectCVS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortSectCVS1Day.setDescription('1 day section coding violations threshold')
sonetPortLineCVS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineCVS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineCVS1Day.setDescription('1 day line coding violations threshold ')
sonetPortPathCVS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathCVS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathCVS1Day.setDescription(' 1 day path coding violations threshold')
sonetPortSectSESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortSectSESS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortSectSESS15Min.setDescription(' 15 minutes section severely errored seconds threshold ')
sonetPortLineSESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineSESS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineSESS15Min.setDescription(' 15 minutes line severely errored seconds threshold ')
sonetPortPathSESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathSESS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathSESS15Min.setDescription(' 15 minutes path severely errored seconds threshold')
sonetPortSectSESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortSectSESS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortSectSESS1Day.setDescription(' 1 day section severely errored seconds threshold ')
sonetPortLineSESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineSESS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineSESS1Day.setDescription(' 1 day line severely errored seconds threshold ')
sonetPortPathSESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathSESS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathSESS1Day.setDescription(' 1 day path severely errored seconds threshold ')
sonetPortLineUASS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineUASS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineUASS15Min.setDescription(' 15 minutes line unavailable seconds threshold ')
sonetPortPathUASS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathUASS15Min.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathUASS15Min.setDescription(' 15 minutes path unavailable seconds threshold ')
sonetPortLineUASS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortLineUASS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortLineUASS1Day.setDescription(' 1 day line unavailable seconds threshold ')
sonetPortPathUASS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortPathUASS1Day.setStatus('current')
if mibBuilder.loadTexts: sonetPortPathUASS1Day.setDescription(' 1 day path unavailable seconds threshold ')
sonetPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonetPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonetPortRowStatus.setDescription(' This variable is used to create or delete instances of SONET ports This variable subsumes the admin state variable, and once the row is created, its value returns the admin state of the port')
sonetTCAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("sonet-section-cv-tca-declared", 1), ("sonet-section-ses-tca-declared", 2), ("sonet-section-es-tca-declared", 3), ("sonet-line-cv-tca-declared", 4), ("sonet-line-ses-tca-declared", 5), ("sonet-line-es-tca-declared", 6), ("sonet-line-uas-tca-declared", 7), ("sonet-line-farend-cv-tca-declared", 8), ("sonet-line-farend-ses-tca-declared", 9), ("sonet-line-farend-es-tca-declared", 10), ("sonet-line-farend-uas-tca-declared", 11), ("sonet-path-cv-tca-declared", 12), ("sonet-path-ses-tca-declared", 13), ("sonet-path-es-tca-declared", 14), ("sonet-path-uas-tca-declared", 15), ("sonet-path-farend-cv-tca-declared", 16), ("sonet-path-farend-ses-tca-declared", 17), ("sonet-path-farend-es-tca-declared", 18), ("sonet-path-farend-uas-tca-declared", 19), ("sonet-vt-cv-tca-declared", 20), ("sonet-vt-ses-tca-declared", 21), ("sonet-vt-es-tca-declared", 22), ("sonet-vt-uas-tca-declared", 23), ("sonet-vt-farend-cv-tca-declared", 24), ("sonet-vt-farend-ses-tca-declared", 25), ("sonet-vt-farend-es-tca-declared", 26), ("sonet-vt-farend-uas-tca-declared", 27)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sonetTCAStatus.setStatus('current')
if mibBuilder.loadTexts: sonetTCAStatus.setDescription('Represents the Threshold Crossing Alarm.')
atmPortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 6), )
if mibBuilder.loadTexts: atmPortTable.setStatus('current')
if mibBuilder.loadTexts: atmPortTable.setDescription('The ATM Port Table')
atmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: atmPortEntry.setStatus('current')
if mibBuilder.loadTexts: atmPortEntry.setDescription('Entry containing information about atm ports')
atmPortVPTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortVPTunnel.setStatus('current')
if mibBuilder.loadTexts: atmPortVPTunnel.setDescription(' Whether this port is a VP Tunnel ')
atmPortMaxTotalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortMaxTotalBits.setStatus('current')
if mibBuilder.loadTexts: atmPortMaxTotalBits.setDescription(' Max Total Bits of VPI & VCI ')
atmPortTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("loop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortTiming.setStatus('current')
if mibBuilder.loadTexts: atmPortTiming.setDescription(' Timing Mode ')
atmPortInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortInCells.setStatus('current')
if mibBuilder.loadTexts: atmPortInCells.setDescription(' Input Cell Count ')
atmPortOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortOutCells.setStatus('current')
if mibBuilder.loadTexts: atmPortOutCells.setDescription(' Output Cell Count ')
atmPortCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5000, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortCDVT.setStatus('current')
if mibBuilder.loadTexts: atmPortCDVT.setDescription(' Cell Delay Variation Tolerance (CDVT) is measured in units of seconds per cell. For OC12c ATM the link rate is approximately 1.4 million cells per second, each cell time being approximately 700 nanoseconds. Its value is initialized to 50,000 which is approximately 0.7% of the OC12c line rate. The value ranges from 5,000 to 100,000 which gives us a CDVT range of 7 to 141 cell times.')
atmPortMaxActvBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortMaxActvBits.setStatus('current')
if mibBuilder.loadTexts: atmPortMaxActvBits.setDescription(' Maximum active VPI/VCI bits ')
atmPortHCInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortHCInCells.setStatus('current')
if mibBuilder.loadTexts: atmPortHCInCells.setDescription(' 64 bit input cell count ')
atmPortHCOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortHCOutCells.setStatus('current')
if mibBuilder.loadTexts: atmPortHCOutCells.setDescription(' 64 bit output cell count ')
atmPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: atmPortRowStatus.setDescription(' This variable is used to create or delete instances of atm ports This variable subsumes the admin state variable, and once the row is created, its value returns the admin state of the port')
opticalPortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 7), )
if mibBuilder.loadTexts: opticalPortTable.setStatus('current')
if mibBuilder.loadTexts: opticalPortTable.setDescription('The Optical Port Table')
opticalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"), (0, "PORT-MIB", "lambda"))
if mibBuilder.loadTexts: opticalPortEntry.setStatus('current')
if mibBuilder.loadTexts: opticalPortEntry.setDescription('This describes the attributes of optical ports in the system ')
pysmi_lambda = MibScalar((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 1), Integer32()).setLabel("lambda")
if mibBuilder.loadTexts: pysmi_lambda.setStatus('current')
if mibBuilder.loadTexts: pysmi_lambda.setDescription(' The purpose of this variable is to be used as the third component of the index into the optical port table ')
opticalPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("working", 2), ("protected", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalPortMode.setStatus('current')
if mibBuilder.loadTexts: opticalPortMode.setDescription(' The mode of operation of the port. This is set initially by the user and can only be changed by the user. It is not a status. By default, all optical ports in the system come up as working. They have to be explicitly configured to work in a protected mode or to be turned off.')
opticalPortRxSMselect = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("reserve", 2), ("both", 3), ("none", 4))))
if mibBuilder.loadTexts: opticalPortRxSMselect.setStatus('current')
if mibBuilder.loadTexts: opticalPortRxSMselect.setDescription(' This object selects which lambda to send over the back-plane to the different switch module.')
opticalPortTxSMselect = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("reserve", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalPortTxSMselect.setStatus('current')
if mibBuilder.loadTexts: opticalPortTxSMselect.setDescription(' Selects between lambda feeds on the back plane wich originate in different switch module.')
opticalPortRxSignalState = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("lossOfSignal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalPortRxSignalState.setStatus('current')
if mibBuilder.loadTexts: opticalPortRxSignalState.setDescription(' Provides the status of the received optical signal - whether it is detected or not.')
opticalPortRxFrameState = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lossOfFrame", 1), ("detected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalPortRxFrameState.setStatus('current')
if mibBuilder.loadTexts: opticalPortRxFrameState.setDescription(' Frame state of signal as detected by SW at SONET framer. This state is auto set by software.')
opticalPortTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: opticalPortTxStatus.setStatus('current')
if mibBuilder.loadTexts: opticalPortTxStatus.setDescription(" Provides the status of the transmitter for the optical port. This provides the operational condition of the transmitter. The value of it could be 'Good' even though it is not transmitting any signal due to some reason.")
opticalPortTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalPortTxEnable.setStatus('current')
if mibBuilder.loadTexts: opticalPortTxEnable.setDescription(' Whether the transmission of data and interrupts on the optical port is enabled or disabled ')
opticalPortLaserPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2))))
if mibBuilder.loadTexts: opticalPortLaserPowerLevel.setStatus('current')
if mibBuilder.loadTexts: opticalPortLaserPowerLevel.setDescription(' The laser power level on the port - this variable is useful for tunable lasers. Currently will return a value of high(1) ')
opticalPortLaserWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fifteenXX", 1), ("thirteenTen", 2), ("fifteenFifty", 3), ("thirteenTenFifteenFifty", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalPortLaserWavelength.setStatus('current')
if mibBuilder.loadTexts: opticalPortLaserWavelength.setDescription(' Laser wavelength on the optical port. Currently will return 1 for DWDM ports, 2 for 1310 ports, 3 for 1550 ports and 4 for ports that support both 1310 and 1550 nm wavelengths. This value however will be overshadowed by a 1310 or 1550 wavelength card present in that system. The list will be expanded later to give the exact 15xx wavelength. Useful for tunable lasers to control the 15xx wavelength ')
opticalPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opticalPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: opticalPortRowStatus.setDescription(' This variable is used to create or delete instances of optical port')
ringPortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 8), )
if mibBuilder.loadTexts: ringPortTable.setStatus('current')
if mibBuilder.loadTexts: ringPortTable.setDescription('A table containing ring port variables.')
ringPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: ringPortEntry.setStatus('current')
if mibBuilder.loadTexts: ringPortEntry.setDescription('Entry in the table for a single ring port.')
ringPortArbiterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortArbiterEnabled.setStatus('current')
if mibBuilder.loadTexts: ringPortArbiterEnabled.setDescription('The arbiter enabled Boolean defines whether the ring port Arbitration Logic is enabled or not. The Arbitration Logic services requests for extra data columns from an elastic bandwidth pool.')
ringPortFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("axson", 1), ("pos", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortFrameMode.setStatus('current')
if mibBuilder.loadTexts: ringPortFrameMode.setDescription('The frame mode defines the data path mode of the ring port. The choices include AXSON and POS. AXSON frame mode means the ring encapsulates data inside AXSON frames, and POS means data is encapsulated using the Packet over SONET standard HDLC mechanism.')
ringPortMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortMaxChannels.setStatus('current')
if mibBuilder.loadTexts: ringPortMaxChannels.setDescription('The max channels parameter sizes the number of AxSON channels supported on the ring port. This determines number of ingress and egress queues and the amount of queue memory available.')
ringPortMaxSubChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortMaxSubChannels.setStatus('current')
if mibBuilder.loadTexts: ringPortMaxSubChannels.setDescription('The max sub-channels parameter sizes the number of AxSON sub-channels supported in a particular AxSON channel. This determines the amount of queue memory required.')
ringPortAutoQueueSizing = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortAutoQueueSizing.setStatus('current')
if mibBuilder.loadTexts: ringPortAutoQueueSizing.setDescription('Defines whether Axson channel queues may be automatically resized during provisioning.')
ringPortRingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("working", 1), ("protected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortRingMode.setStatus('current')
if mibBuilder.loadTexts: ringPortRingMode.setDescription('Whether the ring port is connected to the working ring or the protected ring')
ringPortNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortNodeId.setStatus('current')
if mibBuilder.loadTexts: ringPortNodeId.setDescription('This defines the temporal discovery of the node in the logical ring')
ringPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("redundant", 3), ("diagnostic", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ringPortAdminStatus.setDescription('Gives the possible ringPort Administration Status .')
ringPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: ringPortOperStatus.setDescription('Gives the ringPortNodeId operational status of the AXSON interface .')
ringPortRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPortRxFrames.setStatus('current')
if mibBuilder.loadTexts: ringPortRxFrames.setDescription('This object sepcifies the number of frames received at this interface.')
ringPortRxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPortRxFrameErrors.setStatus('current')
if mibBuilder.loadTexts: ringPortRxFrameErrors.setDescription('Number of errored frames received at this interface.')
ringPortTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPortTxFrames.setStatus('current')
if mibBuilder.loadTexts: ringPortTxFrames.setDescription('This object sepcifies the number of frames transmitted from this interface.')
ringPortMaxTDMChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 499))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPortMaxTDMChannels.setStatus('current')
if mibBuilder.loadTexts: ringPortMaxTDMChannels.setDescription(' The maximum number of TDM channels supported on the ring')
ringPortK1K2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ringPortK1K2Status.setStatus('current')
if mibBuilder.loadTexts: ringPortK1K2Status.setDescription(' The status indicated by the K1,K2 bytes in the SONET frame overhead ')
ringPortAISStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ringPortAISStatus.setStatus('current')
if mibBuilder.loadTexts: ringPortAISStatus.setDescription(' The status indicated by the AIS bytes in the SONET frame overhead ')
ringPortPHYStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("lower-layer-down", 3), ("unknown", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ringPortPHYStatus.setStatus('current')
if mibBuilder.loadTexts: ringPortPHYStatus.setDescription(' The physical status of the ring port.')
tdmIoDS3PortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 9), )
if mibBuilder.loadTexts: tdmIoDS3PortTable.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortTable.setDescription('The DS3 TDM IO Port Table')
tdmIoDS3PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: tdmIoDS3PortEntry.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortEntry.setDescription('Entry containing information about TDM IO DS3 ports')
tdmIoDS3PortPBitESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortPBitESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortPBitESS15Min.setDescription('15 minute threshold for P-Bit Errored Seconds')
tdmIoDS3PortPBitESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortPBitESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortPBitESS1Day.setDescription('1 day threshold for P-Bit Errored Seconds')
tdmIoDS3PortPBitSESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortPBitSESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortPBitSESS15Min.setDescription('15 minute threshold for P-Bit Severely Errored Seconds')
tdmIoDS3PortPBitSESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortPBitSESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortPBitSESS1Day.setDescription('1 day threshold for P-Bit Severely Errored Seconds')
tdmIoDS3PortSEFSS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortSEFSS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortSEFSS15Min.setDescription('15 minute threshold for Severely Errored Framing Seconds')
tdmIoDS3PortSEFSS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortSEFSS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortSEFSS1Day.setDescription('1 day threshold for Severely Errored Framing Seconds')
tdmIoDS3PortUASS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortUASS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortUASS15Min.setDescription('15 minute threshold for Severely Errored Framing Seconds')
tdmIoDS3PortUASS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortUASS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortUASS1Day.setDescription('1 day threshold for Unavailable Seconds')
tdmIoDS3PortLineCVS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortLineCVS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortLineCVS15Min.setDescription('15 minute threshold for Line-Coding Violations')
tdmIoDS3PortLineCVS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortLineCVS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortLineCVS1Day.setDescription('1 day threshold for Line-Coding Violations')
tdmIoDS3PortPBitCVS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortPBitCVS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortPBitCVS15Min.setDescription('15 minute threshold for P-Bit Coding Violations')
tdmIoDS3PortPBitCVS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortPBitCVS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortPBitCVS1Day.setDescription('1 day threshold for P-Bit Coding Violations')
tdmIoDS3PortLineESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortLineESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortLineESS15Min.setDescription('15 minute threshold for Line Errored Seconds')
tdmIoDS3PortLineESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortLineESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortLineESS1Day.setDescription('1 day threshold for Line Errored Seconds')
tdmIoDS3PortCBitCVS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortCBitCVS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortCBitCVS15Min.setDescription('15 minute threshold for C-Bit Coding Violations')
tdmIoDS3PortCBitCVS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortCBitCVS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortCBitCVS1Day.setDescription('1 day threshold for C-Bit Coding Violations')
tdmIoDS3PortCBitESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortCBitESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortCBitESS15Min.setDescription('15 minute threshold for C-Bit Errored Seconds')
tdmIoDS3PortCBitESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortCBitESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortCBitESS1Day.setDescription('1 day threshold for C-Bit Errored Seconds')
tdmIoDS3PortCBitSESS15Min = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortCBitSESS15Min.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortCBitSESS15Min.setDescription('15 minute threshold for C-Bit Severely Errored Seconds')
tdmIoDS3PortCBitSESS1Day = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortCBitSESS1Day.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortCBitSESS1Day.setDescription('1 day threshold for C-Bit Severely Errored Seconds')
tdmIoDS3PortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmIoDS3PortRowStatus.setStatus('current')
if mibBuilder.loadTexts: tdmIoDS3PortRowStatus.setDescription(' This variable is used to create or delete instances of TDM IO DS3 ports. This variable subsumes the admin state variable, and once the row is created, its value returns the admin state of the port')
posPortTable = MibTable((1, 3, 6, 1, 4, 1, 5812, 3, 10), )
if mibBuilder.loadTexts: posPortTable.setStatus('current')
if mibBuilder.loadTexts: posPortTable.setDescription('The POS Port Table')
posPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1), ).setIndexNames((0, "CARD-MIB", "slotNo"), (0, "PORT-MIB", "portNo"))
if mibBuilder.loadTexts: posPortEntry.setStatus('current')
if mibBuilder.loadTexts: posPortEntry.setDescription('Entry containing information about POS ports')
posPortTransportSegmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: posPortTransportSegmentCount.setStatus('current')
if mibBuilder.loadTexts: posPortTransportSegmentCount.setDescription('Number of provisioned connections on port.')
posPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("transparent", 1), ("bridgedDataMode", 2), ("vlan", 3), ("macAddr", 4), ("ipAddr", 5), ("mpls", 6), ("mapOS", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: posPortMode.setStatus('current')
if mibBuilder.loadTexts: posPortMode.setDescription('mode of operation.')
posPortDefaultVID = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: posPortDefaultVID.setStatus('current')
if mibBuilder.loadTexts: posPortDefaultVID.setDescription("Port's default VLAN ID.")
posPortMinPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: posPortMinPktSize.setStatus('current')
if mibBuilder.loadTexts: posPortMinPktSize.setDescription('It is defined as the minimum number of bytes encapsulated in the POS frame including the FCS, but excluding byte stuffing.')
posPortMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: posPortMaxPktSize.setStatus('current')
if mibBuilder.loadTexts: posPortMaxPktSize.setDescription('It is defined as the maximum number of bytes encapsulated in the POS frame including the FCS, but excluding byte stuffing.')
posPortMinPktViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: posPortMinPktViolations.setStatus('current')
if mibBuilder.loadTexts: posPortMinPktViolations.setDescription('This object gives the number of times the system had detected a packet of size less than the acceptable minimum.')
posPortMaxPktViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 5812, 3, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: posPortMaxPktViolations.setStatus('current')
if mibBuilder.loadTexts: posPortMaxPktViolations.setDescription('This object gives the number of times the system had detected a packet of size greater than the acceptable minimum.')
portPhyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,0)).setObjects(("IF-MIB", "ifOperStatus"))
if mibBuilder.loadTexts: portPhyStatusChange.setDescription(' Change in the operational status of a port, 1 means the port came up, 2 means it went down ')
portAdminStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,1)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: portAdminStatusChange.setDescription(' Change in the admin status of a port, 1 means the port came up, 2 means it went down ')
portSpeedStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,20)).setObjects(("IF-MIB", "ifSpeed"))
if mibBuilder.loadTexts: portSpeedStatusTrap.setDescription(' Change in speed of an interface e.g. 10 or 100 for a Fast Ethernet port')
etherPortDuplexStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,21)).setObjects(("EtherLike-MIB", "dot3StatsDuplexStatus"))
if mibBuilder.loadTexts: etherPortDuplexStatusTrap.setDescription(' Change in the duplex status of an ethernet port , 2 means half-duplex, 3 means full duplex')
etherPortAutonegStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,22)).setObjects(("MAU-MIB", "ifMauAutoNegConfig"))
if mibBuilder.loadTexts: etherPortAutonegStatusTrap.setDescription(' Change in status of the autoneg process, 3 means it has completed ')
sonetSectionLOSChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,27)).setObjects(("SONET-MIB", "sonetSectionCurrentStatus"))
if mibBuilder.loadTexts: sonetSectionLOSChange.setDescription(' Change in the SONET LOS status.')
sonetSectionLOFChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,28)).setObjects(("SONET-MIB", "sonetSectionCurrentStatus"))
if mibBuilder.loadTexts: sonetSectionLOFChange.setDescription(' Change in the SONET LOF status.')
sonetLineAISChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,29)).setObjects(("SONET-MIB", "sonetLineCurrentStatus"))
if mibBuilder.loadTexts: sonetLineAISChange.setDescription(' Change in the SONET Line AIS status.')
sonetLineRDIChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,30)).setObjects(("SONET-MIB", "sonetLineCurrentStatus"))
if mibBuilder.loadTexts: sonetLineRDIChange.setDescription(' Change in the SONET Line RDI status.')
sonetPathLOPChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,31)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"))
if mibBuilder.loadTexts: sonetPathLOPChange.setDescription(' Change in the SONET Path LOP status.')
sonetPathAISChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,32)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"))
if mibBuilder.loadTexts: sonetPathAISChange.setDescription(' Change in the SONET Path AIS status.')
sonetPathRDIChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,33)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"))
if mibBuilder.loadTexts: sonetPathRDIChange.setDescription(' Change in the SONET Path RDI status.')
sonetPathUNEQPChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,34)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"))
if mibBuilder.loadTexts: sonetPathUNEQPChange.setDescription('Indicates whether the SONET path is equipped or not.')
sonetPathPSLMChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,35)).setObjects(("SONET-MIB", "sonetPathCurrentStatus"))
if mibBuilder.loadTexts: sonetPathPSLMChange.setDescription('Indicates if there is any mismatch in the SONET signal label.')
sonetVTLOPChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,36)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"))
if mibBuilder.loadTexts: sonetVTLOPChange.setDescription(' Change in the SONET VT LOP status.')
sonetVTAISChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,37)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"))
if mibBuilder.loadTexts: sonetVTAISChange.setDescription(' Change in the SONET VT AIS status.')
sonetVTRDIChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,38)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"))
if mibBuilder.loadTexts: sonetVTRDIChange.setDescription(' Change in the SONET VT RDI status.')
sonetVTRFIChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,39)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"))
if mibBuilder.loadTexts: sonetVTRFIChange.setDescription(' Change in the SONET VT RFI status.')
sonetVTUNEQPChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,40)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"))
if mibBuilder.loadTexts: sonetVTUNEQPChange.setDescription('Indicates whether the SONET VT is equipped or not.')
sonetVTPSLMChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,41)).setObjects(("SONET-MIB", "sonetVTCurrentStatus"))
if mibBuilder.loadTexts: sonetVTPSLMChange.setDescription('Indicates if there is any mismatch in the SONET signal label.')
ringPortK1K2Change = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,47)).setObjects(("PORT-MIB", "ringPortK1K2Status"))
if mibBuilder.loadTexts: ringPortK1K2Change.setDescription('Indicates the change in status indicated by K1,K2 bytes')
ringPortAISChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,48)).setObjects(("PORT-MIB", "ringPortAISStatus"))
if mibBuilder.loadTexts: ringPortAISChange.setDescription('A signal indicating a change of status indicated by the AIS bytes')
ringPortPHYChange = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,49)).setObjects(("PORT-MIB", "ringPortPHYStatus"))
if mibBuilder.loadTexts: ringPortPHYChange.setDescription(' A trap indicating the change in phy status of ring port')
sonetPortTCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,50)).setObjects(("PORT-MIB", "sonetTCAStatus"))
if mibBuilder.loadTexts: sonetPortTCAlarm.setDescription('A SONET alarm threshold has been crossed.')
dsxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5812) + (0,55)).setObjects(("PORT-MIB", "dsxStatus"))
if mibBuilder.loadTexts: dsxAlarm.setDescription('The status of a DSx line has changed.')
mibBuilder.exportSymbols("PORT-MIB", tdmIoDS3PortLineESS1Day=tdmIoDS3PortLineESS1Day, tdmIoDS1PortLoopbackLlbControl=tdmIoDS1PortLoopbackLlbControl, etherPortStatsTxBadFifoOverrun=etherPortStatsTxBadFifoOverrun, etherPortPhyReset=etherPortPhyReset, sonetPortLineESS1Day=sonetPortLineESS1Day, ringPortPHYStatus=ringPortPHYStatus, tdmIoDS1PortLoopbackLlbDeactCodeLen=tdmIoDS1PortLoopbackLlbDeactCodeLen, ringPortRingMode=ringPortRingMode, opticalPortRxFrameState=opticalPortRxFrameState, sonetPortLineCVS15Min=sonetPortLineCVS15Min, ringPortK1K2Status=ringPortK1K2Status, sonetPortPathESS1Day=sonetPortPathESS1Day, tdmIoDS1PortBuildOut=tdmIoDS1PortBuildOut, tdmIoDS1PortBertDuration=tdmIoDS1PortBertDuration, sonetPortScrambling=sonetPortScrambling, sonetTCAStatus=sonetTCAStatus, etherPortStatsTxBadJamError=etherPortStatsTxBadJamError, etherPortStatsTxPkts65to127Octets=etherPortStatsTxPkts65to127Octets, etherPortDuplexTrapEnable=etherPortDuplexTrapEnable, tdmIoDS3PortCBitCVS15Min=tdmIoDS3PortCBitCVS15Min, sonetVTPSLMChange=sonetVTPSLMChange, tdmIoDS1PortPathSASS1Day=tdmIoDS1PortPathSASS1Day, tdmIoDS1PortTiming=tdmIoDS1PortTiming, tdmIoDS3PortLineCVS1Day=tdmIoDS3PortLineCVS1Day, tdmIoDS3PortCBitSESS1Day=tdmIoDS3PortCBitSESS1Day, atmPortTable=atmPortTable, sonetPathLOPChange=sonetPathLOPChange, sonetPortLineCVS1Day=sonetPortLineCVS1Day, atmPortRowStatus=atmPortRowStatus, opticalPortRxSMselect=opticalPortRxSMselect, sonetPathPSLMChange=sonetPathPSLMChange, etherPortStatsTxOversize=etherPortStatsTxOversize, sonetLineRDIChange=sonetLineRDIChange, ringPortTable=ringPortTable, etherPortStatsTxPkts128to255Octets=etherPortStatsTxPkts128to255Octets, etherPortAutonegStatusTrap=etherPortAutonegStatusTrap, portSpeedStatusTrap=portSpeedStatusTrap, etherPortEntry=etherPortEntry, tdmIoDS3PortPBitSESS1Day=tdmIoDS3PortPBitSESS1Day, tdmIoDS3PortLineCVS15Min=tdmIoDS3PortLineCVS15Min, sonetPathRDIChange=sonetPathRDIChange, portPhyStatusChange=portPhyStatusChange, sonetVTLOPChange=sonetVTLOPChange, etherPortStatsTxPkts1024to1518Octets=etherPortStatsTxPkts1024to1518Octets, ringPortAISChange=ringPortAISChange, sonetPortPathSESS15Min=sonetPortPathSESS15Min, etherPortStatsTxBadSequenceError=etherPortStatsTxBadSequenceError, tdmIoDS1PortPrbsBec=tdmIoDS1PortPrbsBec, opticalPortEntry=opticalPortEntry, tdmIoDS1PortEntry=tdmIoDS1PortEntry, tdmIoDS1PortPrbsTransmit=tdmIoDS1PortPrbsTransmit, etherPortTable=etherPortTable, etherPortRxThreshOvrszFrames=etherPortRxThreshOvrszFrames, sonetPortLineSESS1Day=sonetPortLineSESS1Day, sonetPortPathCVS15Min=sonetPortPathCVS15Min, opticalPortTable=opticalPortTable, ringPortFrameMode=ringPortFrameMode, sonetPortPathSESS1Day=sonetPortPathSESS1Day, tdmIoDS3PortSEFSS1Day=tdmIoDS3PortSEFSS1Day, dsxAlarm=dsxAlarm, posPortTransportSegmentCount=posPortTransportSegmentCount, sonetPortChannelization=sonetPortChannelization, atmPortOutCells=atmPortOutCells, sonetPortTCAlarm=sonetPortTCAlarm, tdmIoDS3PortCBitCVS1Day=tdmIoDS3PortCBitCVS1Day, ringPortK1K2Change=ringPortK1K2Change, sonetPortSectESS15Min=sonetPortSectESS15Min, ringPortPHYChange=ringPortPHYChange, tdmIoDS1PortLoopbackLlbActCodeLen=tdmIoDS1PortLoopbackLlbActCodeLen, tdmIoDS1PortLineESS15Min=tdmIoDS1PortLineESS15Min, tdmIoDS1PortPathUASS15Min=tdmIoDS1PortPathUASS15Min, tdmIoDS1PortPrbsAlgorithm=tdmIoDS1PortPrbsAlgorithm, sonetPathAISChange=sonetPathAISChange, sonetPortTable=sonetPortTable, sonetPortLineUASS15Min=sonetPortLineUASS15Min, sonetPortLineUASS1Day=sonetPortLineUASS1Day, tdmIoDS1PortLoopbackState=tdmIoDS1PortLoopbackState, etherPortStatsTxPkts512to1023Octets=etherPortStatsTxPkts512to1023Octets, etherPortDuplexCfg=etherPortDuplexCfg, sonetPathUNEQPChange=sonetPathUNEQPChange, etherPortStatsTxBadFifoUnderrun=etherPortStatsTxBadFifoUnderrun, tdmIoDS1PortPathESS15Min=tdmIoDS1PortPathESS15Min, tdmIoDS1PortPathCSS15Min=tdmIoDS1PortPathCSS15Min, ringPortRxFrameErrors=ringPortRxFrameErrors, etherPortStatsTxBadParityError=etherPortStatsTxBadParityError, opticalPortRxSignalState=opticalPortRxSignalState, tdmIoDS3PortCBitESS15Min=tdmIoDS3PortCBitESS15Min, posPortMaxPktViolations=posPortMaxPktViolations, ringPortEntry=ringPortEntry, ringPortNodeId=ringPortNodeId, mib2IfIndex=mib2IfIndex, tdmIoDS3PortPBitSESS15Min=tdmIoDS3PortPBitSESS15Min, tdmIoDS3PortUASS1Day=tdmIoDS3PortUASS1Day, tdmIoDS1PortLoopbackLlbMonPath=tdmIoDS1PortLoopbackLlbMonPath, posPortMode=posPortMode, sonetPortSectSESS1Day=sonetPortSectSESS1Day, sonetVTUNEQPChange=sonetVTUNEQPChange, tdmIoDS1PortLoopbackResults=tdmIoDS1PortLoopbackResults, etherPortStatsTxPkts1519to1530Octets=etherPortStatsTxPkts1519to1530Octets, sonetPortPathUASS15Min=sonetPortPathUASS15Min, etherPortDefaultVlanId=etherPortDefaultVlanId, tdmIoDS1PortPathSESS1Day=tdmIoDS1PortPathSESS1Day, tdmIoDS1PortRowStatus=tdmIoDS1PortRowStatus, posPortMaxPktSize=posPortMaxPktSize, sonetPortSectESS1Day=sonetPortSectESS1Day, tdmIoDS1PortPrbsMonitor=tdmIoDS1PortPrbsMonitor, atmPortMaxActvBits=atmPortMaxActvBits, sonetPortSectCVS1Day=sonetPortSectCVS1Day, etherPortSpeedStatus=etherPortSpeedStatus, posPortEntry=posPortEntry, sonetPortLineSESS15Min=sonetPortLineSESS15Min, tdmIoDS3PortCBitESS1Day=tdmIoDS3PortCBitESS1Day, tdmIoDS3PortPBitCVS15Min=tdmIoDS3PortPBitCVS15Min, tdmIoDS3PortCBitSESS15Min=tdmIoDS3PortCBitSESS15Min, posPortMinPktSize=posPortMinPktSize, tdmIoDS1PortFraming=tdmIoDS1PortFraming, etherPortSpeedCfg=etherPortSpeedCfg, ringPortMaxChannels=ringPortMaxChannels, sonetVTRFIChange=sonetVTRFIChange, tdmIoDS1PortLoopbackLLbActCode=tdmIoDS1PortLoopbackLLbActCode, etherPortDuplexStatusTrap=etherPortDuplexStatusTrap, ringPortAutoQueueSizing=ringPortAutoQueueSizing, tdmIoDS3PortPBitCVS1Day=tdmIoDS3PortPBitCVS1Day, etherPortStatsTxDropFifoOverrun=etherPortStatsTxDropFifoOverrun, PYSNMP_MODULE_ID=portMIB, etherPortStatsTxControlFrames=etherPortStatsTxControlFrames, etherPortAutonegAdvDuplex=etherPortAutonegAdvDuplex, tdmIoDS1PortPrbsMonPath=tdmIoDS1PortPrbsMonPath, tdmIoDS1PortBertState=tdmIoDS1PortBertState, atmPortHCOutCells=atmPortHCOutCells, sonetPortIdString=sonetPortIdString, tdmIoDS1PortPathSASS15Min=tdmIoDS1PortPathSASS15Min, sonetPortEntry=sonetPortEntry, sonetPortLoopback=sonetPortLoopback, sonetPortRowStatus=sonetPortRowStatus, tdmIoDS3PortTable=tdmIoDS3PortTable, tdmIoDS3PortEntry=tdmIoDS3PortEntry, sonetVTRDIChange=sonetVTRDIChange, ringPortOperStatus=ringPortOperStatus, portEntry=portEntry, tdmIoDS1PortLineESS1Day=tdmIoDS1PortLineESS1Day, tdmIoDS1PortCoding=tdmIoDS1PortCoding, atmPortEntry=atmPortEntry, tdmIoDS1PortPrbsInversion=tdmIoDS1PortPrbsInversion, etherPortPauseStateReceived=etherPortPauseStateReceived, opticalPortTxStatus=opticalPortTxStatus, etherPortStatsTxFCSErrors=etherPortStatsTxFCSErrors, etherPortSpeedTrapEnable=etherPortSpeedTrapEnable, sonetPortPathUASS1Day=sonetPortPathUASS1Day, etherPortAutonegTrapEnable=etherPortAutonegTrapEnable, portMIB=portMIB, dsxStatus=dsxStatus, portNo=portNo, ringPortAISStatus=ringPortAISStatus, tdmIoDS3PortLineESS15Min=tdmIoDS3PortLineESS15Min, opticalPortLaserPowerLevel=opticalPortLaserPowerLevel, ringPortArbiterEnabled=ringPortArbiterEnabled, atmPortCDVT=atmPortCDVT, tdmIoDS1PortBertResults=tdmIoDS1PortBertResults, posPortTable=posPortTable, tdmIoDS1PortLoopbackLlbGenPath=tdmIoDS1PortLoopbackLlbGenPath, tdmIoDS1PortLoopbackLLbDeactCode=tdmIoDS1PortLoopbackLLbDeactCode, tdmIoDS3PortPBitESS15Min=tdmIoDS3PortPBitESS15Min, pysmi_lambda=pysmi_lambda, atmPortVPTunnel=atmPortVPTunnel, posPortMinPktViolations=posPortMinPktViolations, etherPortStatsTxDropJamError=etherPortStatsTxDropJamError, tdmIoDS1PortLoopbackType=tdmIoDS1PortLoopbackType, tdmIoDS1PortPathESS1Day=tdmIoDS1PortPathESS1Day, etherPortRxSyncErrors=etherPortRxSyncErrors, tdmIoDS1PortPathCVS15Min=tdmIoDS1PortPathCVS15Min, etherPortStatsTxUndersize=etherPortStatsTxUndersize, etherPortRxDelSeqErrors=etherPortRxDelSeqErrors, etherPortLoopback=etherPortLoopback, etherPortStatsRxPkts1519to1530Octets=etherPortStatsRxPkts1519to1530Octets, tdmIoDS3PortUASS15Min=tdmIoDS3PortUASS15Min, ringPortMaxSubChannels=ringPortMaxSubChannels, sonetPortType=sonetPortType, etherPortRxOverrun=etherPortRxOverrun, tdmIoDS1PortPathSESS15Min=tdmIoDS1PortPathSESS15Min, tdmIoDS1PortLCVCount=tdmIoDS1PortLCVCount, tdmIoDS1PortType=tdmIoDS1PortType, sonetPortPathCVS1Day=sonetPortPathCVS1Day, ringPortMaxTDMChannels=ringPortMaxTDMChannels, sonetPortSectSESS15Min=sonetPortSectSESS15Min, tdmIoDS3PortPBitESS1Day=tdmIoDS3PortPBitESS1Day, etherPortAutonegAdvSpeed=etherPortAutonegAdvSpeed, sonetVTAISChange=sonetVTAISChange, etherPortRxFifoOverrunErrors=etherPortRxFifoOverrunErrors, tdmIoDS3PortRowStatus=tdmIoDS3PortRowStatus, tdmIoDS1PortBertPattern=tdmIoDS1PortBertPattern, sonetPortPathESS15Min=sonetPortPathESS15Min, opticalPortRowStatus=opticalPortRowStatus, etherPortStatsTxPkts64Octets=etherPortStatsTxPkts64Octets, etherPortRowStatus=etherPortRowStatus, tdmIoDS1PortPathCVS1Day=tdmIoDS1PortPathCVS1Day, opticalPortTxSMselect=opticalPortTxSMselect, ringPortRxFrames=ringPortRxFrames, tdmIoDS1PortPrbsGenPath=tdmIoDS1PortPrbsGenPath, sonetPortTiming=sonetPortTiming, etherPortStatsTxDropSequenceError=etherPortStatsTxDropSequenceError, ringPortAdminStatus=ringPortAdminStatus, atmPortTiming=atmPortTiming, sonetPortConfigedChans=sonetPortConfigedChans, posPortDefaultVID=posPortDefaultVID, sonetPortSectCVS15Min=sonetPortSectCVS15Min, etherPortStatsTxPkts256to511Octets=etherPortStatsTxPkts256to511Octets, opticalPortTxEnable=opticalPortTxEnable, sonetLineAISChange=sonetLineAISChange, tdmIoDS1PortPathCSS1Day=tdmIoDS1PortPathCSS1Day, atmPortMaxTotalBits=atmPortMaxTotalBits, sonetPortLineESS15Min=sonetPortLineESS15Min, opticalPortLaserWavelength=opticalPortLaserWavelength, portTable=portTable, portAdminStatusChange=portAdminStatusChange, tdmIoDS1PortTable=tdmIoDS1PortTable, opticalPortMode=opticalPortMode, sonetSectionLOFChange=sonetSectionLOFChange, etherPortVlanMode=etherPortVlanMode, tdmIoDS3PortSEFSS15Min=tdmIoDS3PortSEFSS15Min, ringPortTxFrames=ringPortTxFrames, sonetSectionLOSChange=sonetSectionLOSChange, atmPortHCInCells=atmPortHCInCells, etherPortRxControlFrames=etherPortRxControlFrames, etherPortStatsTxDropParityError=etherPortStatsTxDropParityError, atmPortInCells=atmPortInCells)
