#
# PySNMP MIB module CXLapBD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXLapBD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cxLapBD, Alias, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "cxLapBD", "Alias", "SapIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, ModuleIdentity, Unsigned32, Integer32, NotificationType, Counter64, Gauge32, iso, MibIdentifier, IpAddress, NotificationType, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "ModuleIdentity", "Unsigned32", "Integer32", "NotificationType", "Counter64", "Gauge32", "iso", "MibIdentifier", "IpAddress", "NotificationType", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Sapi(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 16, 63))
    namedValues = NamedValues(("q930-q931", 0), ("x25", 16), ("mngmt", 63))

class Tei(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

lapbdLowerPoolThreshold = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdLowerPoolThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdLowerPoolThreshold.setDescription('Determines the lower global resource threshold (available buffer space), that when reached, causes the LAPB/D layer to initiate flow control (transmission of RNRs). This is a global value that applies across all lower SAPs (service access points). Thus if resources are low, all links are affected. The value set for this object must not exceed the value set for the object lapbdUpperPoolThreshold. Range of Values: 1 - 99 Related Objects: lapbdUpperPoolThreshold lapbdMacSapFlowControlState Default Value: 10 (10 percent) Configuration Changed: administrative')
lapbdUpperPoolThreshold = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdUpperPoolThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdUpperPoolThreshold.setDescription('Determines the upper global resource threshold (available buffer space), that when reached, causes the LAPB/D layer to cancel flow control. This is a global value that applies across all lower SAPs (service access points). The value set for this object must not be less than the value set for the object lapbdLowerPoolThreshold. Range of Values: 1 - 99 Default Value: 20 (20 percent) Related Objects: lapbdUpperPoolThreshold lapbdMacSapFlowControlState Configuration Changed: administrative')
lapbdTraceSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdTraceSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTraceSize.setDescription('Defines the number of bytes that are traced in each data buffer that is transmitted or received. Range of Values: 0 - 30 Default Value: 15 Related Objects: lapbdTraceFlags lapbdMacSapControl Configuration Changed: administrative and operative')
lapbdTraceFlags = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdTraceFlags.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTraceFlags.setDescription('Specifies which events are traced. Each bit in this object is mapped to a specific event. Turning the bit on causes the event to be traced. - bit 1: trace all receive data events - bit 2: trace all transmit data events - bit 3: trace all timer events - bit 4: reserved for future use - bit 5: reserved for future use - bit 6: reserved for future use - bit 7: reserved for future use - bit 8: reserved for future use Range of Values: 0 - 255 Default Value: 7 Related Objects: lapbdTraceSize lapbdMacSapControl Configuration Changed: administrative and operative')
lapbdTraps = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdTraps.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTraps.setDescription('Determines if this layer generates the lapbdStatusIndication trap. Options: disabled (1): This layer does not generate the lapbdStatusIndication trap. enabled (2): This layer generates the lapbdStatusIndication trap. Default Value: disabled (1) Related Objects: lapbdStatusEvent lapbdStatusIndication Configuration Changed: administrative and operative')
lapbdStatusEvent = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noEvent", 1), ("enteringCongestion", 2), ("exitingCongestion", 3), ("linkUp", 4), ("linkDown", 5), ("protocolError", 6), ("invTeiRemovalAttempt", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdStatusEvent.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdStatusEvent.setDescription("Indicates the status reported by a lapbdStatusIndication trap when it occurs. This object always returns the value 'noEvent' when read. Options: noEvent (1): There is no status to report. enteringCongestion (2): The data link connection is congested (lapbdMacSapTxQUpperThreshold has been exceeded). If this persists, the connection is terminated. exitingCongestion (3): The data link connection has recovered from congestion and is operating normally. linkUp (4): The LAPB/D link is active. linkDown (5): The LAB/D link is inactive. protocolError (6): A protocol error has occurred (FRMR for example). invTeiRemovalAttempt (7): The local or remote attempted to remove a static TEI (terminal endpoint identifier).")
lapbdSoftwareVersions = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdSoftwareVersions.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdSoftwareVersions.setDescription('Identifies the LAPB/D software revision number, which is displayed as a string of five numbers each separated by a period (1.2.3.4.5). The five numbers represent: - 1 main version number - 2 main revision number - 3 branch version number - 4 branch revision number - 5 part number')
lapbdMacSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20), )
if mibBuilder.loadTexts: lapbdMacSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTable.setDescription('A table containing configuration information about each LAPB/D lower service access point.')
lapbdMacSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1), ).setIndexNames((0, "CXLapBD-MIB", "lapbdMacSapNumber"))
if mibBuilder.loadTexts: lapbdMacSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapEntry.setDescription('The parameters for a specific LAPB/D lower (MAC) service access point.')
lapbdMacSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapNumber.setDescription('Identifies the service access point by a unique numerical value.')
lapbdMacSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Configuration Changed: administrative')
lapbdMacSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapAlias.setDescription('Identifies the service access point by a textual name. Service access point names must be unique across all layers. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
lapbdMacSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapCompanionAlias.setDescription('Identifies by a textual name, the remote service access point with which this service access point will communicate with. Service access point names must be unique across all layers. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
lapbdMacSapLapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lapb", 1), ("lapd", 2))).clone('lapb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapLapType.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapLapType.setDescription("Determines the type of link access procedure provided by this MAC SAP (service access point): LAPB or LAPD. It also determines the number of data link SAPs that are automatically created and associated with this SAP. If the value of lapbdMacSapLapBProtocolFlavor is set to 'v8022', then the value for this object is forced to 'lapb', regardless of its setting. This object returns to its original value only when lapbdMacSapLapBProtocolFlavor is set to 'standard'. Options: lapb (1): Defines a LAPB service access point and creates one associated data link SAP. lapd (2): Defines a LAPD service access point and creates three associated data link SAPs. Default Value: lapb (1) Related Objects: lapbdMacSapLapBProtocolFlavor Configuration Changed: administrative")
lapbdMacSapLogicalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapLogicalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapLogicalInterfaceType.setDescription("Determines the logical interface type of the SAP (service access point): DTE or DCE. This is true only when the object lapbdMacSapLapType is set to 'lapb'. When the object lapbdMacSapLapType set to 'lapd', 'dte' maps to user side and 'dce' maps to network side automatically. The network side is also known as the Assignment Source Point (ASP) of all TEIs (terminal endpoint identifiers). If the value of lapbdMacSapLapBProtocolFlavor is set to 'v8022', then the value for this object is forced to 'dte', regardless of its setting. This object returns to its original value only when lapbdMacSapLapBProtocolFlavor is set to 'standard'. Options: dte (1): The SAP functions as a DTE when object lapbdMacSapLapType is set to value 'lapb' and User when it is set to 'lapd'. dce (2): The SAP functions as a DCE when object lapbdMacSapLapType is set to value 'lapb' and Network when it is set to 'lapd'. Default Value: dte (1) Related Objects: lapbdMacSapLapType Configuration Changed: administrative and operative")
lapbdMacSapArbitrationLogic = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passive", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapArbitrationLogic.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapArbitrationLogic.setDescription("Determines if the SAP initiates the link (active) by sending a SABM (LAPB) or a SABME (LAPD) to the other side. Both sides can be active. However, typically the DCE side is active and the DTE side is passive. Note: A link will never be established if both sides of the link are set to 'passive'. Options: passive (1): The SAP waits for the other side to initiate the link. active (2): The SAP initiates the link. Default Value: active (2) Related Objects: lapbdMacSapLapType lapbdMacSapLogicalInterfaceType Configuration Changed: administrative and operative")
lapbdMacSapLapDProtocolFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ccitt", 1), ("vn3", 2), ("etsi", 3))).clone('ccitt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapLapDProtocolFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapLapDProtocolFlavor.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Determines how TEI (terminal endpoint identifier) assignments are handled. Options: ccitt (1): Supports CCITT standards (forces TEI assignment on power up). vn3 (2): Supports VN3 standards (forces TEI assignment only when the layer above LAPB/D requests a connection). etsi (3): Supports ETSI standards. Default Value: ccitt (1) Related Objects: lapbdMacSapLapType Configuration Changed: administrative and operative")
lapbdMacSapLapBProtocolFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("v8022", 2))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapLapBProtocolFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapLapBProtocolFlavor.setDescription("This object applies only to LAPB (object lapbdMacSapLapType set to 'lapb'). Determines the LAPB protocol variant used by this SAP (service access point). Setting this object to 'v8022' forces the following: - object lapbdMacSapLogicalInterfaceType is set to 'dte' - object lapbdDlSapModulo (lapbdDlSapTable) is set to 'modulo 128' - object lapbdDlSapMaxFrameSize (lapbdDlSapTable) is set to '265' Once set, these settings are locked. Only the restoration of object lapbdMacSapLapBProtocolFlavor to 'standard' unlocks these objects. Options: standard (1): The standard LAPB protocol is used by this SAP. v8022 (2): The 802.2 variant of the LAPB protocol is used by this SAP. Default Value: standard (1) Configuration Changed: administrative")
lapbdMacSapWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapWindow.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapWindow.setDescription('Determines the maximum number of frames that can be outstanding at any given time to a sub-layer. A frame is considered to be outstanding until its receipt is acknowledged. This object controls the setting of internal communications between layers. To control the actual window size of the data link connection see lapbdDlSapWindowSize. Range of Values: 1 - 127 Default Value: 2 Configuration Changed: administrative and operative')
lapbdMacSapTxQUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapTxQUpperThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxQUpperThreshold.setDescription('Defines the threshold which declares a data link connection on this MAC SAP (service access point) to be congested. When the number of frames in the queue for this data link connection exceeds this value, the congestion timer is started and link status is set to congested. If congestion has not cleared before this timer expires, the link is dropped. Each data link connection through this MAC SAP (service access point) maintains its own queue. Range of Values: 1 - 255 Default Value: 16 Related Objects: lapbdMacSapTxQLowerThreshold lapbdDlSapCongestionTimer lapbdStatusEvent lapbdDlcTxFlowControlState Configuration Changed: administrative and operative')
lapbdMacSapTxQLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapTxQLowerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxQLowerThreshold.setDescription('Defines the threshold which declares a data link connection on this MAC SAP (service access point) to no longer be congested. When the number of frames in the queue for this data link connection reaches this value, the congestion timer is stopped and link status is set to not congested. Each data link connection through this MAC SAP (service access point) maintains its own queue. Range of Values: 1 - 255 Default Value: 8 Related Objects: lapbdMacSapTxQLowerThreshold lapbdDlSapCongestionTimer lapbdStatusEvent lapbdDlcTxFlowControlState Configuration Changed: administrative and operative')
lapbdMacSapConnectionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapConnectionTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapConnectionTimer.setDescription('Determines the maximum amount of time that the LAPB/D layer waits for a sub- layer to respond to a connection request. If this timer expires before a response is received, the connection is retried. A positive response (connection confirmed) is only issued by the sub- layer when the physical/logical line is active, otherwise a negative response (disconnect indication) is issued. Range of Values: 1 - 2047 (in tenths of a second) Default Value: 30 (3 seconds) Configuration Changed: administrative and operative')
lapbdMacSapT202Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapT202Timer.setReference('(T202-LAPD)')
if mibBuilder.loadTexts: lapbdMacSapT202Timer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapT202Timer.setDescription("This object applies only when: object lapbdMacSapLapType is set to 'lapd' object lapbdMacSapLogicalInterfaceType is set to 'dte' (user side) object lapbdDlSapTeiAssignmentMode is set to 'automatic' (automatically assign TEIs) Determines the minimum amount of time between retransmission of TEI Identity-Request messages. Default Value: 20 (2 seconds) Range of Values: 1 - 2047 (in tenths of a second) Configuration Changed: administrative and operative")
lapbdMacSapN202Counter = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapN202Counter.setReference('(N202-LAPD)')
if mibBuilder.loadTexts: lapbdMacSapN202Counter.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapN202Counter.setDescription("This object applies only when: object lapbdMacSapLapType is set to 'lapd' object lapbdMacSapLogicalInterfaceType is set to 'dte' (user side) object lapbdDlSapTeiAssignmentMode is set to 'automatic' (automatically assign TEIs) Determines the maximum number of retransmission of TEI Identity-Request messages. Default Value: 3 Range of Values: 1 - 1023 Related Object: lapbdMacSapT202Timer Configuration Changed: administrative and operative")
lapbdMacSapTeiCheckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapTeiCheckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTeiCheckTimer.setDescription("This object applies only when: object lapbdMacSapLapType is set to 'lapd' object lapbdMacSapLogicalInterfaceType is set to 'dce' (network side/ASP) object lapbdDlSapTeiAssignmentMode is set to 'automatic' (automatically assign TEIs) Determines how long the ASP (assignment source point) waits between initiating TEI check procedures. The value for this object must be greater than two times the value of object lapbdMacSapT201Timer. Default Value: 0 (disabled) Range of Values: 1 - 2047 (in tenths of a second), a value of 0 disables the timer Related Object: lapbdMacSapT202Timer Configuration Changed: administrative and operative")
lapbdMacSapT201Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapT201Timer.setReference('(T201-LAPD)')
if mibBuilder.loadTexts: lapbdMacSapT201Timer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapT201Timer.setDescription("This object applies only when: object lapbdMacSapLapType is set to 'lapd' object lapbdMacSapLogicalInterfaceType is set to 'dce' (network side/ASP) object lapbdDlSapTeiAssignmentMode is set to 'automatic' (automatically assign TEIs) Determines the delay between retransmission of TEI Identity-Check messages by the ASP (assignment source point). The value for this object must be less than half the value of object lapbdMacSapTeiCheckTimer. Default Value: 20 (2 seconds) Range of Values: 1 - 2047 (in tenths of a second) Related Object: lapbdMacSapTeiCheckTimer Configuration Changed: administrative and operative")
lapbdMacSapLowTei = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapLowTei.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapLowTei.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd') Determines lower boundary for automatic TEI assignments. This defines the ranges for automatic and non-automatic (static) TEIs assignments as follows: TEI numbers from 0 to lapbdMacSapLowTei -1 are available for non-automatic (static) assignment. TEI numbers from lapbdMacSapLowTei to 127 are available for automatic assignment Range of Values: 0 - 127 Default Value: 64 (recommended by the ITU-T) Related Objects: lapbdMacSapLapType lapbdMacSapLowTei Configuration Changed: administrative and operative")
lapbdMacSapKeepL1Up = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdMacSapKeepL1Up.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapKeepL1Up.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Determines how this SAP (service access point) handles connections with the sub-layer. Options: disabled (1): This SAP attempts to connect with the sub-layer only when the layer above LAPB/D connects to this SAP. enabled (2): This SAP always attempts to connect with the sub-layer. Default Value: enabled (2) Configuration Changed: administrative and operative")
lapbdMacSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clearStats", 1), ("enableTrace", 2), ("disableTrace", 3), ("enableMacSap", 4), ("disableMacSap", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: lapbdMacSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapControl.setDescription('Permits control of a specific MAC SAP (service access point). Options: clearStats (1): Clear all statistics stored by lapbdMacSap statistics objects. enableTrace (2): Display LAPB/D protocol data on the console. disableTrace (3):Do not display LAPB/D protocol data on the console. enableMacSap (4): Forces the LAPB link to issue a SABM frame. disableMacSap (5): Forces the LAPB link to issue a DISC frame. Default Value: none Configuration Changed: administrative and operative')
lapbdMacSapHighLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unbound", 1), ("configured", 2), ("bound", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapHighLevelState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapHighLevelState.setDescription('Indicates the current state of this MAC SAP (service access point). Options: unbound (1): Initial state when the SAP is added. configured (2): The layer manager has configured the SAP. bound (3):Fully-functional MAC SAP.')
lapbdMacSapFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flowNormal", 1), ("flowStopped", 2), ("noFlow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapFlowControlState.setDescription('Indicates the status of flow control on this MAC SAP (service access point). Flow control is initiated by this MAC SAP when overall system resources drop lower than the percentage specified by the global object lapbdLowerPoolThreshold, and is terminated when the overall system resources exceed the percentage specified by the global object lapbdUpperPoolThreshold. Options: flowNormal (1): Data flow is normal. No flow control procedures are active. flowStopped (2): Flow control procedures are active, since overall system resources have dropped lower than the percentage specified by global object lapbdLowerPoolThreshold. noFlow (3): Indicates this SAP is configured incorrectly. Related Objects: lapbdLowerPoolThreshold lapbdUpperPoolThreshold')
lapbdMacSapOutstandingFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapOutstandingFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapOutstandingFrames.setDescription('Indicates the current number of outstanding frames to the sub-layer. The object lapbdMacSapWindow defines the maximum number of frames that can be outstanding.')
lapbdMacSapTotalFramesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTotalFramesDropped.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTotalFramesDropped.setDescription('Indicates the number of frames dropped by this MAC service access point, which may be due to an internal problem between the MAC layer and the sub-layer it is communicating with. This does not indicate a problem with the data link connection.')
lapbdMacSapActiveSaps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapActiveSaps.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapActiveSaps.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Indicates the number of active data link SAPs (service access points) associated with this MAC SAP. Currently this is always set to three. Related Object: lapbdDlSapNumber")
lapbdMacSapTxIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxIFrames.setDescription('Indicates the number of information frames sent from this service access point.')
lapbdMacSapRxIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxIFrames.setDescription('Indicates the number of information frames received at this service access point.')
lapbdMacSapTxRrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxRrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxRrFrames.setDescription('Indicates the number of receive ready (RR) frames sent from this service access point.')
lapbdMacSapRxRrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxRrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxRrFrames.setDescription('Indicates the number of receive ready (RR) frames received by this service access point.')
lapbdMacSapTxRnrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxRnrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxRnrFrames.setDescription('Indicates the number of receive not ready (RNR) frames transmitted by this service access point.')
lapbdMacSapRxRnrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxRnrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxRnrFrames.setDescription('Indicates the number of receive not ready (RNR) frames received by this service access point.')
lapbdMacSapTxRejFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxRejFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxRejFrames.setDescription('Indicates the number of reject (REJ) frames transmitted by this service access point.')
lapbdMacSapRxRejFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxRejFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxRejFrames.setDescription('Indicates the number of reject (REJ) frames received by this service access point.')
lapbdMacSapTxSabmFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxSabmFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxSabmFrames.setDescription('Indicates the number of set asynchronous balanced mode (SABM) frames transmitted by this service access point.')
lapbdMacSapRxSabmFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxSabmFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxSabmFrames.setDescription('Indicates the number of set asynchronous balanced mode (SABM) frames received by this service access point.')
lapbdMacSapTxDiscFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxDiscFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxDiscFrames.setDescription('Indicates the number of disconnect (DISC) frames sent from this service access point.')
lapbdMacSapRxDiscFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxDiscFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxDiscFrames.setDescription('Indicates the number of disconnect (DISC) frames transmitted by this service access point.')
lapbdMacSapTxUaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxUaFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxUaFrames.setDescription('Indicates the number of unnumbered acknowledgment (UA) frames sent from this service access point.')
lapbdMacSapRxUaFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxUaFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxUaFrames.setDescription('Indicates the number of unnumbered acknowledgment (UA) frames received by this service access point.')
lapbdMacSapTxDmFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxDmFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxDmFrames.setDescription('Indicates the number of disconnected mode (DM) frames transmitted by this service access point.')
lapbdMacSapRxDmFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxDmFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxDmFrames.setDescription('Indicates the number of disconnected mode (DM) frames received by this service access point.')
lapbdMacSapTxFrmrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxFrmrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxFrmrFrames.setDescription('Indicates the number of frame reject (FRMR) frames transmitted by this service access point.')
lapbdMacSapRxFrmrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxFrmrFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxFrmrFrames.setDescription('Indicates the number of frame reject (FRMR) frames received by this service access point.')
lapbdMacSapTxUiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxUiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxUiFrames.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Indicates the number of unnumbered information (UI) frames transmitted by this service access point.")
lapbdMacSapRxUiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxUiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxUiFrames.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Indicates the number of unnumbered information (UI) frames received by this service access point.")
lapbdMacSapTxXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapTxXidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapTxXidFrames.setDescription('Indicates the number of XID frames transmitted by this service access point.')
lapbdMacSapRxXidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxXidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxXidFrames.setDescription('Indicates the number of XID frames received by this service access point.')
lapbdMacSapRxInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxInvalidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxInvalidFrames.setDescription('Indicates the number of invalid frames received by this service access point.')
lapbdMacSapRxInvalidDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapRxInvalidDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapRxInvalidDiscards.setDescription('Indicates the number of frames received at this service access point which were marked as being received in error, and subsequently dropped. The errors covered by this statistic are line reception errors such as: - aborted frames - frames received with a bad CRC - frames that were overrun - frames with non-integral number of bits - frames that are too long')
lapbdMacSapSabmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapSabmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapSabmErrors.setDescription('Indicates the number of set asynchronous balanced mode errors that occurred at this service access point.')
lapbdMacSapFrmrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 20, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdMacSapFrmrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdMacSapFrmrErrors.setDescription('Indicates the number of frame reject errors that occurred at this service access point.')
lapbdDlSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21), )
if mibBuilder.loadTexts: lapbdDlSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapTable.setDescription('A table containing configuration information about each data link SAP (service access point). Data link SAPs exist at the upper layer of the LAPB/D interface and are automatically created when a lower SAP is created. For lower SAPs of type LAPB, one upper SAP is created. For lowers SAPs of type LAPD, three upper SAPs are created (see object lapbdDlSapNumber)')
lapbdDlSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1), ).setIndexNames((0, "CXLapBD-MIB", "lapbdDlSapMacSapNumber"), (0, "CXLapBD-MIB", "lapbdDlSapNumber"))
if mibBuilder.loadTexts: lapbdDlSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapEntry.setDescription('The parameters for a specific data link service access point.')
lapbdDlSapMacSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlSapMacSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapMacSapNumber.setDescription('Identifies the MAC (lower) service access point this entry is associated with.')
lapbdDlSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 2), Sapi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapNumber.setDescription("Identifies the data link service access point by a unique numerical value, commonly referred to as the SAPI (service access point identifier). The SAPI identifies the type of protocol that is supported by this SAP. It is a LAPD concept which permits the multiplexing of different types of traffic on the same TEI. When LAPD service is selected (object lapbdMacSapLapType set to value 'lapd'), and a row is added to the lapbdSapTable, three data link SAPs are automatically created with following SAPI values: 0, 16, 63 SAPI is not used within LAPB, and as a result when LAPB service is selected (object lapbdMacSapLapType value 'lapb'), and a row is added to the lapbdSapTable, only one data link SAP with the value 16 (X.25) is automatically created. Options: 0: This SAP is associated with ISDN B- channel call control procedures. 16: This SAP is associated with X.25 over ISDN. 63: This SAP is associated with ISDN management procedures. Related Objects: lapbdMacSapLapType")
lapbdDlSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapAlias.setDescription('The textual name that identifies this SAP (service access point). A name is not required. Range of Values: 1 -16 alphanumeric characters (first character must be a letter) Default Value: none Configuration Changed: administrative')
lapbdDlSapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)).clone(1380)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapMaxFrameSize.setReference('(N1-LAPB)/ (N201-LAPD)')
if mibBuilder.loadTexts: lapbdDlSapMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapMaxFrameSize.setDescription("Determines the maximum size of the LAPB/D information field supported by this SAP. In other words, it is the maximum number of bytes that can be passed through this SAP in either direction (to upper or lower layers). Setting lapbdMacSapLapbProtocolFlavour to 'v8022' forces this object to '265'. Range of Values: 0 - 4095 Default Value: LAPB = 1380, LAPD = 260 Related Objects: lapbdMacSapLapbProtocolFlavor Configuration Changed: administrative and operative")
lapbdDlSapWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapWindowSize.setReference('(K)')
if mibBuilder.loadTexts: lapbdDlSapWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapWindowSize.setDescription("Determines the maximum number of information frames that can be outstanding at any given time (window size). A frame is considered to be outstanding until the other side acknowledges its receipt. This object supports modulo 8 and modulo 128 service. Setting lapbdMacSapLapbProtocolFlavour to 'v8022' forces lapbdDlSapModulo to 'modulo 128', which affects the maximum setting that can be made to this object. Range of Values: 1 - 7 if object lapbdDlSapModulo is set to modulo8 1 - 127 if object lapbdDlSapModulo is set to modulo128 Default Value: LAPB = 7, LAPD = 7 Related Objects: lapbdDlSapModulo lapbdMacSapLapbProtocolFlavour Configuration Changed: administrative and operative")
lapbdDlSapMaxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapMaxRetransmissions.setReference('(N2-LAPB)/ (N200-LAPD)')
if mibBuilder.loadTexts: lapbdDlSapMaxRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapMaxRetransmissions.setDescription('Determines the maximum number of attempts made to successfully transfer a command frame (error recovery) after the acknowledgment timer (lapbdDlSapT1T200Timer) expires. Known as N2. Default Value: LAPB = 5, LAPD = 3 Default Value: 5 Related Objects: lapbdDlSapT1T200Timer Configuration Changed: administrative and operative')
lapbdDlSapCongestionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapCongestionTimer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapCongestionTimer.setDescription('Determines the maximum amount of time LAPB/D waits for the link to become uncongested before it terminates the link. This timer is started when the number of frames queued for a data link connection associated with this service access point (lapbdDlcTxQSize) reaches the congestion threshold (lapbdMacSapTxQUpperThreshold). This timer is stopped when the number of frames queued for a data link connection (lapbdDlcTxQSize) reaches the congestion minimum (lapbdMacSapTxQLowerThreshold). If this timer expires, the data link connection is terminated. Range of Values: 0 - 2047 (in tenths of a second) Default Value: LAPB = 1000 (100 seconds) LAPD = 1000 (100 seconds) Related Objects: lapbdDlcTxQSize lapbdMacSapTxQUpperThreshold lapbdMacSapTxQLowerThreshold Configuration Changed: administrative and operative')
lapbdDlSapT1T200Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapT1T200Timer.setReference('(T1-LAPB)/ (T200-LAPD)')
if mibBuilder.loadTexts: lapbdDlSapT1T200Timer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapT1T200Timer.setDescription('Determines how long this SAP waits for a response to a command frame before initiating error recovery. Known as the checkpoint timer (T1). The value set for this object must be smaller than the value set for object lapbdDlSapT3T203Timer. Range of Values: 1 -2047 (in tenths of a second) Default Value: LAPB = 20 (2 seconds), LAPD = 10 (1 second) Related Objects: lapbdDlSapMaxRetransmissions lapbdDlSapT3T203Timer Configuration Changed: administrative and operative')
lapbdDlSapT2Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapT2Timer.setReference('(T2-LAPB)')
if mibBuilder.loadTexts: lapbdDlSapT2Timer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapT2Timer.setDescription("This object applies only to LAPB (object lapbdMacSapLapType set to 'lapb'). Determines the period of time (T1)within which this SAP must acknowledge a frame it has received. This timer must always be less than the setting for T1 timer on the remote side. Otherwise, the remote side will time out before this SAP can respond. Range of Values: 1 - 2047 (in tenths of a second) Default Value: LAPB = 10 (1 second), LAPD = 0 seconds Related Objects: lapbdDlSapT1T200Timer Configuration Changed: administrative and operative")
lapbdDlSapT3T203Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapT3T203Timer.setReference('(T3-LAPB)/ (T203-LAPD)')
if mibBuilder.loadTexts: lapbdDlSapT3T203Timer.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapT3T203Timer.setDescription('Determines the maximum time this SAP will allow the link to remain idle (no frames exchanged) before sending an RR poll to the other side. Known as idle probe timer (T3). Range of Values: 1 - 2047 (in tenths of a second) Default Value: LAPB = 200 (20 seconds), LAPD = 200 (20 seconds) Configuration Changed: administrative and operative')
lapbdDlSapModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapModulo.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapModulo.setDescription("Determines the range of sequence numbers available for frame numbering at this SAP (service access point). The modulo limits the size of the window that can be set (lapbdDlSapWindowSize). Setting lapbdMacSapLapbProtocolFlavour to 'v8022' forces this object to 'modulo 128'. Options: modulo8 (1): Sequence numbers range from 0 to 7 supporting a maximum window size of 7. modulo128 (2): Sequence numbers range from 0 to 128 supporting a maximum window size of 127. Default Value: LAPB = modulo8 (1), LAPD = modulo128 (2) Related Objects: lapbdDlSapWindowSize lapbdMacSapLapbProtocolFlavour Configuration Changed: administrative and operative")
lapbdDlSapMaxDlcs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapMaxDlcs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapMaxDlcs.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Determines the maximum number of data link connections supported at this service access point. Related Object: lapbdMacSapLapType Default Value: LAPB = 1, LAPD = 1 Configuration Changed: administrative")
lapbdDlSapTeiAssignmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonAutomatic", 1), ("automatic", 2))).clone('automatic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdDlSapTeiAssignmentMode.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapTeiAssignmentMode.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Determines the TEI assignment mode used by this service access point. Each data link service access point can be configured as either 'automatic' or 'non-Automatic' (static) even if assigned to the same MAC sap. Options: nonAutomatic (1): TEIs are not automatically assigned by the ASP (assignment source point). automatic (2): TEIs are automatically assigned. Default Value: LAPB = automatic (2), LAPD = automatic (2) Related Objects: lapbdMacSapLapType Configuration Changed: administrative")
lapbdDlSapHighLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unbound", 1), ("configured", 2), ("bound", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlSapHighLevelState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapHighLevelState.setDescription('Indicates the current state of this SAP (service access point). Options: unbound (1): Initial state when the SAP is added. configured (2): The layer manager has configured the SAP. bound (3):Fully-functional data link SAP.')
lapbdDlSapActiveDlcs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 21, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlSapActiveDlcs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlSapActiveDlcs.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Indicates the current number of active data link connections at this SAP (service access point).")
lapbdTeiTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 22), )
if mibBuilder.loadTexts: lapbdTeiTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTeiTable.setDescription('A table containing Terminal Endpoint Identifiers (TEIs) which are to be assigned to identify data link connections. A TEI is used to identify a specific connection endpoint within a data link service access point (identified by its SAPI), at a specific MAC (lower) sap. TEIs are assigned by the network equipment if the user equipment is configured for automatic TEI assignment, or are entered into the user equipment if the user equipment is configured for non-automatic (static) TEI assignment.')
lapbdTeiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 22, 1), ).setIndexNames((0, "CXLapBD-MIB", "lapbdTeiMacSapNumber"), (0, "CXLapBD-MIB", "lapbdTeiSapi"), (0, "CXLapBD-MIB", "lapbdTeiNumber"))
if mibBuilder.loadTexts: lapbdTeiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTeiEntry.setDescription('Determines the settings for a single TEI to be assigned to a data link connected at a specific data link service access point, which exists at a specific MAC (lower) SAP.')
lapbdTeiMacSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 22, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdTeiMacSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTeiMacSapNumber.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Identifies the MAC service access point (lapbdMacSapNumber ) this entry is associated with.")
lapbdTeiSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 22, 1, 2), Sapi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdTeiSapi.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTeiSapi.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Identifies the data link service access point (lapbdDlSapNumber ) this entry is associated with.")
lapbdTeiNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 22, 1, 3), Tei()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdTeiNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTeiNumber.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Identifies the TEI value assigned for use at the data link service access point identified by object lapbdTeiSapi, which exists at the MAC service access point identified by object lapbdTeiMacSapNumber.")
lapbdTeiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 22, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lapbdTeiRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdTeiRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default: valid (2) Configuration Changed: administrative and operative')
lapbdDlcStatusTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23), )
if mibBuilder.loadTexts: lapbdDlcStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcStatusTable.setDescription('A table containing status information for each existing data link connection.')
lapbdDlcStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1), ).setIndexNames((0, "CXLapBD-MIB", "lapbdDlcMacSapNumber"), (0, "CXLapBD-MIB", "lapbdDlcSapi"), (0, "CXLapBD-MIB", "lapbdDlcTei"))
if mibBuilder.loadTexts: lapbdDlcStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcStatusEntry.setDescription('The status of a specific data link connection at a specific data link service access point, which exists at a specific MAC service access point.')
lapbdDlcMacSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcMacSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcMacSapNumber.setDescription('Identifies the MAC service access point (lower SAP) this entry is associated with.')
lapbdDlcSapi = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 2), Sapi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcSapi.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcSapi.setDescription('Identifies the data link service access point (upper SAP) this entry is associated with.')
lapbdDlcTei = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 3), Tei()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcTei.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcTei.setDescription("This object applies only to LAPD (object lapbdMacSapLapType set to 'lapd'). Identifies the TEI value (lapbdTeiNumber) this entry is associated with. ")
lapbdDlcLinkLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("disconnectedDisabled", 1), ("connectingLinkLevel", 2), ("dataTransfer", 3), ("disconnectingLinkLevel", 4), ("connectingAwaitingTei", 5), ("resettingLinkLevelEnabled", 6), ("resettingLinkLevelDisabled", 7), ("frameRejection", 8), ("disconnectedEnabled", 9), ("assignAwaitingTei", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcLinkLevelState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcLinkLevelState.setDescription('Indicates the current link level state at this data link connection. Options: disconnectedDisabled (1): LAPB/D is disconnected and has not yet received a connection request for this link from an upper layer. connectingLinkLevel (2): Attempting to establish the link layer. dataTransfer (3): In data transfer mode (LAPD only). disconnectingLinkLevel (4): The link is being disconnected. connectingAwaitingTei (5): Waiting for TEI assignments to be completed. (LAPD) resettingLinkLevelEnabled (6): Resetting the link for an active connection. resettingLinkLevelDisabled (7): Resetting the link for which no connection request was received. frameRejection (8): A frame was rejected. disconnectedEnabled (9): Applies only if the link is configured as passive (lapbdMacSapAbritrationLogic). Indicates that a connection request was received from an upper layer, but the remote side has not yet initiated the link. assignAwaitingTei (10): Waiting for TEI assignments to be completed. (LAPD)')
lapbdDlcNextTxNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcNextTxNs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcNextTxNs.setDescription('Indicates the value of the next N(s) to send on this data link connection.')
lapbdDlcNextRxNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcNextRxNs.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcNextRxNs.setDescription('Indicates the value of the next N(s) expected by this data link connection.')
lapbdDlcRetransmissionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcRetransmissionCount.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcRetransmissionCount.setDescription('Indicates the number of times the current command frame has been transmitted. The value for this object will be greater than 1 when retransmission of a frame is in progress (i.e., the lapbdDlSapT1T200Timer has expired). Related Objects: lapbdDlSapMaxRetransmissions lapbdDlSapT1T200Timer')
lapbdDlcLocalFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("localFlowNormal", 1), ("localFlowStopped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcLocalFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcLocalFlowControlState.setDescription('Indicates the status of flow control on this MAC SAP (service access point). Same as lapbMacSapFlowControlState. Flow control is initiated by this MAC SAP when overall system resources drop lower than the percentage specified by the global object lapbdLowerPoolThreshold, and is terminated when the overall system resources exceed the percentage specified by the global object lapbdUpperPoolThreshold. Options: localflowNormal (1): Data flow is normal. No flow control procedures are active. localflowStopped (2): Flow control procedures are active, since overall system resources have dropped lower than the percentage specified by global object lapbdLowerPoolThreshold. noFlow (3): Indicates this SAP is configured incorrectly. Related Objects: lapbdLowerPoolThreshold lapbdUpperPoolThreshold lapbMacSapFlowControlState')
lapbdDlcRemoteFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteFlowNormal", 1), ("remoteFlowStopped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcRemoteFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcRemoteFlowControlState.setDescription('Indicates the status of flow control on the remote side of the link. Options: remoteFlowNormal (1): Data flow is normal. No flow control procedures are active. remoteFlowStopped (2): Flow control procedures are active.')
lapbdDlcMacTxFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flowNormal", 1), ("flowStopped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcMacTxFlowControlState.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcMacTxFlowControlState.setDescription('Indicates the status of data flow on the link. Options: flowNormal(1): The data link connection is operating normally. FlowStopped(2): The data link connection is congested (frames queued for this SAP exceed the value of object lapbdMacSapTxQUpperThreshold), and the data link has initiated flow control procedures (RNRs). If this persists longer than the value of lapbdDlSapCongestionTime, the link is terminated. Flow is terminated when the number of queued frames is less than the value of object lapbdMacSapTxQLowerThreshold. Related Objects: lapbdMacSapTxQLowerThreshold lapbdDlSapCongestionTimer lapbdStatusEvent lapbdDlcTxQueueSize')
lapbdDlcTxQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27, 23, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lapbdDlcTxQSize.setStatus('mandatory')
if mibBuilder.loadTexts: lapbdDlcTxQSize.setDescription('Indicates the number of frames currently in the transmit queue for this data link connection. If the number of frames exceeds lapbdMacSapTxQUpperThreshold, the link is congested and flow control procedures are initiated. If this persists longer than the value of lapbdDlSapCongestionTime, the link is terminated. Flow is terminated when the number of queued frames exceeds the value of object lapbdMacSapTxQUpperThreshold. Related Objects: lapbdMacSapTxQLowerThreshold lapbdDlSapCongestionTimer lapbdStatusEvent lapbdDlcTxFlowControlState')
lapbdStatusIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 27) + (0,1)).setObjects(("CXLapBD-MIB", "lapbdTeiMacSapNumber"), ("CXLapBD-MIB", "lapbdTeiSapi"), ("CXLapBD-MIB", "lapbdTeiNumber"), ("CXLapBD-MIB", "lapbdStatusEvent"))
if mibBuilder.loadTexts: lapbdStatusIndication.setDescription("Identifies the lapbdStatusEvent trap which has occurred. This trap is only generated when global object lapbdTraps is set to value 'enabled'. Options: lapbdTeiMacSapNumber: The MAC service access point this trap applies to. lapbdTeiSapi: TheSAPI number this trap applies to. lapbdTeiNumber: The TEI number this trap applies to. lapbdStatusEvent: The event which triggered the trap (lapbdStatusEvent).")
mibBuilder.exportSymbols("CXLapBD-MIB", lapbdDlSapT2Timer=lapbdDlSapT2Timer, lapbdMacSapRxFrmrFrames=lapbdMacSapRxFrmrFrames, lapbdMacSapEntry=lapbdMacSapEntry, lapbdMacSapCompanionAlias=lapbdMacSapCompanionAlias, lapbdDlcRemoteFlowControlState=lapbdDlcRemoteFlowControlState, lapbdMacSapActiveSaps=lapbdMacSapActiveSaps, lapbdDlSapNumber=lapbdDlSapNumber, Sapi=Sapi, lapbdMacSapLapType=lapbdMacSapLapType, lapbdMacSapRxRejFrames=lapbdMacSapRxRejFrames, lapbdMacSapTxDiscFrames=lapbdMacSapTxDiscFrames, lapbdDlcNextRxNs=lapbdDlcNextRxNs, lapbdDlcTxQSize=lapbdDlcTxQSize, lapbdMacSapLapDProtocolFlavor=lapbdMacSapLapDProtocolFlavor, lapbdDlSapTable=lapbdDlSapTable, lapbdMacSapLapBProtocolFlavor=lapbdMacSapLapBProtocolFlavor, lapbdMacSapRxDmFrames=lapbdMacSapRxDmFrames, lapbdMacSapTxFrmrFrames=lapbdMacSapTxFrmrFrames, lapbdMacSapTxRrFrames=lapbdMacSapTxRrFrames, lapbdDlcLocalFlowControlState=lapbdDlcLocalFlowControlState, lapbdMacSapFrmrErrors=lapbdMacSapFrmrErrors, lapbdMacSapTxXidFrames=lapbdMacSapTxXidFrames, lapbdDlSapAlias=lapbdDlSapAlias, lapbdMacSapTeiCheckTimer=lapbdMacSapTeiCheckTimer, lapbdDlcMacTxFlowControlState=lapbdDlcMacTxFlowControlState, lapbdDlSapMaxFrameSize=lapbdDlSapMaxFrameSize, lapbdDlSapT3T203Timer=lapbdDlSapT3T203Timer, lapbdStatusIndication=lapbdStatusIndication, lapbdMacSapTxQLowerThreshold=lapbdMacSapTxQLowerThreshold, lapbdMacSapWindow=lapbdMacSapWindow, lapbdDlSapWindowSize=lapbdDlSapWindowSize, lapbdDlSapModulo=lapbdDlSapModulo, lapbdMacSapRxXidFrames=lapbdMacSapRxXidFrames, lapbdDlcMacSapNumber=lapbdDlcMacSapNumber, lapbdTraps=lapbdTraps, lapbdLowerPoolThreshold=lapbdLowerPoolThreshold, lapbdTeiSapi=lapbdTeiSapi, lapbdTraceSize=lapbdTraceSize, lapbdMacSapAlias=lapbdMacSapAlias, Tei=Tei, lapbdMacSapRxIFrames=lapbdMacSapRxIFrames, lapbdMacSapRxInvalidDiscards=lapbdMacSapRxInvalidDiscards, lapbdMacSapRxInvalidFrames=lapbdMacSapRxInvalidFrames, lapbdTeiRowStatus=lapbdTeiRowStatus, lapbdDlcRetransmissionCount=lapbdDlcRetransmissionCount, lapbdDlcNextTxNs=lapbdDlcNextTxNs, lapbdDlcStatusEntry=lapbdDlcStatusEntry, lapbdUpperPoolThreshold=lapbdUpperPoolThreshold, lapbdDlcSapi=lapbdDlcSapi, lapbdDlSapActiveDlcs=lapbdDlSapActiveDlcs, lapbdTeiMacSapNumber=lapbdTeiMacSapNumber, lapbdMacSapRxRnrFrames=lapbdMacSapRxRnrFrames, lapbdMacSapTxUiFrames=lapbdMacSapTxUiFrames, lapbdMacSapTxDmFrames=lapbdMacSapTxDmFrames, lapbdTeiNumber=lapbdTeiNumber, lapbdMacSapTxQUpperThreshold=lapbdMacSapTxQUpperThreshold, lapbdDlSapT1T200Timer=lapbdDlSapT1T200Timer, lapbdSoftwareVersions=lapbdSoftwareVersions, lapbdMacSapOutstandingFrames=lapbdMacSapOutstandingFrames, lapbdDlSapMaxDlcs=lapbdDlSapMaxDlcs, lapbdMacSapControl=lapbdMacSapControl, lapbdDlSapHighLevelState=lapbdDlSapHighLevelState, lapbdDlcStatusTable=lapbdDlcStatusTable, lapbdMacSapConnectionTimer=lapbdMacSapConnectionTimer, lapbdMacSapRxUiFrames=lapbdMacSapRxUiFrames, lapbdStatusEvent=lapbdStatusEvent, lapbdMacSapTxRnrFrames=lapbdMacSapTxRnrFrames, lapbdMacSapTable=lapbdMacSapTable, lapbdMacSapT201Timer=lapbdMacSapT201Timer, lapbdMacSapTxIFrames=lapbdMacSapTxIFrames, lapbdDlSapMacSapNumber=lapbdDlSapMacSapNumber, lapbdMacSapRxDiscFrames=lapbdMacSapRxDiscFrames, lapbdDlcLinkLevelState=lapbdDlcLinkLevelState, lapbdMacSapN202Counter=lapbdMacSapN202Counter, lapbdMacSapNumber=lapbdMacSapNumber, lapbdTeiEntry=lapbdTeiEntry, lapbdMacSapRxRrFrames=lapbdMacSapRxRrFrames, lapbdMacSapRowStatus=lapbdMacSapRowStatus, lapbdTeiTable=lapbdTeiTable, lapbdMacSapKeepL1Up=lapbdMacSapKeepL1Up, lapbdMacSapLogicalInterfaceType=lapbdMacSapLogicalInterfaceType, lapbdMacSapHighLevelState=lapbdMacSapHighLevelState, lapbdMacSapFlowControlState=lapbdMacSapFlowControlState, lapbdDlSapCongestionTimer=lapbdDlSapCongestionTimer, lapbdMacSapArbitrationLogic=lapbdMacSapArbitrationLogic, lapbdMacSapTotalFramesDropped=lapbdMacSapTotalFramesDropped, lapbdMacSapRxUaFrames=lapbdMacSapRxUaFrames, lapbdMacSapT202Timer=lapbdMacSapT202Timer, lapbdMacSapLowTei=lapbdMacSapLowTei, lapbdMacSapTxUaFrames=lapbdMacSapTxUaFrames, lapbdDlcTei=lapbdDlcTei, lapbdMacSapSabmErrors=lapbdMacSapSabmErrors, lapbdMacSapTxRejFrames=lapbdMacSapTxRejFrames, lapbdMacSapRxSabmFrames=lapbdMacSapRxSabmFrames, lapbdDlSapMaxRetransmissions=lapbdDlSapMaxRetransmissions, lapbdDlSapEntry=lapbdDlSapEntry, lapbdMacSapTxSabmFrames=lapbdMacSapTxSabmFrames, lapbdDlSapTeiAssignmentMode=lapbdDlSapTeiAssignmentMode, lapbdTraceFlags=lapbdTraceFlags)
