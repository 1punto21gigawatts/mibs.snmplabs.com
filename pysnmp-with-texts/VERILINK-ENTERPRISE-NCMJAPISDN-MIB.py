#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMJAPISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMJAPISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, TimeTicks, Unsigned32, MibIdentifier, ModuleIdentity, NotificationType, Gauge32, ObjectIdentity, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "TimeTicks", "Unsigned32", "MibIdentifier", "ModuleIdentity", "NotificationType", "Gauge32", "ObjectIdentity", "iso", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_japisdn, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-japisdn")
ncmJapPRIPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000), )
if mibBuilder.loadTexts: ncmJapPRIPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortConfigTable.setDescription('The Japanese PRI Port Configuration table .')
ncmJapPRIPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRIPortNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRIPortLineIndex"))
if mibBuilder.loadTexts: ncmJapPRIPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortConfigEntry.setDescription('An entry in the Japanese PRI Port Configuration table .')
ncmJapPRIPortNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIPortNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortNIDIndex.setDescription('The object specifies the node id of the node.')
ncmJapPRIPortLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIPortLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRIPortInService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortInService.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortInService.setDescription('The object specifies whether the PRI Port is in service or not.')
ncmJapPRIPortNFASMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-Nfas", 1), ("nfas-No-Backup", 2), ("nfas-Backup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortNFASMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortNFASMode.setDescription('The variable specifies the pri NFAS mode.')
ncmJapPRIPortDChanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortDChanMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortDChanMode.setDescription('The variable specifies the pri D-channel mode.')
ncmJapPRIPortDChanBits = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("chan-8-Bit", 1), ("chan-7-Bit", 2), ("chan-6-Bit", 3), ("undefined", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortDChanBits.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortDChanBits.setDescription('The variable specifies the pri D-channel bits.')
ncmJapPRIPortTimeslotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortTimeslotMap.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortTimeslotMap.setDescription('The variable specifies the timeslot map.')
ncmJapPRIPortSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15))).clone(namedValues=NamedValues(("sw-NTT", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortSwitchType.setDescription('The variable specifies the pri switch type.')
ncmJapPRIPortOwnNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unkn-NumPlan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortOwnNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortOwnNumPlan.setDescription('The variable specifies the pri own numbering plan.')
ncmJapPRIPortOwnNumType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unkn-NumType", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortOwnNumType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortOwnNumType.setDescription('The variable specifies the pri own numbering type.')
ncmJapPRIPortSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-Checks", 1), ("own-Numbers", 2), ("ext-Numbers", 3), ("both-Numbers", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortSecurityLevel.setDescription('The variable specifies the fdl mode which is bit 0 of fdl Parameter1.')
ncmJapPRIPortConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIPortConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortConfigStatus.setDescription('The variable specifies the configuration result.')
ncmJapPRIPortSetConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-Config", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIPortSetConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIPortSetConfig.setDescription('The set configuration operation that involves sending out the ACP message to set the configuration with the setup parameters')
ncmJapPRICallProfCallRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICallProfCallRefCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfCallRefCount.setDescription('The variable specifies the number of valid call reference numbers')
ncmJapPRIL2AutoEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRIL2AutoEstablish.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIL2AutoEstablish.setDescription('The object specifies whether the PRI Port has an Auto establishment for Layer-2 or not.')
ncmJapPRICallProfileTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001), )
if mibBuilder.loadTexts: ncmJapPRICallProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfileTable.setDescription('The PRI Call Profile table .')
ncmJapPRICallProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICallProfNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICallProfLineIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICPCallProfileRef"))
if mibBuilder.loadTexts: ncmJapPRICallProfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfEntry.setDescription('An entry in the PRI Call Profile table .')
ncmJapPRICallProfNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICallProfNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfNIDIndex.setDescription('The object specifies the node id of the node.')
ncmJapPRICallProfLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICallProfLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRICPCallProfileRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICPCallProfileRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPCallProfileRef.setDescription('The variable specifies the number of the call profile in the list (starting from one, then two and so on).')
ncmJapPRICallProfCallDir = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-Direction", 1), ("incoming", 2), ("outgoing", 3), ("both-Directions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfCallDir.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfCallDir.setDescription('The variable specifies the call direction.')
ncmJapPRICallProfNumOwnDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfNumOwnDigit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfNumOwnDigit.setDescription('The variable specifies the number of own digits.')
ncmJapPRICallProfOwnCallNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfOwnCallNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfOwnCallNum.setDescription('The variable specifies the own call number.')
ncmJapPRICallProfExtNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unkn-NumPlan", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfExtNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfExtNumPlan.setDescription('The variable specifies the external numbering plan.')
ncmJapPRICallProfExtNumType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unkn-NumType", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfExtNumType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfExtNumType.setDescription('The variable specifies the external numbering type.')
ncmJapPRICallProfExtNumDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfExtNumDigit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfExtNumDigit.setDescription('The variable specifies the external number of digits.')
ncmJapPRICallProfExtCallNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfExtCallNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfExtCallNum.setDescription('The variable specifies the external call number.')
ncmJapPRICallProfTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("unrestricted-digital", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfTransferMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfTransferMode.setDescription('The variable specifies the transfer mode.')
ncmJapPRICallProfCallBandWth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 19, 21))).clone(namedValues=NamedValues(("b1-64K", 16), ("h0-6X64K", 19), ("h11-24X64K", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfCallBandWth.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfCallBandWth.setDescription('The variable specifies the call bandwidth.')
ncmJapPRICallProfMultiRateCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 12, 23, 24, 30, 31))).clone(namedValues=NamedValues(("mR-2", 2), ("mR-4", 4), ("mR-6", 6), ("mR-8", 8), ("mR-12", 12), ("mR-23", 23), ("mR-24", 24), ("mR-30", 30), ("mR-31", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfMultiRateCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfMultiRateCnt.setDescription('The variable specifies the multirate count. Not use for the time being.')
ncmJapPRICallProfRateAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-Adapt", 1), ("adapt-56K", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfRateAdaptn.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfRateAdaptn.setDescription('The variable specifies the rate adaptation.')
ncmJapPRICallProfTestCallIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfTestCallIntvl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfTestCallIntvl.setDescription('The variable specifies the test call interval.')
ncmJapPRICallProfCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fail-Takedown-Idle", 1), ("successful-Setup", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICallProfCallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfCallStatus.setDescription('The variable specifies the get call profile call status.')
ncmJapPRICallProfCallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setup-Call", 1), ("takedown-Call", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICallProfCallAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfCallAction.setDescription('The variable specifies the call profile call action.')
ncmJapPRICPSetCallProf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-CallProf", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICPSetCallProf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPSetCallProf.setDescription('The variable specifies the call profile call action.')
ncmJapPRICPSetCallProfResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICPSetCallProfResp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPSetCallProfResp.setDescription('The variable specifies the set call profile result')
ncmJapPRICPCallActionResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8001, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICPCallActionResp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPCallActionResp.setDescription('The variable specifies the call action result')
ncmJapPRICallProfListTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8002), )
if mibBuilder.loadTexts: ncmJapPRICallProfListTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfListTable.setDescription('The PRI Call Profile List table .')
ncmJapPRICallProfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICPListNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICPListLineIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICPListIndex"))
if mibBuilder.loadTexts: ncmJapPRICallProfListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallProfListEntry.setDescription('An entry in the PRI Call Profile List table .')
ncmJapPRICPListNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICPListNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPListNIDIndex.setDescription('The object specifies the node id of the node of the call profile list group.')
ncmJapPRICPListLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8002, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICPListLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPListLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRICPListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8002, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICPListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPListIndex.setDescription('The call profile list call reference index.')
ncmJapPRICPListValidCPRefNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8002, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICPListValidCPRefNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICPListValidCPRefNum.setDescription('The variable is the valid call reference number.')
ncmJapPRICurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003), )
if mibBuilder.loadTexts: ncmJapPRICurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrentTable.setDescription('The PRI Current Interval table .')
ncmJapPRICurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICurrNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICurrLineIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICurrEndType"))
if mibBuilder.loadTexts: ncmJapPRICurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrentEntry.setDescription('An entry in the PRI Current Interval table .')
ncmJapPRICurrNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrNIDIndex.setDescription('The object specifies the node id of the node.')
ncmJapPRICurrLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRICurrEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrEndType.setDescription('The variable specifies the End Type .')
ncmJapPRICurrTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrTimestamp.setDescription('The object specifies the timestamp in seconds.')
ncmJapPRICurrSecsInCurrIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrSecsInCurrIntvl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrSecsInCurrIntvl.setDescription('The object specifies the seconds in current interval.')
ncmJapPRICurrInfoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrInfoRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrInfoRx.setDescription('The object specifies the current INFOs received.')
ncmJapPRICurrInfoTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrInfoTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrInfoTx.setDescription('The object specifies the current INFOs transmitted.')
ncmJapPRICurrCRCErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrCRCErrRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrCRCErrRx.setDescription('The object specifies the current CRC errors received.')
ncmJapPRICurrInvalidFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrInvalidFrameRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrInvalidFrameRx.setDescription('The object specifies the current invalid frames received.')
ncmJapPRICurrFrameAbortRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrFrameAbortRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrFrameAbortRx.setDescription('The object specifies the current frame aborts received.')
ncmJapPRICurrDISCSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrDISCSRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrDISCSRx.setDescription('The object specifies the current DISCs received.')
ncmJapPRICurrDISCSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrDISCSTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrDISCSTx.setDescription('The object specifies the current DISCs transmitted.')
ncmJapPRICurrFramerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrFramerRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrFramerRx.setDescription('The object specifies the current framer received.')
ncmJapPRICurrFramerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrFramerTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrFramerTx.setDescription('The object specifies the current framer transmitted.')
ncmJapPRICurrLyr3ProtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrLyr3ProtErr.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrLyr3ProtErr.setDescription('The object specifies the current Layer 3 protocol errors.')
ncmJapPRICurrCallSetupSent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupSent.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupSent.setDescription('The object specifies the current call setup sent.')
ncmJapPRICurrCallSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupSentnFail.setDescription('The object specifies the current call setup sent and failed.')
ncmJapPRICurrCallSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupRx.setDescription('The object specifies the current call setup received.')
ncmJapPRICurrCallSetupRxnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupRxnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrCallSetupRxnFail.setDescription('The object specifies the current call setup received and failed.')
ncmJapPRICurrUnSupportMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrUnSupportMsgRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrUnSupportMsgRx.setDescription('The object specifies the current unsupported message received.')
ncmJapPRICurrTstCalSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrTstCalSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrTstCalSetupSentnFail.setDescription('The object specifies the current test call setups sent and failed.')
ncmJapPRICurrValidIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICurrValidIntvls.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrValidIntvls.setDescription('A number between 1 and 96')
ncmJapPRICurrStatisticReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8003, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("statistic-Reset", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRICurrStatisticReset.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICurrStatisticReset.setDescription('The variable specifies the statistic reset operation.')
ncmJapPRIIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004), )
if mibBuilder.loadTexts: ncmJapPRIIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIIntervalTable.setDescription('The PRI Interval table .')
ncmJapPRIIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRIntvlNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRIntvlLineIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRIntvlEndType"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRIntvlIndex"))
if mibBuilder.loadTexts: ncmJapPRIIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIIntervalEntry.setDescription('An entry in the PRI Interval table .')
ncmJapPRIntvlNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlNIDIndex.setDescription('The object specifies the node id of the node.')
ncmJapPRIntvlLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRIntvlEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlEndType.setDescription('The variable specifies the End Type .')
ncmJapPRIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlIndex.setDescription('The interval index.')
ncmJapPRIntvlTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlTimestamp.setDescription('The object specifies the interval timestamp in seconds.')
ncmJapPRIntvlSecsInCurrIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlSecsInCurrIntvl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlSecsInCurrIntvl.setDescription('The object specifies the interval seconds in current interval.')
ncmJapPRIntvlInfoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlInfoRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlInfoRx.setDescription('The object specifies the interval INFOs received.')
ncmJapPRIntvlInfoTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlInfoTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlInfoTx.setDescription('The object specifies the interval INFOs transmitted.')
ncmJapPRIntvlCRCErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlCRCErrRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlCRCErrRx.setDescription('The object specifies the interval CRC errors received.')
ncmJapPRIntvlInvalidFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlInvalidFrameRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlInvalidFrameRx.setDescription('The object specifies the interval invalid frames received.')
ncmJapPRIntvlFrameAbortRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlFrameAbortRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlFrameAbortRx.setDescription('The object specifies the interval frame aborts received.')
ncmJapPRIntvlDISCSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlDISCSRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlDISCSRx.setDescription('The object specifies the interval DISCs received.')
ncmJapPRIntvlDISCSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlDISCSTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlDISCSTx.setDescription('The object specifies the interval DISCs transmitted.')
ncmJapPRIntvlFramerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlFramerRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlFramerRx.setDescription('The object specifies the interval framer received.')
ncmJapPRIntvlFramerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlFramerTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlFramerTx.setDescription('The object specifies the interval framer transmitted.')
ncmJapPRIntvlLyr3ProtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlLyr3ProtErr.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlLyr3ProtErr.setDescription('The object specifies the interval Layer 3 protocol errors.')
ncmJapPRIntvlCallSetupSent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupSent.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupSent.setDescription('The object specifies the interval call setup sent.')
ncmJapPRIntvlCallSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupSentnFail.setDescription('The object specifies the interval call setup sent and failed.')
ncmJapPRIntvlCallSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupRx.setDescription('The object specifies the interval call setup received.')
ncmJapPRIntvlCallSetupRxnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupRxnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlCallSetupRxnFail.setDescription('The object specifies the interval call setup received and failed.')
ncmJapPRIntvlUnSupportMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlUnSupportMsgRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlUnSupportMsgRx.setDescription('The object specifies the interval unsupported message received.')
ncmJapPRIntvlTstCalSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8004, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRIntvlTstCalSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRIntvlTstCalSetupSentnFail.setDescription('The object specifies the interval test call setups sent and failed.')
ncmJapPRISecurOperTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005), )
if mibBuilder.loadTexts: ncmJapPRISecurOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecurOperTable.setDescription('The PRI Security Operation Table .')
ncmJapPRISecurOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRISecOpNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRISecOpLineIndex"))
if mibBuilder.loadTexts: ncmJapPRISecurOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecurOperEntry.setDescription('An entry in the PRI Security Operation Table .')
ncmJapPRISecOpNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRISecOpNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpNIDIndex.setDescription('The object specifies the node id of the node.')
ncmJapPRISecOpLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRISecOpLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRISecOpFirstNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 13, 25, 37, 49))).clone(namedValues=NamedValues(("zeroth", 1), ("twelfth", 13), ("twenty-Fourth", 25), ("thirty-Sixth", 37), ("fourty-Eighth", 49)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRISecOpFirstNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpFirstNum.setDescription('The first item number of the present group of security number.')
ncmJapPRISecOpListype = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("own-number", 1), ("remote-number", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRISecOpListype.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpListype.setDescription('The variable specifies the type of list: own or remote numbers.')
ncmJapPRISecOpCountNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRISecOpCountNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpCountNum.setDescription('The variable specifies the number of numbers/elements in this group.')
ncmJapPRISecOpClearElement = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRISecOpClearElement.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpClearElement.setDescription('The variable specifies the element number of the number to be cleared.')
ncmJapPRISecOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRISecOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpStatus.setDescription('The variable specifies the result of writing security number.')
ncmJapPRISecOpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8005, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-Security-List", 1), ("set-Security-List", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRISecOpAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecOpAction.setDescription('The operation that involves sending the corresponding ACP command to execute the specified action with all necessary parameters setup properly.')
ncmJapPRISecurNumbTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8006), )
if mibBuilder.loadTexts: ncmJapPRISecurNumbTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecurNumbTable.setDescription('The PRI Security Number table .')
ncmJapPRISecurNumbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRISecNumNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRISecNumLineIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRISecNumIndex"))
if mibBuilder.loadTexts: ncmJapPRISecurNumbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecurNumbEntry.setDescription('An entry in the PRI Security Number table .')
ncmJapPRISecNumNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRISecNumNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecNumNIDIndex.setDescription('The object specifies the node id of the node.')
ncmJapPRISecNumLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRISecNumLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecNumLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRISecNumIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8006, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRISecNumIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecNumIndex.setDescription('The index number of the security number.')
ncmJapPRISecNumCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8006, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRISecNumCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecNumCount.setDescription('The number of digits of the security number.')
ncmJapPRISecNumNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8006, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmJapPRISecNumNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRISecNumNumber.setDescription('The variable specifies the security number.')
ncmJapPRICallLogLineTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8007), )
if mibBuilder.loadTexts: ncmJapPRICallLogLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallLogLineTable.setDescription('The PRI Call Log Line Table .')
ncmJapPRICallLogLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICaloglinNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICaloglinLineIndex"), (0, "VERILINK-ENTERPRISE-NCMJAPISDN-MIB", "ncmJapPRICaloglinLineNum"))
if mibBuilder.loadTexts: ncmJapPRICallLogLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICallLogLineEntry.setDescription('An entry in the PRI Call Log Line Table .')
ncmJapPRICaloglinNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICaloglinNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICaloglinNIDIndex.setDescription('The object specifies the node id of the node.')
ncmJapPRICaloglinLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICaloglinLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICaloglinLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmJapPRICaloglinLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8007, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICaloglinLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICaloglinLineNum.setDescription('The log line number of the log line to be displayed.')
ncmJapPRICaloglinLogLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8007, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICaloglinLogLine.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICaloglinLogLine.setDescription('The log line to be displayed.')
ncmJapPRICaloglinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3038, 8007, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid-CallLogLine", 1), ("invalid-CallLogLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmJapPRICaloglinStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmJapPRICaloglinStatus.setDescription('The variable specifies the result of listing the call log line.')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMJAPISDN-MIB", ncmJapPRISecurNumbEntry=ncmJapPRISecurNumbEntry, ncmJapPRICallProfTransferMode=ncmJapPRICallProfTransferMode, ncmJapPRICPSetCallProfResp=ncmJapPRICPSetCallProfResp, ncmJapPRICurrentTable=ncmJapPRICurrentTable, ncmJapPRICurrCRCErrRx=ncmJapPRICurrCRCErrRx, ncmJapPRICaloglinNIDIndex=ncmJapPRICaloglinNIDIndex, ncmJapPRICallProfNIDIndex=ncmJapPRICallProfNIDIndex, ncmJapPRIntvlCallSetupSent=ncmJapPRIntvlCallSetupSent, ncmJapPRICurrFramerTx=ncmJapPRICurrFramerTx, ncmJapPRIPortTimeslotMap=ncmJapPRIPortTimeslotMap, ncmJapPRIntvlDISCSTx=ncmJapPRIntvlDISCSTx, ncmJapPRICurrSecsInCurrIntvl=ncmJapPRICurrSecsInCurrIntvl, ncmJapPRIntvlCRCErrRx=ncmJapPRIntvlCRCErrRx, ncmJapPRISecurNumbTable=ncmJapPRISecurNumbTable, ncmJapPRICurrUnSupportMsgRx=ncmJapPRICurrUnSupportMsgRx, ncmJapPRIPortConfigStatus=ncmJapPRIPortConfigStatus, ncmJapPRICPCallActionResp=ncmJapPRICPCallActionResp, ncmJapPRICaloglinStatus=ncmJapPRICaloglinStatus, ncmJapPRICurrFramerRx=ncmJapPRICurrFramerRx, ncmJapPRICPListValidCPRefNum=ncmJapPRICPListValidCPRefNum, ncmJapPRIntvlCallSetupSentnFail=ncmJapPRIntvlCallSetupSentnFail, ncmJapPRICPListNIDIndex=ncmJapPRICPListNIDIndex, ncmJapPRICPListLineIndex=ncmJapPRICPListLineIndex, ncmJapPRICurrFrameAbortRx=ncmJapPRICurrFrameAbortRx, ncmJapPRICPListIndex=ncmJapPRICPListIndex, ncmJapPRICurrEndType=ncmJapPRICurrEndType, ncmJapPRICallProfExtNumDigit=ncmJapPRICallProfExtNumDigit, ncmJapPRICPSetCallProf=ncmJapPRICPSetCallProf, ncmJapPRIPortConfigTable=ncmJapPRIPortConfigTable, ncmJapPRICallLogLineEntry=ncmJapPRICallLogLineEntry, ncmJapPRICurrCallSetupSentnFail=ncmJapPRICurrCallSetupSentnFail, ncmJapPRIPortInService=ncmJapPRIPortInService, ncmJapPRIntvlLineIndex=ncmJapPRIntvlLineIndex, ncmJapPRICallProfListEntry=ncmJapPRICallProfListEntry, ncmJapPRISecOpListype=ncmJapPRISecOpListype, ncmJapPRICallProfExtCallNum=ncmJapPRICallProfExtCallNum, ncmJapPRIPortSetConfig=ncmJapPRIPortSetConfig, ncmJapPRICurrNIDIndex=ncmJapPRICurrNIDIndex, ncmJapPRIPortSwitchType=ncmJapPRIPortSwitchType, ncmJapPRICurrLineIndex=ncmJapPRICurrLineIndex, ncmJapPRIPortNFASMode=ncmJapPRIPortNFASMode, ncmJapPRISecNumIndex=ncmJapPRISecNumIndex, ncmJapPRIPortOwnNumType=ncmJapPRIPortOwnNumType, ncmJapPRICurrTimestamp=ncmJapPRICurrTimestamp, ncmJapPRICurrValidIntvls=ncmJapPRICurrValidIntvls, ncmJapPRIntvlTstCalSetupSentnFail=ncmJapPRIntvlTstCalSetupSentnFail, ncmJapPRICaloglinLogLine=ncmJapPRICaloglinLogLine, ncmJapPRISecNumNumber=ncmJapPRISecNumNumber, ncmJapPRICallProfileTable=ncmJapPRICallProfileTable, ncmJapPRIPortDChanMode=ncmJapPRIPortDChanMode, ncmJapPRIntvlInvalidFrameRx=ncmJapPRIntvlInvalidFrameRx, ncmJapPRISecOpLineIndex=ncmJapPRISecOpLineIndex, ncmJapPRISecNumCount=ncmJapPRISecNumCount, ncmJapPRISecurOperTable=ncmJapPRISecurOperTable, ncmJapPRICurrentEntry=ncmJapPRICurrentEntry, ncmJapPRISecNumNIDIndex=ncmJapPRISecNumNIDIndex, ncmJapPRIPortDChanBits=ncmJapPRIPortDChanBits, ncmJapPRICallProfListTable=ncmJapPRICallProfListTable, ncmJapPRICurrCallSetupRx=ncmJapPRICurrCallSetupRx, ncmJapPRIntvlSecsInCurrIntvl=ncmJapPRIntvlSecsInCurrIntvl, ncmJapPRICurrStatisticReset=ncmJapPRICurrStatisticReset, ncmJapPRICurrInfoTx=ncmJapPRICurrInfoTx, ncmJapPRIPortConfigEntry=ncmJapPRIPortConfigEntry, ncmJapPRISecOpNIDIndex=ncmJapPRISecOpNIDIndex, ncmJapPRIntvlNIDIndex=ncmJapPRIntvlNIDIndex, ncmJapPRICurrTstCalSetupSentnFail=ncmJapPRICurrTstCalSetupSentnFail, ncmJapPRICallProfNumOwnDigit=ncmJapPRICallProfNumOwnDigit, ncmJapPRIL2AutoEstablish=ncmJapPRIL2AutoEstablish, ncmJapPRIntvlIndex=ncmJapPRIntvlIndex, ncmJapPRIntvlFramerTx=ncmJapPRIntvlFramerTx, ncmJapPRICaloglinLineIndex=ncmJapPRICaloglinLineIndex, ncmJapPRICallProfCallBandWth=ncmJapPRICallProfCallBandWth, ncmJapPRICurrInvalidFrameRx=ncmJapPRICurrInvalidFrameRx, ncmJapPRICaloglinLineNum=ncmJapPRICaloglinLineNum, ncmJapPRICallProfRateAdaptn=ncmJapPRICallProfRateAdaptn, ncmJapPRIntvlDISCSRx=ncmJapPRIntvlDISCSRx, ncmJapPRIntvlCallSetupRx=ncmJapPRIntvlCallSetupRx, ncmJapPRICallLogLineTable=ncmJapPRICallLogLineTable, ncmJapPRIntvlLyr3ProtErr=ncmJapPRIntvlLyr3ProtErr, ncmJapPRIPortSecurityLevel=ncmJapPRIPortSecurityLevel, ncmJapPRISecurOperEntry=ncmJapPRISecurOperEntry, ncmJapPRICallProfExtNumPlan=ncmJapPRICallProfExtNumPlan, ncmJapPRICPCallProfileRef=ncmJapPRICPCallProfileRef, ncmJapPRICallProfMultiRateCnt=ncmJapPRICallProfMultiRateCnt, ncmJapPRICurrCallSetupRxnFail=ncmJapPRICurrCallSetupRxnFail, ncmJapPRICallProfOwnCallNum=ncmJapPRICallProfOwnCallNum, ncmJapPRICallProfCallRefCount=ncmJapPRICallProfCallRefCount, ncmJapPRICallProfCallStatus=ncmJapPRICallProfCallStatus, ncmJapPRIntvlFrameAbortRx=ncmJapPRIntvlFrameAbortRx, ncmJapPRICallProfLineIndex=ncmJapPRICallProfLineIndex, ncmJapPRICurrLyr3ProtErr=ncmJapPRICurrLyr3ProtErr, ncmJapPRISecNumLineIndex=ncmJapPRISecNumLineIndex, ncmJapPRICurrCallSetupSent=ncmJapPRICurrCallSetupSent, ncmJapPRICurrInfoRx=ncmJapPRICurrInfoRx, ncmJapPRIntvlUnSupportMsgRx=ncmJapPRIntvlUnSupportMsgRx, ncmJapPRICallProfCallDir=ncmJapPRICallProfCallDir, ncmJapPRIIntervalEntry=ncmJapPRIIntervalEntry, ncmJapPRICallProfCallAction=ncmJapPRICallProfCallAction, ncmJapPRICallProfTestCallIntvl=ncmJapPRICallProfTestCallIntvl, ncmJapPRIntvlFramerRx=ncmJapPRIntvlFramerRx, ncmJapPRISecOpFirstNum=ncmJapPRISecOpFirstNum, ncmJapPRIPortLineIndex=ncmJapPRIPortLineIndex, ncmJapPRIntvlCallSetupRxnFail=ncmJapPRIntvlCallSetupRxnFail, ncmJapPRICallProfExtNumType=ncmJapPRICallProfExtNumType, ncmJapPRIntvlEndType=ncmJapPRIntvlEndType, ncmJapPRIntvlInfoTx=ncmJapPRIntvlInfoTx, ncmJapPRIIntervalTable=ncmJapPRIIntervalTable, ncmJapPRISecOpStatus=ncmJapPRISecOpStatus, ncmJapPRIntvlInfoRx=ncmJapPRIntvlInfoRx, ncmJapPRISecOpClearElement=ncmJapPRISecOpClearElement, ncmJapPRICallProfEntry=ncmJapPRICallProfEntry, ncmJapPRIntvlTimestamp=ncmJapPRIntvlTimestamp, ncmJapPRICurrDISCSTx=ncmJapPRICurrDISCSTx, ncmJapPRIPortOwnNumPlan=ncmJapPRIPortOwnNumPlan, ncmJapPRISecOpAction=ncmJapPRISecOpAction, ncmJapPRICurrDISCSRx=ncmJapPRICurrDISCSRx, ncmJapPRIPortNIDIndex=ncmJapPRIPortNIDIndex, ncmJapPRISecOpCountNum=ncmJapPRISecOpCountNum)
