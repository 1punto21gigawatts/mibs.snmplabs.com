#
# PySNMP MIB module PSAX-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PSAX-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
timeOccurred, registrationStatus, gwType, csType, csID, moduleID, gwID, port, code, percent, gwIP, comment, reason = mibBuilder.importSymbols("AGGREGATED-EXT-MIB", "timeOccurred", "registrationStatus", "gwType", "csType", "csID", "moduleID", "gwID", "port", "code", "percent", "gwIP", "comment", "reason")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectName, Gauge32, MibIdentifier, Bits, Counter32, ModuleIdentity, Unsigned32, TimeTicks, IpAddress, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, snmpModules, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectName", "Gauge32", "MibIdentifier", "Bits", "Counter32", "ModuleIdentity", "Unsigned32", "TimeTicks", "IpAddress", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "snmpModules", "enterprises", "NotificationType")
TextualConvention, TruthValue, TestAndIncr, DisplayString, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "TestAndIncr", "DisplayString", "TimeStamp", "RowStatus")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
softSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
psaxDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6))
psaxTraps = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 0))
if mibBuilder.loadTexts: psaxTraps.setLastUpdated('240701')
if mibBuilder.loadTexts: psaxTraps.setOrganization('Lucent Technologies')
if mibBuilder.loadTexts: psaxTraps.setContactInfo('')
if mibBuilder.loadTexts: psaxTraps.setDescription('The MIB module for entities implementing the xxxx protocol.')
psaxCSConnectionStatus = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 0, 0)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "csID"), ("AGGREGATED-EXT-MIB", "csType"), ("AGGREGATED-EXT-MIB", "registrationStatus"), ("AGGREGATED-EXT-MIB", "reason"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: psaxCSConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: psaxCSConnectionStatus.setDescription("Indicates the registration status of the device server(registered, unregistered or registration failed). VARIABLE DEFINITIONS: 1) timeStamp - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 3) csID - call server identifier which will be returned by the call server when any device server registers to it. 4) csType - call server type, 'primary' or 'secondary'. (Right now this information does not come from the call server. It is set to 'primary'.), value = 0 for primary, value = 1 for secondary 5) registrationStatus - registered | unregistred | registrationFailed depending on whether the device server is registered, unregistered or could not register to the call server respectively. 6) reason - {unreachable | unknown | invalidParam}, indicates the cause for the registration failure. 7) comment - Any comment sent along with this trap. Severity: INFO for registration/unregistration. CRITICAL for failed registration.")
psaxGatewayUtilization = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 0, 1)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "gwID"), ("AGGREGATED-EXT-MIB", "moduleID"), ("AGGREGATED-EXT-MIB", "percent"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: psaxGatewayUtilization.setStatus('current')
if mibBuilder.loadTexts: psaxGatewayUtilization.setDescription('It is triggered when a preset utilization value is set for a gateway and it has met that utilization. VARIABLE DEFINITIONS: 1) timeStamp - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 2) gwID - unique identifier assigned to the gateway. 3) moduleID - The module of the gateway that reports utilization. 4) percent - The percent of utilization being reported. 5) comment - Any comment sent along with this trap Severity: INFO/MINOR depending on the preset value.')
psaxDSError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 0, 2)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "reason"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: psaxDSError.setStatus('current')
if mibBuilder.loadTexts: psaxDSError.setDescription('When any error occurs in the device server. VARIABLE DEFINITIONS: 1) timeStamp - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 2) reason - the reason for the error that occurs in the device server. Takes one of these values: internalError | systemResourceUnavailable | invalidGatewayID | unknown 3) comment - Any comment sent along with this trap. Severity: INFO (internalError), MAJOR (systemResourceUnavailable), INFO (invalidGatewayID - gateway ID is invalid or no such gateway exists) INFO (unknownError - any other errors).')
psaxUnreachableGateway = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 0, 3)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "gwID"), ("AGGREGATED-EXT-MIB", "gwType"), ("AGGREGATED-EXT-MIB", "gwIP"), ("AGGREGATED-EXT-MIB", "port"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: psaxUnreachableGateway.setStatus('current')
if mibBuilder.loadTexts: psaxUnreachableGateway.setDescription('When any gateway is unreachable . Either the TCP/IP address is wrong or the gateway is down. VARIABLE DEFINITIONS: 1) timeStamp - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 3) gwID - unique identifier of the gateway 4) gwType - protocol handled by the gateway, { h323 | sip | psax } 5) gwIP - IP Address of the gateway, the device server tries to connect to, in order to place a call. 6) port - call signalling port of the gateway, the device server tries to connect to. 7) comment - Any comment sent along with this trap Severity: MINOR depending on the preset value.')
psaxCommandFailed = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 6, 0, 4)).setObjects(("AGGREGATED-EXT-MIB", "timeOccurred"), ("AGGREGATED-EXT-MIB", "code"), ("AGGREGATED-EXT-MIB", "reason"), ("AGGREGATED-EXT-MIB", "comment"))
if mibBuilder.loadTexts: psaxCommandFailed.setStatus('current')
if mibBuilder.loadTexts: psaxCommandFailed.setDescription('Triggered when any request is failed by the device server. VARIABLE DEFINITIONS: 1) timeStamp - time when the alarm occured, in <sec>.<usec> format 2) code - bitwise OR of severity, facility, errorCode, instanceID, severity<<28 | facility<<24 | errorCode<<16 | instanceid 3) reason - reason for the failure of the command. {internalError | systemResourceUnavailable |notSupported | unknown } 4) comment - Any comment along with this trap. Severity: MINOR (or may be command sensitive).')
mibBuilder.exportSymbols("PSAX-TRAP-MIB", psaxDSError=psaxDSError, products=products, psaxGatewayUtilization=psaxGatewayUtilization, psaxTraps=psaxTraps, psaxCSConnectionStatus=psaxCSConnectionStatus, lucent=lucent, PYSNMP_MODULE_ID=psaxTraps, psaxCommandFailed=psaxCommandFailed, psaxDeviceServer=psaxDeviceServer, psaxUnreachableGateway=psaxUnreachableGateway, softSwitch=softSwitch)
