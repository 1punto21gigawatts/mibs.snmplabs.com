#
# PySNMP MIB module CISCO-SWITCH-HARDWARE-CAPACITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-HARDWARE-CAPACITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
Percent, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Percent")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoInterfaceIndexList, = mibBuilder.importSymbols("CISCO-TC", "CiscoInterfaceIndexList")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, TimeTicks, IpAddress, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter32, Integer32, Gauge32, Unsigned32, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "IpAddress", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter32", "Integer32", "Gauge32", "Unsigned32", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
ciscoSwitchHardwareCapacityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 663))
ciscoSwitchHardwareCapacityMIB.setRevisions(('2014-09-16 00:00', '2014-01-24 00:00', '2013-05-08 00:00', '2010-11-22 00:00', '2008-07-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIB.setRevisionsDescriptions(('Added the following enumerations for object cshcProtocolFibTcamProtocol - allProtocols(14) Updated the description of cshcProtocolFibTcamTotal and cshcProtocolFibTcamLogicalTotal.', 'Added following OBJECT-GROUP - cshcProtocolFibTcamWidthTypeGroup Added the following enumerations for object cshcProtocolFibTcamProtocol - mplsVpn(11) - fcMpls(12) - ipv6LocalLink(13) Added new compliance - ciscoSwitchHardwareCapacityMIBCompliance3', 'Added following OBJECT-GROUP - cshcNetflowFlowResourceUsageGroup - cshcMacUsageExtGroup - cshcProtocolFibTcamUsageExtGroup - cshcAdjacencyResourceUsageGroup - cshcQosResourceUsageGroup - cshcModTopDropIfIndexListGroup - cshcMetResourceUsageGroup Added the following enumerations for object cshcProtocolFibTcamProtocol - l2VpnPeer(7) - l2VpnIpv4Multicast(8) - l2VpnIpv6Multicast(9) Added new compliance - ciscoSwitchHardwareCapacityMIBCompliance2', 'Add the following new enumerations to cshcCPURateLimiterNetworkLayer: layer2Input(3) and layer2Output(4). Add cshcFibTcamUsageExtGroup.', 'Initial revision of this MIB module.',))
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIB.setLastUpdated('201409160000Z')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIB.setDescription('This MIB module defines the managed objects for hardware capacity of Cisco switching devices. The hardware capacity information covers the following but not limited to features: forwarding, rate-limiter ... The following terms are used throughout the MIB: CAM: Content Addressable Memory. TCAM: Ternary Content Addressable Memory. FIB: Forwarding Information Base. VPN: Virtual Private Network. QoS: Quality of Service. CPU rate-limiter: Mechanism to rate-limit or restrict undesired traffic to the CPU. MPLS: Multiprotocol Label Switching.')
ciscoSwitchHardwareCapacityMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 0))
ciscoSwitchHardwareCapacityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1))
ciscoSwitchHardwareCapacityMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 2))
cshcForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1))
cshcInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2))
cshcCPURateLimiterResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3))
cshcIcamResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4))
cshcNetflowFlowMaskResources = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5))
cshcNetflowResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6))
cshcQosResourceUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7))
class CshcInternalChannelType(TextualConvention, Integer32):
    description = 'An enumerated value indicating the type of an internal channel. eobc - ethernet out-of-band channel. ibc - in-band channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("eobc", 1), ("ibc", 2))

cshcL2Forwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1))
cshcMacUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cshcMacUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcMacUsageTable.setDescription('This table contains MAC table capacity for each switching engine, as specified by entPhysicalIndex in ENTITY-MIB, capable of providing this information.')
cshcMacUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcMacUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcMacUsageEntry.setDescription('Each row contains management information for MAC table hardware capacity on a switching engine.')
cshcMacCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacCollisions.setStatus('current')
if mibBuilder.loadTexts: cshcMacCollisions.setDescription('This object indicates the number of Ethernet frames whose source MAC address the switching engine failed to learn while constructing its MAC table.')
cshcMacUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacUsed.setStatus('current')
if mibBuilder.loadTexts: cshcMacUsed.setDescription('This object indicates the number of MAC table entries that are currently in use for this switching engine.')
cshcMacTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacTotal.setStatus('current')
if mibBuilder.loadTexts: cshcMacTotal.setDescription('This object indicates the total number of MAC table entries available for this switching engine.')
cshcMacMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacMcast.setStatus('current')
if mibBuilder.loadTexts: cshcMacMcast.setDescription('This object indicates the total number of multicast MAC table entries on this switching engine.')
cshcMacUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacUcast.setStatus('current')
if mibBuilder.loadTexts: cshcMacUcast.setDescription('This object indicates the total number of unicast MAC table entries on this switching engine.')
cshcMacLines = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacLines.setStatus('current')
if mibBuilder.loadTexts: cshcMacLines.setDescription('This object indicates the total number of MAC table lines on this switching engine. The MAC table is organized as multiple MAC entries per line.')
cshcMacLinesFull = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMacLinesFull.setStatus('current')
if mibBuilder.loadTexts: cshcMacLinesFull.setDescription('This object indicates the total number of MAC table lines full on this switching engine. A line full means all the MAC entries on the line are occupied.')
cshcVpnCamUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2), )
if mibBuilder.loadTexts: cshcVpnCamUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcVpnCamUsageTable.setDescription('This table contains VPN CAM capacity for each entity, as specified by entPhysicalIndex in ENTITY-MIB, capable of providing this information.')
cshcVpnCamUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcVpnCamUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcVpnCamUsageEntry.setDescription('Each row contains management information for VPN CAM hardware capacity on an entity.')
cshcVpnCamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcVpnCamUsed.setStatus('current')
if mibBuilder.loadTexts: cshcVpnCamUsed.setDescription('This object indicates the number of VPN CAM entries that are currently in use.')
cshcVpnCamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcVpnCamTotal.setStatus('current')
if mibBuilder.loadTexts: cshcVpnCamTotal.setDescription('This object indicates the total number of VPN CAM entries.')
cshcL3Forwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2))
cshcFibTcamUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cshcFibTcamUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcFibTcamUsageTable.setDescription('This table contains FIB TCAM capacity for each entity, as specified by entPhysicalIndex in ENTITY-MIB, capable of providing this information.')
cshcFibTcamUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcFibTcamUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcFibTcamUsageEntry.setDescription('Each row contains management information for FIB TCAM hardware capacity on an entity.')
cshc72bitsFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc72bitsFibTcamUsed.setStatus('current')
if mibBuilder.loadTexts: cshc72bitsFibTcamUsed.setDescription('This object indicates the number of 72 bits FIB TCAM entries that are currently in use.')
cshc72bitsFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc72bitsFibTcamTotal.setStatus('current')
if mibBuilder.loadTexts: cshc72bitsFibTcamTotal.setDescription('This object indicates the total number of 72 bits FIB TCAM entries available.')
cshc144bitsFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc144bitsFibTcamUsed.setStatus('current')
if mibBuilder.loadTexts: cshc144bitsFibTcamUsed.setDescription('This object indicates the number of 144 bits FIB TCAM entries that are currently in use.')
cshc144bitsFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc144bitsFibTcamTotal.setStatus('current')
if mibBuilder.loadTexts: cshc144bitsFibTcamTotal.setDescription('This object indicates the total number of 144 bits FIB TCAM entries available.')
cshc288bitsFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc288bitsFibTcamUsed.setStatus('current')
if mibBuilder.loadTexts: cshc288bitsFibTcamUsed.setDescription('This object indicates the number of 288 bits FIB TCAM entries that are currently in use.')
cshc288bitsFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshc288bitsFibTcamTotal.setStatus('current')
if mibBuilder.loadTexts: cshc288bitsFibTcamTotal.setDescription('This object indicates the total number of 288 bits FIB TCAM entries available.')
cshcProtocolFibTcamUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageTable.setDescription('This table contains FIB TCAM usage per specified Layer 3 protocol on an entity capable of providing this information.')
cshcProtocolFibTcamUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamProtocol"))
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageEntry.setDescription('Each row contains management information for FIB TCAM usage for the specific Layer 3 protocol on an entity as specified by the entPhysicalIndex in ENTITY-MIB.')
cshcProtocolFibTcamProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ipv4", 1), ("mpls", 2), ("eom", 3), ("ipv6", 4), ("ipv4Multicast", 5), ("ipv6Multicast", 6), ("l2VpnPeer", 7), ("l2VpnIpv4Multicast", 8), ("l2VpnIpv6Multicast", 9), ("fcoe", 10), ("mplsVpn", 11), ("fcMpls", 12), ("ipv6LocalLink", 13), ("allProtocols", 14))))
if mibBuilder.loadTexts: cshcProtocolFibTcamProtocol.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamProtocol.setDescription("This object indicates the Layer 3 protocol utilizing FIB TCAM resource. 'ipv4' - indicates Internet Protocol version 4. 'mpls' - indicates Multiprotocol Label Switching. 'eom' - indicates Ethernet over MPLS. 'ipv6' - indicates Internet Protocol version 6. 'ipv4Multicast' - indicates Internet Protocol version 4 for multicast traffic. 'ipv6Multicast' - indicates Internet Protocol version 6 for multicast traffic. 'l2VpnPeer' - indicates Layer 2 VPN Peer traffic. 'l2VpnIpv4Multicast' - indicates Internet Protocol version 4 for multicast traffic on Layer 2 VPN. 'l2VpnIpv6Multicast' - indicates Internet Protocol version 6 for multicast traffic on Layer 2 VPN. 'fcoe' - indicates Fibre Channel over Ethernet. 'mplsVpn' - indicates MPLS Layer 3 VPN aggregate labels. 'fcMpls' - indicates Fibre Channel over MPLS tunnels. 'ipv6LocalLink' - indicates Internet Protocol version 6 Local Link. 'allProtocols' - indicates all protocols within the entPhysicalIndex.")
cshcProtocolFibTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamUsed.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamUsed.setDescription('This object indicates the number of FIB TCAM entries that are currently in use for the protocol denoted by cshcProtocolFibTcamProtocol.')
cshcProtocolFibTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamTotal.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamTotal.setDescription('This object indicates the total number of FIB TCAM entries are currently allocated for the protocol denoted by cshcProtocolFibTcamProtocol. A value of zero indicates that the total number of FIB TCAM for the protocol denoted by cshcProtocolFibTcamProtocol is not available.')
cshcProtocolFibTcamLogicalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamLogicalUsed.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamLogicalUsed.setDescription('This object indicates the number of logical FIB TCAM entries that are currently in use for the protocol denoted by cshcProtocolFibTcamProtocol.')
cshcProtocolFibTcamLogicalTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamLogicalTotal.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamLogicalTotal.setDescription('This object indicates the total number of logical FIB TCAM entries that are currently allocated for the protocol denoted by cshcProtocolFibTcamProtocol. A value of zero indicates that the total number of logical FIB TCAM for the protocol denoted by cshcProtocolFibTcamProtocol is not available.')
cshcProtocolFibTcamWidthType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleWidth", 1), ("doubleWidth", 2), ("quadWidth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcProtocolFibTcamWidthType.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamWidthType.setDescription("This object indicates the entry width type for the protocol denoted by cshcProtocolFibTcamProtocol. 'singleWidth' - indicates each logical entry is using one physical entry. 'doubleWidth' - indicates each logical entry is using two physical entries. 'quadWidth' - indicates each logical entry is using four physical entries.")
cshcAdjacencyUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3), )
if mibBuilder.loadTexts: cshcAdjacencyUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyUsageTable.setDescription('This table contains adjacency capacity for each entity capable of providing this information.')
cshcAdjacencyUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcAdjacencyUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyUsageEntry.setDescription('Each row contains management information for adjacency hardware capacity on an entity, as specified by entPhysicalIndex in ENTITY-MIB.')
cshcAdjacencyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyUsed.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyUsed.setDescription('This object indicates the number of adjacency entries that are currently in use.')
cshcAdjacencyTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyTotal.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyTotal.setDescription('This object indicates the total number of adjacency entries available.')
cshcForwardingLoadTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cshcForwardingLoadTable.setStatus('current')
if mibBuilder.loadTexts: cshcForwardingLoadTable.setDescription('This table contains Layer 3 forwarding load information for each switching engine capable of providing this information.')
cshcForwardingLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcForwardingLoadEntry.setStatus('current')
if mibBuilder.loadTexts: cshcForwardingLoadEntry.setDescription('Each row contains management information of Layer 3 forwarding load on a switching engine, as specified by entPhysicalIndex in ENTITY-MIB.')
cshcForwardingLoadPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1, 1), CounterBasedGauge64()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcForwardingLoadPktRate.setStatus('current')
if mibBuilder.loadTexts: cshcForwardingLoadPktRate.setDescription('This object indicates the forwarding rate of Layer 3 packets.')
cshcForwardingLoadPktPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1, 2), CounterBasedGauge64()).setUnits('pps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcForwardingLoadPktPeakRate.setStatus('current')
if mibBuilder.loadTexts: cshcForwardingLoadPktPeakRate.setDescription('This object indicates the peak forwarding rate of Layer 3 packets.')
cshcForwardingLoadPktPeakTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 4, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcForwardingLoadPktPeakTime.setStatus('current')
if mibBuilder.loadTexts: cshcForwardingLoadPktPeakTime.setDescription('This object describes the time when the peak forwarding rate of Layer 3 packets denoted by cshcForwardingLoadPktPeakRate occurs. This object will contain 0-1-1,00:00:00.0 if the peak time information is not available.')
cshcAdjacencyResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5), )
if mibBuilder.loadTexts: cshcAdjacencyResourceUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyResourceUsageTable.setDescription('This table contains adjacency capacity per resource type and its usage for each entity capable of providing this information.')
cshcAdjacencyResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceIndex"))
if mibBuilder.loadTexts: cshcAdjacencyResourceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyResourceUsageEntry.setDescription('Each row contains the management information for a particular adjacency resource and switch engine, as specified by entPhysicalIndex in ENTITY-MIB.')
cshcAdjacencyResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cshcAdjacencyResourceIndex.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyResourceIndex.setDescription('This object indicates a unique value that identifies an adjacency resource.')
cshcAdjacencyResourceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyResourceDescr.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyResourceDescr.setDescription('This object indicates a description of the adjacency resource.')
cshcAdjacencyResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyResourceUsed.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyResourceUsed.setDescription('This object indicates the number of adjacency entries that are currently in use.')
cshcAdjacencyResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcAdjacencyResourceTotal.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyResourceTotal.setDescription('This object indicates the total number of adjacency entries available.')
cshcMetResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6), )
if mibBuilder.loadTexts: cshcMetResourceUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceUsageTable.setDescription('This table contains information regarding Multicast Expansion Table (MET) resource usage and utilization for a switching engine capable of providing this information.')
cshcMetResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceIndex"))
if mibBuilder.loadTexts: cshcMetResourceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceUsageEntry.setDescription('Each row contains information of the usage and utilization for a particular MET resource and switching engine, as specified by entPhysicalIndex in ENTITY-MIB.')
cshcMetResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cshcMetResourceIndex.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceIndex.setDescription('An arbitrary positive integer value that uniquely identifies a Met resource.')
cshcMetResourceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceDescr.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceDescr.setDescription('This object indicates a description of the MET resource.')
cshcMetResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceUsed.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceUsed.setDescription('This object indicates the number of MET entries used by this MET resource.')
cshcMetResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceTotal.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceTotal.setDescription('This object indicates the total number of MET entries available for this MET resource.')
cshcMetResourceMcastGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcMetResourceMcastGrp.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceMcastGrp.setDescription('This object indicates the number of the multicast group for this MET resource. A value of -1 indicates that this object is not applicable on this MET feature.')
cshcModuleInterfaceDropsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1), )
if mibBuilder.loadTexts: cshcModuleInterfaceDropsTable.setStatus('current')
if mibBuilder.loadTexts: cshcModuleInterfaceDropsTable.setDescription('This table contains interface drops information on each module capable of providing this information.')
cshcModuleInterfaceDropsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcModuleInterfaceDropsEntry.setStatus('current')
if mibBuilder.loadTexts: cshcModuleInterfaceDropsEntry.setDescription('Each row contains management information for dropped traffic on a specific module, identified by the entPhysicalIndex in ENTITY-MIB, and capable of providing this information.')
cshcModTxTotalDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModTxTotalDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cshcModTxTotalDroppedPackets.setDescription('This object indicates the total dropped outbound packets on all physical interfaces of this module.')
cshcModRxTotalDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModRxTotalDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cshcModRxTotalDroppedPackets.setDescription('This object indicates the total dropped inbound packets on all physical interfaces of this module.')
cshcModTxTopDropPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModTxTopDropPort.setStatus('current')
if mibBuilder.loadTexts: cshcModTxTopDropPort.setDescription('This object indicates the ifIndex value of the interface that has the largest number of total dropped outbound packets among all the physical interfaces on this module. If there were no dropped outbound packets on any physical interfaces of this module, this object has the value 0. If there are multiple physical interfaces of this module having the same largest number of total dropped outbound packets, the ifIndex of the first such interfaces will be assigned to this object.')
cshcModRxTopDropPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModRxTopDropPort.setStatus('current')
if mibBuilder.loadTexts: cshcModRxTopDropPort.setDescription('This object indicates the ifIndex value of the interface that has the largest number of total dropped inbound packets among all the physical interfaces of this module. If there were no dropped inbound packets on any physical interfaces of this module, this object has the value 0. If there are multiple physical interfaces of this module having the same largest number of total dropped inbound packets, the ifIndex of the first such interfaces will be assigned to this object.')
cshcModTxTopDropIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 5), CiscoInterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModTxTopDropIfIndexList.setStatus('current')
if mibBuilder.loadTexts: cshcModTxTopDropIfIndexList.setDescription('This object indicates the ifIndex values of the list of interfaces that have the largest number of total dropped outbound packets among all the physical interfaces of this module.')
cshcModRxTopDropIfIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 1, 1, 6), CiscoInterfaceIndexList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcModRxTopDropIfIndexList.setStatus('current')
if mibBuilder.loadTexts: cshcModRxTopDropIfIndexList.setDescription('This object indicates the ifIndex values of the list of interfaces that have the largest number of total dropped inbound packets among all the physical interfaces of this module.')
cshcInterfaceBufferTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2), )
if mibBuilder.loadTexts: cshcInterfaceBufferTable.setStatus('current')
if mibBuilder.loadTexts: cshcInterfaceBufferTable.setDescription('This table contains buffer capacity information for each physical interface capable of providing this information.')
cshcInterfaceBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cshcInterfaceBufferEntry.setStatus('current')
if mibBuilder.loadTexts: cshcInterfaceBufferEntry.setDescription('Each row contains buffer capacity information for a specific physical interface capable of providing this information.')
cshcInterfaceTransmitBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2, 1, 1), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcInterfaceTransmitBufferSize.setStatus('current')
if mibBuilder.loadTexts: cshcInterfaceTransmitBufferSize.setDescription('The aggregate buffer size of all the transmit queues on this interface.')
cshcInterfaceReceiveBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 2, 1, 2), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcInterfaceReceiveBufferSize.setStatus('current')
if mibBuilder.loadTexts: cshcInterfaceReceiveBufferSize.setDescription('The aggregate buffer size of all the receive queues on this interface.')
cshcInternalChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3), )
if mibBuilder.loadTexts: cshcInternalChannelTable.setStatus('current')
if mibBuilder.loadTexts: cshcInternalChannelTable.setDescription('This table contains information for each internal channel interface on each physical entity, such as a module, capable of providing this information.')
cshcInternalChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlType"))
if mibBuilder.loadTexts: cshcInternalChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cshcInternalChannelEntry.setDescription('Each row contains management information for an internal channel interface of a specific type on a specific physical entity, such as a module, identified by the entPhysicalIndex in ENTITY-MIB, and capable of providing this information.')
cshcIntlChnlType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 1), CshcInternalChannelType())
if mibBuilder.loadTexts: cshcIntlChnlType.setStatus('current')
if mibBuilder.loadTexts: cshcIntlChnlType.setDescription('The type of this internal channel.')
cshcIntlChnlRxPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 2), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlRxPacketRate.setStatus('current')
if mibBuilder.loadTexts: cshcIntlChnlRxPacketRate.setDescription('Five minute exponentially-decayed moving average of inbound packet rate for this channel.')
cshcIntlChnlRxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlRxTotalPackets.setStatus('current')
if mibBuilder.loadTexts: cshcIntlChnlRxTotalPackets.setDescription('The total number of the inbound packets accounted for this channel.')
cshcIntlChnlRxDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlRxDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cshcIntlChnlRxDroppedPackets.setDescription('The number of dropped inbound packets for this channel.')
cshcIntlChnlTxPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 5), CounterBasedGauge64()).setUnits('packets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlTxPacketRate.setStatus('current')
if mibBuilder.loadTexts: cshcIntlChnlTxPacketRate.setDescription('Five minute exponentially-decayed moving average of outbound packet rate for this channel.')
cshcIntlChnlTxTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlTxTotalPackets.setStatus('current')
if mibBuilder.loadTexts: cshcIntlChnlTxTotalPackets.setDescription('The total number of the outbound packets accounted for this channel.')
cshcIntlChnlTxDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIntlChnlTxDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cshcIntlChnlTxDroppedPackets.setDescription('The number of dropped outbound packets for this channel.')
cshcCPURateLimiterResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1), )
if mibBuilder.loadTexts: cshcCPURateLimiterResourcesTable.setStatus('current')
if mibBuilder.loadTexts: cshcCPURateLimiterResourcesTable.setDescription('This table contains information regarding CPU rate limiters resources.')
cshcCPURateLimiterResourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterNetworkLayer"))
if mibBuilder.loadTexts: cshcCPURateLimiterResourcesEntry.setStatus('current')
if mibBuilder.loadTexts: cshcCPURateLimiterResourcesEntry.setDescription('Each row contains management information of CPU rate limiter resources for a managed network layer.')
cshcCPURateLimiterNetworkLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2), ("layer2Input", 3), ("layer2Output", 4))))
if mibBuilder.loadTexts: cshcCPURateLimiterNetworkLayer.setStatus('current')
if mibBuilder.loadTexts: cshcCPURateLimiterNetworkLayer.setDescription("This object indicates the network layer for which the CPU rate limiters are applied. 'layer2' - Layer 2. 'layer3' - Layer 3. 'layer2Input' - Ingress Layer 2. Applicable for devices which support CPU rate limiters on the Ingress Layer 2 traffic. 'layer2Output' - Egress Layer 2. Applicable for devices which support CPU rate limiters on the Egress Layer 2 traffic.")
cshcCPURateLimiterTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcCPURateLimiterTotal.setStatus('current')
if mibBuilder.loadTexts: cshcCPURateLimiterTotal.setDescription('This object indicates the total number of CPU rate limiters avaiable.')
cshcCPURateLimiterUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcCPURateLimiterUsed.setStatus('current')
if mibBuilder.loadTexts: cshcCPURateLimiterUsed.setDescription('This object indicates the number of CPU rate limiters that is currently in use.')
cshcCPURateLimiterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcCPURateLimiterReserved.setStatus('current')
if mibBuilder.loadTexts: cshcCPURateLimiterReserved.setDescription('This object indicates the number of CPU rate limiters which is reserved by the switching device.')
cshcIcamUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1), )
if mibBuilder.loadTexts: cshcIcamUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: cshcIcamUtilizationTable.setDescription('This table contains information regarding ICAM (Internal Content Addressable Memory) Resource usage and utilization for a switching engine capable of providing this information.')
cshcIcamUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cshcIcamUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: cshcIcamUtilizationEntry.setDescription('Each row contains management information of ICAM usage and utilization for a switching engine, as specified as specified by entPhysicalIndex in ENTITY-MIB.')
cshcIcamCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIcamCreated.setStatus('current')
if mibBuilder.loadTexts: cshcIcamCreated.setDescription('This object indicates the total number of ICAM entries created.')
cshcIcamFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIcamFailed.setStatus('current')
if mibBuilder.loadTexts: cshcIcamFailed.setDescription('This object indicates the number of ICAM entries which failed to be created.')
cshcIcamUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 4, 1, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcIcamUtilization.setStatus('current')
if mibBuilder.loadTexts: cshcIcamUtilization.setDescription('This object indicates the ICAM utlization in percentage in this switching engine.')
cshcNetflowFlowMaskTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1), )
if mibBuilder.loadTexts: cshcNetflowFlowMaskTable.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowMaskTable.setDescription('This table contains information regarding Netflow flow mask features supported.')
cshcNetflowFlowMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskAddrType"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskIndex"))
if mibBuilder.loadTexts: cshcNetflowFlowMaskEntry.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowMaskEntry.setDescription('Each row contains supported feature information of a Netflow flow mask supported by the device.')
cshcNetflowFlowMaskAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cshcNetflowFlowMaskAddrType.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowMaskAddrType.setDescription('This object indicates Internet address type for this flow mask.')
cshcNetflowFlowMaskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cshcNetflowFlowMaskIndex.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowMaskIndex.setDescription('This object indicates the unique flow mask number for a specific Internet address type.')
cshcNetflowFlowMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))).clone(namedValues=NamedValues(("null", 1), ("srcOnly", 2), ("destOnly", 3), ("srcDest", 4), ("interfaceSrcDest", 5), ("fullFlow", 6), ("interfaceFullFlow", 7), ("interfaceFullFlowOrFullFlow", 8), ("atleastInterfaceSrcDest", 9), ("atleastFullFlow", 10), ("atleastInterfaceFullFlow", 11), ("atleastSrc", 12), ("atleastDst", 13), ("atleastSrcDst", 14), ("shortest", 15), ("lessThanFullFlow", 16), ("exceptFullFlow", 17), ("exceptInterfaceFullFlow", 18), ("interfaceDest", 19), ("atleastInterfaceDest", 20), ("interfaceSrc", 21), ("atleastInterfaceSrc", 22), ("srcOnlyCR", 23), ("dstOnlyCR", 24), ("fullFlowCR", 25), ("interfaceFullFlowCR", 26), ("max", 27), ("conflict", 28), ("err", 29), ("unused", 30), ("fullFlow1", 31), ("fullFlow2", 32), ("fullFlow3", 33), ("vlanFullFlow1", 34), ("vlanFullFlow2", 35), ("vlanFullFlow3", 36), ("reserved", 37)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowFlowMaskType.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowMaskType.setDescription('This object indicates the type of flow mask.')
cshcNetflowFlowMaskFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 5, 1, 1, 4), Bits().clone(namedValues=NamedValues(("null", 0), ("ipAcgIngress", 1), ("ipAcgEgress", 2), ("natIngress", 3), ("natEngress", 4), ("natInside", 5), ("pbr", 6), ("cryptoIngress", 7), ("cryptoEgress", 8), ("qos", 9), ("idsIngress", 10), ("tcpIntrcptEgress", 11), ("guardian", 12), ("ipv6AcgIngress", 13), ("ipv6AcgEgress", 14), ("mcastAcgIngress", 15), ("mcastAcgEgress", 16), ("mcastStub", 17), ("mcastUrd", 18), ("ipDsIngress", 19), ("ipDsEgress", 20), ("ipVaclIngress", 21), ("ipVaclEgress", 22), ("macVaclIngress", 23), ("macVaclEgress", 24), ("inspIngress", 25), ("inspEgress", 26), ("authProxy", 27), ("rpf", 28), ("wccpIngress", 29), ("wccpEgress", 30), ("inspDummyIngress", 31), ("inspDummyEgress", 32), ("nbarIngress", 33), ("nbarEgress", 34), ("ipv6Rpf", 35), ("ipv6GlobalDefault", 36), ("dai", 37), ("ipPaclIngress", 38), ("macPaclIngress", 39), ("mplsIcmpBridge", 40), ("ipSlb", 41), ("ipv4Default", 42), ("ipv6Default", 43), ("mplsDefault", 44), ("erSpanTermination", 45), ("ipv6Mcast", 46), ("ipDsL3Ingress", 47), ("ipDsL3Egress", 48), ("cryptoRedirectIngress", 49), ("otherDefault", 50), ("ipRecir", 51), ("iPAdmissionL3Eou", 52), ("iPAdmissionL2Eou", 53), ("iPAdmissionL2EouArp", 54), ("ipAdmissionL2Http", 55), ("ipAdmissionL2HttpArp", 56), ("ipv4L3IntfNde", 57), ("ipv4L2IntfNde", 58), ("ipSguardIngress", 59), ("pvtHostsIngress", 60), ("vrfNatIngress", 61), ("tcpAdjustMssIngress", 62), ("tcpAdjustMssEgress", 63), ("eomIw", 64), ("eomIw2", 65), ("ipv4VrfNdeEgress", 66), ("l1Egress", 67), ("l1Ingress", 68), ("l1GlobalEgress", 69), ("l1GlobalIngress", 70), ("ipDot1xAcl", 71), ("ipDot1xAclArp", 72), ("dot1ad", 73), ("ipSpanPcap", 74), ("ipv6CryptoRedirectIngress", 75), ("svcAcclrtIngress", 76), ("ipv6SvcAcclrtIngress", 77), ("nfAggregation", 78), ("nfSampling", 79), ("ipv6Guardian", 80), ("ipv6Qos", 81), ("none", 82)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowFlowMaskFeature.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowMaskFeature.setDescription('This object indicates the features supported by this flow mask.')
cshcNetflowResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1), )
if mibBuilder.loadTexts: cshcNetflowResourceUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageTable.setDescription('This table contains information regarding Netflow resource usage and utilization for a switching engine capable of providing this information.')
cshcNetflowResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageIndex"))
if mibBuilder.loadTexts: cshcNetflowResourceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageEntry.setDescription('Each row contains information of the usage and utilization for a particular Netflow resource and switching engine, as specified by entPhysicalIndex in ENTITY-MIB.')
cshcNetflowResourceUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cshcNetflowResourceUsageIndex.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageIndex.setDescription('An arbitrary positive integer value that uniquely identifies a Netflow resource.')
cshcNetflowResourceUsageDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageDescr.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageDescr.setDescription('This object indicates a description of the Netflow resource.')
cshcNetflowResourceUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 3), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageUtil.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageUtil.setDescription('This object indicates the Netflow resource usage in percentage value.')
cshcNetflowResourceUsageUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageUsed.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageUsed.setDescription('This object indicates the number of Netflow entries used by this Netflow resource.')
cshcNetflowResourceUsageFree = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageFree.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageFree.setDescription('This object indicates the number of Netflow entries available for this Netflow resource.')
cshcNetflowResourceUsageFail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 2147483647), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcNetflowResourceUsageFail.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowResourceUsageFail.setDescription('This object indicates the number of Netflow entries which were failed to be created for this Netflow resource. A value of -1 indicates that this resource does not maintain this counter.')
cshcQosResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1), )
if mibBuilder.loadTexts: cshcQosResourceUsageTable.setStatus('current')
if mibBuilder.loadTexts: cshcQosResourceUsageTable.setDescription('This table contains QoS capacity per resource type and its usage for each entity capable of providing this information.')
cshcQosResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceType"))
if mibBuilder.loadTexts: cshcQosResourceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cshcQosResourceUsageEntry.setDescription('Each row contains management information for QoS capacity and its usage on an entity, as specified by entPhysicalIndex in ENTITY-MIB.')
cshcQosResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aggregatePolicers", 1), ("distributedPolicers", 2), ("policerProfiles", 3))))
if mibBuilder.loadTexts: cshcQosResourceType.setStatus('current')
if mibBuilder.loadTexts: cshcQosResourceType.setDescription('This object indicates the QoS resource type.')
cshcQosResourceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcQosResourceUsed.setStatus('current')
if mibBuilder.loadTexts: cshcQosResourceUsed.setDescription('This object indicates the number of QoS entries that are currently in use.')
cshcQosResourceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 663, 1, 7, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cshcQosResourceTotal.setStatus('current')
if mibBuilder.loadTexts: cshcQosResourceTotal.setDescription('This object indicates the total number of QoS entries available.')
ciscoSwitchHardwareCapacityMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1))
ciscoSwitchHardwareCapacityMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2))
ciscoSwitchHardwareCapacityMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 1)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance = ciscoSwitchHardwareCapacityMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIBCompliance.setDescription('The compliance statement for CISCO-SWITCH-HARDWARE-CAPACITY-MIB. This statement is deprecated and superseded by ciscoSwitchHardwareCapacityMIBCompliance1.')
ciscoSwitchHardwareCapacityMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 2)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance1 = ciscoSwitchHardwareCapacityMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIBCompliance1.setDescription('The compliance statement for CISCO-SWITCH-HARDWARE-CAPACITY-MIB. This statement is deprecated and superseded by ciscoSwitchHardwareCapacityMIBCompliance2.')
ciscoSwitchHardwareCapacityMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 3)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTopDropIfIndexListGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceUsageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance2 = ciscoSwitchHardwareCapacityMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIBCompliance2.setDescription('The compliance statement for CISCO-SWITCH-HARDWARE-CAPACITY-MIB')
ciscoSwitchHardwareCapacityMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 1, 4)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModuleInterfaceDropsGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceBufferGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInternalChannelGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamResourcesGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskResourceGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsageExtGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTopDropIfIndexListGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceUsageGroup"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamWidthTypeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchHardwareCapacityMIBCompliance3 = ciscoSwitchHardwareCapacityMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchHardwareCapacityMIBCompliance3.setDescription('The compliance statement for CISCO-SWITCH-HARDWARE-CAPACITY-MIB')
cshcMacUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 1)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacCollisions"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcMacUsageGroup = cshcMacUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcMacUsageGroup.setDescription('A collection of objects which provides Layer 2 forwarding hardware capacity information in the device.')
cshcVpnCamUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 2)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcVpnCamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcVpnCamUsageGroup = cshcVpnCamUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcVpnCamUsageGroup.setDescription('A collection of objects which provides VPN CAM hardware capacity information in the device.')
cshcFibTcamUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 3)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc72bitsFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc72bitsFibTcamTotal"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc144bitsFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc144bitsFibTcamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcFibTcamUsageGroup = cshcFibTcamUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcFibTcamUsageGroup.setDescription('A collection of objects which provides FIB TCAM hardware capacity information in the device.')
cshcProtocolFibTcamUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 4)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcProtocolFibTcamUsageGroup = cshcProtocolFibTcamUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageGroup.setDescription('A collection of objects which provides FIB TCAM hardware capacity information in conjunction with Layer 3 protocol in the device.')
cshcAdjacencyUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 5)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcAdjacencyUsageGroup = cshcAdjacencyUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyUsageGroup.setDescription('A collection of objects which provides adjacency hardware capacity information in the device.')
cshcForwardingLoadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 6)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadPktRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadPktPeakRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcForwardingLoadPktPeakTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcForwardingLoadGroup = cshcForwardingLoadGroup.setStatus('current')
if mibBuilder.loadTexts: cshcForwardingLoadGroup.setDescription('A collection of objects which provides forwarding load information in the device.')
cshcModuleInterfaceDropsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 7)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTxTotalDroppedPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModRxTotalDroppedPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTxTopDropPort"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModRxTopDropPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcModuleInterfaceDropsGroup = cshcModuleInterfaceDropsGroup.setStatus('current')
if mibBuilder.loadTexts: cshcModuleInterfaceDropsGroup.setDescription('A collection of objects which provides linecard drop traffic information on the device.')
cshcInterfaceBufferGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 8)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceTransmitBufferSize"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcInterfaceReceiveBufferSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcInterfaceBufferGroup = cshcInterfaceBufferGroup.setStatus('current')
if mibBuilder.loadTexts: cshcInterfaceBufferGroup.setDescription('A collection of objects which provides interface buffer information on the device.')
cshcInternalChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 9)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlRxPacketRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlRxTotalPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlRxDroppedPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlTxPacketRate"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlTxTotalPackets"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIntlChnlTxDroppedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcInternalChannelGroup = cshcInternalChannelGroup.setStatus('current')
if mibBuilder.loadTexts: cshcInternalChannelGroup.setDescription('A collection of objects which provides internal channel information on the device.')
cshcCPURateLimiterResourcesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 10)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterTotal"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcCPURateLimiterReserved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcCPURateLimiterResourcesGroup = cshcCPURateLimiterResourcesGroup.setStatus('current')
if mibBuilder.loadTexts: cshcCPURateLimiterResourcesGroup.setDescription('A collection of objects which provides CPU rate limiter resource in the device.')
cshcIcamResourcesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 11)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamCreated"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamFailed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcIcamUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcIcamResourcesGroup = cshcIcamResourcesGroup.setStatus('current')
if mibBuilder.loadTexts: cshcIcamResourcesGroup.setDescription('A collection of objects which provides ICAM resources information in the device.')
cshcNetflowFlowMaskResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 12)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskType"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowFlowMaskFeature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcNetflowFlowMaskResourceGroup = cshcNetflowFlowMaskResourceGroup.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowMaskResourceGroup.setDescription('A collection of objects which provides Netflow FlowMask information in the device.')
cshcFibTcamUsageExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 13)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc288bitsFibTcamUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshc288bitsFibTcamTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcFibTcamUsageExtGroup = cshcFibTcamUsageExtGroup.setStatus('current')
if mibBuilder.loadTexts: cshcFibTcamUsageExtGroup.setDescription('A collection of objects which provides additional FIB TCAM hardware capacity information in the device.')
cshcNetflowFlowResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 14)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageDescr"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageUtil"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageFree"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcNetflowResourceUsageFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcNetflowFlowResourceUsageGroup = cshcNetflowFlowResourceUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcNetflowFlowResourceUsageGroup.setDescription('A collection of objects which provides Netflow resource usage information in the device.')
cshcMacUsageExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 15)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacMcast"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacUcast"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacLines"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMacLinesFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcMacUsageExtGroup = cshcMacUsageExtGroup.setStatus('current')
if mibBuilder.loadTexts: cshcMacUsageExtGroup.setDescription('A collection of objects which provides additional Layer 2 forwarding hardware capacity information in the device.')
cshcProtocolFibTcamUsageExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 16)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamLogicalUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamLogicalTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcProtocolFibTcamUsageExtGroup = cshcProtocolFibTcamUsageExtGroup.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamUsageExtGroup.setDescription('A collection of objects which provides additional FIB TCAM hardware capacity information in conjunction with Layer 3 protocol in the device.')
cshcAdjacencyResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 17)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceDescr"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcAdjacencyResourceTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcAdjacencyResourceUsageGroup = cshcAdjacencyResourceUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcAdjacencyResourceUsageGroup.setDescription('A collection of objects which provides adjacency hardware capacity information per resource in the device.')
cshcQosResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 18)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcQosResourceTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcQosResourceUsageGroup = cshcQosResourceUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcQosResourceUsageGroup.setDescription('A collection of objects which provides QoS hardware capacity information per resource in the device.')
cshcModTopDropIfIndexListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 19)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModTxTopDropIfIndexList"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcModRxTopDropIfIndexList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcModTopDropIfIndexListGroup = cshcModTopDropIfIndexListGroup.setStatus('current')
if mibBuilder.loadTexts: cshcModTopDropIfIndexListGroup.setDescription('A collection of objects which provides information on multiple interfaces with largest number of drop traffic on a module.')
cshcMetResourceUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 20)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceDescr"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceUsed"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceTotal"), ("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcMetResourceMcastGrp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcMetResourceUsageGroup = cshcMetResourceUsageGroup.setStatus('current')
if mibBuilder.loadTexts: cshcMetResourceUsageGroup.setDescription('A collection of objects which provides MET hardware capacity information per resource in the device.')
cshcProtocolFibTcamWidthTypeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 663, 2, 2, 21)).setObjects(("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", "cshcProtocolFibTcamWidthType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cshcProtocolFibTcamWidthTypeGroup = cshcProtocolFibTcamWidthTypeGroup.setStatus('current')
if mibBuilder.loadTexts: cshcProtocolFibTcamWidthTypeGroup.setDescription('A collection of objects which provides FIB TCAM entry width information in conjunction with Layer 3 protocol in the device.')
mibBuilder.exportSymbols("CISCO-SWITCH-HARDWARE-CAPACITY-MIB", cshcAdjacencyTotal=cshcAdjacencyTotal, cshcNetflowResourceUsageFail=cshcNetflowResourceUsageFail, cshcForwardingLoadEntry=cshcForwardingLoadEntry, cshcProtocolFibTcamWidthType=cshcProtocolFibTcamWidthType, cshcInterfaceTransmitBufferSize=cshcInterfaceTransmitBufferSize, cshcIcamCreated=cshcIcamCreated, cshcForwarding=cshcForwarding, cshcNetflowFlowMaskEntry=cshcNetflowFlowMaskEntry, cshcNetflowResourceUsageEntry=cshcNetflowResourceUsageEntry, cshcAdjacencyUsageGroup=cshcAdjacencyUsageGroup, cshcAdjacencyResourceIndex=cshcAdjacencyResourceIndex, cshcInterfaceBufferEntry=cshcInterfaceBufferEntry, cshcCPURateLimiterResourcesGroup=cshcCPURateLimiterResourcesGroup, cshcIcamUtilization=cshcIcamUtilization, cshcForwardingLoadPktRate=cshcForwardingLoadPktRate, cshcNetflowFlowMaskResourceGroup=cshcNetflowFlowMaskResourceGroup, cshcIntlChnlTxTotalPackets=cshcIntlChnlTxTotalPackets, ciscoSwitchHardwareCapacityMIBCompliance3=ciscoSwitchHardwareCapacityMIBCompliance3, cshcCPURateLimiterTotal=cshcCPURateLimiterTotal, cshcNetflowFlowMaskResources=cshcNetflowFlowMaskResources, cshcVpnCamUsed=cshcVpnCamUsed, ciscoSwitchHardwareCapacityMIBObjects=ciscoSwitchHardwareCapacityMIBObjects, cshcMetResourceDescr=cshcMetResourceDescr, cshcQosResourceUsed=cshcQosResourceUsed, ciscoSwitchHardwareCapacityMIBCompliance2=ciscoSwitchHardwareCapacityMIBCompliance2, cshcInterfaceBufferGroup=cshcInterfaceBufferGroup, PYSNMP_MODULE_ID=ciscoSwitchHardwareCapacityMIB, cshcMetResourceMcastGrp=cshcMetResourceMcastGrp, cshc288bitsFibTcamTotal=cshc288bitsFibTcamTotal, cshcModuleInterfaceDropsEntry=cshcModuleInterfaceDropsEntry, cshcInterface=cshcInterface, cshcAdjacencyUsageEntry=cshcAdjacencyUsageEntry, cshcInterfaceBufferTable=cshcInterfaceBufferTable, cshcL3Forwarding=cshcL3Forwarding, cshcNetflowFlowResourceUsageGroup=cshcNetflowFlowResourceUsageGroup, cshcProtocolFibTcamTotal=cshcProtocolFibTcamTotal, cshcProtocolFibTcamUsageTable=cshcProtocolFibTcamUsageTable, cshcModTxTotalDroppedPackets=cshcModTxTotalDroppedPackets, cshcMetResourceIndex=cshcMetResourceIndex, cshcFibTcamUsageGroup=cshcFibTcamUsageGroup, cshcAdjacencyResourceUsageTable=cshcAdjacencyResourceUsageTable, ciscoSwitchHardwareCapacityMIBGroups=ciscoSwitchHardwareCapacityMIBGroups, cshcNetflowFlowMaskAddrType=cshcNetflowFlowMaskAddrType, cshcMacUsageTable=cshcMacUsageTable, cshcInternalChannelEntry=cshcInternalChannelEntry, cshc144bitsFibTcamTotal=cshc144bitsFibTcamTotal, cshc72bitsFibTcamTotal=cshc72bitsFibTcamTotal, cshcModTxTopDropIfIndexList=cshcModTxTopDropIfIndexList, cshcMetResourceUsed=cshcMetResourceUsed, ciscoSwitchHardwareCapacityMIBNotifs=ciscoSwitchHardwareCapacityMIBNotifs, cshcAdjacencyUsageTable=cshcAdjacencyUsageTable, cshcIntlChnlRxPacketRate=cshcIntlChnlRxPacketRate, cshcAdjacencyUsed=cshcAdjacencyUsed, cshcAdjacencyResourceUsageEntry=cshcAdjacencyResourceUsageEntry, cshcVpnCamUsageEntry=cshcVpnCamUsageEntry, cshcForwardingLoadTable=cshcForwardingLoadTable, cshcQosResourceUsage=cshcQosResourceUsage, cshcProtocolFibTcamUsageEntry=cshcProtocolFibTcamUsageEntry, cshcForwardingLoadPktPeakRate=cshcForwardingLoadPktPeakRate, cshcCPURateLimiterResourcesTable=cshcCPURateLimiterResourcesTable, cshcCPURateLimiterNetworkLayer=cshcCPURateLimiterNetworkLayer, cshcModTopDropIfIndexListGroup=cshcModTopDropIfIndexListGroup, cshcVpnCamTotal=cshcVpnCamTotal, cshcMetResourceUsageEntry=cshcMetResourceUsageEntry, cshcAdjacencyResourceUsageGroup=cshcAdjacencyResourceUsageGroup, cshcCPURateLimiterResourcesEntry=cshcCPURateLimiterResourcesEntry, CshcInternalChannelType=CshcInternalChannelType, cshcAdjacencyResourceUsed=cshcAdjacencyResourceUsed, cshcForwardingLoadGroup=cshcForwardingLoadGroup, cshcIntlChnlTxPacketRate=cshcIntlChnlTxPacketRate, cshc72bitsFibTcamUsed=cshc72bitsFibTcamUsed, cshcModTxTopDropPort=cshcModTxTopDropPort, cshcModRxTopDropPort=cshcModRxTopDropPort, cshcForwardingLoadPktPeakTime=cshcForwardingLoadPktPeakTime, cshcMacUsageEntry=cshcMacUsageEntry, ciscoSwitchHardwareCapacityMIBConformance=ciscoSwitchHardwareCapacityMIBConformance, cshcQosResourceTotal=cshcQosResourceTotal, cshcNetflowResourceUsageUtil=cshcNetflowResourceUsageUtil, cshcFibTcamUsageExtGroup=cshcFibTcamUsageExtGroup, cshcIcamUtilizationEntry=cshcIcamUtilizationEntry, cshcVpnCamUsageTable=cshcVpnCamUsageTable, cshcMacUcast=cshcMacUcast, cshcMacUsageGroup=cshcMacUsageGroup, cshcIntlChnlType=cshcIntlChnlType, cshcIcamResources=cshcIcamResources, cshcMacLines=cshcMacLines, cshcMacCollisions=cshcMacCollisions, cshc288bitsFibTcamUsed=cshc288bitsFibTcamUsed, cshcIntlChnlRxDroppedPackets=cshcIntlChnlRxDroppedPackets, cshcProtocolFibTcamUsageGroup=cshcProtocolFibTcamUsageGroup, cshcAdjacencyResourceDescr=cshcAdjacencyResourceDescr, cshcModRxTopDropIfIndexList=cshcModRxTopDropIfIndexList, cshcNetflowFlowMaskTable=cshcNetflowFlowMaskTable, cshcNetflowResourceUsageUsed=cshcNetflowResourceUsageUsed, cshcNetflowFlowMaskIndex=cshcNetflowFlowMaskIndex, cshcProtocolFibTcamUsed=cshcProtocolFibTcamUsed, cshcProtocolFibTcamWidthTypeGroup=cshcProtocolFibTcamWidthTypeGroup, cshcMacUsageExtGroup=cshcMacUsageExtGroup, cshcInterfaceReceiveBufferSize=cshcInterfaceReceiveBufferSize, cshcNetflowResourceUsageIndex=cshcNetflowResourceUsageIndex, cshcQosResourceUsageTable=cshcQosResourceUsageTable, cshcQosResourceUsageEntry=cshcQosResourceUsageEntry, cshcIntlChnlRxTotalPackets=cshcIntlChnlRxTotalPackets, ciscoSwitchHardwareCapacityMIBCompliance1=ciscoSwitchHardwareCapacityMIBCompliance1, ciscoSwitchHardwareCapacityMIBCompliance=ciscoSwitchHardwareCapacityMIBCompliance, cshcInternalChannelGroup=cshcInternalChannelGroup, cshcModuleInterfaceDropsTable=cshcModuleInterfaceDropsTable, cshcVpnCamUsageGroup=cshcVpnCamUsageGroup, cshcFibTcamUsageTable=cshcFibTcamUsageTable, cshcL2Forwarding=cshcL2Forwarding, cshcFibTcamUsageEntry=cshcFibTcamUsageEntry, cshcMacMcast=cshcMacMcast, cshcIcamResourcesGroup=cshcIcamResourcesGroup, cshcModuleInterfaceDropsGroup=cshcModuleInterfaceDropsGroup, cshcCPURateLimiterUsed=cshcCPURateLimiterUsed, cshcProtocolFibTcamProtocol=cshcProtocolFibTcamProtocol, cshcMetResourceUsageGroup=cshcMetResourceUsageGroup, cshcIcamFailed=cshcIcamFailed, ciscoSwitchHardwareCapacityMIB=ciscoSwitchHardwareCapacityMIB, cshcNetflowResourceUsage=cshcNetflowResourceUsage, cshcMacTotal=cshcMacTotal, cshcCPURateLimiterReserved=cshcCPURateLimiterReserved, cshcQosResourceUsageGroup=cshcQosResourceUsageGroup, cshcMetResourceTotal=cshcMetResourceTotal, cshcMacUsed=cshcMacUsed, cshcInternalChannelTable=cshcInternalChannelTable, cshcNetflowResourceUsageTable=cshcNetflowResourceUsageTable, cshcQosResourceType=cshcQosResourceType, ciscoSwitchHardwareCapacityMIBCompliances=ciscoSwitchHardwareCapacityMIBCompliances, cshcNetflowResourceUsageFree=cshcNetflowResourceUsageFree, cshc144bitsFibTcamUsed=cshc144bitsFibTcamUsed, cshcNetflowResourceUsageDescr=cshcNetflowResourceUsageDescr, cshcModRxTotalDroppedPackets=cshcModRxTotalDroppedPackets, cshcAdjacencyResourceTotal=cshcAdjacencyResourceTotal, cshcProtocolFibTcamLogicalUsed=cshcProtocolFibTcamLogicalUsed, cshcIntlChnlTxDroppedPackets=cshcIntlChnlTxDroppedPackets, cshcIcamUtilizationTable=cshcIcamUtilizationTable, cshcCPURateLimiterResources=cshcCPURateLimiterResources, cshcNetflowFlowMaskFeature=cshcNetflowFlowMaskFeature, cshcProtocolFibTcamUsageExtGroup=cshcProtocolFibTcamUsageExtGroup, cshcMacLinesFull=cshcMacLinesFull, cshcProtocolFibTcamLogicalTotal=cshcProtocolFibTcamLogicalTotal, cshcMetResourceUsageTable=cshcMetResourceUsageTable, cshcNetflowFlowMaskType=cshcNetflowFlowMaskType)
