#
# PySNMP MIB module XYLAN-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, iso, Gauge32, Counter64, ModuleIdentity, MibIdentifier, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, NotificationType, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Gauge32", "Counter64", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "NotificationType", "Unsigned32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanSonetArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanSonetArch")
xylanSonetErrConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 23, 1))
xylanSonetTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 23, 1, 1), )
if mibBuilder.loadTexts: xylanSonetTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetTable.setDescription('The SONET error statistics gathering configuration table.')
xylanSonetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 23, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xylanSonetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetEntry.setDescription('An entry in the SONET/SDH Medium table.')
xylanSonetStatsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 23, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanSonetStatsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetStatsEnable.setDescription('A value that indicates whether the SONET error statistics is enabled or not.')
xylanSonetNumOfSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 23, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanSonetNumOfSamples.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetNumOfSamples.setDescription('The number of samples to be stored in the interval tables. This variable can be set only if Sonet Error Collection is enabled on the interface.')
xylanSonetClearCurrentSample = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 23, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanSonetClearCurrentSample.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetClearCurrentSample.setDescription('This variable indicates which layer error statistics are to be cleared. When this variable is set, the corresponding current interval sample will be cleared. The xylanSonetClearCurrentSample is a bit map represented as a sum. So multiple tables can be cleared by one set. The bit positions are : 0 None 1 Section 2 Line 4 FarEndLine 8 Path 16 FarEndPath 31 All')
xylanSonetErrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 23, 3))
xylanSonetSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 23, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: xylanSonetSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetSlotIndex.setDescription('A unique value which identifies this switch slot.')
xylanSonetPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 23, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: xylanSonetPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetPortIndex.setDescription('A unique value which identifies this switch slot/port.')
xylanSonetHardwareIndex = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 23, 3, 3), Integer32())
if mibBuilder.loadTexts: xylanSonetHardwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetHardwareIndex.setDescription('A unique value which identifies the hardware on the switch slot/port where the error has occured')
xylanSonetErrType = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 23, 3, 4), Integer32())
if mibBuilder.loadTexts: xylanSonetErrType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanSonetErrType.setDescription('A unique value which identifies the type of AIS error that has occured on the Sonet hardware.')
mibBuilder.exportSymbols("XYLAN-SONET-MIB", xylanSonetClearCurrentSample=xylanSonetClearCurrentSample, xylanSonetErrType=xylanSonetErrType, xylanSonetErrConfig=xylanSonetErrConfig, xylanSonetNumOfSamples=xylanSonetNumOfSamples, xylanSonetHardwareIndex=xylanSonetHardwareIndex, xylanSonetPortIndex=xylanSonetPortIndex, xylanSonetErrGroup=xylanSonetErrGroup, xylanSonetStatsEnable=xylanSonetStatsEnable, xylanSonetEntry=xylanSonetEntry, xylanSonetTable=xylanSonetTable, xylanSonetSlotIndex=xylanSonetSlotIndex)
