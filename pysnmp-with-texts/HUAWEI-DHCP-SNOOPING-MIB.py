#
# PySNMP MIB module HUAWEI-DHCP-SNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DHCP-SNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanIdOrNone, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone", "VlanId")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, Counter32, IpAddress, iso, Gauge32, ModuleIdentity, Unsigned32, NotificationType, MibIdentifier, Counter64, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "IpAddress", "iso", "Gauge32", "ModuleIdentity", "Unsigned32", "NotificationType", "MibIdentifier", "Counter64", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "TimeTicks")
TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
class HWVlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header. When the value is 0, it means do not belong to a VLAN.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4094)

class HWMatchMode(TextualConvention, Integer32):
    description = ' The VLAN mode of DHCP packets matched in the snooping bind table. PVLAN(1), CVLAN(2), all(3) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pvlan", 1), ("cvlan", 2), ("all", 3))

class HWTransmitAction(TextualConvention, Integer32):
    description = ' The action of specific color packet. discard (1) pass (2) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("discard", 1), ("pass", 2))

hwDhcpSnpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112))
hwDhcpSnpMib.setRevisions(('2014-07-18 00:00', '2014-01-27 00:00', '2013-06-19 18:00', '2006-09-16 18:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwDhcpSnpMib.setRevisionsDescriptions(('This MIB describes objects used for DHCP Snooping.', 'This revision adds MIB trap of bridge domain.', "This MIB describes objects used for DHCP Snooping,including configuring snooping,creating snooping bind table and collecting false packets' statistic information. When the system is attacked, some traps will be given.", 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwDhcpSnpMib.setLastUpdated('201407180000Z')
if mibBuilder.loadTexts: hwDhcpSnpMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwDhcpSnpMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwDhcpSnpMib.setDescription('This MIB describes objects used for DHCP Snooping.')
hwDhcpSnpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1))
hwDhcpSnpGlobal = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobal.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobal.setDescription('The Global Snooping. Enable this before you want to enable the port,vlan,other interfaces snooping,default is disable. ')
hwDhcpPktRateCheck = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpPktRateCheck.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktRateCheck.setDescription('Whether to check the rate of DHCP packets received,default is disabling. ')
hwDhcpPktRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpPktRate.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktRate.setDescription('The area of Dhcp packets received rate,default is 100. ')
hwDhcpPktRateAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpPktRateAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktRateAlarmThreshold.setDescription('The threshold of the DHCP packets rate Alarm. When the actual rate beyond the maximum rate configured and reach this threshold once, there will be a notification can be sent at the same time,default is 100. ')
hwDhcpPktRateAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpPktRateAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktRateAlarmEnable.setDescription('Whether to send the DHCP packets rate alarm when the actual rate beyond the maximum rate configured and reach the rate threshold,default is disabling. ')
hwDhcpSnpBindTblNomatchedArpGlobalAction = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("discard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedArpGlobalAction.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedArpGlobalAction.setDescription('How to deal with the ARP packets that do not match the DHCP snooping bind table in global view,default is forward. ')
hwDhcpSnpBindTblNomatchedIpGlobalAction = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("discard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedIpGlobalAction.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedIpGlobalAction.setDescription('How to deal with the Ip packets that do not match the DHCP snooping bind table in global view,default is forward. ')
hwDhcpSnpBindTblAutosaveFilename = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 51))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpBindTblAutosaveFilename.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblAutosaveFilename.setDescription("Auto save file name. Make sure the disk name have been given, and the file must be named with '.tbl' postfixally. ")
hwDhcpSnpBindTblAutosave = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpBindTblAutosave.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblAutosave.setDescription('Whether to save snooping bind table,default is disabling . ')
hwDhcpSnpGlobalThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalThreshold.setDescription('DHCP snooping global threshold,default is disabling. ')
hwDhcpPktRateDiscardNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpPktRateDiscardNum.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktRateDiscardNum.setDescription('DHCP packets that discarded for the rate limit. ')
hwDhcpSnpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13), )
if mibBuilder.loadTexts: hwDhcpSnpCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCfgTable.setDescription('The DHCP snooping configuration table. ')
hwDhcpSnpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1), ).setIndexNames((0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpIfIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpVlanIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpVsiIndex"))
if mibBuilder.loadTexts: hwDhcpSnpCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCfgEntry.setDescription('An entry in the snooping configuration table.')
hwDhcpSnpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwDhcpSnpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpIfIndex.setDescription('The interface index.')
hwDhcpSnpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 2), VlanIdOrNone())
if mibBuilder.loadTexts: hwDhcpSnpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpVlanIndex.setDescription(' The VLAN-ID or other identifier referring to this VLAN.')
hwDhcpSnpVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hwDhcpSnpVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpVsiIndex.setDescription(' The VSI ID.')
hwDhcpSnpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpEnable.setDescription('Whether to enable snooping on this interface/VLAN. ')
hwDhcpTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("trusted", 1), ("untrusted", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpTrusted.setStatus('current')
if mibBuilder.loadTexts: hwDhcpTrusted.setDescription('This interface/VLAN is trusted or distrusted. When enabled the snooping, it turns to distrusted as default until be changed.')
hwDhcpOption82Insert = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpOption82Insert.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOption82Insert.setDescription('Whether to insert Option82 to DHCP packets. ')
hwDhcpOption82Rebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpOption82Rebuild.setStatus('current')
if mibBuilder.loadTexts: hwDhcpOption82Rebuild.setDescription('Whether to rebuild the Option82 in DHCP packets. ')
hwDhcpChaddrCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpChaddrCheck.setStatus('current')
if mibBuilder.loadTexts: hwDhcpChaddrCheck.setDescription('Whether to enable check Chaddr in DHCP packets with source Mac-address in Ethernet frame. ')
hwDhcpChaddrAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpChaddrAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpChaddrAlarmThreshold.setDescription('The threshold of Chaddr check alarm. A trap can be sent when the chaddr-false DHCP packets count beyond it.')
hwDhcpChaddrAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpChaddrAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpChaddrAlarmEnable.setDescription("Whether to send chaddr trap when its' count beyond the threshold. ")
hwDhcpArpCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpArpCheck.setStatus('current')
if mibBuilder.loadTexts: hwDhcpArpCheck.setDescription('Whether to enable check ARP packets with the snooping bind table. ')
hwDhcpSnpBindTblNomatchedArpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("discard", 1))).clone('discard')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedArpAction.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedArpAction.setDescription('How to deal with the ARP packets that do not match the DHCP snooping bind table in port/VLAN view. ')
hwDhcpArpAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpArpAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpArpAlarmThreshold.setDescription('The threshold of ARP check alarm. A trap can be sent when the false ARP packets discarded count beyond it. ')
hwDhcpArpAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpArpAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpArpAlarmEnable.setDescription('Whether to send Arp trap when its count beyond the threshold. ')
hwDhcpIpCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpIpCheck.setStatus('current')
if mibBuilder.loadTexts: hwDhcpIpCheck.setDescription('Whether to enable check Ip packets with the snooping bind table. ')
hwDhcpSnpBindTblNomatchedIpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("discard", 1))).clone('discard')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedIpAction.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblNomatchedIpAction.setDescription('How to deal with the Ip packets that do not match the DHCP snooping bind table in port/VLAN view. ')
hwDhcpIpAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpIpAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpIpAlarmThreshold.setDescription('The threshold of IP check alarm. A trap can be sent when the false IP packets count beyond it. ')
hwDhcpIpAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpIpAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpIpAlarmEnable.setDescription('Whether to send IP trap when its count beyond the threshold. ')
hwDhcpUntrustReplyAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpUntrustReplyAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpUntrustReplyAlarmThreshold.setDescription('The threshold of DHCP reply packets check alarm. A trap can be sent when the DHCP reply packets count on untrusted interface/VLAN beyond it. ')
hwDhcpUntrustReplyAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpUntrustReplyAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpUntrustReplyAlarmEnable.setDescription('Whether to send distrust DHCP reply trap when its count beyond the threshold. ')
hwDhcpSnpBindTblCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpBindTblCheck.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblCheck.setDescription('Whether to check DHCP request packets with the snooping bind table. ')
hwDhcpSnpBindTblAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpBindTblAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblAlarmThreshold.setDescription('The threshold of DHCP request packets checking alarm with the snooping bind table. ')
hwDhcpSnpBindTblAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpBindTblAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTblAlarmEnable.setDescription('Whether to send the snooping bind table alarm when beyond its threshold. ')
hwDhcpSnpMatchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 25), HWMatchMode().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpMatchMode.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpMatchMode.setDescription(' Setting the VLAN mode of the dhcp packets matched in the bind table. PVLAN(1), CVLAN(2), all(3) ')
hwDhcpSnpDynamicItemCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("ip", 1), ("ipMac", 2), ("ipInterface", 3), ("ipMacInterface", 4), ("undo", 0))).clone('ipMacInterface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpDynamicItemCheck.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpDynamicItemCheck.setDescription('Check items of Dynamic DHCP snooping binding table by IP address or Mac-address or interface. ')
hwDhcpSnpMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpMaxUserNum.setDescription('MaxUserNumber: the limitation of the user number on the interface.')
hwDhcpSnpUserLimitAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpUserLimitAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpUserLimitAlarmThreshold.setDescription('The threshold of user-number limitation. A trap can be sent when the current binding-items exceed it.')
hwDhcpSnpUserLimitAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enable", 1), ("disable", 0))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpUserLimitAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpUserLimitAlarmEnable.setDescription('Whether to send trap when the binding item number exceeds the threshold. ')
hwDhcpSnpCfgTblRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCfgTblRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCfgTblRowStatus.setDescription('The snooping configuration table row status.')
hwDhcpPktIfRateCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 31), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpPktIfRateCheck.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktIfRateCheck.setDescription('Whether to limit the rate of DHCP packets received on the interface. ')
hwDhcpPktIfRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpPktIfRate.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktIfRate.setDescription('The area of DHCP packets received rate on the interface. ')
hwDhcpPktIfRateAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpPktIfRateAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktIfRateAlarmThreshold.setDescription('The threshold of the DHCP packets rate Alarm on the interface. When the actual rate beyond the maximum rate configured and reach this threshold once, there will be a notification can be sent at the same time. ')
hwDhcpPktIfRateAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 34), EnabledStatus().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpPktIfRateAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktIfRateAlarmEnable.setDescription('Whether to send the DHCP packets rate alarm when the actual rate beyond the maximum rate configured and reach the rate threshold on the interface. ')
hwDhcpSnpIfVlanOption82RemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpIfVlanOption82RemoteId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpIfVlanOption82RemoteId.setDescription('Specify the remote ID in the Option 82 field. ')
hwDhcpSnpIfVlanOption82CircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 13, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpIfVlanOption82CircuitId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpIfVlanOption82CircuitId.setDescription('Specify the circuit ID in the Option 82 field.')
hwDhcpSnpBindTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14), )
if mibBuilder.loadTexts: hwDhcpSnpBindTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindTable.setDescription('The snooping bind table.You must give out (1)one of the interface index, VLANID and VSIID at least (2)the Mac-address,ip-address,static type if you want to create a static bind row of the table, dynamic can not be created.')
hwDhcpSnpBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1), ).setIndexNames((0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindIpIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindPVlanIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindCVlanIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindVRFIdIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindVsiIndex"))
if mibBuilder.loadTexts: hwDhcpSnpBindEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindEntry.setDescription('An entry in the snooping bind table.')
hwDhcpSnpBindIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwDhcpSnpBindIpIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindIpIndex.setDescription('Index: the IP of the bind table.')
hwDhcpSnpBindPVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 2), VlanId())
if mibBuilder.loadTexts: hwDhcpSnpBindPVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindPVlanIndex.setDescription('Index: the P-VLAN of the bind table.')
hwDhcpSnpBindCVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 3), VlanId())
if mibBuilder.loadTexts: hwDhcpSnpBindCVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindCVlanIndex.setDescription('Index: the C-VLAN of the bind table.')
hwDhcpSnpBindVRFIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: hwDhcpSnpBindVRFIdIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindVRFIdIndex.setDescription('Index: the VRFID of the bind table.')
hwDhcpSnpBindVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hwDhcpSnpBindVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindVsiIndex.setDescription('Index: the VSI of the bind table.')
hwDhcpSnpBindIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindIfDescr.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindIfDescr.setDescription('The description of the interfaces that bound.')
hwDhcpSnpBindPVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 7), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindPVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindPVlanId.setDescription('The PVLAN Id.')
hwDhcpSnpBindCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 8), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindCVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindCVlanId.setDescription('The CVLAN Id.')
hwDhcpSnpBindVRFId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindVRFId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindVRFId.setDescription('The VRFID for L3VPN.')
hwDhcpSnpBindVsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindVsiId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindVsiId.setDescription('The VSI for L2VPN.')
hwDhcpSnpBindMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindMac.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindMac.setDescription('Mac-address bind. Value of hwDhcpSnpBindMac is optional, if you did not specify hwDhcpSnpBindMac any value when you created, invalid value 0 is returned after you perform Get operation of hwDhcpSnpBindMac.')
hwDhcpSnpBindIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindIp.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindIp.setDescription('Ip-address bind.')
hwDhcpSnpBindStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindStatus.setDescription('The bind status:dynamic(1) or static(2).')
hwDhcpSnpBindLease = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpBindLease.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindLease.setDescription('The time of the dynamic bind lease to be end.')
hwDhcpSnpBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 14, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindRowStatus.setDescription('The snooping bind table row status.')
hwDhcpSnpFalsePktStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15), )
if mibBuilder.loadTexts: hwDhcpSnpFalsePktStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpFalsePktStatisticTable.setDescription('The false packets statistic information table.')
hwDhcpSnpFalsePktStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1), ).setIndexNames((0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpIfIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpVlanIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpVsiIndex"))
if mibBuilder.loadTexts: hwDhcpSnpFalsePktStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpFalsePktStatisticEntry.setDescription('An entry in the snooping false packets statistic information table.')
hwDhcpSnpStatisticIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpStatisticIfDescr.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStatisticIfDescr.setDescription('The description of the interfaces.')
hwDhcpSnpStatisticVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 2), VlanIdOrNone()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpStatisticVlanId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStatisticVlanId.setDescription('The VLAN Id.')
hwChaddrNomatchSrcMacDhcpPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChaddrNomatchSrcMacDhcpPktNum.setStatus('current')
if mibBuilder.loadTexts: hwChaddrNomatchSrcMacDhcpPktNum.setDescription('The false packets(chaddr in DHCP packets is not same with source Mac-address in Ethernet frame) count.')
hwArpNomatchSnpBindTblPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwArpNomatchSnpBindTblPktNum.setStatus('current')
if mibBuilder.loadTexts: hwArpNomatchSnpBindTblPktNum.setDescription('The false ARP packets match in snooping bind table count.')
hwIpNomatchSnpBindTblPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpNomatchSnpBindTblPktNum.setStatus('current')
if mibBuilder.loadTexts: hwIpNomatchSnpBindTblPktNum.setDescription('The false IP packets do not match snooping bind table count.')
hwNomatchSnpBindTblDhcpPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNomatchSnpBindTblDhcpPktNum.setStatus('current')
if mibBuilder.loadTexts: hwNomatchSnpBindTblDhcpPktNum.setDescription('The DHCP request packets do not match the snooping bind table.')
hwUntrustedReplyPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUntrustedReplyPktNum.setStatus('current')
if mibBuilder.loadTexts: hwUntrustedReplyPktNum.setDescription('The distrusted port DHCP reply packets count.')
hwDhcpSnpStatisticVsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4095), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpSnpStatisticVsiId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStatisticVsiId.setDescription('The VSI for L2VPN.')
hwSnpBindingItemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSnpBindingItemNum.setStatus('current')
if mibBuilder.loadTexts: hwSnpBindingItemNum.setDescription('The number of current binding-table items.')
hwSnpCfgMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSnpCfgMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwSnpCfgMaxUserNum.setDescription('The limitation of the user number on the interface.')
hwDhcpPktIfRateDiscardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpPktIfRateDiscardNum.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktIfRateDiscardNum.setDescription('DHCP packets that discarded for the rate limit on the interface. ')
hwDhcpSnpCarCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16), )
if mibBuilder.loadTexts: hwDhcpSnpCarCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarCfgTable.setDescription(' The DHCP Snooping CAR table for control of the traffic. The CAR is based on IP and Mac, but configured with interface and VLAN.')
hwDhcpSnpCarCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1), ).setIndexNames((0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpIfIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpVlanIndex"))
if mibBuilder.loadTexts: hwDhcpSnpCarCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarCfgEntry.setDescription('An entry in the DHCP Snooping CAR table.')
hwDhcpSnpCarEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 11), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCarEnable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarEnable.setDescription(' Whether to apply CAR on the traffic of specific IP and Mac')
hwDhcpSnpCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCarCir.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarCir.setDescription('Committed infomation rate.Unit:kbps.')
hwDhcpSnpCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 10000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCarPir.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarPir.setDescription('Peak information rate.Unit:kbps.')
hwDhcpSnpCaCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 39314432)).clone(32768)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCaCbs.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCaCbs.setDescription('Committed burst size.Unit:Byte')
hwDhcpSnpCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 39314432)).clone(65536)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCarPbs.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarPbs.setDescription('Peak burst size.Unit:Byte')
hwDhcpSnpCarYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 16), HWTransmitAction().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCarYellow.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarYellow.setDescription('Yellow action: pass (1) discard (2)')
hwDhcpSnpCarRed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 17), HWTransmitAction().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCarRed.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarRed.setDescription('Red action: pass (1) discard (2)')
hwDhcpSnpCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 16, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCarRowStatus.setDescription('The DHCP Snooping CAR table row status.')
hwDhcpSnpGlobalOption82Format = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex", 1), ("ascii", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82Format.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82Format.setDescription('The format type of Option82,default is hex. ')
hwDhcpSnpGlobalOption82PacketFormat = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extended", 1), ("standard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PacketFormat.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PacketFormat.setDescription('The format mode of Option82,default is extended. ')
hwDhcpSnpGlobalOption82RemoteId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82RemoteId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82RemoteId.setDescription('Option82 global remote ID. ')
hwDhcpSnpGlobalOption82RemoteIdSysName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 20), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82RemoteIdSysName.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82RemoteIdSysName.setDescription('Config Option82 global remote ID as system name,default is disabled. ')
hwDhcpSnpGlobalOption82CircuitId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82CircuitId.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82CircuitId.setDescription('Option82 global circuit ID.')
hwDhcpSnpGlobalOption82PktFormatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 22), )
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PktFormatTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PktFormatTable.setDescription('A table about the packet format of option82.')
hwDhcpSnpGlobalOption82PktFormatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 22, 1), ).setIndexNames((0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82Type"))
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PktFormatEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PktFormatEntry.setDescription('An entry about the packet format of option82.')
hwDhcpSnpGlobalOption82Type = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("circuitid", 1), ("remoteid", 2))))
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82Type.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82Type.setDescription(' The option of the option82')
hwDhcpSnpGlobalOption82PktFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("common", 1), ("extend", 2), ("userdefined", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PktFormat.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82PktFormat.setDescription('The format of the option82')
hwDhcpSnpGlobalOption82DefString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82DefString.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpGlobalOption82DefString.setDescription('The content of the option when the format is user defined.')
hwDhcpSnpStaticBindTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23), )
if mibBuilder.loadTexts: hwDhcpSnpStaticBindTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindTable.setDescription('The snooping static bind table.')
hwDhcpSnpStaticBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23, 1), ).setIndexNames((0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStaticBindIpIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStaticBindMacIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStaticBindPVlanIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStaticBindCVlanIndex"), (0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStaticBindIfIndex"))
if mibBuilder.loadTexts: hwDhcpSnpStaticBindEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindEntry.setDescription('An entry in the snooping static bind table.')
hwDhcpSnpStaticBindIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23, 1, 1), IpAddress())
if mibBuilder.loadTexts: hwDhcpSnpStaticBindIpIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindIpIndex.setDescription('Index: the IP of the bind table.')
hwDhcpSnpStaticBindMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23, 1, 2), MacAddress())
if mibBuilder.loadTexts: hwDhcpSnpStaticBindMacIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindMacIndex.setDescription('Index: the MAC of the bind table.')
hwDhcpSnpStaticBindPVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23, 1, 3), VlanId())
if mibBuilder.loadTexts: hwDhcpSnpStaticBindPVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindPVlanIndex.setDescription('Index: the P-VLAN of the bind table.')
hwDhcpSnpStaticBindCVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23, 1, 4), VlanId())
if mibBuilder.loadTexts: hwDhcpSnpStaticBindCVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindCVlanIndex.setDescription('Index: the C-VLAN of the bind table.')
hwDhcpSnpStaticBindIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23, 1, 5), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwDhcpSnpStaticBindIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindIfIndex.setDescription('Index: the interface index of the bind table.')
hwDhcpSnpStaticBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 23, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpSnpStaticBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStaticBindRowStatus.setDescription('The static snooping bind table row status.')
hwDhcpSnpServerDetectStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 24), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpSnpServerDetectStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpServerDetectStatus.setDescription('This object indicates whether detection against the pseudo DHCP server is enabled. The default value is disabled(2).')
hwDhcpSnpBdFalsePktTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25), )
if mibBuilder.loadTexts: hwDhcpSnpBdFalsePktTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBdFalsePktTable.setDescription('The false packets statistic information table.')
hwDhcpSnpBdFalsePktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1), ).setIndexNames((0, "HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBdIndex"))
if mibBuilder.loadTexts: hwDhcpSnpBdFalsePktEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBdFalsePktEntry.setDescription('An entry in the snooping false packets statistic information table.')
hwDhcpSnpBdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)))
if mibBuilder.loadTexts: hwDhcpSnpBdIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBdIndex.setDescription('Bridge-domain ID.')
hwBdNomatchSnpBindTblDhcpPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBdNomatchSnpBindTblDhcpPktNum.setStatus('current')
if mibBuilder.loadTexts: hwBdNomatchSnpBindTblDhcpPktNum.setDescription('The DHCP request packets do not match the snooping bind table of the bridge domain.')
hwBdChaddrNomatchSrcMacDhcpPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBdChaddrNomatchSrcMacDhcpPktNum.setStatus('current')
if mibBuilder.loadTexts: hwBdChaddrNomatchSrcMacDhcpPktNum.setDescription('The false packets(chaddr in DHCP packets is not same with source Mac-address in Ethernet frame) count of the bridge domain.')
hwBdArpNomatchSnpBindTblPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBdArpNomatchSnpBindTblPktNum.setStatus('current')
if mibBuilder.loadTexts: hwBdArpNomatchSnpBindTblPktNum.setDescription('The false ARP packets match in snooping bind table count of the bridge domain.')
hwBdIpNomatchSnpBindTblPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBdIpNomatchSnpBindTblPktNum.setStatus('current')
if mibBuilder.loadTexts: hwBdIpNomatchSnpBindTblPktNum.setDescription('The false IP packets do not match snooping bind table count of the bridge domain.')
hwBdUntrustedReplyPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBdUntrustedReplyPktNum.setStatus('current')
if mibBuilder.loadTexts: hwBdUntrustedReplyPktNum.setDescription('The distrusted port DHCP reply packets count of the bridge domain.')
hwBdSnpBindingItemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBdSnpBindingItemNum.setStatus('current')
if mibBuilder.loadTexts: hwBdSnpBindingItemNum.setDescription('The number of current binding-table items of the bridge domain.')
hwBdSnpCfgMaxUserNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 1, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBdSnpCfgMaxUserNum.setStatus('current')
if mibBuilder.loadTexts: hwBdSnpCfgMaxUserNum.setDescription('The limitation of the user number of the bridge domain.')
hwDhcpSnpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2))
hwDhcpSnpChaddrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 1)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwChaddrNomatchSrcMacDhcpPktNum"))
if mibBuilder.loadTexts: hwDhcpSnpChaddrAlarm.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpChaddrAlarm.setDescription('CHADDR in Dhcp packets do not match source Mac-address in Ethernet frame. ')
hwArpNomatchSnpBindTblPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 2)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwArpNomatchSnpBindTblPktNum"))
if mibBuilder.loadTexts: hwArpNomatchSnpBindTblPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwArpNomatchSnpBindTblPktAlarm.setDescription('Arp packets do not match the snooping bind table.')
hwIpNomatchSnpBindTblPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 3)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwIpNomatchSnpBindTblPktNum"))
if mibBuilder.loadTexts: hwIpNomatchSnpBindTblPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwIpNomatchSnpBindTblPktAlarm.setDescription('Ip packets do not match the snooping bind table. ')
hwUntrustedReplyPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 4)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwUntrustedReplyPktNum"))
if mibBuilder.loadTexts: hwUntrustedReplyPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUntrustedReplyPktAlarm.setDescription('Untrusted ports have received the Dhcp reply packets.')
hwNomatchSnpBindTblDhcpPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 5)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNomatchSnpBindTblDhcpPktNum"))
if mibBuilder.loadTexts: hwNomatchSnpBindTblDhcpPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwNomatchSnpBindTblDhcpPktAlarm.setDescription('There are Dhcp request packets do not match the snooping bind table.')
hwDhcpPktRateAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 6)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktRateDiscardNum"))
if mibBuilder.loadTexts: hwDhcpPktRateAlarm.setStatus('current')
if mibBuilder.loadTexts: hwDhcpPktRateAlarm.setDescription('The rate of Dhcp packets received is too large.')
hwSnpUserNumberAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 7)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarm.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarm.setDescription('The number of the binding items exceeds the threshold of user-limit on the interface.')
hwSnpUserNumberAlarmIf = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 8)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarmIf.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarmIf.setDescription('The number of DHCP user on the interface exceeds alarm threshold.')
hwSnpUserNumberAlarmIfResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 9)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarmIfResume.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarmIfResume.setDescription('The number of DHCP user on the interface descends to alarm threshold.')
hwSnpUserNumberAlarmVlan = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 10)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarmVlan.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarmVlan.setDescription('The number of DHCP user on the vlan exceeds alarm threshold.')
hwSnpUserNumberAlarmVlanResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 11)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarmVlanResume.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarmVlanResume.setDescription('The number of DHCP user on the vlan descends to alarm threshold.')
hwSnpUserNumberAlarmGlobal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 12)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarmGlobal.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarmGlobal.setDescription('The number of DHCP global user exceeds alarm threshold.')
hwSnpUserNumberAlarmGlobalResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 13)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarmGlobalResume.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarmGlobalResume.setDescription('The number of DHCP global user descends to alarm threshold.')
hwNdSnpUserNumberAlarmIf = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 14)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmIf.setStatus('current')
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmIf.setDescription('The number of ND user on the interface exceeds alarm threshold.')
hwNdSnpUserNumberAlarmIfResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 15)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmIfResume.setStatus('current')
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmIfResume.setDescription('The number of ND user on the interface descends to alarm threshold.')
hwNdSnpUserNumberAlarmGlobal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 16)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmGlobal.setStatus('current')
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmGlobal.setDescription('The number of ND global user exceeds alarm threshold.')
hwNdSnpUserNumberAlarmGlobalResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 17)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmGlobalResume.setStatus('current')
if mibBuilder.loadTexts: hwNdSnpUserNumberAlarmGlobalResume.setDescription('The number of ND global user descends to alarm threshold.')
hwBdNomatchSnpBindTblDhcpPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 18)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwBdNomatchSnpBindTblDhcpPktNum"))
if mibBuilder.loadTexts: hwBdNomatchSnpBindTblDhcpPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBdNomatchSnpBindTblDhcpPktAlarm.setDescription('There are Dhcp request packets do not match the snooping bind table on the bridge domain.')
hwBdDhcpSnpChaddrAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 19)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwBdChaddrNomatchSrcMacDhcpPktNum"))
if mibBuilder.loadTexts: hwBdDhcpSnpChaddrAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBdDhcpSnpChaddrAlarm.setDescription('CHADDR in Dhcp packets do not match source Mac-address in Ethernet frame on the bridge domain.')
hwBdArpNomatchSnpBindTblPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 20)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwBdArpNomatchSnpBindTblPktNum"))
if mibBuilder.loadTexts: hwBdArpNomatchSnpBindTblPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBdArpNomatchSnpBindTblPktAlarm.setDescription('Arp packets do not match the snooping bind table on the bridge domain.')
hwBdIpNomatchSnpBindTblPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 21)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwBdIpNomatchSnpBindTblPktNum"))
if mibBuilder.loadTexts: hwBdIpNomatchSnpBindTblPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBdIpNomatchSnpBindTblPktAlarm.setDescription('Ip packets do not match the snooping bind table on the bridge domain.')
hwBdUntrustedReplyPktAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 22)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwBdUntrustedReplyPktNum"))
if mibBuilder.loadTexts: hwBdUntrustedReplyPktAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBdUntrustedReplyPktAlarm.setDescription('Untrusted ports have received the Dhcp reply packets on the bridge domain.')
hwBdSnpUserNumberAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 23)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwBdSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwBdSnpUserNumberAlarm.setStatus('current')
if mibBuilder.loadTexts: hwBdSnpUserNumberAlarm.setDescription('The number of the binding items exceeds the threshold of user-limit on the bridge domain.')
hwDhcpSnpChaddrAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 24)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwChaddrNomatchSrcMacDhcpPktNum"))
if mibBuilder.loadTexts: hwDhcpSnpChaddrAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpChaddrAlarmResume.setDescription('The number of the discarded DHCP packets in which the CHADDR field is inconsistent with the source MAC address descends to the threshold on the interface.')
hwArpNomatchSnpBindTblPktAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 25)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwArpNomatchSnpBindTblPktNum"))
if mibBuilder.loadTexts: hwArpNomatchSnpBindTblPktAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwArpNomatchSnpBindTblPktAlarmResume.setDescription('The number of the discarded ARP packets that do not match the binding table descends to the threshold on the interface.')
hwIpNomatchSnpBindTblPktAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 26)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwIpNomatchSnpBindTblPktNum"))
if mibBuilder.loadTexts: hwIpNomatchSnpBindTblPktAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwIpNomatchSnpBindTblPktAlarmResume.setDescription('The number of the discarded IP packets that do not match the binding table descends to the threshold on the interface.')
hwUntrustedReplyPktAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 27)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwUntrustedReplyPktNum"))
if mibBuilder.loadTexts: hwUntrustedReplyPktAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwUntrustedReplyPktAlarmResume.setDescription('The number of the discarded DHCP reply packets on the untrusted interface descends to the threshold.')
hwNomatchSnpBindTblDhcpPktAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 28)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNomatchSnpBindTblDhcpPktNum"))
if mibBuilder.loadTexts: hwNomatchSnpBindTblDhcpPktAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwNomatchSnpBindTblDhcpPktAlarmResume.setDescription('The number of the discarded DHCP request packets that do not match the binding table descends to the threshold on the interface.')
hwSnpUserNumberAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 2, 29)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"))
if mibBuilder.loadTexts: hwSnpUserNumberAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwSnpUserNumberAlarmResume.setDescription('The number of the binding items descends to the threshold of user-limit on the interface.')
hwDhcpSnpCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 3))
hwDhcpSnpMibGroups = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 3, 1)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCfgGroup"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindGroup"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticGroup"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpSnpMibGroups = hwDhcpSnpMibGroups.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpMibGroups.setDescription('The compliance statement for systems supporting this module.')
hwDhcpSnpCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 3, 1, 1)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobal"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktRateCheck"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktRate"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktRateAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktRateAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblNomatchedArpGlobalAction"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblNomatchedIpGlobalAction"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblAutosaveFilename"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblAutosave"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpTrusted"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpOption82Insert"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpOption82Rebuild"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpChaddrCheck"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpChaddrAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpChaddrAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpArpCheck"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblNomatchedArpAction"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpArpAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpArpAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpIpCheck"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblNomatchedIpAction"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpIpAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpIpAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpUntrustReplyAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpUntrustReplyAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblCheck"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindTblAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpMatchMode"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpDynamicItemCheck"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpMaxUserNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpUserLimitAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpUserLimitAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCfgTblRowStatus"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktIfRateCheck"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktIfRate"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktIfRateAlarmThreshold"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktIfRateAlarmEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpIfVlanOption82RemoteId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpIfVlanOption82CircuitId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCarEnable"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCarCir"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCarPir"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCaCbs"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCarPbs"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCarYellow"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCarRed"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82Format"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82PacketFormat"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82RemoteId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82RemoteIdSysName"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82CircuitId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82PktFormat"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpGlobalOption82DefString"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpCarRowStatus"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpServerDetectStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpSnpCfgGroup = hwDhcpSnpCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpCfgGroup.setDescription("The DHCPSNP's Configuration group.")
hwDhcpSnpBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 3, 1, 2)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindPVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindCVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindVRFId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindMac"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindVsiId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindIp"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindStatus"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindLease"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBindRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpSnpBindGroup = hwDhcpSnpBindGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBindGroup.setDescription("The DHCPSNP's Bind group.")
hwDhcpSnpStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 3, 1, 3)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticIfDescr"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVlanId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwChaddrNomatchSrcMacDhcpPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwArpNomatchSnpBindTblPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwIpNomatchSnpBindTblPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNomatchSnpBindTblDhcpPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwUntrustedReplyPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktRateDiscardNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpStatisticVsiId"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpCfgMaxUserNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktIfRateDiscardNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpSnpStatisticGroup = hwDhcpSnpStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpStatisticGroup.setDescription("The DHCPSNP's Statistic group.")
hwDhcpSnpTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 3, 1, 4)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpChaddrAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwArpNomatchSnpBindTblPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwIpNomatchSnpBindTblPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwUntrustedReplyPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNomatchSnpBindTblDhcpPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpPktRateAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarmIf"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarmIfResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarmVlan"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarmVlanResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarmGlobal"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarmGlobalResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNdSnpUserNumberAlarmIf"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNdSnpUserNumberAlarmIfResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNdSnpUserNumberAlarmGlobal"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNdSnpUserNumberAlarmGlobalResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdNomatchSnpBindTblDhcpPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdDhcpSnpChaddrAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdArpNomatchSnpBindTblPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdIpNomatchSnpBindTblPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdUntrustedReplyPktAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdSnpUserNumberAlarm"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpChaddrAlarmResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwArpNomatchSnpBindTblPktAlarmResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwIpNomatchSnpBindTblPktAlarmResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwUntrustedReplyPktAlarmResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwNomatchSnpBindTblDhcpPktAlarmResume"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwSnpUserNumberAlarmResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpSnpTrapGroup = hwDhcpSnpTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpTrapGroup.setDescription("The DHCPSNP's Notification group.")
hwDhcpSnpBdStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 112, 3, 1, 5)).setObjects(("HUAWEI-DHCP-SNOOPING-MIB", "hwDhcpSnpBdIndex"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdNomatchSnpBindTblDhcpPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdChaddrNomatchSrcMacDhcpPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdArpNomatchSnpBindTblPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdIpNomatchSnpBindTblPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdUntrustedReplyPktNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdSnpBindingItemNum"), ("HUAWEI-DHCP-SNOOPING-MIB", "hwBdSnpCfgMaxUserNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpSnpBdStatisticGroup = hwDhcpSnpBdStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSnpBdStatisticGroup.setDescription("The DHCPSNP's Statistic group on the bridge domain .")
mibBuilder.exportSymbols("HUAWEI-DHCP-SNOOPING-MIB", hwDhcpSnpGlobalOption82PacketFormat=hwDhcpSnpGlobalOption82PacketFormat, hwDhcpSnpStaticBindPVlanIndex=hwDhcpSnpStaticBindPVlanIndex, hwDhcpSnpCarCfgEntry=hwDhcpSnpCarCfgEntry, hwDhcpSnpBindTblNomatchedArpGlobalAction=hwDhcpSnpBindTblNomatchedArpGlobalAction, hwDhcpSnpIfIndex=hwDhcpSnpIfIndex, hwDhcpIpCheck=hwDhcpIpCheck, hwSnpUserNumberAlarmGlobal=hwSnpUserNumberAlarmGlobal, hwDhcpSnpBdIndex=hwDhcpSnpBdIndex, hwDhcpSnpTraps=hwDhcpSnpTraps, hwBdSnpBindingItemNum=hwBdSnpBindingItemNum, hwDhcpSnpChaddrAlarmResume=hwDhcpSnpChaddrAlarmResume, hwArpNomatchSnpBindTblPktAlarm=hwArpNomatchSnpBindTblPktAlarm, hwDhcpSnpBindTblAlarmThreshold=hwDhcpSnpBindTblAlarmThreshold, hwDhcpSnpBindTblCheck=hwDhcpSnpBindTblCheck, hwDhcpArpAlarmThreshold=hwDhcpArpAlarmThreshold, HWMatchMode=HWMatchMode, hwDhcpPktRateAlarmThreshold=hwDhcpPktRateAlarmThreshold, hwDhcpSnpCarCfgTable=hwDhcpSnpCarCfgTable, hwDhcpSnpBindTblAutosaveFilename=hwDhcpSnpBindTblAutosaveFilename, hwDhcpTrusted=hwDhcpTrusted, hwDhcpSnpBindTblNomatchedIpAction=hwDhcpSnpBindTblNomatchedIpAction, hwDhcpSnpStatisticVlanId=hwDhcpSnpStatisticVlanId, hwNdSnpUserNumberAlarmGlobal=hwNdSnpUserNumberAlarmGlobal, hwDhcpSnpBindVRFId=hwDhcpSnpBindVRFId, hwDhcpSnpGlobalOption82PktFormatTable=hwDhcpSnpGlobalOption82PktFormatTable, hwDhcpSnpGlobalOption82PktFormatEntry=hwDhcpSnpGlobalOption82PktFormatEntry, hwNomatchSnpBindTblDhcpPktAlarmResume=hwNomatchSnpBindTblDhcpPktAlarmResume, hwDhcpSnpCarRed=hwDhcpSnpCarRed, hwDhcpPktIfRateDiscardNum=hwDhcpPktIfRateDiscardNum, hwDhcpSnpCfgEntry=hwDhcpSnpCfgEntry, hwDhcpSnpBindIpIndex=hwDhcpSnpBindIpIndex, hwDhcpSnpFalsePktStatisticEntry=hwDhcpSnpFalsePktStatisticEntry, hwDhcpSnpTrapGroup=hwDhcpSnpTrapGroup, hwDhcpSnpCarCir=hwDhcpSnpCarCir, hwSnpUserNumberAlarmIfResume=hwSnpUserNumberAlarmIfResume, hwDhcpOption82Rebuild=hwDhcpOption82Rebuild, hwDhcpSnpBindVRFIdIndex=hwDhcpSnpBindVRFIdIndex, hwArpNomatchSnpBindTblPktNum=hwArpNomatchSnpBindTblPktNum, hwNdSnpUserNumberAlarmIf=hwNdSnpUserNumberAlarmIf, hwDhcpChaddrAlarmThreshold=hwDhcpChaddrAlarmThreshold, hwSnpUserNumberAlarmGlobalResume=hwSnpUserNumberAlarmGlobalResume, hwBdUntrustedReplyPktAlarm=hwBdUntrustedReplyPktAlarm, hwDhcpPktRate=hwDhcpPktRate, hwDhcpSnpBindIp=hwDhcpSnpBindIp, hwDhcpSnpCarPir=hwDhcpSnpCarPir, hwDhcpSnpBindPVlanId=hwDhcpSnpBindPVlanId, hwSnpUserNumberAlarm=hwSnpUserNumberAlarm, hwChaddrNomatchSrcMacDhcpPktNum=hwChaddrNomatchSrcMacDhcpPktNum, hwDhcpSnpGlobalOption82Format=hwDhcpSnpGlobalOption82Format, hwDhcpUntrustReplyAlarmEnable=hwDhcpUntrustReplyAlarmEnable, hwDhcpSnpBdStatisticGroup=hwDhcpSnpBdStatisticGroup, hwDhcpSnpFalsePktStatisticTable=hwDhcpSnpFalsePktStatisticTable, hwBdChaddrNomatchSrcMacDhcpPktNum=hwBdChaddrNomatchSrcMacDhcpPktNum, hwDhcpSnpBindCVlanIndex=hwDhcpSnpBindCVlanIndex, hwDhcpSnpCfgTable=hwDhcpSnpCfgTable, hwBdArpNomatchSnpBindTblPktNum=hwBdArpNomatchSnpBindTblPktNum, hwDhcpSnpBindStatus=hwDhcpSnpBindStatus, hwIpNomatchSnpBindTblPktNum=hwIpNomatchSnpBindTblPktNum, HWVlanId=HWVlanId, hwDhcpSnpStaticBindMacIndex=hwDhcpSnpStaticBindMacIndex, hwBdIpNomatchSnpBindTblPktNum=hwBdIpNomatchSnpBindTblPktNum, hwDhcpSnpIfVlanOption82RemoteId=hwDhcpSnpIfVlanOption82RemoteId, hwDhcpSnpMaxUserNum=hwDhcpSnpMaxUserNum, hwDhcpSnpBindTblAlarmEnable=hwDhcpSnpBindTblAlarmEnable, hwDhcpSnpBindCVlanId=hwDhcpSnpBindCVlanId, HWTransmitAction=HWTransmitAction, hwDhcpPktRateCheck=hwDhcpPktRateCheck, hwDhcpSnpGlobalThreshold=hwDhcpSnpGlobalThreshold, hwDhcpSnpEnable=hwDhcpSnpEnable, hwDhcpSnpBindEntry=hwDhcpSnpBindEntry, hwDhcpSnpBindTblAutosave=hwDhcpSnpBindTblAutosave, hwBdSnpCfgMaxUserNum=hwBdSnpCfgMaxUserNum, hwDhcpSnpIfVlanOption82CircuitId=hwDhcpSnpIfVlanOption82CircuitId, hwDhcpSnpBindTable=hwDhcpSnpBindTable, hwIpNomatchSnpBindTblPktAlarm=hwIpNomatchSnpBindTblPktAlarm, hwDhcpChaddrCheck=hwDhcpChaddrCheck, hwDhcpIpAlarmEnable=hwDhcpIpAlarmEnable, hwDhcpSnpCarEnable=hwDhcpSnpCarEnable, hwUntrustedReplyPktAlarm=hwUntrustedReplyPktAlarm, hwSnpUserNumberAlarmIf=hwSnpUserNumberAlarmIf, hwDhcpSnpCarRowStatus=hwDhcpSnpCarRowStatus, hwDhcpPktIfRateAlarmThreshold=hwDhcpPktIfRateAlarmThreshold, hwDhcpSnpMib=hwDhcpSnpMib, hwDhcpSnpStatisticIfDescr=hwDhcpSnpStatisticIfDescr, hwBdDhcpSnpChaddrAlarm=hwBdDhcpSnpChaddrAlarm, hwSnpUserNumberAlarmResume=hwSnpUserNumberAlarmResume, hwDhcpSnpBindRowStatus=hwDhcpSnpBindRowStatus, hwDhcpSnpCfgTblRowStatus=hwDhcpSnpCfgTblRowStatus, hwUntrustedReplyPktAlarmResume=hwUntrustedReplyPktAlarmResume, hwDhcpSnpBindIfDescr=hwDhcpSnpBindIfDescr, hwDhcpSnpBindVsiId=hwDhcpSnpBindVsiId, hwDhcpChaddrAlarmEnable=hwDhcpChaddrAlarmEnable, hwNdSnpUserNumberAlarmGlobalResume=hwNdSnpUserNumberAlarmGlobalResume, hwDhcpSnpVsiIndex=hwDhcpSnpVsiIndex, hwDhcpArpAlarmEnable=hwDhcpArpAlarmEnable, hwDhcpPktIfRate=hwDhcpPktIfRate, hwDhcpSnpDynamicItemCheck=hwDhcpSnpDynamicItemCheck, hwDhcpSnpBdFalsePktTable=hwDhcpSnpBdFalsePktTable, hwDhcpSnpCompliance=hwDhcpSnpCompliance, hwDhcpPktRateAlarm=hwDhcpPktRateAlarm, hwDhcpSnpCfgGroup=hwDhcpSnpCfgGroup, hwDhcpSnpStaticBindEntry=hwDhcpSnpStaticBindEntry, hwDhcpSnpGlobalOption82DefString=hwDhcpSnpGlobalOption82DefString, hwBdIpNomatchSnpBindTblPktAlarm=hwBdIpNomatchSnpBindTblPktAlarm, hwDhcpSnpGlobalOption82RemoteIdSysName=hwDhcpSnpGlobalOption82RemoteIdSysName, hwDhcpSnpStaticBindTable=hwDhcpSnpStaticBindTable, hwDhcpSnpStaticBindCVlanIndex=hwDhcpSnpStaticBindCVlanIndex, hwDhcpSnpStatisticVsiId=hwDhcpSnpStatisticVsiId, hwDhcpSnpMatchMode=hwDhcpSnpMatchMode, hwDhcpSnpBindTblNomatchedArpAction=hwDhcpSnpBindTblNomatchedArpAction, hwDhcpSnpBindPVlanIndex=hwDhcpSnpBindPVlanIndex, hwDhcpSnpUserLimitAlarmEnable=hwDhcpSnpUserLimitAlarmEnable, hwDhcpIpAlarmThreshold=hwDhcpIpAlarmThreshold, hwDhcpSnpCarYellow=hwDhcpSnpCarYellow, hwDhcpSnpBindGroup=hwDhcpSnpBindGroup, hwDhcpSnpVlanIndex=hwDhcpSnpVlanIndex, hwNomatchSnpBindTblDhcpPktAlarm=hwNomatchSnpBindTblDhcpPktAlarm, hwDhcpSnpBdFalsePktEntry=hwDhcpSnpBdFalsePktEntry, hwSnpCfgMaxUserNum=hwSnpCfgMaxUserNum, hwBdNomatchSnpBindTblDhcpPktNum=hwBdNomatchSnpBindTblDhcpPktNum, hwDhcpSnpCarPbs=hwDhcpSnpCarPbs, hwDhcpSnpServerDetectStatus=hwDhcpSnpServerDetectStatus, PYSNMP_MODULE_ID=hwDhcpSnpMib, hwDhcpOption82Insert=hwDhcpOption82Insert, hwUntrustedReplyPktNum=hwUntrustedReplyPktNum, hwDhcpSnpBindMac=hwDhcpSnpBindMac, hwDhcpSnpGlobalOption82CircuitId=hwDhcpSnpGlobalOption82CircuitId, hwDhcpArpCheck=hwDhcpArpCheck, hwDhcpSnpBindLease=hwDhcpSnpBindLease, hwDhcpPktRateAlarmEnable=hwDhcpPktRateAlarmEnable, hwArpNomatchSnpBindTblPktAlarmResume=hwArpNomatchSnpBindTblPktAlarmResume, hwDhcpSnpBindVsiIndex=hwDhcpSnpBindVsiIndex, hwDhcpUntrustReplyAlarmThreshold=hwDhcpUntrustReplyAlarmThreshold, hwDhcpPktIfRateCheck=hwDhcpPktIfRateCheck, hwDhcpSnpGlobalOption82RemoteId=hwDhcpSnpGlobalOption82RemoteId, hwBdNomatchSnpBindTblDhcpPktAlarm=hwBdNomatchSnpBindTblDhcpPktAlarm, hwDhcpSnpGlobal=hwDhcpSnpGlobal, hwDhcpSnpCaCbs=hwDhcpSnpCaCbs, hwNomatchSnpBindTblDhcpPktNum=hwNomatchSnpBindTblDhcpPktNum, hwDhcpSnpGlobalOption82Type=hwDhcpSnpGlobalOption82Type, hwBdArpNomatchSnpBindTblPktAlarm=hwBdArpNomatchSnpBindTblPktAlarm, hwDhcpSnpGlobalOption82PktFormat=hwDhcpSnpGlobalOption82PktFormat, hwIpNomatchSnpBindTblPktAlarmResume=hwIpNomatchSnpBindTblPktAlarmResume, hwBdUntrustedReplyPktNum=hwBdUntrustedReplyPktNum, hwDhcpSnpObjects=hwDhcpSnpObjects, hwDhcpPktRateDiscardNum=hwDhcpPktRateDiscardNum, hwDhcpPktIfRateAlarmEnable=hwDhcpPktIfRateAlarmEnable, hwSnpBindingItemNum=hwSnpBindingItemNum, hwSnpUserNumberAlarmVlanResume=hwSnpUserNumberAlarmVlanResume, hwDhcpSnpChaddrAlarm=hwDhcpSnpChaddrAlarm, hwDhcpSnpMibGroups=hwDhcpSnpMibGroups, hwDhcpSnpUserLimitAlarmThreshold=hwDhcpSnpUserLimitAlarmThreshold, hwDhcpSnpStaticBindIpIndex=hwDhcpSnpStaticBindIpIndex, hwDhcpSnpStaticBindIfIndex=hwDhcpSnpStaticBindIfIndex, hwDhcpSnpBindTblNomatchedIpGlobalAction=hwDhcpSnpBindTblNomatchedIpGlobalAction, hwBdSnpUserNumberAlarm=hwBdSnpUserNumberAlarm, hwDhcpSnpStatisticGroup=hwDhcpSnpStatisticGroup, hwDhcpSnpStaticBindRowStatus=hwDhcpSnpStaticBindRowStatus, hwNdSnpUserNumberAlarmIfResume=hwNdSnpUserNumberAlarmIfResume, hwSnpUserNumberAlarmVlan=hwSnpUserNumberAlarmVlan)
