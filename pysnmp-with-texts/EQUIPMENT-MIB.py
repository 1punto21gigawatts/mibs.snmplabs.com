#
# PySNMP MIB module EQUIPMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EQUIPMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:05:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
dlink_common_mgmt, AgentNotifyLevel = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt", "AgentNotifyLevel")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Gauge32, IpAddress, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, iso, Counter64, MibIdentifier, TimeTicks, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "IpAddress", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "iso", "Counter64", "MibIdentifier", "TimeTicks", "Bits", "ModuleIdentity")
DisplayString, DateAndTime, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "RowStatus", "TruthValue")
swTimeRangeMgmtRangeName, = mibBuilder.importSymbols("TIMERANGE-MIB", "swTimeRangeMgmtRangeName")
swEquipmentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 11))
if mibBuilder.loadTexts: swEquipmentMIB.setLastUpdated('201104200000Z')
if mibBuilder.loadTexts: swEquipmentMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swEquipmentMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swEquipmentMIB.setDescription(' equipments MIB.')
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

swEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1))
swEquipmentNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2))
swEquipmentCapacity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 1), Bits().clone(namedValues=NamedValues(("fanCapable", 0), ("redundantPowerCapable", 1), ("tempteratureDetection", 2), ("stackingCapable", 3), ("chassisCapable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEquipmentCapacity.setStatus('current')
if mibBuilder.loadTexts: swEquipmentCapacity.setDescription('Indicates the equipment capability supported in the system.')
swFanTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFanTrapState.setStatus('current')
if mibBuilder.loadTexts: swFanTrapState.setDescription('Indicate the fan warning event trap state.')
swPowerTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPowerTrapState.setStatus('current')
if mibBuilder.loadTexts: swPowerTrapState.setDescription('Indicate the power warning event trap state.')
swPowerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6), )
if mibBuilder.loadTexts: swPowerTable.setStatus('current')
if mibBuilder.loadTexts: swPowerTable.setDescription('A list of power information values.')
swPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "swPowerUnitIndex"), (0, "EQUIPMENT-MIB", "swPowerID"))
if mibBuilder.loadTexts: swPowerEntry.setStatus('current')
if mibBuilder.loadTexts: swPowerEntry.setDescription('An entry of power information values.')
swPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swPowerUnitIndex.setDescription('Indicates the unit ID in the System.')
swPowerID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerID.setStatus('current')
if mibBuilder.loadTexts: swPowerID.setDescription('Indicates ID of the power 1 : main power 2 : redundant power .')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("lowVoltage", 1), ("overCurrent", 2), ("working", 3), ("fail", 4), ("connect", 5), ("disconnect", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swPowerStatus.setDescription('Indicates the current power status. lowVoltage : The voltage of the power unit is too low. overCurrent: The current of the power unit is too high. working : The power unit is working normally. fail : The power unit has failed. connect : The power unit is connected but not powered on. disconnect : The power unit is not connected.')
swFanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7), )
if mibBuilder.loadTexts: swFanTable.setStatus('current')
if mibBuilder.loadTexts: swFanTable.setDescription('A list of fan information values.')
swFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "swFanUnitIndex"), (0, "EQUIPMENT-MIB", "swFanID"))
if mibBuilder.loadTexts: swFanEntry.setStatus('current')
if mibBuilder.loadTexts: swFanEntry.setDescription('An entry of fan information values.')
swFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFanUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swFanUnitIndex.setDescription('Indicates the unit ID in the System.')
swFanID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFanID.setStatus('current')
if mibBuilder.loadTexts: swFanID.setDescription('Indicates the unit ID.')
swFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("working", 1), ("fail", 2), ("speed-0", 3), ("speed-low", 4), ("speed-middle", 5), ("speed-high", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFanStatus.setStatus('current')
if mibBuilder.loadTexts: swFanStatus.setDescription('Indicates the current fan status. speed-0 : If the fan function is normal and the fan does not spin due to the temperature not reaching the threshold, the status of the fan is speed 0. speed-low : Fan spin using the lowest speed. speed-middle: Fan spin using the middle speed. speed-high : Fan spin using the highest speed.')
swFanPostion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("left", 2), ("right", 3), ("back", 4), ("cpu", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFanPostion.setStatus('current')
if mibBuilder.loadTexts: swFanPostion.setDescription('Indicates the position of the fan.')
swFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFanNumber.setStatus('current')
if mibBuilder.loadTexts: swFanNumber.setDescription('Indicates the fan number.')
swFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFanSpeed.setStatus('current')
if mibBuilder.loadTexts: swFanSpeed.setDescription('Indicates the fan work speed(RPM).')
swTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 8), )
if mibBuilder.loadTexts: swTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: swTemperatureTable.setDescription('A list of temperature values.')
swTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 8, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "swTemperatureUnitIndex"))
if mibBuilder.loadTexts: swTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: swTemperatureEntry.setDescription('An entry of temperature values.')
swTemperatureUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTemperatureUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swTemperatureUnitIndex.setDescription('Indicates the unit ID in the System.')
swTemperatureCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTemperatureCurrent.setStatus('current')
if mibBuilder.loadTexts: swTemperatureCurrent.setDescription('The shelf current temperature.')
swTemperatureHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTemperatureHighThresh.setStatus('current')
if mibBuilder.loadTexts: swTemperatureHighThresh.setDescription('The high threshold of shelf temperature.')
swTemperatureLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTemperatureLowThresh.setStatus('current')
if mibBuilder.loadTexts: swTemperatureLowThresh.setDescription('The low threshold of shelf temperature.')
swUnitMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9))
swUnitStackingVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitStackingVersion.setStatus('current')
if mibBuilder.loadTexts: swUnitStackingVersion.setDescription('This object indicates the version of this stacking system.')
swUnitMaxSupportedUnits = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMaxSupportedUnits.setStatus('current')
if mibBuilder.loadTexts: swUnitMaxSupportedUnits.setDescription('The maximum number of units that are supported in the system.')
swUnitNumOfUnit = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitNumOfUnit.setStatus('current')
if mibBuilder.loadTexts: swUnitNumOfUnit.setDescription('The current number of units.')
swUnitMgmtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4), )
if mibBuilder.loadTexts: swUnitMgmtTable.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtTable.setDescription('This table contains the unit information.')
swUnitMgmtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "swUnitMgmtId"))
if mibBuilder.loadTexts: swUnitMgmtEntry.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtEntry.setDescription('A list of management information for each unit in the system.')
swUnitMgmtId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtId.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtId.setDescription('This object indicates the specific entry in the stacking/chassis table.')
swUnitMgmtMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtMacAddr.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtMacAddr.setDescription('The MAC address of this unit.')
swUnitMgmtStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtStartPort.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtStartPort.setDescription('This object indicates the starting port of this unit.')
swUnitMgmtPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtPortRange.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtPortRange.setDescription('This object indicates the total ports of this unit.')
swUnitMgmtFrontPanelLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtFrontPanelLedStatus.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtFrontPanelLedStatus.setDescription('This object is a set of system LED indicators. The first four octets are defined as a system LED. The first LED is a power LED. The second LED in the stacking module is a master LED but in the chassis is a status LED. The third LED is a console LED. The fourth LED is an RPS (Redundancy Power Supply) LED. The other octets are the logical port LED (following dot1dBasePort ordering). Every two bytes are presented to a port. The first byte is presented as the link/activity LED. The second byte is presented as the speed LED. system LED: 01 = fail/error/non existence. 02 = work normal. link/activity LED : The most significant bit is used for blinking/solid: 8 = The LED blinks. The second most significant bit is used for link status: 1 = link fail. 2 = link pass. speed LED : 01 = 10Mbps. 02 = 100Mbps. 03 = 1000Mbps. The four remaining bits are currently unused and must be set to 0. Note: For the DGS-3700, the first five octets are defined as the system LED. The first LED is the power LED. The second LED is the console LED. The third LED is the RPS (Redundancy Power Supply) LED. The fourth LED is the management port LED. The fifth LED is the fan LED. For the DGS-3200-10 and DGS-3200-16, the first three octets are defined as the system LED. The first LED is the power LED. The second LED is the console LED. The third LED is the RPS (Redundancy Power Supply) LED. For the DGS-3200-24, the first three octets are defined as the system LED, the definition of the first three octets is the same as the DGS-3200-10 and DGS-3200-16, the fourth LED is the SD card LED. The following description is for the SD card LED: 01 = SD card is not present. 02 = SD card is present. 03 = fails to read/write SD card. 04 = read/write SD card successfully.')
swUnitMgmtCtrlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("stand-alone", 3), ("master", 4), ("slave", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitMgmtCtrlMode.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtCtrlMode.setDescription('This object indicates the stacking mode the user configured for the unit. This object can only be configured when the device is in standalone mode. other (1) - This object indicates the stacking mode that the user has configured for the unit. This object can only be configured when the device is in standalone mode. auto (2) - The system will auto-assign a stacking role to this unit to be: standalone(3), master(4), or slave(5). standalone (3) - The unit is forced to be in standalone mode. master (4) - The unit is forced to be in master mode. If this unit is selected to be a master, the unit can modify the configuration of the stacking system. slave (5) - The unit is forced to be in slave mode. If this unit is selected to be a slave, it can only view the configuration of the stacking system.')
swUnitMgmtCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("stand-alone", 3), ("master", 4), ("slave", 5), ("backup-master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtCurrentMode.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtCurrentMode.setDescription('The current stacking role of this unit.')
swUnitMgmtVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtVersion.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtVersion.setDescription('This object indicates the version of this stacking unit.')
swUnitMgmtModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtModuleName.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtModuleName.setDescription('A textual string containing the stacking unit module name. ')
swUnitMgmtPromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtPromVersion.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtPromVersion.setDescription('A textual string containing the PROM version of the stacking unit. ')
swUnitMgmtFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtFirmwareVersion.setDescription('A textual string containing the firmware version of the stacking unit. ')
swUnitMgmtHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtHardwareVersion.setDescription('A textual string containing the hardware version of the stacking unit. ')
swUnitMgmtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitMgmtPriority.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtPriority.setDescription('The Priority of the stacking unit. ')
swUnitMgmtUserSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("auto", 2), ("user", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtUserSetState.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtUserSetState.setDescription('This object indicates the user set state of this unit.')
swUnitMgmtExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exist", 1), ("no-exist", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtExistState.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtExistState.setDescription('The state of existence of this unit.')
swUnitMgmtBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("box-1", 1), ("box-2", 2), ("box-3", 3), ("box-4", 4), ("box-5", 5), ("box-6", 6), ("box-7", 7), ("box-8", 8), ("box-9", 9), ("box-10", 10), ("box-11", 11), ("box-12", 12), ("auto", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitMgmtBoxId.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtBoxId.setDescription('The box ID of the stacking unit. When show, it shows the current box ID of this unit; When set, it sets the new box ID, and the new box ID will take effect after the next boot.')
swUnitMgmtSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitMgmtSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swUnitMgmtSerialNumber.setDescription('A text string containing the serial number of the stacking unit.')
swUnitTopology = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("stand-alone", 1), ("duplex-chain", 2), ("duplex-ring", 3), ("star", 4), ("unstable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swUnitTopology.setStatus('current')
if mibBuilder.loadTexts: swUnitTopology.setDescription('The stacking topology state.')
swUnitStackMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitStackMode.setStatus('current')
if mibBuilder.loadTexts: swUnitStackMode.setDescription('Indicates the stacking mode supported in the system.')
swUnitStackForceMasterRole = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitStackForceMasterRole.setStatus('current')
if mibBuilder.loadTexts: swUnitStackForceMasterRole.setDescription('Indicates the stack force master role mode supported in the system.')
swUnitStackTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitStackTrapState.setStatus('current')
if mibBuilder.loadTexts: swUnitStackTrapState.setDescription('Indicates the stacking trap state.')
swUnitStackLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitStackLogState.setStatus('current')
if mibBuilder.loadTexts: swUnitStackLogState.setDescription('Indicates the stacking log state.')
swExternalAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 10), )
if mibBuilder.loadTexts: swExternalAlarmTable.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmTable.setDescription('A list of the status of each of the alarm channels by this agent.')
swExternalAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 10, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "swExternalAlarmChannel"))
if mibBuilder.loadTexts: swExternalAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmEntry.setDescription('An entry containing objects with the status of each alarm channel.')
swExternalAlarmChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExternalAlarmChannel.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmChannel.setDescription('The number of the alarm channel.')
swExternalAlarmMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swExternalAlarmMessage.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmMessage.setDescription('Used to configure the alarm message when an alarm occurs on this channel. If no alarm message is configured on this channel, a default alarm message will be generated.')
swExternalAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarming", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExternalAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStatus.setDescription('Shows the current status of each alarm channel.')
swEquipmentPowerSaving = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11))
swEquipPowerSavingLinkDetectState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEquipPowerSavingLinkDetectState.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingLinkDetectState.setDescription('Indicates the equipment reduced power consumption state.')
swEquipPowerSavingLenDetect = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEquipPowerSavingLenDetect.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingLenDetect.setDescription('Indicates the equipment reduced power consumption state with a link partner.')
swEquipPowerSavingHiberState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEquipPowerSavingHiberState.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingHiberState.setDescription('This object indicates the power saving state of system hibernation.')
swEquipPowerSavingPortLEDState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEquipPowerSavingPortLEDState.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortLEDState.setDescription('This object indicates the power saving state of port LED.')
swEquipPowerSavingPortState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEquipPowerSavingPortState.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortState.setDescription('This object indicates the power saving state of port.')
swEquipPowerSavingScheduleCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6))
swEquipPowerSavingHibernationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 1), )
if mibBuilder.loadTexts: swEquipPowerSavingHibernationTable.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingHibernationTable.setDescription('A list of the system hibernation configurations of the power saving.')
swEquipPowerSavingHibernationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 1, 1), ).setIndexNames((0, "TIMERANGE-MIB", "swTimeRangeMgmtRangeName"))
if mibBuilder.loadTexts: swEquipPowerSavingHibernationEntry.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingHibernationEntry.setDescription('An entry containing the system hibernation configurations of the power saving.')
swEquipPowerSavingHiberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swEquipPowerSavingHiberRowStatus.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingHiberRowStatus.setDescription('This object indicates the status of this entry.')
swEquipPowerSavingPortLedTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 2), )
if mibBuilder.loadTexts: swEquipPowerSavingPortLedTable.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortLedTable.setDescription('A list of the port LED configurations of the power saving.')
swEquipPowerSavingPortLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 2, 1), ).setIndexNames((0, "TIMERANGE-MIB", "swTimeRangeMgmtRangeName"))
if mibBuilder.loadTexts: swEquipPowerSavingPortLedEntry.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortLedEntry.setDescription('An entry containing the port LED configurations of the power saving.')
swEquipPowerSavingPortLedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 2, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swEquipPowerSavingPortLedRowStatus.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortLedRowStatus.setDescription('This object indicates the status of this entry.')
swEquipPowerSavingPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 3), )
if mibBuilder.loadTexts: swEquipPowerSavingPortTable.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortTable.setDescription('A list of the port configurations of the power saving.')
swEquipPowerSavingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 3, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "swEquipPowerSavingPortIndex"), (0, "TIMERANGE-MIB", "swTimeRangeMgmtRangeName"))
if mibBuilder.loadTexts: swEquipPowerSavingPortEntry.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortEntry.setDescription('An entry containing the port configurations of the power saving.')
swEquipPowerSavingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: swEquipPowerSavingPortIndex.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortIndex.setDescription("Indicates the module's port number.(1..Max port number in the module).")
swEquipPowerSavingPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 11, 6, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swEquipPowerSavingPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: swEquipPowerSavingPortRowStatus.setDescription('This object indicates the status of this entry.')
swEquipmentTemperatureCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 12))
swTemperatureTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTemperatureTrapState.setStatus('current')
if mibBuilder.loadTexts: swTemperatureTrapState.setDescription('This object can enable or disable the warning temperature trap.')
swTemperatureLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swTemperatureLogState.setStatus('current')
if mibBuilder.loadTexts: swTemperatureLogState.setDescription('This object can enable or disable the warning temperature log.')
swEquipmentLEDCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 13))
swEquipmentPortLEDState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swEquipmentPortLEDState.setStatus('current')
if mibBuilder.loadTexts: swEquipmentPortLEDState.setDescription('This object indicates the LED admin state of all ports.')
swExternalAlarmStackingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 15), )
if mibBuilder.loadTexts: swExternalAlarmStackingTable.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStackingTable.setDescription('A list of the status of each of the alarm channels by this agent.')
swExternalAlarmStackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 15, 1), ).setIndexNames((0, "EQUIPMENT-MIB", "swExternalAlarmStackingUnitIndex"), (0, "EQUIPMENT-MIB", "swExternalAlarmStackingChannel"))
if mibBuilder.loadTexts: swExternalAlarmStackingEntry.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStackingEntry.setDescription('An entry containing objects with the status of each alarm channel.')
swExternalAlarmStackingUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: swExternalAlarmStackingUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStackingUnitIndex.setDescription('Indicates the unit ID in the System..')
swExternalAlarmStackingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 15, 1, 2), Integer32())
if mibBuilder.loadTexts: swExternalAlarmStackingChannel.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStackingChannel.setDescription('The number of the alarm channel.')
swExternalAlarmStackingMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swExternalAlarmStackingMessage.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStackingMessage.setDescription('Used to configure the alarm message when an alarm occurs on this channel. If no alarm message is configured on this channel, a default alarm message will be generated.')
swExternalAlarmStackingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 11, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarming", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swExternalAlarmStackingStatus.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStackingStatus.setDescription('Shows the current status of each alarm channel.')
swEquipmentNotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1))
swEquipmentNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2))
swEquipUnitNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 1))
swEquipPowerNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2))
swEquipFanNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 3))
swEquipTemperatureNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 4))
swEquipExternalAlarmNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 5))
swEquipUnitNotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 1))
swEquipPowerNotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 2))
swEquipFanNotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 3))
swEquipTemperatureNotifyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 4))
swUnitInsertSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 1, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitInsertSeverity.setStatus('current')
if mibBuilder.loadTexts: swUnitInsertSeverity.setDescription('Indicates the swUnitInsert detection level.')
swUnitRemoveSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 1, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitRemoveSeverity.setStatus('current')
if mibBuilder.loadTexts: swUnitRemoveSeverity.setDescription('Indicates the swUnitRemove detection level.')
swUnitFailureSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 1, 3), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swUnitFailureSeverity.setStatus('current')
if mibBuilder.loadTexts: swUnitFailureSeverity.setDescription('Indicates the swUnitFailure detection level.')
swPowerStatusChgSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 2, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPowerStatusChgSeverity.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChgSeverity.setDescription('Indicates the swPowerStatusChg detection level.')
swPowerFailureSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 2, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPowerFailureSeverity.setStatus('current')
if mibBuilder.loadTexts: swPowerFailureSeverity.setDescription('Indicates the swPowerFailure detection level.')
swPowerRecoverSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 2, 3), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPowerRecoverSeverity.setStatus('current')
if mibBuilder.loadTexts: swPowerRecoverSeverity.setDescription('Indicates the swPowerRecover detection level.')
swFanFailureSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 3, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFanFailureSeverity.setStatus('current')
if mibBuilder.loadTexts: swFanFailureSeverity.setDescription('Indicates the swFanFailure detection level.')
swFanRecoverSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 3, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFanRecoverSeverity.setStatus('current')
if mibBuilder.loadTexts: swFanRecoverSeverity.setDescription('Indicates the swFanRecover detection level.')
swHighTemperatureSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 4, 1), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swHighTemperatureSeverity.setStatus('current')
if mibBuilder.loadTexts: swHighTemperatureSeverity.setDescription('Indicates the swHighTemperature detection level.')
swHighTemperatureRecoverSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 4, 2), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swHighTemperatureRecoverSeverity.setStatus('current')
if mibBuilder.loadTexts: swHighTemperatureRecoverSeverity.setDescription('Indicates the swHighTemperatureRecover detection level.')
swLowTemperatureSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 4, 3), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLowTemperatureSeverity.setStatus('current')
if mibBuilder.loadTexts: swLowTemperatureSeverity.setDescription('Indicates the swLowTemperature detection level.')
swLowTemperatureRecoverSeverity = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 1, 4, 4), AgentNotifyLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swLowTemperatureRecoverSeverity.setStatus('current')
if mibBuilder.loadTexts: swLowTemperatureRecoverSeverity.setDescription('Indicates the swLowTemperatureRecover detection level.')
swEquipUnitNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 1, 0))
swUnitInsert = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 1, 0, 1)).setObjects(("EQUIPMENT-MIB", "swUnitMgmtId"), ("EQUIPMENT-MIB", "swUnitMgmtMacAddr"))
if mibBuilder.loadTexts: swUnitInsert.setStatus('current')
if mibBuilder.loadTexts: swUnitInsert.setDescription('Unit Hot Insert notification.')
swUnitRemove = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 1, 0, 2)).setObjects(("EQUIPMENT-MIB", "swUnitMgmtId"), ("EQUIPMENT-MIB", "swUnitMgmtMacAddr"))
if mibBuilder.loadTexts: swUnitRemove.setStatus('current')
if mibBuilder.loadTexts: swUnitRemove.setDescription('Unit Hot Remove notification.')
swUnitFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 1, 0, 3)).setObjects(("EQUIPMENT-MIB", "swUnitMgmtId"))
if mibBuilder.loadTexts: swUnitFailure.setStatus('current')
if mibBuilder.loadTexts: swUnitFailure.setDescription('Unit Failure notification.')
swUnitTPChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 1, 0, 4)).setObjects(("EQUIPMENT-MIB", "swStackTopologyType"), ("EQUIPMENT-MIB", "swUnitMgmtId"), ("EQUIPMENT-MIB", "swUnitMgmtMacAddr"))
if mibBuilder.loadTexts: swUnitTPChange.setStatus('current')
if mibBuilder.loadTexts: swUnitTPChange.setDescription('The stacking topology change notification.')
swUnitRoleChange = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 1, 0, 5)).setObjects(("EQUIPMENT-MIB", "swStackRoleChangeType"), ("EQUIPMENT-MIB", "swUnitMgmtId"))
if mibBuilder.loadTexts: swUnitRoleChange.setStatus('current')
if mibBuilder.loadTexts: swUnitRoleChange.setDescription('The stacking unit role change notification.')
swEquipPowerNotifyPerfix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2, 0))
swPowerStatusChg = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2, 0, 1)).setObjects(("EQUIPMENT-MIB", "swPowerUnitIndex"), ("EQUIPMENT-MIB", "swPowerID"), ("EQUIPMENT-MIB", "swPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChg.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChg.setDescription('Power Status change notification. The notification is issued when the swPowerStatus changes in the following cases: lowVoltage -> overCurrent. lowVoltage -> working. lowVoltage -> disconnect. lowVoltage -> connect. overCurrent -> lowVoltage. overCurrent -> working. overCurrent -> disconnect. overCurrent -> connect. working -> lowVoltage. working -> overCurrent. working -> connect. working -> disconnect. fail -> connect. fail -> disconnect. connect -> lowVoltage. connect -> overCurrent. connect -> working. connect -> disconnect. disconnect -> lowVoltage. disconnect -> overCurrent. disconnect -> working. disconnect -> connect.')
swPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2, 0, 2)).setObjects(("EQUIPMENT-MIB", "swPowerUnitIndex"), ("EQUIPMENT-MIB", "swPowerID"), ("EQUIPMENT-MIB", "swPowerStatus"))
if mibBuilder.loadTexts: swPowerFailure.setStatus('current')
if mibBuilder.loadTexts: swPowerFailure.setDescription('Power Failure notification. The notification is issued when the swPowerStatus changes in the following cases: lowVoltage -> fail. overCurrent -> fail. working -> fail. connect -> fail. disconnect -> fail.')
swPowerRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 2, 0, 3)).setObjects(("EQUIPMENT-MIB", "swPowerUnitIndex"), ("EQUIPMENT-MIB", "swPowerID"), ("EQUIPMENT-MIB", "swPowerStatus"))
if mibBuilder.loadTexts: swPowerRecover.setStatus('current')
if mibBuilder.loadTexts: swPowerRecover.setDescription('Power Recover notification. The notification is issued when the swPowerStatus changes in the following cases: fail -> lowVoltage. fail -> overCurrent. fail -> working.')
swEquipFanNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 3, 0))
swFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 3, 0, 1)).setObjects(("EQUIPMENT-MIB", "swFanUnitIndex"), ("EQUIPMENT-MIB", "swFanID"))
if mibBuilder.loadTexts: swFanFailure.setStatus('current')
if mibBuilder.loadTexts: swFanFailure.setDescription('Fan Failure notification.')
swFanRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 3, 0, 2)).setObjects(("EQUIPMENT-MIB", "swFanUnitIndex"), ("EQUIPMENT-MIB", "swFanID"))
if mibBuilder.loadTexts: swFanRecover.setStatus('current')
if mibBuilder.loadTexts: swFanRecover.setDescription('Fan Recover notification.')
swEquipTemperatureNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 4, 0))
swHighTemperature = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 4, 0, 1)).setObjects(("EQUIPMENT-MIB", "swTemperatureUnitIndex"), ("EQUIPMENT-MIB", "swTemperSensorID"), ("EQUIPMENT-MIB", "swTemperatureCurrent"))
if mibBuilder.loadTexts: swHighTemperature.setStatus('current')
if mibBuilder.loadTexts: swHighTemperature.setDescription('High Temperature notification.')
swHighTemperatureRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 4, 0, 2)).setObjects(("EQUIPMENT-MIB", "swTemperatureUnitIndex"), ("EQUIPMENT-MIB", "swTemperSensorID"), ("EQUIPMENT-MIB", "swTemperatureCurrent"))
if mibBuilder.loadTexts: swHighTemperatureRecover.setStatus('current')
if mibBuilder.loadTexts: swHighTemperatureRecover.setDescription('High Temperature notification.')
swLowTemperature = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 4, 0, 3)).setObjects(("EQUIPMENT-MIB", "swTemperatureUnitIndex"), ("EQUIPMENT-MIB", "swTemperSensorID"), ("EQUIPMENT-MIB", "swTemperatureCurrent"))
if mibBuilder.loadTexts: swLowTemperature.setStatus('current')
if mibBuilder.loadTexts: swLowTemperature.setDescription('Low Temperature notification.')
swLowTemperatureRecover = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 4, 0, 4)).setObjects(("EQUIPMENT-MIB", "swTemperatureUnitIndex"), ("EQUIPMENT-MIB", "swTemperSensorID"), ("EQUIPMENT-MIB", "swTemperatureCurrent"))
if mibBuilder.loadTexts: swLowTemperatureRecover.setStatus('current')
if mibBuilder.loadTexts: swLowTemperatureRecover.setDescription('Low Temperature notification.')
swEquipExternalAlarmNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 5, 0))
swExternalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 5, 0, 1)).setObjects(("EQUIPMENT-MIB", "swExternalAlarmChannel"), ("EQUIPMENT-MIB", "swExternalAlarmMessage"))
if mibBuilder.loadTexts: swExternalAlarm.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarm.setDescription('The notice of an Alarm in the specified channel.')
swExternalAlarmStacking = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 2, 5, 0, 2)).setObjects(("EQUIPMENT-MIB", "swExternalAlarmStackingUnitIndex"), ("EQUIPMENT-MIB", "swExternalAlarmStackingChannel"), ("EQUIPMENT-MIB", "swExternalAlarmStackingMessage"))
if mibBuilder.loadTexts: swExternalAlarmStacking.setStatus('current')
if mibBuilder.loadTexts: swExternalAlarmStacking.setDescription('The notice of an Alarm in the specified channel.')
swNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 3))
swEquipTemperNotifyBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 3, 1))
swTemperSensorID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swTemperSensorID.setStatus('current')
if mibBuilder.loadTexts: swTemperSensorID.setDescription('This object indicates the ID of the temperature sensor in the unit.')
swEquipUnitNotifyBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 3, 2))
swStackTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chain", 1), ("ring", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swStackTopologyType.setStatus('current')
if mibBuilder.loadTexts: swStackTopologyType.setDescription('This object indicates the MAC address of the switch.')
swStackRoleChangeType = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 11, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup-to-master", 1), ("slave-to-master", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swStackRoleChangeType.setStatus('current')
if mibBuilder.loadTexts: swStackRoleChangeType.setDescription('This object indicates the role information of the switch.')
mibBuilder.exportSymbols("EQUIPMENT-MIB", swFanID=swFanID, swFanNumber=swFanNumber, swLowTemperature=swLowTemperature, swFanTable=swFanTable, swEquipPowerSavingHibernationEntry=swEquipPowerSavingHibernationEntry, swEquipmentNotifyMgmt=swEquipmentNotifyMgmt, swPowerRecoverSeverity=swPowerRecoverSeverity, swExternalAlarmChannel=swExternalAlarmChannel, swPowerTable=swPowerTable, swFanStatus=swFanStatus, swEquipPowerSavingPortTable=swEquipPowerSavingPortTable, swUnitMgmtVersion=swUnitMgmtVersion, swTemperatureLogState=swTemperatureLogState, swEquipFanNotification=swEquipFanNotification, swEquipUnitNotifyBindings=swEquipUnitNotifyBindings, swTemperatureHighThresh=swTemperatureHighThresh, swFanUnitIndex=swFanUnitIndex, swEquipPowerSavingPortLEDState=swEquipPowerSavingPortLEDState, swUnitStackLogState=swUnitStackLogState, swEquipmentMIB=swEquipmentMIB, swEquipUnitNotifyPrefix=swEquipUnitNotifyPrefix, swLowTemperatureRecover=swLowTemperatureRecover, swFanSpeed=swFanSpeed, swUnitMgmtCurrentMode=swUnitMgmtCurrentMode, swEquipTemperatureNotification=swEquipTemperatureNotification, swExternalAlarmStackingTable=swExternalAlarmStackingTable, swExternalAlarmStackingChannel=swExternalAlarmStackingChannel, swHighTemperatureSeverity=swHighTemperatureSeverity, swTemperatureTable=swTemperatureTable, swUnitMgmtFirmwareVersion=swUnitMgmtFirmwareVersion, swUnitStackTrapState=swUnitStackTrapState, swUnitRoleChange=swUnitRoleChange, swHighTemperature=swHighTemperature, swEquipPowerSavingPortLedRowStatus=swEquipPowerSavingPortLedRowStatus, swEquipUnitNotification=swEquipUnitNotification, swUnitMgmtHardwareVersion=swUnitMgmtHardwareVersion, swUnitMgmtFrontPanelLedStatus=swUnitMgmtFrontPanelLedStatus, swUnitInsert=swUnitInsert, swPowerID=swPowerID, swUnitFailure=swUnitFailure, swExternalAlarm=swExternalAlarm, swFanRecover=swFanRecover, swTemperatureTrapState=swTemperatureTrapState, swUnitMgmtExistState=swUnitMgmtExistState, swTemperatureUnitIndex=swTemperatureUnitIndex, swLowTemperatureRecoverSeverity=swLowTemperatureRecoverSeverity, swFanEntry=swFanEntry, swEquipPowerNotifyMgmt=swEquipPowerNotifyMgmt, swUnitMgmtEntry=swUnitMgmtEntry, swUnitMgmtPortRange=swUnitMgmtPortRange, swUnitMgmtBoxId=swUnitMgmtBoxId, swEquipPowerSavingHiberState=swEquipPowerSavingHiberState, swExternalAlarmStackingMessage=swExternalAlarmStackingMessage, swUnitInsertSeverity=swUnitInsertSeverity, swPowerUnitIndex=swPowerUnitIndex, swUnitMaxSupportedUnits=swUnitMaxSupportedUnits, swStackTopologyType=swStackTopologyType, swFanFailure=swFanFailure, swEquipPowerSavingScheduleCtrl=swEquipPowerSavingScheduleCtrl, swPowerFailureSeverity=swPowerFailureSeverity, swEquipmentPortLEDState=swEquipmentPortLEDState, swEquipExternalAlarmNotifyPrefix=swEquipExternalAlarmNotifyPrefix, swEquipPowerSavingPortIndex=swEquipPowerSavingPortIndex, swPowerStatusChg=swPowerStatusChg, swUnitMgmtMacAddr=swUnitMgmtMacAddr, swEquipmentNotify=swEquipmentNotify, swEquipPowerSavingPortRowStatus=swEquipPowerSavingPortRowStatus, swUnitMgmtStartPort=swUnitMgmtStartPort, swFanFailureSeverity=swFanFailureSeverity, swEquipmentCapacity=swEquipmentCapacity, swEquipPowerSavingHibernationTable=swEquipPowerSavingHibernationTable, swEquipTemperatureNotifyPrefix=swEquipTemperatureNotifyPrefix, swEquipmentLEDCtrl=swEquipmentLEDCtrl, swEquipUnitNotifyMgmt=swEquipUnitNotifyMgmt, swExternalAlarmStacking=swExternalAlarmStacking, swFanTrapState=swFanTrapState, swEquipmentPowerSaving=swEquipmentPowerSaving, swUnitFailureSeverity=swUnitFailureSeverity, swUnitTopology=swUnitTopology, swFanRecoverSeverity=swFanRecoverSeverity, swPowerRecover=swPowerRecover, swEquipPowerNotifyPerfix=swEquipPowerNotifyPerfix, swUnitMgmtPriority=swUnitMgmtPriority, swUnitMgmtModuleName=swUnitMgmtModuleName, swNotificationBindings=swNotificationBindings, swEquipExternalAlarmNotification=swEquipExternalAlarmNotification, swEquipPowerSavingPortEntry=swEquipPowerSavingPortEntry, swExternalAlarmStackingEntry=swExternalAlarmStackingEntry, MacAddress=MacAddress, swEquipmentNotification=swEquipmentNotification, swUnitNumOfUnit=swUnitNumOfUnit, swTemperSensorID=swTemperSensorID, swUnitMgmtId=swUnitMgmtId, swHighTemperatureRecover=swHighTemperatureRecover, swEquipPowerSavingPortLedTable=swEquipPowerSavingPortLedTable, swEquipment=swEquipment, swUnitMgmtPromVersion=swUnitMgmtPromVersion, swUnitMgmt=swUnitMgmt, swEquipPowerSavingPortLedEntry=swEquipPowerSavingPortLedEntry, swUnitRemoveSeverity=swUnitRemoveSeverity, swEquipPowerNotification=swEquipPowerNotification, swUnitMgmtCtrlMode=swUnitMgmtCtrlMode, swEquipFanNotifyPrefix=swEquipFanNotifyPrefix, swFanPostion=swFanPostion, swTemperatureCurrent=swTemperatureCurrent, swUnitMgmtTable=swUnitMgmtTable, swUnitStackForceMasterRole=swUnitStackForceMasterRole, swLowTemperatureSeverity=swLowTemperatureSeverity, swTemperatureEntry=swTemperatureEntry, swExternalAlarmStatus=swExternalAlarmStatus, swEquipFanNotifyMgmt=swEquipFanNotifyMgmt, swExternalAlarmEntry=swExternalAlarmEntry, swUnitMgmtSerialNumber=swUnitMgmtSerialNumber, swHighTemperatureRecoverSeverity=swHighTemperatureRecoverSeverity, swExternalAlarmStackingUnitIndex=swExternalAlarmStackingUnitIndex, swEquipmentTemperatureCtrl=swEquipmentTemperatureCtrl, swPowerStatus=swPowerStatus, swUnitStackMode=swUnitStackMode, swUnitRemove=swUnitRemove, swUnitStackingVersion=swUnitStackingVersion, swEquipPowerSavingHiberRowStatus=swEquipPowerSavingHiberRowStatus, swExternalAlarmMessage=swExternalAlarmMessage, swExternalAlarmTable=swExternalAlarmTable, swPowerEntry=swPowerEntry, swStackRoleChangeType=swStackRoleChangeType, swPowerFailure=swPowerFailure, swEquipPowerSavingLenDetect=swEquipPowerSavingLenDetect, swUnitMgmtUserSetState=swUnitMgmtUserSetState, swUnitTPChange=swUnitTPChange, swPowerTrapState=swPowerTrapState, PYSNMP_MODULE_ID=swEquipmentMIB, swEquipPowerSavingPortState=swEquipPowerSavingPortState, swEquipTemperatureNotifyMgmt=swEquipTemperatureNotifyMgmt, swExternalAlarmStackingStatus=swExternalAlarmStackingStatus, swEquipPowerSavingLinkDetectState=swEquipPowerSavingLinkDetectState, swEquipTemperNotifyBindings=swEquipTemperNotifyBindings, swPowerStatusChgSeverity=swPowerStatusChgSeverity, swTemperatureLowThresh=swTemperatureLowThresh)
