#
# PySNMP MIB module ACLMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACLMGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:13:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, MibIdentifier, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, NotificationType, Integer32, ObjectIdentity, Unsigned32, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "MibIdentifier", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "NotificationType", "Integer32", "ObjectIdentity", "Unsigned32", "Bits", "ModuleIdentity")
DisplayString, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention")
swAclMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 9))
if mibBuilder.loadTexts: swAclMgmtMIB.setLastUpdated('0804180000Z')
if mibBuilder.loadTexts: swAclMgmtMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swAclMgmtMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swAclMgmtMIB.setDescription('The structure of Access Control List information for the proprietary enterprise.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swAclCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 1))
swAclMaskMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 2))
swAclRuleMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 3))
swCpuAclMaskMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 4))
swCpuAclRuleMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 5))
swAclMeteringMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 9, 6))
class Ipv6Address(TextualConvention, OctetString):
    description = 'This data type is used to model IPv6 addresses. This is a binary string of 16 octets in network byte-order.'
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 16)
    fixedLength = 16

swCpuInterfacefilterState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCpuInterfacefilterState.setStatus('current')
if mibBuilder.loadTexts: swCpuInterfacefilterState.setDescription('Enable or disable CPU Interface Filtering (also called Software ACL). The default is disabled. If enabled, the filtering entries in the swAclRuleMgmt tables will be set to active if its RuleSwAclState is enabled. If disabled, the software ACL function will be disabled.')
swACLTotalUsedRuleEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLTotalUsedRuleEntries.setStatus('current')
if mibBuilder.loadTexts: swACLTotalUsedRuleEntries.setDescription('The total number of used ACL rule entries.')
swACLTotalUnusedRuleEntries = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLTotalUnusedRuleEntries.setStatus('current')
if mibBuilder.loadTexts: swACLTotalUnusedRuleEntries.setDescription('The total number of unused ACL rule entries.')
swACLEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1), )
if mibBuilder.loadTexts: swACLEthernetTable.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetTable.setDescription("This table contains ACL mask Ethernet information. The access profile will be created on the switch to define which part of each incoming frame's layer 2 header will be examined by the switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swACLEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLEthernetProfileID"))
if mibBuilder.loadTexts: swACLEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetEntry.setDescription('A list of information about the ACL for Ethernet.')
swACLEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetProfileID.setDescription('The ID of the ACL mask entry unique to the mask list. The maximum value of this object depends on the device.')
swACLEthernetUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUsevlan.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetUsevlan.setDescription('Specifies that the switch will examine the VLAN part of each packet header.')
swACLEthernetMacAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-mac-addr", 2), ("src-mac-addr", 3), ("dst-src-mac-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetMacAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetMacAddrMaskState.setDescription('This object indicates the status of the MAC address mask. other (1) - Neither source MAC address nor destination MAC address are masked. dst-mac-addr (2) - Destination MAC addresses within received frames are to be filtered when matched with the MAC address entry for the table. src-mac-addr (3) - Source MAC addresses within received frames are to be filtered when matched with the MAC address entry for the table. dst-src-mac-addr (4) - Source or destination MAC addresses within received frames are to be filtered when matched with the MAC address entry of the table.')
swACLEthernetSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetSrcMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetSrcMacAddrMask.setDescription('This object specifies the MAC address mask for the source MAC address.')
swACLEthernetDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetDstMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetDstMacAddrMask.setDescription('This object specifies the MAC address mask for the destination MAC address.')
swACLEthernetUse8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUse8021p.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetUse8021p.setDescription("Specifies if the switch will examine the 802.1p priority value in the frame's header or not.")
swACLEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUseEthernetType.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetUseEthernetType.setDescription("Specifies if the switch will examine the Ethernet type value in each frame's header or not.")
swACLEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetRowStatus.setDescription('This object indicates the status of this entry.')
swACLEthernetOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetOwner.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetOwner.setDescription('The owner of the ACL mask entry. The type of ACL entry created. ACL type entries can only be modified when being configured through the same type command. For example IP-MAC Binding entries can only be modified or deleted through the IP-MAC Binding configurations or commands.')
swACLEthernetUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetUnusedRuleEntries.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetUnusedRuleEntries.setDescription('The number of unused rule entries of this Ethernet profile entry.')
swACLEthernetProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetProfileName.setStatus('current')
if mibBuilder.loadTexts: swACLEthernetProfileName.setDescription('The name of the ACL mask entry unique to the mask list.')
swACLIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2), )
if mibBuilder.loadTexts: swACLIpTable.setStatus('current')
if mibBuilder.loadTexts: swACLIpTable.setDescription("This table contains the ACL mask for IP information. Access profiles will be created on the switch to define which part of the incoming frame's IP layer packet header will be examined by the switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swACLIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpProfileID"))
if mibBuilder.loadTexts: swACLIpEntry.setStatus('current')
if mibBuilder.loadTexts: swACLIpEntry.setDescription('A list of information about the ACL of the IP Layer.')
swACLIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLIpProfileID.setDescription('The ID of the ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swACLIpUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUsevlan.setStatus('current')
if mibBuilder.loadTexts: swACLIpUsevlan.setDescription('This object indicates if the IP layer VLAN part is examined or not.')
swACLIpIpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ip-addr", 2), ("src-ip-addr", 3), ("dst-src-ip-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIpAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swACLIpIpAddrMaskState.setDescription('This object indicates the status of IP address mask. other (1) - Neither source IP address nor destination IP address are masked. dst-ip-addr (2) - Destination IP addresses within received frames are to be filtered when matched with the IP address entry of the table. src-ip-addr (3) - Source IP addresses within received frames are to be filtered when matched with the IP address entry of the table. dst-src-ip-addr (4) - Destination or source IP addresses within received frames are to be filtered when matched with the IP address entry of the table.')
swACLIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpSrcIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpSrcIpAddrMask.setDescription('This object specifies the IP address mask for the source IP address.')
swACLIpDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpDstIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpDstIpAddrMask.setDescription('This object specifies the IP address mask for the destination IP address.')
swACLIpUseDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseDSCP.setStatus('current')
if mibBuilder.loadTexts: swACLIpUseDSCP.setDescription('This object indicates if the DSCP protocol in the packet header is to be examined or not.')
swACLIpUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseProtoType.setStatus('current')
if mibBuilder.loadTexts: swACLIpUseProtoType.setDescription('That object indicates which protocol will be examined.')
swACLIpIcmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("type", 2), ("code", 3), ("type-code", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIcmpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpIcmpOption.setDescription('This object indicates which fields are defined for ICMP. none (1)- Both fields are null. type (2)- Type field identified. code (3)- Code field identified. type-code (4)- Both ICMP fields identified. ')
swACLIpIgmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIgmpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpIgmpOption.setDescription('Indicates if the IGMP options field is identified or not.')
swACLIpTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTcpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpTcpOption.setDescription('This object indicates the status of the filtered address of TCP. other (1) - Neither source port nor destination port are masked. dst-addr (2) - Packets will be filtered if this destination port is identified in received frames. src-addr (3) - Packets will be filtered if this source port is identified in received frames. dst-src-addr (4) - Packets will be filtered if this destination or source port is identified in received frames.')
swACLIpUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUdpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpUdpOption.setDescription('This object indicates the status of the filtered address of UDP . other (1) - Neither source port nor destination port are masked. dst-addr (2) - Packets will be filtered if this destination port is identified in received frames. src-addr (3) - Packets will be filtered if this source port is identified in received frames. dst-src-addr (4) - Packets will be filtered if this destination or source port is identified in received frames.')
swACLIpTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPorUDPSrcPortMask.setDescription('Specifies a TCP port mask for the source port if swACLIpUseProtoType is TCP Specifies a UDP port mask for the source port if swACLIpUseProtoType is UDP. ')
swACLIpTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPDstPortMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPorUDPDstPortMask.setDescription('Specifies a TCP port mask for the destination port if swACLIpUseProtoType is TCP Specifies a UDP port mask for the destination port if swACLIpUseProtoType is UDP.')
swACLIpTCPFlagBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBit.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPFlagBit.setDescription('Specifies a TCP connection flag mask.')
swACLIpTCPFlagBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBitMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpTCPFlagBitMask.setDescription('A value which indicates the set of TCP flags that this entity may potentially offer. The value is a sum of flag bits. This sum initially takes the value zero. Then, for each flag, L, is added in the range 1 through 6, for which this node performs transactions where 2^(L-1) is added to the sum. Note that values should be calculated accordingly: Flag functionality 6 urg bit 5 ack bit 4 psh bit 3 rst bit 2 syn bit 1 fin bit For example, if you want to enable urg bit and ack bit, you should set value 48{2^(5-1) + 2^(6-1)}.')
swACLIpProtoIDOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpProtoIDOption.setDescription("Specifies if the switch will examine each frame's protocol ID field or not.")
swACLIpProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoID.setStatus('current')
if mibBuilder.loadTexts: swACLIpProtoID.setDescription('Specifies that the rule applies to the IP protocol ID behind the IP header.')
swACLIpProtoIDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpProtoIDMask.setDescription('Specifies that the rule applies to the IP protocol ID and the mask options behind the IP header.')
swACLIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLIpRowStatus.setDescription('This object indicates the status of this entry.')
swACLIpOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpOwner.setStatus('current')
if mibBuilder.loadTexts: swACLIpOwner.setDescription('The owner of the ACL mask entry. The type of ACL entry created. ACL type entries can only be modified when being configured through the same type command. For example, IP-MAC Binding entries can only be modified or deleted through the IP-MAC Binding configurations or commands.')
swACLIpUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpUnusedRuleEntries.setStatus('current')
if mibBuilder.loadTexts: swACLIpUnusedRuleEntries.setDescription('The number of unused rule entries this IP profile entry.')
swACLIpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProfileName.setStatus('current')
if mibBuilder.loadTexts: swACLIpProfileName.setDescription('The name of the ACL mask entry unique to the mask list.')
swACLPktContMaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3), )
if mibBuilder.loadTexts: swACLPktContMaskTable.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskTable.setDescription("This table contains the ACL mask for user-defined information. An access profile will be created on the switch to define which part of each incoming frame's user-defined part of the packet header will be examined by switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swACLPktContMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLPktContMaskProfileID"))
if mibBuilder.loadTexts: swACLPktContMaskEntry.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskEntry.setDescription('A list of information about user-defined ACLs.')
swACLPktContMaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskProfileID.setDescription('The ID of the ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swACLPktContMaskOffset0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset0to15.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffset0to15.setDescription('Specifies that the rule applies to the packet content (Offset0to15) and the mask options.')
swACLPktContMaskOffset16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset16to31.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffset16to31.setDescription('Specifies that the rule applies to the packet content (Offset16to31) and the mask options.')
swACLPktContMaskOffset32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset32to47.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffset32to47.setDescription('Specifies that the rule applies to the packet content (Offset32to47) and the mask options.')
swACLPktContMaskOffset48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset48to63.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffset48to63.setDescription('Specifies that the rule applies to the packet content (Offset48to63) and the mask options.')
swACLPktContMaskOffset64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffset64to79.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffset64to79.setDescription('Specifies that the rule applies to the packet content (Offset64to79) and the mask options.')
swACLPktContMaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskRowStatus.setDescription('This object indicates the status of this entry.')
swACLPktContMaskOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOwner.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOwner.setDescription('The owner of the ACL mask entry. The type of ACL entry created. ACL type entries can only be modified when being configured through the same type command. For example, IP-MAC Binding entries can only be modified or deleted through the IP-MAC Binding configurations or commands.')
swACLPktContMaskUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskUnusedRuleEntries.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskUnusedRuleEntries.setDescription('The number of unused rule entries of this IP profile entry.')
swACLPktContMaskProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskProfileName.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskProfileName.setDescription('The name of the ACL mask entry unique to the mask list.')
swACLIpv6MaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4), )
if mibBuilder.loadTexts: swACLIpv6MaskTable.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskTable.setDescription("This table contains user-defined ACL mask information. An access profile will be created on the switch to define which parts of each incoming frame's IPv6 part of the packet header will be examined by the switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swACLIpv6MaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpv6MaskProfileID"))
if mibBuilder.loadTexts: swACLIpv6MaskEntry.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskEntry.setDescription('A list of information about user-defined ACLs.')
swACLIpv6MaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6MaskProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskProfileID.setDescription('The ID of the ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swACLIpv6MaskClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskClass.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskClass.setDescription('Specifies that the rule applies to the IPv6 class field and the mask options.')
swACLIpv6MaskFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskFlowlabel.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskFlowlabel.setDescription('Specifies that the rule applies to the IPv6 flowlabel field and the mask options.')
swACLIpv6IpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ipv6-addr", 2), ("src-ipv6-addr", 3), ("dst-src-ipv6-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6IpAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6IpAddrMaskState.setDescription('This object indicates the status of the IPv6 address mask. other (1) - Neither source IPv6 address nor destination IPv6 address are masked. dst-ipv6-addr (2) - Received frame destination IPv6 address is currently used to be filtered as it meets with the IPv6 address entry of the table. src-ipv6-addr (3) - Received frame source IPv6 address is currently used to be filtered as it meets with the IPv6 address entry of the table. dst-src-ipv6-addr (4) - Received frame destination IPv6 address or source IPv6 address is currently used to be filtered as it meets with the IPv6 address entry of the table.')
swACLIpv6MaskSrcIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskSrcIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskSrcIpv6Mask.setDescription('Specifies that the rule applies to the Source IPv6 address and the mask options. This should be a 16 byte octet string.')
swACLIpv6MaskDstIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskDstIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskDstIpv6Mask.setDescription('Specifies that the rule applies to the Destination IPv6 address and the mask options. This should be a 16 byte octet string.')
swACLIpv6MaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskRowStatus.setDescription('This object indicates the status of this entry.')
swACLIpv6MaskOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6MaskOwner.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskOwner.setDescription('The owner of the ACL mask entry. The type of ACL entry created. ACL type entries can only be modified when being configured through the same type command. For example, IP-MAC Binding entries can only be modified or deleted through the IP-MAC Binding configurations or commands.')
swACLIpv6MaskUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6MaskUnusedRuleEntries.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskUnusedRuleEntries.setDescription('The number of unused rule entries of this IP profile entry.')
swACLIpv6MaskProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskProfileName.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskProfileName.setDescription('The name of the ACL mask entry unique to the mask list.')
swACLIpv6MaskUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskUseProtoType.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskUseProtoType.setDescription('That object indicates which protocol will be examined.')
swACLIpv6MaskTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskTcpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskTcpOption.setDescription('This object indicates the status of the filtered address of TCP. other (1) - Neither source port nor destination port are masked. dst-addr (2) - Packets will be filtered if this destination port is identified in received frames. src-addr (3) - Packets will be filtered if this source port is identified in received frames. dst-src-addr (4) - Packets will be filtered if this destination or source port is identified in received frames.')
swACLIpv6MaskUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskUdpOption.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskUdpOption.setDescription('This object indicates the status of the filtered address of UDP. other (1) - Neither source port nor destination port is masked. dst-addr (2) - Packets will be filtered if this destination port is identified in received frames. src-addr (3) - Packets will be filtered if this source port is identified in received frames. dst-src-addr (4) - Packets will be filtered if this destination or source port is identified in received frames.')
swACLIpv6MaskTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskTCPorUDPSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskTCPorUDPSrcPortMask.setDescription('Specifies a TCP port mask for the source port if swACLIpv6MaskUseProtoType is TCP Specifies a UDP port mask for the source port if swACLIpv6MaskUseProtoType is UDP. ')
swACLIpv6MaskTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6MaskTCPorUDPDstPortMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6MaskTCPorUDPDstPortMask.setDescription('Specifies a TCP port mask for the destination port if swACLIpv6MaskUseProtoType is TCP Specifies a UDP port mask for the destination port if swACLIpv6MaskUseProtoType is UDP.')
swACLMaskDelAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLMaskDelAllState.setStatus('current')
if mibBuilder.loadTexts: swACLMaskDelAllState.setDescription('Used to delete all ACL masks.')
swIBPACLEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6), )
if mibBuilder.loadTexts: swIBPACLEthernetTable.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEthernetTable.setDescription("This table contains IP-MAC-Binding ACL mask Ethernet information. Access profiles will be created on the switch by row creation and to define which parts of each incoming frame's layer 2 header part the switch will examine. Masks can be entered that will be combined with the values the switch finds in the specified frame header fields.")
swIBPACLEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLEthernetProfileID"))
if mibBuilder.loadTexts: swIBPACLEthernetEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEthernetEntry.setDescription('A list of information about the Ethernet ACL.')
swIBPACLEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEthernetProfileID.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEthernetProfileID.setDescription('The ID of the ACL mask entry, unique in the mask list. The maximum value of this object depends on the device.')
swIBPACLEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEthernetUseEthernetType.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEthernetUseEthernetType.setDescription("Specifies if the switch will examine the Ethernet type value in each frame's header or not.")
swIBPACLIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7), )
if mibBuilder.loadTexts: swIBPACLIpTable.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpTable.setDescription("This table contains IP-MAC-Binding IP ACL mask information. Access profiles will be created on the switch by row creation and to define which parts of each incoming frame's IP layer part of the header the switch will examine. Masks can be entered that will be combined with the values the switch finds in the specified frame header fields.")
swIBPACLIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLIpProfileID"))
if mibBuilder.loadTexts: swIBPACLIpEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpEntry.setDescription('A list of information about the IP layer of the ACL.')
swIBPACLIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpProfileID.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpProfileID.setDescription('The ID of the ACL mask entry, unique in the mask list. The maximum value of this object depends on the device.')
swIBPACLIpSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpSrcMacAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpSrcMacAddrMask.setDescription('This object specifies the MAC address mask for the source MAC address.')
swIBPACLIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpSrcIpAddrMask.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpSrcIpAddrMask.setDescription('This object specifies IP address masks for the source IP address.')
swACLPktContMaskOptionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8), )
if mibBuilder.loadTexts: swACLPktContMaskOptionTable.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOptionTable.setDescription("This table contains the ACL mask for user-defined option information. An access profile will be created on the switch to define which part of each incoming frame's user-defined part of the packet header will be examined by switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swACLPktContMaskOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLPktContMaskOptionProfileID"))
if mibBuilder.loadTexts: swACLPktContMaskOptionEntry.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOptionEntry.setDescription('A list of information about the user-defined ACL.')
swACLPktContMaskOptionProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOptionProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOptionProfileID.setDescription('The ID of the ACL mask entry, unique to the mask list. The maximum value of this object depends on the device.')
swACLPktContMaskOffsetChunk1State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1State.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1State.setDescription('Specifies the state of chunk1.')
swACLPktContMaskOffsetChunk1OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1OffsetValue.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1OffsetValue.setDescription('Specifies the frame content offset of chunk1.')
swACLPktContMaskOffsetChunk1Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1Mask.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk1Mask.setDescription('Specifies the frame content mask of chunk1.')
swACLPktContMaskOffsetChunk2State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2State.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2State.setDescription('Specifies the state of chunk2.')
swACLPktContMaskOffsetChunk2OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2OffsetValue.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2OffsetValue.setDescription('Specifies the frame content offset of chunk2.')
swACLPktContMaskOffsetChunk2Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2Mask.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk2Mask.setDescription('Specifies the frame content mask of chunk2.')
swACLPktContMaskOffsetChunk3State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3State.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3State.setDescription('Specifies the state of chunk3.')
swACLPktContMaskOffsetChunk3OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3OffsetValue.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3OffsetValue.setDescription('Specifies the frame content offset of chunk3.')
swACLPktContMaskOffsetChunk3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3Mask.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk3Mask.setDescription('Specifies the frame content mask of chunk3.')
swACLPktContMaskOffsetChunk4State = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4State.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4State.setDescription('Specifies the state of chunk4.')
swACLPktContMaskOffsetChunk4OffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4OffsetValue.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4OffsetValue.setDescription('Specifies the frame content offset of chunk4.')
swACLPktContMaskOffsetChunk4Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4Mask.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOffsetChunk4Mask.setDescription('Specifies the frame content mask of chunk4.')
swACLPktContMaskOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOptionRowStatus.setDescription('This object indicates the status of this entry.')
swACLPktContMaskOptionOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOptionOwner.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOptionOwner.setDescription('The owner of the ACL mask entry. The type of ACL entry created. ACL type entries can only be modified when being configured through the same type command. For example, IP-MAC Binding entries can only be modified or deleted through the IP-MAC Binding configurations or commands.')
swACLPktContMaskOptionUnusedRuleEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContMaskOptionUnusedRuleEntries.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOptionUnusedRuleEntries.setDescription('The number of unused rule entries of this IP profile entry.')
swACLPktContMaskOptionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 2, 8, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContMaskOptionProfileName.setStatus('current')
if mibBuilder.loadTexts: swACLPktContMaskOptionProfileName.setDescription('The name of the ACL mask entry unique to the mask list.')
swACLEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1), )
if mibBuilder.loadTexts: swACLEtherRuleTable.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleTable.setDescription('This table contains Ethernet ACL information.')
swACLEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLEtherRuleProfileID"), (0, "ACLMGMT-MIB", "swACLEtherRuleAccessID"))
if mibBuilder.loadTexts: swACLEtherRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEntry.setDescription('A list of information about the ACL rule of the layer 2 part of each packet.')
swACLEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleProfileID.setDescription('The ID of the ACL rule entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swACLEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleAccessID.setDescription('The ID of the the ACL rule entry relates to the swACLEtherRuleProfileID. When row creation is set to 0, assignment of an Access ID for ports is automatic and the swACLEtherRulePort creates Rule entries for the swACLEtherRulePort accordingly. When set from 1 to 65535, an access ID will be created for the swACLEtherRulePort. The swACLEtherRulePort must be set to one port only otherwise the row creation will fail. ')
swACLEtherRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleVlan.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleVlan.setDescription('Specifies that the access rule will apply to this VLAN only.')
swACLEtherRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleSrcMacAddress.setDescription('Specifies that the access rule will apply to only packets with this source MAC address.')
swACLEtherRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleDstMacAddress.setDescription('Specifies that the access rule will apply to only packets with this destination MAC address.')
swACLEtherRule8021P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRule8021P.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRule8021P.setDescription('Specifies that the access rule will apply only to packets with this 802.1p priority value. A value of -1 indicates that this node is not actively used.')
swACLEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEtherType.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEtherType.setDescription('Specifies that the access rule will apply only to packets with this hexadecimal 802.1Q Ethernet type value in the packet header.')
swACLEtherRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnablePriority.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEnablePriority.setDescription('Specifies that the access rule will apply only to packets with priority value.')
swACLEtherRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePriority.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRulePriority.setDescription('Specifies that the priority will be changed in packets while the swACLEtherRuleEnablePriority is enabled .')
swACLEtherRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleReplacePriority.setDescription('Specifies if the switch will change priorities of packets that match the access profile 802.1p priority tag field or not .')
swACLEtherRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceDscp.setDescription('Specifies if the switch will change priorities of packets that match the access profile DSCP field or not. Replace DSCP and replace ToS precedence can not both be supported. ')
swACLEtherRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRepDscp.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleRepDscp.setDescription('Specifies a value to be written to the DSCP field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the DSCP field of the packet.')
swACLEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePermit.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRulePermit.setDescription("This object indicates if the result of the packet examination is 'permit' or 'deny'. The default is 'permit'. permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swACLEtherRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 14), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePort.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRulePort.setDescription('Specifies that the access rule will only apply to port(s). This object and swACLEtherRuleVID can not be set together.')
swACLEtherRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleRowStatus.setDescription('This object indicates the status of this entry.')
swACLEtherRuleOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleOwner.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleOwner.setDescription('The owner of the ACL rule entry. Only owners can modify this entry.')
swACLEtherRuleRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRxRate.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleRxRate.setDescription('Specifies the rx rate, 0 denotes no_limit. The maximum value of this object depends on the device.')
swACLEtherRuleEnableReplaceTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceTosPrecedence.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceTosPrecedence.setDescription('Specifies if the switch will change priorities of packets that match the access profile ToS precedence field or not. Replace DSCP and replace ToS precedence can not both be supported. ')
swACLEtherRuleRepTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRepTosPrecedence.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleRepTosPrecedence.setDescription('Specifies a value to be written to the ToS precedence field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the ToS precedence field of the packet.')
swACLEtherRuleVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleVID.setStatus('current')
if mibBuilder.loadTexts: swACLEtherRuleVID.setDescription('Specifies this rule only applies to the specified VLAN. There are two conditions: 1.only the portlist that belongs to this VLAN will be included; 2.packets must belong to this VLAN. This object and swACLEtherRulePort can not be set together. When you set swACLEtherRulePort, the value of this object will automatically change to 0. And this object can not be set to 0.')
swACLIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2), )
if mibBuilder.loadTexts: swACLIpRuleTable.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleTable.setDescription('')
swACLIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpRuleProfileID"), (0, "ACLMGMT-MIB", "swACLIpRuleAccessID"))
if mibBuilder.loadTexts: swACLIpRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleEntry.setDescription('')
swACLIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleProfileID.setDescription('The ID of the ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swACLIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleAccessID.setDescription('The ID of the ACL rule entry relates to swACLIPRuleProfileID. Row creation set to 0 indicates automatic assignment of the Access ID for the ports in the swACLIpRulePort to create Rule entries for swACLIpRulePort accordingly. Set to 1-65535 causes creation of an access ID for the swACLIpRulePort. The swACLIpRulePort must be set to one port only otherwise the row creation will fail.')
swACLIpRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleVlan.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleVlan.setDescription('Specifies that the access rule will only apply to this VLAN.')
swACLIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcIpaddress.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleSrcIpaddress.setDescription('Specifies an IP source address.')
swACLIpRuleDstIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstIpaddress.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleDstIpaddress.setDescription('Specifies an IP destination address.')
swACLIpRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleDscp.setDescription('Specifies the value of DSCP. The value can be configured from 0 to 63. A value of -1 indicates that this node is not actively used.')
swACLIpRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLIpRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleProtocol.setDescription('Specifies the IP protocol. For some older chips, this object can not be set. When getting this object, it always returns the type which has been configured in swACLIpEntry. For some newer chips, this object can only set the type which has been configured in swACLIpEntry. The default value is none (1). ')
swACLIpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleType.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleType.setDescription('Specifies that the rule applies to the value of ICMP type traffic. A value of -1 denotes that this object is not active.')
swACLIpRuleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleCode.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleCode.setDescription('Specifies that the rule applies to the value of ICMP code traffic. A value of -1 denotes that this object is not active.')
swACLIpRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcPort.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleSrcPort.setDescription('Specifies that the rule applies to the range of the TCP/UDP source ports. A value of -1 indicates that this node is not actively used.')
swACLIpRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstPort.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleDstPort.setDescription('Specifies the TCP/UDP destination port range. A value of -1 indicates that this node is not actively used.')
swACLIpRuleFlagBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleFlagBits.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleFlagBits.setDescription('A value which indicates the set of TCP flags that this entity may potentially offer. The value is a sum of flag bits. This sum initially takes the value zero. Then, for each flag, L is added in the range 1 through 6, for which this node performs transactions, where 2^(L - 1) is added to the sum. Note that values should be calculated accordingly: Flag functionality 6 urg bit 5 ack bit 4 psh bit 3 rst bit 2 syn bit 1 fin bit For example, it you want to enable urg bit and ack bit, you should set value 48{2^(5-1) + 2^(6-1)}.')
swACLIpRuleProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleProtoID.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleProtoID.setDescription('Specifies that the rule applies to the value of IP protocol ID traffic. A value of -1 indicates that this node is not actively used.')
swACLIpRuleUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleUserMask.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleUserMask.setDescription('Specifies that the rule applies to the IP protocol ID and the range of options behind the IP header.')
swACLIpRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnablePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleEnablePriority.setDescription('Specifies that the access rule will apply only to packets with this priority value.')
swACLIpRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpRulePriority.setDescription('Specifies the priority will change in packets while the swACLIpRuleEnablePriority is enabled.')
swACLIpRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleReplacePriority.setDescription('Specifies whether the packets that match the access profile will change the 802.1p priority tag field by the switch or not.')
swACLIpRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceDscp.setDescription('Specifies if the switch will change priorities of packets that match the access profile DSCP field or not. Replace DSCP and replace ToS precedence can not both be supported. ')
swACLIpRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRepDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleRepDscp.setDescription('Specifies a value to be written to the DSCP field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the DSCP field of the packet.')
swACLIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePermit.setStatus('current')
if mibBuilder.loadTexts: swACLIpRulePermit.setDescription("This object indicates if the result of the packet examination is to 'permit' or 'deny'. The default is 'permit'. permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swACLIpRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 21), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePort.setStatus('current')
if mibBuilder.loadTexts: swACLIpRulePort.setDescription('Specifies that the access rule will only apply to port(s). This object and swACLIpRuleVID can not be set together. ')
swACLIpRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleRowStatus.setDescription('This object indicates the status of this entry.')
swACLIpRuleOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleOwner.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleOwner.setDescription('The owner of the ACL rule entry. Only owners can modify this entry.')
swACLIpRuleRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRxRate.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleRxRate.setDescription('Specifies the rx-rate, 0 denotes no_limit. The maximum value of this object depends on the device.')
swACLIpRuleEnableReplaceTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceTosPrecedence.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceTosPrecedence.setDescription('Specifies if the switch will change priorities of packets that match the access profile ToS precedence field or not. Replace DSCP and replace ToS precedence can not both be supported. ')
swACLIpRuleRepTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRepTosPrecedence.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleRepTosPrecedence.setDescription('Specifies a value to be written to the ToS precedence field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the ToS precedence field of the packet.')
swACLIpRuleVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleVID.setStatus('current')
if mibBuilder.loadTexts: swACLIpRuleVID.setDescription('Specifies this rule only applies to the specified VLAN. There are two conditions: 1.only the portlist that belongs to this VLAN will be included; 2.packets must belong to this VLAN. This object and swACLIpRulePort can not be set together. When you set swACLIpRulePort, the value of this object will automatically change to 0. And this object can not be set 0.')
swACLIpv6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4), )
if mibBuilder.loadTexts: swACLIpv6RuleTable.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleTable.setDescription('This table contains the IPv6 ACL rule information.')
swACLIpv6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLIpv6RuleProfileID"), (0, "ACLMGMT-MIB", "swACLIpv6RuleAccessID"))
if mibBuilder.loadTexts: swACLIpv6RuleEntry.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleEntry.setDescription('A list of information about ACL rules regarding the IPv6 part of each packet.')
swACLIpv6RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6RuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleProfileID.setDescription('The ID of the ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swACLIpv6RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6RuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleAccessID.setDescription('The ID of the ACL rule entry relates to swACLIpv6RuleProfileID. When row creation is set to 0, this indicates the access ID will be assigned automatically for the ports in the swACLIpv6RulePort to create rule entries for swACLIpv6RulePort accordingly. Set to 1-65535 indicates creation of an access ID for the swACLIpv6RulePort. The swACLIpv6RulePort must be set to one port only, otherwise the row creation will fail.')
swACLIpv6RuleClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleClass.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleClass.setDescription('Specifies that the rule applies to the IPv6 class field.')
swACLIpv6RuleFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleFlowlabel.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleFlowlabel.setDescription('Specifies that the rule applies to the IPv6 flow label field.')
swACLIpv6RuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleSrcIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleSrcIpv6Addr.setDescription('Specifies that the rule applies to the source IPv6 address. This should be a 16 byte octet string.')
swACLIpv6RuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleDstIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleDstIpv6Addr.setDescription('Specifies that the rule applies to the destination IPv6 address. This should be a 16 byte octet string.')
swACLIpv6RuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleEnablePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleEnablePriority.setDescription('Specifies that the access rule will apply only to packets with priority value.')
swACLIpv6RulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RulePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RulePriority.setDescription('Specifies the priority will change in packets while the swACLIpv6RuleReplacePriority is enabled.')
swACLIpv6RuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleReplacePriority.setDescription('Specifies if the switch will change priorities of packets that match the access profile 802.1p priority tag or not.')
swACLIpv6RulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2), ("mirror", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RulePermit.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RulePermit.setDescription("This object indicates if the result of packet examination is to 'permit' or 'deny'. The default is 'permit'. permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered. mirror - Specifies the packets that match the access profile are copied to the mirror port. Note: The ACL mirror function will work after mirror has been enabled and the mirror port has been configured.")
swACLIpv6RulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 11), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RulePort.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RulePort.setDescription('Specifies that the access rule will apply only to port(s). This object and swACLIpv6RuleVID can not be set together. ')
swACLIpv6RuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleRowStatus.setDescription('This object indicates the status of this entry.')
swACLIpv6RuleOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 1), ("acl", 2), ("ipbind", 3), ("other", 4), ("dhcp", 5), ("netbios", 6), ("ext-netbios", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpv6RuleOwner.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleOwner.setDescription('The owner of the ACL rule entry. Only owners can modify this entry.')
swACLIpv6RuleRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRxRate.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleRxRate.setDescription('Specifies the rx-rate, 0 denotes no_limit. The maximum value of this object depends on the device.')
swACLIpv6RuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleEnableReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleEnableReplaceDscp.setDescription('Specifies if the switch will change priorities of packets that match the access profile DSCP field or not. Replace DSCP and replace ToS precedence can not both be supported. ')
swACLIpv6RuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRepDscp.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleRepDscp.setDescription('Specifies a value to be written to the DSCP field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the DSCP field of the packet.')
swACLIpv6RuleEnableReplaceTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleEnableReplaceTosPrecedence.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleEnableReplaceTosPrecedence.setDescription('Specifies if the switch will change priorities of packets that match the access profile ToS precedence field or not. Replace DSCP and replace ToS precedence can not both be supported. ')
swACLIpv6RuleRepTosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleRepTosPrecedence.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleRepTosPrecedence.setDescription('Specifies a value to be written to the ToS precedence field of an incoming packet that meets the criteria specified in the first part of the command. This value will over-write the value in the ToS precedence field of the packet.')
swACLIpv6RuleVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleVID.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleVID.setDescription('Specifies this rule only applies to the specified VLAN. There are two conditions: 1.only the portlist that belongs to this VLAN will be included; 2.packets must belong to this VLAN. This object and swACLIpv6RulePort can not be set together. When you set swACLIpv6RulePort, the value of this object will automatically change to 0. And this object can not be set 0.')
swACLIpv6RuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleProtocol.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleProtocol.setDescription('Specifies the IPv6 protocol. For some older chips, this object can not be set. When getting this object, it always returns the type which has been configured in swACLIpv6Entry. For some newer chips, this object can only set the type which has been configured in swACLIpv6Entry. The default value is none (1). ')
swACLIpv6RuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleSrcPort.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleSrcPort.setDescription('Specifies that the rule applies to the range of the TCP/UDP source ports.')
swACLIpv6RuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpv6RuleDstPort.setStatus('current')
if mibBuilder.loadTexts: swACLIpv6RuleDstPort.setDescription('Specifies the TCP/UDP destination ports range.')
swIBPACLEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5), )
if mibBuilder.loadTexts: swIBPACLEtherRuleTable.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEtherRuleTable.setDescription('This table contains IP-MAC-Binding Ethernet ACL Rule information.')
swIBPACLEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLEtherRuleProfileID"), (0, "ACLMGMT-MIB", "swIBPACLEtherRuleAccessID"))
if mibBuilder.loadTexts: swIBPACLEtherRuleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEtherRuleEntry.setDescription('A list of information about the ACL rule of the layer 2 part of each packet.')
swIBPACLEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRuleProfileID.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEtherRuleProfileID.setDescription('The ID of the ACL mask entry, unique in the mask list. The maximum value of this object depends on the device.')
swIBPACLEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRuleAccessID.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEtherRuleAccessID.setDescription('The ID of the ACL rule entry in relation to swACLEtherRuleProfileID. When row creation is set to 0, this indicates automatically assigning an Access for the ports in the swACLEtherRulePort to create rule entries for swACLEtherRulePort accordingly. Set to 1-65535 indicates to create the exact access ID for the swACLEtherRulePort and the swACLEtherRulePort must set one port only, otherwise the row creation will fail.')
swIBPACLEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRuleEtherType.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEtherRuleEtherType.setDescription('Specifies that the access rule will apply only to packets with this 802.1Q Ethernet type value in the packet header.')
swIBPACLEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRulePermit.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEtherRulePermit.setDescription("This object indicates if the result of the examination is 'permit' or 'deny'. The default is 'permit' (1). permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swIBPACLEtherRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 5, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLEtherRulePort.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLEtherRulePort.setDescription('Specifies that the access rule will only apply to port(s).')
swIBPACLIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6), )
if mibBuilder.loadTexts: swIBPACLIpRuleTable.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRuleTable.setDescription('')
swIBPACLIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swIBPACLIpRuleProfileID"), (0, "ACLMGMT-MIB", "swIBPACLIpRuleAccessID"))
if mibBuilder.loadTexts: swIBPACLIpRuleEntry.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRuleEntry.setDescription('')
swIBPACLIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleProfileID.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRuleProfileID.setDescription('The ID of the ACL mask entry, unique in the mask list. The maximum value of this object depends on the device.')
swIBPACLIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleAccessID.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRuleAccessID.setDescription('The ID of the ACL rule entry in relation to swACLIPRuleProfileID. When the row creation is set to 0, this indicates assigning an access ID automatically for the ports in the swACLIpRulePort to create rule entries for swACLIpRulePort accordingly. Set to 1-65535 indicates to create the exact access ID for the swACLIpRulePort and the swACLIpRulePort must be set for one port only, otherwise the row creation will fail.')
swIBPACLIpRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleSrcMacAddress.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRuleSrcMacAddress.setDescription('Specifies that the access rule will apply to only packets with this source MAC address.')
swIBPACLIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRuleSrcIpaddress.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRuleSrcIpaddress.setDescription('Specifies an IP source address.')
swIBPACLIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRulePermit.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRulePermit.setDescription("This object indicates if the result of the examination is 'permit' or 'deny'; the default is 'permit' (1) permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swIBPACLIpRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 6, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIBPACLIpRulePort.setStatus('obsolete')
if mibBuilder.loadTexts: swIBPACLIpRulePort.setDescription('Specifies that the access rule will only apply to port(s).')
swACLCounterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8), )
if mibBuilder.loadTexts: swACLCounterTable.setStatus('current')
if mibBuilder.loadTexts: swACLCounterTable.setDescription('This table maintains counter information associated with a specific rule in the ACL rule table. Please refer to the swACLEtherRuleTable, swACLIpRuleTable, swACLIpv6RuleTable and swACLPktContRuleTable for detailed ACL rule information.')
swACLCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLCounterProfileID"), (0, "ACLMGMT-MIB", "swACLCounterAccessID"))
if mibBuilder.loadTexts: swACLCounterEntry.setStatus('current')
if mibBuilder.loadTexts: swACLCounterEntry.setDescription('The entry maintains counter information associated with the ACL rule table.')
swACLCounterProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLCounterProfileID.setDescription('The ID of the ACL mask entry, which is unique in the mask list.')
swACLCounterAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLCounterAccessID.setDescription('The ID of the ACL rule entry as related to the swACLCounterProfileID.')
swACLCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLCounterState.setStatus('current')
if mibBuilder.loadTexts: swACLCounterState.setDescription("Specifies whether the counter feature will be enabled/disabled. 1. This is optional. The default is disable. 2. If the rule is not bound with flow_meter, then all packets that match will be counted. If the rule is bound with flow_meter, then the 'counter' will be overridden. ")
swACLCounterTotalCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterTotalCounter.setStatus('current')
if mibBuilder.loadTexts: swACLCounterTotalCounter.setDescription('The number of matched packets.')
swACLCounterGreenCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterGreenCounter.setStatus('current')
if mibBuilder.loadTexts: swACLCounterGreenCounter.setDescription('The number of matched green packets.')
swACLCounterYellowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterYellowCounter.setStatus('current')
if mibBuilder.loadTexts: swACLCounterYellowCounter.setDescription('The number of matched yellow packets.')
swACLCounterRedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLCounterRedCounter.setStatus('current')
if mibBuilder.loadTexts: swACLCounterRedCounter.setDescription('The number of matched red packets.')
swACLPktContRuleVarOffsetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9), )
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetTable.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetTable.setDescription('This table is used to configure ACL user defined packet content rules for devices that support limited selection of packet content.')
swACLPktContRuleVarOffsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swACLPktContRuleVarOffsetProfileID"), (0, "ACLMGMT-MIB", "swACLPktContRuleVarOffsetAccessID"))
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetEntry.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetEntry.setDescription('A list which contains information on the ACL rules for user-defined parts of a packet.')
swACLPktContRuleVarOffsetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetProfileID.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetProfileID.setDescription('The ID of ACL mask entry, which is unique to the mask list.')
swACLPktContRuleVarOffsetAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetAccessID.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetAccessID.setDescription('The ID of ACL rule entry related to swACLPktContRuleVarOffsetProfileID.')
swACLPktContRuleVarOffsetOffsetIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex1.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex1.setDescription('Specifies the first offset will apply in getting the mask for this rule.')
swACLPktContRuleVarOffsetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask1.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask1.setDescription('Display the mask for this rule. This mask corresponds to swACLPktContRuleVarOffsetOffsetIndex1 and swACLPktContRuleVarOffsetData1.')
swACLPktContRuleVarOffsetData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData1.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData1.setDescription('Specifies the data for this rule. This rule relates to swACLPktContRuleVarOffsetOffsetIndex1 and swACLPktContRuleVarOffsetMask1.')
swACLPktContRuleVarOffsetOffsetIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex2.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex2.setDescription('Specifies the second offset will apply in getting the mask for this rule.')
swACLPktContRuleVarOffsetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask2.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask2.setDescription('Display the mask for this rule. This mask corresponds to swACLPktContRuleVarOffsetOffsetIndex2 and swACLPktContRuleVarOffsetData2.')
swACLPktContRuleVarOffsetData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData2.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData2.setDescription('Specifies the data for this rule. This rule relates to swACLPktContRuleVarOffsetOffsetIndex2 and swACLPktContRuleVarOffsetMask2.')
swACLPktContRuleVarOffsetOffsetIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex3.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex3.setDescription('Specifies the third offset will apply in getting the mask for this rule.')
swACLPktContRuleVarOffsetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask3.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask3.setDescription('Display the mask for this rule. This mask corresponds to swACLPktContRuleVarOffsetOffsetIndex3 and swACLPktContRuleVarOffsetData3.')
swACLPktContRuleVarOffsetData3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData3.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData3.setDescription('Specifies the data for this rule. This rule relates to swACLPktContRuleVarOffsetOffsetIndex3 and swACLPktContRuleVarOffsetMask3.')
swACLPktContRuleVarOffsetOffsetIndex4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex4.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex4.setDescription('Specifies the fourth offset will apply in getting the mask for this rule.')
swACLPktContRuleVarOffsetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask4.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask4.setDescription('Display the mask for this rule. This mask corresponds to swACLPktContRuleVarOffsetOffsetIndex4 and swACLPktContRuleVarOffsetData4.')
swACLPktContRuleVarOffsetData4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData4.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData4.setDescription('Specifies the data for this rule. This rule relates to swACLPktContRuleVarOffsetOffsetIndex4 and swACLPktContRuleVarOffsetMask4.')
swACLPktContRuleVarOffsetOffsetIndex5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex5.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetOffsetIndex5.setDescription('Specifies the fifth offset will apply in getting the mask for this rule.')
swACLPktContRuleVarOffsetMask5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask5.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetMask5.setDescription('Display the mask for this rule. This mask corresponds to swACLPktContRuleVarOffsetOffsetIndex5 and swACLPktContRuleVarOffsetData5.')
swACLPktContRuleVarOffsetData5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData5.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetData5.setDescription('Specifies the data for this rule. This rule relates to swACLPktContRuleVarOffsetOffsetIndex5 and swACLPktContRuleVarOffsetMask5.')
swACLPktContRuleVarOffsetEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetEnablePriority.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetEnablePriority.setDescription('Specifies that the access rule will apply only to packets with this priority value.')
swACLPktContRuleVarOffsetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPriority.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPriority.setDescription('Specifies the priority will change to the packets.')
swACLPktContRuleVarOffsetReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetReplacePriority.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetReplacePriority.setDescription('Specifies if the switch will change priorities of packets that match the access profile 802.1p priority tag or not .')
swACLPktContRuleVarOffsetRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetRxRate.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetRxRate.setDescription('Specifies that the access rule will apply an RX rate. 0 denotes no limit.')
swACLPktContRuleVarOffsetPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPermit.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPermit.setDescription('This object indicates the result of the packet examination is to permit or deny. The default is permit. permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that do not match the access profile are not permitted to be forwarded by the switch and will be filtered.')
swACLPktContRuleVarOffsetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 30), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPort.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetPort.setDescription('Specifies that the access rule will apply only to port(s).')
swACLPktContRuleVarOffsetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 33), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetRowStatus.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetRowStatus.setDescription('This object indicates the status of this entry.')
swACLPktContRuleVarOffsetReplacePriorityWith = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 3, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetReplacePriorityWith.setStatus('current')
if mibBuilder.loadTexts: swACLPktContRuleVarOffsetReplacePriorityWith.setDescription('The value of this node will be used to replace the 802.1p priority tag of the packet that matched the access profile.')
swCpuAclEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1), )
if mibBuilder.loadTexts: swCpuAclEthernetTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetTable.setDescription("This table contains software ACL mask Ethernet information. Access profiles will be created on the switch to define which part of each incoming frame's layer 2 header will be examined by the switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swCpuAclEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclEthernetProfileID"))
if mibBuilder.loadTexts: swCpuAclEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetEntry.setDescription('A list of information about Ethernet ACL masks.')
swCpuAclEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclEthernetProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetProfileID.setDescription('The ID of the software ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swCpuAclEthernetUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetUsevlan.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetUsevlan.setDescription('Specifies that the switch will examine the VLAN part of each packet header.')
swCpuAclEthernetMacAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-mac-addr", 2), ("src-mac-addr", 3), ("dst-src-mac-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetMacAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetMacAddrMaskState.setDescription('This object indicates the status of the MAC address mask. other (1) - Neither source MAC addresses nor destination MAC addresses are masked. dst-mac-addr (2) - Destination MAC addresses within received frames are to be filtered when matched with the MAC address entry of the table. src-mac-addr (3) - Source MAC address within received frames are to be filtered when matched with the MAC address entry of the table. dst-src-mac-addr (4) - Source or destination MAC addresses within received frames are to be filtered when matched with the MAC address entry of this table.')
swCpuAclEthernetSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetSrcMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetSrcMacAddrMask.setDescription('This object specifies the MAC address mask for the source MAC address.')
swCpuAclEthernetDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetDstMacAddrMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetDstMacAddrMask.setDescription('This object specifies the MAC address mask for the destination MAC address.')
swCpuAclEthernetUse8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetUse8021p.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetUse8021p.setDescription("Specifies if the switch will examine the 802.1p priority value in the frame's header or not.")
swCpuAclEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetUseEthernetType.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetUseEthernetType.setDescription("Specifies if the switch will examine the Ethernet type value in each frame's header or not.")
swCpuAclEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEthernetRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEthernetRowStatus.setDescription('This object indicates the status of this entry.')
swCpuAclIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2), )
if mibBuilder.loadTexts: swCpuAclIpTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpTable.setDescription("This table contains software ACL mask IP information. Access profiles will be created on the switch to define which parts of each incoming frame's IP layer 2 header will be examined by the switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swCpuAclIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpProfileID"))
if mibBuilder.loadTexts: swCpuAclIpEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpEntry.setDescription('A list of information about the software ACL of the IP Layer.')
swCpuAclIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpProfileID.setDescription('The ID of the software ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swCpuAclIpUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUsevlan.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpUsevlan.setDescription('This object indicates if the IP layer VLAN part is examined or not.')
swCpuAclIpIpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ip-addr", 2), ("src-ip-addr", 3), ("dst-src-ip-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpIpAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpIpAddrMaskState.setDescription('This object indicates the status of IP address mask. other (1) - Neither source IP addresses nor destination IP address are masked. dst-ip-addr (2) - Destination IP addresses within received frames are to be filtered when matched with the IP address entry of this table. src-ip-addr (3) - Source IP addresses within received frames are to be filtered when matched with the IP address entry of this table. dst-src-ip-addr (4) - Destination or source IP addresses within received frames are to be filtered when matched with the IP address entry of the table.')
swCpuAclIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpSrcIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpSrcIpAddrMask.setDescription('This object specifies the IP address mask for the source IP address.')
swCpuAclIpDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpDstIpAddrMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpDstIpAddrMask.setDescription('This object specifies the IP address mask for the destination IP address.')
swCpuAclIpUseDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUseDSCP.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpUseDSCP.setDescription('This object indicates if the DSCP protocol in the packet header is to be examined or not.')
swCpuAclIpUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUseProtoType.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpUseProtoType.setDescription('This object indicates which protocol will be examined.')
swCpuAclIpIcmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("type", 2), ("code", 3), ("type-code", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpIcmpOption.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpIcmpOption.setDescription('This object indicates which fields are identified for ICMP. none (1)- Both fields are null. type (2)- Type field identified. code (3)- Code field identified. type-code (4)- Both ICMP fields identified. ')
swCpuAclIpIgmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpIgmpOption.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpIgmpOption.setDescription('This object indicates if the IGMP options field is identified or not.')
swCpuAclIpTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTcpOption.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpTcpOption.setDescription('This object indicates the status of filtered addresses of TCP. other (1) - Neither source port nor destination port are masked. dst-addr (2) - Packets will be filtered if this destination port is identified in received frames. src-addr (3) - Packets will be filtered if this source port is identified in received frames. dst-src-addr (4) - Packets will be filtered is this destination or source port is identified in received frames.')
swCpuAclIpUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpUdpOption.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpUdpOption.setDescription('This object indicates the status of filtered addresses of UDP. other (1) - Neither source port nor destination port are masked. dst-addr (2) - Packets will be filtered if this destination port is identified in received frames. src-addr (3) - Packets will be filtered if this source port is identified in received frames. dst-src-addr (4) - Packets will be filtered if this destination or source port is identified in received frames.')
swCpuAclIpTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPorUDPSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpTCPorUDPSrcPortMask.setDescription('Specifies a TCP port mask for the source port if swCpuAclIpUseProtoType is TCP. Specifies a UDP port mask for the source port if swCpuAclIpUseProtoType is UDP. ')
swCpuAclIpTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPorUDPDstPortMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpTCPorUDPDstPortMask.setDescription('Specifies a TCP port mask for the destination port if swCpuAclIpUseProtoType is TCP. Specifies a UDP port mask for the destination port if swCpuAclIpUseProtoType is UDP.')
swCpuAclIpTCPFlagBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPFlagBit.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpTCPFlagBit.setDescription('Specifies a TCP connection flag mask.')
swCpuAclIpTCPFlagBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpTCPFlagBitMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpTCPFlagBitMask.setDescription('A value which indicates the set of TCP flags that this entity may potentially offer. The value is a sum of flag bits. This sum initially takes the value zero. Then, for each flag, L is added in the range 1 through 6, for which this node performs transactions where 2^(L - 1) is added to the sum. Note that values should be calculated accordingly: Flag functionality 6 urg bit 5 ack bit 4 psh bit 3 rst bit 2 syn bit 1 fin bit For example, if you want to enable urg bit and ack bit, you should set value 48{2^(5-1) + 2^(6-1)}.')
swCpuAclIpProtoIDOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpProtoIDOption.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpProtoIDOption.setDescription("Specifies if the switch will examine each frame's Protocol ID field or not.")
swCpuAclIpProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpProtoID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpProtoID.setDescription('')
swCpuAclIpProtoIDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpProtoIDMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpProtoIDMask.setDescription('Specifies that the rule applies to the IP protocol ID and the mask options behind the IP header.')
swCpuAclIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRowStatus.setDescription('This object indicates the status of this entry.')
swCpuAclPktContMaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3), )
if mibBuilder.loadTexts: swCpuAclPktContMaskTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskTable.setDescription("This table contains user-defined software ACL information. Access profiles will be created on the switch to define which part of each incoming frame's user-defined part of the packet header will be examined by the switch. Masks entered will be combined with the values the switch finds in the specified frame header fields.")
swCpuAclPktContMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclPktContMaskProfileID"))
if mibBuilder.loadTexts: swCpuAclPktContMaskEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskEntry.setDescription('A list of information about user-defined software ACLs.')
swCpuAclPktContMaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclPktContMaskProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskProfileID.setDescription('The ID of the software ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swCpuAclPktContMaskOffset0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset0to15.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset0to15.setDescription('Specifies that the rule applies to the packet content (Offset0to15) and the mask options.')
swCpuAclPktContMaskOffset16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset16to31.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset16to31.setDescription('Specifies that the rule applies to the packet content (Offset16to31) and the mask options.')
swCpuAclPktContMaskOffset32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset32to47.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset32to47.setDescription('Specifies that the rule applies to the packet content (Offset32to47) and the mask options.')
swCpuAclPktContMaskOffset48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset48to63.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset48to63.setDescription('Specifies that the rule applies to the packet content (Offset48to63) and the mask options.')
swCpuAclPktContMaskOffset64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset64to79.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskOffset64to79.setDescription('Specifies that the rule applies to the packet content (Offset64to79) and the mask options.')
swCpuAclPktContMaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContMaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContMaskRowStatus.setDescription('This object indicates the status of this entry.')
swCpuAclIpv6MaskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4), )
if mibBuilder.loadTexts: swCpuAclIpv6MaskTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskTable.setDescription("This table contains IPv6 software ACL mask information. An access profile will be created on the switch to define which part of each incoming frame's IPv6 part of the packet header will be examined by switch. Masks entered will be combined with the values the switch finds in the specified frame header fields. ")
swCpuAclIpv6MaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpv6MaskProfileID"))
if mibBuilder.loadTexts: swCpuAclIpv6MaskEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskEntry.setDescription('A list of information about user-defined software ACLs.')
swCpuAclIpv6MaskProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpv6MaskProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskProfileID.setDescription('The ID of the software ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swCpuAclIpv6MaskClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskClass.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskClass.setDescription('Specifies that the rule applies to the IPv6 class field and the mask options.')
swCpuAclIpv6MaskFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskFlowlabel.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskFlowlabel.setDescription('Specifies that the rule applies to the IPv6 flowlabel field and the mask options.')
swCpuAclIpv6IpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ipv6-addr", 2), ("src-ipv6-addr", 3), ("dst-src-ipv6-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6IpAddrMaskState.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6IpAddrMaskState.setDescription('This object indicates the status of IPv6 address mask. other (1) - Neither source IPv6 address nor destination IPv6 address are masked. dst-ipv6-addr (2) - Packets will be filtered if this destination IPv6 address is identified as a match in received frames. src-ipv6-addr (3) - Packets will be filtered if this source IPv6 address is identified as a match in received frames. dst-src-ipv6-addr (4) - Packets will be filtered if this destination or source IPv6 address is identified as a match in received frames.')
swCpuAclIpv6MaskSrcIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskSrcIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskSrcIpv6Mask.setDescription('Specifies that the rule applies to the source IPv6 address and the mask options. This should be a 16 byte octet string.')
swCpuAclIpv6MaskDstIpv6Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskDstIpv6Mask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskDstIpv6Mask.setDescription('Specifies that the rule applies to the destination IPv6 address and the mask options. This should be a 16 byte octet string.')
swCpuAclIpv6MaskRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6MaskRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6MaskRowStatus.setDescription('This object indicates the status of this entry.')
swCpuACLMaskDelAllState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swCpuACLMaskDelAllState.setStatus('current')
if mibBuilder.loadTexts: swCpuACLMaskDelAllState.setDescription('Used to delete all software ACL masks.')
swCpuAclEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1), )
if mibBuilder.loadTexts: swCpuAclEtherRuleTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleTable.setDescription('This table contains Ethernet software ACL rule information.')
swCpuAclEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclEtherRuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclEtherRuleAccessID"))
if mibBuilder.loadTexts: swCpuAclEtherRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleEntry.setDescription('A list of information about the software ACL rule of the layer 2 part of each packet.')
swCpuAclEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclEtherRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleProfileID.setDescription('The ID of the software ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swCpuAclEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclEtherRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleAccessID.setDescription('The ID of the software ACL rule entry as it relates to swCpuAclEtherRuleProfileID.')
swCpuAclEtherRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleVlan.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleVlan.setDescription('Specifies that the access rule will only apply to this VLAN.')
swCpuAclEtherRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleSrcMacAddress.setDescription('Specifies that the access rule will only apply to the packets with this source MAC address.')
swCpuAclEtherRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleDstMacAddress.setDescription('Specifies that the access rule will only apply to the packets with this destination MAC address.')
swCpuAclEtherRule8021P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRule8021P.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRule8021P.setDescription('Specifies that the access rule will only apply to packets with this 802.1p priority value. A value of -1 indicates that this node is not actively used.')
swCpuAclEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleEtherType.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleEtherType.setDescription('Specifies that the access rule will only apply to packets with this 802.1Q Ethernet type value in the packet header.')
swCpuAclEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRulePermit.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRulePermit.setDescription("This object indicates if the result of the packet examination is to 'permit' or 'deny'. The default is 'permit'. permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swCpuAclEtherRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRuleRowStatus.setDescription('This object indicates the status of this entry.')
swCpuAclEtherRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 1, 1, 10), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclEtherRulePort.setStatus('current')
if mibBuilder.loadTexts: swCpuAclEtherRulePort.setDescription('Specifies that the access rule will only apply to port(s).')
swCpuAclIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2), )
if mibBuilder.loadTexts: swCpuAclIpRuleTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleTable.setDescription('This table contains IPv4 software ACL rule information.')
swCpuAclIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpRuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclIpRuleAccessID"))
if mibBuilder.loadTexts: swCpuAclIpRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleEntry.setDescription('A list of information about this software ACL rule.')
swCpuAclIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleProfileID.setDescription('The ID of the software ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swCpuAclIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleAccessID.setDescription('The ID of the software ACL for the IPv4 rule entry.')
swCpuAclIpRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleVlan.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleVlan.setDescription('Specifies that the access rule will apply only to this VLAN.')
swCpuAclIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleSrcIpaddress.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleSrcIpaddress.setDescription('Specifies an IP source address.')
swCpuAclIpRuleDstIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleDstIpaddress.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleDstIpaddress.setDescription('Specifies an IP destination address.')
swCpuAclIpRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleDscp.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleDscp.setDescription('Specifies the value of DSCP, the value can be configured from 0 to 63. A value of -1 indicates that this node is not actively used.')
swCpuAclIpRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpRuleProtocol.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleProtocol.setDescription('Specifies the IP protocol which has been configured in swCpuAclIpEntry.')
swCpuAclIpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleType.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleType.setDescription('Specifies the rule applies to the value of ICMP type traffic. A value of -1 indicates that this node is not actively used.')
swCpuAclIpRuleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleCode.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleCode.setDescription('Specifies the rule applies to the value of ICMP code traffic. A value of -1 indicates that this node is not actively used.')
swCpuAclIpRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleSrcPort.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleSrcPort.setDescription('Specifies the rule applies to the range of TCP/UDP source ports. A value of -1 indicates that this node is not actively used.')
swCpuAclIpRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleDstPort.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleDstPort.setDescription('Specifies the range of TCP/UDP destination ports. A value of -1 indicates that this node is not actively used.')
swCpuAclIpRuleFlagBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleFlagBits.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleFlagBits.setDescription('A value which indicates the set of TCP flags that this entity may potentially offer. The value is a sum of flag bits. This sum initially takes the value zero. Then, for each flag, L is added in the range 1 through 6, for which this node performs transactions where, 2^(L - 1) is added to the sum. Note that values should be calculated accordingly: Flag functionality 6 urg bit 5 ack bit 4 psh bit 3 rst bit 2 syn bit 1 fin bit For example, it you want to enable urg bit and ack bit, you should set the value 48{2^(5-1) + 2^(6-1)}.')
swCpuAclIpRuleProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleProtoID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleProtoID.setDescription('Specifies the rule applies to the value of IP protocol ID traffic. A value of -1 indicates that this node is not actively used.')
swCpuAclIpRuleUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleUserMask.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleUserMask.setDescription('Specifies that the rule applies to the IP protocol ID and the range of options behind the IP header.')
swCpuAclIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRulePermit.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRulePermit.setDescription("This object indicates if the result of the packet examination is to 'permit' or 'deny'. The default is 'permit'. permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swCpuAclIpRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRuleRowStatus.setDescription('This object indicates the status of this entry.')
swCpuAclIpRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 2, 1, 17), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpRulePort.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpRulePort.setDescription('Specifies that the access rule will only apply to port(s).')
swCpuAclPktContRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3), )
if mibBuilder.loadTexts: swCpuAclPktContRuleTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleTable.setDescription('This table contains user-defined software ACL rule information.')
swCpuAclPktContRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclPktContRuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclPktContRuleAccessID"))
if mibBuilder.loadTexts: swCpuAclPktContRuleEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleEntry.setDescription('A list of information about the software ACL rule of the user-defined part of each packet.')
swCpuAclPktContRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclPktContRuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleProfileID.setDescription('The ID of the software ACL mask entry, which is unique to the mask list. The maximum value of this object depends on the device.')
swCpuAclPktContRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclPktContRuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleAccessID.setDescription('The ID of the software ACL rule entry related to swCpuAclPktContRuleProfileID.')
swCpuAclPktContRuleOffset0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset0to15.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset0to15.setDescription('Specifies that the rule applies to the user-defined packet.')
swCpuAclPktContRuleOffset16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset16to31.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset16to31.setDescription('Specifies that the rule applies to the user-defined packet.')
swCpuAclPktContRuleOffset32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset32to47.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset32to47.setDescription('Specifies that the rule applies to the user-defined packet.')
swCpuAclPktContRuleOffset48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset48to63.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset48to63.setDescription('Specifies that the rule applies to the user-defined packet.')
swCpuAclPktContRuleOffset64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset64to79.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleOffset64to79.setDescription('Specifies that the rule applies to the user-defined packet.')
swCpuAclPktContRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRulePermit.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRulePermit.setDescription("This object indicates if the result of the packet examination is to 'permit' or 'deny'. The default is 'permit'. permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swCpuAclPktContRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRuleRowStatus.setDescription('This object indicates the status of this entry.')
swCpuAclPktContRulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 3, 1, 10), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclPktContRulePort.setStatus('current')
if mibBuilder.loadTexts: swCpuAclPktContRulePort.setDescription('Specifies that the access rule will only apply to port(s).')
swCpuAclIpv6RuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4), )
if mibBuilder.loadTexts: swCpuAclIpv6RuleTable.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleTable.setDescription('This table contains user-defined ACL rule information.')
swCpuAclIpv6RuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swCpuAclIpv6RuleProfileID"), (0, "ACLMGMT-MIB", "swCpuAclIpv6RuleAccessID"))
if mibBuilder.loadTexts: swCpuAclIpv6RuleEntry.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleEntry.setDescription('A list of information about the ACL rule of the user-defined part of each packet.')
swCpuAclIpv6RuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpv6RuleProfileID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleProfileID.setDescription('The ID of the ACL mask entry. This is unique in the mask list. The maximum value of this object depends on the device.')
swCpuAclIpv6RuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuAclIpv6RuleAccessID.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleAccessID.setDescription('The ID of the ACL rule entry in relation to swCpuAclIpv6RuleProfileID.')
swCpuAclIpv6RuleClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleClass.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleClass.setDescription('Specifies that the rule applies to the IPv6 class field.')
swCpuAclIpv6RuleFlowlabel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleFlowlabel.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleFlowlabel.setDescription('Specifies that the rule applies to the IPv6 flowlabel field.')
swCpuAclIpv6RuleSrcIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleSrcIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleSrcIpv6Addr.setDescription('Specifies that the rule applies to the source IPv6 address. This should be a 16 byte octet string.')
swCpuAclIpv6RuleDstIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 6), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleDstIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleDstIpv6Addr.setDescription('Specifies that the rule applies to the destination IPv6 address. This should be a 16 byte octet string.')
swCpuAclIpv6RulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RulePermit.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RulePermit.setDescription("This object indicates if the result of the examination is to 'permit' or 'deny'. The default is 'permit' (1). permit - Specifies that packets that match the access profile are permitted to be forwarded by the switch. deny - Specifies that packets that match the access profile are not permitted to be forwarded by the switch and will be filtered.")
swCpuAclIpv6RuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RuleRowStatus.setDescription('This object indicates the status of this entry.')
swCpuAclIpv6RulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 5, 4, 1, 9), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swCpuAclIpv6RulePort.setStatus('current')
if mibBuilder.loadTexts: swCpuAclIpv6RulePort.setDescription('Specifies that the access rule will apply only to port(s).')
swAclMeterTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1), )
if mibBuilder.loadTexts: swAclMeterTable.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTable.setDescription('This table is used to configure the flow-based metering function. The access rule must first be created before the parameters of this function can be applied. Users may set the preferred bandwidth for this rule, in Kbps; once the bandwidth has been exceeded, overflow packets will be either dropped or set for a drop precedence, depending on user configuration.')
swAclMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1), ).setIndexNames((0, "ACLMGMT-MIB", "swAclMeterProfileID"), (0, "ACLMGMT-MIB", "swAclMeterAccessID"))
if mibBuilder.loadTexts: swAclMeterEntry.setStatus('current')
if mibBuilder.loadTexts: swAclMeterEntry.setDescription('This entry displays parameters and configurations set for the flow metering function.')
swAclMeterProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAclMeterProfileID.setStatus('current')
if mibBuilder.loadTexts: swAclMeterProfileID.setDescription('The ID of the ACL mask entry is unique in the mask list. The maximum value of this object depends on the device.')
swAclMeterAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAclMeterAccessID.setStatus('current')
if mibBuilder.loadTexts: swAclMeterAccessID.setDescription('The ID of the ACL rule entry as related to the swAclMeterProfileID.')
swAclMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterRate.setStatus('current')
if mibBuilder.loadTexts: swAclMeterRate.setDescription('Specifies the committed bandwidth in Kbps for the flow. NOTE: 1. Specifying 0 will disable this flow meter setting. 2. Users must set the swAclMeterActionForRateExceed object to activate this entry.')
swAclMeterActionForRateExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("drop-packet", 2), ("set-drop-precedence", 3), ("remark-dscp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterActionForRateExceed.setStatus('current')
if mibBuilder.loadTexts: swAclMeterActionForRateExceed.setDescription('Specifies the action to take for those packets exceeding the committed rate. NOTE: Users must also set the swAclMeterRate to activate this entry.')
swAclMeterRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterRemarkDscp.setStatus('current')
if mibBuilder.loadTexts: swAclMeterRemarkDscp.setDescription('Mark the packet with a specified DSCP. It can be set when swAclMeterActionForRateExceed sets remark-dscp (3).')
swAclMeterBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterBurstSize.setStatus('current')
if mibBuilder.loadTexts: swAclMeterBurstSize.setDescription('This specifies the burst size for the single rate two color mode. The unit is Kbytes. That is to say, 1 means 1kbytes. The set value range is 0..n, the value n is determined by project, the value of 0 means to delete this flow_meter setting.')
swAclMeterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("tr-tcm", 2), ("sr-tcm", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterMode.setStatus('current')
if mibBuilder.loadTexts: swAclMeterMode.setDescription('tr-tcm: two rate three color mode; sr-tcm: single rate three color mode. ')
swAclMeterTrtcmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 156249))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmCir.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmCir.setDescription("Specifies the 'committed information rate' of 'two rate three color mode'. The unit is Kbps.")
swAclMeterTrtcmCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmCbs.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmCbs.setDescription("Specifies the 'committed burst size' of 'two rate three color mode'. 1. The unit is Kbytes. That is to say, 1 means 1Kbytes. 2. This parameter is an optional parameter. The default value is 4*1024. 3. The max set value is 16*1024. ")
swAclMeterTrtcmPir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 156249))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmPir.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmPir.setDescription("Specifies the 'Peak Information Rate' of 'two rate three color mode'. The unit is Kbps.")
swAclMeterTrtcmPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmPbs.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmPbs.setDescription("Specifies the 'peak burst size' of 'two rate three color mode'. 1. The unit is Kbytes. That is to say, 1 means 1kbytes. 2. This parameter is an optional parameter. The default value is 4*1024. 3. The max set value is 16*1024. ")
swAclMeterTrtcmColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-blind", 1), ("color-aware", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmColorMode.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmColorMode.setDescription('Specifies the meter mode. The default is color-blind mode. The final color of the packet is determined by the initial color of the packet and the metering result.')
swAclMeterTrtcmConformState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmConformState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmConformState.setDescription("Specifies the action state when packet is in 'green color'. permit: permit the packet. replace-dscp: change the DSCP value of packet. ")
swAclMeterTrtcmConformReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmConformReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmConformReplaceDscp.setDescription("Specifies the DSCP value of the packet when the packet is in 'green color'.")
swAclMeterTrtcmConformCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmConformCounterState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmConformCounterState.setDescription("Specifies the counter state when the packet is in 'green color'. 1. This is optional. The default is 'disable'. 2. The resource may be limited so that the counter can not be turned on. The limitation is project dependent. 3. counter will be cleared when the function is disabled. ")
swAclMeterTrtcmExceedState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmExceedState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmExceedState.setDescription("Specifies the action state when packet is in 'yellow color'. permit: permit the packet. replace-dscp: change the DSCP value of the packet. drop: drop the packet. ")
swAclMeterTrtcmExceedReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmExceedReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmExceedReplaceDscp.setDescription("Specifies the DSCP value of packet when packet is in 'yellow color'.")
swAclMeterTrtcmExceedCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmExceedCounterState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmExceedCounterState.setDescription("Specifies the counter state when packet is in 'yellow color'. 1. This is optional. The default is 'disable'. 2. The resource may be limited so that the counter can not be turned on. The limitation is project dependent. 3. counter will be cleared when the function is disabled. ")
swAclMeterTrtcmViolateState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmViolateState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmViolateState.setDescription("Specifies the action state when packet is in 'red color'. permit: permit the packet. replace-dscp: change the DSCP value of packet. drop: drop the packet. ")
swAclMeterTrtcmViolateReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmViolateReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmViolateReplaceDscp.setDescription("Specifies the DSCP value of the packet when packet is in 'red color'.")
swAclMeterTrtcmViolateCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterTrtcmViolateCounterState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterTrtcmViolateCounterState.setDescription("Specifies the counter state when packet is in 'red color'. 1. This is optional. The default is 'disable'. 2. The resource may be limited so that the counter can not be turned on. The limitation is project dependent. 3. counter will be cleared when the function is disabled. ")
swAclMeterSrtcmCir = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 156249))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmCir.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmCir.setDescription("Specifies the 'committed information rate' of 'single rate three color mode'. The unit is Kbps.")
swAclMeterSrtcmCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmCbs.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmCbs.setDescription("Specifies the 'committed burst size' of 'single rate three color mode'. 1. The unit is Kbytes. That is to say, 1 means 1Kbytes. 2. The max set value is 16*1024. ")
swAclMeterSrtcmEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmEbs.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmEbs.setDescription("Specifies the 'Excess burst size' of 'single rate three color mode'. 1. The unit is Kbytes. That is to say, 1 means 1kbytes. 2. The max set value is 16*1024. ")
swAclMeterSrtcmColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-blind", 1), ("color-aware", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmColorMode.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmColorMode.setDescription('Specifies the meter mode. The default is color-blind mode. The final color of packet is determined by the initial color of the packet and the metering result.')
swAclMeterSrtcmConformState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmConformState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmConformState.setDescription("Specifies the action state when the packet is in 'green color'. permit: permit the packet. replace-dscp: change the DSCP value of packet. ")
swAclMeterSrtcmConformReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmConformReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmConformReplaceDscp.setDescription("Specifies the DSCP value of the packet when packet is in 'green color'.")
swAclMeterSrtcmConformCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmConformCounterState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmConformCounterState.setDescription("Specifies the counter state when the packet is in 'green color'. 1. This is optional. The default is 'disable'. 2. The resource may be limited such that counter can not be turned on. The limitation is project dependent. 3. counter will be cleared when the function is disabled. ")
swAclMeterSrtcmExceedState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmExceedState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmExceedState.setDescription("Specifies the action state when the packet is in 'yellow color'. permit: permit the packet. replace-dscp: change the DSCP value of packet. drop: drop the packet. ")
swAclMeterSrtcmExceedReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmExceedReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmExceedReplaceDscp.setDescription("Specifies the DSCP value of the packet when packet is in 'yellow color'.")
swAclMeterSrtcmExceedCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmExceedCounterState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmExceedCounterState.setDescription("Specifies the counter state when the packet is in 'yellow color'. 1. This is optional. The default is 'disable'. 2. The resource may be limited such that counter can not be turned on. The limitation is project dependent. 3. counter will be cleared when the function is disabled. ")
swAclMeterSrtcmViolateState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("permit", 2), ("replace-dscp", 3), ("drop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmViolateState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmViolateState.setDescription("Specifies the action state when the packet is in 'red color'. permit: permit the packet. replace-dscp: change the DSCP value of packet. drop: drop the packet. ")
swAclMeterSrtcmViolateReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmViolateReplaceDscp.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmViolateReplaceDscp.setDescription("Specifies the DSCP value of the packet when packet is in 'red color'.")
swAclMeterSrtcmViolateCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterSrtcmViolateCounterState.setStatus('current')
if mibBuilder.loadTexts: swAclMeterSrtcmViolateCounterState.setDescription("Specifies the counter state when the packet is in 'red color'. 1. This is optional. The default is 'disable'. 2. The resource may be limited so that the counter can not be turned on. The limitation is project dependent. 3. counter will be cleared when the function is disabled. ")
swAclMeterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 1, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swAclMeterRowStatus.setStatus('current')
if mibBuilder.loadTexts: swAclMeterRowStatus.setDescription('This object indicates the status of this entry.')
swAclMeteringNumOfEntryInUse = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swAclMeteringNumOfEntryInUse.setStatus('current')
if mibBuilder.loadTexts: swAclMeteringNumOfEntryInUse.setDescription('Used to display total entries of the flow metering.')
mibBuilder.exportSymbols("ACLMGMT-MIB", swACLIpv6MaskUseProtoType=swACLIpv6MaskUseProtoType, swCpuAclEtherRuleRowStatus=swCpuAclEtherRuleRowStatus, swIBPACLIpSrcMacAddrMask=swIBPACLIpSrcMacAddrMask, swACLEtherRuleEnableReplaceDscp=swACLEtherRuleEnableReplaceDscp, swCpuAclEtherRuleProfileID=swCpuAclEtherRuleProfileID, swAclMeterTrtcmConformCounterState=swAclMeterTrtcmConformCounterState, swIBPACLIpSrcIpAddrMask=swIBPACLIpSrcIpAddrMask, swAclMeterMode=swAclMeterMode, swCpuAclIpRuleProtoID=swCpuAclIpRuleProtoID, swACLEthernetOwner=swACLEthernetOwner, swCpuAclIpv6RuleClass=swCpuAclIpv6RuleClass, swACLPktContMaskOffset64to79=swACLPktContMaskOffset64to79, swACLPktContRuleVarOffsetProfileID=swACLPktContRuleVarOffsetProfileID, swCpuAclIpv6RuleDstIpv6Addr=swCpuAclIpv6RuleDstIpv6Addr, swACLIpv6MaskDstIpv6Mask=swACLIpv6MaskDstIpv6Mask, swCpuAclIpTCPorUDPDstPortMask=swCpuAclIpTCPorUDPDstPortMask, swCpuAclIpRuleCode=swCpuAclIpRuleCode, swACLEthernetUseEthernetType=swACLEthernetUseEthernetType, swCpuAclPktContRuleTable=swCpuAclPktContRuleTable, swACLEtherRulePriority=swACLEtherRulePriority, swACLPktContMaskOffset48to63=swACLPktContMaskOffset48to63, swIBPACLEtherRuleProfileID=swIBPACLEtherRuleProfileID, swACLEthernetDstMacAddrMask=swACLEthernetDstMacAddrMask, swACLIpv6RuleDstIpv6Addr=swACLIpv6RuleDstIpv6Addr, swAclMeterSrtcmConformCounterState=swAclMeterSrtcmConformCounterState, swCpuAclEtherRuleAccessID=swCpuAclEtherRuleAccessID, swCpuAclIpTable=swCpuAclIpTable, swACLIpRuleRowStatus=swACLIpRuleRowStatus, swACLIpRowStatus=swACLIpRowStatus, swACLIpRuleDstIpaddress=swACLIpRuleDstIpaddress, swACLEthernetSrcMacAddrMask=swACLEthernetSrcMacAddrMask, swACLPktContRuleVarOffsetPort=swACLPktContRuleVarOffsetPort, swACLIpv6RuleRepDscp=swACLIpv6RuleRepDscp, swACLPktContMaskOffset16to31=swACLPktContMaskOffset16to31, PortList=PortList, swIBPACLEthernetUseEthernetType=swIBPACLEthernetUseEthernetType, swIBPACLIpRuleEntry=swIBPACLIpRuleEntry, swACLIpDstIpAddrMask=swACLIpDstIpAddrMask, swCpuAclEtherRule8021P=swCpuAclEtherRule8021P, swCpuAclIpRuleDstPort=swCpuAclIpRuleDstPort, swACLPktContMaskOptionUnusedRuleEntries=swACLPktContMaskOptionUnusedRuleEntries, swAclMeterSrtcmColorMode=swAclMeterSrtcmColorMode, swIBPACLEtherRuleAccessID=swIBPACLEtherRuleAccessID, swIBPACLEtherRuleEtherType=swIBPACLEtherRuleEtherType, swACLIpv6RuleDstPort=swACLIpv6RuleDstPort, swACLIpv6RuleFlowlabel=swACLIpv6RuleFlowlabel, swACLIpEntry=swACLIpEntry, swACLPktContMaskProfileName=swACLPktContMaskProfileName, swACLIpTable=swACLIpTable, swACLEtherRuleEntry=swACLEtherRuleEntry, swCpuAclPktContMaskRowStatus=swCpuAclPktContMaskRowStatus, swCpuAclEtherRulePort=swCpuAclEtherRulePort, swACLIpProfileName=swACLIpProfileName, swACLIpRuleProtocol=swACLIpRuleProtocol, swACLEthernetProfileID=swACLEthernetProfileID, swACLIpv6RulePriority=swACLIpv6RulePriority, swCpuAclPktContMaskOffset64to79=swCpuAclPktContMaskOffset64to79, swACLIpv6RuleProfileID=swACLIpv6RuleProfileID, swCpuAclEtherRuleEntry=swCpuAclEtherRuleEntry, swIBPACLIpRuleProfileID=swIBPACLIpRuleProfileID, swAclMeterAccessID=swAclMeterAccessID, swACLIpRuleReplacePriority=swACLIpRuleReplacePriority, swACLIpProtoIDOption=swACLIpProtoIDOption, swACLPktContMaskOptionEntry=swACLPktContMaskOptionEntry, swAclMeterTable=swAclMeterTable, swAclMeterSrtcmConformReplaceDscp=swAclMeterSrtcmConformReplaceDscp, swACLEthernetTable=swACLEthernetTable, swCpuAclEtherRuleDstMacAddress=swCpuAclEtherRuleDstMacAddress, swAclMeterSrtcmConformState=swAclMeterSrtcmConformState, swACLPktContMaskOptionProfileID=swACLPktContMaskOptionProfileID, swACLIpRuleAccessID=swACLIpRuleAccessID, swACLIpTCPorUDPSrcPortMask=swACLIpTCPorUDPSrcPortMask, swACLEthernetUnusedRuleEntries=swACLEthernetUnusedRuleEntries, swACLIpRuleEnablePriority=swACLIpRuleEnablePriority, swACLIpv6RuleAccessID=swACLIpv6RuleAccessID, swACLPktContRuleVarOffsetRxRate=swACLPktContRuleVarOffsetRxRate, swCpuAclMaskMgmt=swCpuAclMaskMgmt, swCpuAclIpProtoID=swCpuAclIpProtoID, swACLPktContMaskEntry=swACLPktContMaskEntry, swCpuAclPktContMaskProfileID=swCpuAclPktContMaskProfileID, swACLEtherRuleOwner=swACLEtherRuleOwner, swACLIpv6RuleReplacePriority=swACLIpv6RuleReplacePriority, swACLPktContMaskOffsetChunk1Mask=swACLPktContMaskOffsetChunk1Mask, swAclMeteringMgmt=swAclMeteringMgmt, swACLPktContRuleVarOffsetPermit=swACLPktContRuleVarOffsetPermit, swIBPACLEtherRulePermit=swIBPACLEtherRulePermit, swACLIpv6RuleTable=swACLIpv6RuleTable, swACLIpRuleDscp=swACLIpRuleDscp, swACLIpv6RuleRowStatus=swACLIpv6RuleRowStatus, swCpuAclIpTCPFlagBitMask=swCpuAclIpTCPFlagBitMask, swCpuAclPktContRulePort=swCpuAclPktContRulePort, swAclMeterTrtcmViolateState=swAclMeterTrtcmViolateState, swACLIpRuleEnableReplaceDscp=swACLIpRuleEnableReplaceDscp, swACLPktContMaskOffsetChunk2OffsetValue=swACLPktContMaskOffsetChunk2OffsetValue, swACLIpUseDSCP=swACLIpUseDSCP, swCpuAclIpv6RulePort=swCpuAclIpv6RulePort, swACLEtherRuleRxRate=swACLEtherRuleRxRate, swCpuAclEtherRuleVlan=swCpuAclEtherRuleVlan, swACLEtherRuleEnablePriority=swACLEtherRuleEnablePriority, swACLMaskDelAllState=swACLMaskDelAllState, swACLIpTCPFlagBit=swACLIpTCPFlagBit, swCpuAclIpv6MaskDstIpv6Mask=swCpuAclIpv6MaskDstIpv6Mask, swIBPACLIpRulePermit=swIBPACLIpRulePermit, swACLIpUdpOption=swACLIpUdpOption, swCpuAclPktContRuleOffset64to79=swCpuAclPktContRuleOffset64to79, swAclMeterTrtcmExceedReplaceDscp=swAclMeterTrtcmExceedReplaceDscp, swACLPktContMaskOffsetChunk2State=swACLPktContMaskOffsetChunk2State, swACLPktContMaskOffsetChunk3Mask=swACLPktContMaskOffsetChunk3Mask, swACLPktContRuleVarOffsetOffsetIndex4=swACLPktContRuleVarOffsetOffsetIndex4, swAclMeterTrtcmCir=swAclMeterTrtcmCir, swCpuAclPktContMaskEntry=swCpuAclPktContMaskEntry, swACLIpv6MaskTCPorUDPSrcPortMask=swACLIpv6MaskTCPorUDPSrcPortMask, swACLIpv6RuleClass=swACLIpv6RuleClass, swACLPktContRuleVarOffsetPriority=swACLPktContRuleVarOffsetPriority, swIBPACLEthernetTable=swIBPACLEthernetTable, swACLEtherRuleTable=swACLEtherRuleTable, swCpuAclEthernetDstMacAddrMask=swCpuAclEthernetDstMacAddrMask, swCpuAclIpIpAddrMaskState=swCpuAclIpIpAddrMaskState, swCpuAclIpTCPFlagBit=swCpuAclIpTCPFlagBit, swCpuAclPktContMaskTable=swCpuAclPktContMaskTable, swCpuAclEthernetMacAddrMaskState=swCpuAclEthernetMacAddrMaskState, swIBPACLEtherRuleEntry=swIBPACLEtherRuleEntry, swACLEtherRuleVID=swACLEtherRuleVID, swCpuAclEtherRuleEtherType=swCpuAclEtherRuleEtherType, swCpuAclIpRuleProfileID=swCpuAclIpRuleProfileID, swACLEtherRuleEnableReplaceTosPrecedence=swACLEtherRuleEnableReplaceTosPrecedence, swACLPktContRuleVarOffsetData5=swACLPktContRuleVarOffsetData5, swIBPACLEtherRuleTable=swIBPACLEtherRuleTable, swAclMeterSrtcmExceedState=swAclMeterSrtcmExceedState, swCpuAclIpv6RuleAccessID=swCpuAclIpv6RuleAccessID, swACLPktContRuleVarOffsetEntry=swACLPktContRuleVarOffsetEntry, swACLIpSrcIpAddrMask=swACLIpSrcIpAddrMask, PYSNMP_MODULE_ID=swAclMgmtMIB, swCpuAclIpv6MaskClass=swCpuAclIpv6MaskClass, swCpuAclIpUdpOption=swCpuAclIpUdpOption, swACLIpv6IpAddrMaskState=swACLIpv6IpAddrMaskState, swCpuAclPktContRuleProfileID=swCpuAclPktContRuleProfileID, swCpuAclIpProtoIDOption=swCpuAclIpProtoIDOption, swCpuAclEtherRuleSrcMacAddress=swCpuAclEtherRuleSrcMacAddress, swCpuAclPktContMaskOffset48to63=swCpuAclPktContMaskOffset48to63, swACLPktContRuleVarOffsetRowStatus=swACLPktContRuleVarOffsetRowStatus, swACLIpv6RuleEntry=swACLIpv6RuleEntry, swIBPACLEthernetEntry=swIBPACLEthernetEntry, swACLPktContRuleVarOffsetTable=swACLPktContRuleVarOffsetTable, swACLIpv6RuleEnablePriority=swACLIpv6RuleEnablePriority, swAclMeterTrtcmPir=swAclMeterTrtcmPir, swACLIpTCPorUDPDstPortMask=swACLIpTCPorUDPDstPortMask, swACLCounterEntry=swACLCounterEntry, swACLIpRuleEntry=swACLIpRuleEntry, swAclMeterSrtcmExceedReplaceDscp=swAclMeterSrtcmExceedReplaceDscp, swACLPktContRuleVarOffsetEnablePriority=swACLPktContRuleVarOffsetEnablePriority, swACLIpUnusedRuleEntries=swACLIpUnusedRuleEntries, swCpuAclIpv6IpAddrMaskState=swCpuAclIpv6IpAddrMaskState, swCpuAclIpRuleType=swCpuAclIpRuleType, swCpuAclIpRuleDscp=swCpuAclIpRuleDscp, swCpuAclIpv6MaskTable=swCpuAclIpv6MaskTable, swACLIpProfileID=swACLIpProfileID, swCpuAclIpUseProtoType=swCpuAclIpUseProtoType, swACLPktContRuleVarOffsetData4=swACLPktContRuleVarOffsetData4, swCpuAclEthernetTable=swCpuAclEthernetTable, swCpuAclEthernetEntry=swCpuAclEthernetEntry, swCpuAclPktContRuleOffset0to15=swCpuAclPktContRuleOffset0to15, swCpuAclIpv6RuleFlowlabel=swCpuAclIpv6RuleFlowlabel, swACLIpTCPFlagBitMask=swACLIpTCPFlagBitMask, swCpuAclPktContRuleRowStatus=swCpuAclPktContRuleRowStatus, swAclMeterRowStatus=swAclMeterRowStatus, swACLIpRuleRxRate=swACLIpRuleRxRate, swACLIpRuleVID=swACLIpRuleVID, swCpuAclPktContMaskOffset16to31=swCpuAclPktContMaskOffset16to31, swIBPACLIpTable=swIBPACLIpTable, swACLIpIgmpOption=swACLIpIgmpOption, swACLEthernetProfileName=swACLEthernetProfileName, swAclMeterTrtcmColorMode=swAclMeterTrtcmColorMode, swACLEtherRuleDstMacAddress=swACLEtherRuleDstMacAddress, swACLEtherRulePermit=swACLEtherRulePermit, swACLIpv6RuleOwner=swACLIpv6RuleOwner, swCpuAclEthernetUsevlan=swCpuAclEthernetUsevlan, swCpuAclIpRuleSrcPort=swCpuAclIpRuleSrcPort, swAclMeterProfileID=swAclMeterProfileID, swAclMeterSrtcmViolateState=swAclMeterSrtcmViolateState, swIBPACLEthernetProfileID=swIBPACLEthernetProfileID, swACLIpv6MaskTable=swACLIpv6MaskTable, swACLPktContMaskOffsetChunk4OffsetValue=swACLPktContMaskOffsetChunk4OffsetValue, swACLTotalUnusedRuleEntries=swACLTotalUnusedRuleEntries, swACLEtherRuleReplacePriority=swACLEtherRuleReplacePriority, swAclMeterRate=swAclMeterRate, swCpuAclIpRuleRowStatus=swCpuAclIpRuleRowStatus, swACLEtherRuleSrcMacAddress=swACLEtherRuleSrcMacAddress, swACLEtherRuleProfileID=swACLEtherRuleProfileID, swCpuAclEtherRuleTable=swCpuAclEtherRuleTable, swACLIpRuleDstPort=swACLIpRuleDstPort, swCpuAclPktContRulePermit=swCpuAclPktContRulePermit, swACLEtherRuleRowStatus=swACLEtherRuleRowStatus, swACLPktContMaskRowStatus=swACLPktContMaskRowStatus, swACLCounterAccessID=swACLCounterAccessID, swCpuAclIpv6RuleTable=swCpuAclIpv6RuleTable, swCpuAclIpSrcIpAddrMask=swCpuAclIpSrcIpAddrMask, swCpuAclIpv6RuleEntry=swCpuAclIpv6RuleEntry, swACLIpIpAddrMaskState=swACLIpIpAddrMaskState, swACLEtherRuleEtherType=swACLEtherRuleEtherType, swAclMeterSrtcmCbs=swAclMeterSrtcmCbs, swACLPktContRuleVarOffsetReplacePriorityWith=swACLPktContRuleVarOffsetReplacePriorityWith, swACLPktContRuleVarOffsetReplacePriority=swACLPktContRuleVarOffsetReplacePriority, swCpuAclEtherRulePermit=swCpuAclEtherRulePermit, swACLCounterProfileID=swACLCounterProfileID, swACLIpRuleTable=swACLIpRuleTable, swCpuAclIpv6RuleSrcIpv6Addr=swCpuAclIpv6RuleSrcIpv6Addr, swCpuAclIpIcmpOption=swCpuAclIpIcmpOption, swACLIpRuleOwner=swACLIpRuleOwner, swCpuAclIpRuleTable=swCpuAclIpRuleTable, swACLIpv6MaskTCPorUDPDstPortMask=swACLIpv6MaskTCPorUDPDstPortMask, swACLPktContRuleVarOffsetData2=swACLPktContRuleVarOffsetData2, swCpuAclPktContRuleOffset32to47=swCpuAclPktContRuleOffset32to47, swCpuAclPktContRuleEntry=swCpuAclPktContRuleEntry, swCpuAclPktContMaskOffset0to15=swCpuAclPktContMaskOffset0to15, swIBPACLIpEntry=swIBPACLIpEntry, swACLPktContRuleVarOffsetMask1=swACLPktContRuleVarOffsetMask1, swACLIpv6RuleEnableReplaceDscp=swACLIpv6RuleEnableReplaceDscp, swACLCounterGreenCounter=swACLCounterGreenCounter, swAclMeterSrtcmViolateReplaceDscp=swAclMeterSrtcmViolateReplaceDscp, swCpuAclIpRowStatus=swCpuAclIpRowStatus, swCpuAclIpv6RuleRowStatus=swCpuAclIpv6RuleRowStatus, swACLPktContRuleVarOffsetOffsetIndex5=swACLPktContRuleVarOffsetOffsetIndex5, swAclRuleMgmt=swAclRuleMgmt, swCpuAclPktContRuleAccessID=swCpuAclPktContRuleAccessID, swIBPACLIpRuleTable=swIBPACLIpRuleTable, swCpuAclIpv6RuleProfileID=swCpuAclIpv6RuleProfileID, swAclMeterTrtcmCbs=swAclMeterTrtcmCbs, swAclMeterSrtcmExceedCounterState=swAclMeterSrtcmExceedCounterState, swACLIpUseProtoType=swACLIpUseProtoType, swACLTotalUsedRuleEntries=swACLTotalUsedRuleEntries, swACLIpRulePort=swACLIpRulePort, swACLPktContRuleVarOffsetMask4=swACLPktContRuleVarOffsetMask4, swACLEtherRuleRepTosPrecedence=swACLEtherRuleRepTosPrecedence, swACLIpIcmpOption=swACLIpIcmpOption, swACLPktContMaskOptionProfileName=swACLPktContMaskOptionProfileName, swAclMgmtMIB=swAclMgmtMIB, swAclMeterBurstSize=swAclMeterBurstSize, swACLIpv6RuleRepTosPrecedence=swACLIpv6RuleRepTosPrecedence, swACLPktContRuleVarOffsetMask2=swACLPktContRuleVarOffsetMask2, swACLEtherRulePort=swACLEtherRulePort, swAclMeterSrtcmEbs=swAclMeterSrtcmEbs, swCpuAclIpRuleEntry=swCpuAclIpRuleEntry, swACLPktContMaskProfileID=swACLPktContMaskProfileID, swACLIpv6MaskClass=swACLIpv6MaskClass, swIBPACLIpRuleAccessID=swIBPACLIpRuleAccessID, swACLIpRulePermit=swACLIpRulePermit, swACLIpv6MaskOwner=swACLIpv6MaskOwner, swACLPktContRuleVarOffsetAccessID=swACLPktContRuleVarOffsetAccessID, swACLEthernetMacAddrMaskState=swACLEthernetMacAddrMaskState, swIBPACLIpProfileID=swIBPACLIpProfileID, swAclMeterSrtcmCir=swAclMeterSrtcmCir, swACLIpv6RuleProtocol=swACLIpv6RuleProtocol, swACLIpv6MaskRowStatus=swACLIpv6MaskRowStatus)
mibBuilder.exportSymbols("ACLMGMT-MIB", swIBPACLIpRulePort=swIBPACLIpRulePort, swACLPktContRuleVarOffsetData1=swACLPktContRuleVarOffsetData1, swACLEthernetUse8021p=swACLEthernetUse8021p, swACLPktContMaskOwner=swACLPktContMaskOwner, swACLPktContMaskOffsetChunk1State=swACLPktContMaskOffsetChunk1State, swCpuAclIpv6MaskEntry=swCpuAclIpv6MaskEntry, swACLIpv6RuleVID=swACLIpv6RuleVID, swCpuAclIpProtoIDMask=swCpuAclIpProtoIDMask, swCpuAclIpEntry=swCpuAclIpEntry, swACLCounterYellowCounter=swACLCounterYellowCounter, swACLCounterTable=swACLCounterTable, swACLCounterState=swACLCounterState, swACLPktContRuleVarOffsetOffsetIndex3=swACLPktContRuleVarOffsetOffsetIndex3, swAclMeterTrtcmViolateCounterState=swAclMeterTrtcmViolateCounterState, swACLCounterTotalCounter=swACLCounterTotalCounter, swACLPktContRuleVarOffsetData3=swACLPktContRuleVarOffsetData3, swCpuAclIpv6MaskSrcIpv6Mask=swCpuAclIpv6MaskSrcIpv6Mask, swACLIpRuleSrcIpaddress=swACLIpRuleSrcIpaddress, swAclMeterSrtcmViolateCounterState=swAclMeterSrtcmViolateCounterState, swACLIpv6MaskFlowlabel=swACLIpv6MaskFlowlabel, swACLPktContMaskOptionRowStatus=swACLPktContMaskOptionRowStatus, swCpuAclEthernetUseEthernetType=swCpuAclEthernetUseEthernetType, swACLIpOwner=swACLIpOwner, swACLPktContMaskOptionOwner=swACLPktContMaskOptionOwner, swACLIpRuleEnableReplaceTosPrecedence=swACLIpRuleEnableReplaceTosPrecedence, swAclMaskMgmt=swAclMaskMgmt, swCpuAclIpUsevlan=swCpuAclIpUsevlan, swACLIpv6MaskEntry=swACLIpv6MaskEntry, swCpuAclIpProfileID=swCpuAclIpProfileID, Ipv6Address=Ipv6Address, swCpuAclIpRuleVlan=swCpuAclIpRuleVlan, swACLPktContMaskOptionTable=swACLPktContMaskOptionTable, swAclMeterTrtcmExceedCounterState=swAclMeterTrtcmExceedCounterState, swACLIpRulePriority=swACLIpRulePriority, swCpuAclIpRuleFlagBits=swCpuAclIpRuleFlagBits, swACLIpRuleUserMask=swACLIpRuleUserMask, swACLIpv6RuleRxRate=swACLIpv6RuleRxRate, swACLIpv6MaskProfileID=swACLIpv6MaskProfileID, swCpuAclIpv6MaskFlowlabel=swCpuAclIpv6MaskFlowlabel, swACLPktContMaskOffsetChunk1OffsetValue=swACLPktContMaskOffsetChunk1OffsetValue, swCpuAclPktContRuleOffset48to63=swCpuAclPktContRuleOffset48to63, swCpuAclPktContRuleOffset16to31=swCpuAclPktContRuleOffset16to31, swACLIpRuleType=swACLIpRuleType, swACLPktContMaskUnusedRuleEntries=swACLPktContMaskUnusedRuleEntries, swACLIpv6RulePermit=swACLIpv6RulePermit, swACLEtherRuleAccessID=swACLEtherRuleAccessID, swCpuAclIpIgmpOption=swCpuAclIpIgmpOption, swACLPktContMaskOffsetChunk4Mask=swACLPktContMaskOffsetChunk4Mask, swACLEtherRuleRepDscp=swACLEtherRuleRepDscp, swACLPktContMaskOffsetChunk3OffsetValue=swACLPktContMaskOffsetChunk3OffsetValue, swCpuAclEthernetUse8021p=swCpuAclEthernetUse8021p, swCpuAclIpv6MaskProfileID=swCpuAclIpv6MaskProfileID, swACLIpv6MaskSrcIpv6Mask=swACLIpv6MaskSrcIpv6Mask, swACLIpRuleRepDscp=swACLIpRuleRepDscp, swCpuAclRuleMgmt=swCpuAclRuleMgmt, swACLPktContRuleVarOffsetOffsetIndex1=swACLPktContRuleVarOffsetOffsetIndex1, swACLIpRuleRepTosPrecedence=swACLIpRuleRepTosPrecedence, swCpuAclIpv6MaskRowStatus=swCpuAclIpv6MaskRowStatus, swCpuACLMaskDelAllState=swCpuACLMaskDelAllState, swACLIpRuleCode=swACLIpRuleCode, swCpuAclIpRuleUserMask=swCpuAclIpRuleUserMask, swACLPktContMaskOffsetChunk2Mask=swACLPktContMaskOffsetChunk2Mask, swCpuAclIpRuleProtocol=swCpuAclIpRuleProtocol, swAclMeterEntry=swAclMeterEntry, swAclMeterActionForRateExceed=swAclMeterActionForRateExceed, swAclMeterTrtcmConformReplaceDscp=swAclMeterTrtcmConformReplaceDscp, swACLPktContMaskOffsetChunk4State=swACLPktContMaskOffsetChunk4State, swACLEthernetUsevlan=swACLEthernetUsevlan, swCpuAclEthernetProfileID=swCpuAclEthernetProfileID, swACLPktContMaskOffset0to15=swACLPktContMaskOffset0to15, swCpuAclEthernetSrcMacAddrMask=swCpuAclEthernetSrcMacAddrMask, swACLPktContRuleVarOffsetMask3=swACLPktContRuleVarOffsetMask3, swACLPktContMaskOffset32to47=swACLPktContMaskOffset32to47, swACLIpv6RuleSrcPort=swACLIpv6RuleSrcPort, swACLIpRuleFlagBits=swACLIpRuleFlagBits, swAclMeterTrtcmPbs=swAclMeterTrtcmPbs, swAclMeteringNumOfEntryInUse=swAclMeteringNumOfEntryInUse, swACLIpv6MaskProfileName=swACLIpv6MaskProfileName, swACLIpRuleVlan=swACLIpRuleVlan, swAclMeterTrtcmViolateReplaceDscp=swAclMeterTrtcmViolateReplaceDscp, swACLIpRuleProfileID=swACLIpRuleProfileID, swACLPktContRuleVarOffsetMask5=swACLPktContRuleVarOffsetMask5, swCpuAclIpRuleAccessID=swCpuAclIpRuleAccessID, swACLCounterRedCounter=swACLCounterRedCounter, swACLIpProtoID=swACLIpProtoID, swCpuAclIpDstIpAddrMask=swCpuAclIpDstIpAddrMask, swCpuAclIpUseDSCP=swCpuAclIpUseDSCP, swCpuAclIpRuleSrcIpaddress=swCpuAclIpRuleSrcIpaddress, swCpuInterfacefilterState=swCpuInterfacefilterState, swACLIpv6MaskUdpOption=swACLIpv6MaskUdpOption, swCpuAclIpTcpOption=swCpuAclIpTcpOption, swCpuAclIpRuleDstIpaddress=swCpuAclIpRuleDstIpaddress, swACLIpTcpOption=swACLIpTcpOption, swIBPACLIpRuleSrcMacAddress=swIBPACLIpRuleSrcMacAddress, swIBPACLIpRuleSrcIpaddress=swIBPACLIpRuleSrcIpaddress, swACLIpv6MaskTcpOption=swACLIpv6MaskTcpOption, swACLPktContMaskTable=swACLPktContMaskTable, swCpuAclIpRulePermit=swCpuAclIpRulePermit, swCpuAclIpRulePort=swCpuAclIpRulePort, swCpuAclIpv6RulePermit=swCpuAclIpv6RulePermit, swACLIpRuleProtoID=swACLIpRuleProtoID, swCpuAclPktContMaskOffset32to47=swCpuAclPktContMaskOffset32to47, swCpuAclIpTCPorUDPSrcPortMask=swCpuAclIpTCPorUDPSrcPortMask, swACLIpUsevlan=swACLIpUsevlan, swACLEthernetRowStatus=swACLEthernetRowStatus, swAclMeterRemarkDscp=swAclMeterRemarkDscp, swAclMeterTrtcmConformState=swAclMeterTrtcmConformState, swACLIpProtoIDMask=swACLIpProtoIDMask, swACLIpv6RulePort=swACLIpv6RulePort, swACLEtherRuleVlan=swACLEtherRuleVlan, swACLIpRuleSrcPort=swACLIpRuleSrcPort, swACLEthernetEntry=swACLEthernetEntry, swCpuAclEthernetRowStatus=swCpuAclEthernetRowStatus, swACLPktContRuleVarOffsetOffsetIndex2=swACLPktContRuleVarOffsetOffsetIndex2, swAclMeterTrtcmExceedState=swAclMeterTrtcmExceedState, swACLIpv6RuleEnableReplaceTosPrecedence=swACLIpv6RuleEnableReplaceTosPrecedence, swACLPktContMaskOffsetChunk3State=swACLPktContMaskOffsetChunk3State, swACLEtherRule8021P=swACLEtherRule8021P, swACLIpv6RuleSrcIpv6Addr=swACLIpv6RuleSrcIpv6Addr, swIBPACLEtherRulePort=swIBPACLEtherRulePort, swAclCtrl=swAclCtrl, swACLIpv6MaskUnusedRuleEntries=swACLIpv6MaskUnusedRuleEntries)
