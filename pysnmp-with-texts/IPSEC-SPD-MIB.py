#
# PySNMP MIB module IPSEC-SPD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPSEC-SPD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
IfDirection, diffServMIBMultiFieldClfrGroup, diffServMultiFieldClfrNextFree = mibBuilder.importSymbols("DIFFSERV-MIB", "IfDirection", "diffServMIBMultiFieldClfrGroup", "diffServMultiFieldClfrNextFree")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Bits, iso, ObjectIdentity, Unsigned32, MibIdentifier, NotificationType, Counter32, mib_2, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Bits", "iso", "ObjectIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "Counter32", "mib-2", "ModuleIdentity")
StorageType, DisplayString, TruthValue, RowStatus, TextualConvention, TimeStamp, VariablePointer = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "TruthValue", "RowStatus", "TextualConvention", "TimeStamp", "VariablePointer")
spdMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 153))
spdMIB.setRevisions(('2007-02-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: spdMIB.setRevisionsDescriptions(('Initial version, published as RFC 4807.',))
if mibBuilder.loadTexts: spdMIB.setLastUpdated('200702070000Z')
if mibBuilder.loadTexts: spdMIB.setOrganization('IETF IP Security Policy Working Group')
if mibBuilder.loadTexts: spdMIB.setContactInfo('Michael Baer P.O. Box 72682 Davis, CA 95617 Phone: +1 530 902 3131 Email: baerm@tislabs.com Ricky Charlet Email: rcharlet@alumni.calpoly.edu Wes Hardaker Sparta, Inc. P.O. Box 382 Davis, CA 95617 Phone: +1 530 792 1913 Email: hardaker@tislabs.com Robert Story Revelstone Software PO Box 1812 Tucker, GA 30085 Phone: +1 770 617 3722 Email: rstory@ipsp.revelstone.com Cliff Wang ARO 4300 S. Miami Blvd. Durham, NC 27703 E-Mail: cliffwangmail@yahoo.com')
if mibBuilder.loadTexts: spdMIB.setDescription('This MIB module defines configuration objects for managing IPsec Security Policies. In general, this MIB can be implemented anywhere IPsec security services exist (e.g., bump-in-the-wire, host, gateway, firewall, router, etc.). Copyright (C) The IETF Trust (2007). This version of this MIB module is part of RFC 4807; see the RFC itself for full legal notices.')
spdConfigObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1))
spdNotificationObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 2))
spdConformanceObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 3))
spdActions = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 4))
class SpdBooleanOperator(TextualConvention, Integer32):
    description = 'The SpdBooleanOperator operator is used to specify whether sub-components in a decision-making process are ANDed or ORed together to decide if the resulting expression is true or false.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("or", 1), ("and", 2))

class SpdAdminStatus(TextualConvention, Integer32):
    description = 'The SpdAdminStatus is used to specify the administrative status of an object. Objects that are disabled MUST NOT be used by the packet processing engine.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class SpdIPPacketLogging(TextualConvention, Integer32):
    description = "SpdIPPacketLogging specifies whether an audit message SHOULD be logged if a packet is passed through a Security Association (SA) and if some of that packet is included in the log event. A value of '-1' indicates no logging. A value of '0' or greater indicates that logging SHOULD be done and indicates the number of bytes starting at the beginning of the packet to place in the log. Values greater than the size of the packet being processed indicate that the entire packet SHOULD be sent. Examples: '-1' no logging '0' log but do not include any of the packet in the log '20' log and include the first 20 bytes of the packet in the log."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 65535)

class SpdTimePeriod(TextualConvention, OctetString):
    reference = 'RFC 3060, 3269'
    description = "This property identifies an overall range of calendar dates and time. In a boolean context, a value within this time range, inclusive, is considered true. This information is encoded as an octet string using the UTF-8 transformation format described in STD 63, RFC 3629. It uses the format suggested in RFC 3060. An octet string represents a start date and time and an end date and time. For example: yyyymmddThhmmss/yyyymmddThhmmss Where: yyyy = year mm = month dd = day hh = hour mm = minute ss = second The first 'yyyymmddThhmmss' sub-string indicates the start date and time. The second 'yyyymmddThhmmss' sub-string indicates the end date and time. The character 'T' within these sub-strings indicates the beginning of the time portion of each sub-string. The solidus character '/' separates the start from the end date and time. The end date and time MUST be subsequent to the start date and time. There are also two allowed substitutes for a 'yyyymmddThhmmss' sub-string: one for the start date and time, and one for the end date and time. If the start date and time are replaced with the string 'THISANDPRIOR', this sub-string would indicate the current date and time and the previous dates and time. If the end date and time are replaced with the string 'THISANDFUTURE', this sub-string would indicate the current date and time and the subsequent dates and time. Any of the following SHOULD be considered a 'wrongValue' error: - Setting a value with the end date and time earlier than or equal to the start date and time. - Setting the start date and time to 'THISANDFUTURE'. - Setting the end date and time to 'THISANDPRIOR'."
    status = 'current'
    displayHint = '31t'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 31)

spdLocalConfigObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 1))
spdIngressPolicyGroupName = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spdIngressPolicyGroupName.setStatus('current')
if mibBuilder.loadTexts: spdIngressPolicyGroupName.setDescription("This object indicates the global system policy group that is to be applied on ingress packets (i.e., arriving at an interface from a network) when a given endpoint does not contain a policy definition in the spdEndpointToGroupTable. Its value can be used as an index into the spdGroupContentsTable to retrieve a list of policies. A zero length string indicates that no system-wide policy exists and the default policy of 'drop' SHOULD be executed for ingress packets until one is imposed by either this object or by the endpoint processing a given packet. This object MUST be persistent")
spdEgressPolicyGroupName = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spdEgressPolicyGroupName.setStatus('current')
if mibBuilder.loadTexts: spdEgressPolicyGroupName.setDescription("This object indicates the policy group containing the global system policy that is to be applied on egress packets (i.e., packets leaving an interface and entering a network) when a given endpoint does not contain a policy definition in the spdEndpointToGroupTable. Its value can be used as an index into the spdGroupContentsTable to retrieve a list of policies. A zero length string indicates that no system-wide policy exists and the default policy of 'drop' SHOULD be executed for egress packets until one is imposed by either this object or by the endpoint processing a given packet. This object MUST be persistent")
spdEndpointToGroupTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 2), )
if mibBuilder.loadTexts: spdEndpointToGroupTable.setStatus('current')
if mibBuilder.loadTexts: spdEndpointToGroupTable.setDescription('This table maps policies (groupings) onto an endpoint (interface). A policy group assigned to an endpoint is then used to control access to the network traffic passing through that endpoint. If an endpoint has been configured with a policy group and no rule within that policy group matches that packet, the default action in this case SHALL be to drop the packet. If no policy group has been assigned to an endpoint, then the policy group specified by spdIngressPolicyGroupName MUST be used on traffic inbound from the network through that endpoint, and the policy group specified by spdEgressPolicyGroupName MUST be used for traffic outbound to the network through that endpoint.')
spdEndpointToGroupEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 2, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdEndGroupDirection"), (0, "IPSEC-SPD-MIB", "spdEndGroupInterface"))
if mibBuilder.loadTexts: spdEndpointToGroupEntry.setStatus('current')
if mibBuilder.loadTexts: spdEndpointToGroupEntry.setDescription('A mapping assigning a policy group to an endpoint.')
spdEndGroupDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 1), IfDirection())
if mibBuilder.loadTexts: spdEndGroupDirection.setStatus('current')
if mibBuilder.loadTexts: spdEndGroupDirection.setDescription('This object indicates which direction of packets crossing the interface are associated with which spdEndGroupName object. Ingress packets, or packets into the device match when this value is inbound(1). Egress packets or packets out of the device match when this value is outbound(2).')
spdEndGroupInterface = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: spdEndGroupInterface.setStatus('current')
if mibBuilder.loadTexts: spdEndGroupInterface.setDescription("This value matches the IF-MIB's ifTable's ifIndex column and indicates the interface associated with a given endpoint. This object can be used to uniquely identify an endpoint that a set of policy groups are applied to.")
spdEndGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdEndGroupName.setStatus('current')
if mibBuilder.loadTexts: spdEndGroupName.setDescription('The policy group name to apply at this endpoint. The value of the spdEndGroupName object is then used as an index into the spdGroupContentsTable to come up with a list of rules that MUST be applied at this endpoint.')
spdEndGroupLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdEndGroupLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdEndGroupLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdEndGroupStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdEndGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: spdEndGroupStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdEndGroupRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdEndGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdEndGroupRowStatus.setDescription("This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object is considered 'notReady' and MUST NOT be set to active until one or more active rows exist within the spdGroupContentsTable for the group referenced by the spdEndGroupName object.")
spdGroupContentsTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 3), )
if mibBuilder.loadTexts: spdGroupContentsTable.setStatus('current')
if mibBuilder.loadTexts: spdGroupContentsTable.setDescription("This table contains a list of rules and/or subgroups contained within a given policy group. For a given value of spdGroupContName, the set of rows sharing that value forms a 'group'. The rows in a group MUST be processed according to the value of the spdGroupContPriority object in each row. The processing MUST be executed starting with the lowest value of spdGroupContPriority and in ascending order thereafter. If an action is executed as the result of the processing of a row in a group, the processing of further rows in that group MUST stop. Iterating to the next policy group row by finding the next largest spdGroupContPriority object SHALL only be done if no actions were run while processing the current row for a given packet.")
spdGroupContentsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 3, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdGroupContName"), (0, "IPSEC-SPD-MIB", "spdGroupContPriority"))
if mibBuilder.loadTexts: spdGroupContentsEntry.setStatus('current')
if mibBuilder.loadTexts: spdGroupContentsEntry.setDescription('Defines a given sub-component within a policy group. A sub-component is either a rule or another group as indicated by spdGroupContComponentType and referenced by spdGroupContComponentName.')
spdGroupContName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: spdGroupContName.setStatus('current')
if mibBuilder.loadTexts: spdGroupContName.setDescription("The administrative name of the group associated with this row. A 'group' is formed by all the rows in this table that have the same value of this object.")
spdGroupContPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: spdGroupContPriority.setStatus('current')
if mibBuilder.loadTexts: spdGroupContPriority.setDescription('The priority (sequence number) of the sub-component in a group that this row represents. This value indicates the order that each row of this table MUST be processed from low to high. For example, a row with a priority of 0 is processed before a row with a priority of 1, a 1 before a 2, etc.')
spdGroupContFilter = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 3), VariablePointer().clone((1, 3, 6, 1, 2, 1, 153, 1, 7, 1, 0))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdGroupContFilter.setReference('RFC 3289')
if mibBuilder.loadTexts: spdGroupContFilter.setStatus('current')
if mibBuilder.loadTexts: spdGroupContFilter.setDescription('spdGroupContFilter points to a filter that is evaluated to determine whether the spdGroupContComponentName within this row is exercised. Managers can use this object to classify groups of rules, or subgroups, together in order to achieve a greater degree of control and optimization over the execution order of the items within the group. If the filter evaluates to false, the rule or subgroup will be skipped and the next rule or subgroup will be evaluated instead. This value can be used to indicate a scalar or row in a table. When indicating a row in a table, this value MUST point to the first column instance in that row. An example usage of this object would be to limit a group of rules to executing only when the IP packet being processed is designated to be processed by IKE. This effectively creates a group of IKE-specific rules. The following tables and scalars can be pointed to by this column. All but diffServMultiFieldClfrTable are defined in this MIB: diffServMultiFieldClfrTable spdIpOffsetFilterTable spdTimeFilterTable spdCompoundFilterTable spdTrueFilter spdIpsoHeaderFilterTable Implementations MAY choose to provide support for other filter tables or scalars. If this column is set to a VariablePointer value, which references a non-existent row in an otherwise supported table, the inconsistentName exception MUST be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception MUST be returned. If, during packet processing, a row in this table is applied to a packet and the value of this column in that row references a non-existent or non-supported object, the packet MUST be dropped.')
spdGroupContComponentType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group", 1), ("rule", 2))).clone('rule')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdGroupContComponentType.setStatus('current')
if mibBuilder.loadTexts: spdGroupContComponentType.setDescription('Indicates whether the spdGroupContComponentName object is the name of another group defined within the spdGroupContentsTable or is the name of a rule defined within the spdRuleDefinitionTable.')
spdGroupContComponentName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdGroupContComponentName.setStatus('current')
if mibBuilder.loadTexts: spdGroupContComponentName.setDescription('The name of the policy rule or subgroup contained within this row, as indicated by the spdGroupContComponentType object.')
spdGroupContLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdGroupContLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdGroupContLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdGroupContStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 7), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdGroupContStorageType.setStatus('current')
if mibBuilder.loadTexts: spdGroupContStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdGroupContRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdGroupContRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdGroupContRowStatus.setDescription("This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object MUST NOT be set to active until the row to which the spdGroupContComponentName points to exists and is active. If active, this object MUST remain active unless one of the following two conditions are met: I. No active row in spdEndpointToGroupTable exists that references this row's group (i.e., indicate this row's spdGroupContName). II. Or at least one other active row in this table has a matching spdGroupContName. If neither condition is met, an attempt to set this row to something other than active MUST result in an inconsistentValue error.")
spdRuleDefinitionTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 4), )
if mibBuilder.loadTexts: spdRuleDefinitionTable.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefinitionTable.setDescription('This table defines a rule by associating a filter or a set of filters to an action to be executed.')
spdRuleDefinitionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 4, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdRuleDefName"))
if mibBuilder.loadTexts: spdRuleDefinitionEntry.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefinitionEntry.setDescription('A row defining a particular rule definition. A rule definition binds a filter pointer to an action pointer.')
spdRuleDefName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: spdRuleDefName.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefName.setDescription('spdRuleDefName is the administratively assigned name of the rule referred to by the spdGroupContComponentName object.')
spdRuleDefDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdRuleDefDescription.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefDescription.setDescription('A user defined string. This field MAY be used for administrative tracking purposes.')
spdRuleDefFilter = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 3), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdRuleDefFilter.setReference('RFC 3289')
if mibBuilder.loadTexts: spdRuleDefFilter.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefFilter.setDescription('spdRuleDefFilter points to a filter that is used to evaluate whether the action associated with this row is executed or not. The action will only execute if the filter referenced by this object evaluates to TRUE after first applying any negation required by the spdRuleDefFilterNegated object. The following tables and scalars can be pointed to by this column. All but diffServMultiFieldClfrTable are defined in this MIB. Implementations MAY choose to provide support for other filter tables or scalars as well: diffServMultiFieldClfrTable spdIpOffsetFilterTable spdTimeFilterTable spdCompoundFilterTable spdTrueFilter If this column is set to a VariablePointer value, which references a non-existent row in an otherwise supported table, the inconsistentName exception MUST be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception MUST be returned. If, during packet processing, this column has a value that references a non-existent or non-supported object, the packet MUST be dropped.')
spdRuleDefFilterNegated = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdRuleDefFilterNegated.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefFilterNegated.setDescription('spdRuleDefFilterNegated specifies whether or not the results of the filter referenced by the spdRuleDefFilter object is negated.')
spdRuleDefAction = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdRuleDefAction.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefAction.setDescription('This column points to the action to be taken. It MAY, but is not limited to, point to a row in one of the following tables: spdCompoundActionTable ipsaSaPreconfiguredActionTable ipiaIkeActionTable ipiaIpsecActionTable It MAY also point to one of the scalar objects beneath spdStaticActions. If this object is set to a pointer to a row in an unsupported (or unknown) table, an inconsistentValue error MUST be returned. If this object is set to point to a non-existent row in an otherwise supported table, an inconsistentName error MUST be returned. If, during packet processing, this column has a value that references a non-existent or non-supported object, the packet MUST be dropped.')
spdRuleDefAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 6), SpdAdminStatus().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdRuleDefAdminStatus.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefAdminStatus.setDescription("Indicates whether the current rule definition is considered active. If the value is enabled, the rule MUST be evaluated when processing packets. If the value is disabled, the packet processing MUST continue as if this rule's filter had effectively failed.")
spdRuleDefLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdRuleDefLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdRuleDefStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdRuleDefStorageType.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdRuleDefRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdRuleDefRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object MUST NOT be set to active until the containing conditions, filters, and actions have been defined. Once active, it MUST remain active until no active policyGroupContents entries are referencing it. A failed attempt to do so MUST return an inconsistentValue error.')
spdCompoundFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 5), )
if mibBuilder.loadTexts: spdCompoundFilterTable.setStatus('current')
if mibBuilder.loadTexts: spdCompoundFilterTable.setDescription('A table defining compound filters and their associated parameters. A row in this table can be pointed to by a spdRuleDefFilter object.')
spdCompoundFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 5, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdCompFiltName"))
if mibBuilder.loadTexts: spdCompoundFilterEntry.setStatus('current')
if mibBuilder.loadTexts: spdCompoundFilterEntry.setDescription('An entry in the spdCompoundFilterTable. Each entry in this table represents a compound filter. A filter defined by this table is considered to have a TRUE return value if and only if: spdCompFiltLogicType is AND and all of the sub-filters associated with it, as defined in the spdSubfiltersTable, are all true themselves (after applying any required negation, as defined by the ficFilterIsNegated object). spdCompFiltLogicType is OR and at least one of the sub-filters associated with it, as defined in the spdSubfiltersTable, is true itself (after applying any required negation, as defined by the ficFilterIsNegated object.')
spdCompFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: spdCompFiltName.setStatus('current')
if mibBuilder.loadTexts: spdCompFiltName.setDescription('A user definable string. This value is used as an index into this table.')
spdCompFiltDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdCompFiltDescription.setStatus('current')
if mibBuilder.loadTexts: spdCompFiltDescription.setDescription('A user definable string. This field MAY be used for your administrative tracking purposes.')
spdCompFiltLogicType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 3), SpdBooleanOperator().clone('and')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdCompFiltLogicType.setStatus('current')
if mibBuilder.loadTexts: spdCompFiltLogicType.setDescription('Indicates whether the sub-component filters of this compound filter are functionally ANDed or ORed together.')
spdCompFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdCompFiltLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdCompFiltLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdCompFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdCompFiltStorageType.setStatus('current')
if mibBuilder.loadTexts: spdCompFiltStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdCompFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdCompFiltRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdCompFiltRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. Once active, it MUST NOT have its value changed if any active rows in the spdRuleDefinitionTable are currently pointing at this row.')
spdSubfiltersTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 6), )
if mibBuilder.loadTexts: spdSubfiltersTable.setStatus('current')
if mibBuilder.loadTexts: spdSubfiltersTable.setDescription('This table defines a list of filters contained within a given compound filter defined in the spdCompoundFilterTable.')
spdSubfiltersEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 6, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdCompFiltName"), (0, "IPSEC-SPD-MIB", "spdSubFiltPriority"))
if mibBuilder.loadTexts: spdSubfiltersEntry.setStatus('current')
if mibBuilder.loadTexts: spdSubfiltersEntry.setDescription('An entry in the spdSubfiltersTable. There is an entry in this table for each sub-filter of all compound filters present in the spdCompoundFilterTable.')
spdSubFiltPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: spdSubFiltPriority.setStatus('current')
if mibBuilder.loadTexts: spdSubFiltPriority.setDescription('The priority of a given filter within a compound filter. The order of execution is from lowest to highest priority value (i.e., priority 0 before priority 1, 1 before 2, etc.). Implementations MAY choose to follow this ordering, as set by the manager that created the rows. This can allow a manager to intelligently construct filter lists such that faster filters are evaluated first.')
spdSubFiltSubfilter = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdSubFiltSubfilter.setReference('RFC 3289')
if mibBuilder.loadTexts: spdSubFiltSubfilter.setStatus('current')
if mibBuilder.loadTexts: spdSubFiltSubfilter.setDescription('The OID of the contained filter. The value of this object is a VariablePointer that references the filter to be included in this compound filter. The following tables and scalars can be pointed to by this column. All but diffServMultiFieldClfrTable are defined in this MIB. Implementations MAY choose to provide support for other filter tables or scalars as well: diffServMultiFieldClfrTable spdIpsoHeaderFilterTable spdIpOffsetFilterTable spdTimeFilterTable spdCompoundFilterTable spdTrueFilter If this column is set to a VariablePointer value that references a non-existent row in an otherwise supported table, the inconsistentName exception MUST be returned. If the table or scalar pointed to by the VariablePointer is not supported at all, then an inconsistentValue exception MUST be returned. If, during packet processing, this column has a value that references a non-existent or non-supported object, the packet MUST be dropped.')
spdSubFiltSubfilterIsNegated = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdSubFiltSubfilterIsNegated.setStatus('current')
if mibBuilder.loadTexts: spdSubFiltSubfilterIsNegated.setDescription('Indicates whether or not the result of applying this sub-filter is negated.')
spdSubFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdSubFiltLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdSubFiltLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdSubFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdSubFiltStorageType.setStatus('current')
if mibBuilder.loadTexts: spdSubFiltStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdSubFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdSubFiltRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdSubFiltRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. This object cannot be made active until a filter referenced by the spdSubFiltSubfilter object is both defined and active. An attempt to do so MUST result in an inconsistentValue error. If active, this object MUST remain active unless one of the following two conditions are met: I. No active row in the SpdCompoundFilterTable exists that has a matching spdCompFiltName. II. Or, at least one other active row in this table has a matching spdCompFiltName. If neither condition is met, an attempt to set this row to something other than active MUST result in an inconsistentValue error.')
spdStaticFilters = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 7))
spdTrueFilter = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdTrueFilter.setStatus('current')
if mibBuilder.loadTexts: spdTrueFilter.setDescription('This scalar indicates a (automatic) true result for a filter. That is, this is a filter that is always true; it is useful for adding as a default filter for a default action or a set of actions.')
spdTrueFilterInstance = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 7, 1, 0))
spdIpOffsetFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 8), )
if mibBuilder.loadTexts: spdIpOffsetFilterTable.setStatus('current')
if mibBuilder.loadTexts: spdIpOffsetFilterTable.setDescription('This table contains a list of filter definitions to be used within the spdRuleDefinitionTable or the spdSubfiltersTable. This type of filter is used to compare an administrator specified octet string to the octets at a particular location in a packet.')
spdIpOffsetFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 8, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdIpOffFiltName"))
if mibBuilder.loadTexts: spdIpOffsetFilterEntry.setStatus('current')
if mibBuilder.loadTexts: spdIpOffsetFilterEntry.setDescription('A definition of a particular filter.')
spdIpOffFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: spdIpOffFiltName.setStatus('current')
if mibBuilder.loadTexts: spdIpOffFiltName.setDescription('The administrative name for this filter.')
spdIpOffFiltOffset = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpOffFiltOffset.setStatus('current')
if mibBuilder.loadTexts: spdIpOffFiltOffset.setDescription("This is the byte offset from the front of the entire IP packet where the value or arithmetic comparison is done. A value of '0' indicates the first byte of the packet header. If this value is greater than the length of the packet, the filter represented by this row should be considered to fail.")
spdIpOffFiltType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("equal", 1), ("notEqual", 2), ("arithmeticLess", 3), ("arithmeticGreaterOrEqual", 4), ("arithmeticGreater", 5), ("arithmeticLessOrEqual", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpOffFiltType.setStatus('current')
if mibBuilder.loadTexts: spdIpOffFiltType.setDescription("This defines the various tests that are used when evaluating a given filter. The various tests definable in this table are as follows: equal: - Tests if the OCTET STRING, 'spdIpOffFiltValue', matches a value in the packet starting at the given offset in the packet and comparing the entire OCTET STRING of 'spdIpOffFiltValue'. Any values compared this way are assumed to be unsigned integer values in network byte order of the same length as 'spdIpOffFiltValue'. notEqual: - Tests if the OCTET STRING, 'spdIpOffFiltValue', does not match a value in the packet starting at the given offset in the packet and comparing to the entire OCTET STRING of 'spdIpOffFiltValue'. Any values compared this way are assumed to be unsigned integer values in network byte order of the same length as 'spdIpOffFiltValue'. arithmeticLess: - Tests if the OCTET STRING, 'spdIpOffFiltValue', is arithmetically less than ('<') the value starting at the given offset within the packet. The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'. arithmeticGreaterOrEqual: - Tests if the OCTET STRING, 'spdIpOffFiltValue', is arithmetically greater than or equal to ('>=') the value starting at the given offset within the packet. The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'. arithmeticGreater: - Tests if the OCTET STRING, 'spdIpOffFiltValue', is arithmetically greater than ('>') the value starting at the given offset within the packet. The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'. arithmeticLessOrEqual: - Tests if the OCTET STRING, 'spdIpOffFiltValue', is arithmetically less than or equal to ('<=') the value starting at the given offset within the packet. The value in the packet is assumed to be an unsigned integer in network byte order of the same length as 'spdIpOffFiltValue'.")
spdIpOffFiltValue = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpOffFiltValue.setStatus('current')
if mibBuilder.loadTexts: spdIpOffFiltValue.setDescription('spdIpOffFiltValue is used for match comparisons of a packet at spdIpOffFiltOffset.')
spdIpOffFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdIpOffFiltLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdIpOffFiltLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdIpOffFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpOffFiltStorageType.setStatus('current')
if mibBuilder.loadTexts: spdIpOffFiltStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdIpOffFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpOffFiltRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdIpOffFiltRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. If active, this object MUST remain active if it is referenced by an active row in another table. An attempt to set it to anything other than active while it is referenced by an active row in another table MUST result in an inconsistentValue error.')
spdTimeFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 9), )
if mibBuilder.loadTexts: spdTimeFilterTable.setStatus('current')
if mibBuilder.loadTexts: spdTimeFilterTable.setDescription('Defines a table of filters that can be used to effectively enable or disable policies based on a valid time range.')
spdTimeFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 9, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdTimeFiltName"))
if mibBuilder.loadTexts: spdTimeFilterEntry.setStatus('current')
if mibBuilder.loadTexts: spdTimeFilterEntry.setDescription("A row describing a given time frame for which a policy is filtered on to activate or deactivate the rule. If all the column objects in a row are true for the current time, the row evaluates as 'true'. More explicitly, the time matching column objects in a row MUST be logically ANDed together to form the boolean true/false for the row.")
spdTimeFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: spdTimeFiltName.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltName.setDescription('An administratively assigned name for this filter.')
spdTimeFiltPeriod = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 2), SpdTimePeriod().clone('THISANDPRIOR/THISANDFUTURE')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdTimeFiltPeriod.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltPeriod.setDescription("The valid time period for this filter. This column is considered 'true' if the current time is within the range of this object.")
spdTimeFiltMonthOfYearMask = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 3), Bits().clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11))).clone(namedValues=NamedValues(("january", 0), ("february", 1), ("march", 2), ("april", 3), ("may", 4), ("june", 5), ("july", 6), ("august", 7), ("september", 8), ("october", 9), ("november", 10), ("december", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdTimeFiltMonthOfYearMask.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltMonthOfYearMask.setDescription("A bit mask that indicates acceptable months of the year. This column evaluates to 'true' if the current month's bit is set.")
spdTimeFiltDayOfMonthMask = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone(hexValue="fffffffffffffffe")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdTimeFiltDayOfMonthMask.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltDayOfMonthMask.setDescription("Defines which days of the month the current time is valid for. It is a sequence of 64 BITS, where each BIT represents a corresponding day of the month in forward or reverse order. Starting from the left-most bit, the first 31 bits identify the day of the month, counting from the beginning of the month. The following 31 bits (bits 32-62) indicate the day of the month, counting from the end of the month. For months with fewer than 31 days, the bits that correspond to the non-existent days of that month are ignored (e.g., for non-leap year Februarys, bits 29-31 and 60-62 are ignored). This column evaluates to 'true' if the current day of the month's bit is set. For example, a value of 0X'80 00 00 01 00 00 00 00' indicates that this column evaluates to true on the first and last days of the month. The last two bits in the string MUST be zero.")
spdTimeFiltDayOfWeekMask = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 5), Bits().clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdTimeFiltDayOfWeekMask.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltDayOfWeekMask.setDescription("A bit mask that defines which days of the week that the current time is valid for. This column evaluates to 'true' if the current day of the week's bit is set.")
spdTimeFiltTimeOfDayMask = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 6), SpdTimePeriod().clone('00000000T000000/00000000T240000')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdTimeFiltTimeOfDayMask.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltTimeOfDayMask.setDescription("Indicates the start and end time of the day for which this filter evaluates to true. The date portions of the spdTimePeriod TC are ignored for purposes of evaluating this mask, and only the time-specific portions are used. This column evaluates to 'true' if the current time of day is within the range of the start and end times of the day indicated by this object.")
spdTimeFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdTimeFiltLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdTimeFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdTimeFiltStorageType.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdTimeFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 9, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdTimeFiltRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdTimeFiltRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. If active, this object MUST remain active if it is referenced by an active row in another table. An attempt to set it to anything other than active while it is referenced by an active row in another table MUST result in an inconsistentValue error.')
spdIpsoHeaderFilterTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 10), )
if mibBuilder.loadTexts: spdIpsoHeaderFilterTable.setReference('RFC 1108')
if mibBuilder.loadTexts: spdIpsoHeaderFilterTable.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeaderFilterTable.setDescription('This table contains a list of IPSO header filter definitions to be used within the spdRuleDefinitionTable or the spdSubfiltersTable. IPSO headers and their values are described in RFC 1108.')
spdIpsoHeaderFilterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 10, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdIpsoHeadFiltName"))
if mibBuilder.loadTexts: spdIpsoHeaderFilterEntry.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeaderFilterEntry.setDescription('A definition of a particular filter.')
spdIpsoHeadFiltName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: spdIpsoHeadFiltName.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeadFiltName.setDescription('The administrative name for this filter.')
spdIpsoHeadFiltType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 2), Bits().clone(namedValues=NamedValues(("classificationLevel", 0), ("protectionAuthority", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpsoHeadFiltType.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeadFiltType.setDescription('This object indicates which of the IPSO header field a packet is filtered on for this row. If this object is set to classification(0), the spdIpsoHeadFiltClassification object indicates how the packet is filtered. If this object is set to protectionAuthority(1), the spdIpsoHeadFiltProtectionAuth object indicates how the packet is filtered.')
spdIpsoHeadFiltClassification = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(61, 90, 150, 171))).clone(namedValues=NamedValues(("topSecret", 61), ("secret", 90), ("confidential", 150), ("unclassified", 171)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpsoHeadFiltClassification.setReference('RFC 1108')
if mibBuilder.loadTexts: spdIpsoHeadFiltClassification.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeadFiltClassification.setDescription("This object indicates the IPSO classification header field value that the packet MUST have for this row to evaluate to 'true'. The values of these enumerations are defined by RFC 1108.")
spdIpsoHeadFiltProtectionAuth = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("genser", 0), ("siopesi", 1), ("sci", 2), ("nsa", 3), ("doe", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpsoHeadFiltProtectionAuth.setReference('RFC 1108')
if mibBuilder.loadTexts: spdIpsoHeadFiltProtectionAuth.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeadFiltProtectionAuth.setDescription("This object indicates the IPSO protection authority header field value that the packet MUST have for this row to evaluate to 'true'. The values of these enumerations are defined by RFC 1108. Hence the reason the SMIv2 convention of not using 0 in enumerated lists is violated here.")
spdIpsoHeadFiltLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdIpsoHeadFiltLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeadFiltLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdIpsoHeadFiltStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpsoHeadFiltStorageType.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeadFiltStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdIpsoHeadFiltRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdIpsoHeadFiltRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeadFiltRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. However, this object MUST NOT be set to active if the requirements of the spdIpsoHeadFiltType object are not met. Specifically, if the spdIpsoHeadFiltType bit for classification(0) is set, the spdIpsoHeadFiltClassification column MUST have a valid value for the row status to be set to active. If the spdIpsoHeadFiltType bit for protectionAuthority(1) is set, the spdIpsoHeadFiltProtectionAuth column MUST have a valid value for the row status to be set to active. If active, this object MUST remain active if it is referenced by an active row in another table. An attempt to set it to anything other than active while it is referenced by an active row in another table MUST result in an inconsistentValue error.')
spdCompoundActionTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 11), )
if mibBuilder.loadTexts: spdCompoundActionTable.setStatus('current')
if mibBuilder.loadTexts: spdCompoundActionTable.setDescription('Table used to allow multiple actions to be associated with a rule. It uses the spdSubactionsTable to do this. The rows from spdSubactionsTable that are partially indexed by spdCompActName form the set of compound actions to be performed. The spdCompActExecutionStrategy column in this table indicates how those actions are processed.')
spdCompoundActionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 11, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdCompActName"))
if mibBuilder.loadTexts: spdCompoundActionEntry.setStatus('current')
if mibBuilder.loadTexts: spdCompoundActionEntry.setDescription('A row in the spdCompoundActionTable.')
spdCompActName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: spdCompActName.setStatus('current')
if mibBuilder.loadTexts: spdCompActName.setDescription('This is an administratively assigned name of this compound action.')
spdCompActExecutionStrategy = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("doAll", 1), ("doUntilSuccess", 2), ("doUntilFailure", 3))).clone('doUntilSuccess')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdCompActExecutionStrategy.setStatus('current')
if mibBuilder.loadTexts: spdCompActExecutionStrategy.setDescription('This object indicates how the sub-actions are executed based on the success of the actions as they finish executing. doAll - run each sub-action regardless of the exit status of the previous action. This parent action is always considered to have acted successfully. doUntilSuccess - run each sub-action until one succeeds, at which point stop processing the sub-actions within this parent compound action. If one of the sub-actions did execute successfully, this parent action is also considered to have executed successfully. doUntilFailure - run each sub-action until one fails, at which point stop processing the sub-actions within this compound action. If any sub-action fails, the result of this parent action is considered to have failed.')
spdCompActLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdCompActLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdCompActLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdCompActStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdCompActStorageType.setStatus('current')
if mibBuilder.loadTexts: spdCompActStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdCompActRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdCompActRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdCompActRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. Once a row in the spdCompoundActionTable has been made active, this object MUST NOT be set to destroy without first destroying all the contained rows listed in the spdSubactionsTable.')
spdSubactionsTable = MibTable((1, 3, 6, 1, 2, 1, 153, 1, 12), )
if mibBuilder.loadTexts: spdSubactionsTable.setStatus('current')
if mibBuilder.loadTexts: spdSubactionsTable.setDescription('This table contains a list of the sub-actions within a given compound action. Compound actions executing these actions MUST execute them in series based on the spdSubActPriority value, with the lowest value executing first.')
spdSubactionsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 153, 1, 12, 1), ).setIndexNames((0, "IPSEC-SPD-MIB", "spdCompActName"), (0, "IPSEC-SPD-MIB", "spdSubActPriority"))
if mibBuilder.loadTexts: spdSubactionsEntry.setStatus('current')
if mibBuilder.loadTexts: spdSubactionsEntry.setDescription('A row containing a reference to a given compound-action sub-action.')
spdSubActPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: spdSubActPriority.setStatus('current')
if mibBuilder.loadTexts: spdSubActPriority.setDescription('The priority of a given sub-action within a compound action. The order in which sub-actions MUST be executed are based on the value from this column, with the lowest numeric value executing first (i.e., priority 0 before priority 1, 1 before 2, etc.).')
spdSubActSubActionName = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 2), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdSubActSubActionName.setStatus('current')
if mibBuilder.loadTexts: spdSubActSubActionName.setDescription('This column points to the action to be taken. It MAY, but is not limited to, point to a row in one of the following tables: spdCompoundActionTable - Allowing recursion ipsaSaPreconfiguredActionTable ipiaIkeActionTable ipiaIpsecActionTable It MAY also point to one of the scalar objects beneath spdStaticActions. If this object is set to a pointer to a row in an unsupported (or unknown) table, an inconsistentValue error MUST be returned. If this object is set to point to a non-existent row in an otherwise supported table, an inconsistentName error MUST be returned. If, during packet processing, this column has a value that references a non-existent or non-supported object, the packet MUST be dropped.')
spdSubActLastChanged = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdSubActLastChanged.setStatus('current')
if mibBuilder.loadTexts: spdSubActLastChanged.setDescription('The value of sysUpTime when this row was last modified or created either through SNMP SETs or by some other external means. If this row has not been modified since the last re-initialization of the network management subsystem, this object SHOULD have a zero value.')
spdSubActStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdSubActStorageType.setStatus('current')
if mibBuilder.loadTexts: spdSubActStorageType.setDescription('The storage type for this row. Rows in this table that were created through an external process MAY have a storage type of readOnly or permanent. For a storage type of permanent, none of the columns have to be writable.')
spdSubActRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 153, 1, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: spdSubActRowStatus.setStatus('current')
if mibBuilder.loadTexts: spdSubActRowStatus.setDescription('This object indicates the conceptual status of this row. The value of this object has no effect on whether other objects in this conceptual row can be modified. If active, this object MUST remain active unless one of the following two conditions are met. An attempt to set it to anything other than active while the following conditions are not met MUST result in an inconsistentValue error. The two conditions are: I. No active row in the spdCompoundActionTable exists which has a matching spdCompActName. II. Or, at least one other active row in this table has a matching spdCompActName.')
spdStaticActions = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 1, 13))
spdDropAction = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdDropAction.setStatus('current')
if mibBuilder.loadTexts: spdDropAction.setDescription('This scalar indicates that a packet MUST be dropped and SHOULD NOT have action/packet logging.')
spdDropActionLog = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdDropActionLog.setStatus('current')
if mibBuilder.loadTexts: spdDropActionLog.setDescription('This scalar indicates that a packet MUST be dropped and SHOULD have action/packet logging.')
spdAcceptAction = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdAcceptAction.setStatus('current')
if mibBuilder.loadTexts: spdAcceptAction.setDescription('This Scalar indicates that a packet MUST be accepted (pass-through) and SHOULD NOT have action/packet logging.')
spdAcceptActionLog = MibScalar((1, 3, 6, 1, 2, 1, 153, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: spdAcceptActionLog.setStatus('current')
if mibBuilder.loadTexts: spdAcceptActionLog.setDescription('This scalar indicates that a packet MUST be accepted (pass-through) and SHOULD have action/packet logging.')
spdNotificationVariables = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 2, 1))
spdNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 2, 0))
spdActionExecuted = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 1), VariablePointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdActionExecuted.setStatus('current')
if mibBuilder.loadTexts: spdActionExecuted.setDescription('Points to the action instance that was executed that resulted in the notification being sent.')
spdIPEndpointAddType = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdIPEndpointAddType.setStatus('current')
if mibBuilder.loadTexts: spdIPEndpointAddType.setDescription('Contains the address type for the interface that the notification triggering packet is passing through.')
spdIPEndpointAddress = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdIPEndpointAddress.setStatus('current')
if mibBuilder.loadTexts: spdIPEndpointAddress.setDescription('Contains the interface address for the interface that the notification triggering packet is passing through. The format of this object is specified by the spdIPEndpointAddType object.')
spdIPSourceType = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 4), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdIPSourceType.setStatus('current')
if mibBuilder.loadTexts: spdIPSourceType.setDescription('Contains the source address type of the packet that triggered the notification.')
spdIPSourceAddress = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 5), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdIPSourceAddress.setStatus('current')
if mibBuilder.loadTexts: spdIPSourceAddress.setDescription('Contains the source address of the packet that triggered the notification. The format of this object is specified by the spdIPSourceType object.')
spdIPDestinationType = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 6), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdIPDestinationType.setStatus('current')
if mibBuilder.loadTexts: spdIPDestinationType.setDescription('Contains the destination address type of the packet that triggered the notification.')
spdIPDestinationAddress = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 7), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdIPDestinationAddress.setStatus('current')
if mibBuilder.loadTexts: spdIPDestinationAddress.setDescription('Contains the destination address of the packet that triggered the notification. The format of this object is specified by the spdIPDestinationType object.')
spdPacketDirection = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 8), IfDirection()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdPacketDirection.setStatus('current')
if mibBuilder.loadTexts: spdPacketDirection.setDescription('Indicates if the packet that triggered the action in questions was ingress (inbound) or egress (outbound).')
spdPacketPart = MibScalar((1, 3, 6, 1, 2, 1, 153, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spdPacketPart.setStatus('current')
if mibBuilder.loadTexts: spdPacketPart.setDescription("spdPacketPart is the front part of the full IP packet that triggered this notification. The initial size limit is determined by the smaller of the size, indicated by: I. The value of the object with the TC syntax 'SpdIPPacketLogging' that indicated the packet SHOULD be logged and II. The size of the triggering packet. The final limit is determined by the SNMP packet size when sending the notification. The maximum size that can be included will be the smaller of the initial size, given the above, and the length that will fit in a single SNMP notification packet after the rest of the notification's objects and any other necessary packet data (headers encoding, etc.) have been included in the packet.")
spdActionNotification = NotificationType((1, 3, 6, 1, 2, 1, 153, 2, 0, 1)).setObjects(("IPSEC-SPD-MIB", "spdActionExecuted"), ("IPSEC-SPD-MIB", "spdIPEndpointAddType"), ("IPSEC-SPD-MIB", "spdIPEndpointAddress"), ("IPSEC-SPD-MIB", "spdIPSourceType"), ("IPSEC-SPD-MIB", "spdIPSourceAddress"), ("IPSEC-SPD-MIB", "spdIPDestinationType"), ("IPSEC-SPD-MIB", "spdIPDestinationAddress"), ("IPSEC-SPD-MIB", "spdPacketDirection"))
if mibBuilder.loadTexts: spdActionNotification.setStatus('current')
if mibBuilder.loadTexts: spdActionNotification.setDescription('Notification that an action was executed by a rule. Only actions with logging enabled will result in this notification getting sent. The object includes the spdActionExecuted object, which will indicate which action was executed within the scope of the rule. Additionally, the spdIPSourceType, spdIPSourceAddress, spdIPDestinationType, and spdIPDestinationAddress objects are included to indicate the packet source and destination of the packet that triggered the action. Finally, the spdIPEndpointAddType, spdIPEndpointAddress, and spdPacketDirection objects indicate which interface the executed action was associated with, and if the packet was ingress or egress through the endpoint. A spdActionNotification SHOULD be limited to a maximum of one notification sent per minute for any action notifications that do not have any other configuration controlling their send rate. Note that compound actions with multiple executed sub-actions may result in multiple notifications being sent from a single rule execution.')
spdPacketNotification = NotificationType((1, 3, 6, 1, 2, 1, 153, 2, 0, 2)).setObjects(("IPSEC-SPD-MIB", "spdActionExecuted"), ("IPSEC-SPD-MIB", "spdIPEndpointAddType"), ("IPSEC-SPD-MIB", "spdIPEndpointAddress"), ("IPSEC-SPD-MIB", "spdIPSourceType"), ("IPSEC-SPD-MIB", "spdIPSourceAddress"), ("IPSEC-SPD-MIB", "spdIPDestinationType"), ("IPSEC-SPD-MIB", "spdIPDestinationAddress"), ("IPSEC-SPD-MIB", "spdPacketDirection"), ("IPSEC-SPD-MIB", "spdPacketPart"))
if mibBuilder.loadTexts: spdPacketNotification.setStatus('current')
if mibBuilder.loadTexts: spdPacketNotification.setDescription("Notification that a packet passed through a Security Association (SA). Only SAs created by actions with packet logging enabled will result in this notification getting sent. The objects sent MUST include the spdActionExecuted, which will indicate which action was executed within the scope of the rule. Additionally, the spdIPSourceType, spdIPSourceAddress, spdIPDestinationType, and spdIPDestinationAddress objects MUST be included to indicate the packet source and destination of the packet that triggered the action. The spdIPEndpointAddType, spdIPEndpointAddress, and spdPacketDirection objects are included to indicate which endpoint the packet was associated with. Finally, spdPacketPart is included to enable sending a variable sized part of the front of the packet with the size dependent on the value of the object of TC syntax 'SpdIPPacketLogging', which indicated that logging should be done. A spdPacketNotification SHOULD be limited to a maximum of one notification sent per minute for any action notifications that do not have any other configuration controlling their send rate. An action notification SHOULD be limited to a maximum of one notification sent per minute for any action notifications that do not have any other configuration controlling their send rate.")
spdCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 3, 1))
spdGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 153, 3, 2))
spdRuleFilterFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 153, 3, 1, 1)).setObjects(("IPSEC-SPD-MIB", "spdEndpointGroup"), ("IPSEC-SPD-MIB", "spdGroupContentsGroup"), ("IPSEC-SPD-MIB", "spdRuleDefinitionGroup"), ("IPSEC-SPD-MIB", "spdStaticFilterGroup"), ("IPSEC-SPD-MIB", "spdStaticActionGroup"), ("IPSEC-SPD-MIB", "diffServMIBMultiFieldClfrGroup"), ("IPSEC-SPD-MIB", "spdIpsecSystemPolicyNameGroup"), ("IPSEC-SPD-MIB", "spdCompoundFilterGroup"), ("IPSEC-SPD-MIB", "spdIPOffsetFilterGroup"), ("IPSEC-SPD-MIB", "spdTimeFilterGroup"), ("IPSEC-SPD-MIB", "spdIpsoHeaderFilterGroup"), ("IPSEC-SPD-MIB", "spdCompoundActionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdRuleFilterFullCompliance = spdRuleFilterFullCompliance.setStatus('current')
if mibBuilder.loadTexts: spdRuleFilterFullCompliance.setDescription('The compliance statement for SNMP entities that include an IPsec MIB implementation with Endpoint, Rules, and filters support. When this MIB is implemented with support for read-create, then such an implementation can claim full compliance. Such devices can then be both monitored and configured with this MIB.')
spdLoggingCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 153, 3, 1, 2)).setObjects(("IPSEC-SPD-MIB", "spdActionLoggingObjectGroup"), ("IPSEC-SPD-MIB", "spdActionNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdLoggingCompliance = spdLoggingCompliance.setStatus('current')
if mibBuilder.loadTexts: spdLoggingCompliance.setDescription('The compliance statement for SNMP entities that support sending notifications when actions are invoked.')
spdRuleFilterReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 153, 3, 1, 3)).setObjects(("IPSEC-SPD-MIB", "spdEndpointGroup"), ("IPSEC-SPD-MIB", "spdGroupContentsGroup"), ("IPSEC-SPD-MIB", "spdRuleDefinitionGroup"), ("IPSEC-SPD-MIB", "spdStaticFilterGroup"), ("IPSEC-SPD-MIB", "spdStaticActionGroup"), ("IPSEC-SPD-MIB", "diffServMIBMultiFieldClfrGroup"), ("IPSEC-SPD-MIB", "spdIpsecSystemPolicyNameGroup"), ("IPSEC-SPD-MIB", "spdCompoundFilterGroup"), ("IPSEC-SPD-MIB", "spdIPOffsetFilterGroup"), ("IPSEC-SPD-MIB", "spdTimeFilterGroup"), ("IPSEC-SPD-MIB", "spdIpsoHeaderFilterGroup"), ("IPSEC-SPD-MIB", "spdCompoundActionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdRuleFilterReadOnlyCompliance = spdRuleFilterReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: spdRuleFilterReadOnlyCompliance.setDescription('The compliance statement for SNMP entities that include an IPsec MIB implementation with Endpoint, Rules, and filters support. If this MIB is implemented without support for read-create (i.e., in read-only), it is not in full compliance, but it can claim read-only compliance. Such a device can then be monitored, but cannot be configured with this MIB.')
spdEndpointGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 1)).setObjects(("IPSEC-SPD-MIB", "spdEndGroupName"), ("IPSEC-SPD-MIB", "spdEndGroupLastChanged"), ("IPSEC-SPD-MIB", "spdEndGroupStorageType"), ("IPSEC-SPD-MIB", "spdEndGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdEndpointGroup = spdEndpointGroup.setStatus('current')
if mibBuilder.loadTexts: spdEndpointGroup.setDescription('This group is made up of objects from the IPsec Policy Endpoint Table.')
spdGroupContentsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 2)).setObjects(("IPSEC-SPD-MIB", "spdGroupContComponentType"), ("IPSEC-SPD-MIB", "spdGroupContFilter"), ("IPSEC-SPD-MIB", "spdGroupContComponentName"), ("IPSEC-SPD-MIB", "spdGroupContLastChanged"), ("IPSEC-SPD-MIB", "spdGroupContStorageType"), ("IPSEC-SPD-MIB", "spdGroupContRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdGroupContentsGroup = spdGroupContentsGroup.setStatus('current')
if mibBuilder.loadTexts: spdGroupContentsGroup.setDescription('This group is made up of objects from the IPsec Policy Group Contents Table.')
spdIpsecSystemPolicyNameGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 3)).setObjects(("IPSEC-SPD-MIB", "spdIngressPolicyGroupName"), ("IPSEC-SPD-MIB", "spdEgressPolicyGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdIpsecSystemPolicyNameGroup = spdIpsecSystemPolicyNameGroup.setStatus('current')
if mibBuilder.loadTexts: spdIpsecSystemPolicyNameGroup.setDescription('This group is made up of objects represent the System Policy Group Names.')
spdRuleDefinitionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 4)).setObjects(("IPSEC-SPD-MIB", "spdRuleDefDescription"), ("IPSEC-SPD-MIB", "spdRuleDefFilter"), ("IPSEC-SPD-MIB", "spdRuleDefFilterNegated"), ("IPSEC-SPD-MIB", "spdRuleDefAction"), ("IPSEC-SPD-MIB", "spdRuleDefAdminStatus"), ("IPSEC-SPD-MIB", "spdRuleDefLastChanged"), ("IPSEC-SPD-MIB", "spdRuleDefStorageType"), ("IPSEC-SPD-MIB", "spdRuleDefRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdRuleDefinitionGroup = spdRuleDefinitionGroup.setStatus('current')
if mibBuilder.loadTexts: spdRuleDefinitionGroup.setDescription('This group is made up of objects from the IPsec Policy Rule Definition Table.')
spdCompoundFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 5)).setObjects(("IPSEC-SPD-MIB", "spdCompFiltDescription"), ("IPSEC-SPD-MIB", "spdCompFiltLogicType"), ("IPSEC-SPD-MIB", "spdCompFiltLastChanged"), ("IPSEC-SPD-MIB", "spdCompFiltStorageType"), ("IPSEC-SPD-MIB", "spdCompFiltRowStatus"), ("IPSEC-SPD-MIB", "spdSubFiltSubfilter"), ("IPSEC-SPD-MIB", "spdSubFiltSubfilterIsNegated"), ("IPSEC-SPD-MIB", "spdSubFiltLastChanged"), ("IPSEC-SPD-MIB", "spdSubFiltStorageType"), ("IPSEC-SPD-MIB", "spdSubFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdCompoundFilterGroup = spdCompoundFilterGroup.setStatus('current')
if mibBuilder.loadTexts: spdCompoundFilterGroup.setDescription('This group is made up of objects from the IPsec Policy Compound Filter Table and Sub-Filter Table Group.')
spdStaticFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 6)).setObjects(("IPSEC-SPD-MIB", "spdTrueFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdStaticFilterGroup = spdStaticFilterGroup.setStatus('current')
if mibBuilder.loadTexts: spdStaticFilterGroup.setDescription('The static filter group. Currently this is just a true filter.')
spdIPOffsetFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 7)).setObjects(("IPSEC-SPD-MIB", "spdIpOffFiltOffset"), ("IPSEC-SPD-MIB", "spdIpOffFiltType"), ("IPSEC-SPD-MIB", "spdIpOffFiltValue"), ("IPSEC-SPD-MIB", "spdIpOffFiltLastChanged"), ("IPSEC-SPD-MIB", "spdIpOffFiltStorageType"), ("IPSEC-SPD-MIB", "spdIpOffFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdIPOffsetFilterGroup = spdIPOffsetFilterGroup.setStatus('current')
if mibBuilder.loadTexts: spdIPOffsetFilterGroup.setDescription('This group is made up of objects from the IPsec Policy IP Offset Filter Table.')
spdTimeFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 8)).setObjects(("IPSEC-SPD-MIB", "spdTimeFiltPeriod"), ("IPSEC-SPD-MIB", "spdTimeFiltMonthOfYearMask"), ("IPSEC-SPD-MIB", "spdTimeFiltDayOfMonthMask"), ("IPSEC-SPD-MIB", "spdTimeFiltDayOfWeekMask"), ("IPSEC-SPD-MIB", "spdTimeFiltTimeOfDayMask"), ("IPSEC-SPD-MIB", "spdTimeFiltLastChanged"), ("IPSEC-SPD-MIB", "spdTimeFiltStorageType"), ("IPSEC-SPD-MIB", "spdTimeFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdTimeFilterGroup = spdTimeFilterGroup.setStatus('current')
if mibBuilder.loadTexts: spdTimeFilterGroup.setDescription('This group is made up of objects from the IPsec Policy Time Filter Table.')
spdIpsoHeaderFilterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 9)).setObjects(("IPSEC-SPD-MIB", "spdIpsoHeadFiltType"), ("IPSEC-SPD-MIB", "spdIpsoHeadFiltClassification"), ("IPSEC-SPD-MIB", "spdIpsoHeadFiltProtectionAuth"), ("IPSEC-SPD-MIB", "spdIpsoHeadFiltLastChanged"), ("IPSEC-SPD-MIB", "spdIpsoHeadFiltStorageType"), ("IPSEC-SPD-MIB", "spdIpsoHeadFiltRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdIpsoHeaderFilterGroup = spdIpsoHeaderFilterGroup.setStatus('current')
if mibBuilder.loadTexts: spdIpsoHeaderFilterGroup.setDescription('This group is made up of objects from the IPsec Policy IPSO Header Filter Table.')
spdStaticActionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 10)).setObjects(("IPSEC-SPD-MIB", "spdDropAction"), ("IPSEC-SPD-MIB", "spdAcceptAction"), ("IPSEC-SPD-MIB", "spdDropActionLog"), ("IPSEC-SPD-MIB", "spdAcceptActionLog"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdStaticActionGroup = spdStaticActionGroup.setStatus('current')
if mibBuilder.loadTexts: spdStaticActionGroup.setDescription('This group is made up of objects from the IPsec Policy Static Actions.')
spdCompoundActionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 11)).setObjects(("IPSEC-SPD-MIB", "spdCompActExecutionStrategy"), ("IPSEC-SPD-MIB", "spdCompActLastChanged"), ("IPSEC-SPD-MIB", "spdCompActStorageType"), ("IPSEC-SPD-MIB", "spdCompActRowStatus"), ("IPSEC-SPD-MIB", "spdSubActSubActionName"), ("IPSEC-SPD-MIB", "spdSubActLastChanged"), ("IPSEC-SPD-MIB", "spdSubActStorageType"), ("IPSEC-SPD-MIB", "spdSubActRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdCompoundActionGroup = spdCompoundActionGroup.setStatus('current')
if mibBuilder.loadTexts: spdCompoundActionGroup.setDescription('The IPsec Policy Compound Action Table and Actions In Compound Action Table Group.')
spdActionLoggingObjectGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 12)).setObjects(("IPSEC-SPD-MIB", "spdActionExecuted"), ("IPSEC-SPD-MIB", "spdIPEndpointAddType"), ("IPSEC-SPD-MIB", "spdIPEndpointAddress"), ("IPSEC-SPD-MIB", "spdIPSourceType"), ("IPSEC-SPD-MIB", "spdIPSourceAddress"), ("IPSEC-SPD-MIB", "spdIPDestinationType"), ("IPSEC-SPD-MIB", "spdIPDestinationAddress"), ("IPSEC-SPD-MIB", "spdPacketDirection"), ("IPSEC-SPD-MIB", "spdPacketPart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdActionLoggingObjectGroup = spdActionLoggingObjectGroup.setStatus('current')
if mibBuilder.loadTexts: spdActionLoggingObjectGroup.setDescription('This group is made up of all the Notification objects for this MIB.')
spdActionNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 153, 3, 2, 13)).setObjects(("IPSEC-SPD-MIB", "spdActionNotification"), ("IPSEC-SPD-MIB", "spdPacketNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    spdActionNotificationGroup = spdActionNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: spdActionNotificationGroup.setDescription('This group is made up of all the Notifications for this MIB.')
mibBuilder.exportSymbols("IPSEC-SPD-MIB", spdIPSourceAddress=spdIPSourceAddress, spdIPEndpointAddress=spdIPEndpointAddress, spdRuleDefName=spdRuleDefName, spdRuleDefinitionGroup=spdRuleDefinitionGroup, spdTimeFiltStorageType=spdTimeFiltStorageType, spdIpOffFiltStorageType=spdIpOffFiltStorageType, spdGroupContentsEntry=spdGroupContentsEntry, spdTrueFilter=spdTrueFilter, spdIpOffsetFilterEntry=spdIpOffsetFilterEntry, spdTimeFiltName=spdTimeFiltName, spdEndpointToGroupEntry=spdEndpointToGroupEntry, spdIpOffFiltLastChanged=spdIpOffFiltLastChanged, spdNotificationVariables=spdNotificationVariables, spdSubFiltSubfilter=spdSubFiltSubfilter, spdSubFiltLastChanged=spdSubFiltLastChanged, spdRuleDefinitionTable=spdRuleDefinitionTable, spdTimeFiltPeriod=spdTimeFiltPeriod, spdTimeFiltMonthOfYearMask=spdTimeFiltMonthOfYearMask, spdSubFiltRowStatus=spdSubFiltRowStatus, spdRuleDefAction=spdRuleDefAction, spdActionNotification=spdActionNotification, spdCompActName=spdCompActName, spdGroupContRowStatus=spdGroupContRowStatus, spdLoggingCompliance=spdLoggingCompliance, spdPacketNotification=spdPacketNotification, spdGroupContentsTable=spdGroupContentsTable, spdTimeFilterEntry=spdTimeFilterEntry, spdEndGroupStorageType=spdEndGroupStorageType, spdCompActLastChanged=spdCompActLastChanged, spdGroupContLastChanged=spdGroupContLastChanged, spdCompoundActionEntry=spdCompoundActionEntry, spdTimeFiltDayOfWeekMask=spdTimeFiltDayOfWeekMask, spdActions=spdActions, spdIpsoHeadFiltName=spdIpsoHeadFiltName, spdTimeFilterTable=spdTimeFilterTable, spdSubActStorageType=spdSubActStorageType, spdCompoundFilterTable=spdCompoundFilterTable, spdActionExecuted=spdActionExecuted, spdConformanceObjects=spdConformanceObjects, spdSubfiltersTable=spdSubfiltersTable, spdIpsoHeadFiltClassification=spdIpsoHeadFiltClassification, spdAcceptAction=spdAcceptAction, spdDropActionLog=spdDropActionLog, spdActionLoggingObjectGroup=spdActionLoggingObjectGroup, spdNotifications=spdNotifications, spdCompFiltDescription=spdCompFiltDescription, spdSubActSubActionName=spdSubActSubActionName, spdRuleFilterFullCompliance=spdRuleFilterFullCompliance, spdRuleDefRowStatus=spdRuleDefRowStatus, spdIpOffFiltValue=spdIpOffFiltValue, spdPacketDirection=spdPacketDirection, spdCompActRowStatus=spdCompActRowStatus, spdIPSourceType=spdIPSourceType, spdTimeFilterGroup=spdTimeFilterGroup, spdCompActStorageType=spdCompActStorageType, spdTimeFiltDayOfMonthMask=spdTimeFiltDayOfMonthMask, spdCompFiltRowStatus=spdCompFiltRowStatus, spdLocalConfigObjects=spdLocalConfigObjects, spdCompFiltLastChanged=spdCompFiltLastChanged, spdEndpointGroup=spdEndpointGroup, spdRuleFilterReadOnlyCompliance=spdRuleFilterReadOnlyCompliance, spdCompliances=spdCompliances, spdIpsoHeadFiltRowStatus=spdIpsoHeadFiltRowStatus, spdIPDestinationType=spdIPDestinationType, spdIpsecSystemPolicyNameGroup=spdIpsecSystemPolicyNameGroup, SpdIPPacketLogging=SpdIPPacketLogging, spdCompFiltLogicType=spdCompFiltLogicType, spdEndGroupLastChanged=spdEndGroupLastChanged, spdRuleDefFilter=spdRuleDefFilter, spdIpsoHeadFiltStorageType=spdIpsoHeadFiltStorageType, spdStaticFilterGroup=spdStaticFilterGroup, spdSubFiltPriority=spdSubFiltPriority, spdIpsoHeaderFilterGroup=spdIpsoHeaderFilterGroup, spdCompoundActionGroup=spdCompoundActionGroup, spdTrueFilterInstance=spdTrueFilterInstance, spdRuleDefDescription=spdRuleDefDescription, spdGroupContFilter=spdGroupContFilter, spdSubactionsTable=spdSubactionsTable, spdEndGroupInterface=spdEndGroupInterface, spdIpsoHeadFiltLastChanged=spdIpsoHeadFiltLastChanged, spdStaticFilters=spdStaticFilters, spdIpOffsetFilterTable=spdIpOffsetFilterTable, spdSubActLastChanged=spdSubActLastChanged, spdRuleDefAdminStatus=spdRuleDefAdminStatus, SpdBooleanOperator=SpdBooleanOperator, spdGroupContComponentType=spdGroupContComponentType, spdGroupContentsGroup=spdGroupContentsGroup, spdConfigObjects=spdConfigObjects, spdSubFiltSubfilterIsNegated=spdSubFiltSubfilterIsNegated, spdSubFiltStorageType=spdSubFiltStorageType, spdIpsoHeadFiltType=spdIpsoHeadFiltType, spdEndGroupRowStatus=spdEndGroupRowStatus, spdGroupContComponentName=spdGroupContComponentName, spdStaticActions=spdStaticActions, spdIpOffFiltName=spdIpOffFiltName, spdGroupContPriority=spdGroupContPriority, spdCompFiltName=spdCompFiltName, spdSubActRowStatus=spdSubActRowStatus, spdAcceptActionLog=spdAcceptActionLog, spdTimeFiltTimeOfDayMask=spdTimeFiltTimeOfDayMask, SpdTimePeriod=SpdTimePeriod, spdIpOffFiltRowStatus=spdIpOffFiltRowStatus, spdIpOffFiltType=spdIpOffFiltType, spdIpsoHeadFiltProtectionAuth=spdIpsoHeadFiltProtectionAuth, spdSubactionsEntry=spdSubactionsEntry, spdIngressPolicyGroupName=spdIngressPolicyGroupName, spdActionNotificationGroup=spdActionNotificationGroup, spdEndGroupName=spdEndGroupName, spdMIB=spdMIB, spdIpsoHeaderFilterEntry=spdIpsoHeaderFilterEntry, spdIPEndpointAddType=spdIPEndpointAddType, spdGroups=spdGroups, spdNotificationObjects=spdNotificationObjects, spdCompoundFilterGroup=spdCompoundFilterGroup, spdRuleDefLastChanged=spdRuleDefLastChanged, spdRuleDefStorageType=spdRuleDefStorageType, spdIPOffsetFilterGroup=spdIPOffsetFilterGroup, spdCompActExecutionStrategy=spdCompActExecutionStrategy, spdIpsoHeaderFilterTable=spdIpsoHeaderFilterTable, spdCompoundActionTable=spdCompoundActionTable, spdGroupContName=spdGroupContName, spdIpOffFiltOffset=spdIpOffFiltOffset, spdRuleDefFilterNegated=spdRuleDefFilterNegated, spdCompFiltStorageType=spdCompFiltStorageType, spdEgressPolicyGroupName=spdEgressPolicyGroupName, spdTimeFiltLastChanged=spdTimeFiltLastChanged, spdDropAction=spdDropAction, spdSubfiltersEntry=spdSubfiltersEntry, spdEndpointToGroupTable=spdEndpointToGroupTable, spdEndGroupDirection=spdEndGroupDirection, spdTimeFiltRowStatus=spdTimeFiltRowStatus, spdPacketPart=spdPacketPart, SpdAdminStatus=SpdAdminStatus, spdIPDestinationAddress=spdIPDestinationAddress, spdGroupContStorageType=spdGroupContStorageType, spdStaticActionGroup=spdStaticActionGroup, PYSNMP_MODULE_ID=spdMIB, spdCompoundFilterEntry=spdCompoundFilterEntry, spdRuleDefinitionEntry=spdRuleDefinitionEntry, spdSubActPriority=spdSubActPriority)
