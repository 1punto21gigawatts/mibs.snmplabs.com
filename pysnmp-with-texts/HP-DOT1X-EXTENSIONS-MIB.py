#
# PySNMP MIB module HP-DOT1X-EXTENSIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-DOT1X-EXTENSIONS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
HpAutzUserRoleName, = mibBuilder.importSymbols("HP-AUTZ-MIB", "HpAutzUserRoleName")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
dot1xAuthConfigEntry, dot1xPaePortNumber, dot1xPaePortEntry, dot1xSuppConfigEntry = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xAuthConfigEntry", "dot1xPaePortNumber", "dot1xPaePortEntry", "dot1xSuppConfigEntry")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Unsigned32, Bits, MibIdentifier, Counter32, iso, Counter64, TimeTicks, Gauge32, Integer32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "Bits", "MibIdentifier", "Counter32", "iso", "Counter64", "TimeTicks", "Gauge32", "Integer32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType")
TruthValue, TimeStamp, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "TextualConvention", "DisplayString", "MacAddress")
hpicfDot1xMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25))
hpicfDot1xMIB.setRevisions(('2017-10-12 00:00', '2017-09-28 00:00', '2017-09-13 00:00', '2016-02-25 00:00', '2016-01-21 00:00', '2013-06-12 00:00', '2013-01-10 00:00', '2012-11-15 00:00', '2011-08-29 00:00', '2011-07-21 00:00', '2011-02-12 00:00', '2010-04-15 00:00', '2009-07-08 00:00', '2009-07-02 00:00', '2007-02-02 00:00', '2005-09-21 00:00', '2005-08-05 00:00', '2004-08-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfDot1xMIB.setRevisionsDescriptions(('Added new MIB object for initial role that can be configured per port: hpicfDot1xPaePortInitialRole', 'Added new MIB objects for port-access critical/open auth commands hpicfDot1xPaePortCritAuthVoiceVid, hpicfDot1xPaePortCritAuthDataVid, hpicfDot1xPaePortCritAuthUserRole, hpicfDot1xPaePortOpenAuthVoiceVid, hpicfDot1xPaePortOpenAuthDataVid, hpicfDot1xPaePortOpenAuthUserRole', 'Added object hpicfDot1xAuthEnforceCacheReauth and corresponding compliance.', 'Added object hpicfDot1x2010 and corresponding compliance.', 'Added objects hpicfDot1xAuthSessionRoleName and hpicfDot1xAuthSessionStatsGroup1. Added initialRole and heldInitialRoleFailed to hpicfDot1xSMAuthPaeState. Added applyInitialRole to hpicfDot1xSMAuthBackendAuthState. Added compliance hpicfDot1xCompliance11. Updated description for objects hpicfDot1xSMAuthReAuthPeriod, hpicfDot1xAuthAuthVid, hpicfDot1xAuthUnauthVid, and hpicfDot1xAuthUnauthPeriod.', 'Added object hpicfDot1xPaePortSpeedVSA, compliance hpicfDot1xCompliance9 and group hpicfDot1xPaeAuthSessionGroup1 .', 'Added description for hpicfDot1xPaePortMBV object in HpicfDot1xPaePortEntry.', 'Added objects hpicfDot1xPaePortMixed.', 'Added description for hpicfDot1xSMAuthSessionTimeout object in HpicfDot1xSMAuthConfigEntry.', 'Added hpicfDot1xSMAuthSessionTimeout object in HpicfDot1xSMAuthConfigEntry.', 'Added hpicfDot1xSuppConfigPasswordEncrypted object in hpicfDot1xSuppConfigTable.', 'Added hpicfDot1xAuthCachedReauthDelay.', 'Added two more values for hpicfDot1xSMAuthPaeState. Added hpicfDot1xAuthCachedReauthPeriod.', 'Added two more values for hpicfDot1xSMAuthPaeState.', 'Added hpicfDot1xAuthAllowGvrpVlans.', 'Added hpicfDot1xAuthClientLimit2.', 'Added import objects.', 'Initial version.',))
if mibBuilder.loadTexts: hpicfDot1xMIB.setLastUpdated('201710120000Z')
if mibBuilder.loadTexts: hpicfDot1xMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfDot1xMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfDot1xMIB.setDescription('This MIB module contains the definitions of Managed Objects for HP extensions to IEEE 802.1X. This MIB supplements the IEEE 802.1X MIB to provide a mechanism by which to configure and retrieve status on shared-media ports, such as in wireless access points or multi-supplicant mode on HP switches/routers.')
hpicfDot1xMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1))
hpicfDot1xSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1))
hpicfDot1xAuthenticator = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2))
hpicfDot1xSupplicant = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 3))
hpicfDot1xPaePortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfDot1xPaePortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortTable.setDescription("This table supplements the 'dot1xPaePortTable'.")
hpicfDot1xPaePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1), )
dot1xPaePortEntry.registerAugmentions(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortEntry"))
hpicfDot1xPaePortEntry.setIndexNames(*dot1xPaePortEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfDot1xPaePortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortEntry.setDescription("The fields in these entries will be used to supplement 'dot1xPaePortEntry'.")
hpicfDot1xPaePortAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortAuth.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortAuth.setDescription('This object allows enable/disable authenticator functionality on a port.')
hpicfDot1xPaePortSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortSupp.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortSupp.setDescription('This object allows enable/disable supplicant functionality on a port.')
hpicfDot1xPaePortMixed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortMixed.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortMixed.setDescription('This object allows enable/disable guests on ports with authenticated clients.')
hpicfDot1xPaePortSpeedVSA = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortSpeedVSA.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortSpeedVSA.setDescription('This object allows enable or disable port speed VSA processing on a port.')
hpicfDot1xPaePortMBV = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortMBV.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortMBV.setDescription('This object enables and disables the MAC-based VLANs feature on the port.')
hpicfDot1xPaePortCritAuthVoiceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 6), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortCritAuthVoiceVid.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortCritAuthVoiceVid.setDescription('The VLANID which is being assinged as a critical-auth voice vlan.')
hpicfDot1xPaePortCritAuthDataVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 7), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortCritAuthDataVid.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortCritAuthDataVid.setDescription('The VLANID which is being assinged as a critical-auth data vlan.')
hpicfDot1xPaePortCritAuthUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortCritAuthUserRole.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortCritAuthUserRole.setDescription('This object specifies the user role of the client for critical-auth.')
hpicfDot1xPaePortOpenAuthVoiceVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 9), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortOpenAuthVoiceVid.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortOpenAuthVoiceVid.setDescription('The VLANID which is being assinged as a open-auth voice vlan.')
hpicfDot1xPaePortOpenAuthDataVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 10), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortOpenAuthDataVid.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortOpenAuthDataVid.setDescription('The VLANID which is being assinged as a open-auth data vlan.')
hpicfDot1xPaePortOpenAuthUserRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortOpenAuthUserRole.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortOpenAuthUserRole.setDescription('This object specifies the user role of the client for open-auth.')
hpicfDot1xPaePortInitialRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xPaePortInitialRole.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortInitialRole.setDescription('This object specifies the initial role that is configured for a port.')
hpicfDot1x2010 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("authenticator", 1), ("supplicant", 2), ("authenticatorAndSupplicant", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1x2010.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1x2010.setDescription('The administrative enable dot1x 2010 compliance support gobally for authenticator and supplicant.')
hpicfDot1xAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1), )
if mibBuilder.loadTexts: hpicfDot1xAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthConfigTable.setDescription("This table supplements the 'dot1xAuthConfigTable'.")
hpicfDot1xAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1), )
dot1xAuthConfigEntry.registerAugmentions(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthConfigEntry"))
hpicfDot1xAuthConfigEntry.setIndexNames(*dot1xAuthConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfDot1xAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthConfigEntry.setDescription("The fields in these entries will be used to supplement 'dot1xAuthConfigEntry'.")
hpicfDot1xAuthAuthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthAuthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthAuthVid.setDescription("This object configures the PVID for the authorized 802.1x port. When hpSwitchAutzUserRoleEnabled is true, this value may be superseded by the value of hpSwitchAutzUserRoleVlanId or hpSwitchAutzUserRoleVlanName from the client's assigned role.")
hpicfDot1xAuthUnauthVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthUnauthVid.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthUnauthVid.setDescription('This object configures the PVID for the unauthorized 802.1x port. When hpSwitchAutzUserRoleEnabled is true, this value may be superseded by the value of hpSwitchAutzUserRoleVlanId or hpSwitchAutzUserRoleVlanName from the role identified by hpSwitchAutzUserRoleInitialRoleName.')
hpicfDot1xAuthUnauthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthUnauthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthUnauthPeriod.setDescription('This objects configures the period of time, in seconds, which the authenticator will wait for authentication before transitioning to guest VLAN mode, or assigning the role identified by hpSwitchAutzUserRoleInitialRoleName when hpSwitchAutzUserRoleEnabled is true.')
hpicfDot1xAuthClientLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthClientLimit.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xAuthClientLimit.setDescription('*************THIS OBJECT IS DEPRECATED ********** The maximum number of authenticated clients to allow on the port.')
hpicfDot1xAuthLogoffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 999999999)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthLogoffPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthLogoffPeriod.setDescription('Specifies the period, in seconds, at which an authenticated client will be considered unauthenticated for a lack of activity (i.e. traffic originating from client).')
hpicfDot1xAuthClientLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthClientLimit2.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthClientLimit2.setDescription('The maximum number of authenticated clients to allow on the port if greater than 0. If 0 then authenticator controls port as a single entity - no client limit.')
hpicfDot1xAuthCachedReauthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthCachedReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthCachedReauthPeriod.setDescription('The value indicates the period in seconds, during which cached reauthentication is allowed on the port. If value is zero then the period of cached reauthentication is unlimited.')
hpicfDot1xAuthEnforceCacheReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthEnforceCacheReauth.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEnforceCacheReauth.setDescription('Setting this attribute TRUE(1) will allow cached reauthentication when server-timeout is configured lesser than radius connection timeout or when client initiates authentication before the radius connection timeout during reauthentication.')
hpicfDot1xSMAuthConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2), )
if mibBuilder.loadTexts: hpicfDot1xSMAuthConfigTable.setReference('802.1X-2001 9.4.1 Authenticator Configuration')
if mibBuilder.loadTexts: hpicfDot1xSMAuthConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthConfigTable.setDescription('A table that contains the configuration and basic status objects for Authenticator PAEs associated with each shared-media port.')
hpicfDot1xSMAuthConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1), ).setIndexNames((0, "HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthPaePort"), (0, "HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthMacAddr"))
if mibBuilder.loadTexts: hpicfDot1xSMAuthConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthConfigEntry.setDescription('The configuration information for an Authenticator PAE.')
hpicfDot1xSMAuthPaePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfDot1xSMAuthPaePort.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthPaePort.setDescription('The interface index associated with this Authenticator PAE. On wired HP products the interface index is the physical port. On wireless products it is the instance (whether real or virtual) of an AP.')
hpicfDot1xSMAuthMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xSMAuthMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthMacAddr.setDescription('The 48-bit IEEE media access control address of The supplicant associated with this Authenticator PAE.')
hpicfDot1xSMAuthInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xSMAuthInitialize.setReference('802.1X-2001 9.6.1.3, Initialize Port')
if mibBuilder.loadTexts: hpicfDot1xSMAuthInitialize.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthInitialize.setDescription('The initialization control for this Authenticator PAE. Setting this attribute TRUE causes the PAE to be initialized. The attribute value reverts to FALSE once initialization has completed.')
hpicfDot1xSMAuthReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xSMAuthReauthenticate.setReference('802.1X-2001 9.4.1.3 Reauthenticate')
if mibBuilder.loadTexts: hpicfDot1xSMAuthReauthenticate.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthReauthenticate.setDescription('The reauthentication control for this Authenticator PAE. Setting this attribute TRUE causes the Authenticator PAE state machine for the Port to reauthenticate the Supplicant. Setting this attribute FALSE has no effect. This attribute always returns FALSE when it is read.')
hpicfDot1xSMAuthPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9), ("restart", 10), ("heldNoVlan", 11), ("heldUnauthVlan", 12), ("initialRole", 14), ("heldInitialRoleFailed", 15), ("criticalAuth", 16), ("openAuth", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xSMAuthPaeState.setReference('802.1X-2001 9.4.1, Authenticator PAE state')
if mibBuilder.loadTexts: hpicfDot1xSMAuthPaeState.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthPaeState.setDescription('The current value of the Authenticator PAE state machine.')
hpicfDot1xSMAuthBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7), ("ignore", 8), ("applyInitialRole", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xSMAuthBackendAuthState.setReference('802.1X-2001 9.4.1, Backend Authentication state')
if mibBuilder.loadTexts: hpicfDot1xSMAuthBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthBackendAuthState.setDescription('The current state of the Backend Authentication state machine.')
hpicfDot1xSMAuthReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 7), Unsigned32().clone(3600)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xSMAuthReAuthPeriod.setReference('802.1X-2001 9.4.1, reAuthPeriod')
if mibBuilder.loadTexts: hpicfDot1xSMAuthReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthReAuthPeriod.setDescription("The value, in seconds, of the reAuthPeriod constant currently in use by the Reauthentication Timer state machine. When hpSwitchAutzUserRoleEnabled is true, this value will be superseded by the value of hpSwitchAutzUserRoleReauthPeriod from the client's assigned role.")
hpicfDot1xSMAuthReAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xSMAuthReAuthEnabled.setReference('802.1X-2001 9.4.1, reAuthEnabled')
if mibBuilder.loadTexts: hpicfDot1xSMAuthReAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthReAuthEnabled.setDescription('The enable/disable control used by the Reauthentication Timer state machine (8.5.5.1).')
hpicfDot1xSMAuthSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 2, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xSMAuthSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthSessionTimeout.setDescription('Specifies the RADIUS Server set session timeout for reauthentication of the user. When ST = 0, user gets reauthenticated at reauth-period secs, ST < 60 it is set to 60 secs and then user is reauthenticated, ST > 60 user is reauthenticated at ST secs.')
hpicfDot1xAuthDiagTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 3), )
if mibBuilder.loadTexts: hpicfDot1xAuthDiagTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthDiagTable.setDescription('A table that contains the diagnostics objects for the Authenticator PAE associated with each Port. An entry appears in this table for each port that may authenticate access to itself.')
hpicfDot1xAuthDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 3, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: hpicfDot1xAuthDiagEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthDiagEntry.setDescription('The diagnostic information for an Authenticator PAE.')
hpicfDot1xAuthNumberOfSuccessAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthNumberOfSuccessAuthentication.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthNumberOfSuccessAuthentication.setDescription('Counts the number of times that authenticator received an EAP-Success message from Authentication Server. Indicates that Supplicant has successfully authenticated to the Authentication Server.')
hpicfDot1xAuthNumberOfFailedAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthNumberOfFailedAuthentication.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthNumberOfFailedAuthentication.setDescription('Counts the number of times that authenticator received an EAP-Failure message from Authentication Server. Indicates that Supplicant has failed to authenticate to the Authentication Server.')
hpicfDot1xAuthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4), )
if mibBuilder.loadTexts: hpicfDot1xAuthStatsTable.setReference('802.1X-2001 9.4.2 Authenticator Statistics')
if mibBuilder.loadTexts: hpicfDot1xAuthStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthStatsTable.setDescription("A table that contains the statistics objects for the Authenticator PAE's associated with each shared-media Port.")
hpicfDot1xAuthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1), ).setIndexNames((0, "HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthPaePort"), (0, "HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthMacAddr"))
if mibBuilder.loadTexts: hpicfDot1xAuthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthStatsEntry.setDescription('The statistics information for an Authenticator PAE.')
hpicfDot1xAuthEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolFramesRx.setReference('802.1X-2001 9.4.2, EAPOL frames received')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolFramesRx.setDescription('The number of valid EAPOL frames of any type that have been received by this Authenticator.')
hpicfDot1xAuthEapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolFramesTx.setReference('802.1X-2001 9.4.2, EAPOL frames transmitted')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolFramesTx.setDescription('The number of EAPOL frames of any type that have been transmitted by this Authenticator.')
hpicfDot1xAuthEapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolStartFramesRx.setReference('802.1X-2001 9.4.2, EAPOL Start frames received')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolStartFramesRx.setDescription('The number of EAPOL Start frames that have been received by this Authenticator.')
hpicfDot1xAuthEapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolLogoffFramesRx.setReference('802.1X-2001 9.4.2, EAPOL Logoff frames received')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolLogoffFramesRx.setDescription('The number of EAPOL Logoff frames that have been received by this Authenticator.')
hpicfDot1xAuthEapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolRespIdFramesRx.setReference('802.1X-2001 9.4.2, EAPOL Resp/Id frames received')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolRespIdFramesRx.setDescription('The number of EAP Resp/Id frames that have been received by this Authenticator.')
hpicfDot1xAuthEapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolRespFramesRx.setReference('802.1X-2001 9.4.2, EAPOL Response frames received')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolRespFramesRx.setDescription('The number of valid EAP Response frames (other than Resp/Id frames) that have been received by this Authenticator.')
hpicfDot1xAuthEapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolReqIdFramesTx.setReference('802.1X-2001 9.4.2, EAPOL Req/Id frames transmitted')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolReqIdFramesTx.setDescription('The number of EAP Req/Id frames that have been transmitted by this Authenticator.')
hpicfDot1xAuthEapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapolReqFramesTx.setReference('802.1X-2001 9.4.2, EAPOL Request frames transmitted')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapolReqFramesTx.setDescription('The number of EAP Request frames (other than Rq/Id frames) that have been transmitted by this Authenticator.')
hpicfDot1xAuthInvalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthInvalidEapolFramesRx.setReference('802.1X-2001 9.4.2, Invalid EAPOL frames received')
if mibBuilder.loadTexts: hpicfDot1xAuthInvalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthInvalidEapolFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the frame type is not recognized.')
hpicfDot1xAuthEapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthEapLengthErrorFramesRx.setReference('802.1X-2001 9.4.2, EAP length error frames received')
if mibBuilder.loadTexts: hpicfDot1xAuthEapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthEapLengthErrorFramesRx.setDescription('The number of EAPOL frames that have been received by this Authenticator in which the Packet Body Length field is invalid.')
hpicfDot1xAuthLastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthLastEapolFrameVersion.setReference('802.1X-2001 9.4.2, Last EAPOL frame version')
if mibBuilder.loadTexts: hpicfDot1xAuthLastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthLastEapolFrameVersion.setDescription('The protocol version number carried in the most recently received EAPOL frame.')
hpicfDot1xAuthLastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 4, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthLastEapolFrameSource.setReference('802.1X-2001 9.4.2, Last EAPOL frame source')
if mibBuilder.loadTexts: hpicfDot1xAuthLastEapolFrameSource.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthLastEapolFrameSource.setDescription('The source MAC address carried in the most recently received EAPOL frame.')
hpicfDot1xAuthSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5), )
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStatsTable.setReference('802.1X-2001 9.4.4')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStatsTable.setDescription("A table that contains the session statistics objects for the Authenticator PAE's associated with each shared-media Port.")
hpicfDot1xAuthSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1), ).setIndexNames((0, "HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthPaePort"), (0, "HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthMacAddr"))
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStatsEntry.setDescription('The session statistics information for an Authenticator PAE. This shows the current values being collected for each session that is still in progress, or the final values for the last valid session on each port where there is no session currently active.')
hpicfDot1xAuthSessionPerPAECountersEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionPerPAECountersEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionPerPAECountersEnabled.setDescription('Specifies whether individualized PAE octet and frame counts are supported. If TRUE then system is capable of maintaining separate counter sets for each, of possibly many, Authenticator PAE instance on a port. If FALSE then system is incapable of maintaining separate counter sets. Frame and octet counter values returned are an aggregate of all PAE sessions on the port.')
hpicfDot1xAuthSessionOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionOctetsRx.setReference('802.1X-2001 9.4.4, Session Octets Received')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionOctetsRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionOctetsRx.setDescription('The number of octets received in user data frames during the session.')
hpicfDot1xAuthSessionOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionOctetsTx.setReference('802.1X-2001 9.4.4, Session Octets Transmitted')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionOctetsTx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionOctetsTx.setDescription('The number of octets transmitted in user data frames during the session.')
hpicfDot1xAuthSessionFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionFramesRx.setReference('802.1X-2001 9.4.4, Session Frames Received')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionFramesRx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionFramesRx.setDescription('The number of user data frames received during the session.')
hpicfDot1xAuthSessionFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionFramesTx.setReference('802.1X-2001 9.4.4, Session Frames Transmitted')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionFramesTx.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionFramesTx.setDescription('The number of user data frames transmitted during the session.')
hpicfDot1xAuthSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionId.setReference('802.1X-2001 9.4.4, Session Identifier')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionId.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionId.setDescription('A unique identifier for the session, in the form of a printable ASCII string of at least three characters.')
hpicfDot1xAuthSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2), ("localandremoteAuthServer", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionAuthenticMethod.setReference('802.1X-2001 9.4.4, Session Authentication Method')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionAuthenticMethod.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionAuthenticMethod.setDescription('The authentication method used to establish the session.')
hpicfDot1xAuthSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionTime.setReference('802.1X-2001 9.4.4, Session Time')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionTime.setDescription('The duration of the session in seconds.')
hpicfDot1xAuthSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStartTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStartTime.setDescription('This object contains the value of sysUpTime at the time Supplicant was successfully authenticated.')
hpicfDot1xAuthSessionStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStopTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStopTime.setDescription('This object contains the value of sysUpTime at the time an authenticated Supplicant was de-authenticated, as a result of an EAPOL-Logoff, reauthentication period expiration, or forced asynchronous reauthentication.')
hpicfDot1xAuthSessionInactiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionInactiveTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionInactiveTime.setDescription('This time (in seconds) since last user data frames, either received or transmitted, were observed.')
hpicfDot1xAuthSessionTerminateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 999))).clone(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionTerminateCause.setReference('802.1X-2001 9.4.4, Session Terminate Cause')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionTerminateCause.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionTerminateCause.setDescription('The reason for the session termination.')
hpicfDot1xAuthSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionUserName.setReference('802.1X-2001 9.4.4, Session User Name')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionUserName.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionUserName.setDescription('The User-Name representing the identity of the Supplicant PAE.')
hpicfDot1xAuthSessionIsForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionIsForwarding.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionIsForwarding.setDescription("Specifies whether traffic originating from Supplicant PAE is being forwarded by Authenticator PAE. If TRUE, then Authenticator is forwarding Supplicant's traffic If FALSE, then Authenticator is not forwarding (blocking) Supplicant's traffic.")
hpicfDot1xAuthSessionVid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 15), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionVid.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionVid.setDescription('The PVID on which user data frames are being forwarded.')
hpicfDot1xAuthSessionRoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 5, 1, 16), HpAutzUserRoleName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDot1xAuthSessionRoleName.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionRoleName.setDescription('When hpSwitchAutzUserRoleEnabled is true, specifies the user role of the client assigned to the Supplicant PAE.')
hpicfDot1xAuthAllowGvrpVlans = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthAllowGvrpVlans.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthAllowGvrpVlans.setDescription('This object allows enable/disable the use of RADIUS-assigned dynamic (GVRP) VLANs.')
hpicfDot1xAuthCachedReauthDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 2, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xAuthCachedReauthDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthCachedReauthDelay.setDescription('The value indicates the period in seconds, during which all reauthentications will be suppressed after a cached reauthentication.')
hpicfDot1xSuppConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 3, 1), )
if mibBuilder.loadTexts: hpicfDot1xSuppConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSuppConfigTable.setDescription("This table supplements the 'dot1xSuppConfigTable'.")
hpicfDot1xSuppConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 3, 1, 1), )
dot1xSuppConfigEntry.registerAugmentions(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSuppConfigEntry"))
hpicfDot1xSuppConfigEntry.setIndexNames(*dot1xSuppConfigEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfDot1xSuppConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSuppConfigEntry.setDescription("The fields in these entries will be used to supplement 'dot1xSuppConfigEntry'.")
hpicfDot1xSuppConfigIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xSuppConfigIdentity.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSuppConfigIdentity.setDescription('This object can be used to set/get the identity 802.1x supplicant supplies to its authenticator.')
hpicfDot1xSuppConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xSuppConfigPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSuppConfigPassword.setDescription('This object can be used to set the password the supplicant uses for MD5 authentication.')
hpicfDot1xSuppConfigPasswordEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 1, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDot1xSuppConfigPasswordEncrypted.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSuppConfigPasswordEncrypted.setDescription('The encrypted form of the password used by supplicant for MD5 authentication. This object may only be read or written when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). At most one of hpicfDot1xSuppConfigPassword and hpicfDot1xSuppConfigPasswordEncrypted may be set in any transaction. This object should only be written with an encrypted password previously read from a compatible HP Networking device.')
hpicfDot1xConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2))
hpicfDot1xGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1))
hpicfDot1xCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2))
hpicfDot1xPaePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 1)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortAuth"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortSupp"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortMBV"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xPaePortGroup = hpicfDot1xPaePortGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortGroup.setDescription('A collection of objects providing basic administrative control over Authenticator PAE and Supplicant PAE in system.')
hpicfDot1xAuthConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 2)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAuthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthClientLimit"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthLogoffPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthConfigGroup = hpicfDot1xAuthConfigGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xAuthConfigGroup.setDescription('********* THIS GROUP IS DEPRECATED ********* A collection of objects providing basic configuration control of over Authenticator PAEs.')
hpicfDot1xSMAuthConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 3)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthInitialize"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthReauthenticate"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthPaeState"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthBackendAuthState"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthReAuthPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthReAuthEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xSMAuthConfigGroup = hpicfDot1xSMAuthConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthConfigGroup.setDescription('A collection of objects providing basic status and configuration control over Authenticator PAEs running on a shared-media port.')
hpicfDot1xAuthDiagGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 4)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthNumberOfSuccessAuthentication"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthNumberOfFailedAuthentication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthDiagGroup = hpicfDot1xAuthDiagGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthDiagGroup.setDescription('A collection of objects providing basic diagnostic Information over Authenticator PAEs.')
hpicfDot1xAuthStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 5)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolFramesTx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolStartFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolLogoffFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolRespIdFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolRespFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolReqIdFramesTx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapolReqFramesTx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthInvalidEapolFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthEapLengthErrorFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthLastEapolFrameVersion"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthLastEapolFrameSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthStatsGroup = hpicfDot1xAuthStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthStatsGroup.setDescription('A collection of objects providing statistics about Authenticator PAEs running on a shared-media port.')
hpicfDot1xAuthSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 6)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionOctetsRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionOctetsTx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionFramesTx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionId"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionAuthenticMethod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStartTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStopTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionInactiveTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionTerminateCause"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionUserName"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionIsForwarding"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionVid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthSessionStatsGroup = hpicfDot1xAuthSessionStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStatsGroup.setDescription('A collection of objects providing statistics about the current, or last sessions for Authenticator PAEs running on a shared-media port.')
hpicfDot1xAuthConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 7)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAuthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthLogoffPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthClientLimit2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthConfigGroup2 = hpicfDot1xAuthConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthConfigGroup2.setDescription('A collection of objects providing basic configuration control of over Authenticator PAEs.')
hpicfDot1xAuthConfigGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 8)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAuthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthLogoffPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthClientLimit2"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAllowGvrpVlans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthConfigGroup3 = hpicfDot1xAuthConfigGroup3.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthConfigGroup3.setDescription('A collection of objects providing basic configuration control of over Authenticator PAEs.')
hpicfDot1xAuthConfigGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 9)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAuthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthLogoffPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthClientLimit2"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAllowGvrpVlans"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthCachedReauthPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthConfigGroup4 = hpicfDot1xAuthConfigGroup4.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xAuthConfigGroup4.setDescription('A collection of objects providing basic configuration control of over Authenticator PAEs.')
hpicfDot1xAuthConfigGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 10)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAuthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthUnauthPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthLogoffPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthClientLimit2"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthAllowGvrpVlans"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthCachedReauthPeriod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthCachedReauthDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthConfigGroup5 = hpicfDot1xAuthConfigGroup5.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthConfigGroup5.setDescription('A collection of objects providing basic configuration control of over Authenticator PAEs.')
hpicfDot1xSuppConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 11)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSuppConfigIdentity"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSuppConfigPassword"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSuppConfigPasswordEncrypted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xSuppConfigGroup = hpicfDot1xSuppConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSuppConfigGroup.setDescription('A collection of objects providing basic configuration of the 802.1x supplicant.')
hpicfDot1xPaeAuthSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 12)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthMacAddr"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortMixed"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionPerPAECountersEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xPaeAuthSessionGroup = hpicfDot1xPaeAuthSessionGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xPaeAuthSessionGroup.setDescription('A collection of Dot1x objects .')
hpicfDot1xSMAuthSessionTimeoutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 13)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthSessionTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xSMAuthSessionTimeoutGroup = hpicfDot1xSMAuthSessionTimeoutGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSMAuthSessionTimeoutGroup.setDescription('A collection of objects providing RADIUS server set session timeout for user reauthentication')
hpicfDot1xPaeAuthSessionGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 14)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthMacAddr"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortMixed"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortSpeedVSA"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionPerPAECountersEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xPaeAuthSessionGroup1 = hpicfDot1xPaeAuthSessionGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaeAuthSessionGroup1.setDescription('A collection of Dot1x objects .')
hpicfDot1xAuthSessionStatsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 18)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionOctetsRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionOctetsTx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionFramesRx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionFramesTx"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionId"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionAuthenticMethod"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStartTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStopTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionInactiveTime"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionTerminateCause"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionUserName"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionIsForwarding"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionRoleName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xAuthSessionStatsGroup1 = hpicfDot1xAuthSessionStatsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xAuthSessionStatsGroup1.setDescription('A collection of objects providing statistics about the current, or last sessions for Authenticator PAEs running on a shared-media port.')
hpicfDot1xSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 19)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1x2010"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xSystemGroup = hpicfDot1xSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xSystemGroup.setDescription('A collection of objects providing dot1x 2010 support for authenticator and supplicant.')
hpicfDot1xPaePortGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 1, 20)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortCritAuthVoiceVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortCritAuthDataVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortCritAuthUserRole"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortOpenAuthVoiceVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortOpenAuthDataVid"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortOpenAuthUserRole"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortInitialRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xPaePortGroup1 = hpicfDot1xPaePortGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xPaePortGroup1.setDescription('A collection of objects providing configuration support for critial/open auth vlan.')
hpicfDot1xCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 1)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance = hpicfDot1xCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xCompliance.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 2)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthConfigGroup2"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance2 = hpicfDot1xCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xCompliance2.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 3)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthConfigGroup3"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance3 = hpicfDot1xCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xCompliance3.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 4)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthConfigGroup4"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance4 = hpicfDot1xCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xCompliance4.setDescription('********* THIS COMPLIANCE IS DEPRECATED ********* The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 5)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthConfigGroup5"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance5 = hpicfDot1xCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xCompliance5.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 6)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthConfigGroup5"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSuppConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance6 = hpicfDot1xCompliance6.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xCompliance6.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 7)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthDiagGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaeAuthSessionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance7 = hpicfDot1xCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xCompliance7.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 8)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthSessionTimeoutGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance8 = hpicfDot1xCompliance8.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xCompliance8.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 9)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthDiagGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaeAuthSessionGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance9 = hpicfDot1xCompliance9.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xCompliance9.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 11)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance11 = hpicfDot1xCompliance11.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDot1xCompliance11.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 12)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSystemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance12 = hpicfDot1xCompliance12.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xCompliance12.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 13)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSMAuthConfigGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xAuthSessionStatsGroup"), ("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xSuppConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance13 = hpicfDot1xCompliance13.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xCompliance13.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
hpicfDot1xCompliance14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 25, 2, 2, 14)).setObjects(("HP-DOT1X-EXTENSIONS-MIB", "hpicfDot1xPaePortGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDot1xCompliance14 = hpicfDot1xCompliance14.setStatus('current')
if mibBuilder.loadTexts: hpicfDot1xCompliance14.setDescription('The compliance statement for devices support of HP IEEE 802.1X extensions MIB.')
mibBuilder.exportSymbols("HP-DOT1X-EXTENSIONS-MIB", hpicfDot1xCompliance12=hpicfDot1xCompliance12, hpicfDot1xAuthConfigGroup3=hpicfDot1xAuthConfigGroup3, hpicfDot1xAuthSessionStatsTable=hpicfDot1xAuthSessionStatsTable, hpicfDot1xAuthSessionAuthenticMethod=hpicfDot1xAuthSessionAuthenticMethod, hpicfDot1xPaePortGroup1=hpicfDot1xPaePortGroup1, hpicfDot1xSMAuthSessionTimeoutGroup=hpicfDot1xSMAuthSessionTimeoutGroup, hpicfDot1xPaePortOpenAuthDataVid=hpicfDot1xPaePortOpenAuthDataVid, hpicfDot1xSMAuthReAuthPeriod=hpicfDot1xSMAuthReAuthPeriod, hpicfDot1xAuthSessionStatsEntry=hpicfDot1xAuthSessionStatsEntry, hpicfDot1xAuthSessionStartTime=hpicfDot1xAuthSessionStartTime, hpicfDot1xSMAuthConfigTable=hpicfDot1xSMAuthConfigTable, hpicfDot1xSMAuthPaeState=hpicfDot1xSMAuthPaeState, hpicfDot1xPaeAuthSessionGroup1=hpicfDot1xPaeAuthSessionGroup1, hpicfDot1xPaePortCritAuthUserRole=hpicfDot1xPaePortCritAuthUserRole, hpicfDot1xAuthSessionVid=hpicfDot1xAuthSessionVid, hpicfDot1xAuthSessionId=hpicfDot1xAuthSessionId, hpicfDot1xAuthSessionIsForwarding=hpicfDot1xAuthSessionIsForwarding, hpicfDot1xPaePortOpenAuthVoiceVid=hpicfDot1xPaePortOpenAuthVoiceVid, hpicfDot1xAuthConfigGroup=hpicfDot1xAuthConfigGroup, hpicfDot1xPaePortInitialRole=hpicfDot1xPaePortInitialRole, hpicfDot1xAuthUnauthVid=hpicfDot1xAuthUnauthVid, hpicfDot1xAuthNumberOfFailedAuthentication=hpicfDot1xAuthNumberOfFailedAuthentication, hpicfDot1xCompliance13=hpicfDot1xCompliance13, hpicfDot1xSMAuthSessionTimeout=hpicfDot1xSMAuthSessionTimeout, hpicfDot1xAuthSessionOctetsRx=hpicfDot1xAuthSessionOctetsRx, hpicfDot1xAuthClientLimit=hpicfDot1xAuthClientLimit, hpicfDot1xAuthSessionStopTime=hpicfDot1xAuthSessionStopTime, hpicfDot1xAuthLogoffPeriod=hpicfDot1xAuthLogoffPeriod, hpicfDot1xAuthConfigGroup4=hpicfDot1xAuthConfigGroup4, hpicfDot1xAuthSessionFramesTx=hpicfDot1xAuthSessionFramesTx, hpicfDot1xSMAuthReauthenticate=hpicfDot1xSMAuthReauthenticate, hpicfDot1xAuthConfigGroup5=hpicfDot1xAuthConfigGroup5, hpicfDot1xAuthSessionStatsGroup1=hpicfDot1xAuthSessionStatsGroup1, hpicfDot1xCompliance6=hpicfDot1xCompliance6, hpicfDot1xAuthenticator=hpicfDot1xAuthenticator, hpicfDot1xAuthUnauthPeriod=hpicfDot1xAuthUnauthPeriod, hpicfDot1xAuthEapolLogoffFramesRx=hpicfDot1xAuthEapolLogoffFramesRx, hpicfDot1xGroups=hpicfDot1xGroups, hpicfDot1xAuthEapolFramesTx=hpicfDot1xAuthEapolFramesTx, hpicfDot1xAuthEapolReqFramesTx=hpicfDot1xAuthEapolReqFramesTx, hpicfDot1xAuthDiagGroup=hpicfDot1xAuthDiagGroup, hpicfDot1xAuthStatsTable=hpicfDot1xAuthStatsTable, hpicfDot1xPaePortGroup=hpicfDot1xPaePortGroup, hpicfDot1xAuthConfigEntry=hpicfDot1xAuthConfigEntry, hpicfDot1xAuthEapolRespIdFramesRx=hpicfDot1xAuthEapolRespIdFramesRx, hpicfDot1xCompliance8=hpicfDot1xCompliance8, hpicfDot1xMIBObjects=hpicfDot1xMIBObjects, hpicfDot1xPaeAuthSessionGroup=hpicfDot1xPaeAuthSessionGroup, hpicfDot1xAuthConfigGroup2=hpicfDot1xAuthConfigGroup2, hpicfDot1xCompliance4=hpicfDot1xCompliance4, hpicfDot1xPaePortCritAuthDataVid=hpicfDot1xPaePortCritAuthDataVid, hpicfDot1xSMAuthPaePort=hpicfDot1xSMAuthPaePort, hpicfDot1xAuthInvalidEapolFramesRx=hpicfDot1xAuthInvalidEapolFramesRx, hpicfDot1xCompliance5=hpicfDot1xCompliance5, hpicfDot1xPaePortEntry=hpicfDot1xPaePortEntry, hpicfDot1xAuthAuthVid=hpicfDot1xAuthAuthVid, hpicfDot1xAuthEapolStartFramesRx=hpicfDot1xAuthEapolStartFramesRx, hpicfDot1xAuthNumberOfSuccessAuthentication=hpicfDot1xAuthNumberOfSuccessAuthentication, hpicfDot1xAuthSessionUserName=hpicfDot1xAuthSessionUserName, hpicfDot1xAuthLastEapolFrameSource=hpicfDot1xAuthLastEapolFrameSource, hpicfDot1xSMAuthBackendAuthState=hpicfDot1xSMAuthBackendAuthState, hpicfDot1xAuthStatsEntry=hpicfDot1xAuthStatsEntry, hpicfDot1xPaePortAuth=hpicfDot1xPaePortAuth, hpicfDot1xAuthSessionTerminateCause=hpicfDot1xAuthSessionTerminateCause, hpicfDot1xSuppConfigPassword=hpicfDot1xSuppConfigPassword, hpicfDot1xAuthEapLengthErrorFramesRx=hpicfDot1xAuthEapLengthErrorFramesRx, hpicfDot1xSuppConfigGroup=hpicfDot1xSuppConfigGroup, hpicfDot1xPaePortMixed=hpicfDot1xPaePortMixed, hpicfDot1x2010=hpicfDot1x2010, hpicfDot1xAuthConfigTable=hpicfDot1xAuthConfigTable, hpicfDot1xCompliance9=hpicfDot1xCompliance9, hpicfDot1xAuthEapolRespFramesRx=hpicfDot1xAuthEapolRespFramesRx, hpicfDot1xAuthSessionStatsGroup=hpicfDot1xAuthSessionStatsGroup, hpicfDot1xAuthDiagEntry=hpicfDot1xAuthDiagEntry, hpicfDot1xCompliance14=hpicfDot1xCompliance14, hpicfDot1xAuthClientLimit2=hpicfDot1xAuthClientLimit2, hpicfDot1xSuppConfigIdentity=hpicfDot1xSuppConfigIdentity, hpicfDot1xPaePortSpeedVSA=hpicfDot1xPaePortSpeedVSA, hpicfDot1xAuthSessionFramesRx=hpicfDot1xAuthSessionFramesRx, hpicfDot1xMIB=hpicfDot1xMIB, hpicfDot1xCompliance3=hpicfDot1xCompliance3, hpicfDot1xPaePortCritAuthVoiceVid=hpicfDot1xPaePortCritAuthVoiceVid, hpicfDot1xAuthStatsGroup=hpicfDot1xAuthStatsGroup, hpicfDot1xCompliance7=hpicfDot1xCompliance7, hpicfDot1xPaePortTable=hpicfDot1xPaePortTable, hpicfDot1xSystemGroup=hpicfDot1xSystemGroup, hpicfDot1xAuthCachedReauthPeriod=hpicfDot1xAuthCachedReauthPeriod, hpicfDot1xCompliance11=hpicfDot1xCompliance11, hpicfDot1xAuthEapolReqIdFramesTx=hpicfDot1xAuthEapolReqIdFramesTx, hpicfDot1xSMAuthConfigEntry=hpicfDot1xSMAuthConfigEntry, hpicfDot1xAuthEnforceCacheReauth=hpicfDot1xAuthEnforceCacheReauth, hpicfDot1xPaePortMBV=hpicfDot1xPaePortMBV, hpicfDot1xPaePortOpenAuthUserRole=hpicfDot1xPaePortOpenAuthUserRole, hpicfDot1xSuppConfigPasswordEncrypted=hpicfDot1xSuppConfigPasswordEncrypted, hpicfDot1xAuthSessionOctetsTx=hpicfDot1xAuthSessionOctetsTx, hpicfDot1xAuthAllowGvrpVlans=hpicfDot1xAuthAllowGvrpVlans, hpicfDot1xSystem=hpicfDot1xSystem, hpicfDot1xCompliance2=hpicfDot1xCompliance2, hpicfDot1xAuthSessionPerPAECountersEnabled=hpicfDot1xAuthSessionPerPAECountersEnabled, hpicfDot1xSMAuthInitialize=hpicfDot1xSMAuthInitialize, hpicfDot1xSMAuthConfigGroup=hpicfDot1xSMAuthConfigGroup, hpicfDot1xAuthEapolFramesRx=hpicfDot1xAuthEapolFramesRx, hpicfDot1xAuthLastEapolFrameVersion=hpicfDot1xAuthLastEapolFrameVersion, hpicfDot1xAuthDiagTable=hpicfDot1xAuthDiagTable, hpicfDot1xCompliance=hpicfDot1xCompliance, PYSNMP_MODULE_ID=hpicfDot1xMIB, hpicfDot1xCompliances=hpicfDot1xCompliances, hpicfDot1xSupplicant=hpicfDot1xSupplicant, hpicfDot1xAuthCachedReauthDelay=hpicfDot1xAuthCachedReauthDelay, hpicfDot1xAuthSessionInactiveTime=hpicfDot1xAuthSessionInactiveTime, hpicfDot1xSMAuthMacAddr=hpicfDot1xSMAuthMacAddr, hpicfDot1xAuthSessionRoleName=hpicfDot1xAuthSessionRoleName, hpicfDot1xConformance=hpicfDot1xConformance, hpicfDot1xPaePortSupp=hpicfDot1xPaePortSupp, hpicfDot1xSMAuthReAuthEnabled=hpicfDot1xSMAuthReAuthEnabled, hpicfDot1xSuppConfigTable=hpicfDot1xSuppConfigTable, hpicfDot1xAuthSessionTime=hpicfDot1xAuthSessionTime, hpicfDot1xSuppConfigEntry=hpicfDot1xSuppConfigEntry)
