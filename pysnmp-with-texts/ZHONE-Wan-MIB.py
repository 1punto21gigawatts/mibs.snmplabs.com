#
# PySNMP MIB module ZHONE-Wan-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-Wan-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ifAlias, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifAlias", "InterfaceIndex", "ifIndex")
PerfCurrentCount, PerfTotalCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfTotalCount", "PerfIntervalCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, Bits, Counter64, MibIdentifier, TimeTicks, Unsigned32, ObjectIdentity, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Bits", "Counter64", "MibIdentifier", "TimeTicks", "Unsigned32", "ObjectIdentity", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "ModuleIdentity")
DisplayString, TruthValue, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "TimeStamp")
zhoneDsx, = mibBuilder.importSymbols("Zhone", "zhoneDsx")
ZhoneAdminString, = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString")
zhoneDs1Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 5, 2, 1))
zhoneDs1Mib.setRevisions(('2009-07-23 11:15', '2009-05-12 07:38', '2008-11-10 08:58', '2006-05-12 12:46', '2004-02-05 11:47', '2004-01-21 15:36', '2003-05-15 13:15', '2003-02-04 13:12', '2001-10-22 10:04', '2001-08-22 13:50', '2001-08-14 16:24', '2001-08-09 10:07', '2001-01-18 13:28', '2001-01-04 11:19', '2000-11-13 11:30', '2000-09-21 10:27', '2000-09-12 13:59',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneDs1Mib.setRevisionsDescriptions(('Added zhoneDs1BertTable.', 'Obsoleted zhoneDs1TxClockRecovery, functionality moved to ZHONE-CARD-RESOURCES-MIB object cardPweTrafficMode.', 'Added zhoneDs1TxClockRecovery and zhoneDs1TxClockAdaptiveQuality for PWE timing.', 'Added Timeslot Assignment', 'V01.01.10 - Add ds1LinePower.', 'V01.01.09 - Added DS1 Group Index to ds1 profile', 'V01.01.08 added ifAlias to the OBJECTS clause for zhoneLineStatusChange trap.', 'V01.01.07 added zhoneDs1ProtocolEmulation & zhoneDs1SignalType ', 'V01.01.07 Updated description for zhoneClockSourceEligibility', 'V01.01.06 Added Coset Polynomial as a part a ds1_profile', 'V01.01.05 Added Cell Scrambling as a part a ds1_profile', 'V01.01.04 Add unframed ds1/e1 options into zhoneLineType this is required by DS1/E1 ATM Trunk card', 'V01.01.03 Changes to the DS1 transmit clock source', 'V01.01.02 Add comments for supported fields in this release. Added sendCode types for E1 to MIB definition. Statistics and far end information is not supported in this release.', 'V01.01.01 Description for Payloadloop corrected', 'V01.01.00 Ds1Trap Prefix corrected', 'V01.00.00 Initial Release',))
if mibBuilder.loadTexts: zhoneDs1Mib.setLastUpdated('200905120738Z')
if mibBuilder.loadTexts: zhoneDs1Mib.setOrganization('Zhone Technologies.')
if mibBuilder.loadTexts: zhoneDs1Mib.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhoneDs1Mib.setDescription('The zhone WAN MIB for configuration of the line. This mib handles CSU and DSX mode.')
zhoneDs1Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2), )
if mibBuilder.loadTexts: zhoneDs1Table.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1Table.setDescription('The DS1 Configuration table. Statistical information not supported on BAN in this release.')
zhoneDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneLineIndex"))
if mibBuilder.loadTexts: zhoneDs1Entry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1Entry.setDescription('An entry in the DS1 Configuration table.')
zhoneLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneLineIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneLineIndex.setDescription('This object should be made equal to ifIndex. Making the object equal to ifIndex allows proper use of ifStackTable and ds0/ds0bundle mibs.')
zhoneTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: zhoneTimeElapsed.setDescription("The number of seconds that have elapsed since the beginning of the near end current error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
zhoneValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneValidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneValidIntervals.setDescription('The numberof previous near end intervals for which data was collected. The value will be 96 unless the interface was brouht online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been oline. In the case where the agent is a proxxy, it is possible that some intervals are unavailable. In this case, the interval is the maximum interval number for which data is available. ')
zhoneLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("esf", 2), ("d4", 3), ("slc96", 4), ("e1", 5), ("e1Crc", 6), ("e1Mf", 7), ("e1CrcMf", 8), ("e1Unframed", 9), ("ds1Unframed", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLineType.setStatus('current')
if mibBuilder.loadTexts: zhoneLineType.setDescription('This variable indicates the variety of DS1 Line implementing this circuit. The type of circuit affects the number of bits per second that the circuit can reasonably carry, as well as the interpretation of the usage and error statistics. The values, in sequence, describe: TITLE: SPECIFICATION: other(1) (not supported in this release) esf(2) Extended SuperFrame DS1 (T1.107) d4(3) AT&T D4 format DS1 (T1.107) slc96(4) (not supported in this release) e1(5) ITU-T Recommendation G.704 (not supported in this release) e1Crc(6) ITU-T Recommendation G.704 (not supported in this release) e1Mf(7) G.704 multiframing enabled e1CrcMf(8) G.704 multiframing enabled and crc enabled e1Unframed(9) E1 with no framing ds1Unframed(10) Ds1 with no framing For clarification, the capacity for each E1 type is as listed below: e1 or e1Crc - e1, with framing, no signalling = 31 x 64k = 1984k e1Mf or e1CrcMf - e1, with framing, signalling = 30 x 64k = 1920k For further information See ITU-T Recomm G.704 Default is set to esf for T1 platforms and e1CrcMf for E1 platforms. BAN E1: esf,d4 T1:e1,e1mf,e1crcmf')
zhoneLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("jbzs", 1), ("b8zs", 2), ("hdb3", 3), ("zbtsi", 4), ("ami", 5), ("other", 6), ("b6zs", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLineCoding.setStatus('current')
if mibBuilder.loadTexts: zhoneLineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on this interface, which in turn affects a number of its characteristics. jbzs refers the Jammed Bit Zero Suppression, in which the AT&T specification of at least one pulse every 8 bit periods is literally implemented by forcing a pulse in bit 8 of each channel. Thus, only seven bits per channel, or 1.344 Mbps, is available for data. b8zs refers to the use of a specified pattern of normal bits and bipolar violations which are used to replace a sequence of eight zero bits. ANSI Clear Channels may use zbtsi, or Zero Byte Time Slot Interchange. E1 links, with or without CRC, use hdb3 or ami. ami refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density requirements, such as inverting HDLC data. b6zs refers to the user of a specifed pattern of normal bits and bipolar violations which are used to replace a sequence of six zero bits. Used for DS2. Default is set to b8zs for T1 platforms and hdb3 for E1. TITLE: AVAILABILITY: jbzs(1) (not supported in this release) b8zs(2) (not supported for e1 lineTypes) hdb3(3) (supported for e1 lineTypes) zbtsi(4) (not supported in this release) ami(5) other(6) (not supported in this release) b6zs(7) (not supported in this rele BAN E1: hdb3,ami; T1: b8zs,ami')
zhoneSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("sendNoCode", 1), ("sendLineCode", 2), ("sendPayloadCode", 3), ("sendResetCode", 4), ("sendQRSSPattern", 5), ("send511Pattern", 6), ("send3in24Pattern", 7), ("sendOtherTestPattern", 8), ("send2047Pattern", 9), ("send1in2Pattern", 10), ("sendInbandCode", 11), ("sendInbandCodeOff", 12), ("sendLineCodeOff", 13), ("sendPayloadCodeOff", 14), ("send2ToPower9Minus1Pattern", 15), ("send2ToPower11Minus1Pattern", 16), ("send2ToPower15Minus1Pattern", 17), ("send2ToPower20Minus1Pattern", 18), ("send2ToPower23Minus1Pattern", 19))).clone('sendNoCode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneSendCode.setStatus('current')
if mibBuilder.loadTexts: zhoneSendCode.setDescription('This variable indicates what type of code is being sent across the DS1 interface by the device. Setting this variable causes the interface to send the code requested. The values mean: SendNoCode sending looped or normal data sendLineCode sending a request for a line loopback T1 related sendCodes ------------------------------------------ sendPayloadCode sending a request for a payload loopback sendResetCode sending a loopback termination request sendQRSSPattern sending a Quasi-Random Signal (QRS) test pattern send511Pattern sending a 511 bit fixed test pattern send3in24Pattern sending a fixed test pattern of 3 bits set in 24 sendOtherTestPattern sending a test pattern other than those described by this object send2047Pattern, sending 2047 test pattern. send1in2Pattern, sending alternate one , zero pattern. sendInbandCode, sending inband loopback command. sendInbandCodeOff, sending inband loopback off command. sendLineCodeOff, sending line loopback command. sendPayloadCodeOff, sending payload loopback command. E1 related send codes ------------------------------------------ send2ToPower9Minus1Pattern refer to O.153 send2ToPower11Minus1Pattern refer to O.152 and O.153 send2ToPower15Minus1Pattern refer to O.151 send2ToPower20Minus1Pattern refer to O.153 QRSS bit = 1 send2ToPower23Minus1Pattern refer to O.151 Only sendNoCode is supported on E1 platforms in this release. N/A for BAN ')
zhoneCircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 7), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCircuitIdentifier.setStatus('current')
if mibBuilder.loadTexts: zhoneCircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
zhoneLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("localLoop", 3), ("payloadLoop", 4))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: zhoneLoopbackConfig.setDescription("This variable represents the desired loopback configuration of the DS1 interface. Agents supporting read/write access should return inconsistentValue in response to a requested loopback state that the interface does not support. The values mean: noLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as its value. lineLoop The received signal at this interface does not go through the device (minimum penetration) but is looped back out. localLoop The transmitted signal at this interface is looped back and received by the same interface. What is transmitted onto the line is product dependent. payloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. ")
zhoneLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLineStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneLineStatus.setDescription("This variable indicates the Line Status of the interface. It contains loopback, failure, received 'alarm' and transmitted 'alarms information. If the zhloopbackState bit is set, the loopback in effect can be determined from the loopbackConfig object. The various bit positions are: noAlarm(1) No alarm present rcvFarEndLOF(2) Far end LOF (a.k.a., Yellow Alarm) xmtFarEndLOF(4) Near end sending LOF Indication rcvAIS(8) Far end sending AIS xmtAIS(16) Near end sending AIS lossOfFrame(32 Near end LOF (a.k.a., Red Alarm) lossOfSignal(64) Near end Loss Of Signal loopbackState(128) Near end is looped ts16AIS(256) E1 TS16 AIS rcvFarEndLOMF(512) Far End Sending TS16 LOMF xmtFarEndLOMF(1024) Near End Sending TS16 LOMF rcvTestCode(2048) Near End detects a test code otherFailure(4096) any line status not defined here unavailSigState(8192) Near End in Unavailable Signal State netEquipOOS(16384) Carrier Equipment Out of Service ")
zhoneSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4), ("other", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneSignalMode.setStatus('current')
if mibBuilder.loadTexts: zhoneSignalMode.setDescription("'none' indicates that no bits are reserved for signaling on this channel. 'robbedBit' indicates that DS1 Robbed Bit Sig- naling is in use. 'bitOriented' indicates that E1 Channel Asso- ciated Signaling is in use. 'messageOriented' indicates that Common Chan- nel Signaling is in use either on channel 16 of an E1 link or channel 24 of a DS1. Default is set to robbedBit for T1 platforms and messageOriented for E1. TITLE: AVAILABILITY: none(1) robbedBit(2) (not supported for E1 lineTypes) bitOriented(3) (only supported for E1 lineTypes) messageOriented(4) has the same effect as none other(5) (not supported in this release) N/A For BAN")
zhoneTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3), ("sonetThroughTiming", 4))).clone('throughTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneTransmitClockSource.setStatus('current')
if mibBuilder.loadTexts: zhoneTransmitClockSource.setDescription("Reflects the source of Transmit Clock. 'loopTiming' indicates that the recovered receive clock is used as the transmit clock. Only set if this DS1 has zhoneClockSourceEligibility equal to 'eligible' and the state of that ds1 is 'up' and the ds1 resource provider decided this DS1 is to provide the transmit clock for all the DS1s. Only one DS1 will have this set per platform. 'localTiming' indicates that a local clock source is used or when an external clock is attached to the box containing the interface. 'throughTiming' indicates that recovered receive clock from another interface is used as the transmit clock. Example: If a DS1 other than this one reflects 'loopTiming', this DS1 will use that DS1 as its transmit clock. Therefore this DS1 reflects 'throughTiming'. 'sonetThroughTiming' indecates that recovered receive clock from the far-side sonet node is used as the transmit clock.")
zhoneFdl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ansiT1403", 2), ("att54016", 3), ("fdlNone", 4))).clone('fdlNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneFdl.setStatus('current')
if mibBuilder.loadTexts: zhoneFdl.setDescription(" 'other' indicates that a protocol other than one following is used. 'ansiT1403' refers to the FDL exchange recommended by ANSI. 'att54016' refers to ESF FDL exchanges. 'fdlNone' indicates that the device does not use the FDL. TITLE: AVAILABILITY: other(1) (not supported in this release) ansiT1403(2) (not supported in this release) att54016(3) (not supported in this release) fdlNone(4) ")
zhoneInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneInvalidIntervals.setDescription('The number of intervals in the range from 0 to zwValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
zhoneDsxLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dsx0", 1), ("dsx133", 2), ("dsx266", 3), ("dsx399", 4), ("dsx533", 5), ("dsx655", 6))).clone('dsx0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDsxLineLength.setStatus('current')
if mibBuilder.loadTexts: zhoneDsxLineLength.setDescription("The length of the dsx wan is in feets. This objects provides information for line build out circuitry. The valid range is: 'dsx0(1)' It is 0 feet for the line build out (LBO) and the default setting. 'dsx133(2)'It is 133 feets for the LBO. 'dsx266(3)'It is 266 feets for the LBO. 'dsx399(4)'It is 399 feets for the LBO. 'dsx533(5)'It is 533 feets for the LBO. 'dsx655(6)'It is 655 feets for the LBO. This field is not used for E1 platforms. ")
zhoneLineStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLineStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: zhoneLineStatusLastChange.setDescription("The value of MIB II's sysUpTime object at the time this DS1 entered its current line status state. If the current state was entered prior to the last re-initialization of the proxy-agent, then this object contains a zero value.")
zhoneLineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneLineStatusChangeTrapEnable.setStatus('current')
if mibBuilder.loadTexts: zhoneLineStatusChangeTrapEnable.setDescription('Indicates whether zhoneLineStatusChange traps should be generated for this interface. ')
zhoneLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneLoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS1 interface. It contains information about loopbacks established by a local manager and remotely from the far end. This status is combination of loopbackConfig, and sendCode options as this status represents the local as well as far loopbacks. The various positions are: noLoopback(1) nearEndLineLoopback(2) nearEndOtherLoopback(4) nearEndLocalLoopback(8) farEndPayloadLoopback(16) farEndLineLoopback(32)')
zhoneDs1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneDs1ChannelNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1ChannelNumber.setDescription('This variable represents the channel number of the DS1/E1 on its parent Ds2/E2 or DS3/E3. A value of 0 indicated this DS1/E1 does not have a parent DS3/E3.')
zhoneChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledDs0", 2), ("enabledDs1", 3))).clone('enabledDs0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneChannelization.setStatus('current')
if mibBuilder.loadTexts: zhoneChannelization.setDescription('Indicates whether this ds1/e1 is channelized or unchannelized. The value of enabledDs0 indicates that this is a DS1 channelized into DS0s. The value of enabledDs1 indicated that this is a DS2 channelized into DS1s. Setting this value will cause the creation or deletion of entries in the ifTable for the DS0s that are within the DS1. TITLE: AVAILABILITY: disabled(1) (not supported in this release) enabledDs0(2) enabledDs1(3) (not supported in this release) For BAN disabled')
zhoneDs1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dsx", 2), ("csu", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1Mode.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1Mode.setDescription("'other' wan is not in csu or dsx mode. 'dsx' T1 wan is in dsx mode. 'csu' T1 wan is in csu mode. Default setting is 'csu' for T1 platforms and 'other' for E1. TITLE: AVAILABILITY: other(1) dsx(2) csu(3) BAN E1:other; T1:csu,dsx")
zhoneCsuLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("csu00", 1), ("csu75", 2), ("csu150", 3), ("csu225", 4))).clone('csu00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCsuLineLength.setStatus('current')
if mibBuilder.loadTexts: zhoneCsuLineLength.setDescription(" 'csu00' it is 0 dB for csu ds1 wan for line build out. 'csu75' it is -7.5 dB for line build out. 'csu150' it is -15.0 dB for line build out. 'csu225' it is -22.5 dB for line build out (LBO). This field is not used for E1 platforms.")
zhoneClockSourceEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notEligible", 1), ("eligible", 2))).clone('notEligible')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneClockSourceEligibility.setStatus('current')
if mibBuilder.loadTexts: zhoneClockSourceEligibility.setDescription(' The possible values are: (1) not-eligibile - this DS1 is not eligible to be negotiated as a possible transmit clock source (2) eligible - this DS1 may be used by the DS1 Line resource provider in negotiation as a possible transmit clock source for all DS1s. For BAN DS1, this field is not writeable and will default to eligible. ')
zhoneCellScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 23), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCellScramble.setStatus('current')
if mibBuilder.loadTexts: zhoneCellScramble.setDescription('This field describes the enabled status of the Ds1 Cell Scramble mode. If this field is true(1) then Scramble mode is enabled, if this field is false(2) scramble mode is disable..')
zhoneCosetPolynomial = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneCosetPolynomial.setStatus('current')
if mibBuilder.loadTexts: zhoneCosetPolynomial.setDescription('This field describes the enabled status of the Coset Polynomial mode. If this field is true(1) then Coset Polynomial mode is enabled, if this field is false(2) Coset Polynomial mode is disable.')
zhoneDs1ProtocolEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("cpe", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1ProtocolEmulation.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1ProtocolEmulation.setDescription('Indicates whether the device is acting as Network-side or CPE with respect to this DS1. For example, if the system is configured with a PBX on the network side of the device, then the device will act as a CPE with respect to the DS1. If the device is on the network side of a PBX, then this leaf should be set to network, as the PBX would be acting as a CPE.')
zhoneDs1SignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopStart", 1), ("groundStart", 2))).clone('loopStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1SignalType.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1SignalType.setDescription('The signaling type of the FXS interfaces within this DS1.')
zhoneDs1GroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1GroupIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1GroupIndex.setDescription('The Group index this Ds1 belongs to')
zhoneDs1LinePower = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1LinePower.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1LinePower.setDescription('Enable or disable line power for the DS1 interface.')
zhoneDs1TimeslotAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 29), Bits().clone(namedValues=NamedValues(("ts0", 0), ("ts1", 1), ("ts2", 2), ("ts3", 3), ("ts4", 4), ("ts5", 5), ("ts6", 6), ("ts7", 7), ("ts8", 8), ("ts9", 9), ("ts10", 10), ("ts11", 11), ("ts12", 12), ("ts13", 13), ("ts14", 14), ("ts15", 15), ("ts16", 16), ("ts17", 17), ("ts18", 18), ("ts19", 19), ("ts20", 20), ("ts21", 21), ("ts22", 22), ("ts23", 23), ("ts24", 24), ("ts25", 25), ("ts26", 26), ("ts27", 27), ("ts28", 28), ("ts29", 29), ("ts30", 30), ("ts31", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1TimeslotAssignment.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1TimeslotAssignment.setDescription('This table entry is a bit field indicating which timeslots in a ds1 are used (or assigned). Default for DS1 based card: 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+0+0+0+0+0+0+0+0 Default for E1 based card: 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+0.')
zhoneDs1TxClockRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("adaptive", 2), ("differential", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1TxClockRecovery.setStatus('obsolete')
if mibBuilder.loadTexts: zhoneDs1TxClockRecovery.setDescription('PWE transmit clock recovery method')
zhoneDs1TxClockAdaptiveQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stratum1", 1), ("stratum3", 2), ("stratum3e", 3), ("stratum4", 4))).clone('stratum3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneDs1TxClockAdaptiveQuality.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1TxClockAdaptiveQuality.setDescription('Determines sync drift when operating in PWE adaptive mode. Values reflect ANSI Standard T1.101 reference clock quality.')
zhoneDs1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3), )
if mibBuilder.loadTexts: zhoneDs1CurrentTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1CurrentTable.setDescription('The DS1 current table contains various statistics being collected for the current 15 minute interval. Not supported on BAN in this release.')
zhoneDs1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneCurrentIndex"))
if mibBuilder.loadTexts: zhoneDs1CurrentEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1CurrentEntry.setDescription('An entry in the DS1 Current table.')
zhoneCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a zhLineIndex object instance.')
zhoneCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentESs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentESs.setDescription('The number of Errored Seconds.')
zhoneCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentSESs.setDescription('The number of Severely Errored Seconds.')
zhoneCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentSEFSs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds.')
zhoneCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentUASs.setDescription('The number of Unavailable Seconds.')
zhoneCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentCSSs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentCSSs.setDescription('The number of Controlled Slip Seconds.')
zhoneCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentPCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentPCVs.setDescription('The number of Path Coding Violations.')
zhoneCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentLESs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentLESs.setDescription('The number of Line Errored Seconds.')
zhoneCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentBESs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentBESs.setDescription('The number of Bursty Errored Seconds.')
zhoneCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentDMs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentDMs.setDescription('The number of Degraded Minutes.')
zhoneCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 3, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCurrentLCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneCurrentLCVs.setDescription('The number of Line Code Violations (LCVs).')
zhoneDs1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4), )
if mibBuilder.loadTexts: zhoneDs1IntervalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1IntervalTable.setDescription('The DS1 Interval Table contains various statistics collected by each DS1 Interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by zwIntervalNumber) for one specific instance (identified by zwIntervalIndex). Not supported on BAN in this release.')
zhoneDs1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneIntervalIndex"), (0, "ZHONE-Wan-MIB", "zhoneIntervalNumber"))
if mibBuilder.loadTexts: zhoneDs1IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1IntervalEntry.setDescription('An entry in the DS1 Interval table.')
zhoneIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a zhLineIndex object instance.')
zhoneIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
zhoneIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalESs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalESs.setDescription('The number of Errored Seconds.')
zhoneIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalSESs.setDescription('The number of Severely Errored Seconds.')
zhoneIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds.')
zhoneIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalUASs.setDescription('The number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
zhoneIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalCSSs.setDescription('The number of Controlled Slip Seconds.')
zhoneIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalPCVs.setDescription('The number of Path Coding Violations.')
zhoneIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalLESs.setDescription('The number of Line Errored Seconds.')
zhoneIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalBESs.setDescription('The number of Bursty Errored Seconds.')
zhoneIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalDMs.setDescription('The number of Degraded Minutes.')
zhoneIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalLCVs.setDescription('The number of Line Code Violations.')
zhoneIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: zhoneIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
zhoneDs1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5), )
if mibBuilder.loadTexts: zhoneDs1TotalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1TotalTable.setDescription('The DS1 Total Table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. Not supported on BAN in this release.')
zhoneDs1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneTotalIndex"))
if mibBuilder.loadTexts: zhoneDs1TotalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1TotalEntry.setDescription('An entry in the DS1 Total table.')
zhoneTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneTotalIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value as a zhLineIndex object instance.')
zhoneTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalESs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalESs.setDescription('The sum of Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalSEFSs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalCSSs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalPCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalLESs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalBESs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalDMs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 5, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneTotalLCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneTotalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in the current 15 minute interval. Invalid 15 minute intervals count as 0.')
zhoneDs1FarEndCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6), )
if mibBuilder.loadTexts: zhoneDs1FarEndCurrentTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1FarEndCurrentTable.setDescription('The DS1 Far End Current table contains various statistics being collected for the current 15 minute interval. The statistics are collected from the far end messages on the Facilities Data Link. The definitions are the same as described for the near-end information. Not supported in this release.')
zhoneDs1FarEndCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneFarEndCurrentIndex"))
if mibBuilder.loadTexts: zhoneDs1FarEndCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1FarEndCurrentEntry.setDescription('An entry in the DS1 Far End Current table.')
zhoneFarEndCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneFarEndCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is identical to the interface identified by the same value of zhLineIndex.')
zhoneFarEndTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTimeElapsed.setDescription("The number of seconds that have elapsed since the beginning of the far end current error-measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
zhoneFarEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndValidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndValidIntervals.setDescription('The number of previous far end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute far end intervals since the interface has been online.')
zhoneFarEndCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentESs.setDescription('The number of Far End Errored Seconds.')
zhoneFarEndCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentSESs.setDescription('The number of Far End Severely Errored Seconds.')
zhoneFarEndCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentSEFSs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentSEFSs.setDescription('The number of Far End Severely Errored Framing Seconds.')
zhoneFarEndCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentUASs.setDescription('The number of Unavailable Seconds.')
zhoneFarEndCurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentCSSs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentCSSs.setDescription('The number of Far End Controlled Slip Seconds.')
zhoneFarEndCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentLESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentLESs.setDescription('The number of Far End Line Errored Seconds.')
zhoneFarEndCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentPCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentPCVs.setDescription('The number of Far End Path Coding Violations.')
zhoneFarEndCurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentBESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentBESs.setDescription('The number of Far End Bursty Errored Seconds.')
zhoneFarEndCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndCurrentDMs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndCurrentDMs.setDescription('The number of Far End Degraded Minutes.')
zhoneFarEndInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndInvalidIntervals.setDescription('The number of intervals in the range from 0 to zhFarEndValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
zhoneDs1FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7), )
if mibBuilder.loadTexts: zhoneDs1FarEndIntervalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1FarEndIntervalTable.setDescription('The DS1 Far End Interval Table contains various statistics collected by each DS1 interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by zwFarEndIntervalNumber) for one specific instance (identified by zwFarEndIntervalIndex). Not supported in this release.')
zhoneDs1FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneFarEndIntervalIndex"), (0, "ZHONE-Wan-MIB", "zhoneFarEndIntervalNumber"))
if mibBuilder.loadTexts: zhoneDs1FarEndIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1FarEndIntervalEntry.setDescription('An entry in the DS1 Far End Interval table.')
zhoneFarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneFarEndIntervalIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is identical to the interface identified by the same value of zhLineIndex.')
zhoneFarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
zhoneFarEndIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalESs.setDescription('The number of Far End Errored Seconds.')
zhoneFarEndIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalSESs.setDescription('The number of Far End Severely Errored Seconds.')
zhoneFarEndIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalSEFSs.setDescription('The number of Far End Severely Errored Framing Seconds.')
zhoneFarEndIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalUASs.setDescription('The number of Unavailable Seconds.')
zhoneFarEndIntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalCSSs.setDescription('The number of Far End Controlled Slip Seconds.')
zhoneFarEndIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalLESs.setDescription('The number of Far End Line Errored Seconds.')
zhoneFarEndIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalPCVs.setDescription('The number of Far End Path Coding Violations.')
zhoneFarEndIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalBESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalBESs.setDescription('The number of Far End Bursty Errored Seconds.')
zhoneFarEndIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalDMs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalDMs.setDescription('The number of Far End Degraded Minutes.')
zhoneFarEndIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 7, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
zhoneDs1FarEndTotalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8), )
if mibBuilder.loadTexts: zhoneDs1FarEndTotalTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1FarEndTotalTable.setDescription('The DS1 Far End Total Table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval. Not supported in this release.')
zhoneDs1FarEndTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneFarEndTotalIndex"))
if mibBuilder.loadTexts: zhoneDs1FarEndTotalEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1FarEndTotalEntry.setDescription('An entry in the DS1 Far End Total table.')
zhoneFarEndTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: zhoneFarEndTotalIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalIndex.setDescription('The index value which uniquely identifies the DS1 interface to which this entry is applicable. The interface identified by a particular value of this index is identical to the interface identified by the same value of zhLineIndex.')
zhoneFarEndTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalESs.setDescription('The number of Far End Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalSESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalSESs.setDescription('The number of Far End Severely Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalSEFSs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalSEFSs.setDescription('The number of Far End Severely Errored Framing Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalUASs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalCSSs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalCSSs.setDescription('The number of Far End Controlled Slip Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalLESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalLESs.setDescription('The number of Far End Line Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalPCVs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalPCVs.setDescription('The number of Far End Path Coding Violations reported via the far end block error count encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalBESs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneFarEndTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 8, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneFarEndTotalDMs.setStatus('current')
if mibBuilder.loadTexts: zhoneFarEndTotalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
zhoneChanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 9), )
if mibBuilder.loadTexts: zhoneChanMappingTable.setStatus('current')
if mibBuilder.loadTexts: zhoneChanMappingTable.setDescription('The DS1 Channel Mapping table. This table maps a DS1 channel number on a particular DS3 into an ifIndex. In the presence of DS2s, this table can be used to map a DS2 channel number on a DS3 into an ifIndex, or used to map a DS1 channel number on a DS2 onto an ifIndex. Not supported in this release.')
zhoneChanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ZHONE-Wan-MIB", "zhoneDs1ChannelNumber"))
if mibBuilder.loadTexts: zhoneChanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneChanMappingEntry.setDescription('An entry in the DS1 Channel Mapping table. There is an entry in this table corresponding to each ds1 ifEntry within any interface that is channelized to the individual ds1 ifEntry level. This table is intended to facilitate mapping from channelized interface / channel number to DS1 ifEntry. (e.g. mapping (DS3 ifIndex, DS1 Channel Number) -> ifIndex) While this table provides information that can also be found in the ifStackTable and zhoneWanTable, it provides this same information with a single table lookup, rather than by walking the ifStackTable to find the various constituent ds1 ifTable entries, and testing various zhoneWanTable entries to check for the entry with the applicable DS1 channel number.')
zhoneChanMappedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneChanMappedIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneChanMappedIfIndex.setDescription('This object indicates the ifIndex value assigned by the agent for the individual ds1 ifEntry that corresponds to the given DS1 channel number (specified by the INDEX element zwDs1ChannelNumber) of the given channelized interface (specified by INDEX element ifIndex).')
zhoneDsxTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 2, 10))
zhoneDsxTrapsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 5, 2, 10, 0))
zhoneLineStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 5, 2, 10, 0, 1)).setObjects(("ZHONE-Wan-MIB", "zhoneLineStatus"), ("ZHONE-Wan-MIB", "zhoneLineStatusLastChange"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: zhoneLineStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneLineStatusChange.setDescription('A zhoneLineStatusChange trap is not sent when the value of an instance zhoneLineStatus changes. It can be utilizeded by the NMS to trigger polls. When the line status change results from a hihter level line status change (i.e. ds3), then no traps for the ds1 are sent. Not supported on BAN in this release.')
zhoneDs1BertTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13), )
if mibBuilder.loadTexts: zhoneDs1BertTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1BertTable.setDescription('The BERT Table is used to issue Bit Error Rate Tests on a particular Ds1.')
zhoneDs1BertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneBertIndex"))
if mibBuilder.loadTexts: zhoneDs1BertEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1BertEntry.setDescription('An entry in the BERT table.')
zhoneBertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 21)))
if mibBuilder.loadTexts: zhoneBertIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneBertIndex.setDescription('This field is the index field for the BERT test channel. There is only 1 BERT test allowed at a time.')
zhoneBertInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: zhoneBertInterfaceIndex.setDescription('This field contains the InterfaceIndex of the physical line to be tested. If no line is currently being tested this value is 0.')
zhoneBertRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertRequest.setStatus('current')
if mibBuilder.loadTexts: zhoneBertRequest.setDescription("Command request list for the Ds1 BERT test. This object corresponds to the list of test operations that can be performed. The possible values are noOp (1), -- used when reading the object start (2), -- start test stop (3), -- stop an initiated test Reading this object will always return the value 'noOp (1)'.")
zhoneBertType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qrss", 1), ("prbs215", 2), ("prbs220", 3))).clone('qrss')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertType.setStatus('current')
if mibBuilder.loadTexts: zhoneBertType.setDescription('The type of pattern to use for the BERT test on the Ds1. Supported patterns are qrss, prbs 2^15, or prbs 2^20.')
zhoneBertTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertTestDuration.setStatus('current')
if mibBuilder.loadTexts: zhoneBertTestDuration.setDescription('The duration in seconds of the BERT test for the Ds1. The valid range for this field is 10-300 seconds.')
zhoneBertLoopUp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noloop", 1), ("lineloop", 2), ("payloadloop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhoneBertLoopUp.setStatus('current')
if mibBuilder.loadTexts: zhoneBertLoopUp.setDescription('The loop code to be sent to the farend prior to running the BERT test for the Ds1.')
zhoneDs1BertResultsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14), )
if mibBuilder.loadTexts: zhoneDs1BertResultsTable.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1BertResultsTable.setDescription('The BERT Results Table is used to retrieve results from a Bit Error Rate Test on a particular Ds1.')
zhoneDs1BertResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1), ).setIndexNames((0, "ZHONE-Wan-MIB", "zhoneBertIndex"))
if mibBuilder.loadTexts: zhoneDs1BertResultsEntry.setStatus('current')
if mibBuilder.loadTexts: zhoneDs1BertResultsEntry.setDescription('An entry in the BERT results table.')
zhoneBertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inProgress", 1), ("abortInProgress", 2), ("complete", 3), ("noResults", 4), ("aborted", 5), ("unsupported", 6), ("portNotAdminTest", 7), ("failed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneBertStatus.setDescription('The overall BERT operational status. This field will indicate the operation status for the interface indexed by zhoneBertInterfaceIndex. inProgress (1) - if the test is currently running. abortInProgress (2) - if a request to stop the test is still in progress. complete (3) - if the test has been run at least once since system reset and has completed. noResults (4) - if the test results are empty, such as after a system reset. aborted (5) - if the test was aborted by the user before it could complete. unsupported (6) - if the device does not support BERT. portNotAdminTest (7) - if port not in admin TEST. failed (8) - if BERT failed to complete.')
zhoneBertElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertElapsedTime.setStatus('current')
if mibBuilder.loadTexts: zhoneBertElapsedTime.setDescription('Elapsed time of the most recent BERT test.')
zhoneBertErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertErroredSeconds.setStatus('current')
if mibBuilder.loadTexts: zhoneBertErroredSeconds.setDescription('Number of errored seconds for the most recent BERT test. This field is only valid when zhoneBertStatus is complete.')
zhoneBertOutOfSynchSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertOutOfSynchSeconds.setStatus('current')
if mibBuilder.loadTexts: zhoneBertOutOfSynchSeconds.setDescription('Number of out of synch seconds for the most recent BERT test. This field is only valid when zhoneBertStatus is complete.')
zhoneBertErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 5, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneBertErrors.setStatus('current')
if mibBuilder.loadTexts: zhoneBertErrors.setDescription('Number of errors for the most recent BERT test. This field is only valid when zhoneBertStatus is complete.')
mibBuilder.exportSymbols("ZHONE-Wan-MIB", zhoneTotalDMs=zhoneTotalDMs, zhoneFarEndCurrentBESs=zhoneFarEndCurrentBESs, zhoneCosetPolynomial=zhoneCosetPolynomial, zhoneBertElapsedTime=zhoneBertElapsedTime, zhoneFarEndIntervalValidData=zhoneFarEndIntervalValidData, zhoneIntervalCSSs=zhoneIntervalCSSs, zhoneDs1FarEndCurrentTable=zhoneDs1FarEndCurrentTable, zhoneDs1TimeslotAssignment=zhoneDs1TimeslotAssignment, zhoneLineStatusChangeTrapEnable=zhoneLineStatusChangeTrapEnable, zhoneDs1FarEndIntervalTable=zhoneDs1FarEndIntervalTable, zhoneDsxTraps=zhoneDsxTraps, zhoneChanMappedIfIndex=zhoneChanMappedIfIndex, zhoneTotalLCVs=zhoneTotalLCVs, zhoneIntervalIndex=zhoneIntervalIndex, zhoneFarEndCurrentDMs=zhoneFarEndCurrentDMs, zhoneDs1Entry=zhoneDs1Entry, zhoneIntervalLCVs=zhoneIntervalLCVs, zhoneDs1FarEndTotalEntry=zhoneDs1FarEndTotalEntry, zhoneTotalBESs=zhoneTotalBESs, zhoneDs1FarEndIntervalEntry=zhoneDs1FarEndIntervalEntry, zhoneLineStatus=zhoneLineStatus, zhoneIntervalDMs=zhoneIntervalDMs, zhoneFarEndCurrentIndex=zhoneFarEndCurrentIndex, zhoneDs1FarEndTotalTable=zhoneDs1FarEndTotalTable, zhoneDs1BertResultsTable=zhoneDs1BertResultsTable, zhoneFarEndTotalIndex=zhoneFarEndTotalIndex, zhoneDs1TxClockAdaptiveQuality=zhoneDs1TxClockAdaptiveQuality, zhoneDs1Mode=zhoneDs1Mode, zhoneDs1CurrentTable=zhoneDs1CurrentTable, zhoneTotalLESs=zhoneTotalLESs, zhoneDs1IntervalTable=zhoneDs1IntervalTable, zhoneFarEndValidIntervals=zhoneFarEndValidIntervals, zhoneFarEndCurrentCSSs=zhoneFarEndCurrentCSSs, zhoneFarEndIntervalESs=zhoneFarEndIntervalESs, zhoneDs1BertTable=zhoneDs1BertTable, zhoneIntervalUASs=zhoneIntervalUASs, zhoneCurrentUASs=zhoneCurrentUASs, zhoneDs1BertResultsEntry=zhoneDs1BertResultsEntry, zhoneIntervalBESs=zhoneIntervalBESs, zhoneLineType=zhoneLineType, zhoneFarEndTotalBESs=zhoneFarEndTotalBESs, zhoneTotalPCVs=zhoneTotalPCVs, zhoneBertTestDuration=zhoneBertTestDuration, zhoneCurrentLESs=zhoneCurrentLESs, zhoneFarEndCurrentPCVs=zhoneFarEndCurrentPCVs, zhoneFarEndIntervalCSSs=zhoneFarEndIntervalCSSs, zhoneFarEndTotalESs=zhoneFarEndTotalESs, zhoneDs1Table=zhoneDs1Table, zhoneCsuLineLength=zhoneCsuLineLength, zhoneBertRequest=zhoneBertRequest, zhoneTotalSESs=zhoneTotalSESs, zhoneFarEndInvalidIntervals=zhoneFarEndInvalidIntervals, zhoneSendCode=zhoneSendCode, zhoneCellScramble=zhoneCellScramble, zhoneBertOutOfSynchSeconds=zhoneBertOutOfSynchSeconds, zhoneLineStatusChange=zhoneLineStatusChange, zhoneDs1TotalEntry=zhoneDs1TotalEntry, zhoneTotalIndex=zhoneTotalIndex, zhoneFarEndCurrentSESs=zhoneFarEndCurrentSESs, zhoneFarEndIntervalPCVs=zhoneFarEndIntervalPCVs, zhoneFarEndIntervalSEFSs=zhoneFarEndIntervalSEFSs, zhoneDsxTrapsV2=zhoneDsxTrapsV2, zhoneCurrentCSSs=zhoneCurrentCSSs, zhoneIntervalNumber=zhoneIntervalNumber, zhoneTimeElapsed=zhoneTimeElapsed, zhoneValidIntervals=zhoneValidIntervals, zhoneDs1ProtocolEmulation=zhoneDs1ProtocolEmulation, zhoneFarEndTotalDMs=zhoneFarEndTotalDMs, PYSNMP_MODULE_ID=zhoneDs1Mib, zhoneTotalCSSs=zhoneTotalCSSs, zhoneFdl=zhoneFdl, zhoneCurrentIndex=zhoneCurrentIndex, zhoneBertIndex=zhoneBertIndex, zhoneLoopbackConfig=zhoneLoopbackConfig, zhoneFarEndIntervalDMs=zhoneFarEndIntervalDMs, zhoneBertStatus=zhoneBertStatus, zhoneDs1BertEntry=zhoneDs1BertEntry, zhoneFarEndTotalSESs=zhoneFarEndTotalSESs, zhoneChanMappingTable=zhoneChanMappingTable, zhoneBertErrors=zhoneBertErrors, zhoneFarEndCurrentUASs=zhoneFarEndCurrentUASs, zhoneTotalSEFSs=zhoneTotalSEFSs, zhoneFarEndIntervalBESs=zhoneFarEndIntervalBESs, zhoneFarEndIntervalLESs=zhoneFarEndIntervalLESs, zhoneFarEndIntervalUASs=zhoneFarEndIntervalUASs, zhoneFarEndCurrentSEFSs=zhoneFarEndCurrentSEFSs, zhoneDs1TotalTable=zhoneDs1TotalTable, zhoneCircuitIdentifier=zhoneCircuitIdentifier, zhoneDs1SignalType=zhoneDs1SignalType, zhoneFarEndCurrentESs=zhoneFarEndCurrentESs, zhoneCurrentPCVs=zhoneCurrentPCVs, zhoneFarEndTotalSEFSs=zhoneFarEndTotalSEFSs, zhoneTransmitClockSource=zhoneTransmitClockSource, zhoneIntervalPCVs=zhoneIntervalPCVs, zhoneDs1CurrentEntry=zhoneDs1CurrentEntry, zhoneFarEndTotalCSSs=zhoneFarEndTotalCSSs, zhoneChannelization=zhoneChannelization, zhoneLineCoding=zhoneLineCoding, zhoneDs1LinePower=zhoneDs1LinePower, zhoneDs1GroupIndex=zhoneDs1GroupIndex, zhoneBertLoopUp=zhoneBertLoopUp, zhoneDs1ChannelNumber=zhoneDs1ChannelNumber, zhoneFarEndCurrentLESs=zhoneFarEndCurrentLESs, zhoneTotalESs=zhoneTotalESs, zhoneCurrentBESs=zhoneCurrentBESs, zhoneIntervalSEFSs=zhoneIntervalSEFSs, zhoneBertErroredSeconds=zhoneBertErroredSeconds, zhoneFarEndTotalPCVs=zhoneFarEndTotalPCVs, zhoneFarEndTotalUASs=zhoneFarEndTotalUASs, zhoneBertType=zhoneBertType, zhoneSignalMode=zhoneSignalMode, zhoneTotalUASs=zhoneTotalUASs, zhoneDs1Mib=zhoneDs1Mib, zhoneFarEndTimeElapsed=zhoneFarEndTimeElapsed, zhoneFarEndIntervalIndex=zhoneFarEndIntervalIndex, zhoneDs1IntervalEntry=zhoneDs1IntervalEntry, zhoneFarEndIntervalSESs=zhoneFarEndIntervalSESs, zhoneLineIndex=zhoneLineIndex, zhoneCurrentESs=zhoneCurrentESs, zhoneDs1FarEndCurrentEntry=zhoneDs1FarEndCurrentEntry, zhoneFarEndIntervalNumber=zhoneFarEndIntervalNumber, zhoneFarEndTotalLESs=zhoneFarEndTotalLESs, zhoneCurrentSESs=zhoneCurrentSESs, zhoneCurrentLCVs=zhoneCurrentLCVs, zhoneIntervalLESs=zhoneIntervalLESs, zhoneIntervalSESs=zhoneIntervalSESs, zhoneCurrentDMs=zhoneCurrentDMs, zhoneLineStatusLastChange=zhoneLineStatusLastChange, zhoneBertInterfaceIndex=zhoneBertInterfaceIndex, zhoneLoopbackStatus=zhoneLoopbackStatus, zhoneChanMappingEntry=zhoneChanMappingEntry, zhoneIntervalValidData=zhoneIntervalValidData, zhoneInvalidIntervals=zhoneInvalidIntervals, zhoneIntervalESs=zhoneIntervalESs, zhoneDsxLineLength=zhoneDsxLineLength, zhoneDs1TxClockRecovery=zhoneDs1TxClockRecovery, zhoneClockSourceEligibility=zhoneClockSourceEligibility, zhoneCurrentSEFSs=zhoneCurrentSEFSs)
