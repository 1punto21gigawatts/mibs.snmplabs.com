#
# PySNMP MIB module WLSX-POE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-POE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, TimeTicks, ModuleIdentity, ObjectIdentity, NotificationType, iso, Gauge32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "NotificationType", "iso", "Gauge32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Counter32", "MibIdentifier")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
wlsxPoEMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18))
wlsxPoEMIB.setRevisions(('2011-05-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxPoEMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxPoEMIB.setLastUpdated('201105160000Z')
if mibBuilder.loadTexts: wlsxPoEMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxPoEMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxPoEMIB.setDescription('This MIB module defines MIB objects which provide information about the Power Sourcing Equipment(PSE) and Powered Device(PD). The following abbreviations are defined in [IEEE-802.3af] and will be used with the same significance in this document: PSE - Power Sourcing Equipment; PD - Powered Device;')
wlsxPoEMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 0))
wlsxPoEMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1))
wlsxPoEMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 2))
wlsxPoEMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 2, 1))
wlsxPoEMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 2, 2))
wlsxPsePortTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1), )
if mibBuilder.loadTexts: wlsxPsePortTable.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortTable.setDescription('A table of objects that display the parameters configured for a power ethernet port.')
wlsxPsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1), ).setIndexNames((0, "WLSX-POE-MIB", "wlsxPsePortIndex"))
if mibBuilder.loadTexts: wlsxPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortEntry.setDescription('A set of objects that display the configuration of a power ethernet port.')
wlsxPsePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: wlsxPsePortIndex.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortIndex.setDescription('This variable uniquely identifies the power ethernet port for which this entry is populated.')
wlsxPsePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortAdminStatus.setDescription('Admin status of a power ethernet port. A value of enable(1) means that the port has PSE functions enabled on it. A value of disable(2) means that the port does not support or has disabled PSE functions.')
wlsxPsePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortState.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortState.setDescription('This object indicates the status of the port. The reason for these states is indicated by wlsxPsePortStatus. on(1) - indicates that PSE is sourcing power. off(2) - indicates that PSE is not sourcing power.')
wlsxPsePortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("offAdmin", 2), ("offPowerManagement", 3), ("offIllegalClass", 4), ("offDetectionProgress", 5), ("offHardwareError", 6), ("offNonStandardPd", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortStatus.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortStatus.setDescription('This object indicates the status of the port. unknown(1) - indicates either a state of off with the reason being not known or the state is on. offAdmin(2) - indicates the port is administratively disabled. offPowerManagement(3) - indicates the port is off due to power management. offIllegalClass(4) - indicates the port is off because the PD is of illegal class. offDetectionProgress(5)- indicates the port is off because the PD detection is in progress. offHardwareError(6) - indicates the port is off because of hardware error. offNonStandardPd(7) - indicates the port is off because the PD is a non standard one.')
wlsxPsePortDiscoveryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("ieee", 2), ("cisco", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortDiscoveryMode.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortDiscoveryMode.setDescription('This object indicates the method of discovery used by the system for the detection of the Powered Device(PD). A value of unknown(0) means that the discovery method is unknown on this port. A value of off(1) means that the discovery method is turned off on this port. A value of ieee(2) indicates that the discovery method is IEEE based on this port. A value of cisco(3) indicates that the discovery method is Cisco based on this port.')
wlsxPsePortIsPdDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortIsPdDetected.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortIsPdDetected.setDescription('This object indicates if a Powered Device(PD) is detected on this port.')
wlsxPsePortIsIeeePd = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortIsIeeePd.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortIsIeeePd.setDescription('This object indicates the IEEE compliance of a Powered Device(PD). A value of true(1) means the Powered Device(PD) is IEEE compliant. A value of false(2) means the Powered Device is not IEEE compliant.')
wlsxPsePortPdClass = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknownClass", 0), ("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortPdClass.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortPdClass.setDescription("This object indicates the Power classification of the Powered Device(PD) connected on the port. A value of 'class0(1)' indicates that the power classification of the powered device falls into class 0 in IEEE specifications. A value of 'class1(2)' indicates that the power classification of the powered devices falls into class 1 in IEEE specifications. A value of 'class2(3)' indicates that the power classification of the powered devices falls into class 2 in IEEE specifications. A value of 'class3(4)' indicates that the power classification of the powered devices falls into class 3 in IEEE specifications. A value of 'class4(5)' indicates that the power classification of the powered devices falls into class 4 in IEEE specifications.")
wlsxPsePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("high", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortPriority.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortPriority.setDescription('This object indicates the configured priority for this port. low(1) - indicates the priority of the port is low. high(2) - indicates the priority of the port is high. critical(3) - indicates the priority of the port is critical.')
wlsxPsePortDefaultPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 10), Integer32()).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortDefaultPowerMax.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortDefaultPowerMax.setDescription('This object indicates the default maximum power available on this port.')
wlsxPsePortPowerAllocated = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 11), Integer32()).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortPowerAllocated.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortPowerAllocated.setDescription('This object indicates the configured power allocation on this port.')
wlsxPsePortPowerConsumed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 12), Integer32()).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortPowerConsumed.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortPowerConsumed.setDescription('This object gives the power consumption by the PD on this port.')
wlsxPsePortVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 13), Integer32()).setUnits('milliVolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortVoltage.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortVoltage.setDescription('This object indicates the voltage on this port.')
wlsxPsePortCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 1, 1, 14), Integer32()).setUnits('milliAmps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPsePortCurrent.setStatus('current')
if mibBuilder.loadTexts: wlsxPsePortCurrent.setDescription('This object indicates the current on this port.')
wlsxPseSlotTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 2), )
if mibBuilder.loadTexts: wlsxPseSlotTable.setStatus('current')
if mibBuilder.loadTexts: wlsxPseSlotTable.setDescription('A table of objects that display all the details about the Power Sourcing Equipment(PSE).')
wlsxPseSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 2, 1), ).setIndexNames((0, "WLSX-POE-MIB", "wlsxPseSlotIndex"))
if mibBuilder.loadTexts: wlsxPseSlotEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxPseSlotEntry.setDescription('A set of objects that displays all the information about the PSE on this device on a per slot basis.')
wlsxPseSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: wlsxPseSlotIndex.setStatus('current')
if mibBuilder.loadTexts: wlsxPseSlotIndex.setDescription('This object uniquely identifies a PSE entry.')
wlsxPseSlotPowerAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 2, 1, 2), Integer32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPseSlotPowerAvailable.setStatus('current')
if mibBuilder.loadTexts: wlsxPseSlotPowerAvailable.setDescription('This object indicates the total amount of power available from this PSE.')
wlsxPseSlotPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 2, 1, 3), Integer32()).setUnits('watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPseSlotPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: wlsxPseSlotPowerConsumption.setDescription('This object indicates the total amount of power consumed from this PSE.')
wlsxPseSlotGuardBand = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPseSlotGuardBand.setStatus('current')
if mibBuilder.loadTexts: wlsxPseSlotGuardBand.setDescription('This object indicates the power left unused to be provided in case of spikes in the amount of power used.')
wlsxPseSlotPoEManagementMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2), ("class", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxPseSlotPoEManagementMode.setStatus('current')
if mibBuilder.loadTexts: wlsxPseSlotPoEManagementMode.setDescription('This object indicates the PSE management mode. A value of dynamic(1) indicates that it is dynamic power management. A value of static(2) indicates that it is static power management. A value of class(3) indicates that it is a Class based power management.')
wlsxTrapInterfacePoEState = NotificationType((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 0, 1)).setObjects(("WLSX-POE-MIB", "wlsxPsePortIndex"), ("WLSX-POE-MIB", "wlsxPsePortState"), ("WLSX-POE-MIB", "wlsxPsePortStatus"))
if mibBuilder.loadTexts: wlsxTrapInterfacePoEState.setStatus('current')
if mibBuilder.loadTexts: wlsxTrapInterfacePoEState.setDescription('When there is a PoE state transition i.e on or off then this trap is sent to the management entity')
wlsxPoEMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 2, 1, 1)).setObjects(("WLSX-POE-MIB", "wlsxPoEMIBPortGroup"), ("WLSX-POE-MIB", "wlsxPoEMIBMainPseGroup"), ("WLSX-POE-MIB", "wlsxPoEMIBNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wlsxPoEMIBCompliance = wlsxPoEMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: wlsxPoEMIBCompliance.setDescription('This is the statement of compliance.')
wlsxPoEMIBPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 2, 2, 1)).setObjects(("WLSX-POE-MIB", "wlsxPsePortAdminStatus"), ("WLSX-POE-MIB", "wlsxPsePortState"), ("WLSX-POE-MIB", "wlsxPsePortStatus"), ("WLSX-POE-MIB", "wlsxPsePortDiscoveryMode"), ("WLSX-POE-MIB", "wlsxPsePortIsPdDetected"), ("WLSX-POE-MIB", "wlsxPsePortIsIeeePd"), ("WLSX-POE-MIB", "wlsxPsePortPdClass"), ("WLSX-POE-MIB", "wlsxPsePortPriority"), ("WLSX-POE-MIB", "wlsxPsePortDefaultPowerMax"), ("WLSX-POE-MIB", "wlsxPsePortPowerAllocated"), ("WLSX-POE-MIB", "wlsxPsePortPowerConsumed"), ("WLSX-POE-MIB", "wlsxPsePortVoltage"), ("WLSX-POE-MIB", "wlsxPsePortCurrent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wlsxPoEMIBPortGroup = wlsxPoEMIBPortGroup.setStatus('current')
if mibBuilder.loadTexts: wlsxPoEMIBPortGroup.setDescription('This group provides the details of all the Power ethernet ports on the device.')
wlsxPoEMIBMainPseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 2, 2, 2)).setObjects(("WLSX-POE-MIB", "wlsxPseSlotPowerAvailable"), ("WLSX-POE-MIB", "wlsxPseSlotPowerConsumption"), ("WLSX-POE-MIB", "wlsxPseSlotGuardBand"), ("WLSX-POE-MIB", "wlsxPseSlotPoEManagementMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wlsxPoEMIBMainPseGroup = wlsxPoEMIBMainPseGroup.setStatus('current')
if mibBuilder.loadTexts: wlsxPoEMIBMainPseGroup.setDescription('This group provides the details of the PSE entry.')
wlsxPoEMIBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 18, 2, 2, 3)).setObjects(("WLSX-POE-MIB", "wlsxTrapInterfacePoEState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wlsxPoEMIBNotificationsGroup = wlsxPoEMIBNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: wlsxPoEMIBNotificationsGroup.setDescription('This group gives the collection of Notifications related to power consumption on an port.')
mibBuilder.exportSymbols("WLSX-POE-MIB", wlsxPsePortCurrent=wlsxPsePortCurrent, wlsxPseSlotPoEManagementMode=wlsxPseSlotPoEManagementMode, wlsxPoEMIBGroups=wlsxPoEMIBGroups, wlsxPseSlotPowerConsumption=wlsxPseSlotPowerConsumption, wlsxPseSlotTable=wlsxPseSlotTable, wlsxPoEMIBPortGroup=wlsxPoEMIBPortGroup, wlsxPoEMIBMainPseGroup=wlsxPoEMIBMainPseGroup, wlsxPsePortDefaultPowerMax=wlsxPsePortDefaultPowerMax, PYSNMP_MODULE_ID=wlsxPoEMIB, wlsxPsePortAdminStatus=wlsxPsePortAdminStatus, wlsxPsePortPdClass=wlsxPsePortPdClass, wlsxPseSlotGuardBand=wlsxPseSlotGuardBand, wlsxPsePortPowerAllocated=wlsxPsePortPowerAllocated, wlsxPoEMIBCompliances=wlsxPoEMIBCompliances, wlsxPsePortDiscoveryMode=wlsxPsePortDiscoveryMode, wlsxPoEMIBConformance=wlsxPoEMIBConformance, wlsxPsePortEntry=wlsxPsePortEntry, wlsxPoEMIBNotificationsGroup=wlsxPoEMIBNotificationsGroup, wlsxPsePortIsIeeePd=wlsxPsePortIsIeeePd, wlsxPoEMIBObjects=wlsxPoEMIBObjects, wlsxPoEMIB=wlsxPoEMIB, wlsxPsePortStatus=wlsxPsePortStatus, wlsxPsePortVoltage=wlsxPsePortVoltage, wlsxPsePortIsPdDetected=wlsxPsePortIsPdDetected, wlsxPseSlotEntry=wlsxPseSlotEntry, wlsxPseSlotPowerAvailable=wlsxPseSlotPowerAvailable, wlsxTrapInterfacePoEState=wlsxTrapInterfacePoEState, wlsxPsePortPowerConsumed=wlsxPsePortPowerConsumed, wlsxPsePortPriority=wlsxPsePortPriority, wlsxPoEMIBCompliance=wlsxPoEMIBCompliance, wlsxPoEMIBNotifications=wlsxPoEMIBNotifications, wlsxPsePortTable=wlsxPsePortTable, wlsxPsePortIndex=wlsxPsePortIndex, wlsxPseSlotIndex=wlsxPseSlotIndex, wlsxPsePortState=wlsxPsePortState)
