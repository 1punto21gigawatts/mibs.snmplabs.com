#
# PySNMP MIB module E7-Calix-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/E7-Calix-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:58:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
e7Modules, e7 = mibBuilder.importSymbols("CALIX-PRODUCT-MIB", "e7Modules", "e7")
E7PowerLevel, E7SnmpVers, E7CardType, E7AdminStatus = mibBuilder.importSymbols("E7-TC", "E7PowerLevel", "E7SnmpVers", "E7CardType", "E7AdminStatus")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, IpAddress, MibIdentifier, TimeTicks, Counter32, mib_2, NotificationType, ModuleIdentity, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "TimeTicks", "Counter32", "mib-2", "NotificationType", "ModuleIdentity", "Unsigned32", "Integer32")
TextualConvention, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "MacAddress")
e7ResourceModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 1, 1))
if mibBuilder.loadTexts: e7ResourceModule.setLastUpdated('201304030000Z')
if mibBuilder.loadTexts: e7ResourceModule.setOrganization('Calix Network, Inc.')
if mibBuilder.loadTexts: e7ResourceModule.setContactInfo(' Calix Networks, Inc. Postal: 1035 North McDowell Boulevard Petaluma, CA 94954-1173 USA Phone: +1 707 766 3000 Fax: +1 707 766 3100 E-mail: tech.support@calix.com')
if mibBuilder.loadTexts: e7ResourceModule.setDescription('Top-level infrastructure for the Calix E7, E5-400, and E5-312 products, except for Fault Management.')
e7Resource = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2))
e7NodeResource = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1))
e7CardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6))
e7SystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7))
e7TrapDestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8))
e7PortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9))
e7CardTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1), )
if mibBuilder.loadTexts: e7CardTable.setStatus('current')
if mibBuilder.loadTexts: e7CardTable.setDescription('Contains Card entries')
e7CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1), ).setIndexNames((0, "E7-Calix-MIB", "e7CardBank"), (0, "E7-Calix-MIB", "e7CardIndex"))
if mibBuilder.loadTexts: e7CardEntry.setStatus('current')
if mibBuilder.loadTexts: e7CardEntry.setDescription('List of attributes related to Card')
e7CardBank = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: e7CardBank.setStatus('current')
if mibBuilder.loadTexts: e7CardBank.setDescription('Bank number')
e7CardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: e7CardIndex.setStatus('current')
if mibBuilder.loadTexts: e7CardIndex.setDescription('Slot number')
e7CardRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7CardRowStatus.setStatus('current')
if mibBuilder.loadTexts: e7CardRowStatus.setDescription('Controls creation & deletion of table entries. Only active(get), createAndGo(set), and destroy(set) are supported.')
e7CardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 4), E7AdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7CardAdminStatus.setStatus('current')
if mibBuilder.loadTexts: e7CardAdminStatus.setDescription('Administrative status')
e7CardProvType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 5), E7CardType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7CardProvType.setStatus('current')
if mibBuilder.loadTexts: e7CardProvType.setDescription('Provisioned card type')
e7CardActualType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 6), E7CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardActualType.setStatus('current')
if mibBuilder.loadTexts: e7CardActualType.setDescription('Actual card type')
e7CardSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: e7CardSoftwareVersion.setDescription('Running software version, dotted string notation')
e7CardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: e7CardSerialNumber.setDescription('Ascii Serial number for card')
e7CardCurrentPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 9), E7PowerLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardCurrentPowerLevel.setStatus('current')
if mibBuilder.loadTexts: e7CardCurrentPowerLevel.setDescription('Current power level for card')
e7CardCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardCleiCode.setStatus('current')
if mibBuilder.loadTexts: e7CardCleiCode.setDescription('Ascii CLEI code for card')
e7CardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardPartNumber.setStatus('current')
if mibBuilder.loadTexts: e7CardPartNumber.setDescription('Ascii part number')
e7CardStartMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardStartMacRange.setStatus('current')
if mibBuilder.loadTexts: e7CardStartMacRange.setDescription('Start of MAC range (ascii)')
e7CardEndMacRange = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardEndMacRange.setStatus('current')
if mibBuilder.loadTexts: e7CardEndMacRange.setDescription('End of MAC range (ascii)')
e7CardHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: e7CardHardwareRevision.setDescription('Hardware revision, dotted string notation')
e7CardTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7CardTableEnd.setStatus('current')
if mibBuilder.loadTexts: e7CardTableEnd.setDescription('denotes the end of the e7CardTable (for getnext)')
e7SystemId = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemId.setStatus('current')
if mibBuilder.loadTexts: e7SystemId.setDescription('Unique name of the system')
e7SystemLocation = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemLocation.setStatus('current')
if mibBuilder.loadTexts: e7SystemLocation.setDescription('Location of the system')
e7SystemAutoUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemAutoUpgrade.setStatus('current')
if mibBuilder.loadTexts: e7SystemAutoUpgrade.setDescription('Auto upgrade out-of-rev cards on arrival')
e7SystemTelnetServer = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemTelnetServer.setStatus('current')
if mibBuilder.loadTexts: e7SystemTelnetServer.setDescription('Enable CLI access via telnet (in addition to ssh)')
e7SystemUnsecuredWeb = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemUnsecuredWeb.setStatus('current')
if mibBuilder.loadTexts: e7SystemUnsecuredWeb.setDescription('Enable unsecured web-access (non-ssh)')
e7SystemPasswordExpiry = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemPasswordExpiry.setStatus('current')
if mibBuilder.loadTexts: e7SystemPasswordExpiry.setDescription('Craft user password expiry, in days')
e7SystemDnsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemDnsPrimary.setStatus('current')
if mibBuilder.loadTexts: e7SystemDnsPrimary.setDescription('IP address of primary DNS server')
e7SystemDnsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemDnsSecondary.setStatus('current')
if mibBuilder.loadTexts: e7SystemDnsSecondary.setDescription('IP address of secondary DNS server')
e7SystemTimezone = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 9), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemTimezone.setStatus('current')
if mibBuilder.loadTexts: e7SystemTimezone.setDescription('Timezone for system')
e7SystemChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: e7SystemChassisSerialNumber.setDescription('Chassis serial number')
e7SystemChassisMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 11), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemChassisMacAddress.setStatus('current')
if mibBuilder.loadTexts: e7SystemChassisMacAddress.setDescription('Chassis MAC address')
e7SystemTime = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemTime.setStatus('current')
if mibBuilder.loadTexts: e7SystemTime.setDescription('system time')
e7SystemDate = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 7, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7SystemDate.setStatus('current')
if mibBuilder.loadTexts: e7SystemDate.setDescription('system date')
e7TrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1), )
if mibBuilder.loadTexts: e7TrapDestTable.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestTable.setDescription('Contains SNMP Trap Dest entries')
e7TrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1), ).setIndexNames((0, "E7-Calix-MIB", "e7TrapDestIndex"))
if mibBuilder.loadTexts: e7TrapDestEntry.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestEntry.setDescription('List of attributes related to SNMP Trap Dest')
e7TrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: e7TrapDestIndex.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestIndex.setDescription('trap index')
e7TrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7TrapDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestRowStatus.setDescription('Controls creation & deletion of table entries. Only active(get), createAndGo(set), and destroy(set) are supported.')
e7TrapDestAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 3), E7AdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7TrapDestAdminStatus.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestAdminStatus.setDescription('Administrative status')
e7TrapDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7TrapDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestIpAddress.setDescription('destination IP address')
e7TrapDestPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7TrapDestPortNumber.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestPortNumber.setDescription('destination UDP port number')
e7TrapDestSnmpVers = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 6), E7SnmpVers()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7TrapDestSnmpVers.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestSnmpVers.setDescription('v2c or v3 trap type')
e7TrapDestV3User = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 7), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7TrapDestV3User.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestV3User.setDescription('user used in v3 traps')
e7TrapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 8, 1, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7TrapDestCommunity.setStatus('current')
if mibBuilder.loadTexts: e7TrapDestCommunity.setDescription('community string used in v2c traps')
e7VdslPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1))
e7VdslPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1), )
if mibBuilder.loadTexts: e7VdslPortTable.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortTable.setDescription('Contains Vdsl port entries')
e7VdslPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: e7VdslPortEntry.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortEntry.setDescription('List of attributes related to Vdsl Port entries')
e7VdslPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortRowStatus.setDescription('Controls creation & deletion of table entries. Only active(get), createAndGo(set), and destroy(set) are supported.')
e7VdslPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1, 1, 2), E7AdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortAdminStatus.setDescription('Administrative status')
e7VdslPortCurrTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPortCurrTxRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCurrTxRate.setDescription('Actual transmit data rate this port ')
e7VdslPortCurrRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPortCurrRxRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCurrRxRate.setDescription('Actual receive data rate this port ')
e7VdslPortStatsProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("vdsl8a", 2), ("vdsl8b", 3), ("vdsl8c", 4), ("vdsl8d", 5), ("vdsl12a", 6), ("vdsl12b", 7), ("vdsl17a", 8), ("gdmt", 9), ("glite", 10), ("adsl2", 11), ("adsl2plus", 12), ("t1413", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslPortStatsProtocol.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortStatsProtocol.setDescription('Administrative status')
e7VdslPortLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("idleNotConfigured", 1), ("idleConfigured", 2), ("initialization", 3), ("training", 4), ("showtime", 5), ("showtimeL2", 6), ("ldInit", 7), ("ldFetch", 8), ("ldDone", 9), ("ldFailed", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslPortLineState.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortLineState.setDescription('Line operational status')
e7VdslRateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 2), )
if mibBuilder.loadTexts: e7VdslRateTable.setStatus('current')
if mibBuilder.loadTexts: e7VdslRateTable.setDescription('Contains Vdsl data rate entries')
e7VdslRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: e7VdslRateEntry.setStatus('current')
if mibBuilder.loadTexts: e7VdslRateEntry.setDescription('List of attributes related to Vdsl Rate entries')
e7VdslRateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslRateRowStatus.setStatus('current')
if mibBuilder.loadTexts: e7VdslRateRowStatus.setDescription('Controls creation & deletion of table entries. Only active(get), createAndGo(set), and destroy(set) are supported.')
e7VdslRateAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 2, 1, 2), E7AdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslRateAdminStatus.setStatus('current')
if mibBuilder.loadTexts: e7VdslRateAdminStatus.setDescription('Administrative status')
e7VdslRateProvDataRateUs = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslRateProvDataRateUs.setStatus('current')
if mibBuilder.loadTexts: e7VdslRateProvDataRateUs.setDescription('Provisioned data rate upstream ')
e7VdslRateProvDataRateDs = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslRateProvDataRateDs.setStatus('current')
if mibBuilder.loadTexts: e7VdslRateProvDataRateDs.setDescription('Provisioned data rate downstream ')
e7VdslPhysTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3), )
if mibBuilder.loadTexts: e7VdslPhysTable.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysTable.setDescription('Contains Vdsl physical entries')
e7VdslPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E7-Calix-MIB", "e7VdslPhysSide"))
if mibBuilder.loadTexts: e7VdslPhysEntry.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysEntry.setDescription('List of attributes related to Vdsl physical entries')
e7VdslPhysSide = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("downstream", 1), ("upstream", 2))))
if mibBuilder.loadTexts: e7VdslPhysSide.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysSide.setDescription('Identifies whether the transceiver is downstream or upstream.')
e7VdslPhysCurrSnrMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-640, 630))).setUnits('0.1dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPhysCurrSnrMargin.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysCurrSnrMargin.setDescription('Noise Margin as seen by this Vtu with respect to its received signal. ')
e7VdslPhysCurrAtn = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1280))).setUnits('0.1dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPhysCurrAtn.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysCurrAtn.setDescription('Measured difference in the total power transmitted by the peer Vtu and the total power received by this Vtu.')
e7VdslPhysCurrOutputPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-310, 310))).setUnits('0.1dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPhysCurrOutputPwr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysCurrOutputPwr.setDescription('Measured total output power transmitted by this VTU. This is the measurement that was reported during the last activation sequence.')
e7VdslPhysInterleaveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPhysInterleaveDelay.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysInterleaveDelay.setDescription('Actual interleaving delay (in milliseconds).')
e7VdslPhysImpulseNoiseProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1, 6), Integer32()).setUnits('0.1 symbol').setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPhysImpulseNoiseProtection.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysImpulseNoiseProtection.setDescription('Actual impulse noise protection.')
e7VdslPhysTransmissionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("t1413", 1), ("vdsl2a", 2), ("gdmt", 3), ("adsl2m", 4), ("adsl2plusm", 5), ("glite", 6), ("vdsl2b", 7), ("vdsl2c", 8), ("vdsl2", 9), ("readsl12", 10), ("adsl2plus", 11), ("adsl2", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPhysTransmissionMode.setStatus('current')
if mibBuilder.loadTexts: e7VdslPhysTransmissionMode.setDescription('Actual transmission mode.')
e7VdslPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4), )
if mibBuilder.loadTexts: e7VdslPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTable.setDescription('Contains Vdsl port configuration entries')
e7VdslPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: e7VdslPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgEntry.setDescription('List of attributes related to Vdsl Port configuration entries')
e7VdslPortCfgServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("mm", 2), ("mm2plus", 3), ("t1413", 4), ("gdmt", 5), ("glite", 6), ("adsl2", 7), ("adsl2plus", 8), ("readsl2", 9), ("annexm", 10), ("vdsl2", 11), ("vdsl2mm", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgServiceType.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgServiceType.setDescription('VDSL port configured service type. ')
e7VdslPortCfgPathLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("fast", 1), ("interleaved", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgPathLatency.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgPathLatency.setDescription('VDSL port configured latency. ')
e7VdslPortCfgVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("vdsl8a", 2), ("vdsl8b", 3), ("vdsl8c", 4), ("vdsl8d", 5), ("vdsl12a", 6), ("vdsl12b", 7), ("vdsl17a", 8), ("vdsl30a", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgVdslProfile.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgVdslProfile.setDescription('VDSL port configured profile. ')
e7VdslPortCfgDsMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgDsMinRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgDsMinRate.setDescription('VDSL port configured downstream minimum rate. ')
e7VdslPortCfgDsMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgDsMaxRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgDsMaxRate.setDescription('VDSL port configured downstream maximum rate. ')
e7VdslPortCfgUsMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgUsMinRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgUsMinRate.setDescription('VDSL port configured upstream minimum rate. ')
e7VdslPortCfgUsMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgUsMaxRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgUsMaxRate.setDescription('VDSL port configured upstream maximum rate. ')
e7VdslPortCfgDsMinInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("invalid", 0), ("none", 1), ("halfSym", 2), ("oneSym", 3), ("twoSym", 4), ("threeSym", 5), ("fourSym", 6), ("fiveSym", 7), ("sixSym", 8), ("sevenSym", 9), ("eightSym", 10), ("nineSym", 11), ("tenSym", 12), ("elevenSym", 13), ("twelveSym", 14), ("thirteenSym", 15), ("fourteenSym", 16), ("fifteenSym", 17), ("sixteenSym", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgDsMinInp.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgDsMinInp.setDescription('VDSL port configured downstream minimum impulse noise protection. ')
e7VdslPortCfgUsMinInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("invalid", 0), ("none", 1), ("halfSym", 2), ("oneSym", 3), ("twoSym", 4), ("threeSym", 5), ("fourSym", 6), ("fiveSym", 7), ("sixSym", 8), ("sevenSym", 9), ("eightSym", 10), ("nineSym", 11), ("tenSym", 12), ("elevenSym", 13), ("twelveSym", 14), ("thirteenSym", 15), ("fourteenSym", 16), ("fifteenSym", 17), ("sixteenSym", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgUsMinInp.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgUsMinInp.setDescription('VDSL port configured upstream minimum impulse noise protection. ')
e7VdslPortCfgDsInterleaveMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgDsInterleaveMaxLatency.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgDsInterleaveMaxLatency.setDescription("VDSL port configured downstream interleave maximum latency. A value of 0x7FFFFFFF (2147483647) indicates the setting equal to 'auto'. ")
e7VdslPortCfgUsInterleaveMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgUsInterleaveMaxLatency.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgUsInterleaveMaxLatency.setDescription('VDSL port configured upstream interleave maximum latency. ')
e7VdslPortCfgDsMinSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 12), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgDsMinSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgDsMinSnr.setDescription('VDSL port configured downstream minimum SNR. ')
e7VdslPortCfgDsMaxSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 13), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgDsMaxSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgDsMaxSnr.setDescription('VDSL port configured downstream maximum SNR. ')
e7VdslPortCfgDsTargetSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 14), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgDsTargetSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgDsTargetSnr.setDescription('VDSL port configured downstream target SNR. ')
e7VdslPortCfgUsMinSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgUsMinSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgUsMinSnr.setDescription('VDSL port configured upstream minimum SNR. ')
e7VdslPortCfgUsMaxSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 16), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgUsMaxSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgUsMaxSnr.setDescription('VDSL port configured upstream maximum SNR. ')
e7VdslPortCfgUsTargetSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgUsTargetSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgUsTargetSnr.setDescription('VDSL port configured upstream target SNR. ')
e7VdslPortCfgPsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))).clone(namedValues=NamedValues(("anus0", 1), ("aeu32", 2), ("aeu36", 3), ("aeu40", 4), ("aeu44", 5), ("aeu48", 6), ("aeu52", 7), ("aeu56", 8), ("aeu60", 9), ("aeu64", 10), ("aeu128", 11), ("aadlu32", 12), ("aadlu36", 13), ("aadlu40", 14), ("aadlu44", 15), ("aadlu48", 16), ("aadlu52", 17), ("aadlu56", 18), ("aadlu60", 19), ("aadlu64", 20), ("aadlu128", 21), ("b81", 22), ("b82", 23), ("b83", 24), ("b84", 25), ("b85", 26), ("b86", 27), ("b87", 28), ("b88", 29), ("b89", 30), ("b810", 31), ("b811", 32), ("b812", 33), ("b813", 34), ("b814", 35), ("b815", 36), ("b816", 37), ("b71", 38), ("b72", 39), ("b73", 40), ("b74", 41), ("b75", 42), ("b76", 43), ("b77", 44), ("b78", 45), ("b79", 46), ("b710", 47), ("c138b", 48), ("c276b", 49), ("c138co", 50), ("c276co", 51), ("ctcmisdn", 52), ("vdsl1qamcompatible", 53)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgPsdMask.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgPsdMask.setDescription('VDSL port configured PSD mask. ')
e7VdslPortCfgLastTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 4, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslPortCfgLastTemplate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgLastTemplate.setDescription('VDSL port configured last template name. ')
e7VdslPortCfgTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5), )
if mibBuilder.loadTexts: e7VdslPortCfgTemplateTable.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateTable.setDescription('Contains Vdsl port configuration template entries')
e7VdslPortCfgTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1), ).setIndexNames((0, "E7-Calix-MIB", "e7VdslPortCfgTemplateIndex"))
if mibBuilder.loadTexts: e7VdslPortCfgTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateEntry.setDescription('List of attributes related to Vdsl Port configuration template entries')
e7VdslPortCfgTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateIndex.setDescription('VDSL port configured template index. ')
e7VdslPortCfgTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateName.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateName.setDescription('VDSL port configured template name. ')
e7VdslPortCfgTemplateServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("mm", 2), ("mm2plus", 3), ("t1413", 4), ("gdmt", 5), ("glite", 6), ("adsl2", 7), ("adsl2plus", 8), ("readsl2", 9), ("annexm", 10), ("vdsl2", 11), ("vdsl2mm", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateServiceType.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateServiceType.setDescription('VDSL port configured service type. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplatePathLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("fast", 1), ("interleaved", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplatePathLatency.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplatePathLatency.setDescription('VDSL port configured latency. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("auto", 1), ("vdsl8a", 2), ("vdsl8b", 3), ("vdsl8c", 4), ("vdsl8d", 5), ("vdsl12a", 6), ("vdsl12b", 7), ("vdsl17a", 8), ("vdsl30a", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateVdslProfile.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateVdslProfile.setDescription('VDSL port configured profile. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateDsMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMinRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMinRate.setDescription('VDSL port configured downstream minimum rate. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateDsMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMaxRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMaxRate.setDescription('VDSL port configured downstream maximum rate. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateUsMinRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMinRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMinRate.setDescription('VDSL port configured upstream minimum rate. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateUsMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMaxRate.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMaxRate.setDescription('VDSL port configured upstream maximum rate. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateDsMinInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("invalid", 0), ("none", 1), ("halfSym", 2), ("oneSym", 3), ("twoSym", 4), ("threeSym", 5), ("fourSym", 6), ("fiveSym", 7), ("sixSym", 8), ("sevenSym", 9), ("eightSym", 10), ("nineSym", 11), ("tenSym", 12), ("elevenSym", 13), ("twelveSym", 14), ("thirteenSym", 15), ("fourteenSym", 16), ("fifteenSym", 17), ("sixteenSym", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMinInp.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMinInp.setDescription('VDSL port configured downstream minimum impulse noise protection. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateUsMinInp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("invalid", 0), ("none", 1), ("halfSym", 2), ("oneSym", 3), ("twoSym", 4), ("threeSym", 5), ("fourSym", 6), ("fiveSym", 7), ("sixSym", 8), ("sevenSym", 9), ("eightSym", 10), ("nineSym", 11), ("tenSym", 12), ("elevenSym", 13), ("twelveSym", 14), ("thirteenSym", 15), ("fourteenSym", 16), ("fifteenSym", 17), ("sixteenSym", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMinInp.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMinInp.setDescription('VDSL port configured upstream minimum impulse noise protection. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateDsInterleaveMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsInterleaveMaxLatency.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsInterleaveMaxLatency.setDescription("VDSL port configured downstream interleave maximum latency. A value of 0x7FFFFFFF (2147483647) indicates the setting equal to 'auto'. ")
e7VdslPortCfgTemplateUsInterleaveMaxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsInterleaveMaxLatency.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsInterleaveMaxLatency.setDescription('VDSL port configured upstream interleave maximum latency. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateDsMinSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 14), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMinSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMinSnr.setDescription('VDSL port configured downstream minimum SNR. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateDsMaxSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 15), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMaxSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsMaxSnr.setDescription('VDSL port configured downstream maximum SNR. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateDsTargetSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 16), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsTargetSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateDsTargetSnr.setDescription('VDSL port configured downstream target SNR. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateUsMinSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 17), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMinSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMinSnr.setDescription('VDSL port configured upstream minimum SNR. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647). ')
e7VdslPortCfgTemplateUsMaxSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 18), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMaxSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsMaxSnr.setDescription('VDSL port configured upstream maximum SNR. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplateUsTargetSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 19), Integer32()).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsTargetSnr.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplateUsTargetSnr.setDescription('VDSL port configured upstream target SNR. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647).')
e7VdslPortCfgTemplatePsdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))).clone(namedValues=NamedValues(("anus0", 1), ("aeu32", 2), ("aeu36", 3), ("aeu40", 4), ("aeu44", 5), ("aeu48", 6), ("aeu52", 7), ("aeu56", 8), ("aeu60", 9), ("aeu64", 10), ("aeu128", 11), ("aadlu32", 12), ("aadlu36", 13), ("aadlu40", 14), ("aadlu44", 15), ("aadlu48", 16), ("aadlu52", 17), ("aadlu56", 18), ("aadlu60", 19), ("aadlu64", 20), ("aadlu128", 21), ("b81", 22), ("b82", 23), ("b83", 24), ("b84", 25), ("b85", 26), ("b86", 27), ("b87", 28), ("b88", 29), ("b89", 30), ("b810", 31), ("b811", 32), ("b812", 33), ("b813", 34), ("b814", 35), ("b815", 36), ("b816", 37), ("b71", 38), ("b72", 39), ("b73", 40), ("b74", 41), ("b75", 42), ("b76", 43), ("b77", 44), ("b78", 45), ("b79", 46), ("b710", 47), ("c138b", 48), ("c276b", 49), ("c138co", 50), ("c276co", 51), ("ctcmisdn", 52), ("vdsl1qamcompatible", 53)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e7VdslPortCfgTemplatePsdMask.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortCfgTemplatePsdMask.setDescription('VDSL port configured PSD mask. If template attribute is not set, value reported will be 0x7FFFFFFF (2147483647). ')
e7VdslPortPerfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 6), )
if mibBuilder.loadTexts: e7VdslPortPerfIntervalTable.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortPerfIntervalTable.setDescription('Contains Vdsl port performance monitoring entries')
e7VdslPortPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E7-Calix-MIB", "e7VdslPortPerfIntervalPhysSide"), (0, "E7-Calix-MIB", "e7VdslPortPerfIntervalNumber"))
if mibBuilder.loadTexts: e7VdslPortPerfIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortPerfIntervalEntry.setDescription('List of attributes related to Vdsl Port performance monitoring entries')
e7VdslPortPerfIntervalPhysSide = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: e7VdslPortPerfIntervalPhysSide.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortPerfIntervalPhysSide.setDescription('VDSL port performance interval phyical side. ')
e7VdslPortPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: e7VdslPortPerfIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortPerfIntervalNumber.setDescription('VDSL port performance interval number. ')
e7VdslPortPerfIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 2, 2, 1, 9, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e7VdslPortPerfIntervalUAS.setStatus('current')
if mibBuilder.loadTexts: e7VdslPortPerfIntervalUAS.setDescription('VDSL port performance interval unavailable seconds. ')
mibBuilder.exportSymbols("E7-Calix-MIB", e7VdslPortEntry=e7VdslPortEntry, e7TrapDestPortNumber=e7TrapDestPortNumber, e7VdslPortCfgDsInterleaveMaxLatency=e7VdslPortCfgDsInterleaveMaxLatency, e7VdslPortCfgTemplateDsMinRate=e7VdslPortCfgTemplateDsMinRate, e7VdslPortCfgTemplateDsTargetSnr=e7VdslPortCfgTemplateDsTargetSnr, e7CardActualType=e7CardActualType, e7TrapDestEntry=e7TrapDestEntry, e7VdslPortCfgTemplateUsMaxSnr=e7VdslPortCfgTemplateUsMaxSnr, e7VdslPortCfgTemplateUsMinInp=e7VdslPortCfgTemplateUsMinInp, PYSNMP_MODULE_ID=e7ResourceModule, e7VdslPortStatsProtocol=e7VdslPortStatsProtocol, e7VdslPortCfgDsMaxRate=e7VdslPortCfgDsMaxRate, e7VdslPortCfgTemplateVdslProfile=e7VdslPortCfgTemplateVdslProfile, e7VdslPortTable=e7VdslPortTable, e7VdslPhysInterleaveDelay=e7VdslPhysInterleaveDelay, e7VdslPortCfgDsMinRate=e7VdslPortCfgDsMinRate, e7VdslPortCfgTemplateUsMinRate=e7VdslPortCfgTemplateUsMinRate, e7TrapDestV3User=e7TrapDestV3User, e7SystemTime=e7SystemTime, e7CardSerialNumber=e7CardSerialNumber, e7CardAdminStatus=e7CardAdminStatus, e7SystemUnsecuredWeb=e7SystemUnsecuredWeb, e7VdslPhysImpulseNoiseProtection=e7VdslPhysImpulseNoiseProtection, e7VdslPortCfgUsMinRate=e7VdslPortCfgUsMinRate, e7VdslPortCfgUsInterleaveMaxLatency=e7VdslPortCfgUsInterleaveMaxLatency, e7VdslPortCfgTemplateUsInterleaveMaxLatency=e7VdslPortCfgTemplateUsInterleaveMaxLatency, e7CardProvType=e7CardProvType, e7CardCleiCode=e7CardCleiCode, e7VdslPortLineState=e7VdslPortLineState, e7VdslPortCfgVdslProfile=e7VdslPortCfgVdslProfile, e7VdslPortCfgTemplateDsMaxSnr=e7VdslPortCfgTemplateDsMaxSnr, e7TrapDestCommunity=e7TrapDestCommunity, e7VdslPortCfgUsMinInp=e7VdslPortCfgUsMinInp, e7VdslPortCfgDsMinInp=e7VdslPortCfgDsMinInp, e7VdslPortPerfIntervalEntry=e7VdslPortPerfIntervalEntry, e7Resource=e7Resource, e7TrapDestGroup=e7TrapDestGroup, e7VdslPortCurrTxRate=e7VdslPortCurrTxRate, e7VdslPhysTable=e7VdslPhysTable, e7CardTable=e7CardTable, e7VdslPhysEntry=e7VdslPhysEntry, e7CardTableEnd=e7CardTableEnd, e7VdslPortPerfIntervalUAS=e7VdslPortPerfIntervalUAS, e7SystemAutoUpgrade=e7SystemAutoUpgrade, e7VdslRateTable=e7VdslRateTable, e7CardCurrentPowerLevel=e7CardCurrentPowerLevel, e7CardEntry=e7CardEntry, e7SystemChassisMacAddress=e7SystemChassisMacAddress, e7VdslRateAdminStatus=e7VdslRateAdminStatus, e7VdslPortCfgTable=e7VdslPortCfgTable, e7VdslPortCfgServiceType=e7VdslPortCfgServiceType, e7VdslPortCfgUsMinSnr=e7VdslPortCfgUsMinSnr, e7SystemTimezone=e7SystemTimezone, e7SystemTelnetServer=e7SystemTelnetServer, e7VdslPortCfgTemplateDsMaxRate=e7VdslPortCfgTemplateDsMaxRate, e7VdslPortRowStatus=e7VdslPortRowStatus, e7NodeResource=e7NodeResource, e7VdslPhysCurrAtn=e7VdslPhysCurrAtn, e7VdslRateProvDataRateUs=e7VdslRateProvDataRateUs, e7VdslPortCfgDsMinSnr=e7VdslPortCfgDsMinSnr, e7SystemDnsSecondary=e7SystemDnsSecondary, e7VdslPortCurrRxRate=e7VdslPortCurrRxRate, e7VdslPortCfgDsMaxSnr=e7VdslPortCfgDsMaxSnr, e7VdslPortPerfIntervalPhysSide=e7VdslPortPerfIntervalPhysSide, e7CardGroup=e7CardGroup, e7VdslPortCfgTemplateDsMinSnr=e7VdslPortCfgTemplateDsMinSnr, e7VdslPortCfgEntry=e7VdslPortCfgEntry, e7VdslPortAdminStatus=e7VdslPortAdminStatus, e7CardStartMacRange=e7CardStartMacRange, e7VdslPortPerfIntervalTable=e7VdslPortPerfIntervalTable, e7VdslPortCfgPathLatency=e7VdslPortCfgPathLatency, e7CardEndMacRange=e7CardEndMacRange, e7CardBank=e7CardBank, e7CardIndex=e7CardIndex, e7VdslPhysCurrSnrMargin=e7VdslPhysCurrSnrMargin, e7VdslPhysTransmissionMode=e7VdslPhysTransmissionMode, e7VdslPortCfgTemplatePsdMask=e7VdslPortCfgTemplatePsdMask, e7CardPartNumber=e7CardPartNumber, e7VdslPortCfgTemplateDsInterleaveMaxLatency=e7VdslPortCfgTemplateDsInterleaveMaxLatency, e7VdslPortCfgTemplateName=e7VdslPortCfgTemplateName, e7VdslPortCfgUsTargetSnr=e7VdslPortCfgUsTargetSnr, e7TrapDestSnmpVers=e7TrapDestSnmpVers, e7TrapDestIpAddress=e7TrapDestIpAddress, e7VdslPortCfgDsTargetSnr=e7VdslPortCfgDsTargetSnr, e7SystemChassisSerialNumber=e7SystemChassisSerialNumber, e7VdslPhysSide=e7VdslPhysSide, e7TrapDestRowStatus=e7TrapDestRowStatus, e7VdslPortGroup=e7VdslPortGroup, e7SystemDnsPrimary=e7SystemDnsPrimary, e7VdslPortCfgTemplatePathLatency=e7VdslPortCfgTemplatePathLatency, e7VdslRateProvDataRateDs=e7VdslRateProvDataRateDs, e7VdslPortCfgTemplateUsMinSnr=e7VdslPortCfgTemplateUsMinSnr, e7VdslPortCfgPsdMask=e7VdslPortCfgPsdMask, e7TrapDestTable=e7TrapDestTable, e7VdslPortCfgTemplateTable=e7VdslPortCfgTemplateTable, e7VdslPortCfgTemplateUsMaxRate=e7VdslPortCfgTemplateUsMaxRate, e7VdslPortCfgTemplateServiceType=e7VdslPortCfgTemplateServiceType, e7ResourceModule=e7ResourceModule, e7VdslPortCfgTemplateIndex=e7VdslPortCfgTemplateIndex, e7VdslPortPerfIntervalNumber=e7VdslPortPerfIntervalNumber, e7VdslPhysCurrOutputPwr=e7VdslPhysCurrOutputPwr, e7SystemLocation=e7SystemLocation, e7TrapDestIndex=e7TrapDestIndex, e7SystemDate=e7SystemDate, e7SystemPasswordExpiry=e7SystemPasswordExpiry, e7VdslPortCfgTemplateEntry=e7VdslPortCfgTemplateEntry, e7CardSoftwareVersion=e7CardSoftwareVersion, e7TrapDestAdminStatus=e7TrapDestAdminStatus, e7VdslPortCfgUsMaxSnr=e7VdslPortCfgUsMaxSnr, e7VdslPortCfgUsMaxRate=e7VdslPortCfgUsMaxRate, e7VdslRateRowStatus=e7VdslRateRowStatus, e7VdslPortCfgTemplateUsTargetSnr=e7VdslPortCfgTemplateUsTargetSnr, e7VdslRateEntry=e7VdslRateEntry, e7CardRowStatus=e7CardRowStatus, e7PortGroup=e7PortGroup, e7SystemId=e7SystemId, e7SystemGroup=e7SystemGroup, e7CardHardwareRevision=e7CardHardwareRevision, e7VdslPortCfgLastTemplate=e7VdslPortCfgLastTemplate, e7VdslPortCfgTemplateDsMinInp=e7VdslPortCfgTemplateDsMinInp)
