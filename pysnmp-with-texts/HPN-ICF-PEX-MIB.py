#
# PySNMP MIB module HPN-ICF-PEX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-PEX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
entPhysicalDescr, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalDescr", "entPhysicalIndex")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, TimeTicks, IpAddress, NotificationType, ModuleIdentity, MibIdentifier, Integer32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "TimeTicks", "IpAddress", "NotificationType", "ModuleIdentity", "MibIdentifier", "Integer32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "iso")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hpnicfPex = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129))
hpnicfPex.setRevisions(('2012-11-12 11:29',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfPex.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpnicfPex.setLastUpdated('201211121129Z')
if mibBuilder.loadTexts: hpnicfPex.setOrganization('')
if mibBuilder.loadTexts: hpnicfPex.setContactInfo('')
if mibBuilder.loadTexts: hpnicfPex.setDescription('This MIB is used to manage Port Extender (PEX) information. This MIB is applicable to products that support PEX.')
hpnicfPexSpecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 1))
hpnicfPexPortMinId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexPortMinId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortMinId.setDescription('Lowest PEX port ID that can be used to uniquely identify a PEX port.')
hpnicfPexPortMaxId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexPortMaxId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortMaxId.setDescription('Highest PEX port ID that can be used to uniquely identify a PEX port.')
hpnicfPexMinAssociateId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexMinAssociateId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexMinAssociateId.setDescription('Lowest ID that can be assigned to a port extender (PEX).')
hpnicfPexMaxAssociateId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexMaxAssociateId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexMaxAssociateId.setDescription('Highest ID that can be assigned to a PEX.')
hpnicfPexMaxPortPerPexPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexMaxPortPerPexPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexMaxPortPerPexPort.setDescription('Maximum number of ports that can be bound to a PEX port.')
hpnicfPexTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2))
hpnicfPexPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1), )
if mibBuilder.loadTexts: hpnicfPexPortTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortTable.setDescription('This table contains objects used to configure the PEX ports.')
hpnicfPexPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-PEX-MIB", "hpnicfPexPortId"))
if mibBuilder.loadTexts: hpnicfPexPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortEntry.setDescription('Information about a PEX.')
hpnicfPexPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPexPortId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortId.setDescription('ID that can be used to uniquely identify a PEX port. The value range is hpnicfPexPortMinId to hpnicfPexPortMaxId.')
hpnicfPexPortAssociateId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1, 1, 2), Integer32().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPexPortAssociateId.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortAssociateId.setDescription('ID assigned to a PEX. The value range is hpnicfPexMinAssociateId to hpnicfPexMaxAssociateId. The value is 0xffff if the PEX is not assigned an ID. For a successful configuration, the ID should not be used by any other PEX.')
hpnicfPexPortEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexPortEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortEntPhysicalIndex.setDescription('Entity index of a PEX in the IRF. A value of zero indicates that the PEX is not online.')
hpnicfPexPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPexPortDescr.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortDescr.setDescription("Description for the PEX port. The default value is 'pex-port XXXX', where 'XXXX' is hpnicfPexPortId. Writing a zero-length string to this object resets the value to the default.")
hpnicfPexPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("offline", 1), ("loading", 2), ("online", 3))).clone('offline')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexPortStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortStatus.setDescription('Status of the PEX. offline: The PEX is absent or its configuration is incomplete. loading: The PEX is loading software. online: The PEX is operating correctly.')
hpnicfPexPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfPexPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortRowStatus.setDescription('The control that allows creation and deletion of entries. Values include createAndGo, active, and destroy. If the row to be created or modified already exists, an error message is returned. If the row to be deleted does not exist, a success message is returned.')
hpnicfPexPhyPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 2), )
if mibBuilder.loadTexts: hpnicfPexPhyPortTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPhyPortTable.setDescription('This table contains objects used to manage physical ports that can be bound or are already bound to a PEX port.')
hpnicfPexPhyPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hpnicfPexPhyPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPhyPortEntry.setDescription('Information about a physical port that can be bound to or has been bound to a PEX port.')
hpnicfPexPhyPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("blocked", 3), ("forwarding", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexPhyPortStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPhyPortStatus.setDescription('Status of the physical port that is bound to a PEX port. The following are status values: unknown: The physical port is not bound to any PEX port. down: The physical port is link down. blocked: The physical port is blocked and cannot forward traffic. forwarding: The physical port can forwarding traffic.')
hpnicfPexPhyPortBelongToPexPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfPexPhyPortBelongToPexPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPhyPortBelongToPexPort.setDescription("ID of the PEX port to which the physical port belongs. The value range is hpnicfPexPortMinId to hpnicfPexPortMaxId. A value of zero indicates that the port doesn't belong to any PEX port.")
hpnicfPexPhyPortNeighborEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfPexPhyPortNeighborEntIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPhyPortNeighborEntIndex.setDescription('Entity index of a physical port that connects the PEX to the parent device. This value is identical to entPhysicalIndex in ENTITY-MIB. A value of zero indicates that the physical port is not bound to any PEX port or is not up.')
hpnicfPexTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 3))
hpnicfPexTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 3, 0))
hpnicfPexPortOnline = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 3, 0, 1)).setObjects(("HPN-ICF-PEX-MIB", "hpnicfPexPortId"), ("HPN-ICF-PEX-MIB", "hpnicfPexPortDescr"))
if mibBuilder.loadTexts: hpnicfPexPortOnline.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortOnline.setDescription('An hpnicfPexPortOnline trap is sent when the PEX transitions to online state.')
hpnicfPexPortOffline = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 3, 0, 2)).setObjects(("HPN-ICF-PEX-MIB", "hpnicfPexPortId"), ("HPN-ICF-PEX-MIB", "hpnicfPexPortDescr"))
if mibBuilder.loadTexts: hpnicfPexPortOffline.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPortOffline.setDescription('An hpnicfPexPortOnline trap is sent when the PEX transitions to offline state.')
hpnicfPexPhyPortForwarding = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 3, 0, 3)).setObjects(("HPN-ICF-PEX-MIB", "hpnicfPexEntPhysicalIndexBind"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: hpnicfPexPhyPortForwarding.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPhyPortForwarding.setDescription('An hpnicfPexPhyPortForwarding trap is sent when the PEX physical port transitions to forwarding state.')
hpnicfPexPhyPortBlocked = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 3, 0, 4)).setObjects(("HPN-ICF-PEX-MIB", "hpnicfPexEntPhysicalIndexBind"), ("ENTITY-MIB", "entPhysicalDescr"))
if mibBuilder.loadTexts: hpnicfPexPhyPortBlocked.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexPhyPortBlocked.setDescription('An hpnicfPexPhyPortBlocked trap is sent when the PEX physical port transitions from forwarding state to blocked state.')
hpnicfPexTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 4))
hpnicfPexEntPhysicalIndexBind = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 129, 4, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfPexEntPhysicalIndexBind.setStatus('current')
if mibBuilder.loadTexts: hpnicfPexEntPhysicalIndexBind.setDescription('This index is identical to entPhysicalIndex in ENTITY-MIB.')
mibBuilder.exportSymbols("HPN-ICF-PEX-MIB", hpnicfPexPortAssociateId=hpnicfPexPortAssociateId, hpnicfPexPortId=hpnicfPexPortId, hpnicfPexPhyPortNeighborEntIndex=hpnicfPexPhyPortNeighborEntIndex, hpnicfPexPhyPortBlocked=hpnicfPexPhyPortBlocked, hpnicfPexPortEntPhysicalIndex=hpnicfPexPortEntPhysicalIndex, hpnicfPexPhyPortForwarding=hpnicfPexPhyPortForwarding, hpnicfPexTrapPrefix=hpnicfPexTrapPrefix, hpnicfPexPortStatus=hpnicfPexPortStatus, hpnicfPexPortMaxId=hpnicfPexPortMaxId, hpnicfPexPhyPortBelongToPexPort=hpnicfPexPhyPortBelongToPexPort, hpnicfPexPortDescr=hpnicfPexPortDescr, hpnicfPexEntPhysicalIndexBind=hpnicfPexEntPhysicalIndexBind, hpnicfPexTrapObjects=hpnicfPexTrapObjects, hpnicfPexPortRowStatus=hpnicfPexPortRowStatus, hpnicfPexMaxAssociateId=hpnicfPexMaxAssociateId, hpnicfPexPhyPortStatus=hpnicfPexPhyPortStatus, hpnicfPexTable=hpnicfPexTable, hpnicfPexPortOnline=hpnicfPexPortOnline, hpnicfPexMinAssociateId=hpnicfPexMinAssociateId, hpnicfPexPortOffline=hpnicfPexPortOffline, PYSNMP_MODULE_ID=hpnicfPex, hpnicfPexSpecInfo=hpnicfPexSpecInfo, hpnicfPexPortMinId=hpnicfPexPortMinId, hpnicfPexPortTable=hpnicfPexPortTable, hpnicfPexTraps=hpnicfPexTraps, hpnicfPex=hpnicfPex, hpnicfPexPortEntry=hpnicfPexPortEntry, hpnicfPexMaxPortPerPexPort=hpnicfPexMaxPortPerPexPort, hpnicfPexPhyPortEntry=hpnicfPexPhyPortEntry, hpnicfPexPhyPortTable=hpnicfPexPhyPortTable)
