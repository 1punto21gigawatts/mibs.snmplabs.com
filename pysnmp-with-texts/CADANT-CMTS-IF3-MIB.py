#
# PySNMP MIB module CADANT-CMTS-IF3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-IF3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
cadIfMacDomainIfIndex, = mibBuilder.importSymbols("CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex")
cadIfCmtsCmStatusMacAddress, = mibBuilder.importSymbols("CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress")
cadCmtsIf3, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadCmtsIf3")
DocsEqualizerData, TenthdBmV, TenthdB, DocsisUpstreamType, DocsisQosVersion = mibBuilder.importSymbols("DOCS-IF-MIB", "DocsEqualizerData", "TenthdBmV", "TenthdB", "DocsisUpstreamType", "DocsisQosVersion")
docsIf3UsChSetId, docsIf3DsChSetId, IfDirection, ChSetId, RcpId, Dsid, RangingState, ChannelList = mibBuilder.importSymbols("DOCS-IF3-MIB", "docsIf3UsChSetId", "docsIf3DsChSetId", "IfDirection", "ChSetId", "RcpId", "Dsid", "RangingState", "ChannelList")
InterfaceIndex, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibIdentifier, NotificationType, ModuleIdentity, Counter64, TimeTicks, iso, Unsigned32, Bits, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks", "iso", "Unsigned32", "Bits", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32")
TimeInterval, RowStatus, TimeStamp, DisplayString, DateAndTime, TruthValue, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "RowStatus", "TimeStamp", "DisplayString", "DateAndTime", "TruthValue", "MacAddress", "TextualConvention")
cadCmtsIf3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1))
cadCmtsIf3Mib.setRevisions(('2015-11-05 00:00', '2015-10-29 00:00', '2015-04-06 00:00', '2015-03-10 00:00', '2015-02-27 00:00', '2014-02-24 00:00', '2013-11-05 00:00', '2011-01-18 00:00', '2010-07-02 00:00', '2010-05-04 00:00', '2010-01-29 00:00', '2009-08-25 00:00', '2008-08-21 00:00', '2008-07-30 00:00', '2008-04-15 00:00', '2008-02-15 00:00', '2007-12-12 00:00', '2007-11-07 00:00', '2007-09-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadCmtsIf3Mib.setRevisionsDescriptions(('Remove invalidDpd(19) from CmStatusEventTypeCode. Remove invalidDpd(200) from cadIfCmtsCmFailedProfReason.', 'Change MAX-ACCESS of cadIfCmtsCmFailedProfReason from read-only to not-accessible.', 'Add cadIfCmtsCmFailedProfStatusTable', 'Add plcFecLockFailure, ncpFecLockFailure, and prof0FecLockFailure to cadCmtsCmRegImpairedReason', 'Add OFDM related event type code to CmStatusEventTypeCode', 'Additional per channel set statistics.', 'Add cadIf3UsChSetTable and cadIf3DsChSetTable', 'Change SYNTAX of cadRccStatusId from (1..255) to (1..4294967295)', 'Change default value of cadCmStatusMaxEventHoldoff to 1500 (30 seconds).', 'Remove cadClearAllCmtsCmRegImpaired and cadClearCmtsCmRegImpaired.', 'Change index scheme of cadCmtsCmRegImpairedStatusEntry to cadIfCmtsCmStatusMacAddress + cadCmtsCmRegImpairedIfIndex + cadCmtsCmRegImpairedReason Add usStationMaintFailure(900) to cadCmtsCmRegImpairedReason. Remove tiTimeout(800) from cadCmtsCmRegImpairedReason Add cadClearAllCmtsCmRegImpaired and cadClearCmtsCmRegImpaired', 'Change default value of cadCmStatusMaxEventHoldoff to 32,000. default value of cadCmStatusEventEnabled to true(1).', 'Remove the following MIB objects: cadIf3CmtsCmUsStatusRxPower, cadIf3CmtsCmUsStatusSignalNoise, cadIf3CmtsCmUsStatusMicroreflections, cadIf3CmtsCmUsStatusEqData, cadIf3CmtsCmUsStatusUnerroreds, cadIf3CmtsCmUsStatusCorrecteds, cadIf3CmtsCmUsStatusUncorrectables, and cadIf3CmtsCmUsStatusHighResolutionTimingOffset. ', 'Change Enumeration order of cadCmtsCmRegImpairedReason.', 'Modify cadCmtsCmRegImpairedReason and cadCmtsCmRegImpairedLastRepairAction.', 'Add cadDsbgDynEnable, cadDsbgReseqWaitTime, and cadDsbgReseqWarnThrshld.', 'Add cadDsbgDynEnable, cadDsbgReseqWaitTime, and cadDsbgReseqWarnThrshld.', 'Add cadIf3CmtsCmUsStatusTable.', ' Initial version. ',))
if mibBuilder.loadTexts: cadCmtsIf3Mib.setLastUpdated('201511050000Z')
if mibBuilder.loadTexts: cadCmtsIf3Mib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadCmtsIf3Mib.setContactInfo('Arris Technical Support Postal: ARRIS E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadCmtsIf3Mib.setDescription(' This MIB module contains Cadant IF3 MIB information. ')
cadCmtsIf3MibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1))
class HhMmSs(TextualConvention, OctetString):
    description = 'A time specification of hours, minutes, and seconds. field octets contents range ----- ------ -------- ----- 1 1 hour 0..23 2 1 minutes 0..59 3 1 seconds 0..59'
    status = 'current'
    displayHint = '1d:1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class CmStatusEventTypeCode(TextualConvention, Integer32):
    description = 'This field contains a unique code which describes the event condition. Refer to Table 6-56 in MULPI.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 18, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("secondaryChlMddTimeout", 1), ("qamFecLockFailure", 2), ("seqOutOfRange", 3), ("mddRecovery", 4), ("qamFecLockRecovery", 5), ("t4Timeout", 6), ("t3RetriesExceeded", 7), ("t3RangingRecovery", 8), ("cmOnBatteryBackup", 9), ("cmAcPowerRestored", 10), ("ofdmProfileFailure", 16), ("dpdMismatch", 18), ("ncpProfileFailure", 20), ("plcFecLockFailure", 21), ("ncpProfileRecovery", 22), ("plcFecLockRecovery", 23), ("ofdmProfileRecovery", 24))

cadCmStatusMdCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 1), )
if mibBuilder.loadTexts: cadCmStatusMdCfgTable.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusMdCfgTable.setDescription('At MAC Domain creation time with one row per cadCmStatusEventTypeCode value for the new MAC Domain. These rows MUST be deleted by the CMTS when the MAC Domain is deleted.')
cadCmStatusMdCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 1, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"), (0, "CADANT-CMTS-IF3-MIB", "cadCmStatusEventTypeCode"))
if mibBuilder.loadTexts: cadCmStatusMdCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusMdCfgEntry.setDescription('A conceptual row containing information about the Cadant CM Status Mac domain configuration. ')
cadCmStatusEventTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 1, 1, 1), CmStatusEventTypeCode())
if mibBuilder.loadTexts: cadCmStatusEventTypeCode.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusEventTypeCode.setDescription('This field contains a unique code which describes the event condition. Refer to Table 6-56 in MULPI.')
cadCmStatusEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmStatusEventDescription.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusEventDescription.setDescription('Textual description of event. This will default to a description that is generated by the CMTS but will be set to the Event Description which is sent from the CM, if applicable.')
cadCmStatusEventEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmStatusEventEnabled.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusEventEnabled.setDescription('This attribute represents the enable/disable for a particular event for which status may be reported via the CM-STATUS message.')
cadCmStatusMaxEventHoldoff = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1500)).setUnits('20 millisecond increments').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmStatusMaxEventHoldoff.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusMaxEventHoldoff.setDescription('The CM-STATUS reporting mechanism includes a random holdoff prior to transmission of status report messages. This attribute is the maximum value of that holdoff timer to be used by the CM when determining when to transmit a CM-STATUS message.')
cadCmStatusMaxNumReports = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmStatusMaxNumReports.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusMaxNumReports.setDescription('Maximum Number of Reports per event: 0: Unlimited number of reports 1-255: Maximum number of reports for an event type reporting transaction.')
cadCmtsCmCtrlStatusOverrideCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2), )
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideCfgTable.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideCfgTable.setDescription('A Table containing information about the Cadant CM control status override configuration. ')
cadCmtsCmCtrlStatusOverrideCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2, 1), ).setIndexNames((0, "CADANT-CMTS-IF3-MIB", "cadCmtsCmCtrlStatusMacAddress"), (0, "CADANT-CMTS-IF3-MIB", "cadCmtsCmCtrlStatusEventTypeCode"))
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideCfgEntry.setDescription('A conceptual row containing information about the Cadant CM control status override configuration. ')
cadCmtsCmCtrlStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusMacAddress.setDescription('The CM Mac Address.')
cadCmtsCmCtrlStatusEventTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2, 1, 2), CmStatusEventTypeCode())
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusEventTypeCode.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusEventTypeCode.setDescription('This field contains a unique code which describes the event condition. Refer to Table 6-56 in MULPI.')
cadCmtsCmCtrlStatusOverrideEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideEnabled.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideEnabled.setDescription("This attribute can be used to override the CM's primary channel MDD with regard to enabling a particular event type.")
cadCmtsCmCtrlStatusOverrideDsChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideDsChList.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideDsChList.setDescription('List of DS channel IDs to which this override applies.')
cadCmtsCmCtrlStatusOverrideUsChList = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideUsChList.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusOverrideUsChList.setDescription('List of US channel IDs to which this override applies.')
cadCmtsCmCtrlStatusRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmCtrlStatusRowStatus.setDescription('Row Status for this table')
cadCmStatusCountsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3), )
if mibBuilder.loadTexts: cadCmStatusCountsTable.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsTable.setDescription('A Table containing information about the Cadant CM status counter. ')
cadCmStatusCountsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1), ).setIndexNames((0, "CADANT-CMTS-IF3-MIB", "cadCmStatusCountsCmMacAddress"), (0, "CADANT-CMTS-IF3-MIB", "cadCmStatusEventTypeCode"))
if mibBuilder.loadTexts: cadCmStatusCountsEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsEntry.setDescription('A conceptual row containing information about the Cadant CM status counter. ')
cadCmStatusCountsCmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadCmStatusCountsCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsCmMacAddress.setDescription('MAC Address of CM which reported this event.')
cadCmStatusCountsEventTypeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 2), CmStatusEventTypeCode())
if mibBuilder.loadTexts: cadCmStatusCountsEventTypeCode.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsEventTypeCode.setDescription('This field contains a unique code which describes the event condition. Refer to Table 6-56 in MULPI.')
cadCmStatusCountsEventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmStatusCountsEventDescription.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsEventDescription.setDescription('Textual description of event. This will default to a description that is generated by the CMTS but will be set to the Event Description which is sent from the CM, if applicable.')
cadCmStatusCountsEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmStatusCountsEventCount.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsEventCount.setDescription('Count of the number of times that the cadCmStatusEventTypeCode has been reported for this CM.')
cadCmStatusCountsReportedDsChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmStatusCountsReportedDsChIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsReportedDsChIfIndex.setDescription('ifIndex corresponding to the reported DCID.')
cadCmStatusCountsReportedUsChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 6), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmStatusCountsReportedUsChIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsReportedUsChIfIndex.setDescription('ifIndex corresponding to the reported UCID.')
cadCmStatusCountsReportedDsid = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 7), Dsid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmStatusCountsReportedDsid.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsReportedDsid.setDescription('DSID as reported by CM.')
cadCmStatusCountsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmStatusCountsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cadCmStatusCountsTimeStamp.setDescription('TimeStamp when this row was created.')
cadCmtsCmRepairParamTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 4), )
if mibBuilder.loadTexts: cadCmtsCmRepairParamTable.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRepairParamTable.setDescription('A table that contains information on the CM repair parameters. ')
cadCmtsCmRepairParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 4, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"))
if mibBuilder.loadTexts: cadCmtsCmRepairParamEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRepairParamEntry.setDescription('A conceptual row containing information about the CM repair parameter. ')
cadCmtsCmRepairEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmtsCmRepairEnabled.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRepairEnabled.setDescription('When true(1), the CMTS will periodically attempt to repair any unresolved topology and/or partial service condition for each CM which has been added to the CM problem list.')
cadCmtsCmRepairWindowStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 4, 1, 2), HhMmSs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmtsCmRepairWindowStartTime.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRepairWindowStartTime.setDescription('Time of day for beginning of CmRepair Window.')
cadCmtsCmRepairWindowEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 4, 1, 3), HhMmSs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmtsCmRepairWindowEndTime.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRepairWindowEndTime.setDescription('Time of day for end of CmRepair Window.')
cadCmtsCmRepairInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 4, 1, 4), HhMmSs()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadCmtsCmRepairInterval.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRepairInterval.setDescription('Period between repair attemts during repair window.')
cadCmtsCmRegImpairedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 5), )
if mibBuilder.loadTexts: cadCmtsCmRegImpairedStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRegImpairedStatusTable.setDescription('A table that contains information on the CM impaired status. ')
cadCmtsCmRegImpairedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 5, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"), (0, "CADANT-CMTS-IF3-MIB", "cadCmtsCmRegImpairedIfIndex"), (0, "CADANT-CMTS-IF3-MIB", "cadCmtsCmRegImpairedReason"))
if mibBuilder.loadTexts: cadCmtsCmRegImpairedStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRegImpairedStatusEntry.setDescription('A conceptual row containing information about the CM impaired status. ')
cadCmtsCmRegImpairedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 130, 150, 170, 200, 300, 400, 500, 600, 700, 900))).clone(namedValues=NamedValues(("qamFecLockFailure", 100), ("plcFecLockFailure", 130), ("ncpFecLockFailure", 150), ("prof0FecLockFailure", 170), ("unknownMdDsSgId", 200), ("unknownMdUsSgId", 300), ("badRcs", 400), ("badTcs", 500), ("t4Timeout", 600), ("t3Timeout", 700), ("usStationMaintFailure", 900)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmRegImpairedReason.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRegImpairedReason.setDescription('Reason why CM is considered to be impaired. Reason codes with lower integer values take precedence over reason codes with higher values if multiple reasons apply to the same CM. The unknownMdDsSgId reason is used whenever the MD-DS-SG-ID reported in the B-INIT-RNG-REQ message is 0 and the CMTS cannot otherwise determine which downstream service group the CM is contained within. The unknownMdUsSgId reason is used whenever the MD-DS-SG-ID is known for the CM but the MD-US-SG cannot be determined by the topology resolution process. This reason may indicate an undiagnosed connectivity problem in the cable network whereby the true connectivity does not match the provisioned connectivity. It may also indicate one or more corrupted upstream channels. The badRcs reason indicates that the CM was unable to tune to and receive a downstream channel that is assigned to the CM in the RCC. This may indicate an undiagnosed connectivity problem or a CM receiver problem. The badTcs reason indicates that CM was unable to successfully range on one or more upstream channels that were assigned to the CM in the TCC. This reason may indicate an undiagnosed connectivity problem in the cable network whereby the true connectivity does not match the provisioned connectivity. It may also indicate one or more corrupted upstream channels. This reason may also indicate that the supervision for one or more upstream channels cannot be found within the RCS. The qamFecLockFailure reason indicates that the CM has reported that one or more previously known good downstream channels has lost FEC lock. This reason supercedes unknownMdDsSgId. The t4Timeout indicates that the CM has reported that it has experienced a timeout event for DOCSIS timer T4 (Periodic Ranging opportunities interval). The t3Timeout reason indicates that the CM has reported that it has exceeded the maximum number of consecutive timeouts of timer T3 (ranging response timer). The usStationMaintFailure indicates that C4 has detected that CM is experiencing periodic ranging failure.')
cadCmtsCmRegImpairedFaultDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmRegImpairedFaultDetected.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRegImpairedFaultDetected.setDescription('Date and time when impairment of CM was first detected.')
cadCmtsCmRegImpairedLastRepairAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 5, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmRegImpairedLastRepairAttempt.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRegImpairedLastRepairAttempt.setDescription('Date and time when corrective action was last attempted. If no action has not yet been attempted, then this time should be the same as cadCmtsCmRegImpairedFaultDetected.')
cadCmtsCmRegImpairedLastRepairAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noAction", 0), ("cmReset", 1), ("dbcMessage", 2), ("dccMessage", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmRegImpairedLastRepairAction.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRegImpairedLastRepairAction.setDescription('Type of corrective action last attempted. If no action has yet been attempted then the value should be noAction.')
cadCmtsCmRegImpairedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 5, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadCmtsCmRegImpairedIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadCmtsCmRegImpairedIfIndex.setDescription('This object indicates either a downstream or upstream channel is impaired.')
cadIf3CmtsCmUsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 6), )
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusTable.setDescription('This object defines status information of the CM currently in use Upstream Logical Channels, as reported by the CMTS.')
cadIf3CmtsCmUsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 6, 1), ).setIndexNames((0, "CADANT-CMTS-MAC-MIB", "cadIfCmtsCmStatusMacAddress"), (0, "CADANT-CMTS-IF3-MIB", "cadIf3CmtsCmUsStatusChIfIndex"))
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusEntry.setDescription('The conceptual row of cadIf3CmtsCmUsStatusTable.')
cadIf3CmtsCmUsStatusChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusChIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusChIfIndex.setDescription('This attribute is a key that represents the ifIndex of the upstream interface.')
cadIf3CmtsCmUsStatusModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 6, 1, 2), DocsisUpstreamType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusModulationType.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusModulationType.setDescription('This attribute represents the modulation type currently used by this upstream channel.')
cadIf3CmtsCmUsStatusIsMuted = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 6, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusIsMuted.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, section Media Access Control specification.')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusIsMuted.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusIsMuted.setDescription("This attribute has a value 'true' to indicate that the CM's upstream channel has been muted via CM-CTRL-REQ/CM-CTRL-RSP message exchange.")
cadIf3CmtsCmUsStatusRangingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 6, 1, 12), RangingState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusRangingStatus.setReference('DOCSIS 3.0 MAC and Upper Layer Protocols Interface Specification CM-SP-MULPIv3.0-I01-060804, section Media Access Control specification.')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusRangingStatus.setStatus('current')
if mibBuilder.loadTexts: cadIf3CmtsCmUsStatusRangingStatus.setDescription('This attribute denotes the ranging state of the CM.')
cadRccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7), )
if mibBuilder.loadTexts: cadRccStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusTable.setDescription('The RCC Status object provides a read-only view of the statically-configured (from the RccCfg object) and dynamically-created RCCs. The CMTS creates an RCC Status instance for each unique MAC Domain Cable Modem Service Group (MD-CM-SG) to which it signals an RCC to the CM.')
cadRccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"), (0, "CADANT-CMTS-IF3-MIB", "cadRccStatusRcpId"), (0, "CADANT-CMTS-IF3-MIB", "cadRccStatusId"))
if mibBuilder.loadTexts: cadRccStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusEntry.setDescription('The conceptual row of cadRccStatusTable. The ifIndex key corresponds to the MAC Domain interface where the RCC is configured.')
cadRccStatusRcpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1, 1), RcpId())
if mibBuilder.loadTexts: cadRccStatusRcpId.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusRcpId.setDescription('This key represents the RCP-ID to which this instance applies.')
cadRccStatusId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cadRccStatusId.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusId.setDescription('This key represents an RCC combination for a particular RcpId either from an RCC configuration object or a CMTS-determined RCC and is unique per combination of MAC Domain IfIndex and RcpId.')
cadRccStatusRccCfgId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRccStatusRccCfgId.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusRccCfgId.setDescription('This attribute identifies an RCC-Configured combination from which this instance was defined. If nonzero, it corresponds to the RccCfg instance from which the RCC was created. Zero means that the RCC was dynamically created by the CMTS.')
cadRccStatusValidityCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("invalid", 3), ("wrongPrimaryDs", 4), ("missingPrimaryDs", 5), ("multiplePrimaryDs", 6), ("duplicateDs", 7), ("wrongFrequencyRange", 8), ("wrongConnectivity", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRccStatusValidityCode.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusValidityCode.setDescription('This attribute indicates whether the RCC instance of this object is valid or not. An RCC Status instance from a configured or a dynamic RCC could become invalid, for example, due changes in the topology.')
cadRccStatusValidityCodeText = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRccStatusValidityCodeText.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusValidityCodeText.setDescription('This attribute contains the CMTS vendor-specific log information from the Receive Channel Configuration Status encoding.')
cadRccStatusDsChSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1, 6), ChSetId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRccStatusDsChSetId.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusDsChSetId.setDescription('This object contains the ID for the downstream channel set used by this RCC. It is only unique in association with a specific MAC domain.')
cadRccStatusChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadRccStatusChannelCount.setStatus('current')
if mibBuilder.loadTexts: cadRccStatusChannelCount.setDescription('This object provides the number of downstream channels provided by a modem using this RCC.')
cadIf3UsChSetTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 8), )
if mibBuilder.loadTexts: cadIf3UsChSetTable.setStatus('current')
if mibBuilder.loadTexts: cadIf3UsChSetTable.setDescription('This object defines a set of upstream channels. These channel sets may be associated with TCSID.')
cadIf3UsChSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3UsChSetId"), (0, "CADANT-CMTS-IF3-MIB", "cadIf3UsChIfIndex"))
if mibBuilder.loadTexts: cadIf3UsChSetEntry.setStatus('current')
if mibBuilder.loadTexts: cadIf3UsChSetEntry.setDescription('The conceptual row of cadIf3UsChSetTable. The ifIndex key corresponds to the MAC Domain interface where the upstream channel set is defined.')
cadIf3UsChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 8, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3UsChIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIf3UsChIfIndex.setDescription('This object is associated with an upstream channel ifIndex.')
cadIf3DsChSetTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 9), )
if mibBuilder.loadTexts: cadIf3DsChSetTable.setStatus('current')
if mibBuilder.loadTexts: cadIf3DsChSetTable.setDescription('This object defines a set of downstream channels. These channel sets may be associated with RCSID.')
cadIf3DsChSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF3-MIB", "docsIf3DsChSetId"), (0, "CADANT-CMTS-IF3-MIB", "cadIf3DsChIfIndex"))
if mibBuilder.loadTexts: cadIf3DsChSetEntry.setStatus('current')
if mibBuilder.loadTexts: cadIf3DsChSetEntry.setDescription('The conceptual row of cadIf3DsChSetTable. The ifIndex key corresponds to the MAC Domain interface where the downstream channel set is defined.')
cadIf3DsChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 9, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3DsChIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIf3DsChIfIndex.setDescription('This object is associated with an downstream channel ifIndex.')
cadIf3CsSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10), )
if mibBuilder.loadTexts: cadIf3CsSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cadIf3CsSummaryTable.setDescription('This table contains counts of the modems using a particular upstream or downstream channel set. It is used to construct ')
cadIf3CsSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-CMTS-IF3-MIB", "cadIf3CsDir"), (0, "CADANT-CMTS-IF3-MIB", "cadIf3CsId"))
if mibBuilder.loadTexts: cadIf3CsSummaryEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsSummaryEntry.setDescription('The conceptual row of the cadIf3CsSummary table that contains the the count of modems using this channel set.')
cadIf3CsDir = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 1), IfDirection())
if mibBuilder.loadTexts: cadIf3CsDir.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsDir.setDescription('The direction of the channel set associated with this modem count.')
cadIf3CsId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 2), ChSetId())
if mibBuilder.loadTexts: cadIf3CsId.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsId.setDescription('The channel set associated with this modem count.')
cadIf3CsNumOther = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumOther.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumOther.setDescription('The number of modems on this channel set in state other(1)')
cadIf3CsNumInitRanging = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumInitRanging.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumInitRanging.setDescription('The number of modems on this channel set in state initialRanging(2)')
cadIf3CsNumRangingComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumRangingComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumRangingComplete.setDescription('The number of modems on this channel set in state rangingAutoAdjComplete(4)')
cadIf3CsNumStartEae = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumStartEae.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumStartEae.setDescription('The number of modems on this channel set in state startEae(10)')
cadIf3CsNumStartDhcpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumStartDhcpv4.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumStartDhcpv4.setDescription('The number of modems on this channel set in state startDhcpv4(11)')
cadIf3CsNumStartDhcpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumStartDhcpv6.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumStartDhcpv6.setDescription('The number of modems on this channel set in state startDhcpv6(12)')
cadIf3CsNumDhcpv4Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumDhcpv4Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumDhcpv4Complete.setDescription('The number of modems on this channel set in state dhcpv4Complete(5)')
cadIf3CsNumDhcpv6Complete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumDhcpv6Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumDhcpv6Complete.setDescription('The number of modems on this channel set in state dhcpv6Complete(13)')
cadIf3CsNumStartCfgFileDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumStartCfgFileDownload.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumStartCfgFileDownload.setDescription('The number of modems on this channel set in state startConfigFileDownload(14)')
cadIf3CsNumCfgFileDownloadComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumCfgFileDownloadComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumCfgFileDownloadComplete.setDescription('The number of modems on this channel set in state configFileDownloadComplete(15)')
cadIf3CsNumStartRegistration = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumStartRegistration.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumStartRegistration.setDescription('The number of modems on this channel set in state startRegistration(16)')
cadIf3CsNumRegistrationComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumRegistrationComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumRegistrationComplete.setDescription('The number of modems on this channel set in state registrationComplete(6)')
cadIf3CsNumOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumOperational.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumOperational.setDescription('The number of modems on this channel set in state operational(8)')
cadIf3CsNumBpiInit = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumBpiInit.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumBpiInit.setDescription('The number of modems on this channel set in state bpiInit(9)')
cadIf3CsNumForwardingDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumForwardingDisabled.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumForwardingDisabled.setDescription('The number of modems on this channel set in state forwardingDisabled(17)')
cadIf3CsNumRfMuteAll = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumRfMuteAll.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumRfMuteAll.setDescription('The number of modems on this channel set in state rfMuteAll(18)')
cadIf3CsNumTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumTotal.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumTotal.setDescription('The total count of cable modems on this channel set')
cadIf3CsNumRangingAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumRangingAborted.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumRangingAborted.setDescription('The number of modems on this channel set in state rangingAborted(3)')
cadIf3CsNumRangFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumRangFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumRangFlaps.setDescription('The number of times a CM on this channel set has reset in Ranging states.')
cadIf3CsNumProvFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumProvFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumProvFlaps.setDescription('The number of times a CM on this channel set has reset in Provisioning states.')
cadIf3CsNumRegFlaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3CsNumRegFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3CsNumRegFlaps.setDescription('The number of times a CM on this channel set has reset in Registered state.')
cadIf3ChsSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11))
cadIf3ChsNumOther = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumOther.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumOther.setDescription('The number of modems on this chassis in state other(1)')
cadIf3ChsNumInitRanging = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumInitRanging.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumInitRanging.setDescription('The number of modems on this chassis in state initialRanging(2)')
cadIf3ChsNumRangingComplete = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumRangingComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumRangingComplete.setDescription('The number of modems on this chassis in state rangingAutoAdjComplete(4)')
cadIf3ChsNumStartEae = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumStartEae.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumStartEae.setDescription('The number of modems on this chassis in state startEae(10)')
cadIf3ChsNumStartDhcpv4 = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumStartDhcpv4.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumStartDhcpv4.setDescription('The number of modems on this chassis in state startDhcpv4(11)')
cadIf3ChsNumStartDhcpv6 = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumStartDhcpv6.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumStartDhcpv6.setDescription('The number of modems on this chassis in state startDhcpv6(12)')
cadIf3ChsNumDhcpv4Complete = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumDhcpv4Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumDhcpv4Complete.setDescription('The number of modems on this chassis in state dhcpv4Complete(5)')
cadIf3ChsNumDhcpv6Complete = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumDhcpv6Complete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumDhcpv6Complete.setDescription('The number of modems on this chassis in state dhcpv6Complete(13)')
cadIf3ChsNumStartCfgFileDownload = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumStartCfgFileDownload.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumStartCfgFileDownload.setDescription('The number of modems on this chassis in state startConfigFileDownload(14)')
cadIf3ChsNumCfgFileDownloadComplete = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumCfgFileDownloadComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumCfgFileDownloadComplete.setDescription('The number of modems on this chassis in state configFileDownloadComplete(15)')
cadIf3ChsNumStartRegistration = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumStartRegistration.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumStartRegistration.setDescription('The number of modems on this chassis in state startRegistration(16)')
cadIf3ChsNumRegistrationComplete = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumRegistrationComplete.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumRegistrationComplete.setDescription('The number of modems on this chassis in state registrationComplete(6)')
cadIf3ChsNumOperational = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumOperational.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumOperational.setDescription('The number of modems on this chassis in state operational(8)')
cadIf3ChsNumBpiInit = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumBpiInit.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumBpiInit.setDescription('The number of modems on this chassis in state bpiInit(9)')
cadIf3ChsNumForwardingDisabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumForwardingDisabled.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumForwardingDisabled.setDescription('The number of modems on this chassis in state forwardingDisabled(17)')
cadIf3ChsNumRfMuteAll = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumRfMuteAll.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumRfMuteAll.setDescription('The number of modems on this chassis in state rfMuteAll(18)')
cadIf3ChsNumTotal = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumTotal.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumTotal.setDescription('The total count of cable modems on this chassis')
cadIf3ChsNumRangingAborted = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumRangingAborted.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumRangingAborted.setDescription('The number of modems on this chassis in state rangingAborted(3)')
cadIf3ChsNumRangFlaps = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumRangFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumRangFlaps.setDescription('The number of times a CM on this chassis set has reset in a ranging state.')
cadIf3ChsNumProvFlaps = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumProvFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumProvFlaps.setDescription('The number of times a CM on this chassis has reset in a provisioning state.')
cadIf3ChsNumRegFlaps = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 11, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIf3ChsNumRegFlaps.setStatus('deprecated')
if mibBuilder.loadTexts: cadIf3ChsNumRegFlaps.setDescription('The number of times a CM on this chassis has reset in a registered state.')
cadIfCmtsCmFailedProfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 12), )
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfStatusTable.setDescription('A table that contains information on the CM impaired status (partial channel condition). ')
cadIfCmtsCmFailedProfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 12, 1), ).setIndexNames((0, "CADANT-CMTS-IF3-MIB", "cadIfCmtsCmFailedProfMacAddress"), (0, "CADANT-CMTS-IF3-MIB", "cadIfCmtsCmFailedProfIfIndex"), (0, "CADANT-CMTS-IF3-MIB", "cadIfCmtsCmFailedProfId"), (0, "CADANT-CMTS-IF3-MIB", "cadIfCmtsCmFailedProfReason"))
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfStatusEntry.setDescription('A conceptual row containing information about the CM impaired OFDM profile status. ')
cadIfCmtsCmFailedProfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 12, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfMacAddress.setDescription('The MAC address of the modem experiencing the failure.')
cadIfCmtsCmFailedProfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 12, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfIfIndex.setDescription('This is the ifIndex of the channel associated with the Failed profile.')
cadIfCmtsCmFailedProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 16)))
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfId.setReference('DOCSIS OSSI Specification,Section DsOfdmProfileCfg')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfId.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfId.setDescription('The profile number of this profile plus one. Profile IDs zero and 255 result in partial service, not a partial channel condition, so they are not in this table.')
cadIfCmtsCmFailedProfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(300))).clone(namedValues=NamedValues(("lostFecLock", 300))))
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfReason.setReference('DOCSIS MULPI Specification, Table 10-4')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfReason.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfReason.setDescription('Reason why a profile is considered to be impaired. The lostFecLock reason is used when the CM sends a DS OFDM profile failure CM-STATUS message for an OFDM channel and profile. This is sent when the CM detects excessive errors on a profile. For an OFDMA channel, it indicates excessive errors in received packets from the CM.')
cadIfCmtsCmFailedProfFaultDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 110, 1, 1, 12, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfFaultDetected.setStatus('current')
if mibBuilder.loadTexts: cadIfCmtsCmFailedProfFaultDetected.setDescription('Date and time when impairment of CM was first detected.')
mibBuilder.exportSymbols("CADANT-CMTS-IF3-MIB", cadIf3ChsNumRangFlaps=cadIf3ChsNumRangFlaps, cadIf3CsNumStartDhcpv4=cadIf3CsNumStartDhcpv4, cadIfCmtsCmFailedProfFaultDetected=cadIfCmtsCmFailedProfFaultDetected, cadIf3CsNumTotal=cadIf3CsNumTotal, cadCmtsCmRegImpairedLastRepairAction=cadCmtsCmRegImpairedLastRepairAction, cadIf3CsNumOperational=cadIf3CsNumOperational, cadCmStatusCountsEntry=cadCmStatusCountsEntry, cadIf3UsChSetEntry=cadIf3UsChSetEntry, cadIf3CmtsCmUsStatusEntry=cadIf3CmtsCmUsStatusEntry, cadIf3ChsNumOperational=cadIf3ChsNumOperational, cadIf3CsNumStartRegistration=cadIf3CsNumStartRegistration, HhMmSs=HhMmSs, cadIf3ChsNumCfgFileDownloadComplete=cadIf3ChsNumCfgFileDownloadComplete, cadCmtsIf3MibObjects=cadCmtsIf3MibObjects, CmStatusEventTypeCode=CmStatusEventTypeCode, cadIf3CsNumRegFlaps=cadIf3CsNumRegFlaps, cadRccStatusValidityCodeText=cadRccStatusValidityCodeText, cadIf3ChsNumRegistrationComplete=cadIf3ChsNumRegistrationComplete, cadCmStatusCountsEventTypeCode=cadCmStatusCountsEventTypeCode, cadCmtsCmCtrlStatusOverrideCfgEntry=cadCmtsCmCtrlStatusOverrideCfgEntry, cadCmtsCmCtrlStatusOverrideUsChList=cadCmtsCmCtrlStatusOverrideUsChList, cadCmStatusCountsCmMacAddress=cadCmStatusCountsCmMacAddress, cadIf3CmtsCmUsStatusTable=cadIf3CmtsCmUsStatusTable, cadRccStatusEntry=cadRccStatusEntry, cadCmtsCmRegImpairedReason=cadCmtsCmRegImpairedReason, cadIf3ChsNumStartDhcpv4=cadIf3ChsNumStartDhcpv4, cadIf3ChsNumStartEae=cadIf3ChsNumStartEae, cadIf3CsNumDhcpv6Complete=cadIf3CsNumDhcpv6Complete, cadIf3ChsNumBpiInit=cadIf3ChsNumBpiInit, cadCmStatusCountsReportedDsid=cadCmStatusCountsReportedDsid, cadIf3ChsNumRfMuteAll=cadIf3ChsNumRfMuteAll, cadIf3CsNumProvFlaps=cadIf3CsNumProvFlaps, cadCmStatusMaxEventHoldoff=cadCmStatusMaxEventHoldoff, cadIf3UsChIfIndex=cadIf3UsChIfIndex, cadIf3UsChSetTable=cadIf3UsChSetTable, cadCmtsCmRegImpairedStatusTable=cadCmtsCmRegImpairedStatusTable, cadRccStatusRcpId=cadRccStatusRcpId, cadIfCmtsCmFailedProfMacAddress=cadIfCmtsCmFailedProfMacAddress, cadCmStatusEventTypeCode=cadCmStatusEventTypeCode, cadIfCmtsCmFailedProfReason=cadIfCmtsCmFailedProfReason, cadIf3CsNumBpiInit=cadIf3CsNumBpiInit, cadCmStatusCountsReportedUsChIfIndex=cadCmStatusCountsReportedUsChIfIndex, cadCmStatusCountsEventCount=cadCmStatusCountsEventCount, cadIf3CsDir=cadIf3CsDir, cadIf3CsNumRangingComplete=cadIf3CsNumRangingComplete, cadCmStatusCountsTimeStamp=cadCmStatusCountsTimeStamp, cadIf3CmtsCmUsStatusRangingStatus=cadIf3CmtsCmUsStatusRangingStatus, cadIf3ChsNumStartRegistration=cadIf3ChsNumStartRegistration, cadCmStatusMaxNumReports=cadCmStatusMaxNumReports, cadIf3ChsNumStartCfgFileDownload=cadIf3ChsNumStartCfgFileDownload, cadIf3CsId=cadIf3CsId, cadIf3CsNumCfgFileDownloadComplete=cadIf3CsNumCfgFileDownloadComplete, cadCmStatusEventEnabled=cadCmStatusEventEnabled, cadIf3ChsNumOther=cadIf3ChsNumOther, cadIf3CsNumStartEae=cadIf3CsNumStartEae, cadIf3CsNumStartCfgFileDownload=cadIf3CsNumStartCfgFileDownload, cadCmtsCmRegImpairedFaultDetected=cadCmtsCmRegImpairedFaultDetected, cadIf3CsNumInitRanging=cadIf3CsNumInitRanging, cadCmStatusMdCfgEntry=cadCmStatusMdCfgEntry, cadIf3CsNumRfMuteAll=cadIf3CsNumRfMuteAll, cadCmtsCmRepairWindowStartTime=cadCmtsCmRepairWindowStartTime, cadIf3CsNumRangFlaps=cadIf3CsNumRangFlaps, cadCmtsCmCtrlStatusEventTypeCode=cadCmtsCmCtrlStatusEventTypeCode, cadIf3DsChSetTable=cadIf3DsChSetTable, cadRccStatusTable=cadRccStatusTable, cadCmtsCmRepairWindowEndTime=cadCmtsCmRepairWindowEndTime, cadCmtsCmRepairInterval=cadCmtsCmRepairInterval, cadCmtsCmRepairParamTable=cadCmtsCmRepairParamTable, cadCmtsCmRegImpairedLastRepairAttempt=cadCmtsCmRegImpairedLastRepairAttempt, cadIf3CsSummaryEntry=cadIf3CsSummaryEntry, cadCmtsCmCtrlStatusMacAddress=cadCmtsCmCtrlStatusMacAddress, cadCmtsCmCtrlStatusOverrideEnabled=cadCmtsCmCtrlStatusOverrideEnabled, cadCmStatusCountsTable=cadCmStatusCountsTable, cadCmtsCmCtrlStatusRowStatus=cadCmtsCmCtrlStatusRowStatus, cadIf3ChsNumInitRanging=cadIf3ChsNumInitRanging, cadIf3ChsNumProvFlaps=cadIf3ChsNumProvFlaps, cadIf3DsChIfIndex=cadIf3DsChIfIndex, cadIf3CsSummaryTable=cadIf3CsSummaryTable, cadRccStatusId=cadRccStatusId, cadIf3ChsNumStartDhcpv6=cadIf3ChsNumStartDhcpv6, cadIfCmtsCmFailedProfIfIndex=cadIfCmtsCmFailedProfIfIndex, cadIf3CmtsCmUsStatusModulationType=cadIf3CmtsCmUsStatusModulationType, cadRccStatusRccCfgId=cadRccStatusRccCfgId, cadCmStatusEventDescription=cadCmStatusEventDescription, cadRccStatusDsChSetId=cadRccStatusDsChSetId, cadIf3CsNumDhcpv4Complete=cadIf3CsNumDhcpv4Complete, cadIf3ChsNumRangingAborted=cadIf3ChsNumRangingAborted, cadCmStatusMdCfgTable=cadCmStatusMdCfgTable, cadRccStatusChannelCount=cadRccStatusChannelCount, cadIf3CsNumRangingAborted=cadIf3CsNumRangingAborted, cadIfCmtsCmFailedProfStatusEntry=cadIfCmtsCmFailedProfStatusEntry, cadIfCmtsCmFailedProfId=cadIfCmtsCmFailedProfId, cadCmtsIf3Mib=cadCmtsIf3Mib, cadIf3ChsSummary=cadIf3ChsSummary, cadCmtsCmCtrlStatusOverrideCfgTable=cadCmtsCmCtrlStatusOverrideCfgTable, cadIf3ChsNumRegFlaps=cadIf3ChsNumRegFlaps, cadIf3CmtsCmUsStatusChIfIndex=cadIf3CmtsCmUsStatusChIfIndex, cadIf3ChsNumForwardingDisabled=cadIf3ChsNumForwardingDisabled, PYSNMP_MODULE_ID=cadCmtsIf3Mib, cadCmStatusCountsReportedDsChIfIndex=cadCmStatusCountsReportedDsChIfIndex, cadIf3CsNumOther=cadIf3CsNumOther, cadIf3DsChSetEntry=cadIf3DsChSetEntry, cadIf3CsNumRegistrationComplete=cadIf3CsNumRegistrationComplete, cadIf3CsNumForwardingDisabled=cadIf3CsNumForwardingDisabled, cadCmtsCmCtrlStatusOverrideDsChList=cadCmtsCmCtrlStatusOverrideDsChList, cadIf3ChsNumDhcpv4Complete=cadIf3ChsNumDhcpv4Complete, cadIf3ChsNumRangingComplete=cadIf3ChsNumRangingComplete, cadCmtsCmRegImpairedIfIndex=cadCmtsCmRegImpairedIfIndex, cadIfCmtsCmFailedProfStatusTable=cadIfCmtsCmFailedProfStatusTable, cadIf3CsNumStartDhcpv6=cadIf3CsNumStartDhcpv6, cadRccStatusValidityCode=cadRccStatusValidityCode, cadCmtsCmRepairEnabled=cadCmtsCmRepairEnabled, cadIf3ChsNumTotal=cadIf3ChsNumTotal, cadCmStatusCountsEventDescription=cadCmStatusCountsEventDescription, cadIf3CmtsCmUsStatusIsMuted=cadIf3CmtsCmUsStatusIsMuted, cadIf3ChsNumDhcpv6Complete=cadIf3ChsNumDhcpv6Complete, cadCmtsCmRegImpairedStatusEntry=cadCmtsCmRegImpairedStatusEntry, cadCmtsCmRepairParamEntry=cadCmtsCmRepairParamEntry)
