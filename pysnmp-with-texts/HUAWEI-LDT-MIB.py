#
# PySNMP MIB module HUAWEI-LDT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-LDT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:46:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, ModuleIdentity, Gauge32, MibIdentifier, Unsigned32, Counter32, Bits, Integer32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Gauge32", "MibIdentifier", "Unsigned32", "Counter32", "Bits", "Integer32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Counter64")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
hwLdtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174))
if mibBuilder.loadTexts: hwLdtMIB.setLastUpdated('200807171700Z')
if mibBuilder.loadTexts: hwLdtMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwLdtMIB.setContactInfo('R&D NanJing, Huawei Technologies co.,Ltd. High hope mansion, Baixia road, Nanjing city Zip:100085 Http://www.huawei.com E-mail:support@huawei.com Zip:100000 ')
if mibBuilder.loadTexts: hwLdtMIB.setDescription('This file is an LDT-MIB. It provides such functions of globally enabling or disabling the LDT function, enabling the global alarm, clearing statistics on ports and configuring work mode and so on.')
hwLdtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1))
hwLdtPortTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 2))
hwLdtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 3))
hwLdtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4))
hwLdtConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1))
hwLdtEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdtEnable.setStatus('current')
if mibBuilder.loadTexts: hwLdtEnable.setDescription('Globally enable or disable the LDT configuration. If the hwLdtEnable is 1, LDT is enabled. If the hwLdtEnable is 2, LDT is disabled. By default, LDT is 2(disabled).')
hwLdtIntervalTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdtIntervalTime.setStatus('current')
if mibBuilder.loadTexts: hwLdtIntervalTime.setDescription('Packet send interval time. By default, the time is 5s.')
hwLdtVlanListLow = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdtVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwLdtVlanListLow.setDescription('The lowest possible value of the vlan list.')
hwLdtVlanListHigh = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdtVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwLdtVlanListHigh.setDescription('The highest possible value of the vlan list.')
hwLdtPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5), )
if mibBuilder.loadTexts: hwLdtPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortConfigTable.setDescription('LDT port congfiguration table.')
hwLdtPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5, 1), ).setIndexNames((0, "HUAWEI-LDT-MIB", "hwLdtInterfaceIndex"))
if mibBuilder.loadTexts: hwLdtPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortConfigEntry.setDescription('Entries of the LDT port congfiguration table.')
hwLdtInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwLdtInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdtInterfaceIndex.setDescription('A unique value, greater than zero, for each interface or interface sub-layer in the managed system. The value is consistent with the ifIndex in ifTable of IF-MIB.')
hwLdtInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdtInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwLdtInterfaceName.setDescription('The interface name.')
hwLdtPortLdtEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdtPortLdtEnable.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortLdtEnable.setDescription('Interface enable or disable. If the hwLdtPortLdtEnable is 1, it is enabled. If the hwLdtPortLdtEnable is 2, it is disabled. By default, it is disabled.')
hwLdtPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("trap", 1), ("blocking", 2), ("noLearning", 3), ("shutdown", 4))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdtPortMode.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortMode.setDescription('Action of Loop detection, including trap, blocking,noLearning,and shutdown. By default the mode is blocking.')
hwLdtPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("blocking", 2), ("noLearning", 3), ("shutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdtPortStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortStatus.setDescription('Port status, including normal, blocking, noLearning, and shutdown. By default the status is normal.')
hwLdtPortRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLdtPortRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortRecoveryTime.setDescription('Port recovery time.By default the time is 1s.')
hwLdtPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 6), )
if mibBuilder.loadTexts: hwLdtPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortStatusTable.setDescription('LDT port status table.')
hwLdtPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-LDT-MIB", "hwLdtInterfaceIndex"), (0, "HUAWEI-LDT-MIB", "hwLdtPortVlanIDIndex"))
if mibBuilder.loadTexts: hwLdtPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortStatusEntry.setDescription('Entries of the LDT port status table.')
hwLdtPortVlanIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 6, 1, 1), VlanId())
if mibBuilder.loadTexts: hwLdtPortVlanIDIndex.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortVlanIDIndex.setDescription('Port enabled vlanId.')
hwLdtPortVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("blocking", 2), ("noLearning", 3), ("shutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLdtPortVlanStatus.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortVlanStatus.setDescription('Port status, including normal, blocking, noLearning, and shutdown. By default the status is normal.')
hwPortLoopDetectTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7), )
if mibBuilder.loadTexts: hwPortLoopDetectTable.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectTable.setDescription('A table containing the port external loopback detection information for device. It can protect the port from external loopback.')
hwPortLoopDetectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-LDT-MIB", "hwPortLoopDetectIfIndex"))
if mibBuilder.loadTexts: hwPortLoopDetectEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectEntry.setDescription('Entries of the port external loopback detection table.')
hwPortLoopDetectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwPortLoopDetectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectIfIndex.setDescription('The port number which will be configured port external loopback detection.')
hwLPortLoopDetectIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLPortLoopDetectIfName.setStatus('current')
if mibBuilder.loadTexts: hwLPortLoopDetectIfName.setDescription('The interface name.')
hwPortLoopDetectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortLoopDetectEnabled.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectEnabled.setDescription("When this object is set to 'enabled(1)' Port external loopback detection is enabled on this port else disabled.")
hwPortLoopDetectRecoveryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortLoopDetectRecoveryTime.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectRecoveryTime.setDescription('The detect period of port external loopback detection, the default value is 0.')
hwPortLoopDetectAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shutdown", 1), ("blocking", 2), ("trap", 3), ("noLearning", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortLoopDetectAction.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectAction.setDescription('The port external loopback detection protect action of this entry.')
hwPortLoopDetectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("blocking", 2), ("shutdown", 3), ("trap", 4), ("noLearning", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortLoopDetectStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectStatus.setDescription('The current status of port(normal/blocking/shutdown/trap/noLearning).')
hwPortLoopDetectProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortLoopDetectProtocol.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectProtocol.setDescription('The ethernet type of the detecting packet to port external loopback detection.')
hwPortLoopDetectVlanLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortLoopDetectVlanLow.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectVlanLow.setDescription('The lowest value of the vlan list for detecting loop.')
hwPortLoopDetectVlanHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwPortLoopDetectVlanHigh.setStatus('current')
if mibBuilder.loadTexts: hwPortLoopDetectVlanHigh.setDescription('The highest value of the vlan list for detecting loop.')
hwLoopDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoopDetectInterval.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectInterval.setDescription('The detect period of system external loopback detection, the default value is 5 second.')
hwLoopDetectSendingPacketInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwLoopDetectSendingPacketInterval.setStatus('current')
if mibBuilder.loadTexts: hwLoopDetectSendingPacketInterval.setDescription('The period of sending detecting packet, the default value is 5 second.')
hwLdtPortLoopVlanListLow = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdtPortLoopVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortLoopVlanListLow.setDescription('The lowest possible value of the vlan list for discovering loop.')
hwLdtPortLoopVlanListHigh = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdtPortLoopVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortLoopVlanListHigh.setDescription('The highest possible value of the vlan list for discovering loop.')
hwLdtPortRecoverVlanListLow = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdtPortRecoverVlanListLow.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortRecoverVlanListLow.setDescription('The lowest possible value of the vlan list for discovering loop.')
hwLdtPortRecoverVlanListHigh = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdtPortRecoverVlanListHigh.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortRecoverVlanListHigh.setDescription('The highest possible value of the vlan list for discovering loop.')
hwLdtPortLoopDetectVlanList = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLdtPortLoopDetectVlanList.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortLoopDetectVlanList.setDescription('The possible vlan for discovering loop.')
hwLdtPortLoop = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 3, 1)).setObjects(("HUAWEI-LDT-MIB", "hwLdtInterfaceName"), ("HUAWEI-LDT-MIB", "hwLdtPortLoopVlanListLow"), ("HUAWEI-LDT-MIB", "hwLdtPortLoopVlanListHigh"))
if mibBuilder.loadTexts: hwLdtPortLoop.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortLoop.setDescription('Notify the NMS that the LDT detected Loop.hwLdtInterfaceName node is interface name, hwLdtPortLoopVlanlistLow node is The lowest possible value of the vlan list, hwLdtPortLoopVlanlistHigh node is The highest possible value of the vlan list.')
hwLdtPortRecovry = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 3, 2)).setObjects(("HUAWEI-LDT-MIB", "hwLdtInterfaceName"), ("HUAWEI-LDT-MIB", "hwLdtPortRecoverVlanListLow"), ("HUAWEI-LDT-MIB", "hwLdtPortRecoverVlanListHigh"))
if mibBuilder.loadTexts: hwLdtPortRecovry.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortRecovry.setDescription('Notify the NMS that the LDT detected resuming port.hwLdtInterfaceName node is interface index, hwLdtPortRecoverVlanlistLow node is The lowest possible value of the vlan list, hwLdtPortRecoverVlanlistHigh node is The highest possible value of the vlan list.')
hwLdtPortLoopDetect = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 3, 3)).setObjects(("HUAWEI-LDT-MIB", "hwLPortLoopDetectIfName"), ("HUAWEI-LDT-MIB", "hwLdtPortLoopDetectVlanList"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectStatus"))
if mibBuilder.loadTexts: hwLdtPortLoopDetect.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortLoopDetect.setDescription('Notify the NMS that Loopback does exist on this port, hwLdtPortLoopDetectVlanList node indicates that which VLAN exits loopback, hwPortLoopDetectStatus node is the status of this port.')
hwLdtPortLoopDetectRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 3, 4)).setObjects(("HUAWEI-LDT-MIB", "hwLPortLoopDetectIfName"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectStatus"))
if mibBuilder.loadTexts: hwLdtPortLoopDetectRecovery.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortLoopDetectRecovery.setDescription('Notify the NMS that Loopback disappeared on this port.')
hwLdtConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4, 1))
hwLdtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4, 2))
hwLdtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4, 1, 1)).setObjects(("HUAWEI-LDT-MIB", "hwLdtConfigGroup"), ("HUAWEI-LDT-MIB", "hwLdtPortConfigGroup"), ("HUAWEI-LDT-MIB", "hwLdtTrapPortGroup"), ("HUAWEI-LDT-MIB", "hwLdtTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdtCompliance = hwLdtCompliance.setStatus('current')
if mibBuilder.loadTexts: hwLdtCompliance.setDescription('The compliance statement for SNMP entities which implement the HUAWEI-LDT-MIB.')
hwLdtConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4, 2, 1)).setObjects(("HUAWEI-LDT-MIB", "hwLdtEnable"), ("HUAWEI-LDT-MIB", "hwLdtIntervalTime"), ("HUAWEI-LDT-MIB", "hwLdtVlanListLow"), ("HUAWEI-LDT-MIB", "hwLdtVlanListHigh"), ("HUAWEI-LDT-MIB", "hwLoopDetectInterval"), ("HUAWEI-LDT-MIB", "hwLoopDetectSendingPacketInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdtConfigGroup = hwLdtConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdtConfigGroup.setDescription('The collection of objects which are used to configure the LDT implementation behavior. This group is mandatory for agents which implement the LDT.')
hwLdtPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4, 2, 2)).setObjects(("HUAWEI-LDT-MIB", "hwLdtPortLdtEnable"), ("HUAWEI-LDT-MIB", "hwLdtInterfaceName"), ("HUAWEI-LDT-MIB", "hwLdtPortMode"), ("HUAWEI-LDT-MIB", "hwLdtPortStatus"), ("HUAWEI-LDT-MIB", "hwLdtPortRecoveryTime"), ("HUAWEI-LDT-MIB", "hwLPortLoopDetectIfName"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectEnabled"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectRecoveryTime"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectAction"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectStatus"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectProtocol"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectVlanLow"), ("HUAWEI-LDT-MIB", "hwPortLoopDetectVlanHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdtPortConfigGroup = hwLdtPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdtPortConfigGroup.setDescription('The collection of objects indicate information of port.')
hwLdtTrapPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4, 2, 3)).setObjects(("HUAWEI-LDT-MIB", "hwLdtPortLoopVlanListLow"), ("HUAWEI-LDT-MIB", "hwLdtPortLoopVlanListHigh"), ("HUAWEI-LDT-MIB", "hwLdtPortRecoverVlanListLow"), ("HUAWEI-LDT-MIB", "hwLdtPortRecoverVlanListHigh"), ("HUAWEI-LDT-MIB", "hwLdtPortLoopDetectVlanList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdtTrapPortGroup = hwLdtTrapPortGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdtTrapPortGroup.setDescription('The collection of notifications used to indicate HUAWEI-LDT-MIB data consistency and general status information.')
hwLdtTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 174, 4, 2, 4)).setObjects(("HUAWEI-LDT-MIB", "hwLdtPortLoop"), ("HUAWEI-LDT-MIB", "hwLdtPortRecovry"), ("HUAWEI-LDT-MIB", "hwLdtPortLoopDetect"), ("HUAWEI-LDT-MIB", "hwLdtPortLoopDetectRecovery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLdtTrapGroup = hwLdtTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwLdtTrapGroup.setDescription('The collection of notifications used to indicate HUAWEI-LDT-MIB data consistency and general status information.')
mibBuilder.exportSymbols("HUAWEI-LDT-MIB", hwLoopDetectInterval=hwLoopDetectInterval, hwLdtTraps=hwLdtTraps, hwLdtInterfaceIndex=hwLdtInterfaceIndex, hwPortLoopDetectIfIndex=hwPortLoopDetectIfIndex, hwLdtPortMode=hwLdtPortMode, hwLdtPortLoopVlanListHigh=hwLdtPortLoopVlanListHigh, hwLdtPortLoopDetectVlanList=hwLdtPortLoopDetectVlanList, hwPortLoopDetectProtocol=hwPortLoopDetectProtocol, hwLdtMIB=hwLdtMIB, hwLdtPortLdtEnable=hwLdtPortLdtEnable, hwLdtEnable=hwLdtEnable, hwPortLoopDetectRecoveryTime=hwPortLoopDetectRecoveryTime, hwLoopDetectSendingPacketInterval=hwLoopDetectSendingPacketInterval, hwPortLoopDetectEnabled=hwPortLoopDetectEnabled, hwLdtPortTrapObjects=hwLdtPortTrapObjects, hwPortLoopDetectAction=hwPortLoopDetectAction, hwLdtTrapPortGroup=hwLdtTrapPortGroup, hwLdtObjects=hwLdtObjects, hwLdtPortLoop=hwLdtPortLoop, hwLdtCompliance=hwLdtCompliance, hwPortLoopDetectVlanHigh=hwPortLoopDetectVlanHigh, hwLPortLoopDetectIfName=hwLPortLoopDetectIfName, hwLdtVlanListHigh=hwLdtVlanListHigh, hwLdtPortLoopDetectRecovery=hwLdtPortLoopDetectRecovery, hwPortLoopDetectEntry=hwPortLoopDetectEntry, hwLdtPortStatusTable=hwLdtPortStatusTable, hwLdtPortRecovry=hwLdtPortRecovry, hwLdtTrapGroup=hwLdtTrapGroup, hwLdtVlanListLow=hwLdtVlanListLow, hwLdtPortConfigTable=hwLdtPortConfigTable, hwLdtIntervalTime=hwLdtIntervalTime, hwLdtPortRecoverVlanListLow=hwLdtPortRecoverVlanListLow, hwLdtPortRecoverVlanListHigh=hwLdtPortRecoverVlanListHigh, hwLdtConfiguration=hwLdtConfiguration, hwLdtPortLoopVlanListLow=hwLdtPortLoopVlanListLow, hwLdtPortConfigEntry=hwLdtPortConfigEntry, hwPortLoopDetectTable=hwPortLoopDetectTable, hwLdtGroups=hwLdtGroups, hwLdtConfigGroup=hwLdtConfigGroup, hwLdtPortVlanIDIndex=hwLdtPortVlanIDIndex, hwLdtConformance=hwLdtConformance, hwLdtPortRecoveryTime=hwLdtPortRecoveryTime, hwLdtInterfaceName=hwLdtInterfaceName, hwPortLoopDetectStatus=hwPortLoopDetectStatus, hwLdtPortConfigGroup=hwLdtPortConfigGroup, hwLdtPortStatusEntry=hwLdtPortStatusEntry, hwLdtPortVlanStatus=hwLdtPortVlanStatus, hwLdtPortStatus=hwLdtPortStatus, hwLdtConformances=hwLdtConformances, hwLdtPortLoopDetect=hwLdtPortLoopDetect, hwPortLoopDetectVlanLow=hwPortLoopDetectVlanLow, PYSNMP_MODULE_ID=hwLdtMIB)
